<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-13T01:32:35Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lbl8603/vnt</title>
    <updated>2024-04-13T01:32:35Z</updated>
    <id>tag:github.com,2024-04-13:/lbl8603/vnt</id>
    <link href="https://github.com/lbl8603/vnt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A virtual network tool (or VPN),简便高效的异地组网、内网穿透工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vnt&lt;/h1&gt; &#xA;&lt;p&gt;A virtual network tool (VPN)&lt;/p&gt; &#xA;&lt;p&gt;将不同网络下的多个设备虚拟到一个局域网下&lt;/p&gt; &#xA;&lt;h3&gt;vnt-cli参数详解 &lt;a href=&#34;https://github.com/lbl8603/vnt/raw/main/vnt-cli/README.md&#34;&gt;参数说明&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;快速使用：&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;指定一个token，在多台设备上运行该程序，例如：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  # linux上&#xA;  root@DESKTOP-0BCHNIO:/opt# ./vnt-cli -k 123456&#xA;  # 在另一台linux上使用nohup后台运行&#xA;  root@izj6cemne76ykdzkataftfz vnt# nohup ./vnt-cli -k 123456 &amp;amp;&#xA;  # windows上&#xA;  D:\vnt\bin_v1&amp;gt;vnt-cli.exe -k 123456&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以执行info命令查看当前设备的虚拟ip&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; root@DESKTOP-0BCHNIO:/opt# ./vnt-cli --info&#xA; Name: Ubuntu 18.04 (bionic) [64-bit]&#xA; Virtual ip: 10.26.0.2&#xA; Virtual gateway: 10.26.0.1&#xA; Virtual netmask: 255.255.255.0&#xA; Connection status: Connected&#xA; NAT type: Cone&#xA; Relay server: 43.139.56.10:29871&#xA; Public ips: 120.228.76.75&#xA; Local ip: 172.25.165.58&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;也可以执行list命令查看其他设备的虚拟ip&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; root@DESKTOP-0BCHNIO:/opt# ./vnt-cli --list&#xA; Name                                                       Virtual Ip      P2P/Relay      Rt      Status&#xA; Windows 10.0.22621 (Windows 11 Professional) [64-bit]      10.26.0.3       p2p            2       Online&#xA; CentOS 7.9.2009 (Core) [64-bit]                            10.26.0.4       p2p            35      Online&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;最后可以用虚拟ip实现设备间相互访问&lt;/p&gt; &lt;img width=&#34;506&#34; alt=&#34;ssh&#34; src=&#34;https://raw.githubusercontent.com/lbl8603/vnt/dev/documents/img/ssh.jpg&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;帮助，使用-h命令查看&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;更多玩法&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;和远程桌面(如mstsc)搭配，超低延迟的体验&lt;/li&gt; &#xA; &lt;li&gt;安装samba服务，共享磁盘&lt;/li&gt; &#xA; &lt;li&gt;搭配公网服务器nginx反向代理，在公网访问内网文件或服务&lt;/li&gt; &#xA; &lt;li&gt;点对网,访问内网其他机器、IP代理(结合启动参数&#39;-i&#39;和&#39;-o&#39;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;使用须知&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;token的作用是标识一个虚拟局域网，当使用公共服务器时，建议使用一个唯一值当token(比如uuid)，否则有可能连接到其他人创建的虚拟局域网中&lt;/li&gt; &#xA; &lt;li&gt;默认使用公共服务器做注册和中继，目前的配置是2核4G 4Mbps，有需要再扩展~&lt;/li&gt; &#xA; &lt;li&gt;需要root/管理员权限&lt;/li&gt; &#xA; &lt;li&gt;vnt-cli需要使用命令行运行&lt;/li&gt; &#xA; &lt;li&gt;Mac和Linux下需要加可执行权限(例如:chmod +x ./vnt-cli)&lt;/li&gt; &#xA; &lt;li&gt;可以自己搭注册和中继服务器(&lt;a href=&#34;https://github.com/lbl8603/vnts&#34;&gt;server&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;vnt使用stun服务器探测网络NAT类型，默认使用谷歌和腾讯的stun服务器，也可自己搭建(-e参数指定)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;编译&lt;/h3&gt; &#xA;&lt;p&gt;前提条件:安装rust编译环境(&lt;a href=&#34;https://www.rust-lang.org/zh-CN/tools/install&#34;&gt;install rust&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;到项目根目录下执行 cargo build -p vnt-cli&#xA;&#xA;也可按需编译，将得到更小的二进制文件，使用--no-default-features排除默认features&#xA;&#xA;cargo build -p vnt-cli --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;features说明&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;feature&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;是否默认&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openssl&lt;/td&gt; &#xA;   &lt;td&gt;使用openssl中的aes_ecb算法&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openssl-vendored&lt;/td&gt; &#xA;   &lt;td&gt;从源码编译openssl&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ring-cipher&lt;/td&gt; &#xA;   &lt;td&gt;使用ring中的aes_gcm算法&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;aes_cbc&lt;/td&gt; &#xA;   &lt;td&gt;支持aes_cbc加密&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;aes_ecb&lt;/td&gt; &#xA;   &lt;td&gt;支持aes_ecb加密&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;aes_gcm&lt;/td&gt; &#xA;   &lt;td&gt;支持aes_gcm加密&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sm4_cbc&lt;/td&gt; &#xA;   &lt;td&gt;支持sm4_cbc加密&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;server_encrypt&lt;/td&gt; &#xA;   &lt;td&gt;支持服务端加密&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ip_proxy&lt;/td&gt; &#xA;   &lt;td&gt;内置ip代理&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ip转发/代理&lt;/h3&gt; &#xA;&lt;p&gt;如果编译时去除了内置的ip代理(或使用--no-proxy关闭了代理)，则可以使用网卡NAT转发来实现点对网， 一般来说使用网卡NAT转发会比内置的ip代理性能更好&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;NAT配置可参考如下示例,点击展开&lt;/summary&gt; &#xA; &lt;h3&gt;在出口一端做如下配置&lt;/h3&gt; &#xA; &lt;p&gt;注意原有的-i(入口)和-o(出口)的参数不能少&lt;/p&gt; &#xA; &lt;h3&gt;windows&lt;/h3&gt; &#xA; &lt;p&gt;参考 &lt;a href=&#34;https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/user-guide/setup-nat-network&#34;&gt;https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/user-guide/setup-nat-network&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#设置nat,名字可以自己取，网段是vnt的网段&#xA;New-NetNat -Name vntnat -InternalIPInterfaceAddressPrefix 10.26.0.0/24&#xA;#查看设置&#xA;Get-NetNat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;linux&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 开启ip转发&#xA;sudo sysctl -w net.ipv4.ip_forward=1&#xA;# 开启nat转发  表示来源10.26.0.0/24的数据通过nat映射后再从vnt-tun以外的其他网卡发出去&#xA;sudo iptables -t nat -A POSTROUTING ! -o vnt-tun -s 10.26.0.0/24 -j MASQUERADE&#xA;# 或者这样  表示来源10.26.0.0/24的数据通过nat映射后再从eth0网卡发出去&#xA;sudo iptables -t nat -A POSTROUTING  -o eth0 -s 10.26.0.0/24 -j MASQUERADE&#xA;# 查看设置&#xA;iptables -vnL -t nat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://repology.org/project/vnt/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/vnt.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;通过 AUR 安装 &lt;a href=&#34;https://aur.archlinux.org/packages/vnt-git&#34;&gt;vnt-git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yay -Syu vnt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;通过 &lt;code&gt;systemd&lt;/code&gt; 设置开机自启及配置&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable --now vnt-cli@&#xA;sudo systemctl status vnt-cli@&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;启用内置 &lt;code&gt;IPv4&lt;/code&gt; 转发规则&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo sysctl --system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;通过内置防火墙文件配置防火墙转发规则&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cat /etc/vnt/iptables-vnt.rules &amp;gt;&amp;gt; /etc/iptables/iptables.rules&#xA;sudo iptables-restore iptables.rules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;macos&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 开启ip转发&#xA;sudo sysctl -w net.ipv4.ip_forward=1&#xA;# 配置NAT转发规则&#xA;# 在/etc/pf.conf文件中添加以下规则,en0是出口网卡，10.26.0.0/24是来源网段&#xA;nat on en0 from 10.26.0.0/24 to any -&amp;gt; (en0)&#xA;# 加载规则&#xA;sudo pfctl -f /etc/pf.conf -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;支持平台&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac&lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux &lt;code&gt;yay -Syu vnt&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;默认使用tun网卡 依赖wintun.dll(&lt;a href=&#34;https://www.wintun.net/&#34;&gt;win-tun&lt;/a&gt;)(将dll放到同目录下，建议使用版本0.14.1)&lt;/li&gt; &#xA;   &lt;li&gt;使用tap网卡 依赖tap-windows(&lt;a href=&#34;https://build.openvpn.net/downloads/releases/&#34;&gt;win-tap&lt;/a&gt;)(建议使用版本9.24.7)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Android &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lbl8603/VntApp&#34;&gt;VntApp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;特性&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IP层数据转发 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;tun虚拟网卡&lt;/li&gt; &#xA;   &lt;li&gt;tap虚拟网卡&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;NAT穿透 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;点对点穿透&lt;/li&gt; &#xA;   &lt;li&gt;服务端中继转发&lt;/li&gt; &#xA;   &lt;li&gt;客户端中继转发&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;IP代理&lt;/li&gt; &#xA; &lt;li&gt;p2p组播/广播&lt;/li&gt; &#xA; &lt;li&gt;客户端数据加密&lt;/li&gt; &#xA; &lt;li&gt;服务端数据加密&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;结构&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;展开&lt;/summary&gt; &#xA; &lt;pre&gt;&#xA;    &#xA;   0                                            15                                              31&#xA;   0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1&#xA;  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;  |e |s |unused| 版本(4)  |      协议(8)        |     上层协议(8)        |初始ttl(4)|生存时间(4)  |&#xA;  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;  |                                        源ip地址(32)                                         |&#xA;  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;  |                                        目的ip地址(32)                                       |&#xA;  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;  |                                          数据体(n)                                          |&#xA;  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;  |                                                                                             |&#xA;  |                                          指纹(96)                                           |&#xA;  |                                                                                             |&#xA;  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;  注：&#xA;  1. e为是否加密标志，s为服务端通信包标志，unused占两位未使用；&#xA;  2. 开启加密时，数据体为加密后的密文(加密方式取决于密码长度和加密模式)，&#xA;     且会存在指纹，指纹使用sha256生成，用于对数据包完整性和真实性的校验&#xA;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Todo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;桌面UI(测试中)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;常见问题&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;展开&lt;/summary&gt; &#xA; &lt;h4&gt;问题1: 设置网络地址失败&lt;/h4&gt; &#xA; &lt;h5&gt;可能原因:&lt;/h5&gt; &#xA; &lt;p&gt;vnt默认使用10.26.0.0/24网段，和本地网络适配器的ip冲突&lt;/p&gt; &#xA; &lt;h5&gt;解决方法:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;方法一：找到冲突的IP，将其改成别的&lt;/li&gt; &#xA;  &lt;li&gt;方法二：自建服务器，指定其他不会冲突的网段&lt;/li&gt; &#xA;  &lt;li&gt;方法三：增加参数-d &#xA;   &lt;device-id&gt;&#xA;     ，设置不同的id会让服务端分配不同的IP，从而绕开有冲突的IP&#xA;   &lt;/device-id&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;问题2: windows系统上wintun.dll加载失败&lt;/h4&gt; &#xA; &lt;h5&gt;可能原因：&lt;/h5&gt; &#xA; &lt;p&gt;没有下载wintun.dll 或者使用的wintun.dll有问题&lt;/p&gt; &#xA; &lt;h5&gt;解决方法：&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;下载最新版的wintun.dll &lt;a href=&#34;https://www.wintun.net/builds/wintun-0.14.1.zip&#34;&gt;下载链接&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;解压后找到对应架构的目录,通常是amd64&lt;/li&gt; &#xA;  &lt;li&gt;将对应的wintun.dll放到和vnt-cli同目录下（或者放到C盘Windows目录下）&lt;/li&gt; &#xA;  &lt;li&gt;再次启动vnt-cli&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;问题3: 丢包严重，或是不能正常组网通信&lt;/h4&gt; &#xA; &lt;h5&gt;可能原因：&lt;/h5&gt; &#xA; &lt;p&gt;某些宽带下(比如广电宽带)UDP丢包严重&lt;/p&gt; &#xA; &lt;h5&gt;解决方法：&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;使用TCP模式中继转发（vnt-cli增加--tcp参数）&lt;/li&gt; &#xA;  &lt;li&gt;如果p2p后效果很差，可以选择禁用p2p（vnt-cli增加--use-channel relay 参数）&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h4&gt;问题4：重启后虚拟IP发生变化，或指定了IP不能启动&lt;/h4&gt; &#xA; &lt;h5&gt;可能原因：&lt;/h5&gt; &#xA; &lt;p&gt;设备重启后程序自动获取的id值改变，导致注册时重新分配了新的IP，或是IP冲突&lt;/p&gt; &#xA; &lt;h5&gt;解决方法：&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;命令行启动增加-d参数（使用配置文件启动则在配置文件中增加device_id参数），要保证每个设备的值都不一样，取值可以任意64位以内字符串&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;交流群&lt;/h3&gt; &#xA;&lt;p&gt;QQ: 1034868233&lt;/p&gt; &#xA;&lt;h3&gt;其他&lt;/h3&gt; &#xA;&lt;p&gt;可使用社区小伙伴搭建的中继服务器&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;-s vnt.8443.eu.org:29871&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;参与贡献&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/lbl8603/vnt/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=lbl8603/vnt&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>LibNyanpasu/clash-nyanpasu</title>
    <updated>2024-04-13T01:32:35Z</updated>
    <id>tag:github.com,2024-04-13:/LibNyanpasu/clash-nyanpasu</id>
    <link href="https://github.com/LibNyanpasu/clash-nyanpasu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clash Nyanpasu～(∠・ω&lt; )⌒☆&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LibNyanpasu/clash-nyanpasu/main/frontend/nyanpasu/src/assets/image/logo.png&#34; alt=&#34;Clash&#34; width=&#34;128&#34;&gt; &lt;br&gt; Clash Nyanpasu &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; A &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash&lt;/a&gt; GUI based on &lt;a href=&#34;https://github.com/tauri-apps/tauri&#34;&gt;tauri&lt;/a&gt;. &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/LibNyanpasu/clash-nyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/releases/pre-release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/LibNyanpasu/clash-nyanpasu/dev.yaml?style=flat-square&#34; alt=&#34;Dev Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/LibNyanpasu/clash-nyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/LibNyanpasu/clash-nyanpasu/total?style=flat-square&#34; alt=&#34;GitHub Downloads (all assets, all releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/LibNyanpasu/clash-nyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/ClashNyanpasu&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ClashNyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu Twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full &lt;code&gt;clash&lt;/code&gt; config supported, Partial &lt;code&gt;clash premium&lt;/code&gt; config supported.&lt;/li&gt; &#xA; &lt;li&gt;Built-in support &lt;a href=&#34;https://github.com/MetaCubeX/mihomo&#34;&gt;Clash.Meta&lt;/a&gt; core &amp;amp; &lt;a href=&#34;https://github.com/Watfaq/clash-rs&#34;&gt;ClashRs&lt;/a&gt; core.&lt;/li&gt; &#xA; &lt;li&gt;Profiles management and enhancement (by yaml and Javascript). &lt;a href=&#34;https://nyanpasu.elaina.moe/tutorial/proxy-chain.html&#34;&gt;Doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Material You Design UI and amimation support.&lt;/li&gt; &#xA; &lt;li&gt;System proxy setting and guard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LibNyanpasu/clash-nyanpasu/main/docs/preview.gif&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/tutorial/install.html&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/others/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/others/issues.html&#34;&gt;Q&amp;amp;A Convention&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/others/how-to-ask.html&#34;&gt;How To Ask Questions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Configure your development environment&lt;/h3&gt; &#xA;&lt;p&gt;You should install Rust and Nodejs, see &lt;a href=&#34;https://tauri.app/v1/guides/getting-started/prerequisites&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Clash Nyanpasu uses the pnpm package manager. See &lt;a href=&#34;https://pnpm.io/installation&#34;&gt;here&lt;/a&gt; for installation instructions. Then, install Node.js packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download the Clash binary &amp;amp; other dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# force update to latest version&#xA;# pnpm check --force&#xA;&#xA;pnpm check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run dev&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm dev&#xA;&#xA;# run it in another way if app instance exists&#xA;pnpm dev:diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build application&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Issue and PR welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Clash Nyanpasu was based on or inspired by these projects and so on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zzzgydi/clash-verge&#34;&gt;zzzgydi/clash-verge&lt;/a&gt;: A Clash GUI based on tauri. Supports Windows, macOS and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clash-verge-rev/clash-verge-rev&#34;&gt;clash-verge-rev/clash-verge-rev&lt;/a&gt;: Another fork of Clash Verge. Some patches are included for bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tauri-apps/tauri&#34;&gt;tauri-apps/tauri&lt;/a&gt;: Build smaller, faster, and more secure desktop applications with a web frontend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Dreamacro/clash&lt;/a&gt;: A rule-based tunnel in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetaCubeX/mihomo&#34;&gt;MetaCubeX/Clash.Meta&lt;/a&gt;: A rule-based tunnel in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Watfaq/clash-rs&#34;&gt;ClashRs&lt;/a&gt;: A custom protocol, rule based network proxy software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fndroid/clash_for_windows_pkg&#34;&gt;Fndroid/clash_for_windows_pkg&lt;/a&gt;: A Windows/macOS GUI based on Clash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitejs/vite&#34;&gt;vitejs/vite&lt;/a&gt;: Next generation frontend tooling. It&#39;s fast!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mui/material-ui&#34;&gt;mui/material-ui&lt;/a&gt;: Ready-to-use foundational React components, free forever.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=LibNyanpasu/clash-nyanpasu&#34; alt=&#34;Contributors&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPL-3.0 License. See &lt;a href=&#34;https://raw.githubusercontent.com/LibNyanpasu/clash-nyanpasu/main/LICENSE&#34;&gt;License here&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ninja-quant/ninjabook</title>
    <updated>2024-04-13T01:32:35Z</updated>
    <id>tag:github.com,2024-04-13:/ninja-quant/ninjabook</id>
    <link href="https://github.com/ninja-quant/ninjabook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight and high-performance order-book designed to process level 2 and trades data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ninjabook&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/ninjabook&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/ninjabook.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/ninjabook&#34;&gt;&lt;img src=&#34;https://docs.rs/ninjabook/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ninja-quant/ninjabook/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ninja-quant/ninjabook&#34;&gt;&lt;img src=&#34;https://shields.io/badge/rust-1.77.2%2B-blue.svg?sanitize=true&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lightweight and high-performance order-book designed to process level 2 and trades data.&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Ran a couple of benchmarks showcasing real case scenarios against a naive &lt;code&gt;Vec&lt;/code&gt; implementation and orderbook with fixed sizes of 100 and 500 levels.&lt;/p&gt; &#xA;&lt;p&gt;The benchmarks are run with &lt;a href=&#34;https://github.com/ninja-quant/ninjabook/raw/main/data/norm_book_data_300k.csv&#34;&gt;300,000 events of level 2 orderbook data&lt;/a&gt; . This data is split in 2 chunks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First 200,000 events are used to warm up.&lt;/li&gt; &#xA; &lt;li&gt;Last 100,000 for the actual benchmark.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The scenarios tested are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Process events and stream best bid and ask&lt;/li&gt; &#xA; &lt;li&gt;Process events and stream top5 bids and asks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are the results:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;bench&lt;/th&gt; &#xA;   &lt;th&gt;iterations&lt;/th&gt; &#xA;   &lt;th&gt;time&lt;/th&gt; &#xA;   &lt;th&gt;ns/iter&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninjabook_bbo&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;9.1093 ms&lt;/td&gt; &#xA;   &lt;td&gt;91.093 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fixed_100_bbo&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;14.253 ms&lt;/td&gt; &#xA;   &lt;td&gt;142.53 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fixed_500_bbo&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;72.636 ms&lt;/td&gt; &#xA;   &lt;td&gt;726.36 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;naive_bbo&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;263.77 ms&lt;/td&gt; &#xA;   &lt;td&gt;2,637.7 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ninjabook_top5&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;16.729 ms&lt;/td&gt; &#xA;   &lt;td&gt;167.29 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fixed_100_top5&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;23.532 ms&lt;/td&gt; &#xA;   &lt;td&gt;235.32 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fixed_100_top5&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;81.112 ms&lt;/td&gt; &#xA;   &lt;td&gt;811.12 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;naive_top5&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;   &lt;td&gt;275.40 ms&lt;/td&gt; &#xA;   &lt;td&gt;2,754 ns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;To add a better version, create a new file, implementing the same methods as &lt;code&gt;orderbook.rs&lt;/code&gt; (including tests) and add the improved orderbook to the bench &lt;code&gt;optimal_vs_naive.rs&lt;/code&gt;. Only order books with a better performance than &lt;code&gt;orderbook.rs&lt;/code&gt; will be considered. Lastly, add performance logs to the Pull Request, can just copy paste what &lt;code&gt;cargo bench&lt;/code&gt; outputs.&lt;/p&gt; &#xA;&lt;p&gt;Any issues, refactoring, docs and tests are also welcomed. Feel free to reach out &lt;a href=&#34;https://twitter.com/ninjaquant_&#34;&gt;here&lt;/a&gt; if you have any questions.&lt;/p&gt;</summary>
  </entry>
</feed>