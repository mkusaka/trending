<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-02T01:33:37Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hatoo/oha</title>
    <updated>2024-09-02T01:33:37Z</updated>
    <id>tag:github.com,2024-09-02:/hatoo/oha</id>
    <link href="https://github.com/hatoo/oha" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ohayou(おはよう), HTTP load generator, inspired by rakyll/hey with tui animation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oha (おはよう)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hatoo/oha/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/hatoo/oha/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/oha&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/oha.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/oha/&#34;&gt;&lt;img src=&#34;https://img.shields.io/archlinux/v/extra/x86_64/oha&#34; alt=&#34;Arch Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/oha&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/oha&#34; alt=&#34;Homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/hatoo-oha/community#&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/hatoo/oha&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/hatoo&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;oha is a tiny program that sends some load to a web application and show realtime tui inspired by &lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;rakyll/hey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This program is written in Rust and powered by &lt;a href=&#34;https://github.com/tokio-rs/tokio&#34;&gt;tokio&lt;/a&gt; and beautiful tui by &lt;a href=&#34;https://github.com/ratatui-org/ratatui&#34;&gt;ratatui&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hatoo/oha/master/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;This program is built on stable Rust, with both &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;cmake&lt;/code&gt; prerequisites to install via cargo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally build oha against &lt;a href=&#34;https://github.com/sfackler/rust-native-tls&#34;&gt;native-tls&lt;/a&gt; instead of &lt;a href=&#34;https://github.com/rustls/rustls&#34;&gt;rustls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --no-default-features --features rustls oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can enable VSOCK support by enabling &lt;code&gt;vsock&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --features vsock oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Arch Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On macOS (Homebrew)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Windows (winget)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install hatoo.oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Debian (&lt;a href=&#34;http://packages.azlux.fr/&#34;&gt;Azlux&#39;s repository&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ stable main&#34; | sudo tee /etc/apt/sources.list.d/azlux.list&#xA;sudo wget -O /usr/share/keyrings/azlux-archive-keyring.gpg https://azlux.fr/repo.gpg&#xA;apt update&#xA;apt install oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Containerized&lt;/h2&gt; &#xA;&lt;p&gt;You can also build and create a container image including oha&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build . -t example.com/hatoo/oha:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use oha directly through the container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it example.com/hatoo/oha:latest https://example.com:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profile-Guided Optimization (PGO)&lt;/h2&gt; &#xA;&lt;p&gt;You can build &lt;code&gt;oha&lt;/code&gt; with PGO by using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bun run pgo.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the binary will be available at &lt;code&gt;target/[target-triple]/pgo/oha&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Platform&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux - Tested on Ubuntu 18.04 gnome-terminal&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 - Tested on Windows Powershell&lt;/li&gt; &#xA; &lt;li&gt;MacOS - Tested on iTerm2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;-q&lt;/code&gt; option works different from &lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;rakyll/hey&lt;/a&gt;. It&#39;s set overall query per second instead of for each workers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Ohayou(おはよう), HTTP load generator, inspired by rakyll/hey with tui animation.&#xA;&#xA;Usage: oha [FLAGS] [OPTIONS] &amp;lt;url&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;URL&amp;gt;  Target URL.&#xA;&#xA;Options:&#xA;  -n &amp;lt;N_REQUESTS&amp;gt;&#xA;          Number of requests to run. [default: 200]&#xA;  -c &amp;lt;N_CONNECTIONS&amp;gt;&#xA;          Number of connections to run concurrently. You may should increase limit to number of open files for larger `-c`. [default: 50]&#xA;  -p &amp;lt;N_HTTP2_PARALLEL&amp;gt;&#xA;          Number of parallel requests to send on HTTP/2. `oha` will run c * p concurrent workers in total. [default: 1]&#xA;  -z &amp;lt;DURATION&amp;gt;&#xA;          Duration of application to send requests. If duration is specified, n is ignored.&#xA;          On HTTP/1, When the duration is reached, ongoing requests are aborted and counted as &#34;aborted due to deadline&#34;&#xA;          You can change this behavior with `-w` option.&#xA;          Currently, on HTTP/2, When the duration is reached, ongoing requests are waited. `-w` option is ignored.&#xA;          Examples: -z 10s -z 3m.&#xA;  -w, --wait-ongoing-requests-after-deadline&#xA;          When the duration is reached, ongoing requests are waited&#xA;  -q &amp;lt;QUERY_PER_SECOND&amp;gt;&#xA;          Rate limit for all, in queries per second (QPS)&#xA;      --burst-delay &amp;lt;BURST_DURATION&amp;gt;&#xA;          Introduce delay between a predefined number of requests.&#xA;          Note: If qps is specified, burst will be ignored&#xA;      --burst-rate &amp;lt;BURST_REQUESTS&amp;gt;&#xA;          Rates of requests for burst. Default is 1&#xA;          Note: If qps is specified, burst will be ignored&#xA;      --rand-regex-url&#xA;          Generate URL by rand_regex crate but dot is disabled for each query e.g. http://127.0.0.1/[a-z][a-z][0-9]. Currently dynamic scheme, host and port with keep-alive are not works well. See https://docs.rs/rand_regex/latest/rand_regex/struct.Regex.html for details of syntax.&#xA;      --max-repeat &amp;lt;MAX_REPEAT&amp;gt;&#xA;          A parameter for the &#39;--rand-regex-url&#39;. The max_repeat parameter gives the maximum extra repeat counts the x*, x+ and x{n,} operators will become. [default: 4]&#xA;      --dump-urls &amp;lt;DUMP_URLS&amp;gt;&#xA;          Dump target Urls &amp;lt;DUMP_URLS&amp;gt; times to debug --rand-regex-url&#xA;      --latency-correction&#xA;          Correct latency to avoid coordinated omission problem. It&#39;s ignored if -q is not set.&#xA;      --no-tui&#xA;          No realtime tui&#xA;  -j, --json&#xA;          Print results as JSON&#xA;      --fps &amp;lt;FPS&amp;gt;&#xA;          Frame per second for tui. [default: 16]&#xA;  -m, --method &amp;lt;METHOD&amp;gt;&#xA;          HTTP method [default: GET]&#xA;  -H &amp;lt;HEADERS&amp;gt;&#xA;          Custom HTTP header. Examples: -H &#34;foo: bar&#34;&#xA;  -t &amp;lt;TIMEOUT&amp;gt;&#xA;          Timeout for each request. Default to infinite.&#xA;  -A &amp;lt;ACCEPT_HEADER&amp;gt;&#xA;          HTTP Accept Header.&#xA;  -d &amp;lt;BODY_STRING&amp;gt;&#xA;          HTTP request body.&#xA;  -D &amp;lt;BODY_PATH&amp;gt;&#xA;          HTTP request body from file.&#xA;  -T &amp;lt;CONTENT_TYPE&amp;gt;&#xA;          Content-Type.&#xA;  -a &amp;lt;BASIC_AUTH&amp;gt;&#xA;          Basic authentication, username:password&#xA;      --http-version &amp;lt;HTTP_VERSION&amp;gt;&#xA;          HTTP version. Available values 0.9, 1.0, 1.1.&#xA;      --http2&#xA;          Use HTTP/2. Shorthand for --http-version=2&#xA;      --host &amp;lt;HOST&amp;gt;&#xA;          HTTP Host header&#xA;      --disable-compression&#xA;          Disable compression.&#xA;  -r, --redirect &amp;lt;REDIRECT&amp;gt;&#xA;          Limit for number of Redirect. Set 0 for no redirection. Redirection isn&#39;t supported for HTTP/2. [default: 10]&#xA;      --disable-keepalive&#xA;          Disable keep-alive, prevents re-use of TCP connections between different HTTP requests. This isn&#39;t supported for HTTP/2.&#xA;      --no-pre-lookup&#xA;          *Not* perform a DNS lookup at beginning to cache it&#xA;      --ipv6&#xA;          Lookup only ipv6.&#xA;      --ipv4&#xA;          Lookup only ipv4.&#xA;      --insecure&#xA;          Accept invalid certs.&#xA;      --connect-to &amp;lt;CONNECT_TO&amp;gt;&#xA;          Override DNS resolution and default port numbers with strings like &#39;example.org:443:localhost:8443&#39;&#xA;      --disable-color&#xA;          Disable the color scheme.&#xA;      --unix-socket &amp;lt;UNIX_SOCKET&amp;gt;&#xA;          Connect to a unix socket instead of the domain in the URL. Only for non-HTTPS URLs.&#xA;      --stats-success-breakdown&#xA;          Include a response status code successful or not successful breakdown for the time histogram and distribution statistics&#xA;      --db-url &amp;lt;DB_URL&amp;gt;&#xA;          Write succeeded requests to sqlite database url E.G test.db&#xA;  -h, --help&#xA;          Print help&#xA;  -V, --version&#xA;          Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;JSON output&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;oha&lt;/code&gt; prints JSON output when &lt;code&gt;-j&lt;/code&gt; option is set. The schema of JSON output is defined in &lt;a href=&#34;https://raw.githubusercontent.com/hatoo/oha/master/schema.json&#34;&gt;schema.json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmark&lt;/h1&gt; &#xA;&lt;h2&gt;Performance Comparison&lt;/h2&gt; &#xA;&lt;p&gt;We used &lt;code&gt;hyperfine&lt;/code&gt; for benchmarking &lt;code&gt;oha&lt;/code&gt; against &lt;code&gt;rakyll/hey&lt;/code&gt; on a local server. The server was coded using node. You can start the server by copy pasting this file and then running it via node. After copy-pasting the file, you can run the benchmark via &lt;code&gt;hyperfine&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy-paste the contents into a new javascript file called app.js&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const http = require(&#34;http&#34;);&#xA;&#xA;const server = http.createServer((req, res) =&amp;gt; {&#xA;  res.writeHead(200, { &#34;Content-Type&#34;: &#34;text/plain&#34; });&#xA;&#xA;  res.end(&#34;Hello World\n&#34;);&#xA;});&#xA;&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#34;Server running at http://localhost:3000/&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;node app.js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;hyperfine &#39;oha --no-tui http://localhost:3000&#39; &#39;hey http://localhost:3000&#39;&lt;/code&gt; in a different terminal tab&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Benchmark Results&lt;/h3&gt; &#xA;&lt;p&gt;Benchmark 1: oha --no-tui &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Time (mean ± σ): 10.8 ms ± 1.8 ms [User: 5.7 ms, System: 11.7 ms]&lt;/li&gt; &#xA; &lt;li&gt;Range (min … max): 8.7 ms … 24.8 ms (107 runs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Benchmark 2: hey &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Time (mean ± σ): 14.3 ms ± 4.6 ms [User: 12.2 ms, System: 19.4 ms]&lt;/li&gt; &#xA; &lt;li&gt;Range (min … max): 11.1 ms … 48.3 ms (88 runs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;p&gt;In this benchmark, &lt;code&gt;oha --no-tui http://localhost:3000&lt;/code&gt; was found to be faster, running approximately 1.32 ± 0.48 times faster than &lt;code&gt;hey http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;h2&gt;Stress test in more realistic condition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;oha&lt;/code&gt; uses default options inherited from &lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;rakyll/hey&lt;/a&gt; but you may need to change options to stress test in more realistic condition.&lt;/p&gt; &#xA;&lt;p&gt;I suggest to run &lt;code&gt;oha&lt;/code&gt; with following options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;oha &amp;lt;-z or -n&amp;gt; -c &amp;lt;number of concurrent connections&amp;gt; -q &amp;lt;query per seconds&amp;gt; --latency-correction --disable-keepalive &amp;lt;target-address&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;--disable-keepalive&lt;/p&gt; &lt;p&gt;In real, user doesn&#39;t query same URL using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive&#34;&gt;Keep-Alive&lt;/a&gt;. You may want to run without &lt;code&gt;Keep-Alive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;--latency-correction&lt;/p&gt; &lt;p&gt;You can avoid &lt;code&gt;Coordinated Omission Problem&lt;/code&gt; by using &lt;code&gt;--latency-correction&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Burst feature&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--burst-delay&lt;/code&gt; along with &lt;code&gt;--burst-rate&lt;/code&gt; option to introduce delay between a defined number of requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;oha -n 10 --burst-delay 2s --burst-rate 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this particular scenario, every 2 seconds, 4 requests will be processed, and after 6s the total of 10 requests will be processed. &lt;em&gt;NOTE: If you don&#39;t set &lt;code&gt;--burst-rate&lt;/code&gt; option, the amount is default to 1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic url feature&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--rand-regex-url&lt;/code&gt; option to generate random url for each connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;oha --rand-regex-url http://127.0.0.1/[a-z][a-z][0-9]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each Urls are generated by &lt;a href=&#34;https://github.com/kennytm/rand_regex&#34;&gt;rand_regex&lt;/a&gt; crate but regex&#39;s dot is disabled since it&#39;s not useful for this purpose and it&#39;s very inconvenient if url&#39;s dots are interpreted as regex&#39;s dot.&lt;/p&gt; &#xA;&lt;p&gt;Optionally you can set &lt;code&gt;--max-repeat&lt;/code&gt; option to limit max repeat count for each regex. e.g &lt;a href=&#34;http://127.0.0.1/%5Ba-z%5D&#34;&gt;http://127.0.0.1/[a-z]&lt;/a&gt;* with &lt;code&gt;--max-repeat 4&lt;/code&gt; will generate url like &lt;a href=&#34;http://127.0.0.1/%5Ba-z%5D%7B0,4%7D&#34;&gt;http://127.0.0.1/[a-z]{0,4}&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently dynamic scheme, host and port with keep-alive are not works well.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to help us!&lt;/p&gt; &#xA;&lt;p&gt;Here are some issues to improving.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write tests&lt;/li&gt; &#xA; &lt;li&gt;Improve tui design. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Show more information?&lt;/li&gt; &#xA;   &lt;li&gt;There are no color in realtime tui now. I want help from someone who has some color sense.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Improve speed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I&#39;m new to tokio. I think there are some space to optimize query scheduling.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>