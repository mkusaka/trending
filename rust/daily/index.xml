<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-02T01:40:48Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MutinyWallet/harbor</title>
    <updated>2024-06-02T01:40:48Z</updated>
    <id>tag:github.com,2024-06-02:/MutinyWallet/harbor</id>
    <link href="https://github.com/MutinyWallet/harbor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ecash management tool&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://blog.mutinywallet.com/content/images/size/w2000/2024/05/harbor-preview.jpeg&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;Harbor&lt;/h1&gt; &#xA;&lt;p&gt;Harbor is an ecash desktop wallet for better bitcoin privacy. Use this tool to interact with ecash mints, moving money in and out using existing Bitcoin wallets. As you use mints, you may be able to increase the privacy of your money. Harbor also aims to demystify ecash mints for users and make them easier to use.&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ecash - digital payments privacy technology&lt;/li&gt; &#xA; &lt;li&gt;Bitcoin - on-chain and lightning&lt;/li&gt; &#xA; &lt;li&gt;Privacy - everything runs over tor&lt;/li&gt; &#xA; &lt;li&gt;Multi-mint - spread funds over multiple mints&lt;/li&gt; &#xA; &lt;li&gt;Automation - can run in the background and move your funds automatically&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is alpha software that could rapidly change in feature set. There is risk of losing funds. Compile and run at your own risk.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Harbor is a desktop app built in Rust, using the &lt;a href=&#34;https://iced.rs&#34;&gt;iced&lt;/a&gt; framework, that runs on Mac, Windows, and Linux. It currently supports &lt;a href=&#34;https://fedimint.org&#34;&gt;Fedimint&lt;/a&gt;, Bitcoin, and Lightning. (We see you, Cashu üëÄ)&lt;/p&gt; &#xA;&lt;p&gt;Binaries will be available in the future. For now you need to compile it yourself following the instructions below.&lt;/p&gt; &#xA;&lt;img src=&#34;https://harbor.cash/screens/home.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the &lt;code&gt;MutinyWallet/harbor&lt;/code&gt; repo and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone &amp;lt;harbor git URL&amp;gt; harbor&#xA;cd harbor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install NixOS on your machine if you do not have it already.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;‚ö†Ô∏è NOTE: Nix OS support on linux environments is still in progress, this may or may not work for you yet: &lt;a href=&#34;https://github.com/MutinyWallet/harbor/issues/7&#34;&gt;https://github.com/MutinyWallet/harbor/issues/7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install&#xA;// Follow any Nix installation instructions in the terminal, including post install steps.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Everything is done in a nix develop shell for now:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the unit tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;just test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Build and Run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you&#39;re on linux you may need to exit the nix shell to be able to run the program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// debug build&#xA;just run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;// release build&#xA;just release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The first password you type in the box is saved as your password. There will be a proper onboarding workflow in the future.&lt;/p&gt; &#xA;&lt;h4&gt;Database Changes&lt;/h4&gt; &#xA;&lt;p&gt;Reset local DB (for init, schema generation, etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;just reset-db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback &amp;amp; Support&lt;/h2&gt; &#xA;&lt;p&gt;A product like this is unique. We need all the feedback, help, and support we can get. We believe in building a tool like this out in the open as fully open-sourced MIT code that is freely available and does not depend on a centralized coordinator or single developer. However, we&#39;re unable to gain insights into how people use this tool, whether users like it or how many users even exist.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, we need your help. For one, we need feedback. Do you want to use a tool like this? What features are most important to you, and what do you want? Please use the discussion boards here on GitHub or the &lt;a href=&#34;https://discord.gg/5fFBKkcW&#34;&gt;Harbor channel on our Discord&lt;/a&gt;. This will primarily drive the Harbor feature set.&lt;/p&gt; &#xA;&lt;p&gt;Building free and open-source software is not free to us developers. While we believe in this tool&#39;s mission, we must rely on donations. We cannot profit from transactions for this service, and it must be fully open-sourced for this community to use it.&lt;/p&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;https://geyser.fund/project/harbor&#34;&gt;Geyser funding page&lt;/a&gt;. Any donations are greatly appreciated for funding development and signaling that it&#39;s a valuable tool to you.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Qiskit/rustworkx</title>
    <updated>2024-06-02T01:40:48Z</updated>
    <id>tag:github.com,2024-06-02:/Qiskit/rustworkx</id>
    <link href="https://github.com/Qiskit/rustworkx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high performance Python graph library implemented in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rustworkx&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Qiskit/rustworkx.svg?style=popout-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Qiskit/rustworkx/actions/workflows/main.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://travis-ci.com/Qiskit/rustworkx&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/com/Qiskit/rustworkx/main.svg?style=popout-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Qiskit/rustworkx/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Qiskit/rustworkx.svg?style=popout-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/rustworkx/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/rustworkx.svg?style=popout-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Qiskit/rustworkx?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/Qiskit/rustworkx/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-lang.github.io/rfcs/2495-min-rust-version.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rustc-1.70+-blue.svg?sanitize=true&#34; alt=&#34;Minimum rustc 1.70&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.21105/joss.03968&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.03968/status.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2110.15221&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-2110.15221-b31b1b.svg?sanitize=true&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.5281/zenodo.5879859&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Zenodo-10.5281%2Fzenodo.5879859-blue&#34; alt=&#34;Zenodo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can see the full rendered docs at: &lt;a href=&#34;https://www.rustworkx.org/&#34;&gt;https://www.rustworkx.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A high-performance, general-purpose graph library for Python, written in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, simply import &lt;code&gt;rustworkx&lt;/code&gt;. All graph classes and top-level functions are accessible with a single import. To illustrate this, the following example calculates the shortest path between two nodes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; in an undirected graph.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;import rustworkx&#xA;&#xA;# Rustworkx&#39;s undirected graph type.&#xA;graph = rustworkx.PyGraph()&#xA;&#xA;# Each time add node is called, it returns a new node index&#xA;a = graph.add_node(&#34;A&#34;)&#xA;b = graph.add_node(&#34;B&#34;)&#xA;c = graph.add_node(&#34;C&#34;)&#xA;&#xA;# add_edges_from takes tuples of node indices and weights,&#xA;# and returns edge indices&#xA;graph.add_edges_from([(a, b, 1.5), (a, c, 5.0), (b, c, 2.5)])&#xA;&#xA;# Returns the path A -&amp;gt; B -&amp;gt; C&#xA;rustworkx.dijkstra_shortest_paths(graph, a, c, weight_fn=float)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing rustworkx&lt;/h2&gt; &#xA;&lt;p&gt;rustworkx is published on &lt;a href=&#34;https://pypi.org/project/rustworkx/&#34;&gt;PyPI&lt;/a&gt; so on x86_64, i686, ppc64le, s390x, and aarch64 Linux systems, x86_64 on Mac OSX, and 32 and 64 bit Windows installing is as simple as running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install rustworkx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install a precompiled version of rustworkx into your Python environment.&lt;/p&gt; &#xA;&lt;h3&gt;Installing on a platform without precompiled binaries&lt;/h3&gt; &#xA;&lt;p&gt;If there are no precompiled binaries published for your system you&#39;ll have to build the package from source. However, to be able able to build the package from the published source package you need to have Rust &amp;gt;= 1.70 installed (and also &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;cargo&lt;/a&gt; which is normally included with rust) You can use &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; (a cross platform installer for rust) to make this simpler, or rely on &lt;a href=&#34;https://forge.rust-lang.org/infra/other-installation-methods.html&#34;&gt;other installation methods&lt;/a&gt;. A source package is also published on pypi, so you still can also run the above &lt;code&gt;pip&lt;/code&gt; command to install it. Once you have rust properly installed, running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install rustworkx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will build rustworkx for your local system from the source package and install it just as it would if there was a prebuilt binary available.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; To build from source you will need to ensure you have pip &amp;gt;=19.0.0 installed, which supports PEP-517, or that you have manually installed &lt;code&gt;setuptools-rust&lt;/code&gt; prior to running &lt;code&gt;pip install rustworkx&lt;/code&gt;. If you recieve an error about &lt;code&gt;setuptools-rust&lt;/code&gt; not being found you should upgrade pip with &lt;code&gt;pip install -U pip&lt;/code&gt; or manually install &lt;code&gt;setuptools-rust&lt;/code&gt; with &lt;code&gt;pip install setuptools-rust&lt;/code&gt; and try again.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re planning to use the &lt;code&gt;rustworkx.visualization&lt;/code&gt; module you will need to install optional dependencies to use the functions. The matplotlib based drawer function &lt;code&gt;rustworkx.visualization.mpl_draw&lt;/code&gt; requires that the &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt; library is installed. This can be installed with &lt;code&gt;pip install matplotlib&lt;/code&gt; or when you&#39;re installing rustworkx with &lt;code&gt;pip install &#39;rustworkx[mpl]&#39;&lt;/code&gt;. If you&#39;re going to use the graphviz based drawer function &lt;code&gt;rustworkx.visualization.graphviz_drawer&lt;/code&gt; first you will need to install graphviz, instructions for this can be found here: &lt;a href=&#34;https://graphviz.org/download/#executable-packages&#34;&gt;https://graphviz.org/download/#executable-packages&lt;/a&gt;. Then you will need to install the &lt;a href=&#34;https://python-pillow.org/&#34;&gt;pillow&lt;/a&gt; Python library. This can be done either with &lt;code&gt;pip install pillow&lt;/code&gt; or when installing rustworkx with &lt;code&gt;pip install &#39;rustworkx[graphviz]&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to install all the optional Python dependencies when you install rustworkx you can use &lt;code&gt;pip install &#39;rustworkx[all]&#39;&lt;/code&gt; to do this.&lt;/p&gt; &#xA;&lt;h2&gt;Authors and Citation&lt;/h2&gt; &#xA;&lt;p&gt;rustworkx is the work of &lt;a href=&#34;https://github.com/Qiskit/rustworkx/graphs/contributors&#34;&gt;many people&lt;/a&gt; who contribute to the project at different levels. If you use rustworkx in your research, please cite our &lt;a href=&#34;https://doi.org/10.21105/joss.03968&#34;&gt;paper&lt;/a&gt; as per the included &lt;a href=&#34;https://raw.githubusercontent.com/Qiskit/rustworkx/main/CITATION.bib&#34;&gt;BibTeX file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Besides Github interactions (such as opening issues) there are two locations available to talk to other rustworkx users and developers. The first is a public Slack channel in the Qiskit workspace, &lt;a href=&#34;https://qiskit.slack.com/messages/rustworkx/&#34;&gt;#rustworkx&lt;/a&gt;. You can join the Qiskit Slack workspace &lt;a href=&#34;http://ibm.co/joinqiskitslack&#34;&gt;here&lt;/a&gt;. Additionally, there is an IRC channel &lt;code&gt;#rustworkx&lt;/code&gt; on the &lt;a href=&#34;https://www.oftc.net/&#34;&gt;OFTC IRC network&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;The first step for building rustworkx from source is to clone it locally with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Qiskit/rustworkx.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;rustworkx uses &lt;a href=&#34;https://github.com/pyo3/pyo3&#34;&gt;PyO3&lt;/a&gt; and &lt;a href=&#34;https://github.com/PyO3/setuptools-rust&#34;&gt;setuptools-rust&lt;/a&gt; to build the python interface, which enables using standard python tooling to work. So, assuming you have rust installed, you can easily install rustworkx into your python environment using &lt;code&gt;pip&lt;/code&gt;. Once you have a local clone of the repo, change your current working directory to the root of the repo. Then, you can install rustworkx into your python env with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming your current working directory is still the root of the repo. Otherwise you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install $PATH_TO_REPO_ROOT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will install it the same way. Then rustworkx is installed in your local python environment. There are 2 things to note when doing this though, first if you try to run python from the repo root using this method it will not work as you expect. There is a name conflict in the repo root because of the local python package shim used in building the package. Simply run your python scripts or programs using rustworkx outside of the repo root. The second issue is that any local changes you make to the rust code will not be reflected live in your python environment, you&#39;ll need to recompile rustworkx by rerunning &lt;code&gt;pip install&lt;/code&gt; to have any changes reflected in your python environment.&lt;/p&gt; &#xA;&lt;h3&gt;Develop Mode&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to build rustworkx in debug mode and use an interactive debugger while working on a change you can use &lt;code&gt;python setup.py develop&lt;/code&gt; to build and install rustworkx in develop mode. This will build rustworkx without optimizations and include debuginfo which can be handy for debugging. Do note that installing rustworkx this way will be significantly slower then using &lt;code&gt;pip install&lt;/code&gt; and should only be used for debugging/development.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] It&#39;s worth noting that &lt;code&gt;pip install -e&lt;/code&gt; does not work, as it will link the python packaging shim to your python environment but not build the rustworkx binary. If you want to build rustworkx in debug mode you have to use &lt;code&gt;python setup.py develop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Project history&lt;/h2&gt; &#xA;&lt;p&gt;Rustworkx was originally called retworkx and was created initially to be a replacement for &lt;a href=&#34;https://www.ibm.com/quantum/qiskit&#34;&gt;Qiskit&lt;/a&gt;&#39;s previous (and current) NetworkX usage (hence the original name). The project was originally started to build a faster directed graph to use as the underlying data structure for the DAG at the center of &lt;a href=&#34;https://github.com/Qiskit/qiskit/&#34;&gt;qiskit&lt;/a&gt;&#39;s transpiler. However, since it&#39;s initial introduction the project has grown substantially and now covers all applications that need to work with graphs which includes Qiskit.&lt;/p&gt;</summary>
  </entry>
</feed>