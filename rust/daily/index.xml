<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:44:35Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mitsuhiko/self-replace</title>
    <updated>2023-05-17T01:44:35Z</updated>
    <id>tag:github.com,2023-05-17:/mitsuhiko/self-replace</id>
    <link href="https://github.com/mitsuhiko/self-replace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Utility library that helps to implement processes that replace themselves&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Self-Replace: A Utility For Self Replacing Executables&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mitsuhiko/self-replace/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/mitsuhiko/self-replace/workflows/Tests/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/self-replace&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/self-replace.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mitsuhiko/self-replace/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mitsuhiko/self-replace&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/rust-1.48%2B-orange.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rust-1.48%2B-orange.svg?sanitize=true&#34; alt=&#34;rustc 1.48.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/self-replace&#34;&gt;&lt;img src=&#34;https://docs.rs/self-replace/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;self-replace&lt;/code&gt; is a crate that allows binaries to replace themselves with newer versions or to uninstall themselves. On Unix systems this is a simple feat, but on Windows a few hacks are needed which is why this crate exists.&lt;/p&gt; &#xA;&lt;p&gt;This is a useful operation when working with single-executable utilties that want to implement a form of self updating or self uninstallation.&lt;/p&gt; &#xA;&lt;p&gt;For details about the implementation refer to the &lt;a href=&#34;https://docs.rs/self-replace&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall a binary, use &lt;code&gt;self_delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;self_replace::self_delete()?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;p&gt;To replace a binary for updating, use &lt;code&gt;self_replace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let new_binary = &#34;/path/to/new/binary&#34;;&#xA;self_replace::self_replace(&amp;amp;new_binary)?;&#xA;std::fs::remove_file(&amp;amp;new_binary)?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License and Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/self-replace/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mitsuhiko/self-replace/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mitsuhiko/self-replace/tree/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;License: &lt;a href=&#34;https://github.com/mitsuhiko/self-replace/raw/main/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>immunant/c2rust</title>
    <updated>2023-05-17T01:44:35Z</updated>
    <id>tag:github.com,2023-05-17:/immunant/c2rust</id>
    <link href="https://github.com/immunant/c2rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Migrate C code to Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C2Rust&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/immunant/c2rust/actions&#34;&gt;&lt;img src=&#34;https://github.com/immunant/c2rust/workflows/c2rust-testsuite/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/immunant/c2rust/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/immunant/c2rust/_apis/build/status/immunant.c2rust?branchName=master&#34; alt=&#34;Azure Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/c2rust&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/c2rust.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rustc-nightly--2022--02--14-lightgrey.svg?sanitize=true&#34; alt=&#34;Rustc Version&#34; title=&#34;Rustc nightly-2022-02-14&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;C2Rust helps you migrate C99-compliant code to Rust. The translator (or transpiler), &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/c2rust-transpile/&#34;&gt;&lt;code&gt;c2rust transpile&lt;/code&gt;&lt;/a&gt;, produces unsafe Rust code that closely mirrors the input C code. The primary goal of the translator is to preserve functionality; test suites should continue to pass after translation.&lt;/p&gt; &#xA;&lt;p&gt;Generating safe and idiomatic Rust code from C ultimately requires manual effort. We are currently working on analysis to automate some of the effort required to lift unsafe Rust into safe Rust types. This work is still in the early stages; please get in touch if you&#39;re interested! We previously maintained a scriptable refactoring tool, &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/c2rust-refactor/&#34;&gt;&lt;code&gt;c2rust refactor&lt;/code&gt;&lt;/a&gt;, that reduces the tedium of refactoring, but this tool is now deprecated so that we can move forward with a recent Rust toolchain.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the big picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/docs/c2rust-overview.png&#34; alt=&#34;C2Rust overview&#34; title=&#34;C2Rust overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To learn more, check out our &lt;a href=&#34;https://www.youtube.com/watch?v=WEsR0Vv7jhg&#34;&gt;RustConf&#39;18&lt;/a&gt; talk on YouTube and try the C2Rust translator online at &lt;a href=&#34;https://www.c2rust.com&#34;&gt;c2rust.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about using and developing C2Rust, check out the &lt;a href=&#34;https://c2rust.com/manual/&#34;&gt;manual&lt;/a&gt;. The manual is still a work-in-progress, so if you can&#39;t find something please let us know.&lt;/p&gt; &#xA;&lt;!-- ANCHOR: installation --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;C2Rust requires LLVM 7 or later with its corresponding clang compiler and libraries. Python 3.6 or later, CMake 3.4.3 or later, and openssl (1.0) are also required. These prerequisites may be installed with the following commands, depending on your platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ubuntu 18.04, Debian 10, and later:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt install build-essential llvm clang libclang-dev cmake libssl-dev pkg-config python3 git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on the LLVM distribution, the &lt;code&gt;llvm-dev&lt;/code&gt; package may also be required. For example, the official LLVM packages from &lt;a href=&#34;https://apt.llvm.org/&#34;&gt;apt.llvm.org&lt;/a&gt; require &lt;code&gt;llvm-dev&lt;/code&gt; to be installed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S base-devel llvm clang cmake openssl python&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NixOS / nix:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt; Xcode command-line tools and recent LLVM (we recommend the Homebrew version) are required.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcode-select --install&#xA;brew install llvm python3 cmake openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The C2Rust transpiler now builds using a stable Rust compiler. If you are developing other features, you may need to install the correct nightly compiler version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing from crates.io&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install c2rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set the LLVM version explicitly if you have multiple installed, like this, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LLVM_CONFIG_PATH=llvm-config-14 cargo install c2rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS with Homebrew LLVM, you need to point the build system at the LLVM installation. The path for the installation is architecture dependent:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intel Macs:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LLVM_CONFIG_PATH=/usr/local/opt/llvm/bin/llvm-config cargo install c2rust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Apple Silicon Macs:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LLVM_CONFIG_PATH=/opt/homebrew/opt/llvm/bin/llvm-config cargo install c2rust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Linux with Linuxbrew LLVM, you need to point the build system at the LLVM installation as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LLVM_CONFIG_PATH=/home/linuxbrew/.linuxbrew/opt/llvm/bin/llvm-config cargo install c2rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: adjust &lt;code&gt;LLVM_CONFIG_PATH&lt;/code&gt; accordingly if Linuxbrew was installed to your home directory.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo, you need to point the build system to the location of &lt;code&gt;libclang.so&lt;/code&gt; and &lt;code&gt;llvm-config&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LLVM_CONFIG_PATH=/path/to/llvm-config LIBCLANG_PATH=/path/to/libclang.so cargo install c2rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have trouble with building and installing, or want to build from the latest master, the &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/docs/README-developers.md#building-with-system-llvm-libraries&#34;&gt;developer docs&lt;/a&gt; provide more details on the build system.&lt;/p&gt; &#xA;&lt;h3&gt;Installing from Git&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to check our recently developed features or you urgently require a bugfixed version of &lt;code&gt;c2rust&lt;/code&gt;, you can install it directly from Git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --git https://github.com/immunant/c2rust.git c2rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the master branch is under constant development and you may experience issues or crashes.&lt;/p&gt; &#xA;&lt;p&gt;You should also set &lt;code&gt;LLVM_CONFIG_PATH&lt;/code&gt; accordingly if required as described above.&lt;/p&gt; &#xA;&lt;!-- ANCHOR_END: installation --&gt; &#xA;&lt;!-- ANCHOR: translating-c-to-rust --&gt; &#xA;&lt;h2&gt;Translating C to Rust&lt;/h2&gt; &#xA;&lt;p&gt;To translate C files specified in &lt;code&gt;compile_commands.json&lt;/code&gt; (see below), run the &lt;code&gt;c2rust&lt;/code&gt; tool with the &lt;code&gt;transpile&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;c2rust transpile compile_commands.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The &lt;code&gt;c2rust refactor&lt;/code&gt; tool was also available for refactoring Rust code, see &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/c2rust-refactor/&#34;&gt;refactoring&lt;/a&gt;, but is now being replaced by a more robust way to refactor.)&lt;/p&gt; &#xA;&lt;p&gt;The translator requires the exact compiler commands used to build the C code. This information is provided via a &lt;a href=&#34;https://clang.llvm.org/docs/JSONCompilationDatabase.html&#34;&gt;compilation database&lt;/a&gt; file named &lt;code&gt;compile_commands.json&lt;/code&gt;. (Read more about &lt;a href=&#34;https://sarcasm.github.io/notes/dev/compilation-database.html&#34;&gt;compilation databases here&lt;/a&gt;). Many build systems can automatically generate this file; we show &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/#generating-compile_commandsjson-files&#34;&gt;a few examples below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a &lt;code&gt;compile_commands.json&lt;/code&gt; file describing the C build, translate the C code to Rust with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;c2rust transpile path/to/compile_commands.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a &lt;code&gt;Cargo.toml&lt;/code&gt; template for a Rust library, add the &lt;code&gt;-e&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;c2rust transpile --emit-build-files path/to/compile_commands.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a &lt;code&gt;Cargo.toml&lt;/code&gt; template for a Rust binary, do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;c2rust transpile --binary myprog path/to/compile_commands.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;--binary myprog&lt;/code&gt; tells the transpiler to use the &lt;code&gt;main&lt;/code&gt; function from &lt;code&gt;myprog.rs&lt;/code&gt; as the entry point for a binary.&lt;/p&gt; &#xA;&lt;p&gt;The translated Rust files will not depend directly on each other like normal Rust modules. They will export and import functions through the C API. These modules can be compiled together into a single static Rust library or binary.&lt;/p&gt; &#xA;&lt;p&gt;There are several &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/docs/known-limitations.md&#34;&gt;known limitations&lt;/a&gt; in this translator. The translator will emit a warning and attempt to skip function definitions that cannot be translated.&lt;/p&gt; &#xA;&lt;h3&gt;Generating &lt;code&gt;compile_commands.json&lt;/code&gt; Files&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;compile_commands.json&lt;/code&gt; file can be automatically created using either &lt;code&gt;cmake&lt;/code&gt;, &lt;code&gt;intercept-build&lt;/code&gt;, or &lt;code&gt;bear&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It may be a good idea to remove optimizations (&lt;code&gt;-OX&lt;/code&gt;) from the compilation database, as there are optimization builtins which we do not support translating.&lt;/p&gt; &#xA;&lt;h4&gt;... with &lt;code&gt;cmake&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When creating the initial build directory with &lt;code&gt;cmake&lt;/code&gt;, specify &lt;code&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS=1&lt;/code&gt;. This only works on projects configured to be built by &lt;code&gt;cmake&lt;/code&gt;. This works on Linux and MacOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;... with &lt;code&gt;intercept-build&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;intercept-build&lt;/code&gt; (part of the &lt;a href=&#34;https://github.com/rizsotto/scan-build&#34;&gt;scan-build tool&lt;/a&gt;) is recommended for non-&lt;code&gt;cmake&lt;/code&gt; projects. &lt;code&gt;intercept-build&lt;/code&gt; is bundled with &lt;code&gt;clang&lt;/code&gt; under &lt;code&gt;tools/scan-build-py&lt;/code&gt;, but a standalone version can be easily installed via &lt;code&gt;pip&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install scan-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;intercept-build &amp;lt;build command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;intercept-build&lt;/code&gt; to generate a compilation database for compiling a single C file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;intercept-build sh -c &#34;cc program.c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;... with &lt;code&gt;bear&lt;/code&gt; (Linux only)&lt;/h4&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/rizsotto/Bear&#34;&gt;&lt;code&gt;bear&lt;/code&gt;&lt;/a&gt; installed, it can be used similarly to &lt;code&gt;intercept-build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bear &amp;lt;build command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;... with &lt;code&gt;compiledb&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;compiledb&lt;/code&gt; package can also be used for makefile projects if the other tools don&#39;t work. Install via &lt;code&gt;pip&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install compiledb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# After running&#xA;./autogen.sh &amp;amp;&amp;amp; ./configure # etc.&#xA;# Run&#xA;compiledb make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ANCHOR_END: translating-c-to-rust --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;To report issues with translation or refactoring, please use our &lt;a href=&#34;https://github.com/immunant/c2rust/issues&#34;&gt;Issue Tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To reach the development team, join our &lt;a href=&#34;https://discord.gg/ANSrTuu&#34;&gt;discord channel&lt;/a&gt; or email us at &lt;a href=&#34;mailto:c2rust@immunant.com&#34;&gt;c2rust@immunant.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I translated code on platform X, but it didn&#39;t work correctly on platform Y.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We run the C preprocessor before translation to Rust. This specializes the code to the host platform. For this reason, we do not support cross compiling translated code at the moment.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What platforms can C2Rust be run on?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The translator and refactoring tool support both macOS and Linux. Other features, such as cross checking the functionality between C and Rust code, are currently limited to Linux hosts.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements and Licensing&lt;/h2&gt; &#xA;&lt;p&gt;This material is available under the BSD-3 style license as found in the &lt;a href=&#34;https://raw.githubusercontent.com/immunant/c2rust/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The C2Rust translator is inspired by Jamey Sharp&#39;s &lt;a href=&#34;https://github.com/jameysharp/corrode&#34;&gt;Corrode&lt;/a&gt; translator. We rely on &lt;a href=&#34;https://github.com/kripken/emscripten&#34;&gt;Emscripten&lt;/a&gt;&#39;s Relooper algorithm to translate arbitrary C control flows.&lt;/p&gt; &#xA;&lt;p&gt;This material is based upon work supported by the United States Air Force and DARPA under Contract No. FA8750-15-C-0124. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the United States Air Force and DARPA. Distribution Statement A, &#34;Approved for Public Release, Distribution Unlimited.&#34;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cedar-policy/cedar</title>
    <updated>2023-05-17T01:44:35Z</updated>
    <id>tag:github.com,2023-05-17:/cedar-policy/cedar</id>
    <link href="https://github.com/cedar-policy/cedar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Core implementation of the Cedar language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cedar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/logo.svg?sanitize=true&#34; alt=&#34;Cedar Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains source code of the Rust crates that implement the &lt;a href=&#34;https://www.cedarpolicy.com/&#34;&gt;Cedar&lt;/a&gt; policy language.&lt;/p&gt; &#xA;&lt;p&gt;Cedar is a language for writing and enforcing authorization policies in your applications. Using Cedar, you can write policies that specify your applications&#39; fine-grained permissions. Your applications then authorize access requests by calling Cedar&#39;s authorization engine. Because Cedar policies are separate from application code, they can be independently authored, updated, analyzed, and audited. You can use Cedar&#39;s validator to check that Cedar policies are consistent with a declared schema which defines your application&#39;s authorization model.&lt;/p&gt; &#xA;&lt;p&gt;Cedar is:&lt;/p&gt; &#xA;&lt;h3&gt;Expressive&lt;/h3&gt; &#xA;&lt;p&gt;Cedar is a simple yet expressive language that is purpose-built to support authorization use cases for common authorization models such as RBAC and ABAC.&lt;/p&gt; &#xA;&lt;h3&gt;Performant&lt;/h3&gt; &#xA;&lt;p&gt;Cedar is fast and scalable. The policy structure is designed to be indexed for quick retrieval and to support fast and scalable real-time evaluation, with bounded latency.&lt;/p&gt; &#xA;&lt;h3&gt;Analyzable&lt;/h3&gt; &#xA;&lt;p&gt;Cedar is designed for analysis using Automated Reasoning. This enables analyzer tools capable of optimizing your policies and proving that your security model is what you believe it is.&lt;/p&gt; &#xA;&lt;h2&gt;Using Cedar&lt;/h2&gt; &#xA;&lt;p&gt;Cedar can be used in your application by depending on the &lt;code&gt;cedar-policy&lt;/code&gt; crate.&lt;/p&gt; &#xA;&lt;p&gt;Just add &lt;code&gt;cedar-policy&lt;/code&gt; as a dependency in your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;cedar-policy = &#34;2.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Crates in this workspace&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/cedar-policy&#34;&gt;cedar-policy&lt;/a&gt; : Main crate for using Cedar to authorize access requests in your applications, and validate Cedar policies against a schema&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/cedar-policy-cli&#34;&gt;cedar-policy-cli&lt;/a&gt; : Crate containing a simple command-line interface (CLI) for interacting with Cedar&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/cedar-policy-core&#34;&gt;cedar-policy-core&lt;/a&gt; : Internal crate containing the Cedar parser and evaluator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/cedar-policy-validator&#34;&gt;cedar-policy-validator&lt;/a&gt; : Internal crate containing the Cedar validator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/cedar-policy-formatter&#34;&gt;cedar-policy-formatter&lt;/a&gt; : Internal crate containing an auto-formatter for Cedar policies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/cedar-integration-tests&#34;&gt;cedar-integration-tests&lt;/a&gt; : Crate containing integration tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s put the policy in policy.cedar and the entities in entities.json:&lt;/p&gt; &#xA;&lt;p&gt;policy.cedar&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;permit (&#xA;  principal == User::&#34;alice&#34;,&#xA;  action == Action::&#34;view&#34;,&#xA;  resource in Album::&#34;jane_vacation&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This policy specifies that &lt;code&gt;alice&lt;/code&gt; is allowed to view the photos in the &lt;code&gt;&#34;jane_vacation&#34;&lt;/code&gt; album.&lt;/p&gt; &#xA;&lt;p&gt;entities.json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;    {&#xA;        &#34;uid&#34;: { &#34;type&#34;: &#34;User&#34;, &#34;id&#34;: &#34;alice&#34;} ,&#xA;        &#34;attrs&#34;: {&#34;age&#34;: 18},&#xA;        &#34;parents&#34;: []&#xA;    },&#xA;    {&#xA;        &#34;uid&#34;: { &#34;type&#34;: &#34;Photo&#34;, &#34;id&#34;: &#34;VacationPhoto94.jpg&#34;},&#xA;        &#34;attrs&#34;: {},&#xA;        &#34;parents&#34;: [{ &#34;type&#34;: &#34;Album&#34;, &#34;id&#34;: &#34;jane_vacation&#34; }]&#xA;    }&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cedar represents principals, resources, and actions as entities. An entity has a type (e.g., &lt;code&gt;User&lt;/code&gt;) and an id (e.g., &lt;code&gt;alice&lt;/code&gt;). They can also have attributes (e.g., &lt;code&gt;User::&#34;alice&#34;&lt;/code&gt;&#39;s &lt;code&gt;age&lt;/code&gt; attribute is the integer &lt;code&gt;18&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Now, let&#39;s test our policy with the CLI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt; cargo run authorize \&#xA;    --policies policy.cedar \&#xA;    --entities entities.json \&#xA;    --principal &#39;User::&#34;alice&#34;&#39; \&#xA;    --action &#39;Action::&#34;view&#34;&#39; \&#xA;    --resource &#39;Photo::&#34;VacationPhoto94.jpg&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CLI output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ALLOW&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is allowed because &lt;code&gt;VacationPhoto94.jpg&lt;/code&gt; belongs to &lt;code&gt;Album::&#34;jane_vacation&#34;&lt;/code&gt;, and &lt;code&gt;alice&lt;/code&gt; can view photos in &lt;code&gt;Album::&#34;jane_vacation&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to see more details on what can be expressed as Cedar policies, see the &lt;a href=&#34;https://docs.cedarpolicy.com/what-is-cedar.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Examples of how to use Cedar in an application are contained in the repository &lt;a href=&#34;https://github.com/cedar-policy/cedar-examples&#34;&gt;cedar-examples&lt;/a&gt;. &lt;a href=&#34;https://github.com/cedar-policy/cedar-examples/tree/main/tinytodo&#34;&gt;TinyTodo&lt;/a&gt; is a simple task list management app whose users&#39; requests, sent as HTTP messages, are authorized by Cedar. It shows how you can integrate Cedar into your own Rust program.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;General documentation for Cedar is available at &lt;a href=&#34;https://docs.cedarpolicy.com&#34;&gt;docs.cedarpolicy.com&lt;/a&gt;, with docs source code in the &lt;a href=&#34;https://github.com/cedar-policy/cedar-docs/&#34;&gt;cedar-policy/cedar-docs&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;Generated documentation for the latest version of the Rust crates can be accessed &lt;a href=&#34;https://docs.rs/cedar-policy&#34;&gt;on docs.rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build, simply run &lt;code&gt;cargo build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community. Please either file an issue, or see &lt;a href=&#34;https://raw.githubusercontent.com/cedar-policy/cedar/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache-2.0 License.&lt;/p&gt;</summary>
  </entry>
</feed>