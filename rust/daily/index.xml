<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-04T01:35:16Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jafioti/luminal</title>
    <updated>2024-03-04T01:35:16Z</updated>
    <id>tag:github.com,2024-03-04:/jafioti/luminal</id>
    <link href="https://github.com/jafioti/luminal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deep learning at the speed of light.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;luminal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jafioti/luminal/main/resources/dag.jpeg&#34; alt=&#34;image&#34;&gt; &lt;a href=&#34;https://github.com/Sidekick-AI/dataflow/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/jafioti/luminal/test.yml?style=for-the-badge&amp;amp;logo=github-actions&amp;amp;logoColor=white&amp;amp;branch=main&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/luminal&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/luminal.svg?style=for-the-badge&amp;amp;logo=rust&#34; alt=&#34;Current Crates.io Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VQf3j8WWNd&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/VQf3j8WWNd&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deep learning at the speed of light.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Luminal is a deep learning library that uses &lt;strong&gt;composable compilers&lt;/strong&gt; to achieve high performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use luminal::prelude::*;&#xA;&#xA;// Setup graph and tensors&#xA;let mut cx = Graph::new();&#xA;let a = cx.tensor::&amp;lt;R2&amp;lt;3, 1&amp;gt;&amp;gt;()&#xA;    .set([[1.0], [2.0], [3.0]]);&#xA;let b = cx.tensor::&amp;lt;R2&amp;lt;1, 4&amp;gt;&amp;gt;()&#xA;    .set([[1.0, 2.0, 3.0, 4.0]]);&#xA;&#xA;// Do math...&#xA;let mut c = a.matmul(b).retrieve();&#xA;&#xA;// Compile and run graph&#xA;cx.compile(&amp;lt;(GenericCompiler, CPUCompiler)&amp;gt;::default(), &amp;amp;mut c);&#xA;cx.execute();&#xA;&#xA;// Get result&#xA;println!(&#34;Result: {:?}&#34;, c);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mistral 7B&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ./examples/mistral&#xA;# Download the model&#xA;bash ./setup/setup.sh&#xA;# Run the model&#xA;cargo run --release --features metal    # MacOS (Recommended)&#xA;cargo run --release --features cuda     # Nvidia&#xA;cargo run --release                     # CPU&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Speed&lt;/h3&gt; &#xA;&lt;p&gt;Luminal can run Q8 Mistral 7B on M-series Macbooks at 15-25 tokens per second. The goal is to become the fastest ML framework for any model on any device.&lt;/p&gt; &#xA;&lt;h3&gt;Simplicity&lt;/h3&gt; &#xA;&lt;p&gt;The core of luminal is and always will be minimal. It should be possible to understand the entire core library in an afternoon.&lt;/p&gt; &#xA;&lt;h3&gt;RISC-style architecture&lt;/h3&gt; &#xA;&lt;p&gt;Everything in luminal boils down to 11 primitive ops:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unary - &lt;code&gt;Log2, Exp2, Sin, Sqrt, Recip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Binary - &lt;code&gt;Add, Mul, Mod, LessThan&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other - &lt;code&gt;SumReduce, MaxReduce, Contiguous&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These ops are enough to support transformers, convnets, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Native&lt;/h3&gt; &#xA;&lt;p&gt;The current ML ecosystem is too fragmented, and the solution isn&#39;t another layer of abstraction. Luminal is written in rust, and interacts directly with the CUDA / Metal APIs. No indirections or abstractions, docker containers, or virtual environments. Just a statically-linked rust crate.&lt;/p&gt; &#xA;&lt;h3&gt;Validated against Pytorch&lt;/h3&gt; &#xA;&lt;p&gt;Correctness matters. So we write as much tests as possible to cover all ops and verify they work the same as an equivalent Pytorch implementation. (&lt;a href=&#34;https://github.com/jafioti/luminal/issues/20&#34;&gt;Improvements needed!&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Ideology&lt;/h2&gt; &#xA;&lt;h3&gt;Why does this look so different from other DL libraries?&lt;/h3&gt; &#xA;&lt;p&gt;Most deep learning libraries are eager-first, meaning each op call directly operates on the data. In PyTorch, when you see &lt;code&gt;x + y&lt;/code&gt;, the addition actually happens right there. This is great for debugging because it works exactly as most developers expect.&lt;/p&gt; &#xA;&lt;p&gt;However, this isn&#39;t great for performance. What makes sense for a developer doesn&#39;t work well for the machine, in the same way that no one writes assembly by hand. Most libraries try to fix this problem by tacking on operator fusion or JIT compilation to try to change the compilation flow to something better for the machine. Turns out this is &lt;a href=&#34;https://pytorch.org/docs/stable/dynamo/index.html&#34;&gt;super&lt;/a&gt; &lt;a href=&#34;https://pytorch.org/tutorials/intermediate/torch_compile_tutorial.html&#34;&gt;difficult&lt;/a&gt; &lt;a href=&#34;https://pytorch.org/docs/stable/jit.html&#34;&gt;even&lt;/a&gt; &lt;a href=&#34;https://pytorch.org/docs/stable/fx.html#torch.fx.symbolic_trace&#34;&gt;for&lt;/a&gt; Pytorch!&lt;/p&gt; &#xA;&lt;h3&gt;Compile everything&lt;/h3&gt; &#xA;&lt;p&gt;A core tenet of Luminal is ahead-of-time compilation. Whenever possible, push everything to compile time and leave nothing to run time. Luminal takes an approach more similar to &lt;a href=&#34;https://www.tensorflow.org/xla&#34;&gt;XLA&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tinygrad/tinygrad&#34;&gt;tinygrad&lt;/a&gt;. Everything&#39;s static here. When you write out an expression like &lt;code&gt;x + y&lt;/code&gt;, no actual computation happens. The operation is recorded to a directed acyclic computation graph for execution later. Only once &lt;code&gt;graph.execute()&lt;/code&gt; is ran does the computation happen. &lt;em&gt;But isn&#39;t that just lazy execution?&lt;/em&gt; Yes it is! But in luminal &lt;strong&gt;everything is done this way&lt;/strong&gt;. All neural networks are built up as one or a few static computation graphs, compiled, and executed later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;But why?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A consequence of this is that the actual computation that gets ran can be radically different than the code that was written. Since we have an entire neural network fully represented in a compute graph, our compilers have global knowledge. This means we can push most ML complexity to the compilers. For instance, devices, datatypes, and execution schedules are all handled by compliers. Even autograd will be handled by a compiler!&lt;/p&gt; &#xA;&lt;p&gt;Now we can do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aggressive kernel fusion&lt;/li&gt; &#xA; &lt;li&gt;Shape-specific kernels compiled at runtime&lt;/li&gt; &#xA; &lt;li&gt;Devices and Dtypes are handled through compilers (just run the CUDA compiler to convert the graph to use CUDA kernels, then the fp16 compiler to convert to half-precision kernels)&lt;/li&gt; &#xA; &lt;li&gt;Networks can be written in generic code, but compiled and ran fast on hyper-specific architectures (try writing a PyTorch network that works with both TF32 dtypes and TPUs; get ready for if statement hell...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compile-time Shape Checks&lt;/h3&gt; &#xA;&lt;p&gt;All operations are shape checked at compile time, so no more shape mismatches! Credit for this goes to &lt;a href=&#34;https://github.com/coreylowman/dfdx&#34;&gt;dfdx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;View the Graph&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve written all your computation code, run &lt;code&gt;cx.display()&lt;/code&gt; to see the entire computation graph in all it&#39;s glory. Pretty messy looking! Now run &lt;code&gt;cx.compile(GenericCompiler::default())&lt;/code&gt; and display the graph again. Much better.&lt;/p&gt; &#xA;&lt;h2&gt;Where are we?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metal and Cuda are supported for running models on Macs and Nvidia GPUs respectively, in both full and half precision.&lt;/li&gt; &#xA; &lt;li&gt;Performance on M-series macs with LLMs is within 20% of llama.cpp (a &lt;em&gt;heavily&lt;/em&gt; optimized library)&lt;/li&gt; &#xA; &lt;li&gt;Mistral 7B and Llama 7B are implemented in &lt;code&gt;examples/&lt;/code&gt;. See instructions above for running.&lt;/li&gt; &#xA; &lt;li&gt;We have a small library of NN modules in &lt;code&gt;nn&lt;/code&gt;, including transformers.&lt;/li&gt; &#xA; &lt;li&gt;A signifigant amount of high-level ops are implemented in &lt;code&gt;hl_ops&lt;/code&gt;. We are aiming to match the most used ~80% of the pytorch api.&lt;/li&gt; &#xA; &lt;li&gt;The aim for 0.3 is to achieve SOTA performance on an M1 pro (50 tok/s), and near SOTA on single nvidia gpus (&amp;gt;100 tok/s), as well as support many mainstream models (Whisper, Stable Diffusion, Yolo v9, etc.) See the tracking issue &lt;a href=&#34;https://github.com/jafioti/luminal/issues/29&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some things on the roadmap:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimize cuda and metal matmul kernels&lt;/li&gt; &#xA; &lt;li&gt;Fine-grained metal and cuda IR&lt;/li&gt; &#xA; &lt;li&gt;Build benchmarking suite to test against other libs&lt;/li&gt; &#xA; &lt;li&gt;Autograd engine&lt;/li&gt; &#xA; &lt;li&gt;Distributed data, pipeline and tensor parallel.&lt;/li&gt; &#xA; &lt;li&gt;Beat PT 2.0 perf on LLM training&lt;/li&gt; &#xA; &lt;li&gt;Write compiler for quantum photonic retro encabulator&lt;/li&gt; &#xA; &lt;li&gt;Build dyson swarm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt; or the MIT license &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;, at your option. This file may not be copied, modified, or distributed except according to those terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jsr-io/jsr</title>
    <updated>2024-03-04T01:35:16Z</updated>
    <id>tag:github.com,2024-03-04:/jsr-io/jsr</id>
    <link href="https://github.com/jsr-io/jsr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The open-source package registry for modern JavaScript and TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jsr.io&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jsr-io/jsr/main/frontend/static/logo.png&#34; width=&#34;200&#34; align=&#34;right&#34; alt=&#34;the jsr logo&#34;&gt; &#xA;&lt;p&gt;This is the source code for &lt;a href=&#34;https://jsr.io&#34;&gt;https://jsr.io&lt;/a&gt;, the new JavaScript registry.&lt;/p&gt; &#xA;&lt;!--deno-fmt-ignore-start--&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The rest of this README is only relevant to those interested in contributing to the jsr.io registry. If you are looking for information on how to use the registry, please see &lt;a href=&#34;https://jsr.io/docs&#34;&gt;https://jsr.io/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!--deno-fmt-ignore-end--&gt; &#xA;&lt;h2&gt;Project Information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Robust&lt;/li&gt; &#xA; &lt;li&gt;Low maintenance&lt;/li&gt; &#xA; &lt;li&gt;Cheap&lt;/li&gt; &#xA; &lt;li&gt;Open source&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Implementation details&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modules and package metadata are stored on Google Cloud Storage (GCS)&lt;/li&gt; &#xA; &lt;li&gt;npm compatibility tarballs are stored on Google Cloud Storage (GCS)&lt;/li&gt; &#xA; &lt;li&gt;Management API is implemented in Rust and runs on Google Cloud Run&lt;/li&gt; &#xA; &lt;li&gt;Frontend uses Fresh and is running on Google Cloud Run in 6 regions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jsr.io&#34;&gt;https://jsr.io&lt;/a&gt;, &lt;a href=&#34;https://api.jsr.io&#34;&gt;https://api.jsr.io&lt;/a&gt;, and &lt;a href=&#34;https://npm.jsr.io&#34;&gt;https://npm.jsr.io&lt;/a&gt; are served by a Google Cloud Load Balancer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Google Cloud CDN is used for caching&lt;/li&gt; &#xA;   &lt;li&gt;Module, package metadata, and npm tarballs is served directly from GCS&lt;/li&gt; &#xA;   &lt;li&gt;/api requests are proxied to the management API&lt;/li&gt; &#xA;   &lt;li&gt;All other requests are proxied to the frontend&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data is stored in PostgreSQL (using Google Cloud SQL) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The database is highly available&lt;/li&gt; &#xA;   &lt;li&gt;Not used for serving registry requests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Distributed tracing using Google Cloud Trace (and Jaeger in development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started (frontend only)&lt;/h2&gt; &#xA;&lt;p&gt;If you are just interested in making changes to the frontend, you can run the frontend in a development mode that connects to the production API.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo&lt;/li&gt; &#xA; &lt;li&gt;Install Deno (&lt;a href=&#34;https://deno.land/#installation&#34;&gt;https://deno.land/#installation&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Add the following to your &lt;code&gt;/etc/hosts&lt;/code&gt; &lt;pre&gt;&lt;code&gt;127.0.0.1       jsr.test&#xA;127.0.0.1       api.jsr.test&#xA;127.0.0.1       npm.jsr.test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running jsr&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;deno task prod:frontend&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can view the registry at &lt;code&gt;http://jsr.test&lt;/code&gt;. This frontend is connected to the production API - use it with the same care that you would use the live registry.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started (entire stack)&lt;/h2&gt; &#xA;&lt;p&gt;In this mode, you will run the frontend and the API locally. This is useful for making changes to the API.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Deno (&lt;a href=&#34;https://deno.land/#installation&#34;&gt;https://deno.land/#installation&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Rust (&lt;a href=&#34;https://rustup.rs/&#34;&gt;https://rustup.rs/&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;127.0.0.1       jsr.test&#xA;127.0.0.1       api.jsr.test&#xA;127.0.0.1       npm.jsr.test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up &lt;code&gt;api/.env&lt;/code&gt; file:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For &lt;strong&gt;@denoland employees&lt;/strong&gt;: Download the &lt;code&gt;.env&lt;/code&gt; file from 1Password (it&#39;s named &lt;code&gt;jsr local .env&lt;/code&gt;), and set up &lt;code&gt;DATABASE_URL&lt;/code&gt; to point to your local Postgres database.&lt;/li&gt; &#xA;   &lt;li&gt;For &lt;strong&gt;everyone else&lt;/strong&gt;: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Create a GitHub App (&lt;a href=&#34;https://github.com/settings/apps/new&#34;&gt;https://github.com/settings/apps/new&lt;/a&gt;) &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Callback URL: &#34;&lt;a href=&#34;http://jsr.test/login/callback&#34;&gt;http://jsr.test/login/callback&lt;/a&gt;&#34;&lt;/li&gt; &#xA;       &lt;li&gt;Check &#34;Request user authorization (OAuth) during installation&#34;&lt;/li&gt; &#xA;       &lt;li&gt;Disable &#34;Webhook&#34;&lt;/li&gt; &#xA;       &lt;li&gt;Set &#34;Account permissions&#34; &amp;gt; &#34;Email addresses&#34; to &#34;Read-only&#34;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Copy &lt;code&gt;api/.env.example&lt;/code&gt; to &lt;code&gt;api/.env&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Set &lt;code&gt;GITHUB_CLIENT_ID&lt;/code&gt; and &lt;code&gt;GITHUB_CLIENT_SECRET&lt;/code&gt; to the values from the GitHub App you created in step 1.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;sqlx&lt;/code&gt; by running &lt;code&gt;cargo install sqlx-cli&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Postgres installed and running: &lt;code&gt;brew install postgresql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postgres database created with &lt;code&gt;createdb registry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postgres user created and granted access to the database&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd api&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo sqlx migrate run&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you get the error &lt;code&gt;role &#34;postgres&#34; does not exist&lt;/code&gt;, run &lt;code&gt;createuser -s postgres&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt; &amp;amp; &lt;code&gt;docker-compose&lt;/code&gt; installed and running&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running jsr&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;deno task services:macos&lt;/code&gt; or &lt;code&gt;deno task services:linux&lt;/code&gt; in one terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deno task dev:api&lt;/code&gt; in another terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deno task dev:frontend&lt;/code&gt; in another terminal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can view the registry at &lt;code&gt;http://jsr.test&lt;/code&gt;. The API can be found at &lt;code&gt;http://api.jsr.test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Accepting waitlisted users to the local dev environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; before proceeding, go to &lt;code&gt;jsr.test&lt;/code&gt; in your browser, and sign up for the waitlist. You&#39;ll need to authorize the application via OAuth before proceeding.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re signed up for the waitlist:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;psql&lt;/code&gt;, and a new &lt;a href=&#34;https://www.postgresql.org/docs/6.4/app-psql.htm#:~:text=psql%20is%20a%20character%2Dbased,is%20a%20Postgres%20client%20application.&#34;&gt;postgres shell&lt;/a&gt; will open from where you can interact with databases. (NOTE: if &lt;code&gt;psql&lt;/code&gt; alone does not work, try &lt;code&gt;psql registry&lt;/code&gt;, or &lt;code&gt;psql DATABASE_URL&lt;/code&gt;, but replacing &lt;code&gt;DATABASE_URL&lt;/code&gt; with the value of your .env variable of that same name.)&lt;/li&gt; &#xA; &lt;li&gt;Connect to the database by entering &lt;code&gt;\c registry&lt;/code&gt; (unnecessary if you ran &lt;code&gt;psql registry&lt;/code&gt; above), and hitting Enter&lt;/li&gt; &#xA; &lt;li&gt;Enter the following query: &lt;code&gt;UPDATE users SET waitlist_accepted_at = now();&lt;/code&gt; which will accept all pending users. Execute the query by pressing Enter.&lt;/li&gt; &#xA; &lt;li&gt;Exit the psql shell by typing &lt;code&gt;exit&lt;/code&gt; and pressing Enter.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All users are now invited and can browse &lt;code&gt;http://jsr.test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing a package to the local dev environment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new directory with a &lt;code&gt;deno.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into that directory&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;JSR_URL=http://jsr.test deno publish&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Populating local dev environment with additional data&lt;/h3&gt; &#xA;&lt;p&gt;It may be helpful to have a large variety of packages published to your local dev environment to simulate a live environment. The quickest way to fill the registry with data is to publish &lt;a href=&#34;https://github.com/denoland/deno_std&#34;&gt;deno_std&lt;/a&gt; to the registry. This can be done via the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone &lt;a href=&#34;https://github.com/denoland/deno_std&#34;&gt;https://github.com/denoland/deno_std&lt;/a&gt; in the same parent folder as the &lt;code&gt;jsr&lt;/code&gt; project&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;deno_std&lt;/code&gt; folder, run &lt;code&gt;deno run -A _tools/convert_to_workspace.ts&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;JSR_URL=http://jsr.test deno publish&lt;/code&gt; to publish all of the @std packages to your local dev environment.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Making yourself a staff user/admin&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;psql registry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;SELECT name,github_id from users;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should see a table with your name and GitHub ID. Copy your GitHub ID.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;UPDATE users SET is_staff = true WHERE github_id = xxxxxxx;&lt;/code&gt;, replacing &lt;code&gt;xxxxxxx&lt;/code&gt; with your copied GitHub ID from the previous step.&lt;/li&gt; &#xA; &lt;li&gt;You should see a success message confirming one row has been updated.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Migrating the database&lt;/h3&gt; &#xA;&lt;p&gt;When the database schema has been changed, you can migrate the local database by running this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd api; sqlx migrate run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Loading bad words&lt;/h3&gt; &#xA;&lt;p&gt;To load bad words into the database:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://cloud.google.com/sql/docs/postgres/sql-proxy&#34;&gt;https://cloud.google.com/sql/docs/postgres/sql-proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run in a terminal &lt;code&gt;cloud-sql-proxy -g [database connection string] -p 5433&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;bad_words.sql&lt;/code&gt; file, with the contents as:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO bad_words (word) VALUES&#xA;    (&#39;word_1&#39;),&#xA;    -- more words&#xA;    (&#39;word_2&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;In a separate terminal window run &lt;code&gt;psql postgres://127.0.0.1:5433/registry --user [your username] -f bad_words.sql&lt;/code&gt;, and provide the password for the provided username.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;During local dev, traces are sent to Jaeger. You can view them at &lt;a href=&#34;http://localhost:16686&#34;&gt;http://localhost:16686&lt;/a&gt;. You can find traces in API HTTP requests by inspecting the &lt;code&gt;x-deno-ray&lt;/code&gt; header.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Eventual-Inc/Daft</title>
    <updated>2024-03-04T01:35:16Z</updated>
    <id>tag:github.com,2024-03-04:/Eventual-Inc/Daft</id>
    <link href="https://github.com/Eventual-Inc/Daft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distributed DataFrame for Python designed for the cloud, powered by Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|Banner|&lt;/p&gt; &#xA;&lt;p&gt;|CI| |PyPI| |Latest Tag| |Coverage| |Slack|&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Website &amp;lt;https://www.getdaft.io&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Docs &amp;lt;https://www.getdaft.io/projects/docs/&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Installation&lt;/code&gt;_ • &lt;code&gt;10-minute tour of Daft &amp;lt;https://www.getdaft.io/projects/docs/en/latest/learn/10-min.html&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Community and Support &amp;lt;https://github.com/Eventual-Inc/Daft/discussions&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;Daft: Distributed dataframes for multimodal data&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Daft &amp;lt;https://www.getdaft.io&amp;gt;&lt;/code&gt;_ is a distributed query engine for large-scale data processing in Python and is implemented in Rust.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Familiar interactive API:&lt;/strong&gt; Lazy Python Dataframe for rapid and interactive iteration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Focus on the what:&lt;/strong&gt; Powerful Query Optimizer that rewrites queries to be as efficient as possible&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data Catalog integrations:&lt;/strong&gt; Full integration with data catalogs such as Apache Iceberg&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich multimodal type-system:&lt;/strong&gt; Supports multimodal types such as Images, URLs, Tensors and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Seamless Interchange&lt;/strong&gt;: Built on the &lt;code&gt;Apache Arrow &amp;lt;https://arrow.apache.org/docs/index.html&amp;gt;&lt;/code&gt;_ In-Memory Format&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built for the cloud:&lt;/strong&gt; &lt;code&gt;Record-setting &amp;lt;https://blog.getdaft.io/p/announcing-daft-02-10x-faster-io&amp;gt;&lt;/code&gt;_ I/O performance for integrations with S3 cloud storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;About Daft&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Benchmarks&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Related Projects&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;License&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Daft&lt;/h2&gt; &#xA;&lt;p&gt;Daft was designed with the following principles in mind:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any Data&lt;/strong&gt;: Beyond the usual strings/numbers/dates, Daft columns can also hold complex or nested multimodal data such as Images, Embeddings and Python objects efficiently with it&#39;s Arrow based memory representation. Ingestion and basic transformations of multimodal data is extremely easy and performant in Daft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactive Computing&lt;/strong&gt;: Daft is built for the interactive developer experience through notebooks or REPLs - intelligent caching/query optimizations accelerates your experimentation and data exploration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Distributed Computing&lt;/strong&gt;: Some workloads can quickly outgrow your local laptop&#39;s computational resources - Daft integrates natively with &lt;code&gt;Ray &amp;lt;https://www.ray.io&amp;gt;&lt;/code&gt;_ for running dataframes on large clusters of machines with thousands of CPUs/GPUs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Installation ^^^^^^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;Install Daft with &lt;code&gt;pip install getdaft&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more advanced installations (e.g. installing from source or with extra dependencies such as Ray and AWS utilities), please see our &lt;code&gt;Installation Guide &amp;lt;https://www.getdaft.io/projects/docs/en/latest/install.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;Quickstart ^^^^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;code&gt;10-minute quickstart &amp;lt;https://www.getdaft.io/projects/docs/en/latest/learn/10-min.html&amp;gt;&lt;/code&gt;_!&lt;/p&gt; &#xA;&lt;p&gt;In this example, we load images from an AWS S3 bucket&#39;s URLs and resize each image in the dataframe:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import daft&#xA;&#xA;# Load a dataframe from filepaths in an S3 bucket&#xA;df = daft.from_glob_path(&#34;s3://daft-public-data/laion-sample-images/*&#34;)&#xA;&#xA;# 1. Download column of image URLs as a column of bytes&#xA;# 2. Decode the column of bytes into a column of images&#xA;df = df.with_column(&#34;image&#34;, df[&#34;path&#34;].url.download().image.decode())&#xA;&#xA;# Resize each image into 32x32&#xA;df = df.with_column(&#34;resized&#34;, df[&#34;image&#34;].image.resize(32, 32))&#xA;&#xA;df.show(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;|Quickstart Image|&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;|Benchmark Image|&lt;/p&gt; &#xA;&lt;p&gt;To see the full benchmarks, detailed setup, and logs, check out our &lt;code&gt;benchmarking page. &amp;lt;https://www.getdaft.io/projects/docs/en/latest/faq/benchmarks.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;More Resources ^^^^^^^^^^^^^^&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;10-minute tour of Daft &amp;lt;https://www.getdaft.io/projects/docs/en/latest/learn/10-min.html&amp;gt;&lt;/code&gt;_ - learn more about Daft&#39;s full range of capabilities including dataloading from URLs, joins, user-defined functions (UDF), groupby, aggregations and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;User Guide &amp;lt;https://www.getdaft.io/projects/docs/en/latest/user_guide/index.html&amp;gt;&lt;/code&gt;_ - take a deep-dive into each topic within Daft&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;API Reference &amp;lt;https://www.getdaft.io/projects/docs/en/latest/api_docs/index.html&amp;gt;&lt;/code&gt;_ - API reference for public classes/functions of Daft&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To start contributing to Daft, please read &lt;code&gt;CONTRIBUTING.md &amp;lt;https://github.com/Eventual-Inc/Daft/blob/main/CONTRIBUTING.md&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h2&gt;Telemetry&lt;/h2&gt; &#xA;&lt;p&gt;To help improve Daft, we collect non-identifiable data.&lt;/p&gt; &#xA;&lt;p&gt;To disable this behavior, set the following environment variable: &lt;code&gt;DAFT_ANALYTICS_ENABLED=0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The data that we collect is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-identifiable:&lt;/strong&gt; events are keyed by a session ID which is generated on import of Daft&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Metadata-only:&lt;/strong&gt; we do not collect any of our users’ proprietary code or data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For development only:&lt;/strong&gt; we do not buy or sell any user data&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please see our &lt;code&gt;documentation &amp;lt;https://www.getdaft.io/projects/docs/en/latest/faq/telemetry.html&amp;gt;&lt;/code&gt;_ for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;+---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | Dataframe | Query Optimizer | Multimodal | Distributed | Arrow Backed | Vectorized Execution Engine | Out-of-core | +===================================================+=================+===============+=============+=================+=============================+=============+ | Daft | Yes | Yes | Yes | Yes | Yes | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Pandas &amp;lt;https://github.com/pandas-dev/pandas&amp;gt;&lt;/code&gt;_ | No | Python object | No | optional &amp;gt;= 2.0 | Some(Numpy) | No | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Polars &amp;lt;https://github.com/pola-rs/polars&amp;gt;&lt;/code&gt;_ | Yes | Python object | No | Yes | Yes | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Modin &amp;lt;https://github.com/modin-project/modin&amp;gt;&lt;/code&gt;_ | Eagar | Python object | Yes | No | Some(Pandas) | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Pyspark &amp;lt;https://github.com/apache/spark&amp;gt;&lt;/code&gt;_ | Yes | No | Yes | Pandas UDF/IO | Pandas UDF | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Dask DF &amp;lt;https://github.com/dask/dask&amp;gt;&lt;/code&gt;_ | No | Python object | Yes | No | Some(Pandas) | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;code&gt;dataframe comparison page &amp;lt;https://www.getdaft.io/projects/docs/en/latest/faq/dataframe_comparison.html&amp;gt;&lt;/code&gt;_ for more details!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Daft has an Apache 2.0 license - please see the LICENSE file.&lt;/p&gt; &#xA;&lt;p&gt;.. |Quickstart Image| image:: &lt;a href=&#34;https://github.com/Eventual-Inc/Daft/assets/17691182/dea2f515-9739-4f3e-ac58-cd96d51e44a8&#34;&gt;https://github.com/Eventual-Inc/Daft/assets/17691182/dea2f515-9739-4f3e-ac58-cd96d51e44a8&lt;/a&gt; :alt: Dataframe code to load a folder of images from AWS S3 and create thumbnails :height: 256&lt;/p&gt; &#xA;&lt;p&gt;.. |Benchmark Image| image:: &lt;a href=&#34;https://github-production-user-asset-6210df.s3.amazonaws.com/2550285/243524430-338e427d-f049-40b3-b555-4059d6be7bfd.png&#34;&gt;https://github-production-user-asset-6210df.s3.amazonaws.com/2550285/243524430-338e427d-f049-40b3-b555-4059d6be7bfd.png&lt;/a&gt; :alt: Benchmarks for SF100 TPCH&lt;/p&gt; &#xA;&lt;p&gt;.. |Banner| image:: &lt;a href=&#34;https://user-images.githubusercontent.com/17691182/190476440-28f29e87-8e3b-41c4-9c28-e112e595f558.png&#34;&gt;https://user-images.githubusercontent.com/17691182/190476440-28f29e87-8e3b-41c4-9c28-e112e595f558.png&lt;/a&gt; :target: &lt;a href=&#34;https://www.getdaft.io&#34;&gt;https://www.getdaft.io&lt;/a&gt; :alt: Daft dataframes can load any data such as PDF documents, images, protobufs, csv, parquet and audio files into a table dataframe structure for easy querying&lt;/p&gt; &#xA;&lt;p&gt;.. |CI| image:: &lt;a href=&#34;https://github.com/Eventual-Inc/Daft/actions/workflows/python-package.yml/badge.svg&#34;&gt;https://github.com/Eventual-Inc/Daft/actions/workflows/python-package.yml/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/Eventual-Inc/Daft/actions/workflows/python-package.yml?query=branch:main&#34;&gt;https://github.com/Eventual-Inc/Daft/actions/workflows/python-package.yml?query=branch:main&lt;/a&gt; :alt: Github Actions tests&lt;/p&gt; &#xA;&lt;p&gt;.. |PyPI| image:: &lt;a href=&#34;https://img.shields.io/pypi/v/getdaft.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white&#34;&gt;https://img.shields.io/pypi/v/getdaft.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/getdaft&#34;&gt;https://pypi.org/project/getdaft&lt;/a&gt; :alt: PyPI&lt;/p&gt; &#xA;&lt;p&gt;.. |Latest Tag| image:: &lt;a href=&#34;https://img.shields.io/github/v/tag/Eventual-Inc/Daft?label=latest&amp;amp;logo=GitHub&#34;&gt;https://img.shields.io/github/v/tag/Eventual-Inc/Daft?label=latest&amp;amp;logo=GitHub&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/Eventual-Inc/Daft/tags&#34;&gt;https://github.com/Eventual-Inc/Daft/tags&lt;/a&gt; :alt: latest tag&lt;/p&gt; &#xA;&lt;p&gt;.. |Coverage| image:: &lt;a href=&#34;https://codecov.io/gh/Eventual-Inc/Daft/branch/main/graph/badge.svg?token=J430QVFE89&#34;&gt;https://codecov.io/gh/Eventual-Inc/Daft/branch/main/graph/badge.svg?token=J430QVFE89&lt;/a&gt; :target: &lt;a href=&#34;https://codecov.io/gh/Eventual-Inc/Daft&#34;&gt;https://codecov.io/gh/Eventual-Inc/Daft&lt;/a&gt; :alt: Coverage&lt;/p&gt; &#xA;&lt;p&gt;.. |Slack| image:: &lt;a href=&#34;https://img.shields.io/badge/slack-@distdata-purple.svg?logo=slack&#34;&gt;https://img.shields.io/badge/slack-@distdata-purple.svg?logo=slack&lt;/a&gt; :target: &lt;a href=&#34;https://join.slack.com/t/dist-data/shared_invite/zt-1t44ss4za-1rtsJNIsQOnjlf8BlG05yw&#34;&gt;https://join.slack.com/t/dist-data/shared_invite/zt-1t44ss4za-1rtsJNIsQOnjlf8BlG05yw&lt;/a&gt; :alt: slack community&lt;/p&gt;</summary>
  </entry>
</feed>