<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-22T01:37:07Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>doraemonkeys/WindSend</title>
    <updated>2024-02-22T01:37:07Z</updated>
    <id>tag:github.com,2024-02-22:/doraemonkeys/WindSend</id>
    <link href="https://github.com/doraemonkeys/WindSend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickly and securely sync clipboard, transfer files and directories between devices. 快速安全的同步剪切板，传输文件或文件夹&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;风传 WindSend&lt;/h1&gt; &#xA;&lt;p&gt;中文|&lt;a href=&#34;https://raw.githubusercontent.com/doraemonkeys/WindSend/main/README-EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;风传是什么&lt;/h2&gt; &#xA;&lt;p&gt;一组应用程序，用于在不同设备之间快速安全的传递剪切板，传输文件或文件夹(支持windows图片与文件剪切板)。&lt;/p&gt; &#xA;&lt;h2&gt;为什么选择风传&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安全 - 所有数据均加密传递(即使是局域网，也有人希望更安全，比如我)&lt;/li&gt; &#xA; &lt;li&gt;简单 - 界面简洁易上手，开源免费无广告，专注于信息传递&lt;/li&gt; &#xA; &lt;li&gt;全面 - 自动与局域网内密钥相同的电脑匹配，切换wifi也不用担心，同时还提供了不在同一局域网内的解决方案&lt;/li&gt; &#xA; &lt;li&gt;省心 - 不用再担心与电脑的连接状态，只要电脑在线手机就能发送&lt;/li&gt; &#xA; &lt;li&gt;快速 - 使用多线程异步传输文件，充分利用带宽。&lt;/li&gt; &#xA; &lt;li&gt;轻量 - 不依赖额外的运行环境，空闲时内存占用不到10M，基本无CPU消耗&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doraemonkeys/picture/master/1/202310142251417.png&#34; alt=&#34;image-20231014225053389&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;如何使用&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：配置阶段需要确保电脑和手机处于同一网络中。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;下载&lt;/h3&gt; &#xA;&lt;p&gt;github：&lt;a href=&#34;https://github.com/doraemonkeys/WindSend/releases&#34;&gt;Releases · WindSend&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;123云盘：&lt;a href=&#34;https://www.123pan.com/s/yfFAjv-lymn.html&#34;&gt;www.123pan.com&lt;/a&gt; 提取码:c1at&lt;/p&gt; &#xA;&lt;h3&gt;PC端&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;解压 &lt;strong&gt;WindSend-S-XX-amd64-windows.zip&lt;/strong&gt; 到任意目录(提供Rust与Go两种实现) 。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;双击exe文件运行：&lt;/p&gt; &lt;p&gt;请点击允许windows网络防火墙，&lt;strong&gt;注意&lt;/strong&gt;勾选公用网络(大胆的勾选，所有内容均已加密)。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Doraemonkeys/picture/master/1/202306212303629.png&#34; alt=&#34;image-20230621225600846&#34;&gt;&lt;/p&gt; &lt;p&gt;可以观察到任务栏系统托盘里出现app的图标，同时生成了默认配置文件到当前目录。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doraemonkeys/picture/master/1/202401242022889.png&#34; alt=&#34;image-20240124202216544&#34;&gt;&lt;/p&gt; &lt;p&gt;如果你忘记勾选公用网络，请到Windows防火墙手动设置，或者&lt;strong&gt;确保你正在使用专用网络&lt;/strong&gt;。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Doraemonkeys/picture/master/1/202306232208808.png&#34; alt=&#34;image-20230623220546743&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;开启快速配对以便让手机能够搜索到(快速配对将在第一次配对成功后自动关闭)。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doraemonkeys/picture/master/1/202401242149192.png&#34; alt=&#34;image-20240124202641303&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;移动端&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;安装APP(一般选 app-armeabi-v8a-release.apk)。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打开APP，点击右下角的加号配置。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;电脑开启快速配对后，手机多点几次搜索，如果幸运的话，你将能看到Secretkey被自动填充。&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doraemonkeys/picture/master/1/202401242149664.png&#34; alt=&#34;image-20240124203042150&#34; style=&#34;zoom:50%;&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;最后，激动人心的时刻到了，手机随便复制一段文字，打开app点击粘贴，电脑瞬间弹出通知，恭喜你已经成功完成了配置，可以愉快的使用了。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;自动配对失败？手动添加设备密钥&lt;/h3&gt; &#xA;&lt;p&gt;打开默认配置文件&lt;code&gt;config.yaml&lt;/code&gt;，复制secretKeyHex，手动填入app配置。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Doraemonkeys/picture/master/1/202306212049362.png&#34; alt=&#34;image-20230621192929505&#34; style=&#34;zoom: 67%;&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;大多数情况下，快速配对失败就表示你设备之间的网络无法连通。请使用手机热点，再次尝试。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;注意事项&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;一直转圈圈说明你电脑端配置有问题，比如wifi设置为公用网络。&lt;/li&gt; &#xA; &lt;li&gt;两个设备之间的时间差不能超过5分钟，否则会导致配对失败。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;小技巧&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;长按上传手机文件夹&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doraemonkeys/picture/master/1/202401242149010.png&#34; alt=&#34;image-20240124210045160&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;快速复制文件夹&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/doraemonkeys/picture/master/1/202401242149818.png&#34; alt=&#34;image-20240124205814355&#34; style=&#34;zoom: 33%;&#34;&gt; &#xA;&lt;h3&gt;不在同一网络的解决方案&lt;/h3&gt; &#xA;&lt;h4&gt;1. 使用内网穿透软件&lt;/h4&gt; &#xA;&lt;p&gt;如果是Tailscale，只需要把电脑ip换成Tailscale分配的IP就行了，其他工具自行测试。&lt;/p&gt; &#xA;&lt;h4&gt;2. 使用别人搭好的服务器&lt;/h4&gt; &#xA;&lt;p&gt;本工具内置了一个，只需要新建配置，ip填web，对你没有看错，就是这三个字母。SecretKey 填电脑配置文件中的密钥。使用此功能需要在电脑上手动点击软件，复制到剪切板。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doraemonkeys/picture/master/1/202401242150315.png&#34; alt=&#34;image-20240124204702833&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;web传递信息的原理是使用了 &lt;a href=&#34;https://ko0.com/&#34;&gt;https://ko0.com/&lt;/a&gt; 网站。&lt;/p&gt; &#xA;&lt;h2&gt;Rust实现与Go实现有哪些区别？&lt;/h2&gt; &#xA;&lt;p&gt;这两个版本在在功能与外观上几乎没有区别，但某些方面还是有细微差别。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Rust版体积相对稍小&lt;/li&gt; &#xA; &lt;li&gt;Rust版支持将更多种类图片写入Windows剪切板&lt;/li&gt; &#xA; &lt;li&gt;Rust版通知不能显示图标&lt;/li&gt; &#xA; &lt;li&gt;Rust版在传输速度上比Go版略低&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;跨平台情况&lt;/h2&gt; &#xA;&lt;p&gt;目前仅支持Android与Windows。&lt;/p&gt; &#xA;&lt;h3&gt;移动端&lt;/h3&gt; &#xA;&lt;p&gt;移动端代码使用flutter编写，理论上支持安卓和IOS，但由于作者对IOS不熟悉，也没有相关设备测试，所以暂不支持，动手能力强的可以自己尝试编译。&lt;/p&gt; &#xA;&lt;h3&gt;PC&lt;/h3&gt; &#xA;&lt;p&gt;Pc端代码拥有Go与Rust两种实现，代码中主要的库都是跨平台的，想要提供其他平台的支持，只需稍微修改一下源代码，作者能力尚浅，欢迎高手来PR。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kaspermarstal/plprql</title>
    <updated>2024-02-22T01:37:07Z</updated>
    <id>tag:github.com,2024-02-22:/kaspermarstal/plprql</id>
    <link href="https://github.com/kaspermarstal/plprql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use PRQL in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kaspermarstal/plprql/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/kaspermarstal/plprql/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kaspermarstal/plprql/actions/workflows/package.yml&#34;&gt;&lt;img src=&#34;https://github.com/kaspermarstal/plprql/actions/workflows/package.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PRQL in PostgreSQL!&lt;/h1&gt; &#xA;&lt;p&gt;PL/PRQL is a PostgreSQL extension that lets you write functions with &lt;a href=&#34;https://prql-lang.org/&#34;&gt;PRQL&lt;/a&gt;. The extension supports PostgreSQL v12-16 on Linux and macOS.&lt;/p&gt; &#xA;&lt;h2&gt;What is PRQL?&lt;/h2&gt; &#xA;&lt;p&gt;PRQL (Pipelined Relational Query Language) is an open source query language for data manipulation and analysis that compiles to SQL. PRQL introduces a pipeline concept (similar to Unix pipes) that transforms data line-by-line. The sequential series of transformations reduces the complexity often encountered with nested SQL queries and makes your data manipulation logic easier to read and write.&lt;/p&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaspermarstal/plprql/main/#functions&#34;&gt;Write functions with PRQL&lt;/a&gt; - Useful for large analytical queries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaspermarstal/plprql/main/#prql-compiler&#34;&gt;PRQL compiler&lt;/a&gt; - Useful for development and debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kaspermarstal/plprql/main/#inline-execution&#34;&gt;Inline execution&lt;/a&gt; - Useful for prototyping and custom queries in ORMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;p&gt;PRQL shines when your SQL queries becomes very long and complex. You can manage this complexity by porting your most impressive SQL incantations to PRQL functions, which can then be used in dashboards, business logic or other database code. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create function match_stats(int) returns table(player text, kd_ratio float) as $$&#xA;  from matches&#xA;  filter match_id == $1&#xA;  group player (&#xA;    aggregate {&#xA;      total_kills = sum kills,&#xA;      total_deaths = sum deaths&#xA;    }&#xA;  )&#xA;  filter total_deaths &amp;gt; 0&#xA;  derive kd_ratio = total_kills / total_deaths&#xA;  select { player, kd_ratio }&#xA;$$ language plprql;&#xA;&#xA;select * from match_stats(1001)&#xA;    &#xA; player  | kd_ratio &#xA;---------+----------&#xA; Player1 |    0.625&#xA; Player2 |      1.6&#xA;(2 rows)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is similar to how PL/Python, PL/Javascript, and PL/Rust are implemented.&lt;/p&gt; &#xA;&lt;h3&gt;PRQL Compiler&lt;/h3&gt; &#xA;&lt;p&gt;You can use the PRQL compiler to see the SQL statements that PostgreSQL executes under the hood. You can compile the above PRQL example to SQL with the &lt;code&gt;prql_to_sql()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select prql_to_sql(...); -- statements above omitted for brevity&#xA;&#xA; prql_to_sql &#xA;-------------&#xA;WITH table_0 AS (&#xA;  SELECT player, COALESCE(SUM(kills), 0) AS _expr_0, COALESCE(SUM(deaths), 0) AS _expr_1&#xA;  FROM matches&#xA;  WHERE match_id = $1&#xA;  GROUP BY player&#xA;)&#xA;SELECT player, _expr_0 / _expr_1 AS kd_ratio&#xA;FROM table_0&#xA;WHERE _expr_1 &amp;gt; 0&#xA;-- Generated by PRQL compiler version:0.11.1 (https://prql-lang.org)&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inline Execution&lt;/h3&gt; &#xA;&lt;p&gt;You can run PRQL code directly with the &lt;code&gt;prql&lt;/code&gt; function. This is useful for e.g. custom queries in ORMs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select prql(&#39;from matches | filter player == &#39;&#39;Player1&#39;&#39;&#39;) &#xA;as (id int, match_id int, round int, player text, kills int, deaths int) &#xA;limit 2;&#xA;&#xA; id | match_id | round | player  | kills | deaths &#xA;----+----------+-------+---------+-------+--------&#xA;  1 |     1001 |     1 | Player1 |     4 |      1&#xA;  3 |     1001 |     2 | Player1 |     1 |      7&#xA;(2 rows)&#xA; &#xA;-- Same as above, but returns cursor&#xA;select prql(&#39;from matches | filter player == &#39;&#39;Player1&#39;&#39;&#39;, &#39;player1_cursor&#39;);&#xA;fetch 2 from player1_cursor;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on the design of the extension, see the &lt;a href=&#34;https://raw.githubusercontent.com/kaspermarstal/plprql/main/DESIGN.md&#34;&gt;design document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on PRQL, visit the PRQL &lt;a href=&#34;https://prql-lang.org/&#34;&gt;website&lt;/a&gt;, &lt;a href=&#34;https://prql-lang.org/playground/&#34;&gt;playground&lt;/a&gt; or &lt;a href=&#34;https://github.com/PRQL/prql&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;PRQL supports &lt;code&gt;select&lt;/code&gt; statements only. &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; statements, and your other database code, will continue to live in vanilla SQL, ORMs, or other database frameworks.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Install Deb File&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to install deb file:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the deb file that matches your operating system from the &lt;a href=&#34;https://github.com/kaspermarstal/plprql/releases/&#34;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a terminal and change to the directory where the &lt;code&gt;.deb&lt;/code&gt; file was downloaded. Install the package with dpkg, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;sudo dpkg -i plprql-0.1.0-postgresql-16-debian-bookworm-amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If dpkg reports missing dependencies, run the following command to fix them:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;sudo apt-get install -f&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install From Source&lt;/h3&gt; &#xA;&lt;p&gt;Follow either of these steps to install from source:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and execute the &lt;code&gt;install.sh&lt;/code&gt; bash script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://raw.githubusercontent.com/kaspermarstal/plprql/main/scripts/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will install the tip of the main branch using &lt;code&gt;pg_config&lt;/code&gt; on your path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can customize the PostgreSQL installation and/or the PL/PRQL version using the &lt;code&gt;--pg-config&lt;/code&gt; and &lt;code&gt;--revision&lt;/code&gt; flags:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://raw.githubusercontent.com/kaspermarstal/plprql/main/scripts/install.sh &amp;gt; install.sh&#xA;chmod +x ./install.sh&#xA;./install.sh --pg-version /usr/bin/pg_config --revision 186faea&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Set Up Development Environment&lt;/h3&gt; &#xA;&lt;p&gt;PL/PRQL is built on top of the &lt;a href=&#34;https://github.com/pgcentralfoundation/pgrx&#34;&gt;pgrx&lt;/a&gt; framework for writing PostgreSQL extensions in Rust. This framework comes with development tools that you need to install. Follow these steps to set up your development environment:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;cargo-pgrx&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;cargo install --locked --version=0.11.3 cargo-pgrx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The version of &lt;code&gt;cargo-pgrx&lt;/code&gt; must match the version of &lt;code&gt;pgrx&lt;/code&gt; in &lt;code&gt;plprql/Cargo.toml&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialize &lt;code&gt;pgrx&lt;/code&gt; for your system.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;cargo pgrx init --pg16 &amp;lt;PG16&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &lt;code&gt;&amp;lt;PG16&amp;gt;&lt;/code&gt; is the path to your system installation&#39;s &lt;code&gt;pg_config&lt;/code&gt; tool (typically &lt;code&gt;/usr/bin/pg_config&lt;/code&gt;). Supported versions are PostgreSQL v12-16. You can also run &lt;code&gt;cargo pgrx init&lt;/code&gt; and have &lt;code&gt;pgrx&lt;/code&gt; download, install, and compile PostgreSQL v12-16. These installations are managed by &lt;code&gt;pgrx&lt;/code&gt; and used for development and testing. Individual &lt;code&gt;pgrx&lt;/code&gt;-managed installations can be installed using e.g. &lt;code&gt;cargo pgrx init --pg16 download&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;git clone https://github.com/kaspermarstal/plprql&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into root directory and install the extension to the PostgreSQL specified by the &lt;code&gt;pg_config&lt;/code&gt; currently on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;cd plprql/plprql&#xA;cargo pgrx install --release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can target a specific PostgreSQL installation by providing the path of another &lt;code&gt;pg_config&lt;/code&gt; using the &lt;code&gt;-c&lt;/code&gt; flag.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fire up your system PostgreSQL installation and start writing functions right away! You can also try out PL/PRQL in an installation managed by &lt;code&gt;pgrx&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;$ cargo pgrx run pg16&#xA;psql&amp;gt; create extension plprql;&#xA;psql&amp;gt; create function match_stats(int) &#xA;      returns table(total_kills real, total_deaths real) as $$&#xA;        from rounds&#xA;        filter match_id == $1&#xA;        aggregate {&#xA;          total_kills = sum kills,&#xA;          total_deaths = sum deaths&#xA;        }&#xA;      $$ language plprql&#xA;psql&amp;gt; select match_stats(1);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;You can run tests using &lt;code&gt;cargo pgrx test pg16&lt;/code&gt;. Unit tests are in the main &lt;code&gt;plprql&lt;/code&gt; crate while integration tests are in the &lt;code&gt;plprql-tests&lt;/code&gt; crate. From the root source directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;cd plprql &amp;amp;&amp;amp; echo &#34;\q&#34; | cargo pgrx run pg16 &amp;amp;&amp;amp; cargo test --no-default-features --features pg16&#xA;cd ../plprql-tests &amp;amp;&amp;amp; echo &#34;\q&#34; | cargo pgrx run pg16 &amp;amp;&amp;amp; cargo test --no-default-features --features pg16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported PostgreSQL versions are &lt;code&gt;pg12&lt;/code&gt;, &lt;code&gt;pg13&lt;/code&gt;, &lt;code&gt;pg14&lt;/code&gt;, &lt;code&gt;pg15&lt;/code&gt;, and &lt;code&gt;pg16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0 License&lt;/p&gt;</summary>
  </entry>
</feed>