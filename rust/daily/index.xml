<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-01T01:35:55Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>platformatic/php-node</title>
    <updated>2025-06-01T01:35:55Z</updated>
    <id>tag:github.com,2025-06-01:/platformatic/php-node</id>
    <link href="https://github.com/platformatic/php-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP HTTP Request handler for Node.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;@platformatic/php-node&lt;/h1&gt; &#xA;&lt;p&gt;With &lt;code&gt;@platformatic/php-node&lt;/code&gt; you can run PHP applications within the same process as a Node.js application, allowing for communication between Node.js and PHP without any network connection in the middle. This allows for some interesting possibilities, like running Wordpress with a Next.js frontend.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Presently support is provided for x64 Linux and both x64 and arm64 macOS. More platforms will come as needs arise. Please open an issue if we&#39;re missing a platform you would like supported!&lt;/p&gt; &#xA;&lt;p&gt;PHP dynamically links against several system libraries. These must be installed as listed below:&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update&#xA;sudo apt-get install -y libssl-dev libcurl4-openssl-dev libxml2-dev \&#xA;  libsqlite3-dev libonig-dev re2c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install openssl@3 curl sqlite libxml2 oniguruma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @platformatic/php-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Php, Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const php = new Php()&#xA;&#xA;const request = new Request({&#xA;  url: &#39;http://example.com/foo/bar&#39;,&#xA;  headers: {&#xA;    &#39;X-Test&#39;: [&#39;Hello, from Node.js!&#39;]&#xA;  }&#xA;})&#xA;&#xA;const response = await php.handleRequest(request)&#xA;&#xA;console.log(response.body.toString())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;new Php(config)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; {Object} Configuration object &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;argv&lt;/code&gt; {String[]} Process arguments. &lt;strong&gt;Default:&lt;/strong&gt; []&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;docroot&lt;/code&gt; {String} Document root for PHP. &lt;strong&gt;Default:&lt;/strong&gt; process.cwd()&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: {Php}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Construct a new PHP instance to which to dispatch requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Php } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const php = new Php({&#xA;  argv: process.argv,&#xA;  docroot: process.cwd()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;php.handleRequest(request)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; {Request} A request to dispatch to the PHP instance.&lt;/li&gt; &#xA; &lt;li&gt;Returns: {Promise&#xA;  &lt;response&gt;&#xA;   }&#xA;  &lt;/response&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When the request completes, the returned promise will resolve with the response object. Request processing is handled by the NodePlatform worker pool to avoid blocking the Node.js thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Php, Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const php = new Php()&#xA;const request = new Request({&#xA;  url: &#39;http://example.com/foo/bar&#39;&#xA;})&#xA;&#xA;const response = await php.handleRequest(request)&#xA;console.log(response.body.toString())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;php.handleRequestSync(request)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; {Request} A request to dispatch to the PHP instance.&lt;/li&gt; &#xA; &lt;li&gt;Returns: {Response}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Requests may also be processed synchronously, though this is not recommended as it will block the Node.js thread for the entire life of the PHP request.&lt;/p&gt; &#xA;&lt;p&gt;This may be useful for one-off scripts. It&#39;s only included because it&#39;s trivial to do so, but it&#39;s not recommended for use within HTTP requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Php, Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const php = new Php()&#xA;const request = new Request({&#xA;  url: &#39;http://example.com/foo/bar&#39;&#xA;})&#xA;&#xA;const response = php.handleRequestSync(request)&#xA;console.log(response.body.toString())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;new Request(input)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;input&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;method&lt;/code&gt; {String} HTTP method &lt;strong&gt;Default:&lt;/strong&gt; &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;url&lt;/code&gt; {String} Full request URL&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; {Object} HTTP request headers. Each must be an array of strings&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt; {Buffer|UInt8Array} Request body&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: {Request}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Construct a request which may be dispatched to a PHP instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const request = new Request({&#xA;  method: &#39;POST&#39;,&#xA;  url: &#39;http://example.com/foo/bar&#39;,&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: [&#39;application/json&#39;]&#xA;  },&#xA;  body: Buffer.from(JSON.stringify({&#xA;    hello: &#39;world&#39;&#xA;  }))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;request.method&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{String}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The HTTP method to use when dispatching this request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const request = new Request({&#xA;  url: &#39;http://example.com/foo/bar&#39;,&#xA;})&#xA;&#xA;console.log(request.method) // GET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;request.url&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{String}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The URL to use when dispatching this request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const request = new Request({&#xA;  url: &#39;http://example.com/foo/bar&#39;,&#xA;})&#xA;&#xA;console.log(request.url) // http://example.com/foo/bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;request.headers&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Headers}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The HTTP headers to use when dispatching this request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const request = new Request({&#xA;  url: &#39;http://example.com/foo/bar&#39;,&#xA;})&#xA;&#xA;console.log(request.headers) // [Headers]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;request.body&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Buffer}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The body to use when dispatching this request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Request } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const request = new Request({&#xA;  url: &#39;http://example.com/foo/bar&#39;,&#xA;  body: Buffer.from(&#39;Hello, world!&#39;)&#xA;})&#xA;&#xA;console.log(request.body.toString()) // Hello, world!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;new Response(input)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;input&lt;/code&gt; {Object} Response values. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;status&lt;/code&gt; {Number} HTTP Response status code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; {Object} HTTP Response headers. Each must be an array of strings&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt; {Buffer} HTTP Response body&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;log&lt;/code&gt; {String} Log output of this request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: {Response}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Responses may be constructed manually. This is mainly just for testing, but may have other uses, like short-circuiting the PHP instance run entirely in certain cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Response } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const response = new Response({&#xA;  status: 500,&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: [&#39;application/json&#39;]&#xA;  },&#xA;  body: Buffer.from(JSON.stringify({&#xA;    error: &#39;bad stuff&#39;&#xA;  }))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;response.status&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Number}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The HTTP status code included in the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Response } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const response = new Response({&#xA;  status: 500&#xA;})&#xA;&#xA;console.log(response.status) // 500&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;response.headers&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Headers}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The HTTP headers included in the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Response } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const response = new Response({&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: [&#39;application/json&#39;]&#xA;  },&#xA;})&#xA;&#xA;console.log(response.headers) // [Headers]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;response.body&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Buffer}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The HTTP response body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Response } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const response = new Response({&#xA;  body: Buffer.from(JSON.stringify({&#xA;    error: &#39;bad stuff&#39;&#xA;  }))&#xA;})&#xA;&#xA;console.log(response.body.toString()) // {&#34;error&#34;:&#34;bad stuff&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;response.log&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Buffer}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any logs captured during the request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Response } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const response = new Response({&#xA;  log: Buffer.from(&#39;some log message&#39;)&#xA;})&#xA;&#xA;console.log(response.log.toString()) // some log message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;new Headers()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Returns: {Headers}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Construct a Headers object to manage HTTP headers. Note that this is currently only useful for reading &lt;em&gt;from&lt;/em&gt; Request and Response types, not passing &lt;em&gt;into&lt;/em&gt; them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.set(name, value)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; {String} The header name for which to set a value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt; {String} The value to set for the named header.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will set the value of the named header. If any prior headers have been set with this name they will be discarded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.set(&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.add(name, value)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; {String} The header name for which to add a value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt; {String} The value to add for the named header.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will add to the associated values of the named header. If any prior headers have been set with this name they will also be kept.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.has(name)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Returns: {bool}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Checks if there are any values currently associated with the header name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.has(&#39;Content-Type&#39;) // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.get(name)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Returns: {string|undefined}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Retrieves the last value associated with the given header name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;headers.get(&#39;Accept&#39;) // text/html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.getAll(name)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Returns: {String[]}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Retrieves all values associated with the given header name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;headers.getAll(&#39;Accept&#39;) // [&#39;application/json&#39;, &#39;text/html&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.getLine(name)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Returns: {String|undefined}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Merges all associated values into one header line. Note that his may be incorrect for some header types which require separate header lines such as the &lt;code&gt;Set-Cookie&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;headers.getLine(&#39;Accept&#39;) // application/json, text/html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.delete(name)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Delete all values associated with the given header name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;headers.delete(&#39;Accept&#39;)&#xA;&#xA;headers.get(&#39;Accept&#39;) // undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.clear()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove all contained headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.set(&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.clear()&#xA;&#xA;headers.get(&#39;Content-Type&#39;) // undefined&#xA;headers.get(&#39;Accept&#39;) // undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.size&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Number}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The number of header names present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.set(&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;headers.size // 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.entries()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Iterator}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns an iterator containing a &lt;code&gt;(name, value)&lt;/code&gt; tuple of header entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.set(&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;for (const (name, value) of headers.entries()) {&#xA;  // (&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;  // (&#39;Accept&#39;, &#39;application/json&#39;)&#xA;  // (&#39;Accept&#39;, &#39;text/html&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.keys()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Iterator}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns an iterator of header names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.set(&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;for (const name of headers.keys()) {&#xA;  // &#39;Content-Type&#39;&#xA;  // &#39;Accept&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.values()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{Iterator}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns an iterator of header values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.set(&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;for (const value of headers.values()) {&#xA;  // &#39;application/json&#39;&#xA;  // &#39;application/json&#39;&#xA;  // &#39;text/html&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;headers.forEach(fn)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fn&lt;/code&gt; {Function} Callback to call for each header entry &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;value&lt;/code&gt; {String} The value of the header entry.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;name&lt;/code&gt; {String} The name of the header entry.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; {Headers} The Header instance&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Iterate over each header entry with a given callback.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Headers } from &#39;@platformatic/php-node&#39;&#xA;&#xA;const headers = new Headers()&#xA;&#xA;headers.set(&#39;Content-Type&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;application/json&#39;)&#xA;headers.add(&#39;Accept&#39;, &#39;text/html&#39;)&#xA;&#xA;headers.forEach((value, name, headers) =&amp;gt; {&#xA;  // (&#39;application/json&#39;, &#39;Content-Type&#39;, headers)&#xA;  // (&#39;application/json&#39;, &#39;Accept&#39;, headers)&#xA;  // (&#39;text/html&#39;, &#39;Accept&#39;, headers)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is part of the &lt;a href=&#34;https://github.com/platformatic&#34;&gt;Platformatic&lt;/a&gt; ecosystem. Please refer to the main repository for contribution guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache-2.0&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/platformatic/php-node/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.platformatic.dev/&#34;&gt;Platformatic Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/platformatic&#34;&gt;Community Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>