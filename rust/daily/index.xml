<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-23T01:32:56Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>getgrit/gritql</title>
    <updated>2024-03-23T01:32:56Z</updated>
    <id>tag:github.com,2024-03-23:/getgrit/gritql</id>
    <link href="https://github.com/getgrit/gritql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GritQL is a query language for searching, linting, and modifying code.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/getgrit/gritql/main/assets/grit-logo-darkmode.png&#34;&gt; &#xA;  &lt;img alt=&#34;Grit logo&#34; src=&#34;https://raw.githubusercontent.com/getgrit/gritql/main/assets/grit-logo.png&#34; width=&#34;40%&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/getgrit/gritql/actions/workflows/main.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/getgrit/gritql/main.yaml&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/getgrit/gritql/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/getgrit/gritql&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.grit.io/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1063097320771698699?logo=discord&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.grit.io/studio&#34;&gt;Playground&lt;/a&gt; | &lt;a href=&#34;https://docs.grit.io/tutorials/gritql&#34;&gt;Tutorial&lt;/a&gt; | &lt;a href=&#34;https://docs.grit.io/language&#34;&gt;Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;GritQL is a declarative query language for searching and modifying source code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üìñ Start simply without learning AST details: any code snippet is a valid GritQL query&lt;/li&gt; &#xA; &lt;li&gt;‚ö°Ô∏è Use Rust and query optimization to scale up to 10M+ line repositories&lt;/li&gt; &#xA; &lt;li&gt;üì¶ Use Grit&#39;s built-in module system to reuse 200+ &lt;a href=&#34;https://github.com/getgrit/stdlib&#34;&gt;standard patterns&lt;/a&gt; or &lt;a href=&#34;https://docs.grit.io/guides/sharing#anchor-publishing-patterns&#34;&gt;share your own&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ôªÔ∏è Once you learn GritQL, you can use it to rewrite any &lt;a href=&#34;https://docs.grit.io/language/target-languages&#34;&gt;target language&lt;/a&gt;: JavaScript/TypeScript, Python, JSON, Java, Terraform, Solidity, CSS, Markdown, YAML, Rust, Go, or SQL&lt;/li&gt; &#xA; &lt;li&gt;üîß GritQL makes it easy to include auto-fix rules for faster remediation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://docs.grit.io/language/overview&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://docs.grit.io/tutorials/gritql&#34;&gt;interactive tutorial&lt;/a&gt;, or run &lt;code&gt;grit --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the Grit CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://docs.grit.io/install | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Search for all your &lt;code&gt;console.log&lt;/code&gt; calls by putting the desired pattern in backticks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grit apply &#39;`console.log($_)`&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;console.log&lt;/code&gt; with &lt;code&gt;winston.log&lt;/code&gt;, using &lt;code&gt;=&amp;gt;&lt;/code&gt; to create rewrites:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grit apply &#39;`console.log($msg)` =&amp;gt; `winston.log($msg)`&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save the pattern to a &lt;a href=&#34;https://docs.grit.io/guides/config&#34;&gt;&lt;code&gt;grit.yaml&lt;/code&gt;&lt;/a&gt; file and exclude test cases in a where clause:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; .grit/grit.yaml&#xA;patterns:&#xA;  - name: use_winston&#xA;    level: error&#xA;    body: |&#xA;      `console.log($msg)` =&amp;gt; `winston.log($msg)` where {&#xA;        $msg &amp;lt;: not within or { `it($_, $_)`, `test($_, $_)`, `describe($_, $_)` }&#xA;      }&#xA;EOF&#xA;grit apply use_winston&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;grit check&lt;/code&gt; to enforce your patterns as &lt;a href=&#34;https://docs.grit.io/guides/ci&#34;&gt;custom lints&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grit check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Remove all &lt;code&gt;console.log&lt;/code&gt; calls, unless they are inside a try-catch block&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-grit&#34;&gt;`console.log($log)` =&amp;gt; . where {&#xA;  $log &amp;lt;: not within `try { $_ } catch { $_ }`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Replace a method call with a new method call&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-grit&#34;&gt;`$instance.oldMethod($args)` =&amp;gt; `$instance.newMethod($args)` where {&#xA;  $program &amp;lt;: contains `$instance = new TargetClass($_)`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More examples&lt;/h3&gt; &#xA;&lt;p&gt;Many more examples can be found in the &lt;a href=&#34;https://github.com/getgrit/stdlib/raw/main/.grit/patterns/&#34;&gt;GritQL standard library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Patterns can be combined to create complex queries, including &lt;a href=&#34;https://github.com/getgrit/stdlib/raw/main/.grit/patterns/python/openai.md&#34;&gt;large refactors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why GritQL?&lt;/h2&gt; &#xA;&lt;p&gt;GritQL comes from our experiences with conducting large scale refactors and migrations.&lt;/p&gt; &#xA;&lt;p&gt;Usually, migrations start with exploratory work to figure out the scope of the problem‚Äîoften using simple grep searches. These are easy to start with, but most migrations end up accumulating additional requirements like ensuring the right packages are imported and excluding cases which don‚Äôt have a viable migration path.&lt;/p&gt; &#xA;&lt;p&gt;Eventually, any complex migration ends up being a full codemod program written with a tool like &lt;a href=&#34;https://github.com/facebook/jscodeshift&#34;&gt;jscodeshift&lt;/a&gt;. This comes with its own problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most of the exploratory work has to be abandoned as you figure out how to represent your original regex search as an AST.&lt;/li&gt; &#xA; &lt;li&gt;Reading/writing a codemod requires mentally translating from AST names back to what source code actually looks like.&lt;/li&gt; &#xA; &lt;li&gt;Most frameworks are not composable, so you‚Äôre stuck copying patterns back and forth.&lt;/li&gt; &#xA; &lt;li&gt;Performance is often an afterthought, so iterating on a large codemod can be painfully slow.&lt;/li&gt; &#xA; &lt;li&gt;Codemod frameworks are language-specific, so if you‚Äôre hopping between multiple languages‚Äîor trying to migrate a shared API‚Äîyou have to learn different frameworks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GritQL is our attempt to develop a powerful middle ground:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exploratory analysis is easy: just put a code snippet in backticks and use &lt;code&gt;$metavariables&lt;/code&gt; for holes you want to represent.&lt;/li&gt; &#xA; &lt;li&gt;Incrementally add complexity by introducing side conditions with where clauses.&lt;/li&gt; &#xA; &lt;li&gt;Reuse named patterns to avoid rebuilding queries, and use shared patterns from our &lt;a href=&#34;https://github.com/getgrit/stdlib&#34;&gt;standard library&lt;/a&gt; for common tasks like ensuring modules are imported.&lt;/li&gt; &#xA; &lt;li&gt;Written in Rust for maximum performance: rewrite millions of lines of code in seconds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;GritQL uses &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt; for all language parsers and benefits greatly from the Rust ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;GritQL is released under the MIT license.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. To get started, check out the &lt;a href=&#34;https://raw.githubusercontent.com/getgrit/gritql/main/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;contributing guidelines&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join us on &lt;a href=&#34;https://docs.grit.io/discord&#34;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>