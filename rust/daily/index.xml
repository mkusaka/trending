<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-06T01:45:34Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dbalsom/martypc</title>
    <updated>2023-07-06T01:45:34Z</updated>
    <id>tag:github.com,2023-07-06:/dbalsom/martypc</id>
    <link href="https://github.com/dbalsom/martypc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An IBM PC/XT emulator written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/dbalsom/martypc/assets/7229541/ad0ed584-a7c7-40fe-aeb2-95e76051ae52&#34; alt=&#34;pc_logo_with_text_v2_01&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MartyPC&lt;/h1&gt; &#xA;&lt;h3&gt;User Guide&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dbalsom/martypc/wiki/MartyPC-User-Guide&#34;&gt;Click here to access the MartyPC User Guide.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MartyPC is a cross-platform IBM PC emulator written in Rust. Development began April, 2022. It should build on Windows, Linux and MacOS (Including M1). Currently, releases are Windows only.&lt;/p&gt; &#xA;&lt;h3&gt;Why another PC emulator?&lt;/h3&gt; &#xA;&lt;p&gt;MartyPC was originally just a hobby project to see if I could write an emulator from scratch, while learning the Rust programming language. My original goals were modest, but MartyPC has reached a level of functionality that I never thought possible when originally starting. I would be happy if MartyPC could serve as a &#34;reference emulator&#34; - perhaps not the fastest or most fully featured, but written in a clear, readable way that describes the operation of the system and hardware, and is packed with debugging tools and ample logging for developers of emulators or oldschool software.&lt;/p&gt; &#xA;&lt;h2&gt;Accuracy&lt;/h2&gt; &#xA;&lt;p&gt;I began work on making MartyPC&#39;s 8088 CPU emulation cycle-accurate in November of 2022. To do so, I validated the operation of the CPU against a real 8088 CPU connected to an Arduino MEGA microcontroller. See my &lt;a href=&#34;https://github.com/dbalsom/arduino_8088&#34;&gt;Arduino8088 project&lt;/a&gt; for more details. This allows an instruction to be simultaneously executed on the emulator and a real CPU and the execution results compared, cycle-by-cycle. More info on this process is described &lt;a href=&#34;https://martypc.blogspot.com/2023/06/hardware-validating-emulator.html&#34;&gt;on my blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In April 2023, MartyPC became accurate enough to run the infamous PC demo, 8088MPH.&lt;/p&gt; &#xA;&lt;p&gt;In May 2023, MartyPC became the first PC emulator capable of emulating every effect in the PC demo Area 5150. (See video here: &lt;a href=&#34;https://www.youtube.com/watch?v=zADeLm9g0Zg&#34;&gt;https://www.youtube.com/watch?v=zADeLm9g0Zg&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;In June of 2023, the WebAssembly build of MartyPC could run both &lt;a href=&#34;https://dbalsom.github.io/martypc/web/player.html?title=8088mph&#34;&gt;8088MPH&lt;/a&gt; and &lt;a href=&#34;https://dbalsom.github.io/martypc/web/player.html?title=area5150&#34;&gt;Area 5150&lt;/a&gt; in your web browser!&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;I have a long list of people to thank (See the About box!) but I would especially like to mention the contributions made by reenigne. Without his work reverse-engineering the 8088 microcode, this emulator would never have been possible. I also thank him for putting up with my endless questions.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Currently MartyPC will emulate an original IBM 5150 PC or 5160 XT.&lt;/p&gt; &#xA;&lt;p&gt;The following devices are at least partially implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CGA Card - A fairly accurate, cycle-based implementation of the IBM CGA including the Motorola MC6845 CRTC controller allows MartyPC to run many demanding PC demos. Composite output and monitor simulation is supported, with MartyPC emulating an &#34;old style&#34; CGA. Some work still remains on getting better composite color accuracy.&lt;/li&gt; &#xA; &lt;li&gt;EGA/VGA Cards - Basic graphics modes are supported: 320x200, 640x350 &amp;amp; 640x480 16-color, and Mode13 (320x200 /w 256 colors). CGA compatibility modes remain unimplemented. May need conversion to cycle-accurate forms for games like Commander Keen. Work in progress.&lt;/li&gt; &#xA; &lt;li&gt;ÂµPD764 Floppy Disk Controller - Enough FDC commands are implemented to make DOS happy.&lt;/li&gt; &#xA; &lt;li&gt;IBM 20MB Fixed Disk Controller - Emulated with basic VHD support, although only one specific drive geometry is supported so you will need to use the VHDs created by the emulator.&lt;/li&gt; &#xA; &lt;li&gt;8255 PPI&lt;/li&gt; &#xA; &lt;li&gt;8259 PIC&lt;/li&gt; &#xA; &lt;li&gt;8253 PIT - Recently rewritten after microcontroller-based research. At least one previously undocumented feature discovered. Accurate enough for PCM audio.&lt;/li&gt; &#xA; &lt;li&gt;8237 DMA Controller - Mostly implemented, but DMA transfers are currently &#34;faked&#34;. DRAM refresh DMA is simulated using a scheduling system.&lt;/li&gt; &#xA; &lt;li&gt;8250 UART - COM1 hard-coded to mouse, COM2 is available for serial passthrough to a host adapter.&lt;/li&gt; &#xA; &lt;li&gt;Mouse - A standard Microsoft Mouse is implemented on COM1.&lt;/li&gt; &#xA; &lt;li&gt;PC Speaker - Beeps and boops, although still a little glitchy, it can produce reasonable PCM audio in demos such as 8088MPH, Area5150, and Magic Mushroom.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Marty has a GUI with a several useful debugging displays including instruction disassembly, CPU status, memory viewer, and various internal device states. &lt;img src=&#34;https://github.com/dbalsom/martypc/assets/7229541/3eca1c16-470c-40ec-bb1a-6251677cf9ec&#34; alt=&#34;debugger01&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbalsom/martypc/assets/7229541/373fff8b-2391-4ab3-a9a7-8062c496c78c&#34; alt=&#34;area5150_title02&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7229541/230502288-1d6f9d42-88b9-4e6c-8257-21378e68ff85.PNG&#34; alt=&#34;8088mph&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7229541/222996518-479e2c3a-40cd-4a69-b2fb-145a30219812.PNG&#34; alt=&#34;win30&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7229541/190879975-6ecba7c4-0529-4e34-ac6b-53827944e288.PNG&#34; alt=&#34;monkey_ega&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7229541/182751737-85f2b9d1-d3b4-4b96-888c-3e8762c6c458.PNG&#34; alt=&#34;keen4&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7229541/173169921-32b5dbad-0cb7-4cfa-921f-09ba7f946e85.png&#34; alt=&#34;cat&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FuelLabs/fuel-core</title>
    <updated>2023-07-06T01:45:34Z</updated>
    <id>tag:github.com,2023-07-06:/FuelLabs/fuel-core</id>
    <link href="https://github.com/FuelLabs/fuel-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust full node implementation of the Fuel v2 protocol.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fuel Client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuel-core/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/FuelLabs/fuel-core/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/fuel-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/fuel-core?label=latest&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/fuel-core/&#34;&gt;&lt;img src=&#34;https://docs.rs/fuel-core/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/xfpK4Pe&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat%20on-discord-orange?&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fuel client implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing to Fuel, see our &lt;a href=&#34;https://raw.githubusercontent.com/FuelLabs/fuel-core/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; guidelines for coding standards and review process.&lt;/p&gt; &#xA;&lt;p&gt;Before pushing any changes or creating pull request please run &lt;code&gt;source ci_checks.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;System Requirements&lt;/h3&gt; &#xA;&lt;p&gt;There are several system requirements including clang.&lt;/p&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update&#xA;brew install cmake&#xA;brew install protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt update&#xA;apt install -y cmake pkg-config build-essential git clang libclang-dev protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -Syu --needed --noconfirm cmake gcc pkgconf git clang protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using &lt;code&gt;xtask&lt;/code&gt; to build fuel-core:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo xtask build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run &lt;code&gt;cargo build&lt;/code&gt; as well as any other custom build processes we have such as re-generating a GraphQL schema for the client.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/FuelLabs/fuel-core/master/ci_checks.sh&#34;&gt;ci_checks.sh&lt;/a&gt; script file can be used to run all CI checks, including the running of tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source ci_checks.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script requires pre-installed tools. For more information run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat ci_checks.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;The service can be launched by executing &lt;code&gt;fuel-core run&lt;/code&gt;. The list of options for running can be accessed via the &lt;code&gt;help&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./target/debug/fuel-core run --help&#xA;&#xA;USAGE:&#xA;    fuel-core run [OPTIONS]&#xA;&#xA;OPTIONS:&#xA;        --chain &amp;lt;CHAIN_CONFIG&amp;gt;&#xA;            Specify either an alias to a built-in configuration or filepath to a JSON file [default:&#xA;            local_testnet]&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For many development purposes it is useful to have a state that won&#39;t persist and the &lt;code&gt;db-type&lt;/code&gt; option can be set to &lt;code&gt;in-memory&lt;/code&gt; as in the following example.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./target/debug/fuel-core run --db-type in-memory&#xA;2023-06-13T12:45:22.860536Z  INFO fuel_core::cli::run: 230: Block production mode: Instant&#xA;2023-06-13T12:38:47.059783Z  INFO fuel_core::cli::run: 310: Fuel Core version v0.18.1&#xA;2023-06-13T12:38:47.078969Z  INFO new{name=fuel-core}:_commit_result{block_id=b1807ca9f2eec7e459b866ecf69b68679fc6b205a9a85c16bd4943d1bfc6fb2a height=0 tx_status=[]}: fuel_core_importer::importer: 231: Committed block&#xA;2023-06-13T12:38:47.097777Z  INFO new{name=fuel-core}: fuel_core::graphql_api::service: 208: Binding GraphQL provider to 127.0.0.1:4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable block production on your local node, set &lt;code&gt;--poa-instant=false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./target/debug/fuel-core run --poa-instant=false&#xA;2023-06-13T12:44:12.857763Z  INFO fuel_core::cli::run: 232: Block production disabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;Publishing&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/katyo/publish-crates&#34;&gt;&lt;code&gt;publish-crates&lt;/code&gt;&lt;/a&gt; action for automatic publishing of all crates.&lt;/p&gt; &#xA;&lt;p&gt;If you have problems with publishing, you can troubleshoot it locally with &lt;a href=&#34;https://github.com/nektos/act&#34;&gt;&lt;code&gt;act&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;act release -s GITHUB_TOKEN=&amp;lt;YOUR_GITHUB_TOKEN&amp;gt; -j publish-crates-check --container-architecture linux/amd64 --reuse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It requires GitHubToken to do request to the GitHub. You can create it with &lt;a href=&#34;https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;this&lt;/a&gt; instruction.&lt;/p&gt; &#xA;&lt;h4&gt;Outdated database&lt;/h4&gt; &#xA;&lt;p&gt;If you encounter an error such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;thread &#39;main&#39; panicked at &#39;unable to open database: DatabaseError(Error { message: &#34;Invalid argument: Column families not opened: column-11, column-10, column-9, column-8, column-7, column-6, column-5, column-4, column-3, column-2, column-1, column-0&#34; })&#39;, fuel-core/src/main.rs:23:66&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clear your local database using: &lt;code&gt;rm -rf ~/.fuel/db&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;File descriptor limits&lt;/h4&gt; &#xA;&lt;p&gt;On some macOS versions the default file descriptor limit is quite low, which can lead to IO errors with messages like &lt;code&gt;Too many open files&lt;/code&gt; or even &lt;code&gt;fatal runtime error: Rust cannot catch foreign exceptions&lt;/code&gt; when RocksDB encounters these issues. Use the following command to increase the open file limit. Note that this only affects the current shell session, so consider adding it to &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ulimit -n 10240&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Log level&lt;/h4&gt; &#xA;&lt;p&gt;The service relies on the environment variable &lt;code&gt;RUST_LOG&lt;/code&gt;. For more information, check the &lt;a href=&#34;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/struct.EnvFilter.html#examples&#34;&gt;EnvFilter examples&lt;/a&gt; crate.&lt;/p&gt; &#xA;&lt;p&gt;Human logging can be disabled with the environment variable &lt;code&gt;HUMAN_LOGGING=false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker &amp;amp; Kubernetes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create Docker Image&#xA;docker build -t fuel-core . -f deployment/Dockerfile&#xA;&#xA;# Delete Docker Image&#xA;docker image rm fuel-core&#xA;&#xA;# Create Kubernetes Volume, Deployment &amp;amp; Service&#xA;kubectl create -f deployment/fuel-core.yml&#xA;&#xA;# Delete Kubernetes Volume, Deployment &amp;amp; Service&#xA;kubectl delete -f deployment/fuel-core.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GraphQL service&lt;/h2&gt; &#xA;&lt;p&gt;The client functionality is available through a service endpoint that expect GraphQL queries.&lt;/p&gt; &#xA;&lt;h3&gt;Transaction executor&lt;/h3&gt; &#xA;&lt;p&gt;The transaction executor currently performs instant block production. Changes are persisted to RocksDB by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Service endpoint: &lt;code&gt;/graphql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Schema (available after building): &lt;code&gt;crates/client/assets/schema.sdl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The service expects a mutation defined as &lt;code&gt;submit&lt;/code&gt; that receives a &lt;a href=&#34;https://github.com/FuelLabs/fuel-vm/tree/master/fuel-tx&#34;&gt;Transaction&lt;/a&gt; in hex encoded binary format, as &lt;a href=&#34;https://github.com/FuelLabs/fuel-specs/raw/master/src/protocol/tx_format/transaction.md&#34;&gt;specified here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;cURL example&lt;/h3&gt; &#xA;&lt;p&gt;This example will execute a script that represents the following sequence of &lt;a href=&#34;https://github.com/FuelLabs/fuel-vm/tree/master/fuel-asm&#34;&gt;ASM&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;ADDI(0x10, RegId::ZERO, 0xca),&#xA;ADDI(0x11, RegId::ZERO, 0xba),&#xA;LOG(0x10, 0x11, RegId::ZERO, RegId::ZERO),&#xA;RET(RegId::ONE),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cargo run --bin fuel-core-client -- transaction submit \&#xA;&#34;{\&#34;Script\&#34;:{\&#34;gas_price\&#34;:0,\&#34;gas_limit\&#34;:1000000,\&#34;maturity\&#34;:0,\&#34;script\&#34;:[80,64,0,202,80,68,0,186,51,65,16,0,36,4,0,0],\&#34;script_data\&#34;:[],\&#34;inputs\&#34;:[&#xA;{&#xA;  \&#34;CoinSigned\&#34;: {&#xA;    \&#34;utxo_id\&#34;: {&#xA;      \&#34;tx_id\&#34;: \&#34;c49d65de61cf04588a764b557d25cc6c6b4bc0d7429227e2a21e61c213b3a3e2\&#34;,&#xA;      \&#34;output_index\&#34;: 0&#xA;    },&#xA;    \&#34;owner\&#34;: \&#34;f1e92c42b90934aa6372e30bc568a326f6e66a1a0288595e6e3fbd392a4f3e6e\&#34;,&#xA;    \&#34;amount\&#34;: 10599410012256088338,&#xA;    \&#34;asset_id\&#34;: \&#34;2cafad611543e0265d89f1c2b60d9ebf5d56ad7e23d9827d6b522fd4d6e44bc3\&#34;,&#xA;    \&#34;tx_pointer\&#34;: {&#xA;      \&#34;block_height\&#34;: 0,&#xA;      \&#34;tx_index\&#34;: 0&#xA;    },&#xA;    \&#34;witness_index\&#34;: 0,&#xA;    \&#34;maturity\&#34;: 0,&#xA;    \&#34;predicate_gas_used\&#34;: null,&#xA;    \&#34;predicate\&#34;: null,&#xA;    \&#34;predicate_data\&#34;: null&#xA;  }&#xA;}],\&#34;outputs\&#34;:[],\&#34;witnesses\&#34;:[{&#xA;  \&#34;data\&#34;: [&#xA;    150,&#xA;    31,&#xA;    98,&#xA;    51,&#xA;    6,&#xA;    239,&#xA;    255,&#xA;    243,&#xA;    45,&#xA;    35,&#xA;    182,&#xA;    26,&#xA;    129,&#xA;    152,&#xA;    46,&#xA;    95,&#xA;    45,&#xA;    211,&#xA;    114,&#xA;    58,&#xA;    51,&#xA;    64,&#xA;    129,&#xA;    194,&#xA;    97,&#xA;    14,&#xA;    181,&#xA;    70,&#xA;    190,&#xA;    37,&#xA;    106,&#xA;    223,&#xA;    170,&#xA;    174,&#xA;    221,&#xA;    230,&#xA;    87,&#xA;    239,&#xA;    67,&#xA;    224,&#xA;    100,&#xA;    137,&#xA;    25,&#xA;    249,&#xA;    193,&#xA;    14,&#xA;    184,&#xA;    195,&#xA;    15,&#xA;    85,&#xA;    156,&#xA;    82,&#xA;    91,&#xA;    78,&#xA;    91,&#xA;    80,&#xA;    126,&#xA;    168,&#xA;    215,&#xA;    170,&#xA;    139,&#xA;    48,&#xA;    19,&#xA;    5&#xA;  ]&#xA;}],\&#34;receipts_root\&#34;:\&#34;0x6114142d12e0f58cfb8c72c270cd0535944fb1ba763dce83c17e882c482224a2\&#34;}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>denoland/dnt</title>
    <updated>2023-07-06T01:45:34Z</updated>
    <id>tag:github.com,2023-07-06:/denoland/dnt</id>
    <link href="https://github.com/denoland/dnt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deno to npm package build tool.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dnt - Deno to Node Transform&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doc.deno.land/https/deno.land/x/dnt/mod.ts&#34;&gt;&lt;img src=&#34;https://doc.deno.land/badge.svg?sanitize=true&#34; alt=&#34;deno doc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deno to npm package build tool.&lt;/p&gt; &#xA;&lt;h2&gt;What does this do?&lt;/h2&gt; &#xA;&lt;p&gt;Takes a Deno module and creates an npm package for use in Node.js.&lt;/p&gt; &#xA;&lt;p&gt;There are several steps done in a pipeline:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Transforms Deno code to Node/canonical TypeScript including files found by &lt;code&gt;deno test&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rewrites module specifiers.&lt;/li&gt; &#xA;   &lt;li&gt;Injects &lt;a href=&#34;https://github.com/denoland/node_deno_shims&#34;&gt;shims&lt;/a&gt; for any &lt;code&gt;Deno&lt;/code&gt; namespace or other global name usages as specified.&lt;/li&gt; &#xA;   &lt;li&gt;Rewrites &lt;a href=&#34;https://www.skypack.dev/&#34;&gt;Skypack&lt;/a&gt; and &lt;a href=&#34;https://esm.sh/&#34;&gt;esm.sh&lt;/a&gt; specifiers to bare specifiers and includes these dependencies in a package.json.&lt;/li&gt; &#xA;   &lt;li&gt;When remote modules cannot be resolved to an npm package, it downloads them and rewrites specifiers to make them local.&lt;/li&gt; &#xA;   &lt;li&gt;Allows mapping any specifier to an npm package.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Type checks the output.&lt;/li&gt; &#xA; &lt;li&gt;Emits ESM, CommonJS, and TypeScript declaration files along with a &lt;em&gt;package.json&lt;/em&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Runs the final output in Node.js through a test runner calling all &lt;code&gt;Deno.test&lt;/code&gt; calls.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a build script file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// ex. scripts/build_npm.ts&#xA;import { build, emptyDir } from &#34;https://deno.land/x/dnt/mod.ts&#34;;&#xA;&#xA;await emptyDir(&#34;./npm&#34;);&#xA;&#xA;await build({&#xA;  entryPoints: [&#34;./mod.ts&#34;],&#xA;  outDir: &#34;./npm&#34;,&#xA;  shims: {&#xA;    // see JS docs for overview and more options&#xA;    deno: true,&#xA;  },&#xA;  package: {&#xA;    // package.json properties&#xA;    name: &#34;your-package&#34;,&#xA;    version: Deno.args[0],&#xA;    description: &#34;Your package.&#34;,&#xA;    license: &#34;MIT&#34;,&#xA;    repository: {&#xA;      type: &#34;git&#34;,&#xA;      url: &#34;git+https://github.com/username/repo.git&#34;,&#xA;    },&#xA;    bugs: {&#xA;      url: &#34;https://github.com/username/repo/issues&#34;,&#xA;    },&#xA;  },&#xA;  postBuild() {&#xA;    // steps to run after building and before running the tests&#xA;    Deno.copyFileSync(&#34;LICENSE&#34;, &#34;npm/LICENSE&#34;);&#xA;    Deno.copyFileSync(&#34;README.md&#34;, &#34;npm/README.md&#34;);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ignore the output directory with your source control if you desire (ex. add &lt;code&gt;npm/&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run it and &lt;code&gt;npm publish&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run script&#xA;deno run -A scripts/build_npm.ts 0.1.0&#xA;&#xA;# go to output directory and publish&#xA;cd npm&#xA;npm publish&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Example Build Logs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;[dnt] Transforming...&#xA;[dnt] Running npm install...&#xA;[dnt] Building project...&#xA;[dnt] Type checking ESM...&#xA;[dnt] Emitting ESM package...&#xA;[dnt] Emitting script package...&#xA;[dnt] Running tests...&#xA;&#xA;&amp;gt; test&#xA;&amp;gt; node test_runner.js&#xA;&#xA;Running tests in ./script/mod.test.js...&#xA;&#xA;test escapeWithinString ... ok&#xA;test escapeChar ... ok&#xA;&#xA;Running tests in ./esm/mod.test.js...&#xA;&#xA;test escapeWithinString ... ok&#xA;test escapeChar ... ok&#xA;[dnt] Complete!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;h3&gt;Disabling Type Checking, Testing, Declaration Emit, or CommonJS/UMD Output&lt;/h3&gt; &#xA;&lt;p&gt;Use the following options to disable any one of these, which are enabled by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  typeCheck: false,&#xA;  test: false,&#xA;  declaration: false,&#xA;  scriptModule: false,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Type Checking Both ESM and Script Output&lt;/h3&gt; &#xA;&lt;p&gt;By default, only the ESM output will be type checked for performance reasons. That said, it&#39;s recommended to type check both the ESM and the script (CJS/UMD) output by setting &lt;code&gt;typeCheck&lt;/code&gt; to &lt;code&gt;&#34;both&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  typeCheck: &#34;both&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignoring Specific Type Checking Errors&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you may be getting a TypeScript error that is not helpful and you want to ignore it. This is possible by using the &lt;code&gt;filterDiagnostic&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  filterDiagnostic(diagnostic) {&#xA;    if (&#xA;      diagnostic.file?.fileName.endsWith(&#34;fmt/colors.ts&#34;)&#xA;    ) {&#xA;      return false; // ignore all diagnostics in this file&#xA;    }&#xA;    // etc... more checks here&#xA;    return true;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful for ignoring type checking errors in remote dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Top Level Await&lt;/h3&gt; &#xA;&lt;p&gt;Top level await doesn&#39;t work in CommonJS/UMD and dnt will error if a top level await is used and you are outputting CommonJS/UMD code. If you want to output a CommonJS/UMD package then you&#39;ll have to restructure your code to not use any top level awaits. Otherwise, set the &lt;code&gt;scriptModule&lt;/code&gt; build option to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  scriptModule: false,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shims&lt;/h3&gt; &#xA;&lt;p&gt;dnt will shim the globals specified in the build options. For example, if you specify the following build options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  shims: {&#xA;    deno: true,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then write a statement like so...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;Deno.readTextFileSync(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...dnt will create a shim file in the output, re-exporting the &lt;a href=&#34;https://github.com/denoland/node_deno_shims&#34;&gt;@deno/shim-deno&lt;/a&gt; npm shim package and change the Deno global to be used as a property of this object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import * as dntShim from &#34;./_dnt.shims.js&#34;;&#xA;&#xA;dntShim.Deno.readTextFileSync(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test-Only Shimming&lt;/h4&gt; &#xA;&lt;p&gt;If you want a shim to only be used in your test code as a dev dependency, then specify &lt;code&gt;&#34;dev&#34;&lt;/code&gt; for the option.&lt;/p&gt; &#xA;&lt;p&gt;For example, to use the &lt;code&gt;Deno&lt;/code&gt; namespace only for development and the &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; browser/Deno compatible shims in the distributed code, you would do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  shims: {&#xA;    deno: &#34;dev&#34;,&#xA;    timers: true,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Preventing Shimming&lt;/h4&gt; &#xA;&lt;p&gt;To prevent shimming in specific instances, add a &lt;code&gt;// dnt-shim-ignore&lt;/code&gt; comment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// dnt-shim-ignore&#xA;Deno.readTextFileSync(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...which will now output that code as-is.&lt;/p&gt; &#xA;&lt;h4&gt;Built-In Shims&lt;/h4&gt; &#xA;&lt;p&gt;Set any of these properties to &lt;code&gt;true&lt;/code&gt; (distribution and test) or &lt;code&gt;&#34;dev&#34;&lt;/code&gt; (test only) to use them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;deno&lt;/code&gt; - Shim the &lt;code&gt;Deno&lt;/code&gt; namespace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timers&lt;/code&gt; - Shim the global &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; functions with Deno and browser compatible versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompts&lt;/code&gt; - Shim the global &lt;code&gt;confirm&lt;/code&gt;, &lt;code&gt;alert&lt;/code&gt;, and &lt;code&gt;prompt&lt;/code&gt; functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blob&lt;/code&gt; - Shim the &lt;code&gt;Blob&lt;/code&gt; global with the one from the &lt;code&gt;&#34;buffer&#34;&lt;/code&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;crypto&lt;/code&gt; - Shim the &lt;code&gt;crypto&lt;/code&gt; global.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;domException&lt;/code&gt; - Shim the &lt;code&gt;DOMException&lt;/code&gt; global using the &#34;domexception&#34; package (&lt;a href=&#34;https://www.npmjs.com/package/domexception&#34;&gt;https://www.npmjs.com/package/domexception&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;undici&lt;/code&gt; - Shim &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;FormData&lt;/code&gt;, &lt;code&gt;Headers&lt;/code&gt;, &lt;code&gt;Request&lt;/code&gt;, and &lt;code&gt;Response&lt;/code&gt; by using the &#34;undici&#34; package (&lt;a href=&#34;https://www.npmjs.com/package/undici&#34;&gt;https://www.npmjs.com/package/undici&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;weakRef&lt;/code&gt; - Sham for the &lt;code&gt;WeakRef&lt;/code&gt; global, which uses &lt;code&gt;globalThis.WeakRef&lt;/code&gt; when it exists. The sham will throw at runtime when calling &lt;code&gt;deref()&lt;/code&gt; and &lt;code&gt;WeakRef&lt;/code&gt; doesn&#39;t globally exist, so this is only intended to help type check code that won&#39;t actually use it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;webSocket&lt;/code&gt; - Shim &lt;code&gt;WebSocket&lt;/code&gt; by using the &lt;a href=&#34;https://www.npmjs.com/package/ws&#34;&gt;ws&lt;/a&gt; package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;&lt;code&gt;Deno.test&lt;/code&gt;-only shim&lt;/h5&gt; &#xA;&lt;p&gt;If you only want to shim &lt;code&gt;Deno.test&lt;/code&gt; then provide the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  shims: {&#xA;    deno: {&#xA;      test: &#34;dev&#34;,&#xA;    },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may be useful in Node v14 and below where the full deno shim doesn&#39;t always work. See the section on Node v14 below for more details&lt;/p&gt; &#xA;&lt;h4&gt;Custom Shims (Advanced)&lt;/h4&gt; &#xA;&lt;p&gt;In addition to the pre-defined shim options, you may specify your own custom packages to use to shim globals.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  scriptModule: false, // node-fetch 3+ only supports ESM&#xA;  // ...etc...&#xA;  shims: {&#xA;    custom: [{&#xA;      package: {&#xA;        name: &#34;node-fetch&#34;,&#xA;        version: &#34;~3.1.0&#34;,&#xA;      },&#xA;      globalNames: [{&#xA;        // for the `fetch` global...&#xA;        name: &#34;fetch&#34;,&#xA;        // use the default export of node-fetch&#xA;        exportName: &#34;default&#34;,&#xA;      }, {&#xA;        name: &#34;RequestInit&#34;,&#xA;        typeOnly: true, // only used in type declarations&#xA;      }],&#xA;    }, {&#xA;      // this is what `blob: true` does internally&#xA;      module: &#34;buffer&#34;, // uses node&#39;s &#34;buffer&#34; module&#xA;      globalNames: [&#34;Blob&#34;],&#xA;    }, {&#xA;      // this is what `domException: true` does internally&#xA;      package: {&#xA;        name: &#34;domexception&#34;,&#xA;        version: &#34;^4.0.0&#34;,&#xA;      },&#xA;      typesPackage: {&#xA;        name: &#34;@types/domexception&#34;,&#xA;        version: &#34;^4.0.0&#34;,&#xA;      },&#xA;      globalNames: [{&#xA;        name: &#34;DOMException&#34;,&#xA;        exportName: &#34;default&#34;,&#xA;      }],&#xA;    }],&#xA;    // shims to only use in the tests&#xA;    customDev: [{&#xA;      // this is what `timers: &#34;dev&#34;` does internally&#xA;      package: {&#xA;        name: &#34;@deno/shim-timers&#34;,&#xA;        version: &#34;~0.1.0&#34;,&#xA;      },&#xA;      globalNames: [&#34;setTimeout&#34;, &#34;setInterval&#34;],&#xA;    }],&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Local and Remote Shims&lt;/h4&gt; &#xA;&lt;p&gt;Custom shims can also refer to local or remote modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  shims: {&#xA;    custom: [{&#xA;      module: &#34;./my-custom-fetch-implementation.ts&#34;,&#xA;      globalNames: [&#34;fetch&#34;],&#xA;    }, {&#xA;      module: &#34;https://deno.land/x/some_remote_shim_module/mod.ts&#34;,&#xA;      globalNames: [&#34;setTimeout&#34;],&#xA;    }],&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;my-custom-fetch-implementation.ts&lt;/code&gt; contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export function fetch(/* etc... */) {&#xA;  // etc...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful in situations where you want to implement your own shim.&lt;/p&gt; &#xA;&lt;h3&gt;Specifier to npm Package Mappings&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, dnt won&#39;t know about an npm package being available for one of your dependencies and will download remote modules to include in your package. There are scenarios though where an npm package may exist and you want to use it instead. This can be done by providing a specifier to npm package mapping.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  mappings: {&#xA;    &#34;https://deno.land/x/code_block_writer@11.0.0/mod.ts&#34;: {&#xA;      name: &#34;code-block-writer&#34;,&#xA;      version: &#34;^11.0.0&#34;,&#xA;      // optionally specify if this should be a peer dependency&#xA;      peerDependency: false,&#xA;    },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Change all &lt;code&gt;&#34;https://deno.land/x/code_block_writer@11.0.0/mod.ts&#34;&lt;/code&gt; specifiers to &lt;code&gt;&#34;code-block-writer&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add a package.json dependency for &lt;code&gt;&#34;code-block-writer&#34;: &#34;^11.0.0&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that dnt will error if you specify a mapping and it is not found in the code. This is done to prevent the scenario where a remote specifier&#39;s version is bumped and the mapping isn&#39;t updated.&lt;/p&gt; &#xA;&lt;h4&gt;Mapping specifier to npm package subpath&lt;/h4&gt; &#xA;&lt;p&gt;Say an npm package called &lt;code&gt;example&lt;/code&gt; had a subpath at &lt;code&gt;sub_path.js&lt;/code&gt; and you wanted to map &lt;code&gt;https://deno.land/x/example@0.1.0/sub_path.ts&lt;/code&gt; to that subpath. To specify this, you would do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  mappings: {&#xA;    &#34;https://deno.land/x/example@0.1.0/sub_path.ts&#34;: {&#xA;      name: &#34;example&#34;,&#xA;      version: &#34;^0.1.0&#34;,&#xA;      subPath: &#34;sub_path.js&#34;, // note this&#xA;    },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would cause the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import * as mod from &#34;https://deno.land/x/example@0.1.0/sub_path.ts&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...to go to...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import * as mod from &#34;example/sub_path.js&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...with a dependency on &lt;code&gt;&#34;example&#34;: &#34;^0.1.0&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Entry Points&lt;/h3&gt; &#xA;&lt;p&gt;To do this, specify multiple entry points like so (ex. an entry point at &lt;code&gt;.&lt;/code&gt; and another at &lt;code&gt;./internal&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  entryPoints: [&#34;mod.ts&#34;, {&#xA;    name: &#34;./internal&#34;,&#xA;    path: &#34;internal.ts&#34;,&#xA;  }],&#xA;  // ...etc...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a package.json with these as exports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;  &#34;name&#34;: &#34;your-package&#34;,&#xA;  // etc...&#xA;  &#34;main&#34;: &#34;./script/mod.js&#34;,&#xA;  &#34;module&#34;: &#34;./esm/mod.js&#34;,&#xA;  &#34;types&#34;: &#34;./types/mod.d.ts&#34;,&#xA;  &#34;exports&#34;: {&#xA;    &#34;.&#34;: {&#xA;      &#34;import&#34;: {&#xA;        &#34;types&#34;: &#34;./types/mod.d.ts&#34;,&#xA;        &#34;default&#34;: &#34;./esm/mod.js&#34;&#xA;      },&#xA;      &#34;require&#34;: {&#xA;        &#34;types&#34;: &#34;./types/mod.d.ts&#34;,&#xA;        &#34;default&#34;: &#34;./script/mod.js&#34;&#xA;      }&#xA;    },&#xA;    &#34;./internal&#34;: {&#xA;      &#34;import&#34;: {&#xA;        &#34;types&#34;: &#34;./types/internal.d.ts&#34;,&#xA;        &#34;default&#34;: &#34;./esm/internal.js&#34;&#xA;      },&#xA;      &#34;require&#34;: {&#xA;        &#34;types&#34;: &#34;./types/internal.d.ts&#34;,&#xA;        &#34;default&#34;: &#34;./script/internal.js&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now these entry points could be imported like &lt;code&gt;import * as main from &#34;your-package&#34;&lt;/code&gt; and &lt;code&gt;import * as internal from &#34;your-package/internal&#34;;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bin/CLI Packages&lt;/h3&gt; &#xA;&lt;p&gt;To publish an npm &lt;a href=&#34;https://docs.npmjs.com/cli/v7/configuring-npm/package-json#bin&#34;&gt;bin package&lt;/a&gt; similar to &lt;code&gt;deno install&lt;/code&gt;, add a &lt;code&gt;kind: &#34;bin&#34;&lt;/code&gt; entry point:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  entryPoints: [{&#xA;    kind: &#34;bin&#34;,&#xA;    name: &#34;my_binary&#34;, // command name&#xA;    path: &#34;./cli.ts&#34;,&#xA;  }],&#xA;  // ...etc...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add a &lt;code&gt;&#34;bin&#34;&lt;/code&gt; entry to the package.json and add &lt;code&gt;#!/usr/bin/env node&lt;/code&gt; to the top of the specified entry point.&lt;/p&gt; &#xA;&lt;h3&gt;Node and Deno Specific Code&lt;/h3&gt; &#xA;&lt;p&gt;You may find yourself in a scenario where you want to run certain code based on whether someone is in Deno or if someone is in Node and feature testing is not possible. For example, say you want to run the &lt;code&gt;deno&lt;/code&gt; executable when the code is running in Deno and the &lt;code&gt;node&lt;/code&gt; executable when it&#39;s running in Node.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;which_runtime&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;One option to handle this, is to use the &lt;a href=&#34;https://deno.land/x/which_runtime&#34;&gt;&lt;code&gt;which_runtime&lt;/code&gt;&lt;/a&gt; deno.land/x module which provides some exports saying if the code is running in Deno or Node.&lt;/p&gt; &#xA;&lt;h4&gt;Node and Deno Specific Modules&lt;/h4&gt; &#xA;&lt;p&gt;Another option is to create node and deno specific modules. This can be done by specifying a mapping to a module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  mappings: {&#xA;    &#34;./file.deno.ts&#34;: &#34;./file.node.ts&#34;,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then within the file, use &lt;code&gt;// dnt-shim-ignore&lt;/code&gt; directives to disable shimming if you desire.&lt;/p&gt; &#xA;&lt;p&gt;A mapped module should be written similar to how you write Deno code (ex. use extensions on imports), except you can also import built-in node modules such as &lt;code&gt;import fs from &#34;fs&#34;;&lt;/code&gt; (just remember to include an &lt;code&gt;@types/node&lt;/code&gt; dev dependency under the &lt;code&gt;package.devDependencies&lt;/code&gt; object when calling the &lt;code&gt;build&lt;/code&gt; function, if necessary).&lt;/p&gt; &#xA;&lt;h3&gt;Pre &amp;amp; Post Build Steps&lt;/h3&gt; &#xA;&lt;p&gt;Since the file you&#39;re calling is a script, simply add statements before and after the &lt;code&gt;await build({ ... })&lt;/code&gt; statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { build, emptyDir } from &#34;https://deno.land/x/dnt/mod.ts&#34;;&#xA;&#xA;// run pre-build steps here&#xA;await emptyDir(&#34;./npm&#34;);&#xA;&#xA;// build&#xA;await build({&#xA;  // ...etc..&#xA;});&#xA;&#xA;// run post-build steps here&#xA;await Deno.copyFile(&#34;LICENSE&#34;, &#34;npm/LICENSE&#34;);&#xA;await Deno.copyFile(&#34;README.md&#34;, &#34;npm/README.md&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Including Test Data Files&lt;/h3&gt; &#xA;&lt;p&gt;Your Deno tests might rely on test data files. One way of handling this is to copy these files to be in the output directory at the same relative path your Deno tests run with.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { copy } from &#34;https://deno.land/std@x.x.x/fs/mod.ts&#34;;&#xA;&#xA;await Deno.remove(&#34;npm&#34;, { recursive: true }).catch((_) =&amp;gt; {});&#xA;await copy(&#34;testdata&#34;, &#34;npm/esm/testdata&#34;, { overwrite: true });&#xA;await copy(&#34;testdata&#34;, &#34;npm/script/testdata&#34;, { overwrite: true });&#xA;&#xA;await build({&#xA;  // ...etc...&#xA;});&#xA;&#xA;// ensure the test data is ignored in the `.npmignore` file&#xA;// so it doesn&#39;t get published with your npm package&#xA;await Deno.writeTextFile(&#xA;  &#34;npm/.npmignore&#34;,&#xA;  &#34;esm/testdata/\nscript/testdata/\n&#34;,&#xA;  { append: true },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you could also use the &lt;a href=&#34;https://deno.land/x/which_runtime&#34;&gt;&lt;code&gt;which_runtime&lt;/code&gt;&lt;/a&gt; module and use a different directory path when the tests are running in Node. This is probably more ideal if you have a lot of test data.&lt;/p&gt; &#xA;&lt;h3&gt;Test File Matching&lt;/h3&gt; &#xA;&lt;p&gt;By default, dnt uses the same search &lt;a href=&#34;https://deno.land/manual/testing&#34;&gt;pattern&lt;/a&gt; that &lt;code&gt;deno test&lt;/code&gt; uses to find test files. To override this, provide a &lt;code&gt;testPattern&lt;/code&gt; and/or &lt;code&gt;rootTestDir&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  testPattern: &#34;**/*.test.{ts,tsx,js,mjs,jsx}&#34;,&#xA;  // and/or provide a directory to start searching for test&#xA;  // files from, which defaults to the current working directory&#xA;  rootTestDir: &#34;./tests&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Import Map / deno.json Support&lt;/h3&gt; &#xA;&lt;p&gt;To use an import map or deno.json file with &lt;code&gt;&#34;imports&#34;&lt;/code&gt; and/or &lt;code&gt;&#34;scopes&#34;&lt;/code&gt;, add an &lt;code&gt;importMap&lt;/code&gt; entry to your build object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  importMap: &#34;deno.json&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note there is no support for the deno.json &lt;code&gt;importMap&lt;/code&gt; key. Either embed that in your deno.json or specify the import map in this property directly. Also note that the deno.json is not auto-discoveredâyou must explicitly specify it.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub Actions - Npm Publish on Tag&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your build script accepts a version as a CLI argument and sets that in the package.json object. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  package: {&#xA;    version: Deno.args[0],&#xA;    // ...etc...&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: You may wish to remove the leading &lt;code&gt;v&lt;/code&gt; in the tag name if it exists (ex. &lt;code&gt;Deno.args[0]?.replace(/^v/, &#34;&#34;)&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your npm settings, create an &lt;em&gt;automation&lt;/em&gt; access token (see &lt;a href=&#34;https://docs.npmjs.com/creating-and-viewing-access-tokens&#34;&gt;Creating and Viewing Access Tokens&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your GitHub repo or organization, add a secret for &lt;code&gt;NPM_TOKEN&lt;/code&gt; with the value created in the previous step (see &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository&#34;&gt;Creating Encrypted Secrets for a Repository&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your GitHub Actions workflow, get the tag name, setup node, run your build script, then publish to npm.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# ...setup deno and run `deno test` here as you normally would...&#xA;&#xA;- name: Get tag version&#xA;  if: startsWith(github.ref, &#39;refs/tags/&#39;)&#xA;  id: get_tag_version&#xA;  run: echo TAG_VERSION=${GITHUB_REF/refs\/tags\//} &amp;gt;&amp;gt; $GITHUB_OUTPUT&#xA;- uses: actions/setup-node@v3&#xA;  with:&#xA;    node-version: &#39;18.x&#39;&#xA;    registry-url: &#39;https://registry.npmjs.org&#39;&#xA;- name: npm build&#xA;  run: deno run -A ./scripts/build_npm.ts ${{steps.get_tag_version.outputs.TAG_VERSION}}&#xA;- name: npm publish&#xA;  if: startsWith(github.ref, &#39;refs/tags/&#39;)&#xA;  env:&#xA;    NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}&#xA;  run: cd npm &amp;amp;&amp;amp; npm publish&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the build script always runs even when not publishing. This is to ensure your build and tests pass on each commit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure the workflow will run on tag creation. For example, see &lt;a href=&#34;https://stackoverflow.com/q/61891328/188246&#34;&gt;Trigger GitHub Action Only on New Tags&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using Another Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;You may want to use another Node.js package manager instead of npm, such as Yarn or pnpm. To do this, override the &lt;code&gt;packageManager&lt;/code&gt; option in the build options.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  packageManager: &#34;yarn&#34;, // or &#34;pnpm&#34;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even specify an absolute path to the executable file of the package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  packageManager: &#34;/usr/bin/pnpm&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DOM Types&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to compile with DOM types for type checking, you may specify a &#34;dom&#34; lib compiler option when building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await build({&#xA;  // ...etc...&#xA;  compilerOptions: {&#xA;    lib: [&#34;ES2021&#34;, &#34;DOM&#34;],&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Node v14 and Below&lt;/h3&gt; &#xA;&lt;p&gt;dnt should be able to target old versions of Node by specifying a &lt;code&gt;{ compilerOption: { target: ... }}&lt;/code&gt; value in the build options (see &lt;a href=&#34;https://github.com/microsoft/TypeScript/wiki/Node-Target-Mapping&#34;&gt;Node Target Mapping&lt;/a&gt; for what target maps to what Node version). A problem though is that certain shims might not work in old versions of Node.&lt;/p&gt; &#xA;&lt;p&gt;If wanting to target a version of Node v14 and below, its recommend to use the &lt;code&gt;Deno.test&lt;/code&gt;-only shim (described above) and then making use of the &#34;mappings&#34; feature to write Node-only files where you can handle differences. Alternatively, see if changes to the shim libraries might make it run on old versions of Node. Unfortunately, certain features are impossible or infeasible to get working.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/denoland/node_deno_shims/issues/15&#34;&gt;this thread&lt;/a&gt; in node_deno_shims for more details.&lt;/p&gt; &#xA;&lt;h2&gt;JS API Example&lt;/h2&gt; &#xA;&lt;p&gt;For only the Deno to canonical TypeScript transform which may be useful for bundlers, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// docs: https://doc.deno.land/https/deno.land/x/dnt/transform.ts&#xA;import { transform } from &#34;https://deno.land/x/dnt/transform.ts&#34;;&#xA;&#xA;const outputResult = await transform({&#xA;  entryPoints: [&#34;./mod.ts&#34;],&#xA;  testEntryPoints: [&#34;./mod.test.ts&#34;],&#xA;  shims: [],&#xA;  testShims: [],&#xA;  // mappings: {}, // optional specifier mappings&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rust API Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::path::PathBuf;&#xA;&#xA;use deno_node_transform::ModuleSpecifier;&#xA;use deno_node_transform::transform;&#xA;use deno_node_transform::TransformOptions;&#xA;&#xA;let output_result = transform(TransformOptions {&#xA;  entry_points: vec![ModuleSpecifier::from_file_path(PathBuf::from(&#34;./mod.ts&#34;)).unwrap()],&#xA;  test_entry_points: vec![ModuleSpecifier::from_file_path(PathBuf::from(&#34;./mod.test.ts&#34;)).unwrap()],&#xA;  shims: vec![],&#xA;  test_shims: vec![],&#xA;  loader: None, // use the default loader&#xA;  specifier_mappings: None,&#xA;}).await?;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>