<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-08T01:36:46Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Jondolf/avian</title>
    <updated>2024-07-08T01:36:46Z</updated>
    <id>tag:github.com,2024-07-08:/Jondolf/avian</id>
    <link href="https://github.com/Jondolf/avian" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ECS-driven 2D and 3D physics engine for the Bevy game engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Jondolf/avian/avian/assets/branding/logo.svg?sanitize=true&#34; alt=&#34;Avian Physics&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Jondolf/avian#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true&#34; alt=&#34;MIT/Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Jondolf/avian/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Jondolf/avian/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/avian2d&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/avian2d?label=2D%20crates.io&#34; alt=&#34;2D crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/avian2d&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/avian2d?label=2D%20docs.rs&#34; alt=&#34;2D docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/avian3d&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/avian3d?label=3D%20crates.io&#34; alt=&#34;3D crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/avian3d&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/avian3d?label=3D%20docs.rs&#34; alt=&#34;3D docs.rs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Avian&lt;/strong&gt; is an ECS-driven 2D and 3D physics engine for the &lt;a href=&#34;https://bevyengine.org/&#34;&gt;Bevy game engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;Below are some of the core design principles used in Avian.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Made with Bevy, for Bevy.&lt;/strong&gt; No wrappers around existing engines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Provide an ergonomic and familiar API.&lt;/strong&gt; Ergonomics is key for a good experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Utilize the ECS as much as possible.&lt;/strong&gt; The engine should feel like a part of Bevy, and it shouldn&#39;t need to maintain a separate physics world.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use a highly modular plugin architecture.&lt;/strong&gt; Users should be able to replace parts of the engine with their own implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have good documentation.&lt;/strong&gt; A physics engine is pointless if you don&#39;t know how to use it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Below are some of the current features of Avian.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic, kinematic and static rigid bodies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linear and angular velocity&lt;/li&gt; &#xA;   &lt;li&gt;External forces, torque and impulses&lt;/li&gt; &#xA;   &lt;li&gt;Gravity and gravity scale&lt;/li&gt; &#xA;   &lt;li&gt;Linear and angular damping&lt;/li&gt; &#xA;   &lt;li&gt;Locking translational and rotational axes&lt;/li&gt; &#xA;   &lt;li&gt;Rigid body dominance&lt;/li&gt; &#xA;   &lt;li&gt;Continuous Collision Detection (CCD)&lt;/li&gt; &#xA;   &lt;li&gt;Automatic deactivation with sleeping&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Collision detection powered by &lt;a href=&#34;https://parry.rs&#34;&gt;Parry&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Colliders with configurable collision layers, density, material properties and more&lt;/li&gt; &#xA;   &lt;li&gt;Collider generation for meshes and entire scenes&lt;/li&gt; &#xA;   &lt;li&gt;Collision events&lt;/li&gt; &#xA;   &lt;li&gt;Access to colliding entities&lt;/li&gt; &#xA;   &lt;li&gt;Filtering and modifying collisions with custom systems&lt;/li&gt; &#xA;   &lt;li&gt;Manual contact queries and intersection tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Constraints and joints &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Several built-in joint types: fixed, distance, prismatic, revolute, spherical&lt;/li&gt; &#xA;   &lt;li&gt;Support for custom joints and other constraints using XPBD&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Spatial queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Raycasting, shapecasting, point projection and intersection tests&lt;/li&gt; &#xA;   &lt;li&gt;Ergonomic component-based API for raycasts and shapecasts&lt;/li&gt; &#xA;   &lt;li&gt;Flexible &lt;code&gt;SpatialQuery&lt;/code&gt; system parameter&lt;/li&gt; &#xA;   &lt;li&gt;Spatial query filters&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Debug rendering for colliders, AABBs, contacts, joints, sleeping, axes and spatial queries&lt;/li&gt; &#xA; &lt;li&gt;Configurable scheduling and high customizability&lt;/li&gt; &#xA; &lt;li&gt;Highly modular plugin architecture, freely extend and replace parts of the engine&lt;/li&gt; &#xA; &lt;li&gt;Support for custom collision backends&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f32&lt;/code&gt;/&lt;code&gt;f64&lt;/code&gt; precision (&lt;code&gt;f32&lt;/code&gt; by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find a more complete list along with documentation in the &lt;a href=&#34;https://docs.rs/avian3d/latest/avian3d/#table-of-contents&#34;&gt;Table of contents&lt;/a&gt; on docs.rs.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/avian2d&#34;&gt;2D documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/avian3d&#34;&gt;3D documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;p&gt;First, add &lt;code&gt;avian2d&lt;/code&gt; or &lt;code&gt;avian3d&lt;/code&gt; to your dependencies in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# For 2D applications:&#xA;[dependencies]&#xA;avian2d = &#34;0.1&#34;&#xA;&#xA;# For 3D applications:&#xA;[dependencies]&#xA;avian3d = &#34;0.1&#34;&#xA;&#xA;# If you want to use the most up-to-date version, you can follow the main branch:&#xA;[dependencies]&#xA;avian3d = { git = &#34;https://github.com/Jondolf/avian&#34;, branch = &#34;main&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is a very simple example where a cube with initial angular velocity falls onto a circular platform. This is a modified version of Bevy&#39;s &lt;a href=&#34;https://bevyengine.org/examples/3d-rendering/3d-scene/&#34;&gt;&lt;code&gt;3d_scene&lt;/code&gt;&lt;/a&gt; example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use avian3d::prelude::*;&#xA;use bevy::prelude::*;&#xA;&#xA;fn main() {&#xA;    App::new()&#xA;        // Enable physics&#xA;        .add_plugins((DefaultPlugins, PhysicsPlugins::default()))&#xA;        .add_systems(Startup, setup)&#xA;        .run();&#xA;}&#xA;&#xA;fn setup(&#xA;    mut commands: Commands,&#xA;    mut meshes: ResMut&amp;lt;Assets&amp;lt;Mesh&amp;gt;&amp;gt;,&#xA;    mut materials: ResMut&amp;lt;Assets&amp;lt;StandardMaterial&amp;gt;&amp;gt;,&#xA;) {&#xA;    // Static physics object with a collision shape&#xA;    commands.spawn((&#xA;        RigidBody::Static,&#xA;        Collider::cylinder(4.0, 0.1),&#xA;        PbrBundle {&#xA;            mesh: meshes.add(Cylinder::new(4.0, 0.1)),&#xA;            material: materials.add(Color::WHITE),&#xA;            ..default()&#xA;        },&#xA;    ));&#xA;&#xA;    // Dynamic physics object with a collision shape and initial angular velocity&#xA;    commands.spawn((&#xA;        RigidBody::Dynamic,&#xA;        Collider::cuboid(1.0, 1.0, 1.0),&#xA;        AngularVelocity(Vec3::new(2.5, 3.5, 1.5)),&#xA;        PbrBundle {&#xA;            mesh: meshes.add(Cuboid::new(1.0, 1.0, 1.0)),&#xA;            material: materials.add(Color::srgb_u8(124, 144, 255)),&#xA;            transform: Transform::from_xyz(0.0, 4.0, 0.0),&#xA;            ..default()&#xA;        },&#xA;    ));&#xA;&#xA;    // Light&#xA;    commands.spawn(PointLightBundle {&#xA;        point_light: PointLight {&#xA;            shadows_enabled: true,&#xA;            ..default()&#xA;        },&#xA;        transform: Transform::from_xyz(4.0, 8.0, 4.0),&#xA;        ..default()&#xA;    });&#xA;&#xA;    // Camera&#xA;    commands.spawn(Camera3dBundle {&#xA;        transform: Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Dir3::Y),&#xA;        ..default()&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Jondolf/avian/assets/57632562/d53197fc-e142-4eb9-a762-dc16f6cdb1dd&#34; alt=&#34;A spinning cube falling onto a circular platform&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;You can find lots of 2D and 3D examples in &lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/avian/main/crates/avian2d/examples&#34;&gt;/crates/avian2d/examples&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/avian/main/crates/avian3d/examples&#34;&gt;/crates/avian3d/examples&lt;/a&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;The examples support both &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; precisions, so the code contains some feature-dependent types like &lt;code&gt;Scalar&lt;/code&gt; and &lt;code&gt;Vector&lt;/code&gt;. In actual usage these are not needed, so you can just use &lt;code&gt;f32&lt;/code&gt; or &lt;code&gt;f64&lt;/code&gt; types depending on the features you have chosen.&lt;/p&gt; &#xA;&lt;p&gt;By default the examples use &lt;code&gt;f32&lt;/code&gt;. To run the &lt;code&gt;f64&lt;/code&gt; versions, you need to disable default features and manually choose the dimension and precision:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Manually specify dimension and precision. `parry-f64` enables collision detection using Parry.&#xA;cargo run --example cubes --no-default-features --features &#34;3d f64 parry-f64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Bevy versions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Bevy&lt;/th&gt; &#xA;   &lt;th&gt;Avian&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.14&lt;/td&gt; &#xA;   &lt;td&gt;0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Bevy XPBD versions (the predecessor of Avian)&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Bevy&lt;/th&gt; &#xA;    &lt;th&gt;Bevy XPBD&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0.14&lt;/td&gt; &#xA;    &lt;td&gt;0.5&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0.13&lt;/td&gt; &#xA;    &lt;td&gt;0.4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0.12&lt;/td&gt; &#xA;    &lt;td&gt;0.3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0.11&lt;/td&gt; &#xA;    &lt;td&gt;0.2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0.10&lt;/td&gt; &#xA;    &lt;td&gt;0.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Future features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Per-entity collision hooks or callbacks&lt;/li&gt; &#xA; &lt;li&gt;Flags for what types of collisions are active, like collisions against specific rigid body types, sensors or parents&lt;/li&gt; &#xA; &lt;li&gt;Performance optimization (better broad phase, parallel solver, proper SIMD...)&lt;/li&gt; &#xA; &lt;li&gt;Joint motors&lt;/li&gt; &#xA; &lt;li&gt;Articulations, aka. multibody joints&lt;/li&gt; &#xA; &lt;li&gt;Proper cross-platform determinism&lt;/li&gt; &#xA; &lt;li&gt;Soft bodies (cloth and deformable solids)&lt;/li&gt; &#xA; &lt;li&gt;Maybe fluid simulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any problems, feel free to open issues or create pull requests. For larger changes and additions, it&#39;s better to open an issue or ask me for input before making a pull request.&lt;/p&gt; &#xA;&lt;p&gt;You can also ask for help or ask questions on the &lt;a href=&#34;https://discord.com/invite/gMUk5Ph&#34;&gt;Bevy Discord&lt;/a&gt; server&#39;s &lt;code&gt;avian&lt;/code&gt; thread in &lt;code&gt;#crate-help&lt;/code&gt;. My username on the Discord is &lt;code&gt;Jondolf&lt;/code&gt; (&lt;code&gt;@jondolfdev&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Huge thanks to the entire Bevy community for the incredible support! All of your contributions, insight and requests are a massive help in driving the state of physics in Bevy forward, and it&#39;s what keeps me motivated to build the best engine I can.&lt;/p&gt; &#xA;&lt;p&gt;I would also like to give a special thanks to &lt;a href=&#34;https://github.com/johanhelsing&#34;&gt;Johan Helsing&lt;/a&gt; for inspiring this project and helping me significantly in the early stages. His original &lt;a href=&#34;https://johanhelsing.studio/posts/bevy-xpbd&#34;&gt;tutorial series&lt;/a&gt; is the reason &lt;code&gt;avian&lt;/code&gt; exists in the first place, and without his support and contributions, the project wouldn&#39;t be anywhere near where it is today.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Avian is free and open source. All code in this repository is dual-licensed under either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT License (&lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/avian/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/avian/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt;</summary>
  </entry>
</feed>