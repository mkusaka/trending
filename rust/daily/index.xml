<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-28T01:34:08Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DeterminateSystems/nix-installer</title>
    <updated>2023-10-28T01:34:08Z</updated>
    <id>tag:github.com,2023-10-28:/DeterminateSystems/nix-installer</id>
    <link href="https://github.com/DeterminateSystems/nix-installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Install Nix and flakes with the fast and reliable Determinate Nix Installer, with over 500,000 installs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Determinate Nix Installer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/nix-installer&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/nix-installer&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/nix-installer/latest/nix_installer/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/nix-installer&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fast, friendly, and reliable tool to help you use Nix with Flakes everywhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;nix-installer&lt;/code&gt; has successfully completed over 500,000 installs in a number of environments, including &lt;a href=&#34;https://raw.githubusercontent.com/DeterminateSystems/nix-installer/main/#as-a-github-action&#34;&gt;Github Actions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Multi User&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;root&lt;/code&gt; only&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Maturity&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux (x86_64 &amp;amp; aarch64)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓ (via &lt;a href=&#34;https://systemd.io&#34;&gt;systemd&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS (x86_64 &amp;amp; aarch64)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Stable (See note)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Valve Steam Deck (SteamOS)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WSL2 (x86_64 &amp;amp; aarch64)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓ (via &lt;a href=&#34;https://systemd.io&#34;&gt;systemd&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Podman Linux Containers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓ (via &lt;a href=&#34;https://systemd.io&#34;&gt;systemd&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Containers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux (i686)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓ (via &lt;a href=&#34;https://systemd.io&#34;&gt;systemd&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Unstable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; On &lt;strong&gt;MacOS only&lt;/strong&gt;, removing users and/or groups may fail if there are no users who are logged in graphically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install Nix with the default planner and options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to download a platform specific Installer binary yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -sL -o nix-installer https://install.determinate.systems/nix/nix-installer-x86_64-linux&#xA;$ chmod +x nix-installer&#xA;$ ./nix-installer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nix-installer&lt;/code&gt; installs Nix by following a &lt;em&gt;plan&lt;/em&gt; made by a &lt;em&gt;planner&lt;/em&gt;. Review the available planners:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./nix-installer install --help&#xA;Execute an install (possibly using an existing plan)&#xA;&#xA;To pass custom options, select a planner, for example `nix-installer install linux-multi --help`&#xA;&#xA;Usage: nix-installer install [OPTIONS] [PLAN]&#xA;       nix-installer install &amp;lt;COMMAND&amp;gt;&#xA;&#xA;Commands:&#xA;  linux&#xA;          A planner for Linux installs&#xA;  steam-deck&#xA;          A planner suitable for the Valve Steam Deck running SteamOS&#xA;  help&#xA;          Print this message or the help of the given subcommand(s)&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Planners have their own options and defaults, sharing most of them in common:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./nix-installer install linux --help&#xA;A planner for Linux installs&#xA;&#xA;Usage: nix-installer install linux [OPTIONS]&#xA;&#xA;Options:&#xA;# ...&#xA;      --nix-build-group-name &amp;lt;NIX_BUILD_GROUP_NAME&amp;gt;&#xA;          The Nix build group name&#xA;          &#xA;          [env: NIX_INSTALLER_NIX_BUILD_GROUP_NAME=]&#xA;          [default: nixbld]&#xA;&#xA;      --nix-build-group-id &amp;lt;NIX_BUILD_GROUP_ID&amp;gt;&#xA;          The Nix build group GID&#xA;          &#xA;          [env: NIX_INSTALLER_NIX_BUILD_GROUP_ID=]&#xA;          [default: 3000]&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Planners can be configured via environment variable or command arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | NIX_BUILD_GROUP_NAME=nixbuilder sh -s -- install linux-multi --nix-build-group-id 4000&#xA;# Or...&#xA;$ NIX_BUILD_GROUP_NAME=nixbuilder ./nix-installer install linux-multi --nix-build-group-id 4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrading Nix&lt;/h3&gt; &#xA;&lt;p&gt;You can upgrade Nix (to the version specified &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/nixpkgs/master/nixos/modules/installer/tools/nix-fallback-paths.nix&#34;&gt;here&lt;/a&gt;) by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo -i nix upgrade-nix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can &lt;a href=&#34;https://raw.githubusercontent.com/DeterminateSystems/nix-installer/main/#uninstalling&#34;&gt;uninstall&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/DeterminateSystems/nix-installer/main/#usage&#34;&gt;reinstall&lt;/a&gt; with a different version of the &lt;code&gt;nix-installer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Uninstalling&lt;/h3&gt; &#xA;&lt;p&gt;You can remove a &lt;code&gt;nix-installer&lt;/code&gt;-installed Nix by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/nix/nix-installer uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;As a Github Action&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer-action&#34;&gt;&lt;code&gt;nix-installer-action&lt;/code&gt;&lt;/a&gt; Github Action like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  pull_request:&#xA;  push:&#xA;    branches: [main]&#xA;&#xA;jobs:&#xA;  lints:&#xA;    name: Build&#xA;    runs-on: ubuntu-22.04&#xA;    steps:&#xA;    - uses: actions/checkout@v3&#xA;    - name: Install Nix&#xA;      uses: DeterminateSystems/nix-installer-action@main&#xA;    - name: Run `nix build`&#xA;      run: nix build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without systemd (Linux only)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; When &lt;code&gt;--init none&lt;/code&gt; is used, &lt;em&gt;only&lt;/em&gt; &lt;code&gt;root&lt;/code&gt; or users who can elevate to &lt;code&gt;root&lt;/code&gt; privileges can run Nix:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo -i nix run nixpkgs#hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you don&#39;t use &lt;a href=&#34;https://systemd.io&#34;&gt;systemd&lt;/a&gt;, you can still install Nix by explicitly specifying the &lt;code&gt;linux&lt;/code&gt; plan and &lt;code&gt;--init none&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux --init none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In a container&lt;/h3&gt; &#xA;&lt;p&gt;In Docker/Podman containers or WSL2 instances where an init (like &lt;code&gt;systemd&lt;/code&gt;) is not present, pass &lt;code&gt;--init none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For containers (without an init):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; When &lt;code&gt;--init none&lt;/code&gt; is used, &lt;em&gt;only&lt;/em&gt; &lt;code&gt;root&lt;/code&gt; or users who can elevate to &lt;code&gt;root&lt;/code&gt; privileges can run Nix:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo -i nix run nixpkgs#hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Dockerfile&#xA;FROM ubuntu:latest&#xA;RUN apt update -y&#xA;RUN apt install curl -y&#xA;RUN curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux \&#xA;  --extra-conf &#34;sandbox = false&#34; \&#xA;  --init none \&#xA;  --no-confirm&#xA;ENV PATH=&#34;${PATH}:/nix/var/nix/profiles/default/bin&#34;&#xA;RUN nix run nixpkgs#hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t ubuntu-with-nix .&#xA;docker run --rm -ti ubuntu-with-nix&#xA;docker rmi ubuntu-with-nix&#xA;# or&#xA;podman build -t ubuntu-with-nix .&#xA;podman run --rm -ti ubuntu-with-nix&#xA;podman rmi ubuntu-with-nix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For containers with a systemd init:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Dockerfile&#xA;FROM ubuntu:latest&#xA;RUN apt update -y&#xA;RUN apt install curl systemd -y&#xA;RUN curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux \&#xA;  --extra-conf &#34;sandbox = false&#34; \&#xA;  --no-start-daemon \&#xA;  --no-confirm&#xA;ENV PATH=&#34;${PATH}:/nix/var/nix/profiles/default/bin&#34;&#xA;RUN nix run nixpkgs#hello&#xA;CMD [ &#34;/bin/systemd&#34; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman build -t ubuntu-systemd-with-nix .&#xA;IMAGE=$(podman create ubuntu-systemd-with-nix)&#xA;CONTAINER=$(podman start $IMAGE)&#xA;podman exec -ti $CONTAINER /bin/bash&#xA;podman rm -f $CONTAINER&#xA;podman rmi $IMAGE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On some container tools, such as &lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;sandbox = false&lt;/code&gt; can be omitted. Omitting it will negatively impact compatibility with container tools like &lt;code&gt;podman&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;In WSL2&lt;/h3&gt; &#xA;&lt;p&gt;We &lt;strong&gt;strongly recommend&lt;/strong&gt; &lt;a href=&#34;https://ubuntu.com/blog/ubuntu-wsl-enable-systemd&#34;&gt;enabling systemd&lt;/a&gt;, then installing Nix as normal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://github.com/microsoft/wslg&#34;&gt;WSLg&lt;/a&gt; is enabled, you can do things like open a Linux Firefox from Windows on Powershell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl nix run nixpkgs#firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use some OpenGL applications, you can use &lt;a href=&#34;https://github.com/guibou/nixGL&#34;&gt;&lt;code&gt;nixGL&lt;/code&gt;&lt;/a&gt; (note that some applications, such as &lt;code&gt;blender&lt;/code&gt;, may not work):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl nix run --impure github:guibou/nixGL nix run nixpkgs#obs-studio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If enabling system is not an option, pass &lt;code&gt;--init none&lt;/code&gt; at the end of the command:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; When &lt;code&gt;--init none&lt;/code&gt; is used, &lt;em&gt;only&lt;/em&gt; &lt;code&gt;root&lt;/code&gt; or users who can elevate to &lt;code&gt;root&lt;/code&gt; privileges can run Nix:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo -i nix run nixpkgs#hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux --init none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Skip confirmation&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to bypass the confirmation step, you can apply the &lt;code&gt;--no-confirm&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful when using the installer in non-interactive scripts.&lt;/p&gt; &#xA;&lt;h2&gt;Quirks&lt;/h2&gt; &#xA;&lt;p&gt;While &lt;code&gt;nix-installer&lt;/code&gt; tries to provide a comprehensive and unquirky experience, there are unfortunately some issues which may require manual intervention or operator choices.&lt;/p&gt; &#xA;&lt;h3&gt;Using MacOS remote SSH builders, Nix binaries are not on &lt;code&gt;$PATH&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When connecting to a Mac remote SSH builder users may sometimes see this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix store ping --store &#34;ssh://$USER@$HOST&#34;&#xA;Store URL: ssh://$USER@$HOST&#xA;zsh:1: command not found: nix-store&#xA;error: cannot connect to &#39;$USER@$HOST&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The way MacOS populates the &lt;code&gt;PATH&lt;/code&gt; environment differs from other environments. (&lt;a href=&#34;https://gist.github.com/Linerre/f11ad4a6a934dcf01ee8415c9457e7b2&#34;&gt;Some background&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;There are two possible workarounds for this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Preferred)&lt;/strong&gt; Update the remote builder URL to include the &lt;code&gt;remote-program&lt;/code&gt; parameter pointing to &lt;code&gt;nix-store&lt;/code&gt;. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix store ping --store &#34;ssh://$USER@$HOST?remote-program=/nix/var/nix/profiles/default/bin/nix-store&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are unsure where the &lt;code&gt;nix-store&lt;/code&gt; binary is located, run &lt;code&gt;which nix-store&lt;/code&gt; on the remote.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update &lt;code&gt;/etc/zshenv&lt;/code&gt; on the remote so that &lt;code&gt;zsh&lt;/code&gt; populates the Nix path for every shell, even those that are neither &lt;em&gt;interactive&lt;/em&gt; or &lt;em&gt;login&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Nix&#xA;if [ -e &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39; ]; then&#xA;    . &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39;&#xA;fi&#xA;# End Nix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;This strategy has some behavioral caveats, namely, &lt;code&gt;$PATH&lt;/code&gt; may have unexpected contents&lt;/summary&gt; &#xA;   &lt;p&gt;For example, if &lt;code&gt;$PATH&lt;/code&gt; gets unset then a script invoked, &lt;code&gt;$PATH&lt;/code&gt; may not be as empty as expected:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat example.sh     &#xA;#! /bin/zsh&#xA;echo $PATH&#xA;$ PATH= ./example.sh &#xA;/Users/ephemeraladmin/.nix-profile/bin:/nix/var/nix/profiles/default/bin:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;This strategy results in Nix&#39;s paths being present on &lt;code&gt;$PATH&lt;/code&gt; twice and may have a minor impact on performance.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using MacOS after removing &lt;code&gt;nix&lt;/code&gt; while &lt;code&gt;nix-darwin&lt;/code&gt; was still installed, network requests fail&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;nix&lt;/code&gt; was previously uninstalled without uninstalling &lt;code&gt;nix-darwin&lt;/code&gt; first, users may experience errors similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix shell nixpkgs#curl&#xA;error: unable to download &#39;https://cache.nixos.org/g8bqlgmpa4yg601w561qy2n576i6g0vh.narinfo&#39;: Problem with the SSL CA cert (path? access rights?) (77)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This occurs because &lt;code&gt;nix-darwin&lt;/code&gt; provisions an &lt;code&gt;org.nixos.activate-system&lt;/code&gt; service which remains after Nix is uninstalled. The &lt;code&gt;org.nixos.activate-system&lt;/code&gt; service in this state interacts with the newly installed Nix and changes the SSL certificates it uses to be a broken symlink.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -lah /etc/ssl/certs&#xA;total 0&#xA;drwxr-xr-x  3 root  wheel    96B Oct 17 08:26 .&#xA;drwxr-xr-x  6 root  wheel   192B Sep 16 06:28 ..&#xA;lrwxr-xr-x  1 root  wheel    41B Oct 17 08:26 ca-certificates.crt -&amp;gt; /etc/static/ssl/certs/ca-certificates.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The problem is compounded by the matter that the &lt;a href=&#34;https://github.com/LnL7/nix-darwin#uninstalling&#34;&gt;&lt;code&gt;nix-darwin&lt;/code&gt; uninstaller&lt;/a&gt; will not work after uninstalling Nix, since it uses Nix and requires network connectivity.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to resolve this situation by removing the &lt;code&gt;org.nixos.activate-system&lt;/code&gt; service and the &lt;code&gt;ca-certificates&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo rm /Library/LaunchDaemons/org.nixos.activate-system.plist&#xA;$ sudo launchctl bootout system/org.nixos.activate-system&#xA;$ /nix/nix-installer uninstall&#xA;$ sudo rm /etc/ssl/certs/ca-certificates.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the &lt;code&gt;nix-installer&lt;/code&gt; again, and it should work.&lt;/p&gt; &#xA;&lt;p&gt;Up-to-date versions of the &lt;code&gt;nix-installer&lt;/code&gt; will refuse to uninstall until &lt;code&gt;nix-darwin&lt;/code&gt; is uninstalled first, helping mitigate this problem.&lt;/p&gt; &#xA;&lt;h2&gt;Building a binary&lt;/h2&gt; &#xA;&lt;p&gt;Since you&#39;ll be using &lt;code&gt;nix-installer&lt;/code&gt; to install Nix on systems without Nix, the default build is a static binary.&lt;/p&gt; &#xA;&lt;p&gt;Build a portable Linux binary on a system with Nix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to build a local copy&#xA;nix build -L &#34;.#nix-installer-static&#34;&#xA;# to build the remote main development branch&#xA;nix build -L &#34;github:determinatesystems/nix-installer#nix-installer-static&#34;&#xA;# for a specific version of the installer:&#xA;export NIX_INSTALLER_TAG=&#34;v0.6.0&#34;&#xA;nix build -L &#34;github:determinatesystems/nix-installer/$NIX_INSTALLER_TAG#nix-installer-static&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to build a local copy&#xA;nix build -L &#34;.#nix-installer&#34;&#xA;# to build the remote main development branch&#xA;nix build -L &#34;github:determinatesystems/nix-installer#nix-installer&#34;&#xA;# for a specific version of the installer:&#xA;export NIX_INSTALLER_TAG=&#34;v0.6.0&#34;&#xA;nix build -L &#34;github:determinatesystems/nix-installer/$NIX_INSTALLER_TAG#nix-installer&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then copy the &lt;code&gt;result/bin/nix-installer&lt;/code&gt; to the machine you wish to run it on.&lt;/p&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;nix-installer&lt;/code&gt; to a system without Nix via &lt;code&gt;cargo&lt;/code&gt;, there are no system dependencies to worry about:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to build and run a local copy&#xA;RUSTFLAGS=&#34;--cfg tokio_unstable&#34; cargo run -- --help&#xA;# to build the remote main development branch&#xA;RUSTFLAGS=&#34;--cfg tokio_unstable&#34; cargo install --git https://github.com/DeterminateSystems/nix-installer&#xA;nix-installer --help&#xA;# for a specific version of the installer:&#xA;export NIX_INSTALLER_TAG=&#34;v0.6.0&#34;&#xA;RUSTFLAGS=&#34;--cfg tokio_unstable&#34; cargo install --git https://github.com/DeterminateSystems/nix-installer --tag $NIX_INSTALLER_TAG&#xA;nix-installer --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make this build portable, pass &lt;code&gt; --target x86_64-unknown-linux-musl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; We currently require &lt;code&gt;--cfg tokio_unstable&lt;/code&gt; as we utilize &lt;a href=&#34;https://docs.rs/tokio/1.24.1/tokio/process/struct.Command.html#method.process_group&#34;&gt;Tokio&#39;s process groups&lt;/a&gt;, which wrap stable &lt;code&gt;std&lt;/code&gt; APIs, but are unstable due to it requiring an MSRV bump.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;As a library&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Use as a library is still experimental. This feature is likely to be removed in the future without an advocate. If you&#39;re using this, please let us know and we can make a path to stablization.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add &lt;code&gt;nix-installer&lt;/code&gt; to your dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo add nix-installer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are &lt;strong&gt;building a CLI&lt;/strong&gt;, check out the &lt;code&gt;cli&lt;/code&gt; feature flag for &lt;code&gt;clap&lt;/code&gt; integration.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need to edit your &lt;code&gt;.cargo/config.toml&lt;/code&gt; to use &lt;code&gt;tokio_unstable&lt;/code&gt; as we utilize &lt;a href=&#34;https://docs.rs/tokio/1.24.1/tokio/process/struct.Command.html#method.process_group&#34;&gt;Tokio&#39;s process groups&lt;/a&gt;, which wrap stable &lt;code&gt;std&lt;/code&gt; APIs, but are unstable due to it requiring an MSRV bump:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# .cargo/config.toml&#xA;[build]&#xA;rustflags=[&#34;--cfg&#34;, &#34;tokio_unstable&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then it&#39;s possible to review the &lt;a href=&#34;https://docs.rs/nix-installer/latest/nix_installer/&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo doc --open -p nix-installer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Documentation is also available via &lt;code&gt;nix&lt;/code&gt; build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix build github:DeterminateSystems/nix-installer#nix-installer.doc&#xA;firefox result-doc/nix-installer/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing other versions&lt;/h2&gt; &#xA;&lt;p&gt;For users who desire version pinning, the version of &lt;code&gt;nix-installer&lt;/code&gt; to use can be specified in the &lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VERSION=&#34;v0.6.0&#34;&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix/tag/${VERSION} | sh -s -- install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To discover which versions are available, or download the binaries for any release, check the &lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer/releases&#34;&gt;Github Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These releases can be downloaded and used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VERSION=&#34;v0.6.0&#34;&#xA;ARCH=&#34;aarch64-linux&#34;&#xA;curl -sSf -L https://github.com/DeterminateSystems/nix-installer/releases/download/${VERSION}/nix-installer-${ARCH} -o nix-installer&#xA;./nix-installer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation Differences&lt;/h2&gt; &#xA;&lt;p&gt;Differing from the upstream &lt;a href=&#34;https://github.com/NixOS/nix&#34;&gt;Nix&lt;/a&gt; installer scripts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In &lt;code&gt;nix.conf&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the &lt;code&gt;nix-command&lt;/code&gt; and &lt;code&gt;flakes&lt;/code&gt; features are enabled&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bash-prompt-prefix&lt;/code&gt; is set&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;auto-optimise-store&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (On Linux only)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;extra-nix-path&lt;/code&gt; is set to &lt;code&gt;nixpkgs=flake:nixpkgs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;an installation receipt (for uninstalling) is stored at &lt;code&gt;/nix/receipt.json&lt;/code&gt; as well as a copy of the install binary at &lt;code&gt;/nix/nix-installer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nix-channel --update&lt;/code&gt; is not run, &lt;code&gt;~/.nix-channels&lt;/code&gt; is not provisioned&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl-cert-file&lt;/code&gt; is set in &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; if the &lt;code&gt;ssl-cert-file&lt;/code&gt; argument is used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivations&lt;/h2&gt; &#xA;&lt;p&gt;The existing upstream scripts do a good job, however they are difficult to maintain.&lt;/p&gt; &#xA;&lt;p&gt;Subtle differences in the shell implementations and tool used in the scripts make it difficult to make meaningful changes to the installer.&lt;/p&gt; &#xA;&lt;p&gt;The Determinate Nix installer has numerous advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keeping an installation receipt for easy uninstallation&lt;/li&gt; &#xA; &lt;li&gt;offering users a chance to review an accurate, calculated install plan&lt;/li&gt; &#xA; &lt;li&gt;having &#39;planners&#39; which can create appropriate install plans for complicated targets&lt;/li&gt; &#xA; &lt;li&gt;offering users with a failing install the chance to do a best-effort revert&lt;/li&gt; &#xA; &lt;li&gt;improving performance by maximizing parallel operations&lt;/li&gt; &#xA; &lt;li&gt;supporting a expanded test suite including &#39;curing&#39; cases&lt;/li&gt; &#xA; &lt;li&gt;supporting SELinux and OSTree based distributions without asking users to make compromises&lt;/li&gt; &#xA; &lt;li&gt;operating as a single, static binary with external dependencies such as &lt;code&gt;openssl&lt;/code&gt;, only calling existing system tools (like &lt;code&gt;useradd&lt;/code&gt;) where necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It has been wonderful to collaborate with other participants in the Nix Installer Working Group and members of the broader community. The working group maintains a &lt;a href=&#34;https://github.com/nixos/experimental-nix-installer/&#34;&gt;foundation owned fork of the installer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;The goal of the Determinate Nix Installer is to successfully and correctly install Nix. The &lt;code&gt;curl | sh&lt;/code&gt; pipeline and the installer collects a little bit of diagnostic information to help us make that true.&lt;/p&gt; &#xA;&lt;p&gt;Here is a table of the &lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer/raw/f9f927840d532b71f41670382a30cfcbea2d8a35/src/diagnostics.rs#L29-L43&#34;&gt;diagnostic data we collect&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Use&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The version of the Determinate Nix Installer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;planner&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The method of installing Nix (&lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;macos&lt;/code&gt;, &lt;code&gt;steam-deck&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;configured_settings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The names of planner settings which were changed from their default. Does &lt;em&gt;not&lt;/em&gt; include the values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;os_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The running operating system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;os_version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The version of the operating system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;triple&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The architecture/operating system/binary format of your system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;is_ci&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether the installer is being used in CI (e.g. GitHub Actions).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;action&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Either &lt;code&gt;Install&lt;/code&gt; or &lt;code&gt;Uninstall&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;One of &lt;code&gt;Success&lt;/code&gt;, &lt;code&gt;Failure&lt;/code&gt;, &lt;code&gt;Pending&lt;/code&gt;, or &lt;code&gt;Cancelled&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;attribution&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optionally defined by the user, associate the diagnostics of this run to the provided value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;failure_chain&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A high level description of what the failure was, if any. For example: &lt;code&gt;Command(&#34;diskutil&#34;)&lt;/code&gt; if the command &lt;code&gt;diskutil list&lt;/code&gt; failed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To disable diagnostic reporting, set the diagnostics URL to an empty string by passing &lt;code&gt;--diagnostic-endpoint=&#34;&#34;&lt;/code&gt; or setting &lt;code&gt;NIX_INSTALLER_DIAGNOSTIC_ENDPOINT=&#34;&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can read the full privacy policy for &lt;a href=&#34;https://determinate.systems/&#34;&gt;Determinate Systems&lt;/a&gt;, the creators of the Determinate Nix Installer, &lt;a href=&#34;https://determinate.systems/privacy&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>candlecorp/wick</title>
    <updated>2023-10-28T01:34:08Z</updated>
    <id>tag:github.com,2023-10-28:/candlecorp/wick</id>
    <link href="https://github.com/candlecorp/wick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Functional, reactive WebAssembly with a twist&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;readme-top&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/candlecorp/wick/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/candlecorp/wick.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/candlecorp/wick/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/candlecorp/wick.svg?sanitize=true&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/candle&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/909866379904167947&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/candlecorp/wick/actions/workflows/mono_workflow.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/candlecorp/wick/mono_workflow.yaml&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/wick-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/wick-cli&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitter.com/@wickwasm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Twitter-black.svg?logo=twitter&amp;amp;colorB=555&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/candlecorp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-LinkedIn-black.svg?logo=linkedin&amp;amp;colorB=555&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- PROJECT LOGO --&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; width=&#34;50%&#34; srcset=&#34;https://github.com/candlecorp/.github/blob/main/assets/wick_logo_light@.5.png?raw=true&#34;&gt; &#xA;  &lt;img alt=&#34;wick logo&#34; width=&#34;50%&#34; src=&#34;https://github.com/candlecorp/.github/raw/main/assets/wick_logo.png@.5.png?raw=true&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;p align=&#34;center&#34;&gt; A functional framework for WebAssembly components that run on the server and client. &lt;br&gt; &lt;a href=&#34;https://candle.dev/docs/&#34;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#installation&#34;&gt;Install&lt;/a&gt; · &lt;a href=&#34;https://github.com/candlecorp/wick/issues&#34;&gt;Report Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/candlecorp/wick/issues&#34;&gt;Request Feature&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- TABLE OF CONTENTS --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#about-the-project&#34;&gt;About The Project&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#built-with&#34;&gt;Built With&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p&gt;Wick is a runtime for running and composing WebAssembly components together as full applications. Wick is built With ❤️, Rust, and Wasm.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Why Wick?&lt;/h2&gt; &#xA;&lt;p&gt;We built wick because we wanted a secure, fast, functional framework that used WebAssembly as its core component model. We wanted to build applications and libraries that could run on the server, client, and everywhere else. We needed it to be async first, streaming, and not rely on external systems. Suprisingly, nothing like this existed, so we built it.&lt;/p&gt; &#xA;&lt;h2&gt;Who should use Wick?&lt;/h2&gt; &#xA;&lt;p&gt;If you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Like functional programming ideas.&lt;/li&gt; &#xA; &lt;li&gt;Want to write code once and use it the same way everywhere.&lt;/li&gt; &#xA; &lt;li&gt;Like security baked into your applications.&lt;/li&gt; &#xA; &lt;li&gt;Have built enough software to recognize everyone is solving the same problems.&lt;/li&gt; &#xA; &lt;li&gt;Play on the bleeding edge of technology.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then Wick is for you.&lt;/p&gt; &#xA;&lt;h2&gt;Demos/Examples&lt;/h2&gt; &#xA;&lt;p&gt;Online demos of Wick in action:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasm.candle.dev/llama2&#34;&gt;Text generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasm.candle.dev/redact&#34;&gt;Text redaction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasm.candle.dev/yolo&#34;&gt;Object detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://resumerefiner.com&#34;&gt;Resume Refining SAAS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Public repository of component examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/candlecorp/wick-components/tree/main/components&#34;&gt;Wick Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wick&#39;s example directory:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/candlecorp/wick/tree/main/examples&#34;&gt;Wick examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- GETTING STARTED --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need the &lt;code&gt;wick&lt;/code&gt; binary to run Wick applications or invoke Wick components. You can install it with one of the following methods:&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Pick your installation preference:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#install-with-cargo&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#install-with-homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#install-pre-built-binaries&#34;&gt;Pre-built binaries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#install-from-source&#34;&gt;Install from source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Install with Cargo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install wick-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Install with Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install candlecorp/tap/wick&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Install pre-built binaries&lt;/h4&gt; &#xA;&lt;h5&gt;Mac/Linux&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL sh.wick.run | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Windows&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://ps.wick.run -UseBasicParsing | Invoke-Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Install from source&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/candlecorp/wick.git &amp;amp;&amp;amp; cd wick&#xA;just deps # install necessary dependencies&#xA;just install # or cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- USAGE EXAMPLES --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Wick&#39;s original WebAssembly component protocol uses RSocket to support complex, rich streams in WebAssembly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Wick supports varying degrees of the standard WebAssembly component model and will continue to support more as the specification stabilizes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build a WebAssembly component&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the template with &lt;code&gt;cargo generate&lt;/code&gt; (or git clone)&lt;/li&gt; &#xA; &lt;li&gt;Build &amp;amp; sign it with &lt;code&gt;just build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute your new library component with &lt;code&gt;wick invoke&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo generate candlecorp/wick templates/rust --name my-project&#xA;$ cd my-project&#xA;$ just build&#xA;$ wick invoke component.wick greet -- --input=&#34;$USER&#34;&#xA;{&#34;payload&#34;:{&#34;value&#34;:&#34;Hello, jsoverson&#34;},&#34;port&#34;:&#34;output&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;re constantly adding examples to the &lt;a href=&#34;https://github.com/candlecorp/wick/tree/main/examples&#34;&gt;./examples&lt;/a&gt; directory, which we also use as a base for our integration tests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For more information, please refer to the &lt;a href=&#34;https://candle.dev/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- CONTRIBUTING --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag &#34;enhancement&#34;. Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Wick is distributed under the Elastic License 2.0 and Apache-2.0 licenses. See &lt;code&gt;LICENSE&lt;/code&gt; for more information and individual crates for details.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- CONTACT --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/@candle_corp&#34;&gt;@candle_corp&lt;/a&gt; - &lt;a href=&#34;mailto:jarrod@candle.dev&#34;&gt;jarrod@candle.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/candlecorp/wick&#34;&gt;https://github.com/candlecorp/wick&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/candlecorp/wick/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt; &#xA;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;</summary>
  </entry>
  <entry>
    <title>orbitinghail/sqlsync</title>
    <updated>2023-10-28T01:34:08Z</updated>
    <id>tag:github.com,2023-10-28:/orbitinghail/sqlsync</id>
    <link href="https://github.com/orbitinghail/sqlsync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQLSync is a collaborative offline-first wrapper around SQLite. It is designed to synchronize web application state between users, devices, and the edge.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQLSync&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orbitinghail/sqlsync/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/orbitinghail/sqlsync/actions/workflows/actions.yaml/badge.svg?branch=main&#34; alt=&#34;github actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/etFk2N9nzC&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1149205110262595634/widget.png?style=shield&#34; alt=&#34;Join the SQLSync Community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLSync is a collaborative offline-first wrapper around SQLite&lt;/strong&gt; designed to synchronize web application state between users, devices, and the edge.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example use cases&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A web app with a structured file oriented data model like Figma. Each file could be a SQLSync database, enabling real-time local first collaboration and presense&lt;/li&gt; &#xA; &lt;li&gt;An embedded systems deployment running SQLSync on the edge with high tolerance for unreliable network conditions&lt;/li&gt; &#xA; &lt;li&gt;Enabling optimistic mutations on SQLite read replicas&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLSync Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way to get a feel for how SQLSync behaves is to play with the &lt;a href=&#34;https://sqlsync-todo.pages.dev/&#34;&gt;Todo list demo&lt;/a&gt;. Clicking &lt;a href=&#34;https://sqlsync-todo.pages.dev/&#34;&gt;this link&lt;/a&gt; will create a unique todo list and redirect you to it&#39;s unique URL. You can then share that URL with friends or open it on multiple devices (or browsers) to see the power of offline-first collaborative SQLite.&lt;/p&gt; &#xA;&lt;p&gt;You can also learn more about SQLSync and it&#39;s goals by watching Carl&#39;s WasmCon 2023 talk. &lt;a href=&#34;https://youtu.be/oLYda9jmNpk?si=7BBBdLxEj9ZQ4OvS&#34;&gt;The recording can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Eventually consistent SQLite&lt;/li&gt; &#xA; &lt;li&gt;Optimistic reads and writes&lt;/li&gt; &#xA; &lt;li&gt;Reactive query subscriptions&lt;/li&gt; &#xA; &lt;li&gt;Real-time collaboration&lt;/li&gt; &#xA; &lt;li&gt;Offline-first&lt;/li&gt; &#xA; &lt;li&gt;Cross-tab sync&lt;/li&gt; &#xA; &lt;li&gt;React library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are interested in using or contributing to SQLSync, please &lt;a href=&#34;https://discord.gg/etFk2N9nzC&#34;&gt;join the Discord community&lt;/a&gt; and let us know what you want to build. We are excited to collaborate with you!&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/orbitinghail/sqlsync/main/GUIDE.md&#34;&gt;the guide&lt;/a&gt; to learn how to add SQLSync to your application.&lt;/p&gt; &#xA;&lt;h2&gt;Community &amp;amp; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing to SQLSync, please &lt;a href=&#34;https://discord.gg/etFk2N9nzC&#34;&gt;join the Discord community&lt;/a&gt; and let us know what you want to build. All contributions will be held to a high standard, and are more likely to be accepted if they are tied to an existing task and agreed upon specification.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/etFk2N9nzC&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1149205110262595634/widget.png?style=banner2&#34; alt=&#34;Join the SQLSync Community&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>