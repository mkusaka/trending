<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-24T01:34:42Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IBM/ACE-RISCV</title>
    <updated>2025-05-24T01:34:42Z</updated>
    <id>tag:github.com,2025-05-24:/IBM/ACE-RISCV</id>
    <link href="https://github.com/IBM/ACE-RISCV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assured confidential execution (ACE) implements VM-based trusted execution environment (TEE) for embedded RISC-V systems with focus on a formally verified and auditable firmware.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Assured Confidential Execution (ACE) for RISC-V&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/IBM/ACE-RISCV/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/.github/ace.png&#34; align=&#34;right&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &#xA;&lt;p&gt;ACE-RISCV is an open-source project, whose goal is to deliver a confidential computing framework with a formally proven security monitor. It is based on the &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3623652.3623668&#34;&gt;canonical architecture&lt;/a&gt; and targets RISC-V with the goal of being portable to other architectures. The formal verification efforts focus on the &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/security-monitor/&#34;&gt;security monitor implementation&lt;/a&gt;. We invite collaborators to work with us to push the boundaries of provable confidential computing technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Formal verification:&lt;/strong&gt; This project implements the RISC-V CoVE spec&#39;s deployment model 3 referenced in &lt;a href=&#34;https://github.com/riscv-non-isa/riscv-ap-tee/raw/main/&#34;&gt;Appendix D&lt;/a&gt;. The formal specification is embedded in the security monitor&#39;s source code and the proofs are in the &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/verification/&#34;&gt;verification/&lt;/a&gt; folder. Please read our &lt;a href=&#34;https://arxiv.org/pdf/2505.12995&#34;&gt;paper1&lt;/a&gt; and &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3623652.3623668&#34;&gt;paper2&lt;/a&gt; to learn about the approach and goals.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Post-Quantum Cryptography (PQC) and Attestation&lt;/strong&gt;: ACE supports local attestation, a mechanism to authenticate confidential VMs intended for embedded systems with limited or no network connectivity. We already support PQC, specifically we use ML-KEM, SHA-384, and AES-GCM-256 cryptography.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware requirements&lt;/h2&gt; &#xA;&lt;p&gt;We are currently building on RISC-V 64-bit with integer (I), atomic (A) and hypervisor extentions (H), physical memory protection (PMP), memory management unit (MMU), IOPMP, core-local interrupt controller (CLINT), and supervisor timecmp extension (Sstc).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RISC-V hardware to run ACE:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SiFive P550 evaluation board, &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/security-monitor/platform/p550&#34;&gt;see instructions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Follow instructions to run one of the sample &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/confidential-vms&#34;&gt;confidential workloads&lt;/a&gt; under an &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/hypervisor/&#34;&gt;untrusted Linux KVM hypervisor&lt;/a&gt; in an emulated RISC-V environment.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Full compilation of the framework takes a long time because many tools are built from sources. Our toolchain currently includes: hypervisor kernel (&lt;code&gt;Linux kernel&lt;/code&gt;), confidential guest kernel (&lt;code&gt;Linux kernel&lt;/code&gt;) and firmware (&lt;code&gt;security monitor&lt;/code&gt; with &lt;code&gt;OpenSBI firmware&lt;/code&gt;). Make sure to build this project on a machine with at least 4 cores, 4GB RAM, and 50GB disk space for reasonable (~30min) build time.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You must install build dependencies specific to the operating system you use AND install the Rust toolchain. You can also look at the &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/.github/workflows/build.yml&#34;&gt;reproducible build configuration&lt;/a&gt; of the continous integration (CI) system.&lt;/p&gt; &#xA;&lt;p&gt;Dependencies for Ubuntu 22.04&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;&#xA;# riscv-gnu-toolchain dependencies:&#xA;sudo apt -qq -y install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev xz-utils&#xA;&#xA;# OpenSBI&#xA;sudo apt -qq -y install clang&#xA;&#xA;# Qemu 8.2&#xA;sudo apt -qq -y install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build python3-venv libslirp-dev&#xA;&#xA;# Buildroot&#xA;sudo apt -qq -y install unzip sed binutils diffutils build-essential bash patch gzip bzip2 perl tar cpio unzip rsync file bc findutils&#xA;&#xA;# utilities&#xA;sudo apt install -y sshpass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the latest Rust:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y&#xA;source &#34;$HOME/.cargo/env&#34;&#xA;rustup default nightly&#xA;rustup target add riscv64gc-unknown-none-elf&#xA;rustup component add rustfmt&#xA;cargo install cargo-binutils&#xA;&#xA;# check that the below lines are in the ~/.bashrc&#xA;. &#34;$HOME/.cargo/env&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sources&lt;/h3&gt; &#xA;&lt;p&gt;Checkout this repository with submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules git@github.com:IBM/ACE-RISCV.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compilation&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;Run the following commands from the directory containing this README file.&lt;/p&gt; &#xA;&lt;p&gt;Make sure once again that all submodules are fetched:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set up the ACE_DIR variable to point to the location where the project will build. Default is the &lt;code&gt;build/&lt;/code&gt; subdirectory of the location where you will execute the &lt;code&gt;make&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ACE_DIR=/your/path/to/build/ace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build everything&lt;/h4&gt; &#xA;&lt;p&gt;The following command will build the entire framework. Set &lt;code&gt;-j&lt;/code&gt; flag to the number of processor cores you have in the system. Below command assumes that you have 4 cores.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MAKEFLAGS=&#34;--silent -j4&#34; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build individual components&lt;/h4&gt; &#xA;&lt;p&gt;Alternativly, you can build individual components to avoid long builds that can lead to &#39;ssh disconnections&#39;, &#39;hangups&#39;, and similar issues.&lt;/p&gt; &#xA;&lt;p&gt;Install all develoment tools required to compile code for the RISC-V architecture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make devtools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the host OS -- &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/hypervisor/&#34;&gt;a Linux KVM hypervisor&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make hypervisor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/security-monitor/opensbi&#34;&gt;the low level firmware&lt;/a&gt; responsible for the boot process. This command will also build the &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/security-monitor/&#34;&gt;security monitor (SM)&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make firmware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build sample &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/confidential-vms/&#34;&gt;confidential workloads&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make confidential_vms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the RISC-V emulator and utility tools that simplify running the test environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make emulator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run and Test&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have the &lt;code&gt;ACE_DIR&lt;/code&gt; environmental variable set and it points to the location of your build. Check the &#39;Compilation&#39; section in case this variable is not set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo $ACE_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the test environment on a RISC-V emulator run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;${ACE_DIR}/tools/ace run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the output from the boot process and a promt to login to the hypervisor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# login: root, password: passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the sample Linux OS as a confidential VM (login: root, password: passwd) execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_linux_vm_qemu.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the output indicating that local attestation suceeded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#ACE: Reference PCR4=Sha512=0x86774eec200ca6552cbc50211e4b32e7a4ba815c190d56b11ffabc8df1ebb6d9c41d04a64099d860b90c65729a28ded8&#xA;#ACE: Attestation succeeded, read 1 secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can login now to the confidential VM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# login: root, password: passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read the secret from the inside of the confidential VM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# if the root file system has not been mounted, then execute below:&#xA;mount /dev/vda /root&#xA;cd /root/root/ace_module&#xA;insmod ace.ko&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the secret:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[  203.051959] Requesting secret from the security monitor&#xA;[  203.107150] Secret=0xc0ffee&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Integrating local attestation with dm-crypt/LUKS is work in progress. When finished, you will be able to encrypt your rootfs and pass the decryption key via TAP. A script in initrd will then retrieve the decryption key from TAP and decrypt the rootfs.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository is distributed under the terms of the Apache 2.0 License, see &lt;a href=&#34;https://raw.githubusercontent.com/IBM/ACE-RISCV/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is an active research project, without warranties of any kind.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our newest full paper on ACE:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{ozga2025ace,&#xA;    author = {Ozga, Wojciech and Hunt, Guerney D. H. and Le, Michael V. and Gaeher Lennard and Shinnar, Avraham and Palmer, Elaine R. and Jamjoom, Hani and Dragone, Silvio},&#xA;    title = {ACE: Confidential Computing for Embedded RISC-V Systems},&#xA;    year = 2025,&#xA;    howpublished = {\url{https://arxiv.org/pdf/2505.12995}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our workshop paper on ACE:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{ozga2023riscvtee,&#xA;    title={Towards a Formally Verified Security Monitor for VM-based Confidential Computing},&#xA;    author={Ozga, Wojciech and Hunt, Guerney D. H. and Le, Michael V. and Palmer, Elaine R. and Shinnar, Avraham},&#xA;    booktitle = {Proceedings of the 12th International Workshop on Hardware and Architectural Support for Security and Privacy},&#xA;    series = {HASP2023},&#xA;    year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our paper on context switch validation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{kalani2025sailor,&#xA;    author = {Kalani, Neelu and Bourgeat, Thomas and Hunt, Guerney D.H. and Ozga, Wojciech},&#xA;    title = {Save what must be saved: Secure context switching with Sailor},&#xA;    year = 2025,&#xA;    howpublished = {\url{https://arxiv.org/pdf/2502.06609}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>