<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-19T01:54:58Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yuankunzhang/charming</title>
    <updated>2023-07-19T01:54:58Z</updated>
    <id>tag:github.com,2023-07-19:/yuankunzhang/charming</id>
    <link href="https://github.com/yuankunzhang/charming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A visualization library for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Charming - A Rust Visualization Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/charming&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/charming.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/charming&#34;&gt;&lt;img src=&#34;https://docs.rs/charming/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charming is a powerful and versatile chart rendering library for Rust that leverages the power of &lt;a href=&#34;https://echarts.apache.org/en/index.html&#34;&gt;Apache ECharts&lt;/a&gt; to deliver high-quality data visualizations. Built with the Rust programming language, this library aims to provide the Rust ecosystem with an intuitive and effective way to generate and visualize charts, using a declarative and user-friendly API.&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy-to-use, declaritive API.&lt;/li&gt; &#xA; &lt;li&gt;Rich and customizable chart themes and styles.&lt;/li&gt; &#xA; &lt;li&gt;Rendering to multiple formats, including HTML, SVG, PNG, and JPEG.&lt;/li&gt; &#xA; &lt;li&gt;Usable in WebAssembly environments.&lt;/li&gt; &#xA; &lt;li&gt;Abundant chart types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/default.png&#34; alt=&#34;Default&#34;&gt;&lt;p align=&#34;center&#34;&gt;Default&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/dark.png&#34; alt=&#34;Dark&#34;&gt;&lt;p align=&#34;center&#34;&gt;Dark&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/vintage.png&#34; alt=&#34;Vintage&#34;&gt;&lt;p align=&#34;center&#34;&gt;Vintage&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/westeros.png&#34; alt=&#34;Westeros&#34;&gt;&lt;p align=&#34;center&#34;&gt;Vintage&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/essos.png&#34; alt=&#34;Essos&#34;&gt;&lt;p align=&#34;center&#34;&gt;Essos&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/wonderland.png&#34; alt=&#34;Wonderland&#34;&gt;&lt;p align=&#34;center&#34;&gt;Essos&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/walden.png&#34; alt=&#34;Walden&#34;&gt;&lt;p align=&#34;center&#34;&gt;Walden&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/chalk.png&#34; alt=&#34;Chalk&#34;&gt;&lt;p align=&#34;center&#34;&gt;Chalk&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/infographic.png&#34; alt=&#34;Infographic&#34;&gt;&lt;p align=&#34;center&#34;&gt;Infographic&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/macarons.png&#34; alt=&#34;Macarons&#34;&gt;&lt;p align=&#34;center&#34;&gt;Macarons&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/roma.png&#34; alt=&#34;Roma&#34;&gt;&lt;p align=&#34;center&#34;&gt;Roma&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/shine.png&#34; alt=&#34;Shine&#34;&gt;&lt;p align=&#34;center&#34;&gt;Shine&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/purple-passion.png&#34; alt=&#34;Purple Passion&#34;&gt;&lt;p align=&#34;center&#34;&gt;Purple Passion&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme/halloween.png&#34; alt=&#34;Halloween&#34;&gt;&lt;p align=&#34;center&#34;&gt;Halloween&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Future versions of Charming will support custom themes.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add charming as a dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo add charming&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the documentation of the &lt;a href=&#34;https://docs.rs/charming/latest/charming/struct.Chart.html&#34;&gt;&lt;code&gt;Chart&lt;/code&gt;&lt;/a&gt; struct for how to create a chart with various components.&lt;/p&gt; &#xA;&lt;p&gt;Once you create a chart, you can render it into various format. Charming provides three types of renderers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTML renderer&lt;/strong&gt;: &lt;code&gt;HtmlRenderer&lt;/code&gt; renders a chart into an HTML fragments and offloads the actual rendering to user&#39;s web browser for an interactive, seamless experience. This renderer is useful when you want to render a chart on the client side, e.g., in a web application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image renderer&lt;/strong&gt;: &lt;code&gt;ImageRenderer&lt;/code&gt; renders a chart into an image file. This renderer makes use of an embed &lt;a href=&#34;https://github.com/denoland/deno_core&#34;&gt;deno_core&lt;/a&gt; engine to execute the JavaScript code of Echarts and generate an image file. This renderer is disabled by default, and you need to enable the &lt;code&gt;ssr&lt;/code&gt; (Server-Side Rendering) feature to use it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WASM renderer&lt;/strong&gt;: &lt;code&gt;WasmRenderer&lt;/code&gt; renders a chart in a WebAssembly runtime. This renderer is disabled by default, and you need to enable the &lt;code&gt;wasm&lt;/code&gt; feature to use it. &lt;strong&gt;Note that the &lt;code&gt;wasm&lt;/code&gt; feature and &lt;code&gt;ssr&lt;/code&gt; feature are mutually exclusive&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example of drawing a simple pie chart into an SVG file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use charming::{&#xA;    component::Legend,&#xA;    element::ItemStyle,&#xA;    series::{Pie, PieRoseType},&#xA;    Chart, ImageRenderer&#xA;};&#xA;&#xA;fn main() {&#xA;    let chart = Chart::new()&#xA;        .legend(Legend::new().top(&#34;bottom&#34;))&#xA;        .series(&#xA;            Pie::new()&#xA;                .name(&#34;Nightingale Chart&#34;)&#xA;                .rose_type(PieRoseType::Radius)&#xA;                .radius(vec![&#34;50&#34;, &#34;250&#34;])&#xA;                .center(vec![&#34;50%&#34;, &#34;50%&#34;])&#xA;                .item_style(ItemStyle::new().border_radius(8))&#xA;                .data(vec![&#xA;                    (40.0, &#34;rose 1&#34;),&#xA;                    (38.0, &#34;rose 2&#34;),&#xA;                    (32.0, &#34;rose 3&#34;),&#xA;                    (30.0, &#34;rose 4&#34;),&#xA;                    (28.0, &#34;rose 5&#34;),&#xA;                    (26.0, &#34;rose 6&#34;),&#xA;                    (22.0, &#34;rose 7&#34;),&#xA;                    (18.0, &#34;rose 8&#34;),&#xA;                ]),&#xA;        );&#xA;&#xA;    let mut renderer = ImageRenderer::new(1000, 800);&#xA;    renderer.save(&amp;amp;chart, &#34;/tmp/nightingale.svg&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code creates the following SVG file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/nightingale.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As another example, the code file &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/dataset/encode_and_matrix.rs&#34;&gt;gallery/src/dataset/encode_and_matrix.rs&lt;/a&gt; draws a complex chart with four sub-charts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/encode-and-matrix.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Crate Feature Flags&lt;/h3&gt; &#xA;&lt;p&gt;The following two feature flags are available, &lt;strong&gt;note that they can&#39;t be used together&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ssr&lt;/code&gt; - Enables the &lt;code&gt;ImageRenderer&lt;/code&gt;, which provides the capability to generate image files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wasm&lt;/code&gt; - Enables the &lt;code&gt;WasmRenderer&lt;/code&gt;, which provides the capability to render charts in WebAssembly runtime.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Renderers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;// Use HtmlRenderer.&#xA;use charming::HtmlRenderer;&#xA;&#xA;// Chart dimension 1000x800.&#xA;let renderer = HtmlRenderer::new(&#34;my charts&#34;, 1000, 800);&#xA;// Render the chart as HTML string.&#xA;let html_str = renderer.render(&amp;amp;chart).unwrap();&#xA;// Save the chart as HTML file.&#xA;renderer.save(&amp;amp;chart, &#34;/tmp/chart.html&#34;).unwrap();&#xA;&#xA;&#xA;// Use ImageRenderer. The `ssr` feature needs to be enabled.&#xA;use charming::{ImageRenderer, ImageFormat};&#xA;&#xA;// Chart dimension 1000x800.&#xA;let mut renderer = ImageRenderer::new(1000, 800);&#xA;// Render the chart as SVG string.&#xA;renderer.render(&amp;amp;chart).unwrap();&#xA;// Render the chart as PNG bytes.&#xA;renderer.render_format(ImageFormat::PNG, &amp;amp;chart).unwrap();&#xA;// Save the chart as SVG file.&#xA;renderer.save(&amp;amp;chart, &#34;/tmp/chart.svg&#34;).unwrap();&#xA;// Save the chart as PNG file.&#xA;renderer.save_format(ImageFormat::PNG, &amp;amp;chart, &#34;/tmp/chart.png&#34;);&#xA;&#xA;&#xA;// Use WasmRenderer. The `wasm` feature needs to be enabled.&#xA;use charming::WasmRenderer;&#xA;&#xA;// Chart dimension 1000x800.&#xA;let renderer = WasmRenderer::new(1000, 800);&#xA;// Render the chart in the WebAssembly runtime&#xA;renderer.render(&amp;amp;chart).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;Charming supports a number of themes out of the box. You can use the &lt;code&gt;Theme&lt;/code&gt; enum to specify a theme for your chart. For instance, the following code snippet shows how to use the &lt;code&gt;Westeros&lt;/code&gt; theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use charming::{Chart, ImageRenderer};&#xA;use charming::theme::Theme;&#xA;use charming::component::Title;&#xA;&#xA;ImageRenderer::new(1000, 800).theme(Theme::Westeros).save(&#xA;    &amp;amp;Chart::new().title(Title::new().text(&#34;Westeros&#34;)),&#xA;    &#34;/tmp/westeros.svg&#34;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Future versions of Charming will support custom themes.&lt;/p&gt; &#xA;&lt;h2&gt;Gallery&lt;/h2&gt; &#xA;&lt;p&gt;Here are some selected chart examples. Click on any single chart to view its source code file.&lt;/p&gt; &#xA;&lt;p&gt;You can also clone the repo and run &lt;code&gt;cargo run --bin gallery&lt;/code&gt; to view the interactive charts on the rendered HTML page.&lt;/p&gt; &#xA;&lt;h3&gt;Bar Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/bar_with_background.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/bar_with_background.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Bar with Background&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/basic_bar.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/basic_bar.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Bar&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/radial_polar_bar_label_position.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/radial_polar_bar_label_position.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Radial Polar Bar Label Position&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/set_style_of_single_bar.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/set_style_of_single_bar.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Set Style of Single Bar&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/stacked_column.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/stacked_column.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Stacked Column&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/tangential_polar_bar.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/tangential_polar_bar.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Tangential Polar Bar&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/waterfall.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/waterfall.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Waterfall&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/bar/world_population.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/bar/world_population.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;World Population&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Boxplot Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/boxplot/boxplot_light_velocity.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/boxplot/boxplot_light_velocity.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Boxplot Light Velocity&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/boxplot/multiple_categories.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/boxplot/multiple_categories.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Multiple Categories&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Candlestick Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/candlestick/basic_candlestick.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/candlestick/basic_candlestick.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Candlestick&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/candlestick/shanghai_index.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/candlestick/shanghai_index.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Shanghai Index&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Funnel Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/funnel/funnel_chart.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/funnel/funnel_chart.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Funnel Chart&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/funnel/multiple_funnels.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/funnel/multiple_funnels.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Multiple Funnels&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Gauge Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/gauge/gauge_barometer.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/gauge/gauge_barometer.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Gauge Barometer&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/gauge/gauge_basic.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/gauge/gauge_basic.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Gauge Basic&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/gauge/gauge_simple.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/gauge/gauge_simple.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Gauge Simple&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Graph Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/graph/hide_overlapped_label.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/graph/hide_overlapped_label.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Hide Overlapped Label&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/graph/les_miserables.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/graph/les_miserables.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Les Miserables&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Heatmap Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/heatmap/heatmap_on_cartesian.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/heatmap/heatmap_on_cartesian.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Heatmap on Cartesian&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Line Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/area_pieces.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/area_pieces.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Area Pieces&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/basic_area.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/basic_area.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Area&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/basic_line.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/basic_line.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Line&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/confidence_band.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/confidence_band.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Confidence Band&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/data_transform_filter.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/data_transform_filter.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Data Transform Filter&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/distribution_of_electricity.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/distribution_of_electricity.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Distribution of Electricity&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/gradient_stacked_area.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/gradient_stacked_area.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Gradient Stacked Area&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/large_scale_area.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/large_scale_area.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Large Scale Area&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/line_gradient.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/line_gradient.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Line Gradient&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/rainfall.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/rainfall.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Rainfall&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/rainfall_vs_evaporation.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/rainfall_vs_evaporation.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Rainfall Vs. Evaporation&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/smoothed_line.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/smoothed_line.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Smoothed Line&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/stacked_area.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/stacked_area.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Stacked Area&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/stacked_line.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/stacked_line.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Stacked Line&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/line/temperature_change.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/line/temperature_change.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Temperature Change&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Parallel Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/parallel/basic_parallel.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/parallel/basic_parallel.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Parallel&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/parallel/parallel_aqi.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/parallel/parallel_aqi.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Parallel AQI&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Pie Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/pie/doughnut_chart_with_rounded_corner.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/pie/doughnut_chart_with_rounded_corner.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Nightingale&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/pie/nightingale.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/pie/nightingale.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Nightingale&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/pie/referer_of_a_website.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/pie/referer_of_a_website.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Referer of a Website&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Radar Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/radar/basic_radar.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/radar/basic_radar.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Radar&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/radar/multiple_radar.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/radar/multiple_radar.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Multiple Radar&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/radar/proportion_of_browsers.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/radar/proportion_of_browsers.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Proportion of Browsers&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Sankey Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/sankey/basic_sankey.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/sankey/basic_sankey.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Sankey&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/sankey/node_align_left_sankey.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/sankey/node_align_left_sankey.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Node Align Left Sankey&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/sankey/sankey_orient_vertical.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/sankey/sankey_orient_vertical.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Sankey Orient Vertical&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Scatter Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/scatter/anscombe_quartet.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/scatter/anscombe_quartet.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Anscombe Quartet&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/scatter/basic_scatter.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/scatter/basic_scatter.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Basic Scatter&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/scatter/bubble_chart.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/scatter/bubble_chart.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Bubble Chart&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/scatter/effect_scatter.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/scatter/effect_scatter.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Effect Scatter&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/scatter/punch_cart_of_github.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/scatter/punch_card_of_github.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Punch Card of Github&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Sunburst Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/sunburst/drink_flavors.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/sunburst/drink_flavors.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Drink Flavors&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Theme River Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/theme_river/theme_river_lastfm.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/theme_river/theme_river_lastfm.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Theme River LastFM&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Tree Charts&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/tree/from_left_to_right_tree.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/tree/from_left_to_right_tree.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;From Left to Right Tree&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/gallery/src/tree/multiple_trees.rs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuankunzhang/charming/main/img/tree/multiple_trees.svg?sanitize=true&#34; width=&#34;40%&#34; alt=&#34;Multiple Trees&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>yoav-lavi/melody</title>
    <updated>2023-07-19T01:54:58Z</updated>
    <id>tag:github.com,2023-07-19:/yoav-lavi/melody</id>
    <link href="https://github.com/yoav-lavi/melody" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Melody is a language that compiles to regular expressions and aims to be more readable and maintainable&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Melody Logo&#34; height=&#34;250px&#34; src=&#34;https://user-images.githubusercontent.com/14347895/159069215-7da8f087-65d5-4982-9592-639c1d81e7f1.svg#gh-dark-mode-only&#34;&gt; &lt;img alt=&#34;Melody Logo&#34; height=&#34;250px&#34; src=&#34;https://user-images.githubusercontent.com/14347895/159069181-53bce5b3-a831-43f1-8c14-af6c6ed7b92b.svg#gh-light-mode-only&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/yoav-lavi/melody/actions/workflows/rust.yml&#34;&gt; &lt;img alt=&#34;Rust CI&#34; src=&#34;https://github.com/yoav-lavi/melody/actions/workflows/rust.yml/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/melody_compiler&#34;&gt; &lt;img alt=&#34;Crates.io&#34; src=&#34;https://img.shields.io/crates/v/melody_compiler?label=compiler&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/melody_cli&#34;&gt; &lt;img alt=&#34;Crates.io&#34; src=&#34;https://img.shields.io/crates/v/melody_cli?label=cli&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://melody-playground.vercel.app&#34;&gt; &lt;img alt=&#34;melody playground&#34; src=&#34;https://img.shields.io/badge/melody-playground-brightgreen&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://yoav-lavi.github.io/melody/book/&#34;&gt; &lt;img alt=&#34;melody playground&#34; src=&#34;https://img.shields.io/badge/melody-book-blue&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Melody is a language that compiles to ECMAScript regular expressions, while aiming to be more readable and maintainable. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;code example&#34; src=&#34;https://user-images.githubusercontent.com/14347895/154124756-ddbd3c84-f8b2-45bd-b624-2c510482c4e2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Note: these are for the currently supported syntax and may change&lt;/p&gt; &#xA;&lt;h3&gt;Batman Theme &amp;nbsp;&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://melody-playground.vercel.app?content=MTYlMjBvZiUyMCUyMm5hJTIyJTNCJTBBJTBBMiUyMG9mJTIwbWF0Y2glMjAlN0IlMEElMjAlMjAlM0NzcGFjZSUzRSUzQiUwQSUyMCUyMCUyMmJhdG1hbiUyMiUzQiUwQSU3RCUwQSUwQSUyRiUyRiUyMCVGMCU5RiVBNiU4NyVGMCU5RiVBNiVCOCVFMiU4MCU4RCVFMiU5OSU4MiVFRiVCOCU4Rg==&#34;&gt;try in playground&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;16 of &#34;na&#34;;&#xA;&#xA;2 of match {&#xA;  &amp;lt;space&amp;gt;;&#xA;  &#34;batman&#34;;&#xA;}&#xA;&#xA;// 🦇🦸‍♂️&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turns into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-regex&#34;&gt;(?:na){16}(?: batman){2}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Twitter Hashtag &amp;nbsp;&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://melody-playground.vercel.app?content=JTIyJTIzJTIyJTNCJTBBc29tZSUyMG9mJTIwJTNDd29yZCUzRSUzQiUwQSUwQSUyRiUyRiUyMCUyM21lbG9keQ==&#34;&gt;try in playground&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;&#34;#&#34;;&#xA;some of &amp;lt;word&amp;gt;;&#xA;&#xA;// #melody&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turns into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-regex&#34;&gt;#\w+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Introductory Courses &amp;nbsp;&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://melody-playground.vercel.app?content=c29tZSUyMG9mJTIwJTNDYWxwaGFiZXRpYyUzRSUzQiUwQSUzQ3NwYWNlJTNFJTNCJTBBJTIyMSUyMiUzQiUwQTIlMjBvZiUyMCUzQ2RpZ2l0JTNFJTNCJTBBJTBBJTJGJTJGJTIwY2xhc3NuYW1lJTIwMXh4&#34;&gt;try in playground&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;some of &amp;lt;alphabetic&amp;gt;;&#xA;&amp;lt;space&amp;gt;;&#xA;&#34;1&#34;;&#xA;2 of &amp;lt;digit&amp;gt;;&#xA;&#xA;// classname 1xx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turns into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-regex&#34;&gt;[a-zA-Z]+ 1\d{2}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Indented Code (2 spaces) &amp;nbsp;&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://melody-playground.vercel.app?content=c29tZSUyMG9mJTIwbWF0Y2glMjAlN0IlMEElMjAlMjAyJTIwb2YlMjAlM0NzcGFjZSUzRSUzQiUwQSU3RCUwQSUwQXNvbWUlMjBvZiUyMCUzQ2NoYXIlM0UlM0IlMEElMjIlM0IlMjIlM0IlMEElMEElMkYlMkYlMjBsZXQlMjB2YWx1ZSUyMCUzRCUyMDUlM0I=&#34;&gt;try in playground&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;some of match {&#xA;  2 of &amp;lt;space&amp;gt;;&#xA;}&#xA;&#xA;some of &amp;lt;char&amp;gt;;&#xA;&#34;;&#34;;&#xA;&#xA;// let value = 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turns into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-regex&#34;&gt;(?: {2})+.+;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Semantic Versions &amp;nbsp;&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://melody-playground.vercel.app?content=JTNDc3RhcnQlM0UlM0IlMEElMEFvcHRpb24lMjBvZiUyMCUyMnYlMjIlM0IlMEElMEFjYXB0dXJlJTIwbWFqb3IlMjAlN0IlMEElMjAlMjBzb21lJTIwb2YlMjAlM0NkaWdpdCUzRSUzQiUwQSU3RCUwQSUwQSUyMi4lMjIlM0IlMEElMEFjYXB0dXJlJTIwbWlub3IlMjAlN0IlMEElMjAlMjBzb21lJTIwb2YlMjAlM0NkaWdpdCUzRSUzQiUwQSU3RCUwQSUwQSUyMi4lMjIlM0IlMEElMEFjYXB0dXJlJTIwcGF0Y2glMjAlN0IlMEElMjAlMjBzb21lJTIwb2YlMjAlM0NkaWdpdCUzRSUzQiUwQSU3RCUwQSUwQSUzQ2VuZCUzRSUzQiUwQSUwQSUyRiUyRiUyMHYxLjAuMA==&#34;&gt;try in playground&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;&amp;lt;start&amp;gt;;&#xA;&#xA;option of &#34;v&#34;;&#xA;&#xA;capture major {&#xA;  some of &amp;lt;digit&amp;gt;;&#xA;}&#xA;&#xA;&#34;.&#34;;&#xA;&#xA;capture minor {&#xA;  some of &amp;lt;digit&amp;gt;;&#xA;}&#xA;&#xA;&#34;.&#34;;&#xA;&#xA;capture patch {&#xA;  some of &amp;lt;digit&amp;gt;;&#xA;}&#xA;&#xA;&amp;lt;end&amp;gt;;&#xA;&#xA;// v1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turns into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-regex&#34;&gt;^v?(?&amp;lt;major&amp;gt;\d+)\.(?&amp;lt;minor&amp;gt;\d+)\.(?&amp;lt;patch&amp;gt;\d+)$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Playground&lt;/h2&gt; &#xA;&lt;p&gt;You can try Melody in your browser using the &lt;a href=&#34;https://melody-playground.vercel.app/&#34;&gt;playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Book&lt;/h2&gt; &#xA;&lt;p&gt;Read the book &lt;a href=&#34;https://yoav-lavi.github.io/melody/book/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install melody_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/yoav-lavi/melody.git&#xA;cd melody&#xA;cargo install --path crates/melody_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS binaries (&lt;code&gt;aarch64&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt;) can be downloaded from the &lt;a href=&#34;https://github.com/yoav-lavi/melody/releases&#34;&gt;release page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/melody&#34;&gt;Brew&lt;/a&gt; (macOS and Linux)&lt;/p&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Installation instructions&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install melody&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/melody&#34;&gt;Arch Linux&lt;/a&gt; (maintained by &lt;a href=&#34;https://github.com/ilai-deutel&#34;&gt;@ilai-deutel&lt;/a&gt;)&lt;/p&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Installation instructions&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Installation with an AUR helper, for instance using &lt;code&gt;paru&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;paru -Syu melody&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install manually with &lt;code&gt;makepkg&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://aur.archlinux.org/melody.git&#xA;cd melody&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/misc/melody/default.nix&#34;&gt;NixOS&lt;/a&gt; (maintained by &lt;a href=&#34;https://github.com/jyooru&#34;&gt;@jyooru&lt;/a&gt;)&lt;/p&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Installation instructions&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Declarative installation using &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ pkgs, ... }:&#xA;{&#xA;  environment.systemPackages = with pkgs; [&#xA;    melody&#xA;  ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Imperative installation using &lt;code&gt;nix-env&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixos.melody&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CLI Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;USAGE:&#xA;    melody [OPTIONS] [INPUT_FILE_PATH]&#xA;&#xA;ARGS:&#xA;    &amp;lt;INPUT_FILE_PATH&amp;gt;    Read from a file&#xA;                         Use &#39;-&#39; and or pipe input to read from stdin&#xA;&#xA;OPTIONS:&#xA;    -f, --test-file &amp;lt;TEST_FILE&amp;gt;&#xA;            Test the compiled regex against the contents of a file&#xA;&#xA;        --generate-completions &amp;lt;COMPLETIONS&amp;gt;&#xA;            Outputs completions for the selected shell&#xA;            To use, write the output to the appropriate location for your shell&#xA;&#xA;    -h, --help&#xA;            Print help information&#xA;&#xA;    -n, --no-color&#xA;            Print output with no color&#xA;&#xA;    -o, --output &amp;lt;OUTPUT_FILE_PATH&amp;gt;&#xA;            Write to a file&#xA;&#xA;    -r, --repl&#xA;            Start the Melody REPL&#xA;&#xA;    -t, --test &amp;lt;TEST&amp;gt;&#xA;            Test the compiled regex against a string&#xA;&#xA;    -V, --version&#xA;            Print version information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See the changelog &lt;a href=&#34;https://github.com/yoav-lavi/melody/raw/main/CHANGELOG.md&#34;&gt;here&lt;/a&gt; or in the &lt;a href=&#34;https://github.com/yoav-lavi/melody/releases&#34;&gt;release page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Syntax&lt;/h2&gt; &#xA;&lt;h3&gt;Quantifiers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;... of&lt;/code&gt; - used to express a specific amount of a pattern. equivalent to regex &lt;code&gt;{5}&lt;/code&gt; (assuming &lt;code&gt;5 of ...&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;... to ... of&lt;/code&gt; - used to express an amount within a range of a pattern. equivalent to regex &lt;code&gt;{5,9}&lt;/code&gt; (assuming &lt;code&gt;5 to 9 of ...&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;over ... of&lt;/code&gt; - used to express more than an amount of a pattern. equivalent to regex &lt;code&gt;{6,}&lt;/code&gt; (assuming &lt;code&gt;over 5 of ...&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;some of&lt;/code&gt; - used to express 1 or more of a pattern. equivalent to regex &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;any of&lt;/code&gt; - used to express 0 or more of a pattern. equivalent to regex &lt;code&gt;*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;option of&lt;/code&gt; - used to express 0 or 1 of a pattern. equivalent to regex &lt;code&gt;?&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All quantifiers can be preceded by &lt;code&gt;lazy&lt;/code&gt; to match the least amount of characters rather than the most characters (greedy). Equivalent to regex &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;*?&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Symbols&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;char&amp;gt;&lt;/code&gt; - matches any single character. equivalent to regex &lt;code&gt;.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; - matches a space character. equivalent to regex &lt;code&gt; &lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;whitespace&amp;gt;&lt;/code&gt; - matches any kind of whitespace character. equivalent to regex &lt;code&gt;\s&lt;/code&gt; or &lt;code&gt;[ \t\n\v\f\r]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt; - matches a newline character. equivalent to regex &lt;code&gt;\n&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; - matches a tab character. equivalent to regex &lt;code&gt;\t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; - matches a carriage return character. equivalent to regex &lt;code&gt;\r&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;feed&amp;gt;&lt;/code&gt; - matches a form feed character. equivalent to regex &lt;code&gt;\f&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;null&amp;gt;&lt;/code&gt; - matches a null characther. equivalent to regex &lt;code&gt;\0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;digit&amp;gt;&lt;/code&gt; - matches any single digit. equivalent to regex &lt;code&gt;\d&lt;/code&gt; or &lt;code&gt;[0-9]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;vertical&amp;gt;&lt;/code&gt; - matches a vertical tab character. equivalent to regex &lt;code&gt;\v&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;word&amp;gt;&lt;/code&gt; - matches a word character (any latin letter, any digit or an underscore). equivalent to regex &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;[a-zA-Z0-9_]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;alphabetic&amp;gt;&lt;/code&gt; - matches any single latin letter. equivalent to regex &lt;code&gt;[a-zA-Z]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;alphanumeric&amp;gt;&lt;/code&gt; - matches any single latin letter or any single digit. equivalent to regex &lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;boundary&amp;gt;&lt;/code&gt; - Matches a character between a character matched by &lt;code&gt;&amp;lt;word&amp;gt;&lt;/code&gt; and a character not matched by &lt;code&gt;&amp;lt;word&amp;gt;&lt;/code&gt; without consuming the character. equivalent to regex &lt;code&gt;\b&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;backspace&amp;gt;&lt;/code&gt; - matches a backspace control character. equivalent to regex &lt;code&gt;[\b]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All symbols can be preceeded with &lt;code&gt;not&lt;/code&gt; to match any character other than the symbol&lt;/p&gt; &#xA;&lt;h3&gt;Special Symbols&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; - matches the start of the string. equivalent to regex &lt;code&gt;^&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; - matches the end of the string. equivalent to regex &lt;code&gt;$&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unicode Categories&lt;/h3&gt; &#xA;&lt;p&gt;Note: these are not supported when testing in the CLI (&lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;-f&lt;/code&gt;) as the regex engine used does not support unicode categories. These require using the &lt;code&gt;u&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;category::letter&amp;gt;&lt;/code&gt; - any kind of letter from any language &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::lowercase_letter&amp;gt;&lt;/code&gt; - a lowercase letter that has an uppercase variant&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::uppercase_letter&amp;gt;&lt;/code&gt; - an uppercase letter that has a lowercase variant.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::titlecase_letter&amp;gt;&lt;/code&gt; - a letter that appears at the start of a word when only the first letter of the word is capitalized&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::cased_letter&amp;gt;&lt;/code&gt; - a letter that exists in lowercase and uppercase variants&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::modifier_letter&amp;gt;&lt;/code&gt; - a special character that is used like a letter&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::other_letter&amp;gt;&lt;/code&gt; - a letter or ideograph that does not have lowercase and uppercase variants&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;category::mark&amp;gt;&lt;/code&gt; - a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::non_spacing_mark&amp;gt;&lt;/code&gt; - a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::spacing_combining_mark&amp;gt;&lt;/code&gt; - a character intended to be combined with another character that takes up extra space (vowel signs in many Eastern languages)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::enclosing_mark&amp;gt;&lt;/code&gt; - a character that encloses the character it is combined with (circle, square, keycap, etc.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;category::separator&amp;gt;&lt;/code&gt; - any kind of whitespace or invisible separator &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::space_separator&amp;gt;&lt;/code&gt; - a whitespace character that is invisible, but does take up space&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::line_separator&amp;gt;&lt;/code&gt; - line separator character U+2028&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::paragraph_separator&amp;gt;&lt;/code&gt; - paragraph separator character U+2029&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;category::symbol&amp;gt;&lt;/code&gt; - math symbols, currency signs, dingbats, box-drawing characters, etc &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::math_symbol&amp;gt;&lt;/code&gt; - any mathematical symbol&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::currency_symbol&amp;gt;&lt;/code&gt; - any currency sign&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::modifier_symbol&amp;gt;&lt;/code&gt; - a combining character (mark) as a full character on its own&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::other_symbol&amp;gt;&lt;/code&gt; - various symbols that are not math symbols, currency signs, or combining characters&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;category::number&amp;gt;&lt;/code&gt; - any kind of numeric character in any script &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::decimal_digit_number&amp;gt;&lt;/code&gt; - a digit zero through nine in any script except ideographic scripts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::letter_number&amp;gt;&lt;/code&gt; - a number that looks like a letter, such as a Roman numeral&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::other_number&amp;gt;&lt;/code&gt; - a superscript or subscript digit, or a number that is not a digit 0–9 (excluding numbers from ideographic scripts)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;category::punctuation&amp;gt;&lt;/code&gt; - any kind of punctuation character &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::dash_punctuation&amp;gt;&lt;/code&gt; - any kind of hyphen or dash&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::open_punctuation&amp;gt;&lt;/code&gt; - any kind of opening bracket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::close_punctuation&amp;gt;&lt;/code&gt; - any kind of closing bracket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::initial_punctuation&amp;gt;&lt;/code&gt; - any kind of opening quote&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::final_punctuation&amp;gt;&lt;/code&gt; - any kind of closing quote&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::connector_punctuation&amp;gt;&lt;/code&gt; - a punctuation character such as an underscore that connects words&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::other_punctuation&amp;gt;&lt;/code&gt; - any kind of punctuation character that is not a dash, bracket, quote or connectors&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;category::other&amp;gt;&lt;/code&gt; - invisible control characters and unused code points &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::control&amp;gt;&lt;/code&gt; - an ASCII or Latin-1 control character: 0x00–0x1F and 0x7F–0x9F&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::format&amp;gt;&lt;/code&gt; - invisible formatting indicator&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::private_use&amp;gt;&lt;/code&gt; - any code point reserved for private use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::surrogate&amp;gt;&lt;/code&gt; - one half of a surrogate pair in UTF-16 encoding&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;category::unassigned&amp;gt;&lt;/code&gt; - any code point to which no character has been assigned&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These descriptions are from &lt;a href=&#34;https://www.regular-expressions.info/unicode.html&#34;&gt;regular-expressions.info&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Character Ranges&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;... to ...&lt;/code&gt; - used with digits or alphabetic characters to express a character range. equivalent to regex &lt;code&gt;[5-9]&lt;/code&gt; (assuming &lt;code&gt;5 to 9&lt;/code&gt;) or &lt;code&gt;[a-z]&lt;/code&gt; (assuming &lt;code&gt;a to z&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Literals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;...&#34;&lt;/code&gt; or &lt;code&gt;&#39;...&#39;&lt;/code&gt; - used to mark a literal part of the match. Melody will automatically escape characters as needed. Quotes (of the same kind surrounding the literal) should be escaped&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Raw&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;`...`&lt;/code&gt; - added directly to the output without any escaping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Groups&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;capture&lt;/code&gt; - used to open a &lt;code&gt;capture&lt;/code&gt; or named &lt;code&gt;capture&lt;/code&gt; block. capture patterns are later available in the list of matches (either positional or named). equivalent to regex &lt;code&gt;(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;match&lt;/code&gt; - used to open a &lt;code&gt;match&lt;/code&gt; block, matches the contents without capturing. equivalent to regex &lt;code&gt;(?:...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;either&lt;/code&gt; - used to open an &lt;code&gt;either&lt;/code&gt; block, matches one of the statements within the block. equivalent to regex &lt;code&gt;(?:...|...)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Assertions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ahead&lt;/code&gt; - used to open an &lt;code&gt;ahead&lt;/code&gt; block. equivalent to regex &lt;code&gt;(?=...)&lt;/code&gt;. use after an expression&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;behind&lt;/code&gt; - used to open an &lt;code&gt;behind&lt;/code&gt; block. equivalent to regex &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt;. use before an expression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Assertions can be preceeded by &lt;code&gt;not&lt;/code&gt; to create a negative assertion (equivalent to regex &lt;code&gt;(?!...)&lt;/code&gt;, &lt;code&gt;(?&amp;lt;!...)&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;let .variable_name = { ... }&lt;/code&gt; - defines a variable from a block of statements. can later be used with &lt;code&gt;.variable_name&lt;/code&gt;. Variables must be declared before being used. Variable invocations cannot be quantified directly, use a group if you want to quantify a variable invocation&lt;/p&gt; &lt;p&gt;example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;let .a_and_b = {&#xA;  &#34;a&#34;;&#xA;  &#34;b&#34;;&#xA;}&#xA;&#xA;.a_and_b;&#xA;&#34;c&#34;;&#xA;&#xA;// abc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extras&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/* ... */&lt;/code&gt;, &lt;code&gt;// ...&lt;/code&gt; - used to mark comments (note: &lt;code&gt;// ...&lt;/code&gt; comments must be on separate line)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;File Extension&lt;/h2&gt; &#xA;&lt;p&gt;The Melody file extensions are &lt;code&gt;.mdy&lt;/code&gt; and &lt;code&gt;.melody&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Crates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;melody_compiler&lt;/code&gt; - The Melody compiler &lt;a href=&#34;https://crates.io/crates/melody_compiler&#34;&gt;📦&lt;/a&gt; &lt;a href=&#34;https://docs.rs/melody_compiler&#34;&gt;📖&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;melody_cli&lt;/code&gt; - A CLI wrapping the Melody compiler &lt;a href=&#34;https://crates.io/crates/melody_cli&#34;&gt;📦&lt;/a&gt; &lt;a href=&#34;https://docs.rs/crate/melody_cli&#34;&gt;📖&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;melody_wasm&lt;/code&gt; - WASM bindings for the Melody compiler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yoavlavi.melody&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/18693-melody&#34;&gt;IntelliJ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/melodyc&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deno.land/x/melody&#34;&gt;Deno&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/babel-plugin-melody&#34;&gt;Babel Plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Last measured on v0.19.0&lt;/p&gt; &#xA;&lt;p&gt;Measured on an 8 core 2021 MacBook Pro 14-inch, Apple M1 Pro using &lt;a href=&#34;https://github.com/bheisler/criterion.rs&#34;&gt;criterion&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;8 lines:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;compiler/normal (8 lines)&#xA;                          time:   [4.0579 µs 4.0665 µs 4.0788 µs]&#xA;slope  [4.0579 µs 4.0788 µs] R^2            [0.9996538 0.9995633]&#xA;mean   [4.0555 µs 4.0806 µs] std. dev.      [11.018 ns 26.342 ns]&#xA;median [4.0500 µs 4.0852 µs] med. abs. dev. [5.6889 ns 35.806 ns]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;1M lines:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;compiler/long input (1M lines)&#xA;                          time:   [400.97 ms 402.31 ms 403.53 ms]&#xA;mean   [400.97 ms 403.53 ms] std. dev.      [773.42 µs 2.9886 ms]&#xA;median [401.22 ms 403.39 ms] med. abs. dev. [59.042 µs 3.5129 ms]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deeply nested:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;compiler/deeply nested&#xA;                          time:   [5.8085 µs 5.8291 µs 5.8514 µs]&#xA;slope  [5.8085 µs 5.8514 µs] R^2            [0.9992861 0.9992461]&#xA;mean   [5.8064 µs 5.8519 µs] std. dev.      [21.027 ns 49.152 ns]&#xA;median [5.7949 µs 5.8583 µs] med. abs. dev. [3.3348 ns 64.628 ns]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To reproduce, run &lt;code&gt;cargo bench&lt;/code&gt; or &lt;code&gt;cargo xtask benchmark&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Future Feature Status&lt;/h2&gt; &#xA;&lt;p&gt;🐣 - Partially implemented&lt;/p&gt; &#xA;&lt;p&gt;❌ - Not implemented&lt;/p&gt; &#xA;&lt;p&gt;❔ - Unclear what the syntax will be&lt;/p&gt; &#xA;&lt;p&gt;❓ - Unclear whether this will be implemented&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Melody&lt;/th&gt; &#xA;   &lt;th&gt;Regex&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;not &#34;A&#34;;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[^A]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🐣&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;variables / macros&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🐣&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;...::...&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\p{...}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🐣&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;not &amp;lt;...::...&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\P{...}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🐣&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;file watcher&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;multiline groups in REPL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;flags: global, multiline, ...&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/.../gm...&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\#&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\k&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\uYYYY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\xYY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\ddd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\cY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$`&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$&amp;amp;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x20&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(?)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x{06fa}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;any of &#34;a&#34;, &#34;b&#34;, &#34;c&#34;&lt;/code&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[abc]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;multiple ranges *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;regex optimization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;standard library / patterns&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reverse compiler&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* these are expressable in the current syntax using other methods&lt;/p&gt;</summary>
  </entry>
</feed>