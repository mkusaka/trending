<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-11T01:45:12Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flox/flox</title>
    <updated>2023-02-11T01:45:12Z</updated>
    <id>tag:github.com,2023-02-11:/flox/flox</id>
    <link href="https://github.com/flox/flox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Harness the power of Nix&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;a href=&#34;https://floxdev.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flox/flox/main/img/flox_blue_small.png&#34; alt=&#34;flox logo&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://badgen.net/badge/license/GPLv2/green&#34; alt=&#34;license&#34;&gt; &lt;img src=&#34;https://badgen.net/badge/PRs/welcome/green&#34; alt=&#34;PRs&#34;&gt; &lt;img src=&#34;https://badgen.net/badge/beta/v0.1.0/58569c&#34; alt=&#34;beta&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;flox (beta)&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://floxdev.com&#34;&gt;flox&lt;/a&gt; CLI is a multi-platform environment manager built on &lt;a href=&#34;https://github.com/nixOS/nix&#34;&gt;Nix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img style=&#34;float:right&#34; alt=&#34;flox flywheel&#34; align=&#34;right&#34; width=&#34;280&#34; src=&#34;https://raw.githubusercontent.com/flox/flox/main/img/310703783_812187779826049_7314390197914243071_n.png&#34;&gt; &#xA;&lt;p&gt;With flox you can:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install and run software anywhere&lt;/li&gt; &#xA; &lt;li&gt;Share collections of software that others can use&lt;/li&gt; &#xA; &lt;li&gt;Build software the same way in any environment&lt;/li&gt; &#xA; &lt;li&gt;Publish software for re-use&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download the flox CLI via one of our native installers for Mac, Linux, or Windows WSL &lt;a href=&#34;https://floxdev.com/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://floxdev.com/docs&#34;&gt;docs&lt;/a&gt; for more detail on usage.&lt;/p&gt; &#xA;&lt;h4&gt;Search through available packages:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{&#34;&gt;$ flox search ripgrep&#xA;ripgrep - A utility that combines the usability of The Silver Searcher with the raw speed of grep&#xA;  stable.nixpkgs-flox.ripgrep@12.1.1&#xA;  stable.nixpkgs-flox.ripgrep@13.0.0&#xA;  staging.nixpkgs-flox.ripgrep@13.0.0&#xA;  unstable.nixpkgs-flox.ripgrep@13.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install a package:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{&#34;&gt;$ flox install ripgrep&#xA;created generation 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a new environment:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{&#34;&gt;$ flox create&#xA;created environment default (aarch64-linux)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Activate an environment¶&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{&#34;&gt;$ flox install cowsay&#xA;created generation 2&#xA;$ flox activate&#xA;flox [default] $ cowsay &#39;¡Hola!&#39;&#xA; ________&#xA;&amp;lt; !Hola! &amp;gt;&#xA; --------&#xA;        \   ^__^&#xA;         \  (oo)\_______&#xA;            (__)\       )\/\&#xA;                ||----w |&#xA;                ||     ||&#xA;flox [default] $ exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use another&#39;s environment:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{&#34;&gt;$ flox pull -e flox-examples/demo&#xA;Total 0 (delta 0), reused 0 (delta 0), pack-reused 0&#xA;To /home/USER/.cache/flox/meta/flox-examples&#xA; * [new branch]      aarch64-linux.demo -&amp;gt; aarch64-linux.demo&#xA;$ flox activate -e flox-examples/demo&#xA;flox [flox-examples/demo default] $ fortune | cowsay&#xA; _____________________________________&#xA;/ Spock: We suffered 23 casualties in \&#xA;\ that attack, Captain.               /&#xA; -------------------------------------&#xA;        \   ^__^&#xA;         \  (oo)\_______&#xA;            (__)\       )\/\&#xA;                ||----w |&#xA;                ||     ||&#xA;flox [flox-examples/demo default] $ exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;nixpkgs-flox&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The flox CLI gets its packages from the &lt;a href=&#34;https://github.com/flox/nixpkgs-flox&#34;&gt;nixpkgs-flox&lt;/a&gt; channel, which is created using Nixpkgs. Using packages from a flox channel adds a few features as compared to using Nixpkgs directly: semantic versioning, stabilities, and guaranteed cache hits. See the &lt;a href=&#34;https://floxdev.com/docs/basics&#34;&gt;docs&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to this project. Please read the &lt;a href=&#34;https://raw.githubusercontent.com/flox/flox/main/CONTRIBUTING.md&#34;&gt;Contributor guide&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h4&gt;Building from source&lt;/h4&gt; &#xA;&lt;p&gt;The flox CLI is written in Rust. Building flox requires a running Nix daemon.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way to build flox is via flox!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download &lt;code&gt;flox&lt;/code&gt; and run &lt;code&gt;flox build&lt;/code&gt; in the project directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re a Nix user, you can run the following: &lt;code&gt;nix build .#flox --extra-experimental-features &#34;nix-command flakes&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/flox/flox/main/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The flox CLI is licensed under the GPLv2. See &lt;a href=&#34;https://raw.githubusercontent.com/flox/flox/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Find us on &lt;a href=&#34;https://twitter.com/floxdevelopment&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://discourse.floxdev.com&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For updates to the flox CLI, follow this repo on &lt;a href=&#34;https://github.com/flox/flox&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>obi1kenobi/trustfall</title>
    <updated>2023-02-11T01:45:12Z</updated>
    <id>tag:github.com,2023-02-11:/obi1kenobi/trustfall</id>
    <link href="https://github.com/obi1kenobi/trustfall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;If GraphQL were more like SQL: a query language for any combination of data sources.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;trustfall&lt;/code&gt; — How to Query (Almost) Everything&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the &lt;code&gt;trustfall&lt;/code&gt; query engine, which can be used to query any data source or combination of data sources: databases, APIs, raw files (JSON, CSV, etc.), git version control, etc. For a 10min video introduction to the project, see the &lt;a href=&#34;https://www.hytradboi.com/2022/how-to-query-almost-everything&#34;&gt;&#34;How to Query (Almost) Everything&#34; talk&lt;/a&gt; from the &lt;a href=&#34;https://www.hytradboi.com/&#34;&gt;HYTRADBOI 2022&lt;/a&gt; conference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/obi1kenobi/trustfall/raw/main/demo-hytradboi/query-demo.gif&#34; alt=&#34;Terminal recording of running cargo run --release -- query example_queries/actions_in_repos_with_min_10_hn_pts.ron in the demo-hytradboi demo project. The system returns the first 20 results of the query in 6.36 seconds.&amp;quot;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Demo showing the execution of the cross-API query: &#34;Which GitHub Actions are used in projects on the front page of HackerNews with &amp;gt;=10 points?&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The demo executes the following query across the HackerNews and GitHub APIs and over the YAML-formatted GitHub repository workflow files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;{&#xA;  HackerNewsTop(max: 200) {&#xA;    ... on HackerNewsStory {&#xA;      hn_score: score @filter(op: &#34;&amp;gt;=&#34;, value: [&#34;$min_score&#34;]) @output&#xA;&#xA;      link {&#xA;        ... on GitHubRepository {&#xA;          repo_url: url @output&#xA;&#xA;          workflows {&#xA;            workflow: name @output&#xA;            workflow_path: path @output&#xA;&#xA;            jobs {&#xA;              job: name @output&#xA;&#xA;              step {&#xA;                ... on GitHubActionsImportedStep {&#xA;                  step: name @output&#xA;                  action: uses @output&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This demo is part of the &lt;a href=&#34;https://www.hytradboi.com/2022/how-to-query-almost-everything&#34;&gt;&#34;How to Query (Almost) Everything&#34; talk&lt;/a&gt; from the &lt;a href=&#34;https://www.hytradboi.com/&#34;&gt;HYTRADBOI 2022&lt;/a&gt; conference. Instructions for running the demo are available together with the source code in the &lt;code&gt;demo-hytradboi&lt;/code&gt; directory: &lt;a href=&#34;https://github.com/obi1kenobi/trustfall/tree/main/demo-hytradboi&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a brief overview of the query language and an example of using it to query APIs, check the &lt;code&gt;demo-hackernews&lt;/code&gt; directory for a simpler demo only querying the HackerNews APIs: &lt;a href=&#34;https://github.com/obi1kenobi/trustfall/tree/main/demo-hackernews&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Python bindings are available, and are built automatically on every change to the engine; the most recent version may be downloaded &lt;a href=&#34;https://github.com/obi1kenobi/trustfall/releases&#34;&gt;here&lt;/a&gt;. A getting started guide for Python is forthcoming (&lt;a href=&#34;https://github.com/obi1kenobi/trustfall/issues/16&#34;&gt;tracking issue&lt;/a&gt;); in the meantime, the best resource is the Python bindings&#39; &lt;a href=&#34;https://github.com/obi1kenobi/trustfall/raw/main/pytrustfall/pytrustfall/tests/test_execution.py&#34;&gt;test suite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Registry&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;trustfall_core&lt;/code&gt; contains the query engine itself: &lt;a href=&#34;https://github.com/obi1kenobi/trustfall/tree/main/trustfall_core&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pytrustfall&lt;/code&gt; contains &lt;code&gt;pyo3&lt;/code&gt;-based Python bindings for the &lt;code&gt;trustfall&lt;/code&gt; engine: &lt;a href=&#34;https://github.com/obi1kenobi/trustfall/tree/main/pytrustfall&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trustfall_wasm&lt;/code&gt; is a WASM build of the &lt;code&gt;trustfall&lt;/code&gt; engine: &lt;a href=&#34;https://github.com/obi1kenobi/trustfall/tree/main/trustfall_wasm&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;demo-hackernews&lt;/code&gt; contains an example use case: querying the HackerNews APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;demo-hytradboi&lt;/code&gt; contains the demo code from the &#34;How to Query (Almost) Everything&#34; talk at the &lt;a href=&#34;https://www.hytradboi.com/&#34;&gt;HYTRADBOI 2022&lt;/a&gt; conference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;demo-feeds&lt;/code&gt; is an example implementation querying RSS feeds using Rust and &lt;code&gt;trustfall&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;demo-metar&lt;/code&gt; is an example implementation querying METAR aviation weather reports using Rust and &lt;code&gt;trustfall&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filetests_proc_macro&lt;/code&gt; is a procedural macro used to generate test cases defined by files: they ensure that the function under test, when given an input specified by one file, produces an output equivalent to the contents of another file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copyright 2022-present Predrag Gruevski.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;p&gt;The present date is determined by the timestamp of the most recent commit in the repository. By accessing, and contributing code, comments, or issues to this repository, you are agreeing that all your contributions may be used, modified, copied, and/or redistributed under any terms chosen by the original author and/or future maintainers of this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hwittenborn/celeste</title>
    <updated>2023-02-11T01:45:12Z</updated>
    <id>tag:github.com,2023-02-11:/hwittenborn/celeste</id>
    <link href="https://github.com/hwittenborn/celeste" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GUI file synchronization client that can sync with any cloud provider&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Celeste&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flathub.org/apps/details/com.hunterwittenborn.Celeste&#34;&gt;&lt;img width=&#34;150&#34; src=&#34;https://flathub.org/assets/badges/flathub-badge-i-en.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/celeste&#34;&gt;&lt;img width=&#34;150&#34; src=&#34;https://snapcraft.io/static/images/badges/en/snap-store-black.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Celeste is a GUI file synchronization client that can connect to virtually any cloud provider.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backed by &lt;a href=&#34;https://rclone.org/&#34;&gt;rclone&lt;/a&gt;, giving you a reliable and battle-tested way to sync your files anywhere&lt;/li&gt; &#xA; &lt;li&gt;Written with GTK4 and Libadwaita, giving Celeste a native look and feel on your desktop&lt;/li&gt; &#xA; &lt;li&gt;Written in Rust, making Celeste &lt;em&gt;&lt;strong&gt;blazingly fast&lt;/strong&gt;&lt;/em&gt; to use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwittenborn/celeste/main/assets/main-window.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Celeste is currently alpha software, and you should likewise ensure you have a backup of your data before you decide on trying it. &lt;em&gt;Any file loss incurred is at your own risk&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Two-way sync&lt;/li&gt; &#xA; &lt;li&gt;Asking what to do when a local and remote file have both been updated since last sync&lt;/li&gt; &#xA; &lt;li&gt;Ability to exclude files/folders from sync&lt;/li&gt; &#xA; &lt;li&gt;Connecting to multiple cloud providers at the same time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported cloud providers&lt;/h2&gt; &#xA;&lt;p&gt;Celeste can currently connect to the following cloud providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dropbox&lt;/li&gt; &#xA; &lt;li&gt;Google Drive &lt;em&gt;(May not work currently, see &lt;a href=&#34;https://github.com/hwittenborn/celeste/issues/30&#34;&gt;https://github.com/hwittenborn/celeste/issues/30&lt;/a&gt; for more information)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nextcloud&lt;/li&gt; &#xA; &lt;li&gt;Owncloud&lt;/li&gt; &#xA; &lt;li&gt;pCloud&lt;/li&gt; &#xA; &lt;li&gt;WebDAV&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Celeste can be installed via the methods listed below:&lt;/p&gt; &#xA;&lt;h3&gt;Flatpak&lt;/h3&gt; &#xA;&lt;p&gt;Celeste is available on &lt;a href=&#34;https://flathub.org/apps/details/com.hunterwittenborn.Celeste&#34;&gt;Flathub&lt;/a&gt;. First make sure you have &lt;a href=&#34;https://flatpak.org/setup/&#34;&gt;set up Flatpak&lt;/a&gt; on your system, and then run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flatpak install flathub com.hunterwittenborn.Celeste&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snap&lt;/h3&gt; &#xA;&lt;p&gt;Celeste is available on the &lt;a href=&#34;https://snapcraft.io/celeste&#34;&gt;Snap Store&lt;/a&gt;, which can be installed on any system that has Snap installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;snap install celeste&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prebuilt-MPR (Debian/Ubuntu)&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on Ubuntu 22.10 or later, you can install Celeste from the Prebuilt-MPR. First make sure &lt;a href=&#34;https://docs.makedeb.org/prebuilt-mpr/getting-started/&#34;&gt;the Prebuilt-MPR is set up&lt;/a&gt; on your system, and then run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install celeste&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>