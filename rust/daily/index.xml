<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:41:25Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>adam-mcdaniel/sage</title>
    <updated>2023-12-24T01:41:25Z</updated>
    <id>tag:github.com,2023-12-24:/adam-mcdaniel/sage</id>
    <link href="https://github.com/adam-mcdaniel/sage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A programming language that&#39;s wise beyond its bytes!🌱🌿🪴&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;🌿🌱&lt;b&gt;The Sage Programming Language&lt;/b&gt;🪴🍃&lt;/h1&gt; &#xA; &lt;p&gt; &lt;strong&gt;Sage advice for your coding conundrums!&lt;/strong&gt; &lt;/p&gt; &#xA; &lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/code1.png&#34; width=&#34;29.5%&#34;&gt; &lt;a href=&#34;https://adam-mcdaniel.net/sage&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/sage.png&#34; width=&#34;68%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://adam-mcdaniel.net/sage&#34;&gt;&lt;em&gt;&lt;strong&gt;Here&#39;s a link to the online compiler playground!&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#what-is-sage&#34;&gt;What is Sage?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#why-sage&#34;&gt;Why Sage?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#how-useful-is-sage&#34;&gt;How useful is Sage?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#how-do-i-use-sage&#34;&gt;How do I use Sage?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#what-does-sage-look-like&#34;&gt;What does Sage look like?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#feature-roadmap&#34;&gt;Feature Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#where-can-i-learn-more&#34;&gt;Where can I learn more?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#how-do-i-contribute&#34;&gt;How do I contribute?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/#about-the-author&#34;&gt;About the Author&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/rSGkM4bcdP&#34;&gt;Discord server&lt;/a&gt; to chat about Sage! Let us know if you have any thoughts or comments about the language!&lt;/p&gt; &#xA;&lt;h2&gt;What is Sage?&lt;/h2&gt; &#xA;&lt;p&gt;Sage is a programming language that tries to be maximally portable, expressive, and intuitive. It borrows some aspects of Rust, C, and Python. It currently has an x86 compiler backend, a C source backend, and a VM interpreter backend &lt;a href=&#34;https://adam-mcdaniel.net/sage&#34;&gt;which can run on the web&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/code2.png&#34; width=&#34;32.5%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/code1.png&#34; width=&#34;31.5%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/code3.png&#34; width=&#34;28.5%&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Sage is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;, and has been under development since April 2022.&lt;/p&gt; &#xA;&lt;h2&gt;Why Sage?&lt;/h2&gt; &#xA;&lt;p&gt;Sage is very portable -- run it on your thermostat! Here&#39;s the complete list of core virtual machine instructions and their C equivalents:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Instruction&lt;/th&gt; &#xA;   &lt;th&gt;C Equivalent&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;while&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;while (reg) {&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;if&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;if (reg) {&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;else&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;} else {&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;set N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg = N;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;call&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;funs[reg]();&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ret&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;return;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;save&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;*tape_ptr = reg;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg = *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;move N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tape_ptr += N;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;where&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg = tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;deref&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;push(tape_ptr); tape_ptr = *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;refer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tape_ptr = pop();&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;index&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg = (cell*)(reg) + *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg += *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg -= *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mul&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg *= *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;div&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg /= *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg %= *tape_ptr;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gez&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reg = reg &amp;gt;= 0;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The compiler can target this limited &#34;core&#34; instruction set, with an expanded &#34;standard&#34; instruction set for floating point operations and foreign functions. The core instruction set is designed to be as simple as possible for anyone to implement their own backend. &lt;a href=&#34;https://github.com/adam-mcdaniel/sage/raw/main/src/targets/c.rs&#34;&gt;Try to see if you can implement it yourself for your backend of choice!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The instruction set is a &#34;zero address code&#34; IR, unlike the popular &lt;a href=&#34;https://en.wikipedia.org/wiki/Three-address_code&#34;&gt;&#34;three address code&#34;&lt;/a&gt; LLVM IR, but it&#39;s still possible to apply single static assignment to it. This makes the instruction set capable of applying LLVM&#39;s optimizations while being easy to implement.&lt;/p&gt; &#xA;&lt;p&gt;This project is based on some ideas I had while working on &lt;a href=&#34;https://github.com/adam-mcdaniel/harbor&#34;&gt;Harbor&lt;/a&gt; for a hackathon.&lt;/p&gt; &#xA;&lt;h2&gt;How useful is Sage?&lt;/h2&gt; &#xA;&lt;p&gt;Sage is a very young project, and is not ready for production. It&#39;s still possible to write very useful programs in it, though.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adam-mcdaniel/sage-os&#34;&gt;SageOS is an operating system with a userspace written in Sage.&lt;/a&gt; Its graphical shell and presentation app (both written in Sage) use the FFI to draw to the screen, receive input from the mouse and keyboard, interact with the filesystem, and schedule new processes. &lt;a href=&#34;https://github.com/adam-mcdaniel/sage/tree/main/examples/sage-os/shell.sg&#34;&gt;You can look at the shell code here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adam-mcdaniel/sage-os&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/shell1.png&#34; alt=&#34;Shell1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/adam-mcdaniel/sage-os&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/shell2.png&#34; alt=&#34;Shell2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The presentation app parses PPM image files from the filesystem and renders them to the screen. &lt;a href=&#34;https://github.com/adam-mcdaniel/sage/tree/main/examples/sage-os/presentation.sg&#34;&gt;You can look at the presentation code here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adam-mcdaniel/sage-os&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/presentation.png&#34; alt=&#34;Presentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sage&#39;s FFI is simple and can directly call C functions or backend-specific builtins. Check out the &lt;a href=&#34;https://adam-mcdaniel.net/sage&#34;&gt;web-demo&lt;/a&gt;&#39;s FFI example that calls some JavaScript code.&lt;/p&gt; &#xA;&lt;h2&gt;How do I use Sage?&lt;/h2&gt; &#xA;&lt;p&gt;To start using sage, install it with cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install --git https://github.com/adam-mcdaniel/sage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can run a sage file with the &lt;code&gt;sage&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sage examples/frontend/interactive-calculator.sg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also compile a sage file to C with the &lt;code&gt;--target&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sage examples/frontend/interactive-calculator.sg --target c&#xA;$ # Or `-t c` for short&#xA;$ sage examples/frontend/interactive-calculator.sg -tc&#xA;$ gcc out.c -o out&#xA;$ ./out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/adam-mcdaniel/sage/tree/main/examples/web&#34;&gt;code for the web-demo&lt;/a&gt; to see how to use Sage in a web page.&lt;/p&gt; &#xA;&lt;h2&gt;What does Sage look like?&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example of a polymorphic linked list in Sage using Rust-like &lt;code&gt;enum&lt;/code&gt;s! It&#39;s straightforward to implement operations like &lt;code&gt;map&lt;/code&gt; with just a few lines.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/code1.png&#34; width=&#34;66%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Here&#39;s an example of Sage&#39;s structural typing: a &lt;code&gt;Rectangle&lt;/code&gt; can be created by concatenating the fields of a &lt;code&gt;Position&lt;/code&gt; and a &lt;code&gt;Size&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/code2.png&#34; width=&#34;66%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Here&#39;s an example of Sage&#39;s pattern matching: it&#39;s easy to deconstruct a value using &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;if let&lt;/code&gt;, or a simple &lt;code&gt;let&lt;/code&gt; binding. Sage&#39;s &lt;code&gt;match&lt;/code&gt; expressions are very powerful!&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/adam-mcdaniel/sage/main/assets/code3.png&#34; width=&#34;66%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://adam-mcdaniel.net/sage&#34;&gt;web-demo&lt;/a&gt; or the &lt;a href=&#34;https://github.com/adam-mcdaniel/sage/tree/main/examples/frontend&#34;&gt;examples/frontend&lt;/a&gt; folder to see more code examples.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compiler Backends &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; x86 (semi-implemented and unoptimized)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; RISC-V&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ARM&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; LLVM (highly desired!)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; C (fully-implemented but unoptimized)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interpreter (fully-implemented but unoptimized)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Web Backend &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interpreter&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Visual demo like the &lt;a href=&#34;https://adam-mcdaniel.net/harbor&#34;&gt;web-demo&lt;/a&gt; for &lt;a href=&#34;https://github.com/adam-mcdaniel/harbor&#34;&gt;Harbor&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Static variables and constant expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Conditional compilation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Polymorphic functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mutability checks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rust-like &lt;code&gt;enum&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pattern &lt;code&gt;match&lt;/code&gt;ing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Structural typing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Associated constants and methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Recursive polymorphic types&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Iterators and list/vector/array comprehensions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hindley-Milner type inference&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; VSCode extension (syntax highlighting, code completion, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Typeclasses&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;no-std&lt;/code&gt; implementation of compiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A standard library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Type Reflection Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Collections Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Networking Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Filesystem Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Graphics Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Audio Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GUI Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; WebAssembly Module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Foreign Function Interface Module (create backend with &lt;code&gt;.toml&lt;/code&gt; file)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Memory Management Module&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better frontend parser (switch to &lt;a href=&#34;https://crates.io/crates/nom&#34;&gt;Nom&lt;/a&gt;?)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A package manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; AST Macros&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; C frontend (compile C to Sage VM)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Self-hosting implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where can I learn more?&lt;/h2&gt; &#xA;&lt;p&gt;You can read &lt;a href=&#34;https://adam-mcdaniel-blog.github.io/compilers-for-the-future&#34;&gt;my blog post&lt;/a&gt; (~20 minute read) about the programming language to learn more about the implementation!&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/rSGkM4bcdP&#34;&gt;Discord server&lt;/a&gt; to chat about Sage!&lt;/p&gt; &#xA;&lt;h2&gt;How do I contribute?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute, you can open an issue or a pull request. &lt;a href=&#34;https://github.com/adam-mcdaniel/sage/raw/main/src/targets/c.rs&#34;&gt;Adding backends for other architectures is a great way to contribute!&lt;/a&gt; We also need a VSCode syntax highlighting extension!&lt;/p&gt; &#xA;&lt;h2&gt;About the Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://adam-mcdaniel.net&#34;&gt;I&#39;m a 21 year old computer science graduate student&lt;/a&gt; at the &lt;a href=&#34;https://www.youtube.com/watch?v=-8MlEo02u54&#34;&gt;University of Tennessee, Knoxville🍊&lt;/a&gt;. Rust is my favorite language, and &lt;a href=&#34;https://github.com/adam-mcdaniel/oakc&#34;&gt;I&#39;ve&lt;/a&gt; &lt;a href=&#34;https://github.com/adam-mcdaniel/harbor&#34;&gt;written&lt;/a&gt; &lt;a href=&#34;https://github.com/adam-mcdaniel/tsar&#34;&gt;many&lt;/a&gt; &lt;a href=&#34;https://github.com/adam-mcdaniel/free&#34;&gt;other&lt;/a&gt; &lt;a href=&#34;https://github.com/adam-mcdaniel/xasm&#34;&gt;compilers&lt;/a&gt;. This is the last project I started as a teenager, and I&#39;ve been the only author to touch any of the code up to version &lt;code&gt;v0.0.2-alpha&lt;/code&gt; (12/20/2023)! I&#39;m looking for work opportunities for Summer 2024 (after I finish my Masters degree), so if you&#39;re interested in hiring me, please reach out to me at &lt;a href=&#34;mailto:amcdan23@vols.utk.edu&#34;&gt;amcdan23@vols.utk.edu&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
</feed>