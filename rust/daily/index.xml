<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-09T01:35:21Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>boundless-xyz/boundless</title>
    <updated>2025-07-09T01:35:21Z</updated>
    <id>tag:github.com,2025-07-09:/boundless-xyz/boundless</id>
    <link href="https://github.com/boundless-xyz/boundless" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Monorepo for Boundless, the universal ZK protocol&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/Boundless_Logo%20black.png&#34; alt=&#34;Boundless Logo&#34; width=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Boundless&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the core primitives for Boundless.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are a builder looking to build an application on Boundless, you should start with the &lt;a href=&#34;https://github.com/boundless-xyz/boundless-foundry-template&#34;&gt;Boundless Foundry Template&lt;/a&gt; and the &lt;a href=&#34;https://docs.beboundless.xyz/developers/quick-start&#34;&gt;Boundless Builder Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are a prover looking to get started, please refer to the &lt;a href=&#34;https://docs.beboundless.xyz/provers/quick-start&#34;&gt;Boundless Prover Quick Start Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;The repository is structured as a monorepo and contains Rust crates and Solidity contracts. Some key components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Boundless Core Contracts&lt;/strong&gt;: The core smart contracts for Boundless. &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/contracts&#34;&gt;./contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Boundless SDK&lt;/strong&gt;: Rust SDK for interacting with Boundless. &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/boundless-market&#34;&gt;./crates/boundless-market&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Boundless CLI&lt;/strong&gt;: Command-line interface for interacting with Boundless. &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/boundless-cli&#34;&gt;./crates/boundless-cli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Boundless Broker&lt;/strong&gt;: Our sample prover implementation. &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/broker&#34;&gt;./crates/broker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Boundless zkVM Guests&lt;/strong&gt;: The zkVM guests required for generating proofs on Boundless. &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/guest&#34;&gt;./crates/guest&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/assessor&#34;&gt;./crates/assessor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t already have Rust installed, start by &lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;installing Rust and rustup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then download the RISC Zero toolchain and install it using rzup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://risczero.com/install | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next we can install the RISC Zero toolchain by running rzup install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rzup install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can verify the installation was successful by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo risczero --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t already have Forge installed, you can install it using Foundry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://foundry.paradigm.xyz | bash&#xA;foundryup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the Solidity contracts, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;forge build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the Rust crates, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the documentation in the &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/documentation&#34;&gt;documentation&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;To build it and serve it locally, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bun install&#xA;bun run docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open your browser and navigate to &lt;code&gt;http://localhost:5173&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Audits&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/boundless-xyz/boundless-security&#34;&gt;https://github.com/boundless-xyz/boundless-security&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/boundless-xyz/boundless/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gdt050579/AppCUI-rs</title>
    <updated>2025-07-09T01:35:21Z</updated>
    <id>tag:github.com,2025-07-09:/gdt050579/AppCUI-rs</id>
    <link href="https://github.com/gdt050579/AppCUI-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AppCUI ‚Äì A feature-rich and cross-platform TUI/CUI framework for Rust, enabling modern terminal-based applications on Windows, Linux, and macOS. Includes built-in UI components like buttons, menus, list views, tree views, checkboxes, and more. Perfect for building fast and interactive CLI tools and text-based interfaces&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AppCUI-rs&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/docs/chapter-1/img/logo.png&#34; align=&#34;center&#34;&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚Øà ùóîùóΩùóΩùóñùó®ùóú-ùóøùòÄ üñ≥&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/gdt050579/AppCUI-rs/actions/workflows/windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Build Status&#34;&gt; &lt;img src=&#34;https://github.com/gdt050579/AppCUI-rs/actions/workflows/linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Build Status&#34;&gt; &lt;img src=&#34;https://github.com/gdt050579/AppCUI-rs/actions/workflows/macos.yml/badge.svg?sanitize=true&#34; alt=&#34;MacOS Build Status&#34;&gt; &lt;img src=&#34;https://gist.githubusercontent.com/gdt050579/f7d7e7d56b2725a3b33a265e8a9d8e9c/raw/coverage.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/gdt050579/AppCUI-rs&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://crates.io/crates/appcui&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/appcui.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/appcui&#34;&gt;&lt;img src=&#34;https://docs.rs/appcui/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AppCUI is a simple, easy-to-use and cross-platform library for creating text-based user interfaces in Rust:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gdt050579.github.io/AppCUI-rs/&#34;&gt;Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/appcui&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; multiple out-of-the-box controls (buttons, labels, text boxes, check boxes, radio buttons, list views, tree views, combo boxes, date/time pickers, color pickers, etc.).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; menus and toolbars&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; multi-platform support (Windows via API, Linux via ncurses, MacOS via termios)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; multi-threading support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; timers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; mouse support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; clipboard support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; color themes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; support for Unicode characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; predefined dialogs (message box, input box, color picker, save &amp;amp; open dialogs, folder navigator, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; true colors support (24 bits per pixel) for terminals that supports it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì∏ Screenshots&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/gdt050579/AppCUI-rs/raw/main/docs/chapter-1/img/appcui-rs-demo.gif&#34; align=&#34;center&#34;&gt; &#xA;&lt;h2&gt;üñ•Ô∏è Backends&lt;/h2&gt; &#xA;&lt;p&gt;AppCUI supports various backends based on the operating system it is being used for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows Console&lt;/strong&gt; - based on Win32 low level API, design for clasical windows console&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows VT&lt;/strong&gt; - based on ANSI sequances, designed for modern windows virtual terminals&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NCurses&lt;/strong&gt; - based on NCurses API for linux envinronments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Termios&lt;/strong&gt; - based on ANSI sequances and low level APIs for MAC OSX&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Terminal&lt;/strong&gt; - designed for Web implementation (based on webgl)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CrossTerm&lt;/strong&gt; - based on the &lt;code&gt;crossterm&lt;/code&gt; crate, but enabled via a feature flag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More on the supported backends can be found &lt;a href=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/docs/chapter-2/backends.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;appcui = &#34;*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create a new Rust project and add the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use appcui::prelude::*;&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), appcui::system::Error&amp;gt; {&#xA;    let mut app = App::new().build()?;&#xA;    let mut win = window!(&#34;Test,d:c,w:30,h:9&#34;);&#xA;    win.add(label!(&#34;&#39;Hello World !&#39;,d:c,w:13,h:1&#34;));&#xA;    app.add_window(win);&#xA;    app.run();&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the project with &lt;code&gt;cargo run&lt;/code&gt;. You should see a window with the title &lt;code&gt;Test&lt;/code&gt; and the text &lt;code&gt;Hello World !&lt;/code&gt; in the center.&lt;/p&gt; &#xA;&lt;h2&gt;üß™ Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üåç &lt;a href=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/examples/hello_world/&#34;&gt;Hello World&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üßÆ &lt;a href=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/examples/calculator/&#34;&gt;Calculator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üé® &lt;a href=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/examples/colorpicker/&#34;&gt;Color Picker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üìã &lt;a href=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/examples/menus/&#34;&gt;Menus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/examples&#34;&gt;examples&lt;/a&gt; folder for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;üõ†Ô∏è A more complex example&lt;/h2&gt; &#xA;&lt;p&gt;Am example that creates a window with a button that when pressed increases a counter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use appcui::prelude::*;&#xA;&#xA;// Create a window that handles button events and has a counter&#xA;#[Window(events = ButtonEvents)]&#xA;struct CounterWindow {&#xA;    counter: i32&#xA;}&#xA;&#xA;impl CounterWindow {&#xA;    fn new() -&amp;gt; Self {&#xA;        let mut w = Self {&#xA;            // set up the window title and position&#xA;            base: window!(&#34;&#39;Counter window&#39;,d:c,w:30,h:5&#34;),&#xA;            // initial counter is 1&#xA;            counter: 1            &#xA;        };&#xA;        // add a single button with the caption &#34;1&#34; (like the counter)&#xA;        w.add(button!(&#34;&#39;1&#39;,d:b,w:20&#34;));&#xA;        w&#xA;    }&#xA;}&#xA;impl ButtonEvents for CounterWindow {&#xA;    // When the button is pressed, this function will be called&#xA;    // with the handle of the button that was pressed&#xA;    // Since we only have one button, we don&#39;t need to store its handle &#xA;    // in the struct, as we will receive the handle via the on_pressed method&#xA;    fn on_pressed(&amp;amp;mut self, handle: Handle&amp;lt;Button&amp;gt;) -&amp;gt; EventProcessStatus {&#xA;        // increase the counter&#xA;        self.counter += 1;&#xA;        // create a text that containe the new counter&#xA;        let text = format!(&#34;{}&#34;,self.counter);&#xA;        // aquire a mutable reference to the button using its handle&#xA;        if let Some(button) = self.control_mut(handle) {&#xA;            // set the caption of the button to th new text&#xA;            button.set_caption(&amp;amp;text);&#xA;        }&#xA;        // Tell the AppCUI framework that we have processed this event&#xA;        // This allows AppCUI to repaint the button&#xA;        EventProcessStatus::Processed&#xA;    }&#xA;}&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), appcui::system::Error&amp;gt; {&#xA;    // create a new application&#xA;    let mut a = App::new().build()?;&#xA;    // add a new window (of type CounterWindow) to the application&#xA;    a.add_window(CounterWindow::new());&#xA;    // Run AppCUI framework (this wil start the window loop and messaage passing)&#xA;    a.run();&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üõ£Ô∏è Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic set of widgets and support for Windows, Linux and MacOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WebGL support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; OpenGL / SDL / Vulkan support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; TextArea support for code highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions, issues, and feature requests are welcome!&lt;br&gt; Check out &lt;a href=&#34;https://raw.githubusercontent.com/gdt050579/AppCUI-rs/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Join the discussion in &lt;a href=&#34;https://github.com/gdt050579/AppCUI-rs/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>