<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-14T01:37:06Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sxyazi/yazi</title>
    <updated>2023-09-14T01:37:06Z</updated>
    <id>tag:github.com,2023-09-14:/sxyazi/yazi</id>
    <link href="https://github.com/sxyazi/yazi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö°Ô∏è Blazing fast terminal file manager written in Rust, based on async I/O.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Yazi - ‚ö°Ô∏è Blazing Fast Terminal File Manager&lt;/h2&gt; &#xA;&lt;p&gt;Yazi (&#34;duck&#34; in Chinese) is a terminal file manager written in Rust, based on non-blocking async I/O. It aims to provide an efficient, user-friendly, and customizable file management experience.&lt;/p&gt; &#xA;&lt;p&gt;üí´ A new article explaining its internal workings: &lt;a href=&#34;https://github.com/sxyazi/yazi/issues/143&#34;&gt;Why Yazi Fast?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üöÄ &lt;strong&gt;Full Asynchronous Support&lt;/strong&gt;: All I/O operations are asynchronous, CPU tasks are spread across multiple threads, making the most of available resources.&lt;/li&gt; &#xA; &lt;li&gt;üí™ &lt;strong&gt;Powerful Async Task Scheduling and Management&lt;/strong&gt;: Provides real-time progress updates, task cancellation, and internal task priority assignment.&lt;/li&gt; &#xA; &lt;li&gt;üñºÔ∏è &lt;strong&gt;Built-in Support for Multiple Image Protocols&lt;/strong&gt;: Also integrated with √úberzug++, covering almost all terminals.&lt;/li&gt; &#xA; &lt;li&gt;üåü &lt;strong&gt;Built-in Code Highlighting and Image Encoding&lt;/strong&gt;: Combined with the pre-caching mechanism, greatly accelerates image and normal file loading.&lt;/li&gt; &#xA; &lt;li&gt;üß∞ Integration with fd, rg, fzf, zoxide&lt;/li&gt; &#xA; &lt;li&gt;üí´ Vim-like Input component, and Select component&lt;/li&gt; &#xA; &lt;li&gt;üè∑Ô∏è Multi-Tab Support, Scrollable Preview (for videos, PDFs, archives, directories, code, etc.)&lt;/li&gt; &#xA; &lt;li&gt;üîÑ Batch Renaming, Visual Mode, File Chooser&lt;/li&gt; &#xA; &lt;li&gt;üé® Theme System, Custom Layouts, Trash Bin, CSI u&lt;/li&gt; &#xA; &lt;li&gt;... and more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sxyazi/yazi/assets/17523360/d5d8427b-e0f3-4552-ae1a-553ba1a7d57e&#34;&gt;https://github.com/sxyazi/yazi/assets/17523360/d5d8427b-e0f3-4552-ae1a-553ba1a7d57e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è Note: Yazi is currently in active development and may be unstable. The API is subject to change without prior notice.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nerd-fonts (&lt;a href=&#34;https://github.com/sxyazi/yazi/wiki/I-don&#39;t-like-nerd%E2%80%90fonts!&#34;&gt;&lt;em&gt;optional&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ffmpegthumbnailer (&lt;em&gt;optional&lt;/em&gt;, for video thumbnails)&lt;/li&gt; &#xA; &lt;li&gt;unar (&lt;em&gt;optional&lt;/em&gt;, for archive preview)&lt;/li&gt; &#xA; &lt;li&gt;jq (&lt;em&gt;optional&lt;/em&gt;, for JSON preview)&lt;/li&gt; &#xA; &lt;li&gt;poppler (&lt;em&gt;optional&lt;/em&gt;, for PDF preview)&lt;/li&gt; &#xA; &lt;li&gt;fd (&lt;em&gt;optional&lt;/em&gt;, for file searching)&lt;/li&gt; &#xA; &lt;li&gt;rg (&lt;em&gt;optional&lt;/em&gt;, for file content searching)&lt;/li&gt; &#xA; &lt;li&gt;fzf (&lt;em&gt;optional&lt;/em&gt;, for directory jumping)&lt;/li&gt; &#xA; &lt;li&gt;zoxide (&lt;em&gt;optional&lt;/em&gt;, for directory jumping)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Arch Linux&lt;/summary&gt; &#xA; &lt;p&gt;Install with paru or your favorite AUR helper:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;paru -S yazi ffmpegthumbnailer unarchiver jq poppler fd ripgrep fzf zoxide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or, you can replace &lt;code&gt;yazi&lt;/code&gt; with &lt;code&gt;yazi-bin&lt;/code&gt; package if you want pre-built binary instead of compiling by yourself.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;macOS&lt;/summary&gt; &#xA; &lt;p&gt;Install Yazi and its dependencies with Homebrew:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install yazi ffmpegthumbnailer unar jq poppler fd ripgrep fzf zoxide&#xA;brew tap homebrew/cask-fonts &amp;amp;&amp;amp; brew install --cask font-symbols-only-nerd-font&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you prefer to use the most recent code, use &lt;code&gt;--HEAD&lt;/code&gt; flag:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install yazi --HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or you can install Yazi via cargo:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --git https://github.com/sxyazi/yazi.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Nix&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;a href=&#34;https://search.nixos.org/packages?channel=unstable&amp;amp;show=yazi&#34;&gt;Nix package of Yazi&lt;/a&gt; is available. Nix users can install Yazi via:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On NixOS:&#xA;nix-env -iA nixos.yazi&#xA;&#xA;# On Non NixOS:&#xA;nix-env -iA nixpkgs.yazi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or add the following to your configuration:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# configuration.nix&#xA;environment.systemPackages = with pkgs; [&#xA;&#x9;yazi&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also manage Yazi&#39;s configuration using the &lt;a href=&#34;https://nix-community.github.io/home-manager/options.html#opt-programs.yazi.enable&#34;&gt;home-manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Windows&lt;/summary&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://github.com/sxyazi/yazi/wiki/Windows-Installation-Guide&#34;&gt;Windows Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Build from source&lt;/summary&gt; &#xA; &lt;p&gt;Execute the following commands to clone the project and build Yazi:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sxyazi/yazi.git&#xA;cd yazi&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then, you can run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./target/release/yazi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yazi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a wrapper of yazi, that provides the ability to change the current working directory when yazi exiting, feel free to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;function ya() {&#xA;&#x9;tmp=&#34;$(mktemp -t &#34;yazi-cwd.XXXXX&#34;)&#34;&#xA;&#x9;yazi --cwd-file=&#34;$tmp&#34;&#xA;&#x9;if cwd=&#34;$(cat -- &#34;$tmp&#34;)&#34; &amp;amp;&amp;amp; [ -n &#34;$cwd&#34; ] &amp;amp;&amp;amp; [ &#34;$cwd&#34; != &#34;$PWD&#34; ]; then&#xA;&#x9;&#x9;cd -- &#34;$cwd&#34;&#xA;&#x9;fi&#xA;&#x9;rm -f -- &#34;$tmp&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use your own config, copy the &lt;a href=&#34;https://raw.githubusercontent.com/sxyazi/yazi/main/config/preset&#34;&gt;config folder&lt;/a&gt; to &lt;code&gt;~/.config/yazi&lt;/code&gt;, and modify it as you like.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sxyazi/yazi/main/config/docs&#34;&gt;The documentation of all available options&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord Server (English mainly): &lt;a href=&#34;https://discord.gg/qfADduSdJu&#34;&gt;https://discord.gg/qfADduSdJu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Telegram Group (Chinese mainly): &lt;a href=&#34;https://t.me/yazi_rs&#34;&gt;https://t.me/yazi_rs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Image Preview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kitty&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol/&#34;&gt;Terminal graphics protocol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WezTerm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol/&#34;&gt;Terminal graphics protocol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Konsole&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol/&#34;&gt;Terminal graphics protocol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iTerm2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iterm2.com/documentation-images.html&#34;&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mintty (Git Bash)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iterm2.com/documentation-images.html&#34;&gt;Inline images protocol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hyper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.vt100.net/docs/vt3xx-gp/chapter14.html&#34;&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;foot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.vt100.net/docs/vt3xx-gp/chapter14.html&#34;&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Black Box&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.vt100.net/docs/vt3xx-gp/chapter14.html&#34;&gt;Sixel graphics format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Built-in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X11 / Wayland&lt;/td&gt; &#xA;   &lt;td&gt;Window system protocol&lt;/td&gt; &#xA;   &lt;td&gt;‚òëÔ∏è √úberzug++ required&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fallback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hpjansson.org/chafa/&#34;&gt;Chafa&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚òëÔ∏è √úberzug++ required&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Yazi automatically selects the appropriate preview method for you, based on the priority from top to bottom. That&#39;s relying on the &lt;code&gt;$TERM&lt;/code&gt;, &lt;code&gt;$TERM_PROGRAM&lt;/code&gt;, and &lt;code&gt;$XDG_SESSION_TYPE&lt;/code&gt; variables, make sure you don&#39;t overwrite them by mistake!&lt;/p&gt; &#xA;&lt;p&gt;For instance, if your terminal is Alacritty, which doesn&#39;t support displaying images itself, but you are running on an X11/Wayland environment, it will automatically use the &#34;Window system protocol&#34; to display images -- this requires you to have &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;√úberzug++&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;Here is a guide for tmux users: &lt;a href=&#34;https://github.com/sxyazi/yazi/wiki/Image-preview-within-tmux&#34;&gt;Image preview within tmux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sxyazi/yazi/issues/51&#34;&gt;Feature requests&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Yazi is MIT licensed.&lt;/p&gt;</summary>
  </entry>
</feed>