<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-16T01:42:33Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>orhun/halp</title>
    <updated>2023-03-16T01:42:33Z</updated>
    <id>tag:github.com,2023-03-16:/orhun/halp</id>
    <link href="https://github.com/orhun/halp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI tool to get help with CLI tools üêô&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://lospec.com/gallery/orhun/octopus&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/orhun/halp/main/assets/halp-logo.png&#34; width=&#34;400&#34;&gt; &lt;/a&gt; &#xA; &lt;h4&gt;A CLI tool to get help with CLI tools üêô&lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/orhun/halp/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/orhun/halp?style=flat&amp;amp;labelColor=342a5e&amp;amp;color=684d81&amp;amp;logo=GitHub&amp;amp;logoColor=white&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/halp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/halp?style=flat&amp;amp;labelColor=342a5e&amp;amp;color=684d81&amp;amp;logo=Rust&amp;amp;logoColor=white&#34; alt=&#34;Crate Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/orhun/halp&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/orhun/halp?style=flat&amp;amp;labelColor=342a5e&amp;amp;color=684d81&amp;amp;logo=Codecov&amp;amp;logoColor=white&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/orhun/halp/actions?query=workflow%3A%22Continuous+Integration%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/orhun/halp/ci.yml?branch=main&amp;amp;style=flat&amp;amp;labelColor=1c1d42&amp;amp;color=4f396a&amp;amp;logo=GitHub%20Actions&amp;amp;logoColor=white&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/orhun/halp/actions?query=workflow%3A%22Continuous+Deployment%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/orhun/halp/cd.yml?style=flat&amp;amp;labelColor=1c1d42&amp;amp;color=4f396a&amp;amp;logo=GitHub%20Actions&amp;amp;logoColor=white&amp;amp;label=deploy&#34; alt=&#34;Continuous Deployment&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/orhunp/halp&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/orhun/halp/docker.yml?style=flat&amp;amp;labelColor=1c1d42&amp;amp;color=4f396a&amp;amp;label=docker&amp;amp;logo=Docker&amp;amp;logoColor=white&#34; alt=&#34;Docker Builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/halp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/halp?style=flat&amp;amp;labelColor=1c1d42&amp;amp;color=4f396a&amp;amp;logo=Rust&amp;amp;logoColor=white&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/orhun/halp/main/assets/halp-demo.gif&#34; alt=&#34;halp demo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;code&gt;halp&lt;/code&gt; aims to help find the &lt;strong&gt;correct arguments&lt;/strong&gt; for command-line tools by checking the predefined list of commonly used options/flags. Additionally, it provides a prompt for quick access to the &lt;strong&gt;manual page&lt;/strong&gt; or &lt;strong&gt;cheat sheet&lt;/strong&gt; of the given command.&lt;/p&gt; &#xA;&lt;p&gt;If you deal with command-line tools often, it might take some time to figure out how to get help or check the version of a particular command (especially when shell completions are not available). In that case, you might try the most-known flags such as &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;-v&lt;/code&gt; but unfortunately not all the command-line tools follow these conventions (either due to conflicts with other flags or they just use another form). Instead of &lt;em&gt;brute-forcing&lt;/em&gt; manually into getting help, you can run &lt;code&gt;halp &amp;lt;command&amp;gt;&lt;/code&gt; and it will check the following arguments for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for &lt;strong&gt;help&lt;/strong&gt;: &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;help&lt;/code&gt;, &lt;code&gt;-H&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;for &lt;strong&gt;version info&lt;/strong&gt;: &lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;-V&lt;/code&gt;, &lt;code&gt;--version&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If one of these arguments succeeds (with exit code 0), it prints the output and exits. This way, you can get informed about the version and help in one single command. You can also customize this list with a configuration file or provide a list of arguments via command-line arguments.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, if you &lt;em&gt;really&lt;/em&gt; need help, you can use the &lt;code&gt;plz&lt;/code&gt; subcommand which will prompt a selection for:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;show the &lt;strong&gt;man page&lt;/strong&gt; (runs &lt;a href=&#34;https://man7.org/linux/man-pages/man1/man.1.html&#34;&gt;&lt;code&gt;man(1)&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;show the &lt;strong&gt;cheat sheet&lt;/strong&gt; (via &lt;a href=&#34;http://cheat.sh&#34;&gt;&lt;code&gt;cheat.sh&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;!-- vim-markdown-toc GFM --&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#cargo&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#arch-linux&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#docker&#34;&gt;Docker&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#binary-releases&#34;&gt;Binary releases&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#usage-1&#34;&gt;Usage&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#plz&#34;&gt;&lt;code&gt;plz&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#check-help-and-version-default&#34;&gt;Check &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; (default)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#check-a-custom-argument&#34;&gt;Check a custom argument&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#disable-defaults&#34;&gt;Disable defaults&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#verbose-logging&#34;&gt;Verbose logging&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#get-additional-help-via-plz&#34;&gt;Get additional help (via &lt;code&gt;plz&lt;/code&gt;)&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#custom-pager&#34;&gt;Custom pager&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#funding&#34;&gt;Funding&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;!-- vim-markdown-toc --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Have you ever experienced this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cli_tool -v&#xA;unknown flag -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cli_tool -V&#xA;unknown flag -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cli_tool -h&#xA;unknown flag -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ asdjw1jwhdajh1idojad # frustration&#xA;bash: asdjw1jwhdajh1idojad: command not found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cli_tool --help # f*cking finally!&#xA;Some CLI Tool Version 1.42.69&#xA;Usage:&#xA;  cli_tool &amp;lt;flags&amp;gt; &amp;lt;args&amp;gt; [--parameter1 value1 --parameter2 value2 ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whereas with &lt;code&gt;halp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ halp cli_tool&#xA;&#xA;(¬∞„É≠¬∞)  checking &#39;cli_tool -v&#39;&#xA;(√óÔπè√ó)      fail &#39;-v&#39; argument not found.&#xA;(¬∞„É≠¬∞)  checking &#39;cli_tool -V&#39;&#xA;(√óÔπè√ó)      fail &#39;-V&#39; argument not found.&#xA;(¬∞„É≠¬∞)  checking &#39;cli_tool -h&#39;&#xA;(√óÔπè√ó)      fail &#39;-h&#39; argument not found.&#xA;(¬∞„É≠¬∞)  checking &#39;cli_tool --help&#39;&#xA;\(^„ÉÆ^)/ success &#39;--help&#39; argument found!&#xA;&#xA;Some CLI Tool Version 1.42.69&#xA;Usage:&#xA;  cli_tool &amp;lt;flags&amp;gt; &amp;lt;args&amp;gt; [--parameter1 value1 --parameter2 value2 ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packaging status&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://repology.org/project/halp/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/halp.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;halp&lt;/code&gt; can be installed from &lt;a href=&#34;https://crates.io/crates/halp&#34;&gt;crates.io&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install halp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The minimum supported Rust version is &lt;code&gt;1.64.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;halp&lt;/code&gt; can be installed from the &lt;a href=&#34;https://archlinux.org/packages/community/x86_64/halp/&#34;&gt;community repository&lt;/a&gt; using &lt;a href=&#34;https://wiki.archlinux.org/title/Pacman&#34;&gt;pacman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S halp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can install the available &lt;a href=&#34;https://aur.archlinux.org/packages/?O=0&amp;amp;SeB=b&amp;amp;K=halp&amp;amp;outdated=&amp;amp;SB=n&amp;amp;SO=a&amp;amp;PP=50&amp;amp;do_Search=Go&#34;&gt;AUR packages&lt;/a&gt; using an &lt;a href=&#34;https://wiki.archlinux.org/index.php/AUR_helpers&#34;&gt;AUR helper&lt;/a&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S halp-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can clone the AUR package and then build it with &lt;a href=&#34;https://wiki.archlinux.org/index.php/Makepkg&#34;&gt;makepkg&lt;/a&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://aur.archlinux.org/halp-git.git &amp;amp;&amp;amp; cd halp-git &amp;amp;&amp;amp; makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;h4&gt;Images&lt;/h4&gt; &#xA;&lt;p&gt;Docker builds are &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/.github/workflows/docker.yml&#34;&gt;automated&lt;/a&gt; and images are available in the following registries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/orhunp/halp&#34;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orhun/halp/pkgs/container/halp&#34;&gt;GitHub Container Registry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;The following commands can be used to get help for a binary inside the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -it &#34;orhunp/halp:${TAG:-latest}&#34; whoami&#xA;docker run --rm -it &#34;orhunp/halp:${TAG:-latest}&#34; plz whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can provide a custom binary as follows (please note that you might get shared library errors):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -v &#34;bin:/app/bin:rw&#34; --rm -it &#34;orhunp/halp:${TAG:-latest}&#34; -v ./bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;Custom Docker images can be built from the &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t halp .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary releases&lt;/h3&gt; &#xA;&lt;p&gt;See the available binaries for different targets from the &lt;a href=&#34;https://github.com/orhun/halp/releases&#34;&gt;releases page&lt;/a&gt;. They are automated via &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/.github/workflows/cd.yml&#34;&gt;Continuous Deployment&lt;/a&gt; workflow&lt;/p&gt; &#xA;&lt;p&gt;Release tarballs are signed with the following PGP key: &lt;a href=&#34;https://keyserver.ubuntu.com/pks/lookup?search=0xFB41AE0358378256&amp;amp;op=vindex&#34;&gt;0xFB41AE0358378256&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/orhun/halp &amp;amp;&amp;amp; cd halp/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;CARGO_TARGET_DIR=target cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Binary will be located at &lt;code&gt;target/release/halp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;halp [OPTIONS] &amp;lt;CMD&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Options:&#xA;      --check &amp;lt;ARG&amp;gt;    Sets the argument to check&#xA;      --no-version     Disable checking the version information&#xA;      --no-help        Disable checking the help information&#xA;  -c, --config &amp;lt;PATH&amp;gt;  Sets the configuration file [env: HALP_CONFIG=]&#xA;  -v, --verbose        Enables verbose logging&#xA;  -h, --help           Print help&#xA;  -V, --version        Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;plz&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;halp [OPTIONS] plz &amp;lt;CMD&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Options:&#xA;  -m, --man-cmd &amp;lt;MAN_CMD&amp;gt;  Sets the manual page command to run [default: man]&#xA;  -p, --pager &amp;lt;PAGER&amp;gt;      Sets the pager to use [default: &#34;less -R&#34;]&#xA;      --no-pager           Disables the pager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h4&gt;Check &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; (default)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/orhun/halp/main/assets/halp-example1.gif&#34; alt=&#34;halp example I&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Check a custom argument&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp --check &#34;\--silent&#34; zps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(You can escape &lt;code&gt;-&lt;/code&gt; with using &lt;code&gt;\-&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;You can also provide multiple arguments as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp --check &#34;help&#34; --check &#34;test&#34; menyoki&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable defaults&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp --no-version sha512sum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp --no-help sha512sum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Verbose logging&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp --verbose git-cliff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in &lt;code&gt;stderr&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt; being printed if there was an error. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(¬∞„É≠¬∞)  checking &#39;git-cliff -v&#39;&#xA;(√óÔπè√ó)      fail &#39;-v&#39; argument not found.&#xA;(o_O)      debug&#xA;stdout:&#xA; WARN  git_cliff &amp;gt; &#34;cliff.toml&#34; is not found, using the default configuration.&#xA; ERROR git_cliff &amp;gt; Git error: `could not find repository from &#39;.&#39;; class=Repository (6); code=NotFound (-3)`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get additional help (via &lt;code&gt;plz&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp plz vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/orhun/halp/main/assets/halp-example2.gif&#34; alt=&#34;halp example II&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Custom pager&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp plz --pager bat vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable the pager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;halp plz --no-pager bat vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;halp&lt;/code&gt; can be configured with a configuration file that uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/INI_file&#34;&gt;TOML&lt;/a&gt; format. It can be specified via &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;HALP_CONFIG&lt;/code&gt; environment variable. It can also be placed in one of the following global locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;halp.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;halp/halp.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;halp/config&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; depends on the platform as shown in the following table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; or &lt;code&gt;$HOME&lt;/code&gt;/.config&lt;/td&gt; &#xA;   &lt;td&gt;/home/orhun/.config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME&lt;/code&gt;/Library/Application Support&lt;/td&gt; &#xA;   &lt;td&gt;/Users/Orhun/Library/Application Support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{FOLDERID_RoamingAppData}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C:\Users\Orhun\AppData\Roaming&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/config/halp.toml&#34;&gt;halp.toml&lt;/a&gt; for the default configuration values.&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;If you find &lt;code&gt;halp&lt;/code&gt; and/or other projects on my &lt;a href=&#34;https://github.com/orhun/&#34;&gt;GitHub profile&lt;/a&gt; useful, consider supporting me on &lt;a href=&#34;https://github.com/sponsors/orhun&#34;&gt;GitHub Sponsors&lt;/a&gt; or &lt;a href=&#34;https://www.patreon.com/join/orhunp&#34;&gt;becoming a patron&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/orhun&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/orhun?style=flat&amp;amp;logo=GitHub&amp;amp;labelColor=342a5e&amp;amp;color=684d81&amp;amp;logoColor=white&#34; alt=&#34;Support me on GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/join/orhunp&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dorhunp%26type%3Dpatrons&amp;amp;style=flat&amp;amp;logo=Patreon&amp;amp;labelColor=342a5e&amp;amp;color=684d81&amp;amp;logoColor=white&#34; alt=&#34;Support me on Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/join/orhunp&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dorhunp%26type%3Dpledges&amp;amp;style=flat&amp;amp;logo=Patreon&amp;amp;labelColor=342a5e&amp;amp;color=684d81&amp;amp;logoColor=white&amp;amp;label=&#34; alt=&#34;Support me on Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; and please follow the &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; in all your interactions with the project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/LICENSE-APACHE&#34;&gt;Apache License Version 2.0&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/orhun/halp/main/LICENSE-MIT&#34;&gt;The MIT License&lt;/a&gt; at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright ¬© 2023, &lt;a href=&#34;mailto:orhunparmaksiz@gmail.com&#34;&gt;Orhun Parmaksƒ±z&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>krisnova/q</title>
    <updated>2023-03-16T01:42:33Z</updated>
    <id>tag:github.com,2023-03-16:/krisnova/q</id>
    <link href="https://github.com/krisnova/q" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Surface Linux networking metrics with eBPF&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;q&lt;/h1&gt; &#xA;&lt;p&gt;A smol ü§è static rust binary which can be used to surface kernel queueing metrics with eBPF kprobes.&lt;/p&gt; &#xA;&lt;p&gt;The easiest metrics to surface are anything found in the &lt;a href=&#34;https://www.kernel.org/doc/html/v6.2/networking/kapi.html#c.sock&#34;&gt;sock&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;The following &#39;accept queues&#39; are currently instrumented.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TCP/IPv4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TCP/IPv6&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; UDP (Connectionless)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Unix domain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Compile the eBPF probe, embed the probe into the binary, compile and install the static binary&#xA;make ebpf install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Observing The Linux Accept Queue&lt;/h3&gt; &#xA;&lt;p&gt;Execute the &lt;code&gt;dysfunctional-listen-not-accept-tcp-exec&lt;/code&gt; server and send curl requests to &lt;code&gt;localhost:9064&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notice that the requests will accumulate in the accept queue even once the client has been killed. The only way to &#34;flush&#34; the queue is to terminate the server. I am currently unsure if Linux provides another way to clean up these orphaned connections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[2023-03-13T04:50:35Z INFO  q] Success! Loaded eBPF probe into kernel&#xA;[2023-03-13T04:50:35Z INFO  q]  --&amp;gt; Attached: kprobe__tcp_conn_request&#xA;[2023-03-13T04:50:35Z INFO  q]  --&amp;gt; Attached: kprobe__inet_csk_accept&#xA;[2023-03-13T04:50:35Z INFO  q] Waiting for Ctrl-C...&#xA;[2023-03-13T04:50:44Z INFO  qprobe] AF_INET &#39;accept queue&#39; qlen: 8, qmax: 4096, src address: 0.0.0.0, dest address: 0.0.0.0&#xA;[2023-03-13T04:50:48Z INFO  qprobe] AF_INET &#39;accept queue&#39; qlen: 9, qmax: 4096, src address: 0.0.0.0, dest address: 0.0.0.0&#xA;[2023-03-13T04:50:50Z INFO  qprobe] AF_INET &#39;accept queue&#39; qlen: 10, qmax: 4096, src address: 0.0.0.0, dest address: 0.0.0.0&#xA;[2023-03-13T04:50:51Z INFO  qprobe] AF_INET &#39;accept queue&#39; qlen: 11, qmax: 4096, src address: 0.0.0.0, dest address: 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>