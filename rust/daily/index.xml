<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-24T01:34:21Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hyperlane-xyz/hyperlane-monorepo</title>
    <updated>2024-10-24T01:34:21Z</updated>
    <id>tag:github.com,2024-10-24:/hyperlane-xyz/hyperlane-monorepo</id>
    <link href="https://github.com/hyperlane-xyz/hyperlane-monorepo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The home for Hyperlane core contracts, sdk packages, and other infrastructure&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hyperlane&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hyperlane-xyz/hyperlane-monorepo/actions&#34;&gt;&lt;img src=&#34;https://github.com/PaulRBerg/prb-math/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/hyperlane-xyz/hyperlane-monorepo&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/hyperlane-xyz/hyperlane-monorepo/branch/main/graph/badge.svg?token=APC7C3Q2GS&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://getfoundry.sh/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Built%20with-Foundry-FFDB1C.svg?sanitize=true&#34; alt=&#34;Foundry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Note this is the branch for Hyperlane v3.&lt;/p&gt; &#xA;&lt;p&gt;V2 is deprecated in favor of V3. The code for V2 can be found in the &lt;a href=&#34;https://github.com/hyperlane-xyz/hyperlane-monorepo/tree/v2&#34;&gt;v2&lt;/a&gt; branch. For V1 code, refer to the &lt;a href=&#34;https://github.com/hyperlane-xyz/hyperlane-monorepo/tree/v1&#34;&gt;v1&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Hyperlane is an interchain messaging protocol that allows applications to communicate between blockchains.&lt;/p&gt; &#xA;&lt;p&gt;Developers can use Hyperlane to share state between blockchains, allowing them to build interchain applications that live natively across multiple chains.&lt;/p&gt; &#xA;&lt;p&gt;To read more about interchain applications, how the protocol works, and how to integrate with Hyperlane, please see the &lt;a href=&#34;https://docs.hyperlane.xyz&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Working on Hyperlane&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;Install &lt;code&gt;jq&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You need &lt;code&gt;jq&lt;/code&gt; installed on your machine. You can download it from &lt;a href=&#34;https://jqlang.github.io/jq/download/&#34;&gt;official page&lt;/a&gt; or use a package manager of your choice.&lt;/p&gt; &#xA;&lt;h4&gt;Foundry&lt;/h4&gt; &#xA;&lt;p&gt;First ensure you have Foundry installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;Run the following to install &lt;code&gt;foundryup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L https://foundry.paradigm.xyz | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;foundryup&lt;/code&gt; to install &lt;code&gt;forge&lt;/code&gt;, &lt;code&gt;cast&lt;/code&gt;, &lt;code&gt;anvil&lt;/code&gt; and &lt;code&gt;chisel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foundryup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://book.getfoundry.sh/getting-started/installation&#34;&gt;Foundry Book&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Node&lt;/h4&gt; &#xA;&lt;p&gt;This repository targets v20 of node. We recommend using &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; to manage your node version.&lt;/p&gt; &#xA;&lt;p&gt;To install nvm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install version 20&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install 20&#xA;nvm use 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should change versions automatically with the &lt;code&gt;.nvmrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Workspaces&lt;/h3&gt; &#xA;&lt;p&gt;This monorepo uses &lt;a href=&#34;https://yarnpkg.com/features/workspaces&#34;&gt;Yarn Workspaces&lt;/a&gt;. Installing dependencies, building, testing, and running prettier for all packages can be done from the root directory of the repository.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;, you can launch the &lt;a href=&#34;https://code.visualstudio.com/docs/editor/multi-root-workspaces&#34;&gt;multi-root workspace&lt;/a&gt; with &lt;code&gt;code mono.code-workspace&lt;/code&gt;, install the recommended workspace extensions, and use the editor settings.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The typescript tooling uses &lt;a href=&#34;https://github.com/pinojs/pino&#34;&gt;Pino&lt;/a&gt; based logging, which outputs structured JSON logs by default. The verbosity level and style can be configured with environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;LOG_LEVEL=DEBUG|INFO|WARN|ERROR|OFF&#xA;LOG_FORMAT=PRETTY|JSON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/hyperlane-xyz/hyperlane-monorepo/main/rust/README.md&#34;&gt;&lt;code&gt;rust/README.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Release Agents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tag the commit with the current date in the format &lt;code&gt;agents-yyyy-mm-dd&lt;/code&gt;; e.g. &lt;code&gt;agents-2023-03-28&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperlane-xyz/hyperlane-monorepo/releases/new&#34;&gt;Create a Github Release&lt;/a&gt; with a changelog against the previous version titled &lt;code&gt;Agents MMMM DD, YYYY&lt;/code&gt;, e.g. &lt;code&gt;Agents March 28, 2023&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Include the agent docker image tag in the description of the release&lt;/li&gt; &#xA; &lt;li&gt;Create a summary of change highlights&lt;/li&gt; &#xA; &lt;li&gt;Create a &#34;breaking changes&#34; section with any changes required&lt;/li&gt; &#xA; &lt;li&gt;Deploy agents with the new image tag (if it makes sense to)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Releasing packages to NPM&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/changesets/changesets&#34;&gt;changesets&lt;/a&gt; to release to NPM. You can use the &lt;code&gt;release&lt;/code&gt; script in &lt;code&gt;package.json&lt;/code&gt; to publish.&lt;/p&gt; &#xA;&lt;p&gt;For an alpha or beta version, follow the directions &lt;a href=&#34;https://github.com/changesets/changesets/raw/main/docs/prereleases.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GitoxideLabs/gitoxide</title>
    <updated>2024-10-24T01:34:21Z</updated>
    <id>tag:github.com,2024-10-24:/GitoxideLabs/gitoxide</id>
    <link href="https://github.com/GitoxideLabs/gitoxide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An idiomatic, lean, fast &amp; safe pure Rust implementation of Git&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/actions&#34;&gt;&lt;img src=&#34;https://github.com/GitoxideLabs/gitoxide/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/gitoxide&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/gitoxide.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GitoxideLabs/gitoxide/main/etc/msrv-badge.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gitoxide&lt;/code&gt; is an implementation of &lt;code&gt;git&lt;/code&gt; written in Rust for developing future-proof applications which strive for correctness and performance while providing a pleasant and unsurprising developer experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gitoxide&lt;/code&gt; provides the &lt;code&gt;gix&lt;/code&gt; and &lt;code&gt;ein&lt;/code&gt; binaries for use on the command-line to allow experimentation with key features like &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;clone&lt;/code&gt;, and to validate the usability and control of the API offered by the &lt;a href=&#34;https://docs.rs/gix&#34;&gt;&lt;code&gt;gix&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gitoxide&lt;/code&gt; aspires to be a production-grade server implementation and the &lt;code&gt;ein&lt;/code&gt; binary aspires to become the default way to interact with git repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/542159&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/542159.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;The command-line tools as well as the status of each crate is described in &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md&#34;&gt;the crate status document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For use in applications, look for the &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix&#34;&gt;&lt;code&gt;gix&lt;/code&gt;&lt;/a&gt; crate, which serves as entrypoint to the functionality provided by various lower-level plumbing crates like &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-config&#34;&gt;&lt;code&gt;gix-config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Feature Discovery&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Can &lt;code&gt;gix&lt;/code&gt; do what I need it to do?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The above can be hard to answer and this paragraph is here to help with feature discovery.&lt;/p&gt; &#xA;&lt;p&gt;Look at &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md&#34;&gt;&lt;code&gt;crate-status.md&lt;/code&gt;&lt;/a&gt; for a rather exhaustive document that contains both implemented and planned features.&lt;/p&gt; &#xA;&lt;p&gt;Further, the &lt;a href=&#34;https://docs.rs/gix/0.54.1/gix/?search=git2&#34;&gt;&lt;code&gt;gix&lt;/code&gt; crate documentation with the &lt;code&gt;git2&lt;/code&gt; search term&lt;/a&gt; helps to find all currently known &lt;code&gt;git2&lt;/code&gt; equivalent method calls. Please note that this list is definitely not exhaustive yet, but might help if you are coming from &lt;code&gt;git2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;What follows is a high-level list of features and those which are planned:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; clone&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; fetch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; blame&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; push&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; reset&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; status&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; blob-diff&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; merge &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; blobs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; trees&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; commits&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; rebase&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; worktree checkout and worktree stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; reading and writing of objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; reading and writing of refs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; reading and writing of &lt;code&gt;.git/index&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; reading and writing of git configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pathspecs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; revspecs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;.gitattributes&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Crates&lt;/h3&gt; &#xA;&lt;p&gt;Follow linked crate name for detailed status. Please note that all crates follow &lt;a href=&#34;https://semver.org&#34;&gt;semver&lt;/a&gt; as well as the &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/STABILITY.md&#34;&gt;stability guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Production Grade&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability Tier 1&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/gix-lock/README.md&#34;&gt;gix-lock&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability Tier 2&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/gix-tempfile/README.md&#34;&gt;gix-tempfile&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stabilization Candidates&lt;/h3&gt; &#xA;&lt;p&gt;Crates that seem feature complete and need to see some more use before they can be released as 1.0. Documentation is complete and was reviewed at least once.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-mailmap&#34;&gt;gix-mailmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-chunk&#34;&gt;gix-chunk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-ref&#34;&gt;gix-ref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-config&#34;&gt;gix-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-config-value&#34;&gt;gix-config-value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-glob&#34;&gt;gix-glob&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-actor&#34;&gt;gix-actor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-hash&#34;&gt;gix-hash&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Initial Development&lt;/h3&gt; &#xA;&lt;p&gt;These crates may be missing some features and thus are somewhat incomplete, but what&#39;s there is usable to some extent.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;usable&lt;/strong&gt; &lt;em&gt;(with rough but complete docs, possibly incomplete functionality)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix&#34;&gt;gix&lt;/a&gt; (&lt;strong&gt;⬅ entrypoint&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-object&#34;&gt;gix-object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-validate&#34;&gt;gix-validate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-url&#34;&gt;gix-url&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-packetline&#34;&gt;gix-packetline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-packetline&#34;&gt;gix-packetline-blocking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-transport&#34;&gt;gix-transport&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-protocol&#34;&gt;gix-protocol&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-pack&#34;&gt;gix-pack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-odb&#34;&gt;gix-odb&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-commitgraph&#34;&gt;gix-commitgraph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-diff&#34;&gt;gix-diff&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-traverse&#34;&gt;gix-traverse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-features&#34;&gt;gix-features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-credentials&#34;&gt;gix-credentials&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-sec&#34;&gt;gix-sec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-quote&#34;&gt;gix-quote&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-discover&#34;&gt;gix-discover&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-path&#34;&gt;gix-path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-attributes&#34;&gt;gix-attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-ignore&#34;&gt;gix-ignore&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-pathspec&#34;&gt;gix-pathspec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-index&#34;&gt;gix-index&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-revision&#34;&gt;gix-revision&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-revwalk&#34;&gt;gix-revwalk&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-command&#34;&gt;gix-command&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-prompt&#34;&gt;gix-prompt&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-refspec&#34;&gt;gix-refspec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-fs&#34;&gt;gix-fs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-utils&#34;&gt;gix-utils&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-hashtable&#34;&gt;gix-hashtable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-worktree&#34;&gt;gix-worktree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-bitmap&#34;&gt;gix-bitmap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-negotiate&#34;&gt;gix-negotiate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-filter&#34;&gt;gix-filter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-worktree-stream&#34;&gt;gix-worktree-stream&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-archive&#34;&gt;gix-archive&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-submodule&#34;&gt;gix-submodule&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-status&#34;&gt;gix-status&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-worktree-state&#34;&gt;gix-worktree-state&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-date&#34;&gt;gix-date&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-dir&#34;&gt;gix-dir&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitoxide-core&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;very early&lt;/strong&gt; &lt;em&gt;(possibly without any documentation and many rough edges)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-merge&#34;&gt;gix-merge&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;idea&lt;/strong&gt; &lt;em&gt;(just a name placeholder)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-note&#34;&gt;gix-note&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-fetchhead&#34;&gt;gix-fetchhead&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-lfs&#34;&gt;gix-lfs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-rebase&#34;&gt;gix-rebase&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-sequencer&#34;&gt;gix-sequencer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-tui&#34;&gt;gix-tui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-tix&#34;&gt;gix-tix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-bundle&#34;&gt;gix-bundle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/crate-status.md#gix-fsck&#34;&gt;gix-fsck&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stress Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Verify huge packs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Explode a pack to disk&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate and verify large commit graphs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate huge pack from a lot of loose objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stability and MSRV&lt;/h3&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/STABILITY.md&#34;&gt;stability guide&lt;/a&gt; helps to judge how much churn can be expected when depending on crates in this workspace.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Download a Binary Release&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;cargo binstall&lt;/code&gt;, one is able to fetch &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/releases&#34;&gt;binary releases&lt;/a&gt;. You can install it via &lt;code&gt;cargo install cargo-binstall&lt;/code&gt;, assuming the &lt;a href=&#34;https://rustup.rs&#34;&gt;rust toolchain&lt;/a&gt; is present.&lt;/p&gt; &#xA;&lt;p&gt;Then install gitoxide with &lt;code&gt;cargo binstall gitoxide&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/releases&#34;&gt;releases section&lt;/a&gt; for manual installation and various alternative builds that are &lt;em&gt;slimmer&lt;/em&gt; or &lt;em&gt;smaller&lt;/em&gt;, depending on your needs, for &lt;em&gt;Linux&lt;/em&gt;, &lt;em&gt;MacOS&lt;/em&gt; and &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download from Arch-Repository&lt;/h3&gt; &#xA;&lt;p&gt;For Arch Linux you can download &lt;code&gt;gitoxide&lt;/code&gt; from &lt;code&gt;community&lt;/code&gt; repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S gitoxide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download from Exherbo Linux Rust repository&lt;/h3&gt; &#xA;&lt;p&gt;For Exherbo Linux you can download &lt;code&gt;gitoxide&lt;/code&gt; from the &lt;a href=&#34;https://gitlab.exherbo.org/exherbo/rust/-/tree/master/packages/dev-scm/gitoxide&#34;&gt;Rust&lt;/a&gt; repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cave resolve -x repository/rust&#xA;cave resolve -x gitoxide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source via Cargo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; is the Rust package manager which can easily be obtained through &lt;a href=&#34;https://rustup.rs&#34;&gt;rustup&lt;/a&gt;. With it, you can build your own binary effortlessly and for your particular CPU for additional performance gains.&lt;/p&gt; &#xA;&lt;p&gt;The minimum supported Rust version is &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/.github/workflows/msrv.yml#L23&#34;&gt;documented in the CI configuration&lt;/a&gt;, the latest stable one will work as well.&lt;/p&gt; &#xA;&lt;p&gt;There are various build configurations, all of them are &lt;a href=&#34;https://docs.rs/crate/gitoxide/latest&#34;&gt;documented here&lt;/a&gt;. The documentation should also be useful for packagers who need to tune external dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# A way to install `gitoxide` with just Rust and a C compiler installed.&#xA;# If there are problems with SSL certificates during clones, try to omit `--locked`.&#xA;cargo install gitoxide --locked --no-default-features --features max-pure&#xA;&#xA;# The default installation, &#39;max&#39;, is the fastest, but also needs `cmake` to build successfully.&#xA;# Installing it is platform-dependent.&#xA;cargo install gitoxide&#xA;&#xA;# For smaller binaries and even faster build times that are traded for a less fancy CLI implementation,&#xA;# use the `lean` feature.&#xA;cargo install gitoxide --locked --no-default-features --features lean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following installs the latest unpublished &lt;code&gt;max&lt;/code&gt; release directly from git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --git https://github.com/GitoxideLabs/gitoxide  gitoxide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to deal with build failures&lt;/h4&gt; &#xA;&lt;p&gt;On some platforms, installation may fail due to lack of tools required by &lt;code&gt;C&lt;/code&gt; toolchains. This can generally be avoided by installation with &lt;code&gt;cargo install gitoxide --no-default-features --features max-pure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;What follows is a list of known failures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Fedora, &lt;code&gt;perl&lt;/code&gt; needs to be installed for &lt;code&gt;OpenSSL&lt;/code&gt; to build properly. This can be done with the following command: &lt;code&gt;dnf install perl&lt;/code&gt; (see &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/issues/592&#34;&gt;this issue&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;Some CI/CD pipelines leverage repository cloning. Below is a copy-paste-able example to build docker images for such workflows. As no official image exists (at this time), an image must first be built.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The dockerfile isn&#39;t continuously tested as it costs too much time and thus might already be broken. PRs are welcome.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Building the most compatible base image&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -f etc/docker/Dockerfile.alpine -t gitoxide:latest --compress . --target=pipeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Basic usage in a Pipeline&lt;/h4&gt; &#xA;&lt;p&gt;For example, if a &lt;code&gt;Dockerfile&lt;/code&gt; currently uses something like &lt;code&gt;RUN git clone https://github.com/GitoxideLabs/gitoxide&lt;/code&gt;, first build the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -f etc/docker/Dockerfile.alpine -t gitoxide:latest --compress .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then copy the binaries into your image and replace the &lt;code&gt;git&lt;/code&gt; directive with a &lt;code&gt;gix&lt;/code&gt; equivalent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;COPY --from gitoxide:latest /bin/gix /usr/local/bin/&#xA;COPY --from gitoxide:latest /bin/ein /usr/local/bin/&#xA;&#xA;RUN /usr/local/bin/gix clone --depth 1 https://github.com/GitoxideLabs/gitoxide gitoxide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, there are two binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ein&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;high level commands, &lt;em&gt;porcelain&lt;/em&gt;, for every-day use, optimized for a pleasant user experience&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gix&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;low level commands, &lt;em&gt;plumbing&lt;/em&gt;, for use in more specialized cases and to validate newly written code in real-world scenarios&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Goals&lt;/h2&gt; &#xA;&lt;p&gt;Project goals can change over time as we learn more, and they can be challenged.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;a pure-rust implementation of git&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;including &lt;em&gt;transport&lt;/em&gt;, &lt;em&gt;object database&lt;/em&gt;, &lt;em&gt;references&lt;/em&gt;, &lt;em&gt;cli&lt;/em&gt; and &lt;em&gt;tui&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;a simple command-line interface is provided for the most common git operations, optimized for user experience. A &lt;em&gt;simple-git&lt;/em&gt; if you so will.&lt;/li&gt; &#xA;   &lt;li&gt;be the go-to implementation for anyone who wants to solve problems around git, and become &lt;em&gt;the&lt;/em&gt; alternative to &lt;code&gt;GitPython&lt;/code&gt; and &lt;em&gt;libgit2&lt;/em&gt; in the process.&lt;/li&gt; &#xA;   &lt;li&gt;become the foundation for a distributed alternative to GitHub, and maybe even for use within GitHub itself&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;learn from the best to write the best possible idiomatic Rust&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;libgit2&lt;/em&gt; is a fantastic resource to see what abstractions work, we will use them&lt;/li&gt; &#xA;   &lt;li&gt;use Rust&#39;s type system to make misuse impossible&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;be the best performing implementation&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use Rust&#39;s type system to optimize for work not done without being hard to use&lt;/li&gt; &#xA;   &lt;li&gt;make use of parallelism from the get go&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;sparse checkout&lt;/em&gt; support from day one&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;assure on-disk consistency&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;assure reads never interfere with concurrent writes&lt;/li&gt; &#xA;   &lt;li&gt;assure multiple concurrent writes don&#39;t cause trouble&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;take shortcuts, but not in quality&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;binaries may use &lt;code&gt;anyhow::Error&lt;/code&gt; exhaustively, knowing these errors are solely user-facing.&lt;/li&gt; &#xA;   &lt;li&gt;libraries use light-weight custom errors implemented using &lt;code&gt;quick-error&lt;/code&gt; or &lt;code&gt;thiserror&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;internationalization is nothing we are concerned with right now.&lt;/li&gt; &#xA;   &lt;li&gt;IO errors due to insufficient amount of open file handles don&#39;t always lead to operation failure&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross platform support, including Windows&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With the tools and experience available here there is no reason not to support Windows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/df66d74aa2a8cb62d8a03383135f08c8e8c579a8/.github/workflows/rust.yml#L34&#34;&gt;Windows is tested on CI&lt;/a&gt; and failures do prevent releases.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;p&gt;Project non-goals can change over time as we learn more, and they can be challenged.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;replicate &lt;code&gt;git&lt;/code&gt; command functionality perfectly&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git&lt;/code&gt; is &lt;code&gt;git&lt;/code&gt;, and there is no reason to not use it. Our path is the one of simplicity to make getting started with git easy.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;be incompatible to git&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the on-disk format must remain compatible, and we will never contend with it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;use async IO everywhere&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for the most part, git operations are heavily reliant on memory mapped IO as well as CPU to decompress data, which doesn&#39;t lend itself well to async IO out of the box.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;blocking&lt;/code&gt; as well as &lt;code&gt;gix-features::interrupt&lt;/code&gt; to bring operations into the async world and to control long running operations.&lt;/li&gt; &#xA;   &lt;li&gt;When connecting or streaming over TCP connections, especially when receiving on the server, async seems like a must though, but behind a feature flag.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If what you have seen so far sparked your interest to contribute, then let us say: We are happy to have you and help you to get started.&lt;/p&gt; &#xA;&lt;p&gt;We recommend running &lt;code&gt;just test&lt;/code&gt; during the development process to assure CI is green before pushing.&lt;/p&gt; &#xA;&lt;p&gt;A backlog for work ready to be picked up is &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/projects&#34;&gt;available in the Project&#39;s Kanban board&lt;/a&gt;, which contains instructions on how to pick a task. If it&#39;s empty or you have other questions, feel free to &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/discussions&#34;&gt;start a discussion&lt;/a&gt; or reach out to @Byron &lt;a href=&#34;https://keybase.io/byronbates&#34;&gt;privately&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For additional details, also take a look at the &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/COLLABORATING.md&#34;&gt;collaboration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting started with Video Tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/playlist?list=PLMHbQxe1e9Mk5kOHrm9v20-umkE2ck_gE&#34;&gt;Learning Rust with Gitoxide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In 17 episodes you can learn all you need to meaningfully contribute to &lt;code&gt;gitoxide&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/playlist?list=PLMHbQxe1e9MkEmuj9csczEK1O06l0Npy5&#34;&gt;Getting into Gitoxide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get an introduction to &lt;code&gt;gitoxide&lt;/code&gt; itself which should be a good foundation for any contribution, but isn&#39;t a requirement for contributions either.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLMHbQxe1e9MlhyyZQXPi_dc-bKudE-WUw&#34;&gt;Gifting Gitoxide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See how PRs are reviewed along with a lot of inner monologue.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other Media&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rustacean-station.org/episode/055-sebastian-thiel/&#34;&gt;Rustacean Station Podcast&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;Features for 1.0&lt;/h3&gt; &#xA;&lt;p&gt;Provide a CLI to for the most basic user journey:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; initialize a repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; fetch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; and update worktree&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;clone a repository &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; bare&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; with working tree&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; create a commit after adding worktree files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add a remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; push &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; create (thin) pack&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ideas for Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;gix tool open-remote&lt;/code&gt; open the URL of the remote, possibly after applying known transformations to go from &lt;code&gt;ssh&lt;/code&gt; to &lt;code&gt;https&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;tix&lt;/code&gt; as example implementation of &lt;code&gt;tig&lt;/code&gt;, displaying a version of the commit graph, useful for practicing how highly responsive GUIs can be made.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Something like &lt;a href=&#34;https://github.com/github/git-sizer&#34;&gt;&lt;code&gt;git-sizer&lt;/code&gt;&lt;/a&gt;, but leveraging extreme decompression speeds of indexed packs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Open up SQL for git using &lt;a href=&#34;https://github.com/rusqlite/rusqlite/raw/master/tests/vtab.rs&#34;&gt;sqlite virtual tables&lt;/a&gt;. Check out gitqlite as well. What would an MVP look like? Maybe even something that could ship with gitoxide. See &lt;a href=&#34;https://github.com/filhodanuvem/gitql&#34;&gt;this go implementation as example&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A truly awesome history rewriter which makes it easy to understand what happened while avoiding all pitfalls. Think BFG, but more awesome, if that&#39;s possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;gix-tui&lt;/code&gt; should learn a lot from &lt;a href=&#34;https://www.fossil-scm.org&#34;&gt;fossil-scm&lt;/a&gt; regarding the presentation of data. Maybe &lt;a href=&#34;https://github.com/Lutetium-Vanadium/requestty/&#34;&gt;this&lt;/a&gt; can be used for prompts. Probably &lt;a href=&#34;https://magit.vc&#34;&gt;magit&lt;/a&gt; has a lot to offer, too.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ideas for Spin-Offs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A system to integrate tightly with &lt;code&gt;gix-lfs&lt;/code&gt; to allow a multi-tier architecture so that assets can be stored in git and are accessible quickly from an intranet location (for example by accessing the storage read-only over the network) while changes are pushed immediately by the server to other edge locations, like &lt;em&gt;the cloud&lt;/em&gt; or backups. Sparse checkouts along with explorer/finder integrations make it convenient to only work on a small subset of files locally. Clones can contain all configuration somebody would need to work efficiently from their location, and authentication for the git history as well as LFS resources make the system secure. One could imagine encryption support for untrusted locations in &lt;em&gt;the cloud&lt;/em&gt; even though more research would have to be done to make it truly secure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A &lt;a href=&#34;https://github.com/syncthing/syncthing&#34;&gt;syncthing&lt;/a&gt; like client/server application. This is to demonstrate how lower-level crates can be combined into custom applications that use only part of git&#39;s technology to achieve their very own thing. Watch out for big file support, multi-device cross-syncing, the possibility for untrusted destinations using full-encryption, case-insensitive and sensitive filesystems, and extended file attributes as well as ignore files.&lt;/li&gt; &#xA; &lt;li&gt;An event-based database that uses commit messages to store deltas, while occasionally aggregating the actual state in a tree. Of course it&#39;s distributed by nature, allowing people to work offline. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It&#39;s abstracted to completely hide the actual data model behind it, allowing for all kinds of things to be implemented on top.&lt;/li&gt; &#xA;   &lt;li&gt;Commits probably need a nanosecond component for the timestamp, which can be added via custom header field.&lt;/li&gt; &#xA;   &lt;li&gt;having recording all changes allows for perfect merging, both on the client or on the server, while keeping a natural audit log which makes it useful for mission critical databases in business.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can markdown be used as database so issue-trackers along with meta-data could just be markdown files which are mostly human-editable? Could user interfaces be meta-data aware and just hide the meta-data chunks which are now editable in the GUI itself? Doing this would make conflicts easier to resolve than an &lt;code&gt;sqlite&lt;/code&gt; database.&lt;/li&gt; &#xA;     &lt;li&gt;A time tracker - simple data, very likely naturally conflict free, and interesting to see it in terms of teams or companies using it with maybe GitHub as Backing for authentication. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;How about supporting multiple different trackers, as in different remotes?&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shortcomings &amp;amp; Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Please take a look at the &lt;a href=&#34;https://github.com/GitoxideLabs/gitoxide/raw/main/SHORTCOMINGS.md&#34;&gt;&lt;code&gt;SHORTCOMINGS.md&lt;/code&gt; file&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;itertools&lt;/strong&gt; &lt;em&gt;(MIT Licensed)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We use the &lt;code&gt;izip!&lt;/code&gt; macro in code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;deflate2&lt;/strong&gt; &lt;em&gt;(MIT Licensed)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We use various abstractions to implement decompression and compression directly on top of the rather low-level &lt;code&gt;miniz_oxide&lt;/code&gt; crate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🙏 Special Thanks 🙏&lt;/h2&gt; &#xA;&lt;p&gt;At least for now this section is exclusive to highlight the incredible support that &lt;a href=&#34;https://github.com/joshtriplett&#34;&gt;Josh Triplett&lt;/a&gt; has provided to me in the form of advice, sponsorship and countless other benefits that were incredibly meaningful. Going full time with &lt;code&gt;gitoxide&lt;/code&gt; would hardly have been feasible without his involvement, and I couldn&#39;t be more grateful 😌.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/GitoxideLabs/gitoxide/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/GitoxideLabs/gitoxide/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Fun facts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Originally @Byron was really fascinated by &lt;a href=&#34;https://github.com/gitpython-developers/GitPython/issues/765#issuecomment-396072153&#34;&gt;this problem&lt;/a&gt; and believes that with &lt;code&gt;gitoxide&lt;/code&gt; it will be possible to provide the fastest solution for it.&lt;/li&gt; &#xA; &lt;li&gt;@Byron has been absolutely blown away by &lt;code&gt;git&lt;/code&gt; from the first time he experienced git more than 13 years ago, and tried to implement it in &lt;a href=&#34;https://github.com/gitpython-developers/GitPython/pull/1028&#34;&gt;various shapes&lt;/a&gt; and &lt;a href=&#34;https://github.com/byron/gogit&#34;&gt;forms&lt;/a&gt; multiple &lt;a href=&#34;https://github.com/Byron/gitplusplus&#34;&gt;times&lt;/a&gt;. Now with Rust @Byron finally feels to have found the right tool for the job!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Amjad50/plastic</title>
    <updated>2024-10-24T01:34:21Z</updated>
    <id>tag:github.com,2024-10-24:/Amjad50/plastic</id>
    <link href="https://github.com/Amjad50/plastic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NES emulator in rust with egui and TUI&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- Really ugly workaround, but the image isn&#39;t working in crates.io without this --&gt; &lt;a href=&#34;https://github.com/Amjad50/plastic&#34;&gt;&lt;img alt=&#34;plastic&#34; src=&#34;https://raw.githubusercontent.com/Amjad50/plastic/refs/heads/master/images/logo.svg?sanitize=true&#34; width=&#34;60%&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;NES emulator in &lt;em&gt;Rust&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://actions-badge.atrox.dev/Amjad50/plastic/goto&#34;&gt;&lt;img src=&#34;https://github.com/Amjad50/plastic/workflows/Rust/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Amjad50/plastic&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Amjad50/plastic/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/Amjad50/plastic&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/Amjad50/plastic/status.svg?sanitize=true&#34; alt=&#34;dependency status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Amjad50/plastic&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://crates.io/crates/plastic_core&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/plastic_core?label=plastic_core&#34; alt=&#34;Crates.io Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/plastic_core/latest/plastic_core/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/plastic_core&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://crates.io/crates/plastic&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/plastic?label=plastic&#34; alt=&#34;Crates.io Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/plastic_tui&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/plastic_tui?label=plastic_tui&#34; alt=&#34;Crates.io Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;plastic&lt;/strong&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Nintendo_Entertainment_System&#34;&gt;NES&lt;/a&gt; emulator built from scratch using &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a personal project for fun and to experience emulating hardware and connecting them together.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#building-and-installation&#34;&gt;Building and installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#components&#34;&gt;Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#interfaces&#34;&gt;Interfaces&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#ui&#34;&gt;EGui UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#tui&#34;&gt;TUI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#controls&#34;&gt;Controls&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#keyboard&#34;&gt;Keyboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#gamepad&#34;&gt;Gamepad&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building and installation&lt;/h3&gt; &#xA;&lt;h4&gt;Installing&lt;/h4&gt; &#xA;&lt;p&gt;You can install the latest version of &lt;a href=&#34;https://crates.io/crates/plastic&#34;&gt;plastic&lt;/a&gt; or &lt;a href=&#34;https://crates.io/crates/plastic_tui&#34;&gt;plastic_tui&lt;/a&gt; using cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install plastic&#xA;cargo install plastic_tui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Arch Linux, &lt;code&gt;plastic&lt;/code&gt; is available in the &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/plastic/&#34;&gt;official repositories&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S plastic&#xA;pacman -S plastic_tui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;If you want to experience the latest development version, you can build &lt;code&gt;Plastic&lt;/code&gt; yourself. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 6502 CPU, all official and unofficial instructions with accurate timing (without BCD mode).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Picture Processing Unit, almost accurate with some small timing issues that would not effect most games.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cartridge and INES file handling (still missing INES2.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mappers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 2&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 3&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 4&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Mapper 5 (Milestone)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Mapper 6&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 7&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Mapper 8&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 9&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 10&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 11&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapper 66&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Audio Processing Unit: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 2 Pulse wave(square)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Triangle&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Noise&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DMC&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IRQ support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Controller: controllable using the keyboard and controller (tested with PS4 controller)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interfaces&lt;/h3&gt; &#xA;&lt;p&gt;The main emulator is at &lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/plastic_core/&#34;&gt;&lt;code&gt;plastic_core&lt;/code&gt;&lt;/a&gt; And its a struct &lt;code&gt;NES&lt;/code&gt;, where the UI would clock it, and then take the resulting audio and pixel buffers to handle them.&lt;/p&gt; &#xA;&lt;p&gt;We have 2 UIs, one main and the other just for fun.&lt;/p&gt; &#xA;&lt;h4&gt;EGui UI&lt;/h4&gt; &#xA;&lt;p&gt;Simple ui built with &lt;a href=&#34;https://github.com/emilk/egui&#34;&gt;egui&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h5&gt;Advantages&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Very simple and easy to use immediate mode UI.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;TUI&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3wKILnY0AHU&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/3wKILnY0AHU/0.jpg&#34; alt=&#34;TUI demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is just for fun, but it is actually working way better than I expected. Check the &lt;a href=&#34;https://www.youtube.com/watch?v=3wKILnY0AHU&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have one of these terminals mentioned &lt;a href=&#34;https://docs.rs/crossterm/0.28.1/crossterm/event/struct.PushKeyboardEnhancementFlags.html&#34;&gt;in this docs&lt;/a&gt; Then you will have a much better experience, since these terminals support detecting button &lt;code&gt;Release&lt;/code&gt;, normally other terminals don&#39;t have this feature, so the input for this UI can be a bit wonky.&lt;/p&gt; &#xA;&lt;p&gt;I used &lt;a href=&#34;https://gitlab.com/gilrs-project/gilrs&#34;&gt;gilrs&lt;/a&gt; for gamepad support and its working very nicely, keyboard on the other hand is not very responsive, so it is advised to use gamepad. Also since this uses one character for each pixel, it is advised to use the smallest font size your terminal emulator supports. Have fun.&lt;/p&gt; &#xA;&lt;h3&gt;Controls&lt;/h3&gt; &#xA;&lt;p&gt;In all the UI providers I followed the same controlling scheme, as well as the ability to reset through &lt;code&gt;&amp;lt;CTRL-R&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Keyboard&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;keyboard&lt;/th&gt; &#xA;   &lt;th&gt;nes controller&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;J&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;U&lt;/td&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;I&lt;/td&gt; &#xA;   &lt;td&gt;Start&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;W&lt;/td&gt; &#xA;   &lt;td&gt;Up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;Down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Gamepad&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;gamepad (PS4)&lt;/th&gt; &#xA;   &lt;th&gt;nes controller&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;O&lt;/td&gt; &#xA;   &lt;td&gt;A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Start&lt;/td&gt; &#xA;   &lt;td&gt;Start&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button Up&lt;/td&gt; &#xA;   &lt;td&gt;Up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button Down&lt;/td&gt; &#xA;   &lt;td&gt;Down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button Left&lt;/td&gt; &#xA;   &lt;td&gt;Left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button Right&lt;/td&gt; &#xA;   &lt;td&gt;Right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For now its static, and there is no way to change it except for doing it in the code, TODO later.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This project is under &lt;a href=&#34;https://raw.githubusercontent.com/Amjad50/plastic/master/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;NES is a product and/or trademark of Nintendo Co., Ltd. Nintendo Co., Ltd. and is not affiliated in any way with Plastic or its author&lt;/p&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;p&gt;Most of the documentation for NES components can be found in the &lt;a href=&#34;http://wiki.nesdev.com/w/index.php/Nesdev_Wiki&#34;&gt;NES dev wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the CPU(6502), &lt;a href=&#34;https://www.masswerk.at/6502/6502_instruction_set.html&#34;&gt;this&lt;/a&gt; has the instruction set, and I used &lt;a href=&#34;https://github.com/Klaus2m5/6502_65C02_functional_tests&#34;&gt;Klaus2m5&#39;s tests&lt;/a&gt; for testing the CPU alone without the other NES components.&lt;/p&gt;</summary>
  </entry>
</feed>