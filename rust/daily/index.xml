<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-31T01:41:36Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>viniciusfonseca/rinha-backend-rust</title>
    <updated>2023-08-31T01:41:36Z</updated>
    <id>tag:github.com,2023-08-31:/viniciusfonseca/rinha-backend-rust</id>
    <link href="https://github.com/viniciusfonseca/rinha-backend-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rinha de Backend na linguagem mais &lt;em&gt;blazingly fast‚Ñ¢&lt;/em&gt; do mercado. ü¶Äüî•&lt;/h1&gt; &#xA;&lt;p&gt;Stack:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rust (linguagem de programa√ß√£o de alto n√≠vel com baixo footprint de mem√≥ria e performance compar√°vel com a de C/C++)&lt;/li&gt; &#xA; &lt;li&gt;Actix Web (framework HTTP para Rust)&lt;/li&gt; &#xA; &lt;li&gt;Tokio (Runtime async n√£o-bloqueante que utiliza loop de eventos single-threaded)&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL (banco de dados relacional de uso comercial gratuito que prioriza consist√™ncia e disponibilidade)&lt;/li&gt; &#xA; &lt;li&gt;Deadpool-postgres (gerenciador de pool de conex√µes com Postgres)&lt;/li&gt; &#xA; &lt;li&gt;Serde (lib de desserializa√ß√£o/serializa√ß√£o em JSON)&lt;/li&gt; &#xA; &lt;li&gt;Redis (banco de dados n√£o-relacional de chave-valor em mem√≥ria com baixa lat√™ncia de resposta)&lt;/li&gt; &#xA; &lt;li&gt;Deadpool-redis (gerenciador de pool de conex√µes com Redis)&lt;/li&gt; &#xA; &lt;li&gt;Deadqueue (lib de fila ass√≠ncrona para processamento batch)&lt;/li&gt; &#xA; &lt;li&gt;Nginx (balanceador de carga baseado em eventos)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sampsyo/bril</title>
    <updated>2023-08-31T01:41:36Z</updated>
    <id>tag:github.com,2023-08-31:/sampsyo/bril</id>
    <link href="https://github.com/sampsyo/bril" rel="alternate"></link>
    <summary type="html">&lt;p&gt;an educational compiler intermediate representation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bril: A Compiler Intermediate Representation for Learning&lt;/h1&gt; &#xA;&lt;p&gt;Bril (the Big Red Intermediate Language) is a compiler IR made for teaching &lt;a href=&#34;https://www.cs.cornell.edu/courses/cs6120/2020fa/&#34;&gt;CS 6120&lt;/a&gt;, a grad compilers course. It is an extremely simple instruction-based IR that is meant to be extended. Its canonical representation is JSON, which makes it easy to build tools from scratch to manipulate it.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://capra.cs.cornell.edu/bril/&#34;&gt;documentation&lt;/a&gt;, including the &lt;a href=&#34;https://capra.cs.cornell.edu/bril/lang/index.html&#34;&gt;language reference document&lt;/a&gt;, and some infrastructure for Bril. There are some quick-start instructions below for some of the main tools, but check out the docs for more details about what&#39;s available.&lt;/p&gt; &#xA;&lt;h2&gt;Install the Tools&lt;/h2&gt; &#xA;&lt;h3&gt;Reference Interpreter&lt;/h3&gt; &#xA;&lt;p&gt;You will want the IR interpreter, which uses &lt;a href=&#34;https://deno.land&#34;&gt;Deno&lt;/a&gt;. Just type this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ deno install brili.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As Deno tells you, you will then need to add &lt;code&gt;$HOME/.deno/bin&lt;/code&gt; to &lt;a href=&#34;https://unix.stackexchange.com/a/26059/61192&#34;&gt;your &lt;code&gt;$PATH&lt;/code&gt;&lt;/a&gt;. You will then have &lt;code&gt;brili&lt;/code&gt;, which takes a Bril program as JSON on stdin and executes it.&lt;/p&gt; &#xA;&lt;h3&gt;Text Format&lt;/h3&gt; &#xA;&lt;p&gt;The parser &amp;amp; pretty printer for the human-editable text form of Bril are written for Python 3. To install them, you need &lt;a href=&#34;https://flit.readthedocs.io/&#34;&gt;Flit&lt;/a&gt;, so run this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install --user flit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, go to the &lt;code&gt;bril-txt&lt;/code&gt; directory and use Flit to install symlinks to the tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ flit install --symlink --user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tools are called &lt;code&gt;bril2json&lt;/code&gt; and &lt;code&gt;bril2txt&lt;/code&gt;. They also take input on stdin and produce output on stdout.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;There are some tests in the &lt;code&gt;test/&lt;/code&gt; directory. They use &lt;a href=&#34;https://github.com/cucapra/turnt&#34;&gt;Turnt&lt;/a&gt;, which lets us write the expected output for individual commands. Install it with &lt;a href=&#34;https://packaging.python.org/tutorials/installing-packages/&#34;&gt;pip&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install --user turnt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run all the tests by typing &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>