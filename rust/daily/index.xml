<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-24T01:43:57Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flows-network/chatgpt-github-app</title>
    <updated>2023-03-24T01:43:57Z</updated>
    <id>tag:github.com,2023-03-24:/flows-network/chatgpt-github-app</id>
    <link href="https://github.com/flows-network/chatgpt-github-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A ChatGPT bot to respond to your GitHub Issues&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A ChatGPT bot to respond to your GitHub Issues&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flows-network/chatgpt-github-app/main/#deploy-chatgpt-github-app-on-your-github-repo&#34;&gt;Deploy this function on flows.network&lt;/a&gt;, and you will get a GitHub bot that uses ChatGPT to respond to every comment in your GitHub issues automatically. It enables developers to use GitHub Issues as the conversational UI for ChatGPT!&lt;/p&gt; &#xA;&lt;p&gt;See a live demo &lt;a href=&#34;https://github.com/second-state/chat-with-chatgpt/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Powered by &lt;code&gt;gpt4&lt;/code&gt;, Rust and &lt;a href=&#34;https://github.com/WasmEdge/WasmEdge&#34;&gt;WasmEdge&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisite&lt;/h2&gt; &#xA;&lt;p&gt;You will need an &lt;a href=&#34;https://openai.com/blog/openai-api&#34;&gt;OpenAI API key&lt;/a&gt;. If you do not already have one, &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;sign up here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy ChatGPT GitHub App on your GitHub repo&lt;/h2&gt; &#xA;&lt;p&gt;To install the ChatGPT GitHub App, we will use &lt;a href=&#34;https://flows.network/&#34;&gt;flows.network&lt;/a&gt;, a serverless platform that makes deploying your own app quick and easy in just three steps.&lt;/p&gt; &#xA;&lt;h3&gt;Fork this repo&lt;/h3&gt; &#xA;&lt;p&gt;Fork &lt;a href=&#34;https://github.com/flows-network/chatgpt-github-app/&#34;&gt;this repo&lt;/a&gt; and go to flows.network to deploy your function.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy the code on flow.network&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Sign up for an account for deploying flows on &lt;a href=&#34;https://flows.network/&#34;&gt;flows.network&lt;/a&gt;. It&#39;s free.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &#34;Create a Flow&#34; button to start deploying the ChatGPT GitHub APP&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Authenticate the &lt;a href=&#34;https://flows.network/&#34;&gt;flows.network&lt;/a&gt; to access the &lt;code&gt;chatgpt-github-app&lt;/code&gt; repo you just forked. &lt;img src=&#34;https://user-images.githubusercontent.com/45785633/226546523-93071359-b957-4653-a429-ab983ee9a078.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the Advanced text and you will see more setting. Fill in the required Environment Variables. In this example, we have three variables. One is &lt;code&gt;owner&lt;/code&gt;. Fill in the GitHub org Name you want to connect here. The second one is &lt;code&gt;repo&lt;/code&gt;. Fill in the GitHub repo Name under the GitHub org you just entered. The last one is &lt;code&gt;openai_key_name&lt;/code&gt;. &lt;strong&gt;Fill in the name you want to name your OpenAI Key&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/45785633/226547582-a215ed5e-1966-4bdb-b8a1-f4c6d28cc215.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;At last, click the Deploy button to deploy your function.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Configure SaaS integrations&lt;/h3&gt; &#xA;&lt;p&gt;After that, the flows.network will direct you to configure the SaaS integration required by your flow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/45785633/226547995-54927771-7782-484a-8c9c-908e91f99444.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here we can see, we need to configue two SaaS integrations.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click on the &#34;Connect/+ Add new authentication&#34; button to authenticate your OpenAI account. You&#39;ll be redirected to a new page where you could copy and paste your OpenAI API key and then name the key. &lt;strong&gt;Note that the name you enter here should be the same as the name in the environment variables.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;758&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/45785633/222973214-ecd052dc-72c2-4711-90ec-db1ec9d5f24e.png&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Click the &#34;Connect/+ Add new authentication&#34; button to authenticate your GitHub account. You&#39;ll be redirected to a new page where you must grant &lt;a href=&#34;https://flows.network/&#34;&gt;flows.network&lt;/a&gt; permission to install the &lt;code&gt;flows-network-integration&lt;/code&gt; bot on a repo. This repo is the one you entered into the environment variables above.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After that, click the Check button to see your flow details. As soon as the flow function&#39;s status becomes &lt;code&gt;ready&lt;/code&gt; and the flow&#39;s status became &lt;code&gt;running&lt;/code&gt;, the ChatGPT GitHub App goes live. Go ahead and chat with ChatGPT by creating an issue!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/45785633/226550405-67d0741c-6c78-42ef-87d1-b30bbd45a5a9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://flows.network/&#34;&gt;flows.network&lt;/a&gt; is still in its early stages. We would love to hear your feedback!&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>lotabout/skim</title>
    <updated>2023-03-24T01:43:57Z</updated>
    <id>tag:github.com,2023-03-24:/lotabout/skim</id>
    <link href="https://github.com/lotabout/skim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fuzzy Finder in rust!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://crates.io/crates/skim&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/skim.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22&#34;&gt; &lt;img src=&#34;https://github.com/lotabout/skim/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://repology.org/project/skim/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/tiny-repos/skim.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/23PuxttufP&#34;&gt; &lt;img alt=&#34;Skim Discord&#34; src=&#34;https://img.shields.io/discord/1031830957432504361?label=&amp;amp;color=7389d8&amp;amp;labelColor=6a7ec2&amp;amp;logoColor=ffffff&amp;amp;logo=discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Life is short, skim!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Half of our life is spent on navigation: files, lines, commandsâ€¦ You need skim! It is a general fuzzy finder that saves you time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg?sanitize=true&#34; alt=&#34;skim demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;skim provides a single executable: &lt;code&gt;sk&lt;/code&gt;. Basically anywhere you would want to use &lt;code&gt;grep&lt;/code&gt;, try &lt;code&gt;sk&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#as-filter&#34;&gt;As Filter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#as-interactive-interface&#34;&gt;As Interactive Interface&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#key-bindings&#34;&gt;Key Bindings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#search-syntax&#34;&gt;Search Syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#exit-code&#34;&gt;Exit code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#customization&#34;&gt;Customization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#keymap&#34;&gt;Keymap to redefine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#sort-criteria&#34;&gt;Sort Criteria&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#color-scheme&#34;&gt;Color Scheme&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#misc&#34;&gt;Misc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#advance-topics&#34;&gt;Advance Topics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#interactive-mode&#34;&gt;Interactive Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#executing-external-programs&#34;&gt;Executing external programs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#preview-window&#34;&gt;Preview Window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#fields-support&#34;&gt;Fields Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#use-as-a-library&#34;&gt;Use as a Library&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#how-to-ignore-files&#34;&gt;How to ignore files?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#some-files-are-not-shown-in-vim-plugin&#34;&gt;Some files are not shown in vim plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#differences-to-fzf&#34;&gt;Differences to fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lotabout/skim/master/#how-to-contribute&#34;&gt;How to contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The skim project contains several components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;sk&lt;/code&gt; executable -- the core.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sk-tmux&lt;/code&gt; -- script for launching &lt;code&gt;sk&lt;/code&gt; in a tmux pane.&lt;/li&gt; &#xA; &lt;li&gt;Vim/Nvim plugin -- to call &lt;code&gt;sk&lt;/code&gt; inside Vim/Nvim. check &lt;a href=&#34;https://github.com/lotabout/skim.vim&#34;&gt;skim.vim&lt;/a&gt; for more Vim support.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Package Managers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;th&gt;Package Manager&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;Homebrew&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;brew install sk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;MacPorts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo port install skim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;dnf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dnf install skim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine&lt;/td&gt; &#xA;   &lt;td&gt;apk&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apk add skim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch&lt;/td&gt; &#xA;   &lt;td&gt;pacman&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pacman -S skim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo&lt;/td&gt; &#xA;   &lt;td&gt;Portage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emerge --ask app-misc/skim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://repology.org/project/skim/versions&#34;&gt;repology&lt;/a&gt; for a comprehensive overview of package availability.&lt;/p&gt; &#xA;&lt;h2&gt;Install as Vim plugin&lt;/h2&gt; &#xA;&lt;p&gt;Via vim-plug (recommended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;lotabout/skim&#39;, { &#39;dir&#39;: &#39;~/.skim&#39;, &#39;do&#39;: &#39;./install&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hard Core&lt;/h2&gt; &#xA;&lt;p&gt;Any of the following applies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using Git &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim&#xA;$ ~/.skim/install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Using Binary: directly &lt;a href=&#34;https://github.com/lotabout/skim/releases&#34;&gt;download the sk executable&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install from &lt;a href=&#34;https://crates.io/&#34;&gt;crates.io&lt;/a&gt;: &lt;code&gt;cargo install skim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build Manually &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim&#xA;$ cd ~/.skim&#xA;$ cargo install&#xA;$ cargo build --release&#xA;$ # put the resulting `target/release/sk` executable on your PATH.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;skim can be used as a general filter (like &lt;code&gt;grep&lt;/code&gt;) or as an interactive interface for invoking commands.&lt;/p&gt; &#xA;&lt;h2&gt;As filter&lt;/h2&gt; &#xA;&lt;p&gt;Try the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# directly invoke skim&#xA;sk&#xA;&#xA;# or pipe some input to it: (press TAB key select multiple items with -m enabled)&#xA;vim $(find . -name &#34;*.rs&#34; | sk -m)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command will allow you to select files with &#34;.rs&#34; extension and open the ones you selected in Vim.&lt;/p&gt; &#xA;&lt;h2&gt;As Interactive Interface&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;skim&lt;/code&gt; can invoke other commands dynamically. Normally you would want to integrate it with &lt;a href=&#34;https://www.gnu.org/software/grep/&#34;&gt;grep&lt;/a&gt;, &lt;a href=&#34;https://github.com/petdance/ack2&#34;&gt;ack&lt;/a&gt;, &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;ag&lt;/a&gt;, or &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;rg&lt;/a&gt; for searching contents in a project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# works with grep&#xA;sk --ansi -i -c &#39;grep -rI --color=always --line-number &#34;{}&#34; .&#39;&#xA;# works with ack&#xA;sk --ansi -i -c &#39;ack --color &#34;{}&#34;&#39;&#xA;# works with ag&#xA;sk --ansi -i -c &#39;ag --color &#34;{}&#34;&#39;&#xA;# works with rg&#xA;sk --ansi -i -c &#39;rg --color=always --line-number &#34;{}&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif&#34; alt=&#34;interactive mode demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;Some commonly used key bindings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Enter&lt;/td&gt; &#xA;   &lt;td&gt;Accept (select current one and quit)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;ESC/Ctrl-G&lt;/td&gt; &#xA;   &lt;td&gt;Abort&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Ctrl-P/Up&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Ctrl-N/Down&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor Down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TAB&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move down (with &lt;code&gt;-m&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Shift-TAB&lt;/td&gt; &#xA;   &lt;td&gt;Toggle selection and move up (with &lt;code&gt;-m&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For full list of key bindings, check out the &lt;a href=&#34;https://github.com/lotabout/skim/raw/master/man/man1/sk.1&#34;&gt;man page&lt;/a&gt; (&lt;code&gt;man sk&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Search Syntax&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;skim&lt;/code&gt; borrowed &lt;code&gt;fzf&lt;/code&gt;&#39;s syntax for matching items:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Token&lt;/th&gt; &#xA;   &lt;th&gt;Match type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fuzzy-match&lt;/td&gt; &#xA;   &lt;td&gt;items that match &lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^music&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prefix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;items that start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;items that end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;wild&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;exact-match (quoted)&lt;/td&gt; &#xA;   &lt;td&gt;items that include &lt;code&gt;wild&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!fire&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;items that do not include &lt;code&gt;fire&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;items that do not end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;skim&lt;/code&gt; also supports the combination of tokens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Whitespace has the meaning of &lt;code&gt;AND&lt;/code&gt;. With the term &lt;code&gt;src main&lt;/code&gt;, &lt;code&gt;skim&lt;/code&gt; will search for items that match &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;|&lt;/code&gt; means &lt;code&gt;OR&lt;/code&gt; (note the spaces around &lt;code&gt;|&lt;/code&gt;). With the term &lt;code&gt;.md$ | .markdown$&lt;/code&gt;, &lt;code&gt;skim&lt;/code&gt; will search for items ends with either &lt;code&gt;.md&lt;/code&gt; or &lt;code&gt;.markdown&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OR&lt;/code&gt; has higher precedence. So &lt;code&gt;readme .md$ | .markdown$&lt;/code&gt; is grouped into &lt;code&gt;readme AND (.md$ OR .markdown$)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case that you want to use regular expressions, &lt;code&gt;skim&lt;/code&gt; provides &lt;code&gt;regex&lt;/code&gt; mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sk --regex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can switch to &lt;code&gt;regex&lt;/code&gt; mode dynamically by pressing &lt;code&gt;Ctrl-R&lt;/code&gt; (Rotate Mode).&lt;/p&gt; &#xA;&lt;h2&gt;exit code&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Exit Code&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Exit normally&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;No Match found&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;130&lt;/td&gt; &#xA;   &lt;td&gt;Abort by Ctrl-C/Ctrl-G/ESC/etc...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;The doc here is only a preview, please check the man page (&lt;code&gt;man sk&lt;/code&gt;) for a full list of options.&lt;/p&gt; &#xA;&lt;h2&gt;Keymap&lt;/h2&gt; &#xA;&lt;p&gt;Specify the bindings with comma separated pairs (no space allowed), example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sk --bind &#39;alt-a:select-all,alt-d:deselect-all&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, use &lt;code&gt;+&lt;/code&gt; to concatenate actions, such as &lt;code&gt;execute-silent(echo {} | pbcopy)+abort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;em&gt;KEY BINDINGS&lt;/em&gt; section of the man page for details.&lt;/p&gt; &#xA;&lt;h2&gt;Sort Criteria&lt;/h2&gt; &#xA;&lt;p&gt;There are five sort keys for results: &lt;code&gt;score, index, begin, end, length&lt;/code&gt;, you can specify how the records are sorted by &lt;code&gt;sk --tiebreak score,index,-begin&lt;/code&gt; or any other order you want.&lt;/p&gt; &#xA;&lt;h2&gt;Color Scheme&lt;/h2&gt; &#xA;&lt;p&gt;It is a high chance that you are a better artist than me. Luckily you won&#39;t be stuck with the default colors, &lt;code&gt;skim&lt;/code&gt; supports customization of the color scheme.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--color=[BASE_SCHEME][,COLOR:ANSI]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configuration of colors starts with the name of the base color scheme, followed by custom color mappings. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sk --color=current_bg:24&#xA;sk --color=light,fg:232,bg:255,current_bg:116,info:27&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;--color&lt;/code&gt; option in the man page for details.&lt;/p&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--ansi&lt;/code&gt;: to parse ANSI color codes (e.g., &lt;code&gt;\e[32mABC&lt;/code&gt;) of the data source&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--regex&lt;/code&gt;: use the query as regular expression to match the data source&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Advanced Topics&lt;/h1&gt; &#xA;&lt;h2&gt;Interactive mode&lt;/h2&gt; &#xA;&lt;p&gt;With &#34;interactive mode&#34;, you could invoke command dynamically. Try out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sk --ansi -i -c &#39;rg --color=always --line-number &#34;{}&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How it works?&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png&#34; alt=&#34;skim&#39;s interactive mode&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Skim could accept two kinds of source: command output or piped input&lt;/li&gt; &#xA; &lt;li&gt;Skim has two kinds of prompts: A query prompt to specify the query pattern and a command prompt to specify the &#34;arguments&#34; of the command&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-c&lt;/code&gt; is used to specify the command to execute while defaults to &lt;code&gt;SKIM_DEFAULT_COMMAND&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; is to tell skim open command prompt on startup, which will show &lt;code&gt;c&amp;gt;&lt;/code&gt; by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to further narrow down the results returned by the command, press &lt;code&gt;Ctrl-Q&lt;/code&gt; to toggle interactive mode.&lt;/p&gt; &#xA;&lt;h2&gt;Executing external programs&lt;/h2&gt; &#xA;&lt;p&gt;You can set up key bindings for starting external processes without leaving skim (&lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;execute-silent&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Press F1 to open the file with less without leaving skim&#xA;# Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)&#xA;sk --bind &#39;f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preview Window&lt;/h2&gt; &#xA;&lt;p&gt;This is a great feature of fzf that skim borrows. For example, we use &#39;ag&#39; to find the matched lines, once we narrow down to the target lines, we want to finally decide which lines to pick by checking the context around the line. &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;ag&lt;/code&gt; has an option &lt;code&gt;--context&lt;/code&gt;, skim can do better with preview window. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sk --ansi -i -c &#39;ag --color &#34;{}&#34;&#39; --preview &#34;preview.sh {}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note the &lt;a href=&#34;https://github.com/junegunn/fzf.vim/raw/master/bin/preview.sh&#34;&gt;preview.sh&lt;/a&gt; is a script to print the context given filename:lines:columns) You got things like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png&#34; alt=&#34;preview demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;If the preview command is given by the &lt;code&gt;--preview&lt;/code&gt; option, skim will replace the &lt;code&gt;{}&lt;/code&gt; with the current highlighted line surrounded by single quotes, call the command to get the output, and print the output on the preview window.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t need the whole line for invoking the command. In this case you can use &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;{1..}&lt;/code&gt;, &lt;code&gt;{..3}&lt;/code&gt; or &lt;code&gt;{1..5}&lt;/code&gt; to select the fields. The syntax is explained in the section &#34;Fields Support&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Last, you might want to configure the position of preview windows, use &lt;code&gt;--preview-window&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--preview-window up:30%&lt;/code&gt; to put the window in the up position with height 30% of the total height of skim.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--preview-window left:10:wrap&lt;/code&gt;, to specify the &lt;code&gt;wrap&lt;/code&gt; allows the preview window to wrap the output of the preview command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--preview-window wrap:hidden&lt;/code&gt; to hide the preview window at startup, later it can be shown by the action &lt;code&gt;toggle-preview&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fields support&lt;/h2&gt; &#xA;&lt;p&gt;Normally only plugin users need to understand this.&lt;/p&gt; &#xA;&lt;p&gt;For example, you have the data source with the format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;lt;filename&amp;gt;:&amp;lt;line number&amp;gt;:&amp;lt;column number&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, you want to search &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; only when typing in queries. That means when you type &lt;code&gt;21&lt;/code&gt;, you want to find a &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; that contains &lt;code&gt;21&lt;/code&gt;, but not matching line number or column number.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;sk --delimiter &#39;:&#39; --nth 1&lt;/code&gt; to achieve this.&lt;/p&gt; &#xA;&lt;p&gt;Also you can use &lt;code&gt;--with-nth&lt;/code&gt; to re-arrange the order of fields.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Range Syntax&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt; -- to specify the &lt;code&gt;num&lt;/code&gt;-th fields, starting with 1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;start..&lt;/code&gt; -- starting from the &lt;code&gt;start&lt;/code&gt;-th fields, and the rest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;..end&lt;/code&gt; -- starting from the &lt;code&gt;0&lt;/code&gt;-th field, all the way to &lt;code&gt;end&lt;/code&gt;-th field, including &lt;code&gt;end&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;start..end&lt;/code&gt; -- starting from &lt;code&gt;start&lt;/code&gt;-th field, all the way to &lt;code&gt;end&lt;/code&gt;-th field, including &lt;code&gt;end&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use as a library&lt;/h2&gt; &#xA;&lt;p&gt;Skim can be used as a library in your Rust crates.&lt;/p&gt; &#xA;&lt;p&gt;First, add skim into your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;skim = &#34;*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then try to run this simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;extern crate skim;&#xA;use skim::prelude::*;&#xA;use std::io::Cursor;&#xA;&#xA;pub fn main() {&#xA;    let options = SkimOptionsBuilder::default()&#xA;        .height(Some(&#34;50%&#34;))&#xA;        .multi(true)&#xA;        .build()&#xA;        .unwrap();&#xA;&#xA;    let input = &#34;aaaaa\nbbbb\nccc&#34;.to_string();&#xA;&#xA;    // `SkimItemReader` is a helper to turn any `BufRead` into a stream of `SkimItem`&#xA;    // `SkimItem` was implemented for `AsRef&amp;lt;str&amp;gt;` by default&#xA;    let item_reader = SkimItemReader::default();&#xA;    let items = item_reader.of_bufread(Cursor::new(input));&#xA;&#xA;    // `run_with` would read and show items from the stream&#xA;    let selected_items = Skim::run_with(&amp;amp;options, Some(items))&#xA;        .map(|out| out.selected_items)&#xA;        .unwrap_or_else(|| Vec::new());&#xA;&#xA;    for item in selected_items.iter() {&#xA;        print!(&#34;{}{}&#34;, item.output(), &#34;\n&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given an &lt;code&gt;Option&amp;lt;SkimItemReceiver&amp;gt;&lt;/code&gt;, skim will read items accordingly, do its job and bring us back the user selection including the selected items, the query, etc. Note that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SkimItemReceiver&lt;/code&gt; is &lt;code&gt;crossbeam::channel::Receiver&amp;lt;Arc&amp;lt;dyn SkimItem&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If it is none, it will invoke the given command and read items from command output&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, it will read the items from the (crossbeam) channel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Trait &lt;code&gt;SkimItem&lt;/code&gt; is provided to customize how a line could be displayed, compared and previewed. It is implemented by default for &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plus, &lt;code&gt;SkimItemReader&lt;/code&gt; is a helper to convert a &lt;code&gt;BufRead&lt;/code&gt; into &lt;code&gt;SkimItemReceiver&lt;/code&gt; (we can easily turn a &lt;code&gt;File&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt; into &lt;code&gt;BufRead&lt;/code&gt;). So that you could deal with strings or files easily.&lt;/p&gt; &#xA;&lt;p&gt;Check more examples under &lt;a href=&#34;https://github.com/lotabout/skim/tree/master/examples&#34;&gt;examples/&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;How to ignore files?&lt;/h2&gt; &#xA;&lt;p&gt;Skim invokes &lt;code&gt;find .&lt;/code&gt; to fetch a list of files for filtering. You can override that by setting the environment variable &lt;code&gt;SKIM_DEFAULT_COMMAND&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ SKIM_DEFAULT_COMMAND=&#34;fd --type f || git ls-tree -r --name-only HEAD || rg --files || find .&#34;&#xA;$ sk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could put it in your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; if you like it to be default.&lt;/p&gt; &#xA;&lt;h2&gt;Some files are not shown in Vim plugin&lt;/h2&gt; &#xA;&lt;p&gt;If you use the Vim plugin and execute the &lt;code&gt;:SK&lt;/code&gt; command, you might find some of your files not shown.&lt;/p&gt; &#xA;&lt;p&gt;As described in &lt;a href=&#34;https://github.com/lotabout/skim/issues/3&#34;&gt;#3&lt;/a&gt;, in the Vim plugin, &lt;code&gt;SKIM_DEFAULT_COMMAND&lt;/code&gt; is set to the command by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let $SKIM_DEFAULT_COMMAND = &#34;git ls-tree -r --name-only HEAD || rg --files || ag -l -g \&#34;\&#34; || find .&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That means, the files not recognized by git will not shown. Either override the default with &lt;code&gt;let $SKIM_DEFAULT_COMMAND = &#39;&#39;&lt;/code&gt; or find the missing file by yourself.&lt;/p&gt; &#xA;&lt;h1&gt;Differences to fzf&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; is a command-line fuzzy finder written in Go and &lt;a href=&#34;https://github.com/lotabout/skim&#34;&gt;skim&lt;/a&gt; tries to implement a new one in Rust!&lt;/p&gt; &#xA;&lt;p&gt;This project is written from scratch. Some decisions of implementation are different from fzf. For example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;skim&lt;/code&gt; is a binary as well as a library while fzf is only a binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;skim&lt;/code&gt; has an interactive mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;skim&lt;/code&gt; supports pre-selection&lt;/li&gt; &#xA; &lt;li&gt;The fuzzy search algorithm is different.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;UI of showing matched items. &lt;code&gt;fzf&lt;/code&gt; will show only the range matched while &lt;code&gt;skim&lt;/code&gt; will show each character matched.&lt;/del&gt; (fzf has this now)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;code&gt;skim&lt;/code&gt;&#39;s range syntax is Git style&lt;/del&gt;: now it is the same with fzf.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How to contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lotabout/skim/issues/new&#34;&gt;Create new issues&lt;/a&gt; if you meet any bugs or have any ideas. Pull requests are warmly welcomed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>typst/typst</title>
    <updated>2023-03-24T01:43:57Z</updated>
    <id>tag:github.com,2023-03-24:/typst/typst</id>
    <link href="https://github.com/typst/typst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new markup-based typesetting system that is powerful and easy to learn.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;Typst&#34; src=&#34;https://user-images.githubusercontent.com/17899797/226108480-722b770e-6313-40d7-84f2-26bebb55a281.png&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://typst.app/docs/&#34;&gt; &lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=docs&amp;amp;up_color=007aff&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app%2Fdocs&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://typst.app/&#34;&gt; &lt;img alt=&#34;Typst App&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=typst.app&amp;amp;up_color=239dad&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/2uDybryKPe&#34;&gt; &lt;img alt=&#34;Discord Server&#34; src=&#34;https://img.shields.io/discord/1054443721975922748?color=5865F2&amp;amp;label=discord&amp;amp;labelColor=555&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/typst/typst/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;Apache-2 License&#34; src=&#34;https://img.shields.io/badge/license-Apache%202-brightgreen&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Typst is a new markup-based typsetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. Typst has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in markup for the most common formatting tasks&lt;/li&gt; &#xA; &lt;li&gt;Flexible functions for everything else&lt;/li&gt; &#xA; &lt;li&gt;A tightly integrated scripting system&lt;/li&gt; &#xA; &lt;li&gt;Math typesetting, bibliography management, and more&lt;/li&gt; &#xA; &lt;li&gt;Fast compile times thanks to incremental compilation&lt;/li&gt; &#xA; &lt;li&gt;Friendly error messages in case something goes wrong&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains the Typst compiler and its CLI, which is everything you need to compile Typst documents locally. For the best writing experience, consider signing up to our &lt;a href=&#34;https://typst.app/&#34;&gt;collaborative online editor&lt;/a&gt; for free. It is currently in public beta.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://typst.app/docs/tutorial/&#34;&gt;gentle introduction&lt;/a&gt; to Typst is available in our documentation. However, if you want to see the power of Typst encapsulated in one image, here it is:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Example&#34; width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/38260698/226794868-90911832-433a-4575-be88-42d582589403.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s dissect what&#39;s going on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;em&gt;set rules&lt;/em&gt; to configure element properties like the size of pages or the numbering of headings. By setting the page height to &lt;code&gt;auto&lt;/code&gt;, it scales to fit the content. Set rules accommodate the most common configurations. If you need full control, you can also use &lt;a href=&#34;https://typst.app/docs/reference/styling/#show-rules&#34;&gt;show rules&lt;/a&gt; to completely redefine the appearance of an element.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We insert a heading with the &lt;code&gt;= Heading&lt;/code&gt; syntax. One equals sign creates a top level heading, two create a subheading and so on. Typst has more lightweight markup like this, see the &lt;a href=&#34;https://typst.app/docs/reference/syntax/&#34;&gt;syntax&lt;/a&gt; reference for a full list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://typst.app/docs/reference/math/&#34;&gt;Mathematical equations&lt;/a&gt; are enclosed in dollar signs. By adding extra spaces around the contents of a equation, we can put it into a separate block. Multi-letter identifiers are interpreted as Typst definitions and functions unless put into quotes. This way, we don&#39;t need backslashes for things like &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;sqrt&lt;/code&gt;. And &lt;code&gt;phi.alt&lt;/code&gt; applies the &lt;code&gt;alt&lt;/code&gt; modifier to the &lt;code&gt;phi&lt;/code&gt; to select a particular symbol variant.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, we get to some &lt;a href=&#34;https://typst.app/docs/reference/scripting/&#34;&gt;scripting&lt;/a&gt;. To input code into a Typst document, we can write a hashtag followed by an expression. We define two variables and a recursive function to compute the n-th fibonacci number. Then, we display the results in a center-aligned table. The table function takes its cells row-by-row. Therefore, we first pass the formulas &lt;code&gt;$F_1$&lt;/code&gt; to &lt;code&gt;$F_10$&lt;/code&gt; and then the computed fibonacci numbers. We apply the spreading operator (&lt;code&gt;..&lt;/code&gt;) to both because they are arrays and we want to pass the arrays&#39; items as individual arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Text version of the code example.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#set page(width: 10cm, height: auto)&#xA;#set heading(numbering: &#34;1.&#34;)&#xA;&#xA;= Fibonacci sequence&#xA;The Fibonacci sequence is defined through the&#xA;_recurrence relation_ $F_n = F_(n-1) + F_(n-2)$.&#xA;It can also be expressed in closed form:&#xA;&#xA;$ F_n = floor(1 / sqrt(5) phi.alt^n), quad&#xA;  phi.alt = (1 + sqrt(5)) / 2 $&#xA;&#xA;#let count = 10&#xA;#let nums = range(1, count + 1)&#xA;#let fib(n) = (&#xA;  if n &amp;lt;= 2 { 1 }&#xA;  else { fib(n - 1) + fib(n - 2) }&#xA;)&#xA;&#xA;The first #count numbers of the sequence are:&#xA;&#xA;#align(center, table(&#xA;  columns: count,&#xA;  ..nums.map(n =&amp;gt; $F_#n$),&#xA;  ..nums.map(n =&amp;gt; str(fib(n))),&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Install and use&lt;/h2&gt; &#xA;&lt;p&gt;You can get sources and pre-built binaries for the latest release of Typst from the &lt;a href=&#34;https://github.com/typst/typst/releases/&#34;&gt;releases page&lt;/a&gt;. This will give you Typst&#39;s CLI which converts Typst sources into PDFs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Creates `file.pdf` in working directory.&#xA;typst file.typ&#xA;&#xA;# Creates PDF file at the desired path.&#xA;typst path/to/source.typ path/to/output.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also watch source files and automatically recompile on changes. This is faster than compiling from scratch each time because Typst has incremental compilation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Watches source files and recompiles on changes.&#xA;typst --watch file.typ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer an integrated IDE-like experience with autocompletion and instant preview, you can also check out the &lt;a href=&#34;https://typst.app/&#34;&gt;Typst web app&lt;/a&gt;, which is currently in public beta.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;To build Typst yourself, you need to have the &lt;a href=&#34;https://rustup.rs/&#34;&gt;latest stable Rust&lt;/a&gt; installed. Then, you can build the CLI with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build -p typst-cli --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optimized binary will be stored in &lt;code&gt;target/release/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We would love to see contributions from the community. If you experience bugs, feel free to open an issue or send a PR with a fix. For new features, we would invite you to open an issue first so we can explore the design space together. If you want to contribute and are wondering how everything works, also check out the &lt;a href=&#34;https://github.com/typst/typst/raw/main/ARCHITECTURE.md&#34;&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt; file. It explains how the compiler works.&lt;/p&gt; &#xA;&lt;h2&gt;Design Principles&lt;/h2&gt; &#xA;&lt;p&gt;All of Typst has been designed with three key goals in mind: Power, simplicity, and performance. We think it&#39;s time for a system that matches the power of LaTeX, is easy to learn and use, all while being fast enough to realize instant preview. To achieve these goals, we follow three core design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simplicity through Consistency:&lt;/strong&gt; If you know how to do one thing in Typst, you should be able to transfer that knowledge to other things. If there are multiple ways to do the same thing, one of them should be at a different level of abstraction than the other. E.g. it&#39;s okay that &lt;code&gt;= Introduction&lt;/code&gt; and &lt;code&gt;#heading[Introduction]&lt;/code&gt; do the same thing because the former is just syntax sugar for the latter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Power through Composability:&lt;/strong&gt; There are two ways to make something flexible: Have a knob for everything or have a few knobs that you can combine in many ways. Typst is designed with the second way in mind. We provide systems that you can compose in ways we&#39;ve never even thought of. TeX is also in the second category, but it&#39;s a bit low-level and therefore people use LaTeX instead. But there, we don&#39;t really have that much composability. Instead, there&#39;s a package for everything (&lt;code&gt;\usepackage{knob}&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance through Incrementality:&lt;/strong&gt; All Typst language features must accommodate for incremental compilation. Luckily we have &lt;a href=&#34;https://github.com/typst/comemo/&#34;&gt;&lt;code&gt;comemo&lt;/code&gt;&lt;/a&gt;, a system for incremental compilation which does most of the hard work in the background.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>