<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T01:44:48Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0xlarry/byo_mint</title>
    <updated>2024-01-14T01:44:48Z</updated>
    <id>tag:github.com,2024-01-14:/0xlarry/byo_mint</id>
    <link href="https://github.com/0xlarry/byo_mint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A compressed NFT mint program on Solana.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;strong&gt;ByoMint - a compressed NFT (cNFT) mint program for custom minting and controlled distribution of assets on Solana.&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This program leverages &lt;strong&gt;compression on Solana&lt;/strong&gt; enabling creators to &lt;strong&gt;mint and distribute cNFTs with minter customization and control&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mainnet Program ID: GnukyHhbXhqeswaZbzDiTLZeMSHMuWNTNxw4buhS6zpg&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Accounts&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Faucet&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On creation of a &lt;code&gt;Faucet&lt;/code&gt;, an Collection NFT is minted to the Faucet. Each cNFT emitted will be part of said collection. Faucets have a &lt;code&gt;supply_cap&lt;/code&gt; that limits the amount of cNFTs that can minted to a collection. The &lt;code&gt;supply_cap&lt;/code&gt; is the total number of cNFTs that the faucet is able to emit at a given point in time. The &lt;code&gt;supply_cap&lt;/code&gt; is an mutable property that gives the creator the power to incrementally emit tokens. Faucets have a &lt;code&gt;mint_price&lt;/code&gt; that is also mutable so that cost of minting a cNFT to the collection can be updated. Once created, new merkle trees can be added to the &lt;code&gt;Facuet&lt;/code&gt; at any point in time so that collection can continue to grow as needed.&lt;/p&gt; &#xA;&lt;p&gt;When creating the &lt;code&gt;faucet&lt;/code&gt;, the creator must provide a &lt;code&gt;mint_price&lt;/code&gt; and &lt;code&gt;seller_fee_basis_points&lt;/code&gt; (royalty percentage). For each cNFT that is minted, the designated &lt;code&gt;mint_price&lt;/code&gt; is sent the &lt;code&gt;Faucet&lt;/code&gt; account as payment for the cNFT. This program hard codes a royalty split of 50/50 to the &lt;code&gt;Faucet&lt;/code&gt; and the wallet that mints the cNFT. If the cNFT is sold on secondary markets, like &lt;a href=&#34;http://tensor.trade&#34;&gt;tesnor.trade&lt;/a&gt;, the designated &lt;code&gt;seller_fee_basis_points&lt;/code&gt; sent to the &lt;code&gt;Faucet&lt;/code&gt; and the minter&#39;s wallet. Use the instruction &lt;code&gt;withdraw_fees&lt;/code&gt; as the authority of the &lt;code&gt;Faucet&lt;/code&gt; to access the funds the faucet generates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Faucet WL&lt;/strong&gt; Same as above, but with the additional &lt;code&gt;wl_collection&lt;/code&gt; that requires the minter to hold an NFT from the given collection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Metadata Map&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Metadata is assigned to cNFTs after the the token is minted. The map enables projects to customized how many layers (traits) and variants are avaialble. The number of layers is capped at 10, and the cap of variants for each layer is 255.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that the JSON metadata file, and image need to be generated using other means that this program. A suggested solution is to use a &lt;a href=&#34;https://docs.helius.dev/webhooks-and-websockets/what-are-webhooks&#34;&gt;Helius Webhook&lt;/a&gt; to trigger code to run that generates the JSON and image uploads them to &lt;a href=&#34;https://docs.shdwdrive.com/learn&#34;&gt;ShdwDrive&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BYO Mint&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This empty account is created during mint using the layers that the minter chooses. This PDA is essential for ensuring that each cNFT minted to the colleciton is unique.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BYO Mint&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This empty account is created during mint using the mint of the token from the whitelisted collection. This PDA is essential for ensuring that there is a 1:1 relationship between cNFT mints and NFTs held from the whitelisted collection.&lt;/p&gt; &#xA;&lt;h1&gt;Instructions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;create_metadata_map&lt;/code&gt; &lt;code&gt;delete_metadata_map&lt;/code&gt; &lt;code&gt;create_faucet&lt;/code&gt; &lt;code&gt;add_new_tree&lt;/code&gt; &lt;code&gt;mint&lt;/code&gt; &lt;code&gt;update_faucet&lt;/code&gt; &lt;code&gt;withdraw_fees&lt;/code&gt; &lt;code&gt;create_faucet_wl&lt;/code&gt; &lt;code&gt;add_new_tree_wl&lt;/code&gt; &lt;code&gt;mint_wl&lt;/code&gt; &lt;code&gt;update_faucet_wl&lt;/code&gt; &lt;code&gt;withdraw_fees_wl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;I created these projects to showcase this repo:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://byognome.xyz&#34;&gt;BYOGnomes&lt;/a&gt; &lt;a href=&#34;http://saga-sentients.com&#34;&gt;Saga Sentients&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TODOs + Project Extensions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add customization for royalty splits between minter/faucet&lt;/li&gt; &#xA; &lt;li&gt;NFT/SFT/SPL burn in exchange for cNFT&lt;/li&gt; &#xA; &lt;li&gt;Add bg color change ix&lt;/li&gt; &#xA; &lt;li&gt;Enable adding variants to metadata maps&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pop-os/cosmic-term</title>
    <updated>2024-01-14T01:44:48Z</updated>
    <id>tag:github.com,2024-01-14:/pop-os/cosmic-term</id>
    <link href="https://github.com/pop-os/cosmic-term" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WIP COSMIC terminal emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cosmic-term&lt;/h1&gt; &#xA;&lt;p&gt;WIP COSMIC terminal emulator, built using &lt;a href=&#34;https://docs.rs/alacritty_terminal&#34;&gt;alacritty_terminal&lt;/a&gt; that is provided by the &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt; project. &lt;code&gt;cosmic-term&lt;/code&gt; provides bidirectional rendering and ligatures with a custom renderer based on &lt;a href=&#34;https://github.com/pop-os/cosmic-text&#34;&gt;cosmic-text&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;wgpu&lt;/code&gt; feature, enabled by default, supports GPU rendering using &lt;code&gt;glyphon&lt;/code&gt; and &lt;code&gt;wgpu&lt;/code&gt;. If &lt;code&gt;wgpu&lt;/code&gt; is not enabled or fails to initialize, then rendering falls back to using &lt;code&gt;softbuffer&lt;/code&gt; and &lt;code&gt;tiny-skia&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bestinslot-xyz/OPI</title>
    <updated>2024-01-14T01:44:48Z</updated>
    <id>tag:github.com,2024-01-14:/bestinslot-xyz/OPI</id>
    <link href="https://github.com/bestinslot-xyz/OPI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Protocol Indexer, OPI, is the best-in-slot open-source indexing client for meta-protocols on Bitcoin.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OPI - Open Protocol Indexer&lt;/h1&gt; &#xA;&lt;p&gt;Open Protocol Indexer, OPI, is the &lt;strong&gt;best-in-slot open-source indexing client&lt;/strong&gt; for &lt;strong&gt;meta-protocols&lt;/strong&gt; on Bitcoin. OPI uses a fork of &lt;strong&gt;ord 0.14.0&lt;/strong&gt; with minimal changes to maintain compatibility with base layer rules. Also, OPI is built with &lt;strong&gt;modularity&lt;/strong&gt; in mind. The main indexer indexes all text/json inscriptions and modules can extend it with different meta-protocols. All modules in OPI have been built with &lt;strong&gt;reorg protection&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently OPI has modules for &lt;strong&gt;BRC-20&lt;/strong&gt; and &lt;strong&gt;Bitmap&lt;/strong&gt;, we&#39;ll add new modules over time. Pull Requests are welcomed for other meta-protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Main Meta-Protocol Indexer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Meta-Protocol indexer&lt;/strong&gt; sits in the core of OPI. It indexes &lt;strong&gt;all json/text inscriptions&lt;/strong&gt; and their &lt;strong&gt;first 2 transfers&lt;/strong&gt;. Transfer limit can be changed via &lt;code&gt;INDEX_TX_LIMIT&lt;/code&gt; variable in ord fork. This limit has been added since there are some UTXO&#39;s with a lot of inscription content and their movement floods transfers tables. Also, base indexing of most protocols only needs the first two transfers. BRC-20 becomes invalid after 2 hops, bitmap and SNS validity is calculated at inscription time.&lt;/p&gt; &#xA;&lt;h2&gt;BRC-20 Indexer / API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;BRC-20 Indexer&lt;/strong&gt; is the first module of OPI. It follows the official protocol rules hosted &lt;a href=&#34;https://layer1.gitbook.io/layer1-foundation/protocols/brc-20/indexing&#34;&gt;here&lt;/a&gt;. BRC-20 Indexer saves all historical balance changes and all BRC-20 events.&lt;/p&gt; &#xA;&lt;p&gt;In addition to indexing all events, it also calculates a block hash and cumulative hash of all events for easier db comparison. Here&#39;s the pseudocode for hash calculation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## Calculation starts at block 767430 which is the first inscription block&#xA;&#xA;EVENT_SEPARATOR = &#39;|&#39;&#xA;## max_supply, limit_per_mint, amount decimal count is the same as ticker&#39;s decimals (no trailing dot if decimals is 0)&#xA;## tickers are lowercase&#xA;for event in block_events:&#xA;  if event is &#39;deploy-inscribe&#39;:&#xA;    block_str += &#39;deploy-inscribe;&amp;lt;inscr_id&amp;gt;;&amp;lt;deployer_pkscript&amp;gt;;&amp;lt;ticker&amp;gt;;&amp;lt;max_supply&amp;gt;;&amp;lt;decimals&amp;gt;;&amp;lt;limit_per_mint&amp;gt;&#39; + EVENT_SEPARATOR&#xA;  if event is &#39;mint-inscribe&#39;:&#xA;    block_str += &#39;mint-inscribe;&amp;lt;inscr_id&amp;gt;;&amp;lt;minter_pkscript&amp;gt;;&amp;lt;ticker&amp;gt;;&amp;lt;amount&amp;gt;&#39; + EVENT_SEPARATOR&#xA;  if event is &#39;transfer-inscribe&#39;:&#xA;    block_str += &#39;transfer-inscribe;&amp;lt;inscr_id&amp;gt;;&amp;lt;source_pkscript&amp;gt;;&amp;lt;ticker&amp;gt;;&amp;lt;amount&amp;gt;&#39; + EVENT_SEPARATOR&#xA;  if event is &#39;transfer-transfer&#39;:&#xA;    ## if sent as fee, sent_pkscript is empty&#xA;    block_str += &#39;transfer-transfer;&amp;lt;inscr_id&amp;gt;;&amp;lt;source_pkscript&amp;gt;;&amp;lt;sent_pkscript&amp;gt;;&amp;lt;ticker&amp;gt;;&amp;lt;amount&amp;gt;&#39; + EVENT_SEPARATOR&#xA;&#xA;if block_str.last is EVENT_SEPARATOR: block_str.remove_last()&#xA;block_hash = sha256_hex(block_str)&#xA;## for first block last_cumulative_hash is empty&#xA;cumulative_hash = sha256_hex(last_cumulative_hash + block_hash)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is an optional block event hash reporting system pointed at &lt;a href=&#34;https://api.opi.network/report_block&#34;&gt;https://api.opi.network/report_block&lt;/a&gt;. If you want to exclude your node from this, just change &lt;code&gt;REPORT_TO_INDEXER&lt;/code&gt; variable in &lt;code&gt;brc20_index/.env&lt;/code&gt;. Also change &lt;code&gt;REPORT_NAME&lt;/code&gt; to differentiate your node from others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BRC-20 API&lt;/strong&gt; exposes activity on block (block events), balance of a wallet at the start of a given height, current balance of a wallet, block hash and cumulative hash at a given block and hash of all current balances.&lt;/p&gt; &#xA;&lt;h2&gt;Bitmap Indexer / API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bitmap Indexer&lt;/strong&gt; is the second module of OPI. It follows the official protocol rules hosted &lt;a href=&#34;https://gitbook.bitmap.land/ruleset/district-ruleset&#34;&gt;here&lt;/a&gt;. Bitmap Indexer saves all bitmap-number inscription-id pairs.&lt;/p&gt; &#xA;&lt;p&gt;In addition to indexing all pairs, it also calculates a block hash and cumulative hash of all events for easier db comparison. Here&#39;s the pseudocode for hash calculation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## Calculation starts at block 767430 which is the first inscription block&#xA;&#xA;EVENT_SEPARATOR = &#39;|&#39;&#xA;for bitmap in new_bitmaps_in_block:&#xA;  block_str += &#39;inscribe;&amp;lt;inscr_id&amp;gt;;&amp;lt;bitmap_number&amp;gt;&#39; + EVENT_SEPARATOR&#xA;&#xA;block_hash = sha256_hex(block_str)&#xA;## for first block last_cumulative_hash is empty&#xA;cumulative_hash = sha256_hex(last_cumulative_hash + block_hash)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bitmap API&lt;/strong&gt; exposes block hash and cumulative hash at a given block, hash of all bitmaps and inscription_id of a given bitmap.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;For detailed installation guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu: &lt;a href=&#34;https://raw.githubusercontent.com/bestinslot-xyz/OPI/main/INSTALL.ubuntu.md&#34;&gt;installation guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OPI uses PostgreSQL as DB. Before running the indexer, setup a PostgreSQL DB (all modules can write into different databases as well as use a single database).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build ord:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ord; cargo build --release;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install node modules&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd modules/main_index; npm install;&#xA;cd ../brc20_api; npm install;&#xA;cd ../bitmap_api; npm install;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Remove the following from &lt;code&gt;modules/main_index/node_modules/bitcoinjs-lib/src/payments/p2tr.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (pubkey &amp;amp;&amp;amp; pubkey.length) {&#xA;  if (!(0, ecc_lib_1.getEccLib)().isXOnlyPoint(pubkey))&#xA;    throw new TypeError(&#39;Invalid pubkey for p2tr&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, it cannot decode some addresses such as &lt;code&gt;512057cd4cfa03f27f7b18c2fe45fe2c2e0f7b5ccb034af4dec098977c28562be7a2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install python libraries&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install python-dotenv;&#xA;pip3 install psycopg2-binary;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setup .env files and DBs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;reset_init.py&lt;/code&gt; in each module folder (preferrably start from main_index) to initialise .env file, databases and set other necessary files.&lt;/p&gt; &#xA;&lt;h1&gt;Run&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Main Meta-Protocol Indexer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd modules/main_index; node index.js;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;BRC-20 Indexer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd modules/brc20_index; python3 brc20_index.py;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;BRC-20 API&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd modules/brc20_api; node api.js;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bitmap Indexer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd modules/bitmap_index; python3 bitmap_index.py;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bitmap API&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd modules/bitmap_api; node api.js;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop all indexers and apis (preferably starting from main indexer but actually the order shouldn&#39;t matter)&lt;/li&gt; &#xA; &lt;li&gt;Update the repo (&lt;code&gt;git pull&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Recompile ord (&lt;code&gt;cd ord; cargo build --release;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Re-run all indexers and apis&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>