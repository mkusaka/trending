<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:45:29Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>orhun/runst</title>
    <updated>2023-03-08T01:45:29Z</updated>
    <id>tag:github.com,2023-03-08:/orhun/runst</id>
    <link href="https://github.com/orhun/runst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A dead simple notification daemon 🦡&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/orhun/runst&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/orhun/runst/main/assets/runst-logo.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA; &lt;h4&gt;&lt;strong&gt;&lt;code&gt;runst&lt;/code&gt;&lt;/strong&gt; — A dead simple notification daemon 🦡&lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Desktop_notifications&#34;&gt;Desktop notifications&lt;/a&gt; are small, passive popup dialogs that notify the user of particular events in an asynchronous manner. These passive popups can automatically disappear after a short period of time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;runst&lt;/code&gt; is the server implementation of &lt;a href=&#34;https://www.freedesktop.org/wiki&#34;&gt;freedesktop.org&lt;/a&gt; - &lt;a href=&#34;https://specifications.freedesktop.org/notification-spec/notification-spec-latest.html&#34;&gt;Desktop Notifications Specification&lt;/a&gt; and it can be used to receive notifications from applications via &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/dbus/&#34;&gt;D-Bus&lt;/a&gt;. As of now, only &lt;a href=&#34;https://en.wikipedia.org/wiki/X_Window_System&#34;&gt;X11&lt;/a&gt; is supported.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/orhun/runst&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/orhun/runst/main/assets/runst-demo.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully customizable notification window (size, location, text, colors).&lt;/li&gt; &#xA; &lt;li&gt;Template-powered (&lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;Jinja2&lt;/a&gt;/&lt;a href=&#34;https://docs.djangoproject.com/en/3.1/topics/templates/&#34;&gt;Django&lt;/a&gt;) notification text.&lt;/li&gt; &#xA; &lt;li&gt;Auto-clear notifications based on a fixed time or estimated read time.&lt;/li&gt; &#xA; &lt;li&gt;Run custom OS commands based on the matched notifications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;runst&lt;/code&gt; is initially designed to show a simple notification window. On top of that, it combines customization-oriented and semi-innovative features. In the future, I&#39;m aiming to shape &lt;code&gt;runst&lt;/code&gt; functionality based on new ideas and feedback.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to &lt;a href=&#34;https://github.com/orhun/runst/issues/new&#34;&gt;submit an issue&lt;/a&gt; if you have something in mind or having a problem!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From crates.io&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;runst&lt;/code&gt; can be installed from &lt;a href=&#34;https://crates.io/crates/runst&#34;&gt;crates.io&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo install runst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The minimum supported Rust version is &lt;code&gt;1.64.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From the AUR&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;runst&lt;/code&gt; can be installed from the &lt;a href=&#34;https://aur.archlinux.org/packages?O=0&amp;amp;SeB=nd&amp;amp;K=runst&amp;amp;outdated=&amp;amp;SB=p&amp;amp;SO=d&amp;amp;PP=50&amp;amp;submit=Go&#34;&gt;AUR&lt;/a&gt; with using an &lt;a href=&#34;https://wiki.archlinux.org/title/AUR_helpers&#34;&gt;AUR helper&lt;/a&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ paru -S runst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary releases&lt;/h3&gt; &#xA;&lt;p&gt;See the available binaries for different operating systems/architectures from the &lt;a href=&#34;https://github.com/orhun/runst/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Release tarballs are signed with the following PGP key: &lt;a href=&#34;https://keyserver.ubuntu.com/pks/lookup?search=0x1B250A9F78535D1A&amp;amp;op=vindex&#34;&gt;AEF8C7261F4CEB41A448CBC41B250A9F78535D1A&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/dbus&#34;&gt;D-Bus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.gnome.org/Projects/GLib&#34;&gt;GLib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pango.gnome.org&#34;&gt;Pango&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Instructions&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/orhun/runst &amp;amp;&amp;amp; cd runst/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ CARGO_TARGET_DIR=target cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Binary will be located at &lt;code&gt;target/release/runst&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;On Xorg startup&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://raw.githubusercontent.com/orhun/runst/main/#xinitrc&#34;&gt;xinitrc&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/orhun/runst/main/#xprofile&#34;&gt;xprofile&lt;/a&gt; for autostarting &lt;code&gt;runst&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;xinitrc&lt;/h4&gt; &#xA;&lt;p&gt;If you are starting Xorg manually with &lt;a href=&#34;https://www.x.org/archive/X11R6.8.0/doc/xinit.1.html&#34;&gt;xinit&lt;/a&gt;, you can &lt;code&gt;runst&lt;/code&gt; on X server startup via &lt;a href=&#34;https://wiki.archlinux.org/title/Xinit#xinitrc&#34;&gt;xinitrc&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$HOME/.xinitrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;runst &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Long-running programs such as notification daemons should be started before the window manager, so they should either fork themself or be run in the background via appending &lt;code&gt;&amp;amp;&lt;/code&gt; sign. Otherwise, the script would halt and wait for each program to exit before executing the window manager or desktop environment.&lt;/p&gt; &#xA;&lt;p&gt;In the case of &lt;code&gt;runst&lt;/code&gt; not being available since it&#39;s started at a faster manner than the window manager, you can add a delay as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;{ sleep 2; runst; } &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;xprofile&lt;/h4&gt; &#xA;&lt;p&gt;If you are using a &lt;a href=&#34;https://wiki.archlinux.org/title/Display_manager&#34;&gt;display manager&lt;/a&gt;, you can utilize an &lt;a href=&#34;https://wiki.archlinux.org/title/Xprofile&#34;&gt;xprofile&lt;/a&gt; file which allows you to execute commands at the beginning of the X user session.&lt;/p&gt; &#xA;&lt;p&gt;The xprofile file, which is &lt;code&gt;~/.xprofile&lt;/code&gt; or &lt;code&gt;/etc/xprofile&lt;/code&gt;, can be styled similarly to &lt;a href=&#34;https://raw.githubusercontent.com/orhun/runst/main/#xinitrc&#34;&gt;xinitrc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;As a D-Bus service&lt;/h3&gt; &#xA;&lt;p&gt;You can create a D-Bus service to launch &lt;code&gt;runst&lt;/code&gt; automatically on the first notification action. For example, you can create the following service configuration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/usr/share/dbus-1/services/org.orhun.runst.service&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[D-BUS Service]&#xA;Name=org.freedesktop.Notifications&#xA;Exec=/usr/bin/runst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whenever an application sends a notification by sending a signal to &lt;code&gt;org.freedesktop.Notifications&lt;/code&gt;, D-Bus activates &lt;code&gt;runst&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, see &lt;a href=&#34;https://github.com/orhun/runst/issues/1&#34;&gt;&lt;strong&gt;#1&lt;/strong&gt;&lt;/a&gt; for systemd integration.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;runst&lt;/code&gt; can be controlled with sending commands to D-Bus via &lt;a href=&#34;https://man.archlinux.org/man/dbus-send.1.en&#34;&gt;&lt;code&gt;dbus-send(1)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dbus-send --print-reply --dest=org.freedesktop.Notifications /org/freedesktop/Notifications/ctl &#34;org.freedesktop.Notifications.${command}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available commands are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;History&lt;/code&gt;: show the last notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Close&lt;/code&gt;: close the notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CloseAll&lt;/code&gt;: close all the notifications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# show the last notification&#xA;dbus-send --print-reply \&#xA;          --dest=org.freedesktop.Notifications \&#xA;          /org/freedesktop/Notifications/ctl \&#xA;          org.freedesktop.Notifications.History&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example usage for &lt;a href=&#34;https://i3wm.org/&#34;&gt;i3&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Notification history&#xA;bindsym $mod+grave exec dbus-send --print-reply \&#xA;        --dest=org.freedesktop.Notifications /org/freedesktop/Notifications/ctl org.freedesktop.Notifications.History&#xA;&#xA;# Close notification&#xA;bindsym $mod+shift+grave exec dbus-send --print-reply \&#xA;        --dest=org.freedesktop.Notifications /org/freedesktop/Notifications/ctl org.freedesktop.Notifications.Close&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, to view the server version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dbus-send --print-reply --dest=org.freedesktop.Notifications /org/freedesktop/Notifications org.freedesktop.Notifications.GetServerInformation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;runst&lt;/code&gt; configuration file supports &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; format and the default configuration values can be found &lt;a href=&#34;https://raw.githubusercontent.com/orhun/runst/main/config/runst.toml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If exists, configuration file is read from the following default locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/runst/runst.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.runst/runst.toml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also specify a path via &lt;code&gt;RUNST_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Global configuration&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;log_verbosity&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sets the &lt;a href=&#34;https://docs.rs/log/latest/log/enum.Level.html&#34;&gt;logging verbosity&lt;/a&gt;. Possible values are &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;trace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;startup_notification&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Shows a notification at startup if set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;geometry&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sets the window geometry. The value format is &lt;code&gt;&amp;lt;width&amp;gt;x&amp;lt;height&amp;gt;+&amp;lt;x&amp;gt;+&amp;lt;y&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For setting this value, I recommend using a tool like &lt;a href=&#34;https://github.com/naelstrof/slop&#34;&gt;slop&lt;/a&gt; which helps with querying for a selection and printing the region to stdout.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;wrap_content&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, the window is resized to match the contents.&lt;/p&gt; &#xA;&lt;p&gt;If the content is larger than the window size, &lt;code&gt;geometry&lt;/code&gt; option is used for maximum width and height.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;font&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sets the font to use for the window.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;template&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sets the template for the notification message. The syntax is based on &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;Jinja2&lt;/a&gt; and &lt;a href=&#34;https://docs.djangoproject.com/en/3.1/topics/templates/&#34;&gt;Django&lt;/a&gt; templates.&lt;/p&gt; &#xA;&lt;p&gt;Simply, there are 3 kinds of delimiters:&lt;/p&gt; &#xA;&lt;!-- {% raw %} --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; for expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{%&lt;/code&gt; or &lt;code&gt;{%-&lt;/code&gt; and &lt;code&gt;%}&lt;/code&gt; or &lt;code&gt;-%}&lt;/code&gt; for statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{#&lt;/code&gt; and &lt;code&gt;#}&lt;/code&gt; for comments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- {% endraw %} --&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://tera.netlify.app/docs/#templates&#34;&gt;Tera documentation&lt;/a&gt; for more information about &lt;a href=&#34;https://tera.netlify.app/docs/#control-structures&#34;&gt;control structures&lt;/a&gt;, &lt;a href=&#34;https://tera.netlify.app/docs/#built-ins&#34;&gt;built-in filters&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;h5&gt;Context&lt;/h5&gt; &#xA;&lt;p&gt;Context is the model that holds the required data for template rendering. The &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34;&gt;JSON&lt;/a&gt; format is used in the following example for the representation of a context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;app_name&#34;: &#34;runst&#34;,&#xA;  &#34;summary&#34;: &#34;example&#34;,&#xA;  &#34;body&#34;: &#34;this is a notification 🦡&#34;,&#xA;  &#34;urgency&#34;: &#34;normal&#34;,&#xA;  &#34;unread_count&#34;: 1,&#xA;  &#34;timestamp&#34;: 1672426610&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Styling&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pango.gnome.org/&#34;&gt;Pango&lt;/a&gt; is used for text rendering. The markup documentation can be found &lt;a href=&#34;https://docs.gtk.org/Pango/pango_markup.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A few examples would be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt;&lt;/code&gt;: &lt;strong&gt;bold text&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;span foreground=&#34;blue&#34;&amp;gt;blue text&amp;lt;/span&amp;gt;&lt;/code&gt;: &lt;span style=&#34;color:blue&#34;&gt;blue text&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;tt&amp;gt;monospace text&amp;lt;/tt&amp;gt;&lt;/code&gt;: &lt;tt&gt;monospace text&lt;/tt&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Urgency configuration&lt;/h3&gt; &#xA;&lt;p&gt;There are 3 levels of urgency defined in the &lt;a href=&#34;https://specifications.freedesktop.org/notification-spec/notification-spec-latest.html&#34;&gt;Freedesktop&lt;/a&gt; specification and they define the importance of the notification.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;low&lt;/code&gt;: e.g. &#34;joe signed on&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;normal&lt;/code&gt;: e.g. &#34;you got mail&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;critical&lt;/code&gt;: e.g. &#34;your computer is on fire!&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can configure &lt;code&gt;runst&lt;/code&gt; to act differently based on these urgency levels. For this, there need to be 3 different sections defined in the configuration file. Each of these sections has the following fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[urgency_{level}] # urgency_low, urgency_normal or urgency_critical&#xA;    background = &#34;#000000&#34; # background color&#xA;    foreground = &#34;#ffffff&#34; # foreground color&#xA;    timeout = 10&#xA;    auto_clear = true&#xA;    text = &#34;normal&#34;&#xA;    custom_commands = []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the default timeout value (in seconds) if the notification has no timeout specified by the sender. If the timeout is 0, the notification is not automatically closed (i.e. it never expires).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;auto_clear&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, the &lt;strong&gt;estimated read time&lt;/strong&gt; of the notification is calculated and it is used as the timeout. This is useful if you want the notifications to disappear as you finish reading them.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;text&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the custom text for the urgency level and can be used in &lt;a href=&#34;https://raw.githubusercontent.com/orhun/runst/main/#context&#34;&gt;template context&lt;/a&gt; as &lt;code&gt;urgency&lt;/code&gt;. If it is not set, the corresponding urgency level is used (e.g. &#34;low&#34;, &#34;normal&#34; or &#34;critical&#34;).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;custom_commands&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;With using this option, you can run custom OS commands based on urgency levels and the notification contents. The basic usage is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;custom_commands = [&#xA;    { command = &#39;echo &#34;{{app_name}} {{summary}} {{body}}&#34;&#39; } # echoes the notification to stdout&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As shown in the example above, you can specify an arbitrary command via &lt;code&gt;command&lt;/code&gt; which is also processed through the template engine. This means that you can use the same &lt;a href=&#34;https://raw.githubusercontent.com/orhun/runst/main/#context&#34;&gt;template context&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The filtering is done by matching the fields in JSON via using &lt;code&gt;filter&lt;/code&gt; along with the &lt;code&gt;command&lt;/code&gt;. For example, if you want to play a custom notification sound for a certain application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;custom_commands = [&#xA;  { filter = &#39;{ &#34;app_name&#34;:&#34;notify-send&#34; }&#39;, command = &#39;aplay notification.wav&#39; },&#xA;  { filter = &#39;{ &#34;app_name&#34;:&#34;weechat&#34; }&#39;, command = &#39;aplay irc.wav&#39; }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JSON filter can have the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;app_name&lt;/code&gt;: Name of the application that sends the notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;summary&lt;/code&gt;: Summary of the notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Body of the notification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these fields is matched using regex and you can combine them as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;custom_commands = [&#xA;  { filter = &#39;{ &#34;app_name&#34;:&#34;telegram|discord|.*chat$&#34;,&#34;body&#34;:&#34;^hello.*&#34; }&#39;, command = &#39;gotify push -t &#34;{{app_name}}&#34; &#34;someone said hi!&#34;&#39; }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this hypothetical example, we are sending a &lt;a href=&#34;https://gotify.net/&#34;&gt;Gotify&lt;/a&gt; notification when someone says hi to us in any chatting application matched by the regex.&lt;/p&gt; &#xA;&lt;h2&gt;Why this exists?&lt;/h2&gt; &#xA;&lt;p&gt;I have been a user of &lt;a href=&#34;https://github.com/dunst-project/dunst&#34;&gt;dunst&lt;/a&gt; for a long time. However, they made some &lt;a href=&#34;https://github.com/dunst-project/dunst/issues/940&#34;&gt;uncool breaking changes&lt;/a&gt; in &lt;a href=&#34;https://github.com/dunst-project/dunst/releases/tag/v1.7.0&#34;&gt;v1.7.0&lt;/a&gt; and it completely broke my configuration. That day, I refused to update &lt;code&gt;dunst&lt;/code&gt; (I was too lazy to re-configure) and decided to write my own notification server using Rust.&lt;/p&gt; &#xA;&lt;p&gt;I wanted to keep &lt;code&gt;runst&lt;/code&gt; simple since the way I use &lt;code&gt;dunst&lt;/code&gt; was really simple. I was only showing an overlay window on top of &lt;a href=&#34;https://github.com/i3/i3status&#34;&gt;i3status&lt;/a&gt; as shown below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/orhun/runst/main/assets/runst-demo2.gif&#34; alt=&#34;runst use case&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And that&#39;s how &lt;code&gt;runst&lt;/code&gt; is born.&lt;/p&gt; &#xA;&lt;h2&gt;Similar projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Toqozz/wired-notify&#34;&gt;wired-notify&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License Version 2.0&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;The MIT License&lt;/a&gt; at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2022-2023, &lt;a href=&#34;mailto:orhunparmaksiz@gmail.com&#34;&gt;Orhun Parmaksız&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tweedegolf/mailcrab</title>
    <updated>2023-03-08T01:45:29Z</updated>
    <id>tag:github.com,2023-03-08:/tweedegolf/mailcrab</id>
    <link href="https://github.com/tweedegolf/mailcrab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Email test server for development, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tweedegolf/mailcrab/main/frontend/img/mailcrab.svg?sanitize=true&#34; width=&#34;400&#34; alt=&#34;MailCrab logo&#34;&gt; &#xA;&lt;h1&gt;MailCrab&lt;/h1&gt; &#xA;&lt;p&gt;Email test server for development, written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/mailhog/MailHog&#34;&gt;MailHog&lt;/a&gt; and &lt;a href=&#34;https://mailcatcher.me/&#34;&gt;MailCatcher&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MailCrab was created as an exercise in Rust, trying out &lt;a href=&#34;https://github.com/tokio-rs/axum&#34;&gt;Axum&lt;/a&gt; and functional components with &lt;a href=&#34;https://yew.rs/&#34;&gt;Yew&lt;/a&gt;, but most of all because it is really enjoyable to write Rust code.&lt;/p&gt; &#xA;&lt;h2&gt;TLDR&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -p 1080:1080 -p 1025:1025 marlonb/mailcrab:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accept-all SMTP server&lt;/li&gt; &#xA; &lt;li&gt;Web interface to view and inspect all incoming email&lt;/li&gt; &#xA; &lt;li&gt;View formatted mail, download attachments, view headers or the complete raw mail contents&lt;/li&gt; &#xA; &lt;li&gt;Runs on all &lt;code&gt;amd64&lt;/code&gt; and &lt;code&gt;arm64&lt;/code&gt; platforms using docker&lt;/li&gt; &#xA; &lt;li&gt;Just a 7.77 MB docker image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tweedegolf/mailcrab/main/frontend/img/screen.png&#34; alt=&#34;MailCrab screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technical overview&lt;/h2&gt; &#xA;&lt;p&gt;Both the backend server and the fontend are written in Rust. The backend receives email over an unencrypted connection on a configurable port. All email is stored in memory while the application is running. An API exposes all received email:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/api/messages&lt;/code&gt; return all message metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/api/message/[id]&lt;/code&gt; returns a complete message, given its &lt;code&gt;id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/ws&lt;/code&gt; send email metadata to each connected client when a new email is received&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The frontend initially performs a call to &lt;code&gt;/api/messages&lt;/code&gt; to receive all existing email metadata and then subscribes for new messages using the websocket connection. When opening a message, the &lt;code&gt;/api/message/[id]&lt;/code&gt; endpoint is used to retrieve the complete message body and raw email.&lt;/p&gt; &#xA;&lt;p&gt;The backend also accepts a few commands over the websocket, to mark a message as opened, to delete a single message or delete all messages.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;p&gt;To run MailCrab only docker is required. Start MailCrab using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -p 1080:1080 -p 1025:1025 marlonb/mailcrab:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open a browser and navigate to &lt;a href=&#34;http://localhost:1080&#34;&gt;http://localhost:1080&lt;/a&gt; to view the web interface.&lt;/p&gt; &#xA;&lt;h3&gt;Ports&lt;/h3&gt; &#xA;&lt;p&gt;The default SMTP port is 1025, the default HTTP port is 1080. You can configure the SMTP and HTTP port using environment variables (&lt;code&gt;SMTP_PORT&lt;/code&gt; and &lt;code&gt;HTTP_PORT&lt;/code&gt;), or by exposing them on different ports using docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -p 3000:1080 -p 2525:1025 marlonb/mailcrab:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Path prefix&lt;/h3&gt; &#xA;&lt;p&gt;You can configure a prefix path for the web interface by setting and environment variable named &lt;code&gt;MAILCRAB_PREFIX&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm --env MAILCRAB_PREFIX=emails -p 1080:1080 -p 1025:1025 marlonb/mailcrab:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The web interface will also be served at &lt;a href=&#34;http://localhost:1080/emails/&#34;&gt;http://localhost:1080/emails/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;docker compose&lt;/h3&gt; &#xA;&lt;p&gt;Usage in a &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;3.8&#34;&#xA;services:&#xA;    mailcrab:&#xA;        image: marlonb/mailcrab:latest&#xA;        ports:&#xA;            - &#34;1080:1080&#34;&#xA;            - &#34;1025:1025&#34;&#xA;        networks: [default]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;Rust&lt;/a&gt; and &lt;a href=&#34;https://trunkrs.dev/&#34;&gt;Trunk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Add wasm as target if it it not present after following the install instructions for Trunk&#xA;rustup target add wasm32-unknown-unknown&#xA;&#xA;# clone the code&#xA;git clone git@github.com:tweedegolf/mailcrab.git&#xA;&#xA;# start the backend&#xA;cd backend&#xA;cargo run&#xA;&#xA;# serve the frontend (in a new terminal window)&#xA;cd ../frontend&#xA;trunk serve&#xA;&#xA;# optionally send test messages in an interval&#xA;cd ../backend&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sigoden/aichat</title>
    <updated>2023-03-08T01:45:29Z</updated>
    <id>tag:github.com,2023-03-08:/sigoden/aichat</id>
    <link href="https://github.com/sigoden/aichat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful ChatGPT command line tool that allows easy chat with ChatGPT-3.5 in a terminal.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AIChat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sigoden/aichat/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/sigoden/aichat/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/aichat&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/aichat.svg?sanitize=true&#34; alt=&#34;Crates&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A powerful ChatGPT command line tool that allows easy chat with ChatGPT-3.5 in a terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4012553/223005945-3450cbde-b383-434b-9049-d61877f76a4f.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;With cargo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --force aichat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binaries on macOS, Linux, Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://github.com/sigoden/aichat/releases&#34;&gt;Github Releases&lt;/a&gt;, unzip and add opscan to your $PATH.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predefine AI &lt;a href=&#34;https://raw.githubusercontent.com/sigoden/aichat/main/#roles&#34;&gt;roles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use GPT prompt easily&lt;/li&gt; &#xA; &lt;li&gt;Powerful &lt;a href=&#34;https://raw.githubusercontent.com/sigoden/aichat/main/#chat-repl&#34;&gt;Chat REPL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Markdown highlight&lt;/li&gt; &#xA; &lt;li&gt;Stream output&lt;/li&gt; &#xA; &lt;li&gt;Multiline input&lt;/li&gt; &#xA; &lt;li&gt;Proxy support&lt;/li&gt; &#xA; &lt;li&gt;Save chat messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;p&gt;On first launch, aichat will guide you through configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; No config file, create a new one? Yes&#xA;&amp;gt; Openai API Key: sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#xA;&amp;gt; Use proxy? Yes&#xA;&amp;gt; Set proxy: socks5://127.0.0.1:1080&#xA;&amp;gt; Save chat messages Yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After setting, it will automatically create the configuration file. Of course, you can also manually set the configuration file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api_key: &#34;&amp;lt;YOUR SECRET API KEY&amp;gt;&#34;  # Request via https://platform.openai.com/account/api-keys&#xA;temperature: 1.0                  # optional, see https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature&#xA;save: true                        # optional, If set to true, aichat will save chat messages to message.md&#xA;highlight: true                   # optional, Set false to turn highlight&#xA;proxy: &#34;socks5://127.0.0.1:1080&#34;  # optional, set proxy server. e.g. http://127.0.0.1:8080 or socks5://127.0.0.1:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can specify the configuration directory through &lt;code&gt;$AICHAT_CONFIG_DIR&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Roles&lt;/h3&gt; &#xA;&lt;p&gt;We can let ChatGPT play a certain role through &lt;code&gt;prompt&lt;/code&gt; to make it better generate what we want.&lt;/p&gt; &#xA;&lt;p&gt;We can predefine a batch of roles in &lt;code&gt;roles.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, we define a role.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: shell&#xA;  prompt: &amp;gt;&#xA;    I want you to act as a linux shell expert.&#xA;    I want you to answer only with bash code.&#xA;    Do not write explanations.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let ChatGPT answer questions in the role of a linux shell expert.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;〉.role shell&#xA;&#xA;〉resize app.png to 256x256&#xA;convert app.png -resize 256x256 app.png&#xA;&#xA;〉 extract password protected app.zip to /tmp/app&#xA;unzip -P password app.zip -d /tmp/app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;A powerful chatgpt cli.&#xA;&#xA;Usage: aichat [OPTIONS] [TEXT]...&#xA;&#xA;Arguments:&#xA;  [TEXT]...  Input text&#xA;&#xA;Options:&#xA;  -H, --no-highlight  Turn off highlight&#xA;  -L, --list-roles    List all roles&#xA;  -r, --role &amp;lt;ROLE&amp;gt;   Select a role&#xA;  -h, --help          Print help&#xA;  -V, --version       Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aichat calculate 25.6 + 32.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aichat -r shell flip the image horizontally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter Chat REPL if no text input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ aichat&#xA;Welcome to aichat 0.4.0&#xA;Type &#34;.help&#34; for more information.&#xA;〉&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;aichat can accept pipe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# convert toml to json&#xA;cat Cargo.toml | aichat -H turn toml below to json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Chat REPL&lt;/h2&gt; &#xA;&lt;p&gt;aichat has a powerful Chat REPL.&lt;/p&gt; &#xA;&lt;p&gt;Tle Chat REPL supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emacs keybinding&lt;/li&gt; &#xA; &lt;li&gt;command autocompletion&lt;/li&gt; &#xA; &lt;li&gt;history search&lt;/li&gt; &#xA; &lt;li&gt;fish-style history autosuggestion hints&lt;/li&gt; &#xA; &lt;li&gt;mulitline input&lt;/li&gt; &#xA; &lt;li&gt;undo support&lt;/li&gt; &#xA; &lt;li&gt;clipboard integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chat REPL also provide many commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Welcome to aichat 0.4.0&#xA;Type &#34;.help&#34; for more information.&#xA;〉.help&#xA;.info           Print the information&#xA;.set            Modify the configuration temporarily&#xA;.role           Select a role&#xA;.clear role     Clear the currently selected role&#xA;.prompt         Add prompt, aka create a temporary role&#xA;.history        Print the history&#xA;.clear history  Clear the history&#xA;.clear screen   Clear the screen&#xA;.multiline      Enter multiline editor mode&#xA;.copy           Copy last reply message&#xA;.help           Print this help message&#xA;.exit           Exit the REPL&#xA;&#xA;Press Ctrl+C to abort session, Ctrl+D to exit the REPL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View current configuration information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;〉.info&#xA;config_file         /home/alice/.config/aichat/config.yaml&#xA;roles_file          /home/alice/.config/aichat/roles.yaml&#xA;messages_file       /home/alice/.config/aichat/messages.md&#xA;role                -&#xA;api_key             sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#xA;temperature         -&#xA;save                true&#xA;highlight           true&#xA;proxy               -&#xA;dry_run             false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify the configuration temporarily&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;〉.set highlight false&#xA;〉.set save false&#xA;〉.set temperature 1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Input multiline text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;〉.multiline {convert json below to toml&#xA;::: {&#xA;:::   &#34;an&#34;: [&#xA;:::     &#34;arbitrarily&#34;,&#xA;:::     &#34;nested&#34;&#xA;:::   ],&#xA;:::   &#34;data&#34;: &#34;structure&#34;&#xA;::: }&#xA;::: }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use GPT Prompt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you set up a prompt, every message sent later will carry the prompt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;〉.prompt {&#xA;:::     I want you to translate the sentences I wrote into emojis.&#xA;:::     I will write the sentence, and you will express it with emojis.&#xA;:::     I don&#39;t want you to reply with anything but emoji.&#xA;::: }&#xA;Done&#xA;&#xA;〉You are a genius&#xA;👉🧠💡👨‍🎓&#xA;&#xA;〉I&#39;m embarrassed&#xA;🙈😳&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.prompt&lt;/code&gt; actually creates a temporary role called &lt;code&gt;%TEMP%&lt;/code&gt; internally, so you run &lt;code&gt;.clear role&lt;/code&gt; to clear the prompt.&lt;/p&gt; &#xA;&lt;p&gt;When you are satisfied with the prompt, add it to &lt;code&gt;roles.yaml&lt;/code&gt; for later use.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy last reply message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The message may be highlighted, and when copied, you will find that they are different from the original Markdown text.&lt;/p&gt; &#xA;&lt;p&gt;At this point you need to use &lt;code&gt;.copy&lt;/code&gt; to copy the original text to the clipboard.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2023 aichat-developers.&lt;/p&gt; &#xA;&lt;p&gt;aichat is made available under the terms of either the MIT License or the Apache License 2.0, at your option.&lt;/p&gt; &#xA;&lt;p&gt;See the LICENSE-APACHE and LICENSE-MIT files for license details.&lt;/p&gt;</summary>
  </entry>
</feed>