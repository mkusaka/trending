<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-23T01:36:23Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gorules/zen</title>
    <updated>2025-08-23T01:36:23Z</updated>
    <id>tag:github.com,2025-08-23:/gorules/zen</id>
    <link href="https://github.com/gorules/zen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source Business Rules Engine for your Rust, NodeJS, Python, Go, Kotlin (JVM) and Java applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Business Rules Engine&lt;/h1&gt; &#xA;&lt;p&gt;ZEN Engine is a cross-platform, Open-Source Business Rules Engine (BRE). It is written in &lt;strong&gt;Rust&lt;/strong&gt; and provides native bindings for &lt;strong&gt;NodeJS&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt; and &lt;strong&gt;Go&lt;/strong&gt;. ZEN Engine allows to load and execute &lt;a href=&#34;https://docs.gorules.io/reference/json-decision-model-jdm&#34;&gt;JSON Decision Model (JDM)&lt;/a&gt; from JSON files.&lt;/p&gt; &#xA;&lt;img width=&#34;800&#34; alt=&#34;Open-Source Rules Engine&#34; src=&#34;https://gorules.io/images/jdm-editor.gif&#34; /&gt; &#xA;&lt;p&gt;An open-source React editor is available on our &lt;a href=&#34;https://github.com/gorules/jdm-editor&#34;&gt;JDM Editor&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;ZEN Engine is built as embeddable BRE for your &lt;strong&gt;Rust&lt;/strong&gt;, &lt;strong&gt;NodeJS&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt; or &lt;strong&gt;Go&lt;/strong&gt; applications. It parses JDM from JSON content. It is up to you to obtain the JSON content, e.g. from file system, database or service call.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;p&gt;List of platforms where Zen Engine is natively available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NodeJS&lt;/strong&gt; - &lt;a href=&#34;https://github.com/gorules/zen/raw/master/bindings/nodejs/README.md&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://gorules.io/docs/developers/bre/engines/nodejs&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://www.npmjs.com/package/@gorules/zen-engine&#34;&gt;npmjs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; - &lt;a href=&#34;https://github.com/gorules/zen/raw/master/bindings/python/README.md&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://gorules.io/docs/developers/bre/engines/python&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://pypi.org/project/zen-engine/&#34;&gt;pypi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt; - &lt;a href=&#34;https://github.com/gorules/zen-go&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://gorules.io/docs/developers/bre/engines/go&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust (Core)&lt;/strong&gt; - &lt;a href=&#34;https://github.com/gorules/zen&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://gorules.io/docs/developers/bre/engines/rust&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://crates.io/crates/zen-engine&#34;&gt;crates.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a complete &lt;strong&gt;Business Rules Management Systems (BRMS)&lt;/strong&gt; solution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gorules.io&#34;&gt;Self-hosted BRMS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gorules.io/signin/verify-email&#34;&gt;GoRules Cloud BRMS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;zen-engine = &#34;0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use serde_json::json;&#xA;use zen_engine::DecisionEngine;&#xA;use zen_engine::model::DecisionContent;&#xA;&#xA;async fn evaluate() {&#xA;    let decision_content: DecisionContent = serde_json::from_str(include_str!(&#34;jdm_graph.json&#34;)).unwrap();&#xA;    let engine = DecisionEngine::default();&#xA;    let decision = engine.create_decision(decision_content.into());&#xA;&#xA;    let result = decision.evaluate(&amp;amp;json!({ &#34;input&#34;: 12 })).await;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced use cases visit &lt;a href=&#34;https://gorules.io/docs/developers/bre/engines/rust&#34;&gt;Rust Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;JSON Decision Model (JDM)&lt;/h2&gt; &#xA;&lt;p&gt;GoRules JDM (JSON Decision Model) is a modeling framework designed to streamline the representation and implementation of decision models.&lt;/p&gt; &#xA;&lt;h4&gt;Understanding GoRules JDM&lt;/h4&gt; &#xA;&lt;p&gt;At its core, GoRules JDM revolves around the concept of decision models as interconnected graphs stored in JSON format. These graphs capture the intricate relationships between various decision points, conditions, and outcomes in a GoRules Zen-Engine.&lt;/p&gt; &#xA;&lt;p&gt;Graphs are made by linking nodes with edges, which act like pathways for moving information from one node to another, usually from the left to the right.&lt;/p&gt; &#xA;&lt;p&gt;The Input node serves as an entry for all data relevant to the context, while the Output nodes produce the result of decision-making process. The progression of data follows a path from the Input Node to the Output Node, traversing all interconnected nodes in between. As the data flows through this network, it undergoes evaluation at each node, and connections determine where the data is passed along the graph.&lt;/p&gt; &#xA;&lt;p&gt;To see JDM Graph in action you can use &lt;a href=&#34;https://editor.gorules.io&#34;&gt;Free Online Editor&lt;/a&gt; with built in Simulator.&lt;/p&gt; &#xA;&lt;p&gt;There are 5 main node types in addition to a graph Input Node (Request) and Output Node (Response):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decision Table Node&lt;/li&gt; &#xA; &lt;li&gt;Switch Node&lt;/li&gt; &#xA; &lt;li&gt;Function Node&lt;/li&gt; &#xA; &lt;li&gt;Expression Node&lt;/li&gt; &#xA; &lt;li&gt;Decision Node&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Decision Table Node&lt;/h3&gt; &#xA;&lt;h4&gt;Overview&lt;/h4&gt; &#xA;&lt;p&gt;Tables provide a structured representation of decision-making processes, allowing developers and business users to express complex rules in a clear and concise manner.&lt;/p&gt; &#xA;&lt;img width=&#34;960&#34; alt=&#34;Decision Table&#34; src=&#34;https://gorules.io/images/decision-table.png&#34; /&gt; &#xA;&lt;h4&gt;Structure&lt;/h4&gt; &#xA;&lt;p&gt;At the core of the Decision Table is its schema, defining the structure with inputs and outputs. Inputs encompass business-friendly expressions using the ZEN Expression Language, accommodating a range of conditions such as equality, numeric comparisons, boolean values, date time functions, array functions and more. The schema&#39;s outputs dictate the form of results generated by the Decision Table. Inputs and outputs are expressed through a user-friendly interface, often resembling a spreadsheet. This facilitates easy modification and addition of rules, enabling business users to contribute to decision logic without delving into intricate code.&lt;/p&gt; &#xA;&lt;h4&gt;Evaluation Process&lt;/h4&gt; &#xA;&lt;p&gt;Decision Tables are evaluated row by row, from top to bottom, adhering to a specified hit policy. Single row is evaluated via Inputs columns, from left to right. Each input column represents &lt;code&gt;AND&lt;/code&gt; operator. If cell is empty that column is evaluated &lt;strong&gt;truthfully&lt;/strong&gt;, independently of the value.&lt;/p&gt; &#xA;&lt;p&gt;If a single cell within a row fails (due to error, or otherwise), the row is skipped.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HitPolicy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The hit policy determines the outcome calculation based on matching rules.&lt;/p&gt; &#xA;&lt;p&gt;The result of the evaluation is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;an object&lt;/strong&gt; if the hit policy of the decision table is &lt;code&gt;first&lt;/code&gt; and a rule matched. The structure is defined by the output fields. Qualified field names with a dot (.) inside lead to nested objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;null&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt; if no rule matched in &lt;code&gt;first&lt;/code&gt; hit policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;an array of objects&lt;/strong&gt; if the hit policy of the decision table is &lt;code&gt;collect&lt;/code&gt; (one array item for each matching rule) or empty array if no rules match&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Inputs&lt;/h4&gt; &#xA;&lt;p&gt;In the assessment of rules or rows, input columns embody the &lt;code&gt;AND&lt;/code&gt; operator. The values typically consist of (qualified) names, such as &lt;code&gt;customer.country&lt;/code&gt; or &lt;code&gt;customer.age&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two types of evaluation of inputs, &lt;code&gt;Unary&lt;/code&gt; and &lt;code&gt;Expression&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unary Evaluation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unary evaluation is usually used when we would like to compare single fields from incoming context separately, for example &lt;code&gt;customer.country&lt;/code&gt; and &lt;code&gt;cart.total&lt;/code&gt; . It is activated when a column has &lt;code&gt;field&lt;/code&gt; defined in its schema.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;customer&#34;: {&#xA;    &#34;country&#34;: &#34;US&#34;&#xA;  },&#xA;  &#34;cart&#34;: {&#xA;    &#34;total&#34;: 1500&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;960&#34; alt=&#34;Decision Table Unary Test&#34; src=&#34;https://gorules.io/images/decision-table.png&#34; /&gt; &#xA;&lt;p&gt;This evaluation translates to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IF customer.country == &#39;US&#39; AND cart.total &amp;gt; 1000 THEN {&#34;fees&#34;: {&#34;percent&#34;: 2}}&#xA;ELSE IF customer.country == &#39;US&#39; THEN {&#34;fees&#34;: {&#34;flat&#34;: 30}}&#xA;ELSE IF customer.country == &#39;CA&#39; OR customer.country == &#39;MX&#39; THEN {&#34;fees&#34;: {&#34;flat&#34;: 50}}&#xA;ELSE {&#34;fees&#34;: {&#34;flat&#34;: 150}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List shows basic example of the unary tests in the Input Fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Input entry&lt;/th&gt; &#xA;   &lt;th&gt;Input Expression&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;A&#34;&lt;/td&gt; &#xA;   &lt;td&gt;the field equals &#34;A&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;A&#34;, &#34;B&#34;&lt;/td&gt; &#xA;   &lt;td&gt;the field is either &#34;A&#34; or &#34;B&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;36&lt;/td&gt; &#xA;   &lt;td&gt;the numeric value equals 36&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt; 36&lt;/td&gt; &#xA;   &lt;td&gt;a value less than 36&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt; 36&lt;/td&gt; &#xA;   &lt;td&gt;a value greater than 36&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[20..39]&lt;/td&gt; &#xA;   &lt;td&gt;a value between 20 and 39 (inclusive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20,39&lt;/td&gt; &#xA;   &lt;td&gt;a value either 20 or 39&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;20, &amp;gt;39&lt;/td&gt; &#xA;   &lt;td&gt;a value either less than 20 or greater than 39&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;the boolean value true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;the boolean value false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;any value, even null/undefined&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;the value null or undefined&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: For the full list please visit &lt;a href=&#34;https://gorules.io/docs/rules-engine/expression-language/&#34;&gt;ZEN Expression Language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Expression Evaluation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Expression evaluation is used when we would like to create more complex evaluation logic inside single cell. It allows us to compare multiple fields from the incoming context inside same cell.&lt;/p&gt; &#xA;&lt;p&gt;It can be used by providing an empty &lt;code&gt;Selector (field)&lt;/code&gt; inside column configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;transaction&#34;: {&#xA;    &#34;country&#34;: &#34;US&#34;,&#xA;    &#34;createdAt&#34;: &#34;2023-11-20T19:00:25Z&#34;,&#xA;    &#34;amount&#34;: 10000&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;960&#34; alt=&#34;Decision Table Expression&#34; src=&#34;https://gorules.io/images/decision-table-expression.png&#34; /&gt; &#xA;&lt;pre&gt;&lt;code&gt;IF time(transaction.createdAt) &amp;gt; time(&#34;17:00:00&#34;) AND transaction.amount &amp;gt; 1000 THEN {&#34;status&#34;: &#34;reject&#34;}&#xA;ELSE {&#34;status&#34;: &#34;approve&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For the full list please visit &lt;a href=&#34;https://gorules.io/docs/rules-engine/expression-language/&#34;&gt;ZEN Expression Language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Outputs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output columns serve as the blueprint for the data that the decision table will generate when the conditions are met during evaluation.&lt;/p&gt; &#xA;&lt;p&gt;When a row in the decision table satisfies its specified conditions, the output columns determine the nature and structure of the information that will be returned. Each output column represents a distinct field, and the collective set of these fields forms the output or result associated with the validated row. This mechanism allows decision tables to precisely define and control the data output.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;860&#34; alt=&#34;Decision Table Output&#34; src=&#34;https://gorules.io/images/decision-table-output.png&#34; /&gt; &#xA;&lt;p&gt;And the result would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;flatProperty&#34;: &#34;A&#34;,&#xA;  &#34;output&#34;: {&#xA;    &#34;nested&#34;: {&#xA;      &#34;property&#34;: &#34;B&#34;&#xA;    },&#xA;    &#34;property&#34;: 36&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Switch Node (NEW)&lt;/h3&gt; &#xA;&lt;p&gt;The Switch node in GoRules JDM introduces a dynamic branching mechanism to decision models, enabling the graph to diverge based on conditions.&lt;/p&gt; &#xA;&lt;p&gt;Conditions are written in a Zen Expression Language.&lt;/p&gt; &#xA;&lt;p&gt;By incorporating the Switch node, decision models become more flexible and context-aware. This capability is particularly valuable in scenarios where diverse decision logic is required based on varying inputs. The Switch node efficiently manages branching within the graph, enhancing the overall complexity and realism of decision models in GoRules JDM, making it a pivotal component for crafting intelligent and adaptive systems.&lt;/p&gt; &#xA;&lt;p&gt;The Switch node preserves the incoming data without modification; it forwards the entire context to the output branch( es).&lt;/p&gt; &#xA;&lt;img width=&#34;960&#34; alt=&#34;Switch / Branching&#34; src=&#34;https://gorules.io/images/decision-graph.png&#34; /&gt; &#xA;&lt;h4&gt;HitPolicy&lt;/h4&gt; &#xA;&lt;p&gt;There are two HitPolicy options for the switch node, &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;collect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the context of a first hit policy, the graph branches to the initial matching condition, analogous to the behavior observed in a table. Conversely, under a collect hit policy, the graph extends to all branches where conditions hold true, allowing branching to multiple paths.&lt;/p&gt; &#xA;&lt;p&gt;Note: If there are multiple edges from the same condition, there is no guaranteed order of execution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Available from:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 0.16.0&lt;/li&gt; &#xA; &lt;li&gt;NodeJS 0.13.0&lt;/li&gt; &#xA; &lt;li&gt;Rust 0.16.0&lt;/li&gt; &#xA; &lt;li&gt;Go 0.1.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Functions Node&lt;/h3&gt; &#xA;&lt;p&gt;Function nodes are JavaScript snippets that allow for quick and easy parsing, re-mapping or otherwise modifying the data using JavaScript. Inputs of the node are provided as function&#39;s arguments. Functions are executed on top of QuickJS Engine that is bundled into the ZEN Engine.&lt;/p&gt; &#xA;&lt;p&gt;Function timeout is set to a 50ms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const handler = (input, {dayjs, Big}) =&amp;gt; {&#xA;    return {&#xA;        ...input,&#xA;        someField: &#39;hello&#39;&#xA;    };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are two built in libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/dayjs&#34;&gt;dayjs&lt;/a&gt; - for Date Manipulation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/big.js&#34;&gt;big.js&lt;/a&gt; - for arbitrary-precision decimal arithmetic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Expression Node&lt;/h3&gt; &#xA;&lt;p&gt;The Expression node serves as a tool for transforming input objects into alternative objects using the Zen Expression Language. When specifying the output properties, each property requires a separate row. These rows are defined by two fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key - qualified name of the output property&lt;/li&gt; &#xA; &lt;li&gt;Value - value expressed through the Zen Expression Language&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Any errors within the Expression node will bring the graph to a halt.&lt;/p&gt; &#xA;&lt;img width=&#34;960&#34; alt=&#34;Decision Table&#34; src=&#34;https://gorules.io/images/expression.png&#34; /&gt; &#xA;&lt;h3&gt;Decision Node&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;Decision&#34; node is designed to extend the capabilities of decision models. Its function is to invoke and reuse other decision models during execution.&lt;/p&gt; &#xA;&lt;p&gt;By incorporating the &#34;Decision&#34; node, developers can modularize decision logic, promoting reusability and maintainability in complex systems.&lt;/p&gt; &#xA;&lt;h2&gt;Support matrix&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Arch&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rust&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;NodeJS&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Go&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;linux-x64-gnu&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;linux-arm64-gnu&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;darwin-x64&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;darwin-arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;win32-x64-msvc&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;linux-x64-musl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;linux-arm64-musl&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;JDM standard is growing and we need to keep tight control over its development and roadmap as there are number of companies that are using GoRules Zen-Engine and GoRules BRMS. For this reason we can&#39;t accept any code contributions at this moment, apart from help with documentation and additional tests.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>