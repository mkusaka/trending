<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-13T01:37:17Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AsahiLinux/muvm</title>
    <updated>2024-10-13T01:37:17Z</updated>
    <id>tag:github.com,2024-10-13:/AsahiLinux/muvm</id>
    <link href="https://github.com/AsahiLinux/muvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;muvm - run programs from your system in a microVM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;muvm - run programs from your system in a microVM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;muvm&lt;/code&gt; allows you to run arbitrary programs from your system in a microVM. It&#39;s comprised of three small programs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;muvm&lt;/code&gt;: links against &lt;a href=&#34;https://github.com/containers/libkrun&#34;&gt;libkrun&lt;/a&gt; to create the microVM.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;muvm-guest&lt;/code&gt;: acts as an entrypoint inside the microVM to set up the environment for running your program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;muvm-server&lt;/code&gt;: a server listening for requests to run additional programs. This allows you to run multiple graphical applications inside the same microVM.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Usage: muvm [-c=CPU_LIST]... [-e=ENV]... [--mem=MEM] [--vram=VRAM] [--passt-socket=PATH] [-p=&#xA;SERVER_PORT] [-f=FEX_IMAGE]... COMMAND [COMMAND_ARGS]...&#xA;&#xA;Available positional items:&#xA;    COMMAND                  the command you want to execute in the vm&#xA;    COMMAND_ARGS             arguments of COMMAND&#xA;&#xA;Available options:&#xA;    -c, --cpu-list=CPU_LIST  The numerical list of processors that this microVM will be bound to.&#xA;                                     Numbers are separated by commas and may include ranges. For&#xA;                                     example: 0,5,8-11.&#xA;                             [default: all logical CPUs on the host, limited to performance cores&#xA;                                 (if applicable)]&#xA;    -e, --env=ENV            Set environment variable to be passed to the microVM&#xA;                                     ENV should be in KEY=VALUE format, or KEY on its own to inherit&#xA;                                     the current value from the local environment&#xA;        --mem=MEM            The amount of RAM, in MiB, that will be available to this microVM.&#xA;                                     The memory configured for the microVM will not be reserved&#xA;                                     immediately. Instead, it will be provided as the guest demands&#xA;                                     it, and both the guest and libkrun (acting as the Virtual&#xA;                                     Machine Monitor) will attempt to return as many pages as&#xA;                                     possible to the host.&#xA;                             [default: 80% of total RAM]&#xA;        --vram=VRAM          The amount of Video RAM, in MiB, that will be available to this&#xA;                             microVM.&#xA;                                     The memory configured for the microVM will not be reserved&#xA;                                     immediately. Instead, it will be provided as the guest demands&#xA;                                     it, and will be returned to the host once the guest releases&#xA;                                     the underlying resources.&#xA;                             [default: same as the total amount of RAM in the system]&#xA;        --passt-socket=PATH  Instead of starting passt, connect to passt socket at PATH&#xA;    -p, --server-port=SERVER_PORT  Set the port to be used in server mode&#xA;                             [default: 3334]&#xA;    -f, --fex-image=FEX_IMAGE  Adds an erofs file to be mounted as a FEX rootfs.&#xA;                                     May be specified multiple times.&#xA;                                     First the base image, then overlays in order.&#xA;    -h, --help               Prints help information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running graphical applications&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://chromium.googlesource.com/chromiumos/platform2/+/master/vm_tools/sommelier&#34;&gt;sommelier&lt;/a&gt; is installed in your system, &lt;code&gt;muvm&lt;/code&gt; will use it to connect to the Wayland session on the hosts, allowing you to run graphical applications in the microVM.&lt;/p&gt; &#xA;&lt;p&gt;GPU acceleration is also enabled on systems supporting &lt;a href=&#34;https://indico.freedesktop.org/event/2/contributions/53/attachments/76/121/XDC2022_%20virtgpu%20drm%20native%20context.pdf&#34;&gt;DRM native context&lt;/a&gt; (freedreno, amdgpu, asahi).&lt;/p&gt; &#xA;&lt;h2&gt;Running x86/x86_64 on aarch64&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://fex-emu.com/&#34;&gt;FEX-Emu&lt;/a&gt; is installed in your system, &lt;code&gt;muvm&lt;/code&gt; will configure &lt;code&gt;binfmt_misc&lt;/code&gt; inside the microVM so x86/x86_64 programs can be run transparently on it.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;This tool is mainly intended to enable users to easily run programs designed for 4K-page systems on systems with a different page size, with &lt;a href=&#34;https://asahilinux.org/&#34;&gt;Asahi Linux&lt;/a&gt; being the prime example of this use case.&lt;/p&gt; &#xA;&lt;p&gt;Other potential use cases could be software isolation, accessing privileged kernel features (provided by the guest) or local testing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>golemcloud/golem</title>
    <updated>2024-10-13T01:37:17Z</updated>
    <id>tag:github.com,2024-10-13:/golemcloud/golem</id>
    <link href="https://github.com/golemcloud/golem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golem is an open source durable computing platform that makes it easy to build and deploy highly reliable distributed systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Golem&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/golemcloud/golem/main/golem-logo-black.jpg&#34; alt=&#34;Golem Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains Golem - a set of services enable you to run WebAssembly components in a distributed cloud environment.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://golem.cloud&#34;&gt;Golem Cloud&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to start using Golem locally by using our published Docker containers. Please refer to the document link below on how to get golem OSS running using docker. &lt;a href=&#34;https://learn.golem.cloud/docs/quickstart#setting-up-golem&#34;&gt;https://learn.golem.cloud/docs/quickstart#setting-up-golem&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you have Golem running locally, you can use &lt;code&gt;golem-cli&lt;/code&gt; to interact with Golem services.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;cargo install golem-cli&#xA;&#xA;# component is your compiled code written in Rust, C, etc&#xA;# https://learn.golem.cloud/docs/building-templates helps you write some code and create a component - as an example&#xA;golem-cli component add --compnent-name &amp;lt;component-name&amp;gt; &amp;lt;location-to-component-file&amp;gt; &#xA;&#xA;# Now we need a worker corresponding from component, that can execute one of the functions in component&#xA;# If worker doesn&#39;t exist, it is created on the fly whey you invoke a function in component&#xA;golem-cli worker invoke-and-await --component-name &amp;lt;component-name&amp;gt; --worker-name &amp;lt;worker-name&amp;gt; --function golem:it/api.{add-item} --parameters &#39;[{&#34;product-id&#34; : &#34;foo&#34;, &#34;name&#34; : &#34;foo&#34; , &#34;price&#34; : 10, &#34;quantity&#34; : 1}]&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Internally, it is as simple as &lt;code&gt;golem-cli&lt;/code&gt; using &lt;code&gt;golem-client&lt;/code&gt; sending requests to Golem Services hosted in Docker container. Therefore, you can see what&#39;s going on and troubleshoot things by inspecting docker containers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&#xA;+-----------------------+         +-----------------------+&#xA;|                       |         |                       |&#xA;|  Use golem-cli        |  ---&amp;gt;   |  Golem Services       |&#xA;|                       |         |  hosted in            |&#xA;|  commands             |         |  Docker container     |&#xA;|  (Send Requests)      |         |                       |&#xA;+-----------------------+         +-----------------------+&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling Golem locally&lt;/h2&gt; &#xA;&lt;p&gt;Find details in the &lt;a href=&#34;https://raw.githubusercontent.com/golemcloud/golem/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; about how to compile the Golem services locally.&lt;/p&gt;</summary>
  </entry>
</feed>