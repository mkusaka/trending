<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-06T05:39:11Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chroma-core/chroma</title>
    <updated>2024-06-06T05:39:11Z</updated>
    <id>tag:github.com,2024-06-06:/chroma-core/chroma</id>
    <link href="https://github.com/chroma-core/chroma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the AI-native open-source embedding database&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://trychroma.com&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/891664/227103090-6624bf7d-9524-4e05-9d2c-c28d5d451481.png&#34; alt=&#34;Chroma logo&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Chroma - the open-source embedding database&lt;/b&gt;. &lt;br&gt; The fastest way to build Python or JavaScript LLM apps with memory! &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/MMeYNTmh3x&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1073293645303795742&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; | &lt;a href=&#34;https://github.com/chroma-core/chroma/raw/master/LICENSE&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=license&amp;amp;message=Apache 2.0&amp;amp;color=white&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; | &lt;a href=&#34;https://docs.trychroma.com/&#34; target=&#34;_blank&#34;&gt; Docs &lt;/a&gt; | &lt;a href=&#34;https://www.trychroma.com/&#34; target=&#34;_blank&#34;&gt; Homepage &lt;/a&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install chromadb # python client&#xA;# for javascript, npm install chromadb!&#xA;# for client-server mode, chroma run --path /chroma_db_path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core API is only 4 functions (run our &lt;a href=&#34;https://colab.research.google.com/drive/1QEzFyqnoFxq7LUGyP1vzR4iLt9PpCDXv?usp=sharing&#34;&gt;üí° Google Colab&lt;/a&gt; or &lt;a href=&#34;https://replit.com/@swyx/BasicChromaStarter?v=1&#34;&gt;Replit template&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chromadb&#xA;# setup Chroma in-memory, for easy prototyping. Can add persistence easily!&#xA;client = chromadb.Client()&#xA;&#xA;# Create collection. get_collection, get_or_create_collection, delete_collection also available!&#xA;collection = client.create_collection(&#34;all-my-documents&#34;)&#xA;&#xA;# Add docs to the collection. Can also update and delete. Row-based API coming soon!&#xA;collection.add(&#xA;    documents=[&#34;This is document1&#34;, &#34;This is document2&#34;], # we handle tokenization, embedding, and indexing automatically. You can skip that and add your own embeddings as well&#xA;    metadatas=[{&#34;source&#34;: &#34;notion&#34;}, {&#34;source&#34;: &#34;google-docs&#34;}], # filter on these!&#xA;    ids=[&#34;doc1&#34;, &#34;doc2&#34;], # unique for each doc&#xA;)&#xA;&#xA;# Query/search 2 most similar results. You can also .get by id&#xA;results = collection.query(&#xA;    query_texts=[&#34;This is a query document&#34;],&#xA;    n_results=2,&#xA;    # where={&#34;metadata_field&#34;: &#34;is_equal_to_this&#34;}, # optional filter&#xA;    # where_document={&#34;$contains&#34;:&#34;search_string&#34;}  # optional filter&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Fully-typed, fully-tested, fully-documented == happiness&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: &lt;a href=&#34;https://blog.langchain.dev/langchain-chroma/&#34;&gt;&lt;code&gt;ü¶úÔ∏èüîó LangChain&lt;/code&gt;&lt;/a&gt; (python and js), &lt;a href=&#34;https://twitter.com/atroyn/status/1628557389762007040&#34;&gt;&lt;code&gt;ü¶ô LlamaIndex&lt;/code&gt;&lt;/a&gt; and more soon&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dev, Test, Prod&lt;/strong&gt;: the same API that runs in your python notebook, scales to your cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature-rich&lt;/strong&gt;: Queries, filtering, density estimation and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free &amp;amp; Open Source&lt;/strong&gt;: Apache 2.0 Licensed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use case: ChatGPT for ______&lt;/h2&gt; &#xA;&lt;p&gt;For example, the &lt;code&gt;&#34;Chat your data&#34;&lt;/code&gt; use case:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add documents to your database. You can pass in your own embeddings, embedding function, or let Chroma embed them for you.&lt;/li&gt; &#xA; &lt;li&gt;Query relevant documents with natural language.&lt;/li&gt; &#xA; &lt;li&gt;Compose documents into the context window of an LLM like &lt;code&gt;GPT3&lt;/code&gt; for additional summarization or analysis.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Embeddings?&lt;/h2&gt; &#xA;&lt;p&gt;What are embeddings?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings/what-are-embeddings&#34;&gt;Read the guide from OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Literal&lt;/strong&gt;: Embedding something turns it from image/text/audio into a list of numbers. üñºÔ∏è or üìÑ =&amp;gt; &lt;code&gt;[1.2, 2.1, ....]&lt;/code&gt;. This process makes documents &#34;understandable&#34; to a machine learning model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;By analogy&lt;/strong&gt;: An embedding represents the essence of a document. This enables documents and queries with the same essence to be &#34;near&#34; each other and therefore easy to find.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Technical&lt;/strong&gt;: An embedding is the latent-space position of a document at a layer of a deep neural network. For models trained specifically to embed data, this is the last layer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A small example&lt;/strong&gt;: If you search your photos for &#34;famous bridge in San Francisco&#34;. By embedding this query and comparing it to the embeddings of your photos and their metadata - it should return photos of the Golden Gate Bridge.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Embeddings databases (also known as &lt;strong&gt;vector databases&lt;/strong&gt;) store embeddings and allow you to search by nearest neighbors rather than by substrings like a traditional database. By default, Chroma uses &lt;a href=&#34;https://docs.trychroma.com/guides/embeddings#default:-all-minilm-l6-v2&#34;&gt;Sentence Transformers&lt;/a&gt; to embed for you but you can also use OpenAI embeddings, Cohere (multilingual) embeddings, or your own.&lt;/p&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;Chroma is a rapidly developing project. We welcome PR contributors and ideas for how to improve the project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/MMeYNTmh3x&#34;&gt;Join the conversation on Discord&lt;/a&gt; - &lt;code&gt;#contributing&lt;/code&gt; channel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.trychroma.com/roadmap&#34;&gt;Review the üõ£Ô∏è Roadmap and contribute your ideas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chroma-core/chroma/issues&#34;&gt;Grab an issue and open a PR&lt;/a&gt; - &lt;a href=&#34;https://github.com/chroma-core/chroma/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;&lt;code&gt;Good first issue tag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.trychroma.com/contributing&#34;&gt;Read our contributing guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Release Cadence&lt;/strong&gt; We currently release new tagged versions of the &lt;code&gt;pypi&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; packages on Mondays. Hotfixes go out at any time during the week.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chroma-core/chroma/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>