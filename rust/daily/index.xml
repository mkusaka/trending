<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-18T01:38:16Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kobzol/cargo-wizard</title>
    <updated>2024-03-18T01:38:16Z</updated>
    <id>tag:github.com,2024-03-18:/Kobzol/cargo-wizard</id>
    <link href="https://github.com/Kobzol/cargo-wizard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cargo subcommand for configuring Cargo projects for best performance.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cargo-wizard &lt;a href=&#34;https://github.com/kobzol/cargo-wizard/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/kobzol/cargo-wizard/actions/workflows/check.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/cargo-wizard&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/cargo-wizard.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Cargo subcommand that applies &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/profiles.html&#34;&gt;profile&lt;/a&gt; and &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/config.html#configuration-format&#34;&gt;config&lt;/a&gt; templates to your Cargo project to configure it for maximum performance, fast compile times or minimal binary size.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kobzol/cargo-wizard/main/img/wizard-demo.gif&#34; alt=&#34;Demo of cargo-wizard&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;I often see Rust users asking online about how can they best configure Cargo get e.g. the fastest compilation times, best runtime performance or minimal binary size. While this information can be found in various &lt;a href=&#34;https://nnethercote.github.io/perf-book/build-configuration.html&#34;&gt;books&lt;/a&gt;, &lt;a href=&#34;https://github.com/johnthagen/min-sized-rust&#34;&gt;repositories&lt;/a&gt; or &lt;a href=&#34;https://kobzol.github.io/rust/rustc/2023/10/21/make-rust-compiler-5percent-faster.html&#34;&gt;blog posts&lt;/a&gt;, it is annoying to hunt for it everytime we want to configure a new Cargo project.&lt;/p&gt; &#xA;&lt;p&gt;This tool tries to automate that process to make it easier.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install cargo-wizard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive mode (CLI dialog that guides you through the process): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo wizard&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Non-interactive mode (directly apply a predefined template to your Cargo workspace): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo wizard apply &amp;lt;template&amp;gt; &amp;lt;profile&amp;gt;&#xA;# For example, apply `fast-runtime` template to the `dist` profile&#xA;$ cargo wizard apply fast-runtime dist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can enable additional configuration options that require a nightly compiler by running &lt;code&gt;cargo-wizard&lt;/code&gt; with a nightly Cargo (e.g. &lt;code&gt;cargo +nightly wizard&lt;/code&gt;) or by using the &lt;code&gt;--nightly&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Note that you should be executing &lt;code&gt;cargo wizard&lt;/code&gt; inside a directory that is a part of a Cargo workspace. It will then apply the configuration options to that workspace.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo-wizard&lt;/code&gt; can create or modify Cargo profiles in your &lt;code&gt;Cargo.toml&lt;/code&gt; manifest and RUSTFLAGS in the &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/config.html#configuration-format&#34;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt; file, based on a set of predefined templates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fast-compile&lt;/code&gt; - minimizes compilation times &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disables debuginfo generation and uses a faster linker.&lt;/li&gt; &#xA;   &lt;li&gt;In nightly mode, it also enables the &lt;a href=&#34;https://nnethercote.github.io/perf-book/build-configuration.html#cranelift-codegen-back-end&#34;&gt;Cranelift codegen backend&lt;/a&gt; and the &lt;a href=&#34;https://nnethercote.github.io/perf-book/build-configuration.html#experimental-parallel-front-end&#34;&gt;parallel frontend&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fast-runtime&lt;/code&gt; - maximizes runtime performance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enables &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/profiles.html#lto&#34;&gt;LTO&lt;/a&gt; and other settings designed to maximize runtime performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;min-size&lt;/code&gt; - minimizes binary size &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Similar to &lt;code&gt;fast-runtime&lt;/code&gt;, but uses optimization flags designed for small binary size.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also modify these templates in the interactive mode to build your own custom template.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The configuration applied by this tool is quite opinionated and might not fit all use-cases perfectly. &lt;code&gt;cargo-wizard&lt;/code&gt; mostly serves to improve &lt;em&gt;discoverability&lt;/em&gt; of possible Cargo profile and config options, to help you find the ideal settings for your use-cases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo-wizard&lt;/code&gt; currently only modifies &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;config.toml&lt;/code&gt;. There are other things that can be configured to achieve e.g. even smaller binaries, but these are out of scope for this tool, at least at the moment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo-wizard&lt;/code&gt; currently ignores Cargo settings that are not relevant to performance.&lt;/li&gt; &#xA; &lt;li&gt;Cargo config (&lt;code&gt;config.toml&lt;/code&gt;) changes are applied to the global &lt;code&gt;build.hostflags&lt;/code&gt; setting, because per-profile RUSTFLAGS are still &lt;a href=&#34;https://github.com/rust-lang/cargo/issues/10271&#34;&gt;unstable&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Inspiration&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnthagen/min-sized-rust&#34;&gt;Min-sized Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nnethercote.github.io/perf-book/build-configuration.html&#34;&gt;The Rust Performance Book&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why &lt;code&gt;wizard&lt;/code&gt;? The name is inspired by GUI &lt;a href=&#34;https://documentation.softwareag.com/natural/nat913win/edis/edis_win_dia_wiz.htm&#34;&gt;wizards&lt;/a&gt; that guide you through some process using a series of dialogs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are welcome :)&lt;/p&gt; &#xA;&lt;p&gt;Possible future features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allow configuring the &lt;a href=&#34;https://nnethercote.github.io/perf-book/build-configuration.html#alternative-allocators&#34;&gt;memory allocator&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Load/store templates on disk to make them easier to share&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/toml_edit/latest/toml_edit/&#34;&gt;&lt;code&gt;toml_edit&lt;/code&gt;&lt;/a&gt;: awesome crate that can modify TOML files while keeping their original formatting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikaelmello/inquire&#34;&gt;&lt;code&gt;inquire&lt;/code&gt;&lt;/a&gt;: pretty slick crate for building interactive TUI dialogs and prompts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kobzol/cargo-wizard/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>