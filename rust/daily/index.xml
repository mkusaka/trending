<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-10T01:45:12Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chmln/sd</title>
    <updated>2023-07-10T01:45:12Z</updated>
    <id>tag:github.com,2023-07-10:/chmln/sd</id>
    <link href="https://github.com/chmln/sd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Intuitive find &amp; replace CLI (sed alternative)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sd - s[earch] &amp;amp; d[isplace]&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;sd&lt;/code&gt; is an intuitive find &amp;amp; replace CLI.&lt;/p&gt; &#xA;&lt;h2&gt;The Pitch&lt;/h2&gt; &#xA;&lt;p&gt;Why use it over any existing tools?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Painless regular expressions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sd&lt;/code&gt; uses regex syntax that you already know from JavaScript and Python. Forget about dealing with quirks of &lt;code&gt;sed&lt;/code&gt; or &lt;code&gt;awk&lt;/code&gt; - get productive immediately.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;String-literal mode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Non-regex find &amp;amp; replace. No more backslashes or remembering which characters are special and need to be escaped.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Easy to read, easy to write&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find &amp;amp; replace expressions are split up, which makes them easy to read and write. No more messing with unclosed and escaped slashes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Smart, common-sense defaults&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Defaults follow common sense and are tailored for typical daily use.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to sed&lt;/h2&gt; &#xA;&lt;p&gt;While sed does a whole lot more, &lt;code&gt;sd&lt;/code&gt; focuses on doing just one thing and doing it well.&lt;/p&gt; &#xA;&lt;p&gt;Some cherry-picked examples, where &lt;code&gt;sd&lt;/code&gt; shines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simpler syntax for replacing all occurrences: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sd: &lt;code&gt;sd before after&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;sed: &lt;code&gt;sed s/before/after/g&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Replace newlines with commas: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sd: &lt;code&gt;sd &#39;\n&#39; &#39;,&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;sed: &lt;code&gt;sed &#39;:a;N;$!ba;s/\n/,/g&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Extracting stuff out of strings containing slashes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sd: &lt;code&gt;echo &#34;sample with /path/&#34; | sd &#39;.*(/.*/)&#39; &#39;$1&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;sed: use different delimiters every time depending on expression so that the command is not completely unreadable &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;echo &#34;sample with /path/&#34; | sed -E &#39;s/.*(\\/.*\\/)/\1/g&#39;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;echo &#34;sample with /path/&#34; | sed -E &#39;s|.*(/.*/)|\1|g&#39;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In place modification of files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sd: &lt;code&gt;sd before after file.txt&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;sed: you need to remember to use &lt;code&gt;-e&lt;/code&gt; or else some platforms will consider the next argument to be a backup suffix &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sed -i -e &#39;s/before/after/g&#39; file.txt&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple replacement on ~1.5 gigabytes of JSON&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --warmup 3 --export-markdown out.md \&#xA;  &#39;sed -E &#34;s/\&#34;/&#39;&#34;&#39;&#34;&#39;/g&#34; *.json &amp;gt; /dev/null&#39; \&#xA;  &#39;sed    &#34;s/\&#34;/&#39;&#34;&#39;&#34;&#39;/g&#34; *.json &amp;gt; /dev/null&#39; \&#xA;  &#39;sd     &#34;\&#34;&#34; &#34;&#39;&#34;&#39;&#34;&#39;&#34;   *.json &amp;gt; /dev/null&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean [s]&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Min…Max [s]&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sed -E &#34;s/\&#34;/&#39;/g&#34; *.json &amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.338 ± 0.008&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.332…2.358&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sed &#34;s/\&#34;/&#39;/g&#34; *.json &amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.365 ± 0.009&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.351…2.378&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sd &#34;\&#34;&#34; &#34;&#39;&#34; *.json &amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;0.997 ± 0.006&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.987…1.007&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Result: ~2.35 times faster&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regex replacement on a ~55M json file&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --warmup 3 --export-markdown out.md \&#xA;  &#39;sed -E &#34;s:(\w+):\1\1:g&#34;    dump.json &amp;gt; /dev/null&#39; \&#xA;  &#39;sed    &#34;s:\(\w\+\):\1\1:g&#34; dump.json &amp;gt; /dev/null&#39; \&#xA;  &#39;sd     &#34;(\w+)&#34; &#34;$1$1&#34;      dump.json &amp;gt; /dev/null&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean [s]&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Min…Max [s]&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sed -E &#34;s:(\w+):\1\1:g&#34; dump.json &amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;11.315 ± 0.215&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;11.102…11.725&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sed &#34;s:\(\w\+\):\1\1:g&#34; dump.json &amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;11.239 ± 0.208&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;11.057…11.762&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sd &#34;(\w+)&#34; &#34;$1$1&#34; dump.json &amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;0.942 ± 0.004&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.936…0.951&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Result: ~11.93 times faster&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install through &lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;cargo install sd&lt;/code&gt;, or through various package managers&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/sd-find-replace/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/sd-find-replace.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Guide&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;String-literal mode&lt;/strong&gt;. By default, expressions are treated as regex. Use &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--string-mode&lt;/code&gt; to disable regex.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; echo &#39;lots((([]))) of special chars&#39; | sd -s &#39;((([])))&#39; &#39;&#39;&#xA;lots of special chars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic regex use&lt;/strong&gt; - let&#39;s trim some trailing whitespace&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; echo &#39;lorem ipsum 23   &#39; | sd &#39;\s+$&#39; &#39;&#39;&#xA;lorem ipsum 23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Capture groups&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Indexed capture groups:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; echo &#39;cargo +nightly watch&#39; | sd &#39;(\w+)\s+\+(\w+)\s+(\w+)&#39; &#39;cmd: $1, channel: $2, subcmd: $3&#39;&#xA;cmd: cargo, channel: nightly, subcmd: watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Named capture groups:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; echo &#34;123.45&#34; | sd &#39;(?P&amp;lt;dollars&amp;gt;\d+)\.(?P&amp;lt;cents&amp;gt;\d+)&#39; &#39;$dollars dollars and $cents cents&#39;&#xA;123 dollars and 45 cents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the unlikely case you stumble upon ambiguities, resolve them by using &lt;code&gt;${var}&lt;/code&gt; instead of &lt;code&gt;$var&lt;/code&gt;. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; echo &#39;123.45&#39; | sd &#39;(?P&amp;lt;dollars&amp;gt;\d+)\.(?P&amp;lt;cents&amp;gt;\d+)&#39; &#39;$dollars_dollars and $cents_cents&#39;&#xA; and &#xA; &#xA;&amp;gt; echo &#39;123.45&#39; | sd &#39;(?P&amp;lt;dollars&amp;gt;\d+)\.(?P&amp;lt;cents&amp;gt;\d+)&#39; &#39;${dollars}_dollars and ${cents}_cents&#39;&#xA;123_dollars and 45_cents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Find &amp;amp; replace in a file&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; sd &#39;window.fetch&#39; &#39;fetch&#39; http.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it. The file is modified in-place.&lt;/p&gt; &#xA;&lt;p&gt;To preview changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; sd -p &#39;window.fetch&#39; &#39;fetch&#39; http.js &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Find &amp;amp; replace across project&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This example uses &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Good ol&#39; unix philosophy to the rescue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fd --type file --exec sd &#39;from &#34;react&#34;&#39; &#39;from &#34;preact&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same, but with backups (consider version control).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd --type file --exec cp {} {}.bk \; --exec sd &#39;from &#34;react&#34;&#39; &#39;from &#34;preact&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edge cases&lt;/h3&gt; &#xA;&lt;p&gt;sd will interpret every argument starting with &lt;code&gt;-&lt;/code&gt; as a (potentially unknown) flag. The common convention of using &lt;code&gt;--&lt;/code&gt; to signal the end of flags is respected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#34;./hello foo&#34; | sd &#34;foo&#34; &#34;-w&#34;&#xA;error: Found argument &#39;-w&#39; which wasn&#39;t expected, or isn&#39;t valid in this context&#xA;&#xA;USAGE:&#xA;    sd [OPTIONS] &amp;lt;find&amp;gt; &amp;lt;replace-with&amp;gt; [files]...&#xA;&#xA;For more information try --help&#xA;$ echo &#34;./hello foo&#34; | sd &#34;foo&#34; -- &#34;-w&#34;&#xA;./hello -w&#xA;$ echo &#34;./hello --foo&#34; | sd -- &#34;--foo&#34; &#34;-w&#34;&#xA;./hello -w&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Jondolf/bevy_xpbd</title>
    <updated>2023-07-10T01:45:12Z</updated>
    <id>tag:github.com,2023-07-10:/Jondolf/bevy_xpbd</id>
    <link href="https://github.com/Jondolf/bevy_xpbd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;2D and 3D physics engine based on Extended Position Based Dynamics for Bevy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bevy XPBD&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Jondolf/bevy_xpbd#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true&#34; alt=&#34;MIT/Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/bevy_xpbd_2d&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/bevy_xpbd_2d&#34; alt=&#34;2D crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/bevy_xpbd_2d&#34;&gt;&lt;img src=&#34;https://docs.rs/bevy_xpbd_2d/badge.svg?sanitize=true&#34; alt=&#34;2D docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/bevy_xpbd_3d&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/bevy_xpbd_3d&#34; alt=&#34;3D crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/bevy_xpbd_3d&#34;&gt;&lt;img src=&#34;https://docs.rs/bevy_xpbd_3d/badge.svg?sanitize=true&#34; alt=&#34;3D docs.rs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bevy XPBD&lt;/strong&gt; is a 2D and 3D physics engine based on &lt;em&gt;Extended Position Based Dynamics&lt;/em&gt; (XPBD) for the &lt;a href=&#34;https://bevyengine.org/&#34;&gt;Bevy game engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;Below are some of the core design principles used in Bevy XPBD.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Made with Bevy, for Bevy.&lt;/strong&gt; No wrappers around existing engines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Provide an ergonomic and familiar API.&lt;/strong&gt; Ergonomics is key for a good experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Utilize the ECS as much as possible.&lt;/strong&gt; The engine should feel like a part of Bevy, and it shouldn&#39;t need to maintain a separate physics world.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use a highly modular plugin architecture.&lt;/strong&gt; Users should be able to replace parts of the engine with their own implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have good documentation.&lt;/strong&gt; A physics engine is pointless if you don&#39;t know how to use it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Below are some of the current features of Bevy XPBD.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic, kinematic and static rigid bodies&lt;/li&gt; &#xA; &lt;li&gt;Colliders powered by &lt;a href=&#34;https://parry.rs&#34;&gt;parry&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Collision events: &lt;code&gt;Collision&lt;/code&gt;, &lt;code&gt;CollisionStarted&lt;/code&gt;, &lt;code&gt;CollisionEnded&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Access to colliding entities with &lt;code&gt;CollidingEntities&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Sensor colliders&lt;/li&gt; &#xA;   &lt;li&gt;Collision layers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Material properties like restitution and friction&lt;/li&gt; &#xA; &lt;li&gt;External forces and torque&lt;/li&gt; &#xA; &lt;li&gt;Gravity&lt;/li&gt; &#xA; &lt;li&gt;Joints&lt;/li&gt; &#xA; &lt;li&gt;Built-in constraints and support for custom constraints&lt;/li&gt; &#xA; &lt;li&gt;Automatically deactivating bodies with &lt;code&gt;Sleeping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configurable timesteps and substepping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f32&lt;/code&gt;/&lt;code&gt;f64&lt;/code&gt; precision (&lt;code&gt;f32&lt;/code&gt; by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/bevy_xpbd_2d&#34;&gt;&lt;code&gt;bevy_xpbd_2d&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/bevy_xpbd_3d&#34;&gt;&lt;code&gt;bevy_xpbd_3d&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;p&gt;For a 2D game, add the &lt;code&gt;bevy_xpbd_2d&lt;/code&gt; crate to your &lt;code&gt;Cargo.toml&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;bevy_xpbd_2d = &#34;0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly for a 3D game, add &lt;code&gt;bevy_xpbd_3d&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;bevy_xpbd_3d = &#34;0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is a very simple example where a box with initial angular velocity falls onto a plane. This is a modified version of Bevy&#39;s &lt;a href=&#34;https://bevyengine.org/examples/3d/3d-scene/&#34;&gt;3d_scene&lt;/a&gt; example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;use bevy::prelude::*;&#xA;use bevy_xpbd_3d::prelude::*;&#xA;&#xA;fn main() {&#xA;    App::new()&#xA;        .add_plugins(DefaultPlugins)&#xA;        .add_plugins(PhysicsPlugins)&#xA;        .add_startup_system(setup)&#xA;        .run();&#xA;}&#xA;&#xA;fn setup(&#xA;    mut commands: Commands,&#xA;    mut meshes: ResMut&amp;lt;Assets&amp;lt;Mesh&amp;gt;&amp;gt;,&#xA;    mut materials: ResMut&amp;lt;Assets&amp;lt;StandardMaterial&amp;gt;&amp;gt;,&#xA;) {&#xA;    // Plane&#xA;    commands.spawn((&#xA;        PbrBundle {&#xA;            mesh: meshes.add(Mesh::from(shape::Plane::from_size(8.0))),&#xA;            material: materials.add(Color::rgb(0.3, 0.5, 0.3).into()),&#xA;            ..default()&#xA;        },&#xA;        RigidBody::Static,&#xA;        Collider::cuboid(8.0, 0.002, 8.0),&#xA;    ));&#xA;    // Cube&#xA;    commands.spawn((&#xA;        PbrBundle {&#xA;            mesh: meshes.add(Mesh::from(shape::Cube { size: 1.0 })),&#xA;            material: materials.add(Color::rgb(0.8, 0.7, 0.6).into()),&#xA;            ..default()&#xA;        },&#xA;        RigidBody::Dynamic,&#xA;        Position(Vec3::Y * 4.0),&#xA;        AngularVelocity(Vec3::new(2.5, 3.4, 1.6)),&#xA;        Collider::cuboid(1.0, 1.0, 1.0),&#xA;    ));&#xA;    // Light&#xA;    commands.spawn(PointLightBundle {&#xA;        point_light: PointLight {&#xA;            intensity: 1500.0,&#xA;            shadows_enabled: true,&#xA;            ..default()&#xA;        },&#xA;        transform: Transform::from_xyz(4.0, 8.0, 4.0),&#xA;        ..default()&#xA;    });&#xA;    // Camera&#xA;    commands.spawn(Camera3dBundle {&#xA;        transform: Transform::from_xyz(-4.0, 6.5, 8.0).looking_at(Vec3::ZERO, Vec3::Y),&#xA;        ..default()&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/57632562/230185604-b40441a2-48d8-4566-9b9e-be4825f4877e.mp4&#34;&gt;https://user-images.githubusercontent.com/57632562/230185604-b40441a2-48d8-4566-9b9e-be4825f4877e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;You can find lots of 2D and 3D examples in &lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/bevy_xpbd/main/crates/bevy_xpbd_2d/examples&#34;&gt;/crates/bevy_xpbd_2d/examples&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/bevy_xpbd/main/crates/bevy_xpbd_3d/examples&#34;&gt;/crates/bevy_xpbd_3d/examples&lt;/a&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;The examples support both &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; precisions, so the code contains some feature-dependent types like &lt;code&gt;Scalar&lt;/code&gt; and &lt;code&gt;Vector&lt;/code&gt;. In actual usage these are not needed, so you can just use &lt;code&gt;f32&lt;/code&gt; or &lt;code&gt;f64&lt;/code&gt; types depending on the features you have chosen.&lt;/p&gt; &#xA;&lt;p&gt;By default the examples use &lt;code&gt;f32&lt;/code&gt;. To run the &lt;code&gt;f64&lt;/code&gt; versions, you need to disable default features and manually choose the dimension and precision:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --example cubes --no-default-features --features &#34;3d f64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Bevy versions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Bevy&lt;/th&gt; &#xA;   &lt;th&gt;Bevy XPBD&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.10&lt;/td&gt; &#xA;   &lt;td&gt;0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Future features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On-demand simulation stepping&lt;/li&gt; &#xA; &lt;li&gt;Linear and angular velocity damping&lt;/li&gt; &#xA; &lt;li&gt;Locking translational and rotational axes without joints&lt;/li&gt; &#xA; &lt;li&gt;Joint motors&lt;/li&gt; &#xA; &lt;li&gt;Spatial queries&lt;/li&gt; &#xA; &lt;li&gt;Continuous collision detection&lt;/li&gt; &#xA; &lt;li&gt;Multiple colliders per body&lt;/li&gt; &#xA; &lt;li&gt;Debug render colliders and joints&lt;/li&gt; &#xA; &lt;li&gt;Performance optimization (better broad phase, parallel solver...)&lt;/li&gt; &#xA; &lt;li&gt;Soft bodies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cloth&lt;/li&gt; &#xA;   &lt;li&gt;Deformable solids&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Maybe fluid simulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any problems, feel free to open issues. Creating pull requests is encouraged as well, but especially for larger changes and additions it&#39;s better to open an issue first.&lt;/p&gt; &#xA;&lt;p&gt;You can also ask for help or ask questions on the &lt;a href=&#34;https://discord.com/invite/gMUk5Ph&#34;&gt;Bevy Discord server&lt;/a&gt; where you can find me as &lt;code&gt;Jondolf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Bevy XPBD is free and open source. All code in this repository is dual-licensed under either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT License (&lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/bevy_xpbd/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/Jondolf/bevy_xpbd/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt;</summary>
  </entry>
</feed>