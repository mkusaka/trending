<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-17T01:44:33Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lapce/floem</title>
    <updated>2023-04-17T01:44:33Z</updated>
    <id>tag:github.com,2023-04-17:/lapce/floem</id>
    <link href="https://github.com/lapce/floem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native Rust UI library with fine-grained reactivity&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Floem&lt;/h1&gt; &#xA; &lt;p&gt;A native Rust UI library with fine-grained reactivity&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It&#39;s still early days so expect lots of things missing!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn app_logic(cx: AppContext) -&amp;gt; impl View {&#xA;    // create a counter reactive signal with initial value 0&#xA;    let (couter, set_counter) = create_signal(cx.scope, 0);&#xA;&#xA;    // create user interface with Floem view functions&#xA;    stack(cx, |cx| {&#xA;        (&#xA;            label(cx, move || format!(&#34;Value: {}&#34;, couter.get())),&#xA;            stack(cx, |cx| {&#xA;                (&#xA;                    click(&#xA;                        cx,&#xA;                        |cx| label(cx, || &#34;Increment&#34;.to_string()),&#xA;                        move || set_counter.update(|value| *value += 1),&#xA;                    ),&#xA;                    click(&#xA;                        cx,&#xA;                        |cx| label(cx, || &#34;Decrement&#34;.to_string()),&#xA;                        move || set_counter.update(|value| *value -= 1),&#xA;                    ),&#xA;                )&#xA;            }),&#xA;        )&#xA;    })&#xA;}&#xA;&#xA;fn main() {&#xA;    floem::launch(app_logic);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/linebender/xilem&#34;&gt;Xilem&lt;/a&gt;, &lt;a href=&#34;https://github.com/leptos-rs/leptos&#34;&gt;Leptos&lt;/a&gt; and &lt;a href=&#34;https://github.com/audulus/rui&#34;&gt;rui&lt;/a&gt;, Floem aims to be a high performance declarative UI library with minimal effort from the user.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform support&lt;/strong&gt;: Supports Windows, macOS and Linux with rendering on &lt;a href=&#34;https://github.com/gfx-rs/wgpu&#34;&gt;Wgpu&lt;/a&gt;. A software renderer is also planned in case of GPU is unavailable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained reactivity&lt;/strong&gt;: The entire library is built around reactive primitives provided by &lt;a href=&#34;https://crates.io/crates/leptos_reactive&#34;&gt;leptos_reactive&lt;/a&gt;. The reactive &#34;signals&#34; give the user a nice way to do state management in a performant way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: The view tree is only run once, so the user can&#39;t accidentally put something expensive in the view generation function which slows down the whole application. The library also provides tools to help user to write performant UI code. More on the &lt;a href=&#34;https://github.com/lapce/floem/tree/main/examples/virtual_list&#34;&gt;virtual list example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexbox layout&lt;/strong&gt;: Using &lt;a href=&#34;https://crates.io/crates/taffy&#34;&gt;taffy&lt;/a&gt;, the library provides the Flexbox layout system, which can be applied to any View node.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lapce/floem/main/CONTRIBUTING.md&#34;&gt;Contributions welcome!&lt;/a&gt; If you&#39;d like to improve how Floem works and fix things, feel free to open an issue or submit a PR. If you&#39;d like a conversation with Floem devs, you can join in the #floem channel on this &lt;a href=&#34;https://discord.gg/RB6cRYerXX&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotcypress/ula</title>
    <updated>2023-04-17T01:44:33Z</updated>
    <id>tag:github.com,2023-04-17:/dotcypress/ula</id>
    <link href="https://github.com/dotcypress/ula" rel="alternate"></link>
    <summary type="html">&lt;p&gt;μLA: Micro Logic Analyzer for RP2040&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;μLA: Micro Logic Analyzer&lt;/h1&gt; &#xA;&lt;p&gt;SUMP/OLS compatible logic analyzer firmware for &lt;a href=&#34;https://en.wikipedia.org/wiki/RP2040&#34;&gt;RP2040&lt;/a&gt; based boards.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16 channels&lt;/li&gt; &#xA; &lt;li&gt;100 MHz sampling rate, 1 sample per sys tick&lt;/li&gt; &#xA; &lt;li&gt;200 KB sample memory&lt;/li&gt; &#xA; &lt;li&gt;Fast triggers using PIO&lt;/li&gt; &#xA; &lt;li&gt;Input channels mapped to GPIO 0-15&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported hardware&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-pico&#34;&gt;Raspberry Pi Pico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.waveshare.com/rp2040-zero.htm&#34;&gt;RP2040-Zero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Virtually all RP2040 based boards with USB connection and GPIO 0-15 available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download latest firmware build from &lt;a href=&#34;https://github.com/dotcypress/ula/releases&#34;&gt;Releases page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hold the BOOTSEL button while connecting your board to the computer&lt;/li&gt; &#xA; &lt;li&gt;Copy firmware file downloaded earlier to the RPi-RP2 disk&lt;/li&gt; &#xA; &lt;li&gt;Use PulseView of SigrokCli to connect to probe&lt;/li&gt; &#xA; &lt;li&gt;Enjoy&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Client software&lt;/h2&gt; &#xA;&lt;h3&gt;PulseView&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sigrok.org/wiki/PulseView&#34;&gt;PulseView&lt;/a&gt; is a Qt based logic analyzer GUI for sigrok.&lt;/p&gt; &#xA;&lt;img al=&#34;uLA: Micro Logic Analyzer&#34; width=&#34;800&#34; src=&#34;https://raw.githubusercontent.com/dotcypress/ula/main/docs/pulseview.png&#34;&gt; &#xA;&lt;p&gt;Select &lt;code&gt;Openbench Logic Sniffer &amp;amp; SUMP compatible&lt;/code&gt; protocol when connecting to μLA.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Protocol selection&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Connect window&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;uLA: Micro Logic Analyzer&#34; src=&#34;https://raw.githubusercontent.com/dotcypress/ula/main/docs/pulseview_protocol.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;uLA: Micro Logic Analyzer&#34; src=&#34;https://raw.githubusercontent.com/dotcypress/ula/main/docs/pulseview_connect.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;SigrokCli&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sigrok.org/wiki/Sigrok-cli&#34;&gt;SigrokCli&lt;/a&gt; is a command-line frontend for sigrok.&lt;/p&gt; &#xA;&lt;p&gt;Scan for devices&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sigrok-cli -d ols:conn=/dev/tty.usbmodem_ula_1 --scan&#xA;&#xA;  The following devices were found:&#xA;  ols - uLA: Micro Logic Analyzer with 16 channels: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample two 10 MHz square waves with 90° phase shift&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sigrok-cli -d ols:conn=/dev/tty.usbmodem_ula_1 &#xA;    -O ascii:charset=&#39;_`\/&#39;&#xA;    --config samplerate=100m&#xA;    --samples 70&#xA;&#xA;  libsigrok 0.5.2&#xA;  Acquisition with 16/16 channels at 100 MHz&#xA;  0:``\____/`````\___/`````\___/`````\___/`````\___/`````\___/`````\___/``&#xA;  1:____/`````\____/````\____/````\____/````\____/````\____/````\____/````&#xA;  2:______________________________________________________________________&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building firmware&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install rustup by following the instructions at &lt;a href=&#34;https://rustup.rs&#34;&gt;https://rustup.rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Cortex-M0, M0+, and M1 (ARMv6-M architecture) target: &lt;code&gt;rustup target add thumbv6m-none-eabi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install LLVM tools: &lt;code&gt;rustup component add llvm-tools-preview&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install cargo-binutils: &lt;code&gt;cargo install cargo-binutils&lt;/code&gt; (Note: on some Linux distros (e.g. Ubuntu) you may need to install the packages build-essential, gcc-arm-none-eabi, libssl-dev and pkg-config prior to installing cargo-binutils)&lt;/li&gt; &#xA; &lt;li&gt;Install elf2uf2: &lt;code&gt;cargo install elf2uf2-rs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo: &lt;code&gt;git clone git@github.com:dotcypress/ula.git &amp;amp;&amp;amp; cd ula&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hold the BOOTSEL button while connecting your board to the computer&lt;/li&gt; &#xA; &lt;li&gt;Flash microcontroller: &lt;code&gt;cargo run --release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/dotcypress/ula/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/dotcypress/ula/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WuBingzheng/build-lua-in-rust</title>
    <updated>2023-04-17T01:44:33Z</updated>
    <id>tag:github.com,2023-04-17:/WuBingzheng/build-lua-in-rust</id>
    <link href="https://github.com/WuBingzheng/build-lua-in-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;用Rust实现Lua解释器 / Build a Lua Interpreter in Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;从零开始，&lt;a href=&#34;https://wubingzheng.github.io/build-lua-in-rust/zh/&#34;&gt;用 Rust 实现一个 Lua 解释器&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wubingzheng.github.io/build-lua-in-rust/en/&#34;&gt;Build a Lua Interpreter in Rust&lt;/a&gt; from scratch.&lt;/p&gt;</summary>
  </entry>
</feed>