<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-15T02:58:54Z</updated>
  <subtitle>Daily Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ad-si/tu</title>
    <updated>2024-04-15T02:58:54Z</updated>
    <id>tag:github.com,2024-04-15:/ad-si/tu</id>
    <link href="https://github.com/ad-si/tu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI tool to convert a natural language date/time string to UTC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;tu&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;CLI tool to convert a natural language date/time &lt;strong&gt;t&lt;/strong&gt;o &lt;strong&gt;U&lt;/strong&gt;TC.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install tu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Usage: tu &amp;lt;natural time/duration&amp;gt;&#xA;&#xA;Examples:&#xA;  tu today      -&amp;gt; 2024-03-16T12:56:41.905455Z&#xA;  tu tomorrow   -&amp;gt; 2024-03-17T12:56:41.905455Z&#xA;  tu 2 day      -&amp;gt; 2024-03-18T12:56:41.905455Z&#xA;  tu 9 week     -&amp;gt; 2024-05-18T12:56:41.905455Z&#xA;  tu 1 month    -&amp;gt; 2024-04-16T00:00:00Z&#xA;&#xA;  tu 2024-04-10T13:31:46+04:00     -&amp;gt; 2024-04-10T09:31:46Z&#xA;  tu Wed, 14 Feb 2024 23:16:09 GMT -&amp;gt; 2024-02-14T23:16:09Z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful in combination with other tools like &lt;a href=&#34;https://tasklite.org&#34;&gt;TaskLite&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Bash&#xA;tasklite add &#34;Buy bike&#34; due:$(tu 2 week)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;# Fish&#xA;tasklite add &#34;Buy bike&#34; due:(tu 2 week)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mitsuhiko/when&#34;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/a&gt; - Timezone CLI tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://utcify.ad-si.com&#34;&gt;utcify.ad-si.com&lt;/a&gt; - Web tool to convert local-time strings to UTC.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NorfairKing/fuzzy-time&#34;&gt;&lt;code&gt;fuzzy-time&lt;/code&gt;&lt;/a&gt; - Haskell package for parsing fuzzy time strings.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>KipData/FnckSQL</title>
    <updated>2024-04-15T02:58:54Z</updated>
    <id>tag:github.com,2024-04-15:/KipData/FnckSQL</id>
    <link href="https://github.com/KipData/FnckSQL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQL as a Function for Rust&lt;/p&gt;&lt;hr&gt;&lt;pre align=&#34;center&#34;&gt;&#xA;Built by @KipData&#xA;&#xA;&#xA;███████╗███╗   ██╗ ██████╗██╗  ██╗    ███████╗ ██████╗ ██╗     &#xA;██╔════╝████╗  ██║██╔════╝██║ ██╔╝    ██╔════╝██╔═══██╗██║     &#xA;█████╗  ██╔██╗ ██║██║     █████╔╝     ███████╗██║   ██║██║     &#xA;██╔══╝  ██║╚██╗██║██║     ██╔═██╗     ╚════██║██║▄▄ ██║██║     &#xA;██║     ██║ ╚████║╚██████╗██║  ██╗    ███████║╚██████╔╝███████╗&#xA;╚═╝     ╚═╝  ╚═══╝ ╚═════╝╚═╝  ╚═╝    ╚══════╝ ╚══▀▀═╝ ╚══════╝&#xA;&#xA;-----------------------------------&#xA;🖕&#xA;&lt;/pre&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Lightweight DBMS &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://summer-ospp.ac.cn/org/orgdetail/0b09d23d-2510-4537-aa9d-45158bb6bdc2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OSPP-KipData-3DA639?logo=opensourceinitiative&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KipData/KipSQL/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/KipData/KipSQL&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://www.rust-lang.org/community&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Rust_Community%20-Join_us-brightgreen?style=plastic&amp;amp;logo=rust&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/KipData/KipSQL/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/KipData/KipSQL/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/fnck_sql/&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/fnck_sql.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/kould23333/fncksql&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker-fncksql-2496ED?logo=docker&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/KipData/KipSQL&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/KipData/KipSQL.svg?style=social&#34; alt=&#34;github star&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/KipData/KipSQL.svg?style=social&#34; alt=&#34;github fork&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;What is FnckSQL&lt;/h3&gt; &#xA;&lt;p&gt;FnckSQL individual developers independently implemented LSM KV-based SQL DBMS out of hobby. This SQL database will prove to you that anyone can write a database (even the core author cannot find a job). If you are also a database-related Enthusiastic, let us give this &#34;beautiful&#34; industry a middle finger🖕.&lt;/p&gt; &#xA;&lt;p&gt;Welcome to our WebSite, Power By FnckSQL: &lt;strong&gt;&lt;a href=&#34;http://www.kipdata.site/&#34;&gt;http://www.kipdata.site/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick Started&lt;/h3&gt; &#xA;&lt;p&gt;Tips: Install rust toolchain first.&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/KipData/FnckSQL.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KipData/FnckSQL/main/static/images/start.gif&#34; alt=&#34;start&#34;&gt; then use &lt;code&gt;psql&lt;/code&gt; to enter sql &lt;img src=&#34;https://raw.githubusercontent.com/KipData/FnckSQL/main/static/images/pg.gif&#34; alt=&#34;pg&#34;&gt; Using FnckSQL in code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let fnck_sql = DataBaseBuilder::path(&#34;./data&#34;)&#xA;    .build()&#xA;    .await?;&#xA;let tuples = fnck_sql.run(&#34;select * from t1&#34;).await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Storage Support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KipDB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;h4&gt;Pull Image&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull kould23333/fncksql:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build From Source&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/KipData/FnckSQL.git&#xA;cd FnckSQL&#xA;docker build -t kould23333/fncksql:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run&lt;/h4&gt; &#xA;&lt;p&gt;We installed the &lt;code&gt;psql&lt;/code&gt; tool in the image for easy debug.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;psql -h 127.0.0.1 -p 5432&lt;/code&gt; to do this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d \&#xA;--name=fncksql \&#xA;-p 5432:5432 \&#xA;--restart=always \&#xA;-v fncksql-data:/fnck_sql/fncksql_data \&#xA;-v /etc/localtime:/etc/localtime:ro \&#xA;kould23333/fncksql:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ORM Mapping: &lt;code&gt;features = [&#34;marcos&#34;]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[derive(Default, Debug, PartialEq)]&#xA;struct MyStruct {&#xA;  c1: i32,&#xA;  c2: String,&#xA;}&#xA;&#xA;implement_from_tuple!(&#xA;    MyStruct, (&#xA;        c1: i32 =&amp;gt; |inner: &amp;amp;mut MyStruct, value| {&#xA;            if let DataValue::Int32(Some(val)) = value {&#xA;                inner.c1 = val;&#xA;            }&#xA;        },&#xA;        c2: String =&amp;gt; |inner: &amp;amp;mut MyStruct, value| {&#xA;            if let DataValue::Utf8(Some(val)) = value {&#xA;                inner.c2 = val;&#xA;            }&#xA;        }&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User-Defined Function: &lt;code&gt;features = [&#34;marcos&#34;]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;function!(TestFunction::test(LogicalType::Integer, LogicalType::Integer) -&amp;gt; LogicalType::Integer =&amp;gt; |v1: ValueRef, v2: ValueRef| {&#xA;    let plus_binary_evaluator = EvaluatorFactory::binary_create(LogicalType::Integer, BinaryOperator::Plus)?;&#xA;    let value = plus_binary_evaluator.binary_eval(&amp;amp;v1, &amp;amp;v2);&#xA;&#xA;    let plus_unary_evaluator = EvaluatorFactory::unary_create(LogicalType::Integer, UnaryOperator::Minus)?;&#xA;    Ok(plus_unary_evaluator.unary_eval(&amp;amp;value))&#xA;});&#xA;&#xA;let fnck_sql = DataBaseBuilder::path(&#34;./data&#34;)&#xA;    .register_function(TestFunction::new())&#xA;    .build()&#xA;    .await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimizer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RBO&lt;/li&gt; &#xA;   &lt;li&gt;CBO based on RBO(Physical Selection)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Execute &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Volcano&lt;/li&gt; &#xA;   &lt;li&gt;Codegen on LuaJIT: &lt;code&gt;features = [&#34;codegen_execute&#34;]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MVCC Transaction &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimistic&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Field options &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[not] null&lt;/li&gt; &#xA;   &lt;li&gt;unique&lt;/li&gt; &#xA;   &lt;li&gt;primary key&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SQL where options &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;is [not] null&lt;/li&gt; &#xA;   &lt;li&gt;[not] like&lt;/li&gt; &#xA;   &lt;li&gt;[not] in&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports index type &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PrimaryKey&lt;/li&gt; &#xA;   &lt;li&gt;Unique&lt;/li&gt; &#xA;   &lt;li&gt;Normal&lt;/li&gt; &#xA;   &lt;li&gt;Composite&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports multiple primary key types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tinyint&lt;/li&gt; &#xA;   &lt;li&gt;UTinyint&lt;/li&gt; &#xA;   &lt;li&gt;Smallint&lt;/li&gt; &#xA;   &lt;li&gt;USmallint&lt;/li&gt; &#xA;   &lt;li&gt;Integer&lt;/li&gt; &#xA;   &lt;li&gt;UInteger&lt;/li&gt; &#xA;   &lt;li&gt;Bigint&lt;/li&gt; &#xA;   &lt;li&gt;UBigint&lt;/li&gt; &#xA;   &lt;li&gt;Char&lt;/li&gt; &#xA;   &lt;li&gt;Varchar&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DDL &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Begin (Server only)&lt;/li&gt; &#xA;   &lt;li&gt;Commit (Server only)&lt;/li&gt; &#xA;   &lt;li&gt;Rollback (Server only)&lt;/li&gt; &#xA;   &lt;li&gt;Create &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Table&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Index: Unique\Normal\Composite&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Drop &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Table&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Index&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Alert &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Column&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Drop Column&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Truncate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DQL &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Select &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;SeqScan&lt;/li&gt; &#xA;     &lt;li&gt;IndexScan&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Where&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Distinct&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Alias&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Aggregation: count()/sum()/avg()/min()/max()&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SubQuery[select/from/where]&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Join: Inner/Left/Right/Full/Cross (Natural\Using)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Group By&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Having&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Order By&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Limit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Show Tables&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Explain&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describe&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Union&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DML &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Insert&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Insert Overwrite&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Analyze&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DataTypes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Invalid&lt;/li&gt; &#xA;   &lt;li&gt;SqlNull&lt;/li&gt; &#xA;   &lt;li&gt;Boolean&lt;/li&gt; &#xA;   &lt;li&gt;Tinyint&lt;/li&gt; &#xA;   &lt;li&gt;UTinyint&lt;/li&gt; &#xA;   &lt;li&gt;Smallint&lt;/li&gt; &#xA;   &lt;li&gt;USmallint&lt;/li&gt; &#xA;   &lt;li&gt;Integer&lt;/li&gt; &#xA;   &lt;li&gt;UInteger&lt;/li&gt; &#xA;   &lt;li&gt;Bigint&lt;/li&gt; &#xA;   &lt;li&gt;UBigint&lt;/li&gt; &#xA;   &lt;li&gt;Float&lt;/li&gt; &#xA;   &lt;li&gt;Double&lt;/li&gt; &#xA;   &lt;li&gt;Char&lt;/li&gt; &#xA;   &lt;li&gt;Varchar&lt;/li&gt; &#xA;   &lt;li&gt;Date&lt;/li&gt; &#xA;   &lt;li&gt;DateTime&lt;/li&gt; &#xA;   &lt;li&gt;Time&lt;/li&gt; &#xA;   &lt;li&gt;Tuple&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQL 2016&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FnckSQL uses the &lt;a href=&#34;https://github.com/KipData/KipSQL/raw/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt; to strike a balance between open contributions and allowing you to use the software however you want.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/KipData/FnckSQL/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/fncksql/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks For&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fedomn/sqlrs&#34;&gt;Fedomn/sqlrs&lt;/a&gt;: Main reference materials, Optimizer and Executor all refer to the design of sqlrs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/systemxlabs/bustubx&#34;&gt;systemxlabs/bustubx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/duckdb/duckdb&#34;&gt;duckdb/duckdb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>