<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-29T01:52:02Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rust-lang/miri</title>
    <updated>2024-09-29T01:52:02Z</updated>
    <id>tag:github.com,2024-09-29:/rust-lang/miri</id>
    <link href="https://github.com/rust-lang/miri" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An interpreter for Rust&#39;s mid-level intermediate representation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Miri&lt;/h1&gt; &#xA;&lt;p&gt;Miri is an &lt;a href=&#34;https://doc.rust-lang.org/reference/behavior-considered-undefined.html&#34;&gt;Undefined Behavior&lt;/a&gt; detection tool for Rust. It can run binaries and test suites of cargo projects and detect unsafe code that fails to uphold its safety requirements. For instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Out-of-bounds memory accesses and use-after-free&lt;/li&gt; &#xA; &lt;li&gt;Invalid use of uninitialized data&lt;/li&gt; &#xA; &lt;li&gt;Violation of intrinsic preconditions (an &lt;a href=&#34;https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html&#34;&gt;&lt;code&gt;unreachable_unchecked&lt;/code&gt;&lt;/a&gt; being reached, calling &lt;a href=&#34;https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html&#34;&gt;&lt;code&gt;copy_nonoverlapping&lt;/code&gt;&lt;/a&gt; with overlapping ranges, ...)&lt;/li&gt; &#xA; &lt;li&gt;Not sufficiently aligned memory accesses and references&lt;/li&gt; &#xA; &lt;li&gt;Violation of basic type invariants (a &lt;code&gt;bool&lt;/code&gt; that is not 0 or 1, for example, or an invalid enum discriminant)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experimental&lt;/strong&gt;: Violations of the &lt;a href=&#34;https://github.com/rust-lang/unsafe-code-guidelines/raw/master/wip/stacked-borrows.md&#34;&gt;Stacked Borrows&lt;/a&gt; rules governing aliasing for reference types&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experimental&lt;/strong&gt;: Violations of the &lt;a href=&#34;https://perso.crans.org/vanille/treebor/&#34;&gt;Tree Borrows&lt;/a&gt; aliasing rules, as an optional alternative to &lt;a href=&#34;https://github.com/rust-lang/unsafe-code-guidelines/raw/master/wip/stacked-borrows.md&#34;&gt;Stacked Borrows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experimental&lt;/strong&gt;: Data races and emulation of weak memory effects, i.e., atomic reads can return outdated values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On top of that, Miri will also tell you about memory leaks: when there is memory still allocated at the end of the execution, and that memory is not reachable from a global &lt;code&gt;static&lt;/code&gt;, Miri will raise an error.&lt;/p&gt; &#xA;&lt;p&gt;You can use Miri to emulate programs on other targets, e.g. to ensure that byte-level data manipulation works correctly both on little-endian and big-endian systems. See &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/#cross-interpretation-running-for-different-targets&#34;&gt;cross-interpretation&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;Miri has already discovered many &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/#bugs-found-by-miri&#34;&gt;real-world bugs&lt;/a&gt;. If you found a bug with Miri, we&#39;d appreciate if you tell us and we&#39;ll add it to the list!&lt;/p&gt; &#xA;&lt;p&gt;By default, Miri ensures a fully deterministic execution and isolates the program from the host system. Some APIs that would usually access the host, such as gathering entropy for random number generators, environment variables, and clocks, are replaced by deterministic &#34;fake&#34; implementations. Set &lt;code&gt;MIRIFLAGS=&#34;-Zmiri-disable-isolation&#34;&lt;/code&gt; to access the real system APIs instead. (In particular, the &#34;fake&#34; system RNG APIs make Miri &lt;strong&gt;not suited for cryptographic use&lt;/strong&gt;! Do not generate keys using Miri.)&lt;/p&gt; &#xA;&lt;p&gt;All that said, be aware that Miri does &lt;strong&gt;not catch every violation of the Rust specification&lt;/strong&gt; in your program, not least because there is no such specification. Miri uses its own approximation of what is and is not Undefined Behavior in Rust. To the best of our knowledge, all Undefined Behavior that has the potential to affect a program&#39;s correctness &lt;em&gt;is&lt;/em&gt; being detected by Miri (modulo &lt;a href=&#34;https://github.com/rust-lang/miri/labels/I-misses-UB&#34;&gt;bugs&lt;/a&gt;), but you should consult &lt;a href=&#34;https://doc.rust-lang.org/reference/behavior-considered-undefined.html&#34;&gt;the Reference&lt;/a&gt; for the official definition of Undefined Behavior. Miri will be updated with the Rust compiler to protect against UB as it is understood by the current compiler, but it makes no promises about future versions of rustc.&lt;/p&gt; &#xA;&lt;p&gt;Further caveats that Miri users should be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the program relies on unspecified details of how data is laid out, it will still run fine in Miri -- but might break (including causing UB) on different compiler versions or different platforms. (You can use &lt;code&gt;-Zrandomize-layout&lt;/code&gt; to detect some of these cases.)&lt;/li&gt; &#xA; &lt;li&gt;Program execution is non-deterministic when it depends, for example, on where exactly in memory allocations end up, or on the exact interleaving of concurrent threads. Miri tests one of many possible executions of your program, but it will miss bugs that only occur in a different possible execution. You can alleviate this to some extent by running Miri with different values for &lt;code&gt;-Zmiri-seed&lt;/code&gt;, but that will still by far not explore all possible executions.&lt;/li&gt; &#xA; &lt;li&gt;Miri runs the program as a platform-independent interpreter, so the program has no access to most platform-specific APIs or FFI. A few APIs have been implemented (such as printing to stdout, accessing environment variables, and basic file system access) but most have not: for example, Miri currently does not support networking. System API support varies between targets; if you run on Windows it is a good idea to use &lt;code&gt;--target x86_64-unknown-linux-gnu&lt;/code&gt; to get better support.&lt;/li&gt; &#xA; &lt;li&gt;Weak memory emulation may &lt;a href=&#34;https://github.com/rust-lang/miri/issues/2301&#34;&gt;produce weak behaviors&lt;/a&gt; when &lt;code&gt;SeqCst&lt;/code&gt; fences are used that are not actually permitted by the Rust memory model, and it cannot produce all behaviors possibly observable on real hardware.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moreover, Miri fundamentally cannot ensure that your code is &lt;em&gt;sound&lt;/em&gt;. &lt;a href=&#34;https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library&#34;&gt;Soundness&lt;/a&gt; is the property of never causing undefined behavior when invoked from arbitrary safe code, even in combination with other sound code. In contrast, Miri can just tell you if &lt;em&gt;a particular way of interacting with your code&lt;/em&gt; (e.g., a test suite) causes any undefined behavior &lt;em&gt;in a particular execution&lt;/em&gt; (of which there may be many, e.g. when concurrency or other forms of non-determinism are involved). When Miri finds UB, your code is definitely unsound, but when Miri does not find UB, then you may just have to test more inputs or more possible non-deterministic choices.&lt;/p&gt; &#xA;&lt;h2&gt;Using Miri&lt;/h2&gt; &#xA;&lt;p&gt;Install Miri on Rust nightly via &lt;code&gt;rustup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup +nightly component add miri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the following commands assume the nightly toolchain is pinned via &lt;code&gt;rustup override set nightly&lt;/code&gt;. Alternatively, use &lt;code&gt;cargo +nightly&lt;/code&gt; for each of the following commands.&lt;/p&gt; &#xA;&lt;p&gt;Now you can run your project in Miri:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run all tests in your project through Miri, use &lt;code&gt;cargo miri test&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you have a binary project, you can run it through Miri using &lt;code&gt;cargo miri run&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first time you run Miri, it will perform some extra setup and install some dependencies. It will ask you for confirmation before installing anything.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo miri run/test&lt;/code&gt; supports the exact same flags as &lt;code&gt;cargo run/test&lt;/code&gt;. For example, &lt;code&gt;cargo miri test filter&lt;/code&gt; only runs the tests containing &lt;code&gt;filter&lt;/code&gt; in their name.&lt;/p&gt; &#xA;&lt;p&gt;You can pass &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/#miri--z-flags-and-environment-variables&#34;&gt;flags&lt;/a&gt; to Miri via &lt;code&gt;MIRIFLAGS&lt;/code&gt;. For example, &lt;code&gt;MIRIFLAGS=&#34;-Zmiri-disable-stacked-borrows&#34; cargo miri run&lt;/code&gt; runs the program without checking the aliasing of references.&lt;/p&gt; &#xA;&lt;p&gt;When compiling code via &lt;code&gt;cargo miri&lt;/code&gt;, the &lt;code&gt;cfg(miri)&lt;/code&gt; config flag is set for code that will be interpreted under Miri. You can use this to ignore test cases that fail under Miri because they do things Miri does not support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[test]&#xA;#[cfg_attr(miri, ignore)]&#xA;fn does_not_work_on_miri() {&#xA;    tokio::run(futures::future:&lt;span&gt;🆗&lt;/span&gt;:&amp;lt;_, ()&amp;gt;(()));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is no way to list all the infinite things Miri cannot do, but the interpreter will explicitly tell you when it finds something unsupported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: unsupported operation: can&#39;t call foreign function: bind&#xA;    ...&#xA;    = help: this is likely not a bug in the program; it indicates that the program \&#xA;            performed an operation that Miri does not support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross-interpretation: running for different targets&lt;/h3&gt; &#xA;&lt;p&gt;Miri can not only run a binary or test suite for your host target, it can also perform cross-interpretation for arbitrary foreign targets: &lt;code&gt;cargo miri run --target x86_64-unknown-linux-gnu&lt;/code&gt; will run your program as if it was a Linux program, no matter your host OS. This is particularly useful if you are using Windows, as the Linux target is much better supported than Windows targets.&lt;/p&gt; &#xA;&lt;p&gt;You can also use this to test platforms with different properties than your host platform. For example &lt;code&gt;cargo miri test --target s390x-unknown-linux-gnu&lt;/code&gt; will run your test suite on a big-endian target, which is useful for testing endian-sensitive code.&lt;/p&gt; &#xA;&lt;h3&gt;Testing multiple different executions&lt;/h3&gt; &#xA;&lt;p&gt;Certain parts of the execution are picked randomly by Miri, such as the exact base address allocations are stored at and the interleaving of concurrently executing threads. Sometimes, it can be useful to explore multiple different execution, e.g. to make sure that your code does not depend on incidental &#34;super-alignment&#34; of new allocations and to test different thread interleavings. This can be done with the &lt;code&gt;--many-seeds&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo miri test --many-seeds # tries the seeds in 0..64&#xA;cargo miri test --many-seeds=0..16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default of 64 different seeds is quite slow, so you probably want to specify a smaller range.&lt;/p&gt; &#xA;&lt;h3&gt;Running Miri on CI&lt;/h3&gt; &#xA;&lt;p&gt;When running Miri on CI, use the following snippet to install a nightly toolchain with the Miri component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup toolchain install nightly --component miri&#xA;rustup override set nightly&#xA;&#xA;cargo miri test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example job for GitHub Actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  miri:&#xA;    name: &#34;Miri&#34;&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v4&#xA;      - name: Install Miri&#xA;        run: |&#xA;          rustup toolchain install nightly --component miri&#xA;          rustup override set nightly&#xA;          cargo miri setup&#xA;      - name: Test with Miri&#xA;        run: cargo miri test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The explicit &lt;code&gt;cargo miri setup&lt;/code&gt; helps to keep the output of the actual test step clean.&lt;/p&gt; &#xA;&lt;h3&gt;Supported targets&lt;/h3&gt; &#xA;&lt;p&gt;Miri does not support all targets supported by Rust. The good news, however, is that no matter your host OS/platform, it is easy to run code for &lt;em&gt;any&lt;/em&gt; target using &lt;code&gt;--target&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;The following targets are tested on CI and thus should always work (to the degree documented below):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Rust &lt;a href=&#34;https://doc.rust-lang.org/rustc/platform-support.html&#34;&gt;Tier 1 targets&lt;/a&gt; are supported by Miri. They are all checked on Miri&#39;s CI, and some (at least one per OS) are even checked on every Rust PR, so the shipped Miri should always work on these targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s390x-unknown-linux-gnu&lt;/code&gt; is supported as our &#34;big-endian target of choice&#34;.&lt;/li&gt; &#xA; &lt;li&gt;For every other target with OS &lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;macos&lt;/code&gt;, or &lt;code&gt;windows&lt;/code&gt;, Miri should generally work, but we make no promises and we don&#39;t run tests for such targets.&lt;/li&gt; &#xA; &lt;li&gt;We have unofficial support (not maintained by the Miri team itself) for some further operating systems. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;solaris&lt;/code&gt; / &lt;code&gt;illumos&lt;/code&gt;: maintained by @devnexen. Supports &lt;code&gt;std::{env, thread, sync}&lt;/code&gt;, but not &lt;code&gt;std::fs&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;freebsd&lt;/code&gt;: &lt;strong&gt;maintainer wanted&lt;/strong&gt;. Supports &lt;code&gt;std::env&lt;/code&gt; and parts of &lt;code&gt;std::{thread, fs}&lt;/code&gt;, but not &lt;code&gt;std::sync&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;android&lt;/code&gt;: &lt;strong&gt;maintainer wanted&lt;/strong&gt;. Support very incomplete, but a basic &#34;hello world&#34; works.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;wasi&lt;/code&gt;: &lt;strong&gt;maintainer wanted&lt;/strong&gt;. Support very incomplete, not even standard output works, but an empty &lt;code&gt;main&lt;/code&gt; function works.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For targets on other operating systems, Miri might fail before even reaching the &lt;code&gt;main&lt;/code&gt; function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, even for targets that we do support, the degree of support for accessing platform APIs (such as the file system) differs between targets: generally, Linux targets have the best support, and macOS targets are usually on par. Windows is supported less well.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests in parallel&lt;/h3&gt; &#xA;&lt;p&gt;Though it implements Rust threading, Miri itself is a single-threaded interpreter. This means that when running &lt;code&gt;cargo miri test&lt;/code&gt;, you will probably see a dramatic increase in the amount of time it takes to run your whole test suite due to the inherent interpreter slowdown and a loss of parallelism.&lt;/p&gt; &#xA;&lt;p&gt;You can get your test suite&#39;s parallelism back by running &lt;code&gt;cargo miri nextest run -jN&lt;/code&gt; (note that you will need &lt;a href=&#34;https://nexte.st&#34;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/a&gt; installed). This works because &lt;code&gt;cargo-nextest&lt;/code&gt; collects a list of all tests then launches a separate &lt;code&gt;cargo miri run&lt;/code&gt; for each test. You will need to specify a &lt;code&gt;-j&lt;/code&gt; or &lt;code&gt;--test-threads&lt;/code&gt;; by default &lt;code&gt;cargo miri nextest run&lt;/code&gt; runs one test at a time. For more details, see the &lt;a href=&#34;https://nexte.st/book/miri.html&#34;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt; Miri documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This one-test-per-process model means that &lt;code&gt;cargo miri test&lt;/code&gt; is able to detect data races where two tests race on a shared resource, but &lt;code&gt;cargo miri nextest run&lt;/code&gt; will not detect such races.&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;cargo-nextest&lt;/code&gt; does not support doctests, see &lt;a href=&#34;https://github.com/nextest-rs/nextest/issues/16&#34;&gt;https://github.com/nextest-rs/nextest/issues/16&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Common Problems&lt;/h3&gt; &#xA;&lt;p&gt;When using the above instructions, you may encounter a number of confusing compiler errors.&lt;/p&gt; &#xA;&lt;h4&gt;&#34;note: run with &lt;code&gt;RUST_BACKTRACE=1&lt;/code&gt; environment variable to display a backtrace&#34;&lt;/h4&gt; &#xA;&lt;p&gt;You may see this when trying to get Miri to display a backtrace. By default, Miri doesn&#39;t expose any environment to the program, so running &lt;code&gt;RUST_BACKTRACE=1 cargo miri test&lt;/code&gt; will not do what you expect.&lt;/p&gt; &#xA;&lt;p&gt;To get a backtrace, you need to disable isolation &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/#miri--z-flags-and-environment-variables&#34;&gt;using &lt;code&gt;-Zmiri-disable-isolation&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;RUST_BACKTRACE=1 MIRIFLAGS=&#34;-Zmiri-disable-isolation&#34; cargo miri test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&#34;found crate &lt;code&gt;std&lt;/code&gt; compiled by an incompatible version of rustc&#34;&lt;/h4&gt; &#xA;&lt;p&gt;You may be running &lt;code&gt;cargo miri&lt;/code&gt; with a different compiler version than the one used to build the custom libstd that Miri uses, and Miri failed to detect that. Try running &lt;code&gt;cargo miri clean&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Miri &lt;code&gt;-Z&lt;/code&gt; flags and environment variables&lt;/h2&gt; &#xA;&lt;p&gt;Miri adds its own set of &lt;code&gt;-Z&lt;/code&gt; flags, which are usually set via the &lt;code&gt;MIRIFLAGS&lt;/code&gt; environment variable. We first document the most relevant and most commonly used flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-address-reuse-rate=&amp;lt;rate&amp;gt;&lt;/code&gt; changes the probability that a freed &lt;em&gt;non-stack&lt;/em&gt; allocation will be added to the pool for address reuse, and the probability that a new &lt;em&gt;non-stack&lt;/em&gt; allocation will be taken from the pool. Stack allocations never get added to or taken from the pool. The default is &lt;code&gt;0.5&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-address-reuse-cross-thread-rate=&amp;lt;rate&amp;gt;&lt;/code&gt; changes the probability that an allocation which attempts to reuse a previously freed block of memory will also consider blocks freed by &lt;em&gt;other threads&lt;/em&gt;. The default is &lt;code&gt;0.1&lt;/code&gt;, which means by default, in 90% of the cases where an address reuse attempt is made, only addresses from the same thread will be considered. Reusing an address from another thread induces synchronization between those threads, which can mask data races and weak memory bugs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-compare-exchange-weak-failure-rate=&amp;lt;rate&amp;gt;&lt;/code&gt; changes the failure rate of &lt;code&gt;compare_exchange_weak&lt;/code&gt; operations. The default is &lt;code&gt;0.8&lt;/code&gt; (so 4 out of 5 weak ops will fail). You can change it to any value between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;, where &lt;code&gt;1.0&lt;/code&gt; means it will always fail and &lt;code&gt;0.0&lt;/code&gt; means it will never fail. Note than setting it to &lt;code&gt;1.0&lt;/code&gt; will likely cause hangs, since it means programs using &lt;code&gt;compare_exchange_weak&lt;/code&gt; cannot make progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-disable-isolation&lt;/code&gt; disables host isolation. As a consequence, the program has access to host resources such as environment variables, file systems, and randomness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-disable-leak-backtraces&lt;/code&gt; disables backtraces reports for memory leaks. By default, a backtrace is captured for every allocation when it is created, just in case it leaks. This incurs some memory overhead to store data that is almost never used. This flag is implied by &lt;code&gt;-Zmiri-ignore-leaks&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-env-forward=&amp;lt;var&amp;gt;&lt;/code&gt; forwards the &lt;code&gt;var&lt;/code&gt; environment variable to the interpreted program. Can be used multiple times to forward several variables. Execution will still be deterministic if the value of forwarded variables stays the same. Has no effect if &lt;code&gt;-Zmiri-disable-isolation&lt;/code&gt; is set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-env-set=&amp;lt;var&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; sets the &lt;code&gt;var&lt;/code&gt; environment variable to &lt;code&gt;value&lt;/code&gt; in the interpreted program. It can be used to pass environment variables without needing to alter the host environment. It can be used multiple times to set several variables. If &lt;code&gt;-Zmiri-disable-isolation&lt;/code&gt; or &lt;code&gt;-Zmiri-env-forward&lt;/code&gt; is set, values set with this option will have priority over values from the host environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-ignore-leaks&lt;/code&gt; disables the memory leak checker, and also allows some remaining threads to exist when the main thread exits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-isolation-error=&amp;lt;action&amp;gt;&lt;/code&gt; configures Miri&#39;s response to operations requiring host access while isolation is enabled. &lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;hide&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, and &lt;code&gt;warn-nobacktrace&lt;/code&gt; are the supported actions. The default is to &lt;code&gt;abort&lt;/code&gt;, which halts the machine. Some (but not all) operations also support continuing execution with a &#34;permission denied&#34; error being returned to the program. &lt;code&gt;warn&lt;/code&gt; prints a full backtrace each time that happens; &lt;code&gt;warn-nobacktrace&lt;/code&gt; is less verbose and shown at most once per operation. &lt;code&gt;hide&lt;/code&gt; hides the warning entirely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-num-cpus&lt;/code&gt; states the number of available CPUs to be reported by miri. By default, the number of available CPUs is &lt;code&gt;1&lt;/code&gt;. Note that this flag does not affect how miri handles threads in any way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-permissive-provenance&lt;/code&gt; disables the warning for integer-to-pointer casts and &lt;a href=&#34;https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html&#34;&gt;&lt;code&gt;ptr::with_exposed_provenance&lt;/code&gt;&lt;/a&gt;. This will necessarily miss some bugs as those operations are not efficiently and accurately implementable in a sanitizer, but it will only miss bugs that concern memory/pointers which is subject to these operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-preemption-rate&lt;/code&gt; configures the probability that at the end of a basic block, the active thread will be preempted. The default is &lt;code&gt;0.01&lt;/code&gt; (i.e., 1%). Setting this to &lt;code&gt;0&lt;/code&gt; disables preemption.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-report-progress&lt;/code&gt; makes Miri print the current stacktrace every now and then, so you can tell what it is doing when a program just keeps running. You can customize how frequently the report is printed via &lt;code&gt;-Zmiri-report-progress=&amp;lt;blocks&amp;gt;&lt;/code&gt;, which prints the report every N basic blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-seed=&amp;lt;num&amp;gt;&lt;/code&gt; configures the seed of the RNG that Miri uses to resolve non-determinism. This RNG is used to pick base addresses for allocations, to determine preemption and failure of &lt;code&gt;compare_exchange_weak&lt;/code&gt;, and to control store buffering for weak memory emulation. When isolation is enabled (the default), this is also used to emulate system entropy. The default seed is 0. You can increase test coverage by running Miri multiple times with different seeds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-strict-provenance&lt;/code&gt; enables &lt;a href=&#34;https://github.com/rust-lang/rust/issues/95228&#34;&gt;strict provenance&lt;/a&gt; checking in Miri. This means that casting an integer to a pointer yields a result with &#39;invalid&#39; provenance, i.e., with provenance that cannot be used for any memory access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-symbolic-alignment-check&lt;/code&gt; makes the alignment check more strict. By default, alignment is checked by casting the pointer to an integer, and making sure that is a multiple of the alignment. This can lead to cases where a program passes the alignment check by pure chance, because things &#34;happened to be&#34; sufficiently aligned -- there is no UB in this execution but there would be UB in others. To avoid such cases, the symbolic alignment check only takes into account the requested alignment of the relevant allocation, and the offset into that allocation. This avoids missing such bugs, but it also incurs some false positives when the code does manual integer arithmetic to ensure alignment. (The standard library &lt;code&gt;align_to&lt;/code&gt; method works fine in both modes; under symbolic alignment it only fills the middle slice when the allocation guarantees sufficient alignment.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The remaining flags are for advanced use only, and more likely to change or be removed. Some of these are &lt;strong&gt;unsound&lt;/strong&gt;, which means they can lead to Miri failing to detect cases of undefined behavior in a program.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-disable-alignment-check&lt;/code&gt; disables checking pointer alignment, so you can focus on other failures, but it means Miri can miss bugs in your program. Using this flag is &lt;strong&gt;unsound&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-disable-data-race-detector&lt;/code&gt; disables checking for data races. Using this flag is &lt;strong&gt;unsound&lt;/strong&gt;. This implies &lt;code&gt;-Zmiri-disable-weak-memory-emulation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-disable-stacked-borrows&lt;/code&gt; disables checking the experimental aliasing rules to track borrows (&lt;a href=&#34;https://github.com/rust-lang/unsafe-code-guidelines/raw/master/wip/stacked-borrows.md&#34;&gt;Stacked Borrows&lt;/a&gt; and &lt;a href=&#34;https://perso.crans.org/vanille/treebor/&#34;&gt;Tree Borrows&lt;/a&gt;). This can make Miri run faster, but it also means no aliasing violations will be detected. Using this flag is &lt;strong&gt;unsound&lt;/strong&gt; (but the affected soundness rules are experimental). Later flags take precedence: borrow tracking can be reactivated by &lt;code&gt;-Zmiri-tree-borrows&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-disable-validation&lt;/code&gt; disables enforcing validity invariants, which are enforced by default. This is mostly useful to focus on other failures (such as out-of-bounds accesses) first. Setting this flag means Miri can miss bugs in your program. However, this can also help to make Miri run faster. Using this flag is &lt;strong&gt;unsound&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-disable-weak-memory-emulation&lt;/code&gt; disables the emulation of some C++11 weak memory effects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-native-lib=&amp;lt;path to a shared object file&amp;gt;&lt;/code&gt; is an experimental flag for providing support for calling native functions from inside the interpreter via FFI. Functions not provided by that file are still executed via the usual Miri shims. &lt;strong&gt;WARNING&lt;/strong&gt;: If an invalid/incorrect &lt;code&gt;.so&lt;/code&gt; file is specified, this can cause Undefined Behavior in Miri itself! And of course, Miri cannot do any checks on the actions taken by the native code. Note that Miri has its own handling of file descriptors, so if you want to replace &lt;em&gt;some&lt;/em&gt; functions working on file descriptors, you will have to replace &lt;em&gt;all&lt;/em&gt; of them, or the two kinds of file descriptors will be mixed up. This is &lt;strong&gt;work in progress&lt;/strong&gt;; currently, only integer arguments and return values are supported (and no, pointer/integer casts to work around this limitation will not work; they will fail horribly). It also only works on Unix hosts for now.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-measureme=&amp;lt;name&amp;gt;&lt;/code&gt; enables &lt;code&gt;measureme&lt;/code&gt; profiling for the interpreted program. This can be used to find which parts of your program are executing slowly under Miri. The profile is written out to a file inside a directory called &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, and can be processed using the tools in the repository &lt;a href=&#34;https://github.com/rust-lang/measureme&#34;&gt;https://github.com/rust-lang/measureme&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-mute-stdout-stderr&lt;/code&gt; silently ignores all writes to stdout and stderr, but reports to the program that it did actually write. This is useful when you are not interested in the actual program&#39;s output, but only want to see Miri&#39;s errors and warnings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-panic-on-unsupported&lt;/code&gt; will makes some forms of unsupported functionality, such as FFI and unsupported syscalls, panic within the context of the emulated application instead of raising an error within the context of Miri (and halting execution). Note that code might not expect these operations to ever panic, so this flag can lead to strange (mis)behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-recursive-validation&lt;/code&gt; is a &lt;em&gt;highly experimental&lt;/em&gt; flag that makes validity checking recurse below references.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-retag-fields[=&amp;lt;all|none|scalar&amp;gt;]&lt;/code&gt; controls when Stacked Borrows retagging recurses into fields. &lt;code&gt;all&lt;/code&gt; means it always recurses (the default, and equivalent to &lt;code&gt;-Zmiri-retag-fields&lt;/code&gt; without an explicit value), &lt;code&gt;none&lt;/code&gt; means it never recurses, &lt;code&gt;scalar&lt;/code&gt; means it only recurses for types where we would also emit &lt;code&gt;noalias&lt;/code&gt; annotations in the generated LLVM IR (types passed as individual scalars or pairs of scalars). Setting this to &lt;code&gt;none&lt;/code&gt; is &lt;strong&gt;unsound&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-provenance-gc=&amp;lt;blocks&amp;gt;&lt;/code&gt; configures how often the pointer provenance garbage collector runs. The default is to search for and remove unreachable provenance once every &lt;code&gt;10000&lt;/code&gt; basic blocks. Setting this to &lt;code&gt;0&lt;/code&gt; disables the garbage collector, which causes some programs to have explosive memory usage and/or super-linear runtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-track-alloc-accesses&lt;/code&gt; show not only allocation and free events for tracked allocations, but also reads and writes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-track-alloc-id=&amp;lt;id1&amp;gt;,&amp;lt;id2&amp;gt;,...&lt;/code&gt; shows a backtrace when the given allocations are being allocated or freed. This helps in debugging memory leaks and use after free bugs. Specifying this argument multiple times does not overwrite the previous values, instead it appends its values to the list. Listing an id multiple times has no effect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-track-pointer-tag=&amp;lt;tag1&amp;gt;,&amp;lt;tag2&amp;gt;,...&lt;/code&gt; shows a backtrace when a given pointer tag is created and when (if ever) it is popped from a borrow stack (which is where the tag becomes invalid and any future use of it will error). This helps you in finding out why UB is happening and where in your code would be a good place to look for it. Specifying this argument multiple times does not overwrite the previous values, instead it appends its values to the list. Listing a tag multiple times has no effect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-track-weak-memory-loads&lt;/code&gt; shows a backtrace when weak memory emulation returns an outdated value from a load. This can help diagnose problems that disappear under &lt;code&gt;-Zmiri-disable-weak-memory-emulation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-tree-borrows&lt;/code&gt; replaces &lt;a href=&#34;https://github.com/rust-lang/unsafe-code-guidelines/raw/master/wip/stacked-borrows.md&#34;&gt;Stacked Borrows&lt;/a&gt; with the &lt;a href=&#34;https://perso.crans.org/vanille/treebor/&#34;&gt;Tree Borrows&lt;/a&gt; rules. Tree Borrows is even more experimental than Stacked Borrows. While Tree Borrows is still sound in the sense of catching all aliasing violations that current versions of the compiler might exploit, it is likely that the eventual final aliasing model of Rust will be stricter than Tree Borrows. In other words, if you use Tree Borrows, even if your code is accepted today, it might be declared UB in the future. This is much less likely with Stacked Borrows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-force-page-size=&amp;lt;num&amp;gt;&lt;/code&gt; overrides the default page size for an architecture, in multiples of 1k. &lt;code&gt;4&lt;/code&gt; is default for most targets. This value should always be a power of 2 and nonzero.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmiri-unique-is-unique&lt;/code&gt; performs additional aliasing checks for &lt;code&gt;core::ptr::Unique&lt;/code&gt; to ensure that it could theoretically be considered &lt;code&gt;noalias&lt;/code&gt;. This flag is experimental and has an effect only when used with &lt;code&gt;-Zmiri-tree-borrows&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some native rustc &lt;code&gt;-Z&lt;/code&gt; flags are also very relevant for Miri:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmir-opt-level&lt;/code&gt; controls how many MIR optimizations are performed. Miri overrides the default to be &lt;code&gt;0&lt;/code&gt;; be advised that using any higher level can make Miri miss bugs in your program because they got optimized away.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zalways-encode-mir&lt;/code&gt; makes rustc dump MIR even for completely monomorphic functions. This is needed so that Miri can execute such functions, so Miri sets this flag per default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Zmir-emit-retag&lt;/code&gt; controls whether &lt;code&gt;Retag&lt;/code&gt; statements are emitted. Miri enables this per default because it is needed for &lt;a href=&#34;https://github.com/rust-lang/unsafe-code-guidelines/raw/master/wip/stacked-borrows.md&#34;&gt;Stacked Borrows&lt;/a&gt; and &lt;a href=&#34;https://perso.crans.org/vanille/treebor/&#34;&gt;Tree Borrows&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moreover, Miri recognizes some environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIRIFLAGS&lt;/code&gt; defines extra flags to be passed to Miri.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIRI_LIB_SRC&lt;/code&gt; defines the directory where Miri expects the sources of the standard library that it will build and use for interpretation. This directory must point to the &lt;code&gt;library&lt;/code&gt; subdirectory of a &lt;code&gt;rust-lang/rust&lt;/code&gt; repository checkout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIRI_SYSROOT&lt;/code&gt; indicates the sysroot to use. When using &lt;code&gt;cargo miri test&lt;/code&gt;/&lt;code&gt;cargo miri run&lt;/code&gt;, this skips the automatic setup -- only set this if you do not want to use the automatically created sysroot. When invoking &lt;code&gt;cargo miri setup&lt;/code&gt;, this indicates where the sysroot will be put.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIRI_NO_STD&lt;/code&gt; makes sure that the target&#39;s sysroot is built without libstd. This allows testing and running no_std programs. This should &lt;em&gt;not usually be used&lt;/em&gt;; Miri has a heuristic to detect no-std targets based on the target name. Setting this on a target that does support libstd can lead to confusing results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Miri &lt;code&gt;extern&lt;/code&gt; functions&lt;/h2&gt; &#xA;&lt;p&gt;Miri provides some &lt;code&gt;extern&lt;/code&gt; functions that programs can import to access Miri-specific functionality. They are declared in &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/tests/utils/miri_extern.rs&#34;&gt;/tests/utils/miri_extern.rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Entry point for no-std binaries&lt;/h2&gt; &#xA;&lt;p&gt;Binaries that do not use the standard library are expected to declare a function like this so that Miri knows where it is supposed to start execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[cfg(miri)]&#xA;#[no_mangle]&#xA;fn miri_start(argc: isize, argv: *const *const u8) -&amp;gt; isize {&#xA;    // Call the actual start function that your project implements, based on your target&#39;s conventions.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing and getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to Miri, great! Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For help with running Miri, you can open an issue here on GitHub or use the &lt;a href=&#34;https://rust-lang.zulipchat.com/#narrow/stream/269128-miri&#34;&gt;Miri stream on the Rust Zulip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This project began as part of an undergraduate research course in 2015 by @solson at the &lt;a href=&#34;https://www.usask.ca/&#34;&gt;University of Saskatchewan&lt;/a&gt;. There are &lt;a href=&#34;https://solson.me/miri-slides.pdf&#34;&gt;slides&lt;/a&gt; and a &lt;a href=&#34;https://solson.me/miri-report.pdf&#34;&gt;report&lt;/a&gt; available from that project. In 2016, @oli-obk joined to prepare Miri for eventually being used as const evaluator in the Rust compiler itself (basically, for &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; stuff), replacing the old evaluator that worked directly on the AST. In 2017, @RalfJung did an internship with Mozilla and began developing Miri towards a tool for detecting undefined behavior, and also using Miri as a way to explore the consequences of various possible definitions for undefined behavior in Rust. @oli-obk&#39;s move of the Miri engine into the compiler finally came to completion in early 2018. Meanwhile, later that year, @RalfJung did a second internship, developing Miri further with support for checking basic type invariants and verifying that references are used according to their aliasing restrictions.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs found by Miri&lt;/h2&gt; &#xA;&lt;p&gt;Miri has already found a number of bugs in the Rust standard library and beyond, some of which we collect here. If Miri helped you find a subtle UB bug in your code, we&#39;d appreciate a PR adding it to the list!&lt;/p&gt; &#xA;&lt;p&gt;Definite bugs found:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/53566&#34;&gt;&lt;code&gt;Debug for vec_deque::Iter&lt;/code&gt; accessing uninitialized memory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/53804&#34;&gt;&lt;code&gt;Vec::into_iter&lt;/code&gt; doing an unaligned ZST read&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/54908&#34;&gt;&lt;code&gt;From&amp;lt;&amp;amp;[T]&amp;gt; for Rc&lt;/code&gt; creating a not sufficiently aligned reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/54957&#34;&gt;&lt;code&gt;BTreeMap&lt;/code&gt; creating a shared reference pointing to a too small allocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/61082&#34;&gt;&lt;code&gt;Vec::append&lt;/code&gt; creating a dangling reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/56319&#34;&gt;Futures turning a shared reference into a mutable one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/58200&#34;&gt;&lt;code&gt;str&lt;/code&gt; turning a shared reference into a mutable one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-random/rand/issues/779&#34;&gt;&lt;code&gt;rand&lt;/code&gt; performing unaligned reads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/62251&#34;&gt;The Unix allocator calling &lt;code&gt;posix_memalign&lt;/code&gt; in an invalid way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-random/getrandom/pull/73&#34;&gt;&lt;code&gt;getrandom&lt;/code&gt; calling the &lt;code&gt;getrandom&lt;/code&gt; syscall in an invalid way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/69770&#34;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/rust-lang/rust/issues/69769&#34;&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt; leaking memory under some (panicky) conditions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maciejhirsz/beef/issues/12&#34;&gt;&lt;code&gt;beef&lt;/code&gt; leaking memory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Firstyear/concread/commit/b15be53b6ec076acb295a5c0483cdb4bf9be838f#diff-6282b2fc8e98bd089a1f0c86f648157cR229&#34;&gt;&lt;code&gt;EbrCell&lt;/code&gt; using uninitialized memory incorrectly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tikv/tikv/issues/7613&#34;&gt;TiKV performing an unaligned pointer access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/servo/servo/issues/26357&#34;&gt;&lt;code&gt;servo_arc&lt;/code&gt; creating a dangling shared reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tikv/tikv/pull/7751&#34;&gt;TiKV constructing out-of-bounds pointers (and overlapping mutable references)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hsivonen/encoding_rs/pull/53&#34;&gt;&lt;code&gt;encoding_rs&lt;/code&gt; doing out-of-bounds pointer arithmetic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tikv/agatedb/pull/24&#34;&gt;TiKV using &lt;code&gt;Vec::from_raw_parts&lt;/code&gt; incorrectly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Incorrect doctests for &lt;a href=&#34;https://github.com/rust-lang/rust/pull/84052&#34;&gt;&lt;code&gt;AtomicPtr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/rust-lang/rust/pull/84053&#34;&gt;&lt;code&gt;Box::from_raw_in&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gankra/thin-vec/pull/27&#34;&gt;Insufficient alignment in &lt;code&gt;ThinVec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crossbeam-rs/crossbeam/pull/779&#34;&gt;&lt;code&gt;crossbeam-epoch&lt;/code&gt; calling &lt;code&gt;assume_init&lt;/code&gt; on a partly-initialized &lt;code&gt;MaybeUninit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dermesser/integer-encoding-rs/pull/23&#34;&gt;&lt;code&gt;integer-encoding&lt;/code&gt; dereferencing a misaligned pointer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rkyv/rkyv/commit/a9417193a34757e12e24263178be8b2eebb72456&#34;&gt;&lt;code&gt;rkyv&lt;/code&gt; constructing a &lt;code&gt;Box&amp;lt;[u8]&amp;gt;&lt;/code&gt; from an overaligned allocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vorner/arc-swap/issues/76&#34;&gt;Data race in &lt;code&gt;arc-swap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/98498&#34;&gt;Data race in &lt;code&gt;thread::scope&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/rust/comments/vq3mmu/comment/ienc7t0?context=3&#34;&gt;&lt;code&gt;regex&lt;/code&gt; incorrectly handling unaligned &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; buffers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matklad/once_cell/issues/186&#34;&gt;Incorrect use of &lt;code&gt;compare_exchange_weak&lt;/code&gt; in &lt;code&gt;once_cell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/106084&#34;&gt;Dropping with unaligned pointers in &lt;code&gt;vec::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/118460&#34;&gt;Deallocating with the wrong layout in new specializations for in-place &lt;code&gt;Iterator::collect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taiki-e/portable-atomic/pull/138&#34;&gt;Incorrect offset computation for highly-aligned types in &lt;code&gt;portable-atomic-util&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/121582&#34;&gt;Occasional memory leak in &lt;code&gt;std::mpsc&lt;/code&gt; channels&lt;/a&gt; (original code in &lt;a href=&#34;https://github.com/crossbeam-rs/crossbeam/pull/1084&#34;&gt;crossbeam&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/124281&#34;&gt;Weak-memory-induced memory leak in Windows thread-local storage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Violations of &lt;a href=&#34;https://github.com/rust-lang/unsafe-code-guidelines/raw/master/wip/stacked-borrows.md&#34;&gt;Stacked Borrows&lt;/a&gt; found that are likely bugs (but Stacked Borrows is currently just an experiment):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/56161&#34;&gt;&lt;code&gt;VecDeque::drain&lt;/code&gt; creating overlapping mutable references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Various &lt;code&gt;BTreeMap&lt;/code&gt; problems &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/58431&#34;&gt;&lt;code&gt;BTreeMap&lt;/code&gt; iterators creating mutable references that overlap with shared references&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/73915&#34;&gt;&lt;code&gt;BTreeMap::iter_mut&lt;/code&gt; creating overlapping mutable references&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/78477&#34;&gt;&lt;code&gt;BTreeMap&lt;/code&gt; node insertion using raw pointers outside their valid memory area&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/60072&#34;&gt;&lt;code&gt;LinkedList&lt;/code&gt; cursor insertion creating overlapping mutable references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/60847&#34;&gt;&lt;code&gt;Vec::push&lt;/code&gt; invalidating existing references into the vector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/68549&#34;&gt;&lt;code&gt;align_to_mut&lt;/code&gt; violating uniqueness of mutable references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bodil/sized-chunks/issues/8&#34;&gt;&lt;code&gt;sized-chunks&lt;/code&gt; creating aliasing mutable references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/70301&#34;&gt;&lt;code&gt;String::push_str&lt;/code&gt; invalidating existing references into the string&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dtolnay/ryu/issues/24&#34;&gt;&lt;code&gt;ryu&lt;/code&gt; using raw pointers outside their valid memory area&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/miri/issues/1364&#34;&gt;ink! creating overlapping mutable references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tikv/tikv/pull/7709&#34;&gt;TiKV creating overlapping mutable reference and raw pointer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/70479&#34;&gt;Windows &lt;code&gt;Env&lt;/code&gt; iterator using a raw pointer outside its valid memory area&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/74029&#34;&gt;&lt;code&gt;VecDeque::iter_mut&lt;/code&gt; creating overlapping mutable references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/78602&#34;&gt;Various standard library aliasing issues involving raw pointers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/pull/85610&#34;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::copy_within&lt;/code&gt; using a loan after invalidating it&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scientific papers employing Miri&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plv.mpi-sws.org/rustbelt/stacked-borrows/&#34;&gt;Stacked Borrows: An Aliasing Model for Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.science/publications/using-lightweight-formal-methods-to-validate-a-key-value-storage-node-in-amazon-s3&#34;&gt;Using Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3453483.3454084&#34;&gt;SyRust: Automatic Testing of Rust Libraries with Semantic-Aware Program Synthesis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/miri/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PyO3/maturin</title>
    <updated>2024-09-29T01:52:02Z</updated>
    <id>tag:github.com,2024-09-29:/PyO3/maturin</id>
    <link href="https://github.com/PyO3/maturin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build and publish crates with pyo3, cffi and uniffi bindings as well as rust binaries as python packages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Maturin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;formerly pyo3-pack&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maturin.rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/user-guide-brightgreen?logo=readthedocs&amp;amp;style=flat-square&#34; alt=&#34;Maturin User Guide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/maturin&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/maturin.svg?logo=rust&amp;amp;style=flat-square&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/maturin&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/maturin.svg?logo=python&amp;amp;style=flat-square&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PyO3/maturin/actions&#34;&gt;&lt;img src=&#34;https://github.com/PyO3/maturin/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/PyO3/maturin&#34;&gt;&lt;img src=&#34;https://img.shields.io/cirrus/github/PyO3/maturin/main?logo=CircleCI&amp;amp;style=flat-square&#34; alt=&#34;FreeBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/33kcChzH7f&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1209263839632424990?logo=discord&#34; alt=&#34;discord server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build and publish crates with pyo3, cffi and uniffi bindings as well as rust binaries as python packages with minimal configuration. It supports building wheels for python 3.8+ on windows, linux, mac and freebsd, can upload them to &lt;a href=&#34;https://pypi.org/&#34;&gt;pypi&lt;/a&gt; and has basic pypy and graalpy support.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://maturin.rs/&#34;&gt;User Guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either download binaries from the &lt;a href=&#34;https://github.com/PyO3/maturin/releases/latest&#34;&gt;latest release&lt;/a&gt; or install it with &lt;a href=&#34;https://pypa.github.io/pipx/&#34;&gt;pipx&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pipx install maturin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;pip install maturin&lt;/code&gt; should also work if you don&#39;t want to use pipx.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are four main commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;maturin new&lt;/code&gt; creates a new cargo project with maturin configured.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maturin publish&lt;/code&gt; builds the crate into python packages and publishes them to pypi.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maturin build&lt;/code&gt; builds the wheels and stores them in a folder (&lt;code&gt;target/wheels&lt;/code&gt; by default), but doesn&#39;t upload them. It&#39;s possible to upload those with &lt;a href=&#34;https://github.com/pypa/twine&#34;&gt;twine&lt;/a&gt; or &lt;code&gt;maturin upload&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maturin develop&lt;/code&gt; builds the crate and installs it as a python module directly in the current virtualenv. Note that while &lt;code&gt;maturin develop&lt;/code&gt; is faster, it doesn&#39;t support all the feature that running &lt;code&gt;pip install&lt;/code&gt; after &lt;code&gt;maturin build&lt;/code&gt; supports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;pyo3&lt;/code&gt; bindings are automatically detected. For cffi or binaries, you need to pass &lt;code&gt;-b cffi&lt;/code&gt; or &lt;code&gt;-b bin&lt;/code&gt;. maturin doesn&#39;t need extra configuration files and doesn&#39;t clash with an existing setuptools-rust or milksnake configuration. You can even integrate it with testing tools such as &lt;a href=&#34;https://tox.readthedocs.io/en/latest/&#34;&gt;tox&lt;/a&gt;. There are examples for the different bindings in the &lt;code&gt;test-crates&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;The name of the package will be the name of the cargo project, i.e. the name field in the &lt;code&gt;[package]&lt;/code&gt; section of &lt;code&gt;Cargo.toml&lt;/code&gt;. The name of the module, which you are using when importing, will be the &lt;code&gt;name&lt;/code&gt; value in the &lt;code&gt;[lib]&lt;/code&gt; section (which defaults to the name of the package). For binaries, it&#39;s simply the name of the binary generated by cargo.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;code&gt;maturin build&lt;/code&gt; and &lt;code&gt;maturin develop&lt;/code&gt; commands, you can compile a performance-optimized program by adding the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--release&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Python packaging basics&lt;/h2&gt; &#xA;&lt;p&gt;Python packages come in two formats: A built form called wheel and source distributions (sdist), both of which are archives. A wheel can be compatible with any python version, interpreter (cpython and pypy, mainly), operating system and hardware architecture (for pure python wheels), can be limited to a specific platform and architecture (e.g. when using ctypes or cffi) or to a specific python interpreter and version on a specific architecture and operating system (e.g. with pyo3).&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;code&gt;pip install&lt;/code&gt; on a package, pip tries to find a matching wheel and install that. If it doesn&#39;t find one, it downloads the source distribution and builds a wheel for the current platform, which requires the right compilers to be installed. Installing a wheel is much faster than installing a source distribution as building wheels is generally slow.&lt;/p&gt; &#xA;&lt;p&gt;When you publish a package to be installable with &lt;code&gt;pip install&lt;/code&gt;, you upload it to &lt;a href=&#34;https://pypi.org/&#34;&gt;pypi&lt;/a&gt;, the official package repository. For testing, you can use &lt;a href=&#34;https://test.pypi.org/&#34;&gt;test pypi&lt;/a&gt; instead, which you can use with &lt;code&gt;pip install --index-url https://test.pypi.org/simple/&lt;/code&gt;. Note that for publishing for linux, &lt;a href=&#34;https://raw.githubusercontent.com/PyO3/maturin/main/#manylinux-and-auditwheel&#34;&gt;you need to use the manylinux docker container&lt;/a&gt;, while for publishing from your repository you can use the &lt;a href=&#34;https://github.com/PyO3/maturin-action&#34;&gt;PyO3/maturin-action github action&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;pyo3&lt;/h2&gt; &#xA;&lt;p&gt;For pyo3, maturin can only build packages for installed python versions. On linux and mac, all python versions in &lt;code&gt;PATH&lt;/code&gt; are used. If you don&#39;t set your own interpreters with &lt;code&gt;-i&lt;/code&gt;, a heuristic is used to search for python installations. On windows all versions from the python launcher (which is installed by default by the python.org installer) and all conda environments except base are used. You can check which versions are picked up with the &lt;code&gt;list-python&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;pyo3 will set the used python interpreter in the environment variable &lt;code&gt;PYTHON_SYS_EXECUTABLE&lt;/code&gt;, which can be used from custom build scripts. Maturin can build and upload wheels for pypy with pyo3, even though only pypy3.7-7.3 on linux is tested.&lt;/p&gt; &#xA;&lt;h2&gt;Cffi&lt;/h2&gt; &#xA;&lt;p&gt;Cffi wheels are compatible with all python versions including pypy. If &lt;code&gt;cffi&lt;/code&gt; isn&#39;t installed and python is running inside a virtualenv, maturin will install it, otherwise you have to install it yourself (&lt;code&gt;pip install cffi&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;maturin uses cbindgen to generate a header file, which can be customized by configuring cbindgen through a &lt;code&gt;cbindgen.toml&lt;/code&gt; file inside your project root. Alternatively you can use a build script that writes a header file to &lt;code&gt;$PROJECT_ROOT/target/header.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Based on the header file maturin generates a module which exports an &lt;code&gt;ffi&lt;/code&gt; and a &lt;code&gt;lib&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of a custom build script&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use cbindgen;&#xA;use std::env;&#xA;use std::path::Path;&#xA;&#xA;fn main() {&#xA;    let crate_dir = env::var(&#34;CARGO_MANIFEST_DIR&#34;).unwrap();&#xA;&#xA;    let bindings = cbindgen::Builder::new()&#xA;        .with_no_includes()&#xA;        .with_language(cbindgen::Language::C)&#xA;        .with_crate(crate_dir)&#xA;        .generate()&#xA;        .unwrap();&#xA;    bindings.write_to_file(Path::new(&#34;target&#34;).join(&#34;header.h&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;uniffi&lt;/h2&gt; &#xA;&lt;p&gt;uniffi bindings use &lt;a href=&#34;https://mozilla.github.io/uniffi-rs/&#34;&gt;uniffi-rs&lt;/a&gt; to generate Python &lt;code&gt;ctypes&lt;/code&gt; bindings from an interface definition file. uniffi wheels are compatible with all python versions including pypy.&lt;/p&gt; &#xA;&lt;h2&gt;Mixed rust/python projects&lt;/h2&gt; &#xA;&lt;p&gt;To create a mixed rust/python project, create a folder with your module name (i.e. &lt;code&gt;lib.name&lt;/code&gt; in Cargo.toml) next to your Cargo.toml and add your python sources there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my-project&#xA;├── Cargo.toml&#xA;├── my_project&#xA;│&amp;nbsp;&amp;nbsp; ├── __init__.py&#xA;│&amp;nbsp;&amp;nbsp; └── bar.py&#xA;├── pyproject.toml&#xA;├── README.md&#xA;└── src&#xA; &amp;nbsp;&amp;nbsp; └── lib.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify a different python source directory in &lt;code&gt;pyproject.toml&lt;/code&gt; by setting &lt;code&gt;tool.maturin.python-source&lt;/code&gt;, for example&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pyproject.toml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tool.maturin]&#xA;python-source = &#34;python&#34;&#xA;module-name = &#34;my_project._lib_name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then the project structure would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my-project&#xA;├── Cargo.toml&#xA;├── python&#xA;│   └── my_project&#xA;│       ├── __init__.py&#xA;│       └── bar.py&#xA;├── pyproject.toml&#xA;├── README.md&#xA;└── src&#xA; &amp;nbsp;&amp;nbsp; └── lib.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;This structure is recommended to avoid &lt;a href=&#34;https://github.com/PyO3/maturin/issues/490&#34;&gt;a common &lt;code&gt;ImportError&lt;/code&gt; pitfall&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;maturin will add the native extension as a module in your python folder. When using develop, maturin will copy the native library and for cffi also the glue code to your python folder. You should add those files to your gitignore.&lt;/p&gt; &#xA;&lt;p&gt;With cffi you can do &lt;code&gt;from .my_project import lib&lt;/code&gt; and then use &lt;code&gt;lib.my_native_function&lt;/code&gt;, with pyo3 you can directly &lt;code&gt;from .my_project import my_native_function&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example layout with pyo3 after &lt;code&gt;maturin develop&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my-project&#xA;├── Cargo.toml&#xA;├── my_project&#xA;│&amp;nbsp;&amp;nbsp; ├── __init__.py&#xA;│&amp;nbsp;&amp;nbsp; ├── bar.py&#xA;│&amp;nbsp;&amp;nbsp; └── _lib_name.cpython-36m-x86_64-linux-gnu.so&#xA;├── README.md&#xA;└── src&#xA; &amp;nbsp;&amp;nbsp; └── lib.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When doing this also be sure to set the module name in your code to match the last part of &lt;code&gt;module-name&lt;/code&gt; (don&#39;t include the package path):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[pymodule]&#xA;#[pyo3(name=&#34;_lib_name&#34;)]&#xA;fn my_lib_name(_py: Python&amp;lt;&#39;_&amp;gt;, m: &amp;amp;PyModule) -&amp;gt; PyResult&amp;lt;()&amp;gt; {&#xA;    m.add_class::&amp;lt;MyPythonRustClass&amp;gt;()?;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Python metadata&lt;/h2&gt; &#xA;&lt;p&gt;maturin supports &lt;a href=&#34;https://www.python.org/dev/peps/pep-0621/&#34;&gt;PEP 621&lt;/a&gt;, you can specify python package metadata in &lt;code&gt;pyproject.toml&lt;/code&gt;. maturin merges metadata from &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;pyproject.toml&lt;/code&gt; takes precedence over &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To specify python dependencies, add a list &lt;code&gt;dependencies&lt;/code&gt; in a &lt;code&gt;[project]&lt;/code&gt; section in the &lt;code&gt;pyproject.toml&lt;/code&gt;. This list is equivalent to &lt;code&gt;install_requires&lt;/code&gt; in setuptools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[project]&#xA;name = &#34;my-project&#34;&#xA;dependencies = [&#34;flask~=1.1.0&#34;, &#34;toml==0.10.0&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pip allows adding so called console scripts, which are shell commands that execute some function in your program. You can add console scripts in a section &lt;code&gt;[project.scripts]&lt;/code&gt;. The keys are the script names while the values are the path to the function in the format &lt;code&gt;some.module.path:class.function&lt;/code&gt;, where the &lt;code&gt;class&lt;/code&gt; part is optional. The function is called with no arguments. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[project.scripts]&#xA;get_42 = &#34;my_project:DummyClass.get_42&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify &lt;a href=&#34;https://pypi.org/classifiers/&#34;&gt;trove classifiers&lt;/a&gt; in your &lt;code&gt;pyproject.toml&lt;/code&gt; under &lt;code&gt;project.classifiers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[project]&#xA;name = &#34;my-project&#34;&#xA;classifiers = [&#34;Programming Language :: Python&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source distribution&lt;/h2&gt; &#xA;&lt;p&gt;maturin supports building through &lt;code&gt;pyproject.toml&lt;/code&gt;. To use it, create a &lt;code&gt;pyproject.toml&lt;/code&gt; next to your &lt;code&gt;Cargo.toml&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[build-system]&#xA;requires = [&#34;maturin&amp;gt;=1.0,&amp;lt;2.0&#34;]&#xA;build-backend = &#34;maturin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a &lt;code&gt;pyproject.toml&lt;/code&gt; with a &lt;code&gt;[build-system]&lt;/code&gt; entry is present, maturin can build a source distribution of your package when &lt;code&gt;--sdist&lt;/code&gt; is specified. The source distribution will contain the same files as &lt;code&gt;cargo package&lt;/code&gt;. To only build a source distribution, pass &lt;code&gt;--interpreter&lt;/code&gt; without any values.&lt;/p&gt; &#xA;&lt;p&gt;You can then e.g. install your package with &lt;code&gt;pip install .&lt;/code&gt;. With &lt;code&gt;pip install . -v&lt;/code&gt; you can see the output of cargo and maturin.&lt;/p&gt; &#xA;&lt;p&gt;You can use the options &lt;code&gt;compatibility&lt;/code&gt;, &lt;code&gt;skip-auditwheel&lt;/code&gt;, &lt;code&gt;bindings&lt;/code&gt;, &lt;code&gt;strip&lt;/code&gt; and common Cargo build options such as &lt;code&gt;features&lt;/code&gt; under &lt;code&gt;[tool.maturin]&lt;/code&gt; the same way you would when running maturin directly. The &lt;code&gt;bindings&lt;/code&gt; key is required for cffi and bin projects as those can&#39;t be automatically detected. Currently, all builds are in release mode (see &lt;a href=&#34;https://discuss.python.org/t/pep-517-debug-vs-release-builds/1924&#34;&gt;this thread&lt;/a&gt; for details).&lt;/p&gt; &#xA;&lt;p&gt;For a non-manylinux build with cffi bindings you could use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[build-system]&#xA;requires = [&#34;maturin&amp;gt;=1.0,&amp;lt;2.0&#34;]&#xA;build-backend = &#34;maturin&#34;&#xA;&#xA;[tool.maturin]&#xA;bindings = &#34;cffi&#34;&#xA;compatibility = &#34;linux&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;manylinux&lt;/code&gt; option is also accepted as an alias of &lt;code&gt;compatibility&lt;/code&gt; for backward compatibility with old version of maturin.&lt;/p&gt; &#xA;&lt;p&gt;To include arbitrary files in the sdist for use during compilation specify &lt;code&gt;include&lt;/code&gt; as an array of &lt;code&gt;path&lt;/code&gt; globs with &lt;code&gt;format&lt;/code&gt; set to &lt;code&gt;sdist&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tool.maturin]&#xA;include = [{ path = &#34;path/**/*&#34;, format = &#34;sdist&#34; }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a &lt;code&gt;maturin sdist&lt;/code&gt; command for only building a source distribution as workaround for &lt;a href=&#34;https://github.com/pypa/pip/issues/6041&#34;&gt;pypa/pip#6041&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manylinux and auditwheel&lt;/h2&gt; &#xA;&lt;p&gt;For portability reasons, native python modules on linux must only dynamically link a set of very few libraries which are installed basically everywhere, hence the name manylinux. The pypa offers special docker images and a tool called &lt;a href=&#34;https://github.com/pypa/auditwheel/&#34;&gt;auditwheel&lt;/a&gt; to ensure compliance with the &lt;a href=&#34;https://peps.python.org/pep-0599/#the-manylinux2014-policy&#34;&gt;manylinux rules&lt;/a&gt;. If you want to publish widely usable wheels for linux pypi, &lt;strong&gt;you need to use a manylinux docker image&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Rust compiler since version 1.64 &lt;a href=&#34;https://blog.rust-lang.org/2022/08/01/Increasing-glibc-kernel-requirements.html&#34;&gt;requires at least glibc 2.17&lt;/a&gt;, so you need to use at least manylinux2014. For publishing, we recommend enforcing the same manylinux version as the image with the manylinux flag, e.g. use &lt;code&gt;--manylinux 2014&lt;/code&gt; if you are building in &lt;code&gt;quay.io/pypa/manylinux2014_x86_64&lt;/code&gt;. The &lt;a href=&#34;https://github.com/PyO3/maturin-action&#34;&gt;PyO3/maturin-action&lt;/a&gt; github action already takes care of this if you set e.g. &lt;code&gt;manylinux: 2014&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;maturin contains a reimplementation of auditwheel automatically checks the generated library and gives the wheel the proper platform tag. If your system&#39;s glibc is too new or you link other shared libraries, it will assign the &lt;code&gt;linux&lt;/code&gt; tag. You can also manually disable those checks and directly use native linux target with &lt;code&gt;--manylinux off&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For full manylinux compliance you need to compile in a CentOS docker container. The &lt;a href=&#34;https://ghcr.io/pyo3/maturin&#34;&gt;pyo3/maturin&lt;/a&gt; image is based on the manylinux2014 image, and passes arguments to the &lt;code&gt;maturin&lt;/code&gt; binary. You can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -v $(pwd):/io ghcr.io/pyo3/maturin build --release  # or other maturin arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this image is very basic and only contains python, maturin and stable rust. If you need additional tools, you can run commands inside the manylinux container. See &lt;a href=&#34;https://github.com/konstin/complex-manylinux-maturin-docker&#34;&gt;konstin/complex-manylinux-maturin-docker&lt;/a&gt; for a small educational example or &lt;a href=&#34;https://github.com/nanoporetech/fast-ctc-decode/raw/b226ea0f2b2f4f474eff47349703d57d2ea4801b/.github/workflows/publish.yml&#34;&gt;nanoporetech/fast-ctc-decode&lt;/a&gt; for a real world setup.&lt;/p&gt; &#xA;&lt;p&gt;maturin itself is manylinux compliant when compiled for the musl target.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/arrow-ballista-python&#34;&gt;ballista-python&lt;/a&gt; - A Python library that binds to Apache Arrow distributed query engine Ballista&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shenxiangzhuang/bleuscore&#34;&gt;bleuscore&lt;/a&gt; - A BLEU score calculation library, written in pure Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/john-parton/chardetng-py&#34;&gt;chardetng-py&lt;/a&gt; - Python binding for the chardetng character encoding detector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sfu-db/connector-x/tree/main/connectorx-python&#34;&gt;connector-x&lt;/a&gt; - ConnectorX enables you to load data from databases into Python in the fastest and most memory efficient way&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/arrow-datafusion-python&#34;&gt;datafusion-python&lt;/a&gt; - a Python library that binds to Apache Arrow in-memory query engine DataFusion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/delta-rs/tree/main/python&#34;&gt;deltalake-python&lt;/a&gt; - Native Delta Lake Python binding based on delta-rs with Pandas integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/incubator-opendal/tree/main/bindings/python&#34;&gt;opendal&lt;/a&gt; - OpenDAL Python Binding to access data freely&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson&#34;&gt;orjson&lt;/a&gt; - A fast, correct JSON library for Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pola-rs/polars/tree/master/py-polars&#34;&gt;polars&lt;/a&gt; - Fast multi-threaded DataFrame library in Rust | Python | Node.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydantic/pydantic-core&#34;&gt;pydantic-core&lt;/a&gt; - Core validation logic for pydantic written in Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milesgranger/pyrus-cramjam&#34;&gt;pyrus-cramjam&lt;/a&gt; - Thin Python wrapper to de/compression algorithms in Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kitao/pyxel&#34;&gt;pyxel&lt;/a&gt; - A retro game engine for Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/roapi/roapi&#34;&gt;roapi&lt;/a&gt; - ROAPI automatically spins up read-only APIs for static datasets without requiring you to write a single line of code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sansyrox/robyn&#34;&gt;robyn&lt;/a&gt; - A fast and extensible async python web server with a Rust runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charliermarsh/ruff&#34;&gt;ruff&lt;/a&gt; - An extremely fast Python linter, written in Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quickwit-oss/tantivy-py&#34;&gt;tantivy-py&lt;/a&gt; - Python bindings for Tantivy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samuelcolvin/watchfiles&#34;&gt;watchfiles&lt;/a&gt; - Simple, modern and high performance file watching and code reload in python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webonnx/wonnx/tree/master/wonnx-py&#34;&gt;wonnx&lt;/a&gt; - Wonnx is a GPU-accelerated ONNX inference run-time written 100% in Rust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Everyone is welcomed to contribute to maturin! There are many ways to support the project, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;help maturin users with issues on GitHub and Gitter&lt;/li&gt; &#xA; &lt;li&gt;improve documentation&lt;/li&gt; &#xA; &lt;li&gt;write features and bugfixes&lt;/li&gt; &#xA; &lt;li&gt;publish blogs and examples of how to use maturin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/PyO3/maturin/raw/main/guide/src/contributing.md&#34;&gt;contributing notes&lt;/a&gt; have more resources if you wish to volunteer time for maturin and are searching where to start.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have time to contribute yourself but still wish to support the project&#39;s future success, some of our maintainers have GitHub sponsorship pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/messense&#34;&gt;messense&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://github.com/PyO3/maturin/raw/main/license-apache&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://github.com/PyO3/maturin/raw/main/license-mit&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>achristmascarl/rainfrog</title>
    <updated>2024-09-29T01:52:02Z</updated>
    <id>tag:github.com,2024-09-29:/achristmascarl/rainfrog</id>
    <link href="https://github.com/achristmascarl/rainfrog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐸 a database management tui for postgres&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐸 rainfrog&lt;/h1&gt; &#xA;&lt;p&gt;a database management tui for postgres&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/achristmascarl/rainfrog/main/vhs/demo.gif&#34; alt=&#34;rainfrog demo&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] rainfrog is currently in beta; the mysql and sqlite drivers are unstable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;the goal for rainfrog is to provide a lightweight, terminal-based alternative to pgadmin/dbeaver.&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;efficient navigation via vim-like keybindings and mouse controls&lt;/li&gt; &#xA; &lt;li&gt;query editor with keyword highlighting and session history&lt;/li&gt; &#xA; &lt;li&gt;quickly copy data, filter tables, and switch between schemas&lt;/li&gt; &#xA; &lt;li&gt;shortcuts to view table metadata and properties&lt;/li&gt; &#xA; &lt;li&gt;cross-platform (macOS, linux, windows, android via termux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;why &#34;rainfrog&#34;?&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.sciencedaily.com/releases/2019/06/190604131157.htm&#34;&gt;frogs find refuge in elephant tracks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;supported databases&lt;/h3&gt; &#xA;&lt;p&gt;rainfrog has mainly been tested with postgres, and postgres will be the primary database targeted. &lt;strong&gt;mysql and sqlite are also supported, but they are currently unstable&lt;/strong&gt;; use with caution, and check out the &lt;a href=&#34;https://raw.githubusercontent.com/achristmascarl/rainfrog/main/#known-issues-and-limitations&#34;&gt;known issues&lt;/a&gt; section for things to look out for!&lt;/p&gt; &#xA;&lt;h2&gt;disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;this software is currently under active development; expect breaking changes, and use at your own risk. it is not recommended to use this tool with write access on a production database.&lt;/p&gt; &#xA;&lt;h2&gt;installation&lt;/h2&gt; &#xA;&lt;h3&gt;cargo&lt;/h3&gt; &#xA;&lt;p&gt;after installing rust (recommended to do so via &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;rustup&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install rainfrog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;arch linux&lt;/h3&gt; &#xA;&lt;p&gt;arch linux users can install from the &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/rainfrog&#34;&gt;official repositories&lt;/a&gt; using &lt;a href=&#34;https://wiki.archlinux.org/title/pacman&#34;&gt;pacman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S rainfrog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;termux&lt;/h3&gt; &#xA;&lt;p&gt;if you are using &lt;a href=&#34;https://termux.dev/&#34;&gt;termux&lt;/a&gt;, you&#39;ll need to install rust via their package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pkg install rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then make sure to install with termux features (and disable default features):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install rainfrog --features termux --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;install script&lt;/h3&gt; &#xA;&lt;p&gt;there is a simple install script that assists in downloading and unpacking a binary from the release page to &lt;code&gt;~/.local/bin/&lt;/code&gt;, which you might want to add to your &lt;code&gt;PATH&lt;/code&gt; variable if it isn&#39;t already there. you&#39;ll need to select which binary is appropriate for your system (if you&#39;re not sure, you can find out by installing rust and running &lt;code&gt;rustc -vV&lt;/code&gt; to see the &#34;host&#34; target), and the script also needs &lt;a href=&#34;https://github.com/jqlang/jq&#34;&gt;jq&lt;/a&gt; and &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; installed to run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -LSsf https://raw.githubusercontent.com/achristmascarl/rainfrog/main/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;release page binaries&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;manually download and unpack the appropriate binary for your os from the latest &lt;a href=&#34;https://github.com/achristmascarl/rainfrog/releases&#34;&gt;release&lt;/a&gt; (if you&#39;re not sure which binary to pick, you can find out by installing rust and running &lt;code&gt;rustc -vV&lt;/code&gt; to see the &#34;host&#34; target)&lt;/li&gt; &#xA; &lt;li&gt;move the binary to a folder in your &lt;code&gt;PATH&lt;/code&gt; environment variable&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Usage: rainfrog [OPTIONS]&#xA;&#xA;Options:&#xA;  -M, --mouse &amp;lt;MOUSE_MODE&amp;gt;   Whether to enable mouse event support. If enabled, your terminal\&#39;s default mouse event handling will&#xA;                             not work. [possible values: true, false]&#xA;  -u, --url &amp;lt;URL&amp;gt;            Full connection URL for the database, e.g. postgres://username:password@localhost:5432/dbname&#xA;      --username &amp;lt;USERNAME&amp;gt;  Username for database connection&#xA;      --password &amp;lt;PASSWORD&amp;gt;  Password for database connection&#xA;      --host &amp;lt;HOST&amp;gt;          Host for database connection (ex. localhost)&#xA;      --port &amp;lt;PORT&amp;gt;          Port for database connection (ex. 5432)&#xA;      --database &amp;lt;DATABASE&amp;gt;  Name of database for connection (ex. postgres)&#xA;      --driver &amp;lt;DRIVER&amp;gt;      Driver for database connection (ex. postgres)&#xA;  -h, --help                 Print help&#xA;  -V, --version              Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;with connection options&lt;/h3&gt; &#xA;&lt;p&gt;if any options are not provided, you will be prompted to input them. if you do not provide an input, that option will default to what is in your environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rainfrog \&#xA;  --driver &amp;lt;db_driver&amp;gt; \&#xA;  --username &amp;lt;username&amp;gt; \&#xA;  --host &amp;lt;hostname&amp;gt; \&#xA;  --port &amp;lt;db_port&amp;gt; \&#xA;  --database &amp;lt;db_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;with connection url&lt;/h3&gt; &#xA;&lt;p&gt;the &lt;code&gt;connection_url&lt;/code&gt; must include all the necessary options for connecting to the database (ex. &lt;code&gt;postgres://username:password@localhost:5432/postgres&lt;/code&gt;). it will take precedence over all connection options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rainfrog --url $(connection_url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;for postgres and mysql, you can run it by specifying all of the options as environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --platform linux/amd64 -it --rm --name rainfrog \&#xA;  --add-host host.docker.internal:host-gateway \&#xA;  -e db_driver=&#34;db_driver&#34; \&#xA;  -e username=&#34;&amp;lt;username&amp;gt;&#34; \&#xA;  -e password=&#34;&amp;lt;password&amp;gt;&#34; \&#xA;  -e hostname=&#34;host.docker.internal&#34; \&#xA;  -e db_port=&#34;&amp;lt;db_port&amp;gt;&#34; \&#xA;  -e db_name=&#34;&amp;lt;db_name&amp;gt;&#34; achristmascarl/rainfrog:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you want to provide a custom combination of options and omit others, you can override the Dockerfile&#39;s CMD like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --platform linux/amd64 -it --rm --name rainfrog \&#xA;  achristmascarl/rainfrog:latest \&#xA;  rainfrog # overrides CMD, addition options would come after&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;since sqlite is file-based, you may need to mount a path to the sqlite db as a volume in order to access it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --platform linux/amd64 -it --rm --name rainfrog \&#xA;  -v ~/code/rainfrog/dev/rainfrog.sqlite3:/rainfrog.sqlite3 \&#xA;  achristmascarl/rainfrog:latest \&#xA;  rainfrog --url sqlite:///rainfrog.sqlite3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;customization&lt;/h2&gt; &#xA;&lt;p&gt;rainfrog can be customized by placing a &lt;code&gt;rainfrog_config.toml&lt;/code&gt; file in one of the following locations depending on your os, as determined by the &lt;a href=&#34;https://crates.io/crates/directories&#34;&gt;directories&lt;/a&gt; crate:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt;/&lt;code&gt;_project_path_&lt;/code&gt; or &lt;code&gt;$HOME&lt;/code&gt;/.config/&lt;code&gt;_project_path_&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/home/alice/.config/barapp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME&lt;/code&gt;/Library/Application Support/&lt;code&gt;_project_path_&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/Users/Alice/Library/Application Support/com.Foo-Corp.Bar-App&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{FOLDERID_LocalAppData}&lt;/code&gt;\&lt;code&gt;_project_path_&lt;/code&gt;\config&lt;/td&gt; &#xA;   &lt;td&gt;C:\Users\Alice\AppData\Local\Foo Corp\Bar App\config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;you can change the default config location by exporting an environment variable. to make the change permanent, add it to your .zshrc/.bashrc/.*rc file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export RAINFROG_CONFIG=~/.config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;settings&lt;/h3&gt; &#xA;&lt;p&gt;right now, the only setting available is whether rainfrog captures mouse events by default. capturing mouse events allows you to change focus and scroll using the mouse. however, your terminal will not handle mouse events like it normally does (you won&#39;t be able to copy by highlighting, for example).&lt;/p&gt; &#xA;&lt;h3&gt;keybindings&lt;/h3&gt; &#xA;&lt;p&gt;you can customize some of the default keybindings, but not all of them. to see a list of the ones you can customize, see the default config file at &lt;a href=&#34;https://raw.githubusercontent.com/achristmascarl/rainfrog/main/.config/rainfrog_config.toml&#34;&gt;.config/rainfrog_config.toml&lt;/a&gt;. below are the default keybindings.&lt;/p&gt; &#xA;&lt;h4&gt;general&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;keybinding&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quit program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt+1&lt;/code&gt;, &lt;code&gt;Ctrl+k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change focus to menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt+2&lt;/code&gt;, &lt;code&gt;Ctrl+j&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change focus to query editor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt+3&lt;/code&gt;, &lt;code&gt;Ctrl+h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change focus to query history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt+4&lt;/code&gt;, &lt;code&gt;Ctrl+g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change focus to results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cycle focus forwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Shift+Tab&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cycle focus backwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;, &lt;code&gt;Alt+q&lt;/code&gt; in query editor&lt;/td&gt; &#xA;   &lt;td&gt;abort current query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;menu (list of schemas and tables)&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;keybinding&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;↓&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move selection down by 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;, &lt;code&gt;↑&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move selection up by 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to top of current list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to bottom of current list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;, &lt;code&gt;←&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;focus on schemas (if more than 1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;l&lt;/code&gt;, &lt;code&gt;→&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;focus on tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filter tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Esc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;clear search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Backspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;focus on tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enter&lt;/code&gt; when searching&lt;/td&gt; &#xA;   &lt;td&gt;focus on tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enter&lt;/code&gt; with selected schema&lt;/td&gt; &#xA;   &lt;td&gt;focus on tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enter&lt;/code&gt; with selected table&lt;/td&gt; &#xA;   &lt;td&gt;preview table (100 rows)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reload schemas and tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;query editor&lt;/h4&gt; &#xA;&lt;p&gt;Keybindings may not behave exactly like Vim. The full list of active Vim keybindings in Rainfrog can be found at &lt;a href=&#34;https://raw.githubusercontent.com/achristmascarl/rainfrog/main/src/vim.rs&#34;&gt;vim.rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt+Enter&lt;/code&gt;, &lt;code&gt;F5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;↓&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor down 1 line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;, &lt;code&gt;↑&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor up 1 line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;, &lt;code&gt;←&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor left 1 char&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;l&lt;/code&gt;, &lt;code&gt;→&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor right 1 char&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor to next start of word&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor to next end of word&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor to previous start of word&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor to beginning of line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor to end of line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to top of editor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to bottom of current list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Esc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return to normal mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enter insert (edit) mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enter insert mode at beginning of line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enter insert mode at end of line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Insert new line below and enter insert&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enter visual (select) mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enter visual mode and select line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Begin replace operation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Begin yank (copy) operation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Begin cut operation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paste from clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Undo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+r&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;query history&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;keybinding&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;↓&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move selection down by 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;, &lt;code&gt;↑&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move selection up by 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to top of list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to bottom of list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;copy selected query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;edit selected query in editor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;delete all history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;results&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;keybinding&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;↓&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scroll down by 1 row&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;, &lt;code&gt;↑&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scroll up by 1 row&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;, &lt;code&gt;←&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scroll left by 1 cell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;l&lt;/code&gt;, &lt;code&gt;→&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scroll right by 1 cell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scroll right by 1 cell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;e&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scroll left by 1 column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&lt;/code&gt;, &lt;code&gt;PageUp&lt;/code&gt;, &lt;code&gt;Ctrl+b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump up one page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;}&lt;/code&gt;, &lt;code&gt;PageDown&lt;/code&gt;, &lt;code&gt;Ctrl+f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump down one page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to top of table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to bottom of table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to first column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to last column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;select individual field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;select row&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change selection mode inwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Backspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change selection mode outwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;copy selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Esc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;stop selecting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;roadmap&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🏁 v0.1.0 – alpha&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; scrollable table&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cancellable async querying (spawn tokio task)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; menu list with tables and schemas (collapsable)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; tui-textarea for query editor&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; basic tui-textarea vim keybindings&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; handle custom types / enums&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; display rows affected&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; confirm before delete/drop&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; table selection and yanking&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; multi-line pasting&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; editor os clipboard support&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; handle mouse events&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; keybindings hints at bottom&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; branch protection&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🏁 v0.2.0 – beta&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; vhs explainer gifs&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; upgrade ratatui and tui-textarea&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; shortcuts to view indexes, keys, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; performant syntax highlighting&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; session history&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; changelog, release script&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; handle explain / analyze output&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; show query duration&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; install script for bins&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;now that rainfrog is in beta, check out the &lt;a href=&#34;https://github.com/achristmascarl/rainfrog/issues&#34;&gt;issues tab&lt;/a&gt; for planned features&lt;/p&gt; &#xA;&lt;h2&gt;known issues and limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in mysql, DROP statements cannot be rolled back, even if they are part of a transaction; see &lt;a href=&#34;https://github.com/achristmascarl/rainfrog/issues/107&#34;&gt;https://github.com/achristmascarl/rainfrog/issues/107&lt;/a&gt; which will address this issue&lt;/li&gt; &#xA; &lt;li&gt;in sqlite, &lt;code&gt;EXPLAIN QUERY PLAN&lt;/code&gt; does not work due to an issue with the sql parser; see &lt;a href=&#34;https://github.com/achristmascarl/rainfrog/issues/106&#34;&gt;https://github.com/achristmascarl/rainfrog/issues/106&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;for x11 and wayland, yanking does not copy to the system clipboard, only to the query editor&#39;s buffer. see &lt;a href=&#34;https://github.com/achristmascarl/rainfrog/issues/83&#34;&gt;https://github.com/achristmascarl/rainfrog/issues/83&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;in addition to the experience being subpar if the terminal window is too small, if the terminal window is too large, rainfrog will crash due to the maximum area of ratatui buffers being &lt;code&gt;u16::MAX&lt;/code&gt; (65,535). more details in &lt;a href=&#34;https://github.com/achristmascarl/rainfrog/issues/60&#34;&gt;https://github.com/achristmascarl/rainfrog/issues/60&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;for query results with many columns, the height of the rendered &lt;code&gt;Table&lt;/code&gt; widget may be limited due to the same limitation mentioned above. Could be fixed by &lt;a href=&#34;https://github.com/ratatui-org/ratatui/issues/1250&#34;&gt;https://github.com/ratatui-org/ratatui/issues/1250&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;on mac, for VS Code and terminal (and perhaps other editors), a setting for &#34;use option as meta key&#34; needs to be turned on for Alt/Opt keybindings to work. (In VS Code, it&#39;s &lt;code&gt;&#34;terminal.integrated.macOptionIsMeta&#34;: true&lt;/code&gt;; in kitty, it&#39;s &lt;code&gt;macos_option_as_alt yes&lt;/code&gt; in the config.)&lt;/li&gt; &#xA; &lt;li&gt;in visual mode, when selecting an entire line, the behavior is not the same as vim&#39;s, as it simply moves starts the selection at the head of the line, so moving up or down in lines will break the selection.&lt;/li&gt; &#xA; &lt;li&gt;mouse events are only used for changing focus and scrolling; the editor does not currently support mouse events, and menu items cannot be selected using the mouse&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;for bug reports and feature requests, please &lt;a href=&#34;https://github.com/achristmascarl/rainfrog/issues/new/choose&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;please read &lt;a href=&#34;https://raw.githubusercontent.com/achristmascarl/rainfrog/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before opening issues or creating PRs.&lt;/p&gt; &#xA;&lt;h2&gt;acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui-org/ratatui&#34;&gt;ratatui&lt;/a&gt; (this project used ratatui&#39;s &lt;a href=&#34;https://github.com/ratatui-org/templates/tree/983aa3cb3b8dd743200e8e2a1faa6e7c06aad85e/component/template&#34;&gt;component template&lt;/a&gt; as a starting point)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhysd/tui-textarea&#34;&gt;tui-textarea&lt;/a&gt; (used in the query editor)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TaKO8Ki/gobang&#34;&gt;gobang&lt;/a&gt; (a rust db tui i drew inspiration from)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://us.jellycat.com/ricky-rain-frog/&#34;&gt;ricky rainfrog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rainfrog.gg/&#34;&gt;rainfroggg&lt;/a&gt; (my wife&#39;s tattoo studio)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>