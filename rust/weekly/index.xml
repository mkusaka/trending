<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-31T01:54:26Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LGFae/swww</title>
    <updated>2024-03-31T01:54:26Z</updated>
    <id>tag:github.com,2024-03-31:/LGFae/swww</id>
    <link href="https://github.com/LGFae/swww" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Solution to your Wayland Wallpaper Woes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Solution to your Wayland Wallpaper Woes&lt;/h1&gt; &#xA;&lt;h3&gt;Efficient animated wallpaper daemon for wayland, controlled at runtime&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Leuh6wm.gif&#34; alt=&#34;animated gif demonstration&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LGFae/swww/demos/assets/grow.gif&#34; alt=&#34;image transition demonstration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a compositor that implements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wlr-layer-shell (typically wlroots based compositors)&lt;/li&gt; &#xA;   &lt;li&gt;xdg-output&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lz4/lz4&#34;&gt;lz4&lt;/a&gt; (for compressing frames when animating)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;a href=&#34;https://repology.org/project/swww/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/swww.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Dependencies:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Up to date stable rustc compiler and cargo (specifically, MSRV is 1.74.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build, clone this repository and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, put &lt;strong&gt;both binaries&lt;/strong&gt; &lt;code&gt;target/release/swww&lt;/code&gt; and &lt;code&gt;target/release/swww-daemon&lt;/code&gt; in your path. Optionally, autocompletion scripts for bash, zsh, fish and elvish are offered in the &lt;code&gt;completions&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Man pages:&lt;/h4&gt; &#xA;&lt;p&gt;In order to generate the man pages, &lt;strong&gt;you must have &lt;code&gt;scdoc&lt;/code&gt; installed&lt;/strong&gt;. Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./doc/gen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The man pages will be in &lt;code&gt;doc/generated&lt;/code&gt;. To install them, you must move them to to the appropriate location in your system. You should be able to figure out where that is by running &lt;code&gt;manpath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display animated gifs on your desktop&lt;/li&gt; &#xA; &lt;li&gt;Display any image in the formats: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;jpeg&lt;/li&gt; &#xA;   &lt;li&gt;png&lt;/li&gt; &#xA;   &lt;li&gt;gif&lt;/li&gt; &#xA;   &lt;li&gt;pnm&lt;/li&gt; &#xA;   &lt;li&gt;tga&lt;/li&gt; &#xA;   &lt;li&gt;tiff&lt;/li&gt; &#xA;   &lt;li&gt;webp&lt;/li&gt; &#xA;   &lt;li&gt;bmp&lt;/li&gt; &#xA;   &lt;li&gt;farbfeld&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clear the screen with an arbitrary rrggbb color&lt;/li&gt; &#xA; &lt;li&gt;Smooth transition effect when you switch images&lt;/li&gt; &#xA; &lt;li&gt;Do all of that without having to shutdown and reinitialize the daemon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;There are two main reasons that compelled me to make this: the first is that &lt;a href=&#34;https://github.com/vilhalmer/oguri&#34;&gt;&lt;code&gt;oguri&lt;/code&gt;&lt;/a&gt; is unmaintained and archived, despite there being serious problems with excess of memory use while displaying certain gifs (see &lt;a href=&#34;https://github.com/vilhalmer/oguri/issues/38&#34;&gt;this&lt;/a&gt;, for example). The best alternative I&#39;ve found for &lt;code&gt;oguri&lt;/code&gt; was &lt;a href=&#34;https://github.com/GhostNaN/mpvpaper&#34;&gt;&lt;code&gt;mpvpaper&lt;/code&gt;&lt;/a&gt;, but if felt overkill for my purposes.&lt;/p&gt; &#xA;&lt;p&gt;Comparing to &lt;code&gt;oguri&lt;/code&gt;, &lt;code&gt;swww&lt;/code&gt; uses less cpu power to animate once it has cached all the frames in the animation. It should also be &lt;strong&gt;significantly&lt;/strong&gt; more memory efficient.&lt;/p&gt; &#xA;&lt;p&gt;The second is that, to my knowledge, there is no wallpaper daemon for wayland that allows you to change the wallpaper at runtime. That is, in order to, for example, cycle through the images of a directory, you&#39;d have to kill the daemon and restart it. Not only does it make simple shell scripts a pain to write, it makes switching from one image to the next to happen very abruptly.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Start by initializing the daemon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww-daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in a different terminal, simply pass the image you want to display:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww img &amp;lt;path/to/img&amp;gt;&#xA;&#xA;# You can also specify outputs:&#xA;swww img -o &amp;lt;outputs&amp;gt; &amp;lt;path/to/img&amp;gt;&#xA;&#xA;# Control how smoothly the transition will happen and/or it&#39;s frame rate&#xA;# For the step, smaller values = more smooth. Default = 20&#xA;# For the frame rate, default is 30.&#xA;swww img &amp;lt;path/to/img&amp;gt; --transition-step &amp;lt;1 to 255&amp;gt; --transition-fps &amp;lt;1 to 255&amp;gt;&#xA;&#xA;# There are also many different transition effects:&#xA;swww img &amp;lt;path/to/img&amp;gt; --transition-type center&#xA;&#xA;# Note you may also control the above by setting up the SWWW_TRANSITION_FPS,&#xA;# SWWW_TRANSITION_STEP, and SWWW_TRANSITION environment variables.&#xA;&#xA;# To see all options, run&#xA;swww img --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to know the valid values for &lt;em&gt;&amp;lt;outputs&amp;gt;&lt;/em&gt;, you can query the daemon. This will also tell you what the current image being displayed is, as well as the dimensions detected for the outputs. If you need more detailed information, I would recommend using &lt;a href=&#34;https://sr.ht/~emersion/wlr-randr/&#34;&gt;&lt;code&gt;wlr-randr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww query&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to stop the daemon, kill it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww kill&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more complete description, run &lt;code&gt;swww --help&lt;/code&gt; or &lt;code&gt;swww &amp;lt;subcommand&amp;gt; --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, to get a feel for what you can do with some shell scripting, check out the &lt;a href=&#34;https://raw.githubusercontent.com/LGFae/swww/main/example_scripts/&#34;&gt;example_scripts&lt;/a&gt; folder. It can help you get started.&lt;/p&gt; &#xA;&lt;h2&gt;Transitions&lt;/h2&gt; &#xA;&lt;h4&gt;Example wipe transition:&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;wipe transition with angle set to 30 deg&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LGFae/swww/demos/assets/wipe.gif&#34; alt=&#34;top transition demonstration&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; transitions all work similarly.&lt;/p&gt; &#xA;&lt;h4&gt;Example outer transition&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LGFae/swww/demos/assets/outer.gif&#34; alt=&#34;outer transition demonstration&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;center&lt;/code&gt; transition is the opposite: it starts from the center and goes towards the edges.&lt;/p&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;simple&lt;/code&gt;, which simply fades into the new image, &lt;code&gt;any&lt;/code&gt;, which starts at a random point with either &lt;code&gt;center&lt;/code&gt; of &lt;code&gt;outer&lt;/code&gt; transitions, and &lt;code&gt;random&lt;/code&gt;, which selects a transition effect at random.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;The image looks tilted and in grayscale on my laptop&lt;/h3&gt; &#xA;&lt;p&gt;See #233. Current workaround is to use &lt;code&gt;swww-daemon --format xrgb&lt;/code&gt; when starting the daemon.&lt;/p&gt; &#xA;&lt;h3&gt;High cpu usage during caching of a gif&#39;s frames&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;swww&lt;/code&gt; will use a non-insignificant amount of cpu power while caching the images. This will be specially noticeable if the images need to be resized before being displayed. So, if you have a very large gif, I would recommend resizing it &lt;strong&gt;before&lt;/strong&gt; sending it to &lt;code&gt;swww&lt;/code&gt;. That would make the caching phase much faster, and thus ultimately reduce power consumption. I can personally recommend &lt;a href=&#34;https://github.com/kohler/gifsicle&#34;&gt;&lt;code&gt;gifsicle&lt;/code&gt;&lt;/a&gt; for this purpose.&lt;/p&gt; &#xA;&lt;h3&gt;Wallpaper disappears when reconnecting monitor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;swww&lt;/code&gt; used to cache its images so that it could reload the current the last displayed image automatically. This lead to many problems and also proved to be very annoying to keep working with when we updated to &lt;a href=&#34;https://github.com/Smithay/client-toolkit&#34;&gt;&lt;code&gt;sctk 0.17&lt;/code&gt;&lt;/a&gt;. So I decided to nuke it.&lt;/p&gt; &#xA;&lt;p&gt;If you want a wallpaper to be set automatically when you reconnect to a monitor, you should use a combination of scripts and a program that lets you run commands when a new output is connected, like &lt;a href=&#34;https://sr.ht/~emersion/kanshi/&#34;&gt;&lt;code&gt;kanshi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About new features&lt;/h2&gt; &#xA;&lt;p&gt;Broadly speaking, &lt;strong&gt;NEW FEATURES WILL NOT BE ADDED, UNLESS THEY ARE EGREGIOUSLY SIMPLE&lt;/strong&gt;. I made &lt;code&gt;swww&lt;/code&gt; with the specific usecase of making shell scripts in mind. So, for example, stuff like timed wallpapers, or a setup that loads a different image at different times of the day, and so on, should all be done by combining &lt;code&gt;swww&lt;/code&gt; with other programs (see the &lt;a href=&#34;https://raw.githubusercontent.com/LGFae/swww/main/example_scripts/&#34;&gt;example_scripts&lt;/a&gt; for some examples).&lt;/p&gt; &#xA;&lt;p&gt;If you really want some new feature within &lt;code&gt;swww&lt;/code&gt; itself, I would recommend forking the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;swww&lt;/code&gt; isn&#39;t really the simplest, mostest minimalest software you could find for managing wallpapers. If you are looking for something simpler, have a look at the &lt;a href=&#34;https://github.com/natpen/awesome-wayland#wallpaper&#34;&gt;awesome-wayland repository list of wallpaper programs &lt;/a&gt;. I can personally recommend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/dnkl/wbg&#34;&gt;&lt;code&gt;wbg&lt;/code&gt;&lt;/a&gt; - probably the simplest of them all. Strongly recommend if you just care about setting a single png as your permanent wallpaper on something like a laptop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaywm/swaybg&#34;&gt;&lt;code&gt;swaybg&lt;/code&gt;&lt;/a&gt; - made by the wlroots gods themselves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GhostNaN/mpvpaper&#34;&gt;&lt;code&gt;mpvpaper&lt;/code&gt;&lt;/a&gt; - if you want to display videos as your wallpapers. This is also what I used for gifs before making &lt;code&gt;swww&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;A huge thanks to everyone involved in the &lt;a href=&#34;https://github.com/Smithay&#34;&gt;smithay&lt;/a&gt; project. Making this program would not have been possible without it. In fact, the first versions of swww were quite literally copy pasted from the &lt;a href=&#34;https://github.com/Smithay/client-toolkit/raw/master/examples/layer_shell.rs&#34;&gt;layer shell example in the client-toolkit &lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A big thank-you also to &lt;a href=&#34;https://github.com/HakierGrzonzo&#34;&gt;HakierGrzonzo&lt;/a&gt;, for setting up the AUR package.&lt;/p&gt; &#xA;&lt;h3&gt;Wallpapers used in this README&lt;/h3&gt; &#xA;&lt;p&gt;Pixel Art, by Waneella - &lt;a href=&#34;https://www.patreon.com/waneella&#34;&gt;https://www.patreon.com/waneella&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gradient - &lt;a href=&#34;https://www.behance.net/gallery/86128681/Free-Unicorn-Vector-Gradients&#34;&gt;https://www.behance.net/gallery/86128681/Free-Unicorn-Vector-Gradients&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Silhouette of Skyway - &lt;a href=&#34;https://unsplash.com/photos/silhouette-of-skyway-UUJzCuHUfYI&#34;&gt;https://unsplash.com/photos/silhouette-of-skyway-UUJzCuHUfYI&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nkaz001/hftbacktest</title>
    <updated>2024-03-31T01:54:26Z</updated>
    <id>tag:github.com,2024-03-31:/nkaz001/hftbacktest</id>
    <link href="https://github.com/nkaz001/hftbacktest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high-frequency trading and market-making backtesting tool in Python and Rust, which accounts for limit orders, queue positions, and latencies, utilizing full tick data for trades and order books.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;=========== HftBacktest&lt;/h1&gt; &#xA;&lt;p&gt;|codacy| |codeql| |pypi| |downloads| |license| |docs| |github|&lt;/p&gt; &#xA;&lt;h1&gt;High-Frequency Trading Backtesting Tool in Python&lt;/h1&gt; &#xA;&lt;p&gt;This Python framework is designed for developing high-frequency trading and market-making strategies. It focuses on accounting for both feed and order latencies, as well as the order queue position for order fill simulation. The framework aims to provide more accurate market replay-based backtesting, based on full order book and trade tick feed data.&lt;/p&gt; &#xA;&lt;h1&gt;Key Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working in &lt;code&gt;Numba &amp;lt;https://numba.pydata.org/&amp;gt;&lt;/code&gt;_ JIT function.&lt;/li&gt; &#xA; &lt;li&gt;Complete tick-by-tick simulation with a variable time interval.&lt;/li&gt; &#xA; &lt;li&gt;Full order book reconstruction based on L2 feeds(Market-By-Price).&lt;/li&gt; &#xA; &lt;li&gt;Backtest accounting for both feed and order latency, using provided models or your own custom model.&lt;/li&gt; &#xA; &lt;li&gt;Order fill simulation that takes into account the order queue position, using provided models or your own custom model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;code&gt;full document here &amp;lt;https://hftbacktest.readthedocs.io/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;hftbacktest supports Python 3.8+. You can install hftbacktest using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;pip install hftbacktest&lt;/p&gt; &#xA;&lt;p&gt;Or you can clone the latest development version from the Git repository with:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://github.com/nkaz001/hftbacktest&#34;&gt;https://github.com/nkaz001/hftbacktest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Data Source &amp;amp; Format&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;Data &amp;lt;https://hftbacktest.readthedocs.io/en/latest/data.html&amp;gt;&lt;/code&gt;_ or &lt;code&gt;Data Preparation &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Data%20Preparation.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;A Quick Example&lt;/h2&gt; &#xA;&lt;p&gt;Get a glimpse of what backtesting with hftbacktest looks like with these code snippets:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@njit&#xA;def simple_two_sided_quote(hbt, stat):&#xA;    max_position = 5&#xA;    half_spread = hbt.tick_size * 20&#xA;    skew = 1&#xA;    order_qty = 0.1&#xA;    last_order_id = -1&#xA;    order_id = 0&#xA;&#xA;    # Checks every 0.1s&#xA;    while hbt.elapse(100_000):&#xA;        # Clears cancelled, filled or expired orders.&#xA;        hbt.clear_inactive_orders()&#xA;&#xA;        # Obtains the current mid-price and computes the reservation price.&#xA;        mid_price = (hbt.best_bid + hbt.best_ask) / 2.0&#xA;        reservation_price = mid_price - skew * hbt.position * hbt.tick_size&#xA;&#xA;        buy_order_price = reservation_price - half_spread&#xA;        sell_order_price = reservation_price + half_spread&#xA;&#xA;        last_order_id = -1&#xA;        # Cancel all outstanding orders&#xA;        for order in hbt.orders.values():&#xA;            if order.cancellable:&#xA;                hbt.cancel(order.order_id)&#xA;                last_order_id = order.order_id&#xA;&#xA;        # All order requests are considered to be requested at the same time.&#xA;        # Waits until one of the order cancellation responses is received.&#xA;        if last_order_id &amp;gt;= 0:&#xA;            hbt.wait_order_response(last_order_id)&#xA;&#xA;        # Clears cancelled, filled or expired orders.&#xA;        hbt.clear_inactive_orders()&#xA;&#xA;        last_order_id = -1&#xA;        if hbt.position &amp;lt; max_position:&#xA;            # Submits a new post-only limit bid order.&#xA;            order_id += 1&#xA;            hbt.submit_buy_order(&#xA;                order_id,&#xA;                buy_order_price,&#xA;                order_qty,&#xA;                GTX&#xA;            )&#xA;            last_order_id = order_id&#xA;&#xA;        if hbt.position &amp;gt; -max_position:&#xA;            # Submits a new post-only limit ask order.&#xA;            order_id += 1&#xA;            hbt.submit_sell_order(&#xA;                order_id,&#xA;                sell_order_price,&#xA;                order_qty,&#xA;                GTX&#xA;            )&#xA;            last_order_id = order_id&#xA;&#xA;        # All order requests are considered to be requested at the same time.&#xA;        # Waits until one of the order responses is received.&#xA;        if last_order_id &amp;gt;= 0:&#xA;            hbt.wait_order_response(last_order_id)&#xA;&#xA;        # Records the current state for stat calculation.&#xA;        stat.record(hbt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Tutorials&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Data Preparation &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Data%20Preparation.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Getting Started &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Getting%20Started.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Working with Market Depth and Trades &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Working%20with%20Market%20Depth%20and%20Trades.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Integrating Custom Data &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Integrating%20Custom%20Data.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;High-Frequency Grid Trading &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/High-Frequency%20Grid%20Trading.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Impact of Order Latency &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Impact%20of%20Order%20Latency.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Guéant–Lehalle–Fernandez-Tapia Market Making Model and Grid Trading &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/GLFT%20Market%20Making%20Model%20and%20Grid%20Trading.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Making Multiple Markets &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Making%20Multiple%20Markets.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Risk Mitigation through Price Protection in Extreme Market Conditions &amp;lt;https://hftbacktest.readthedocs.io/en/latest/tutorials/Risk%20Mitigation%20through%20Price%20Protection%20in%20Extreme%20Market%20Conditions.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;You can find more examples in &lt;code&gt;examples &amp;lt;https://github.com/nkaz001/hftbacktest/tree/master/examples&amp;gt;&lt;/code&gt;_ directory.&lt;/p&gt; &#xA;&lt;h1&gt;Experimental features&lt;/h1&gt; &#xA;&lt;p&gt;The experimental features are currently in the early stages of development, having been completely rewritten in Rust to support the following features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backtesting of multi-asset and multi-exchange models&lt;/li&gt; &#xA; &lt;li&gt;Deployment of a live trading bot using the same algo code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;rust &amp;lt;https://github.com/nkaz001/hftbacktest/tree/master/rust&amp;gt;&lt;/code&gt;_ directory.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Thank you for considering contributing to hftbacktest! Welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, please open an issue or discussion on GitHub to discuss it.&lt;/p&gt; &#xA;&lt;p&gt;The following items are examples of contributions you can make to this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve performance statistics reporting&lt;/li&gt; &#xA; &lt;li&gt;Implement test code&lt;/li&gt; &#xA; &lt;li&gt;Add additional queue or exchange models&lt;/li&gt; &#xA; &lt;li&gt;Update documentation and examples&lt;/li&gt; &#xA; &lt;li&gt;Implement a live bot connector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. |python| image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/hftbacktest.svg?style=plastic&#34;&gt;https://img.shields.io/pypi/pyversions/hftbacktest.svg?style=plastic&lt;/a&gt; :alt: Python Version :target: &lt;a href=&#34;https://badge.fury.io/py/hftbacktest&#34;&gt;https://badge.fury.io/py/hftbacktest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |codacy| image:: &lt;a href=&#34;https://app.codacy.com/project/badge/Grade/e2cef673757a45b18abfc361779feada&#34;&gt;https://app.codacy.com/project/badge/Grade/e2cef673757a45b18abfc361779feada&lt;/a&gt; :alt: Codacy :target: &lt;a href=&#34;https://www.codacy.com/gh/nkaz001/hftbacktest/dashboard?utm_source=github.com&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_content=nkaz001/hftbacktest&amp;amp;amp;utm_campaign=Badge_Grade&#34;&gt;https://www.codacy.com/gh/nkaz001/hftbacktest/dashboard?utm_source=github.com&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_content=nkaz001/hftbacktest&amp;amp;amp;utm_campaign=Badge_Grade&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |codeql| image:: &lt;a href=&#34;https://github.com/nkaz001/hftbacktest/actions/workflows/codeql.yml/badge.svg?branch=master&amp;amp;event=push&#34;&gt;https://github.com/nkaz001/hftbacktest/actions/workflows/codeql.yml/badge.svg?branch=master&amp;amp;event=push&lt;/a&gt; :alt: CodeQL :target: &lt;a href=&#34;https://github.com/nkaz001/hftbacktest/actions/workflows/codeql.yml&#34;&gt;https://github.com/nkaz001/hftbacktest/actions/workflows/codeql.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |pypi| image:: &lt;a href=&#34;https://badge.fury.io/py/hftbacktest.svg&#34;&gt;https://badge.fury.io/py/hftbacktest.svg&lt;/a&gt; :alt: Package Version :target: &lt;a href=&#34;https://pypi.org/project/hftbacktest&#34;&gt;https://pypi.org/project/hftbacktest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |downloads| image:: &lt;a href=&#34;https://static.pepy.tech/badge/hftbacktest&#34;&gt;https://static.pepy.tech/badge/hftbacktest&lt;/a&gt; :alt: Downloads :target: &lt;a href=&#34;https://pepy.tech/project/hftbacktest&#34;&gt;https://pepy.tech/project/hftbacktest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |license| image:: &lt;a href=&#34;https://img.shields.io/badge/License-MIT-green.svg&#34;&gt;https://img.shields.io/badge/License-MIT-green.svg&lt;/a&gt; :alt: License :target: &lt;a href=&#34;https://github.com/nkaz001/hftbacktest/raw/master/LICENSE&#34;&gt;https://github.com/nkaz001/hftbacktest/blob/master/LICENSE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |docs| image:: &lt;a href=&#34;https://readthedocs.org/projects/hftbacktest/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/hftbacktest/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://hftbacktest.readthedocs.io/en/latest/?badge=latest&#34;&gt;https://hftbacktest.readthedocs.io/en/latest/?badge=latest&lt;/a&gt; :alt: Documentation Status&lt;/p&gt; &#xA;&lt;p&gt;.. |github| image:: &lt;a href=&#34;https://img.shields.io/github/stars/nkaz001/hftbacktest?style=social&#34;&gt;https://img.shields.io/github/stars/nkaz001/hftbacktest?style=social&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/nkaz001/hftbacktest&#34;&gt;https://github.com/nkaz001/hftbacktest&lt;/a&gt; :alt: Github&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ynqa/jnv</title>
    <updated>2024-03-31T01:54:26Z</updated>
    <id>tag:github.com,2024-03-31:/ynqa/jnv</id>
    <link href="https://github.com/ynqa/jnv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;interactive JSON filter using jq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jnv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ynqa/jnv/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ynqa/jnv/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;jnv&lt;/em&gt; is designed for navigating JSON, offering an interactive JSON viewer and &lt;code&gt;jq&lt;/code&gt; filter editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ynqa/jnv/assets/6745370/625599ca-6c95-4cc1-bddf-d724ec32e676&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/simeji/jid&#34;&gt;jid&lt;/a&gt; and &lt;a href=&#34;https://github.com/fiatjaf/jiq&#34;&gt;jiq&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive JSON viewer and &lt;code&gt;jq&lt;/code&gt; filter editor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Syntax highlighting for JSON&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Capable of accommodating various format &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Input: File, Stdin&lt;/li&gt; &#xA;   &lt;li&gt;Data: A JSON or multiple JSON structures that can be deserialized with &lt;a href=&#34;https://docs.rs/serde_json/latest/serde_json/struct.StreamDeserializer.html&#34;&gt;StreamDeserializer&lt;/a&gt;, such as &lt;a href=&#34;https://jsonlines.org/&#34;&gt;JSON Lines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Auto-completion for the filter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Only supports: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://jqlang.github.io/jq/manual/#identity&#34;&gt;Identity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://jqlang.github.io/jq/manual/#object-identifier-index&#34;&gt;Object Identifier-Index&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://jqlang.github.io/jq/manual/#array-index&#34;&gt;Array Index&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hint message to evaluate the filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ynqa/tap/jnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo port install jnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More info &lt;a href=&#34;https://ports.macports.org/port/jnv/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/autoconf/&#34;&gt;autoconf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/automake/&#34;&gt;automake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install jnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;em&gt;jnv&lt;/em&gt; does not require users to install &lt;code&gt;jq&lt;/code&gt; on their system, because it utilizes &lt;a href=&#34;https://github.com/ynqa/j9&#34;&gt;j9&lt;/a&gt; Rust bindings.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat data.json | jnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jnv data.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keymap&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Exit &lt;code&gt;jnv&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;jq filter auto-completion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;←&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one character to the left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;→&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one character to the right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + A&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor to the start of the filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + E&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor to the end of the filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Backspace&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete a character of filter at the cursor position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + U&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete all characters of filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;↑&lt;/kbd&gt;, &lt;kbd&gt;Ctrl + K&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one entry up in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;↓&lt;/kbd&gt;, &lt;kbd&gt;Ctrl + J&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one entry down in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + H&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move to the last entry in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + L&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move to the first entry in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Toggle expand/collapse in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + P&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Expand all folds in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + N&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Collapse all folds in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Alt + B&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor to the previous nearest character within set(&lt;code&gt;.&lt;/code&gt;,&lt;code&gt;|&lt;/code&gt;,&lt;code&gt;(&lt;/code&gt;,&lt;code&gt;)&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;,&lt;code&gt;]&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Alt + F&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor to the next nearest character within set(&lt;code&gt;.&lt;/code&gt;,&lt;code&gt;|&lt;/code&gt;,&lt;code&gt;(&lt;/code&gt;,&lt;code&gt;)&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;,&lt;code&gt;]&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + W&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Erase to the previous nearest character within set(&lt;code&gt;.&lt;/code&gt;,&lt;code&gt;|&lt;/code&gt;,&lt;code&gt;(&lt;/code&gt;,&lt;code&gt;)&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;,&lt;code&gt;]&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Alt + D&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Erase to the next nearest character within set(&lt;code&gt;.&lt;/code&gt;,&lt;code&gt;|&lt;/code&gt;,&lt;code&gt;(&lt;/code&gt;,&lt;code&gt;)&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;,&lt;code&gt;]&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;JSON navigator and interactive filter leveraging jq&#xA;&#xA;Usage: jnv [OPTIONS] [INPUT]&#xA;&#xA;Examples:&#xA;- Read from a file:&#xA;        jnv data.json&#xA;&#xA;- Read from standard input:&#xA;        cat data.json | jnv&#xA;&#xA;Arguments:&#xA;  [INPUT]&#xA;          Optional path to a JSON file. If not provided or if &#34;-&#34; is specified, reads from standard input&#xA;&#xA;Options:&#xA;  -e, --edit-mode &amp;lt;EDIT_MODE&amp;gt;&#xA;                  Specifies the edit mode for the interface.&#xA;                  Acceptable values are &#34;insert&#34; or &#34;overwrite&#34;.&#xA;                  - &#34;insert&#34; inserts a new input at the cursor&#39;s position.&#xA;                  - &#34;overwrite&#34; mode replaces existing characters with new input at the cursor&#39;s position.&#xA;          [default: insert]&#xA;&#xA;  -i, --indent &amp;lt;INDENT&amp;gt;&#xA;                  Affect the formatting of the displayed JSON,&#xA;                  making it more readable by adjusting the indentation level.&#xA;          [default: 2]&#xA;&#xA;  -n, --no-hint&#xA;                  When this option is enabled, it prevents the display of&#xA;                  hints that typically guide or offer suggestions to the user.&#xA;&#xA;  -d, --expand-depth &amp;lt;EXPAND_DEPTH&amp;gt;&#xA;                  Specifies the initial depth to which JSON nodes are expanded in the visualization.&#xA;                  Note: Increasing this depth can significantly slow down the display for large datasets.&#xA;          [default: 3]&#xA;&#xA;  -l, --suggestion-list-length &amp;lt;SUGGESTION_LIST_LENGTH&amp;gt;&#xA;                  Controls the number of suggestions displayed in the list,&#xA;                  aiding users in making selections more efficiently.&#xA;          [default: 3]&#xA;&#xA;  -h, --help&#xA;          Print help (see a summary with &#39;-h&#39;)&#xA;&#xA;  -V, --version&#xA;          Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/ynqa/jnv&#34;&gt;&lt;img src=&#34;https://starchart.cc/ynqa/jnv.svg?variant=adaptive&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>