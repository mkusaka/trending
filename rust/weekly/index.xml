<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T02:03:15Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rerun-io/rerun</title>
    <updated>2023-02-26T02:03:15Z</updated>
    <id>tag:github.com,2023-02-26:/rerun-io/rerun</id>
    <link href="https://github.com/rerun-io/rerun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Log images, point clouds, etc, and visualize them effortlessly. Built in Rust using egui&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.rerun.io/&#34;&gt; &lt;img alt=&#34;banner&#34; src=&#34;https://user-images.githubusercontent.com/1148717/218142418-1d320929-6b7a-486e-8277-fbeef2432529.png&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/rerun-sdk/&#34;&gt; &lt;img alt=&#34;PyPi&#34; src=&#34;https://img.shields.io/pypi/v/rerun-sdk.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/rerun&#34;&gt; &lt;img alt=&#34;crates.io&#34; src=&#34;https://img.shields.io/crates/v/rerun.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/rerun-io/rerun/raw/master/LICENSE-MIT&#34;&gt; &lt;img alt=&#34;MIT&#34; src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/rerun-io/rerun/raw/master/LICENSE-APACHE&#34;&gt; &lt;img alt=&#34;Apache&#34; src=&#34;https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/Gcm8BbTaAj&#34;&gt; &lt;img alt=&#34;Rerun Discord&#34; src=&#34;https://img.shields.io/discord/1062300748202921994?label=Rerun%20Discord&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h1&gt;Rerun: Visualization infrastructure for computer vision.&lt;/h1&gt; &#xA;&lt;p&gt;Use one of our logging APIs (Python or Rust) to log rich data, such as images and point clouds, to the Rerun Viewer, where it is visualized live or after the fact.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import rerun as rr&#xA;&#xA;rr.init(&#34;my_app&#34;, spawn = True) # Spawn a Rerun Viewer and stream log events to it&#xA;&#xA;rr.log_image(&#34;rgb_image&#34;, image)&#xA;rr.log_points(&#34;points&#34;, positions)&#xA;rr.log_rect(&#34;car&#34;, bbox)&#xA;‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;800&#34; alt=&#34;Rerun Viewer&#34; src=&#34;https://user-images.githubusercontent.com/1148717/218763490-f6261ecd-e19e-4520-9b25-446ce1ee6328.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;code&gt;pip install rerun-sdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;code&gt;cargo add rerun&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C / C++&lt;/strong&gt;: Coming soon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rerun Viewer binary&lt;/h3&gt; &#xA;&lt;p&gt;Both the Python and Rust library can start the Rerun Viewer, but to stream log data over the network or load our &lt;code&gt;.rrd&lt;/code&gt; data files you also need the &lt;code&gt;rerun&lt;/code&gt; binary.&lt;/p&gt; &#xA;&lt;p&gt;It can be installed with &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or with &lt;code&gt;cargo install rerun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should now be able to run &lt;code&gt;rerun --help&lt;/code&gt; in any terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üìö &lt;a href=&#34;http://rerun.io/docs&#34;&gt;High-level docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üêç &lt;a href=&#34;https://ref.rerun.io/docs/python&#34;&gt;Python API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ü¶Ä &lt;a href=&#34;https://docs.rs/rerun/&#34;&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ÅâÔ∏è &lt;a href=&#34;https://www.rerun.io/docs/getting-started/troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;We are in early beta. There are many features we want to add, and the API is still evolving. &lt;em&gt;Expect breaking changes!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some shortcomings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Big points clouds (1M+) are slow (&lt;a href=&#34;https://github.com/rerun-io/rerun/issues/1136&#34;&gt;#1136&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The data you want to visualize must fit in RAM. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://github.com/rerun-io/rerun/issues/1138&#34;&gt;https://github.com/rerun-io/rerun/issues/1138&lt;/a&gt; for how to bound memory use&lt;/li&gt; &#xA;   &lt;li&gt;We plan on having a disk-based data store some time in the future&lt;/li&gt; &#xA;   &lt;li&gt;Additionally, Rerun is using more memory than it should at the moment (&lt;a href=&#34;https://github.com/rerun-io/rerun/pull/1242&#34;&gt;#1242&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The Rust library takes a long time to compile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We have way too many big dependencies, and we are planning on improving the situation (&lt;a href=&#34;https://github.com/rerun-io/rerun/pull/1316&#34;&gt;#1316&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Business model&lt;/h2&gt; &#xA;&lt;p&gt;Rerun uses an open-core model. Everything in this repository will stay open source and free (both as in beer and as in freedom). In the future, Rerun will offer a commercial product that builds on top of the core free project.&lt;/p&gt; &#xA;&lt;p&gt;The Rerun open source project targets the needs of individual developers. The commercial product targets the needs specific to teams that build and run computer vision and robotics products.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/ARCHITECTURE.md&#34;&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/BUILD.md&#34;&gt;&lt;code&gt;BUILD.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_STYLE.md&#34;&gt;&lt;code&gt;CODE_STYLE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/RELEASES.md&#34;&gt;&lt;code&gt;RELEASES.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing a pre-release Python SDK&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the correct &lt;code&gt;.whl&lt;/code&gt; from &lt;a href=&#34;https://github.com/rerun-io/rerun/releases&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pip install rerun_sdk&amp;lt;...&amp;gt;.whl&lt;/code&gt; (replace &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; with the actual filename)&lt;/li&gt; &#xA; &lt;li&gt;Test it: &lt;code&gt;rerun --version&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>PyO3/pyo3</title>
    <updated>2023-02-26T02:03:15Z</updated>
    <id>tag:github.com,2023-02-26:/PyO3/pyo3</id>
    <link href="https://github.com/PyO3/pyo3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust bindings for the Python interpreter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyO3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PyO3/pyo3/actions&#34;&gt;&lt;img src=&#34;https://github.com/PyO3/pyo3/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pyo3.rs/dev/bench/&#34;&gt;&lt;img src=&#34;https://github.com/PyO3/pyo3/actions/workflows/bench.yml/badge.svg?sanitize=true&#34; alt=&#34;benchmark&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/PyO3/pyo3&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/PyO3/pyo3/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/pyo3&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/pyo3&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-lang.github.io/rfcs/2495-min-rust-version.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rustc-1.48+-blue.svg?sanitize=true&#34; alt=&#34;minimum rustc 1.48&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/PyO3/Lobby&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/nwjs/nw.js.svg?sanitize=true&#34; alt=&#34;dev chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PyO3/pyo3/raw/main/Contributing.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contribute-on%20github-Green&#34; alt=&#34;contributing notes&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; bindings for &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;, including tools for creating native Python extension modules. Running and interacting with Python code from a Rust binary is also supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;User Guide: &lt;a href=&#34;https://pyo3.rs&#34;&gt;stable&lt;/a&gt; | &lt;a href=&#34;https://pyo3.rs/main&#34;&gt;main&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;API Documentation: &lt;a href=&#34;https://docs.rs/pyo3/&#34;&gt;stable&lt;/a&gt; | &lt;a href=&#34;https://pyo3.rs/main/doc&#34;&gt;main&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;PyO3 supports the following software versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.7 and up (CPython and PyPy)&lt;/li&gt; &#xA; &lt;li&gt;Rust 1.48 and up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use PyO3 to write a native Python module in Rust, or to embed Python in a Rust binary. The following sections explain each of these in turn.&lt;/p&gt; &#xA;&lt;h3&gt;Using Rust from Python&lt;/h3&gt; &#xA;&lt;p&gt;PyO3 can be used to generate a native Python module. The easiest way to try this out for the first time is to use &lt;a href=&#34;https://github.com/PyO3/maturin&#34;&gt;&lt;code&gt;maturin&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;maturin&lt;/code&gt; is a tool for building and publishing Rust-based Python packages with minimal configuration. The following steps install &lt;code&gt;maturin&lt;/code&gt;, use it to generate and build a new Python package, and then launch Python to import and execute a function from the package.&lt;/p&gt; &#xA;&lt;p&gt;First, follow the commands below to create a new directory containing a new Python &lt;code&gt;virtualenv&lt;/code&gt;, and install &lt;code&gt;maturin&lt;/code&gt; into the virtualenv using Python&#39;s package manager, &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# (replace string_sum with the desired package name)&#xA;$ mkdir string_sum&#xA;$ cd string_sum&#xA;$ python -m venv .env&#xA;$ source .env/bin/activate&#xA;$ pip install maturin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Still inside this &lt;code&gt;string_sum&lt;/code&gt; directory, now run &lt;code&gt;maturin init&lt;/code&gt;. This will generate the new package source. When given the choice of bindings to use, select pyo3 bindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ maturin init&#xA;‚úî ü§∑ What kind of bindings to use? ¬∑ pyo3&#xA;  ‚ú® Done! New project created string_sum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The most important files generated by this command are &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;lib.rs&lt;/code&gt;, which will look roughly like the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]&#xA;name = &#34;string_sum&#34;&#xA;version = &#34;0.1.0&#34;&#xA;edition = &#34;2018&#34;&#xA;&#xA;[lib]&#xA;# The name of the native library. This is the name which will be used in Python to import the&#xA;# library (i.e. `import string_sum`). If you change this, you must also change the name of the&#xA;# `#[pymodule]` in `src/lib.rs`.&#xA;name = &#34;string_sum&#34;&#xA;# &#34;cdylib&#34; is necessary to produce a shared library for Python to import from.&#xA;#&#xA;# Downstream Rust code (including code in `bin/`, `examples/`, and `tests/`) will not be able&#xA;# to `use string_sum;` unless the &#34;rlib&#34; or &#34;lib&#34; crate type is also included, e.g.:&#xA;# crate-type = [&#34;cdylib&#34;, &#34;rlib&#34;]&#xA;crate-type = [&#34;cdylib&#34;]&#xA;&#xA;[dependencies]&#xA;pyo3 = { version = &#34;0.18.1&#34;, features = [&#34;extension-module&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use pyo3::prelude::*;&#xA;&#xA;/// Formats the sum of two numbers as string.&#xA;#[pyfunction]&#xA;fn sum_as_string(a: usize, b: usize) -&amp;gt; PyResult&amp;lt;String&amp;gt; {&#xA;    Ok((a + b).to_string())&#xA;}&#xA;&#xA;/// A Python module implemented in Rust. The name of this function must match&#xA;/// the `lib.name` setting in the `Cargo.toml`, else Python will not be able to&#xA;/// import the module.&#xA;#[pymodule]&#xA;fn string_sum(_py: Python&amp;lt;&#39;_&amp;gt;, m: &amp;amp;PyModule) -&amp;gt; PyResult&amp;lt;()&amp;gt; {&#xA;    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, run &lt;code&gt;maturin develop&lt;/code&gt;. This will build the package and install it into the Python virtualenv previously created and activated. The package is then ready to be used from &lt;code&gt;python&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ maturin develop&#xA;# lots of progress output as maturin runs the compilation...&#xA;$ python&#xA;&amp;gt;&amp;gt;&amp;gt; import string_sum&#xA;&amp;gt;&amp;gt;&amp;gt; string_sum.sum_as_string(5, 20)&#xA;&#39;25&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make changes to the package, just edit the Rust source code and then re-run &lt;code&gt;maturin develop&lt;/code&gt; to recompile.&lt;/p&gt; &#xA;&lt;p&gt;To run this all as a single copy-and-paste, use the bash script below (replace &lt;code&gt;string_sum&lt;/code&gt; in the first command with the desired package name):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir string_sum &amp;amp;&amp;amp; cd &#34;$_&#34;&#xA;python -m venv .env&#xA;source .env/bin/activate&#xA;pip install maturin&#xA;maturin init --bindings pyo3&#xA;maturin develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to be able to run &lt;code&gt;cargo test&lt;/code&gt; or use this project in a Cargo workspace and are running into linker issues, there are some workarounds in &lt;a href=&#34;https://pyo3.rs/latest/faq.html#i-cant-run-cargo-test-or-i-cant-build-in-a-cargo-workspace-im-having-linker-issues-like-symbol-not-found-or-undefined-reference-to-_pyexc_systemerror&#34;&gt;the FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As well as with &lt;code&gt;maturin&lt;/code&gt;, it is possible to build using &lt;a href=&#34;https://github.com/PyO3/setuptools-rust&#34;&gt;&lt;code&gt;setuptools-rust&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://pyo3.rs/latest/building_and_distribution.html#manual-builds&#34;&gt;manually&lt;/a&gt;. Both offer more flexibility than &lt;code&gt;maturin&lt;/code&gt; but require more configuration to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Using Python from Rust&lt;/h3&gt; &#xA;&lt;p&gt;To embed Python into a Rust binary, you need to ensure that your Python installation contains a shared library. The following steps demonstrate how to ensure this (for Ubuntu), and then give some example code which runs an embedded Python interpreter.&lt;/p&gt; &#xA;&lt;p&gt;To install the Python shared library on Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install python3-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the Python shared library on RPM based distributions (e.g. Fedora, Red Hat, SuSE), install the &lt;code&gt;python3-devel&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;Start a new project with &lt;code&gt;cargo new&lt;/code&gt; and add &lt;code&gt;pyo3&lt;/code&gt; to the &lt;code&gt;Cargo.toml&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies.pyo3]&#xA;version = &#34;0.18.1&#34;&#xA;features = [&#34;auto-initialize&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example program displaying the value of &lt;code&gt;sys.version&lt;/code&gt; and the current user name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use pyo3::prelude::*;&#xA;use pyo3::types::IntoPyDict;&#xA;&#xA;fn main() -&amp;gt; PyResult&amp;lt;()&amp;gt; {&#xA;    Python::with_gil(|py| {&#xA;        let sys = py.import(&#34;sys&#34;)?;&#xA;        let version: String = sys.getattr(&#34;version&#34;)?.extract()?;&#xA;&#xA;        let locals = [(&#34;os&#34;, py.import(&#34;os&#34;)?)].into_py_dict(py);&#xA;        let code = &#34;os.getenv(&#39;USER&#39;) or os.getenv(&#39;USERNAME&#39;) or &#39;Unknown&#39;&#34;;&#xA;        let user: String = py.eval(code, None, Some(&amp;amp;locals))?.extract()?;&#xA;&#xA;        println!(&#34;Hello {}, I&#39;m Python {}&#34;, user, version);&#xA;        Ok(())&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The guide has &lt;a href=&#34;https://pyo3.rs/latest/python_from_rust.html&#34;&gt;a section&lt;/a&gt; with lots of examples about this topic.&lt;/p&gt; &#xA;&lt;h2&gt;Tools and libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyO3/maturin&#34;&gt;maturin&lt;/a&gt; &lt;em&gt;Build and publish crates with pyo3, rust-cpython or cffi bindings as well as rust binaries as python packages&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyO3/setuptools-rust&#34;&gt;setuptools-rust&lt;/a&gt; &lt;em&gt;Setuptools plugin for Rust support&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyO3/pyo3-built&#34;&gt;pyo3-built&lt;/a&gt; &lt;em&gt;Simple macro to expose metadata obtained with the &lt;a href=&#34;https://crates.io/crates/built&#34;&gt;&lt;code&gt;built&lt;/code&gt;&lt;/a&gt; crate as a &lt;a href=&#34;https://docs.rs/pyo3/*/pyo3/types/struct.PyDict.html&#34;&gt;&lt;code&gt;PyDict&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyO3/rust-numpy&#34;&gt;rust-numpy&lt;/a&gt; &lt;em&gt;Rust binding of NumPy C-API&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gperinazzo/dict-derive&#34;&gt;dict-derive&lt;/a&gt; &lt;em&gt;Derive FromPyObject to automatically transform Python dicts into Rust structs&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vorner/pyo3-log&#34;&gt;pyo3-log&lt;/a&gt; &lt;em&gt;Bridge from Rust to Python logging&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davidhewitt/pythonize&#34;&gt;pythonize&lt;/a&gt; &lt;em&gt;Serde serializer for converting Rust objects to JSON-compatible Python objects&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awestlake87/pyo3-asyncio&#34;&gt;pyo3-asyncio&lt;/a&gt; &lt;em&gt;Utilities for working with Python&#39;s Asyncio library and async functions&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mityax/rustimport&#34;&gt;rustimport&lt;/a&gt; &lt;em&gt;Directly import Rust files or crates from Python, without manual compilation step. Provides pyo3 integration by default and generates pyo3 binding code automatically.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autopilot-rs/autopy&#34;&gt;autopy&lt;/a&gt; &lt;em&gt;A simple, cross-platform GUI automation library for Python and Rust.&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Contains an example of building wheels on TravisCI and appveyor using &lt;a href=&#34;https://github.com/pypa/cibuildwheel&#34;&gt;cibuildwheel&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/arrow-ballista-python&#34;&gt;ballista-python&lt;/a&gt; &lt;em&gt;A Python library that binds to Apache Arrow distributed query engine Ballista.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fastlmm/bed-reader&#34;&gt;bed-reader&lt;/a&gt; &lt;em&gt;Read and write the PLINK BED format, simply and efficiently.&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shows Rayon/ndarray::parallel (including capturing errors, controlling thread num), Python types to Rust generics, Github Actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyca/cryptography/tree/main/src/rust&#34;&gt;cryptography&lt;/a&gt; &lt;em&gt;Python cryptography library with some functionality in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stranger6667/css-inline/tree/master/bindings/python&#34;&gt;css-inline&lt;/a&gt; &lt;em&gt;CSS inlining for Python implemented in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/arrow-datafusion-python&#34;&gt;datafusion-python&lt;/a&gt; &lt;em&gt;A Python library that binds to Apache Arrow in-memory query engine DataFusion.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/delta-rs/tree/main/python&#34;&gt;deltalake-python&lt;/a&gt; &lt;em&gt;Native Delta Lake Python binding based on delta-rs with Pandas integration.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yankun1992/fastbloom&#34;&gt;fastbloom&lt;/a&gt; &lt;em&gt;A fast &lt;a href=&#34;https://github.com/yankun1992/fastbloom#BloomFilter&#34;&gt;bloom filter&lt;/a&gt; | &lt;a href=&#34;https://github.com/yankun1992/fastbloom#countingbloomfilter&#34;&gt;counting bloom filter&lt;/a&gt; implemented by Rust for Rust and Python!&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thedrow/fastuuid/&#34;&gt;fastuuid&lt;/a&gt; &lt;em&gt;Python bindings to Rust&#39;s UUID library.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/feos-org/feos&#34;&gt;feos&lt;/a&gt; &lt;em&gt;Lightning fast thermodynamic modeling in Rust with fully developed Python interface.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jinlow/forust&#34;&gt;forust&lt;/a&gt; &lt;em&gt;A lightweight gradient boosted decision tree library written in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyO3/setuptools-rust/tree/main/examples/html-py-ever&#34;&gt;html-py-ever&lt;/a&gt; &lt;em&gt;Using &lt;a href=&#34;https://github.com/servo/html5ever&#34;&gt;html5ever&lt;/a&gt; through &lt;a href=&#34;https://github.com/kuchiki-rs/kuchiki&#34;&gt;kuchiki&lt;/a&gt; to speed up html parsing and css-selecting.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mre/hyperjson&#34;&gt;hyperjson&lt;/a&gt; &lt;em&gt;A hyper-fast Python module for reading/writing JSON data using Rust&#39;s serde-json.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fusion-engineering/inline-python&#34;&gt;inline-python&lt;/a&gt; &lt;em&gt;Inline Python code directly in your Rust code.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stranger6667/jsonschema-rs/tree/master/bindings/python&#34;&gt;jsonschema-rs&lt;/a&gt; &lt;em&gt;Fast JSON Schema validation library.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cds-astro/mocpy&#34;&gt;mocpy&lt;/a&gt; &lt;em&gt;Astronomical Python library offering data structures for describing any arbitrary coverage regions on the unit sphere.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson&#34;&gt;orjson&lt;/a&gt; &lt;em&gt;Fast Python JSON library.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aviramha/ormsgpack&#34;&gt;ormsgpack&lt;/a&gt; &lt;em&gt;Fast Python msgpack library.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ManifoldFR/point-process-rust/tree/master/pylib&#34;&gt;point-process&lt;/a&gt; &lt;em&gt;High level API for pointprocesses as a Python library.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daggy1234/polaroid&#34;&gt;polaroid&lt;/a&gt; &lt;em&gt;Hyper Fast and safe image manipulation library for Python written in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pola-rs/polars&#34;&gt;polars&lt;/a&gt; &lt;em&gt;Fast multi-threaded DataFrame library in Rust | Python | Node.js.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydantic/pydantic-core&#34;&gt;pydantic-core&lt;/a&gt; &lt;em&gt;Core validation logic for pydantic written in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinheavey/pyheck&#34;&gt;pyheck&lt;/a&gt; &lt;em&gt;Fast case conversion library, built by wrapping &lt;a href=&#34;https://github.com/withoutboats/heck&#34;&gt;heck&lt;/a&gt;.&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Quite easy to follow as there&#39;s not much code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Project-Dream-Weaver/pyre-http&#34;&gt;pyre&lt;/a&gt; &lt;em&gt;Fast Python HTTP server written in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cryptex-github/ril-py&#34;&gt;ril-py&lt;/a&gt; &lt;em&gt;A performant and high-level image processing library for Python written in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/online-ml/river&#34;&gt;river&lt;/a&gt; &lt;em&gt;Online machine learning in python, the computationally heavy statistics algorithms are implemented in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cjermain/rust-python-coverage&#34;&gt;rust-python-coverage&lt;/a&gt; &lt;em&gt;Example PyO3 project with automated test coverage for Rust and Python.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/tiktoken&#34;&gt;tiktoken&lt;/a&gt; &lt;em&gt;A fast BPE tokeniser for use with OpenAI&#39;s models.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/tokenizers/tree/main/bindings/python&#34;&gt;tokenizers&lt;/a&gt; &lt;em&gt;Python bindings to the Hugging Face tokenizers (NLP) written in Rust.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-python&#34;&gt;wasmer-python&lt;/a&gt; &lt;em&gt;Python library to run WebAssembly binaries.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Articles and other media&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fosdem.org/2023/schedule/event/rust_how_pydantic_v2_leverages_rusts_superpowers/&#34;&gt;How Pydantic V2 leverages Rust&#39;s Superpowers&lt;/a&gt; - Feb 4, 2023&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29?sk=f8d808d5f414154fdb811e4137011437&#34;&gt;Nine Rules for Writing Python Extensions in Rust&lt;/a&gt; - Dec 31, 2021&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/&#34;&gt;Calling Rust from Python using PyO3&lt;/a&gt; - Nov 18, 2021&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-XyWG_klSAw&amp;amp;t=320s&#34;&gt;davidhewitt&#39;s 2021 talk at Rust Manchester meetup&lt;/a&gt; - Aug 19, 2021&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.waleedkhan.name/port-python-to-rust/&#34;&gt;Incrementally porting a small Python project to Rust&lt;/a&gt; - Apr 29, 2021&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vortexa.com/insight/integrating-rust-into-python&#34;&gt;Vortexa - Integrating Rust into Python&lt;/a&gt; - Apr 12, 2021&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.yossarian.net/2020/08/02/Writing-and-publishing-a-python-module-in-rust&#34;&gt;Writing and publishing a Python module in Rust&lt;/a&gt; - Aug 2, 2020&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Everyone is welcomed to contribute to PyO3! There are many ways to support the project, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;help PyO3 users with issues on GitHub and Gitter&lt;/li&gt; &#xA; &lt;li&gt;improve documentation&lt;/li&gt; &#xA; &lt;li&gt;write features and bugfixes&lt;/li&gt; &#xA; &lt;li&gt;publish blogs and examples of how to use PyO3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/PyO3/pyo3/raw/main/Contributing.md&#34;&gt;contributing notes&lt;/a&gt; and &lt;a href=&#34;https://github.com/PyO3/pyo3/raw/main/Architecture.md&#34;&gt;architecture guide&lt;/a&gt; have more resources if you wish to volunteer time for PyO3 and are searching where to start.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have time to contribute yourself but still wish to support the project&#39;s future success, some of our maintainers have GitHub sponsorship pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/davidhewitt&#34;&gt;davidhewitt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/messense&#34;&gt;messense&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;PyO3 is licensed under the &lt;a href=&#34;https://opensource.org/licenses/APACHE-2.0&#34;&gt;Apache-2.0 license&lt;/a&gt;. Python is licensed under the &lt;a href=&#34;https://docs.python.org/3/license.html&#34;&gt;Python License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.netlify.com&#34;&gt; &lt;img src=&#34;https://www.netlify.com/v3/img/components/netlify-color-accent.svg?sanitize=true&#34; alt=&#34;Deploys by Netlify&#34;&gt; &lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>datafuselabs/databend</title>
    <updated>2023-02-26T02:03:15Z</updated>
    <id>tag:github.com,2023-02-26:/datafuselabs/databend</id>
    <link href="https://github.com/datafuselabs/databend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern cloud data warehouse focusing on reducing cost and complexity for your massive-scale analytics needs. Open source alternative to Snowflake. Also available in the cloud: https://app.databend.com&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;The Future of Cloud Data Analytics&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://databend.rs/doc/cloud&#34;&gt;Databend Serverless Cloud (beta)&lt;/a&gt; | &lt;a href=&#34;https://databend.rs/doc&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://perf.databend.rs&#34;&gt;Benchmarking&lt;/a&gt; | &lt;a href=&#34;https://github.com/datafuselabs/databend/issues/9604&#34;&gt;Roadmap (v1.0)&lt;/a&gt; &lt;/h4&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://link.databend.rs/join-slack&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/slack-databend-0abd59?logo=slack&#34; alt=&#34;slack&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://link.databend.rs/join-discord&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1023794859972235304?label=discord&amp;amp;logo=discord&amp;amp;color=0abd59&#34; alt=&#34;discord&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://link.databend.rs/join-matrix&#34;&gt; &lt;img src=&#34;https://img.shields.io/matrix/databend-general:matrix.org?logo=matrix&amp;amp;label=databend&amp;amp;color=0abd59&#34; alt=&#34;matrix&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://link.databend.rs/join-feishu&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/feishu-databend-0abd59&#34; alt=&#34;feishu&#34;&gt; &lt;/a&gt; &#xA;  &lt;br&gt; &#xA;  &lt;a href=&#34;https://github.com/datafuselabs/databend/actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/datafuselabs/databend/release.yml?branch=main&#34; alt=&#34;CI Status&#34;&gt; &lt;/a&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/Platform-Linux%2C%20macOS%2C%20ARM-green.svg?style=flat&#34; alt=&#34;Linux Platform&#34;&gt; &#xA;  &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/172204/219559279-ab7a11a4-9437-4a0a-85e8-cedf9ba0e24b.svg?sanitize=true&#34; alt=&#34;databend&#34;&gt; &#xA;&lt;h2&gt;What is Databend?&lt;/h2&gt; &#xA;&lt;p&gt;Databend is an open-source &lt;strong&gt;Elastic&lt;/strong&gt; and &lt;strong&gt;Workload-Aware&lt;/strong&gt; modern cloud data warehouse focusing on Low-Cost and Low-Complexity for your massive-scale analytics needs.&lt;/p&gt; &#xA;&lt;p&gt;Databend uses the latest techniques in vectorized query processing to allow you to do blazing-fast data analytics on object storage: (&lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;S3&lt;/a&gt;, &lt;a href=&#34;https://azure.microsoft.com/en-us/services/storage/blobs/&#34;&gt;Azure Blob&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/storage/&#34;&gt;Google Cloud Storage&lt;/a&gt;, &lt;a href=&#34;https://www.alibabacloud.com/product/object-storage-service&#34;&gt;Alibaba Cloud OSS&lt;/a&gt;, &lt;a href=&#34;https://www.tencentcloud.com/products/cos&#34;&gt;Tencent Cloud COS&lt;/a&gt;, &lt;a href=&#34;https://www.huaweicloud.com/intl/en-us/product/obs.html&#34;&gt;Huawei Cloud OBS&lt;/a&gt;, &lt;a href=&#34;https://www.cloudflare.com/products/r2/&#34;&gt;Cloudflare R2&lt;/a&gt;, &lt;a href=&#34;https://wasabi.com/&#34;&gt;Wasabi&lt;/a&gt; or &lt;a href=&#34;https://min.io&#34;&gt;MinIO&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Feature-Rich&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Support for atomic operations including &lt;code&gt;SELECT/INSERT/DELETE/UPDATE/COPY/ALTER&lt;/code&gt; and advanced features like Time Travel, Multi Catalog(Apache Hive/Apache Iceberg).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Instant Elasticity&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Databend completely separates storage from compute, which allows you easily scale up or scale down based on your application&#39;s needs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Blazing Performance&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Databend leverages data-level parallelism(Vectorized Query Execution) and instruction-level parallelism(SIMD) technology, offering blazing performance data analytics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git-like MVCC Storage&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Databend stores data with snapshots. It&#39;s easy to query, clone, and restore historical data in tables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Support for Semi-Structured Data&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Databend supports &lt;a href=&#34;https://databend.rs/doc/load-data&#34;&gt;ingestion of semi-structured data&lt;/a&gt; in various formats like CSV, JSON, and Parquet, which are located in the cloud or your local file system; Databend also supports semi-structured data types: &lt;a href=&#34;https://databend.rs/doc/sql-reference/data-types/data-type-semi-structured-types&#34;&gt;ARRAY, TUPLE, MAP, JSON&lt;/a&gt;, which is easy to import and operate on semi-structured.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MySQL/ClickHouse Compatible&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Databend is ANSI SQL compliant and MySQL/ClickHouse wire protocol compatible, making it easy to connect with existing tools(&lt;a href=&#34;https://databend.rs/doc/integrations/api/mysql-handler&#34;&gt;MySQL Client&lt;/a&gt;, &lt;a href=&#34;https://databend.rs/doc/integrations/api/clickhouse-handler&#34;&gt;ClickHouse Client&lt;/a&gt;, &lt;a href=&#34;https://vector.dev/&#34;&gt;Vector&lt;/a&gt;, &lt;a href=&#34;https://dbeaver.com/&#34;&gt;DBeaver&lt;/a&gt;, &lt;a href=&#34;https://databend.rs/doc/integrations/gui-tool/jupyter&#34;&gt;Jupyter&lt;/a&gt;, &lt;a href=&#34;https://databend.rs/doc/develop&#34;&gt;JDBC&lt;/a&gt;, etc.).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy to Use&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Databend has no indexes to build, no manual tuning required, no manual figuring out partitions or shard data, it‚Äôs all done for you as data is loaded into the table.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/172204/181448994-2b7c1623-6b20-4398-8917-45acca95ba90.png&#34; alt=&#34;databend-arch&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Try Databend&lt;/h2&gt; &#xA;&lt;h3&gt;1. Databend Serverless Cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to try Databend, &lt;a href=&#34;https://databend.rs/doc/cloud/&#34;&gt;Databend Cloud&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Install Databend from Docker&lt;/h3&gt; &#xA;&lt;p&gt;Prepare the image (once) from Docker Hub (this will download about 170 MB data):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull datafuselabs/databend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run Databend quickly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --net=host  datafuselabs/databend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Deploying Databend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/deploy/understanding-deployment-modes&#34;&gt;Understanding Deployment Modes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/deploy/deploying-databend&#34;&gt;Deploying a Standalone Databend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/deploy/expanding-to-a-databend-cluster&#34;&gt;Expanding a Standalone Databend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/cloud&#34;&gt;Databend Cloud (Beta)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Connecting to Databend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/integrations/api/mysql-handler&#34;&gt;How to Connect Databend with MySQL Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/integrations/api/clickhouse-handler&#34;&gt;How to Connect Databend with ClickHouse Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/integrations/gui-tool/dbeaver&#34;&gt;How to Connect Databend with DBeaver SQL IDE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/develop/python&#34;&gt;How to Execute Queries in Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/integrations/gui-tool/jupyter&#34;&gt;How to Query Databend in Jupyter Notebooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/develop/golang&#34;&gt;How to Execute Queries in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/develop/nodejs&#34;&gt;How to Work with Databend in Node.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Loading Data into Databend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/load-data/local&#34;&gt;How to Load Data from Local File System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/load-data/http&#34;&gt;How to Load Data from Remote Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/load-data/s3&#34;&gt;How to Load Data from Amazon S3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/load-data/stage&#34;&gt;How to Load Data from Databend Stages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Unloading Data from Databend&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/unload-data/&#34;&gt;How to Unload Data from Databend&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing Users&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/user/user-create-user&#34;&gt;How to Create a User&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/user/grant-privileges&#34;&gt;How to Grant Privileges to a User&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/user/revoke-privileges&#34;&gt;How to Revoke Privileges from a User&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/user/user-create-role&#34;&gt;How to Create a Role&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/user/grant-privileges&#34;&gt;How to Grant Privileges to a Role&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/user/grant-role&#34;&gt;How to Grant Role to a User&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/user/revoke-role&#34;&gt;How to Revoke Role from a User&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing Databases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/database/ddl-create-database&#34;&gt;How to Create a Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/database/ddl-drop-database&#34;&gt;How to Drop a Database&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing Tables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/table/ddl-create-table&#34;&gt;How to Create a Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/table/ddl-drop-table&#34;&gt;How to Drop a Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/table/ddl-rename-table&#34;&gt;How to Rename a Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/table/ddl-truncate-table&#34;&gt;How to Truncate a Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/table/alter-table-column&#34;&gt;How to Add/Drop Table Column&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing Views&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/view/ddl-create-view&#34;&gt;How to Create a View&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/view/ddl-drop-view&#34;&gt;How to Drop a View&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/view/ddl-alter-view&#34;&gt;How to Alter a View&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing User-Defined Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/udf/ddl-create-function&#34;&gt;How to Create a User-Defined Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/udf/ddl-drop-function&#34;&gt;How to Drop a User-Defined Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/sql-commands/ddl/udf/ddl-alter-function&#34;&gt;How to Alter a User-Defined Function&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backup &amp;amp; Restore&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/deploy/metasrv/metasrv-backup-restore&#34;&gt;How to Back Up Meta Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/deploy/backup-restore/backup-and-restore-schema&#34;&gt;How to Back Up Databases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Use Cases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/use-cases/analyze-nginx-logs-with-databend-and-vector&#34;&gt;Analyzing Nginx Access Logs With Databend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/use-cases/analyze-user-retention-with-databend&#34;&gt;User Retention Analysis With Databend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/use-cases/analyze-funnel-with-databend&#34;&gt;Conversion Funnel Analysis With Databend&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/blog/2022/08/08/benchmark-tpc-h&#34;&gt;How to Benchmark Databend using TPC-H&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Databend is an open source project, you can help with ideas, code, or documentation, we appreciate any efforts that help us to make the project better! Once the code is merged, your name will be stored in the &lt;strong&gt;system.contributors&lt;/strong&gt; table forever.&lt;/p&gt; &#xA;&lt;p&gt;To get started with contributing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/contributing/building-from-source&#34;&gt;Building Databend From Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://databend.rs/doc/contributing/good-pr&#34;&gt;The First Good Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;For general help in using Databend, please refer to the official documentation. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.databend.rs/join-slack&#34;&gt;Slack&lt;/a&gt; (For live discussion with the Community)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend&#34;&gt;GitHub&lt;/a&gt; (Feature/Bug reports, Contributions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/DatabendLabs&#34;&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.databend.rs/i-m-feeling-lucky&#34;&gt;I&#39;m feeling lucky&lt;/a&gt; (Pick up a good first issue now!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend/issues/9604&#34;&gt;Roadmap v1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend/issues/7052&#34;&gt;Roadmap v0.9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend/issues/9448&#34;&gt;Roadmap 2023&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Databend is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/datafuselabs/databend/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Databend is inspired by &lt;a href=&#34;https://github.com/clickhouse/clickhouse&#34;&gt;ClickHouse&lt;/a&gt; and &lt;a href=&#34;https://docs.snowflake.com/en/user-guide/intro-key-concepts.html#snowflake-architecture&#34;&gt;Snowflake&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Databend&#39;s computing model is based on &lt;a href=&#34;https://github.com/jorgecarleitao/arrow2&#34;&gt;Arrow2&lt;/a&gt;, Arrow2 is a faster and safer implementation of the Apache Arrow Columnar Format.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://databend.rs&#34;&gt;documentation website&lt;/a&gt; is hosted by &lt;a href=&#34;https://vercel.com/?utm_source=databend&amp;amp;utm_campaign=oss&#34;&gt;Vercel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://mergify.com/&#34;&gt;Mergify&lt;/a&gt; for sponsoring advanced features like Batch Merge.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>