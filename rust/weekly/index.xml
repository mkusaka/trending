<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-12T01:43:32Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bottlerocket-os/bottlerocket</title>
    <updated>2024-05-12T01:43:32Z</updated>
    <id>tag:github.com,2024-05-12:/bottlerocket-os/bottlerocket</id>
    <link href="https://github.com/bottlerocket-os/bottlerocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An operating system designed for hosting containers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bottlerocket OS&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to Bottlerocket!&lt;/p&gt; &#xA;&lt;p&gt;Bottlerocket is a free and open-source Linux-based operating system meant for hosting containers.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about Bottlerocket, visit the &lt;a href=&#34;https://bottlerocket.dev/&#34;&gt;official Bottlerocket website and documentation&lt;/a&gt;. Otherwise, if you‚Äôre ready to jump right in, read one of our setup guides for running Bottlerocket in &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-EKS.md&#34;&gt;Amazon EKS&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-ECS.md&#34;&gt;Amazon ECS&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-VMWARE.md&#34;&gt;VMware&lt;/a&gt;. If you&#39;re interested in running Bottlerocket on bare metal servers, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/PROVISIONING-METAL.md&#34;&gt;provisioning guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Bottlerocket focuses on security and maintainability, providing a reliable, consistent, and safe platform for container-based workloads. This is a reflection of what we&#39;ve learned building operating systems and services at Amazon. You can read more about what drives us in &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/CHARTER.md&#34;&gt;our charter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The base operating system has just what you need to run containers reliably, and is built with standard open-source components. Bottlerocket-specific additions focus on reliable updates and on the API. Instead of making configuration changes manually, you can change settings with an API call, and these changes are automatically migrated through updates.&lt;/p&gt; &#xA;&lt;p&gt;Some notable features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#api&#34;&gt;API access&lt;/a&gt; for configuring your system, with secure out-of-band &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#exploration&#34;&gt;access methods&lt;/a&gt; when you need them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#updates&#34;&gt;Updates&lt;/a&gt; based on partition flips, for fast and reliable system updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#settings&#34;&gt;Modeled configuration&lt;/a&gt; that&#39;s automatically migrated through updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#security&#34;&gt;Security&lt;/a&gt; as a top priority.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Participate in the Community&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to take part in the Bottlerocket community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.meetup.com/bottlerocket-community/&#34;&gt;Join us on Meetup&lt;/a&gt; to hear about the latest Bottlerocket (virtual/in-person) events and community meetings. Community meetings are typically every other week.&lt;/p&gt; &lt;p&gt;Details can be found under the &lt;a href=&#34;https://www.meetup.com/bottlerocket-community/events/&#34;&gt;Events section on Meetup&lt;/a&gt;, and you will receive email notifications if you become a member of the Meetup group. (It&#39;s free to join!)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket/discussions&#34;&gt;Start or join a discussion&lt;/a&gt; if you have questions about Bottlerocket.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re interested in contributing, thank you! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/CONTRIBUTING.md&#34;&gt;contributor&#39;s guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;p&gt;If you find a security issue, please &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket/security/policy&#34;&gt;contact our security team&lt;/a&gt; rather than opening an issue.&lt;/p&gt; &#xA;&lt;p&gt;We use GitHub issues to track other bug reports and feature requests. You can look at &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket/issues&#34;&gt;existing issues&lt;/a&gt; to see whether your concern is already known.&lt;/p&gt; &#xA;&lt;p&gt;If not, you can select from a few templates and get some guidance on the type of information that would be most helpful. &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket/issues/new/choose&#34;&gt;Contact us with a new issue here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t have other communication channels set up quite yet, but don&#39;t worry about making an issue or a discussion thread! You can let us know about things that seem difficult, or even ways you might like to help.&lt;/p&gt; &#xA;&lt;h2&gt;Variants&lt;/h2&gt; &#xA;&lt;p&gt;To start, we&#39;re focusing on the use of Bottlerocket as a host OS in AWS EKS Kubernetes clusters and Amazon ECS clusters. We‚Äôre excited to get early feedback and to continue working on more use cases!&lt;/p&gt; &#xA;&lt;p&gt;Bottlerocket is architected such that different cloud environments and container orchestrators can be supported in the future. A build of Bottlerocket that supports different features or integration characteristics is known as a &#39;variant&#39;. The artifacts of a build will include the architecture and variant name. For example, an &lt;code&gt;x86_64&lt;/code&gt; build of the &lt;code&gt;aws-k8s-1.24&lt;/code&gt; variant will produce an image named &lt;code&gt;bottlerocket-aws-k8s-1.24-x86_64-&amp;lt;version&amp;gt;-&amp;lt;commit&amp;gt;.img&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following variants support EKS, as described above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.23&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.24&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.25&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.26&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.27&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.28&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.29&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.23-nvidia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.24-nvidia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.25-nvidia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.26-nvidia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.27-nvidia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.28-nvidia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-k8s-1.29-nvidia&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following variants support ECS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-ecs-1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-ecs-1-nvidia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-ecs-2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aws-ecs-2-nvidia&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have variants that are designed to be Kubernetes worker nodes in VMware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vmware-k8s-1.26&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vmware-k8s-1.27&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vmware-k8s-1.28&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vmware-k8s-1.29&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following variants are designed to be Kubernetes worker nodes on bare metal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;metal-k8s-1.26&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;metal-k8s-1.27&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;metal-k8s-1.28&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;metal-k8s-1.29&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following variants are no longer supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Kubernetes variants using Kubernetes 1.22 and earlier&lt;/li&gt; &#xA; &lt;li&gt;Bare metal and VMware variants using Kubernetes 1.25 and earlier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend users replace nodes running these variants with the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/variants/&#34;&gt;latest variant compatible with their cluster&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architectures&lt;/h2&gt; &#xA;&lt;p&gt;Our supported architectures include &lt;code&gt;x86_64&lt;/code&gt; and &lt;code&gt;aarch64&lt;/code&gt; (written as &lt;code&gt;arm64&lt;/code&gt; in some contexts).&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;üö∂&lt;/span&gt; &lt;span&gt;üèÉ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bottlerocket is best used with a container orchestrator. To get started with Kubernetes in Amazon EKS, please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-EKS.md&#34;&gt;QUICKSTART-EKS&lt;/a&gt;. To get started with Kubernetes in VMware, please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-VMWARE.md&#34;&gt;QUICKSTART-VMWARE&lt;/a&gt;. To get started with Amazon ECS, please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-ECS.md&#34;&gt;QUICKSTART-ECS&lt;/a&gt;. These guides describe:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;how to set up a cluster with the orchestrator, so your Bottlerocket instance can run containers&lt;/li&gt; &#xA; &lt;li&gt;how to launch a Bottlerocket instance in EC2 or VMware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To see how to provision Bottlerocket on bare metal, see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/PROVISIONING-METAL.md&#34;&gt;PROVISIONING-METAL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build your own Bottlerocket images, please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/BUILDING.md&#34;&gt;BUILDING&lt;/a&gt;. It describes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;how to build an image&lt;/li&gt; &#xA; &lt;li&gt;how to register an EC2 AMI from an image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To publish your built Bottlerocket images, please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/PUBLISHING.md&#34;&gt;PUBLISHING&lt;/a&gt;. It describes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;how to make TUF repos including your image&lt;/li&gt; &#xA; &lt;li&gt;how to copy your AMI across regions&lt;/li&gt; &#xA; &lt;li&gt;how to mark your AMIs public or grant access to specific accounts&lt;/li&gt; &#xA; &lt;li&gt;how to make your AMIs discoverable using &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html&#34;&gt;SSM parameters&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exploration&lt;/h2&gt; &#xA;&lt;p&gt;To improve security, there&#39;s no SSH server in a Bottlerocket image, and not even a shell.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t panic!&lt;/p&gt; &#xA;&lt;p&gt;There are a couple out-of-band access methods you can use to explore Bottlerocket like you would a typical Linux system. Either option will give you a shell within Bottlerocket. From there, you can &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#settings&#34;&gt;change settings&lt;/a&gt;, manually &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#updates&#34;&gt;update Bottlerocket&lt;/a&gt;, debug problems, and generally explore.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These methods require that your instance has permission to access the ECR repository where these containers live; the appropriate policy to add to your instance&#39;s IAM role is &lt;code&gt;AmazonEC2ContainerRegistryReadOnly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Control container&lt;/h3&gt; &#xA;&lt;p&gt;Bottlerocket has a &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-control-container&#34;&gt;&#34;control&#34; container&lt;/a&gt;, enabled by default, that runs outside of the orchestrator in a separate instance of containerd. This container runs the &lt;a href=&#34;https://github.com/aws/amazon-ssm-agent&#34;&gt;AWS SSM agent&lt;/a&gt; that lets you run commands, or start shell sessions, on Bottlerocket instances in EC2. (You can easily replace this control container with your own just by changing the URI; see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#settings&#34;&gt;Settings&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;In AWS, you need to give your instance the SSM role for this to work; see the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-EKS.md#enabling-ssm&#34;&gt;setup guide&lt;/a&gt;. Outside of AWS, you can use &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html&#34;&gt;AWS Systems Manager for hybrid environments&lt;/a&gt;. There&#39;s more detail about hybrid environments in the &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-control-container/#connecting-to-aws-systems-manager-ssm&#34;&gt;control container documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once the instance is started, you can start a session:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to AWS SSM&#39;s &lt;a href=&#34;https://console.aws.amazon.com/systems-manager/session-manager/sessions&#34;&gt;Session Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Start session&#34; and choose your Bottlerocket instance&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Start session&#34; again to get a shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you prefer a command-line tool, you can start a session with a recent &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt; and the &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html&#34;&gt;session-manager-plugin&lt;/a&gt;. Then you&#39;d be able to start a session using only your instance ID, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;aws ssm start-session --target INSTANCE_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-control-container&#34;&gt;default control container&lt;/a&gt;, you can make &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#api&#34;&gt;API calls&lt;/a&gt; to configure and manage your Bottlerocket host. To do even more, read the next section about the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#admin-container&#34;&gt;admin container&lt;/a&gt;. You can access the admin container from the control container like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;enter-admin-container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Admin container&lt;/h3&gt; &#xA;&lt;p&gt;Bottlerocket has an &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-admin-container&#34;&gt;administrative container&lt;/a&gt;, disabled by default, that runs outside of the orchestrator in a separate instance of containerd. This container has an SSH server that lets you log in as &lt;code&gt;ec2-user&lt;/code&gt; using your EC2-registered SSH key. Outside of AWS, you can &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-admin-container#authenticating-with-the-admin-container&#34;&gt;pass in your own SSH keys&lt;/a&gt;. (You can easily replace this admin container with your own just by changing the URI; see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#settings&#34;&gt;Settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable the container, you can change the setting in user data when starting Bottlerocket, for example EC2 instance user data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[settings.host-containers.admin]&#xA;enabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Bottlerocket is already running, you can enable the admin container from the default &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#control-container&#34;&gt;control container&lt;/a&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;enable-admin-container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can start an interactive session immediately like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;enter-admin-container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using a custom control container, or want to make the API calls directly, you can enable the admin container like this instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient set host-containers.admin.enabled=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve enabled the admin container, you can either access it through SSH or execute commands from the control container like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient exec admin bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;re in the admin container, you can run &lt;code&gt;sheltie&lt;/code&gt; to get a full root shell in the Bottlerocket host. Be careful; while you can inspect and change even more as root, Bottlerocket&#39;s filesystem and dm-verity setup will prevent most changes from persisting over a restart - see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#security&#34;&gt;Security&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;Rather than a package manager that updates individual pieces of software, Bottlerocket downloads a full filesystem image and reboots into it. It can automatically roll back if boot failures occur, and workload failures can trigger manual rollbacks.&lt;/p&gt; &#xA;&lt;p&gt;The update process uses images secured by &lt;a href=&#34;https://theupdateframework.github.io/&#34;&gt;TUF&lt;/a&gt;. For more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/updater/&#34;&gt;update system documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Update methods&lt;/h3&gt; &#xA;&lt;p&gt;There are several ways of updating your Bottlerocket hosts. We provide tools for automatically updating hosts, as well as an API for direct control of updates.&lt;/p&gt; &#xA;&lt;h4&gt;Automated updates&lt;/h4&gt; &#xA;&lt;p&gt;For EKS variants of Bottlerocket, we recommend using the &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-update-operator&#34;&gt;Bottlerocket update operator&lt;/a&gt; for automated updates.&lt;/p&gt; &#xA;&lt;p&gt;For the ECS variant of Bottlerocket, we recommend using the &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-ecs-updater/&#34;&gt;Bottlerocket ECS updater&lt;/a&gt; for automated updates.&lt;/p&gt; &#xA;&lt;h4&gt;Update API&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#api&#34;&gt;Bottlerocket API&lt;/a&gt; includes methods for checking and starting system updates. You can read more about the update APIs in our &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/updater/README.md#update-api&#34;&gt;update system documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;apiclient knows how to handle those update APIs for you, and you can run it from the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#control-container&#34;&gt;control&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#admin-container&#34;&gt;admin&lt;/a&gt; containers.&lt;/p&gt; &#xA;&lt;p&gt;To see what updates are available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient update check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an update is available, it will show up in the &lt;code&gt;chosen_update&lt;/code&gt; field. The &lt;code&gt;available_updates&lt;/code&gt; field will show the full list of available versions, including older versions, because Bottlerocket supports safely rolling back.&lt;/p&gt; &#xA;&lt;p&gt;To apply the latest update:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient update apply&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next time you reboot, you&#39;ll start up in the new version, and system configuration will be automatically &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/migration/&#34;&gt;migrated&lt;/a&gt;. To reboot right away:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re confident about updating, the &lt;code&gt;apiclient update apply&lt;/code&gt; command has &lt;code&gt;--check&lt;/code&gt; and &lt;code&gt;--reboot&lt;/code&gt; flags to combine the above actions, so you can accomplish all of the above steps like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient update apply --check --reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/apiclient/&#34;&gt;apiclient documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Update rollback&lt;/h3&gt; &#xA;&lt;p&gt;The system will automatically roll back if it&#39;s unable to boot. If the update is not functional for a given container workload, you can do a manual rollback:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;signpost rollback-to-inactive&#xA;reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This doesn&#39;t require any external communication, so it&#39;s quicker than &lt;code&gt;apiclient&lt;/code&gt;, and it&#39;s made to be as reliable as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;Here we&#39;ll describe the settings you can configure on your Bottlerocket instance, and how to do it.&lt;/p&gt; &#xA;&lt;p&gt;(API endpoints are defined in our &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/openapi.yaml&#34;&gt;OpenAPI spec&lt;/a&gt; if you want more detail.)&lt;/p&gt; &#xA;&lt;h3&gt;Interacting with settings&lt;/h3&gt; &#xA;&lt;h4&gt;Using the API client&lt;/h4&gt; &#xA;&lt;p&gt;You can see the current settings with an API request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient get settings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return all of the current settings in JSON format. For example, here&#39;s an abbreviated response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;motd&#34;: &#34;...&#34;, {&#34;kubernetes&#34;: {}}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change settings like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apiclient set motd=&#34;hi there&#34; kubernetes.node-labels.environment=test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a JSON input mode to help change many related settings at once, and a &#34;raw&#34; mode if you want more control over how the settings are committed and applied to the system. See the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/apiclient/&#34;&gt;apiclient README&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;Using user data&lt;/h4&gt; &#xA;&lt;p&gt;If you know what settings you want to change when you start your Bottlerocket instance, you can send them in the user data.&lt;/p&gt; &#xA;&lt;p&gt;In user data, we structure the settings in TOML form to make things a bit simpler. Here&#39;s the user data to change the message of the day setting, as we did in the last section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[settings]&#xA;motd = &#34;my own value!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your user data is over the size limit of the platform (e.g. 16KiB for EC2) you can compress the contents with gzip. (With &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;aws-cli&lt;/a&gt;, you can use &lt;code&gt;--user-data fileb:///path/to/gz-file&lt;/code&gt; to pass binary data.)&lt;/p&gt; &#xA;&lt;h3&gt;Description of settings&lt;/h3&gt; &#xA;&lt;p&gt;Here we&#39;ll describe each setting you can change.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can see the default values (for any settings that are not generated at runtime) by looking in the &lt;code&gt;defaults.d&lt;/code&gt; directory for a variant, for example &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/models/src/aws-ecs-2/defaults.d/&#34;&gt;aws-ecs-2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re sending settings to the API, or receiving settings from the API, they&#39;re in a structured JSON format. This allows modification of any number of keys at once. It also lets us ensure that they fit the definition of the Bottlerocket data model - requests with invalid settings won&#39;t even parse correctly, helping ensure safety.&lt;/p&gt; &#xA;&lt;p&gt;Here, however, we&#39;ll use the shortcut &#34;dotted key&#34; syntax for referring to keys. This is used in some API endpoints with less-structured requests or responses. It&#39;s also more compact for our needs here.&lt;/p&gt; &#xA;&lt;p&gt;In this format, &#34;settings.kubernetes.cluster-name&#34; refers to the same key as in the JSON &lt;code&gt;{&#34;settings&#34;: {&#34;kubernetes&#34;: {&#34;cluster-name&#34;: &#34;value&#34;}}}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/&#34;&gt;bottlerocket.dev&lt;/a&gt; now contains a complete, versioned setting reference. This documents retains the headings below for existing link and bookmark compatability. Please update your bookmarks and check out &lt;a href=&#34;https://bottlerocket.dev/&#34;&gt;bottlerocket.dev&lt;/a&gt; for future updates to the setting reference.&lt;/p&gt; &#xA;&lt;h4&gt;Top-level settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/motd/&#34;&gt;&lt;code&gt;settings.motd&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Kubernetes settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/kubernetes/&#34;&gt;&lt;code&gt;settings.kubernetes.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Amazon ECS settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/ecs/&#34;&gt;&lt;code&gt;settings.ecs.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;CloudFormation signal helper settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/cloudformation/&#34;&gt;&lt;code&gt;settings.cloudformation.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Auto Scaling group settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/autoscaling/&#34;&gt;&lt;code&gt;settings.autoscaling.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;OCI Hooks settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/oci-hooks/&#34;&gt;&lt;code&gt;settings.oci-hooks.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;OCI Defaults settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/oci-defaults/&#34;&gt;&lt;code&gt;settings.oci-defaults.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OCI Defaults: Capabilities&lt;/h5&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/oci-defaults/&#34;&gt;&#34;Capabilities Settings&#34; section in the &lt;code&gt;settings.oci-defaults.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OCI Defaults: Resource Limits&lt;/h5&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/oci-defaults/&#34;&gt;&#34;Resource Limits Settings&#34; section in the &lt;code&gt;settings.oci-defaults.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Container image registry settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/container-registry/&#34;&gt;&lt;code&gt;settings.container-registry.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Container runtime settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/container-runtime/&#34;&gt;&lt;code&gt;settings.container-runtime.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Updates settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/updates/&#34;&gt;&lt;code&gt;settings.updates.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Network settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/network/&#34;&gt;&lt;code&gt;settings.network.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Proxy settings&lt;/h5&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/network/&#34;&gt;&#34;Proxy Settings&#34; section in the &lt;code&gt;settings.networks.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Metrics settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/metrics/&#34;&gt;&lt;code&gt;settings.metrics.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Time settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/ntp/&#34;&gt;&lt;code&gt;settings.ntp.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Kernel settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/kernel/&#34;&gt;&lt;code&gt;settings.kernel.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Boot-related settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/boot/&#34;&gt;&lt;code&gt;settings.boot.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Custom CA certificates settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/pki/&#34;&gt;&lt;code&gt;settings.pki.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Host containers settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/host-containers/&#34;&gt;&lt;code&gt;settings.host-containers.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Custom host containers&lt;/h5&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/concepts/host-containers/&#34;&gt;Host Containers documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Bootstrap containers settings&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/bootstrap-containers/&#34;&gt;&lt;code&gt;settings.bootstrap-containers.*&lt;/code&gt; reference&lt;/a&gt; as well as the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/concepts/bootstrap-containers/&#34;&gt;Bootstrap Containers documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Mount propagations in bootstrap and superpowered containers&lt;/h5&gt; &#xA;&lt;p&gt;Both bootstrap and superpowered host containers are configured with the &lt;code&gt;/.bottlerocket/rootfs/mnt&lt;/code&gt; bind mount that points to &lt;code&gt;/mnt&lt;/code&gt; in the host, which itself is a bind mount of &lt;code&gt;/local/mnt&lt;/code&gt;. This bind mount is set up with shared propagations, so any new mount point created underneath &lt;code&gt;/.bottlerocket/rootfs/mnt&lt;/code&gt; in any bootstrap or superpowered host container will propagate across mount namespaces. You can use this feature to configure ephemeral disks attached to your hosts that you may want to use on your workloads.&lt;/p&gt; &#xA;&lt;h4&gt;Platform-specific settings&lt;/h4&gt; &#xA;&lt;p&gt;Platform-specific settings are automatically set at boot time by &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/early-boot-config&#34;&gt;early-boot-config&lt;/a&gt; based on metadata available on the running platform. They can be overridden for testing purposes in &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#interacting-with-settings&#34;&gt;the same way as other settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;AWS-specific settings&lt;/h5&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://bottlerocket.dev/en/os/latest/#/api/settings/aws/&#34;&gt;&lt;code&gt;settings.aws.*&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Logs&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;logdog&lt;/code&gt; through the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#admin-container&#34;&gt;admin container&lt;/a&gt; to obtain an archive of log files from your Bottlerocket host. SSH to the Bottlerocket host or &lt;code&gt;apiclient exec admin bash&lt;/code&gt; to access the admin container, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo sheltie&#xA;logdog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will write an archive of the logs to &lt;code&gt;/var/log/support/bottlerocket-logs.tar.gz&lt;/code&gt;. This archive is accessible from host containers at &lt;code&gt;/.bottlerocket/support&lt;/code&gt;. You can use SSH to retrieve the file. Once you have exited from the Bottlerocket host, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ssh -i YOUR_KEY_FILE \&#xA;  ec2-user@YOUR_HOST \&#xA;  &#34;cat /.bottlerocket/support/bottlerocket-logs.tar.gz&#34; &amp;gt; bottlerocket-logs.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(If your instance isn&#39;t accessible through SSH, you can use &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started-enable-ssh-connections.html&#34;&gt;SSH over SSM&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;For a list of what is collected, see the logdog &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/logdog/src/log_request.rs&#34;&gt;command list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Kdump Support&lt;/h3&gt; &#xA;&lt;p&gt;Bottlerocket provides support to collect kernel crash dumps whenever the system kernel panics. Once this happens, both the dmesg log and vmcore dump are stored at &lt;code&gt;/var/log/kdump&lt;/code&gt;, and the system reboots.&lt;/p&gt; &#xA;&lt;p&gt;There are a few important caveats about the provided kdump support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently, only vmware variants have kdump support enabled&lt;/li&gt; &#xA; &lt;li&gt;The system kernel will reserve 256MB for the crash kernel, only when the host has at least 2GB of memory; the reserved space won&#39;t be available for processes running in the host&lt;/li&gt; &#xA; &lt;li&gt;The crash kernel will only be loaded when the &lt;code&gt;crashkernel&lt;/code&gt; parameter is present in the kernel&#39;s cmdline and if there is memory reserved for it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NVIDIA GPUs Support&lt;/h3&gt; &#xA;&lt;p&gt;Bottlerocket&#39;s &lt;code&gt;nvidia&lt;/code&gt; variants include the required packages and configurations to leverage NVIDIA GPUs. Currently, the following NVIDIA driver versions are supported in Bottlerocket:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;470.X&lt;/li&gt; &#xA; &lt;li&gt;515.X&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The official AMIs for these variants can be used with EC2 GPU-equipped instance types such as: &lt;code&gt;p2&lt;/code&gt;, &lt;code&gt;p3&lt;/code&gt;, &lt;code&gt;p4&lt;/code&gt;, &lt;code&gt;g3&lt;/code&gt;, &lt;code&gt;g4dn&lt;/code&gt;, &lt;code&gt;g5&lt;/code&gt; and &lt;code&gt;g5g&lt;/code&gt;. Note that older instance types, such as &lt;code&gt;p2&lt;/code&gt;, are not supported by NVIDIA driver &lt;code&gt;515.X&lt;/code&gt; and above. You need to make sure you select the appropriate AMI depending on the instance type you are planning to use. Please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-EKS.md#aws-k8s--nvidia-variants&#34;&gt;QUICKSTART-EKS&lt;/a&gt; for further details about Kubernetes variants, and &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/QUICKSTART-ECS.md#aws-ecs--nvidia-variants&#34;&gt;QUICKSTART-ECS&lt;/a&gt; for ECS variants.&lt;/p&gt; &#xA;&lt;h2&gt;Details&lt;/h2&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;üõ°&lt;/span&gt; &lt;span&gt;ü¶Ä&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;To learn more about security features in Bottlerocket, please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/SECURITY_FEATURES.md&#34;&gt;SECURITY FEATURES&lt;/a&gt;. It describes how we use features like &lt;a href=&#34;https://gitlab.com/cryptsetup/cryptsetup/wikis/DMVerity&#34;&gt;dm-verity&lt;/a&gt; and &lt;a href=&#34;https://selinuxproject.org/&#34;&gt;SELinux&lt;/a&gt; to protect the system from security threats.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about security recommendations for Bottlerocket, please see &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/SECURITY_GUIDANCE.md&#34;&gt;SECURITY GUIDANCE&lt;/a&gt;. It documents additional steps you can take to secure the OS, and includes resources such as a &lt;a href=&#34;https://kubernetes.io/docs/concepts/policy/pod-security-policy/&#34;&gt;Pod Security Policy&lt;/a&gt; for your reference.&lt;/p&gt; &#xA;&lt;p&gt;In addition, almost all first-party components are written in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;. Rust eliminates some classes of memory safety issues, and encourages design patterns that help security.&lt;/p&gt; &#xA;&lt;h3&gt;Packaging&lt;/h3&gt; &#xA;&lt;p&gt;Bottlerocket is built from source using a container toolchain. We use RPM package definitions to build and install individual packages into an image. RPM itself is not in the image - it&#39;s just a common and convenient package definition format.&lt;/p&gt; &#xA;&lt;p&gt;We currently package the following major third-party components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux kernel (&lt;a href=&#34;https://en.wikipedia.org/wiki/Linux&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/kernel-5.10/&#34;&gt;5.10 packaging&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/kernel-5.15/&#34;&gt;5.15 packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;glibc (&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/glibc/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Buildroot as build toolchain (&lt;a href=&#34;https://buildroot.org/&#34;&gt;background&lt;/a&gt;, via the &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket-sdk&#34;&gt;SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GRUB, with patches for partition flip updates (&lt;a href=&#34;https://www.gnu.org/software/grub/&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/grub/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;systemd as init (&lt;a href=&#34;https://en.wikipedia.org/wiki/Systemd&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/systemd/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;wicked for networking (&lt;a href=&#34;https://github.com/openSUSE/wicked&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/wicked/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;containerd (&lt;a href=&#34;https://containerd.io/&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/containerd/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes (&lt;a href=&#34;https://kubernetes.io/&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/kubernetes-1.24/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;aws-iam-authenticator (&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-iam-authenticator&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/aws-iam-authenticator/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Amazon ECS agent (&lt;a href=&#34;https://github.com/aws/amazon-ecs-agent&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/ecs-agent/&#34;&gt;packaging&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For further documentation or to see the rest of the packages, see the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/packages/&#34;&gt;packaging directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Updates&lt;/h3&gt; &#xA;&lt;p&gt;The Bottlerocket image has two identical sets of partitions, A and B. When updating Bottlerocket, the partition table is updated to point from set A to set B, or vice versa.&lt;/p&gt; &#xA;&lt;p&gt;We also track successful boots, and if there are failures it will automatically revert back to the prior working partition set.&lt;/p&gt; &#xA;&lt;p&gt;The update process uses images secured by &lt;a href=&#34;https://theupdateframework.github.io/&#34;&gt;TUF&lt;/a&gt;. For more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/updater/&#34;&gt;update system documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;There are two main ways you&#39;d interact with a production Bottlerocket instance. (There are a couple more &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#exploration&#34;&gt;exploration&lt;/a&gt; methods above for test instances.)&lt;/p&gt; &#xA;&lt;p&gt;The first method is through a container orchestrator, for when you want to run or manage containers. This uses the standard channel for your orchestrator, for example a tool like &lt;code&gt;kubectl&lt;/code&gt; for Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;The second method is through the Bottlerocket API, for example when you want to configure the system.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s an HTTP API server that listens on a local Unix-domain socket. Remote access to the API requires an authenticated transport such as SSM&#39;s RunCommand or Session Manager, as described above. For more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/apiserver/&#34;&gt;apiserver documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/apiclient/&#34;&gt;apiclient&lt;/a&gt; can be used to make requests. They&#39;re just HTTP requests, but the API client simplifies making requests with the Unix-domain socket.&lt;/p&gt; &#xA;&lt;p&gt;To make configuration easier, we have &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/early-boot-config/&#34;&gt;early-boot-config&lt;/a&gt;, which can send an API request for you based on instance user data. If you start a virtual machine, like an EC2 instance, it will read TOML-formatted Bottlerocket configuration from user data and send it to the API server. This way, you can configure your Bottlerocket instance without having to make API calls after launch.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#settings&#34;&gt;Settings&lt;/a&gt; above for examples and to understand what you can configure.&lt;/p&gt; &#xA;&lt;p&gt;You can also access host containers through the API using &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/apiclient/README.md#exec-mode&#34;&gt;apiclient exec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The server and client are the user-facing components of the API system, but there are a number of other components that work together to make sure your settings are applied, and that they survive upgrades of Bottlerocket.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/sources/api/&#34;&gt;API system documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Default Volumes&lt;/h3&gt; &#xA;&lt;p&gt;Bottlerocket operates with two default storage volumes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The root device, holds the active and passive &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#updates-1&#34;&gt;partition sets&lt;/a&gt;. It also contains the bootloader, the dm-verity hash tree for verifying the &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/SECURITY_FEATURES.md#immutable-rootfs-backed-by-dm-verity&#34;&gt;immutable root filesystem&lt;/a&gt;, and the data store for the Bottlerocket API.&lt;/li&gt; &#xA; &lt;li&gt;The data device is used as persistent storage for container images, container orchestration, &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#Custom-host-containers&#34;&gt;host-containers&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/#Bootstrap-containers-settings&#34;&gt;bootstrap containers&lt;/a&gt;. The operating system does not typically make changes to this volume during regular updates, though changes to upstream software such as containerd or kubelet could result in changes to their stored data. This device (mounted to &lt;code&gt;/local&lt;/code&gt; on the host) can be used for application storage for orchestrated workloads; however, we recommend using an additional volume if possible for such cases. See &lt;a href=&#34;https://raw.githubusercontent.com/bottlerocket-os/bottlerocket/develop/SECURITY_GUIDANCE.md#limit-access-to-system-mounts&#34;&gt;this section of the Security Guidance documentation&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On boot Bottlerocket will increase the data partition size to use all of the data device. If you increase the size of the device, you can reboot Bottlerocket to extend the data partition. If you need to extend the data partition without rebooting, have a look at this &lt;a href=&#34;https://github.com/bottlerocket-os/bottlerocket/discussions/2011&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>image-rs/image</title>
    <updated>2024-05-12T01:43:32Z</updated>
    <id>tag:github.com,2024-05-12:/image-rs/image</id>
    <link href="https://github.com/image-rs/image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Encoding and decoding images in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Image&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/image&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/image.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/image&#34;&gt;&lt;img src=&#34;https://docs.rs/image/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/image-rs/image/actions&#34;&gt;&lt;img src=&#34;https://github.com/image-rs/image/workflows/Rust%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/image-rs/image?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/image-rs/image.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maintainers: &lt;a href=&#34;https://github.com/HeroicKatora&#34;&gt;@HeroicKatora&lt;/a&gt;, &lt;a href=&#34;https://github.com/fintelia&#34;&gt;@fintelia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/image-rs/organization/raw/master/CONTRIBUTING.md&#34;&gt;How to contribute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;An Image Processing Library&lt;/h2&gt; &#xA;&lt;p&gt;This crate provides basic image processing functions and methods for converting to and from various image formats.&lt;/p&gt; &#xA;&lt;p&gt;All image processing functions provided operate on types that implement the &lt;code&gt;GenericImageView&lt;/code&gt; and &lt;code&gt;GenericImage&lt;/code&gt; traits and return an &lt;code&gt;ImageBuffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;High level API&lt;/h2&gt; &#xA;&lt;p&gt;Load images using [&lt;code&gt;io::Reader&lt;/code&gt;]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;use std::io::Cursor;&#xA;use image::io::Reader as ImageReader;&#xA;&#xA;let img = ImageReader::open(&#34;myimage.png&#34;)?.decode()?;&#xA;let img2 = ImageReader::new(Cursor::new(bytes)).with_guessed_format()?.decode()?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And save them using [&lt;code&gt;save&lt;/code&gt;] or [&lt;code&gt;write_to&lt;/code&gt;] methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;img.save(&#34;empty.jpg&#34;)?;&#xA;&#xA;let mut bytes: Vec&amp;lt;u8&amp;gt; = Vec::new();&#xA;img2.write_to(&amp;amp;mut Cursor::new(&amp;amp;mut bytes), image::ImageFormat::Png)?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Image Formats&lt;/h2&gt; &#xA;&lt;p&gt;With default features enabled, &lt;code&gt;image&lt;/code&gt; provides implementations of many common image format encoders and decoders.&lt;/p&gt; &#xA;&lt;!-- NOTE: Make sure to keep this table in sync with the one in src/lib.rs --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Decoding&lt;/th&gt; &#xA;   &lt;th&gt;Encoding&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AVIF&lt;/td&gt; &#xA;   &lt;td&gt;Yes (8-bit only) *&lt;/td&gt; &#xA;   &lt;td&gt;Yes (lossy only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BMP&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DDS&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Farbfeld&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GIF&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HDR&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ICO&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JPEG&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EXR&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PNG&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PNM&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QOI&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TGA&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TIFF&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WebP&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes (lossless only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;* Requires the &lt;code&gt;avif-native&lt;/code&gt; feature, uses the libdav1d C library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Image Types&lt;/h2&gt; &#xA;&lt;p&gt;This crate provides a number of different types for representing images. Individual pixels within images are indexed with (0,0) at the top left corner.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.rs/image/*/image/struct.ImageBuffer.html&#34;&gt;&lt;code&gt;ImageBuffer&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;An image parameterised by its Pixel type, represented by a width and height and a vector of pixels. It provides direct access to its pixels and implements the &lt;code&gt;GenericImageView&lt;/code&gt; and &lt;code&gt;GenericImage&lt;/code&gt; traits.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.rs/image/*/image/enum.DynamicImage.html&#34;&gt;&lt;code&gt;DynamicImage&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;DynamicImage&lt;/code&gt; is an enumeration over all supported &lt;code&gt;ImageBuffer&amp;lt;P&amp;gt;&lt;/code&gt; types. Its exact image type is determined at runtime. It is the type returned when opening an image. For convenience &lt;code&gt;DynamicImage&lt;/code&gt; reimplements all image processing functions.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;a href=&#34;https://docs.rs/image/*/image/trait.GenericImageView.html&#34;&gt;&lt;code&gt;GenericImageView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/image/*/image/trait.GenericImage.html&#34;&gt;&lt;code&gt;GenericImage&lt;/code&gt;&lt;/a&gt; Traits&lt;/h3&gt; &#xA;&lt;p&gt;Traits that provide methods for inspecting (&lt;code&gt;GenericImageView&lt;/code&gt;) and manipulating (&lt;code&gt;GenericImage&lt;/code&gt;) images, parameterised over the image&#39;s pixel type.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.rs/image/*/image/struct.SubImage.html&#34;&gt;&lt;code&gt;SubImage&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A view into another image, delimited by the coordinates of a rectangle. The coordinates given set the position of the top left corner of the rectangle. This is used to perform image processing functions on a subregion of an image.&lt;/p&gt; &#xA;&lt;h2&gt;The &lt;a href=&#34;https://docs.rs/image/*/image/trait.ImageDecoder.html&#34;&gt;&lt;code&gt;ImageDecoder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/image/*/image/trait.ImageDecoderRect.html&#34;&gt;&lt;code&gt;ImageDecoderRect&lt;/code&gt;&lt;/a&gt; Traits&lt;/h2&gt; &#xA;&lt;p&gt;All image format decoders implement the &lt;code&gt;ImageDecoder&lt;/code&gt; trait which provide basic methods for getting image metadata and decoding images. Some formats additionally provide &lt;code&gt;ImageDecoderRect&lt;/code&gt; implementations which allow for decoding only part of an image at once.&lt;/p&gt; &#xA;&lt;p&gt;The most important methods for decoders are...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;dimensions&lt;/strong&gt;: Return a tuple containing the width and height of the image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;color_type&lt;/strong&gt;: Return the color type of the image data produced by this decoder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;read_image&lt;/strong&gt;: Decode the entire image into a slice of bytes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pixels&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; provides the following pixel types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rgb&lt;/strong&gt;: RGB pixel&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rgba&lt;/strong&gt;: RGB with alpha (RGBA pixel)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Luma&lt;/strong&gt;: Grayscale pixel&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LumaA&lt;/strong&gt;: Grayscale with alpha&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All pixels are parameterised by their component type.&lt;/p&gt; &#xA;&lt;h2&gt;Image Processing Functions&lt;/h2&gt; &#xA;&lt;p&gt;These are the functions defined in the &lt;code&gt;imageops&lt;/code&gt; module. All functions operate on types that implement the &lt;code&gt;GenericImage&lt;/code&gt; trait. Note that some of the functions are very slow in debug mode. Make sure to use release mode if you experience any performance issues.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;blur&lt;/strong&gt;: Performs a Gaussian blur on the supplied image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;brighten&lt;/strong&gt;: Brighten the supplied image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;huerotate&lt;/strong&gt;: Hue rotate the supplied image by degrees.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;contrast&lt;/strong&gt;: Adjust the contrast of the supplied image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;crop&lt;/strong&gt;: Return a mutable view into an image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;filter3x3&lt;/strong&gt;: Perform a 3x3 box filter on the supplied image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;flip_horizontal&lt;/strong&gt;: Flip an image horizontally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;flip_vertical&lt;/strong&gt;: Flip an image vertically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;grayscale&lt;/strong&gt;: Convert the supplied image to grayscale.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;invert&lt;/strong&gt;: Invert each pixel within the supplied image This function operates in place.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;resize&lt;/strong&gt;: Resize the supplied image to the specified dimensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rotate180&lt;/strong&gt;: Rotate an image 180 degrees clockwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rotate270&lt;/strong&gt;: Rotate an image 270 degrees clockwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rotate90&lt;/strong&gt;: Rotate an image 90 degrees clockwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;unsharpen&lt;/strong&gt;: Performs an unsharpen mask on the supplied image.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more options, see the &lt;a href=&#34;https://crates.io/crates/imageproc&#34;&gt;&lt;code&gt;imageproc&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Opening and Saving Images&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; provides the &lt;code&gt;open&lt;/code&gt; function for opening images from a path. The image format is determined from the path&#39;s file extension. An &lt;code&gt;io&lt;/code&gt; module provides a reader which offer some more control.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use image::GenericImageView;&#xA;&#xA;// Use the open function to load an image from a Path.&#xA;// `open` returns a `DynamicImage` on success.&#xA;let img = image::open(&#34;tests/images/jpg/progressive/cat.jpg&#34;).unwrap();&#xA;&#xA;// The dimensions method returns the images width and height.&#xA;println!(&#34;dimensions {:?}&#34;, img.dimensions());&#xA;&#xA;// The color method returns the image&#39;s `ColorType`.&#xA;println!(&#34;{:?}&#34;, img.color());&#xA;&#xA;// Write the contents of this image to the Writer in PNG format.&#xA;img.save(&#34;test.png&#34;).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating Fractals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;//! An example of generating julia fractals.&#xA;let imgx = 800;&#xA;let imgy = 800;&#xA;&#xA;let scalex = 3.0 / imgx as f32;&#xA;let scaley = 3.0 / imgy as f32;&#xA;&#xA;// Create a new ImgBuf with width: imgx and height: imgy&#xA;let mut imgbuf = image::ImageBuffer::new(imgx, imgy);&#xA;&#xA;// Iterate over the coordinates and pixels of the image&#xA;for (x, y, pixel) in imgbuf.enumerate_pixels_mut() {&#xA;    let r = (0.3 * x as f32) as u8;&#xA;    let b = (0.3 * y as f32) as u8;&#xA;    *pixel = image::Rgb([r, 0, b]);&#xA;}&#xA;&#xA;// A redundant loop to demonstrate reading image data&#xA;for x in 0..imgx {&#xA;    for y in 0..imgy {&#xA;        let cx = y as f32 * scalex - 1.5;&#xA;        let cy = x as f32 * scaley - 1.5;&#xA;&#xA;        let c = num_complex::Complex::new(-0.4, 0.6);&#xA;        let mut z = num_complex::Complex::new(cx, cy);&#xA;&#xA;        let mut i = 0;&#xA;        while i &amp;lt; 255 &amp;amp;&amp;amp; z.norm() &amp;lt;= 2.0 {&#xA;            z = z * z + c;&#xA;            i += 1;&#xA;        }&#xA;&#xA;        let pixel = imgbuf.get_pixel_mut(x, y);&#xA;        let image::Rgb(data) = *pixel;&#xA;        *pixel = image::Rgb([data[0], i as u8, data[2]]);&#xA;    }&#xA;}&#xA;&#xA;// Save the image as ‚Äúfractal.png‚Äù, the format is deduced from the path&#xA;imgbuf.save(&#34;fractal.png&#34;).unwrap();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/image-rs/image/main/examples/fractal.png&#34; alt=&#34;A Julia Fractal, c: -0.4 + 0.6i&#34; width=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Writing raw buffers&lt;/h3&gt; &#xA;&lt;p&gt;If the high level interface is not needed because the image was obtained by other means, &lt;code&gt;image&lt;/code&gt; provides the function &lt;code&gt;save_buffer&lt;/code&gt; to save a buffer to a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;let buffer: &amp;amp;[u8] = unimplemented!(); // Generate the image data&#xA;&#xA;// Save the buffer as &#34;image.png&#34;&#xA;image::save_buffer(&#34;image.png&#34;, buffer, 800, 600, image::ExtendedColorType::Rgb8).unwrap()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>linebender/xilem</title>
    <updated>2024-05-12T01:43:32Z</updated>
    <id>tag:github.com,2024-05-12:/linebender/xilem</id>
    <link href="https://github.com/linebender/xilem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An experimental Rust native UI framework&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Xilem&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;An experimental Rust architecture for reactive UI&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://xi.zulipchat.com/#narrow/stream/354396-xilem&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Xi%20Zulip-%23xilem-blue?logo=Zulip&#34; alt=&#34;Xi Zulip&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/linebender/xilem&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/linebender/xilem/status.svg?sanitize=true&#34; alt=&#34;dependency status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/linebender/xilem/main/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true&#34; alt=&#34;Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linebender/xilem/actions&#34;&gt;&lt;img src=&#34;https://github.com/linebender/xilem/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/xilem&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/xilem.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/xilem&#34;&gt;&lt;img src=&#34;https://docs.rs/xilem/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This repo contains an experimental architecture, implemented with a toy UI. At a very high level, it combines ideas from Flutter, SwiftUI, and Elm. Like all of these, it uses lightweight view objects, diffing them to provide minimal updates to a retained UI. Like SwiftUI, it is strongly typed.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xi.zulipchat.com/#narrow/stream/354396-xilem&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Xi%20Zulip-%23xilem-blue?logo=Zulip&#34; alt=&#34;Xi Zulip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discussion of Xilem development happens in the &lt;a href=&#34;https://xi.zulipchat.com/&#34;&gt;Xi Zulip&lt;/a&gt;, specifically the &lt;a href=&#34;https://xi.zulipchat.com/#narrow/stream/354396-xilem&#34;&gt;#xilem stream&lt;/a&gt;. All public content can be read without logging in&lt;/p&gt; &#xA;&lt;h2&gt;Overall program flow&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This README is a bit out of date. To understand more of what&#39;s going on, please read the blog post, &lt;a href=&#34;https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html&#34;&gt;Xilem: an architecture for UI in Rust&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Like Elm, the app logic contains &lt;em&gt;centralized state.&lt;/em&gt; On each cycle (meaning, roughly, on each high-level UI interaction such as a button click), the framework calls a closure, giving it mutable access to the app state, and the return value is a &lt;em&gt;view tree.&lt;/em&gt; This view tree is fairly short-lived; it is used to render the UI, possibly dispatch some events, and be used as a reference for &lt;em&gt;diffing&lt;/em&gt; by the next cycle, at which point it is dropped.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll use the standard counter example. Here the state is a single integer, and the view tree is a column containing two buttons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn app_logic(data: &amp;amp;mut u32) -&amp;gt; impl View&amp;lt;u32, (), Element = impl Widget&amp;gt; {&#xA;    Column::new((&#xA;        Button::new(format!(&#34;count: {}&#34;, data), |data| *data += 1),&#xA;        Button::new(&#34;reset&#34;, |data| *data = 0),&#xA;    ))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are all just vanilla data structures. The next step is diffing or reconciling against a previous version, now a standard technique. The result is an &lt;em&gt;element tree.&lt;/em&gt; Each node type in the view tree has a corresponding element as an associated type. The &lt;code&gt;build&lt;/code&gt; method on a view node creates the element, and the &lt;code&gt;rebuild&lt;/code&gt; method diffs against the previous version (for example, if the string changes) and updates the element. There&#39;s also an associated state tree, not actually needed in this simple example, but would be used for memoization.&lt;/p&gt; &#xA;&lt;p&gt;The closures are the interesting part. When they&#39;re run, they take a mutable reference to the app data.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;A major goal is to support React-like components, where modules that build UI for some fragment of the overall app state are composed together.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct AppData {&#xA;    count: u32,&#xA;}&#xA;&#xA;fn count_button(count: u32) -&amp;gt; impl View&amp;lt;u32, (), Element = impl Widget&amp;gt; {&#xA;    Button::new(format!(&#34;count: {}&#34;, count), |data| *data += 1)&#xA;}&#xA;&#xA;fn app_logic(data: &amp;amp;mut AppData) -&amp;gt; impl View&amp;lt;AppData, (), Element = impl Widget&amp;gt; {&#xA;    Adapt::new(|data: &amp;amp;mut AppData, thunk| thunk.call(&amp;amp;mut data.count),&#xA;        count_button(data.count))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adapt node is very similar to a lens (quite familiar to existing Druid users), and is also very similar to the [Html.map] node in Elm. Note that in this case the data presented to the child component to render, and the mutable app state available in callbacks is the same, but that is not necessarily the case.&lt;/p&gt; &#xA;&lt;h2&gt;Memoization&lt;/h2&gt; &#xA;&lt;p&gt;In the simplest case, the app builds the entire view tree, which is diffed against the previous tree, only to find that most of it hasn&#39;t changed.&lt;/p&gt; &#xA;&lt;p&gt;When a subtree is a pure function of some data, as is the case for the button above, it makes sense to &lt;em&gt;memoize.&lt;/em&gt; The data is compared to the previous version, and only when it&#39;s changed is the view tree build. The signature of the memoize node is nearly identical to &lt;a href=&#34;https://guide.elm-lang.org/optimization/lazy.html&#34;&gt;Html.lazy&lt;/a&gt; in Elm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn app_logic(data: &amp;amp;mut AppData) -&amp;gt; impl View&amp;lt;AppData, (), Element = impl Widget&amp;gt; {&#xA;    Memoize::new(data.count, |count| {&#xA;        Button::new(format!(&#34;count: {}&#34;, count), |data: &amp;amp;mut AppData| {&#xA;            data.count += 1&#xA;        })&#xA;    }),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current code uses a &lt;code&gt;PartialEq&lt;/code&gt; bound, but in practice I think it might be much more useful to use pointer equality on &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The combination of memoization with pointer equality and an adapt node that calls &lt;a href=&#34;https://doc.rust-lang.org/std/rc/struct.Rc.html#method.make_mut&#34;&gt;Rc::make_mut&lt;/a&gt; on the parent type is actually a powerful form of change tracking, similar in scope to Adapton, self-adjusting computation, or the types of binding objects used in SwiftUI. If a piece of data is rendered in two different places, it automatically propagates the change to both of those, without having to do any explicit management of the dependency graph.&lt;/p&gt; &#xA;&lt;p&gt;I anticipate it will also be possible to do dirty tracking manually - the app logic can set a dirty flag when a subtree needs re-rendering.&lt;/p&gt; &#xA;&lt;h2&gt;Optional type erasure&lt;/h2&gt; &#xA;&lt;p&gt;By default, view nodes are strongly typed. The type of a container includes the types of its children (through the &lt;code&gt;ViewTuple&lt;/code&gt; trait), so for a large tree the type can become quite large. In addition, such types don&#39;t make for easy dynamic reconfiguration of the UI. SwiftUI has exactly this issue, and provides &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/anyview&#34;&gt;AnyView&lt;/a&gt; as the solution. Ours is more or less identical.&lt;/p&gt; &#xA;&lt;p&gt;The type erasure of View nodes is not an easy trick, as the trait has two associated types and the &lt;code&gt;rebuild&lt;/code&gt; method takes the previous view as a &lt;code&gt;&amp;amp;Self&lt;/code&gt; typed parameter. Nonetheless, it is possible. (As far as I know, Olivier Faure was the first to demonstrate this technique, in &lt;a href=&#34;https://github.com/PoignardAzur/panoramix&#34;&gt;Panoramix&lt;/a&gt;, but I&#39;m happy to be further enlightened)&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Linux and BSD&lt;/h3&gt; &#xA;&lt;p&gt;You need to have installed &lt;code&gt;pkg-config&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt;, and the development packages of &lt;code&gt;wayland&lt;/code&gt;, &lt;code&gt;libxkbcommon&lt;/code&gt;, &lt;code&gt;libxcb&lt;/code&gt;, and &lt;code&gt;vulkan-loader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most distributions have &lt;code&gt;pkg-config&lt;/code&gt; installed by default. To install the remaining packages on Fedora, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install clang wayland-devel libxkbcommon-x11-devel libxcb-devel vulkan-loader-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install them on Debian or Ubuntu, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install pkg-config clang libwayland-dev libxkbcommon-x11-dev libvulkan-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/linebender/xilem/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome by pull request. The &lt;a href=&#34;https://www.rust-lang.org/policies/code-of-conduct&#34;&gt;Rust code of conduct&lt;/a&gt; applies.&lt;/p&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>