<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:59:40Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdxcode/rtx</title>
    <updated>2023-03-05T01:59:40Z</updated>
    <id>tag:github.com,2023-03-05:/jdxcode/rtx</id>
    <link href="https://github.com/jdxcode/rtx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Runtime Executor (asdf rust clone)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/jdxcode/rtx&#34;&gt;rtx&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/rtx-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/rtx-cli.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jdxcode/rtx/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jdxcode/rtx&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jdxcode/rtx/actions/workflows/rtx.yml&#34;&gt;&lt;img src=&#34;https://github.com/jdxcode/rtx/actions/workflows/rtx.yml/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/jdxcode/rtx&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/jdxcode/rtx/branch/main/graph/badge.svg?token=XYH3Q0BOO0&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/mABnUDvP57&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1066429325269794907&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Polyglot runtime manager (asdf rust clone)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;30 Second Demo&lt;/h2&gt; &#xA;&lt;p&gt;The following shows using rtx to install &lt;a href=&#34;https://nodejs.org&#34;&gt;nodejs&lt;/a&gt; and &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; into a project using a &lt;code&gt;.tool-versions&lt;/code&gt; file. &lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34;&gt;hyperfine&lt;/a&gt; is used to show the performance using rtx vs asdf. (See &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#performance&#34;&gt;Performance&lt;/a&gt;). Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to the binary, not a shim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/docs/demo.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/docs/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;asdf-compatible&lt;/strong&gt; - rtx is compatible with asdf plugins and &lt;code&gt;.tool-versions&lt;/code&gt; files. It can be used as a drop-in replacement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polyglot&lt;/strong&gt; - compatible with any language, so no more figuring out how nvm, nodenv, pyenv, etc work individuallyâ€”just use 1 tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; - rtx is written in Rust and is very fast. 20x-200x faster than asdf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No shims&lt;/strong&gt; - shims (used by asdf) cause problems, they break &lt;code&gt;which node&lt;/code&gt;, and add overhead. We don&#39;t use them by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Better UX&lt;/strong&gt; - asdf is full of strange UX decisions (like &lt;code&gt;asdf plugin add&lt;/code&gt; but also &lt;code&gt;asdf install&lt;/code&gt;). We&#39;ve taken care to make rtx easy to use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fuzzy matching and aliases&lt;/strong&gt; - no need to specify exact version numbers like with asdf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One command install&lt;/strong&gt; - No need to manually install each plugin, just run &lt;code&gt;rtx install&lt;/code&gt; and it will install all the plugins you need.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arbitrary env vars&lt;/strong&gt; - Set custom env vars when in a project directory like &lt;code&gt;NODE_ENV=production&lt;/code&gt; or &lt;code&gt;AWS_PROFILE=staging&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install rtx (other methods &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#installation&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ curl https://rtx.pub/rtx-latest-macos-arm64 &amp;gt; ~/bin/rtx&#xA;$ chmod +x ~/bin/rtx&#xA;$ rtx --version&#xA;rtx 1.21.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hook rtx into to your shell. This will automatically add &lt;code&gt;~/bin&lt;/code&gt; to &lt;code&gt;PATH&lt;/code&gt; if it isn&#39;t already. (choose one, and open a new shell session for the changes to take effect):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ echo &#39;eval &#34;$(~/bin/rtx activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#39;eval &#34;$(~/bin/rtx activate zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;$ echo &#39;~/bin/rtx activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you use direnv with &lt;code&gt;layout python&lt;/code&gt; or other logic that needs to reference rtx runtimes inside of an &lt;code&gt;.envrc&lt;/code&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#direnv&#34;&gt;direnv section&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install a runtime and set it as the default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ rtx install nodejs@18&#xA;$ rtx global nodejs@18&#xA;$ node -v&#xA;v18.10.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;rtx install&lt;/code&gt; is optional, &lt;code&gt;rtx global&lt;/code&gt; will prompt to install the runtime if it&#39;s not already installed. This is configurable in &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#configuration&#34;&gt;&lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:START (TOC:collapse=true&amp;collapseText=Click to expand&amp;maxDepth=3) --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#30-second-demo&#34;&gt;30 Second Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#about&#34;&gt;About&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#what-do-i-use-this-for&#34;&gt;What do I use this for?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#common-example-commands&#34;&gt;Common example commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#standalone&#34;&gt;Standalone&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#cargo&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#npm&#34;&gt;npm&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#github-releases&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#apt&#34;&gt;apt&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#dnf&#34;&gt;dnf&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#yum&#34;&gt;yum&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#apk-coming-soon&#34;&gt;&lt;del&gt;apk&lt;/del&gt; (coming soon)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#aur&#34;&gt;aur&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#nix&#34;&gt;nix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#other-shells&#34;&gt;Other Shells&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#bash&#34;&gt;Bash&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#fish&#34;&gt;Fish&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#xonsh&#34;&gt;Xonsh&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#something-else&#34;&gt;Something else?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#uninstalling&#34;&gt;Uninstalling&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#tool-versions&#34;&gt;&lt;code&gt;.tool-versions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#legacy-version-files&#34;&gt;Legacy version files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#global-config-configrtxconfigtoml&#34;&gt;Global config: &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#experimental-rtxtoml&#34;&gt;[experimental] &lt;code&gt;.rtx.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#aliases&#34;&gt;Aliases&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#plugins&#34;&gt;Plugins&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#plugin-options&#34;&gt;Plugin Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#versioning&#34;&gt;Versioning&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#calver-breaking-changes&#34;&gt;Calver Breaking Changes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#commands&#34;&gt;Commands&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-activate&#34;&gt;&lt;code&gt;rtx activate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-alias-get&#34;&gt;&lt;code&gt;rtx alias get&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-alias-ls&#34;&gt;&lt;code&gt;rtx alias ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-alias-set&#34;&gt;&lt;code&gt;rtx alias set&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-alias-unset&#34;&gt;&lt;code&gt;rtx alias unset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-bin-paths&#34;&gt;&lt;code&gt;rtx bin-paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-cache-clear&#34;&gt;&lt;code&gt;rtx cache clear&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-complete&#34;&gt;&lt;code&gt;rtx complete&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-current&#34;&gt;&lt;code&gt;rtx current&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-deactivate&#34;&gt;&lt;code&gt;rtx deactivate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-direnv-activate&#34;&gt;&lt;code&gt;rtx direnv activate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-doctor&#34;&gt;&lt;code&gt;rtx doctor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-env&#34;&gt;&lt;code&gt;rtx env&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-exec&#34;&gt;&lt;code&gt;rtx exec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-global&#34;&gt;&lt;code&gt;rtx global&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-implode&#34;&gt;&lt;code&gt;rtx implode&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-install&#34;&gt;&lt;code&gt;rtx install&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-latest&#34;&gt;&lt;code&gt;rtx latest&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-local&#34;&gt;&lt;code&gt;rtx local&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-ls&#34;&gt;&lt;code&gt;rtx ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-ls-remote&#34;&gt;&lt;code&gt;rtx ls-remote&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-plugins-install&#34;&gt;&lt;code&gt;rtx plugins install&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-plugins-ls&#34;&gt;&lt;code&gt;rtx plugins ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-plugins-ls-remote&#34;&gt;&lt;code&gt;rtx plugins ls-remote&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-plugins-uninstall&#34;&gt;&lt;code&gt;rtx plugins uninstall&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-plugins-update&#34;&gt;&lt;code&gt;rtx plugins update&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-prune&#34;&gt;&lt;code&gt;rtx prune&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-reshim&#34;&gt;&lt;code&gt;rtx reshim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-self-update&#34;&gt;&lt;code&gt;rtx self-update&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-settings-get&#34;&gt;&lt;code&gt;rtx settings get&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-settings-ls&#34;&gt;&lt;code&gt;rtx settings ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-settings-set&#34;&gt;&lt;code&gt;rtx settings set&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-settings-unset&#34;&gt;&lt;code&gt;rtx settings unset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-shell&#34;&gt;&lt;code&gt;rtx shell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-uninstall&#34;&gt;&lt;code&gt;rtx uninstall&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-version&#34;&gt;&lt;code&gt;rtx version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-where&#34;&gt;&lt;code&gt;rtx where&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-which&#34;&gt;&lt;code&gt;rtx which&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#faqs&#34;&gt;FAQs&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#i-dont-want-to-put-a-tool-versions-file-into-my-project-since-git-shows-it-as-an-untracked-file&#34;&gt;I don&#39;t want to put a &lt;code&gt;.tool-versions&lt;/code&gt; file into my project since git shows it as an untracked file.&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-is-failing-or-not-working-right&#34;&gt;rtx is failing or not working right&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#windows-support&#34;&gt;Windows support?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#how-do-i-use-rtx-with-http-proxies&#34;&gt;How do I use rtx with http proxies?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#how-do-the-shorthand-plugin-names-map-to-repositories&#34;&gt;How do the shorthand plugin names map to repositories?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#how-do-i-migrate-from-asdf&#34;&gt;How do I migrate from asdf?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#how-compatible-is-rtx-with-asdf&#34;&gt;How compatible is rtx with asdf?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-isnt-working-with-tmux&#34;&gt;rtx isn&#39;t working with tmux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#comparison-to-asdf&#34;&gt;Comparison to asdf&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#environment-variables-in-rtx&#34;&gt;Environment variables in rtx&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#ux&#34;&gt;UX&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#cicd&#34;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#github-actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#shims&#34;&gt;Shims&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#direnv&#34;&gt;direnv&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-inside-of-direnv-use-rtx-in-envrc&#34;&gt;rtx inside of direnv (&lt;code&gt;use rtx&lt;/code&gt; in &lt;code&gt;.envrc&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#do-you-need-direnv&#34;&gt;Do you need direnv?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#cache-behavior&#34;&gt;Cache Behavior&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#pluginruntime-cache&#34;&gt;Plugin/Runtime Cache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:END --&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;New developer? Try reading the &lt;a href=&#34;https://dev.to/jdxcode/beginners-guide-to-rtx-ac4&#34;&gt;Beginner&#39;s Guide&lt;/a&gt; for a gentler introduction.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;rtx is a tool for managing programming language and tool versions. For example, use this to install a particular version of node.js and ruby for a project. Using &lt;code&gt;rtx activate&lt;/code&gt;, you can have your shell automatically switch to the correct node and ruby versions when you &lt;code&gt;cd&lt;/code&gt; into the project&#39;s directory. Other projects on your machine can use a different set of versions.&lt;/p&gt; &#xA;&lt;p&gt;rtx is inspired by &lt;a href=&#34;https://asdf-vm.com&#34;&gt;asdf&lt;/a&gt; and uses asdf&#39;s vast &lt;a href=&#34;https://github.com/asdf-vm/asdf-plugins&#34;&gt;plugin ecosystem&lt;/a&gt; under the hood. However, it is &lt;em&gt;much&lt;/em&gt; faster than asdf and has a more friendly user experience. For more on how rtx compares to asdf, &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#comparison-to-asdf&#34;&gt;see below&lt;/a&gt;. The goal of this project was to create a better front-end to asdf.&lt;/p&gt; &#xA;&lt;p&gt;It uses the same &lt;code&gt;.tool-versions&lt;/code&gt; file that asdf uses. It&#39;s also compatible with idiomatic version files like &lt;code&gt;.node-version&lt;/code&gt; and &lt;code&gt;.ruby-version&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#legacy-version-files&#34;&gt;Legacy Version Files&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;Come chat about rtx on &lt;a href=&#34;https://discord.gg/mABnUDvP57&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What do I use this for?&lt;/h3&gt; &#xA;&lt;p&gt;Typically, developers would use rtx to manage versions of their dev tools for &lt;em&gt;local&lt;/em&gt; development. The main purpose of using rtx is being able to have different versions of languages for different projects on the same machine. (For example, one project might require python-3.10 and another python-3.11).&lt;/p&gt; &#xA;&lt;p&gt;Using rtx in production is less common but still a supported use-case. Usually a production setup won&#39;t have different directories for different projects with different dev tool requirements. However using &lt;code&gt;.tool-versions&lt;/code&gt;/&lt;code&gt;.rtx.toml&lt;/code&gt; config in production provides parity with local development so rtx is still definitely useful in production setups. See the &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#github-actions&#34;&gt;GitHub Action&lt;/a&gt; for an example of using rtx in production.&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;p&gt;rtx installs as a shell extension (e.g. &lt;code&gt;rtx activate zsh&lt;/code&gt;) that sets the &lt;code&gt;PATH&lt;/code&gt; environment variable to point your shell to the correct runtime binaries. When you &lt;code&gt;cd&lt;/code&gt; into a directory containing a &lt;code&gt;.tool-versions&lt;/code&gt; file, rtx will automatically activate the correct versions.&lt;/p&gt; &#xA;&lt;p&gt;Every time your prompt starts it will call &lt;code&gt;rtx hook-env&lt;/code&gt; to fetch new environment variables. This should be very fast and it exits early if the the directory wasn&#39;t changed or the &lt;code&gt;.tool-versions&lt;/code&gt; files haven&#39;t been updated. On my machine this takes 4ms in the fast case, 14ms in the slow case. See &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#performance&#34;&gt;Performance&lt;/a&gt; for more on this topic.&lt;/p&gt; &#xA;&lt;p&gt;Unlike asdf which uses shim files to dynamically locate runtimes when they&#39;re called, rtx modifies &lt;code&gt;PATH&lt;/code&gt; ahead of time so the runtimes are called directly. This is not only faster since it avoids any overhead, but it also makes it so commands like &lt;code&gt;which node&lt;/code&gt; work as expected. This also means there isn&#39;t any need to run &lt;code&gt;asdf reshim&lt;/code&gt; after installing new runtime binaries.&lt;/p&gt; &#xA;&lt;p&gt;rtx does not directly install runtimes. Instead, it uses asdf plugins to install runtimes. See &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#plugins&#34;&gt;plugins&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h3&gt;Common example commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;rtx install nodejs@18.0.0       Install a specific version number&#xA;rtx install nodejs@18.0         Install a fuzzy version number&#xA;rtx local nodejs@18             Use node-18.x in current project&#xA;rtx global nodejs@18            Use node-18.x as default&#xA;&#xA;rtx install nodejs              Install the version specified in .tool-versions&#xA;rtx local nodejs@latest         Use latest node in current directory&#xA;rtx global nodejs@system        Use system node as default&#xA;&#xA;rtx x nodejs@18 -- node app.js  Run `node app.js` with the PATH pointing to node-18.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Standalone&lt;/h3&gt; &#xA;&lt;p&gt;Note that it isn&#39;t necessary for &lt;code&gt;rtx&lt;/code&gt; to be on &lt;code&gt;PATH&lt;/code&gt;. If you run the activate script in your rc file, rtx will automatically add itself to &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ curl https://rtx.pub/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you&#39;re allergic to &lt;code&gt;| sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ curl https://rtx.pub/rtx-latest-macos-arm64 &amp;gt; /usr/local/bin/rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It doesn&#39;t matter where you put it. So use &lt;code&gt;~/bin&lt;/code&gt;, &lt;code&gt;/usr/local/bin&lt;/code&gt;, &lt;code&gt;~/.local/share/rtx/bin/rtx&lt;/code&gt; or whatever.&lt;/p&gt; &#xA;&lt;p&gt;Supported architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;x64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arm64&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;macos&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;linux&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need something else, compile it with &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#cargo&#34;&gt;cargo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;There are 2 ways to install rtx with Homebrew. The recommended method is to use the custom tap which will always contain the latest release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ brew install jdxcode/tap/rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the built-in tap (homebrew-core), which will be updated once Homebrew maintainers merge the PR for a new release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ brew install rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Build from source with Cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ cargo install rtx-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do it faster with &lt;a href=&#34;https://github.com/cargo-bins/cargo-binstall&#34;&gt;cargo-binstall&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ cargo install cargo-binstall&#xA;$ cargo binstall rtx-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build from the latest commit in main:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ cargo install rtx-cli --git https://github.com/jdxcode/rtx --branch main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;p&gt;rtx is available on npm as precompiled binaries. This isn&#39;t a node.js package, just distributed via npm. It can be useful for JS projects that want to setup rtx via &lt;code&gt;package.json&lt;/code&gt; or &lt;code&gt;npx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ npm install -g rtx-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use npx if you just want to test it out for a single command without fully installing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ npx rtx-cli exec python@3.11 -- python some_script.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Releases&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest release from &lt;a href=&#34;https://github.com/jdxcode/rtx/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ curl https://github.com/jdxcode/rtx/releases/download/v1.21.5/rtx-v1.21.5-linux-x64 | tar -xJv&#xA;$ mv rtx/bin/rtx /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;apt&lt;/h3&gt; &#xA;&lt;p&gt;For installation on Ubuntu/Debian:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;wget -qO - https://rtx.pub/gpg-key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/rtx-archive-keyring.gpg 1&amp;gt; /dev/null&#xA;echo &#34;deb [signed-by=/usr/share/keyrings/rtx-archive-keyring.gpg arch=amd64] https://rtx.pub/deb stable main&#34; | sudo tee /etc/apt/sources.list.d/rtx.list&#xA;sudo apt update&#xA;sudo apt install -y rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;re on arm64 you&#39;ll need to run the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;echo &#34;deb [signed-by=/usr/share/keyrings/rtx-archive-keyring.gpg arch=arm64] https://rtx.pub/deb stable main&#34; | sudo tee /etc/apt/sources.list.d/rtx.list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;dnf&lt;/h3&gt; &#xA;&lt;p&gt;For Fedora, CentOS, Amazon Linux, RHEL and other dnf-based distributions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;dnf install -y dnf-plugins-core&#xA;dnf config-manager --add-repo https://rtx.pub/rpm/rtx.repo&#xA;dnf install -y rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;yum&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;yum install -y yum-utils&#xA;yum-config-manager --add-repo https://rtx.pub/rpm/rtx.repo&#xA;yum install -y rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;del&gt;apk&lt;/del&gt; (coming soon)&lt;/h3&gt; &#xA;&lt;p&gt;For Alpine Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;apk add rtx --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;aur&lt;/h3&gt; &#xA;&lt;p&gt;For Arch Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;git clone https://aur.archlinux.org/rtx.git&#xA;cd rtx&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nix&lt;/h3&gt; &#xA;&lt;p&gt;For NixOS or those using the Nix package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  inputs = {&#xA;    nixpkgs.url = &#34;github:NixOS/nixpkgs/nixpkgs-unstable&#34;;&#xA;    flake-utils.url = &#34;github:numtide/flake-utils&#34;;&#xA;    rtx-flake = {&#xA;      url = &#34;github:chadac/rtx/add-nix-flake&#34;;&#xA;      inputs.nixpkgs.follows = &#34;nixpkgs&#34;;&#xA;      inputs.flake-utils.follows = &#34;flake-utils&#34;;&#xA;    };&#xA;  };&#xA;&#xA;  outputs = { self, nixpkgs, flake-utils, rtx-flake }:&#xA;    flake-utils.lib.eachDefaultSystem(system:&#xA;      let&#xA;        pkgs = import nixpkgs {&#xA;          inherit system;&#xA;          overlays = [ rtx-flake.overlay ];&#xA;        };&#xA;      in {&#xA;        devShells.default = pkgs.mkShell {&#xA;          name = &#34;my-dev-env&#34;;&#xA;          nativeBuildInputs = with pkgs; [&#xA;            rtx&#xA;          ];&#xA;        };&#xA;      }&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also import the package directly using &lt;code&gt;rtx-flake.packages.${system}.rtx&lt;/code&gt;. It supports all default Nix systems.&lt;/p&gt; &#xA;&lt;h2&gt;Other Shells&lt;/h2&gt; &#xA;&lt;h3&gt;Bash&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ echo &#39;eval &#34;$(rtx activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fish&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ echo &#39;rtx activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Xonsh&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;code&gt;.xsh&lt;/code&gt; files are &lt;a href=&#34;https://github.com/xonsh/xonsh/issues/3953&#34;&gt;not compiled&lt;/a&gt; you may shave a bit off startup time by using a pure Python import: add the code below to, for example, &lt;code&gt;~/.config/xonsh/rtx.py&lt;/code&gt; config file and &lt;code&gt;import rtx&lt;/code&gt; it in &lt;code&gt;~/.config/xonsh/rc.xsh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xsh&#34;&gt;from pathlib        &#x9;import Path&#xA;from xonsh.built_ins&#x9;import XSH&#xA;&#xA;ctx = XSH.ctx&#xA;rtx_init = subprocess.run([Path(&#39;~/bin/rtx&#39;).expanduser(),&#39;activate&#39;,&#39;xonsh&#39;],capture_output=True,encoding=&#34;UTF-8&#34;).stdout&#xA;XSH.builtins.execx(rtx_init,&#39;exec&#39;,ctx,filename=&#39;rtx&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or continue to use &lt;code&gt;rc.xsh&lt;/code&gt;/&lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xsh&#34;&gt;echo &#39;execx($(~/bin/rtx activate xonsh))&#39; &amp;gt;&amp;gt; ~/.config/xonsh/rc.xsh # or ~/.xonshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given that &lt;code&gt;rtx&lt;/code&gt; replaces both shell env &lt;code&gt;$PATH&lt;/code&gt; and OS environ &lt;code&gt;PATH&lt;/code&gt;, watch out that your configs don&#39;t have these two set differently (might throw &lt;code&gt;os.environ[&#39;PATH&#39;] = xonsh.built_ins.XSH.env.get_detyped(&#39;PATH&#39;)&lt;/code&gt; at the end of a config to make sure they match)&lt;/p&gt; &#xA;&lt;h3&gt;Something else?&lt;/h3&gt; &#xA;&lt;p&gt;Adding a new shell is not hard at all since very little shell code is in this project. &lt;a href=&#34;https://github.com/jdxcode/rtx/tree/main/src/shell&#34;&gt;See here&lt;/a&gt; for how the others are implemented. If your shell isn&#39;t currently supported I&#39;d be happy to help you get yours integrated.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;rtx implode&lt;/code&gt; to uninstall rtx. This will remove the rtx binary and all of its data. Use &lt;code&gt;rtx implode --help&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, manually remove the following directories to fully clean up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.local/share/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_DATA_DIR&lt;/code&gt; or &lt;code&gt;XDG_DATA_HOME/rtx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_CONFIG_DIR&lt;/code&gt; or &lt;code&gt;XDG_CONFIG_HOME/rtx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;on Linux: &lt;code&gt;~/.cache/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_CACHE_DIR&lt;/code&gt; or &lt;code&gt;XDG_CACHE_HOME/rtx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;on macOS: &lt;code&gt;~/Library/Caches/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_CACHE_DIR&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;.tool-versions&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;.tool-versions&lt;/code&gt; file is used to specify the runtime versions for a project. An example of this is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nodejs      18.0.0       # comments are allowed&#xA;ruby        3            # can be fuzzy version&#xA;shellcheck  latest       # also supports &#34;latest&#34;&#xA;jq          1.6&#xA;erlang      ref:master   # compile from vcs ref&#xA;golang      prefix:1.19  # uses the latest 1.19.x versionâ€”needed in case &#34;1.19&#34; is an exact match&#xA;shfmt       path:./shfmt # use a custom runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create &lt;code&gt;.tool-versions&lt;/code&gt; files manually, or use &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx-local&#34;&gt;&lt;code&gt;rtx local&lt;/code&gt;&lt;/a&gt; to create them automatically. See &lt;a href=&#34;https://asdf-vm.com/manage/configuration.html#tool-versions&#34;&gt;the asdf docs&lt;/a&gt; for more info on this file format.&lt;/p&gt; &#xA;&lt;h3&gt;Legacy version files&lt;/h3&gt; &#xA;&lt;p&gt;rtx supports &#34;legacy version files&#34; just like asdf. They&#39;re language-specific files like &lt;code&gt;.node-version&lt;/code&gt; and &lt;code&gt;.python-version&lt;/code&gt;. These are ideal for setting the runtime version of a project without forcing other developers to use a specific tool like rtx/asdf.&lt;/p&gt; &#xA;&lt;p&gt;They support aliases, which means you can have an &lt;code&gt;.nvmrc&lt;/code&gt; file with &lt;code&gt;lts/hydrogen&lt;/code&gt; and it will work in rtx and nvm. Here are some of the supported legacy version files:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugin&lt;/th&gt; &#xA;   &lt;th&gt;&#34;Legacy&#34; (Idiomatic) Files&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.crystal-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.exenv-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;golang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.go-version&lt;/code&gt;, &lt;code&gt;go.mod&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.java-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nodejs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.nvmrc&lt;/code&gt;, &lt;code&gt;.node-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.python-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ruby-version&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;terraform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.terraform-version&lt;/code&gt;, &lt;code&gt;.packer-version&lt;/code&gt;, &lt;code&gt;main.tf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yarn&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.yvmrc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In rtx these are enabled by default. You can disable them with &lt;code&gt;rtx settings set legacy_version_file false&lt;/code&gt;. There is a performance cost to having these when they&#39;re parsed as it&#39;s performed by the plugin in &lt;code&gt;bin/parse-version-file&lt;/code&gt;. However these are &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#cache-behavior&#34;&gt;cached&lt;/a&gt; so it&#39;s not a huge deal. You may not even notice.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;asdf calls these &#34;legacy version files&#34; so we do too. I think this is a bad name since it implies that they shouldn&#39;t be usedâ€”which is definitely not the case IMO. I prefer the term &#34;idiomatic&#34; version files since they&#39;re version files not specific to asdf/rtx and can be used by other tools. (&lt;code&gt;.nvmrc&lt;/code&gt; being a notable exception, which is tied to a specific tool.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Global config: &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;rtx can be configured in &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;. The following options are available (defaults shown):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[settings]&#xA;# whether to prompt to install plugins and runtimes if they&#39;re not already installed&#xA;missing_runtime_behavior = &#39;prompt&#39; # other options: &#39;ignore&#39;, &#39;warn&#39;, &#39;prompt&#39;, &#39;autoinstall&#39;&#xA;&#xA;# plugins can read the versions files used by other version managers (if enabled by the plugin)&#xA;# for example, .nvmrc in the case of nodejs&#39;s nvm&#xA;legacy_version_file = true         # enabled by default (different than asdf)&#xA;&#xA;# configure `rtx install` to always keep the downloaded archive&#xA;always_keep_download = false        # deleted after install by default&#xA;&#xA;# configure how frequently (in minutes) to fetch updated plugin repository changes&#xA;# this is updated whenever a new runtime is installed&#xA;# (note: this isn&#39;t currently implemented but there are plans to add it: https://github.com/jdxcode/rtx/issues/128)&#xA;plugin_autoupdate_last_check_duration = 10080 # (one week) set to 0 to disable updates&#xA;&#xA;verbose = false     # set to true to see full installation output, see `RTX_VERBOSE`&#xA;asdf_compat = false # set to true to ensure .tool-versions will be compatible with asdf, see `RTX_ASDF_COMPAT`&#xA;jobs = 4            # number of plugins or runtimes to install in parallel. The default is `4`.&#xA;raw = false         # set to true to directly pipe plugins to stdin/stdout/stderr&#xA;&#xA;shorthands_file = &#39;~/.config/rtx/shorthands.toml&#39; # path to the shorthands file, see `RTX_SHORTHANDS_FILE`&#xA;disable_default_shorthands = false # disable the default shorthands, see `RTX_DISABLE_DEFAULT_SHORTHANDS`&#xA;&#xA;experimental = false # enable experimental features such as shims&#xA;shims_dir = &#39;~/.local/share/rtx/shims&#39; # [experimental] directory where shims are stored&#xA;&#xA;[alias.nodejs]&#xA;my_custom_node = &#39;18&#39;  # makes `rtx install nodejs@my_custom_node` install node-18.x&#xA;                       # this can also be specified in a plugin (see below in &#34;Aliases&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These settings can also be managed with &lt;code&gt;rtx settings ls|get|set|unset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;[experimental] &lt;code&gt;.rtx.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.rtx.toml&lt;/code&gt; is a new config file that replaces both the global config and the &lt;code&gt;.tool-versions&lt;/code&gt; file. Think of &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt; as just a special &lt;code&gt;.rtx.toml&lt;/code&gt; which is used from any directory on the machine.&lt;/p&gt; &#xA;&lt;p&gt;It allows for functionality that is not possible with &lt;code&gt;.tool-versions&lt;/code&gt;, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setting arbitrary env vars while inside the directory&lt;/li&gt; &#xA; &lt;li&gt;passing options to plugins like &lt;code&gt;virtualenv=&#39;.venv&#39;&lt;/code&gt; for &lt;a href=&#34;https://github.com/jdxcode/rtx-python#virtualenv-support&#34;&gt;rtx-python&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;specifying plugin repo url for custom plugins so it does not need to be added manually&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is what the config looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[env]&#xA;NODE_ENV = &#39;production&#39; # supports arbitrary env vars so rtx can be used like dotenv&#xA;&#xA;[tools]&#xA;# specify single or multiple versions&#xA;terraform = &#39;1.0.0&#39;&#xA;erlang = [&#39;23.3&#39;, &#39;24.0&#39;]&#xA;&#xA;# supports everything you can do with .tool-versions currently&#xA;nodejs = [&#39;16&#39;, &#39;prefix:18&#39;, &#39;ref:master&#39;, &#39;path:~/.nodes/14&#39;]&#xA;&#xA;# send arbitrary options to the plugin, passed as:&#xA;# RTX_TOOL_OPTS__VENV=.venv&#xA;# RTX_TOOL_OPTS__DEFAULT_PACKAGES__0=ansible&#xA;# RTX_TOOL_OPTS__DEFAULT_PACKAGES__1=pipenv&#xA;python = { version = &#39;3.10&#39;, venv = &#39;.venv&#39;, default_packages = [&#39;ansible&#39;, &#39;pipenv&#39;] }&#xA;&#xA;[plugins]&#xA;# specify a custom repo url&#xA;# note this will only be used if the plugin does not already exist&#xA;python = &#39;https://github.com/jdxcode/rtx-python&#39;&#xA;&#xA;[settings] # project-local settings&#xA;verbose = true&#xA;missing_runtime_behavior = &#39;warn&#39;&#xA;shims_dir = &#39;~/.rtx/shims&#39;&#xA;&#xA;[alias.nodejs] # project-local aliases&#xA;my_custom_node = &#39;18&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.rtx.toml&lt;/code&gt; is currently experimental and may change in minor versions of rtx. It does not require setting &lt;code&gt;experimental = true&lt;/code&gt; in the global config in part because this config can itself contain the setting for &lt;code&gt;experimental&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;rtx can also be configured via environment variables. The following options are available:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_MISSING_RUNTIME_BEHAVIOR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the same as the &lt;code&gt;missing_runtime_behavior&lt;/code&gt; config option in &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ RTX_MISSING_RUNTIME_BEHAVIOR=ignore rtx install nodejs@18&#xA;$ RTX_NODEJS_VERSION=18 rtx exec -- node --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DATA_DIR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the directory where rtx stores its data. The default is &lt;code&gt;~/.local/share/rtx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_CACHE_DIR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the directory where rtx stores cache. The default is &lt;code&gt;~/.cache/rtx&lt;/code&gt; on Linux and &lt;code&gt;~/Library/Caches/rtx&lt;/code&gt; on macOS.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_CONFIG_FILE&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is the path to the config file. The default is &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;. (Or &lt;code&gt;$XDG_CONFIG_HOME/config.toml&lt;/code&gt; if that is set)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DEFAULT_TOOL_VERSIONS_FILENAME&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to something other than &#34;.tool-versions&#34; to have rtx look for configuration with alternate names.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DEFAULT_CONFIG_FILENAME&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to something other than &#34;.rtx.toml&#34; to have rtx look for configuration with alternate names.&lt;/p&gt; &#xA;&lt;p&gt;This is the same as &lt;code&gt;RTX_DEFAULT_TOOL_VERSIONS_FILENAME&lt;/code&gt; but for &lt;code&gt;.rtx.toml&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_${PLUGIN}_VERSION&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set the version for a runtime. For example, &lt;code&gt;RTX_NODEJS_VERSION=18&lt;/code&gt; will use &lt;a href=&#34;mailto:nodejs@18.x&#34;&gt;nodejs@18.x&lt;/a&gt; regardless of what is set in &lt;code&gt;.tool-versions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LEGACY_VERSION_FILE&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Plugins can read the versions files used by other version managers (if enabled by the plugin) for example, .nvmrc in the case of nodejs&#39;s nvm.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_USE_TOML&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to &lt;code&gt;1&lt;/code&gt; to use default to using &lt;code&gt;.rtx.toml&lt;/code&gt; in &lt;code&gt;rtx local&lt;/code&gt; instead of &lt;code&gt;.tool-versions&lt;/code&gt; for configuration.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LOG_LEVEL=trace|debug|info|warn|error&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Can also use &lt;code&gt;RTX_DEBUG=1&lt;/code&gt;, &lt;code&gt;RTX_TRACE=1&lt;/code&gt;, and &lt;code&gt;RTX_QUIET=1&lt;/code&gt;. These adjust the log output to the screen.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LOG_FILE=~/.rtx/rtx.log&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Output logs to a file.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LOG_FILE_LEVEL=trace|debug|info|warn|error&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;RTX_LOG_LEVEL&lt;/code&gt; but for the log file output level. This is useful if you want to store the logs but not have them litter your display.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_VERBOSE=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This shows the installation output during &lt;code&gt;rtx install&lt;/code&gt; and &lt;code&gt;rtx plugin install&lt;/code&gt;. This should likely be merged so it behaves the same as &lt;code&gt;RTX_DEBUG=1&lt;/code&gt; and we don&#39;t have 2 configuration for the same thing, but for now it is it&#39;s own config.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_ASDF_COMPAT=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Only output &lt;code&gt;.tool-versions&lt;/code&gt; files in &lt;code&gt;rtx local|global&lt;/code&gt; which will be usable by asdf.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_JOBS=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set the number plugins or runtimes to install in parallel. The default is &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_RAW=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to &#34;1&#34; to directly pipe plugin scripts to stdin/stdout/stderr. By default stdin is disabled because when installing a bunch of plugins in parallel you won&#39;t see the prompt. Use this if a plugin accepts input or otherwise does not seem to be installing correctly.&lt;/p&gt; &#xA;&lt;p&gt;Sets &lt;code&gt;RTX_JOBS=1&lt;/code&gt; because only 1 plugin script can be executed at a time.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_SHORTHANDS_FILE=~/.config/rtx/shorthands.toml&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use a custom file for the shorthand aliases. This is useful if you want to share plugins within an organization.&lt;/p&gt; &#xA;&lt;p&gt;The file should be in toml format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;elixir = &#34;https://github.com/my-org/rtx-elixir.git&#34;&#xA;nodejs = &#34;https://github.com/my-org/rtx-nodejs.git&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DISABLE_DEFAULT_SHORTHANDS=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Disables the shorthand aliases for installing plugins. You will have to specify full urls when installing plugins, e.g.: &lt;code&gt;rtx plugin install nodejs https://github.com/asdf-vm/asdf-nodejs.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently this disables the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--fuzzy&lt;/code&gt; as default behavior (&lt;code&gt;rtx local nodejs@18&lt;/code&gt; will save exact version)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_HIDE_OUTDATED_BUILD=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If a release is 12 months old, it will show a warning message every time it launches:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rtx has not been updated in over a year. Please update to the latest version.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You likely do not want to be using rtx if it is that old. I&#39;m doing this instead of autoupdating. If, for some reason, you want to stay on some old version, you can hide this message with &lt;code&gt;RTX_HIDE_OUTDATED_BUILD=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_EXPERIMENTAL=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Enables experimental features such as shims.&lt;/p&gt; &#xA;&lt;h4&gt;[experimental] &lt;code&gt;RTX_SHIMS_DIR=~/.local/share/rtx/shims&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set a directory to output shims when running &lt;code&gt;rtx reshim&lt;/code&gt;. Requires &lt;code&gt;experimental = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Aliases&lt;/h2&gt; &#xA;&lt;p&gt;rtx supports aliasing the versions of runtimes. One use-case for this is to define aliases for LTS versions of runtimes. For example, you may want to specify &lt;code&gt;lts/hydrogen&lt;/code&gt; as the version for &lt;a href=&#34;mailto:nodejs@18.x&#34;&gt;nodejs@18.x&lt;/a&gt;. So you can use the runtime with &lt;code&gt;nodejs lts/hydrogen&lt;/code&gt; in &lt;code&gt;.tool-versions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;User aliases can be created by adding an &lt;code&gt;alias.&amp;lt;PLUGIN&amp;gt;&lt;/code&gt; section to &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[alias.nodejs]&#xA;my_custom_18 = &#39;18&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Plugins can also provide aliases via a &lt;code&gt;bin/list-aliases&lt;/code&gt; script. Here is an example showing node.js versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;&#xA;echo &#34;lts/hydrogen 18&#34;&#xA;echo &#34;lts/gallium 16&#34;&#xA;echo &#34;lts/fermium 14&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Because this is rtx-specific functionality not currently used by asdf it isn&#39;t likely to be in any plugin currently, but plugin authors can add this script without impacting asdf users.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;rtx uses asdf&#39;s plugin ecosystem under the hood. These plugins contain shell scripts like &lt;code&gt;bin/install&lt;/code&gt; (for installing) and &lt;code&gt;bin/list-all&lt;/code&gt; (for listing all of the available versions).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/asdf-vm/asdf-plugins&#34;&gt;https://github.com/asdf-vm/asdf-plugins&lt;/a&gt; for the list of built-in plugins shorthands. See asdf&#39;s &lt;a href=&#34;https://asdf-vm.com/plugins/create.html&#34;&gt;Create a Plugin&lt;/a&gt; for how to create your own or just learn more about how they work.&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Options&lt;/h3&gt; &#xA;&lt;p&gt;rtx has support for &#34;plugin options&#34; which is configuration specified in &lt;code&gt;.rtx.toml&lt;/code&gt; to change behavior of plugins. One example of this is virtualenv on python runtimes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tools]&#xA;python = {version=&#39;3.11&#39;, virtualenv=&#39;.venv&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will be passed to all plugin scripts as &lt;code&gt;RTX_TOOL_OPTS__VIRTUALENV=.venv&lt;/code&gt;. The user can specify any option and it will be passed to the plugin in that format.&lt;/p&gt; &#xA;&lt;p&gt;Currently this only supports simple strings, but we can make it compatible with more complex types (arrays, tables) fairly easily if there is a need for it.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;rtx is currently a new project and is under very rapid development. Slight behavior changes may occur between releases. Features marked as &#34;experimental&#34; may change significantly or be removed entirely.&lt;/p&gt; &#xA;&lt;p&gt;Starting June 1, 2023*, rtx will move to &lt;a href=&#34;https://calver.org/&#34;&gt;Calver&lt;/a&gt; versioning (&lt;code&gt;2023.6.1&lt;/code&gt;). After the move to Calver, rtx&#39;s design will become mostly permanent and you will be able to rely on its behavior for the long term. Breaking changes will be few but when they do happen, they will be communicated in the CLI with plenty of notice whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;Rather than have semver major releases to communicate change in large releases, new functionality and changes can be opted-into with settings like &lt;code&gt;experimental = true&lt;/code&gt;. This way plugin authors and users can test out new functionality immediately without waiting for a major release.&lt;/p&gt; &#xA;&lt;p&gt;The numbers in Calver (YYYY.MM.RELEASE) simply represent the date of the releaseâ€”not compatibility or how many new features were added. Each release will be small and incremental.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;*This plan is tentative and the details may change, but the rough idea of making many changes now so we can have stability later is the goal.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Calver Breaking Changes&lt;/h3&gt; &#xA;&lt;p&gt;When we switch to Calver, we&#39;ll immediately make some notable design changes to rtx. This will be the first and last time that such a change is made and I actually want to make sure we make as many as we canâ€”because we&#39;ll be stuck with these decisions.&lt;/p&gt; &#xA;&lt;p&gt;Here are a list of the changes that will be made:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rtx local&lt;/code&gt; will default to creating &lt;code&gt;.rtx.toml&lt;/code&gt; instead of &lt;code&gt;.tool-versions&lt;/code&gt;. (If the config already exists the format will be preserved.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtx global&lt;/code&gt; will modify &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt; instead of &lt;code&gt;~/.tool-versions&lt;/code&gt;. This path can be changed with &lt;code&gt;RTX_CONFIG_FILE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.tool-versions&lt;/code&gt; will become simply another &lt;code&gt;.tool-versions&lt;/code&gt; instead of being a special file that is read anywhere such as from &lt;code&gt;/tmp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(more to be added)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- RTX:COMMANDS --&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx activate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Initializes rtx in the current shell&#xA;&#xA;This should go into your shell&#39;s rc file.&#xA;Otherwise, it will only take effect in the current session.&#xA;(e.g. ~/.bashrc)&#xA;&#xA;Usage: activate [OPTIONS] [SHELL_TYPE]&#xA;&#xA;Arguments:&#xA;  [SHELL_TYPE]&#xA;          Shell type to generate the script for&#xA;          &#xA;          [possible values: bash, fish, xonsh, zsh]&#xA;&#xA;Options:&#xA;      --status&#xA;          Show &#34;rtx: &amp;lt;PLUGIN&amp;gt;@&amp;lt;VERSION&amp;gt;&#34; message when changing directories&#xA;&#xA;Examples:&#xA;    $ eval &#34;$(rtx activate bash)&#34;&#xA;    $ eval &#34;$(rtx activate zsh)&#34;&#xA;    $ rtx activate fish | source&#xA;    $ execx($(rtx activate xonsh))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias get&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Show an alias for a plugin&#xA;&#xA;This is the contents of an alias.&amp;lt;PLUGIN&amp;gt; entry in ~/.config/rtx/config.toml&#xA;&#xA;Usage: get &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;&#xA;          The plugin to show the alias for&#xA;&#xA;  &amp;lt;ALIAS&amp;gt;&#xA;          The alias to show&#xA;&#xA;Examples:&#xA;  $ rtx alias get nodejs lts/hydrogen&#xA;  18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias ls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;List aliases&#xA;Shows the aliases that can be specified.&#xA;These can come from user config or from plugins in `bin/list-aliases`.&#xA;&#xA;For user config, aliases are defined like the following in `~/.config/rtx/config.toml`:&#xA;&#xA;  [alias.nodejs]&#xA;  lts = &#34;18.0.0&#34;&#xA;&#xA;Usage: ls [OPTIONS]&#xA;&#xA;Options:&#xA;  -p, --plugin &amp;lt;PLUGIN&amp;gt;&#xA;          Show aliases for &amp;lt;PLUGIN&amp;gt;&#xA;&#xA;Examples:&#xA;  $ rtx aliases&#xA;  nodejs    lts/hydrogen   18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias set&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add/update an alias for a plugin&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: set &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt; &amp;lt;VALUE&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;&#xA;          The plugin to set the alias for&#xA;&#xA;  &amp;lt;ALIAS&amp;gt;&#xA;          The alias to set&#xA;&#xA;  &amp;lt;VALUE&amp;gt;&#xA;          The value to set the alias to&#xA;&#xA;Examples:&#xA;  $ rtx alias set nodejs lts/hydrogen 18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias unset&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Clears an alias for a plugin&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: unset &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;&#xA;          The plugin to remove the alias from&#xA;&#xA;  &amp;lt;ALIAS&amp;gt;&#xA;          The alias to remove&#xA;&#xA;Examples:&#xA;  $ rtx alias unset nodejs lts/hydrogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx bin-paths&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;List all the active runtime bin paths&#xA;&#xA;Usage: bin-paths&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx cache clear&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Deletes all cache files in rtx&#xA;&#xA;Usage: clear&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx complete&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Generate shell completions&#xA;&#xA;Usage: complete --shell &amp;lt;SHELL&amp;gt;&#xA;&#xA;Options:&#xA;  -s, --shell &amp;lt;SHELL&amp;gt;&#xA;          shell type&#xA;          &#xA;          [possible values: bash, elvish, fish, powershell, zsh]&#xA;&#xA;Examples:&#xA;  $ rtx complete -s bash &amp;gt; /etc/bash_completion.d/rtx&#xA;  $ rtx complete -s zsh  &amp;gt; /usr/local/share/zsh/site-functions/_rtx&#xA;  $ rtx complete -s fish &amp;gt; ~/.config/fish/completions/rtx.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx current&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Shows current active and installed runtime versions&#xA;&#xA;This is similar to `rtx ls --current`, but this only shows the runtime&#xA;and/or version. It&#39;s designed to fit into scripts more easily.&#xA;&#xA;Usage: current [PLUGIN]&#xA;&#xA;Arguments:&#xA;  [PLUGIN]&#xA;          Plugin to show versions of e.g.: ruby, nodejs&#xA;&#xA;Examples:&#xA;  # outputs `.tool-versions` compatible format&#xA;  $ rtx current&#xA;  python 3.11.0 3.10.0&#xA;  shfmt 3.6.0&#xA;  shellcheck 0.9.0&#xA;  nodejs 18.13.0&#xA;&#xA;  $ rtx current nodejs&#xA;  18.13.0&#xA;&#xA;  # can output multiple versions&#xA;  $ rtx current python&#xA;  3.11.0 3.10.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx deactivate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Disable rtx for current shell session&#xA;&#xA;This can be used to temporarily disable rtx in a shell session.&#xA;&#xA;Usage: deactivate&#xA;&#xA;Examples:&#xA;  $ rtx deactivate bash&#xA;  $ rtx deactivate zsh&#xA;  $ rtx deactivate fish&#xA;  $ execx($(rtx deactivate xonsh))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx direnv activate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Output direnv function to use rtx inside direnv&#xA;&#xA;See https://github.com/jdxcode/rtx#direnv for more information&#xA;&#xA;Because this generates the legacy files based on currently installed plugins,&#xA;you should run this command after installing new plugins. Otherwise&#xA;direnv may not know to update environment variables when legacy file versions change.&#xA;&#xA;Usage: activate&#xA;&#xA;Examples:&#xA;  $ rtx direnv activate &amp;gt; ~/.config/direnv/lib/use_rtx.sh&#xA;  $ echo &#39;use rtx&#39; &amp;gt; .envrc&#xA;  $ direnv allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx doctor&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Check rtx installation for possible problems.&#xA;&#xA;Usage: doctor&#xA;&#xA;Examples:&#xA;  $ rtx doctor&#xA;  [WARN] plugin nodejs is not installed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx env&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Exports env vars to activate rtx a single time&#xA;&#xA;Use this if you don&#39;t want to permanently install rtx. It&#39;s not necessary to&#xA;use this if you have `rtx activate` in your shell rc file.&#xA;&#xA;Usage: env [OPTIONS] [RUNTIME]...&#xA;&#xA;Arguments:&#xA;  [RUNTIME]...&#xA;          Runtime version to use&#xA;&#xA;Options:&#xA;  -s, --shell &amp;lt;SHELL&amp;gt;&#xA;          Shell type to generate environment variables for&#xA;          &#xA;          [possible values: bash, fish, xonsh, zsh]&#xA;&#xA;Examples:&#xA;  $ eval &#34;$(rtx env -s bash)&#34;&#xA;  $ eval &#34;$(rtx env -s zsh)&#34;&#xA;  $ rtx env -s fish | source&#xA;  $ execx($(rtx env -s xonsh))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx exec&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Execute a command with runtime(s) set&#xA;&#xA;use this to avoid modifying the shell session or running ad-hoc commands with the rtx runtimes&#xA;set.&#xA;&#xA;Runtimes will be loaded from .tool-versions, though they can be overridden with &amp;lt;RUNTIME&amp;gt; args&#xA;Note that only the plugin specified will be overridden, so if a `.tool-versions` file&#xA;includes &#34;nodejs 18&#34; but you run `rtx exec python@3.11`; it will still load nodejs@18.&#xA;&#xA;The &#34;--&#34; separates runtimes from the commands to pass along to the subprocess.&#xA;&#xA;Usage: exec [OPTIONS] [RUNTIME]... [-- &amp;lt;COMMAND&amp;gt;...]&#xA;&#xA;Arguments:&#xA;  [RUNTIME]...&#xA;          Runtime(s) to start e.g.: nodejs@18 python@3.10&#xA;&#xA;  [COMMAND]...&#xA;          Command string to execute (same as --command)&#xA;&#xA;Options:&#xA;  -c, --command &amp;lt;C&amp;gt;&#xA;          Command string to execute&#xA;&#xA;Examples:&#xA;  rtx exec nodejs@18 -- node ./app.js  # launch app.js using node-18.x&#xA;  rtx x nodejs@18 -- node ./app.js     # shorter alias&#xA;&#xA;  # Specify command as a string:&#xA;  rtx exec nodejs@18 python@3.11 --command &#34;node -v &amp;amp;&amp;amp; python -V&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx global&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Shows/sets the global runtime version(s)&#xA;&#xA;Displays the contents of ~/.tool-versions after writing.&#xA;The file is `$HOME/.tool-versions` by default. It can be changed with `$RTX_CONFIG_FILE`.&#xA;If `$RTX_CONFIG_FILE` is set to anything that ends in `.toml`, it will be parsed as `.rtx.toml`.&#xA;Otherwise, it will be parsed as a `.tool-versions` file.&#xA;A future v2 release of rtx will default to using `~/.config/rtx/config.toml` instead.&#xA;&#xA;Use `rtx local` to set a runtime version locally in the current directory.&#xA;&#xA;Usage: global [OPTIONS] [RUNTIME]...&#xA;&#xA;Arguments:&#xA;  [RUNTIME]...&#xA;          Runtime(s) to add to .tool-versions&#xA;          e.g.: nodejs@18&#xA;          If this is a single runtime with no version, the current value of the global&#xA;          .tool-versions will be displayed&#xA;&#xA;Options:&#xA;      --pin&#xA;          Save exact version to `~/.tool-versions`&#xA;          e.g.: `rtx local --pin nodejs@18` will save `nodejs 18.0.0` to ~/.tool-versions&#xA;&#xA;      --fuzzy&#xA;          Save fuzzy version to `~/.tool-versions`&#xA;          e.g.: `rtx local --fuzzy nodejs@18` will save `nodejs 18` to ~/.tool-versions&#xA;          this is the default behavior unless RTX_ASDF_COMPAT=1&#xA;&#xA;      --remove &amp;lt;PLUGIN&amp;gt;&#xA;          Remove the plugin(s) from ~/.tool-versions&#xA;&#xA;      --path&#xA;          Get the path of the global config file&#xA;&#xA;Examples:&#xA;  # set the current version of nodejs to 18.x&#xA;  # will use a fuzzy version (e.g.: 18) in .tool-versions file&#xA;  $ rtx global --fuzzy nodejs@18&#xA;&#xA;  # set the current version of nodejs to 18.x&#xA;  # will use a precise version (e.g.: 18.0.0) in .tool-versions file&#xA;  $ rtx global --pin nodejs@18&#xA;&#xA;  # show the current version of nodejs in ~/.tool-versions&#xA;  $ rtx global nodejs&#xA;  18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx implode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Removes rtx CLI and all related data&#xA;&#xA;Skips config directory by default.&#xA;&#xA;Usage: implode [OPTIONS]&#xA;&#xA;Options:&#xA;      --config&#xA;          Also remove config directory&#xA;&#xA;      --dry-run&#xA;          List directories that would be removed without actually removing them&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx install&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install a runtime&#xA;&#xA;This will install a runtime to `~/.local/share/rtx/installs/&amp;lt;PLUGIN&amp;gt;/&amp;lt;VERSION&amp;gt;`&#xA;It won&#39;t be used simply by being installed, however.&#xA;For that, you must set up a `.tool-version` file manually or with `rtx local/global`.&#xA;Or you can call a runtime explicitly with `rtx exec &amp;lt;PLUGIN&amp;gt;@&amp;lt;VERSION&amp;gt; -- &amp;lt;COMMAND&amp;gt;`.&#xA;&#xA;Runtimes will be installed in parallel. To disable, set `--jobs=1` or `RTX_JOBS=1`&#xA;&#xA;Usage: install [OPTIONS] [RUNTIME]...&#xA;&#xA;Arguments:&#xA;  [RUNTIME]...&#xA;          Runtime(s) to install e.g.: nodejs@18&#xA;&#xA;Options:&#xA;  -p, --plugin &amp;lt;PLUGIN&amp;gt;&#xA;          Only install runtime(s) for &amp;lt;PLUGIN&amp;gt;&#xA;&#xA;  -f, --force&#xA;          Force reinstall even if already installed&#xA;&#xA;  -v, --verbose...&#xA;          Show installation output&#xA;&#xA;Examples:&#xA;  $ rtx install nodejs@18.0.0  # install specific nodejs version&#xA;  $ rtx install nodejs@18      # install fuzzy nodejs version&#xA;  $ rtx install nodejs         # install version specified in .tool-versions&#xA;  $ rtx install                # installs all runtimes specified in .tool-versions for installed plugins&#xA;  $ rtx install --all          # installs all runtimes and all plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx latest&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Gets the latest available version for a plugin&#xA;&#xA;Usage: latest &amp;lt;RUNTIME&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;RUNTIME&amp;gt;&#xA;          Runtime to get the latest version of&#xA;&#xA;Examples:&#xA;  $ rtx latest nodejs@18  # get the latest version of nodejs 18&#xA;  18.0.0&#xA;&#xA;  $ rtx latest nodejs     # get the latest stable version of nodejs&#xA;  20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx local&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sets or gets tool versions in the local .tool-versions or .rtx.toml file&#xA;&#xA;Use this to set a tool&#39;s version when within a directory&#xA;Use `rtx global` to set a runtime version globally&#xA;This uses `.tool-version` by default unless there is a `.rtx.toml` file or if `RTX_USE_TOML`&#xA;is set. A future v2 release of rtx will default to using `.rtx.toml`.&#xA;&#xA;Usage: local [OPTIONS] [RUNTIME]...&#xA;&#xA;Arguments:&#xA;  [RUNTIME]...&#xA;          Runtimes to add to .tool-versions/.rtx.toml&#xA;          e.g.: nodejs@18&#xA;          if this is a single runtime with no version,&#xA;          the current value of .tool-versions/.rtx.toml will be displayed&#xA;&#xA;Options:&#xA;  -p, --parent&#xA;          Recurse up to find a .tool-versions file rather than using the current directory only&#xA;          by default this command will only set the runtime in the current directory (&#34;$PWD/.tool-versions&#34;)&#xA;&#xA;      --pin&#xA;          Save exact version to `.tool-versions`&#xA;          e.g.: `rtx local --pin nodejs@18` will save `nodejs 18.0.0` to .tool-versions&#xA;&#xA;      --fuzzy&#xA;          Save fuzzy version to `.tool-versions` e.g.: `rtx local --fuzzy nodejs@18` will save `nodejs 18` to .tool-versions This is the default behavior unless RTX_ASDF_COMPAT=1&#xA;&#xA;      --remove &amp;lt;PLUGIN&amp;gt;&#xA;          Remove the plugin(s) from .tool-versions&#xA;&#xA;      --path&#xA;          Get the path of the config file&#xA;&#xA;Examples:&#xA;  # set the current version of nodejs to 18.x for the current directory&#xA;  # will use a precise version (e.g.: 18.0.0) in .tool-versions file&#xA;  $ rtx local nodejs@18&#xA;&#xA;  # set nodejs to 18.x for the current project (recurses up to find .tool-versions)&#xA;  $ rtx local -p nodejs@18&#xA;&#xA;  # set the current version of nodejs to 18.x for the current directory&#xA;  # will use a fuzzy version (e.g.: 18) in .tool-versions file&#xA;  $ rtx local --fuzzy nodejs@18&#xA;&#xA;  # removes nodejs from .tool-versions&#xA;  $ rtx local --remove=nodejs&#xA;&#xA;  # show the current version of nodejs in .tool-versions&#xA;  $ rtx local nodejs&#xA;  18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx ls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;List installed runtime versions&#xA;&#xA;The &#34;arrow (-&amp;gt;)&#34; indicates the runtime is installed, active, and will be used for running commands.&#xA;(Assuming `rtx activate` or `rtx env` is in use).&#xA;&#xA;Usage: ls [OPTIONS]&#xA;&#xA;Options:&#xA;  -p, --plugin &amp;lt;PLUGIN&amp;gt;&#xA;          Only show runtimes from [PLUGIN]&#xA;&#xA;  -c, --current&#xA;          Only show runtimes currently specified in .tool-versions&#xA;&#xA;Examples:&#xA;  $ rtx list&#xA;  -&amp;gt; nodejs     18.0.0 (set by ~/src/myapp/.tool-versions)&#xA;  -&amp;gt; python     3.11.0 (set by ~/.tool-versions)&#xA;     python     3.10.0&#xA;&#xA;  $ rtx list --current&#xA;  -&amp;gt; nodejs     18.0.0 (set by ~/src/myapp/.tool-versions)&#xA;  -&amp;gt; python     3.11.0 (set by ~/.tool-versions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx ls-remote&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;List runtime versions available for install&#xA;&#xA;note that these versions are cached for commands like `rtx install nodejs@latest`&#xA;however _this_ command will always clear that cache and fetch the latest remote versions&#xA;&#xA;Usage: ls-remote &amp;lt;PLUGIN&amp;gt; [PREFIX]&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;&#xA;          Plugin to get versions for&#xA;&#xA;  [PREFIX]&#xA;          The version prefix to use when querying the latest version&#xA;          same as the first argument after the &#34;@&#34;&#xA;&#xA;Examples:&#xA;  $ rtx ls-remote nodejs&#xA;  18.0.0&#xA;  20.0.0&#xA;&#xA;  $ rtx ls-remote nodejs@18&#xA;  18.0.0&#xA;  18.1.0&#xA;&#xA;  $ rtx ls-remote nodejs 18&#xA;  18.0.0&#xA;  18.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins install&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install a plugin&#xA;&#xA;note that rtx automatically can install plugins when you install a runtime&#xA;e.g.: `rtx install nodejs@18` will autoinstall the nodejs plugin&#xA;&#xA;This behavior can be modified in ~/.config/rtx/config.toml&#xA;&#xA;Usage: install [OPTIONS] [NAME] [GIT_URL]&#xA;&#xA;Arguments:&#xA;  [NAME]&#xA;          The name of the plugin to install&#xA;          e.g.: nodejs, ruby&#xA;          Can specify multiple plugins: `rtx plugins install nodejs ruby python`&#xA;&#xA;  [GIT_URL]&#xA;          The git url of the plugin&#xA;&#xA;Options:&#xA;  -f, --force&#xA;          Reinstall even if plugin exists&#xA;&#xA;  -a, --all&#xA;          Install all missing plugins&#xA;          This will only install plugins that have matching shorthands.&#xA;          i.e.: they don&#39;t need the full git repo url&#xA;&#xA;  -v, --verbose...&#xA;          Show installation output&#xA;&#xA;Examples:&#xA;  # install the nodejs via shorthand&#xA;  $ rtx install nodejs&#xA;&#xA;  # install the nodejs plugin using a specific git url&#xA;  $ rtx install nodejs https://github.com/jdxcode/rtx-nodejs.git&#xA;&#xA;  # install the nodejs plugin using the git url only&#xA;  # (nodejs is inferred from the url)&#xA;  $ rtx install https://github.com/jdxcode/rtx-nodejs.git&#xA;&#xA;  # install the nodejs plugin using a specific ref&#xA;  $ rtx install nodejs http://github.com/jdxcode/rtx-nodejs.git#v1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins ls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;List installed plugins&#xA;&#xA;Can also show remotely available plugins to install.&#xA;&#xA;Usage: ls [OPTIONS]&#xA;&#xA;Options:&#xA;  -a, --all&#xA;          List all available remote plugins&#xA;          Same as `rtx plugins ls-remote`&#xA;&#xA;  -u, --urls&#xA;          Show the git url for each plugin&#xA;          e.g.: https://github.com/asdf-vm/asdf-nodejs.git&#xA;&#xA;Examples:&#xA;  $ rtx plugins ls&#xA;  nodejs&#xA;  ruby&#xA;&#xA;  $ rtx plugins ls --urls&#xA;  nodejs                        https://github.com/asdf-vm/asdf-nodejs.git&#xA;  ruby                          https://github.com/asdf-vm/asdf-ruby.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins ls-remote&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;List all available remote plugins&#xA;&#xA;These are fetched from https://github.com/asdf-vm/asdf-plugins&#xA;&#xA;Examples:&#xA;  $ rtx plugins ls-remote&#xA;&#xA;&#xA;Usage: ls-remote [OPTIONS]&#xA;&#xA;Options:&#xA;  -u, --urls&#xA;          Show the git url for each plugin e.g.: https://github.com/asdf-vm/asdf-nodejs.git&#xA;&#xA;      --only-names&#xA;          Only show the name of each plugin by default it will show a &#34;*&#34; next to installed plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins uninstall&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Removes a plugin&#xA;&#xA;Usage: uninstall &amp;lt;PLUGIN&amp;gt;...&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;...&#xA;          Plugin(s) to remove&#xA;&#xA;Examples:&#xA;  $ rtx uninstall nodejs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins update&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Updates a plugin to the latest version&#xA;&#xA;note: this updates the plugin itself, not the runtime versions&#xA;&#xA;Usage: update [OPTIONS] [PLUGIN]...&#xA;&#xA;Arguments:&#xA;  [PLUGIN]...&#xA;          Plugin(s) to update&#xA;&#xA;Options:&#xA;  -a, --all&#xA;          Update all plugins&#xA;&#xA;Examples:&#xA;  $ rtx plugins update --all        # update all plugins&#xA;  $ rtx plugins update nodejs       # update only nodejs&#xA;  $ rtx plugins update nodejs@beta  # specify a ref&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx prune&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Delete unused versions of tools&#xA;rtx tracks which config files have been used in ~/.local/share/rtx/tracked_config_files&#xA;Versions which are no longer the latest specified in any of those configs are deleted.&#xA;Versions installed only with environment variables (`RTX_&amp;lt;PLUGIN&amp;gt;_VERSION`) will be deleted,&#xA;as will versions only referenced on the command line (`rtx exec &amp;lt;PLUGIN&amp;gt;@&amp;lt;VERSION&amp;gt;`).&#xA;&#xA;Usage: prune [OPTIONS] [PLUGINS]...&#xA;&#xA;Arguments:&#xA;  [PLUGINS]...&#xA;          Prune only versions from these plugins&#xA;&#xA;Options:&#xA;      --dry-run&#xA;          Do not actually delete anything&#xA;&#xA;Examples:&#xA;  $ rtx prune --dry-run&#xA;  rm -rf ~/.local/share/rtx/versions/nodejs/18.0.0&#xA;  rm -rf ~/.local/share/rtx/versions/nodejs/18.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx reshim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;[experimental] rebuilds the shim farm&#xA;&#xA;this requires that the shims_dir is set&#xA;&#xA;Usage: reshim&#xA;&#xA;Examples:&#xA;  $ rtx settings set experimental true&#xA;  $ rtx settings set shims_dir ~/.rtx/shims&#xA;  $ rtx reshim&#xA;  $ ~/.rtx/shims/node -v&#xA;  v18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx self-update&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Updates rtx itself&#xA;Uses whatever package manager was used to install rtx or just downloads&#xA;a binary from GitHub Releases if rtx was installed manually.&#xA;Supports: standalone, brew, deb, rpm&#xA;&#xA;Usage: self-update&#xA;&#xA;Examples:&#xA;  $ rtx self-update&#xA;  Checking target-arch... macos-arm64&#xA;  Checking current version... v1.0.0&#xA;  Checking latest released version... v1.21.5-DEBUG macos-arm64 (built 2023-03-04)&#xA;  New release found! v1.0.0 --&amp;gt; v1.21.5-DEBUG macos-arm64 (built 2023-03-04)&#xA;  New release is compatible&#xA;&#xA;  rtx release status:&#xA;    * Current exe: &#34;/Users/jdx/bin/rtx&#34;&#xA;    * New exe release: &#34;rtx-v1.21.5-DEBUG macos-arm64 (built 2023-03-04)-macos-arm64&#34;&#xA;&#xA;  The new release will be downloaded/extracted and the existing binary will be replaced.&#xA;  Do you want to continue? [Y/n] y&#xA;  Downloading...&#xA;  Extracting archive... Done&#xA;  Replacing binary file... Done&#xA;  Updated rtx to 1.21.5-DEBUG macos-arm64 (built 2023-03-04)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings get&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Show a current setting&#xA;&#xA;This is the contents of a single entry in ~/.config/rtx/config.toml&#xA;&#xA;Note that aliases are also stored in this file&#xA;but managed separately with `rtx aliases get`&#xA;&#xA;Usage: get &amp;lt;KEY&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;KEY&amp;gt;&#xA;          The setting to show&#xA;&#xA;Examples:&#xA;  $ rtx settings get legacy_version_file&#xA;  true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings ls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Show current settings&#xA;&#xA;This is the contents of ~/.config/rtx/config.toml&#xA;&#xA;Note that aliases are also stored in this file&#xA;but managed separately with `rtx aliases`&#xA;&#xA;Usage: ls&#xA;&#xA;Examples:&#xA;  $ rtx settings&#xA;  legacy_version_file = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings set&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add/update a setting&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: set &amp;lt;KEY&amp;gt; &amp;lt;VALUE&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;KEY&amp;gt;&#xA;          The setting to set&#xA;&#xA;  &amp;lt;VALUE&amp;gt;&#xA;          The value to set&#xA;&#xA;Examples:&#xA;  $ rtx settings set legacy_version_file true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings unset&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Clears a setting&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: unset &amp;lt;KEY&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;KEY&amp;gt;&#xA;          The setting to remove&#xA;&#xA;Examples:&#xA;  $ rtx settings unset legacy_version_file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx shell&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sets a tool version for the current shell session&#xA;&#xA;Only works in a session where rtx is already activated.&#xA;&#xA;Usage: shell [OPTIONS] [RUNTIME]...&#xA;&#xA;Arguments:&#xA;  [RUNTIME]...&#xA;          Runtime version(s) to use&#xA;&#xA;Options:&#xA;  -u, --unset&#xA;          Removes a previously set version&#xA;&#xA;Examples:&#xA;  $ rtx shell nodejs@18&#xA;  $ node -v&#xA;  v18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx uninstall&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Removes runtime versions&#xA;&#xA;Usage: uninstall &amp;lt;RUNTIME&amp;gt;...&#xA;&#xA;Arguments:&#xA;  &amp;lt;RUNTIME&amp;gt;...&#xA;          Runtime(s) to remove&#xA;&#xA;Examples:&#xA;  $ rtx uninstall nodejs@18.0.0 # will uninstall specific version&#xA;  $ rtx uninstall nodejs        # will uninstall current nodejs version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx version&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Show rtx version&#xA;&#xA;Usage: version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx where&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Display the installation path for a runtime&#xA;&#xA;Must be installed.&#xA;&#xA;Usage: where &amp;lt;RUNTIME&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;RUNTIME&amp;gt;&#xA;          Runtime(s) to look up&#xA;          e.g.: ruby@3&#xA;          if &#34;@&amp;lt;PREFIX&amp;gt;&#34; is specified, it will show the latest installed version that matches the prefix&#xA;          otherwise, it will show the current, active installed version&#xA;&#xA;Examples:&#xA;  # Show the latest installed version of nodejs&#xA;  # If it is is not installed, errors&#xA;  $ rtx where nodejs@18&#xA;  /home/jdx/.local/share/rtx/installs/nodejs/18.0.0&#xA;&#xA;  # Show the current, active install directory of nodejs&#xA;  # Errors if nodejs is not referenced in any .tool-version file&#xA;  $ rtx where nodejs&#xA;  /home/jdx/.local/share/rtx/installs/nodejs/18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx which&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Shows the path that a bin name points to&#xA;&#xA;Usage: which [OPTIONS] &amp;lt;BIN_NAME&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;BIN_NAME&amp;gt;&#xA;          &#xA;&#xA;Options:&#xA;      --plugin&#xA;          Show the plugin name instead of the path&#xA;&#xA;      --version&#xA;          Show the version instead of the path&#xA;&#xA;Examples:&#xA;  $ rtx which node&#xA;  /home/username/.local/share/rtx/installs/nodejs/18.0.0/bin/node&#xA;  $ rtx which node --plugin&#xA;  nodejs&#xA;  $ rtx which node --version&#xA;  18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- RTX:COMMANDS --&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;I don&#39;t want to put a &lt;code&gt;.tool-versions&lt;/code&gt; file into my project since git shows it as an untracked file.&lt;/h3&gt; &#xA;&lt;p&gt;You can make git ignore these files in 3 different ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adding &lt;code&gt;.tool-versions&lt;/code&gt; to project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file. This has the downside that you need to commit the change to the ignore file.&lt;/li&gt; &#xA; &lt;li&gt;Adding &lt;code&gt;.tool-versions&lt;/code&gt; to project&#39;s &lt;code&gt;.git/info/exclude&lt;/code&gt;. This file is local to your project so there is no need to commit it.&lt;/li&gt; &#xA; &lt;li&gt;Adding &lt;code&gt;.tool-versions&lt;/code&gt; to global gitignore (&lt;code&gt;core.excludesFile&lt;/code&gt;). This will cause git to ignore &lt;code&gt;.tool-versions&lt;/code&gt; files in all projects. You can explicitly add one to a project if needed with &lt;code&gt;git add --force .tool-versions&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;rtx is failing or not working right&lt;/h3&gt; &#xA;&lt;p&gt;First try setting &lt;code&gt;RTX_DEBUG=1&lt;/code&gt; or &lt;code&gt;RTX_TRACE=1&lt;/code&gt; and see if that gives you more information. You can also set &lt;code&gt;RTX_LOG_FILE_LEVEL=debug RTX_LOG_FILE=/path/to/logfile&lt;/code&gt; to write logs to a file.&lt;/p&gt; &#xA;&lt;p&gt;If something is happening with the activate hook, you can try disabling it and calling &lt;code&gt;eval &#34;$(rtx hook-env)&#34;&lt;/code&gt; manually. It can also be helpful to use &lt;code&gt;rtx env&lt;/code&gt; which will just output environment variables that would be set. Also consider using &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#shims&#34;&gt;shims&lt;/a&gt; which can be more compatible.&lt;/p&gt; &#xA;&lt;p&gt;If runtime installation isn&#39;t working right, try using the &lt;code&gt;--raw&lt;/code&gt; flag which will install things in series and connect stdin/stdout/stderr directly to the terminal. If a plugin is trying to interact with you for some reason this will make it work.&lt;/p&gt; &#xA;&lt;p&gt;Of course check the version of rtx with &lt;code&gt;rtx --version&lt;/code&gt; and make sure it is the latest. Use &lt;code&gt;rtx self-update&lt;/code&gt; to update it. &lt;code&gt;rtx cache clean&lt;/code&gt; can be used to wipe the internal cache and &lt;code&gt;rtx implode&lt;/code&gt; can be used to remove everything except config.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting a ticket, it&#39;s a good idea to test what you were doing with asdf. That way we can rule out if the issue is with rtx or if it&#39;s with a particular plugin. For example, if &lt;code&gt;rtx install python@latest&lt;/code&gt; doesn&#39;t work, try running &lt;code&gt;asdf install python latest&lt;/code&gt; to see if it&#39;s an issue with asdf-python.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, there is &lt;code&gt;rtx doctor&lt;/code&gt; which will show diagnostic information and any warnings about issues detected with your setup. If you submit a bug report, please include the output of &lt;code&gt;rtx doctor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows support?&lt;/h3&gt; &#xA;&lt;p&gt;This is something we&#39;d like to add! &lt;a href=&#34;https://github.com/jdxcode/rtx/discussions/66&#34;&gt;https://github.com/jdxcode/rtx/discussions/66&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not a near-term goal and it would require plugin modifications, but it should be feasible.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use rtx with http proxies?&lt;/h3&gt; &#xA;&lt;p&gt;Short answer: just set &lt;code&gt;http_proxy&lt;/code&gt; and &lt;code&gt;https_proxy&lt;/code&gt; environment variables. These should be lowercase.&lt;/p&gt; &#xA;&lt;p&gt;rtx doesn&#39;t really do anything with http itself. The only exception to that is checking for new versions and &lt;code&gt;rtx self-update&lt;/code&gt;. It uses &lt;code&gt;git&lt;/code&gt; to clone plugins and the plugins themselves generally will download files with &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However this is really up to the plugin. If you&#39;re having a proxy-related issue installing something you should post an issue on the plugin&#39;s repo.&lt;/p&gt; &#xA;&lt;h3&gt;How do the shorthand plugin names map to repositories?&lt;/h3&gt; &#xA;&lt;p&gt;e.g.: how does &lt;code&gt;rtx plugin install nodejs&lt;/code&gt; know to fetch &lt;a href=&#34;https://github.com/asdf-vm/asdf-nodejs&#34;&gt;https://github.com/asdf-vm/asdf-nodejs&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;p&gt;asdf maintains &lt;a href=&#34;https://github.com/asdf-vm/asdf-plugins&#34;&gt;an index&lt;/a&gt; of shorthands that rtx uses as a base. This is regularly updated every time that rtx has a release. This repository is stored directly into the codebase &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/src/default_shorthands.rs&#34;&gt;here&lt;/a&gt;. The bottom of that file contains modifications that rtx makes. For example, we add &lt;code&gt;node&lt;/code&gt; which points to the same plugin as &lt;code&gt;nodejs&lt;/code&gt; and change &lt;code&gt;python&lt;/code&gt; to point to &lt;a href=&#34;https://github.com/jdxcode/rtx-python&#34;&gt;rtx-python&lt;/a&gt; which is a fork of &lt;a href=&#34;https://github.com/danhper/asdf-python&#34;&gt;asdf-python&lt;/a&gt; with some rtx features like virtualenv support.&lt;/p&gt; &#xA;&lt;p&gt;Over time I suspect that more plugins will be forked like rtx-python as we&#39;re able to offer more rtx-specific enhancements.&lt;/p&gt; &#xA;&lt;h3&gt;How do I migrate from asdf?&lt;/h3&gt; &#xA;&lt;p&gt;First, just install rtx with &lt;code&gt;rtx activate&lt;/code&gt; like in the getting started guide and remove asdf from your shell rc file.&lt;/p&gt; &#xA;&lt;p&gt;Then you can just run &lt;code&gt;rtx install&lt;/code&gt; in a directory with an asdf &lt;code&gt;.tool-versions&lt;/code&gt; file and it will install the runtimes. You could attempt to avoid this by copying the internal directory from asdf over to rtx with &lt;code&gt;cp -r ~/.asdf ~/.local/share/rtx&lt;/code&gt;. That &lt;em&gt;should&lt;/em&gt; work because they use the same structure, however this isn&#39;t officially supported or regularly tested. Alternatively you can set &lt;code&gt;RTX_DATA_DIR=~/.asdf&lt;/code&gt; and see what happens.&lt;/p&gt; &#xA;&lt;h3&gt;How compatible is rtx with asdf?&lt;/h3&gt; &#xA;&lt;p&gt;rtx should be able to read/install any &lt;code&gt;.tool-versions&lt;/code&gt; file used by asdf. Any asdf plugin should be usable in rtx. The commands in rtx are slightly different, such as &lt;code&gt;rtx install nodejs@18.0.0&lt;/code&gt; vs &lt;code&gt;asdf install nodejs 18.0.0&lt;/code&gt;â€”this is done so multiple tools can be specified at once. However, asdf-style syntax is still supported: (&lt;code&gt;rtx install nodejs 18.0.0&lt;/code&gt;). This is the case for most commands, though the help for the command may say that asdf-style syntax is supported.&lt;/p&gt; &#xA;&lt;p&gt;When in doubt, just try asdf syntax and see if it works. If it doesn&#39;t open a ticket. It may not be possible to support every command identically, but we should attempt to make things as consistent as possible.&lt;/p&gt; &#xA;&lt;p&gt;This isn&#39;t important for usability reasons so much as making it so plugins continue to work that call asdf commands.&lt;/p&gt; &#xA;&lt;p&gt;If you need to switch to/from asdf or work in a project with asdf users, you can set &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#rtx_asdf_compat1&#34;&gt;&lt;code&gt;RTX_ASDF_COMPAT=1&lt;/code&gt;&lt;/a&gt;. That prevents rtx from writing &lt;code&gt;.tool-versions&lt;/code&gt; files that will not be compatible with asdf. Also consider using &lt;code&gt;.rtx.toml&lt;/code&gt; instead which won&#39;t conflict with asdf setups.&lt;/p&gt; &#xA;&lt;h3&gt;rtx isn&#39;t working with tmux&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s been reported that PATH doesn&#39;t work correctly with tmux. The fix seems to be calling &lt;code&gt;hook-env&lt;/code&gt; right after activating:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(rtx activate bash)&#34;&#xA;eval &#34;$(rtx hook-env)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be useful if you need to use a runtime right away in an rc file. The default behavior of &lt;code&gt;rtx activate&lt;/code&gt; is that it will only run &lt;code&gt;hook-env&lt;/code&gt; when the shell is about to be displayed, not immediately after activating. Not calling &lt;code&gt;hook-env&lt;/code&gt; immediately appears to work better with direnv.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to asdf&lt;/h2&gt; &#xA;&lt;p&gt;rtx is mostly a clone of asdf, but there are notable areas where improvements have been made.&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;asdf made (what I consider) a poor design decision to use shims that go between a call to a runtime and the runtime itself. e.g.: when you call &lt;code&gt;node&lt;/code&gt; it will call an asdf shim file &lt;code&gt;~/.asdf/shims/node&lt;/code&gt;, which then calls &lt;code&gt;asdf exec&lt;/code&gt;, which then calls the correct version of node.&lt;/p&gt; &#xA;&lt;p&gt;These shims have terrible performance, adding ~120ms to every runtime call. rtx does not use shims and instead updates &lt;code&gt;PATH&lt;/code&gt; so that it doesn&#39;t have any overhead when simply calling binaries. These shims are the main reason that I wrote this. Note that in the demo gif at the top of this README that &lt;code&gt;rtx&lt;/code&gt; isn&#39;t actually used when calling &lt;code&gt;node -v&lt;/code&gt; for this reason. The performance is identical to running node without using rtx.&lt;/p&gt; &#xA;&lt;p&gt;I don&#39;t think it&#39;s possible for asdf to fix these issues. The author of asdf did a great writeup of &lt;a href=&#34;https://stratus3d.com/blog/2022/08/11/asdf-performance/&#34;&gt;performance problems&lt;/a&gt;. asdf is written in bash which certainly makes it challenging to be performant, however I think the real problem is the shim design. I don&#39;t think it&#39;s possible to fix that without a complete rewrite.&lt;/p&gt; &#xA;&lt;p&gt;rtx does call an internal command &lt;code&gt;rtx hook-env&lt;/code&gt; every time the directory has changed, but because it&#39;s written in Rust, this is very quickâ€”taking ~10ms on my machine. 4ms if there are no changes, 14ms if it&#39;s a full reload.&lt;/p&gt; &#xA;&lt;p&gt;tl;dr: asdf adds overhead (~120ms) when calling a runtime, rtx adds a small amount of overhead (~10ms) when the prompt loads.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables in rtx&lt;/h3&gt; &#xA;&lt;p&gt;asdf only helps manage runtime executables. However, some tools are managed via environment variables (notably Java which switches via &lt;code&gt;JAVA_HOME&lt;/code&gt;). This isn&#39;t supported very well in asdf and requires a separate shell extension just to manage.&lt;/p&gt; &#xA;&lt;p&gt;However asdf &lt;em&gt;plugins&lt;/em&gt; have a &lt;code&gt;bin/exec-env&lt;/code&gt; script that is used for exporting environment variables like &lt;a href=&#34;https://github.com/halcyon/asdf-java/raw/master/bin/exec-env&#34;&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt;&lt;/a&gt;. rtx simply exports the environment variables from the &lt;code&gt;bin/exec-env&lt;/code&gt; script in the plugin but places them in the shell for &lt;em&gt;all&lt;/em&gt; commands. In asdf it only exports those commands when the shim is called. This means if you call &lt;code&gt;java&lt;/code&gt; it will set &lt;code&gt;JAVA_HOME&lt;/code&gt;, but not if you call some Java tool like &lt;code&gt;mvn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means we&#39;re just using the existing plugin script but because rtx doesn&#39;t use shims it can be used for more things. It would be trivial to make a plugin that exports arbitrary environment variables like &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;dotenv&lt;/a&gt; or &lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;UX&lt;/h3&gt; &#xA;&lt;p&gt;Some commands are the same in asdf but others have been changed. Everything that&#39;s possible in asdf should be possible in rtx but may use slightly different syntax. rtx has more forgiving commands, such as using fuzzy-matching, e.g.: &lt;code&gt;rtx install nodejs@18&lt;/code&gt;. While in asdf you &lt;em&gt;can&lt;/em&gt; run &lt;code&gt;asdf install nodejs latest:18&lt;/code&gt;, you can&#39;t use &lt;code&gt;latest:18&lt;/code&gt; in a &lt;code&gt;.tool-versions&lt;/code&gt; file or many other places. In &lt;code&gt;rtx&lt;/code&gt; you can use fuzzy-matching everywhere.&lt;/p&gt; &#xA;&lt;p&gt;asdf requires several steps to install a new runtime if the plugin isn&#39;t installed, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ asdf plugin add nodejs&#xA;$ asdf install nodejs latest:18&#xA;$ asdf local nodejs latest:18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;code&gt;rtx&lt;/code&gt; this can all be done in a single step to set the local runtime version. If the plugin and/or runtime needs to be installed it will prompt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/564031&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/564031.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve found asdf to be particularly rigid and difficult to learn. It also made strange decisions like having &lt;code&gt;asdf list all&lt;/code&gt; but &lt;code&gt;asdf latest --all&lt;/code&gt; (why is one a flag and one a positional argument?). &lt;code&gt;rtx&lt;/code&gt; makes heavy use of aliases so you don&#39;t need to remember if it&#39;s &lt;code&gt;rtx plugin add nodejs&lt;/code&gt; or &lt;code&gt;rtx plugin install nodejs&lt;/code&gt;. If I can guess what you meant, then I&#39;ll try to get rtx to respond in the right way.&lt;/p&gt; &#xA;&lt;p&gt;That said, there are a lot of great things about asdf. It&#39;s the best multi-runtime manager out there and I&#39;ve really been impressed with the plugin system. Most of the design decisions the authors made were very good. I really just have 2 complaints: the shims and the fact it&#39;s written in Bash.&lt;/p&gt; &#xA;&lt;h3&gt;CI/CD&lt;/h3&gt; &#xA;&lt;p&gt;Using rtx in CI/CD is a great way to synchronize tool versions for dev/build.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/jdxcode/rtx-action&#34;&gt;&lt;code&gt;jdxcode/rtx-action&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: jdxcode/rtx-action@v1&#xA;- run: node -v # will be the node version from `.tool-versions`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shims&lt;/h2&gt; &#xA;&lt;p&gt;While the PATH design of rtx works great in most cases, there are some situations where shims are preferable. One example is when calling rtx binaries from an IDE.&lt;/p&gt; &#xA;&lt;p&gt;To support this, there is experimental support for using rtx in a &#34;shim&#34; mode. To use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rtx settings set experimental true&#xA;$ rtx settings set shims_dir ~/.rtx/shims&#xA;$ rtx i nodejs@18.0.0&#xA;$ rtx reshim&#xA;$ ~/.rtx/shims/node -v&#xA;v18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;direnv&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt; and rtx both manage environment variables based on directory. Because they both analyze the current environment variables before and after their respective &#34;hook&#34; commands are run, they can conflict with each other. As a result, there were a &lt;a href=&#34;https://github.com/jdxcode/rtx/issues/8&#34;&gt;number of issues with direnv&lt;/a&gt;. However, we think we&#39;ve mitigated these. If you find that rtx and direnv are not working well together, please comment on that ticket ideally with a good description of your directory layout so we can reproduce the problem.&lt;/p&gt; &#xA;&lt;p&gt;If there are remaining issues, they&#39;re likely to do with the ordering of PATH. This means it would really only be a problem if you were trying to manage the same runtime with direnv and rtx. For example, you may use &lt;code&gt;layout python&lt;/code&gt; in an &lt;code&gt;.envrc&lt;/code&gt; but also be maintaining a &lt;code&gt;.tool-versions&lt;/code&gt; file with python in it as well.&lt;/p&gt; &#xA;&lt;p&gt;A more typical usage of direnv would be to set some arbitrary environment variables, or add unrelated binaries to PATH. In these cases, rtx will not interfere with direnv.&lt;/p&gt; &#xA;&lt;h3&gt;rtx inside of direnv (&lt;code&gt;use rtx&lt;/code&gt; in &lt;code&gt;.envrc&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;If you do encounter issues with &lt;code&gt;rtx activate&lt;/code&gt;, or just want to use direnv in an alternate way, this is a simpler setup that&#39;s less likely to cause issuesâ€”at the cost of functionality.&lt;/p&gt; &#xA;&lt;p&gt;This may be required if you want to use direnv&#39;s &lt;code&gt;layout python&lt;/code&gt; with rtx. Otherwise there are situations where rtx will override direnv&#39;s PATH. &lt;code&gt;use rtx&lt;/code&gt; ensures that direnv always has control.&lt;/p&gt; &#xA;&lt;p&gt;To do this, first use &lt;code&gt;rtx&lt;/code&gt; to build a &lt;code&gt;use_rtx&lt;/code&gt; function that you can use in &lt;code&gt;.envrc&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ rtx direnv activate &amp;gt; ~/.config/direnv/lib/use_rtx.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now in your &lt;code&gt;.envrc&lt;/code&gt; file add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;use rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;direnv will now call rtx to export its environment variables. You&#39;ll need to make sure to add &lt;code&gt;use_rtx&lt;/code&gt; to all projects that use rtx (or use direnv&#39;s &lt;code&gt;source_up&lt;/code&gt; to load it from a subdirectory). You can also add &lt;code&gt;use rtx&lt;/code&gt; to &lt;code&gt;~/.config/direnv/direnvrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that in this method direnv typically won&#39;t know to refresh &lt;code&gt;.tool-versions&lt;/code&gt; files unless they&#39;re at the same level as a &lt;code&gt;.envrc&lt;/code&gt; file. You&#39;ll likely always want to have a &lt;code&gt;.envrc&lt;/code&gt; file next to your &lt;code&gt;.tool-versions&lt;/code&gt; for this reason. To make this a little easier to manage, I encourage &lt;em&gt;not&lt;/em&gt; actually using &lt;code&gt;.tool-versions&lt;/code&gt; at all, and instead setting environment variables entirely in &lt;code&gt;.envrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export RTX_NODEJS_VERSION=18.0.0&#xA;export RTX_PYTHON_VERSION=3.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course if you use &lt;code&gt;rtx activate&lt;/code&gt;, then these steps won&#39;t have been necessary and you can use rtx as if direnv was not used.&lt;/p&gt; &#xA;&lt;p&gt;If you continue to struggle, you can also try using the &lt;a href=&#34;https://raw.githubusercontent.com/jdxcode/rtx/main/#shims&#34;&gt;experimental shims feature&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Do you need direnv?&lt;/h3&gt; &#xA;&lt;p&gt;While making rtx compatible with direnv is, and will always be a major goal of this project, I also want rtx to be capable of replacing direnv if needed. This is why rtx includes support for managing env vars and virtualenv for python using &lt;code&gt;.rtx.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find you continue to need direnv, please open an issue and let me know what it is to see if it&#39;s something rtx could support. rtx will never be as capable as direnv with a DSL like &lt;code&gt;.envrc&lt;/code&gt;, but I think we can handle enough common use cases to make that unnecessary for most people.&lt;/p&gt; &#xA;&lt;h2&gt;Cache Behavior&lt;/h2&gt; &#xA;&lt;p&gt;rtx makes use of caching in many places in order to be efficient. The details about how long to keep cache for should eventually all be configurable. There may be gaps in the current behavior where things are hardcoded, but I&#39;m happy to add more settings to cover whatever config is needed.&lt;/p&gt; &#xA;&lt;p&gt;Below I explain the behavior it uses around caching. If you&#39;re seeing behavior where things don&#39;t appear to be updating, this is a good place to start.&lt;/p&gt; &#xA;&lt;h3&gt;Plugin/Runtime Cache&lt;/h3&gt; &#xA;&lt;p&gt;Each plugin has a cache that&#39;s stored in &lt;code&gt;~/$RTX_CACHE_DIR/&amp;lt;PLUGIN&amp;gt;&lt;/code&gt;. It stores the list of versions available for that plugin (&lt;code&gt;rtx ls-remote &amp;lt;PLUGIN&amp;gt;&lt;/code&gt;), the legacy filenames (see below), the list of aliases, the bin directories within each runtime installation, and the result of running &lt;code&gt;exec-env&lt;/code&gt; after the runtime was installed.&lt;/p&gt; &#xA;&lt;p&gt;Remote versions are updated daily by default or anytime that &lt;code&gt;rtx ls-remote&lt;/code&gt; is called explicitly. The file is zlib messagepack, if you want to view it you can run the following (requires &lt;a href=&#34;https://github.com/msgpack/msgpack-cli&#34;&gt;msgpack-cli&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;cat ~/$RTX_CACHE_DIR/nodejs/remote_versions.msgpack.z | perl -e &#39;use Compress::Raw::Zlib;my $d=new Compress::Raw::Zlib::Inflate();my $o;undef $/;$d-&amp;gt;inflate(&amp;lt;&amp;gt;,$o);print $o;&#39; | msgpack-cli decode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the caching of &lt;code&gt;exec-env&lt;/code&gt; may be problematic if the script isn&#39;t simply exporting static values. The vast majority of &lt;code&gt;exec-env&lt;/code&gt; scripts only export static values, but if you&#39;re working with a plugin that has a dynamic &lt;code&gt;exec-env&lt;/code&gt; submit a ticket and we can try to figure out what to do.&lt;/p&gt; &#xA;&lt;p&gt;Caching &lt;code&gt;exec-env&lt;/code&gt; massively improved the performance of rtx since it requires calling bash every time rtx is initialized. Ideally, we can keep this behavior.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AmbientRun/Ambient</title>
    <updated>2023-03-05T01:59:40Z</updated>
    <id>tag:github.com,2023-03-05:/AmbientRun/Ambient</id>
    <link href="https://github.com/AmbientRun/Ambient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The multiplayer game engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ambient&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/ambient_api&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/ambient_api&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/ambient_api&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/ambient_api&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AmbientRun/Ambient#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true&#34; alt=&#34;MIT/Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/PhmPn6m8Tw&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/894505972289134632&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ambient is a runtime for building high-performance multiplayer games and 3D applications, powered by WebAssembly, Rust and WebGPU.&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://www.ambient.run/post/introducing-ambient&#34;&gt;announcement blog post&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Design principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Seamless networking&lt;/strong&gt;: Ambient is both your server and client. All you need to do is to build your server and/or client-side logic: the runtime handles synchronization of data for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: Projects you build for Ambient are executed in isolation through the power of &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; - so that if something crashes, it wonâ€™t take down your entire program. It also means that you can run untrusted code safely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data-oriented design&lt;/strong&gt;: The core data model of Ambient is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity_component_system&#34;&gt;entity component system&lt;/a&gt; which each WASM module can manipulate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Language-agnostic&lt;/strong&gt;: You will be able to build Ambient modules in any language that can compile to WebAssembly. At present, Rust is the only supported language, but we are working on expanding to other languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single executable&lt;/strong&gt;: Ambient is a single executable which can run on Windows, Mac and Linux. It can act as a server or as a client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;: Ambient allows you to define custom components and &#34;concepts&#34; (collections of components). As long as your Ambient projects use the same components and concepts, they will be able to share data and interoperate, even if they have no awareness of each other.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asset pipeline and streaming&lt;/strong&gt;: Ambient has an &lt;a href=&#34;https://ambientrun.github.io/Ambient/reference/asset_pipeline.html&#34;&gt;asset pipeline&lt;/a&gt; that is capable of compiling multiple asset formats, including &lt;code&gt;.glb&lt;/code&gt; and &lt;code&gt;.fbx&lt;/code&gt;. The assets are always streamed over the network, so your clients will receive everything they need when they join.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful renderer&lt;/strong&gt;: The Ambient renderer is GPU-driven, with both culling and level-of-detail switching being handled entirely by the GPU. By default, it uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Physically_based_rendering&#34;&gt;PBR&lt;/a&gt;. It also supports cascading shadow maps and instances everything that can be instanced.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ambientrun.github.io/Ambient/&#34;&gt;documentation&lt;/a&gt; for a guide on how to get started, or browse the &lt;a href=&#34;https://github.com/AmbientRun/Ambient/tree/main/guest/rust/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get Ambient is by downloading the latest release &lt;a href=&#34;https://github.com/AmbientRun/Ambient/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For alternative installation options, go to the &lt;a href=&#34;https://ambientrun.github.io/Ambient/user/installing.html&#34;&gt;documentation on installing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Ambient is in an alpha stage and the API will be iterated on heavily. We are working towards a stable release.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ECS&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;Single-threaded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WASM API&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;Rust is the only supported guest language right now, and WASM can only be used on the server. We are working on clientside WASM; see &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/6&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multiplayer/networking&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;Multiplayer is server-authoritative without any prediction or compensation. See &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/150&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPU-driven renderer&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FBX &amp;amp; glTF loading&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Physics (through PhysX)&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;Using PhysX 4.1. PhysX 5 support is tracked in &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/155&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Animations&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Skinmeshing&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shadow maps&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Decals&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPU culling and LoD&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multi-platform&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;Windows, Mac, and Linux so far. x86-64 and ARM64 are actively supported; other platforms may also work, but require testing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Run on Web&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/151&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multithreading API&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§&lt;/td&gt; &#xA;   &lt;td&gt;Multithreading is already used internally, but we want to expose multithreading functionality within the WASM API. This may be explicit (i.e. task- or thread-spawning) or implicit (WASM modules being scheduled across threads).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UI API&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§&lt;/td&gt; &#xA;   &lt;td&gt;A React-like UI library already exists in the repo, and we&#39;re working on exposing it through the WASM API. See &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/40&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Custom shaders&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§&lt;/td&gt; &#xA;   &lt;td&gt;Custom shaders are supported by the renderer, but are not yet exposed in the API. See &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/98&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hot-reloading assets&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/12&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§&lt;/td&gt; &#xA;   &lt;td&gt;Audio is supported, but not currently exposed. See &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/76&#34;&gt;this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ECS save/load&lt;/td&gt; &#xA;   &lt;td&gt;ðŸš§&lt;/td&gt; &#xA;   &lt;td&gt;For loading, &lt;a href=&#34;https://github.com/AmbientRun/Ambient/issues/71&#34;&gt;see this issue&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Each example in the &lt;a href=&#34;https://raw.githubusercontent.com/AmbientRun/Ambient/main/guest/rust/examples/&#34;&gt;examples&lt;/a&gt; directory can be run with Ambient as both client and server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd guest/rust/examples/tictactoe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ambient run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every example can also be run server-only. To do so:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd guest/rust/examples/tictactoe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ambient serve&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will start a server that other people, including yourself, can join (assuming that ports 8999 and 9000 are forwarded):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ambient join [IP_OF_SERVER]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that content is always streamed, so the only thing the joining user requires is Ambient itself to join the session.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome community contributions to this project.&lt;/p&gt; &#xA;&lt;p&gt;Please talk with us on Discord beforehand if you&#39;d like to contribute a larger piece of work.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/AmbientRun/Ambient/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/AmbientRun/Ambient/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>firecracker-microvm/firecracker</title>
    <updated>2023-03-05T01:59:40Z</updated>
    <id>tag:github.com,2023-03-05:/firecracker-microvm/firecracker</id>
    <link href="https://github.com/firecracker-microvm/firecracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Secure and fast microVMs for serverless computing.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/images/fc_logo_full_transparent-bg.png&#34; alt=&#34;Firecracker Logo Title&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our mission is to enable secure, multi-tenant, minimal-overhead execution of container and function workloads.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the Firecracker Charter &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Firecracker?&lt;/h2&gt; &#xA;&lt;p&gt;Firecracker is an open source virtualization technology that is purpose-built for creating and managing secure, multi-tenant container and function-based services that provide serverless operational models. Firecracker runs workloads in lightweight virtual machines, called microVMs, which combine the security and isolation properties provided by hardware virtualization technology with the speed and flexibility of containers.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The main component of Firecracker is a virtual machine monitor (VMM) that uses the Linux Kernel Virtual Machine (KVM) to create and run microVMs. Firecracker has a minimalist design. It excludes unnecessary devices and guest-facing functionality to reduce the memory footprint and attack surface area of each microVM. This improves security, decreases the startup time, and increases hardware utilization. Firecracker has also been integrated in container runtimes, for example &lt;a href=&#34;https://github.com/kata-containers/documentation/wiki/Initial-release-of-Kata-Containers-with-Firecracker-support&#34;&gt;Kata Containers&lt;/a&gt; and &lt;a href=&#34;https://github.com/weaveworks/ignite&#34;&gt;Weaveworks Ignite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Firecracker was developed at Amazon Web Services to accelerate the speed and efficiency of services like &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/fargate/&#34;&gt;AWS Fargate&lt;/a&gt;. Firecracker is open sourced under &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/LICENSE&#34;&gt;Apache version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To read more about Firecracker, check out &lt;a href=&#34;https://firecracker-microvm.github.io&#34;&gt;firecracker-microvm.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Firecracker, download the latest &lt;a href=&#34;https://github.com/firecracker-microvm/firecracker/releases&#34;&gt;release&lt;/a&gt; binaries or build it from source.&lt;/p&gt; &#xA;&lt;p&gt;You can build Firecracker on any Unix/Linux system that has Docker running (we use a development container) and &lt;code&gt;bash&lt;/code&gt; installed, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/firecracker-microvm/firecracker&#xA;cd firecracker&#xA;tools/devtool build&#xA;toolchain=&#34;$(uname -m)-unknown-linux-musl&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Firecracker binary will be placed at &lt;code&gt;build/cargo_target/${toolchain}/debug/firecracker&lt;/code&gt;. For more information on building, testing, and running Firecracker, go to the &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md&#34;&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The overall security of Firecracker microVMs, including the ability to meet the criteria for safe multi-tenant computing, depends on a well configured Linux host operating system. A configuration that we believe meets this bar is included in &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/prod-host-setup.md&#34;&gt;the production host setup document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Firecracker is already running production workloads within AWS, but it&#39;s still Day 1 on the journey guided by our &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md&#34;&gt;mission&lt;/a&gt;. There&#39;s a lot more to build and we welcome all contributions.&lt;/p&gt; &#xA;&lt;p&gt;To contribute to Firecracker, check out the development setup section in the &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md&#34;&gt;getting started guide&lt;/a&gt; and then the Firecracker &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;New Firecracker versions are released via the GitHub repository &lt;a href=&#34;https://github.com/firecracker-microvm/firecracker/releases&#34;&gt;releases&lt;/a&gt; page, typically every two or three months. A history of changes is recorded in our &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Firecracker release policy is detailed &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/RELEASE_POLICY.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;Firecracker&#39;s overall architecture is described in &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/design.md&#34;&gt;the design document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features &amp;amp; Capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Firecracker consists of a single micro Virtual Machine Manager process that exposes an API endpoint to the host once started. The API is &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/src/api_server/swagger/firecracker.yaml&#34;&gt;specified in OpenAPI format&lt;/a&gt;. Read more about it in the &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/api_requests&#34;&gt;API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;API endpoint&lt;/strong&gt; can be used to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configure the microvm by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Setting the number of vCPUs (the default is 1).&lt;/li&gt; &#xA;   &lt;li&gt;Setting the memory size (the default is 128 MiB).&lt;/li&gt; &#xA;   &lt;li&gt;[x86_64 only] Choosing a CPU template (currently, C3, T2 and T2S are available).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add one or more network interfaces to the microVM.&lt;/li&gt; &#xA; &lt;li&gt;Add one or more read-write or read-only disks to the microVM, each represented by a file-backed block device.&lt;/li&gt; &#xA; &lt;li&gt;Trigger a block device re-scan while the guest is running. This enables the guest OS to pick up size changes to the block device&#39;s backing file.&lt;/li&gt; &#xA; &lt;li&gt;Change the backing file for a block device, before or after the guest boots.&lt;/li&gt; &#xA; &lt;li&gt;Configure rate limiters for virtio devices which can limit the bandwidth, operations per second, or both.&lt;/li&gt; &#xA; &lt;li&gt;Configure the logging and metric system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[BETA]&lt;/code&gt; Configure the data tree of the guest-facing metadata service. The service is only available to the guest if this resource is configured.&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/vsock.md&#34;&gt;vsock socket&lt;/a&gt; to the microVM.&lt;/li&gt; &#xA; &lt;li&gt;Start the microVM using a given kernel image, root file system, and boot arguments.&lt;/li&gt; &#xA; &lt;li&gt;[x86_64 only] Stop the microVM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Built-in Capabilities&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demand fault paging and CPU oversubscription enabled by default.&lt;/li&gt; &#xA; &lt;li&gt;Advanced, thread-specific seccomp filters for enhanced security.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/jailer.md&#34;&gt;Jailer&lt;/a&gt; process for starting Firecracker in production scenarios; applies a cgroup/namespace isolation barrier and then drops privileges.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;p&gt;We continuously test Firecracker on machines with the following CPUs micro-architectures: Intel Skylake, Intel Cascade Lake, Intel Ice Lake, AMD Zen 3, ARM64 Neoverse N1 and ARM64 Neoverse V1.&lt;/p&gt; &#xA;&lt;p&gt;Firecracker is &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/RELEASE_POLICY.md&#34;&gt;generally available&lt;/a&gt; on Intel x86_64, AMD x86_64 and ARM64 CPUs (starting from release v0.24) that offer hardware virtualization support, and that are released starting with 2015. All production use cases should follow &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/prod-host-setup.md&#34;&gt;these production host setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Firecracker may work on other x86 and Arm 64-bit CPUs with support for hardware virtualization, but any such platform is currently not supported and not fit for production. If you want to run Firecracker on such platforms, please &lt;a href=&#34;https://github.com/firecracker-microvm/firecracker/issues/new?assignees=&amp;amp;labels=&amp;amp;template=feature_request.md&amp;amp;title=%5BFeature+Request%5D+Title&#34;&gt;open a feature request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Firecracker currently only supports little-endian platforms. Firecracker will not compile for big-endian architectures, and will not work correctly with big-endian configured guests.&lt;/p&gt; &#xA;&lt;h2&gt;Supported kernels&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported host/guest kernels and future kernel related plans, check out our &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/kernel-policy.md&#34;&gt;kernel support policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues and Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/api_requests/actions.md#sendctrlaltdel&#34;&gt;SendCtrlAltDel&lt;/a&gt; API request is not supported for aarch64 enabled microVMs.&lt;/li&gt; &#xA; &lt;li&gt;Configuring CPU templates is only supported for Intel enabled microVMs.&lt;/li&gt; &#xA; &lt;li&gt;If a CPU template is not used on x86_64, overwrites of &lt;code&gt;MSR_IA32_TSX_CTRL&lt;/code&gt; MSR value will not be preserved after restoring from a snapshot.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;pl031&lt;/code&gt; RTC device on aarch64 does not support interrupts, so guest programs which use an RTC alarm (e.g. &lt;code&gt;hwclock&lt;/code&gt;) will not work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Firecracker&#39;s performance characteristics are listed as part of the &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SPECIFICATION.md&#34;&gt;specification documentation&lt;/a&gt;. All specifications are a part of our commitment to supporting container and function workloads in serverless operational models, and are therefore enforced via continuous integration testing.&lt;/p&gt; &#xA;&lt;h2&gt;Policy for Security Disclosures&lt;/h2&gt; &#xA;&lt;p&gt;The security of Firecracker is our top priority. If you suspect you have uncovered a vulnerability, contact us privately, as outlined in our &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md&#34;&gt;security policy document&lt;/a&gt;; we will immediately prioritize your disclosure.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ &amp;amp; Contact&lt;/h2&gt; &#xA;&lt;p&gt;Frequently asked questions are collected in our &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/FAQ.md&#34;&gt;FAQ doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can get in touch with the Firecracker community in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Security-related issues, see our &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md&#34;&gt;security policy document&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Chat with us on our &lt;a href=&#34;https://join.slack.com/t/firecracker-microvm/shared_invite/zt-1fecwrorm-x5URTlOzBR2fExTU2mWfug&#34;&gt;Slack workspace&lt;/a&gt; &lt;em&gt;Note: most of the maintainers are on a European time zone.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open a GitHub issue in this repository.&lt;/li&gt; &#xA; &lt;li&gt;Email the maintainers at &lt;a href=&#34;mailto:firecracker-maintainers@amazon.com&#34;&gt;firecracker-maintainers@amazon.com&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When communicating within the Firecracker community, please mind our &lt;a href=&#34;https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>