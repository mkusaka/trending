<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T02:04:28Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>biomejs/biome</title>
    <updated>2023-09-10T02:04:28Z</updated>
    <id>tag:github.com,2023-09-10:/biomejs/biome</id>
    <link href="https://github.com/biomejs/biome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolchain for web projects, aimed to provide functionalities to maintain them.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Biome - Toolchain of the web&#34; src=&#34;https://raw.githubusercontent.com/biomejs/resources/main/biome-logo-slogan.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/BypW39g6Yc&#34;&gt;&lt;img src=&#34;https://badgen.net/discord/online-members/BypW39g6Yc?icon=discord&amp;amp;label=discord&amp;amp;color=green&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/biomejs/biome/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/biomejs/biome/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI on main&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@biomejs/biome/v/latest&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/@biomejs/biome?icon=npm&amp;amp;color=green&amp;amp;label=%40biomejs%2Fbiome&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=biomejs.biome&#34;&gt;&lt;img src=&#34;https://badgen.net/vs-marketplace/v/biomejs.biome?label=vscode&amp;amp;icon=visualstudio&amp;amp;color=green&#34; alt=&#34;VSCode version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open-vsx.org/extension/biomejs/biome&#34;&gt;&lt;img src=&#34;https://badgen.net/open-vsx/version/biomejs/biome?label=open-vsx&amp;amp;color=green&#34; alt=&#34;Open VSX version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; formats and lints your code in a &lt;a href=&#34;https://github.com/biomejs/biome/raw/main/benchmark/README.md&#34;&gt;fraction of a second&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; supports JavaScript, TypeScript, JSON, and CSS. It aims to support &lt;a href=&#34;https://biomejs.dev/internals/language-support/&#34;&gt;all main languages&lt;/a&gt; of modern web development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; has sane defaults and requires minimal configuration. &lt;strong&gt;Biome&lt;/strong&gt; helps you as much as possible by displaying detailed and contextualized diagnostics. Read more about our &lt;a href=&#34;https://biomejs.dev/internals/philosophy/&#34;&gt;project philosophy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; unifies functionality that has previously been separate tools. Building upon a shared base allows us to provide a cohesive experience for processing code, displaying errors, parallelizing work, caching, and configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; is designed to eventually replace &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;, &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;, &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;, &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt;, and others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; has first-class IDE support, with a sophisticated parser that represents the source text in full fidelity and top-notch error recovery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; is &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt; and moderated under the &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://biomejs.dev/&#34;&gt;homepage&lt;/a&gt; to learn more about Biome, or directly head to the &lt;a href=&#34;https://biomejs.dev/guides/getting-started/&#34;&gt;Getting Started guide&lt;/a&gt; to start using Biome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>containers/youki</title>
    <updated>2023-09-10T02:04:28Z</updated>
    <id>tag:github.com,2023-09-10:/containers/youki</id>
    <link href="https://github.com/containers/youki" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A container runtime written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;youki: A container runtime in Rust&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/zHnyXKSQFD&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/849943000770412575.svg?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/containers/youki/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/containers/youki&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/containers/youki/actions&#34;&gt;&lt;img src=&#34;https://github.com/containers/youki/actions/workflows/main.yml/badge.svg?branch=main&#34; alt=&#34;Github CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/containers/youki&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/containers/youki/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/containers/youki/main/docs/youki.png&#34; width=&#34;450&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;youki is an implementation of the &lt;a href=&#34;https://github.com/opencontainers/runtime-spec&#34;&gt;OCI runtime-spec&lt;/a&gt; in Rust, similar to &lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;runc&lt;/a&gt;.&lt;br&gt; Your ideas are welcome &lt;a href=&#34;https://github.com/containers/youki/issues/10&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Install&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://containers.github.io/youki/user/basic_setup.html#quick-install&#34;&gt;User Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About the name&lt;/h1&gt; &#xA;&lt;p&gt;youki is pronounced as /joʊki/ or yoh-key. youki is named after the Japanese word &#39;youki&#39;, which means &#39;a container&#39;. In Japanese language, youki also means &#39;cheerful&#39;, &#39;merry&#39;, or &#39;hilarious&#39;.&lt;/p&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;Here is why we are writing a new container runtime in Rust.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Rust is one of the best languages to implement the oci-runtime spec. Many very nice container tools are currently written in Go. However, the container runtime requires the use of system calls, which requires a bit of special handling when implemented in Go. This is too tricky (e.g. &lt;em&gt;namespaces(7)&lt;/em&gt;, &lt;em&gt;fork(2)&lt;/em&gt;); with Rust, it&#39;s not that tricky. And, unlike in C, Rust provides the benefit of memory safety. While Rust is not yet a major player in the container field, it has the potential to contribute a lot: something this project attempts to exemplify.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;youki has the potential to be faster and use less memory than runc, and therefore work in environments with tight memory usage requirements. Here is a simple benchmark of a container from creation to deletion.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;Runtime&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;Time (mean ± σ)&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;Range (min … max)&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;youki&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;198.4 ms ± 52.1 ms&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;97.2 ms … 296.1 ms&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;runc&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;352.3 ms ± 53.3 ms&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;248.3 ms … 772.2 ms&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;crun&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;153.5 ms ± 21.6 ms&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;80.9 ms … 196.6 ms&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Details about the benchmark&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;A command used for the benchmark&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hyperfine --prepare &#39;sudo sync; echo 3 | sudo tee /proc/sys/vm/drop_caches&#39; --warmup 10 --min-runs 100 &#39;sudo ./youki create -b tutorial a &amp;amp;&amp;amp; sudo ./youki start a &amp;amp;&amp;amp; sudo ./youki delete -f a&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Environment&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./youki info&#xA;Version           0.0.1&#xA;Kernel-Release    5.11.0-41-generic&#xA;Kernel-Version    #45-Ubuntu SMP Fri Nov 5 11:37:01 UTC 2021&#xA;Architecture      x86_64&#xA;Operating System  Ubuntu 21.04&#xA;Cores             12&#xA;Total Memory      32025&#xA;Cgroup setup      hybrid&#xA;Cgroup mounts&#xA;  blkio           /sys/fs/cgroup/blkio&#xA;  cpu             /sys/fs/cgroup/cpu,cpuacct&#xA;  cpuacct         /sys/fs/cgroup/cpu,cpuacct&#xA;  cpuset          /sys/fs/cgroup/cpuset&#xA;  devices         /sys/fs/cgroup/devices&#xA;  freezer         /sys/fs/cgroup/freezer&#xA;  hugetlb         /sys/fs/cgroup/hugetlb&#xA;  memory          /sys/fs/cgroup/memory&#xA;  net_cls         /sys/fs/cgroup/net_cls,net_prio&#xA;  net_prio        /sys/fs/cgroup/net_cls,net_prio&#xA;  perf_event      /sys/fs/cgroup/perf_event&#xA;  pids            /sys/fs/cgroup/pids&#xA;  unified         /sys/fs/cgroup/unified&#xA;CGroup v2 controllers&#xA;  cpu             detached&#xA;  cpuset          detached&#xA;  hugetlb         detached&#xA;  io              detached&#xA;  memory          detached&#xA;  pids            detached&#xA;  device          attached&#xA;Namespaces        enabled&#xA;  mount           enabled&#xA;  uts             enabled&#xA;  ipc             enabled&#xA;  user            enabled&#xA;  pid             enabled&#xA;  network         enabled&#xA;  cgroup          enabled&#xA;$ ./youki --version&#xA;youki version 0.0.1&#xA;commit: 0.0.1-0-0be33bf&#xA;$ runc -v&#xA;runc version 1.0.0-rc93&#xA;commit: 12644e614e25b05da6fd08a38ffa0cfe1903fdec&#xA;spec: 1.0.2-dev&#xA;go: go1.13.15&#xA;libseccomp: 2.5.1&#xA;$ crun --version&#xA;crun version 0.19.1.45-4cc7&#xA;commit: 4cc7fa1124cce75dc26e12186d9cbeabded2b710&#xA;spec: 1.0.0&#xA;+SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +YAJL&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I have fun implementing this. In fact, this may be the most important.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Related project&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containers/oci-spec-rs&#34;&gt;containers/oci-spec-rs&lt;/a&gt; - OCI Runtime and Image Spec in Rust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Status of youki&lt;/h1&gt; &#xA;&lt;p&gt;youki is not at the practical stage yet. However, it is getting closer to practical use, running with docker and passing all the default tests provided by &lt;a href=&#34;https://github.com/opencontainers/runtime-tools&#34;&gt;opencontainers/runtime-tools&lt;/a&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/containers/youki/main/docs/demo.gif&#34; alt=&#34;youki demo&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Feature&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;State&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Containerd&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Running via Containerd&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Docker&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Running via Docker&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Podman&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Running via Podman&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;pivot_root&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Change the root directory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mounts&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mount files and directories to container&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Namespaces&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Isolation of various resources&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Capabilities&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Limiting root privileges&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cgroups v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Resource limitations, etc&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cgroups v2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Improved version of v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Support is complete except for devices. WIP on &lt;a href=&#34;https://github.com/containers/youki/issues/230&#34;&gt;#230&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Systemd cgroup driver&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Setting up a cgroup using systemd&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Seccomp&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Filtering system calls&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hooks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Add custom processing during container creation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rootless&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Running a container without root privileges&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OCI Compliance&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Compliance with OCI Runtime Spec&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅ 50 out of 50 test cases passing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CRIU Integration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Functionality to checkpoint/restore containers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Initial checkpoint support as described in &lt;a href=&#34;https://github.com/containers/youki/pull/641&#34;&gt;#641&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Design and implementation of youki&lt;/h1&gt; &#xA;&lt;p&gt;The User and Developer Documentation for youki is hosted at &lt;a href=&#34;https://containers.github.io/youki/&#34;&gt;https://containers.github.io/youki/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/containers/youki/main/docs/.drawio.svg?sanitize=true&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Local build is only supported on Linux. For other platforms, please use the &lt;a href=&#34;https://raw.githubusercontent.com/containers/youki/main/#setting-up-vagrant&#34;&gt;Vagrantfile&lt;/a&gt; that we have prepared. You can also spin up a fully preconfigured development environment in the cloud with gitpod.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/containers/youki&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requires&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rust(See &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;here&lt;/a&gt;), edition 2021&lt;/li&gt; &#xA; &lt;li&gt;linux kernel ≥ 5.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;just&lt;/code&gt;, follow the instruction &lt;a href=&#34;https://github.com/casey/just#installation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Debian, Ubuntu and related distributions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt-get install    \&#xA;      pkg-config          \&#xA;      libsystemd-dev      \&#xA;      libdbus-glib-1-dev  \&#xA;      build-essential     \&#xA;      libelf-dev          \&#xA;      libseccomp-dev      \&#xA;      libclang-dev        \&#xA;      glibc-static        \&#xA;      libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora, CentOS, RHEL and related distributions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dnf install          \&#xA;      pkg-config            \&#xA;      systemd-devel         \&#xA;      dbus-devel            \&#xA;      elfutils-libelf-devel \&#xA;      libseccomp-devel      \&#xA;      clang-devel           \&#xA;      openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:containers/youki.git&#xA;cd youki&#xA;just youki-dev # or youki-release&#xA;./youki -h # you can get information about youki command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;h3&gt;Requires&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker(See &lt;a href=&#34;https://docs.docker.com/engine/install&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Create and run a container&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s try to run a container that executes &lt;code&gt;sleep 30&lt;/code&gt; with youki. This tutorial may need root permission.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:containers/youki.git&#xA;cd youki&#xA;just youki-dev # or youki-release&#xA;&#xA;mkdir -p tutorial/rootfs&#xA;cd tutorial&#xA;# use docker to export busybox into the rootfs directory&#xA;docker export $(docker create busybox) | tar -C rootfs -xvf -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, we need to prepare a configuration file. This file contains metadata and specs for a container, such as the process to run, environment variables to inject, sandboxing features to use, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;../youki spec  # will generate a spec file named config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can edit the &lt;code&gt;config.json&lt;/code&gt; to add customized behaviors for container. Here, we modify the &lt;code&gt;process&lt;/code&gt; field to run &lt;code&gt;sleep 30&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;process&#34;: {&#xA;    ...&#xA;    &#34;args&#34;: [&#xA;      &#34;sleep&#34;, &#34;30&#34;&#xA;    ],&#xA;&#xA;  ...&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we can explore the lifecycle of a container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ..                                                # go back to the repository root&#xA;sudo ./youki create -b tutorial tutorial_container   # create a container with name `tutorial_container`&#xA;sudo ./youki state tutorial_container                # you can see the state the container is `created`&#xA;sudo ./youki start tutorial_container                # start the container&#xA;sudo ./youki list                                    # will show the list of containers, the container is `running`&#xA;sudo ./youki delete tutorial_container               # delete the container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the command to be executed in &lt;code&gt;config.json&lt;/code&gt; and try something other than &lt;code&gt;sleep 30&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rootless container&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;youki&lt;/code&gt; provides the ability to run containers as non-root user(&lt;a href=&#34;https://docs.docker.com/engine/security/rootless/&#34;&gt;rootless mode&lt;/a&gt;). To run a container in rootless mode, we need to add some extra options in &lt;code&gt;config.json&lt;/code&gt;, other steps are same with above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p tutorial/rootfs&#xA;$ cd tutorial&#xA;# use docker to export busybox into the rootfs directory&#xA;$ docker export $(docker create busybox) | tar -C rootfs -xvf -&#xA;&#xA;$ ../youki spec --rootless          # will generate a spec file named config.json with rootless mode&#xA;## Modify the `args` field as you like&#xA;&#xA;$ ../youki run rootless-container   # will create and run a container with rootless mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Start the docker daemon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dockerd --experimental --add-runtime=&#34;youki=$(pwd)/youki&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get an error like the below, that means your normal Docker daemon is running, and it needs to be stopped. Do that with your init system (i.e., with systemd, run &lt;code&gt;systemctl stop docker&lt;/code&gt;, as root if necessary).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;failed to start daemon: pid file found, ensure docker is not running or delete /var/run/docker.pid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now repeat the command, which should start the docker daemon.&lt;/p&gt; &#xA;&lt;p&gt;You can use youki in a different terminal to start the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm --runtime youki busybox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards, you can close the docker daemon process in other the other terminal. To restart normal docker daemon (if you had stopped it before), run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl start docker # might need root permission&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration Tests&lt;/h3&gt; &#xA;&lt;p&gt;Go and node-tap are required to run integration tests. See the &lt;a href=&#34;https://github.com/opencontainers/runtime-tools&#34;&gt;opencontainers/runtime-tools&lt;/a&gt; README for details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;just oci-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up Vagrant&lt;/h3&gt; &#xA;&lt;p&gt;You can try youki on platforms other than Linux by using the Vagrantfile we have prepared. We have prepared two environments for vagrant, namely rootless mode and rootful mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:containers/youki.git&#xA;cd youki&#xA;&#xA;# If you want to develop in rootless mode, and this is the default mode&#xA;vagrant up&#xA;vagrant ssh&#xA;&#xA;# or if you want to develop in rootful mode&#xA;VAGRANT_VAGRANTFILE=Vagrantfile.root vagrant up&#xA;VAGRANT_VAGRANTFILE=Vagrantfile.root vagrant ssh&#xA;&#xA;# in virtual machine&#xA;cd youki&#xA;just youki-dev # or youki-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;We also have an active &lt;a href=&#34;https://discord.gg/h7R3HgWUct&#34;&gt;Discord&lt;/a&gt; if you&#39;d like to come and chat with us.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes your PR and issues. For example, refactoring, adding features, correcting English, etc. If you need any help, you can contact me on &lt;a href=&#34;https://twitter.com/utam0k&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/containers/youki/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=containers/youki&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>shadowsocks/shadowsocks-rust</title>
    <updated>2023-09-10T02:04:28Z</updated>
    <id>tag:github.com,2023-09-10:/shadowsocks/shadowsocks-rust</id>
    <link href="https://github.com/shadowsocks/shadowsocks-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rust port of shadowsocks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shadowsocks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zonyitoo/shadowsocks-rust&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/zonyitoo/shadowsocks-rust.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-and-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-and-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-release.yml&#34;&gt;&lt;img src=&#34;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-release.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-nightly-release.yml&#34;&gt;&lt;img src=&#34;https://github.com/shadowsocks/shadowsocks-rust/actions/workflows/build-nightly-release.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Nightly Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/shadowsocks-rust&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/shadowsocks-rust.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/shadowsocks/shadowsocks-rust.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://build.archlinuxcn.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?label=archlinuxcn-git&amp;amp;query=%24.version&amp;amp;url=https%3A%2F%2Fbuild.archlinuxcn.org%2Fapi%2Fv2%2Fpackages%2Fshadowsocks-rust-git&#34; alt=&#34;archlinuxcn shadowsocks-rust-git&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://build.archlinuxcn.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?label=archlinuxcn-opt-git&amp;amp;query=%24.version&amp;amp;url=https%3A%2F%2Fbuild.archlinuxcn.org%2Fapi%2Fv2%2Fpackages%2Fshadowsocks-rust-opt-git&#34; alt=&#34;archlinuxcn shadowsocks-rust-opt-git&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/shadowsocks-rust&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/shadowsocks-rust&#34; alt=&#34;aur shadowsocks-rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NixOS/nixpkgs/tree/master/pkgs/tools/networking/shadowsocks-rust&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/NixOS-shadowsocks--rust-blue?logo=nixos&#34; alt=&#34;NixOS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snapcraft.io/shadowsocks-rust&#34;&gt;&lt;img src=&#34;https://snapcraft.io/static/images/badges/en/snap-store-black.svg?sanitize=true&#34; alt=&#34;Get it from the Snap Store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a port of &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks&#34;&gt;shadowsocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;shadowsocks is a fast tunnel proxy that helps you bypass firewalls.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/shadowsocks&#34;&gt;&lt;strong&gt;shadowsocks&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/shadowsocks&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/shadowsocks.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/shadowsocks&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/shadowsocks&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; shadowsocks core protocol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/shadowsocks-service&#34;&gt;&lt;strong&gt;shadowsocks-service&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/shadowsocks-service&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/shadowsocks-service.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/shadowsocks-service&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/shadowsocks-service&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; Services for serving shadowsocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/shadowsocks-rust&#34;&gt;&lt;strong&gt;shadowsocks-rust&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/shadowsocks-rust&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/shadowsocks-rust.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; Binaries running common shadowsocks services&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Related Projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spyophobia/shadowsocks-gtk-rs&#34;&gt;spyophobia/shadowsocks-gtk-rs&lt;/a&gt; A GUI on Linux for &lt;code&gt;sslocal&lt;/code&gt; using GTK, &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/issues/664&#34;&gt;discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/honwen/openwrt-shadowsocks-rust&#34;&gt;honwen/openwrt-shadowsocks-rust&lt;/a&gt; OpenWRT solution for &lt;code&gt;sslocal&lt;/code&gt;, &lt;a href=&#34;https://github.com/honwen/openwrt-shadowsocks-rust&#34;&gt;discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cg31/shadowsocks-windows-gui-rust&#34;&gt;cg31/shadowsocks-windows-gui-rust&lt;/a&gt; Windows GUI client, &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/issues/375&#34;&gt;discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build &amp;amp; Install&lt;/h2&gt; &#xA;&lt;h3&gt;Optional Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trust-dns&lt;/code&gt; - Uses &lt;a href=&#34;https://crates.io/crates/trust-dns-resolver&#34;&gt;&lt;code&gt;trust-dns-resolver&lt;/code&gt;&lt;/a&gt; as DNS resolver instead of &lt;code&gt;tokio&lt;/code&gt;&#39;s builtin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;local-http&lt;/code&gt; - Allow using HTTP protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;local-http-native-tls&lt;/code&gt; - Support HTTPS with &lt;a href=&#34;https://crates.io/crates/native-tls&#34;&gt;&lt;code&gt;native-tls&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;local-http-rustls&lt;/code&gt; - Support HTTPS with &lt;a href=&#34;https://crates.io/crates/rustls&#34;&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;local-tunnel&lt;/code&gt; - Allow using tunnel protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;local-socks4&lt;/code&gt; - Allow using SOCKS4/4a protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;local-redir&lt;/code&gt; - Allow using redir (transparent proxy) protocol for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;local-dns&lt;/code&gt; - Allow using dns protocol for &lt;code&gt;sslocal&lt;/code&gt;, serves as a DNS server proxying queries to local or remote DNS servers by ACL rules&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;local-tun&lt;/code&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/TUN/TAP&#34;&gt;TUN&lt;/a&gt; interface support for &lt;code&gt;sslocal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;stream-cipher&lt;/code&gt; - Enable deprecated stream ciphers. WARN: stream ciphers are UNSAFE!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;aead-cipher-extra&lt;/code&gt; - Enable non-standard AEAD ciphers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;aead-cipher-2022&lt;/code&gt; - Enable AEAD-2022 ciphers (&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/196&#34;&gt;SIP022&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;aead-cipher-2022-extra&lt;/code&gt; - Enable AEAD-2022 extra ciphers (non-standard ciphers)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Memory Allocators&lt;/h4&gt; &#xA;&lt;p&gt;This project uses system (libc) memory allocator (Rust&#39;s default). But it also allows you to use other famous allocators by features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;jemalloc&lt;/code&gt; - Uses &lt;a href=&#34;http://jemalloc.net/&#34;&gt;jemalloc&lt;/a&gt; as global memory allocator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mimalloc&lt;/code&gt; - Uses &lt;a href=&#34;https://microsoft.github.io/mimalloc/&#34;&gt;mi-malloc&lt;/a&gt; as global memory allocator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tcmalloc&lt;/code&gt; - Uses &lt;a href=&#34;https://google.github.io/tcmalloc/overview.html&#34;&gt;TCMalloc&lt;/a&gt; as global memory allocator. It tries to link system-wide tcmalloc by default, use vendored from source with &lt;code&gt;tcmalloc-vendored&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snmalloc&lt;/code&gt; - Uses &lt;a href=&#34;https://github.com/microsoft/snmalloc&#34;&gt;snmalloc&lt;/a&gt; as global memory allocator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rpmalloc&lt;/code&gt; - Uses &lt;a href=&#34;https://github.com/mjansson/rpmalloc&#34;&gt;rpmalloc&lt;/a&gt; as global memory allocator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;crates.io&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://crates.io/crates/shadowsocks-rust&#34;&gt;crates.io&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install from crates.io&#xA;cargo install shadowsocks-rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then you can find &lt;code&gt;sslocal&lt;/code&gt; and &lt;code&gt;ssserver&lt;/code&gt; in &lt;code&gt;$CARGO_HOME/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Install using Homebrew&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For macOS and Linux, you can install it using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install shadowsocks-rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Install using snap&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install from snapstore&#xA;snap install shadowsocks-rust&#xA;&#xA;# List services&#xA;snap services shadowsocks-rust&#xA;&#xA;# Enable and start shadowsocks-rust.sslocal-daemon snap service&#xA;snap start --enable shadowsocks-rust.sslocal-daemon&#xA;&#xA;# Show generated systemd service status&#xA;systemctl status snap.shadowsocks-rust.sslocal-daemon.service&#xA;&#xA;# Override generated systemd service (configure startup options)&#xA;systemctl edit snap.shadowsocks-rust.sslocal-daemon.service&#xA;&#xA;## NOTE: you can pass args to sslocal:&#xA;##  [Service]&#xA;##  ExecStart=&#xA;##  ExecStart=/usr/bin/snap run shadowsocks-rust.sslocal-daemon -b &#34;127.0.0.1:1080&#34; --server-url &#34;ss://....&#34;&#xA;&#xA;# Restart generated systemd service to apply changes&#xA;systemctl restart snap.shadowsocks-rust.sslocal-daemon.service&#xA;&#xA;# ... and show service status&#xA;systemctl status snap.shadowsocks-rust.sslocal-daemon.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Download release&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Download static-linked build &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;build-windows&lt;/code&gt;: Build for &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build-linux&lt;/code&gt;: Build for &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, Debian 9 (Stretch), GLIBC 2.18&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build-docker&lt;/code&gt;: Build for &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;, &lt;code&gt;x86_64-pc-windows-gnu&lt;/code&gt;, ... (statically linked)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This project provided Docker images for the &lt;code&gt;linux/i386&lt;/code&gt; and &lt;code&gt;linux/amd64&lt;/code&gt; and &lt;code&gt;linux/arm64/v8&lt;/code&gt; architectures.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Docker containers do not have access to IPv6 by default&lt;/strong&gt;: Make sure to disable IPv6 Route in the client or &lt;a href=&#34;https://docs.docker.com/config/daemon/ipv6/#use-ipv6-for-the-default-bridge-network&#34;&gt;enable IPv6 access to docker containers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Pull from GitHub Container Registry&lt;/h4&gt; &#xA;&lt;p&gt;Docker will pull the image of the appropriate architecture from our &lt;a href=&#34;https://github.com/orgs/shadowsocks/packages?repo_name=shadowsocks-rust&#34;&gt;GitHub Packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/shadowsocks/sslocal-rust:latest&#xA;docker pull ghcr.io/shadowsocks/ssserver-rust:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build on the local machine（Optional）&lt;/h4&gt; &#xA;&lt;p&gt;If you want to build the Docker image yourself, you need to use the &lt;a href=&#34;https://docs.docker.com/buildx/working-with-buildx/&#34;&gt;BuildX&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker buildx build -t shadowsocks/ssserver-rust:latest -t shadowsocks/ssserver-rust:v1.15.2 --target ssserver .&#xA;docker buildx build -t shadowsocks/sslocal-rust:latest -t shadowsocks/sslocal-rust:v1.15.2 --target sslocal .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run the container&lt;/h4&gt; &#xA;&lt;p&gt;You need to mount the configuration file into the container and create an external port map for the container to connect to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name sslocal-rust \&#xA;  --restart always \&#xA;  -p 1080:1080/tcp \&#xA;  -v /path/to/config.json:/etc/shadowsocks-rust/config.json \&#xA;  -dit ghcr.io/shadowsocks/sslocal-rust:latest&#xA;&#xA;docker run --name ssserver-rust \&#xA;  --restart always \&#xA;  -p 8388:8388/tcp \&#xA;  -p 8388:8388/udp \&#xA;  -v /path/to/config.json:/etc/shadowsocks-rust/config.json \&#xA;  -dit ghcr.io/shadowsocks/ssserver-rust:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Deploy to Kubernetes&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This project provided yaml manifests for deploying to Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;You can leverage k8s Service to expose traffic outside, like LoadBalancer or NodePort which gains more fine-grained compared with fixed host or port.&lt;/p&gt; &#xA;&lt;p&gt;For a more interesting use case, you can use a Ingress(Istio, nginx, etc.) which routes the matched traffic to shadowsocks along with the real web service.&lt;/p&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;kubectl&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;kubectl apply -f https://github.com/shadowsocks/shadowsocks-rust/raw/master/k8s/shadowsocks-rust.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change the config via editing the ConfigMap named &lt;code&gt;shadowsocks-rust&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more fine-grained control, use &lt;code&gt;helm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;helm&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;helm install my-release k8s/chart -f my-values.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Below is the common default values you can change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# This is the shadowsocks config which will be mount to /etc/shadowocks-rust.&#xA;# You can put arbitrary yaml here, and it will be translated to json before mounting.&#xA;servers:&#xA;- server: &#34;::&#34;&#xA;  server_port: 8388&#xA;  service_port: 80 # the k8s service port, default to server_port&#xA;  password: mypassword&#xA;  method: aes-256-gcm&#xA;  fast_open: true&#xA;  mode: tcp_and_udp&#xA;  # plugin: v2ray-plugin&#xA;  # plugin_opts: server;tls;host=github.com&#xA;&#xA;# Whether to download v2ray and xray plugin.&#xA;downloadPlugins: false&#xA;&#xA;# Name of the ConfigMap with config.json configuration for shadowsocks-rust.&#xA;configMapName: &#34;&#34;&#xA;&#xA;service:&#xA;  # Change to LoadBalancer if you are behind a cloud provider like aws, gce, or tke.&#xA;  type: ClusterIP&#xA;&#xA;# Bind shadowsocks port port to host, i.e., we can use host:port to access shawdowsocks server.&#xA;hostPort: false&#xA;&#xA;replicaCount: 1&#xA;&#xA;image:&#xA;  repository: ghcr.io/shadowsocks/ssserver-rust&#xA;  pullPolicy: IfNotPresent&#xA;  # Overrides the image tag whose default is the chart appVersion.&#xA;  tag: &#34;latest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Build from source&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use cargo to build. NOTE: &lt;strong&gt;RAM &amp;gt;= 2GiB&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;sslocal&lt;/code&gt; and &lt;code&gt;ssserver&lt;/code&gt; will appear in &lt;code&gt;./target/(debug|release)/&lt;/code&gt;, it works similarly as the two binaries in the official ShadowSocks&#39; implementation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install TARGET=release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssserver&lt;/code&gt;, &lt;code&gt;ssmanager&lt;/code&gt; and &lt;code&gt;ssurl&lt;/code&gt; will be installed to &lt;code&gt;/usr/local/bin&lt;/code&gt; (variable PREFIX).&lt;/p&gt; &#xA;&lt;p&gt;For Windows users, if you have encountered any problem in building, check and discuss in &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/issues/102&#34;&gt;#102&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;target-cpu optimization&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you are building for your current CPU platform (for example, build and run on your personal computer), it is recommended to set &lt;code&gt;target-cpu=native&lt;/code&gt; feature to let &lt;code&gt;rustc&lt;/code&gt; generate and optimize code for the CPU running the compiler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export RUSTFLAGS=&#34;-C target-cpu=native&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Build standalone binaries&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/build-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssserver&lt;/code&gt;, &lt;code&gt;ssmanager&lt;/code&gt; and &lt;code&gt;ssurl&lt;/code&gt; will be packaged in&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./build/shadowsocks-${VERSION}-stable.x86_64-unknown-linux-musl.tar.xz&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./build/shadowsocks-${VERSION}-stable.x86_64-pc-windows-gnu.zip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read &lt;code&gt;Cargo.toml&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Generate a safe and secured password for a specific encryption method (&lt;code&gt;aes-128-gcm&lt;/code&gt; in the example) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssservice genkey -m &#34;aes-128-gcm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a ShadowSocks&#39; configuration file. Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    &#34;server&#34;: &#34;my_server_ip&#34;,&#xA;    &#34;server_port&#34;: 8388,&#xA;    &#34;password&#34;: &#34;rwQc8qPXVsRpGx3uW+Y3Lj4Y42yF9Bs0xg1pmx8/+bo=&#34;,&#xA;    &#34;method&#34;: &#34;aes-256-gcm&#34;,&#xA;    // ONLY FOR `sslocal`&#xA;    // Delete these lines if you are running `ssserver` or `ssmanager`&#xA;    &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;local_port&#34;: 1080&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed explanation could be found in &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks/wiki&#34;&gt;shadowsocks&#39; documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In shadowsocks-rust, we also have an extended configuration file format, which is able to define more than one server. You can also disable individual servers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    &#34;servers&#34;: [&#xA;        {&#xA;            &#34;server&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;server_port&#34;: 8388,&#xA;            &#34;password&#34;: &#34;rwQc8qPXVsRpGx3uW+Y3Lj4Y42yF9Bs0xg1pmx8/+bo=&#34;,&#xA;            &#34;method&#34;: &#34;aes-256-gcm&#34;,&#xA;            &#34;timeout&#34;: 7200&#xA;        },&#xA;        {&#xA;            &#34;server&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;server_port&#34;: 8389,&#xA;            &#34;password&#34;: &#34;/dliNXn5V4jg6vBW4MnC1I8Jljg9x7vSihmk6UZpRBM=&#34;,&#xA;            &#34;method&#34;: &#34;chacha20-ietf-poly1305&#34;&#xA;        },&#xA;        {&#xA;            &#34;disabled&#34;: true,&#xA;            &#34;server&#34;: &#34;eg.disable.me&#34;,&#xA;            &#34;server_port&#34;: 8390,&#xA;            &#34;password&#34;: &#34;mGvbWWay8ueP9IHnV5F1uWGN2BRToiVCAWJmWOTLU24=&#34;,&#xA;            &#34;method&#34;: &#34;chacha20-ietf-poly1305&#34;&#xA;        }&#xA;    ],&#xA;    // ONLY FOR `sslocal`&#xA;    // Delete these lines if you are running `ssserver` or `ssmanager`&#xA;    &#34;local_port&#34;: 1080,&#xA;    &#34;local_address&#34;: &#34;127.0.0.1&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sslocal&lt;/code&gt; automatically selects the best server with the lowest latency and the highest availability.&lt;/p&gt; &#xA;&lt;p&gt;Start Shadowsocks client and server with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sslocal -c config.json&#xA;ssserver -c config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you Build it with Cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --bin sslocal -- -c config.json&#xA;cargo run --bin ssserver -- -c config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List all available arguments with &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Start local client with configuration file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Read local client configuration from file&#xA;sslocal -c /path/to/shadowsocks.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Socks5 Local client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Pass all parameters via command line&#xA;sslocal -b &#34;127.0.0.1:1080&#34; -s &#34;[::1]:8388&#34; -m &#34;aes-256-gcm&#34; -k &#34;hello-kitty&#34; --plugin &#34;v2ray-plugin&#34; --plugin-opts &#34;server;tls;host=github.com&#34;&#xA;&#xA;# Pass server with SIP002 URL&#xA;sslocal -b &#34;127.0.0.1:1080&#34; --server-url &#34;ss://YWVzLTI1Ni1nY206cGFzc3dvcmQ@127.0.0.1:8388/?plugin=v2ray-plugin%3Bserver%3Btls%3Bhost%3Dgithub.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Local client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sslocal -b &#34;127.0.0.1:3128&#34; --protocol http -s &#34;[::1]:8388&#34; -m &#34;aes-256-gcm&#34; -k &#34;hello-kitty&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All parameters are the same as Socks5 client, except &lt;code&gt;--protocol http&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tunnel Local client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set 127.0.0.1:8080 as the target for forwarding to&#xA;sslocal --protocol tunnel -b &#34;127.0.0.1:3128&#34; -f &#34;127.0.0.1:8080&#34; -s &#34;[::1]:8388&#34; -m &#34;aes-256-gcm&#34; -k &#34;hello-kitty&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--protocol tunnel&lt;/code&gt; enables local client Tunnel mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-f &#34;127.0.0.1:8080&lt;/code&gt; sets the tunnel target address&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Transparent Proxy Local client&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It currently only supports&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (with &lt;code&gt;iptables&lt;/code&gt; targets &lt;code&gt;REDIRECT&lt;/code&gt; and &lt;code&gt;TPROXY&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;BSDs (with &lt;code&gt;pf&lt;/code&gt;), such as OS X 10.10+, FreeBSD, ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sslocal -b &#34;127.0.0.1:60080&#34; --protocol redir -s &#34;[::1]:8388&#34; -m &#34;aes-256-gcm&#34; -k &#34;hello-kitty&#34; --tcp-redir &#34;redirect&#34; --udp-redir &#34;tproxy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Redirects connections with &lt;code&gt;iptables&lt;/code&gt; configurations to the port that &lt;code&gt;sslocal&lt;/code&gt; is listening on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--protocol redir&lt;/code&gt; enables local client Redir mode&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;code&gt;--tcp-redir&lt;/code&gt; sets TCP mode to &lt;code&gt;REDIRECT&lt;/code&gt; (Linux)&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;code&gt;--udp-redir&lt;/code&gt; sets UDP mode to &lt;code&gt;TPROXY&lt;/code&gt; (Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tun interface client&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It currently only supports&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux, Android&lt;/li&gt; &#xA; &lt;li&gt;macOS, iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;Create a Tun interface with name &lt;code&gt;tun0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ip tuntap add mode tun tun0&#xA;ifconfig tun0 inet 10.255.0.1 netmask 255.255.255.0 up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start &lt;code&gt;sslocal&lt;/code&gt; with &lt;code&gt;--protocol tun&lt;/code&gt; and binds to &lt;code&gt;tun0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sslocal --protocol tun -s &#34;[::1]:8388&#34; -m &#34;aes-256-gcm&#34; -k &#34;hello-kitty&#34; --outbound-bind-interface lo0 --tun-interface-name tun0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sslocal --protocol tun -s &#34;[::1]:8388&#34; -m &#34;aes-256-gcm&#34; -k &#34;hello-kitty&#34; --outbound-bind-interface lo0 --tun-interface-address 10.255.0.1/24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create a Tun interface with address &lt;code&gt;10.255.0.1&lt;/code&gt; and netmask &lt;code&gt;255.255.255.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Read server configuration from file&#xA;ssserver -c /path/to/shadowsocks.json&#xA;&#xA;# Pass all parameters via command line&#xA;ssserver -s &#34;[::]:8388&#34; -m &#34;aes-256-gcm&#34; -k &#34;hello-kitty&#34; --plugin &#34;v2ray-plugin&#34; --plugin-opts &#34;server;tls;host=github.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Server Manager&lt;/h3&gt; &#xA;&lt;p&gt;Supported &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks/wiki/Manage-Multiple-Users&#34;&gt;Manage Multiple Users&lt;/a&gt; API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;add&lt;/code&gt; - Starts a server instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt; - Deletes an existing server instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt; - Lists all current running servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ping&lt;/code&gt; - Lists all servers&#39; statistic data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: &lt;code&gt;stat&lt;/code&gt; command is not supported. Because servers are running in the same process with the manager itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start it just with --manager-address command line parameter&#xA;ssmanager --manager-address &#34;127.0.0.1:6100&#34;&#xA;&#xA;# For *nix system, manager can bind to unix socket address&#xA;ssmanager --manager-address &#34;/tmp/shadowsocks-manager.sock&#34;&#xA;&#xA;# You can also provide a configuration file&#xA;#&#xA;# `manager_address` key must be provided in the configuration file&#xA;ssmanager -c /path/to/shadowsocks.json&#xA;&#xA;# Create one server by UDP&#xA;echo &#39;add: {&#34;server_port&#34;:8388,&#34;password&#34;:&#34;hello-kitty&#34;}&#39; | nc -u &#39;127.0.0.1&#39; &#39;6100&#39;&#xA;&#xA;# Close one server by unix socket&#xA;echo &#39;remove: {&#34;server_port&#34;:8388}&#39; | nc -Uu &#39;/tmp/shadowsocks-manager.sock&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For manager UI, check more details in the &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-manager&#34;&gt;shadowsocks-manager&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Example configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    // Required option&#xA;    // Address that ssmanager is listening on&#xA;    &#34;manager_address&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;manager_port&#34;: 6100,&#xA;&#xA;    // Or bind to a Unix Domain Socket&#xA;    &#34;manager_address&#34;: &#34;/tmp/shadowsocks-manager.sock&#34;,&#xA;&#xA;    &#34;servers&#34;: [&#xA;        // These servers will be started automatically when ssmanager is started&#xA;    ],&#xA;&#xA;    // Outbound socket binds to this IP address&#xA;    // For choosing different network interface on the same machine&#xA;    &#34;local_address&#34;: &#34;xxx.xxx.xxx.xxx&#34;,&#xA;&#xA;    // Other options that may be passed directly to new servers&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    // LOCAL: Listen address. This is exactly the same as `locals[0]`&#xA;    // SERVER: Bind address for remote sockets, mostly used for choosing interface&#xA;    //         Don&#39;t set it if you don&#39;t know what&#39;s this for.&#xA;    &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;local_port&#34;: 1080,&#xA;&#xA;    // Extended multiple local configuration&#xA;    &#34;locals&#34;: [&#xA;        {&#xA;            // Basic configuration, a SOCKS5 local server&#xA;            &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;local_port&#34;: 1080,&#xA;            // OPTIONAL. Setting the `mode` for this specific local server instance.&#xA;            // If not set, it will derive from the outer `mode`&#xA;            &#34;mode&#34;: &#34;tcp_and_udp&#34;,&#xA;            // OPTIONAL. Authentication configuration file&#xA;            // Configuration file document could be found in the next section.&#xA;            &#34;socks5_auth_config_path&#34;: &#34;/path/to/auth.json&#34;,&#xA;            // OPTIONAL. Instance specific ACL&#xA;            &#34;acl&#34;: &#34;/path/to/acl/file.acl&#34;,&#xA;        },&#xA;        {&#xA;            // SOCKS5, SOCKS4/4a local server&#xA;            &#34;protocol&#34;: &#34;socks&#34;,&#xA;            // Listen address&#xA;            &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;local_port&#34;: 1081,&#xA;            // OPTIONAL. Enables UDP relay&#xA;            &#34;mode&#34;: &#34;tcp_and_udp&#34;,&#xA;            // OPTIONAL. Customizing the UDP&#39;s binding address. Depending on `mode`, if&#xA;            // - TCP is enabled, then SOCKS5&#39;s UDP Association command will return this address&#xA;            // - UDP is enabled, then SOCKS5&#39;s UDP server will listen to this address.&#xA;            &#34;local_udp_address&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;local_udp_port&#34;: 2081&#xA;        },&#xA;        {&#xA;            // Tunnel local server (feature = &#34;local-tunnel&#34;)&#xA;            &#34;protocol&#34;: &#34;tunnel&#34;,&#xA;            // Listen address&#xA;            &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;local_port&#34;: 5353,&#xA;            // Forward address, the target of this tunnel&#xA;            // In this example, this will build a `127.0.0.1:5353` -&amp;gt; `8.8.8.8:53` tunnel&#xA;            &#34;forward_address&#34;: &#34;8.8.8.8&#34;,&#xA;            &#34;forward_port&#34;: 53,&#xA;            // OPTIONAL. Customizing whether to start TCP and UDP tunnel&#xA;            &#34;mode&#34;: &#34;tcp_only&#34;&#xA;        },&#xA;        {&#xA;            // HTTP local server (feature = &#34;local-http&#34;)&#xA;            &#34;protocol&#34;: &#34;http&#34;,&#xA;            // Listen address&#xA;            &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;local_port&#34;: 3128&#xA;        },&#xA;        {&#xA;            // DNS local server (feature = &#34;local-dns&#34;)&#xA;            // This DNS works like China-DNS, it will send requests to `local_dns` and `remote_dns` and choose by ACL rules&#xA;            &#34;protocol&#34;: &#34;dns&#34;,&#xA;            // Listen address&#xA;            &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;local_port&#34;: 53,&#xA;            // OPTIONAL. DNS local server uses `tcp_and_udp` mode by default&#xA;            &#34;mode&#34;: &#34;udp_only&#34;,&#xA;            // Local DNS address, DNS queries will be sent directly to this address&#xA;            &#34;local_dns_address&#34;: &#34;114.114.114.114&#34;,&#xA;            // OPTIONAL. Local DNS&#39;s port, 53 by default&#xA;            &#34;local_dns_port&#34;: 53,&#xA;            // Remote DNS address, DNS queries will be sent through ssserver to this address&#xA;            &#34;remote_dns_address&#34;: &#34;8.8.8.8&#34;,&#xA;            // OPTIONAL. Remote DNS&#39;s port, 53 by default&#xA;            &#34;remote_dns_port&#34;: 53&#xA;        },&#xA;        {&#xA;            // Tun local server (feature = &#34;local-tun&#34;)&#xA;            &#34;protocol&#34;: &#34;tun&#34;,&#xA;            // Tun interface name&#xA;            &#34;tun_interface_name&#34;: &#34;tun0&#34;,&#xA;            // Tun interface address&#xA;            //&#xA;            // It has to be a host address in CIDR form&#xA;            &#34;tun_interface_address&#34;: &#34;10.255.0.1/24&#34;&#xA;        },&#xA;        {&#xA;            // Transparent Proxy (redir) local server (feature = &#34;local-redir&#34;)&#xA;            &#34;protocol&#34;: &#34;redir&#34;,&#xA;            // OPTIONAL: TCP type, may be different between platforms&#xA;            // Linux/Android: redirect (default), tproxy&#xA;            // FreeBSD/OpenBSD: pf (default), ipfw&#xA;            // NetBSD/macOS/Solaris: pf (default), ipfw&#xA;            &#34;tcp_redir&#34;: &#34;tproxy&#34;,&#xA;            // OPTIONAL: UDP type, may be different between platforms&#xA;            // Linux/Android: tproxy (default)&#xA;            // FreeBSD/OpenBSD: pf (default)&#xA;            &#34;udp_redir&#34;: &#34;tproxy&#34;&#xA;        }&#xA;    ],&#xA;&#xA;    // Server configuration&#xA;    // listen on :: for dual stack support, no need add [] around.&#xA;    &#34;server&#34;: &#34;::&#34;,&#xA;    // Change to use your custom port number&#xA;    &#34;server_port&#34;: 8388,&#xA;    &#34;method&#34;: &#34;aes-256-gcm&#34;,&#xA;    &#34;password&#34;: &#34;your-password&#34;,&#xA;    &#34;plugin&#34;: &#34;v2ray-plugin&#34;,&#xA;    &#34;plugin_opts&#34;: &#34;mode=quic;host=github.com&#34;,&#xA;    &#34;plugin_args&#34;: [&#xA;        // Each line is an argument passed to &#34;plugin&#34;&#xA;        &#34;--verbose&#34;&#xA;    ],&#xA;    &#34;plugin_mode&#34;: &#34;tcp_and_udp&#34;, // SIP003u, default is &#34;tcp_only&#34;&#xA;    // Server: TCP socket timeout in seconds.&#xA;    // Client: TCP connection timeout in seconds.&#xA;    // Omit this field if you don&#39;t have specific needs.&#xA;    &#34;timeout&#34;: 7200,&#xA;&#xA;    // Extended multiple server configuration&#xA;    // LOCAL: Choosing the best server to connect dynamically&#xA;    // SERVER: Creating multiple servers in one process&#xA;    &#34;servers&#34;: [&#xA;        {&#xA;            // Fields are the same as the single server&#39;s configuration&#xA;&#xA;            // Individual servers can be disabled&#xA;            // &#34;disabled&#34;: true,&#xA;            &#34;address&#34;: &#34;0.0.0.0&#34;,&#xA;            &#34;port&#34;: 8389,&#xA;            &#34;method&#34;: &#34;aes-256-gcm&#34;,&#xA;            &#34;password&#34;: &#34;your-password&#34;,&#xA;            &#34;plugin&#34;: &#34;...&#34;,&#xA;            &#34;plugin_opts&#34;: &#34;...&#34;,&#xA;            &#34;plugin_args&#34;: [],&#xA;            &#34;plugin_mode&#34;: &#34;...&#34;,&#xA;            &#34;timeout&#34;: 7200,&#xA;&#xA;            // Customized weight for local server&#39;s balancer&#xA;            //&#xA;            // Weight must be in [0, 1], default is 1.0.&#xA;            // The higher weight, the server may rank higher.&#xA;            &#34;tcp_weight&#34;: 1.0,&#xA;            &#34;udp_weight&#34;: 1.0,&#xA;&#xA;            // OPTIONAL. Instance specific ACL&#xA;            &#34;acl&#34;: &#34;/path/to/acl/file.acl&#34;,&#xA;        },&#xA;        {&#xA;            // Same key as basic format &#34;server&#34; and &#34;server_port&#34;&#xA;            &#34;server&#34;: &#34;0.0.0.0&#34;,&#xA;            &#34;server_port&#34;: 8388,&#xA;            &#34;method&#34;: &#34;chacha20-ietf-poly1305&#34;,&#xA;            // Read the actual password from environment variable PASSWORD_FROM_ENV&#xA;            &#34;password&#34;: &#34;${PASSWORD_FROM_ENV}&#34;&#xA;        },&#xA;        {&#xA;            // AEAD-2022&#xA;            &#34;server&#34;: &#34;::&#34;,&#xA;            &#34;server_port&#34;: 8390,&#xA;            &#34;method&#34;: &#34;2022-blake3-aes-256-gcm&#34;,&#xA;            &#34;password&#34;: &#34;3SYJ/f8nmVuzKvKglykRQDSgg10e/ADilkdRWrrY9HU=&#34;,&#xA;            // For Server (OPTIONAL)&#xA;            // Support multiple users with Extensible Identity Header&#xA;            // https://github.com/Shadowsocks-NET/shadowsocks-specs/blob/main/2022-2-shadowsocks-2022-extensible-identity-headers.md&#xA;            &#34;users&#34;: [&#xA;                {&#xA;                    &#34;name&#34;: &#34;username&#34;,&#xA;                    // User&#39;s password must have the same length as server&#39;s password&#xA;                    &#34;password&#34;: &#34;4w0GKJ9U3Ox7CIXGU4A3LDQAqP6qrp/tUi/ilpOR9p4=&#34;&#xA;                }&#xA;            ],&#xA;            // For Client (OPTIONAL)&#xA;            // If EIH enabled, then &#34;password&#34; should have the following format: iPSK:iPSK:iPSK:uPSK&#xA;            // - iPSK is one of the middle relay servers&#39; PSK, for the last `ssserver`, it must be server&#39;s PSK (&#34;password&#34;)&#xA;            // - uPSK is the user&#39;s PSK (&#34;password&#34;)&#xA;            // Example:&#xA;            // &#34;password&#34;: &#34;3SYJ/f8nmVuzKvKglykRQDSgg10e/ADilkdRWrrY9HU=:4w0GKJ9U3Ox7CIXGU4A3LDQAqP6qrp/tUi/ilpOR9p4=&#34;&#xA;        }&#xA;    ],&#xA;&#xA;    // Global configurations for UDP associations&#xA;    &#34;udp_timeout&#34;: 300, // Timeout for UDP associations (in seconds), 5 minutes by default&#xA;    &#34;udp_max_associations&#34;: 512, // Maximum UDP associations to be kept in one server, unlimited by default&#xA;&#xA;    // Options for Manager&#xA;    &#34;manager_address&#34;: &#34;127.0.0.1&#34;, // Could be a path to UNIX socket, /tmp/shadowsocks-manager.sock&#xA;    &#34;manager_port&#34;: 5300, // Not needed for UNIX socket&#xA;&#xA;    // DNS server&#39;s address for resolving domain names&#xA;    // For *NIX and Windows, it uses system&#39;s configuration by default&#xA;    //&#xA;    // Value could be IP address of DNS server, for example, &#34;8.8.8.8&#34;.&#xA;    // DNS client will automatically request port 53 with both TCP and UDP protocol.&#xA;    //&#xA;    // - system, uses system provided API (`getaddrinfo` on *NIX)&#xA;    //&#xA;    // It also allows some pre-defined well-known public DNS servers:&#xA;    // - google (TCP, UDP)&#xA;    // - cloudflare (TCP, UDP)&#xA;    // - cloudflare_tls (TLS), enable by feature &#34;dns-over-tls&#34;&#xA;    // - cloudflare_https (HTTPS), enable by feature &#34;dns-over-https&#34;&#xA;    // - quad9 (TCP, UDP)&#xA;    // - quad9_tls (TLS), enable by feature &#34;dns-over-tls&#34;&#xA;    //&#xA;    // The field is only effective if feature &#34;trust-dns&#34; is enabled.&#xA;    &#34;dns&#34;: &#34;google&#34;,&#xA;    // Configure `cache_size` for &#34;trust-dns&#34; ResolverOpts. Set to &#34;0&#34; to disable DNS cache.&#xA;    &#34;dns_cache_size&#34;: 0,&#xA;&#xA;    // Mode, could be one of the&#xA;    // - tcp_only&#xA;    // - tcp_and_udp&#xA;    // - udp_only&#xA;    &#34;mode&#34;: &#34;tcp_only&#34;,&#xA;&#xA;    // TCP_NODELAY&#xA;    &#34;no_delay&#34;: false,&#xA;&#xA;    // Enables `SO_KEEPALIVE` and set `TCP_KEEPIDLE`, `TCP_KEEPINTVL` to the specified seconds&#xA;    &#34;keep_alive&#34;: 15,&#xA;&#xA;    // Soft and Hard limit of file descriptors on *NIX systems&#xA;    &#34;nofile&#34;: 10240,&#xA;&#xA;    // Try to resolve domain name to IPv6 (AAAA) addresses first&#xA;    &#34;ipv6_first&#34;: false,&#xA;    // Set IPV6_V6ONLY for all IPv6 listener sockets&#xA;    // Only valid for locals and servers listening on `::`&#xA;    &#34;ipv6_only&#34;: false,&#xA;&#xA;    // Outbound socket options&#xA;    // Linux Only (SO_MARK)&#xA;    &#34;outbound_fwmark&#34;: 255,&#xA;    // FreeBSD only (SO_USER_COOKIE)&#xA;    &#34;outbound_user_cookie&#34;: 255,&#xA;    // `SO_BINDTODEVICE` (Linux), `IP_BOUND_IF` (BSD), `IP_UNICAST_IF` (Windows) socket option for outbound sockets&#xA;    &#34;outbound_bind_interface&#34;: &#34;eth1&#34;,&#xA;    // Outbound socket bind() to this IP (choose a specific interface)&#xA;    &#34;outbound_bind_addr&#34;: &#34;11.22.33.44&#34;,&#xA;&#xA;    // Balancer customization&#xA;    &#34;balancer&#34;: {&#xA;        // MAX Round-Trip-Time (RTT) of servers&#xA;        // The timeout seconds of each individual checks&#xA;        &#34;max_server_rtt&#34;: 5,&#xA;        // Interval seconds between each check&#xA;        &#34;check_interval&#34;: 10,&#xA;        // Interval seconds between each check for the best server&#xA;        // Optional. Specify to enable shorter checking interval for the best server only.&#xA;        &#34;check_best_interval&#34;: 5&#xA;    },&#xA;&#xA;    // Service configurations&#xA;    // Logger configuration&#xA;    &#34;log&#34;: {&#xA;        // Equivalent to `-v` command line option&#xA;        &#34;level&#34;: 1,&#xA;        &#34;format&#34;: {&#xA;            // Euiqvalent to `--log-without-time`&#xA;            &#34;without_time&#34;: false,&#xA;        },&#xA;        // Equivalent to `--log-config`&#xA;        // More detail could be found in https://crates.io/crates/log4rs&#xA;        &#34;config_path&#34;: &#34;/path/to/log4rs/config.yaml&#34;&#xA;    },&#xA;    // Runtime configuration&#xA;    &#34;runtime&#34;: {&#xA;        // single_thread or multi_thread&#xA;        &#34;mode&#34;: &#34;multi_thread&#34;,&#xA;        // Worker threads that are used in multi-thread runtime&#xA;        &#34;worker_count&#34;: 10&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SOCKS5 Authentication Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The configuration file is set by &lt;code&gt;socks5_auth_config_path&lt;/code&gt; in &lt;code&gt;locals&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    // Password/Username Authentication (RFC1929)&#xA;    &#34;password&#34;: {&#xA;        &#34;users&#34;: [&#xA;            {&#xA;                &#34;user_name&#34;: &#34;USERNAME in UTF-8&#34;,&#xA;                &#34;password&#34;: &#34;PASSWORD in UTF-8&#34;&#xA;            }&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SS_SERVER_PASSWORD&lt;/code&gt;: A default password for servers that created from command line argument (&lt;code&gt;--server-addr&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SS_SYSTEM_DNS_RESOLVER_FORCE_BUILTIN&lt;/code&gt;: &lt;code&gt;&#34;system&#34;&lt;/code&gt; DNS resolver force use system&#39;s builtin (&lt;code&gt;getaddrinfo&lt;/code&gt; in *NIX)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Ciphers&lt;/h2&gt; &#xA;&lt;h3&gt;AEAD 2022 Ciphers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2022-blake3-aes-128-gcm&lt;/code&gt;, &lt;code&gt;2022-blake3-aes-256-gcm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2022-blake3-chacha20-poly1305&lt;/code&gt;, &lt;code&gt;2022-blake3-chacha8-poly1305&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These Ciphers require &lt;code&gt;&#34;password&#34;&lt;/code&gt; to be a Base64 string of key that have &lt;strong&gt;exactly the same length&lt;/strong&gt; of Cipher&#39;s Key Size. It is recommended to use &lt;code&gt;ssservice genkey -m &#34;METHOD_NAME&#34;&lt;/code&gt; to generate a secured and safe key.&lt;/p&gt; &#xA;&lt;h3&gt;AEAD Ciphers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;chacha20-ietf-poly1305&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aes-128-gcm&lt;/code&gt;, &lt;code&gt;aes-256-gcm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stream Ciphers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;plain&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt; (No encryption, only used for debugging or with plugins that ensure transport security)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Deprecated&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;table&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;aes-128-cfb&lt;/code&gt;, &lt;code&gt;aes-128-cfb1&lt;/code&gt;, &lt;code&gt;aes-128-cfb8&lt;/code&gt;, &lt;code&gt;aes-128-cfb128&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;aes-192-cfb&lt;/code&gt;, &lt;code&gt;aes-192-cfb1&lt;/code&gt;, &lt;code&gt;aes-192-cfb8&lt;/code&gt;, &lt;code&gt;aes-192-cfb128&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;aes-256-cfb&lt;/code&gt;, &lt;code&gt;aes-256-cfb1&lt;/code&gt;, &lt;code&gt;aes-256-cfb8&lt;/code&gt;, &lt;code&gt;aes-256-cfb128&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;aes-128-ctr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;aes-192-ctr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;aes-256-ctr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;camellia-128-cfb&lt;/code&gt;, &lt;code&gt;camellia-128-cfb1&lt;/code&gt;, &lt;code&gt;camellia-128-cfb8&lt;/code&gt;, &lt;code&gt;camellia-128-cfb128&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;camellia-192-cfb&lt;/code&gt;, &lt;code&gt;camellia-192-cfb1&lt;/code&gt;, &lt;code&gt;camellia-192-cfb8&lt;/code&gt;, &lt;code&gt;camellia-192-cfb128&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;camellia-256-cfb&lt;/code&gt;, &lt;code&gt;camellia-256-cfb1&lt;/code&gt;, &lt;code&gt;camellia-256-cfb8&lt;/code&gt;, &lt;code&gt;camellia-256-cfb128&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rc4-md5&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;chacha20-ietf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;ACL&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssserver&lt;/code&gt;, and &lt;code&gt;ssmanager&lt;/code&gt; support ACL file with syntax like &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-libev&#34;&gt;shadowsocks-libev&lt;/a&gt;. Some examples could be found in &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-libev/tree/master/acl&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Available sections&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For local servers (&lt;code&gt;sslocal&lt;/code&gt;, &lt;code&gt;ssredir&lt;/code&gt;, ...) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modes: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;[bypass_all]&lt;/code&gt; - ACL runs in &lt;code&gt;BlackList&lt;/code&gt; mode. Bypasses all addresses that didn&#39;t match any rules.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;[proxy_all]&lt;/code&gt; - ACL runs in &lt;code&gt;WhiteList&lt;/code&gt; mode. Proxies all addresses that didn&#39;t match any rules.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Rules: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;[bypass_list]&lt;/code&gt; - Rules for connecting directly&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;[proxy_list]&lt;/code&gt; - Rules for connecting through proxies&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For remote servers (&lt;code&gt;ssserver&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modes: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;[reject_all]&lt;/code&gt; - ACL runs in &lt;code&gt;BlackList&lt;/code&gt; mode. Rejects all clients that didn&#39;t match any rules.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;[accept_all]&lt;/code&gt; - ACL runs in &lt;code&gt;WhiteList&lt;/code&gt; mode. Accepts all clients that didn&#39;t match any rules.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Rules: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;[white_list]&lt;/code&gt; - Rules for accepted clients&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;[black_list]&lt;/code&gt; - Rules for rejected clients&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;[outbound_block_list]&lt;/code&gt; - Rules for blocking outbound addresses.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# SERVERS&#xA;# For ssserver, accepts requests from all clients by default&#xA;[accept_all]&#xA;&#xA;# Blocks these clients&#xA;[black_list]&#xA;1.2.3.4&#xA;127.0.0.1/8&#xA;&#xA;# Disallow these outbound addresses&#xA;[outbound_block_list]&#xA;127.0.0.1/8&#xA;::1&#xA;# Using regular expression&#xA;^[a-z]{5}\.baidu\.com&#xA;# Match exactly&#xA;|baidu.com&#xA;# Match with subdomains&#xA;||google.com&#xA;# An internationalized domain name should be converted to punycode&#xA;# |☃-⌘.com - WRONG&#xA;|xn----dqo34k.com&#xA;# ||джpумлатест.bрфa - WRONG&#xA;||xn--p-8sbkgc5ag7bhce.xn--ba-lmcq&#xA;&#xA;# CLIENTS&#xA;# For sslocal, ..., bypasses all targets by default&#xA;[bypass_all]&#xA;&#xA;# Proxy these addresses&#xA;[proxy_list]&#xA;||google.com&#xA;8.8.8.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful Tools&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;ssurl&lt;/code&gt; is for encoding and decoding ShadowSocks URLs (SIP002). Example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;ss://YWVzLTI1Ni1jZmI6cGFzc3dvcmQ@127.0.0.1:8388/?plugin=obfs-local%3Bobfs%3Dhttp%3Bobfs-host%3Dwww.baidu.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;It supports the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SOCKS5 CONNECT command&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SOCKS5 UDP ASSOCIATE command (partial)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SOCKS4/4a CONNECT command&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Various crypto algorithms&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Load balancing (multiple servers) and server delay checking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/30&#34;&gt;SIP004&lt;/a&gt; AEAD ciphers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/28&#34;&gt;SIP003&lt;/a&gt; Plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/180&#34;&gt;SIP003u&lt;/a&gt; Plugin with UDP support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/27&#34;&gt;SIP002&lt;/a&gt; Extension ss URLs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/196&#34;&gt;SIP022&lt;/a&gt; AEAD 2022 ciphers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP Proxy Supports (&lt;a href=&#34;http://tools.ietf.org/html/rfc7230&#34;&gt;RFC 7230&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/html/draft-luotonen-web-proxy-tunneling-01&#34;&gt;CONNECT&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Defend against replay attacks, &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/44&#34;&gt;shadowsocks/shadowsocks-org#44&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Manager APIs, supporting &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks/wiki/Manage-Multiple-Users&#34;&gt;Manage Multiple Users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ACL (Access Control List)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support HTTP/HTTPS Proxy protocol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extend configuration format&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improved logging format (waiting for the new official log crate)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support more ciphers without depending on &lt;code&gt;libcrypto&lt;/code&gt; (waiting for an acceptable Rust crypto lib implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Build with stable &lt;code&gt;rustc&lt;/code&gt; &lt;del&gt;(blocking by &lt;code&gt;crypto2&lt;/code&gt;)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support HTTP Proxy protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AEAD ciphers. (proposed in &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-org/issues/30&#34;&gt;SIP004&lt;/a&gt;, still under discussion)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Choose server based on delay #152&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;The MIT License (MIT)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2014 Y. T. CHUNG&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/shadowsocks/shadowsocks-rust&#34;&gt;&lt;img src=&#34;https://starchart.cc/shadowsocks/shadowsocks-rust.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>