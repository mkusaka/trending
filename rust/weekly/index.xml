<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-13T01:50:05Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tauri-apps/wry</title>
    <updated>2024-10-13T01:50:05Z</updated>
    <id>tag:github.com,2024-10-13:/tauri-apps/wry</id>
    <link href="https://github.com/tauri-apps/wry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform WebView library in Rust for Tauri.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tauri-apps/wry/dev/.github/splash.png&#34; alt=&#34;WRY Webview Rendering library&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/wry&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/wry?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/wry/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docsrs/wry?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tauri&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/SpmNs4S&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-7289da.svg?sanitize=true&#34; alt=&#34;Chat Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tauri.app&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/website-tauri.app-purple.svg?sanitize=true&#34; alt=&#34;website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://good-labs.github.io/greater-good-affirmation&#34;&gt;&lt;img src=&#34;https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg?sanitize=true&#34; alt=&#34;https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tauri&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sponsor-Open%20Collective-blue.svg?sanitize=true&#34; alt=&#34;support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cross-platform WebView rendering library in Rust that supports all major desktop platforms like Windows, macOS, and Linux.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://gfycat.com/needywetelk&#34;&gt; &lt;img src=&#34;https://thumbs.gfycat.com/NeedyWetElk-size_restricted.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;WRY connects the web engine on each platform and provides easy to use and unified interface to render WebView. The webview requires a running event loop and a window type that implements &lt;code&gt;HasWindowHandle&lt;/code&gt;, or a gtk container widget if you need to support X11 and Wayland. You can use a windowing library like &lt;code&gt;tao&lt;/code&gt; or &lt;code&gt;winit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The minimum example to create a Window and browse a website looks like following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() -&amp;gt; wry::Result&amp;lt;()&amp;gt; {&#xA;  use tao::{&#xA;    event::{Event, StartCause, WindowEvent},&#xA;    event_loop::{ControlFlow, EventLoop},&#xA;    window::WindowBuilder,&#xA;  };&#xA;  use wry::WebViewBuilder;&#xA;&#xA;  let event_loop = EventLoop::new();&#xA;  let window = WindowBuilder::new()&#xA;    .with_title(&#34;Hello World&#34;)&#xA;    .build(&amp;amp;event_loop)&#xA;    .unwrap();&#xA;&#xA;  let webview = WebViewBuilder::new()&#xA;    .with_url(&#34;https://tauri.app&#34;)&#xA;    .build(&amp;amp;window)?;&#xA;&#xA;  event_loop.run(move |event, _, control_flow| {&#xA;    *control_flow = ControlFlow::Wait;&#xA;&#xA;    match event {&#xA;      Event::NewEvents(StartCause::Init) =&amp;gt; println!(&#34;Wry has started!&#34;),&#xA;      Event::WindowEvent {&#xA;        event: WindowEvent::CloseRequested,&#xA;        ..&#xA;      } =&amp;gt; *control_flow = ControlFlow::Exit,&#xA;      _ =&amp;gt; (),&#xA;    }&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also more samples under &lt;code&gt;examples&lt;/code&gt;, you can enter commands like the following to try them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --example multiwindow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, please read the documentation below.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.rs/wry&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Platform-specific notes&lt;/h2&gt; &#xA;&lt;p&gt;Here is the underlying web engine each platform uses, and some dependencies you might need to install.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Wry also needs &lt;a href=&#34;https://webkitgtk.org/&#34;&gt;WebKitGTK&lt;/a&gt; for WebView. So please make sure the following packages are installed:&lt;/p&gt; &#xA;&lt;h4&gt;Arch Linux / Manjaro:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S webkit2gtk-4.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;libayatana-indicator&lt;/code&gt; package can be installed from the Arch User Repository (AUR).&lt;/p&gt; &#xA;&lt;h4&gt;Debian / Ubuntu:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libwebkit2gtk-4.1-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install gtk3-devel webkit2gtk4.1-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fedora does not have the Ayatana package yet, so you need to use the GTK one, see the &lt;a href=&#34;https://docs.rs/wry/latest/wry/#feature-flags&#34;&gt;feature flags documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;WebKit is native on macOS so everything should be fine.&lt;/p&gt; &#xA;&lt;p&gt;If you are cross-compiling for macOS using &lt;a href=&#34;https://github.com/tpoechtrager/osxcross&#34;&gt;osxcross&lt;/a&gt; and encounter a runtime panic like &lt;code&gt;Class with name WKWebViewConfiguration could not be found&lt;/code&gt; it&#39;s possible that &lt;code&gt;WebKit.framework&lt;/code&gt; has not been linked correctly, to fix this set the &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RUSTFLAGS=&#34;-l framework=WebKit&#34; cargo build --target=x86_64-apple-darwin --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;WebView2 provided by Microsoft Edge Chromium is used. So wry supports Windows 7, 8, 10 and 11.&lt;/p&gt; &#xA;&lt;h3&gt;Android / iOS&lt;/h3&gt; &#xA;&lt;p&gt;Wry supports mobile with the help of &lt;a href=&#34;https://github.com/tauri-apps/cargo-mobile2&#34;&gt;&lt;code&gt;cargo-mobile2&lt;/code&gt;&lt;/a&gt; CLI to create template project. If you are interested in playing or hacking it, please follow &lt;a href=&#34;https://raw.githubusercontent.com/tauri-apps/wry/dev/MOBILE.md&#34;&gt;MOBILE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to create Android project yourself, there is a few requirements that your application needs to uphold:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You need to set a few environment variables that will be used to generate the necessary kotlin files that you need to include in your Android application for wry to function properly:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;WRY_ANDROID_PACKAGE&lt;/code&gt;: which is the reversed domain name of your android project and the app name in snake_case, for example, &lt;code&gt;com.wry.example.wry_app&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WRY_ANDROID_LIBRARY&lt;/code&gt;: for example, if your cargo project has a lib name &lt;code&gt;wry_app&lt;/code&gt;, it will generate &lt;code&gt;libwry_app.so&lt;/code&gt; so you se this env var to &lt;code&gt;wry_app&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WRY_ANDROID_KOTLIN_FILES_OUT_DIR&lt;/code&gt;: for example, &lt;code&gt;path/to/app/src/main/kotlin/com/wry/example&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your main Android Activity needs to inherit &lt;code&gt;AppCompatActivity&lt;/code&gt;, preferably it should use the generated &lt;code&gt;WryActivity&lt;/code&gt; or inherit it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your Rust app needs to call &lt;code&gt;wry::android_setup&lt;/code&gt; function to setup the necessary logic to be able to create webviews later on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your Rust app needs to call &lt;code&gt;wry::android_binding!&lt;/code&gt; macro to setup the JNI functions that will be called by &lt;code&gt;WryActivity&lt;/code&gt; and various other places.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://docs.rs/tao/latest/tao/&#34;&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt; crate as it provides maximum compatibility with &lt;code&gt;wry&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;#[cfg(target_os = &#34;android&#34;)]&#xA;{&#xA;  tao::android_binding!(&#xA;      com_example,&#xA;      wry_app,&#xA;      WryActivity,&#xA;      wry::android_setup, // pass the wry::android_setup function to tao which will invoke when the event loop is created&#xA;      _start_app&#xA;  );&#xA;  wry::android_binding!(com_example, ttt);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WRY_ANDROID_PACKAGE&lt;/code&gt; which is the reversed domain name of your android project and the app name in snake_case for example: &lt;code&gt;com.wry.example.wry_app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WRY_ANDROID_LIBRARY&lt;/code&gt; for example: if your cargo project has a lib name &lt;code&gt;wry_app&lt;/code&gt;, it will generate &lt;code&gt;libwry_app.so&lt;/code&gt; so you set this env var to &lt;code&gt;wry_app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WRY_ANDROID_KOTLIN_FILES_OUT_DIR&lt;/code&gt; for example: &lt;code&gt;path/to/app/src/main/kotlin/com/wry/example&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Partners&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://crabnebula.dev&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tauri-apps/wry/dev/.github/sponsors/crabnebula.svg?sanitize=true&#34; alt=&#34;CrabNebula&#34; width=&#34;283&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For the complete list of sponsors please visit our &lt;a href=&#34;https://tauri.app#sponsors&#34;&gt;website&lt;/a&gt; and &lt;a href=&#34;https://opencollective.com/tauri&#34;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache-2.0/MIT&lt;/p&gt;</summary>
  </entry>
</feed>