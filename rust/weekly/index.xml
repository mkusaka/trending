<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-12T01:59:31Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lencx/nofwl</title>
    <updated>2023-03-12T01:59:31Z</updated>
    <id>tag:github.com,2023-03-12:/lencx/nofwl</id>
    <link href="https://github.com/lencx/nofwl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NoFWL Desktop Application&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;180&#34; src=&#34;https://raw.githubusercontent.com/lencx/nofwl/main/assets/nofwl.png&#34; alt=&#34;ChatGPT&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;NoFWL&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;NoFWL Desktop Application (Mac, Windows and Linux)&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://visitor-badge.glitch.me/badge?page_id=lencx.nofwl&#34; alt=&#34;visitor&#34;&gt; &lt;a href=&#34;https://twitter.com/lencx_&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/follow-lencx__-blue?style=flat&amp;amp;logo=Twitter&#34; alt=&#34;lencx&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently under active development, please be patient. Its development is inspired by &lt;a href=&#34;https://github.com/lencx/ChatGPT&#34;&gt;lencx/ChatGPT&lt;/a&gt;, but NoFWL has more powerful features.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paritytech/polkadot</title>
    <updated>2023-03-12T01:59:31Z</updated>
    <id>tag:github.com,2023-03-12:/paritytech/polkadot</id>
    <link href="https://github.com/paritytech/polkadot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Polkadot Node Implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Polkadot&lt;/h1&gt; &#xA;&lt;p&gt;Implementation of a &lt;a href=&#34;https://polkadot.network&#34;&gt;https://polkadot.network&lt;/a&gt; node in Rust based on the Substrate framework.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In 2018, we split our implementation of &#34;Polkadot&#34; from its development framework &#34;Substrate&#34;. See the &lt;a href=&#34;https://github.com/paritytech/substrate&#34;&gt;Substrate&lt;/a&gt; repo for git history prior to 2018.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This repo contains runtimes for the Polkadot, Kusama, and Westend networks. The README provides information about installing the &lt;code&gt;polkadot&lt;/code&gt; binary and developing on the codebase. For more specific guides, like how to be a validator, see the &lt;a href=&#34;https://wiki.polkadot.network/docs/getting-started&#34;&gt;Polkadot Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you just wish to run a Polkadot node without compiling it yourself, you may either run the latest binary from our &lt;a href=&#34;https://github.com/paritytech/polkadot/releases&#34;&gt;releases&lt;/a&gt; page, or install Polkadot from one of our package repositories.&lt;/p&gt; &#xA;&lt;p&gt;Installation from the Debian repository will create a &lt;code&gt;systemd&lt;/code&gt; service that can be used to run a Polkadot node. This is disabled by default, and can be started by running &lt;code&gt;systemctl start polkadot&lt;/code&gt; on demand (use &lt;code&gt;systemctl enable polkadot&lt;/code&gt; to make it auto-start after reboot). By default, it will run as the &lt;code&gt;polkadot&lt;/code&gt; user. Command-line flags passed to the binary can be customized by editing &lt;code&gt;/etc/default/polkadot&lt;/code&gt;. This file will not be overwritten on updating polkadot. You may also just run the node directly from the command-line.&lt;/p&gt; &#xA;&lt;h3&gt;Debian-based (Debian, Ubuntu)&lt;/h3&gt; &#xA;&lt;p&gt;Currently supports Debian 10 (Buster) and Ubuntu 20.04 (Focal), and derivatives. Run the following commands as the &lt;code&gt;root&lt;/code&gt; user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Import the security@parity.io GPG key&#xA;gpg --recv-keys --keyserver hkps://keys.mailvelope.com 9D4B2B6EB8F97156D19669A9FF0812D491B96798&#xA;gpg --export 9D4B2B6EB8F97156D19669A9FF0812D491B96798 &amp;gt; /usr/share/keyrings/parity.gpg&#xA;# Add the Parity repository and update the package index&#xA;echo &#39;deb [signed-by=/usr/share/keyrings/parity.gpg] https://releases.parity.io/deb release main&#39; &amp;gt; /etc/apt/sources.list.d/parity.list&#xA;apt update&#xA;# Install the `parity-keyring` package - This will ensure the GPG key&#xA;# used by APT remains up-to-date&#xA;apt install parity-keyring&#xA;# Install polkadot&#xA;apt install polkadot&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Install via Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have the support software installed from the &lt;strong&gt;Build from Source&lt;/strong&gt; section below this section.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install Polkadot in your PATH, you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --git https://github.com/paritytech/polkadot --tag &amp;lt;version&amp;gt; polkadot --locked&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from Source&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to build from source, first install Rust. You may need to add Cargo&#39;s bin directory to your PATH environment variable. Restarting your computer will do this for you automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://sh.rustup.rs -sSf | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have Rust installed, make sure you&#39;re using the latest version by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once done, finish installing the support software:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential git clang libclang-dev pkg-config libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the client by cloning this repository and running the following commands from the root directory of the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout &amp;lt;latest tagged release&amp;gt;&#xA;./scripts/init.sh&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that compilation is a memory intensive process. We recommend having 4 GiB of physical RAM or swap available (keep in mind that if a build hits swap it tends to be very slow).&lt;/p&gt; &#xA;&lt;h4&gt;Build from Source with Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can also build from source using &lt;a href=&#34;https://github.com/paritytech/scripts/tree/master/dockerfiles/ci-linux&#34;&gt;Parity CI docker image&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout &amp;lt;latest tagged release&amp;gt;&#xA;docker run --rm -it -w /shellhere/polkadot \&#xA;                    -v $(pwd):/shellhere/polkadot \&#xA;                    paritytech/ci-linux:production cargo build --release&#xA;sudo chown -R $(id -u):$(id -g) target/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to reproduce other steps of CI process you can use the following &lt;a href=&#34;https://github.com/paritytech/scripts#gitlab-ci-for-building-docker-images&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Networks&lt;/h2&gt; &#xA;&lt;p&gt;This repo supports runtimes for Polkadot, Kusama, and Westend.&lt;/p&gt; &#xA;&lt;h3&gt;Connect to Polkadot Mainnet&lt;/h3&gt; &#xA;&lt;p&gt;Connect to the global Polkadot Mainnet network by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./target/release/polkadot --chain=polkadot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see your node on &lt;a href=&#34;https://telemetry.polkadot.io/#list/Polkadot&#34;&gt;telemetry&lt;/a&gt; (set a custom name with &lt;code&gt;--name &#34;my custom name&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Connect to the &#34;Kusama&#34; Canary Network&lt;/h3&gt; &#xA;&lt;p&gt;Connect to the global Kusama canary network by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./target/release/polkadot --chain=kusama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see your node on &lt;a href=&#34;https://telemetry.polkadot.io/#list/Polkadot&#34;&gt;telemetry&lt;/a&gt; (set a custom name with &lt;code&gt;--name &#34;my custom name&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Connect to the Westend Testnet&lt;/h3&gt; &#xA;&lt;p&gt;Connect to the global Westend testnet by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./target/release/polkadot --chain=westend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see your node on &lt;a href=&#34;https://telemetry.polkadot.io/#list/Polkadot&#34;&gt;telemetry&lt;/a&gt; (set a custom name with &lt;code&gt;--name &#34;my custom name&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Obtaining DOTs&lt;/h3&gt; &#xA;&lt;p&gt;If you want to do anything on Polkadot, Kusama, or Westend, then you&#39;ll need to get an account and some DOT, KSM, or WND tokens, respectively. See the &lt;a href=&#34;https://claims.polkadot.network/&#34;&gt;claims instructions&lt;/a&gt; for Polkadot if you have DOTs to claim. For Westend&#39;s WND tokens, see the faucet &lt;a href=&#34;https://wiki.polkadot.network/docs/learn-DOT#getting-westies&#34;&gt;instructions&lt;/a&gt; on the Wiki.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking on Polkadot&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d actually like to hack on Polkadot, you can grab the source code and build it. Ensure you have Rust and the support software installed. This script will install or update Rust and install the required dependencies (this may take up to 30 minutes on Mac machines):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://getsubstrate.io -sSf | bash -s -- --fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, grab the Polkadot source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/paritytech/polkadot.git&#xA;cd polkadot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build the code. You will need to build in release mode (&lt;code&gt;--release&lt;/code&gt;) to start a network. Only use debug mode for development (faster compile times for development and testing).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init.sh   # Install WebAssembly. Update Rust&#xA;cargo build # Builds all native code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the tests if you like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo test --workspace --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can start a development chain with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run -- --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed logs may be shown by running the node with the following environment variables set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RUST_LOG=debug RUST_BACKTRACE=1 cargo run -- --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;You can run a simple single-node development &#34;network&#34; on your machine by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polkadot --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can muck around by heading to &lt;a href=&#34;https://polkadot.js.org/apps&#34;&gt;https://polkadot.js.org/apps&lt;/a&gt; and choose &#34;Local Node&#34; from the Settings menu.&lt;/p&gt; &#xA;&lt;h3&gt;Local Two-node Testnet&lt;/h3&gt; &#xA;&lt;p&gt;If you want to see the multi-node consensus algorithm in action locally, then you can create a local testnet. You&#39;ll need two terminals open. In one, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polkadot --chain=polkadot-local --alice -d /tmp/alice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the other, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polkadot --chain=polkadot-local --bob -d /tmp/bob --port 30334 --bootnodes &#39;/ip4/127.0.0.1/tcp/30333/p2p/ALICE_BOOTNODE_ID_HERE&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure you replace &lt;code&gt;ALICE_BOOTNODE_ID_HERE&lt;/code&gt; with the node ID from the output of the first terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.polkadot.network/docs/maintain-guides-how-to-monitor-your-node&#34;&gt;Setup Prometheus and Grafana&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you set this up you can take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot/master/grafana/README.md&#34;&gt;Polkadot Grafana dashboards&lt;/a&gt; that we currently maintain.&lt;/p&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot/master/doc/docker.md&#34;&gt;Using Docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Shell Completion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot/master/doc/shell-completion.md&#34;&gt;Shell Completion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributor Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Polkadot is &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot/master/LICENSE&#34;&gt;GPL 3.0 licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/tokenizers</title>
    <updated>2023-03-12T01:59:31Z</updated>
    <id>tag:github.com,2023-03-12:/huggingface/tokenizers</id>
    <link href="https://github.com/huggingface/tokenizers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💥 Fast State-of-the-Art Tokenizers optimized for Research and Production&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://huggingface.co/landing/assets/tokenizers/tokenizers-logo.png&#34; width=&#34;600&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Build&#34; src=&#34;https://github.com/huggingface/tokenizers/workflows/Rust/badge.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://github.com/huggingface/tokenizers/raw/master/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/huggingface/tokenizers.svg?color=blue&amp;amp;cachedrop&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/tokenizers&#34;&gt; &lt;img src=&#34;https://pepy.tech/badge/tokenizers/week&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Provides an implementation of today&#39;s most used tokenizers, with a focus on performance and versatility.&lt;/p&gt; &#xA;&lt;h2&gt;Main features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Train new vocabularies and tokenize, using today&#39;s most used tokenizers.&lt;/li&gt; &#xA; &lt;li&gt;Extremely fast (both training and tokenization), thanks to the Rust implementation. Takes less than 20 seconds to tokenize a GB of text on a server&#39;s CPU.&lt;/li&gt; &#xA; &lt;li&gt;Easy to use, but also extremely versatile.&lt;/li&gt; &#xA; &lt;li&gt;Designed for research and production.&lt;/li&gt; &#xA; &lt;li&gt;Normalization comes with alignments tracking. It&#39;s always possible to get the part of the original sentence that corresponds to a given token.&lt;/li&gt; &#xA; &lt;li&gt;Does all the pre-processing: Truncate, Pad, add the special tokens your model needs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;We provide bindings to the following languages (more to come!):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/tokenizers/tree/master/tokenizers&#34;&gt;Rust&lt;/a&gt; (Original implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/tokenizers/tree/master/bindings/python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/tokenizers/tree/master/bindings/node&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankane/tokenizers-ruby&#34;&gt;Ruby&lt;/a&gt; (Contributed by @ankane, external repo)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick example using Python:&lt;/h2&gt; &#xA;&lt;p&gt;Choose your model between Byte-Pair Encoding, WordPiece or Unigram and instantiate a tokenizer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tokenizers import Tokenizer&#xA;from tokenizers.models import BPE&#xA;&#xA;tokenizer = Tokenizer(BPE())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize how pre-tokenization (e.g., splitting into words) is done:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tokenizers.pre_tokenizers import Whitespace&#xA;&#xA;tokenizer.pre_tokenizer = Whitespace()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then training your tokenizer on a set of files just takes two lines of codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tokenizers.trainers import BpeTrainer&#xA;&#xA;trainer = BpeTrainer(special_tokens=[&#34;[UNK]&#34;, &#34;[CLS]&#34;, &#34;[SEP]&#34;, &#34;[PAD]&#34;, &#34;[MASK]&#34;])&#xA;tokenizer.train(files=[&#34;wiki.train.raw&#34;, &#34;wiki.valid.raw&#34;, &#34;wiki.test.raw&#34;], trainer=trainer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your tokenizer is trained, encode any text with just one line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;output = tokenizer.encode(&#34;Hello, y&#39;all! How are you 😁 ?&#34;)&#xA;print(output.tokens)&#xA;# [&#34;Hello&#34;, &#34;,&#34;, &#34;y&#34;, &#34;&#39;&#34;, &#34;all&#34;, &#34;!&#34;, &#34;How&#34;, &#34;are&#34;, &#34;you&#34;, &#34;[UNK]&#34;, &#34;?&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://huggingface.co/docs/tokenizers/python/latest&#34;&gt;python documentation&lt;/a&gt; or the &lt;a href=&#34;https://huggingface.co/docs/tokenizers/python/latest/quicktour.html&#34;&gt;python quicktour&lt;/a&gt; to learn more!&lt;/p&gt;</summary>
  </entry>
</feed>