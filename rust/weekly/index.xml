<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-13T02:04:13Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tuananh/hyper-mcp</title>
    <updated>2025-04-13T02:04:13Z</updated>
    <id>tag:github.com,2025-04-13:/tuananh/hyper-mcp</id>
    <link href="https://github.com/tuananh/hyper-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, secure MCP server that extends its capabilities through WebAssembly plugins.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://crates.io/crates/hyper-mcp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rust-%23000000.svg?logo=rust&amp;amp;logoColor=white&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tuananh/hyper-mcp/main/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache--2.0-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tuananh/hyper-mcp/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/tuananh/hyper-mcp&#34; alt=&#34;Issues - daytona&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- ![GitHub Release](https://img.shields.io/github/v/release/tuananh/hyper-mcp) --&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img alt=&#34;hyper-mcp logo&#34; src=&#34;https://raw.githubusercontent.com/tuananh/hyper-mcp/main/assets/logo.png&#34; width=&#34;50%&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;hyper-mcp&lt;/h1&gt; &#xA;&lt;p&gt;A fast, secure MCP server that extends its capabilities through WebAssembly plugins.&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;hyper-mcp makes it easy to add AI capabilities to your applications. It works with Claude Desktop, Cursor IDE, and other MCP-compatible apps. Write plugins in your favorite language, distribute them through container registries, and run them anywhere - from cloud to edge.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write plugins in any language that compiles to WebAssembly&lt;/li&gt; &#xA; &lt;li&gt;Distribute plugins via standard OCI registries (like Docker Hub)&lt;/li&gt; &#xA; &lt;li&gt;Built on &lt;a href=&#34;https://github.com/extism/extism&#34;&gt;Extism&lt;/a&gt; for rock-solid plugin support&lt;/li&gt; &#xA; &lt;li&gt;Lightweight enough for resource-constrained environments&lt;/li&gt; &#xA; &lt;li&gt;Deploy anywhere: serverless, edge, mobile, IoT devices&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform compatibility out of the box&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Built with security-first mindset:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sandboxed plugins that can&#39;t access your system without permission&lt;/li&gt; &#xA; &lt;li&gt;Memory-safe execution with resource limits&lt;/li&gt; &#xA; &lt;li&gt;Secure plugin distribution through container registries&lt;/li&gt; &#xA; &lt;li&gt;Fine-grained access control for host functions&lt;/li&gt; &#xA; &lt;li&gt;OCI plugin images are signed at publish time and verified at load time with &lt;a href=&#34;https://www.sigstore.dev/&#34;&gt;sigstore&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create your config file: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;$HOME/.config/hyper-mcp/config.json&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;code&gt;{FOLDERID_RoamingAppData}&lt;/code&gt;. Eg: &lt;code&gt;C:\Users\Alice\AppData\Roaming&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;$HOME/Library/Application Support/hyper-mcp/config.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;plugins&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;time&#34;,&#xA;      &#34;path&#34;: &#34;oci://ghcr.io/tuananh/time-plugin:latest&#34;&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;qr-code&#34;,&#xA;      &#34;path&#34;: &#34;oci://ghcr.io/tuananh/qrcode-plugin:latest&#34;&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;hash&#34;,&#xA;      &#34;path&#34;: &#34;oci://ghcr.io/tuananh/hash-plugin:latest&#34;&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;myip&#34;,&#xA;      &#34;path&#34;: &#34;oci://ghcr.io/tuananh/myip-plugin:latest&#34;,&#xA;      &#34;runtime_config&#34;: {&#xA;        &#34;allowed_hosts&#34;: [&#34;1.1.1.1&#34;]&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;fetch&#34;,&#xA;      &#34;path&#34;: &#34;oci://ghcr.io/tuananh/fetch-plugin:latest&#34;,&#xA;      &#34;runtime_config&#34;: {&#xA;        &#34;allowed_hosts&#34;: [&#34;*&#34;]&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start the server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hyper-mcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, logs will go into &lt;a href=&#34;https://docs.rs/dirs/6.0.0/dirs/fn.state_dir.html&#34;&gt;state_dir&lt;/a&gt; on Linux or &lt;a href=&#34;https://docs.rs/dirs/6.0.0/dirs/fn.data_local_dir.html&#34;&gt;data_local_dir&lt;/a&gt; on macOS &amp;amp; Windows.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$XDG_DATA_HOME&lt;/code&gt; or &lt;code&gt;$HOME/.local/share&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/home/alice/.local/share&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME/Library/Application Support&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/Users/Alice/Library/Application Support&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{FOLDERID_LocalAppData}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C:\Users\Alice\AppData\Local&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you&#39;re loading unsigned OCI plugin, you will need to use &lt;code&gt;--insecure-skip-signature&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Using with Cursor IDE&lt;/h2&gt; &#xA;&lt;p&gt;You can configure hyper-mcp either globally for all projects or specifically for individual projects.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For project-scope configuration, create &lt;code&gt;.cursor/mcp.json&lt;/code&gt; in your project root:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;hyper-mcp&#34;: {&#xA;      &#34;command&#34;: &#34;/path/to/hyper-mcp&#34;,&#xA;      &#34;args&#34;: [&#34;&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up hyper-mcp in Cursor&#39;s settings: &lt;img src=&#34;https://raw.githubusercontent.com/tuananh/hyper-mcp/main/assets/cursor-mcp.png&#34; alt=&#34;cursor mcp&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start using tools through chat: &lt;img src=&#34;https://raw.githubusercontent.com/tuananh/hyper-mcp/main/assets/cursor-mcp-1.png&#34; alt=&#34;cursor mcp chat&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Available Plugins&lt;/h2&gt; &#xA;&lt;p&gt;We maintain several example plugins to get you started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/time&#34;&gt;time&lt;/a&gt;: Get current time and do time calculations (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/qr-code&#34;&gt;qr-code&lt;/a&gt;: Generate QR codes (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/hash&#34;&gt;hash&lt;/a&gt;: Generate various types of hashes (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/myip&#34;&gt;myip&lt;/a&gt;: Get your current IP (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/fetch&#34;&gt;fetch&lt;/a&gt;: Basic webpage fetching (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/crypto-price&#34;&gt;crypto-price&lt;/a&gt;: Get cryptocurrency prices (Go)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/fs&#34;&gt;fs&lt;/a&gt;: File system operations (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/fs&#34;&gt;github&lt;/a&gt;: GitHub plugin (Go)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/eval-py&#34;&gt;eval-py&lt;/a&gt;: Evaluate Python code with RustPython (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/arxiv&#34;&gt;arxiv&lt;/a&gt;: Search &amp;amp; download arXiv papers (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/memory&#34;&gt;memory&lt;/a&gt;: Let you store &amp;amp; retrive memory, powered by SQLite (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/memory&#34;&gt;sqlite&lt;/a&gt;: Interact with SQLite (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/crates-io&#34;&gt;crates-io&lt;/a&gt;: Get crate general information, check crate latest version (Rust)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins/gomodule&#34;&gt;gomodule&lt;/a&gt;: Get Go modules info, version (Rust)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community-built plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hungran/hyper-mcp-hackernews-tool&#34;&gt;hackernews&lt;/a&gt;: This plugin connects to the Hacker News API to fetch the current top stories and display them with their titles, scores, authors, and URLs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ntheanh201/hyper-mcp-release-monitor-id-tool&#34;&gt;release-monitor-id&lt;/a&gt;: This plugin retrieves project ID from release-monitoring.org, which helps track versions of released software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phamngocquy/hyper-mcp-yfinance&#34;&gt;yahoo-finance&lt;/a&gt;: This plugin connects to the Yahoo Finance API to provide stock prices (OHLCV) based on a company name or ticker symbol.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Creating Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://github.com/tuananh/hyper-mcp/tree/main/examples/plugins&#34;&gt;example plugins&lt;/a&gt; to learn how to build your own.&lt;/p&gt; &#xA;&lt;p&gt;To publish a plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# example how to build with rust&#xA;FROM rust:1.86-slim AS builder&#xA;&#xA;RUN rustup target add wasm32-wasip1 &amp;amp;&amp;amp; \&#xA;    rustup component add rust-std --target wasm32-wasip1&#xA;&#xA;WORKDIR /workspace&#xA;COPY . .&#xA;RUN cargo fetch&#xA;RUN cargo build --release --target wasm32-wasip1&#xA;&#xA;# copy wasm to final image&#xA;FROM scratch&#xA;WORKDIR /&#xA;COPY --from=builder /workspace/target/wasm32-wasip1/release/your-plugin.wasm /plugin.wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build and push:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t your-registry/plugin-name .&#xA;docker push your-registry/plugin-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tuananh/hyper-mcp/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#tuananh/hyper-mcp&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=tuananh/hyper-mcp&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Rust-GPU/Rust-CUDA</title>
    <updated>2025-04-13T02:04:13Z</updated>
    <id>tag:github.com,2025-04-13:/Rust-GPU/Rust-CUDA</id>
    <link href="https://github.com/Rust-GPU/Rust-CUDA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ecosystem of libraries and tools for writing and executing fast GPU code fully in Rust.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;The Rust CUDA Project&lt;/h1&gt; &#xA; &lt;p&gt; &lt;strong&gt;An ecosystem of libraries and tools for writing and executing extremely fast GPU code fully in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://rust-gpu.github.io/Rust-CUDA/guide/index.html&#34;&gt;Guide&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Rust-GPU/Rust-CUDA/main/guide/src/guide/getting_started.md&#34;&gt;Getting Started&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Rust-GPU/Rust-CUDA/main/guide/src/features.md&#34;&gt;Features&lt;/a&gt; &lt;/h3&gt; &#xA; &lt;strong&gt;⚠️ The project is still in early development, expect bugs, safety issues, and things that don&#39;t work ⚠️&lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This project is no longer dormant and is &lt;a href=&#34;https://rust-gpu.github.io/blog/2025/01/27/rust-cuda-reboot&#34;&gt;being rebooted&lt;/a&gt;. Read the &lt;a href=&#34;https://rust-gpu.github.io/blog/2025/03/18/rust-cuda-update&#34;&gt;latest status update&lt;/a&gt;. Please contribute!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Goal&lt;/h2&gt; &#xA;&lt;p&gt;The Rust CUDA Project is a project aimed at making Rust a tier-1 language for extremely fast GPU computing using the CUDA Toolkit. It provides tools for compiling Rust to extremely fast PTX code as well as libraries for using existing CUDA libraries with it.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;Historically, general purpose high performance GPU computing has been done using the CUDA toolkit. The CUDA toolkit primarily provides a way to use Fortran/C/C++ code for GPU computing in tandem with CPU code with a single source. It also provides many libraries, tools, forums, and documentation to supplement the single-source CPU/GPU code.&lt;/p&gt; &#xA;&lt;p&gt;CUDA is exclusively an NVIDIA-only toolkit. Many tools have been proposed for cross-platform GPU computing such as OpenCL, Vulkan Computing, and HIP. However, CUDA remains the most used toolkit for such tasks by far. This is why it is imperative to make Rust a viable option for use with the CUDA toolkit.&lt;/p&gt; &#xA;&lt;p&gt;However, CUDA with Rust has been a historically very rocky road. The only viable option until now has been to use the LLVM PTX backend, however, the LLVM PTX backend does not always work and would generate invalid PTX for many common Rust operations, and in recent years it has been shown time and time again that a specialized solution is needed for Rust on the GPU with the advent of projects such as rust-gpu (for Rust -&amp;gt; SPIR-V).&lt;/p&gt; &#xA;&lt;p&gt;Our hope is that with this project we can push the Rust GPU computing industry forward and make Rust an excellent language for such tasks. Rust offers plenty of benefits such as &lt;code&gt;__restrict__&lt;/code&gt; performance benefits for every kernel, An excellent module/crate system, delimiting of unsafe areas of CPU/GPU code with &lt;code&gt;unsafe&lt;/code&gt;, high level wrappers to low level CUDA libraries, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;The scope of the Rust CUDA Project is quite broad, it spans the entirety of the CUDA ecosystem, with libraries and tools to make it usable using Rust. Therefore, the project contains many crates for all corners of the CUDA ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;The current line-up of libraries is the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustc_codegen_nvvm&lt;/code&gt; Which is a rustc backend that targets NVVM IR (a subset of LLVM IR) for the &lt;a href=&#34;https://docs.nvidia.com/cuda/nvvm-ir-spec/index.html&#34;&gt;libnvvm&lt;/a&gt; library. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generates highly optimized PTX code which can be loaded by the CUDA Driver API to execute on the GPU.&lt;/li&gt; &#xA;   &lt;li&gt;For the near future it will be CUDA-only, but it may be used to target amdgpu in the future.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cuda_std&lt;/code&gt; for GPU-side functions and utilities, such as thread index queries, memory allocation, warp intrinsics, etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Not&lt;/em&gt; a low level library, provides many utility functions to make it easier to write cleaner and more reliable GPU kernels.&lt;/li&gt; &#xA;   &lt;li&gt;Closely tied to &lt;code&gt;rustc_codegen_nvvm&lt;/code&gt; which exposes GPU features through it internally.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rust-GPU/Rust-CUDA/tree/master/crates/cudnn&#34;&gt;&lt;code&gt;cudnn&lt;/code&gt;&lt;/a&gt; for a collection of GPU-accelerated primitives for deep neural networks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cust&lt;/code&gt; for CPU-side CUDA features such as launching GPU kernels, GPU memory allocation, device queries, etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;High level with features such as RAII and Rust Results that make it easier and cleaner to manage the interface to the GPU.&lt;/li&gt; &#xA;   &lt;li&gt;A high level wrapper for the CUDA Driver API, the lower level version of the more common CUDA Runtime API used from C++.&lt;/li&gt; &#xA;   &lt;li&gt;Provides much more fine grained control over things like kernel concurrency and module loading than the C++ Runtime API.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gpu_rand&lt;/code&gt; for GPU-friendly random number generation, currently only implements xoroshiro RNGs from &lt;code&gt;rand_xoshiro&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;optix&lt;/code&gt; for CPU-side hardware raytracing and denoising using the CUDA OptiX library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to many &#34;glue&#34; crates for things such as high level wrappers for certain smaller CUDA libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;Other projects related to using Rust on the GPU:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2016: &lt;a href=&#34;https://github.com/kmcallister/glassful&#34;&gt;glassful&lt;/a&gt; Subset of Rust that compiles to GLSL.&lt;/li&gt; &#xA; &lt;li&gt;2017: &lt;a href=&#34;https://github.com/msiglreith/inspirv-rust&#34;&gt;inspirv-rust&lt;/a&gt; Experimental Rust MIR -&amp;gt; SPIR-V Compiler.&lt;/li&gt; &#xA; &lt;li&gt;2018: &lt;a href=&#34;https://github.com/japaric-archived/nvptx&#34;&gt;nvptx&lt;/a&gt; Rust to PTX compiler using the &lt;code&gt;nvptx&lt;/code&gt; target for rustc (using the LLVM PTX backend).&lt;/li&gt; &#xA; &lt;li&gt;2020: &lt;a href=&#34;https://github.com/termoshtt/accel&#34;&gt;accel&lt;/a&gt; Higher-level library that relied on the same mechanism that &lt;code&gt;nvptx&lt;/code&gt; does.&lt;/li&gt; &#xA; &lt;li&gt;2020: &lt;a href=&#34;https://github.com/MaikKlein/rlsl&#34;&gt;rlsl&lt;/a&gt; Experimental Rust -&amp;gt; SPIR-V compiler (predecessor to rust-gpu)&lt;/li&gt; &#xA; &lt;li&gt;2020: &lt;a href=&#34;https://github.com/Rust-GPU/rust-gpu&#34;&gt;rust-gpu&lt;/a&gt; &lt;code&gt;rustc&lt;/code&gt; compiler backend to compile Rust to SPIR-V for use in shaders, similar mechanism as our project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## setup your environment like:&#xA;### export OPTIX_ROOT=/opt/NVIDIA-OptiX-SDK-9.0.0-linux64-x86_64&#xA;### export OPTIX_ROOT_DIR=/opt/NVIDIA-OptiX-SDK-9.0.0-linux64-x86_64&#xA;&#xA;## build proj&#xA;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use Rust-CUDA in Container Environments&lt;/h2&gt; &#xA;&lt;p&gt;The distribution related Dockerfile are located in &lt;code&gt;container&lt;/code&gt; folder. Taking ubuntu 24.04 as an example, run the following command in repository root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -f ./container/ubuntu24/Dockerfile -t rust-cuda-ubuntu24 .&#xA;docker run --rm --runtime=nvidia --gpus all -it rust-cuda-ubuntu24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A sample &lt;code&gt;.devcontainer.json&lt;/code&gt; file is also included, configured for Ubuntu 24.02. Copy this to &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; to make additonal customizations.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/Rust-GPU/Rust-CUDA/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/Rust-GPU/Rust-CUDA/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your discretion.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>