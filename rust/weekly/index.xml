<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-08T01:46:15Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ratatui/ratatui</title>
    <updated>2025-06-08T01:46:15Z</updated>
    <id>tag:github.com,2025-06-08:/ratatui/ratatui</id>
    <link href="https://github.com/ratatui/ratatui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rust crate for cooking up terminal user interfaces (TUIs) 👨‍🍳🐀 https://ratatui.rs&lt;/p&gt;&lt;hr&gt;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#built-with-ratatui&#34;&gt;Built with Ratatui&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#alternatives&#34;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ratatui/ratatui/raw/87ae72dbc756067c97f6400d3e2a58eeb383776e/examples/demo2-destroy.gif?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://crates.io/crates/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/ratatui?logo=rust&amp;amp;style=flat-square&amp;amp;color=E05D44&#34; alt=&#34;Crate Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ratatui/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-ratatui/ratatui-1370D3?style=flat-square&amp;amp;logo=github&#34; alt=&#34;Repo Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-ratatui-1370D3?style=flat-square&amp;amp;logo=rust&#34; alt=&#34;Docs Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/ratatui?style=flat-square&amp;amp;color=1370D3&#34; alt=&#34;License Badge&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/ratatui/ratatui/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ratatui/ratatui/ci.yml?style=flat-square&amp;amp;logo=github&#34; alt=&#34;CI Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/ratatui/ratatui?path=ratatui&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/ratatui/ratatui/status.svg?path=ratatui&amp;amp;style=flat-square&#34; alt=&#34;Deps Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/ratatui/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/ratatui/ratatui?logo=codecov&amp;amp;style=flat-square&amp;amp;token=BAQ8SOKEST&amp;amp;color=C43AC3&#34; alt=&#34;Codecov Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/ratatui&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/ratatui?logo=github&amp;amp;style=flat-square&amp;amp;color=1370D3&#34; alt=&#34;Sponsors Badge&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; · &lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;Docs&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/ratatui-widgets/examples&#34;&gt;Widget Examples&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/examples&#34;&gt;App Examples&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md&#34;&gt;Breaking Changes&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md&#34;&gt;Report a bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md&#34;&gt;Request a Feature&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui&lt;/a&gt; (&lt;em&gt;ˌræ.təˈtu.i&lt;/em&gt;) is a Rust crate for cooking up terminal user interfaces (TUIs). It provides a simple and flexible way to create text-based user interfaces in the terminal, which can be used for command-line applications, dashboards, and other interactive console programs.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Ratatui has &lt;a href=&#34;https://github.com/ratatui/templates/&#34;&gt;templates&lt;/a&gt; available to help you get started quickly. You can use the &lt;a href=&#34;https://crates.io/crates/cargo-generate&#34;&gt;&lt;code&gt;cargo-generate&lt;/code&gt;&lt;/a&gt; command to create a new project with Ratatui:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --locked cargo-generate&#xA;cargo generate ratatui/templates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Selecting the Hello World template produces the following application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use color_eyre::Result;&#xA;use crossterm::event::{self, Event};&#xA;use ratatui::{DefaultTerminal, Frame};&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;()&amp;gt; {&#xA;    color_eyre::install()?;&#xA;    let terminal = ratatui::init();&#xA;    let result = run(terminal);&#xA;    ratatui::restore();&#xA;    result&#xA;}&#xA;&#xA;fn run(mut terminal: DefaultTerminal) -&amp;gt; Result&amp;lt;()&amp;gt; {&#xA;    loop {&#xA;        terminal.draw(render)?;&#xA;        if matches!(event::read()?, Event::Key(_)) {&#xA;            break Ok(());&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;fn render(frame: &amp;amp;mut Frame) {&#xA;    frame.render_widget(&#34;hello world&#34;, frame.area());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/ratatui&#34;&gt;Docs&lt;/a&gt; - the full API documentation for the library on docs.rs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ratatui.rs/&#34;&gt;Ratatui Website&lt;/a&gt; - explains the library&#39;s concepts and provides step-by-step tutorials.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.ratatui.rs&#34;&gt;Ratatui Forum&lt;/a&gt; - a place to ask questions and discuss the library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/ratatui-widgets/examples&#34;&gt;Widget Examples&lt;/a&gt; - a collection of examples that demonstrate how to use the library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/tree/main/examples&#34;&gt;App Examples&lt;/a&gt; - a collection of more complex examples that demonstrate how to build apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; - generated by &lt;a href=&#34;https://git-cliff.org&#34;&gt;git-cliff&lt;/a&gt; utilizing &lt;a href=&#34;https://www.conventionalcommits.org&#34;&gt;Conventional Commits&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ratatui/ratatui/raw/main/BREAKING-CHANGES.md&#34;&gt;Breaking Changes&lt;/a&gt; - a list of breaking changes in the library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also watch the &lt;a href=&#34;https://www.youtube.com/watch?v=hWG51Mc1DlM&#34;&gt;EuroRust 2024 talk&lt;/a&gt; to learn about common concepts in Ratatui and what&#39;s possible to build with it.&lt;/p&gt; &#xA;&lt;h2&gt;Templates&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking to get started quickly, you can use one of the available templates from the &lt;a href=&#34;https://github.com/ratatui/templates/&#34;&gt;templates&lt;/a&gt; repository using &lt;a href=&#34;https://crates.io/crates/cargo-generate&#34;&gt;&lt;code&gt;cargo-generate&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo generate ratatui/templates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Built with Ratatui&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ratatui/awesome-ratatui&#34;&gt;&lt;img src=&#34;https://awesome.re/badge-flat2.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://ratatui.rs/showcase/&#34;&gt;showcase&lt;/a&gt; section of the website, or the &lt;a href=&#34;https://github.com/ratatui/awesome-ratatui&#34;&gt;awesome-ratatui&lt;/a&gt; repository for a curated list of awesome apps and libraries built with Ratatui!&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/cursive&#34;&gt;Cursive&lt;/a&gt; - a ncurses-based TUI library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/iocraft&#34;&gt;iocraft&lt;/a&gt; - a declarative TUI library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/pMCEU9hNEj&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1070692720437383208?label=discord&amp;amp;logo=discord&amp;amp;style=flat-square&amp;amp;color=1370D3&amp;amp;logoColor=1370D3&#34; alt=&#34;Discord Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/%23ratatui:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/ratatui-general%3Amatrix.org?style=flat-square&amp;amp;logo=matrix&amp;amp;label=Matrix&amp;amp;color=C43AC3&#34; alt=&#34;Matrix Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.ratatui.rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/likes?server=https%3A%2F%2Fforum.ratatui.rs&amp;amp;style=flat-square&amp;amp;logo=discourse&amp;amp;label=forum&amp;amp;color=C43AC3&#34; alt=&#34;Forum Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to join our &lt;a href=&#34;https://discord.gg/pMCEU9hNEj&#34;&gt;Discord server&lt;/a&gt; for discussions and questions! There is also a &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt; bridge available at &lt;a href=&#34;https://matrix.to/#/%23ratatui:matrix.org&#34;&gt;#ratatui:matrix.org&lt;/a&gt;. We have also recently launched the &lt;a href=&#34;https://forum.ratatui.rs&#34;&gt;Ratatui Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We rely on GitHub for &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md&#34;&gt;bugs&lt;/a&gt; and &lt;a href=&#34;https://github.com/ratatui/ratatui/issues/new?labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.md&#34;&gt;feature requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure you read the &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; guidelines before &lt;a href=&#34;https://github.com/ratatui/ratatui/compare&#34;&gt;creating a pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Ratatui was forked from the &lt;a href=&#34;https://crates.io/crates/tui&#34;&gt;tui-rs&lt;/a&gt; crate in 2023 in order to continue its development. None of this could be possible without &lt;a href=&#34;https://github.com/fdehau&#34;&gt;Florian Dehau&lt;/a&gt; who originally created &lt;a href=&#34;https://crates.io/crates/tui&#34;&gt;tui-rs&lt;/a&gt; which inspired many Rust TUIs.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/nawok&#34;&gt;Pavel Fomchenkov&lt;/a&gt; for his work in designing an awesome logo for the Ratatui project and organization.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/ratatui/ratatui/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cocoindex-io/cocoindex</title>
    <updated>2025-06-08T01:46:15Z</updated>
    <id>tag:github.com,2025-06-08:/cocoindex-io/cocoindex</id>
    <link href="https://github.com/cocoindex-io/cocoindex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time data transformation framework for AI. Ultra performant, with incremental processing.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cocoindex.io/images/github.svg?sanitize=true&#34; alt=&#34;CocoIndex&#34;&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Extract, Transform, Index Data. Easy and Fresh. 🌴&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/cocoindex-io/cocoindex&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/cocoindex-io/cocoindex?color=5B5BD6&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoindex.io/docs/getting_started/quickstart&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-394e79?logo=readthedocs&amp;amp;logoColor=00B9FF&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-5B5BD6?logoColor=white&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/cocoindex/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/cocoindex?color=5B5BD6&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/cocoindex&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/cocoindex&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/cocoindex-io/cocoindex/actions/workflows/CI.yml&#34;&gt;&lt;img src=&#34;https://github.com/cocoindex-io/cocoindex/actions/workflows/CI.yml/badge.svg?event=push&amp;amp;color=5B5BD6&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cocoindex-io/cocoindex/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/cocoindex-io/cocoindex/actions/workflows/release.yml/badge.svg?event=push&amp;amp;color=5B5BD6&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/zpA9S2DR7s&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1314801574169673738?logo=discord&amp;amp;color=5B5BD6&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;CocoIndex&lt;/strong&gt; is an ultra performant data transformation framework, with its core engine written in Rust. The problem it tries to solve is to make it easy to prepare fresh data for AI - either creating embedding, building knowledge graphs, or performing other data transformations - and take real-time data pipelines beyond traditional SQL.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cocoindex.io/images/cocoindex-features.png&#34; alt=&#34;CocoIndex Features&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The philosophy is to have the framework handle the source updates, and having developers only worry about defining a series of data transformation, inspired by spreadsheet.&lt;/p&gt; &#xA;&lt;h2&gt;Dataflow programming&lt;/h2&gt; &#xA;&lt;p&gt;Unlike a workflow orchestration framework where data is usually opaque, in CocoIndex, data and data operations are first class citizens. CocoIndex follows the idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/Dataflow_programming&#34;&gt;Dataflow&lt;/a&gt; programming model. Each transformation creates a new field solely based on input fields, without hidden states and value mutation. All data before/after each transformation is observable, with lineage out of the box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Particularly&lt;/strong&gt;, users don&#39;t explicitly mutate data by creating, updating and deleting. Rather, they define something like - for a set of source data, this is the transformation or formula. The framework takes care of the data operations such as when to create, update, or delete.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# import&#xA;data[&#39;content&#39;] = flow_builder.add_source(...) &#xA;&#xA;# transform&#xA;data[&#39;out&#39;] = data[&#39;content&#39;] &#xA;    .transform(...)&#xA;    .transform(...)&#xA;&#xA;# collect data&#xA;collector.collect(...)&#xA;&#xA;# export to db, vector db, graph db ...&#xA;collector.export(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Freshness&lt;/h2&gt; &#xA;&lt;p&gt;As a data framework, CocoIndex takes it to the next level on data freshness. &lt;strong&gt;Incremental processing&lt;/strong&gt; is one of the core values provided by CocoIndex.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/f4eb29b3-84ee-4fa0-a1e2-80eedeeabde6&#34; alt=&#34;Incremental Processing&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The frameworks takes care of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change data capture.&lt;/li&gt; &#xA; &lt;li&gt;Figure out what exactly needs to be updated, and only updating that without having to recompute everything.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This makes it fast to reflect any source updates to the target store. If you have concerns with surfacing stale data to AI agents and are spending lots of efforts working on infra piece to optimize the latency, the framework actually handles it for you.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start:&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re new to CocoIndex, we recommend checking out&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📖 &lt;a href=&#34;https://cocoindex.io/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚡ &lt;a href=&#34;https://cocoindex.io/docs/getting_started/quickstart&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎬 &lt;a href=&#34;https://youtu.be/gv5R8nOXsWU?si=9ioeKYkMEnYevTXT&#34;&gt;Quick Start Video Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install CocoIndex Python library&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U cocoindex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoindex.io/docs/getting_started/installation#-install-postgres&#34;&gt;Install Postgres&lt;/a&gt; if you don&#39;t have one. CocoIndex uses it for incremental processing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Define data flow&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://cocoindex.io/docs/getting_started/quickstart&#34;&gt;Quick Start Guide&lt;/a&gt; to define your first indexing flow. An example flow looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@cocoindex.flow_def(name=&#34;TextEmbedding&#34;)&#xA;def text_embedding_flow(flow_builder: cocoindex.FlowBuilder, data_scope: cocoindex.DataScope):&#xA;    # Add a data source to read files from a directory&#xA;    data_scope[&#34;documents&#34;] = flow_builder.add_source(cocoindex.sources.LocalFile(path=&#34;markdown_files&#34;))&#xA;&#xA;    # Add a collector for data to be exported to the vector index&#xA;    doc_embeddings = data_scope.add_collector()&#xA;&#xA;    # Transform data of each document&#xA;    with data_scope[&#34;documents&#34;].row() as doc:&#xA;        # Split the document into chunks, put into `chunks` field&#xA;        doc[&#34;chunks&#34;] = doc[&#34;content&#34;].transform(&#xA;            cocoindex.functions.SplitRecursively(),&#xA;            language=&#34;markdown&#34;, chunk_size=2000, chunk_overlap=500)&#xA;&#xA;        # Transform data of each chunk&#xA;        with doc[&#34;chunks&#34;].row() as chunk:&#xA;            # Embed the chunk, put into `embedding` field&#xA;            chunk[&#34;embedding&#34;] = chunk[&#34;text&#34;].transform(&#xA;                cocoindex.functions.SentenceTransformerEmbed(&#xA;                    model=&#34;sentence-transformers/all-MiniLM-L6-v2&#34;))&#xA;&#xA;            # Collect the chunk into the collector.&#xA;            doc_embeddings.collect(filename=doc[&#34;filename&#34;], location=chunk[&#34;location&#34;],&#xA;                                   text=chunk[&#34;text&#34;], embedding=chunk[&#34;embedding&#34;])&#xA;&#xA;    # Export collected data to a vector index.&#xA;    doc_embeddings.export(&#xA;        &#34;doc_embeddings&#34;,&#xA;        cocoindex.storages.Postgres(),&#xA;        primary_key_fields=[&#34;filename&#34;, &#34;location&#34;],&#xA;        vector_indexes=[&#xA;            cocoindex.VectorIndexDef(&#xA;                field_name=&#34;embedding&#34;,&#xA;                metric=cocoindex.VectorSimilarityMetric.COSINE_SIMILARITY)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It defines an index flow like this:&lt;/p&gt; &#xA;&lt;img width=&#34;363&#34; alt=&#34;Data Flow&#34; src=&#34;https://github.com/user-attachments/assets/2ea7be6d-3d94-42b1-b2bd-22515577e463&#34;&gt; &#xA;&lt;h2&gt;🚀 Examples and demo&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/text_embedding&#34;&gt;Text Embedding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Index text documents with embeddings for semantic search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/code_embedding&#34;&gt;Code Embedding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Index code embeddings for semantic search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/pdf_embedding&#34;&gt;PDF Embedding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parse PDF and index text embeddings for semantic search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/manuals_llm_extraction&#34;&gt;Manuals LLM Extraction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Extract structured information from a manual using LLM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/amazon_s3_embedding&#34;&gt;Amazon S3 Embedding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Index text documents from Amazon S3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/gdrive_text_embedding&#34;&gt;Google Drive Text Embedding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Index text documents from Google Drive&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/docs_to_knowledge_graph&#34;&gt;Docs to Knowledge Graph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Extract relationships from Markdown documents and build a knowledge graph&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/text_embedding_qdrant&#34;&gt;Embeddings to Qdrant&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Index documents in a Qdrant collection for semantic search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/fastapi_server_docker&#34;&gt;FastAPI Server with Docker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run the semantic search server in a Dockerized FastAPI setup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/product_recommendation&#34;&gt;Product Recommendation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build real-time product recommendations with LLM and graph database&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cocoindex-io/cocoindex/main/examples/image_search&#34;&gt;Image Search with Vision API&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generates detailed captions for images using a vision model, embeds them, enables live-updating semantic search via FastAPI and served on a React frontend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;More coming and stay tuned 👀!&lt;/p&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For detailed documentation, visit &lt;a href=&#34;https://cocoindex.io/docs&#34;&gt;CocoIndex Documentation&lt;/a&gt;, including a &lt;a href=&#34;https://cocoindex.io/docs/getting_started/quickstart&#34;&gt;Quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love contributions from our community ❤️. For details on contributing or running the project for development, check out our &lt;a href=&#34;https://cocoindex.io/docs/about/contributing&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;👥 Community&lt;/h2&gt; &#xA;&lt;p&gt;Welcome with a huge coconut hug 🥥⋆｡˚🤗. We are super excited for community contributions of all kinds - whether it&#39;s code improvements, documentation updates, issue reports, feature requests, and discussions in our Discord.&lt;/p&gt; &#xA;&lt;p&gt;Join our community here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🌟 &lt;a href=&#34;https://github.com/cocoindex-io/cocoindex&#34;&gt;Star us on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;👋 &lt;a href=&#34;https://discord.com/invite/zpA9S2DR7s&#34;&gt;Join our Discord community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;▶️ &lt;a href=&#34;https://www.youtube.com/@cocoindex-io&#34;&gt;Subscribe to our YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://cocoindex.io/blogs/&#34;&gt;Read our blog posts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support us:&lt;/h2&gt; &#xA;&lt;p&gt;We are constantly improving, and more features and examples are coming soon. If you love this project, please drop us a star ⭐ at GitHub repo &lt;a href=&#34;https://github.com/cocoindex-io/cocoindex&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/cocoindex-io/cocoindex?color=5B5BD6&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; to stay tuned and help us grow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;CocoIndex is Apache 2.0 licensed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yujqiao/rathole</title>
    <updated>2025-06-08T01:46:15Z</updated>
    <id>tag:github.com,2025-06-08:/yujqiao/rathole</id>
    <link href="https://github.com/yujqiao/rathole" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight and high-performance reverse proxy for NAT traversal, written in Rust. An alternative to frp and ngrok.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rathole&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/img/rathole-logo.png&#34; alt=&#34;rathole-logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rapiz1/rathole/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/rapiz1/rathole&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rapiz1/rathole/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/rapiz1/rathole&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/rapiz1/rathole/rust.yml?branch=main&#34; alt=&#34;GitHub Workflow Status (branch)&#34;&gt; &lt;a href=&#34;https://github.com/rapiz1/rathole/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/rapiz1/rathole/total&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/rapiz1/rathole&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/rapiz1/rathole&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/rapiz1/rathole?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/rapiz1/rathole.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/rapiz1/rathole&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/README-zh.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A secure, stable and high-performance reverse proxy for NAT traversal, written in Rust&lt;/p&gt; &#xA;&lt;p&gt;rathole, like &lt;a href=&#34;https://github.com/fatedier/frp&#34;&gt;frp&lt;/a&gt; and &lt;a href=&#34;https://github.com/inconshreveable/ngrok&#34;&gt;ngrok&lt;/a&gt;, can help to expose the service on the device behind the NAT to the Internet, via a server with a public IP.&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#rathole&#34;&gt;rathole&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#tuning&#34;&gt;Tuning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#planning&#34;&gt;Planning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt; Much higher throughput can be achieved than frp, and more stable when handling a large volume of connections. See &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low Resource Consumption&lt;/strong&gt; Consumes much fewer memory than similar tools. See &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/build-guide.md&#34;&gt;The binary can be&lt;/a&gt; &lt;strong&gt;as small as ~500KiB&lt;/strong&gt; to fit the constraints of devices, like embedded devices as routers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; Tokens of services are mandatory and service-wise. The server and clients are responsible for their own configs. With the optional Noise Protocol, encryption can be configured at ease. No need to create a self-signed certificate! TLS is also supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hot Reload&lt;/strong&gt; Services can be added or removed dynamically by hot-reloading the configuration file. HTTP API is WIP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;A full-powered &lt;code&gt;rathole&lt;/code&gt; can be obtained from the &lt;a href=&#34;https://github.com/rapiz1/rathole/releases&#34;&gt;release&lt;/a&gt; page. Or &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/build-guide.md&#34;&gt;build from source&lt;/a&gt; &lt;strong&gt;for other platforms and minimizing the binary&lt;/strong&gt;. A &lt;a href=&#34;https://hub.docker.com/r/rapiz1/rathole&#34;&gt;Docker image&lt;/a&gt; is also available.&lt;/p&gt; &#xA;&lt;p&gt;The usage of &lt;code&gt;rathole&lt;/code&gt; is very similar to frp. If you have experience with the latter, then the configuration is very easy for you. The only difference is that configuration of a service is split into the client side and the server side, and a token is mandatory.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;rathole&lt;/code&gt;, you need a server with a public IP, and a device behind the NAT, where some services that need to be exposed to the Internet.&lt;/p&gt; &#xA;&lt;p&gt;Assuming you have a NAS at home behind the NAT, and want to expose its ssh service to the Internet:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On the server which has a public IP&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Create &lt;code&gt;server.toml&lt;/code&gt; with the following content and accommodate it to your needs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# server.toml&#xA;[server]&#xA;bind_addr = &#34;0.0.0.0:2333&#34; # `2333` specifies the port that rathole listens for clients&#xA;&#xA;[server.services.my_nas_ssh]&#xA;token = &#34;use_a_secret_that_only_you_know&#34; # Token that is used to authenticate the client for the service. Change to an arbitrary value.&#xA;bind_addr = &#34;0.0.0.0:5202&#34; # `5202` specifies the port that exposes `my_nas_ssh` to the Internet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./rathole server.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;On the host which is behind the NAT (your NAS)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Create &lt;code&gt;client.toml&lt;/code&gt; with the following content and accommodate it to your needs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# client.toml&#xA;[client]&#xA;remote_addr = &#34;myserver.com:2333&#34; # The address of the server. The port must be the same with the port in `server.bind_addr`&#xA;&#xA;[client.services.my_nas_ssh]&#xA;token = &#34;use_a_secret_that_only_you_know&#34; # Must be the same with the server to pass the validation&#xA;local_addr = &#34;127.0.0.1:22&#34; # The address of the service that needs to be forwarded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./rathole client.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Now the client will try to connect to the server &lt;code&gt;myserver.com&lt;/code&gt; on port &lt;code&gt;2333&lt;/code&gt;, and any traffic to &lt;code&gt;myserver.com:5202&lt;/code&gt; will be forwarded to the client&#39;s port &lt;code&gt;22&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;So you can &lt;code&gt;ssh myserver.com:5202&lt;/code&gt; to ssh to your NAS.&lt;/p&gt; &#xA;&lt;p&gt;To run &lt;code&gt;rathole&lt;/code&gt; run as a background service on Linux, checkout the &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/examples/systemd&#34;&gt;systemd examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rathole&lt;/code&gt; can automatically determine to run in the server mode or the client mode, according to the content of the configuration file, if only one of &lt;code&gt;[server]&lt;/code&gt; and &lt;code&gt;[client]&lt;/code&gt; block is present, like the example in &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;But the &lt;code&gt;[client]&lt;/code&gt; and &lt;code&gt;[server]&lt;/code&gt; block can also be put in one file. Then on the server side, run &lt;code&gt;rathole --server config.toml&lt;/code&gt; and on the client side, run &lt;code&gt;rathole --client config.toml&lt;/code&gt; to explicitly tell &lt;code&gt;rathole&lt;/code&gt; the running mode.&lt;/p&gt; &#xA;&lt;p&gt;Before heading to the full configuration specification, it&#39;s recommend to skim &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/examples&#34;&gt;the configuration examples&lt;/a&gt; to get a feeling of the configuration format.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/transport.md&#34;&gt;Transport&lt;/a&gt; for more details about encryption and the &lt;code&gt;transport&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;p&gt;Here is the full configuration specification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;example.com:2333&#34; # Necessary. The address of the server&#xA;default_token = &#34;default_token_if_not_specify&#34; # Optional. The default token of services, if they don&#39;t define their own ones&#xA;heartbeat_timeout = 40 # Optional. Set to 0 to disable the application-layer heartbeat test. The value must be greater than `server.heartbeat_interval`. Default: 40 seconds&#xA;retry_interval = 1 # Optional. The interval between retry to connect to the server. Default: 1 second&#xA;&#xA;[client.transport] # The whole block is optional. Specify which transport to use&#xA;type = &#34;tcp&#34; # Optional. Possible values: [&#34;tcp&#34;, &#34;tls&#34;, &#34;noise&#34;]. Default: &#34;tcp&#34;&#xA;&#xA;[client.transport.tcp] # Optional. Also affects `noise` and `tls`&#xA;proxy = &#34;socks5://user:passwd@127.0.0.1:1080&#34; # Optional. The proxy used to connect to the server. `http` and `socks5` is supported.&#xA;nodelay = true # Optional. Determine whether to enable TCP_NODELAY, if applicable, to improve the latency but decrease the bandwidth. Default: true&#xA;keepalive_secs = 20 # Optional. Specify `tcp_keepalive_time` in `tcp(7)`, if applicable. Default: 20 seconds&#xA;keepalive_interval = 8 # Optional. Specify `tcp_keepalive_intvl` in `tcp(7)`, if applicable. Default: 8 seconds&#xA;&#xA;[client.transport.tls] # Necessary if `type` is &#34;tls&#34;&#xA;trusted_root = &#34;ca.pem&#34; # Necessary. The certificate of CA that signed the server&#39;s certificate&#xA;hostname = &#34;example.com&#34; # Optional. The hostname that the client uses to validate the certificate. If not set, fallback to `client.remote_addr`&#xA;&#xA;[client.transport.noise] # Noise protocol. See `docs/transport.md` for further explanation&#xA;pattern = &#34;Noise_NK_25519_ChaChaPoly_BLAKE2s&#34; # Optional. Default value as shown&#xA;local_private_key = &#34;key_encoded_in_base64&#34; # Optional&#xA;remote_public_key = &#34;key_encoded_in_base64&#34; # Optional&#xA;&#xA;[client.transport.websocket] # Necessary if `type` is &#34;websocket&#34;&#xA;tls = true # If `true` then it will use settings in `client.transport.tls`&#xA;&#xA;[client.services.service1] # A service that needs forwarding. The name `service1` can change arbitrarily, as long as identical to the name in the server&#39;s configuration&#xA;type = &#34;tcp&#34; # Optional. The protocol that needs forwarding. Possible values: [&#34;tcp&#34;, &#34;udp&#34;]. Default: &#34;tcp&#34;&#xA;token = &#34;whatever&#34; # Necessary if `client.default_token` not set&#xA;local_addr = &#34;127.0.0.1:1081&#34; # Necessary. The address of the service that needs to be forwarded&#xA;nodelay = true # Optional. Override the `client.transport.nodelay` per service&#xA;retry_interval = 1 # Optional. The interval between retry to connect to the server. Default: inherits the global config&#xA;&#xA;[client.services.service2] # Multiple services can be defined&#xA;local_addr = &#34;127.0.0.1:1082&#34;&#xA;&#xA;[server]&#xA;bind_addr = &#34;0.0.0.0:2333&#34; # Necessary. The address that the server listens for clients. Generally only the port needs to be change.&#xA;default_token = &#34;default_token_if_not_specify&#34; # Optional&#xA;heartbeat_interval = 30 # Optional. The interval between two application-layer heartbeat. Set to 0 to disable sending heartbeat. Default: 30 seconds&#xA;&#xA;[server.transport] # Same as `[client.transport]`&#xA;type = &#34;tcp&#34;&#xA;&#xA;[server.transport.tcp] # Same as the client&#xA;nodelay = true&#xA;keepalive_secs = 20&#xA;keepalive_interval = 8&#xA;&#xA;[server.transport.tls] # Necessary if `type` is &#34;tls&#34;&#xA;pkcs12 = &#34;identify.pfx&#34; # Necessary. pkcs12 file of server&#39;s certificate and private key&#xA;pkcs12_password = &#34;password&#34; # Necessary. Password of the pkcs12 file&#xA;&#xA;[server.transport.noise] # Same as `[client.transport.noise]`&#xA;pattern = &#34;Noise_NK_25519_ChaChaPoly_BLAKE2s&#34;&#xA;local_private_key = &#34;key_encoded_in_base64&#34;&#xA;remote_public_key = &#34;key_encoded_in_base64&#34;&#xA;&#xA;[server.transport.websocket] # Necessary if `type` is &#34;websocket&#34;&#xA;tls = true # If `true` then it will use settings in `server.transport.tls`&#xA;&#xA;[server.services.service1] # The service name must be identical to the client side&#xA;type = &#34;tcp&#34; # Optional. Same as the client `[client.services.X.type]&#xA;token = &#34;whatever&#34; # Necessary if `server.default_token` not set&#xA;bind_addr = &#34;0.0.0.0:8081&#34; # Necessary. The address of the service is exposed at. Generally only the port needs to be change.&#xA;nodelay = true # Optional. Same as the client&#xA;&#xA;[server.services.service2]&#xA;bind_addr = &#34;0.0.0.1:8082&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rathole&lt;/code&gt;, like many other Rust programs, use environment variables to control the logging level. &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt; are available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;RUST_LOG=error ./rathole config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will run &lt;code&gt;rathole&lt;/code&gt; with only error level logging.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;RUST_LOG&lt;/code&gt; is not present, the default logging level is &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tuning&lt;/h3&gt; &#xA;&lt;p&gt;From v0.4.7, rathole enables TCP_NODELAY by default, which should benefit the latency and interactive applications like rdp, Minecraft servers. However, it slightly decreases the bandwidth.&lt;/p&gt; &#xA;&lt;p&gt;If the bandwidth is more important, TCP_NODELAY can be opted out with &lt;code&gt;nodelay = false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;rathole has similar latency to &lt;a href=&#34;https://github.com/fatedier/frp&#34;&gt;frp&lt;/a&gt;, but can handle a more connections, provide larger bandwidth, with less memory usage.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the separate page &lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/benchmark.md&#34;&gt;Benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;However, don&#39;t take it from here that &lt;code&gt;rathole&lt;/code&gt; can magically make your forwarded service faster several times than before.&lt;/strong&gt; The benchmark is done on local loopback, indicating the performance when the task is cpu-bounded. One can gain quite a improvement if the network is not the bottleneck. Unfortunately, that&#39;s not true for many users. In that case, the main benefit is lower resource consumption, while the bandwidth and the latency may not improved significantly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/img/http_throughput.svg?sanitize=true&#34; alt=&#34;http_throughput&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/img/tcp_bitrate.svg?sanitize=true&#34; alt=&#34;tcp_bitrate&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/img/udp_bitrate.svg?sanitize=true&#34; alt=&#34;udp_bitrate&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/img/mem-graph.png&#34; alt=&#34;mem&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Planning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; HTTP APIs for configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yujqiao/rathole/main/docs/out-of-scope.md&#34;&gt;Out of Scope&lt;/a&gt; lists features that are not planned to be implemented and why.&lt;/p&gt;</summary>
  </entry>
</feed>