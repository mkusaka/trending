<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T02:00:40Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EvilGenius-dot/RustMinerSystem</title>
    <updated>2023-08-06T02:00:40Z</updated>
    <id>tag:github.com,2023-08-06:/EvilGenius-dot/RustMinerSystem</id>
    <link href="https://github.com/EvilGenius-dot/RustMinerSystem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KT minerproxy 3.0+ 基于Rust创建一个独特的minerproxy，它支持所有货币管理及币种热更新、准确的计算能力统计和以及按照算力抽取, 兼容所有机型无损耗。 minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy minerproxy&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;top&#34;&gt;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;RustMinerSystem&lt;/h1&gt; &#xA; &lt;h2&gt;A mine pool level operation and maintenance tools👍 &lt;/h2&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/EvilGenius-dot/RustMinerSystem/main/image/logo.png&#34; alt=&#34;Logo&#34; width=&#34;170&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EvilGenius-dot/RustMinerSystem&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/RustMinerSystem-v2.0.0-green?logo=rust&#34; alt=&#34;RustMinerSystem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EvilGenius-dot/RustMinerSystem/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/ajeetdsouza/zoxide/total?logo=github&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EvilGenius-dot/RustMinerSystem/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/EvilGenius-dot/RustMinerSystem.svg?style=flat&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EvilGenius-dot/RustMinerSystem&#34;&gt;English&lt;/a&gt;｜&lt;a href=&#34;https://github.com/EvilGenius-dot/RustMinerSystem/tree/main/Readme/i18n&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;The powerful and experienced monitoring and recording system can solve the abnormal situation of the farm immediately.&lt;/p&gt; &#xA; &lt;p&gt;The hash rate statistics at the level of mining pool, and the hash rate of any currency can be seen at a glance&lt;/p&gt; &#xA; &lt;p&gt;Automatically adjust the working mode and data flow according to the terminal equipment to avoid highly ineffective task sharing&lt;/p&gt; &#xA; &lt;p&gt;The active defense and filtering system improves the security of the environment and finds hazards in time.&lt;/p&gt; &#xA; &lt;p&gt;The front-end client has high-performance TCP integration and compression technology. No matter how far the farm is from the mining pool, they can effectively reduce farm delay and prevent all middlemen from attacking.&lt;/p&gt; &#xA; &lt;p&gt;The commission system compatible with various algorithms can reasonably improve the mine profits.&lt;/p&gt; &#xA; &lt;p&gt;Built-in algorithm engines can update popular currencies without heating.&lt;/p&gt; &#xA; &lt;p&gt;The dashboard is perfectly compatible with various devices, with PC, MOBILE, and PAD at a glance.&lt;/p&gt; &#xA; &lt;p&gt;Perfect control logic, even if the service charge is turned on, the mine pool end will not show that the equipment is offline.&lt;/p&gt; &#xA; &lt;p&gt;Based on the development of Rust, efficient language brings unparalleled performance.&lt;/p&gt; &#xA; &lt;p&gt;High-performance, next-generation operation and maintenance experience, which is a professional farm operation and maintenance system-RustMinerSystem brought by the top R&amp;amp;D team and RUST experts in Silicon Valley&lt;/p&gt; &#xA; &lt;p&gt;(Partial Preview)&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/EvilGenius-dot/RustMinerSystem/main/image/1.png&#34; alt=&#34;Logo&#34; width=&#34;670&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Free customized version&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EvilGenius-dot/RustMinerSystem/main/#dingzhi&#34;&gt;Click for free customized version description&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Join the discussion group&lt;/h1&gt; &#xA;&lt;p&gt;Telegram：&lt;a href=&#34;https://t.me/rustkt&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://t.me/rustkt&#34;&gt;https://t.me/rustkt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Telegram：&lt;a href=&#34;https://t.me/+Zrz9d5gUR7YzOTVl&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://t.me/+Zrz9d5gUR7YzOTVl&#34;&gt;https://t.me/+Zrz9d5gUR7YzOTVl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Discord：&lt;a href=&#34;sadfasfdasfsa&#34;&gt;sadfasfdasfsa&lt;/a&gt; --&gt; &#xA;&lt;h1&gt;Special thanks&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/EvilGenius-dot/RustMinerSystem/main/image/icon-logo-blue.png&#34; alt=&#34;Logo&#34; width=&#34;100&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/EvilGenius-dot/RustMinerSystem/main/image/poolin.svg?sanitize=true&#34; alt=&#34;Logo&#34; width=&#34;100&#34;&gt; &#xA;&lt;p&gt;Thanks for the technical support provided by the mine pool😊&lt;/p&gt; &#xA;&lt;h1&gt;Supported algorithms&lt;/h1&gt; &#xA;&lt;p&gt;For the supported algorithm, the corresponding currency will be updated without heat at any time, and the client 0 will bear the burden&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;arithmetic&lt;/th&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;   &lt;th&gt;Relevant currency&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SHA256&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;BTC、BCH...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ETHASH&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;ETC、ETHW、ETHF、ETC+ZIL、ETHW+ZIL、ETHF+ZIL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SCRYPT&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;LTC...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;KHEAVYHASH&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;KASPA...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BLAKE2B&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;SC...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCTOPUS&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;CFX...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Service Agreement&lt;/h1&gt; &#xA;&lt;p&gt;RustMinerSystem is subject to the supervision of Hong Kong laws. Please note that the legal requirements of various countries/regions may restrict such products and services. Therefore, this product and service as well as some functions may not be available or may be restricted in some jurisdictions or regions or some users. You should understand and comply with the local laws and regulations. If you use this product, the default representative accepts the above license. If the legal problems caused by this product are irrelevant to this product.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Select your applicable operating system&lt;/p&gt; &#xA;  &lt;details open&gt; &#xA;   &lt;summary&gt;Linux&lt;/summary&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;Run the following shell instructions to run the toolkit&lt;/p&gt; &#xA;    &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; bash &amp;lt;(curl -s -L https://github.com/EvilGenius-dot/RustMinerSystem/raw/main/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;p&gt;After running successfully, you will see the following menu.&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details open&gt; &#xA;   &lt;summary&gt;Windows&lt;/summary&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;Please download the specified version directly from the Windows directory of this project:&lt;/p&gt; &#xA;    &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;https://github.com/EvilGenius-dot/RustMinerSystem/tree/main/windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/blockquote&gt; &#xA;   &lt;p&gt;To start the Windows version, double-click it.&lt;/p&gt; &#xA;   &lt;p&gt;Linux After the script is run, enter 1 or 2 to select the installation menu language. The following interface is displayed&lt;/p&gt; &#xA;   &lt;p&gt;---------- English Menu ----------&lt;/p&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;Install&lt;/li&gt; &#xA;    &lt;li&gt;Update&lt;/li&gt; &#xA;    &lt;li&gt;Start software&lt;/li&gt; &#xA;    &lt;li&gt;Stop software&lt;/li&gt; &#xA;    &lt;li&gt;Restart software&lt;/li&gt; &#xA;    &lt;li&gt;Modify startup port&lt;/li&gt; &#xA;    &lt;li&gt;Remove Linux system connection limit (requires server restart to take effect)&lt;/li&gt; &#xA;    &lt;li&gt;Set automatic startup&lt;/li&gt; &#xA;    &lt;li&gt;Disable automatic startup...&lt;/li&gt; &#xA;    &lt;li&gt;Check program running status&lt;/li&gt; &#xA;    &lt;li&gt;View error log&lt;/li&gt; &#xA;    &lt;li&gt;Clear log files&lt;/li&gt; &#xA;    &lt;li&gt;View current WEB access port&lt;/li&gt; &#xA;    &lt;li&gt;Uninstall&lt;/li&gt; &#xA;    &lt;li&gt;Reset account password&lt;/li&gt; &#xA;    &lt;li&gt;Install specified version [1-16]：&lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Enter 1 to install&lt;/p&gt; &#xA;   &lt;p&gt;The following message is displayed after the installation is complete&lt;/p&gt; &#xA;   &lt;p&gt;|----------------------------------------------------------------|&lt;br&gt; Program started successfully, WEB access port is21441, Default account is qzpm19kkx default password is xloqslz913&lt;br&gt;&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;If you are using the default password and port, please change the account password and web access port in a timely manner through the web settings.&lt;br&gt;&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;   &lt;/table&gt; &#xA;   &lt;br&gt; &#xA;   &lt;p&gt;If the preceding information is displayed, the installation is successful. Enter the server IP address: port number in the browser to access the background.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Version Log&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;3.1.0&#xA;Tuning the performance of new algorithms under ETC algorithm&#xA;&#xA;3.0.0&#xA;Reconfigured the pumping algorithm, and now all currencies can pump accurately to the thousandth digit &#xA; &#xA;In loss-prone mining pools and machines, it is now possible to ensure that the end customer does not reduce computing power more than the set percentage &#xA; &#xA;The e9pro is perfectly optimized &#xA; &#xA;Refactored the interface, added wallet list, device list filtering criteria and so on &#xA; &#xA;Added the setting of single miner pumping &#xA; &#xA;Optimized the power statistics, now the power statistics are no longer messy &#xA; &#xA;Optimized invalid&#xA;&#xA;2.1.0&#xA;Completely solve the jam&#xA;&#xA;2.0.9&#xA;Solve the stuck problem  &#xA;&#xA;Optimal pumping&#xA;&#xA;2.0.8&#xA;Two pumping algorithms are combined  &#xA;&#xA;Fix suspended animation again&#xA;&#xA;2.0.7 &#xA;Fixed an issue with version 6 suspended animation &#xA; &#xA;The problem of insufficient computing power in equilibrium mode is optimized&#xA;&#xA;2.0.6&#xA;Optimized power compensation, the power compensation option is now hidden, and power is allocated to all miners by default &#xA; &#xA;Optimized E9pro, now all mining pools can run full E9pro, and the calculation of e9pro in rust is accurate and consistent with the mining pool &#xA; &#xA;Added a pumping mode &#xA; &#xA;Added a mode for connecting mine pools &#xA; &#xA;Optimized mining machine with high computing power&#xA;&#xA;&#xA;2.0.5&#xA;&#xA;[Important Update] Fixed a bug where RUST was suspended in windows &#xA; &#xA;Fixed high inefficiency of kas Glacier and other chip machines &#xA; &#xA;Compatible with the etc gtv66 chip, improve the etc computing power calculation &#xA; &#xA;Fixed some bugs in power statistics&#xA;&#xA;2.0.4 &#xA;The default mode of computing power compensation is optimized to further reduce inefficiency &#xA; &#xA;Optimized the performance of kaspa under different mining pool protocols, lolminer and gminer now work in all mining pools &#xA; &#xA;Optimized the calculation logic of the etc related algorithm, and now the calculation and pumping are more accurate &#xA; &#xA;The underlying optimization improves the hardware utilization &#xA; &#xA;Optimized share display bug &#xA; &#xA;Optimize the home active distribution list&#xA;&#xA;2.0.3&#xA;Fixed a serious BUG caused by disconnection reconnection mechanism&#xA;&#xA;&#xA;2.0.2&#xA;Fixed a software crash caused by concurrency  &#xA;&#xA;Statistical optimization of computing power&#xA;&#xA;2.0.0 &#xA;Multiple client details optimization &#xA; &#xA;Now the pumping accuracy is MAX &#xA; &#xA;Added power compensation configuration, now the loss of power compensation can be configured on the port &#xA; &#xA;The mechanism of re-connection of broken lines is added to ensure that the mining machine with frequent disconnection can also pump normally &#xA; &#xA;Fixed kas high invalidation bug &#xA; &#xA;The underlying algorithm engine was updated and reconstructed, and began to rapidly support small coins &#xA; &#xA;Added SC currency &#xA; &#xA;Added CFX currency &#xA; &#xA;Fixed an issue where LTC was highly ineffective in viabtc &#xA; &#xA;Fixed an issue with inaccurate LTC power display &#xA; &#xA;Fixed LTC computing power loss problem &#xA; &#xA;Remove the limit on the number of pumping wallets &#xA; &#xA;Lifting cross-pond pumping restrictions &#xA; &#xA;Optimized port logs, added program runtime logs, and enabled device logs&#xA;&#xA;The low-level optimization avoids several bugs that are easy to cause program crashes&#xA;&#xA;&#xA;1.0.4&#xA;Optimized the efficiency of some BTC models, optimized the rejection rate of viabtc and ant mine pool&#xA;&#xA;optimized a detail bug, and further reduced the inefficiency&#xA;&#xA;1.0.3&#xA;Performance optimization &#xA; &#xA;Added configuration import and export in json, kt, and excel formats&#xA;&#xA;1.0.2&#xA;The underlying reconstruction optimizes the processing and statistics of multiple links &#xA; &#xA;It is deeply optimized for e9pro &#xA; &#xA;Open error log&#xA;&#xA;1.0.1&#xA;Fixed a bug caused by links&#xA;&#xA;1.0.0&#xA;Open test&#xA;&#xA;0.9.999&#xA;A serious security breach was fixed&#xA;&#xA;Optimized commission logic for all currencies&#xA;&#xA;0.9.99&#xA;Optimize BTC, LTC&#xA;&#xA;Optimized mean delay display is not accurate&#xA;&#xA;0.9.98&#xA;Optimize the bottom layer and reduce losses&#xA;&#xA;0.9.97&#xA;Fixed a serious bug in program pseudo death&#xA;&#xA;0.9.96&#xA;The perfect BTC@KAS&#xA;&#xA;0.9.95&#xA;fix...&#xA;&#xA;0.9.94&#xA;fix...&#xA;&#xA;0.9.93&#xA;fix...&#xA;&#xA;0.9.92&#xA;Fixed a bug where the hot update wallet would cause the application to crash. Fixed some kernel kas connection issues &#xA; &#xA;Fixed ltc small power display bug&#xA;&#xA;0.9.91&#xA;Fixed a bug where the hot update wallet caused the program to crash&#xA;&#xA;Fixed kas not working properly due to changes in the previous version&#xA;&#xA;0.9.9&#xA;Optimized a lot of details&#xA;&#xA;Optimized Yami equipment&#xA;&#xA;Further reducing the probability of ineffectiveness (although already very low)&#xA;&#xA;Optimized memory and CPU usage&#xA;&#xA;0.1.4&#xA;Optimize e9 and e9pro&#xA;&#xA;0.1.3&#xA;Optimizing Antminer s17&#xA;&#xA;0.1.2&#xA;Fixed a serious issue of task chaos for multiple devices under Rust&#xA;&#xA;Fixed issue where kas was unable to receive tasks&#xA;&#xA;0.1.0&#xA;Release of internal test version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Help&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span id=&#34;dingzhi&#34;&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Customize the version description&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Join a chat group &lt;a href=&#34;https://t.me/rustkt&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://t.me/rustkt&#34;&gt;https://t.me/rustkt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Please organize the following format data and send it to the group master or administrator:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Software name&lt;/p&gt; &#xA;&lt;p&gt;Project address&lt;/p&gt; &#xA;&lt;p&gt;logo and Introduction&lt;/p&gt; &#xA;&lt;p&gt;—————————————————&lt;/p&gt; &#xA;&lt;p&gt;currency: BTC,&lt;/p&gt; &#xA;&lt;p&gt;Built-in commission rate: ratio&lt;/p&gt; &#xA;&lt;p&gt;Built-in anonymous wallet: xxxxxxxxxxxxxx&lt;/p&gt; &#xA;&lt;p&gt;Built-in subaccount: xxxxxxxxxxxx&lt;/p&gt; &#xA;&lt;p&gt;The device name is displayed in the mine pool: xxxxx&lt;/p&gt; &#xA;&lt;p&gt;—————————————————&lt;/p&gt; &#xA;&lt;p&gt;currency: ETC&lt;/p&gt; &#xA;&lt;p&gt;Built-in commission rate: ratio&lt;/p&gt; &#xA;&lt;p&gt;Built-in anonymous wallet: xxxxxxxxxxxxxx&lt;/p&gt; &#xA;&lt;p&gt;Built-in subaccount: xxxxxxxxxxxx&lt;/p&gt; &#xA;&lt;p&gt;The device name is displayed in the mine pool: xxxxx&lt;/p&gt; &#xA;&lt;p&gt;—————————————————&lt;/p&gt; &#xA;&lt;p&gt;currency: ETC+ZIL&lt;/p&gt; &#xA;&lt;p&gt;Built-in commission rate: ratio&lt;/p&gt; &#xA;&lt;p&gt;Built-in anonymous wallet: etc匿名钱包.zil匿名钱包&lt;/p&gt; &#xA;&lt;p&gt;Built-in subaccount: xxxxxxxxxxxx&lt;/p&gt; &#xA;&lt;p&gt;The device name is displayed in the mine pool: xxxxx&lt;/p&gt; &#xA;&lt;p&gt;—————————————————&lt;/p&gt; &#xA;&lt;p&gt;......&lt;/p&gt; &#xA;&lt;p&gt;The built-in service fee pool address is the same as the target address in the software by default, and the service fee will be drawn to the target pool address of the port. Each currency needs to provide an anonymous wallet and a sub-account. For a mine pool like BTC, which does not support anonymous mining, only a sub-account can be provided to ensure that it can work normally in any supported type of mine pool&lt;/p&gt; &#xA;&lt;p&gt;If you do not make the installation link, project home page, etc., you can contact the group master or administrator for free hosting services&lt;/p&gt; &#xA;&lt;p&gt;&lt;span id=&#34;e9&#34;&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Some optimization measures for E9pro&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the background configuration of the miner, only one address configuration information is retained, and the configurations of 2 and 3 are deleted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span id=&#34;diaoxian&#34;&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Some mining pools will count the miner&#39;s offline situation, how to make the equipment in the mining pool do not appear offline records?&lt;/h1&gt; &#xA;&lt;p&gt;antpool or poolin, for example, will collect data on the disconnection of each device. If you do not want to see this information in the mining pool, edit the port, find the computing power compensation, and select the second mode&lt;/p&gt; &#xA;&lt;h1&gt;Port import and export&lt;/h1&gt; &#xA;&lt;p&gt;You can import and export ports using the following three methods: Import an EXCEL file. If you need to import ports using Excel files, download and refer to the Excel template file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EvilGenius-dot/RustMinerSystem/raw/main/excel%E7%AB%AF%E5%8F%A3%E5%AF%BC%E5%85%A5%E6%A8%A1%E6%9D%BF.xlsx&#34;&gt;Download Excel Templates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Other issues&lt;/h1&gt; &#xA;&lt;p&gt;This is a free software, which does not charge any fees. It only takes 0.2% of the computing power of the terminal equipment from the technical point of view as a technical return.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThousandBirdsInc/chidori</title>
    <updated>2023-08-06T02:00:40Z</updated>
    <id>tag:github.com,2023-08-06:/ThousandBirdsInc/chidori</id>
    <link href="https://github.com/ThousandBirdsInc/chidori" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A reactive runtime for building durable AI agents&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ThousandBirdsInc/chidori/assets/515757/6b088f7d-d8f7-4c7e-9006-4360ae40d1de&#34;&gt;https://github.com/ThousandBirdsInc/chidori/assets/515757/6b088f7d-d8f7-4c7e-9006-4360ae40d1de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&amp;nbsp; Chidori &amp;nbsp;&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;A reactive runtime for building durable AI agents&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/ThousandBirdsInc/chidori/commits&#34;&gt;&lt;img alt=&#34;Current Build Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/ThousandBirdsInc/chidori/push.yml&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ThousandBirdsInc/chidori/commits&#34;&gt;&lt;img alt=&#34;GitHub Last Commit&#34; src=&#34;https://img.shields.io/github/last-commit/ThousandBirdsInc/chidori&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/chidori&#34;&gt;&lt;img alt=&#34;Cargo.io download&#34; src=&#34;https://img.shields.io/crates/v/chidori&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/chidori/&#34;&gt;&lt;img alt=&#34;Pypi package&#34; src=&#34;https://img.shields.io/pypi/v/chidori&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@1kbirds/chidori&#34;&gt;&lt;img alt=&#34;NPM package&#34; src=&#34;https://img.shields.io/npm/v/@1kbirds/chidori&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ThousandBirdsInc/chidori/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;Github License&#34; src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Star us on Github! Join us on &lt;a href=&#34;https://discord.gg/CJwKsPSgew&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://docs.thousandbirds.ai/3fe20a82965148c7a0b480f7daf0aff6&#34;&gt;high level docs &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#-chidori-&#34;&gt;&amp;nbsp; Chidori &amp;nbsp;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#-chidori&#34;&gt;📖 Chidori&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#%EF%B8%8F-getting-started&#34;&gt;⚡️ Getting Started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#-about&#34;&gt;🤔 About&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#reactive-runtime&#34;&gt;Reactive Runtime&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#monitoring-and-observability&#34;&gt;Monitoring and Observability&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#branching-and-time-travel&#34;&gt;Branching and Time-Travel&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#code-interpreter-environments&#34;&gt;Code Interpreter Environments&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#%EF%B8%8F-roadmap&#34;&gt;🛣️ Roadmap&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#short-term&#34;&gt;Short term&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#med-term&#34;&gt;Med term&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#why-another-ai-framework&#34;&gt;Why Another AI Framework?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#why-chidori&#34;&gt;Why Chidori?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#well-then-why-thousand-birds&#34;&gt;Well then why Thousand Birds?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#why-rust&#34;&gt;Why Rust?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#inspiration&#34;&gt;Inspiration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/#help-us-out&#34;&gt;Help us out!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖 Chidori&lt;/h2&gt; &#xA;&lt;p&gt;Chidori is a reactive runtime for building AI agents. It provides a framework for building AI agents that are reactive, observable, and robust. It supports building agents with Node.js, Python, and Rust.&lt;/p&gt; &#xA;&lt;p&gt;It is currently in alpha, and is not yet ready for production use. We are continuing to make significant changes in response to feedback.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built from the ground up for constructing agents&lt;/li&gt; &#xA; &lt;li&gt;Runtime written in Rust supporting Python and Node.js out of the box&lt;/li&gt; &#xA; &lt;li&gt;Build agents that actually work :emoji:&lt;/li&gt; &#xA; &lt;li&gt;LLM caching to minimize cost during development&lt;/li&gt; &#xA; &lt;li&gt;Optimized for long-running AI workflows&lt;/li&gt; &#xA; &lt;li&gt;Embedded code interpreter&lt;/li&gt; &#xA; &lt;li&gt;Time travel debugging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can use Chidori from Node.js, Python or Rust.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;450px&#34;&gt;&lt;b&gt;Node.js&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th width=&#34;450px&#34;&gt;&lt;b&gt;Python&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th width=&#34;450px&#34;&gt;&lt;b&gt;Rust&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i @1kbirds/chidori&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install chidori&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install chidori&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;You will need to set the following environment variables if you depend on nodes that require them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;In the table below are examples for Node.js, Python and Rust. You&#39;ll need to scroll horizontally to view each.&lt;/p&gt; &#xA;&lt;p&gt;The following examples show how to build a simple agent that fetches the top stories from Hacker News and call the OpenAI API to filter to AI related launches and then format that data into markdown. Results from the example are pushed into the Chidori database and can be visualized using the prompt-graph-ui project. We&#39;ll update this example with a pattern that makes those results more accessible soon.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;450px&#34;&gt;&lt;b&gt;Node.js&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th width=&#34;450px&#34;&gt;&lt;b&gt;Python&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th width=&#34;450px&#34;&gt;&lt;b&gt;Rust&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const axios = require(&#39;axios&#39;);&#xA;const {Chidori, GraphBuilder} = require(&#34;@1kbirds/chidori&#34;);&#xA;&#xA;class Story {&#xA;    constructor(title, url, score) {&#xA;        this.title = title;&#xA;        this.url = url;&#xA;        this.score = score;&#xA;    }&#xA;}&#xA;&#xA;const HN_URL_TOP_STORIES = &#34;https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty&#34;;&#xA;&#xA;function fetchStory(id) {&#xA;    return axios.get(`https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`)&#xA;        .then(response =&amp;gt; response.data);&#xA;}&#xA;&#xA;function fetchHN() {&#xA;    return axios.get(HN_URL_TOP_STORIES)&#xA;        .then(response =&amp;gt; {&#xA;            const storyIds = response.data;&#xA;            const tasks = storyIds.slice(0, 30).map(id =&amp;gt; fetchStory(id));  // Limit to 30 stories&#xA;            return Promise.all(tasks)&#xA;                .then(stories =&amp;gt; {&#xA;                    return stories.map(story =&amp;gt; {&#xA;                        const { title, url, score } = story;&#xA;                        return new Story(title, url, score);&#xA;                    });&#xA;                });&#xA;        });&#xA;}&#xA;&#xA;class ChidoriWorker {&#xA;    constructor() {&#xA;        this.c = new Chidori(&#34;0&#34;, &#34;http://localhost:9800&#34;);  // Assuming this is a connection object, replaced with an empty object for now&#xA;    }&#xA;&#xA;    async buildGraph() {&#xA;        const g = new GraphBuilder();&#xA;&#xA;        const h = g.customNode({&#xA;            name: &#34;FetchTopHN&#34;,&#xA;            nodeTypeName: &#34;FetchTopHN&#34;,&#xA;            output: &#34;type FetchTopHN { output: String }&#34;&#xA;        });&#xA;&#xA;        const hInterpret = g.promptNode({&#xA;            name: &#34;InterpretTheGroup&#34;,&#xA;            template: `&#xA;                Based on the following list of HackerNews threads,&#xA;                filter this list to only launches of new AI projects: {{FetchTopHN.output}}&#xA;            `&#xA;        });&#xA;        hInterpret.runWhen(g, h);&#xA;&#xA;        const hFormatAndRank = g.promptNode({&#xA;            name: &#34;FormatAndRank&#34;,&#xA;            template: `&#xA;                Format this list of new AI projects in markdown, ranking the most &#xA;                interesting projects from most interesting to least. &#xA;                &#xA;                {{InterpretTheGroup.promptResult}}&#xA;            `&#xA;        });&#xA;        hFormatAndRank.runWhen(g, hInterpret);&#xA;&#xA;        await g.commit(this.c, 0)&#xA;    }&#xA;&#xA;    async run() {&#xA;        // Construct the agent graph&#xA;        await this.buildGraph();&#xA;&#xA;        // Start graph execution from the root&#xA;        // Implement the functionality of the play function&#xA;        await this.c.play(0, 0);&#xA;&#xA;        // Run the node execution loop&#xA;        // Implement the functionality of the run_custom_node_loop function&#xA;        await this.c.runCustomNodeLoop()&#xA;    }&#xA;}&#xA;&#xA;&#xA;async function handleFetchHN(nodeWillExec, cb) {&#xA;    const stories = await fetchHN();&#xA;    // return JSON.stringify(stories);&#xA;    return cb({ &#34;output&#34;: JSON.stringify(stories) });&#xA;    // return ;&#xA;}&#xA;&#xA;async function main() {&#xA;    let w = new ChidoriWorker();&#xA;    await w.c.startServer(&#34;:memory:&#34;)&#xA;    await w.c.registerCustomNodeHandle(&#34;FetchTopHN&#34;, handleFetchHN);&#xA;    await w.run()&#xA;}&#xA;&#xA;&#xA;main();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import aiohttp&#xA;import asyncio&#xA;from typing import List, Optional&#xA;import json&#xA;from chidori import Chidori, GraphBuilder&#xA;&#xA;&#xA;class Story:&#xA;    def __init__(self, title: str, url: Optional[str], score: Optional[float]):&#xA;        self.title = title&#xA;        self.url = url&#xA;        self.score = score&#xA;&#xA;&#xA;HN_URL_TOP_STORIES = &#34;https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty&#34;&#xA;&#xA;&#xA;async def fetch_story(session, id):&#xA;    async with session.get(f&#34;https://hacker-news.firebaseio.com/v0/item/{id}.json?print=pretty&#34;) as response:&#xA;        return await response.json()&#xA;&#xA;&#xA;async def fetch_hn() -&amp;gt; List[Story]:&#xA;    async with aiohttp.ClientSession() as session:&#xA;        async with session.get(HN_URL_TOP_STORIES) as response:&#xA;            story_ids = await response.json()&#xA;&#xA;        tasks = []&#xA;        for id in story_ids[:30]:  # Limit to 30 stories&#xA;            tasks.append(fetch_story(session, id))&#xA;&#xA;        stories = await asyncio.gather(*tasks)&#xA;&#xA;        stories_out = []&#xA;        for story in stories:&#xA;            for k in (&#39;title&#39;, &#39;url&#39;, &#39;score&#39;):&#xA;                stories_out.append(Story(**dict((k, story.get(k, None)))))&#xA;&#xA;        return stories_out&#xA;&#xA;&#xA;# ^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;# Methods for fetching hacker news posts via api&#xA;&#xA;class ChidoriWorker:&#xA;    def __init__(self):&#xA;        self.c = Chidori(&#34;0&#34;, &#34;http://localhost:9800&#34;)&#xA;        self.staged_custom_nodes = []&#xA;&#xA;    async def build_graph(self):&#xA;        g = GraphBuilder()&#xA;&#xA;        # Create a custom node, we will implement our&#xA;        # own handler for this node type&#xA;        h = await g.custom_node(&#xA;            name=&#34;FetchTopHN&#34;,&#xA;            node_type_name=&#34;FetchTopHN&#34;,&#xA;            output=&#34;type O { output: String }&#34;&#xA;        )&#xA;&#xA;        # A prompt node, pulling in the value of the output from FetchTopHN&#xA;        # and templating that into the prompt for GPT3.5&#xA;        h_interpret = await g.prompt_node(&#xA;            name=&#34;InterpretTheGroup&#34;,&#xA;            template=&#34;&#34;&#34;&#xA;                Based on the following list of HackerNews threads, &#xA;                filter this list to only launches of new AI projects: {{FetchTopHN.output}}&#xA;            &#34;&#34;&#34;&#xA;        )&#xA;        await h_interpret.run_when(g, h)&#xA;&#xA;        h_format_and_rank = await g.prompt_node(&#xA;            name=&#34;FormatAndRank&#34;,&#xA;            template=&#34;&#34;&#34;&#xA;                Format this list of new AI projects in markdown, ranking the most &#xA;                interesting projects from most interesting to least. &#xA;                &#xA;                {{InterpretTheGroup.promptResult}}&#xA;            &#34;&#34;&#34;&#xA;        )&#xA;        await h_format_and_rank.run_when(g, h_interpret)&#xA;&#xA;        # Commit the graph, this pushes the configured graph&#xA;        # to our durable execution runtime.&#xA;        await g.commit(self.c, 0)&#xA;&#xA;    async def run(self):&#xA;        # Construct the agent graph&#xA;        await self.build_graph()&#xA;&#xA;        # Start graph execution from the root&#xA;        await self.c.play(0, 0)&#xA;&#xA;        # Run the node execution loop&#xA;        await self.c.run_custom_node_loop()&#xA;&#xA;&#xA;async def handle_fetch_hn(node_will_exec):&#xA;    stories = await fetch_hn()&#xA;    result = {&#34;output&#34;: json.dumps([story.__dict__ for story in stories])}&#xA;    return result&#xA;&#xA;&#xA;async def main():&#xA;    w = ChidoriWorker()&#xA;    await w.c.start_server(&#34;:memory:&#34;)&#xA;    await w.c.register_custom_node_handle(&#34;FetchTopHN&#34;, handle_fetch_hn)&#xA;    await w.run()&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    asyncio.run(main())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;extern crate chidori;&#xA;use std::collections::HashMap;&#xA;use std::env;&#xA;use std::net::ToSocketAddrs;&#xA;use anyhow;&#xA;use futures::stream::{self, StreamExt, TryStreamExt};&#xA;use reqwest;&#xA;use serde::{Deserialize, Serialize};&#xA;use serde_json::json;&#xA;use chidori::{create_change_value, NodeWillExecuteOnBranch};&#xA;use chidori::register_node_handle;&#xA;use chidori::translations::rust::{Chidori, CustomNodeCreateOpts, DenoCodeNodeCreateOpts, GraphBuilder, Handler, PromptNodeCreateOpts, serialized_value_to_string};&#xA;&#xA;#[derive(Debug, Deserialize, Serialize)]&#xA;struct Story {&#xA;    title: String,&#xA;    url: Option&amp;lt;String&amp;gt;,&#xA;    score: Option&amp;lt;f32&amp;gt;,&#xA;}&#xA;&#xA;const HN_URL_TOP_STORIES: &amp;amp;&#39;static str = &#34;https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty&#34;;&#xA;&#xA;async fn fetch_hn() -&amp;gt; anyhow::Result&amp;lt;Vec&amp;lt;Story&amp;gt;&amp;gt; {&#xA;    let client = reqwest::Client::new();&#xA;    // Fetch the top 60 story ids&#xA;    let story_ids: Vec&amp;lt;u32&amp;gt; = client.get(HN_URL_TOP_STORIES).send().await?.json().await?;&#xA;&#xA;    // Fetch details for each story&#xA;    let stories: anyhow::Result&amp;lt;Vec&amp;lt;Story&amp;gt;&amp;gt; = stream::iter(story_ids.into_iter().take(30))&#xA;        .map(|id| {&#xA;            let client = &amp;amp;client;&#xA;            async move {&#xA;                let resource = format!(&#34;https://hacker-news.firebaseio.com/v0/item/{}.json?print=pretty&#34;, id);&#xA;                let mut story: Story = client.get(&amp;amp;resource).send().await?.json().await?;&#xA;                Ok(story)&#xA;            }&#xA;        })&#xA;        .buffer_unordered(10)  // Fetch up to 10 stories concurrently&#xA;        .try_collect()&#xA;        .await;&#xA;    stories&#xA;}&#xA;&#xA;async fn handle_fetch_hn(_node_will_exec: NodeWillExecuteOnBranch) -&amp;gt; anyhow::Result&amp;lt;serde_json::Value&amp;gt; {&#xA;    let stories = fetch_hn().await.unwrap();&#xA;    let mut result = HashMap::new();&#xA;    result.insert(&#34;output&#34;, format!(&#34;{:?}&#34;, stories));&#xA;    Ok(serde_json::to_value(result).unwrap())&#xA;}&#xA;&#xA;/// Maintain a list summarizing recent AI launches across the week&#xA;#[tokio::main]&#xA;async fn main() -&amp;gt; anyhow::Result&amp;lt;()&amp;gt; {&#xA;    let mut c = Chidori::new(String::from(&#34;0&#34;), String::from(&#34;http://localhost:9800&#34;));&#xA;    c.start_server(Some(&#34;:memory:&#34;.to_string())).await?;&#xA;&#xA;    let mut g = GraphBuilder::new();&#xA;&#xA;    let h = g.custom_node(CustomNodeCreateOpts {&#xA;        name: &#34;FetchTopHN&#34;.to_string(),&#xA;        node_type_name: &#34;FetchTopHN&#34;.to_string(),&#xA;        output: Some(&#34;type O { output: String }&#34;.to_string()),&#xA;        ..CustomNodeCreateOpts::default()&#xA;    })?;&#xA;&#xA;    let mut h_interpret = g.prompt_node(PromptNodeCreateOpts {&#xA;        name: &#34;InterpretTheGroup&#34;.to_string(),&#xA;        template: &#34;Based on the following list of HackerNews threads, filter this list to only launches of new AI projects: {{FetchTopHN.output}}&#34;.to_string(),&#xA;        ..PromptNodeCreateOpts::default()&#xA;    })?;&#xA;    h_interpret.run_when(&amp;amp;mut g, &amp;amp;h)?;&#xA;&#xA;    let mut h_format_and_rank = g.prompt_node(PromptNodeCreateOpts {&#xA;        name: &#34;FormatAndRank&#34;.to_string(),&#xA;        template: &#34;Format this list of new AI projects in markdown, ranking the most interesting projects from most interesting to least. {{InterpretTheGroup.promptResult}}&#34;.to_string(),&#xA;        ..PromptNodeCreateOpts::default()&#xA;    })?;&#xA;    h_format_and_rank.run_when(&amp;amp;mut g, &amp;amp;h_interpret)?;&#xA;&#xA;    // Commit the graph&#xA;    g.commit(&amp;amp;c, 0).await?;&#xA;&#xA;    // Start graph execution from the root&#xA;    c.play(0, 0).await?;&#xA;&#xA;    // Register the handler for our custom node&#xA;    register_node_handle!(c, &#34;FetchTopHN&#34;, handle_fetch_hn);&#xA;&#xA;    // Run the node execution loop&#xA;    if let Err(x) = c.run_custom_node_loop().await {&#xA;        eprintln!(&#34;Custom Node Loop Failed On - {:?}&#34;, x);&#xA;    };&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🤔 About&lt;/h2&gt; &#xA;&lt;h3&gt;Reactive Runtime&lt;/h3&gt; &#xA;&lt;p&gt;At its core, Chidori brings a reactive runtime that orchestrates interactions between different agents and their components. The runtime is comprised of &#34;nodes&#34;, which react to system changes they subscribe to, providing dynamic and responsive behavior in your AI systems. Nodes can encompass code, prompts, vector databases, custom code, services, or even complete systems.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring and Observability&lt;/h3&gt; &#xA;&lt;p&gt;Chidori ensures comprehensive monitoring and observability of your agents. We record all the inputs and outputs emitted by nodes, enabling us to explain precisely what led to what, enhancing your debugging experience and understanding of the system’s production behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Branching and Time-Travel&lt;/h3&gt; &#xA;&lt;p&gt;With Chidori, you can take snapshots of your system and explore different possible outcomes from that point (branching), or rewind the system to a previous state (time-travel). This functionality improves error handling, debugging, and system robustness by offering alternative pathways and do-overs.&lt;/p&gt; &#xA;&lt;h3&gt;Code Interpreter Environments&lt;/h3&gt; &#xA;&lt;p&gt;Chidori comes with first-class support for code interpreter environments like &lt;a href=&#34;https://deno.land/&#34;&gt;Deno&lt;/a&gt; or &lt;a href=&#34;https://github.com/bazelbuild/starlark/raw/master/spec.md&#34;&gt;Starlark&lt;/a&gt;. You can execute code directly within your system, providing quick startup, ease of use, and secure execution. We&#39;re continually working on additional safeguards against running untrusted code, with containerized nodes support coming soon.&lt;/p&gt; &#xA;&lt;h2&gt;🛣️ Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;Short term&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reactive subscriptions between nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Branching and time travel debugging, reverting execution of a graph&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Node.js, Python, and Rust support for building and executing graphs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Simple local vector db for development&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Adding support for containerized nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allowing filtering in node queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Medium term&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Analysis tools for comparing executions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Agent re-evaluation with feedback&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Definitive patterns for human in the loop agents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Adding support for more vector databases&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Adding support for other LLM sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Adding support for more code interpreter environments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is an early open source release and we&#39;re looking for collaborators from the community. A good place to start would be to join our &lt;a href=&#34;https://discord.gg/CJwKsPSgew&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why Another AI Framework?&lt;/h3&gt; &#xA;&lt;p&gt;Chidori focuses on the specifics of how LLM+code execution operates rather than providing specific compositions of prompts. Other frameworks haven’t focused on this space, and it&#39;s an important one. We reduce accidental complexity in building systems for long-running agents; this helps developers build successful systems.&lt;/p&gt; &#xA;&lt;h3&gt;Why Chidori?&lt;/h3&gt; &#xA;&lt;p&gt;Chidori is the name of the lightning blade technique used by Kakashi in the Naruto anime series. It also happens to &lt;a href=&#34;https://en.wikipedia.org/wiki/Chidori&#34;&gt;mean Thousand Birds in Japanese&lt;/a&gt;, which is a nice coincidence.&lt;/p&gt; &#xA;&lt;h3&gt;Well then why Thousand Birds?&lt;/h3&gt; &#xA;&lt;p&gt;Thousand Birds is a reference to flocks of birds (or a murmuration) and the emergent behavior that arises from their interactions. We think this is a good metaphor for the behavior of long running agents, the internal units of LLM execution within them, and the emergent behavior that arises from their interactions.&lt;/p&gt; &#xA;&lt;h3&gt;Why Rust?&lt;/h3&gt; &#xA;&lt;p&gt;Rust is a great language for building systems, we like the type system and the guarantees provided by it. We also like the performance characteristics of Rust, and the ability to build a single binary that can be deployed anywhere. The Rust ecosystem makes it fairly easy to provide bindings to other languages, which is important for us to provide a good developer experience.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;Our framework is inspired by the work of many others, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://temporal.io&#34;&gt;Temporal.io&lt;/a&gt; - providing reliability and durability to workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://witheve.com&#34;&gt;Eve&lt;/a&gt; - developing patterns for building reactive systems and reducing accidental complexity&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://timelydataflow.github.io/timely-dataflow&#34;&gt;Timely Dataflow&lt;/a&gt; - efficiently streaming changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.langchain.com&#34;&gt;Langchain&lt;/a&gt; - developing tools and patterns for building with LLMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Thousand Birds is under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/ThousandBirdsInc/chidori/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Help us out!&lt;/h2&gt; &#xA;&lt;p&gt;Please star the github repo and give us feedback in &lt;a href=&#34;https://discord.gg/CJwKsPSgew&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cgisky1980/ai00_rwkv_server</title>
    <updated>2023-08-06T02:00:40Z</updated>
    <id>tag:github.com,2023-08-06:/cgisky1980/ai00_rwkv_server</id>
    <link href="https://github.com/cgisky1980/ai00_rwkv_server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A localized open-source AI server that is better than ChatGPT.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💯AI00 RWKV Server&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/docs/ai00.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/README_zh.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/README_jp.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;AI00 RWKV Server&lt;/code&gt; is an inference API server based on the &lt;a href=&#34;https://github.com/BlinkDL/ChatRWKV&#34;&gt;&lt;code&gt;RWKV&lt;/code&gt; model&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It supports &lt;code&gt;VULKAN&lt;/code&gt; inference acceleration and can run on all GPUs that support &lt;code&gt;VULKAN&lt;/code&gt;. No need for Nvidia cards!!! AMD cards and even integrated graphics can be accelerated!!!&lt;/p&gt; &#xA;&lt;p&gt;No need for bulky &lt;code&gt;pytorch&lt;/code&gt;, &lt;code&gt;CUDA&lt;/code&gt; and other runtime environments, it&#39;s compact and ready to use out of the box!&lt;/p&gt; &#xA;&lt;p&gt;Compatible with OpenAI&#39;s ChatGPT API interface.&lt;/p&gt; &#xA;&lt;p&gt;100% open source and commercially usable, under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for a fast, efficient, and easy-to-use LLM API server, then &lt;code&gt;AI00 RWKV Server&lt;/code&gt; is your best choice. It can be used for various tasks, including chatbots, text generation, translation, and Q&amp;amp;A.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;code&gt;AI00 RWKV Server&lt;/code&gt; community now and experience the charm of AI!&lt;/p&gt; &#xA;&lt;p&gt;QQ Group for communication: 30920262&lt;/p&gt; &#xA;&lt;h3&gt;💥Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on the &lt;code&gt;RWKV&lt;/code&gt; model, it has high performance and accuracy&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;code&gt;VULKAN&lt;/code&gt; inference acceleration, you can enjoy GPU acceleration without the need for &lt;code&gt;CUDA&lt;/code&gt;! Supports AMD cards, integrated graphics, and all GPUs that support &lt;code&gt;VULKAN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;No need for bulky &lt;code&gt;pytorch&lt;/code&gt;, &lt;code&gt;CUDA&lt;/code&gt; and other runtime environments, it&#39;s compact and ready to use out of the box!&lt;/li&gt; &#xA; &lt;li&gt;Compatible with OpenAI&#39;s ChatGPT API interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;⭕Usages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chatbots&lt;/li&gt; &#xA; &lt;li&gt;Text generation&lt;/li&gt; &#xA; &lt;li&gt;Translation&lt;/li&gt; &#xA; &lt;li&gt;Q&amp;amp;A&lt;/li&gt; &#xA; &lt;li&gt;Any other tasks that LLM can do&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;👻Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on the &lt;a href=&#34;https://github.com/cryscan/web-rwkv&#34;&gt;web-rwkv&lt;/a&gt; project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/cgisky/RWKV-safetensors-fp16&#34;&gt;Model download&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation, Compilation, and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;📦Direct Download and Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Directly download the latest version from &lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/releases&#34;&gt;Release&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After &lt;a href=&#34;https://huggingface.co/cgisky/RWKV-safetensors-fp16&#34;&gt;downloading the model&lt;/a&gt;, place the model in the &lt;code&gt;assets/models/&lt;/code&gt; path, for example, &lt;code&gt;assets/models/RWKV-4-World-0.4B-v1-20230529-ctx4096.st&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run in the command line&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./ai00_rwkv_server --model assets/models/RWKV-4-World-0.4B-v1-20230529-ctx4096.st&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the browser and visit the WebUI &lt;a href=&#34;http://127.0.0.1:65530&#34;&gt;&lt;code&gt;http://127.0.0.1:65530&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;📜Compile from Source Code&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Install Rust&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/cgisky1980/ai00_rwkv_server.git $ cd ai00_rwkv_server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After &lt;a href=&#34;https://huggingface.co/cgisky/RWKV-safetensors-fp16&#34;&gt;downloading the model&lt;/a&gt;, place the model in the &lt;code&gt;assets/models/&lt;/code&gt; path, for example, &lt;code&gt;assets/models/RWKV-4-World-0.4B-v1-20230529-ctx4096.st&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After compilation, run&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo run --release -- --model assets/models/RWKV-4-World-0.4B-v1-20230529-ctx4096.st&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the browser and visit the WebUI &lt;a href=&#34;http://127.0.0.1:65530&#34;&gt;&lt;code&gt;http://127.0.0.1:65530&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📝Supported Arguments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--model&lt;/code&gt;: Model path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--tokenizer&lt;/code&gt;: Tokenizer path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--port&lt;/code&gt;: Running port&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--quant&lt;/code&gt;: Specify the number of quantization layers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--adepter&lt;/code&gt;: Adapter (GPU and backend) selection options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;The server listens on port 3000, loads the full-layer quantized (32 &amp;gt; 24) 0.4B model, and selects adapter 0 (to get the specific adapter number, you can first not add this parameter, and the program will enter the adapter selection page).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo run --release -- --model assets/models/RWKV-4-World-0.4B-v1-20230529-ctx4096.st --port 3000 --quant 32 --adepter 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📙Currently Available APIs&lt;/h2&gt; &#xA;&lt;p&gt;The API service starts at port 65530, and the data input and output format follow the Openai API specification.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/v1/models&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/models&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/v1/chat/completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/chat/completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/v1/completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/v1/embeddings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/embeddings&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📙WebUI Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cgisky1980/ai00_rwkv_server/assets/82481660/33e8da0b-5d3f-4dfc-bf35-4a8147d099bc&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cgisky1980/ai00_rwkv_server/assets/82481660/a24d6c72-31a0-4ff7-8a61-6eb98aae46e8&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📝TODO List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for &lt;code&gt;text_completions&lt;/code&gt; and &lt;code&gt;chat_completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for sse push&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add &lt;code&gt;embeddings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate basic front-end&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Parallel inference via &lt;code&gt;batch serve&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for &lt;code&gt;int8&lt;/code&gt; quantization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for &lt;code&gt;SpQR&lt;/code&gt; quantization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for &lt;code&gt;LoRA&lt;/code&gt; model&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hot loading and switching of &lt;code&gt;LoRA&lt;/code&gt; model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👥Join Us&lt;/h2&gt; &#xA;&lt;p&gt;We are always looking for people interested in helping us improve the project. If you are interested in any of the following, please join us!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💀Writing code&lt;/li&gt; &#xA; &lt;li&gt;💬Providing feedback&lt;/li&gt; &#xA; &lt;li&gt;🔆Proposing ideas or needs&lt;/li&gt; &#xA; &lt;li&gt;🔍Testing new features&lt;/li&gt; &#xA; &lt;li&gt;✏Translating documentation&lt;/li&gt; &#xA; &lt;li&gt;📣Promoting the project&lt;/li&gt; &#xA; &lt;li&gt;🏅Anything else that would be helpful to us&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No matter your skill level, we welcome you to join us. You can join us in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join our Discord channel&lt;/li&gt; &#xA; &lt;li&gt;Join our QQ group&lt;/li&gt; &#xA; &lt;li&gt;Submit issues or pull requests on GitHub&lt;/li&gt; &#xA; &lt;li&gt;Leave feedback on our website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We can&#39;t wait to work with you to make this project better! We hope the project is helpful to you!&lt;/p&gt; &#xA;&lt;h2&gt;Thank you to these awesome individuals who are insightful and outstanding for their support and selfless dedication to the project&lt;/h2&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/cgisky1980&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/82481660?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;顾真牛&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;顾真牛&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/commits?author=cgisky1980&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/commits?author=cgisky1980&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#content-cgisky1980&#34; title=&#34;Content&#34;&gt;🖋&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#design-cgisky1980&#34; title=&#34;Design&#34;&gt;🎨&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#mentoring-cgisky1980&#34; title=&#34;Mentoring&#34;&gt;🧑‍🏫&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://cryscan.github.io/profile&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/16053640?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;研究社交&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;研究社交&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/commits?author=cryscan&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#example-cryscan&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#ideas-cryscan&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#maintenance-cryscan&#34; title=&#34;Maintenance&#34;&gt;🚧&lt;/a&gt; &lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/pulls?q=is%3Apr+reviewed-by%3Acryscan&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#platform-cryscan&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/josStorer&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/13366013?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;josc146&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;josc146&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/issues?q=author%3AjosStorer&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/commits?author=josStorer&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#ideas-josStorer&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#tool-josStorer&#34; title=&#34;Tools&#34;&gt;🔧&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/l15y&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/11372524?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;l15y&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;l15y&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#tool-l15y&#34; title=&#34;Tools&#34;&gt;🔧&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cgisky1980/ai00_rwkv_server/main/#plugin-l15y&#34; title=&#34;Plugin/utility libraries&#34;&gt;🔌&lt;/a&gt; &lt;a href=&#34;https://github.com/cgisky1980/ai00_rwkv_server/commits?author=l15y&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/cgisky1980/ai00_rwkv_server&#34;&gt;&lt;img src=&#34;https://starchart.cc/cgisky1980/ai00_rwkv_server.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>