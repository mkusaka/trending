<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T02:01:16Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ClassmateLin/dm-ticket</title>
    <updated>2023-06-11T02:01:16Z</updated>
    <id>tag:github.com,2023-06-11:/ClassmateLin/dm-ticket</id>
    <link href="https://github.com/ClassmateLin/dm-ticket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;大麦网自动购票, 支持docker一键部署。Damai automatically purchases tickets, running in docker container.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dm-ticket&lt;/h1&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;大麦网自动购票, 支持docker一键部署。&lt;/p&gt; &#xA;&lt;h2&gt;特别声明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。&lt;/li&gt; &#xA; &lt;li&gt;编写本项目主要目的为学习和研究Rust，无法保证项目内容的合法性、准确性、完整性和有效性。&lt;/li&gt; &#xA; &lt;li&gt;本项目涉及的数据由使用的个人或组织自行填写，本项目不对数据内容负责，包括但不限于数据的真实性、准确性、合法性。使用本项目所造成的一切后果，与本项目的所有贡献者无关，由使用的个人或组织完全承担。&lt;/li&gt; &#xA; &lt;li&gt;本项目中涉及的第三方硬件、软件等，与本项目没有任何直接或间接的关系。本项目仅对部署和使用过程进行客观描述，不代表支持使用任何第三方硬件、软件。使用任何第三方硬件、软件，所造成的一切后果由使用的个人或组织承担，与本项目无关。&lt;/li&gt; &#xA; &lt;li&gt;本项目中所有内容只供学习和研究使用，不得将本项目中任何内容用于违反国家/地区/组织等的法律法规或相关规定的其他用途。&lt;/li&gt; &#xA; &lt;li&gt;所有基于本项目源代码，进行的任何修改，为其他个人或组织的自发行为，与本项目没有任何直接或间接的关系，所造成的一切后果亦与本项目无关。&lt;/li&gt; &#xA; &lt;li&gt;所有直接或间接使用本项目的个人和组织，应24小时内完成学习和研究，并及时删除本项目中的所有内容。如对本项目的功能有需求，应自行开发相关功能。&lt;/li&gt; &#xA; &lt;li&gt;本项目保留随时对免责声明进行补充或更改的权利，直接或间接使用本项目内容的个人或组织，视为接受本项目的特别声明。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;&lt;strong&gt;出于多种原因, 该项目将设置为归档, 不再更新维护。&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;如何运行?&lt;/h2&gt; &#xA;&lt;h3&gt;使用docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在&lt;a href=&#34;https://github.com/ClassmateLin/dm-ticket/releases&#34;&gt;release&lt;/a&gt;页面下载相应版本的docker-compose配置压缩包并解压。&lt;/li&gt; &#xA; &lt;li&gt;运行容器: &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;修改配置: &lt;code&gt;vim config/config.yaml&lt;/code&gt;, 配置项在config/config.yaml中有详细注释。&lt;/li&gt; &#xA; &lt;li&gt;运行脚本: &lt;code&gt;docker exec -it dm-ticket dm-ticket&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sample 1: &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/run.png&#34; alt=&#34;run.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/run_res.jpeg&#34; alt=&#34;run_res.png&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;sample 2: &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/run2.png&#34; alt=&#34;run2.png&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;命令列表&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;自动购票: &lt;code&gt;docker exec -it dm-ticket dm-ticket&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;扫码登录: &lt;code&gt;docker exec -it dm-ticket dm-login&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;使用Rust&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust官网&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rsproxy.cn/&#34;&gt;Rust字节镜像源&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://course.rs/about-book.html&#34;&gt;Rust语言圣经&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rustcc.cn/&#34;&gt;Rust中文社区&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://course.rs/first-try/installation.html&#34;&gt;Rust环境安装教程&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;请确保您已成功安装Rust。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;获取项目: &lt;code&gt;git clone https://github.com/ClassmateLin/dm-ticket.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;复制配置: &lt;code&gt;cd dm-ticket &amp;amp;&amp;amp; cp config/config.yaml.example config/config.yaml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行依赖容器: &lt;code&gt;docker-compose -f docker-compose.dev.yml up -d&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行项目: &lt;code&gt;cargo run --bin dm-ticket&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如遇到&lt;code&gt;Connection refused (os error 111)&lt;/code&gt;错误, 说明token-server还没启动完成, 等待片刻即可。 &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/connection_errors.png&#34; alt=&#34;Connection refused (os error 111)&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;生成订单失败, [&#34;RGV587_ERROR::SM::哎哟喂,被挤爆啦,请稍后重试!&#34;], 请检查是否复制了完整的cookie, ip有问题(一般是使用了大厂服务器/代理, 实在需要可以使用这种&lt;a href=&#34;https://www.fwvps.com/?aff=6bb13&#34;&gt;动态VPS&lt;/a&gt;)。&lt;/li&gt; &#xA; &lt;li&gt;[&#34;B-00203-200-100::网络开小差了，再试一次吧~&#34;], 请检查是否复制了完整的cookie。&lt;/li&gt; &#xA; &lt;li&gt;docker/docker-compose安装使用问题，请善用搜索引擎, 自行搜索解决方案。&lt;/li&gt; &#xA; &lt;li&gt;是否支持多账号, v0.1.0版本是支持多账号的。后续可能取消。要实现多账号支持, 开启多个docker容器也可以支持。&lt;/li&gt; &#xA; &lt;li&gt;频繁尝试运行程序出现, [&#34;RGV587_ERROR::SM::哎哟喂,被挤爆啦,请稍后重试!&#34;], 就不要试了。&lt;/li&gt; &#xA; &lt;li&gt;仅支持&lt;a href=&#34;https://m.damai.cn&#34;&gt;H5端&lt;/a&gt;可以购买的票。&lt;/li&gt; &#xA; &lt;li&gt;不支持选座。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;其他说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;如何获取cookie?&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;登录&lt;a href=&#34;https://m.damai.cn/&#34;&gt;大麦网&lt;/a&gt;, F12打开控制台查看网络请求, 复制请求中的cookie。 &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/cookie.png&#34; alt=&#34;img.png&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;使用扫码登录: &lt;code&gt;docker exec -it dm-ticket dm-login&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如何获取演唱会id？&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;进入门票详情, 复制URL中的itemId。 &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/ticket.png&#34; alt=&#34;ticket_id&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如何获取场次？&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;点击购买按钮, 弹出的场次。第一个就是1, 以此类推。 &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/session_id.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如何获取票档?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;选择场次之后, 弹出票档信息, 从左到右, 从上到下, 从1开始递增。如图: &lt;img src=&#34;https://raw.githubusercontent.com/ClassmateLin/dm-ticket/main/images/grade.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实名信息怎么选择?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;按实名信息顺序, 自动选择。 如购买2张票, 默认选择前两位实名人, 也可以在配置中设置。&lt;/p&gt; &#xA;&lt;h2&gt;其他项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClassmateLin/zzdns&#34;&gt;zzdns&lt;/a&gt;: 使用Rust构建的一款快速本地 DNS 解析器，用于提供更好的网络体验。支持Docker一键部署。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClassmateLin/cfdns&#34;&gt;cfdns&lt;/a&gt;: 一个本地DNS服务器, 用于测试 Cloudflare CDN 延迟和速度，获取最快 IP (IPv4 )。支持docker一键部署。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClassmateLin/rust-scripts&#34;&gt;rust-scripts&lt;/a&gt;: Rust写的一些小工具。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClassmateLin?tab=repositories&amp;amp;q=&amp;amp;type=&amp;amp;language=&amp;amp;sort=&#34;&gt;...&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lancedb/lance</title>
    <updated>2023-06-11T02:01:16Z</updated>
    <id>tag:github.com,2023-06-11:/lancedb/lance</id>
    <link href="https://github.com/lancedb/lance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern columnar data format for ML and LLMs implemented in Rust. Convert from parquet in 2 lines of code for 100x faster random access, vector index, and data versioning. Compatible with Pandas, DuckDB, Polars, Pyarrow, with more integrations coming..&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;257&#34; alt=&#34;Lance Logo&#34; src=&#34;https://user-images.githubusercontent.com/917119/199353423-d3e202f7-0269-411d-8ff2-e747e419e492.png&#34;&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;strong&gt;Modern columnar data format for ML. Convert from parquet in 2-lines of code for 100x faster random access, a vector index, data versioning, and more.&lt;br&gt;&lt;/strong&gt; &lt;strong&gt;Compatible with pandas, duckdb, polars, pyarrow, with more integrations on the way.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://lancedb.github.io/lance/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://blog.lancedb.com/&#34;&gt;Blog&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/zMM32dvNtd&#34;&gt;Discord&lt;/a&gt; • &lt;a href=&#34;https://twitter.com/lancedb&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/lancedb/lance/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/lancedb/lance/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lancedb.github.io/lance/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-passing-brightgreen&#34; alt=&#34;Docs Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/lance&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/lance.svg?sanitize=true&#34; alt=&#34;crates.io badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pylance/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/pylance&#34; alt=&#34;Python versions badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Lance is a modern columnar data format that is optimized for ML workflows and datasets. Lance is perfect for:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Building search engines and features stores.&lt;/li&gt; &#xA; &lt;li&gt;Large-scale ML training requiring high performance IO and shuffles.&lt;/li&gt; &#xA; &lt;li&gt;Storing, querying, and inspecting deeply nested data for robotics or large blobs like images, point-clouds, and more.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The key features of Lance include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High-performance random access:&lt;/strong&gt; 100x faster than Parquet without sacrificing scan performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vector search:&lt;/strong&gt; find nearest neighbors in milliseconds and combine OLAP-queries with vector search.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Zero-copy, automatic versioning:&lt;/strong&gt; manage versions of your data without needing extra infrastructure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ecosystem integrations:&lt;/strong&gt; Apache-Arrow, Pandas, Polars, DuckDB and more on the way.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install pylance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Converting to Lance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import lance&#xA;&#xA;import pandas as pd&#xA;import pyarrow as pa&#xA;import pyarrow.dataset&#xA;&#xA;df = pd.DataFrame({&#34;a&#34;: [5], &#34;b&#34;: [10]})&#xA;uri = &#34;/tmp/test.parquet&#34;&#xA;tbl = pa.Table.from_pandas(df)&#xA;pa.dataset.write_dataset(tbl, uri, format=&#39;parquet&#39;)&#xA;&#xA;parquet = pa.dataset.dataset(uri, format=&#39;parquet&#39;)&#xA;lance.write_dataset(parquet, &#34;/tmp/test.lance&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reading Lance data&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = lance.dataset(&#34;/tmp/test.lance&#34;)&#xA;assert isinstance(dataset, pa.dataset.Dataset)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pandas&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = dataset.to_table().to_pandas()&#xA;df&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;DuckDB&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import duckdb&#xA;&#xA;# If this segfaults, make sure you have duckdb v0.7+ installed&#xA;duckdb.query(&#34;SELECT * FROM dataset LIMIT 10&#34;).to_df()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vector search&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download the sift1m subset&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget ftp://ftp.irisa.fr/local/texmex/corpus/sift.tar.gz&#xA;tar -xzf sift.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert it to Lance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import lance&#xA;from lance.vector import vec_to_table&#xA;import numpy as np&#xA;import struct&#xA;&#xA;nvecs = 1000000&#xA;ndims = 128&#xA;with open(&#34;sift/sift_base.fvecs&#34;, mode=&#34;rb&#34;) as fobj:&#xA;    buf = fobj.read()&#xA;    data = np.array(struct.unpack(&#34;&amp;lt;128000000f&#34;, buf[4 : 4 + 4 * nvecs * ndims])).reshape((nvecs, ndims))&#xA;    dd = dict(zip(range(nvecs), data))&#xA;&#xA;table = vec_to_table(dd)&#xA;uri = &#34;vec_data.lance&#34;&#xA;sift1m = lance.write_dataset(table, uri, max_rows_per_group=8192, max_rows_per_file=1024*1024)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the index&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sift1m.create_index(&#34;vector&#34;,&#xA;                    index_type=&#34;IVF_PQ&#34;, &#xA;                    num_partitions=256,  # IVF&#xA;                    num_sub_vectors=16)  # PQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search the dataset&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Get top 10 similar vectors&#xA;import duckdb&#xA;&#xA;dataset = lance.dataset(uri)&#xA;&#xA;# Sample 100 query vectors. If this segfaults, make sure you have duckdb v0.7+ installed&#xA;sample = duckdb.query(&#34;SELECT vector FROM dataset USING SAMPLE 100&#34;).to_df()&#xA;query_vectors = np.array([np.array(x) for x in sample.vector])&#xA;&#xA;# Get nearest neighbors for all of them&#xA;rs = [dataset.to_table(nearest={&#34;column&#34;: &#34;vector&#34;, &#34;k&#34;: 10, &#34;q&#34;: q})      &#xA;      for q in query_vectors]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Directory structure&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Directory&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lancedb/lance/main/rust&#34;&gt;rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Core Rust implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lancedb/lance/main/python&#34;&gt;python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python bindings (pyo3)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lancedb/lance/main/docs&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Documentation source&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;What makes Lance different&lt;/h2&gt; &#xA;&lt;p&gt;Here we will highlight a few aspects of Lance’s design. For more details, see the full &lt;a href=&#34;https://lancedb.github.io/lance/format.html&#34;&gt;Lance design document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vector index&lt;/strong&gt;: Vector index for similarity search over embedding space&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Encodings&lt;/strong&gt;: to achieve both fast columnar scan and sub-linear point queries, Lance uses custom encodings and layouts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nested fields&lt;/strong&gt;: Lance stores each subfield as a separate column to support efficient filters like “find images where detected objects include cats”.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Versioning&lt;/strong&gt;: a Manifest can be used to record snapshots. Currently we support creating new versions automatically via appends, overwrites, and index creation&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fast updates&lt;/strong&gt; (ROADMAP): Updates will be supported via write-ahead logs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rich secondary indices&lt;/strong&gt; (ROADMAP):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inverted index for fuzzy search over many label / annotation fields&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;h3&gt;Vector search&lt;/h3&gt; &#xA;&lt;p&gt;We used the sift dataset to benchmark our results with 1M vectors of 128D&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For 100 randomly sampled query vectors, we get &amp;lt;1ms average response time (on a 2023 m2 macbook air)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lancedb/lance/main/docs/avg_latency.png&#34; alt=&#34;avg_latency.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;ANN is always a trade-off between recall and performance&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lancedb/lance/main/docs/recall_vs_latency.png&#34; alt=&#34;avg_latency.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Vs parquet&lt;/h3&gt; &#xA;&lt;p&gt;We create a Lance dataset using the Oxford Pet dataset to do some preliminary performance testing of Lance as compared to Parquet and raw image/xmls. For analytics queries, Lance is 50-100x better than reading the raw metadata. For batched random access, Lance is 100x better than both parquet and raw files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lancedb/lance/main/docs/lance_perf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why are you building yet another data format?!&lt;/h2&gt; &#xA;&lt;p&gt;Machine Learning development cycle involves the steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR&#xA;    A[Collection] --&amp;gt; B[Exploration];&#xA;    B --&amp;gt; C[Analytics];&#xA;    C --&amp;gt; D[Feature Engineer];&#xA;    D --&amp;gt; E[Training];&#xA;    E --&amp;gt; F[Evaluation];&#xA;    F --&amp;gt; C;&#xA;    E --&amp;gt; G[Deployment];&#xA;    G --&amp;gt; H[Monitoring];&#xA;    H --&amp;gt; A;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;People use different data representations to varying stages for the performance or limited by the tooling available. The academia mainly uses XML / JSON for annotations and zipped images/sensors data for deep learning, which is difficult to integrated into data infrastructure and slow to train over cloud storage. While the industry uses data lake (Parquet-based techniques, i.e., Delta Lake, Iceberg) or data warehouse (AWS Redshift or Google BigQuery) to collect and analyze data, they have to convert the data into training-friendly formats, such as &lt;a href=&#34;https://github.com/eto-ai/rikai&#34;&gt;Rikai&lt;/a&gt;/&lt;a href=&#34;https://github.com/uber/petastorm&#34;&gt;Petastorm&lt;/a&gt; or &lt;a href=&#34;https://www.tensorflow.org/tutorials/load_data/tfrecord&#34;&gt;Tfrecord&lt;/a&gt;. Multiple single-purpose data transforms, as well as syncing copies between cloud storage to local training instances have become a common practice among ML practices.&lt;/p&gt; &#xA;&lt;p&gt;While each of the existing data formats excel at its original designed workload, we need a new data format to tailored for multistage ML development cycle to reduce the fraction in tools and data silos.&lt;/p&gt; &#xA;&lt;p&gt;A comparison of different data formats in each stage of ML development cycle.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Lance&lt;/th&gt; &#xA;   &lt;th&gt;Parquet &amp;amp; ORC&lt;/th&gt; &#xA;   &lt;th&gt;JSON &amp;amp; XML&lt;/th&gt; &#xA;   &lt;th&gt;Tfrecord&lt;/th&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th&gt;Warehouse&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Analytics&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Slow&lt;/td&gt; &#xA;   &lt;td&gt;Slow&lt;/td&gt; &#xA;   &lt;td&gt;Decent&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feature Engineering&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Decent&lt;/td&gt; &#xA;   &lt;td&gt;Slow&lt;/td&gt; &#xA;   &lt;td&gt;Decent&lt;/td&gt; &#xA;   &lt;td&gt;Good&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Training&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Decent&lt;/td&gt; &#xA;   &lt;td&gt;Slow&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Exploration&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Slow&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Slow&lt;/td&gt; &#xA;   &lt;td&gt;Fast&lt;/td&gt; &#xA;   &lt;td&gt;Decent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Infra Support&lt;/td&gt; &#xA;   &lt;td&gt;Rich&lt;/td&gt; &#xA;   &lt;td&gt;Rich&lt;/td&gt; &#xA;   &lt;td&gt;Decent&lt;/td&gt; &#xA;   &lt;td&gt;Limited&lt;/td&gt; &#xA;   &lt;td&gt;Rich&lt;/td&gt; &#xA;   &lt;td&gt;Rich&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Community Highlights&lt;/h2&gt; &#xA;&lt;p&gt;Lance is currently used in production by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lancedb/lancedb&#34;&gt;LanceDB&lt;/a&gt;, a serverless, low-latency vector database for ML applications&lt;/li&gt; &#xA; &lt;li&gt;Self-driving car company for large-scale storage, retrieval and processing of multi-modal data.&lt;/li&gt; &#xA; &lt;li&gt;E-commerce company for billion-scale+ vector personalized search.&lt;/li&gt; &#xA; &lt;li&gt;and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Presentations and Talks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1a4nAiQAkPDBtOfXFpPg7lbeDAxcNDVKgoUkw3cUs2rE/edit#slide=id.p&#34;&gt;Lance: A New Columnar Data Format&lt;/a&gt;, &lt;a href=&#34;https://www.scipy2022.scipy.org/posters&#34;&gt;Scipy 2022, Austin, TX&lt;/a&gt;. July, 2022.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tokio-rs/tokio</title>
    <updated>2023-06-11T02:01:16Z</updated>
    <id>tag:github.com,2023-06-11:/tokio-rs/tokio</id>
    <link href="https://github.com/tokio-rs/tokio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A runtime for writing reliable asynchronous applications with Rust. Provides I/O, networking, scheduling, timers, ...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tokio&lt;/h1&gt; &#xA;&lt;p&gt;A runtime for writing reliable, asynchronous, and slim applications with the Rust programming language. It is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Tokio&#39;s zero-cost abstractions give you bare-metal performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Tokio leverages Rust&#39;s ownership, type system, and concurrency model to reduce bugs and ensure thread safety.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Tokio has a minimal footprint, and handles backpressure and cancellation naturally.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/tokio&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/tokio.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/tokio-rs/tokio/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/500028886025895936.svg?logo=discord&amp;amp;style=flat-square&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tokio.rs&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://tokio.rs/tokio/tutorial&#34;&gt;Guides&lt;/a&gt; | &lt;a href=&#34;https://docs.rs/tokio/latest/tokio&#34;&gt;API Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;Chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A multithreaded, work-stealing based task &lt;a href=&#34;https://docs.rs/tokio/latest/tokio/runtime/index.html&#34;&gt;scheduler&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A reactor backed by the operating system&#39;s event queue (epoll, kqueue, IOCP, etc...).&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous &lt;a href=&#34;https://docs.rs/tokio/latest/tokio/net/index.html&#34;&gt;TCP and UDP&lt;/a&gt; sockets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These components provide the runtime components necessary for building an asynchronous application.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A basic TCP echo server with Tokio.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you activated the full features of the tokio crate on Cargo.toml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;tokio = { version = &#34;1.28.2&#34;, features = [&#34;full&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, on your main.rs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use tokio::net::TcpListener;&#xA;use tokio::io::{AsyncReadExt, AsyncWriteExt};&#xA;&#xA;#[tokio::main]&#xA;async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let listener = TcpListener::bind(&#34;127.0.0.1:8080&#34;).await?;&#xA;&#xA;    loop {&#xA;        let (mut socket, _) = listener.accept().await?;&#xA;&#xA;        tokio::spawn(async move {&#xA;            let mut buf = [0; 1024];&#xA;&#xA;            // In a loop, read data from the socket and write the data back.&#xA;            loop {&#xA;                let n = match socket.read(&amp;amp;mut buf).await {&#xA;                    // socket closed&#xA;                    Ok(n) if n == 0 =&amp;gt; return,&#xA;                    Ok(n) =&amp;gt; n,&#xA;                    Err(e) =&amp;gt; {&#xA;                        eprintln!(&#34;failed to read from socket; err = {:?}&#34;, e);&#xA;                        return;&#xA;                    }&#xA;                };&#xA;&#xA;                // Write the data back&#xA;                if let Err(e) = socket.write_all(&amp;amp;buf[0..n]).await {&#xA;                    eprintln!(&#34;failed to write to socket; err = {:?}&#34;, e);&#xA;                    return;&#xA;                }&#xA;            }&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found &lt;a href=&#34;https://github.com/tokio-rs/tokio/tree/master/examples&#34;&gt;here&lt;/a&gt;. For a larger &#34;real world&#34; example, see the &lt;a href=&#34;https://github.com/tokio-rs/mini-redis/&#34;&gt;mini-redis&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of the available features flags that can be enabled, check our &lt;a href=&#34;https://docs.rs/tokio/#feature-flags&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;First, see if the answer to your question can be found in the &lt;a href=&#34;https://tokio.rs/tokio/tutorial&#34;&gt;Guides&lt;/a&gt; or the &lt;a href=&#34;https://docs.rs/tokio/latest/tokio&#34;&gt;API documentation&lt;/a&gt;. If the answer is not there, there is an active community in the &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;Tokio Discord server&lt;/a&gt;. We would be happy to try to answer your question. You can also ask your question on &lt;a href=&#34;https://github.com/tokio-rs/tokio/discussions&#34;&gt;the discussions page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;🎈&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to help you get involved in the Tokio project.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the crates in this repository, the Tokio project also maintains several other libraries, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hyperium/hyper&#34;&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;: A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hyperium/tonic&#34;&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;: A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/seanmonstar/warp&#34;&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt;: A super-easy, composable, web server framework for warp speeds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tower-rs/tower&#34;&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt;: A library of modular and reusable components for building robust networking clients and servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/tracing&#34;&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; (formerly &lt;code&gt;tokio-trace&lt;/code&gt;): A framework for application-level tracing and async-aware diagnostics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/rdbc&#34;&gt;&lt;code&gt;rdbc&lt;/code&gt;&lt;/a&gt;: A Rust database connectivity library for MySQL, Postgres and SQLite.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/mio&#34;&gt;&lt;code&gt;mio&lt;/code&gt;&lt;/a&gt;: A low-level, cross-platform abstraction over OS I/O APIs that powers &lt;code&gt;tokio&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/bytes&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;: Utilities for working with bytes, including efficient byte buffers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/loom&#34;&gt;&lt;code&gt;loom&lt;/code&gt;&lt;/a&gt;: A testing tool for concurrent Rust code&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;The Tokio repository contains multiple crates. Each crate has its own changelog.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-util&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-util/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-stream&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-stream/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-macros&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-macros/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-test&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-test/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; &#xA;&lt;!--&#xA;When updating this, also update:&#xA;- .github/workflows/ci.yml&#xA;- CONTRIBUTING.md&#xA;- README.md&#xA;- tokio/README.md&#xA;- tokio/Cargo.toml&#xA;- tokio-util/Cargo.toml&#xA;- tokio-test/Cargo.toml&#xA;- tokio-stream/Cargo.toml&#xA;--&gt; &#xA;&lt;p&gt;Tokio will keep a rolling MSRV (minimum supported rust version) policy of &lt;strong&gt;at least&lt;/strong&gt; 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.56.0.&lt;/p&gt; &#xA;&lt;p&gt;Note that the MSRV is not increased automatically, and only as part of a minor release. The MSRV history for past minor releases can be found below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.27 to now - Rust 1.56&lt;/li&gt; &#xA; &lt;li&gt;1.17 to 1.26 - Rust 1.49&lt;/li&gt; &#xA; &lt;li&gt;1.15 to 1.16 - Rust 1.46&lt;/li&gt; &#xA; &lt;li&gt;1.0 to 1.14 - Rust 1.45&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that although we try to avoid the situation where a dependency transitively increases the MSRV of Tokio, we do not guarantee that this does not happen. However, every minor release will have some set of versions of dependencies that works with the MSRV of that minor release.&lt;/p&gt; &#xA;&lt;h2&gt;Release schedule&lt;/h2&gt; &#xA;&lt;p&gt;Tokio doesn&#39;t follow a fixed release schedule, but we typically make one to two new minor releases each month. We make patch releases for bugfixes as necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Bug patching policy&lt;/h2&gt; &#xA;&lt;p&gt;For the purposes of making patch releases with bugfixes, we have designated certain minor releases as LTS (long term support) releases. Whenever a bug warrants a patch release with a fix for the bug, it will be backported and released as a new patch release for each LTS minor version. Our current LTS releases are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1.18.x&lt;/code&gt; - LTS release until June 2023. (MSRV 1.49)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.20.x&lt;/code&gt; - LTS release until September 2023. (MSRV 1.49)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.25.x&lt;/code&gt; - LTS release until March 2024. (MSRV 1.49)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each LTS release will continue to receive backported fixes for at least a year. If you wish to use a fixed minor release in your project, we recommend that you use an LTS release.&lt;/p&gt; &#xA;&lt;p&gt;To use a fixed minor version, you can specify the version with a tilde. For example, to specify that you wish to use the newest &lt;code&gt;1.18.x&lt;/code&gt; patch release, you can use the following dependency specification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;tokio = { version = &#34;~1.18&#34;, features = [...] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tokio by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>