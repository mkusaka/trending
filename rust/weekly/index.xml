<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-14T01:58:37Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>availproject/avail</title>
    <updated>2024-04-14T01:58:37Z</updated>
    <id>tag:github.com,2024-04-14:/availproject/avail</id>
    <link href="https://github.com/availproject/avail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;Center&#34;&gt; &#xA; &lt;h1&gt;Avail Node&lt;/h1&gt; &#xA; &lt;h3&gt;Official Client for the Avail blockchain&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/availproject/avail/actions/workflows/default.yml&#34;&gt;&lt;img src=&#34;https://github.com/availproject/avail/actions/workflows/default.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/availproject/avail/main/.github/img/terminal.jpg&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Avail Node&lt;/h2&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To manually run the Avail Node, you&#39;ll need to have the following dependencies installed:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://docs.substrate.io/install/&#34;&gt;Substrate dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;After ensuring you have the dependencies installed, you can run the Avail Node using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p output&#xA;cargo run --locked --release -- --chain mainnet -d ./output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command compiles and runs the Avail Node connected to the Mainnet Network.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2024-03-05 12:31:25 Avail Node    &#xA;2024-03-05 12:31:25 ✌️  version 2.0.0-7d6ed7f7141    &#xA;2024-03-05 12:31:25 ❤️  by Avail Team, 2017-2024    &#xA;2024-03-05 12:31:25 📋 Chain specification: Avail Development Network    &#xA;2024-03-05 12:31:25 🏷  Node name: Alice    &#xA;2024-03-05 12:31:25 👤 Role: AUTHORITY    &#xA;2024-03-05 12:31:25 💾 Database: ParityDb at /tmp/substrateecX1Gm/chains/avail_development_network/paritydb/full    &#xA;2024-03-05 12:31:27 🔨 Initializing Genesis block/state (state: 0x7d28…a6c8, header-hash: 0x1074…234a)    &#xA;2024-03-05 12:31:27 👴 Loading GRANDPA authority set from genesis on what appears to be first startup.    &#xA;2024-03-05 12:31:28 👶 Creating empty BABE epoch changes on what appears to be first startup.    &#xA;2024-03-05 12:31:28 🏷  Local node identity is: 12D3KooWQDpM9w2zcvUaJS89KVAEdXsDFcBrTtc8awHGusRwSCEr    &#xA;2024-03-05 12:31:28 Prometheus metrics extended with avail metrics    &#xA;2024-03-05 12:31:28 💻 Operating system: linux    &#xA;2024-03-05 12:31:28 💻 CPU architecture: x86_64    &#xA;2024-03-05 12:31:28 💻 Target environment: gnu    &#xA;2024-03-05 12:31:28 💻 CPU: 13th Gen Intel(R) Core(TM) i7-13700K    &#xA;2024-03-05 12:31:28 💻 CPU cores: 16    &#xA;2024-03-05 12:31:28 💻 Memory: 31873MB    &#xA;2024-03-05 12:31:28 💻 Kernel: 6.7.6-200.fc39.x86_64    &#xA;2024-03-05 12:31:28 💻 Linux distribution: Fedora Linux 39 (Workstation Edition)    &#xA;2024-03-05 12:31:28 💻 Virtual machine: no    &#xA;2024-03-05 12:31:28 📦 Highest known block at #0    &#xA;2024-03-05 12:31:28 〽️ Prometheus exporter started at 127.0.0.1:9615    &#xA;2024-03-05 12:31:28 Running JSON-RPC server: addr=127.0.0.1:9944, allowed origins=[&#34;http://localhost:*&#34;, &#34;http://127.0.0.1:*&#34;, &#34;https://localhost:*&#34;, &#34;https://127.0.0.1:*&#34;, &#34;https://polkadot.js.org&#34;]    &#xA;2024-03-05 12:31:28 🏁 CPU score: 1.65 GiBs    &#xA;2024-03-05 12:31:28 🏁 Memory score: 22.52 GiBs    &#xA;2024-03-05 12:31:28 🏁 Disk score (seq. writes): 7.00 GiBs    &#xA;2024-03-05 12:31:28 🏁 Disk score (rand. writes): 2.77 GiBs    &#xA;2024-03-05 12:31:28 👶 Starting BABE Authorship worker    &#xA;2024-03-05 12:31:33 💤 Idle (0 peers), best: #0 (0x1074…234), finalized #0 (0x1074…234a), ⬇ 0 ⬆ 0    &#xA;2024-03-05 12:31:38 💤 Idle (0 peers), best: #0 (0x1074…234a), finalized #0 (0x1074…234a), ⬇ 0 ⬆ 0   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Chains&lt;/h3&gt; &#xA;&lt;h4&gt;Development&lt;/h4&gt; &#xA;&lt;p&gt;A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --locked --release -- --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testnet New&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --locked --release -- --chain new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --locked --release -- --chain mainnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;To run the Avail Node using Docker, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;docker build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode&#xA;# For SELinux&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Dev Chain&lt;/h4&gt; &#xA;&lt;p&gt;There are instructions for running a development chain using Docker. A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;docker build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;# For SELinux&#xA;docker run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Podman&lt;/h3&gt; &#xA;&lt;p&gt;To run the Avail Node using Docker, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;podman build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode&#xA;# For SELinux&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Dev Chain&lt;/h4&gt; &#xA;&lt;p&gt;There are instructions for running a development chain using Podman. A development chain is typically used for testing and development purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image for the Avail Node:&#xA;podman build -t availnode -f ./dockerfiles/avail-node.Dockerfile .&#xA;&#xA;# Create an output directory. Here the node&#39;s data will be stored.&#xA;mkdir output&#xA;&#xA;# Run the Avail Node container:&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;# For SELinux&#xA;podman run --rm -p 30333:30333 -p 9944:9944 -v ./output:/output:z availnode --dev --rpc-methods=unsafe --unsafe-rpc-external --rpc-cors=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Kate RPC&lt;/h2&gt; &#xA;&lt;p&gt;To enable Kate RPC you need to pass &lt;code&gt;--enable-kate-rpc&lt;/code&gt; flag when executing the binary. &lt;code&gt;--dev&lt;/code&gt; implies &lt;code&gt;--enable-kate-rpc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./avail-node --enable-kate-rpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;All Custom Flags&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--enable-kate-rpc&#xA;    Enable Kate RPC&#xA;&#xA;--enable-kate-rpc-metrics&#xA;    Enable Kate RPC Metrics&#xA;&#xA;--kate-max-cells-size &amp;lt;KATE_MAX_CELLS_SIZE&amp;gt;&#xA;    The maximum number of cells that can be requested in one go.&#xA;    &#xA;    Max size cannot exceed 10_000&#xA;    &#xA;    [default: 64]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Benchmarks&lt;/h2&gt; &#xA;&lt;h3&gt;Kate RPC&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./avail-node --dev&#xA;deno run -A ./examples/deno/benchmarks/query_proof.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_rows.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_block_length.ts &amp;amp;&amp;amp; deno run -A ./examples/deno/benchmarks/query_data_proof.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Header Builder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Option 1: for time measurement &#xA;cargo bench --bench header_kate_commitment_cri&#xA;# Option 2: for time measurement &#xA;cargo bench --bench header_kate_commitment_divan&#xA;# Option 1: for instructions, cache and main memory hits&#xA;cargo bench --bench header_kate_commitment_iai_callgrind&#xA;# Option 2: for instructions, cache and main memory hits&#xA;cargo bench --bench header_kate_commitment_iai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For additional documentation check our &lt;a href=&#34;https://github.com/availproject/avail/wiki&#34;&gt;wiki page&lt;/a&gt;. There you can learn how to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Avail Node together with Avail Light Clients&lt;/li&gt; &#xA; &lt;li&gt;Build Avail Node for different Linux flavours&lt;/li&gt; &#xA; &lt;li&gt;Find out what node synchronization options are available&lt;/li&gt; &#xA; &lt;li&gt;Running Avail Benchmarks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interact with the chain&lt;/h2&gt; &#xA;&lt;p&gt;You can find on this repository many example on how to interact with any avail chain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the avail-js folder, you will find our wrapper for polkadot js including multiple helpers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The example folder contains some examples using node-js and an example web app to setup the extension.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the avail-subxt folder, you will find our fork of subxt with some example on usage.&lt;/li&gt; &#xA; &lt;li&gt;In the examples folders you will find examples for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deno examples&lt;/li&gt; &#xA;   &lt;li&gt;Go examples&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>HardhatChad/ore</title>
    <updated>2024-04-14T01:58:37Z</updated>
    <id>tag:github.com,2024-04-14:/HardhatChad/ore</id>
    <link href="https://github.com/HardhatChad/ore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ore&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ore is a digital currency you can mine from anywhere, at home or on your phone.&lt;/strong&gt; It uses a novel proof-of-work algorithm to guarantee no miner can ever be starved out from earning rewards.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The primary innovation of Ore is to offer non-exclusive mining rewards. This means one miner finding a valid solution does not prevent another miner from finding one as well. Rather than setting up every miner in a winner-take-all competition against one another, Ore gives each miner a personalized computational challenge. As long as a miner provides a valid solution to their own individual challenge, the protocol guarantees they will earn a piece of the supply. Since no miner can be censored from the network and valid solutions are non-exclusive, starvation is avoided.&lt;/p&gt; &#xA;&lt;h2&gt;Supply&lt;/h2&gt; &#xA;&lt;p&gt;Ore is designed to protect holders from runaway supply inflation. Regardless of how many miners are active in the world, supply growth is strictly bounded to a rate of &lt;code&gt;0 ≤ R ≤ 2 ORE/min&lt;/code&gt;. In other words, linear. The mining reward rate – amount paid out to miners per valid solution – is dynamically adjusted every 60 seconds to maintain an average supply growth of &lt;code&gt;1 ORE/min&lt;/code&gt;. This level was chosen for its straightforward simplicity, scale agnosticism, and for striking a balance between the extremes of exponential inflation on one hand and stagnant deflation on the other.&lt;/p&gt; &#xA;&lt;h2&gt;Program&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/consts.rs&#34;&gt;&lt;code&gt;Consts&lt;/code&gt;&lt;/a&gt; –&amp;nbsp;Program constants.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/lib.rs&#34;&gt;&lt;code&gt;Entrypoint&lt;/code&gt;&lt;/a&gt; –&amp;nbsp;The program entrypoint.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/error.rs&#34;&gt;&lt;code&gt;Errors&lt;/code&gt;&lt;/a&gt; –&amp;nbsp;Custom program errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/idl/ore.json&#34;&gt;&lt;code&gt;Idl&lt;/code&gt;&lt;/a&gt; – Interface for clients, explorers, and programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/instruction.rs&#34;&gt;&lt;code&gt;Instruction&lt;/code&gt;&lt;/a&gt; –&amp;nbsp;Declared instructions and arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/loaders.rs&#34;&gt;&lt;code&gt;Loaders&lt;/code&gt;&lt;/a&gt; –&amp;nbsp;Validation logic for loading Solana accounts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/processor/initialize.rs&#34;&gt;&lt;code&gt;Initialize&lt;/code&gt;&lt;/a&gt;&amp;nbsp;– Initializes the Ore program, creating the bus, mint, and treasury accounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/processor/reset.rs&#34;&gt;&lt;code&gt;Reset&lt;/code&gt;&lt;/a&gt; – Resets the program for a new epoch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/processor/register.rs&#34;&gt;&lt;code&gt;Register&lt;/code&gt;&lt;/a&gt;&amp;nbsp;– Creates a new proof account for a prospective miner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/processor/mine.rs&#34;&gt;&lt;code&gt;Mine&lt;/code&gt;&lt;/a&gt; – Verifies a hash provided by a miner and issues claimable rewards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/processor/claim.rs&#34;&gt;&lt;code&gt;Claim&lt;/code&gt;&lt;/a&gt; – Distributes claimable rewards as tokens from the treasury to a miner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/processor/update_admin.rs&#34;&gt;&lt;code&gt;UpdateAdmin&lt;/code&gt;&lt;/a&gt;&amp;nbsp;– Updates the admin authority.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/processor/update_difficulty.rs&#34;&gt;&lt;code&gt;UpdateDifficulty&lt;/code&gt;&lt;/a&gt; - Updates the hashing difficulty.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;State&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/state/bus.rs&#34;&gt;&lt;code&gt;Bus&lt;/code&gt;&lt;/a&gt; - An account (8 total) which tracks and limits the amount mined rewards each epoch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/state/proof.rs&#34;&gt;&lt;code&gt;Proof&lt;/code&gt;&lt;/a&gt; - An account (1 per miner) which tracks a miner&#39;s hash, claimable rewards, and lifetime stats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HardhatChad/ore/master/src/state/treasury.rs&#34;&gt;&lt;code&gt;Treasury&lt;/code&gt;&lt;/a&gt; – A singleton account which manages program-wide variables and authorities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;To run the test suite, use the Solana toolchain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo test-sbf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For line coverage, use llvm-cov:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo llvm-cov&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>availproject/avail-light</title>
    <updated>2024-04-14T01:58:37Z</updated>
    <id>tag:github.com,2024-04-14:/availproject/avail-light</id>
    <link href="https://github.com/availproject/avail-light" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;Center&#34;&gt; &#xA; &lt;h1&gt;avail-light&lt;/h1&gt; &#xA; &lt;h3&gt; Light client for the Avail blockchain&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/availproject/avail-light/actions/workflows/default.yml&#34;&gt;&lt;img src=&#34;https://github.com/availproject/avail-light/actions/workflows/default.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/availproject/avail-light&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/availproject/avail-light/branch/main/graph/badge.svg?token=7O2EA7QMC2&#34; alt=&#34;Code coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/availproject/avail-light/main/img/lc.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;avail-light&lt;/code&gt; is a data availability light client with the following functionalities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Listening on the Avail network for finalized blocks&lt;/li&gt; &#xA; &lt;li&gt;Random sampling and proof verification of a predetermined number of cells (&lt;code&gt;{row, col}&lt;/code&gt; pairs) on each new block. After successful block verification, confidence is calculated for a number of &lt;em&gt;cells&lt;/em&gt; (&lt;code&gt;N&lt;/code&gt;) in a matrix, with &lt;code&gt;N&lt;/code&gt; depending on the percentage of certainty the light client wants to achieve.&lt;/li&gt; &#xA; &lt;li&gt;Data reconstruction through application client.&lt;/li&gt; &#xA; &lt;li&gt;HTTP endpoints exposing relevant data, both from the light and application clients&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modes of Operation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Light-client Mode&lt;/strong&gt;: The basic mode of operation and is always active no matter the mode selected. If an &lt;code&gt;App_ID&lt;/code&gt; is not provided (or is =0), this mode will commence. On each header received the client does random sampling using two mechanisms:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;DHT - client first tries to retrieve cells via Kademlia.&lt;/li&gt; &#xA;   &lt;li&gt;RPC - if DHT retrieve fails, the client uses RPC calls to Avail nodes to retrieve the needed cells. The cells not already found in the DHT will be uploaded.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once the data is received, light client verifies individual cells and calculates the confidence, which is then stored locally.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;App-Specific Mode&lt;/strong&gt;: If an &lt;strong&gt;&lt;code&gt;App_ID&lt;/code&gt; &amp;gt; 0&lt;/strong&gt; is given in the config file, the application client (part of the light client) downloads all the relevant app data, reconstructs it and persists it locally. Reconstructed data is then available to accessed via an HTTP endpoint. (WIP)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fat-Client Mode&lt;/strong&gt;: The client retrieves larger contiguous chunks of the matrix on each block via RPC calls to an Avail node, and stores them on the DHT. This mode is activated when the &lt;code&gt;block_matrix_partition&lt;/code&gt; parameter is set in the config file, and is mainly used with the &lt;code&gt;disable_proof_verification&lt;/code&gt; flag because of the resource cost of cell validation. &lt;strong&gt;IMPORTANT&lt;/strong&gt;: disabling proof verification introduces a trust assumption towards the node, that the data provided is correct.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Crawl-Client Mode&lt;/strong&gt;: Active if the &lt;code&gt;crawl&lt;/code&gt; feature is enabled, and &lt;code&gt;crawl_block&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. The client crawls cells from DHT for entire block, and calculates success rate. Crawled cell proofs are not being verified, nor rows commitment equality check is being performed. Every block crawling is delayed by &lt;code&gt;crawl_block_delay&lt;/code&gt; parameter. Delay should be enough so crawling of large block can be compensated. Success rate is emitted in logs and metrics. Crawler can be run in three modes: &lt;code&gt;cells&lt;/code&gt;, &lt;code&gt;rows&lt;/code&gt; and &lt;code&gt;both&lt;/code&gt;. Default mode is &lt;code&gt;cells&lt;/code&gt;, and it can be configured by &lt;code&gt;crawl_block_mode&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download the Light Client from the &lt;a href=&#34;https://github.com/availproject/avail-light/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;Light Client can also be built from the source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/availproject/avail-light.git&#xA;cd avail-light&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resulting &lt;code&gt;avail-light&lt;/code&gt; binary can be found in the &lt;code&gt;target/release&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Installation using Docker&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can use Docker to build and run the light client locally. Keep in mind that Docker image will fail unless you have provided a &lt;code&gt;config.yaml&lt;/code&gt; during the build process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t avail-light .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will cache the dependencies on the first build, after which you can run the image like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run avail-light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Local development&lt;/h3&gt; &#xA;&lt;p&gt;For local development, a couple of prerequisites have to be met.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the Avail &lt;a href=&#34;https://github.com/availproject/avail&#34;&gt;node&lt;/a&gt;. For this setup, we&#39;ll run it in &lt;code&gt;dev&lt;/code&gt; mode:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./data-avail --dev --enable-kate-rpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://github.com/availproject/avail-light-bootstrap&#34;&gt;bootstrap&lt;/a&gt; node is required for deploying the Light Client(s) locally. Once the bootstrap has been downloaded and started, run the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./avail-light --network local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuration file can also be used for the local deployment, as was the case for the testnet.&lt;/p&gt; &#xA;&lt;p&gt;Example configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config.yaml&#xA;log_level = &#34;info&#34;&#xA;http_server_host = &#34;127.0.0.1&#34;&#xA;http_server_port = 7000&#xA;&#xA;secret_key = { seed = &#34;avail&#34; }&#xA;port = 37000&#xA;&#xA;full_node_ws = [&#34;ws://127.0.0.1:9944&#34;]&#xA;app_id = 0&#xA;confidence = 92.0&#xA;avail_path = &#34;avail_path&#34;&#xA;bootstraps = [&#34;/ip4/127.0.0.1/tcp/39000/p2p/12D3KooWMm1c4pzeLPGkkCJMAgFbsfQ8xmVDusg272icWsaNHWzN&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full configuration reference can be found &lt;a href=&#34;https://raw.githubusercontent.com/availproject/avail-light/main/#configuration-reference&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; Flags and options take precedence to the configuration file if both are set (i.e. &lt;code&gt;--port&lt;/code&gt; option overwrites the &lt;code&gt;port&lt;/code&gt; parameter from the config file).&lt;/p&gt; &#xA;&lt;p&gt;Example identity file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;WARNING:&lt;/em&gt; This file contains a private key. Please ensure only authorized access and prefer using encrypted storage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# identity.toml&#xA;avail_secret_seed_phrase = &#34;bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--network &amp;lt;NETWORK&amp;gt;&lt;/code&gt;: Select a network for the Light Client to connect. Possible values are: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;local&lt;/code&gt;: Local development&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config&lt;/code&gt;: Location of the configuration file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--identity&lt;/code&gt;: Location of the identity file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--app-id&lt;/code&gt;: The &lt;code&gt;appID&lt;/code&gt; parameter for the application client&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--port&lt;/code&gt;: LibP2P listener port&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbosity&lt;/code&gt;: Log level. Possible values are: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;info&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;error&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--avail-passphrase &amp;lt;PASSPHRASE&amp;gt;&lt;/code&gt;: Avail secret seed phrase password, flag is optional&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--seed&lt;/code&gt;: Seed string for libp2p keypair generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--secret-key&lt;/code&gt;: Ed25519 private key for libp2p keypair generation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flags&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt;: Light Client version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--clean&lt;/code&gt;: Remove previous state dir set in &lt;code&gt;avail_path&lt;/code&gt; config parameter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--finality_sync_enable&lt;/code&gt;: Enable finality sync&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Identity&lt;/h2&gt; &#xA;&lt;p&gt;In the Avail network, a light client&#39;s identity can be configured using the &lt;code&gt;identity.toml&lt;/code&gt; file. If not specified, a secret seed phrase will be generated and stored in the identity file when the light client starts. To use an existing seed phrase, set the &lt;code&gt;avail_secret_seed_phrase&lt;/code&gt; entry in the &lt;code&gt;identity.toml&lt;/code&gt; file. Seed phrase will be used to derive Sr25519 key pair for signing. Location of the identity file can be specified using &lt;code&gt;--identity&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration reference&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;log_level = &#34;info&#34;&#xA;# Light client HTTP server host name (default: 127.0.0.1)&#xA;http_server_host = &#34;127.0.0.1&#34;&#xA;# Light client HTTP server port (default: 7000).&#xA;http_server_port = 7000&#xA;# Secret key for libp2p keypair. Can be either set to `seed` or to `key`.&#xA;# If set to seed, keypair will be generated from that seed.&#xA;# If set to key, a valid ed25519 private key must be provided, else the client will fail&#xA;# If `secret_key` is not set, random seed will be used.&#xA;secret_key = { seed={seed} }&#xA;# P2P service port (default: 37000).&#xA;port = 37000&#xA;# Configures AutoNAT behaviour to reject probes as a server for clients that are observed at a non-global ip address (default: false)&#xA;autonat_only_global_ips = false&#xA;# AutoNat throttle period for re-using a peer as server for a dial-request. (default: 1s)&#xA;autonat_throttle = 2&#xA;# Interval in which the NAT status should be re-tried if it is currently unknown or max confidence was not reached yet. (default: 20s)&#xA;autonat_retry_interval = 20&#xA;# Interval in which the NAT should be tested again if max confidence was reached in a status. (default: 360s)&#xA;autonat_refresh_interval = 360&#xA;# AutoNat on init delay before starting the first probe. (default: 5s)&#xA;autonat_boot_delay = 10&#xA;# Vector of Light Client bootstrap nodes, used to bootstrap the DHT (mandatory field).&#xA;bootstraps = [&#34;/ip4/13.51.79.255/tcp/39000/p2p/12D3KooWE2xXc6C2JzeaCaEg7jvZLogWyjLsB5dA3iw5o3KcF9ds&#34;]&#xA;# Vector of Relay nodes, which are used for hole punching&#xA;relays = [&#34;/ip4/13.49.44.246/tcp/39111/12D3KooWBETtE42fN7DZ5QsGgi7qfrN3jeYdXmBPL4peVTDmgG9b&#34;]&#xA;# WebSocket endpoint of a full node for subscribing to the latest header, etc (default: ws://127.0.0.1:9944).&#xA;full_node_ws = [&#34;ws://127.0.0.1:9944&#34;]&#xA;# Genesis hash of the network you are connecting to. The genesis hash will be checked upon connecting to the node(s) and will also be used to identify you on the p2p network. If you wish to skip the check for development purposes, entering DEV{suffix} instead will skip the check and create a separate p2p network with that identifier.&#xA;genesis_hash = &#34;DEV123&#34;&#xA;# ID of application used to start application client. If app_id is not set, or set to 0, application client is not started (default: 0).&#xA;app_id = 0&#xA;# Confidence threshold, used to calculate how many cells need to be sampled to achieve desired confidence (default: 99.9).&#xA;confidence = 99.9&#xA;# File system path where RocksDB used by light client, stores its data. (default: avail_path)&#xA;avail_path = &#34;avail_path&#34;&#xA;# OpenTelemetry Collector endpoint (default: `http://127.0.0.1:4317`)&#xA;ot_collector_endpoint = &#34;http://127.0.0.1:4317&#34;&#xA;# If set to true, logs are displayed in JSON format, which is used for structured logging. Otherwise, plain text format is used (default: false).&#xA;log_format_json = true&#xA;# Fraction and number of the block matrix part to fetch (e.g. 2/20 means second 1/20 part of a matrix). This is the parameter that determines whether the client behaves as fat client or light client (default: None)&#xA;block_matrix_partition = &#34;1/20&#34;&#xA;# Disables proof verification in general, if set to true, otherwise proof verification is performed. (default: false).&#xA;disable_proof_verification = false&#xA;# Disables fetching of cells from RPC, set to true if client expects cells to be available in DHT (default: false)&#xA;disable_rpc = false&#xA;# Number of parallel queries for cell fetching via RPC from node (default: 8).&#xA;query_proof_rpc_parallel_tasks = 8&#xA;# Maximum number of cells per request for proof queries (default: 30).&#xA;max_cells_per_rpc = 30&#xA;# Maximum number of parallel tasks spawned for GET and PUT operations on DHT (default: 20).&#xA;dht_parallelization_limit = 20&#xA;# Number of seconds to postpone block processing after the block finalized message arrives. (default: 0).&#xA;block_processing_delay = 0&#xA;# Starting block of the syncing process. Omitting it will disable syncing. (default: None).&#xA;sync_start_block = 0&#xA;# Enable or disable synchronizing finality. If disabled, finality is assumed to be verified until the &#xA;# starting block at the point the LC is started and is only checked for new blocks. (default: false)&#xA;sync_finality_enable = false&#xA;# Time-to-live for DHT entries in seconds (default: 24h).&#xA;# Default value is set for light clients. Due to the heavy duty nature of the fat clients, it is recommended to be set far below this value - not greater than 1hr.&#xA;# Record TTL, publication and replication intervals are co-dependent: TTL &amp;gt;&amp;gt; publication_interval &amp;gt;&amp;gt; replication_interval.&#xA;record_ttl = 86400&#xA;# Sets the (re-)publication interval of stored records, in seconds. This interval should be significantly shorter than the record TTL, ensure records do not expire prematurely. (default: 12h).&#xA;# Default value is set for light clients. Fat client value needs to be inferred from the TTL value.&#xA;# This interval should be significantly shorter than the record TTL, to ensure records do not expire prematurely.&#xA;publication_interval = 43200&#xA;# Sets the (re-)replication interval for stored records, in seconds. This interval should be significantly shorter than the publication interval, to ensure persistence between re-publications. (default: 3h).&#xA;# Default value is set for light clients. Fat client value needs to be inferred from the TTL and publication interval values.&#xA;# This interval should be significantly shorter than the publication interval, to ensure persistence between re-publications.&#xA;replication_interval = 10800&#xA;# The replication factor determines to how many closest peers a record is replicated. (default: 5).&#xA;replication_factor = 5&#xA;# Sets the amount of time to keep connections alive when they&#39;re idle. (default: 30s).&#xA;# NOTE: libp2p default value is 10s, but because of Avail block time of 20s the value has been increased&#xA;connection_idle_timeout = 30&#xA;# Sets the timeout for a single Kademlia query. (default: 10s).&#xA;query_timeout = 10&#xA;# Sets the allowed level of parallelism for iterative Kademlia queries. (default: 3).&#xA;query_parallelism = 3&#xA;# Sets the Kademlia caching strategy to use for successful lookups. If set to 0, caching is disabled. (default: 1).&#xA;caching_max_peers = 1&#xA;# Require iterative queries to use disjoint paths for increased resiliency in the presence of potentially adversarial nodes. (default: false).&#xA;disjoint_query_paths = false&#xA;# The maximum number of records. (default: 2400000).&#xA;max_kad_record_number = 2400000&#xA;# The maximum size of record values, in bytes. (default: 8192).&#xA;max_kad_record_size = 8192&#xA;# The maximum number of provider records for which the local node is the provider. (default: 1024).&#xA;max_kad_provided_keys = 1024&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Immediately after starting a fresh light client, block sync is executed from a starting block set with the &lt;code&gt;sync_start_block&lt;/code&gt; config parameter. The sync process is using both the DHT and RPC for that purpose.&lt;/li&gt; &#xA; &lt;li&gt;In order to spin up a fat client, config needs to contain the &lt;code&gt;block_matrix_partition&lt;/code&gt; parameter set to a fraction of matrix. It is recommended to set the &lt;code&gt;disable_proof_verification&lt;/code&gt; to true, because of the resource costs of proof verification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sync_start_block&lt;/code&gt; needs to be set correspondingly to the blocks cached on the connected node (if downloading data via RPC).&lt;/li&gt; &#xA; &lt;li&gt;When an LC is freshly connected to a network, block finality is synced from the first block. If the LC is connected to a non-archive node on a long running network, initial validator sets won&#39;t be available and the finality checks will fail. In that case we recommend disabling the &lt;code&gt;sync_finality_enable&lt;/code&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;When switching between the networks (i.e. local devnet), LC state in the &lt;code&gt;avail_path&lt;/code&gt; directory has to be cleared&lt;/li&gt; &#xA; &lt;li&gt;OpenTelemetry push metrics are used for light client observability&lt;/li&gt; &#xA; &lt;li&gt;In order to use network analyzer, the light client has to be compiled with &lt;code&gt;--features &#39;network-analysis&#39;&lt;/code&gt; flag; when running the LC with network analyzer, sufficient capabilities have to be given to the client in order for it to have the permissions needed to listen on socket: &lt;code&gt;sudo setcap cap_net_raw,cap_net_admin=eip /path/to/light/client/binary&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage and examples&lt;/h2&gt; &#xA;&lt;h3&gt;Fetching the number of the latest block processed by light client&lt;/h3&gt; &#xA;&lt;p&gt;To fetch the number of the latest block processed by light client, we can perform &lt;code&gt;GET&lt;/code&gt; request on &lt;code&gt;/v1/latest_block&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl &#34;http://localhost:7000/v1/latest_block&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;latest_block&#34;: 10&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetching the confidence for given block&lt;/h3&gt; &#xA;&lt;p&gt;To fetch the confidence for specific block, which is already processed by application client, we can perform &lt;code&gt;GET&lt;/code&gt; request on &lt;code&gt;/v1/confidece/{block_number}&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl &#34;http://localhost:7000/v1/confidence/1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;block&#34;: 1,&#xA;&#x9;&#34;confidence&#34;: 93.75,&#xA;&#x9;&#34;serialised_confidence&#34;: &#34;5232467296&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;serialisedConfidence&lt;/code&gt; is calculated as: &lt;code&gt;blockNumber &amp;lt;&amp;lt; 32 | int32(confidence * 10 ** 7)&lt;/code&gt;, where confidence is represented out of 10 ** 9.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Fetching decoded application data for given block&lt;/h3&gt; &#xA;&lt;p&gt;After data is verified, it can be fetched with &lt;code&gt;GET&lt;/code&gt; request on &lt;code&gt;/v1/appdata/{block_number}&lt;/code&gt; endpoint, by specifying &lt;code&gt;decode=true&lt;/code&gt; query parameter. In case &lt;code&gt;decode&lt;/code&gt; is omitted or &lt;code&gt;false&lt;/code&gt;, scale encoded extrinsics will be returned.&lt;/p&gt; &#xA;&lt;h4&gt;JSON response&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl &#34;http://localhost:7000/v1/appdata/1?decode=true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;block&#34;: 46,&#xA;&#x9;&#34;extrinsics&#34;: [&#xA;&#x9;&#x9;&#34;ZXhhbXBsZQ==&#34;&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Decoded extrinsic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -s &#34;http://127.0.0.1:7000/v1/appdata/1?decode=true&#34; | jq -r &#39;.extrinsics[-1]&#39; | base64 -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;example&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the running mode of the Light Client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl &#34;localhost:7000/v1/mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;AppClient&#34;: 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the status of a latest block&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl &#34;localhost:7000/v1/status&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;block_num&#34;: 10,&#xA;&#x9;&#34;confidence&#34;: 93.75,&#xA;&#x9;&#34;app_id&#34;: 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the latest block&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl &#34;localhost:7000/v1/latest_block&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;latest_block&#34;: 255&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Health check&lt;/h3&gt; &#xA;&lt;p&gt;To perform health check of the light client, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -I &#34;localhost:7000/health&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;200 OK is expected response.&lt;/p&gt; &#xA;&lt;h2&gt;API reference&lt;/h2&gt; &#xA;&lt;p&gt;In case of error, endpoints will return response with &lt;code&gt;500 Internal Server Error&lt;/code&gt; status code, and descriptive error message.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/v1/mode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Retrieves the operating mode of the light client. Light client can operate in two different modes, &lt;code&gt;LightClient&lt;/code&gt; or &lt;code&gt;AppClient&lt;/code&gt;, depending on configuration of application ID.&lt;/p&gt; &#xA;&lt;h4&gt;Responses&lt;/h4&gt; &#xA;&lt;p&gt;If operating mode is &lt;code&gt;LightClient&lt;/code&gt; response is:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;LightClient&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of &lt;code&gt;AppClient&lt;/code&gt; mode, response is:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;AppClient&#34;: {app_id}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/v1/latest_block&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Retrieves the latest block processed by the light client.&lt;/p&gt; &#xA;&lt;h4&gt;Responses&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;latest_block&#34;:{block_number}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/v1/confidence/{block_number}&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Given a block number, it returns the confidence computed by the light client for that specific block.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Path parameters:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;block_number&lt;/code&gt; - block number (required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Responses&lt;/h4&gt; &#xA;&lt;p&gt;In case when confidence is computed:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#34;block&#34;: 1, &#34;confidence&#34;: 93.75, &#34;serialised_confidence&#34;: &#34;5232467296&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If confidence is not computed, and specified block is before the latest processed block:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;400 Bad Request&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Not synced&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If confidence is not computed, and specified block is after the latest processed block:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;404 Not Found&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Not found&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/v1/appdata/{block_number}&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Given a block number, it retrieves the hex-encoded extrinsics for the specified block, if available. Alternatively, if specified by a query parameter, the retrieved extrinsic is decoded and returned as a base64-encoded string.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Path parameters:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;block_number&lt;/code&gt; - block number (required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Query parameters:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;decode&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; if decoded extrinsics are requested (boolean, optional, default is &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Responses&lt;/h4&gt; &#xA;&lt;p&gt;If application data is available, and decode is &lt;code&gt;false&lt;/code&gt; or unspecified:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;block&#34;: 1,&#xA;&#x9;&#34;extrinsics&#34;: [&#xA;&#x9;&#x9;&#34;0xc5018400d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d01308e88ca257b65514b7b44fc1913a6a9af6abc34c3d22761b0e425674d68df7de26be1c8533a7bbd01fdb3a8daa5af77df6d3fb0a67cde8241f461f4fe16f188000000041d011c6578616d706c65&#34;&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If application data is available, and decode is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#34;block&#34;: 1, &#34;extrinsics&#34;: [&#34;ZXhhbXBsZQ==&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If application data is not available, and specified block is the latest block:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;401 Unauthorized&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Processing block&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If application data is not available, and specified block is not the latest block:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;404 Not Found&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Not found&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/v1/status&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Retrieves the status of the latest block processed by the light client.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Path parameters:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;block_number&lt;/code&gt; - block number (required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Responses&lt;/h4&gt; &#xA;&lt;p&gt;If latest processed block exists, and &lt;code&gt;app_id&lt;/code&gt; is configured (otherwise, &lt;code&gt;app_id&lt;/code&gt; is not set):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;200 OK&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#34;block_num&#34;: 89, &#34;confidence&#34;: 93.75, &#34;app_id&#34;: 1 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are no processed blocks:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status code: &lt;code&gt;404 Not Found&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Not found&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Code Coverage Report&lt;/h2&gt; &#xA;&lt;p&gt;We are using &lt;a href=&#34;https://github.com/mozilla/grcov&#34;&gt;grcov&lt;/a&gt; to aggregate code coverage information and generate reports.&lt;/p&gt; &#xA;&lt;p&gt;To install grcov, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install grcov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code coverage data is generated when running tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env RUSTFLAGS=&#34;-C instrument-coverage&#34; \&#xA; LLVM_PROFILE_FILE=&#34;tests-coverage-%p-%m.profraw&#34; \&#xA; cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate the report, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grcov . -s . \&#xA; --binary-path ./target/debug/ \&#xA; -t html \&#xA; --branch \&#xA; --ignore-not-existing -o \&#xA; ./target/debug/coverage/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To clean up generate coverage information files, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -name \*.profraw -type f -exec rm -f {} +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;index.html&lt;/code&gt; from the &lt;code&gt;./target/debug/coverage/&lt;/code&gt; folder to review coverage data.&lt;/p&gt;</summary>
  </entry>
</feed>