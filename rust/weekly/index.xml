<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:58:32Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aripiprazole/rinha-de-compiler</title>
    <updated>2023-09-17T01:58:32Z</updated>
    <id>tag:github.com,2023-09-17:/aripiprazole/rinha-de-compiler</id>
    <link href="https://github.com/aripiprazole/rinha-de-compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü•ñ | Rinha de compiladores (ou interpretadores kkkk&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aripiprazole/rinha-de-compiler/main/img/banner.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/e8EzgPscCw&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Introdu√ß√£o&lt;/h1&gt; &#xA;&lt;p&gt;O ideal da rinha √© fazer um interpretador ou compilador que rode em uma maquina com 2 n√∫cleos e 2G de RAM.&lt;/p&gt; &#xA;&lt;p&gt;O seu interpretador ou compilador deve trabalhar com algo chamado &#34;√°rvore sint√°tica abstrata&#34; que est√° armazenada no formato JSON. Essa √°rvore sint√°tica abstrata ser√° gerada por n√≥s usando uma ferramenta espec√≠fica dispon√≠vel neste reposit√≥rio.&lt;/p&gt; &#xA;&lt;p&gt;Sua responsabilidade na tarefa √© receber esse JSON que cont√©m a √°rvore abstrata e, em seguida, interpretar ou compilar o programa de acordo com as informa√ß√µes fornecidas na √°rvore abstrata.&lt;/p&gt; &#xA;&lt;p&gt;Simplificando:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;N√≥s te damos um JSON com uma √°rvore dentro&lt;/li&gt; &#xA; &lt;li&gt;Voce roda o JSON&lt;/li&gt; &#xA; &lt;li&gt;Voce fica feliz que apareceu o resultado.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Para executar&lt;/h2&gt; &#xA;&lt;p&gt;Cada projeto deve ter seu pr√≥prio &lt;code&gt;Dockerfile&lt;/code&gt; para que consigamos rodar&lt;/p&gt; &#xA;&lt;h2&gt;Como testar&lt;/h2&gt; &#xA;&lt;p&gt;Para testar voc√™ pode usar o arquivo &lt;code&gt;files/fib.rinha&lt;/code&gt; e gerar com o programa que disponibilizamos aqui para um JSON ou voc√™ pode usar diretamente o JSON que est√° em &lt;code&gt;files/fib.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Durante a rinha n√≥s iremos adicionar outros testes :)&lt;/p&gt; &#xA;&lt;h2&gt;Requisitos&lt;/h2&gt; &#xA;&lt;p&gt;Voc√™ tem que fazer um PR, alterando o arquivo &lt;a href=&#34;https://raw.githubusercontent.com/aripiprazole/rinha-de-compiler/main/PARTICIPANTS.md&#34;&gt;PARTICIPANTS.md&lt;/a&gt;, com uma nova linha e seu reposit√≥rio. Talvez isso seja mudado depois (fique atento).&lt;/p&gt; &#xA;&lt;p&gt;Seu reposit√≥rio ter√° que ter uma imagem no root do reposit√≥rio, e buildaremos a imagem no rankeamento.&lt;/p&gt; &#xA;&lt;h2&gt;Especifica√ß√£o&lt;/h2&gt; &#xA;&lt;p&gt;A linguagem ter√° que rodar com base em algum arquivo, que √© o JSON da AST da rinha especificado &lt;a href=&#34;https://github.com/aripiprazole/rinha-de-compiler/raw/main/SPECS.md&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;O arquivo ter√° que ser lido de &lt;code&gt;/var/rinha/source.rinha.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Poder√° tamb√©m ser lido de &lt;code&gt;/var/rinha/source.rinha&lt;/code&gt;, se voc√™ quiser ler a AST na m√£o.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A linguagem √© uma linguagem de programa√ß√£o din√¢mica, como JavaScript, Ruby, etc.&lt;/p&gt; &#xA;&lt;p&gt;O projeto da rinha de compilador, tem um &#34;interpretador&#34; do json, que retorna um AST, e o c√≥digo ter√° que ser testado de diferentes formas, como outros algor√≠timos al√©m de Fibonacci.&lt;/p&gt; &#xA;&lt;h2&gt;Exemplo&lt;/h2&gt; &#xA;&lt;p&gt;Exemplo com fibonacci&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let fib = fn (n) =&amp;gt; {&#xA;  if (n &amp;lt; 2) {&#xA;    n&#xA;  } else {&#xA;    fib(n - 1) + fib(n - 2)&#xA;  }&#xA;};&#xA;&#xA;print(&#34;fib: &#34; + fib(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Competi√ß√£o&lt;/h1&gt; &#xA;&lt;p&gt;O prazo para mandar os PRs, √© at√© o dia 23/09, depois disso ser√£o negados o projeto.&lt;/p&gt; &#xA;&lt;p&gt;Ser√° liberado para ajustes at√© o dia 25/09, voc√™ poder√° arrumar sua implementa√ß√£o, depois da publica√ß√£o dos testes.&lt;/p&gt; &#xA;&lt;h2&gt;Recursos&lt;/h2&gt; &#xA;&lt;p&gt;Alguns recursos √∫teis para aprender como fazer seu pr√≥prio interpretador ou compilador s√£o:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=t77ThZNCJGY&#34;&gt;https://www.youtube.com/watch?v=t77ThZNCJGY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LCslqgM48D4&#34;&gt;https://www.youtube.com/watch?v=LCslqgM48D4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruslanspivak.com/lsbasi-part1/&#34;&gt;https://ruslanspivak.com/lsbasi-part1/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLjcmNukBom6--0we1zrpoUE2GuRD-Me6W&#34;&gt;https://www.youtube.com/playlist?list=PLjcmNukBom6--0we1zrpoUE2GuRD-Me6W&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.plai.org/&#34;&gt;https://www.plai.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fique ligado que alguns v√≠deos e posts √∫teis chegar√£o em breve.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eza-community/eza</title>
    <updated>2023-09-17T01:58:32Z</updated>
    <id>tag:github.com,2023-09-17:/eza-community/eza</id>
    <link href="https://github.com/eza-community/eza" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern, maintained replacement for ls&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;eza&lt;/h1&gt; &#xA; &lt;p&gt;eza is a modern, maintained replacement for ls, built on &lt;a href=&#34;https://github.com/ogham/exa&#34;&gt;exa&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;README Sections:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/#options&#34;&gt;Options&lt;/a&gt; ‚Äî &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/#installation&#34;&gt;Installation&lt;/a&gt; ‚Äî &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://nixos.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Built_With-Nix-5277C3.svg?logo=nixos&amp;amp;labelColor=73C3D5&#34; alt=&#34;Built with Nix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#eza-community:gitter.im&#34;&gt;&lt;img alt=&#34;Gitter&#34; src=&#34;https://img.shields.io/gitter/room/eza-community/eza?logo=element&amp;amp;link=https%3A%2F%2Fapp.gitter.im%2F%23%2Froom%2F%23eza%3Agitter.im&amp;amp;link=Gitter%20matrix%20room%20for%20Eza&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/eza-community/eza/actions/workflows/unit-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/eza-community/eza/actions/workflows/unit-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit tests&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/crates/v/eza?link=https%3A%2F%2Fcrates.io%2Fcrates%2Feza&#34; alt=&#34;Crates.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/l/eza?link=https%3A%2F%2Fgithub.com%2Feza-community%2Feza%2Fblob%2Fmain%2FLICENCE&#34; alt=&#34;Crates.io&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eza-community/eza/main/screenshots.png&#34; alt=&#34;Screenshots of eza&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;eza&lt;/strong&gt; is a modern, maintained replacement for the venerable file-listing command-line program &lt;code&gt;ls&lt;/code&gt; that ships with Unix and Linux operating systems, giving it more features and better defaults. It uses colours to distinguish file types and metadata. It knows about symlinks, extended attributes, and Git. And it‚Äôs &lt;strong&gt;small&lt;/strong&gt;, &lt;strong&gt;fast&lt;/strong&gt;, and just &lt;strong&gt;one single binary&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By deliberately making some decisions differently, eza attempts to be a more featureful, more user-friendly version of &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;eza&lt;/strong&gt; features not in exa (non-exhaustive):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixes &lt;a href=&#34;https://github.com/eza-community/eza/issues/66#issuecomment-1656758327&#34;&gt;‚ÄúThe Grid Bug‚Äù&lt;/a&gt; introduced in exa 2021.&lt;/li&gt; &#xA; &lt;li&gt;Hyperlink support.&lt;/li&gt; &#xA; &lt;li&gt;Mount point details.&lt;/li&gt; &#xA; &lt;li&gt;Selinux context output.&lt;/li&gt; &#xA; &lt;li&gt;Git repo status output.&lt;/li&gt; &#xA; &lt;li&gt;Human readable relative dates.&lt;/li&gt; &#xA; &lt;li&gt;Several security fixes.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;bright&lt;/code&gt; terminal colours.&lt;/li&gt; &#xA; &lt;li&gt;Many smaller bug fixes/changes!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;a id=&#34;try-it&#34;&gt; &lt;h1&gt;Try it!&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Nix ‚ùÑÔ∏è&lt;/h3&gt; &#xA;&lt;p&gt;If you already have Nix setup with flake support, you can try out eza with the &lt;code&gt;nix run&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix run github:eza-community/eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nix will build eza and run it.&lt;/p&gt; &#xA;&lt;p&gt;If you want to pass arguments this way, use e.g. &lt;code&gt;nix run github:eza-community/eza -- -ol&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;a id=&#34;installation&#34;&gt; &lt;h1&gt;Installation&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p&gt;eza is available for Windows, macOS and Linux.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo (crates.io)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/crates/v/eza?link=https%3A%2F%2Fcrates.io%2Fcrates%2Feza&#34; alt=&#34;Crates.io&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you already have a Rust environment set up, you can use the &lt;code&gt;cargo install&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cargo will build the &lt;code&gt;eza&lt;/code&gt; binary and place it in &lt;code&gt;$HOME/.local/share/cargo/bin/eza&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo (git)&lt;/h3&gt; &#xA;&lt;p&gt;If you already have a Rust environment set up, you can use the &lt;code&gt;cargo install&lt;/code&gt; command in your local clone of the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/eza-community/eza.git&#xA;cd eza&#xA;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cargo will build the &lt;code&gt;eza&lt;/code&gt; binary and place it in &lt;code&gt;$HOME/.cargo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/arch/eza.svg?sanitize=true&#34; alt=&#34;Arch Linux package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available in the &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/eza/&#34;&gt;[extra]&lt;/a&gt; repository of Arch Linux.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Eza is available from &lt;a href=&#34;http://deb.gierens.de&#34;&gt;deb.gierens.de&lt;/a&gt;. The GPG public key is in this repo under &lt;a href=&#34;https://raw.githubusercontent.com/eza-community/eza/main/deb.asc&#34;&gt;deb.asc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install eza from this repo use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo tee /etc/apt/trusted.gpg.d/gierens.asc&#xA;echo &#34;deb http://deb.gierens.de stable main&#34; | sudo tee /etc/apt/sources.list.d/gierens.list&#xA;sudo apt update&#xA;sudo apt install -y eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; on some systems like Docker containers apt might require the key to be in dearmored format, then use this command instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/gierens.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;before proceeding with the others from above.&lt;/p&gt; &#xA;&lt;h3&gt;Nix (Linux, MacOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/nix_unstable/eza.svg?sanitize=true&#34; alt=&#34;nixpkgs unstable package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available from &lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;Nixpkgs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;nix profile&lt;/code&gt; users:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix profile install nixpkgs#eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;nix-env&lt;/code&gt; users:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-env -i eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gentoo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/gentoo/eza.svg?sanitize=true&#34; alt=&#34;Gentoo package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo, eza is available as a package &lt;a href=&#34;https://packages.gentoo.org/packages/sys-apps/eza&#34;&gt;&lt;code&gt;sys-apps/eza&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;emerge --ask sys-apps/eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;openSUSE&lt;/h3&gt; &#xA;&lt;p&gt;Eza is available at &lt;a href=&#34;https://build.opensuse.org/package/show/openSUSE:Factory/eza&#34;&gt;openSUSE:Factory/eza&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zypper ar https://download.opensuse.org/tumbleweed/repo/oss/ factory-oss&#xA;zypper in eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The preceding repository also contains the Bash, Fish, and Zsh completions.&lt;/p&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;p&gt;Fedora support is in the works.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=2238264&#34;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=2238264&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Brew (MacOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/homebrew/eza.svg?sanitize=true&#34; alt=&#34;Homebrew package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available from &lt;a href=&#34;https://formulae.brew.sh/formula/eza#default&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install eza, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacPorts (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/macports/eza.svg?sanitize=true&#34; alt=&#34;MacPorts port&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On macOS, eza is also available via &lt;a href=&#34;https://ports.macports.org/port/eza/&#34;&gt;MacPorts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install eza, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo port install eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Winget (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/winget/eza.svg?sanitize=true&#34; alt=&#34;Windows package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available on Winget.&lt;/p&gt; &#xA;&lt;p&gt;To install eza, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;winget install eza-community.eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/eza/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/scoop/eza.svg?sanitize=true&#34; alt=&#34;Windows package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eza is available from &lt;a href=&#34;https://scoop.sh/#/apps?q=eza&amp;amp;id=a52070d25f94bbcc884f80bef53eb47ed1268198&#34;&gt;Scoop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install eza, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop install eza&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;h4&gt;For zsh:&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Change &lt;code&gt;~/.zshrc&lt;/code&gt; to your preferred zsh config file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Clone the repository:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/eza-community/eza.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add the completion path to your zsh configuration:&lt;/h5&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;path_to_eza&amp;gt;&lt;/code&gt; with the actual path where you cloned the &lt;code&gt;eza&lt;/code&gt; repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;export FPATH=&#34;&amp;lt;path_to_eza&amp;gt;/completions/zsh:$FPATH&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reload your zsh configuration:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Click sections to expand.&lt;/p&gt; &#xA;&lt;a id=&#34;options&#34;&gt; &lt;/a&gt;&#xA;&lt;details&gt;&#xA; &lt;a id=&#34;options&#34;&gt; &lt;summary&gt; Command-line options &lt;/summary&gt; &lt;h1&gt;Command-line options&lt;/h1&gt; &lt;/a&gt; &#xA; &lt;p&gt;eza‚Äôs options are almost, but not quite, entirely unlike &lt;code&gt;ls&lt;/code&gt;‚Äôs.&lt;/p&gt; &#xA; &lt;h3&gt;Display options&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-1&lt;/strong&gt;, &lt;strong&gt;--oneline&lt;/strong&gt;: display one entry per line&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-G&lt;/strong&gt;, &lt;strong&gt;--grid&lt;/strong&gt;: display entries as a grid (default)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-l&lt;/strong&gt;, &lt;strong&gt;--long&lt;/strong&gt;: display extended details and attributes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-R&lt;/strong&gt;, &lt;strong&gt;--recurse&lt;/strong&gt;: recurse into directories&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-T&lt;/strong&gt;, &lt;strong&gt;--tree&lt;/strong&gt;: recurse into directories as a tree&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-x&lt;/strong&gt;, &lt;strong&gt;--across&lt;/strong&gt;: sort the grid across, rather than downwards&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-F&lt;/strong&gt;, &lt;strong&gt;--classify&lt;/strong&gt;: display type indicator by file names&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--colo[u]r&lt;/strong&gt;: when to use terminal colours&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--colo[u]r-scale&lt;/strong&gt;: highlight levels of file sizes distinctly&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--icons&lt;/strong&gt;: display icons&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-icons&lt;/strong&gt;: don&#39;t display icons (always overrides --icons)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--hyperlink&lt;/strong&gt;: display entries as hyperlinks&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-w&lt;/strong&gt;, &lt;strong&gt;--width=(columns)&lt;/strong&gt;: set screen width in columns&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Filtering options&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-a&lt;/strong&gt;, &lt;strong&gt;--all&lt;/strong&gt;: show hidden and &#39;dot&#39; files&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-d&lt;/strong&gt;, &lt;strong&gt;--list-dirs&lt;/strong&gt;: list directories like regular files&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-L&lt;/strong&gt;, &lt;strong&gt;--level=(depth)&lt;/strong&gt;: limit the depth of recursion&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-r&lt;/strong&gt;, &lt;strong&gt;--reverse&lt;/strong&gt;: reverse the sort order&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-s&lt;/strong&gt;, &lt;strong&gt;--sort=(field)&lt;/strong&gt;: which field to sort by&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--group-directories-first&lt;/strong&gt;: list directories before other files&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-D&lt;/strong&gt;, &lt;strong&gt;--only-dirs&lt;/strong&gt;: list only directories&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--git-ignore&lt;/strong&gt;: ignore files mentioned in &lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-I&lt;/strong&gt;, &lt;strong&gt;--ignore-glob=(globs)&lt;/strong&gt;: glob patterns (pipe-separated) of files to ignore&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Pass the &lt;code&gt;--all&lt;/code&gt; option twice to also show the &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; directories.&lt;/p&gt; &#xA; &lt;h3&gt;Long view options&lt;/h3&gt; &#xA; &lt;p&gt;These options are available when running with &lt;code&gt;--long&lt;/code&gt; (&lt;code&gt;-l&lt;/code&gt;):&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-b&lt;/strong&gt;, &lt;strong&gt;--binary&lt;/strong&gt;: list file sizes with binary prefixes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-B&lt;/strong&gt;, &lt;strong&gt;--bytes&lt;/strong&gt;: list file sizes in bytes, without any prefixes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-g&lt;/strong&gt;, &lt;strong&gt;--group&lt;/strong&gt;: list each file‚Äôs group&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-h&lt;/strong&gt;, &lt;strong&gt;--header&lt;/strong&gt;: add a header row to each column&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-H&lt;/strong&gt;, &lt;strong&gt;--links&lt;/strong&gt;: list each file‚Äôs number of hard links&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-i&lt;/strong&gt;, &lt;strong&gt;--inode&lt;/strong&gt;: list each file‚Äôs inode number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-m&lt;/strong&gt;, &lt;strong&gt;--modified&lt;/strong&gt;: use the modified timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-M&lt;/strong&gt;, &lt;strong&gt;--mounts&lt;/strong&gt;: Show mount details (Linux only).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-S&lt;/strong&gt;, &lt;strong&gt;--blocksize&lt;/strong&gt;: show size of allocated file system blocks&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt;, &lt;strong&gt;--time=(field)&lt;/strong&gt;: which timestamp field to use&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-u&lt;/strong&gt;, &lt;strong&gt;--accessed&lt;/strong&gt;: use the accessed timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-U&lt;/strong&gt;, &lt;strong&gt;--created&lt;/strong&gt;: use the created timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-X&lt;/strong&gt;, &lt;strong&gt;--dereference&lt;/strong&gt;: dereference symlinks for file information&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-Z&lt;/strong&gt;, &lt;strong&gt;--context&lt;/strong&gt;: list each file‚Äôs security context&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-@&lt;/strong&gt;, &lt;strong&gt;--extended&lt;/strong&gt;: list each file‚Äôs extended attributes and sizes&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--changed&lt;/strong&gt;: use the changed timestamp field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--git&lt;/strong&gt;: list each file‚Äôs Git status, if tracked or ignored&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-git&lt;/strong&gt;: suppress Git status (always overrides &lt;code&gt;--git&lt;/code&gt;, &lt;code&gt;--git-repos&lt;/code&gt;, &lt;code&gt;--git-repos-no-status&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--time-style&lt;/strong&gt;: how to format timestamps&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-permissions&lt;/strong&gt;: suppress the permissions field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;-o&lt;/strong&gt;, &lt;strong&gt;--octal-permissions&lt;/strong&gt;: list each file&#39;s permission in octal format&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-filesize&lt;/strong&gt;: suppress the filesize field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-user&lt;/strong&gt;: suppress the user field&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;--no-time&lt;/strong&gt;: suppress the time field&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Some of the options accept parameters:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Valid &lt;strong&gt;--color&lt;/strong&gt; options are &lt;strong&gt;always&lt;/strong&gt;, &lt;strong&gt;automatic&lt;/strong&gt;, and &lt;strong&gt;never&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Valid sort fields are &lt;strong&gt;accessed&lt;/strong&gt;, &lt;strong&gt;changed&lt;/strong&gt;, &lt;strong&gt;created&lt;/strong&gt;, &lt;strong&gt;extension&lt;/strong&gt;, &lt;strong&gt;Extension&lt;/strong&gt;, &lt;strong&gt;inode&lt;/strong&gt;, &lt;strong&gt;modified&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;Name&lt;/strong&gt;, &lt;strong&gt;size&lt;/strong&gt;, &lt;strong&gt;type&lt;/strong&gt;, and &lt;strong&gt;none&lt;/strong&gt;. Fields starting with a capital letter sort uppercase before lowercase. The modified field has the aliases &lt;strong&gt;date&lt;/strong&gt;, &lt;strong&gt;time&lt;/strong&gt;, and &lt;strong&gt;newest&lt;/strong&gt;, while its reverse has the aliases &lt;strong&gt;age&lt;/strong&gt; and &lt;strong&gt;oldest&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Valid time fields are &lt;strong&gt;modified&lt;/strong&gt;, &lt;strong&gt;changed&lt;/strong&gt;, &lt;strong&gt;accessed&lt;/strong&gt;, and &lt;strong&gt;created&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Valid time styles are &lt;strong&gt;default&lt;/strong&gt;, &lt;strong&gt;iso&lt;/strong&gt;, &lt;strong&gt;long-iso&lt;/strong&gt;, &lt;strong&gt;full-iso&lt;/strong&gt;, and &lt;strong&gt;relative&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;a id=&#34;development&#34;&gt; &lt;/a&gt;&#xA;&lt;details&gt;&#xA; &lt;a id=&#34;development&#34;&gt; &lt;summary&gt; Development &lt;/summary&gt; &lt;h1&gt;Development &lt;a href=&#34;https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/rustc-1.70.0+-lightgray.svg?sanitize=true&#34; alt=&#34;Rust 1.70.0&#34;&gt; &lt;/a&gt; &lt;/h1&gt;&lt;/a&gt; &#xA; &lt;p&gt;eza is written in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;. You will need rustc version 1.56.1 or higher. The recommended way to install Rust for development is from the &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;official download page&lt;/a&gt;, using rustup.&lt;/p&gt; &#xA; &lt;p&gt;Once Rust is installed, you can compile eza with Cargo:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo build&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt; command runner can be used to run some helpful development commands, in a manner similar to &lt;code&gt;make&lt;/code&gt;. Run &lt;code&gt;just --list&lt;/code&gt; to get an overview of what‚Äôs available.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;If you are compiling a copy for yourself, be sure to run &lt;code&gt;cargo build --release&lt;/code&gt; or &lt;code&gt;just build-release&lt;/code&gt; to benefit from release-mode optimisations. Copy the resulting binary, which will be in the &lt;code&gt;target/release&lt;/code&gt; directory, into a folder in your &lt;code&gt;$PATH&lt;/code&gt;. &lt;code&gt;/usr/local/bin&lt;/code&gt; is usually a good choice.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;To compile and install the manual pages, you will need &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt;. The &lt;code&gt;just man&lt;/code&gt; command will compile the Markdown into manual pages, which it will place in the &lt;code&gt;target/man&lt;/code&gt; directory. To use them, copy them into a directory that &lt;code&gt;man&lt;/code&gt; will read. &lt;code&gt;/usr/local/share/man&lt;/code&gt; is usually a good choice.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;eza depends on &lt;a href=&#34;https://github.com/rust-lang/git2-rs&#34;&gt;libgit2&lt;/a&gt; for certain features. If you‚Äôre unable to compile libgit2, you can opt out of Git support by running &lt;code&gt;cargo build --no-default-features&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;If you intend to compile for musl, you will need to use the flag &lt;code&gt;vendored-openssl&lt;/code&gt; if you want to get the Git feature working. The full command is &lt;code&gt;cargo build --release --target=x86_64-unknown-linux-musl --features vendored-openssl,git&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Developing on Nix (experimental) ‚ùÑÔ∏è&lt;/h3&gt; &#xA; &lt;p&gt;If you have a working Nix installation with flake support, you can use nix to manage your dev environment.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;nix develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The Nix Flake has a few features:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix flake check&lt;/code&gt; to run &lt;code&gt;treefmt&lt;/code&gt; on the repo.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix build&lt;/code&gt; and manually test &lt;code&gt;./results/bin/eza -- &amp;lt;arguments&amp;gt;&lt;/code&gt; for easy debugging.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix build .#test&lt;/code&gt; to run &lt;code&gt;cargo test&lt;/code&gt; via the flake.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;nix build .#clippy&lt;/code&gt; to lint with clippy (still work in progress).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;Star History&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://star-history.com/#eza-community/eza&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=eza-community/eza&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>sharkdp/hyperfine</title>
    <updated>2023-09-17T01:58:32Z</updated>
    <id>tag:github.com,2023-09-17:/sharkdp/hyperfine</id>
    <link href="https://github.com/sharkdp/hyperfine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A command-line benchmarking tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hyperfine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sharkdp/hyperfine/actions/workflows/CICD.yml&#34;&gt;&lt;img src=&#34;https://github.com/sharkdp/hyperfine/actions/workflows/CICD.yml/badge.svg?sanitize=true&#34; alt=&#34;CICD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/hyperfine&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/hyperfine.svg?sanitize=true&#34; alt=&#34;Version info&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/chinanf-boy/hyperfine-zh&#34;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A command-line benchmarking tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: Benchmarking &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/findutils/&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/z19OYxE.gif&#34; alt=&#34;hyperfine&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Statistical analysis across multiple runs.&lt;/li&gt; &#xA; &lt;li&gt;Support for arbitrary shell commands.&lt;/li&gt; &#xA; &lt;li&gt;Constant feedback about the benchmark progress and current estimates.&lt;/li&gt; &#xA; &lt;li&gt;Warmup runs can be executed before the actual benchmark.&lt;/li&gt; &#xA; &lt;li&gt;Cache-clearing commands can be set up before each timing run.&lt;/li&gt; &#xA; &lt;li&gt;Statistical outlier detection to detect interference from other programs and caching effects.&lt;/li&gt; &#xA; &lt;li&gt;Export results to various formats: CSV, JSON, Markdown, AsciiDoc.&lt;/li&gt; &#xA; &lt;li&gt;Parameterized benchmarks (e.g. vary the number of threads).&lt;/li&gt; &#xA; &lt;li&gt;Cross-platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;To run a benchmark, you can simply call &lt;code&gt;hyperfine &amp;lt;command&amp;gt;...&lt;/code&gt;. The argument(s) can be any shell command. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine &#39;sleep 0.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hyperfine will automatically determine the number of runs to perform for each command. By default, it will perform &lt;em&gt;at least&lt;/em&gt; 10 benchmarking runs and measure for at least 3 seconds. To change this, you can use the &lt;code&gt;-r&lt;/code&gt;/&lt;code&gt;--runs&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --runs 5 &#39;sleep 0.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compare the runtimes of different programs, you can pass multiple commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine &#39;hexdump file&#39; &#39;xxd file&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Warmup runs and preparation commands&lt;/h3&gt; &#xA;&lt;p&gt;For programs that perform a lot of disk I/O, the benchmarking results can be heavily influenced by disk caches and whether they are cold or warm.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run the benchmark on a warm cache, you can use the &lt;code&gt;-w&lt;/code&gt;/&lt;code&gt;--warmup&lt;/code&gt; option to perform a certain number of program executions before the actual benchmark:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --warmup 3 &#39;grep -R TODO *&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Conversely, if you want to run the benchmark for a cold cache, you can use the &lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--prepare&lt;/code&gt; option to run a special command before &lt;em&gt;each&lt;/em&gt; timing run. For example, to clear harddisk caches on Linux, you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sync; echo 3 | sudo tee /proc/sys/vm/drop_caches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this specific command with hyperfine, call &lt;code&gt;sudo -v&lt;/code&gt; to temporarily gain sudo permissions and then call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --prepare &#39;sync; echo 3 | sudo tee /proc/sys/vm/drop_caches&#39; &#39;grep -R TODO *&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameterized benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run a series of benchmarks where a single parameter is varied (say, the number of threads), you can use the &lt;code&gt;-P&lt;/code&gt;/&lt;code&gt;--parameter-scan&lt;/code&gt; option and call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --prepare &#39;make clean&#39; --parameter-scan num_threads 1 12 &#39;make -j {num_threads}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works with decimal numbers. The &lt;code&gt;-D&lt;/code&gt;/&lt;code&gt;--parameter-step-size&lt;/code&gt; option can be used to control the step size:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --parameter-scan delay 0.3 0.7 -D 0.2 &#39;sleep {delay}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs &lt;code&gt;sleep 0.3&lt;/code&gt;, &lt;code&gt;sleep 0.5&lt;/code&gt; and &lt;code&gt;sleep 0.7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For non-numeric parameters, you can also supply a list of values with the &lt;code&gt;-L&lt;/code&gt;/&lt;code&gt;--parameter-list&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hyperfine -L compiler gcc,clang &#39;{compiler} -O2 main.cpp&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Intermediate shell&lt;/h3&gt; &#xA;&lt;p&gt;By default, commands are executed using a predefined shell (&lt;code&gt;/bin/sh&lt;/code&gt; on Unix, &lt;code&gt;cmd.exe&lt;/code&gt; on Windows). If you want to use a different shell, you can use the &lt;code&gt;-S, --shell &amp;lt;SHELL&amp;gt;&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine --shell zsh &#39;for i in {1..10000}; do echo test; done&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that hyperfine always &lt;em&gt;corrects for the shell spawning time&lt;/em&gt;. To do this, it performs a calibration procedure where it runs the shell with an empty command (multiple times), to measure the startup time of the shell. It will then subtract this time from the total to show the actual time used by the command in question.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run a benchmark &lt;em&gt;without an intermediate shell&lt;/em&gt;, you can use the &lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--shell=none&lt;/code&gt; option. This is helpful for very fast commands (&amp;lt; 5 ms) where the shell startup overhead correction would produce a significant amount of noise. Note that you cannot use shell syntax like &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt; in this case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hyperfine -N &#39;grep TODO /home/user&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell functions and aliases&lt;/h3&gt; &#xA;&lt;p&gt;If you are using bash, you can export shell functions to directly benchmark them with hyperfine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;my_function() { sleep 1; }&#xA;export -f my_function&#xA;hyperfine --shell=bash my_function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, inline them into or source them from the benchmarked program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hyperfine &#39;my_function() { sleep 1; }; my_function&#39;&#xA;&#xA;echo &#39;alias my_alias=&#34;sleep 1&#34;&#39; &amp;gt; /tmp/my_alias.sh&#xA;hyperfine &#39;. /tmp/my_alias.sh; my_alias&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exporting results&lt;/h3&gt; &#xA;&lt;p&gt;Hyperfine has multiple options for exporting benchmark results to CSV, JSON, Markdown and other formats (see &lt;code&gt;--help&lt;/code&gt; text for details).&lt;/p&gt; &#xA;&lt;h4&gt;Markdown&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;--export-markdown &amp;lt;file&amp;gt;&lt;/code&gt; option to create tables like the following:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean [s]&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Min [s]&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Max [s]&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Relative&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;find . -iregex &#39;.*[0-9]\.jpg$&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.275 ¬± 0.046&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.243&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.397&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9.79 ¬± 0.22&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;find . -iname &#39;*[0-9].jpg&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.427 ¬± 0.026&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.405&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.468&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.14 ¬± 0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fd -HI &#39;.*[0-9]\.jpg$&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.232 ¬± 0.002&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.230&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.236&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;JSON&lt;/h4&gt; &#xA;&lt;p&gt;The JSON output is useful if you want to analyze the benchmark results in more detail. The &lt;a href=&#34;https://github.com/sharkdp/hyperfine/tree/master/scripts&#34;&gt;&lt;code&gt;scripts/&lt;/code&gt;&lt;/a&gt; folder includes a lot of helpful Python programs to further analyze benchmark results and create helpful visualizations, like a histogram of runtimes or a whisker plot to compare multiple benchmarks:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/hyperfine/master/doc/histogram.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/hyperfine/master/doc/whisker.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Detailed benchmark flowchart&lt;/h3&gt; &#xA;&lt;p&gt;The following chart explains the execution order of various timing runs when using options like &lt;code&gt;--warmup&lt;/code&gt;, &lt;code&gt;--prepare &amp;lt;cmd&amp;gt;&lt;/code&gt;, &lt;code&gt;--setup &amp;lt;cmd&amp;gt;&lt;/code&gt; or &lt;code&gt;--cleanup &amp;lt;cmd&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/hyperfine/master/doc/execution-order.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/hyperfine/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/hyperfine.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Download the appropriate &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href=&#34;https://github.com/sharkdp/hyperfine/releases&#34;&gt;Release page&lt;/a&gt; and install it via &lt;code&gt;dpkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/sharkdp/hyperfine/releases/download/v1.16.1/hyperfine_1.16.1_amd64.deb&#xA;sudo dpkg -i hyperfine_1.16.1_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Fedora&lt;/h3&gt; &#xA;&lt;p&gt;On Fedora, hyperfine can be installed from the official repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dnf install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Alpine Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Alpine Linux, hyperfine can be installed &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=hyperfine&#34;&gt;from the official repositories&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apk add hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Arch Linux, hyperfine can be installed &lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/hyperfine/&#34;&gt;from the official repositories&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Debian Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Debian Linux, hyperfine can be installed &lt;a href=&#34;https://packages.debian.org/testing/main/hyperfine&#34;&gt;from the testing repositories&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Funtoo Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Funtoo Linux, hyperfine can be installed &lt;a href=&#34;https://github.com/funtoo/core-kit/tree/1.4-release/app-benchmarks/hyperfine&#34;&gt;from core-kit&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge app-benchmarks/hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On NixOS&lt;/h3&gt; &#xA;&lt;p&gt;On NixOS, hyperfine can be installed &lt;a href=&#34;https://nixos.org/nixos/packages.html?query=hyperfine&#34;&gt;from the official repositories&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-env -i hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Void Linux&lt;/h3&gt; &#xA;&lt;p&gt;Hyperfine can be installed via xbps&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xbps-install -S hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On macOS&lt;/h3&gt; &#xA;&lt;p&gt;Hyperfine can be installed via &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can install using &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port selfupdate&#xA;sudo port install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;Hyperfine can be installed via pkg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On OpenBSD&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;doas pkg_add hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;p&gt;Hyperfine can be installed via &lt;a href=&#34;https://community.chocolatey.org/packages/hyperfine&#34;&gt;Chocolatey&lt;/a&gt;, &lt;a href=&#34;https://scoop.sh/#/apps?q=hyperfine&amp;amp;s=0&amp;amp;d=1&amp;amp;o=true&amp;amp;id=8f7c10f75ecf5f9e42a862c615257328e2f70f61&#34;&gt;Scoop&lt;/a&gt;, or &lt;a href=&#34;https://github.com/microsoft/winget-pkgs/tree/master/manifests/s/sharkdp/hyperfine&#34;&gt;Winget&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With conda&lt;/h3&gt; &#xA;&lt;p&gt;Hyperfine can be installed via &lt;a href=&#34;https://conda.io/en/latest/&#34;&gt;&lt;code&gt;conda&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&#34;https://anaconda.org/conda-forge/hyperfine&#34;&gt;&lt;code&gt;conda-forge&lt;/code&gt;&lt;/a&gt; channel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With cargo (Linux, macOS, Windows)&lt;/h3&gt; &#xA;&lt;p&gt;Hyperfine can be installed from source via &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;cargo&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --locked hyperfine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that you use Rust 1.60 or higher.&lt;/p&gt; &#xA;&lt;h3&gt;From binaries (Linux, macOS, Windows)&lt;/h3&gt; &#xA;&lt;p&gt;Download the corresponding archive from the &lt;a href=&#34;https://github.com/sharkdp/hyperfine/releases&#34;&gt;Release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternative tools&lt;/h2&gt; &#xA;&lt;p&gt;Hyperfine is inspired by &lt;a href=&#34;https://github.com/Gabriella439/bench&#34;&gt;bench&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integration with other tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dandavison/chronologer&#34;&gt;Chronologer&lt;/a&gt; is a tool that uses &lt;code&gt;hyperfine&lt;/code&gt; to visualize changes in benchmark timings across your Git history.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to check out the &lt;a href=&#34;https://github.com/sharkdp/hyperfine/tree/master/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt; folder&lt;/a&gt; in this repository for a set of tools to work with &lt;code&gt;hyperfine&lt;/code&gt; benchmark results.&lt;/p&gt; &#xA;&lt;h2&gt;Origin of the name&lt;/h2&gt; &#xA;&lt;p&gt;The name &lt;em&gt;hyperfine&lt;/em&gt; was chosen in reference to the hyperfine levels of caesium 133 which play a crucial role in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Second#History_of_definition&#34;&gt;definition of our base unit of time&lt;/a&gt; ‚Äî the second.&lt;/p&gt; &#xA;&lt;h2&gt;Citing hyperfine&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering to cite hyperfine in your research work. Please see the information in the sidebar on how to properly cite hyperfine.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;hyperfine&lt;/code&gt; is dual-licensed under the terms of the MIT License and the Apache License 2.0.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/hyperfine/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/hyperfine/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; files for details.&lt;/p&gt;</summary>
  </entry>
</feed>