<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-27T01:42:51Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gosub-io/gosub-engine</title>
    <updated>2024-10-27T01:42:51Z</updated>
    <id>tag:github.com,2024-10-27:/gosub-io/gosub-engine</id>
    <link href="https://github.com/gosub-io/gosub-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Our main browser engine repository.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gosub: Gateway to Optimized Searching and Unlimited Browsing&lt;/h1&gt; &#xA;&lt;p&gt;This repository holds the Gosub browser engine. It will become a standalone library that can be used by other projects but will ultimately be used by the Gosub browser user-agent. See the &lt;a href=&#34;https://raw.githubusercontent.com/gosub-io/gosub-engine/main/#about&#34;&gt;About&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;p&gt;Join us at our development &lt;a href=&#34;https://chat.developer.gosub.io&#34;&gt;Zulip chat&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;For more general information you can also join our &lt;a href=&#34;https://chat.gosub.io&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in contributing to Gosub, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/gosub-io/gosub-engine/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This repository is part of the Gosub browser engine project. This is the main engine that holds the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTML5 tokenizer / parser&lt;/li&gt; &#xA; &lt;li&gt;CSS3 tokenizer / parser&lt;/li&gt; &#xA; &lt;li&gt;Document tree&lt;/li&gt; &#xA; &lt;li&gt;Several APIs for connecting to javascript&lt;/li&gt; &#xA; &lt;li&gt;Configuration store&lt;/li&gt; &#xA; &lt;li&gt;Networking stack&lt;/li&gt; &#xA; &lt;li&gt;Rendering engine&lt;/li&gt; &#xA; &lt;li&gt;JS bridge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More will follow as the engine grows. The idea is that this engine will receive some kind of stream of bytes (most likely from a socket or file) and parse this into a valid HTML5 document tree and CSS stylesheets. From that point, it can be fed to a renderer engine that will render the document tree into a window, or it can be fed to a more simplistic engine that will render it in a terminal. JS can be executed on the document tree and the document tree can be modified by JS.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This project is in its infancy. There is no usable browser yet. However, you can look at simple html pages and parse them into a document tree and do some initial rendering.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We can parse HTML5 and CSS3 files into a document tree or the respective css tree. This tree can be shown in the terminal or be rendered in a very unfinished renderer. Our renderer cannot render everything yet, but it can render simple html pages, sort of.&lt;/p&gt; &#xA;&lt;p&gt;We already implemented other parts of the engine, for a JS engine, networking stack, a configuration store and other things however these aren&#39;t integrated yet. You can try these out by running the respective binary.&lt;/p&gt; &#xA;&lt;p&gt;We can render a part for our own &lt;a href=&#34;https://gosub.io&#34;&gt;site&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosub-io/gosub-engine/main/resources/images/current_progress.png&#34; alt=&#34;Gosub.io&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Installing dependencies &lt;/summary&gt; &#xA; &lt;p&gt;This project uses &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;cargo&lt;/a&gt; and &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;rustup&lt;/a&gt;. First you must install &lt;code&gt;rustup&lt;/code&gt; at the link provided. After installing &lt;code&gt;rustup&lt;/code&gt;, run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustup toolchain install 1.73&#xA;$ rustc --version&#xA;rustc 1.73.0 (cc66ad468 2023-10-03)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Once Rust is installed, run this command to pre-build the dependencies:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can run the following binaries:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin config-store&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;A simple test application of the config store for testing purposes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin css3-parser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;Show the parsed css tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin display-text-tree&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;A simple parser that will try and return a textual presentation of the website&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin gosub-parser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;The actual html5 parser/tokenizer that allows you to convert html5 into a document tree.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin html5-parser-test&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;test&lt;/td&gt; &#xA;   &lt;td&gt;A test suite that tests all html5lib tests for the treebuilding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin parser-test&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;test&lt;/td&gt; &#xA;   &lt;td&gt;A test suite for the parser that tests specific tests. This will be removed as soon as the parser is completely finished as this tool is for developement only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin renderer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;Render a html page (WIP)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo run -r --bin run-js&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;Run a JS file (Note: console and event loop are not yet implemented)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For running the binaries, take a look at a quick introduction at &lt;a href=&#34;https://raw.githubusercontent.com/gosub-io/gosub-engine/main/docs/binaries.md&#34;&gt;/docs/binaries.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark and test suites&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests and benchmark suite, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;cargo bench&#xA;ls target/criterion/report&#xA;index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wasm&lt;/h2&gt; &#xA;&lt;p&gt;Our engine can also be compiled to WebAssembly. You need to use WasmPack for this. To build the Wasm version, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wasm-pack build --target web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards you need to serve the small useragent around the wasm version in the &lt;code&gt;wasm/&lt;/code&gt; directory. You can do this by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd wasm&#xA;npm run dev  # you can also use `bun run dev`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this demo, you need to enable webgpu in chromium and disable the same origin policy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chromium --disable-web-security --enable-features=Vulkan --enable-unsafe-webgpu --user-data-dir=/tmp/chromium-temp-profile &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command works on Linux only, if someone uses Windows or macOS, please open an PR!&lt;/p&gt; &#xA;&lt;p&gt;And then you have it! A browser in a browser:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosub-io/gosub-engine/main/resources/images/browser-wasm-hackernews.png&#34; alt=&#34;Browser in browser&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to the project&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to this project but the current status makes that we are spending a lot of time researching, building small proof-of-concepts and figuring out what needs to be done next. Much time of a contributor at this stage of the project will be non-coding.&lt;/p&gt; &#xA;&lt;p&gt;We do like to hear from you if you are interested in contributing to the project and you can join us currently at our &lt;a href=&#34;https://chat.developer.gosub.io&#34;&gt;Zulip chat&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/openvmm</title>
    <updated>2024-10-27T01:42:51Z</updated>
    <id>tag:github.com,2024-10-27:/microsoft/openvmm</id>
    <link href="https://github.com/microsoft/openvmm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home of OpenVMM and OpenHCL.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenVMM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/openvmm/actions/workflows/openvmm-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/openvmm/actions/workflows/openvmm-ci.yaml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenVMM is a modular, cross-platform Virtual Machine Monitor (VMM), written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;Although it can function as a traditional VMM, OpenVMM&#39;s development is currently focused on its role in the OpenHCL paravisor.&lt;/p&gt; &#xA;&lt;p&gt;This repo is the home for both projects.&lt;/p&gt; &#xA;&lt;p&gt;For more information, read our &lt;a href=&#34;https://openvmm.dev/&#34;&gt;guide&lt;/a&gt; or our &lt;a href=&#34;https://techcommunity.microsoft.com/t5/windows-os-platform-blog/openhcl-the-new-open-source-paravisor/ba-p/4273172&#34;&gt;introductory blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For info on how to run, build, and use OpenVMM, check out the &lt;a href=&#34;https://aka.ms/openvmmguide&#34;&gt;The OpenVMM Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The guide is published out of this repo via &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/openvmm/main/Guide/src/SUMMARY.md&#34;&gt;Markdown files&lt;/a&gt;. Please keep them up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>asterinas/asterinas</title>
    <updated>2024-10-27T01:42:51Z</updated>
    <id>tag:github.com,2024-10-27:/asterinas/asterinas</id>
    <link href="https://github.com/asterinas/asterinas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asterinas is a secure, fast, and general-purpose OS kernel, written in Rust and providing Linux-compatible ABI.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/asterinas/asterinas/main/docs/src/images/logo_en.svg?sanitize=true&#34; alt=&#34;asterinas-logo&#34; width=&#34;620&#34;&gt;&lt;br&gt; A secure, fast, and general-purpose OS kernel written in Rust and compatible with Linux&lt;br&gt; &lt;a href=&#34;https://github.com/asterinas/asterinas/actions/workflows/test_osdk.yml&#34;&gt;&lt;img src=&#34;https://github.com/asterinas/asterinas/actions/workflows/test_osdk.yml/badge.svg?event=push&#34; alt=&#34;Test OSDK&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/asterinas/asterinas/actions/workflows/test_asterinas.yml&#34;&gt;&lt;img src=&#34;https://github.com/asterinas/asterinas/actions/workflows/test_asterinas.yml/badge.svg?event=push&#34; alt=&#34;Test Asterinas&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://asterinas.github.io/benchmark/&#34;&gt;&lt;img src=&#34;https://github.com/asterinas/asterinas/actions/workflows/benchmark_asterinas.yml/badge.svg?sanitize=true&#34; alt=&#34;Benchmark Asterinas&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/asterinas/asterinas/main/README_CN.md&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introducing Asterinas&lt;/h2&gt; &#xA;&lt;p&gt;Asterinas is a &lt;em&gt;secure&lt;/em&gt;, &lt;em&gt;fast&lt;/em&gt;, and &lt;em&gt;general-purpose&lt;/em&gt; OS kernel that provides &lt;em&gt;Linux-compatible&lt;/em&gt; ABI. It can serve as a seamless replacement for Linux while enhancing &lt;em&gt;memory safety&lt;/em&gt; and &lt;em&gt;developer friendliness&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Asterinas prioritizes memory safety by employing Rust as its sole programming language and limiting the use of &lt;em&gt;unsafe Rust&lt;/em&gt; to a clearly defined and minimal Trusted Computing Base (TCB). This innovative approach, known as &lt;a href=&#34;https://asterinas.github.io/book/kernel/the-framekernel-architecture.html&#34;&gt;the framekernel architecture&lt;/a&gt;, establishes Asterinas as a more secure and dependable kernel option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Asterinas surpasses Linux in terms of developer friendliness. It empowers kernel developers to (1) utilize the more productive Rust programming language, (2) leverage a purpose-built toolkit called &lt;a href=&#34;https://asterinas.github.io/book/osdk/guide/index.html&#34;&gt;OSDK&lt;/a&gt; to streamline their workflows, and (3) choose between releasing their kernel modules as open source or keeping them proprietary, thanks to the flexibility offered by &lt;a href=&#34;https://raw.githubusercontent.com/asterinas/asterinas/main/#License&#34;&gt;MPL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While the journey towards a production-grade OS kernel can be challenging, we are steadfastly progressing towards our goal. Currently, Asterinas only supports x86-64 VMs. However, &lt;a href=&#34;https://asterinas.github.io/book/kernel/roadmap.html&#34;&gt;our aim for 2024&lt;/a&gt; is to make Asterinas production-ready on x86-64 VMs.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Get yourself an x86-64 Linux machine with Docker installed. Follow the three simple steps below to get Asterinas up and running.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest source code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/asterinas/asterinas&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run a Docker container as the development environment.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --privileged --network=host --device=/dev/kvm -v $(pwd)/asterinas:/root/asterinas asterinas/asterinas:0.9.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Inside the container, go to the project folder to build and run Asterinas.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make build&#xA;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything goes well, Asterinas is now up and running inside a VM.&lt;/p&gt; &#xA;&lt;h2&gt;The Book&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://asterinas.github.io/book/&#34;&gt;The Asterinas Book&lt;/a&gt; to learn more about the project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Asterinas&#39;s source code and documentation primarily use the &lt;a href=&#34;https://github.com/asterinas/asterinas/raw/main/LICENSE-MPL&#34;&gt;Mozilla Public License (MPL), Version 2.0&lt;/a&gt;. Select components are under more permissive licenses, detailed &lt;a href=&#34;https://github.com/asterinas/asterinas/raw/main/.licenserc.yaml&#34;&gt;here&lt;/a&gt;. For the rationales behind the choice of MPL, see &lt;a href=&#34;https://asterinas.github.io/book/index.html#licensing&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>