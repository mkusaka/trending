<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-26T01:50:11Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>piotrostr/listen</title>
    <updated>2025-01-26T01:50:11Z</updated>
    <id>tag:github.com,2025-01-26:/piotrostr/listen</id>
    <link href="https://github.com/piotrostr/listen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solana Swiss Army Knife&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/piotrostr/listen/main/frontend/public/listen-more.png&#34; width=&#34;35%&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.listen-rs.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-API-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/piotrostr/listen&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/piotrostr/listen?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/built_with-Rust-dca282.svg?logo=rust&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;code&gt;listen&lt;/code&gt; is a Solana Swiss-Knife toolkit for algorithmic trading &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîç Real-time transaction monitoring&lt;/li&gt; &#xA; &lt;li&gt;üí± Multi-DEX swap execution (Pump.fun, Jupiter V6 API or Raydium)&lt;/li&gt; &#xA; &lt;li&gt;üöÄ Blazingly fast transactions thanks to Jito MEV bundles&lt;/li&gt; &#xA; &lt;li&gt;üìä Price tracking and metrics&lt;/li&gt; &#xA; &lt;li&gt;üß∞ Token management utilities&lt;/li&gt; &#xA; &lt;li&gt;üìà Performance monitoring with Prometheus integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more!&lt;/p&gt; &#xA;&lt;p&gt;It works plug&#39;n&#39;play with &lt;a href=&#34;https://github.com/0xPlaygrounds/rig&#34;&gt;$arc rig framework&lt;/a&gt; framework allowing AI Agents interact with the Solana blockchain, see example: &lt;a href=&#34;https://github.com/piotrostr/listen/raw/main/src/agent.rs&#34;&gt;src/agent.rs&lt;/a&gt; and the output &lt;a href=&#34;https://github.com/piotrostr/listen/raw/main/example.png&#34;&gt;image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For complete rundown of features, check out the CLI output of &lt;code&gt;cargo run&lt;/code&gt; or the &lt;a href=&#34;https://docs.listen-rs.com/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To play around with listen-rs, you can use the UI&lt;/p&gt; &#xA;&lt;p&gt;Fill in the &lt;code&gt;.env.example&lt;/code&gt; and &lt;code&gt;./dashboard/.env.example&lt;/code&gt;, copy over to &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;./dashboard/.env.example&lt;/code&gt;, then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then access the dashboard over &lt;code&gt;http://localhost:4173&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] listen-rs is undergoing rapid iterations, some things might not work and there could be breaking changes&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;System Dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rust (with nightly toolchain)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build-essential&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;libssl-dev&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Set up &lt;code&gt;auth.json&lt;/code&gt; for JITO authentication (optional, gRPC HTTP/2.0 searcher client)&lt;/li&gt; &#xA;   &lt;li&gt;Populate &lt;code&gt;fund.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Both keypairs are in &lt;code&gt;solana-keygen&lt;/code&gt; format, array of 64 bytes, 32 bytes private key and 32 bytes public key.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install dependencies&#xA;sudo apt install protoc build-essential pkg-config libssl-dev&#xA;&#xA;# Build&#xA;cargo build --release&#xA;&#xA;# Run services&#xA;./run-systemd-services.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Transaction Monitoring&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run -- listen \&#xA;  --worker-count [COUNT] \&#xA;  --buffer-size [SIZE]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Token Swapping&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run -- swap \&#xA;  --input-mint sol \&#xA;  --output-mint EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v \&#xA;  --amount 10000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Default configuration is set for mainnet with small transactions. Ensure proper configuration for testnet usage and carefully review code before execution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Metrics and Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;Listen includes built-in metrics exposed at &lt;code&gt;localhost:3030/metrics&lt;/code&gt;. To visualize:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start Prometheus:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;prometheus --config=prometheus.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Access metrics at &lt;code&gt;localhost:3030/metrics&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Grafana should show something like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;910&#34; alt=&#34;image&#34; src=&#34;https://github.com/piotrostr/listen/assets/63755291/95668158-9f7d-4cd2-be84-7c2b893d3f5c&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Swap Profiling&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;stackcollapse.pl&lt;/code&gt; can be installed through&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gh repo clone brendangregg/FlameGraph &amp;amp;&amp;amp; \&#xA;  sudo cp FlameGraph/stackcollapse.pl /usr/local/bin &amp;amp;&amp;amp; \&#xA;  sudo cp FlameGraph/flamegraph.pl /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Profile swap performance using DTrace to produce a flamegraph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hack/profile-swap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;1210&#34; alt=&#34;image&#34; src=&#34;https://github.com/piotrostr/listen/assets/63755291/699405b7-adf0-448b-89c1-ba71152dc72b&#34;&gt;</summary>
  </entry>
  <entry>
    <title>Schniz/fnm</title>
    <updated>2025-01-26T01:50:11Z</updated>
    <id>tag:github.com,2025-01-26:/Schniz/fnm</id>
    <link href="https://github.com/Schniz/fnm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ Fast and simple Node.js version manager, built in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Fast Node Manager (&lt;code&gt;fnm&lt;/code&gt;) &lt;img alt=&#34;Amount of downloads&#34; src=&#34;https://img.shields.io/github/downloads/Schniz/fnm/total.svg?style=flat&#34;&gt; &lt;a href=&#34;https://github.com/Schniz/fnm/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/Schniz/fnm/rust.yml?branch=master&amp;amp;label=workflow&#34; alt=&#34;GitHub Actions workflow status&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üöÄ Fast and simple Node.js version manager, built in Rust&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/docs/fnm.svg?sanitize=true&#34; alt=&#34;Blazing fast!&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;üåé Cross-platform support (macOS, Windows, Linux)&lt;/p&gt; &#xA;&lt;p&gt;‚ú® Single file, easy installation, instant startup&lt;/p&gt; &#xA;&lt;p&gt;üöÄ Built with speed in mind&lt;/p&gt; &#xA;&lt;p&gt;üìÇ Works with &lt;code&gt;.node-version&lt;/code&gt; and &lt;code&gt;.nvmrc&lt;/code&gt; files&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using a script (macOS/Linux)&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt; and &lt;code&gt;fish&lt;/code&gt; shells, there&#39;s an &lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/.ci/install.sh&#34;&gt;automatic installation script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First ensure that &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt; are already installed on you operating system. Then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://fnm.vercel.app/install | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Upgrade&lt;/h4&gt; &#xA;&lt;p&gt;On macOS, it is as simple as &lt;code&gt;brew upgrade fnm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On other operating systems, upgrading &lt;code&gt;fnm&lt;/code&gt; is almost the same as installing it. To prevent duplication in your shell config file, pass &lt;code&gt;--skip-shell&lt;/code&gt; to the install command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://fnm.vercel.app/install | bash -s -- --skip-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;--install-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a custom directory for fnm to be installed. The default is &lt;code&gt;$XDG_DATA_HOME/fnm&lt;/code&gt; (if &lt;code&gt;$XDG_DATA_HOME&lt;/code&gt; is not defined it falls back to &lt;code&gt;$HOME/.local/share/fnm&lt;/code&gt; on linux and &lt;code&gt;$HOME/Library/Application Support/fnm&lt;/code&gt; on MacOS).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--skip-shell&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Skip appending shell specific loader to shell config file, based on the current user shell, defined in &lt;code&gt;$SHELL&lt;/code&gt;. e.g. for Bash, &lt;code&gt;$HOME/.bashrc&lt;/code&gt;. &lt;code&gt;$HOME/.zshrc&lt;/code&gt; for Zsh. For Fish - &lt;code&gt;$HOME/.config/fish/conf.d/fnm.fish&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--force-install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;macOS installations using the installation script are deprecated in favor of the Homebrew formula, but this forces the script to install using it anyway.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir &#34;./.fnm&#34; --skip-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;h4&gt;Using Homebrew (macOS/Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install fnm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, &lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup&#34;&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Using Winget (Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;winget install Schniz.fnm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Scoop (Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install fnm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, &lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup&#34;&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Using Chocolatey (Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install fnm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, &lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup&#34;&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Using Cargo (Linux/macOS/Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install fnm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, &lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup&#34;&gt;set up your shell for fnm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Using a release binary (Linux/macOS/Windows)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/Schniz/fnm/releases&#34;&gt;latest release binary&lt;/a&gt; for your system&lt;/li&gt; &#xA; &lt;li&gt;Make it available globally on &lt;code&gt;PATH&lt;/code&gt; environment variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup&#34;&gt;Set up your shell for fnm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Removing&lt;/h3&gt; &#xA;&lt;p&gt;To remove fnm (üò¢), just delete the &lt;code&gt;.fnm&lt;/code&gt; folder in your home directory. You should also edit your shell configuration to remove any references to fnm (ie. read &lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/#shell-setup&#34;&gt;Shell Setup&lt;/a&gt;, and do the opposite).&lt;/p&gt; &#xA;&lt;h2&gt;Completions&lt;/h2&gt; &#xA;&lt;p&gt;fnm ships its completions with the binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fnm completions --shell &amp;lt;SHELL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;&amp;lt;SHELL&amp;gt;&lt;/code&gt; can be one of the supported shells:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zsh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;powershell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please follow your shell instructions to install them.&lt;/p&gt; &#xA;&lt;h3&gt;Shell Setup&lt;/h3&gt; &#xA;&lt;p&gt;Environment variables need to be setup before you can start using fnm. This is done by evaluating the output of &lt;code&gt;fnm env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Check out the &lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/docs/configuration.md&#34;&gt;Configuration&lt;/a&gt; section to enable highly recommended features, like automatic version switching.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Adding a &lt;code&gt;.node-version&lt;/code&gt; to your project is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node --version&#xA;v14.18.3&#xA;$ node --version &amp;gt; .node-version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the following guides for the shell you use:&lt;/p&gt; &#xA;&lt;h4&gt;Bash&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;.bashrc&lt;/code&gt; profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(fnm env --use-on-cd --shell bash)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Zsh&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;.zshrc&lt;/code&gt; profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;eval &#34;$(fnm env --use-on-cd --shell zsh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fish shell&lt;/h4&gt; &#xA;&lt;p&gt;Create &lt;code&gt;~/.config/fish/conf.d/fnm.fish&lt;/code&gt; and add this line to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;fnm env --use-on-cd --shell fish | source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PowerShell&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to the end of your profile file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;fnm env --use-on-cd --shell powershell | Out-String | Invoke-Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For macOS/Linux, the profile is located at &lt;code&gt;~/.config/powershell/Microsoft.PowerShell_profile.ps1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Windows location is either: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;%userprofile%\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt; Powershell 5&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;%userprofile%\Documents\PowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt; Powershell 6+&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To create the profile file you can run this in PowerShell: &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;if (-not (Test-Path $profile)) { New-Item $profile -Force }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To edit your profile run this in PowerShell: &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-Item $profile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Windows Command Prompt aka Batch aka WinCMD&lt;/h4&gt; &#xA;&lt;p&gt;fnm is also supported but is not entirely covered. You can set up a startup script for &lt;a href=&#34;https://superuser.com/a/144348&#34;&gt;cmd.exe&lt;/a&gt; or &lt;a href=&#34;https://superuser.com/a/1855283&#34;&gt;Windows Terminal&lt;/a&gt; and append the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;@echo off&#xA;:: for /F will launch a new instance of cmd so we create a guard to prevent an infnite loop&#xA;if not defined FNM_AUTORUN_GUARD (&#xA;    set &#34;FNM_AUTORUN_GUARD=AutorunGuard&#34;&#xA;    FOR /f &#34;tokens=*&#34; %%z IN (&#39;fnm env --use-on-cd&#39;) DO CALL %%z&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage with Cmder&lt;/h4&gt; &#xA;&lt;p&gt;Usage is very similar to the normal WinCMD install, apart for a few tweaks to allow being called from the cmder startup script. The example &lt;strong&gt;assumes&lt;/strong&gt; that the &lt;code&gt;CMDER_ROOT&lt;/code&gt; environment variable is &lt;strong&gt;set&lt;/strong&gt; to the &lt;strong&gt;root directory&lt;/strong&gt; of your Cmder installation. Then you can do something like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make a .cmd file to invoke it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;:: %CMDER_ROOT%\bin\fnm_init.cmd&#xA;@echo off&#xA;FOR /f &#34;tokens=*&#34; %%z IN (&#39;fnm env --use-on-cd&#39;) DO CALL %%z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add it to the startup script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;:: %CMDER_ROOT%\config\user_profile.cmd&#xA;call &#34;%CMDER_ROOT%\bin\fnm_init.cmd&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can replace &lt;code&gt;%CMDER_ROOT%&lt;/code&gt; with any other convenient path too.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/docs/configuration.md&#34;&gt;Configuration&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/docs/configuration.md&#34;&gt;See the available configuration options for an extended configuration documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/docs/commands.md&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Schniz/fnm/master/docs/commands.md&#34;&gt;See the available commands for an extended usage documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs welcome &lt;span&gt;üéâ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Developing:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install Rust&#xA;git clone https://github.com/Schniz/fnm.git&#xA;cd fnm/&#xA;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Binary:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run -- --help # Will behave like `fnm --help`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Tests:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ekzhang/bore</title>
    <updated>2025-01-26T01:50:11Z</updated>
    <id>tag:github.com,2025-01-26:/ekzhang/bore</id>
    <link href="https://github.com/ekzhang/bore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üï≥ bore is a simple CLI tool for making tunnels to localhost&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bore&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ekzhang/bore/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ekzhang/bore/ci.yml&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/bore-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/bore-cli.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A modern, simple TCP tunnel in Rust that exposes local ports to a remote server, bypassing standard NAT connection firewalls. &lt;strong&gt;That&#39;s all it does: no more, and no less.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vDeGsmx.gif&#34; alt=&#34;Video demo&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Installation (requires Rust, see alternatives below)&#xA;cargo install bore-cli&#xA;&#xA;# On your local machine&#xA;bore local 8000 --to bore.pub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will expose your local port at &lt;code&gt;localhost:8000&lt;/code&gt; to the public internet at &lt;code&gt;bore.pub:&amp;lt;PORT&amp;gt;&lt;/code&gt;, where the port number is assigned randomly.&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://github.com/localtunnel/localtunnel&#34;&gt;localtunnel&lt;/a&gt; and &lt;a href=&#34;https://ngrok.io/&#34;&gt;ngrok&lt;/a&gt;, except &lt;code&gt;bore&lt;/code&gt; is intended to be a highly efficient, unopinionated tool for forwarding TCP traffic that is simple to install and easy to self-host, with no frills attached.&lt;/p&gt; &#xA;&lt;p&gt;(&lt;code&gt;bore&lt;/code&gt; totals about 400 lines of safe, async Rust code and is trivial to set up ‚Äî just run a single binary for the client and server.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re on macOS, &lt;code&gt;bore&lt;/code&gt; is packaged as a Homebrew core formula.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install bore-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, the easiest way to install bore is from prebuilt binaries. These are available on the &lt;a href=&#34;https://github.com/ekzhang/bore/releases&#34;&gt;releases page&lt;/a&gt; for macOS, Windows, and Linux. Just unzip the appropriate file for your platform and move the &lt;code&gt;bore&lt;/code&gt; executable into a folder on your PATH.&lt;/p&gt; &#xA;&lt;p&gt;You also can build &lt;code&gt;bore&lt;/code&gt; from source using &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;, the Rust package manager. This command installs the &lt;code&gt;bore&lt;/code&gt; binary at a user-accessible path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install bore-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also publish versioned Docker images for each release. The image is built for an AMD 64-bit architecture. They&#39;re tagged with the specific version and allow you to run the statically-linked &lt;code&gt;bore&lt;/code&gt; binary from a minimal &#34;scratch&#34; container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it --init --rm --network host ekzhang/bore &amp;lt;ARGS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Detailed Usage&lt;/h2&gt; &#xA;&lt;p&gt;This section describes detailed usage for the &lt;code&gt;bore&lt;/code&gt; CLI command.&lt;/p&gt; &#xA;&lt;h3&gt;Local Forwarding&lt;/h3&gt; &#xA;&lt;p&gt;You can forward a port on your local machine by using the &lt;code&gt;bore local&lt;/code&gt; command. This takes a positional argument, the local port to forward, as well as a mandatory &lt;code&gt;--to&lt;/code&gt; option, which specifies the address of the remote server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bore local 5000 --to bore.pub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally pass in a &lt;code&gt;--port&lt;/code&gt; option to pick a specific port on the remote to expose, although the command will fail if this port is not available. Also, passing &lt;code&gt;--local-host&lt;/code&gt; allows you to expose a different host on your local area network besides the loopback address &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The full options are shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Starts a local proxy to the remote server&#xA;&#xA;Usage: bore local [OPTIONS] --to &amp;lt;TO&amp;gt; &amp;lt;LOCAL_PORT&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;LOCAL_PORT&amp;gt;  The local port to expose&#xA;&#xA;Options:&#xA;  -l, --local-host &amp;lt;HOST&amp;gt;  The local host to expose [default: localhost]&#xA;  -t, --to &amp;lt;TO&amp;gt;            Address of the remote server to expose local ports to [env: BORE_SERVER=]&#xA;  -p, --port &amp;lt;PORT&amp;gt;        Optional port on the remote server to select [default: 0]&#xA;  -s, --secret &amp;lt;SECRET&amp;gt;    Optional secret for authentication [env: BORE_SECRET]&#xA;  -h, --help               Print help information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Self-Hosting&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned in the startup instructions, there is a public instance of the &lt;code&gt;bore&lt;/code&gt; server running at &lt;code&gt;bore.pub&lt;/code&gt;. However, if you want to self-host &lt;code&gt;bore&lt;/code&gt; on your own network, you can do so with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bore server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all it takes! After the server starts running at a given address, you can then update the &lt;code&gt;bore local&lt;/code&gt; command with option &lt;code&gt;--to &amp;lt;ADDRESS&amp;gt;&lt;/code&gt; to forward a local port to this remote server.&lt;/p&gt; &#xA;&lt;p&gt;The full options for the &lt;code&gt;bore server&lt;/code&gt; command are shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Runs the remote proxy server&#xA;&#xA;Usage: bore server [OPTIONS]&#xA;&#xA;Options:&#xA;      --min-port &amp;lt;MIN_PORT&amp;gt;  Minimum accepted TCP port number [default: 1024, env: BORE_MIN_PORT]&#xA;      --max-port &amp;lt;MAX_PORT&amp;gt;  Maximum accepted TCP port number [default: 65535, env: BORE_MAX_PORT]&#xA;  -s, --secret &amp;lt;SECRET&amp;gt;      Optional secret for authentication [env: BORE_SECRET]&#xA;  -h, --help                 Print help information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Protocol&lt;/h2&gt; &#xA;&lt;p&gt;There is an implicit &lt;em&gt;control port&lt;/em&gt; at &lt;code&gt;7835&lt;/code&gt;, used for creating new connections on demand. At initialization, the client sends a &#34;Hello&#34; message to the server on the TCP control port, asking to proxy a selected remote port. The server then responds with an acknowledgement and begins listening for external TCP connections.&lt;/p&gt; &#xA;&lt;p&gt;Whenever the server obtains a connection on the remote port, it generates a secure &lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;UUID&lt;/a&gt; for that connection and sends it back to the client. The client then opens a separate TCP stream to the server and sends an &#34;Accept&#34; message containing the UUID on that stream. The server then proxies the two connections between each other.&lt;/p&gt; &#xA;&lt;p&gt;For correctness reasons and to avoid memory leaks, incoming connections are only stored by the server for up to 10 seconds before being discarded if the client does not accept them.&lt;/p&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;On a custom deployment of &lt;code&gt;bore server&lt;/code&gt;, you can optionally require a &lt;em&gt;secret&lt;/em&gt; to prevent the server from being used by others. The protocol requires clients to verify possession of the secret on each TCP connection by answering random challenges in the form of HMAC codes. (This secret is only used for the initial handshake, and no further traffic is encrypted by default.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# on the server&#xA;bore server --secret my_secret_string&#xA;&#xA;# on the client&#xA;bore local &amp;lt;LOCAL_PORT&amp;gt; --to &amp;lt;TO&amp;gt; --secret my_secret_string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a secret is not present in the arguments, &lt;code&gt;bore&lt;/code&gt; will also attempt to read from the &lt;code&gt;BORE_SECRET&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Created by Eric Zhang (&lt;a href=&#34;https://twitter.com/ekzhang1&#34;&gt;@ekzhang1&lt;/a&gt;). Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/ekzhang/bore/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The author would like to thank the contributors and maintainers of the &lt;a href=&#34;https://tokio.rs/&#34;&gt;Tokio&lt;/a&gt; project for making it possible to write ergonomic and efficient network services in Rust.&lt;/p&gt;</summary>
  </entry>
</feed>