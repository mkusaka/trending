<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:51:39Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>matter-labs/foundry-zksync</title>
    <updated>2024-03-03T01:51:39Z</updated>
    <id>tag:github.com,2024-03-03:/matter-labs/foundry-zksync</id>
    <link href="https://github.com/matter-labs/foundry-zksync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fork of Foundry tailored for zkSync environment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Foundry with zkSync Era v0.1-alpha&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides &lt;a href=&#34;https://github.com/foundry-rs/foundry&#34;&gt;Foundry&lt;/a&gt; functionality in Solidity for compiling, deploying, testing, and interacting with smart contracts on &lt;strong&gt;zkSync Era&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is foundry?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;Foundry consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Forge:&lt;/strong&gt; Ethereum testing framework (like Truffle, Hardhat and DappTools).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cast:&lt;/strong&gt; Swiss army knife for interacting with EVM smart contracts, sending transactions and getting chain data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Anvil:&lt;/strong&gt; Local Ethereum node, akin to Ganache, Hardhat Network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chisel:&lt;/strong&gt; Fast, utilitarian, and verbose solidity REPL.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Need help getting started with Foundry? Read the üìñ &lt;a href=&#34;https://book.getfoundry.sh/&#34;&gt;Foundry Book&lt;/a&gt; (WIP)!&lt;/p&gt; &#xA;&lt;h3&gt;Foundry-zkSync adds:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;zkForge:&lt;/strong&gt; zkSync testing framework (like Hardhat and DappTools).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;zkCast:&lt;/strong&gt; Swiss army knife for interacting with zkEVM smart contracts, sending transactions and getting chain data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Need help getting started with &lt;strong&gt;Foundry-zkSync&lt;/strong&gt;? Read the üìñ &lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/foundry-zksync/main/docs/dev/zksync/&#34;&gt;Usage Guides&lt;/a&gt; (WIP)!&lt;/p&gt; &#xA;&lt;h2&gt;‚ö†Ô∏è Caution&lt;/h2&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;foundry-zksync&lt;/code&gt; is still in its &lt;strong&gt;alpha&lt;/strong&gt; stage. Some features might not be fully supported yet and may not work as intended. However, it is open-sourced, and contributions are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;üìä Features &amp;amp; Limitations&lt;/h2&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Foundry-zksync&lt;/code&gt; offers a set of features designed to work with zkSync Era, providing a comprehensive toolkit for smart contract deployment and interaction:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart Contract Deployment&lt;/strong&gt;: Easily deploy smart contracts to zkSync Era mainnet, testnet, or a local test node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asset Bridging&lt;/strong&gt;: Bridge assets between L1 and L2, facilitating seamless transactions across layers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contract Interaction&lt;/strong&gt;: Call and send transactions to deployed contracts on zkSync Era testnet or local test node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidity Testing&lt;/strong&gt;: Write tests in Solidity, similar to DappTools, for a familiar testing environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fuzz Testing&lt;/strong&gt;: Benefit from fuzz testing, complete with shrinking of inputs and printing of counter-examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Remote RPC Forking&lt;/strong&gt;: Utilize remote RPC forking mode, leveraging Rust&#39;s asynchronous infrastructure like tokio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Debug Logging&lt;/strong&gt;: Choose your debugging style: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DappTools-style: Utilize DsTest&#39;s emitted logs for debugging.&lt;/li&gt; &#xA;   &lt;li&gt;Hardhat-style: Leverage the popular console.sol contract.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable Compiler Options&lt;/strong&gt;: Tailor compiler settings to your needs, including LLVM optimization modes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Limitations&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;code&gt;foundry-zksync&lt;/code&gt; is &lt;strong&gt;alpha stage&lt;/strong&gt;, there are some limitations to be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cheat Codes Support&lt;/strong&gt;: Not all cheat codes are fully supported. &lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/foundry-zksync/main/SUPPORTED_CHEATCODES.md&#34;&gt;View the list of supported cheat codes&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compile Time&lt;/strong&gt;: Some users may experience slower compile times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compiling Libraries&lt;/strong&gt;: Compiling non-inlinable libraries requires deployment and adding to configuration. For more information please refer to &lt;a href=&#34;https://era.zksync.io/docs/tools/hardhat/compiling-libraries.html&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;libraries = [&#xA;    &#34;src/MyLibrary.sol:MyLibrary:0xfD88CeE74f7D78697775aBDAE53f9Da1559728E4&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create2 Address Derivation&lt;/strong&gt;: There are differences in Create2 Address derivation compared to Ethereum. &lt;a href=&#34;https://era.zksync.io/docs/reference/architecture/differences-with-ethereum.html#create-create2&#34;&gt;Read the details&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Specific Foundry Features&lt;/strong&gt;: Currently features such as &lt;code&gt;--gas-report&lt;/code&gt; may not work as intended. We are actively working on providing support for these feature types.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the most effective use of our library, we recommend familiarizing yourself with these features and limitations.&lt;/p&gt; &#xA;&lt;h2&gt;üìù Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Rust with the following command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current implementation makes use of &lt;code&gt;nightly-2023-09-30&lt;/code&gt;. Please be sure to have the proper toolchain installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# rustup install nightly-2023-09-30-&amp;lt;YOUR-TARGET&amp;gt;&#xA;rustup install nightly-2023-09-30-aarch64-apple-darwin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üíæ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Each tool within our suite can be installed individually, or you can install the entire suite at once.&lt;/p&gt; &#xA;&lt;h3&gt;Installing &lt;code&gt;zkforge&lt;/code&gt; üõ†Ô∏è&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --path ./crates/zkforge --profile local --force --locked&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs &lt;code&gt;zkforge&lt;/code&gt; to &lt;code&gt;~/.cargo/bin&lt;/code&gt;, making it available as an executable.&lt;/p&gt; &#xA;&lt;h3&gt;Installing &lt;code&gt;zkcast&lt;/code&gt; üì°&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --path ./crates/zkcast --profile local --force --locked&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs &lt;code&gt;zkcast&lt;/code&gt; to &lt;code&gt;~/.cargo/bin&lt;/code&gt;, allowing it to be used as an executable.&lt;/p&gt; &#xA;&lt;h3&gt;Installing the Entire Suite üì¶&lt;/h3&gt; &#xA;&lt;p&gt;To install all the tools in the suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zkforge init hello_foundry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s check out what zkforge generated for us:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd hello_foundry&#xA;$ tree . -d -L 1&#xA;.&#xA;‚îú‚îÄ‚îÄ abis&#xA;‚îú‚îÄ‚îÄ broadcast&#xA;‚îú‚îÄ‚îÄ interfaces&#xA;‚îú‚îÄ‚îÄ lib&#xA;‚îú‚îÄ‚îÄ script&#xA;‚îú‚îÄ‚îÄ src&#xA;‚îú‚îÄ‚îÄ test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compiling contracts&lt;/h4&gt; &#xA;&lt;p&gt;We can build the project with zkforge zkbuild:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ zkforge zkbuild&#xA;Compiling smart contracts...&#xA;Compiled Successfully&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Tests&lt;/h4&gt; &#xA;&lt;p&gt;You can run the tests using &lt;code&gt;zkforge test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The command and its expected output are shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ zkforge test&#xA;&#xA;Running 2 tests for Counter.t.sol:CounterTest&#xA;[PASS] testFuzz_SetNumber(uint256) (runs: 256, Œº: 9223372034707527035, ~: 9223372034707527076)&#xA;[PASS] test_Increment() (gas: 9223372034707527339)&#xA;Test result: ok. 2 passed; 0 failed; 0 skipped; finished in 5.15s&#xA;&#xA;Ran 1 test suites: 2 tests passed, 0 failed, 0 skipped (2 total tests)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;foundry.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Foundry is designed to be very configurable. You can configure Foundry using a file called &lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/foundry-zksync/main/crates/config&#34;&gt;&lt;code&gt;foundry.toml&lt;/code&gt;&lt;/a&gt; in the root of your project, or any other parent directory. See &lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/foundry-zksync/main/crates/config/README.md#all-options&#34;&gt;config package&lt;/a&gt; for all available options.&lt;/p&gt; &#xA;&lt;p&gt;Configuration can be arbitrarily namespaced by profiles. The default profile is named &lt;code&gt;default&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/foundry-zksync/main/crates/config/README.md#default-profile&#34;&gt;&#34;Default Profile&#34;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can select another profile using the &lt;code&gt;FOUNDRY_PROFILE&lt;/code&gt; environment variable. You can also override parts of your configuration using &lt;code&gt;FOUNDRY_&lt;/code&gt; or &lt;code&gt;DAPP_&lt;/code&gt; prefixed environment variables, like &lt;code&gt;FOUNDRY_SRC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;zkforge init&lt;/code&gt; creates a basic, extendable &lt;code&gt;foundry.toml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;To see your current configuration, run &lt;code&gt;zkforge config&lt;/code&gt;. To see only basic options (as set with &lt;code&gt;zkforge init&lt;/code&gt;), run &lt;code&gt;zkforge config --basic&lt;/code&gt;. This can be used to create a new &lt;code&gt;foundry.toml&lt;/code&gt; file with &lt;code&gt;zkforge config --basic &amp;gt; foundry.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default &lt;code&gt;zkforge config&lt;/code&gt; shows the currently selected foundry profile and its values. It also accepts the same arguments as &lt;code&gt;zkforge build&lt;/code&gt;. An example &lt;code&gt;foundry.toml&lt;/code&gt; for zkSync with zksolc configurations may look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[profile.default]&#xA;src = &#39;src&#39;&#xA;out = &#39;out&#39;&#xA;libs = [&#39;lib&#39;]&#xA;&#xA;[profile.zksync]&#xA;src = &#39;src&#39;&#xA;libs = [&#39;lib&#39;]&#xA;fallback_oz = true&#xA;mode = &#34;3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can find additional setup and configurations guides in the &lt;a href=&#34;https://book.getfoundry.sh&#34;&gt;Foundry Book&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.getfoundry.sh/config/vscode.html&#34;&gt;Setting up VSCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.getfoundry.sh/config/shell-autocompletion.html&#34;&gt;Shell autocompletions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/foundry-zksync/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Verify arguments&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You are using zksync specific methods (&lt;code&gt;zkcreate&lt;/code&gt; not &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;zksend&lt;/code&gt; not &lt;code&gt;send&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You set the correct &lt;code&gt;--rpc-url&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You have the proper contract address - the bytecodes in zkSync Era are different to in EVM - so the resulting contracts will be deployed at different addresses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&#39;Method not found&#39; when calling &#39;send&#39;&lt;/h3&gt; &#xA;&lt;p&gt;If you get errors like &lt;code&gt;(code: -32601, message: Method not found, data: None)&lt;/code&gt; - you are probably using a &lt;code&gt;send&lt;/code&gt; method instead of &lt;code&gt;zksend&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Foundry is a clean-room rewrite of the testing framework &lt;a href=&#34;https://github.com/dapphub/dapptools&#34;&gt;DappTools&lt;/a&gt;. None of this would have been possible without the DappHub team&#39;s work over the years.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mattsse_&#34;&gt;Matthias Seitz&lt;/a&gt;: Created &lt;a href=&#34;https://github.com/gakonst/ethers-rs/tree/master/ethers-solc/&#34;&gt;ethers-solc&lt;/a&gt; which is the backbone of our compilation pipeline, as well as countless contributions to ethers, in particular the &lt;code&gt;abigen&lt;/code&gt; macros.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/rohitnarurkar&#34;&gt;Rohit Narurkar&lt;/a&gt;: Created the Rust Solidity version manager &lt;a href=&#34;https://github.com/roynalnaruto/svm-rs&#34;&gt;svm-rs&lt;/a&gt; which we use to auto-detect and manage multiple Solidity versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/brockjelmore&#34;&gt;Brock Elmore&lt;/a&gt;: For extending the VM&#39;s cheatcodes and implementing &lt;a href=&#34;https://github.com/foundry-rs/foundry/pull/192&#34;&gt;structured call tracing&lt;/a&gt;, a critical feature for debugging smart contract calls.&lt;/li&gt; &#xA; &lt;li&gt;All the other &lt;a href=&#34;https://github.com/foundry-rs/foundry/graphs/contributors&#34;&gt;contributors&lt;/a&gt; to the &lt;a href=&#34;https://github.com/gakonst/ethers-rs&#34;&gt;ethers-rs&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/foundry-rs/foundry&#34;&gt;foundry&lt;/a&gt; repositories and chatrooms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Acknowledgments - foundry-zksync&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://moonsonglabs.com/&#34;&gt;Moonsong Labs&lt;/a&gt;: Implemented &lt;a href=&#34;https://raw.githubusercontent.com/matter-labs/foundry-zksync/main/crates/era-cheatcodes/&#34;&gt;era-cheatcodes&lt;/a&gt;, and resolved a number of different challenges to enable zkSync support.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rust-bitcoin/rust-bitcoin</title>
    <updated>2024-03-03T01:51:39Z</updated>
    <id>tag:github.com,2024-03-03:/rust-bitcoin/rust-bitcoin</id>
    <link href="https://github.com/rust-bitcoin/rust-bitcoin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust Bitcoin library&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Rust Bitcoin&lt;/h1&gt; &#xA; &lt;img alt=&#34;Rust Bitcoin logo by Hunter Trujillo, see license and source files under /logo&#34; src=&#34;https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/logo/rust-bitcoin.png&#34; width=&#34;300&#34;&gt; &#xA; &lt;p&gt;Library with support for de/serialization, parsing and executing on data-structures and network messages related to Bitcoin. &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://crates.io/crates/bitcoin&#34;&gt;&lt;img alt=&#34;Crate Info&#34; src=&#34;https://img.shields.io/crates/v/bitcoin.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-bitcoin/rust-bitcoin/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;CC0 1.0 Universal Licensed&#34; src=&#34;https://img.shields.io/badge/license-CC0--1.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-bitcoin/rust-bitcoin/actions?query=workflow%3AContinuous%20integration&#34;&gt;&lt;img alt=&#34;CI Status&#34; src=&#34;https://github.com/rust-bitcoin/rust-bitcoin/workflows/Continuous%20integration/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/bitcoin&#34;&gt;&lt;img alt=&#34;API Docs&#34; src=&#34;https://img.shields.io/badge/docs.rs-bitcoin-green&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://blog.rust-lang.org/2021/11/01/Rust-1.56.1.html&#34;&gt;&lt;img alt=&#34;Rustc Version 1.56.1+&#34; src=&#34;https://img.shields.io/badge/rustc-1.56.1%2B-lightgrey.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gnusha.org/bitcoin-rust/&#34;&gt;&lt;img alt=&#34;Chat on IRC&#34; src=&#34;https://img.shields.io/badge/irc-%23bitcoin--rust%20on%20libera.chat-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/model-checking/kani&#34;&gt;&#xA;   &lt;imp alt=&#34;kani&#34; src=&#34;https://github.com/rust-bitcoin/rust-bitcoin/actions/workflows/kani.yaml/badge.svg&#34;&gt;&lt;/imp&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/bitcoin/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supports (or should support)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;De/serialization of Bitcoin protocol network messages&lt;/li&gt; &#xA; &lt;li&gt;De/serialization of blocks and transactions&lt;/li&gt; &#xA; &lt;li&gt;Script de/serialization&lt;/li&gt; &#xA; &lt;li&gt;Private keys and address creation, de/serialization and validation (including full BIP32 support)&lt;/li&gt; &#xA; &lt;li&gt;PSBT v0 de/serialization and all but the Input Finalizer role. Use &lt;a href=&#34;https://docs.rs/miniscript/latest/miniscript/psbt/index.html&#34;&gt;rust-miniscript&lt;/a&gt; to finalize.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For JSONRPC interaction with Bitcoin Core, it is recommended to use &lt;a href=&#34;https://github.com/rust-bitcoin/rust-bitcoincore-rpc&#34;&gt;rust-bitcoincore-rpc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to always use &lt;a href=&#34;https://github.com/crev-dev/cargo-crev&#34;&gt;cargo-crev&lt;/a&gt; to verify the trustworthiness of each of your dependencies, including this one.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;h3&gt;Consensus&lt;/h3&gt; &#xA;&lt;p&gt;This library &lt;strong&gt;must not&lt;/strong&gt; be used for consensus code (i.e. fully validating blockchain data). It technically supports doing this, but doing so is very ill-advised because there are many deviations, known and unknown, between this library and the Bitcoin Core reference implementation. In a consensus based cryptocurrency such as Bitcoin it is critical that all parties are using the same rules to validate data, and this library is simply unable to implement the same rules as Core.&lt;/p&gt; &#xA;&lt;p&gt;Given the complexity of both C++ and Rust, it is unlikely that this will ever be fixed, and there are no plans to do so. Of course, patches to fix specific consensus incompatibilities are welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Support for 16-bit pointer sizes&lt;/h3&gt; &#xA;&lt;p&gt;16-bit pointer sizes are not supported and we can&#39;t promise they will be. If you care about them please let us know, so we can know how large the interest is and possibly decide to support them.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Currently can be found on &lt;a href=&#34;https://docs.rs/bitcoin/&#34;&gt;docs.rs/bitcoin&lt;/a&gt;. Patches to add usage examples and to expand on existing docs would be extremely appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are generally welcome. If you intend to make larger changes please discuss them in an issue before PRing them to avoid duplicate work and architectural mismatches. If you have any questions or ideas you want to discuss please join us in &lt;a href=&#34;https://web.libera.chat/?channel=#bitcoin-rust&#34;&gt;#bitcoin-rust&lt;/a&gt; on &lt;a href=&#34;https://libera.chat&#34;&gt;libera.chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information please see &lt;code&gt;./CONTRIBUTING.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Supported Rust Version (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;This library should always compile with any combination of features on &lt;strong&gt;Rust 1.56.1&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build with the MSRV you will likely need to pin a bunch of dependencies, see &lt;code&gt;./contrib/test.sh&lt;/code&gt; for the current list.&lt;/p&gt; &#xA;&lt;h2&gt;External dependencies&lt;/h2&gt; &#xA;&lt;p&gt;We integrate with a few external libraries, most notably &lt;code&gt;serde&lt;/code&gt;. These are available via feature flags. To ensure compatibility and MSRV stability we provide two lock files as a means of inspecting compatible versions: &lt;code&gt;Cargo-minimal.lock&lt;/code&gt; containing minimal versions of dependencies and &lt;code&gt;Cargo-recent.lock&lt;/code&gt; containing recent versions of dependencies tested in our CI.&lt;/p&gt; &#xA;&lt;p&gt;We do not provide any guarantees about the content of these lock files outside of &#34;our CI didn&#39;t fail with these versions&#34;. Specifically, we do not guarantee that the committed hashes are free from malware. It is your responsibility to review them.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Rust&lt;/h2&gt; &#xA;&lt;p&gt;Rust can be installed using your package manager of choice or &lt;a href=&#34;https://rustup.rs&#34;&gt;rustup.rs&lt;/a&gt;. The former way is considered more secure since it typically doesn&#39;t involve trust in the CA system. But you should be aware that the version of Rust shipped by your distribution might be out of date. Generally this isn&#39;t a problem for &lt;code&gt;rust-bitcoin&lt;/code&gt; since we support much older versions than the current stable one (see MSRV section).&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The cargo feature &lt;code&gt;std&lt;/code&gt; is enabled by default. At least one of the features &lt;code&gt;std&lt;/code&gt; or &lt;code&gt;no-std&lt;/code&gt; or both must be enabled.&lt;/p&gt; &#xA;&lt;p&gt;Enabling the &lt;code&gt;no-std&lt;/code&gt; feature does not disable &lt;code&gt;std&lt;/code&gt;. To disable the &lt;code&gt;std&lt;/code&gt; feature you must disable default features. The &lt;code&gt;no-std&lt;/code&gt; feature only enables additional features required for this crate to be usable without &lt;code&gt;std&lt;/code&gt;. Both can be enabled without conflict.&lt;/p&gt; &#xA;&lt;p&gt;The library can be built and tested using &lt;a href=&#34;https://github.com/rust-lang/cargo/&#34;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:rust-bitcoin/rust-bitcoin.git&#xA;cd rust-bitcoin&#xA;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://doc.rust-lang.org/stable/cargo/&#34;&gt;&lt;code&gt;cargo&lt;/code&gt; documentation&lt;/a&gt; for more detailed instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Just&lt;/h3&gt; &#xA;&lt;p&gt;We support &lt;a href=&#34;https://just.systems/man/en/&#34;&gt;&lt;code&gt;just&lt;/code&gt;&lt;/a&gt; for running dev workflow commands. Run &lt;code&gt;just&lt;/code&gt; from your shell to see list available sub-commands.&lt;/p&gt; &#xA;&lt;h3&gt;Building the docs&lt;/h3&gt; &#xA;&lt;p&gt;We build docs with the nightly toolchain, you may wish to use the following shell alias to check your documentation changes build correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias build-docs=&#39;RUSTDOCFLAGS=&#34;--cfg docsrs&#34; cargo +nightly rustdoc --features=&#34;$FEATURES&#34; -- -D rustdoc::broken-intra-doc-links&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Unit and integration tests are available for those interested, along with benchmarks. For project developers, especially new contributors looking for something to work on, we do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fuzz testing with &lt;a href=&#34;https://github.com/rust-fuzz/honggfuzz-rs&#34;&gt;&lt;code&gt;Hongfuzz&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mutation testing with &lt;a href=&#34;https://github.com/llogiq/mutagen&#34;&gt;&lt;code&gt;Mutagen&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code verification with &lt;a href=&#34;https://github.com/model-checking/kani&#34;&gt;&lt;code&gt;Kani&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are always more tests to write and more bugs to find, contributions to our testing efforts extremely welcomed. Please consider testing code a first class citizen, we definitely do take PRs improving and cleaning up test code.&lt;/p&gt; &#xA;&lt;h3&gt;Unit/Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;Run as for any other Rust project &lt;code&gt;cargo test --all-features&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;We use a custom Rust compiler configuration conditional to guard the bench mark code. To run the bench marks use: &lt;code&gt;RUSTFLAGS=&#39;--cfg=bench&#39; cargo +nightly bench&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mutation tests&lt;/h3&gt; &#xA;&lt;p&gt;We have started doing mutation testing with &lt;a href=&#34;https://github.com/llogiq/mutagen&#34;&gt;mutagen&lt;/a&gt;. To run these tests first install the latest dev version with &lt;code&gt;cargo +nightly install --git https://github.com/llogiq/mutagen&lt;/code&gt; then run with &lt;code&gt;RUSTFLAGS=&#39;--cfg=mutate&#39; cargo +nightly mutagen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Code verification&lt;/h3&gt; &#xA;&lt;p&gt;We have started using &lt;a href=&#34;https://github.com/model-checking/kani&#34;&gt;kani&lt;/a&gt;, install with &lt;code&gt;cargo install --locked kani-verifier&lt;/code&gt; (no need to run &lt;code&gt;cargo kani setup&lt;/code&gt;). Run the tests with &lt;code&gt;cargo kani&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Every PR needs at least two reviews to get merged. During the review phase maintainers and contributors are likely to leave comments and request changes. Please try to address them, otherwise your PR might get closed without merging after a longer time of inactivity. If your PR isn&#39;t ready for review yet please mark it by prefixing the title with &lt;code&gt;WIP: &lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CI Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;The CI pipeline requires approval before being run on each MR.&lt;/p&gt; &#xA;&lt;p&gt;In order to speed up the review process the CI pipeline can be run locally using &lt;a href=&#34;https://github.com/nektos/act&#34;&gt;act&lt;/a&gt;. The &lt;code&gt;fuzz&lt;/code&gt; and &lt;code&gt;Cross&lt;/code&gt; jobs will be skipped when using &lt;code&gt;act&lt;/code&gt; due to caching being unsupported at this time. We do not &lt;em&gt;actively&lt;/em&gt; support &lt;code&gt;act&lt;/code&gt; but will merge PRs fixing &lt;code&gt;act&lt;/code&gt; issues.&lt;/p&gt; &#xA;&lt;h3&gt;Githooks&lt;/h3&gt; &#xA;&lt;p&gt;To assist devs in catching errors &lt;em&gt;before&lt;/em&gt; running CI we provide some githooks. If you do not already have locally configured githooks you can use the ones in this repository by running, in the root directory of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --local core.hooksPath githooks/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively add symlinks in your &lt;code&gt;.git/hooks&lt;/code&gt; directory to any of the githooks we provide.&lt;/p&gt; &#xA;&lt;h2&gt;Policy on Altcoins/Altchains&lt;/h2&gt; &#xA;&lt;p&gt;Since the altcoin landscape includes projects which &lt;a href=&#34;https://download.wpsoftware.net/bitcoin/alts.pdf&#34;&gt;frequently appear and disappear, and are poorly designed anyway&lt;/a&gt; we do not support any altcoins. Supporting Bitcoin properly is already difficult enough and we do not want to increase the maintenance burden and decrease API stability by adding support for other coins.&lt;/p&gt; &#xA;&lt;p&gt;Our code is public domain so by all means fork it and go wild :)&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;Release notes are done per crate, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/bitcoin/CHANGELOG.md&#34;&gt;bitcoin CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/hashes/CHANGELOG.md&#34;&gt;hashes CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/internals/CHANGELOG.md&#34;&gt;internals CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;The code in this project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/LICENSE&#34;&gt;Creative Commons CC0 1.0 Universal license&lt;/a&gt;. We use the &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX license list&lt;/a&gt; and &lt;a href=&#34;https://spdx.dev/ids/&#34;&gt;SPDX IDs&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rust-lang/cc-rs</title>
    <updated>2024-03-03T01:51:39Z</updated>
    <id>tag:github.com,2024-03-03:/rust-lang/cc-rs</id>
    <link href="https://github.com/rust-lang/cc-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust library for build scripts to compile C/C++ code into a Rust library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cc-rs&lt;/h1&gt; &#xA;&lt;p&gt;A library for &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/build-scripts.html&#34;&gt;Cargo build scripts&lt;/a&gt; to compile a set of C/C++/assembly/CUDA files into a static archive for Cargo to link into the crate being built. This crate does not compile code itself; it calls out to the default compiler for the platform. This crate will automatically detect situations such as cross compilation and various environment variables and will build code appropriately.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://docs.rs/cc&#34;&gt;documentation&lt;/a&gt; for detailed usage instructions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/cc-rs/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/cc-rs/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in cc-rs by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>