<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T02:08:47Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WebAssembly/WASI</title>
    <updated>2023-05-28T02:08:47Z</updated>
    <id>tag:github.com,2023-05-28:/WebAssembly/WASI</id>
    <link href="https://github.com/WebAssembly/WASI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebAssembly System Interface&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://doi.org/10.5281/zenodo.4323447&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.4323447.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WebAssembly System Interface&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WebAssembly/WASI/main/WASI.png&#34; alt=&#34;WASI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The WebAssembly System Interface is not a monolithic standard system interface, but is instead a modular collection of standardized APIs. None of the APIs are required to be implemented to have a compliant runtime. Instead, host environments can choose which APIs make sense for their use cases.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Important Note: WASI is in transition&lt;/h2&gt; &#xA;&lt;p&gt;WASI is transitioning away from the &lt;code&gt;witx&lt;/code&gt; format and its early experimental ABI. We are transitioning to Interface Types using the &lt;code&gt;wit&lt;/code&gt; format and the canonical ABI.&lt;/p&gt; &#xA;&lt;p&gt;All new API proposals should use the new format and the new repo structure that is shown in the &lt;a href=&#34;https://github.com/WebAssembly/wasi-proposal-template&#34;&gt;proposal template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/WebAssembly/WASI/main/docs/WitInWasi.md&#34;&gt;Wit in WASI&lt;/a&gt; document for more information about using Wit for WASI proposals.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Find the APIs&lt;/h2&gt; &#xA;&lt;p&gt;Development of each API happens in its own repo, which you can access from the &lt;a href=&#34;https://raw.githubusercontent.com/WebAssembly/WASI/main/Proposals.md&#34;&gt;proposals list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repo is for general discussion, as well as documenting how we work and high-level goals.&lt;/p&gt; &#xA;&lt;h2&gt;Propose a new API&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to create a new proposal, get started with our &lt;a href=&#34;https://raw.githubusercontent.com/WebAssembly/WASI/main/Contributing.md&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;WASI High Level Goals&lt;/h2&gt; &#xA;&lt;p&gt;(In the spirit of &lt;a href=&#34;https://github.com/WebAssembly/design/raw/main/HighLevelGoals.md&#34;&gt;WebAssembly&#39;s High-Level Goals&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Define a set of portable, modular, runtime-independent, and WebAssembly-native APIs which can be used by WebAssembly code to interact with the outside world. These APIs preserve the essential sandboxed nature of WebAssembly through a &lt;a href=&#34;https://en.wikipedia.org/wiki/Capability-based_security&#34;&gt;Capability-based&lt;/a&gt; API design.&lt;/li&gt; &#xA; &lt;li&gt;Specify and implement incrementally. Start with a Minimum Viable Product (MVP), then adding additional features, prioritized by feedback and experience.&lt;/li&gt; &#xA; &lt;li&gt;Supplement API designs with documentation and tests, and, when feasible, reference implementations which can be shared between wasm engines.&lt;/li&gt; &#xA; &lt;li&gt;Make a great platform: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Work with WebAssembly tool and library authors to help them provide WASI support for their users.&lt;/li&gt; &#xA;   &lt;li&gt;When being WebAssembly-native means the platform isn&#39;t directly compatible with existing applications written for other platforms, design to enable compatibility to be provided by tools and libraries.&lt;/li&gt; &#xA;   &lt;li&gt;Allow the overall API to evolve over time; to make changes to API modules that have been standardized, build implementations of them using libraries on top of new API modules to provide compatibility.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;WASI Design Principles&lt;/h2&gt; &#xA;&lt;h3&gt;Capability-based security&lt;/h3&gt; &#xA;&lt;p&gt;WASI is designed with capability-based security principles, using the facilities provided by the Wasm &lt;a href=&#34;https://github.com/WebAssembly/component-model&#34;&gt;component model&lt;/a&gt;. All access to external resources is provided by capabilities.&lt;/p&gt; &#xA;&lt;p&gt;There are two kinds of capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Handles, defined in the [component-model type system], dynamically identify and provide access to resources. They are unforgeable, meaning there&#39;s no way for an instance to acquire access to a handle other than to have another instance explicitly pass one to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Link-time capabilities, which are functions which require no handle arguments, are used sparingly, in situations where it&#39;s not necessary to identify more than one instance of a resource at runtime. Link-time capabilities are &lt;em&gt;interposable&lt;/em&gt;, so they are still refusable in a capability-based security sense.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;WASI has no &lt;em&gt;ambient authorities&lt;/em&gt;, meaning that there are no global namespaces at runtime, and no global functions at link time.&lt;/p&gt; &#xA;&lt;p&gt;Note that this is a different sense of &#34;capability&#34; than &lt;a href=&#34;http://man7.org/linux/man-pages/man7/capabilities.7.html&#34;&gt;Linux capabilities&lt;/a&gt; or the withdrawn &lt;a href=&#34;https://archive.org/details/posix_1003.1e-990310&#34;&gt;POSIX capabilities&lt;/a&gt;, which are per-process rather than per-resource.&lt;/p&gt; &#xA;&lt;h3&gt;Interposition&lt;/h3&gt; &#xA;&lt;p&gt;Interposition in the context of WASI interfaces is the ability for a Webassembly instance to implement a given WASI interface, and for a consumer WebAssembly instance to be able to use this implementation transparently. This can be used to adapt or attenuate the functionality of a WASI API without changing the code using it.&lt;/p&gt; &#xA;&lt;p&gt;Component model interfaces always support link-time interposition. While WASI APIs are often implemented in hosts, they can also be implemented in Wasm, which may itself be a wrapper around the host. This may be used to implement &lt;em&gt;attenuation&lt;/em&gt;, providing filtered access to the underlying host-provided functionality.&lt;/p&gt; &#xA;&lt;p&gt;Interposition is sometimes referred to as &#34;virtualization&#34;, however we use &#34;interposition&#34; here because the word &#34;virtualization&#34; has several related meanings.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Compatibility with existing applications and libraries, as well as existing host platforms, is important, but will sometimes be in conflict with overall API cleanliness, safety, performance, or portability. Where practical, WASI seeks to keep the WASI API itself free of compatibility concerns, and provides compatibility through libraries, such as WASI libc, and tools. This way, applications which don&#39;t require compatibility for compatibility&#39; sake aren&#39;t burdened by it.&lt;/p&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;Portability is important to WASI, however the meaning of portability will be specific to each API.&lt;/p&gt; &#xA;&lt;p&gt;WASI&#39;s modular nature means that engines don&#39;t need to implement every API in WASI, so we don&#39;t need to exclude APIs just because some host environments can&#39;t implement them. We prefer APIs which can run across a wide variety of engines when feasible, but we&#39;ll ultimately decide whether something is &#34;portable enough&#34; on an API-by-API basis.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DvorakDwarf/Infinite-Storage-Glitch</title>
    <updated>2023-05-28T02:08:47Z</updated>
    <id>tag:github.com,2023-05-28:/DvorakDwarf/Infinite-Storage-Glitch</id>
    <link href="https://github.com/DvorakDwarf/Infinite-Storage-Glitch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ISG lets you use YouTube as cloud storage for ANY files, not just video&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;I was working on this instead of my finals, hope you appreciate it.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/HistidineDwarf&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-red.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Treat this less like the next dropbox and more like a &#34;party trick&#34; or a set of techniques to learn to pass data through compression. I do not endorse high volume use of this tool. I will also refrain from approving more commits to make the tool more convenient to use. There are several bugs that limit the use like the poor use of RAM limiting the size of files to about 100mb and they will remain. If you wish to fix these, you are on your own.&lt;/p&gt; &#xA;&lt;p&gt;If Youtube sends me a Cease and Desist I&#39;ll gladly shut this down.&lt;/p&gt; &#xA;&lt;h1&gt;Infinite-Storage-Glitch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/96934612/219563410-7728447d-5482-41ae-a3ff-cf8446e16ab7.gif&#34; alt=&#34;ezgif com-gif-maker&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;AKA ISG (written entirely in Rust my beloved) lets you embed files into video and upload them to youtube as storage.&lt;/p&gt; &#xA;&lt;p&gt;This has been quite heavily inspired by suckerpinch&#39;s &lt;a href=&#34;https://www.youtube.com/watch?v=JcJSW7Rprio&#34;&gt;Harder Drive&lt;/a&gt; video and &lt;a href=&#34;https://github.com/pixelomer/discord-fs&#34;&gt;discord as a filesystem&lt;/a&gt;. Unfortunately no filesystem functionality as of right now.&lt;/p&gt; &#xA;&lt;h1&gt;Now, you might be asking yourself:&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;But is this against YouTube TOS ?&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;b&gt;Answer is:&lt;/b&gt; probably? &#xA; &lt;p&gt;I don&#39;t speak legalese. Depending on the interpretation of &#34;Autogenerated content that computers post without regard for quality or viewer experience&#34; from &lt;a href=&#34;https://support.google.com/youtube/answer/2801973?hl=en#&#34;&gt;community guidelines&lt;/a&gt; this could be a violation. The TOS also mention circumventing the service which this tool probably does. Use at your own risk. I don&#39;t advise using this tool for anything serious/large. YouTube might understandably get mad, even though the videos might be private. Treat this less like the next dropbox and more like a &#34;party trick&#34;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;The source way (building from source with manually installing dependencies)&lt;/h2&gt; &#xA;&lt;p&gt;=== &lt;em&gt;Please note: building from source takes &lt;strong&gt;a lot of CPU and RAM&lt;/strong&gt; usage.&lt;/em&gt; ===&lt;br&gt; You need to have installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twistedfall/opencv-rust&#34;&gt;opencv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If having any issues also try installing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/&#34;&gt;clang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qt&#34;&gt;qt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to or already have went through the hassle of installing Rust, you can &lt;code&gt;git clone&lt;/code&gt; this repository, then &lt;code&gt;cargo build --release&lt;/code&gt;. Cd to &lt;code&gt;/target/release&lt;/code&gt; directory and run the program &lt;code&gt;./isg_4real&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The easiest way (Docker)&lt;/h2&gt; &#xA;&lt;p&gt;Trying to make anything work on other people&#39;s computers is a nightmare so I&#39;ll use docker from now on &lt;br&gt; &lt;a href=&#34;https://trendoceans.com/isg-lets-you-use-youtube-as-cloud-storage-for-any-files-not-just-video/&#34;&gt;Trend Oceans&lt;/a&gt; wrote a neat article on how to use this method as well.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt; if you haven&#39;t already.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Change into the repository &lt;code&gt;cd Infinite-Storage-Glitch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker build -t isg .&lt;/code&gt; to build the docker image.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker run -it --rm -v ${PWD}:/home/Infinite-Storage-Glitch isg cargo build --release&lt;/code&gt; to build the project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it. You will find the executable in the &lt;code&gt;target/release&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;ℹ️ &lt;strong&gt;Please Note:&lt;/strong&gt; The binary will be a linux executable, so you will need to run it in a linux environment. If you do not have a linux environment, you can use &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;WSL&lt;/a&gt; or run it using the docker container called &lt;code&gt;isg&lt;/code&gt; we just built &lt;strong&gt;using a Linux shell or PowerShell&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm -v ${PWD}:/home/Infinite-Storage-Glitch isg ./target/release/isg_4real&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are using &lt;code&gt;cmd&lt;/code&gt; on Windows, you will need to use &lt;code&gt;%cd%&lt;/code&gt; instead of &lt;code&gt;${PWD}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Archive to zip all the files you will be uploading&lt;/li&gt; &#xA; &lt;li&gt;Run the executable&lt;/li&gt; &#xA; &lt;li&gt;Use the embed option on the archive (&lt;strong&gt;THE VIDEO WILL BE SEVERAL TIMES LARGER THAN THE FILE&lt;/strong&gt;, 4x in case of optimal compression resistance preset)&lt;/li&gt; &#xA; &lt;li&gt;Upload the video to your YouTube channel. You probably want to keep it up as unlisted&lt;/li&gt; &#xA; &lt;li&gt;Use the download option to get the video back&lt;/li&gt; &#xA; &lt;li&gt;Use the dislodge option to get your files back from the downloaded video&lt;/li&gt; &#xA; &lt;li&gt;PROFIT&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/96934612/219563769-c05370e9-3f40-406a-85b8-eca14a118be8.png&#34; alt=&#34;2023-02-16_22-12&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flashing lights warning !!!1!1&lt;/strong&gt; - &lt;a href=&#34;https://www.youtube.com/watch?v=8I4fd_Sap-g&#34;&gt;YouTube Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try to use the program on this video and find the files hidden inside.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;No it&#39;s not just a rick roll.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Explanation 4 nerds&lt;/h2&gt; &#xA;&lt;p&gt;The principle behind this is pretty simple. All files are made of bytes and bytes can be interpreted as numbers ranging from 0-255. This number can be represented with pixels using one of two modes: RGB or binary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RGB&lt;/strong&gt;: The cooler mode. Every byte perfectly fits inside one of the colors of an rgb pixel. One rgb pixel can contain 3 bytes at a time. You just keep adding pixels like this until you run out of data. It is leagues more efficient and quick than binary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binary&lt;/strong&gt;: Born from YouTube compression being absolutely brutal. RGB mode is very sensitive to compression as a change in even one point of one of the colors of one of the pixels dooms the file to corruption. Black and white pixels are a lot harder to mess up. Every pixel is either bright representing a 1 or dark representing a 0. We string these bits together to get bytes and continue until we run out of data.&lt;/p&gt; &#xA;&lt;p&gt;Both of these modes can be corrupted by compression, so we need to increase the size of the pixels to make it less compressable. 2x2 blocks of pixels seem to be good enough in binary mode.&lt;/p&gt; &#xA;&lt;p&gt;To make it easier on the user, we also include all the relevant settings used to create the video on the first frame of the video. This allows the program to know what mode the video is in and what size to use in order to avoid making the user remember.&lt;/p&gt; &#xA;&lt;h1&gt;Final comments&lt;/h1&gt; &#xA;&lt;p&gt;I appreciate any and all roasting of the code so I can improve.&lt;/p&gt; &#xA;&lt;p&gt;Do what you want with the code, but credit would be much appreciated and if you have any trouble with ISG, please contact me over discord.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>seanmonstar/reqwest</title>
    <updated>2023-05-28T02:08:47Z</updated>
    <id>tag:github.com,2023-05-28:/seanmonstar/reqwest</id>
    <link href="https://github.com/seanmonstar/reqwest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy and powerful Rust HTTP Client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reqwest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/reqwest&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/reqwest.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/reqwest&#34;&gt;&lt;img src=&#34;https://docs.rs/reqwest/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/reqwest.svg?sanitize=true&#34; alt=&#34;MIT/Apache-2 licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seanmonstar/reqwest/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/seanmonstar/reqwest/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An ergonomic, batteries-included HTTP Client for Rust.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plain bodies, JSON, urlencoded, multipart&lt;/li&gt; &#xA; &lt;li&gt;Customizable redirect policy&lt;/li&gt; &#xA; &lt;li&gt;HTTP Proxies&lt;/li&gt; &#xA; &lt;li&gt;HTTPS via system-native TLS (or optionally, rustls)&lt;/li&gt; &#xA; &lt;li&gt;Cookie Store&lt;/li&gt; &#xA; &lt;li&gt;WASM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanmonstar/reqwest/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This asynchronous example uses &lt;a href=&#34;https://tokio.rs&#34;&gt;Tokio&lt;/a&gt; and enables some optional features, so your &lt;code&gt;Cargo.toml&lt;/code&gt; could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;reqwest = { version = &#34;0.11&#34;, features = [&#34;json&#34;] }&#xA;tokio = { version = &#34;1&#34;, features = [&#34;full&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use std::collections::HashMap;&#xA;&#xA;#[tokio::main]&#xA;async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let resp = reqwest::get(&#34;https://httpbin.org/ip&#34;)&#xA;        .await?&#xA;        .json::&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt;()&#xA;        .await?;&#xA;    println!(&#34;{:#?}&#34;, resp);&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Blocking Client&lt;/h2&gt; &#xA;&lt;p&gt;There is an optional &#34;blocking&#34; client API that can be enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;reqwest = { version = &#34;0.11&#34;, features = [&#34;blocking&#34;, &#34;json&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use std::collections::HashMap;&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let resp = reqwest::blocking::get(&#34;https://httpbin.org/ip&#34;)?&#xA;        .json::&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt;()?;&#xA;    println!(&#34;{:#?}&#34;, resp);&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;On Linux:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenSSL 1.0.1, 1.0.2, 1.1.0, or 1.1.1 with headers (see &lt;a href=&#34;https://github.com/sfackler/rust-openssl&#34;&gt;https://github.com/sfackler/rust-openssl&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Windows and macOS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nothing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reqwest uses &lt;a href=&#34;https://github.com/sfackler/rust-native-tls&#34;&gt;rust-native-tls&lt;/a&gt;, which will use the operating system TLS framework if available, meaning Windows and macOS. On Linux, it will use OpenSSL 1.1.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://apache.org/licenses/LICENSE-2.0&#34;&gt;http://apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>