<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-12T02:04:42Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>casey/ord</title>
    <updated>2023-02-12T02:04:42Z</updated>
    <id>tag:github.com,2023-02-12:/casey/ord</id>
    <link href="https://github.com/casey/ord" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üëÅ‚Äçüó® Rare and exotic sats&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;ord&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; is an index, block explorer, and command-line wallet. It is experimental software with no warranty. See &lt;a href=&#34;https://raw.githubusercontent.com/casey/ord/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Ordinal theory imbues satoshis with numismatic value, allowing them to collected and traded as curios.&lt;/p&gt; &#xA;&lt;p&gt;Ordinal numbers are serial numbers for satoshis, assigned in the order in which they are mined, and preserved across transactions.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.ordinals.com&#34;&gt;the docs&lt;/a&gt; for documentation and guides.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/casey/ord/master/bip.mediawiki&#34;&gt;the BIP&lt;/a&gt; for a technical description of the assignment and transfer algorithm.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/users/casey/projects/3/&#34;&gt;the project board&lt;/a&gt; for currently prioritized issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/casey/ord/milestones&#34;&gt;milestones&lt;/a&gt; to get a sense of where the project is and where it&#39;s going.&lt;/p&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;https://discord.gg/87cjuz4FYg&#34;&gt;the Discord server&lt;/a&gt; to chat with fellow ordinal degenerates.&lt;/p&gt; &#xA;&lt;h2&gt;Wallet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; relies on Bitcoin Core for private key management and transaction signing. This has a number of implications that you must understand in order to use &lt;code&gt;ord&lt;/code&gt; wallet commands safely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Bitcoin Core is not aware of inscriptions and does not perform sat control. Using &lt;code&gt;bitcoin-cli&lt;/code&gt; commands and RPC calls with &lt;code&gt;ord&lt;/code&gt; wallets may lead to loss of inscriptions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ord wallet&lt;/code&gt; commands automatically load the &lt;code&gt;ord&lt;/code&gt; wallet given by the &lt;code&gt;--wallet&lt;/code&gt; option, which defaults to &#39;ord&#39;. Keep in mind that after running an &lt;code&gt;ord wallet&lt;/code&gt; command, an &lt;code&gt;ord&lt;/code&gt; wallet may be loaded.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Because &lt;code&gt;ord&lt;/code&gt; has access to your Bitcoin Core wallets, &lt;code&gt;ord&lt;/code&gt; should not be used with wallets that contain a material amount of funds. Keep ordinal and cardinal wallets segregated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pre-alpha wallet migration&lt;/h3&gt; &#xA;&lt;p&gt;Alpha &lt;code&gt;ord&lt;/code&gt; wallets are not compatible with wallets created by previous versions of &lt;code&gt;ord&lt;/code&gt;. To migrate, use &lt;code&gt;ord wallet send&lt;/code&gt; from the old wallet to send sats and inscriptions to addresses generated by the new wallet with &lt;code&gt;ord wallet receive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; is written in Rust and can be built from &lt;a href=&#34;https://github.com/casey/ord&#34;&gt;source&lt;/a&gt;. Pre-built binaries are available on the &lt;a href=&#34;https://github.com/casey/ord/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install the latest pre-built binary from the command line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -fsLS https://ordinals.com/install.sh | bash -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once &lt;code&gt;ord&lt;/code&gt; is installed, you should be able to run &lt;code&gt;ord --version&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;On Debian and Ubuntu, &lt;code&gt;ord&lt;/code&gt; requires &lt;code&gt;libssl-dev&lt;/code&gt; when building from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need Rust:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build &lt;code&gt;ord&lt;/code&gt; from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/casey/ord.git&#xA;cd ord&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; requires &lt;code&gt;rustc&lt;/code&gt; version 1.67.0 or later. Run &lt;code&gt;rustc --version&lt;/code&gt; to ensure you have this version. Run &lt;code&gt;rustup update&lt;/code&gt; to get the latest stable release.&lt;/p&gt; &#xA;&lt;h2&gt;Syncing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; requires a synced &lt;code&gt;bitcoind&lt;/code&gt; node with &lt;code&gt;-txindex&lt;/code&gt; to build the index of satoshi locations. &lt;code&gt;ord&lt;/code&gt; communicates with &lt;code&gt;bitcoind&lt;/code&gt; via RPC.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;bitcoind&lt;/code&gt; is run locally by the same user, without additional configuration, &lt;code&gt;ord&lt;/code&gt; should find it automatically by reading the &lt;code&gt;.cookie&lt;/code&gt; file from &lt;code&gt;bitcoind&lt;/code&gt;&#39;s datadir, and connecting using the default RPC port.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;bitcoind&lt;/code&gt; is not on mainnet, is not run by the same user, has a non-default datadir, or a non-default port, you&#39;ll need to pass additional flags to &lt;code&gt;ord&lt;/code&gt;. See &lt;code&gt;ord --help&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; uses &lt;a href=&#34;https://docs.rs/env_logger/latest/env_logger/&#34;&gt;env_logger&lt;/a&gt;. Set the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable in order to turn on logging. For example, run the server and show &lt;code&gt;info&lt;/code&gt;-level log messages and above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ RUST_LOG=info cargo run server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;New Releases&lt;/h2&gt; &#xA;&lt;p&gt;Release commit messages use the following template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Release x.y.z&#xA;&#xA;- Bump version: x.y.z ‚Üí x.y.z&#xA;- Update changelog&#xA;- Update dependencies&#xA;- Update database schema version&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hikari-no-yume/touchHLE</title>
    <updated>2023-02-12T02:04:42Z</updated>
    <id>tag:github.com,2023-02-12:/hikari-no-yume/touchHLE</id>
    <link href="https://github.com/hikari-no-yume/touchHLE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-level emulator for iPhone OS apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;touchHLE: high-level emulator for iPhone OS apps&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;touchHLE&lt;/strong&gt; is a high-level emulator (HLE) for iPhone OS apps. It runs on modern desktop operating systems, and is written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;As an HLE, touchHLE is radically different from a low-level emulator (LLE) like QEMU. The only code the &lt;a href=&#34;https://github.com/merryhime/dynarmic&#34;&gt;emulated CPU&lt;/a&gt; executes is the app binary and &lt;a href=&#34;https://raw.githubusercontent.com/hikari-no-yume/touchHLE/trunk/touchHLE_dylibs/&#34;&gt;a handful of libraries&lt;/a&gt;; touchHLE takes the place of iPhone OS and provides its own implementations of the system frameworks (Foundation, UIKit, OpenGL ES, OpenAL, etc).&lt;/p&gt; &#xA;&lt;p&gt;The goal of this project is to run games from the early days of iOS. Only iPhone/iPod touch apps for iPhone OS 2.x have been tested so far. Modern/64-bit iOS app support is explicitly a non-goal, and support for apps that aren&#39;t games is unlikely to be prioritized due to the complexity. On the other hand, it&#39;s likely that we&#39;ll attempt to support apps for some newer 32-bit versions (especially 3.x and 4.x) and the iPad in future. iPhone OS 1.x support might be attempted also.&lt;/p&gt; &#xA;&lt;p&gt;Visit our homepage! &lt;a href=&#34;https://touchhle.org/&#34;&gt;https://touchhle.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re curious about the history and motivation behind the project, you might want to read &lt;a href=&#34;https://hikari.noyu.me/blog/2023-02-06-touchhle-anouncement-thread-tech-games-me-and-passion-projects.html&#34;&gt;the original announcement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Important disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is not affiliated with or endorsed by Apple Inc in any way. iPhone, iPhone OS, iOS, iPod, iPod touch and iPad may be trademarks of Apple Inc in the United States or other countries.&lt;/p&gt; &#xA;&lt;p&gt;Only use touchHLE to emulate software you legally own.&lt;/p&gt; &#xA;&lt;h2&gt;Platform support&lt;/h2&gt; &#xA;&lt;p&gt;touchHLE has been tested and is to be considered supported on x64 Windows and x64 macOS. It may be possible to build it on Linux and on some AArch64 systems (at least one person has succeeded), but we make no guarantees right now. If you&#39;re an Apple Silicon Mac user: don&#39;t worry, the x64 macOS build reportedly works under Rosetta.&lt;/p&gt; &#xA;&lt;p&gt;Architectures other than x64 and AArch64 are completely unsupported, and this is unlikely to change.&lt;/p&gt; &#xA;&lt;p&gt;It would be desirable to eventually support Android. That is probably not too much work.&lt;/p&gt; &#xA;&lt;p&gt;Input methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For simulated touch input, there are two options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mouse/trackpad input (tap/hold/drag by pressing the left mouse button)&lt;/li&gt; &#xA;   &lt;li&gt;Virtual cursor using the right analog stick on a game controller (tap/hold/drag by pressing the stick or the right shoulder button)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For simulated accelerometer input (tilt controls), a game controller with a left analog stick is currently required.&lt;/strong&gt; Real accelerometer support will come soon, but it&#39;s not in the first release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development status&lt;/h2&gt; &#xA;&lt;p&gt;Real development started in December 2022, and this is so far &lt;a href=&#34;https://hikari.noyu.me/&#34;&gt;a single person&lt;/a&gt;&#39;s full-time passion project. There&#39;s only a single release so far and no promises can be made about the future. Please be patient.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the supported functionality is not much more than what the single supported app uses. The code tries to be reasonably complete where it can, though.&lt;/p&gt; &#xA;&lt;h2&gt;App support&lt;/h2&gt; &#xA;&lt;p&gt;For pretty screenshots and video, &lt;a href=&#34;https://touchhle.org/&#34;&gt;check out the home page!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Super Monkey Ball (2008, App Store launch title), tested versions 1.0, 1.02, 1.3 (1.3 is the most heavily tested) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fully playable, everything works. Among other things: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Sound effects and music&lt;/li&gt; &#xA;     &lt;li&gt;Logo, title, menu, ranking, settings and credits screens&lt;/li&gt; &#xA;     &lt;li&gt;Main Game, Instant Game (Shuffle Play) and Practice game modes&lt;/li&gt; &#xA;     &lt;li&gt;Save game persistence (settings, unlocks, records)&lt;/li&gt; &#xA;     &lt;li&gt;Continuing a previous game after closing and reopening the app&lt;/li&gt; &#xA;     &lt;li&gt;The tutorial (in the versions that have it)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Consistent full fps (30fps) in release builds even on a fairly underpowered laptop (2017 Retina MacBook, passively cooled!)&lt;/li&gt; &#xA;   &lt;li&gt;Special enhancement: can be run with increased internal resolution via the &lt;code&gt;--scale-hack=&lt;/code&gt; option. Resolutions up to circa 4K have been tested. No noticeable performance impact at small scales (2√ó, 3√ó).&lt;/li&gt; &#xA;   &lt;li&gt;Recommended game controller settings: &lt;code&gt;--y-tilt-offset=24&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Known issue: memory leak of approximately 0.2MB/second on macOS. All obvious issues in the emulator itself have been ruled out, so it might be a problem in macOS itself, SDL2, or some other dependency. Thankfully this is slow enough that it shouldn&#39;t be a problem for most play sessions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No other apps are known to work right now. This will surely improve in future. :)&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;First obtain touchHLE, either a &lt;a href=&#34;https://github.com/hikari-no-yume/touchHLE/releases&#34;&gt;binary release&lt;/a&gt; or by building it yourself (see the next section).&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll then need an app that you can run. See the ‚ÄúApp support‚Äù section above. Note that the app binary must be decrypted to be usable.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no graphical user interface right now, so you&#39;ll usually need to use the command line to run touchHLE. For first-time users on Windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Move the &lt;code&gt;.ipa&lt;/code&gt; file or &lt;code&gt;.app&lt;/code&gt; bundle to the same folder as &lt;code&gt;touchHLE.exe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Hold the Shift key and Right-click on the empty space in the folder window.&lt;/li&gt; &#xA; &lt;li&gt;Click ‚ÄúOpen with PowerShell‚Äù.&lt;/li&gt; &#xA; &lt;li&gt;You can then type &lt;code&gt;.\touchHLE.exe &#34;YourAppNameHere.ipa&#34;&lt;/code&gt; (or &lt;code&gt;.app&lt;/code&gt; as appropriate) and press enter.&lt;/li&gt; &#xA; &lt;li&gt;You may want to type &lt;code&gt;.\touchHLE.exe&lt;/code&gt; to see the available options for things like game controllers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Currently language detection doesn&#39;t work on Windows. To change the language preference reported to the app, you can type &lt;code&gt;SET LANG=&lt;/code&gt; followed by an ISO 639-1 language code, then press Enter, before running the app. Some common language codes are: &lt;code&gt;en&lt;/code&gt; (English), &lt;code&gt;de&lt;/code&gt; (Deutsch), &lt;code&gt;es&lt;/code&gt; (espa√±ol), &lt;code&gt;fr&lt;/code&gt; (fran√ßais), &lt;code&gt;it&lt;/code&gt; (italiano) and &lt;code&gt;ja&lt;/code&gt; (Êó•Êú¨Ë™û). Bear in mind that it&#39;s the app itself that determines which languages are supported, not the emulator.&lt;/p&gt; &#xA;&lt;p&gt;Any data saved by the app (e.g. &lt;strong&gt;saved games&lt;/strong&gt;) are stored in the &lt;code&gt;touchHLE_sandbox&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If the emulator crashes almost immediately while running a game &lt;strong&gt;listed as supported&lt;/strong&gt;, please check whether you have any overlays turned on like the Steam overlay, Discord overlay, RivaTuner Statistics Server, etc. Sadly, as useful as these tools are, they work by injecting themselves into other apps or games and don&#39;t always clean up after themselves, so they can break touchHLE‚Ä¶ it&#39;s not our fault. üò¢ Currently only RivaTuner Statistics Server is known to be a problem. If you find another overlay that doesn&#39;t work, please tell us about it.&lt;/p&gt; &#xA;&lt;h1&gt;Building and contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see the BUILDING.md and CONTRIBUTING.md files in the git repo.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;touchHLE ¬© 2023 hikari_no_yume and other contributors.&lt;/p&gt; &#xA;&lt;p&gt;The source code of touchHLE itself (not its dependencies) is licensed under the Mozilla Public License, version 2.0.&lt;/p&gt; &#xA;&lt;p&gt;Due to license compatibility concerns, binaries are under the GNU General Public License version 3 or later.&lt;/p&gt; &#xA;&lt;p&gt;For a best effort listing of all licenses of dependencies, build touchHLE and pass the &lt;code&gt;--copyright&lt;/code&gt; flag when running it.&lt;/p&gt; &#xA;&lt;p&gt;Please note that different licensing terms apply to the bundled dynamic libraries (in &lt;code&gt;touchHLE_dylibs/&lt;/code&gt;) and fonts (in &lt;code&gt;touchHLE_fonts/&lt;/code&gt;). Please consult the respective directories for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;p&gt;We stand on the shoulders of giants. Thank you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everyone who has contributed to the project or supported it financially.&lt;/li&gt; &#xA; &lt;li&gt;The authors of and contributors to the many libraries used by this project: &lt;a href=&#34;https://github.com/merryhime/dynarmic&#34;&gt;dynarmic&lt;/a&gt;, &lt;a href=&#34;https://github.com/flier/rust-macho&#34;&gt;rust-macho&lt;/a&gt;, &lt;a href=&#34;https://libsdl.org/&#34;&gt;SDL&lt;/a&gt;, &lt;a href=&#34;https://github.com/Rust-SDL2/rust-sdl2&#34;&gt;rust-sdl2&lt;/a&gt;, &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb_image&lt;/a&gt;, &lt;a href=&#34;https://github.com/kcat/openal-soft&#34;&gt;openal-soft&lt;/a&gt;, &lt;a href=&#34;https://github.com/ruuda/hound&#34;&gt;hound&lt;/a&gt;, &lt;a href=&#34;https://github.com/rustaudio/caf&#34;&gt;caf&lt;/a&gt;, &lt;a href=&#34;https://gitlab.redox-os.org/redox-os/rusttype&#34;&gt;RustType&lt;/a&gt;, &lt;a href=&#34;https://github.com/liberationfonts/liberation-fonts&#34;&gt;the Liberation fonts&lt;/a&gt;, &lt;a href=&#34;https://github.com/googlefonts/noto-cjk&#34;&gt;the Noto CJK fonts&lt;/a&gt;, &lt;a href=&#34;https://github.com/ebarnard/rust-plist&#34;&gt;rust-plist&lt;/a&gt;, &lt;a href=&#34;https://github.com/brendanzab/gl-rs&#34;&gt;gl-rs&lt;/a&gt;, &lt;a href=&#34;https://github.com/onur/cargo-license&#34;&gt;cargo-license&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-lang/cc-rs&#34;&gt;cc-rs&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-lang/cmake-rs&#34;&gt;cmake-rs&lt;/a&gt;, and the Rust standard library.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust project&lt;/a&gt; generally.&lt;/li&gt; &#xA; &lt;li&gt;The various people out there who&#39;ve documented the iPhone OS platform, officially or otherwise. Much of this documentation is linked to within this codebase!&lt;/li&gt; &#xA; &lt;li&gt;The iOS hacking/jailbreaking community.&lt;/li&gt; &#xA; &lt;li&gt;The Free Software Foundation, for making libgcc and libstdc++ copyleft and therefore saving this project from ABI hell.&lt;/li&gt; &#xA; &lt;li&gt;The National Security Agency of the United States of America, for &lt;a href=&#34;https://ghidra-sre.org/&#34;&gt;Ghidra&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Many friends who took an interest in the project and gave suggestions and encouragement.&lt;/li&gt; &#xA; &lt;li&gt;Developers of early iPhone OS apps. What treasures you created!&lt;/li&gt; &#xA; &lt;li&gt;Apple, and NeXT before them, for creating such fantastic platforms.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>geph-official/geph4-client</title>
    <updated>2023-02-12T02:04:42Z</updated>
    <id>tag:github.com,2023-02-12:/geph-official/geph4-client</id>
    <link href="https://github.com/geph-official/geph4-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Geph (Ëø∑ÈúßÈÄö) is a modular Internet censorship circumvention system designed specifically to deal with national filtering.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>