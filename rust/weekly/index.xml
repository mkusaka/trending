<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:58:42Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>oxc-project/oxc</title>
    <updated>2023-12-24T01:58:42Z</updated>
    <id>tag:github.com,2023-12-24:/oxc-project/oxc</id>
    <link href="https://github.com/oxc-project/oxc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öì A collection of JavaScript tools written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-dark-transparent.png&#34; width=&#34;600&#34;&gt; &#xA;  &lt;img alt=&#34;OXC Logo&#34; src=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-white.png&#34; width=&#34;600&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/oxc-project/oxc/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/oxc-project/oxc&#34;&gt;&lt;img src=&#34;https://codecov.io/github/oxc-project/oxc/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codspeed.io/oxc-project/oxc&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://codspeed.io/badge.json&#34; alt=&#34;CodSpeed Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/Boshen&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/Boshen&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oxc-project.github.io/oxc/playground&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Playground-blue?color=9BE4E0&#34; alt=&#34;Playground&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;‚öì Oxc&lt;/h2&gt; &#xA;&lt;p&gt;The Oxidation Compiler is creating a collection of high-performance tools for JavaScript and TypeScript.&lt;/p&gt; &#xA;&lt;p&gt;Oxc is building a parser, linter, formatter, transpiler, minifier, resolver ... all written in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;üí° Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;This project shares the same philosophies as &lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; and &lt;a href=&#34;https://beta.ruff.rs&#34;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;JavaScript tooling could be rewritten in a more performant language.&lt;/li&gt; &#xA; &lt;li&gt;An integrated toolchain can tap into efficiencies that are not available to a disparate set of tools.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The linter is ready to catch mistakes for you. It comes with over 60 default rules and no configuration is required.&lt;/p&gt; &#xA;&lt;p&gt;To start using, install &lt;a href=&#34;https://www.npmjs.com/package/oxlint&#34;&gt;oxlint&lt;/a&gt; or via &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx oxlint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To give you an idea of its capabilities, here is an example from the &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt; repository, which finishes linting 4000+ files in 0.5 seconds.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34; align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/linter-screenshot.png&#34; width=&#34;60%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Performance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The parser aim to be the fastest Rust-based ready-for-production parser.&lt;/li&gt; &#xA; &lt;li&gt;The linter is more than 50 times faster than &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, and scales with the number of CPU cores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p float=&#34;left&#34; align=&#34;middle&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/bench-javascript-parser-written-in-rust/main/bar-graph.svg?sanitize=true&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/bench-javascript-linter/main/bar-graph.svg?sanitize=true&#34; width=&#34;49%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚å®Ô∏è Programming Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;Individual crates are published, you may use them to build your own JavaScript tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The umbrella crate &lt;a href=&#34;https://docs.rs/oxc&#34;&gt;oxc&lt;/a&gt; exports all public crates from this repository.&lt;/li&gt; &#xA; &lt;li&gt;The AST and parser crates &lt;a href=&#34;https://docs.rs/oxc_ast&#34;&gt;oxc_ast&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/oxc_parser&#34;&gt;oxc_parser&lt;/a&gt; are production ready.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;crates/*/examples&lt;/code&gt; for example usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While Rust has gained a reputation for its comparatively slower compilation speed, we have dedicated significant effort to fine-tune the Rust compilation speed. Our aim is to minimize any impact on your development workflow, ensuring that developing your own Oxc based tools remains a smooth and efficient experience.&lt;/p&gt; &#xA;&lt;p&gt;This is demonstrated by our &lt;a href=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;CI runs&lt;/a&gt;, where warm runs complete in 5 minutes.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may use the parser via napi: &lt;a href=&#34;https://www.npmjs.com/package/oxc-parser&#34;&gt;oxc-parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üéØ Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ast-and-parser&#34;&gt;AST and Parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-linter&#34;&gt;Linter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-resolver&#34;&gt;Resolver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-minifier&#34;&gt;Minifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-formatter&#34;&gt;Formatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-transpiler&#34;&gt;Transpiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ezno-type-checker&#34;&gt;Ezno Type Checker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üî∏ AST and Parser&lt;/h3&gt; &#xA;&lt;p&gt;Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools. By developing our parser, we have the opportunity to explore and implement well-researched performance techniques.&lt;/p&gt; &#xA;&lt;p&gt;While many existing JavaScript tools rely on &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; as their AST specification, a notable drawback is its abundance of ambiguous nodes. This ambiguity often leads to confusion during development with &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Oxc AST differs slightly from the &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; AST by removing ambiguous nodes and introducing distinct types. For example, instead of using a generic &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; &lt;code&gt;Identifier&lt;/code&gt;, the Oxc AST provides specific types such as &lt;code&gt;BindingIdentifier&lt;/code&gt;, &lt;code&gt;IdentifierReference&lt;/code&gt;, and &lt;code&gt;IdentifierName&lt;/code&gt;. This clear distinction greatly enhances the development experience by aligning more closely with the ECMAScript specification.&lt;/p&gt; &#xA;&lt;h4&gt;üèÜ Parser Performance&lt;/h4&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/Boshen/bench-javascript-parser-written-in-rust&#34;&gt;benchmark&lt;/a&gt; reveals that the Oxc parser surpasses the speed of the &lt;a href=&#34;https://swc.rs&#34;&gt;swc&lt;/a&gt; parser by approximately 2 times and the &lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; parser by 3 times.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How is it so fast?&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;AST is allocated in a memory arena (&lt;a href=&#34;https://crates.io/crates/bumpalo&#34;&gt;bumpalo&lt;/a&gt;) for fast AST memory allocation and deallocation.&lt;/li&gt; &#xA;  &lt;li&gt;Short strings are inlined by &lt;a href=&#34;https://crates.io/crates/compact_str&#34;&gt;CompactString&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;No other heap allocations are done except the above two.&lt;/li&gt; &#xA;  &lt;li&gt;Scope binding, symbol resolution and some syntax errors are not done in the parser, they are delegated to the semantic analyzer.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üî∏ Linter&lt;/h3&gt; &#xA;&lt;p&gt;The linter embraces convention over configuration, eliminating the need for extensive configuration and plugin setup. Unlike other linters like &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, which often require intricate configurations and plugin installations (e.g. &lt;a href=&#34;https://typescript-eslint.io&#34;&gt;@typescript-eslint&lt;/a&gt;), our linter only requires a single command that you can immediately run on your codebase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx oxlint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also plan to port essential plugins such as &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-import&#34;&gt;eslint-plugin-import&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-jest&#34;&gt;eslint-plugin-jest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;üèÜ Linter Performance&lt;/h4&gt; &#xA;&lt;p&gt;The linter is 50 - 100 times faster than &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; depending on the number of rules and number of CPU cores used. It completes in less than a second for most codebases with a few hundred files and completes in a few seconds for larger monorepos. See &lt;a href=&#34;https://github.com/Boshen/bench-javascript-linter&#34;&gt;bench-javascript-linter&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;As an upside, the binary is approximately 3MB, whereas &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; and its associated plugin dependencies can easily exceed 100.&lt;/p&gt; &#xA;&lt;p&gt;You may also download the linter binary from the &lt;a href=&#34;https://github.com/oxc-project/oxc/releases/latest&#34;&gt;latest release tag&lt;/a&gt; as a standalone binary, this lets you run the linter without a Node.js installation in your CI.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How is it so fast?&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Oxc parser is used.&lt;/li&gt; &#xA;  &lt;li&gt;AST visit is a fast operation due to linear memory scan from the memory arena.&lt;/li&gt; &#xA;  &lt;li&gt;Files are linted in a multi-threaded environment, so scales with the total number of CPU cores.&lt;/li&gt; &#xA;  &lt;li&gt;Every single lint rule is tuned for performance.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Linter Plugin&lt;/h4&gt; &#xA;&lt;p&gt;We are currently developing a DSL-based plugin system. The plugin system uses &lt;a href=&#34;https://github.com/obi1kenobi/trustfall&#34;&gt;trustfall&lt;/a&gt; as its query engine and a subset of GraphQL as its query language.&lt;/p&gt; &#xA;&lt;p&gt;You will not need to use JavaScript or Rust to write a plugin, this is useful for QAs and security researchers.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Resolver&lt;/h3&gt; &#xA;&lt;p&gt;Module resolution plays a crucial role in JavaScript tooling, especially for tasks like multi-file analysis or bundling. However, it can often become a performance bottleneck. To address this, we are actively working on porting &lt;a href=&#34;https://github.com/webpack/enhanced-resolve&#34;&gt;enhanced-resolve&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-import&#34;&gt;eslint-plugin-import&lt;/a&gt; will be our first application for the resolver, since it is currently a performance and complexity blocker for a lot of projects.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Transpiler&lt;/h3&gt; &#xA;&lt;p&gt;A transpiler is responsible for turning higher versions of ECMAScript to a lower version that can be used in older browsers. We are currently focusing on an esnext to es2015 transpiler. See the &lt;a href=&#34;https://github.com/oxc-project/oxc/issues/974&#34;&gt;umbrella issue&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Minifier&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript minification plays a crucial role in optimizing website performance as it reduces the amount of data sent to users, resulting in faster page loads. This holds tremendous economic value, particularly for e-commerce websites, where every second can equate to millions of dollars.&lt;/p&gt; &#xA;&lt;p&gt;However, existing minifiers typically require a trade-off between compression quality and speed. You have to choose between the slowest for the best compression or the fastest for less compression. But what if we could develop a faster minifier without compromising on compression?&lt;/p&gt; &#xA;&lt;p&gt;We are actively working on a prototype that aims to achieve this goal, by porting all test cases from well-known minifiers such as &lt;a href=&#34;https://github.com/google/closure-compiler&#34;&gt;google-closure-compiler&lt;/a&gt;, &lt;a href=&#34;https://terser.org&#34;&gt;terser&lt;/a&gt;, &lt;a href=&#34;https://esbuild.github.io/&#34;&gt;esbuild&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tdewolff/minify&#34;&gt;tdewolff-minify&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Preliminary results indicate that we are on track to achieve our objectives. With the Oxc minifier, you can expect faster minification times without sacrificing compression quality.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Formatter&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://prettier.io&#34;&gt;prettier&lt;/a&gt; has established itself as the de facto code formatter for JavaScript, there is a significant demand in the developer community for a less opinionated alternative. Recognizing this need, our ambition is to undertake research and development to create a new JavaScript formatter that offers increased flexibility and customization options. Unfortunately we are currently lacking the resources to do so.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Ezno Type Checker&lt;/h3&gt; &#xA;&lt;p&gt;Developed by @kaleidawave, &lt;a href=&#34;https://github.com/kaleidawave/ezno&#34;&gt;ezno&lt;/a&gt; is a TypeScript checker written in Rust with a focus on static analysis and runtime performance. You may read the &lt;a href=&#34;https://kaleidawave.github.io/posts/introducing-ezno/&#34;&gt;announcement blog post&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The type checker is available via &lt;code&gt;npx oxidation-compiler@latest check path&lt;/code&gt; and the &lt;a href=&#34;https://oxc-project.github.io/oxc/playground&#34;&gt;playground&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidance.&lt;/p&gt; &#xA;&lt;p&gt;Check out some of the &lt;a href=&#34;https://github.com/oxc-project/oxc/contribute&#34;&gt;good first issues&lt;/a&gt; or ask us on &lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are unable to contribute by code, you can still participate by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a &lt;a href=&#34;https://github.com/oxc-project/oxc/stargazers&#34;&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; &#xA; &lt;li&gt;Join us on &lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;Discord&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/boshen_c&#34;&gt;Follow me on twitter&lt;/a&gt; and tweet about this project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Learning Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My small tutorial on &lt;a href=&#34;https://oxc-project.github.io/javascript-parser-in-rust&#34;&gt;how to write a JavaScript Parser in Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;My small article &lt;a href=&#34;https://rustmagazine.org/issue-3/javascript-compiler/&#34;&gt;Pursuit of Performance on Building a JavaScript Compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://craftinginterpreters.com&#34;&gt;Crafting Interpreters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vimeo.com/649009599&#34;&gt;Andrew Kelley - Practical DOD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üßë‚Äçüíª Maintenance&lt;/h2&gt; &#xA;&lt;p&gt;Oxc is being maintained by &lt;a href=&#34;https://github.com/boshen&#34;&gt;Boshen&lt;/a&gt; as the project lead with the help of &lt;a href=&#34;https://github.com/oxc-project/oxc/graphs/contributors&#34;&gt;contributors&lt;/a&gt; from all over the world.&lt;/p&gt; &#xA;&lt;p&gt;Rules of thumb:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;APIs should be simple and well-documented.&lt;/li&gt; &#xA; &lt;li&gt;All performance issues (runtime and compilation speed) are considered as bugs in this project.&lt;/li&gt; &#xA; &lt;li&gt;Third-party dependencies should be minimal.&lt;/li&gt; &#xA; &lt;li&gt;Monitor code coverage for unused code. Aim for 99% code coverage.&lt;/li&gt; &#xA; &lt;li&gt;Embrace data-oriented design.&lt;/li&gt; &#xA; &lt;li&gt;Prefer smaller PRs. Try &lt;a href=&#34;https://graphite.dev&#34;&gt;graphite.dev&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; - &lt;a href=&#34;https://github.com/ematipico&#34;&gt;@ematipico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs&#34;&gt;Ruff&lt;/a&gt; - &lt;a href=&#34;https://github.com/charliermarsh&#34;&gt;@charliermarsh&lt;/a&gt;, &lt;a href=&#34;https://github.com/MichaReiser&#34;&gt;@MichaReiser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quick-lint-js.com&#34;&gt;quick-lint-js&lt;/a&gt; - &lt;a href=&#34;https://github.com/strager&#34;&gt;@strager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/jfmengels/elm-review/latest&#34;&gt;elm-review&lt;/a&gt; - &lt;a href=&#34;https://github.com/jfmengels&#34;&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks go to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domonji&#34;&gt;@domonji&lt;/a&gt; for contribution to the TypeScript parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guan-wy&#34;&gt;@guan-wy&lt;/a&gt; for the &lt;a href=&#34;https://github.com/Boshen/oxc-assets&#34;&gt;project logo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And also&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kaleidawave&#34;&gt;@kaleidawave&lt;/a&gt; for &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ezno-type-checker&#34;&gt;Ezno Type Checker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zackradisic&#34;&gt;@zackradisic&lt;/a&gt; for &lt;a href=&#34;https://github.com/zackradisic/tyvm&#34;&gt;tyvm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/u9g&#34;&gt;@u9g&lt;/a&gt; for the work in progress &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/crates/oxc_linter_plugin&#34;&gt;oxc_linter_plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìñ License&lt;/h2&gt; &#xA;&lt;p&gt;Oxc is free and open-source software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Oxc partially copies code from the following projects, their licenses are listed in &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/THIRD-PARTY-LICENSE&#34;&gt;&lt;strong&gt;Third-party library licenses&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eslint/eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint&#34;&gt;typescript-eslint/typescript-eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/import-js/eslint-plugin-import&#34;&gt;import-js/eslint-plugin-import&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/import-js/eslint-plugin-import/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jest-community/eslint-plugin-jest&#34;&gt;jest-community/eslint-plugin-jest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jest-community/eslint-plugin-jest/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript&#34;&gt;microsoft/TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/main/LICENSE.txt&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;biomejs/biome&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/biomejs/biome/raw/main/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus&#34;&gt;mozilla-spidermonkey/jsparagus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt; &lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-APACHE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier/prettier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prettier/prettier/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn&#34;&gt;acorn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn/raw/master/acorn/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette&#34;&gt;zkat/miette&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sindresorhus/globals&#34;&gt;sindresorhus/globals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sindresorhus/globals/raw/main/license&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser&#34;&gt;terser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanw/esbuild&#34;&gt;evanw/esbuild&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanw/esbuild/raw/main/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/closure-compiler&#34;&gt;google/closure-compiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/closure-compiler#closure-compiler-license&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tdewolff/minify&#34;&gt;tdewolff/minify&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tdewolff/minify/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>bionic-gpt/bionic-gpt</title>
    <updated>2023-12-24T01:58:42Z</updated>
    <id>tag:github.com,2023-12-24:/bionic-gpt/bionic-gpt</id>
    <link href="https://github.com/bionic-gpt/bionic-gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BionicGPT is an on-premise replacement for ChatGPT, offering the advantages of Generative AI while maintaining strict data confidentiality&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;BionicGPT&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;strong&gt; BionicGPT is an on-premise replacement for ChatGPT, offering the advantages of Generative AI while maintaining strict data confidentiality &lt;/strong&gt; BionicGPT can run on your laptop or scale into the data center. &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- License --&gt; &#xA; &lt;a href=&#34;https://github.com/purton-tech/bionic-gpt#License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/purton-tech/bionic-gpt#License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h4&gt; &lt;a href=&#34;https://bionic-gpt.com&#34;&gt; Homepage &lt;/a&gt; &lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bionic-gpt/bionic-gpt/main/website/static/github-readme.png&#34; alt=&#34;Alt text&#34; title=&#34;BionicGPT Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- ROADMAP --&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Text Generation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Connect to Open AI compatible API&#39;s i.e. LocalAI&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Select different prompts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Syntax highlighting for code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Image Generation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Connect to stable diffusion&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Authentication &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Email/Password sign in and registration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SSO&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Teams &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Invite Team Members&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Manage the teams you belong to&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create new teams&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Switch between teams&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; RBAC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Document Management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Document Upload&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow user to create datasets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; UI for datasets table&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Turn documents into 1K batches and generate embeddings&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OCR for document upload&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Document Pipelines &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow user to upload docs via API to datasets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Process documents and create chunks and embeddings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Retrieval Augmented Generation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Parse text out of documents&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate Embeddings and store in pgVector&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Embeddings to the prompt using similarity search&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prompt Management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create and Edit prompts on a per team basis&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Associate prompts with datasets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Model Management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create/update default prompt fo a model&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Set model location URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Switchable LLM backends.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Associate models with a command i.e. /image&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Guardrails &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Figure out a strategy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create per team API keys&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Attach keys to a prompt&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Revoke keys&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fine Tuning &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; QLORA adapters&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; System Admin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Usage Statistics&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Audit Trail&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Set API limits&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Deployment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker compose so people can test quickly.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kubernetes deployment strategy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Kubernetes bionicgpt.yaml&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hardware recommendations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/purton-tech/bionicgpt/issues&#34;&gt;open issues&lt;/a&gt; for a full list of proposed features (and known issues).&lt;/p&gt; &#xA;&lt;!-- Try it out --&gt; &#xA;&lt;h2&gt;Try it out&lt;/h2&gt; &#xA;&lt;p&gt;Download our &lt;code&gt;docker-compose.yml&lt;/code&gt; file and run &lt;code&gt;docker-compose up&lt;/code&gt; access the user interface on &lt;a href=&#34;http://localhost:7800/auth/sign_up&#34;&gt;http://localhost:7800/auth/sign_up&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://raw.githubusercontent.com/purton-tech/bionicgpt/main/docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This has been tested on an AMD 2700x with 16GB of ram. The included &lt;code&gt;llama-2-7b-chat&lt;/code&gt; model runs on CPU only.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; - The images in this &lt;code&gt;docker-compose&lt;/code&gt; are large due to having the model weights pre-loaded for convenience.&lt;/p&gt; &#xA;&lt;h2&gt;Kubernetes Ready&lt;/h2&gt; &#xA;&lt;p&gt;BionicGPT is optimized to run on Kubernetes and implements the full pipeline of LLM fine tuning from data acquisition to user interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bionic-gpt/bionic-gpt/main/website/content/docs/production/architecture.svg?sanitize=true&#34; alt=&#34;Alt text&#34; title=&#34;BionicGPT Architetcure&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sharkdp/fd</title>
    <updated>2023-12-24T01:58:42Z</updated>
    <id>tag:github.com,2023-12-24:/sharkdp/fd</id>
    <link href="https://github.com/sharkdp/fd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, fast and user-friendly alternative to &#39;find&#39;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sharkdp/fd/actions/workflows/CICD.yml&#34;&gt;&lt;img src=&#34;https://github.com/sharkdp/fd/actions/workflows/CICD.yml/badge.svg?sanitize=true&#34; alt=&#34;CICD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/fd-find&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/fd-find.svg?sanitize=true&#34; alt=&#34;Version info&#34;&gt;&lt;/a&gt; [&lt;a href=&#34;https://github.com/cha0ran/fd-zh&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://github.com/spearkkk/fd-kor&#34;&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; is a program to find entries in your filesystem. It is a simple, fast and user-friendly alternative to &lt;a href=&#34;https://www.gnu.org/software/findutils/&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;. While it does not aim to support all of &lt;code&gt;find&lt;/code&gt;&#39;s powerful functionality, it provides sensible (opinionated) defaults for a majority of use cases.&lt;/p&gt; &#xA;&lt;p&gt;Quick links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#how-to-use&#34;&gt;How to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intuitive syntax: &lt;code&gt;fd PATTERN&lt;/code&gt; instead of &lt;code&gt;find -iname &#39;*PATTERN*&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Regular expression (default) and glob-based patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#benchmark&#34;&gt;Very fast&lt;/a&gt; due to parallelized directory traversal.&lt;/li&gt; &#xA; &lt;li&gt;Uses colors to highlight different file types (same as &lt;code&gt;ls&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#command-execution&#34;&gt;parallel command execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Smart case: the search is case-insensitive by default. It switches to case-sensitive if the pattern contains an uppercase character&lt;a href=&#34;http://vimdoc.sourceforge.net/htmldoc/options.html#&#39;smartcase&#39;&#34;&gt;*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ignores hidden directories and files, by default.&lt;/li&gt; &#xA; &lt;li&gt;Ignores patterns from your &lt;code&gt;.gitignore&lt;/code&gt;, by default.&lt;/li&gt; &#xA; &lt;li&gt;The command name is &lt;em&gt;50%&lt;/em&gt; shorter&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;*&lt;/a&gt; than &lt;code&gt;find&lt;/code&gt; :-).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/doc/screencast.svg?sanitize=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;First, to get an overview of all available command line options, you can either run &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#command-line-options&#34;&gt;&lt;code&gt;fd -h&lt;/code&gt;&lt;/a&gt; for a concise help message or &lt;code&gt;fd --help&lt;/code&gt; for a more detailed version.&lt;/p&gt; &#xA;&lt;h3&gt;Simple search&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;fd&lt;/em&gt; is designed to find entries in your filesystem. The most basic search you can perform is to run &lt;em&gt;fd&lt;/em&gt; with a single argument: the search pattern. For example, assume that you want to find an old script of yours (the name included &lt;code&gt;netflix&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd netfl&#xA;Software/python/imdb-ratings/netflix-details.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If called with just a single argument like this, &lt;em&gt;fd&lt;/em&gt; searches the current directory recursively for any entries that &lt;em&gt;contain&lt;/em&gt; the pattern &lt;code&gt;netfl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Regular expression search&lt;/h3&gt; &#xA;&lt;p&gt;The search pattern is treated as a regular expression. Here, we search for entries that start with &lt;code&gt;x&lt;/code&gt; and end with &lt;code&gt;rc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd /etc&#xA;&amp;gt; fd &#39;^x.*rc$&#39;&#xA;X11/xinit/xinitrc&#xA;X11/xinit/xserverrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The regular expression syntax used by &lt;code&gt;fd&lt;/code&gt; is &lt;a href=&#34;https://docs.rs/regex/1.0.0/regex/#syntax&#34;&gt;documented here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the root directory&lt;/h3&gt; &#xA;&lt;p&gt;If we want to search a specific directory, it can be given as a second argument to &lt;em&gt;fd&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd passwd /etc&#xA;/etc/default/passwd&#xA;/etc/pam.d/passwd&#xA;/etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List all files, recursively&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;fd&lt;/em&gt; can be called with no arguments. This is very useful to get a quick overview of all entries in the current directory, recursively (similar to &lt;code&gt;ls -R&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd fd/tests&#xA;&amp;gt; fd&#xA;testenv&#xA;testenv/mod.rs&#xA;tests.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use this functionality to list all files in a given directory, you have to use a catch-all pattern such as &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd . fd/tests/&#xA;testenv&#xA;testenv/mod.rs&#xA;tests.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Searching for a particular file extension&lt;/h3&gt; &#xA;&lt;p&gt;Often, we are interested in all files of a particular type. This can be done with the &lt;code&gt;-e&lt;/code&gt; (or &lt;code&gt;--extension&lt;/code&gt;) option. Here, we search for all Markdown files in the fd repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd fd&#xA;&amp;gt; fd -e md&#xA;CONTRIBUTING.md&#xA;README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-e&lt;/code&gt; option can be used in combination with a search pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -e rs mod&#xA;src/fshelper/mod.rs&#xA;src/lscolors/mod.rs&#xA;tests/testenv/mod.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Searching for a particular file name&lt;/h3&gt; &#xA;&lt;p&gt;To find files with exactly the provided search pattern, use the &lt;code&gt;-g&lt;/code&gt; (or &lt;code&gt;--glob&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -g libc.so /usr&#xA;/usr/lib32/libc.so&#xA;/usr/lib/libc.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hidden and ignored files&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;fd&lt;/em&gt; does not search hidden directories and does not show hidden files in the search results. To disable this behavior, we can use the &lt;code&gt;-H&lt;/code&gt; (or &lt;code&gt;--hidden&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd pre-commit&#xA;&amp;gt; fd -H pre-commit&#xA;.git/hooks/pre-commit.sample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we work in a directory that is a Git repository (or includes Git repositories), &lt;em&gt;fd&lt;/em&gt; does not search folders (and does not show files) that match one of the &lt;code&gt;.gitignore&lt;/code&gt; patterns. To disable this behavior, we can use the &lt;code&gt;-I&lt;/code&gt; (or &lt;code&gt;--no-ignore&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd num_cpu&#xA;&amp;gt; fd -I num_cpu&#xA;target/debug/deps/libnum_cpus-f5ce7ef99006aa05.rlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To really search &lt;em&gt;all&lt;/em&gt; files and directories, simply combine the hidden and ignore features to show everything (&lt;code&gt;-HI&lt;/code&gt;) or use &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Matching the full path&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;fd&lt;/em&gt; only matches the filename of each file. However, using the &lt;code&gt;--full-path&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; option, you can match against the full path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -p -g &#39;**/.git/config&#39;&#xA;&amp;gt; fd -p &#39;.*/lesson-\d+/[a-z]+.(jpg|png)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command execution&lt;/h3&gt; &#xA;&lt;p&gt;Instead of just showing the search results, you often want to &lt;em&gt;do something&lt;/em&gt; with them. &lt;code&gt;fd&lt;/code&gt; provides two ways to execute external commands for each of your search results:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt; option runs an external command &lt;em&gt;for each of the search results&lt;/em&gt; (in parallel).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; option launches the external command once, with &lt;em&gt;all search results as arguments&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;Recursively find all zip archives and unpack them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e zip -x unzip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are two such files, &lt;code&gt;file1.zip&lt;/code&gt; and &lt;code&gt;backup/file2.zip&lt;/code&gt;, this would execute &lt;code&gt;unzip file1.zip&lt;/code&gt; and &lt;code&gt;unzip backup/file2.zip&lt;/code&gt;. The two &lt;code&gt;unzip&lt;/code&gt; processes run in parallel (if the files are found fast enough).&lt;/p&gt; &#xA;&lt;p&gt;Find all &lt;code&gt;*.h&lt;/code&gt; and &lt;code&gt;*.cpp&lt;/code&gt; files and auto-format them inplace with &lt;code&gt;clang-format -i&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e h -e cpp -x clang-format -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how the &lt;code&gt;-i&lt;/code&gt; option to &lt;code&gt;clang-format&lt;/code&gt; can be passed as a separate argument. This is why we put the &lt;code&gt;-x&lt;/code&gt; option last.&lt;/p&gt; &#xA;&lt;p&gt;Find all &lt;code&gt;test_*.py&lt;/code&gt; files and open them in your favorite editor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -g &#39;test_*.py&#39; -X vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we use capital &lt;code&gt;-X&lt;/code&gt; here to open a single &lt;code&gt;vim&lt;/code&gt; instance. If there are two such files, &lt;code&gt;test_basic.py&lt;/code&gt; and &lt;code&gt;lib/test_advanced.py&lt;/code&gt;, this will run &lt;code&gt;vim test_basic.py lib/test_advanced.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To see details like file permissions, owners, file sizes etc., you can tell &lt;code&gt;fd&lt;/code&gt; to show them by running &lt;code&gt;ls&lt;/code&gt; for each result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd ‚Ä¶ -X ls -lhd --color=always&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This pattern is so useful that &lt;code&gt;fd&lt;/code&gt; provides a shortcut. You can use the &lt;code&gt;-l&lt;/code&gt;/&lt;code&gt;--list-details&lt;/code&gt; option to execute &lt;code&gt;ls&lt;/code&gt; in this way: &lt;code&gt;fd ‚Ä¶ -l&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt; option is also useful when combining &lt;code&gt;fd&lt;/code&gt; with &lt;a href=&#34;https://github.com/BurntSushi/ripgrep/&#34;&gt;ripgrep&lt;/a&gt; (&lt;code&gt;rg&lt;/code&gt;) in order to search within a certain class of files, like all C++ source files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e cpp -e cxx -e h -e hpp -X rg &#39;std::cout&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert all &lt;code&gt;*.jpg&lt;/code&gt; files to &lt;code&gt;*.png&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e jpg -x convert {} {.}.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;{}&lt;/code&gt; is a placeholder for the search result. &lt;code&gt;{.}&lt;/code&gt; is the same, without the file extension. See below for more details on the placeholder syntax.&lt;/p&gt; &#xA;&lt;p&gt;The terminal output of commands run from parallel threads using &lt;code&gt;-x&lt;/code&gt; will not be interlaced or garbled, so &lt;code&gt;fd -x&lt;/code&gt; can be used to rudimentarily parallelize a task run over many files. An example of this is calculating the checksum of each individual file within a directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fd -tf -x md5sum &amp;gt; file_checksums.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Placeholder syntax&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; options take a &lt;em&gt;command template&lt;/em&gt; as a series of arguments (instead of a single string). If you want to add additional options to &lt;code&gt;fd&lt;/code&gt; after the command template, you can terminate it with a &lt;code&gt;\;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The syntax for generating commands is similar to that of &lt;a href=&#34;https://www.gnu.org/software/parallel/&#34;&gt;GNU Parallel&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{}&lt;/code&gt;: A placeholder token that will be replaced with the path of the search result (&lt;code&gt;documents/images/party.jpg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{.}&lt;/code&gt;: Like &lt;code&gt;{}&lt;/code&gt;, but without the file extension (&lt;code&gt;documents/images/party&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{/}&lt;/code&gt;: A placeholder that will be replaced by the basename of the search result (&lt;code&gt;party.jpg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{//}&lt;/code&gt;: The parent of the discovered path (&lt;code&gt;documents/images&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{/.}&lt;/code&gt;: The basename, with the extension removed (&lt;code&gt;party&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do not include a placeholder, &lt;em&gt;fd&lt;/em&gt; automatically adds a &lt;code&gt;{}&lt;/code&gt; at the end.&lt;/p&gt; &#xA;&lt;h4&gt;Parallel vs. serial execution&lt;/h4&gt; &#xA;&lt;p&gt;For &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt;, you can control the number of parallel jobs by using the &lt;code&gt;-j&lt;/code&gt;/&lt;code&gt;--threads&lt;/code&gt; option. Use &lt;code&gt;--threads=1&lt;/code&gt; for serial execution.&lt;/p&gt; &#xA;&lt;h3&gt;Excluding specific files or directories&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes we want to ignore search results from a specific subdirectory. For example, we might want to search all hidden files and directories (&lt;code&gt;-H&lt;/code&gt;) but exclude all matches from &lt;code&gt;.git&lt;/code&gt; directories. We can use the &lt;code&gt;-E&lt;/code&gt; (or &lt;code&gt;--exclude&lt;/code&gt;) option for this. It takes an arbitrary glob pattern as an argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -H -E .git ‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use this to skip mounted directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -E /mnt/external-drive ‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.. or to skip certain file types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -E &#39;*.bak&#39; ‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make exclude-patterns like these permanent, you can create a &lt;code&gt;.fdignore&lt;/code&gt; file. They work like &lt;code&gt;.gitignore&lt;/code&gt; files, but are specific to &lt;code&gt;fd&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cat ~/.fdignore&#xA;/mnt/external-drive&#xA;*.bak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;fd&lt;/code&gt; also supports &lt;code&gt;.ignore&lt;/code&gt; files that are used by other programs such as &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want &lt;code&gt;fd&lt;/code&gt; to ignore these patterns globally, you can put them in &lt;code&gt;fd&lt;/code&gt;&#39;s global ignore file. This is usually located in &lt;code&gt;~/.config/fd/ignore&lt;/code&gt; in macOS or Linux, and &lt;code&gt;%APPDATA%\fd\ignore&lt;/code&gt; in Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Deleting files&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;fd&lt;/code&gt; to remove all files and directories that are matched by your search pattern. If you only want to remove files, you can use the &lt;code&gt;--exec-batch&lt;/code&gt;/&lt;code&gt;-X&lt;/code&gt; option to call &lt;code&gt;rm&lt;/code&gt;. For example, to recursively remove all &lt;code&gt;.DS_Store&lt;/code&gt; files, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -H &#39;^\.DS_Store$&#39; -tf -X rm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are unsure, always call &lt;code&gt;fd&lt;/code&gt; without &lt;code&gt;-X rm&lt;/code&gt; first. Alternatively, use &lt;code&gt;rm&lt;/code&gt;s &#34;interactive&#34; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -H &#39;^\.DS_Store$&#39; -tf -X rm -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also want to remove a certain class of directories, you can use the same technique. You will have to use &lt;code&gt;rm&lt;/code&gt;s &lt;code&gt;--recursive&lt;/code&gt;/&lt;code&gt;-r&lt;/code&gt; flag to remove directories.&lt;/p&gt; &#xA;&lt;p&gt;Note: there are scenarios where using &lt;code&gt;fd ‚Ä¶ -X rm -r&lt;/code&gt; can cause race conditions: if you have a path like &lt;code&gt;‚Ä¶/foo/bar/foo/‚Ä¶&lt;/code&gt; and want to remove all directories named &lt;code&gt;foo&lt;/code&gt;, you can end up in a situation where the outer &lt;code&gt;foo&lt;/code&gt; directory is removed first, leading to (harmless) &lt;em&gt;&#34;&#39;foo/bar/foo&#39;: No such file or directory&#34;&lt;/em&gt; errors in the &lt;code&gt;rm&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;h3&gt;Command-line options&lt;/h3&gt; &#xA;&lt;p&gt;This is the output of &lt;code&gt;fd -h&lt;/code&gt;. To see the full set of command-line options, use &lt;code&gt;fd --help&lt;/code&gt; which also includes a much more detailed help text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: fd [OPTIONS] [pattern] [path]...&#xA;&#xA;Arguments:&#xA;  [pattern]  the search pattern (a regular expression, unless &#39;--glob&#39; is used; optional)&#xA;  [path]...  the root directories for the filesystem search (optional)&#xA;&#xA;Options:&#xA;  -H, --hidden                     Search hidden files and directories&#xA;  -I, --no-ignore                  Do not respect .(git|fd)ignore files&#xA;  -s, --case-sensitive             Case-sensitive search (default: smart case)&#xA;  -i, --ignore-case                Case-insensitive search (default: smart case)&#xA;  -g, --glob                       Glob-based search (default: regular expression)&#xA;  -a, --absolute-path              Show absolute instead of relative paths&#xA;  -l, --list-details               Use a long listing format with file metadata&#xA;  -L, --follow                     Follow symbolic links&#xA;  -p, --full-path                  Search full abs. path (default: filename only)&#xA;  -d, --max-depth &amp;lt;depth&amp;gt;          Set maximum search depth (default: none)&#xA;  -E, --exclude &amp;lt;pattern&amp;gt;          Exclude entries that match the given glob pattern&#xA;  -t, --type &amp;lt;filetype&amp;gt;            Filter by type: file (f), directory (d), symlink (l),&#xA;                                   executable (x), empty (e), socket (s), pipe (p), char-device&#xA;                                   (c), block-device (b)&#xA;  -e, --extension &amp;lt;ext&amp;gt;            Filter by file extension&#xA;  -S, --size &amp;lt;size&amp;gt;                Limit results based on the size of files&#xA;      --changed-within &amp;lt;date|dur&amp;gt;  Filter by file modification time (newer than)&#xA;      --changed-before &amp;lt;date|dur&amp;gt;  Filter by file modification time (older than)&#xA;  -o, --owner &amp;lt;user:group&amp;gt;         Filter by owning user and/or group&#xA;  -x, --exec &amp;lt;cmd&amp;gt;...              Execute a command for each search result&#xA;  -X, --exec-batch &amp;lt;cmd&amp;gt;...        Execute a command with all search results at once&#xA;  -c, --color &amp;lt;when&amp;gt;               When to use colors [default: auto] [possible values: auto,&#xA;                                   always, never]&#xA;  -h, --help                       Print help (see more with &#39;--help&#39;)&#xA;  -V, --version                    Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s search my home folder for files that end in &lt;code&gt;[0-9].jpg&lt;/code&gt;. It contains ~750.000 subdirectories and about a 4 million files. For averaging and statistical analysis, I&#39;m using &lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34;&gt;hyperfine&lt;/a&gt;. The following benchmarks are performed with a &#34;warm&#34;/pre-filled disk-cache (results for a &#34;cold&#34; disk-cache show the same trends).&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s start with &lt;code&gt;find&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark 1: find ~ -iregex &#39;.*[0-9]\.jpg$&#39;&#xA;  Time (mean ¬± œÉ):     19.922 s ¬±  0.109 s&#xA;  Range (min ‚Ä¶ max):   19.765 s ‚Ä¶ 20.065 s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;find&lt;/code&gt; is much faster if it does not need to perform a regular-expression search:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark 2: find ~ -iname &#39;*[0-9].jpg&#39;&#xA;  Time (mean ¬± œÉ):     11.226 s ¬±  0.104 s&#xA;  Range (min ‚Ä¶ max):   11.119 s ‚Ä¶ 11.466 s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s try the same for &lt;code&gt;fd&lt;/code&gt;. Note that &lt;code&gt;fd&lt;/code&gt; performs a regular expression search by defautl. The options &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt; option is needed here for a fair comparison. Otherwise &lt;code&gt;fd&lt;/code&gt; does not have to traverse hidden folders and ignored paths (see below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark 3: fd -u &#39;[0-9]\.jpg$&#39; ~&#xA;  Time (mean ¬± œÉ):     854.8 ms ¬±  10.0 ms&#xA;  Range (min ‚Ä¶ max):   839.2 ms ‚Ä¶ 868.9 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this particular example, &lt;code&gt;fd&lt;/code&gt; is approximately &lt;strong&gt;23 times faster&lt;/strong&gt; than &lt;code&gt;find -iregex&lt;/code&gt; and about &lt;strong&gt;13 times faster&lt;/strong&gt; than &lt;code&gt;find -iname&lt;/code&gt;. By the way, both tools found the exact same 546 files &lt;span&gt;üòÑ&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is &lt;em&gt;one particular&lt;/em&gt; benchmark on &lt;em&gt;one particular&lt;/em&gt; machine. While we have performed a lot of different tests (and found consistent results), things might be different for you! We encourage everyone to try it out on their own. See &lt;a href=&#34;https://github.com/sharkdp/fd-benchmarks&#34;&gt;this repository&lt;/a&gt; for all necessary scripts.&lt;/p&gt; &#xA;&lt;p&gt;Concerning &lt;em&gt;fd&lt;/em&gt;&#39;s speed, a lot of credit goes to the &lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; crates that are also used in &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; (check it out!).&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;fd&lt;/code&gt; does not find my file!&lt;/h3&gt; &#xA;&lt;p&gt;Remember that &lt;code&gt;fd&lt;/code&gt; ignores hidden directories and files by default. It also ignores patterns from &lt;code&gt;.gitignore&lt;/code&gt; files. If you want to make sure to find absolutely every possible file, always use the options &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt; option (or &lt;code&gt;-HI&lt;/code&gt; to enable hidden and ignored files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -u ‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Colorized output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; can colorize files by extension, just like &lt;code&gt;ls&lt;/code&gt;. In order for this to work, the environment variable &lt;a href=&#34;https://linux.die.net/man/5/dir_colors&#34;&gt;&lt;code&gt;LS_COLORS&lt;/code&gt;&lt;/a&gt; has to be set. Typically, the value of this variable is set by the &lt;code&gt;dircolors&lt;/code&gt; command which provides a convenient configuration format to define colors for different file formats. On most distributions, &lt;code&gt;LS_COLORS&lt;/code&gt; should be set already. If you are on Windows or if you are looking for alternative, more complete (or more colorful) variants, see &lt;a href=&#34;https://github.com/sharkdp/vivid&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/seebi/dircolors-solarized&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/trapd00r/LS_COLORS&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; also honors the &lt;a href=&#34;https://no-color.org/&#34;&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/a&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;fd&lt;/code&gt; doesn&#39;t seem to interpret my regex pattern correctly&lt;/h3&gt; &#xA;&lt;p&gt;A lot of special regex characters (like &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, ..) are also special characters in your shell. If in doubt, always make sure to put single quotes around the regex pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd &#39;^[A-Z][0-9]+$&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your pattern starts with a dash, you have to add &lt;code&gt;--&lt;/code&gt; to signal the end of command line options. Otherwise, the pattern will be interpreted as a command-line option. Alternatively, use a character class with a single hyphen character:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -- &#39;-pattern&#39;&#xA;&amp;gt; fd &#39;[-]pattern&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&#34;Command not found&#34; for &lt;code&gt;alias&lt;/code&gt;es or shell functions&lt;/h3&gt; &#xA;&lt;p&gt;Shell &lt;code&gt;alias&lt;/code&gt;es and shell functions can not be used for command execution via &lt;code&gt;fd -x&lt;/code&gt; or &lt;code&gt;fd -X&lt;/code&gt;. In &lt;code&gt;zsh&lt;/code&gt;, you can make the alias global via &lt;code&gt;alias -g myalias=&#34;‚Ä¶&#34;&lt;/code&gt;. In &lt;code&gt;bash&lt;/code&gt;, you can use &lt;code&gt;export -f my_function&lt;/code&gt; to make available to child processes. You would still need to call &lt;code&gt;fd -x bash -c &#39;my_function &#34;$1&#34;&#39; bash&lt;/code&gt;. For other use cases or shells, use a (temporary) shell script.&lt;/p&gt; &#xA;&lt;h2&gt;Integration with other programs&lt;/h2&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;fzf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;em&gt;fd&lt;/em&gt; to generate input for the command-line fuzzy finder &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type file&#39;&#xA;export FZF_CTRL_T_COMMAND=&#34;$FZF_DEFAULT_COMMAND&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can type &lt;code&gt;vim &amp;lt;Ctrl-T&amp;gt;&lt;/code&gt; on your terminal to open fzf and search through the fd-results.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you might like to follow symbolic links and include hidden files (but exclude &lt;code&gt;.git&lt;/code&gt; folders):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type file --follow --hidden --exclude .git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even use fd&#39;s colored output inside fzf by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export FZF_DEFAULT_COMMAND=&#34;fd --type file --color=always&#34;&#xA;export FZF_DEFAULT_OPTS=&#34;--ansi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://github.com/junegunn/fzf#tips&#34;&gt;Tips section&lt;/a&gt; of the fzf README.&lt;/p&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;rofi&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/davatorium/rofi&#34;&gt;&lt;em&gt;rofi&lt;/em&gt;&lt;/a&gt; is a graphical launch menu application that is able to create menus by reading from &lt;em&gt;stdin&lt;/em&gt;. Piping &lt;code&gt;fd&lt;/code&gt; output into &lt;code&gt;rofi&lt;/code&gt;s &lt;code&gt;-dmenu&lt;/code&gt; mode creates fuzzy-searchable lists of files and directories.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Create a case-insensitive searchable multi-select list of &lt;em&gt;PDF&lt;/em&gt; files under your &lt;code&gt;$HOME&lt;/code&gt; directory and open the selection with your configured PDF viewer. To list all file types, drop the &lt;code&gt;-e pdf&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd --type f -e pdf . $HOME | rofi -keep-right -dmenu -i -p FILES -multi-select | xargs -I {} xdg-open {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To modify the list that is presented by rofi, add arguments to the &lt;code&gt;fd&lt;/code&gt; command. To modify the search behaviour of rofi, add arguments to the &lt;code&gt;rofi&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;emacs&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The emacs package &lt;a href=&#34;https://github.com/technomancy/find-file-in-project&#34;&gt;find-file-in-project&lt;/a&gt; can use &lt;em&gt;fd&lt;/em&gt; to find files.&lt;/p&gt; &#xA;&lt;p&gt;After installing &lt;code&gt;find-file-in-project&lt;/code&gt;, add the line &lt;code&gt;(setq ffip-use-rust-fd t)&lt;/code&gt; to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;In emacs, run &lt;code&gt;M-x find-file-in-project-by-selected&lt;/code&gt; to find matching files. Alternatively, run &lt;code&gt;M-x find-file-in-project&lt;/code&gt; to list all available files in the project.&lt;/p&gt; &#xA;&lt;h3&gt;Printing the output as a tree&lt;/h3&gt; &#xA;&lt;p&gt;To format the output of &lt;code&gt;fd&lt;/code&gt; as a file-tree you can use the &lt;code&gt;tree&lt;/code&gt; command with &lt;code&gt;--fromfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ fd | tree --fromfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be more useful than running &lt;code&gt;tree&lt;/code&gt; by itself because &lt;code&gt;tree&lt;/code&gt; does not ignore any files by default, nor does it support as rich a set of options as &lt;code&gt;fd&lt;/code&gt; does to control what to print:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ fd --extension rs | tree --fromfile&#xA;.&#xA;‚îú‚îÄ‚îÄ build.rs&#xA;‚îî‚îÄ‚îÄ src&#xA;    ‚îú‚îÄ‚îÄ app.rs&#xA;    ‚îî‚îÄ‚îÄ error.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On bash and similar you can simply create an alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ alias as-tree=&#39;tree --fromfile&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;xargs&lt;/code&gt; or &lt;code&gt;parallel&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;fd&lt;/code&gt; has a builtin feature for &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#command-execution&#34;&gt;command execution&lt;/a&gt; with its &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; options. If you prefer, you can still use it in combination with &lt;code&gt;xargs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -0 -e rs | xargs -0 wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the &lt;code&gt;-0&lt;/code&gt; option tells &lt;em&gt;fd&lt;/em&gt; to separate search results by the NULL character (instead of newlines). In the same way, the &lt;code&gt;-0&lt;/code&gt; option of &lt;code&gt;xargs&lt;/code&gt; tells it to read the input in this way.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/fd-find/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/fd-find.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you run Ubuntu 19.04 (Disco Dingo) or newer, you can install the &lt;a href=&#34;https://packages.ubuntu.com/fd-find&#34;&gt;officially maintained package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the binary is called &lt;code&gt;fdfind&lt;/code&gt; as the binary name &lt;code&gt;fd&lt;/code&gt; is already used by another package. It is recommended that after installation, you add a link to &lt;code&gt;fd&lt;/code&gt; by executing command &lt;code&gt;ln -s $(which fdfind) ~/.local/bin/fd&lt;/code&gt;, in order to use &lt;code&gt;fd&lt;/code&gt; in the same way as in this documentation. Make sure that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use an older version of Ubuntu, you can download the latest &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href=&#34;https://github.com/sharkdp/fd/releases&#34;&gt;release page&lt;/a&gt; and install it via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -i fd_9.0.0_amd64.deb # adapt version number and architecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Debian&lt;/h3&gt; &#xA;&lt;p&gt;If you run Debian Buster or newer, you can install the &lt;a href=&#34;https://tracker.debian.org/pkg/rust-fd-find&#34;&gt;officially maintained Debian package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the binary is called &lt;code&gt;fdfind&lt;/code&gt; as the binary name &lt;code&gt;fd&lt;/code&gt; is already used by another package. It is recommended that after installation, you add a link to &lt;code&gt;fd&lt;/code&gt; by executing command &lt;code&gt;ln -s $(which fdfind) ~/.local/bin/fd&lt;/code&gt;, in order to use &lt;code&gt;fd&lt;/code&gt; in the same way as in this documentation. Make sure that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;On Fedora&lt;/h3&gt; &#xA;&lt;p&gt;Starting with Fedora 28, you can install &lt;code&gt;fd&lt;/code&gt; from the official package sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Alpine Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=fd&#34;&gt;the fd package&lt;/a&gt; from the official sources, provided you have the appropriate repository enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apk add fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/fd/&#34;&gt;the fd package&lt;/a&gt; from the official repos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Gentoo Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://packages.gentoo.org/packages/sys-apps/fd&#34;&gt;the fd ebuild&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge -av fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On openSUSE Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://software.opensuse.org/package/fd&#34;&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Void Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;fd&lt;/code&gt; via xbps-install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xbps-install -S fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On RedHat Enterprise Linux 8/9 (RHEL8/9), Almalinux 8/9, EuroLinux 8/9 or Rocky Linux 8/9&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/tkbcopr/fd/&#34;&gt;the &lt;code&gt;fd&lt;/code&gt; package&lt;/a&gt; from Fedora Copr.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf copr enable tkbcopr/fd&#xA;dnf install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A different version using the &lt;a href=&#34;https://github.com/sharkdp/fd/pull/481#issuecomment-534494592&#34;&gt;slower&lt;/a&gt; malloc &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=2216193#c1&#34;&gt;instead of jemalloc&lt;/a&gt; is also available from the EPEL8/9 repo as the package &lt;code&gt;fd-find&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;On macOS&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;fd&lt;/code&gt; with &lt;a href=&#34;https://formulae.brew.sh/formula/fd&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚Ä¶ or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;p&gt;You can download pre-built binaries from the &lt;a href=&#34;https://github.com/sharkdp/fd/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can install &lt;code&gt;fd&lt;/code&gt; via &lt;a href=&#34;http://scoop.sh&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/package-manager/&#34;&gt;Winget&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install sharkdp.fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On GuixOS&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://guix.gnu.org/en/packages/fd-8.1.1/&#34;&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;guix install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On NixOS / via Nix&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix package manager&lt;/a&gt; to install &lt;code&gt;fd&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-env -i fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://www.freshports.org/sysutils/fd&#34;&gt;the fd-find package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From npm&lt;/h3&gt; &#xA;&lt;p&gt;On linux and macOS, you can install the &lt;a href=&#34;https://npm.im/fd-find&#34;&gt;fd-find&lt;/a&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;With Rust&#39;s package manager &lt;a href=&#34;https://github.com/rust-lang/cargo&#34;&gt;cargo&lt;/a&gt;, you can install &lt;em&gt;fd&lt;/em&gt; via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that rust version &lt;em&gt;1.70.0&lt;/em&gt; or later is required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; is also needed for the build.&lt;/p&gt; &#xA;&lt;h3&gt;From binaries&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/sharkdp/fd/releases&#34;&gt;release page&lt;/a&gt; includes precompiled binaries for Linux, macOS and Windows. Statically-linked binaries are also available: look for archives with &lt;code&gt;musl&lt;/code&gt; in the file name.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sharkdp/fd&#xA;&#xA;# Build&#xA;cd fd&#xA;cargo build&#xA;&#xA;# Run unit tests and integration tests&#xA;cargo test&#xA;&#xA;# Install&#xA;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp&#34;&gt;sharkdp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tmccombs&#34;&gt;tmccombs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tavianator&#34;&gt;tavianator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; is distributed under the terms of both the MIT License and the Apache License 2.0.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; files for license details.&lt;/p&gt;</summary>
  </entry>
</feed>