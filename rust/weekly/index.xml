<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T02:05:24Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emilk/egui</title>
    <updated>2023-07-30T02:05:24Z</updated>
    <id>tag:github.com,2023-07-30:/emilk/egui</id>
    <link href="https://github.com/emilk/egui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;egui: an easy-to-use immediate mode GUI in Rust that runs on both web and native&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🖌 egui: an easy-to-use GUI in pure Rust&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emilk/egui&#34;&gt;&lt;img alt=&#34;github&#34; src=&#34;https://img.shields.io/badge/github-emilk/egui-8da0cb?logo=github&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/egui&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/egui.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/egui&#34;&gt;&lt;img src=&#34;https://docs.rs/egui/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-secure-code/safety-dance/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unsafe-forbidden-success.svg?sanitize=true&#34; alt=&#34;unsafe forbidden&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emilk/egui/actions?workflow=CI&#34;&gt;&lt;img src=&#34;https://github.com/emilk/egui/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emilk/egui/raw/master/LICENSE-MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emilk/egui/raw/master/LICENSE-APACHE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true&#34; alt=&#34;Apache&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/JFcEma9bJq&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/900275882684477440?label=egui%20discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.egui.rs/#demo&#34;&gt;Click to run the web demo&lt;/a&gt; 👈&lt;/p&gt; &#xA;&lt;p&gt;egui (pronounced &#34;e-gooey&#34;) is a simple, fast, and highly portable immediate mode GUI library for Rust. egui runs on the web, natively, and &lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#integrations&#34;&gt;in your favorite game engine&lt;/a&gt; (or will soon).&lt;/p&gt; &#xA;&lt;p&gt;egui aims to be the easiest-to-use Rust GUI library, and the simplest way to make a web app in Rust.&lt;/p&gt; &#xA;&lt;p&gt;egui can be used anywhere you can draw textured triangles, which means you can easily integrate it into your game engine of choice.&lt;/p&gt; &#xA;&lt;p&gt;Sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#goals&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#who-is-egui-for&#34;&gt;Who is egui for?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#state&#34;&gt;State / features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#integrations&#34;&gt;Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#why-immediate-mode&#34;&gt;Why immediate mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://github.com/Re-Ch-Love/egui-doc-cn/raw/main/README_zh-hans.md&#34;&gt;egui 的中文翻译文档 / chinese translation&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;ui.heading(&#34;My egui Application&#34;);&#xA;ui.horizontal(|ui| {&#xA;    ui.label(&#34;Your name: &#34;);&#xA;    ui.text_edit_singleline(&amp;amp;mut name);&#xA;});&#xA;ui.add(egui::Slider::new(&amp;amp;mut age, 0..=120).text(&#34;age&#34;));&#xA;if ui.button(&#34;Click each year&#34;).clicked() {&#xA;    age += 1;&#xA;}&#xA;ui.label(format!(&#34;Hello &#39;{name}&#39;, age {age}&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/emilk/egui/master/media/demo.gif&#34;&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;There are simple examples in &lt;a href=&#34;https://github.com/emilk/egui/raw/master/examples/&#34;&gt;the &lt;code&gt;examples/&lt;/code&gt; folder&lt;/a&gt;. If you want to write a web app, then go to &lt;a href=&#34;https://github.com/emilk/eframe_template/&#34;&gt;https://github.com/emilk/eframe_template/&lt;/a&gt; and follow the instructions. The official docs are at &lt;a href=&#34;https://docs.rs/egui&#34;&gt;https://docs.rs/egui&lt;/a&gt;. For inspiration and more examples, check out the &lt;a href=&#34;https://www.egui.rs/#demo&#34;&gt;the egui web demo&lt;/a&gt; and follow the links in it to its source code.&lt;/p&gt; &#xA;&lt;p&gt;If you want to integrate egui into an existing engine, go to the &lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/#integrations&#34;&gt;Integrations&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions, use &lt;a href=&#34;https://github.com/emilk/egui/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;. There is also &lt;a href=&#34;https://discord.gg/JFcEma9bJq&#34;&gt;an egui discord server&lt;/a&gt;. If you want to contribute to egui, please read the &lt;a href=&#34;https://github.com/emilk/egui/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.egui.rs/#demo&#34;&gt;Click to run egui web demo&lt;/a&gt; (works in any browser with WASM and WebGL support). Uses &lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/eframe&#34;&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To test the demo app locally, run &lt;code&gt;cargo run --release -p egui_demo_app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The native backend is &lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/egui_glow&#34;&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt; (using &lt;a href=&#34;https://crates.io/crates/glow&#34;&gt;&lt;code&gt;glow&lt;/code&gt;&lt;/a&gt;) and should work out-of-the-box on Mac and Windows, but on Linux you need to first run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Fedora Rawhide you need to run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dnf install clang clang-devel clang-tools-extra libxkbcommon-devel pkg-config openssl-devel libxcb-devel gtk3-devel atk fontconfig-devel&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is just for the demo app - egui itself is completely platform agnostic!&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The easiest to use GUI library&lt;/li&gt; &#xA; &lt;li&gt;Responsive: target 60 Hz in debug build&lt;/li&gt; &#xA; &lt;li&gt;Friendly: difficult to make mistakes, and shouldn&#39;t panic&lt;/li&gt; &#xA; &lt;li&gt;Portable: the same code works on the web and as a native app&lt;/li&gt; &#xA; &lt;li&gt;Easy to integrate into any environment&lt;/li&gt; &#xA; &lt;li&gt;A simple 2D graphics API for custom painting (&lt;a href=&#34;https://docs.rs/epaint&#34;&gt;&lt;code&gt;epaint&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;No callbacks&lt;/li&gt; &#xA; &lt;li&gt;Pure immediate mode&lt;/li&gt; &#xA; &lt;li&gt;Extensible: &lt;a href=&#34;https://github.com/emilk/egui/raw/master/crates/egui_demo_lib/src/demo/toggle_switch.rs&#34;&gt;easy to write your own widgets for egui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modular: You should be able to use small parts of egui and combine them in new ways&lt;/li&gt; &#xA; &lt;li&gt;Safe: there is no &lt;code&gt;unsafe&lt;/code&gt; code in egui&lt;/li&gt; &#xA; &lt;li&gt;Minimal dependencies: &lt;a href=&#34;https://crates.io/crates/ab_glyph&#34;&gt;&lt;code&gt;ab_glyph&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/ahash&#34;&gt;&lt;code&gt;ahash&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/nohash-hasher&#34;&gt;&lt;code&gt;nohash-hasher&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/parking_lot&#34;&gt;&lt;code&gt;parking_lot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;egui is &lt;em&gt;not&lt;/em&gt; a framework. egui is a library you call into, not an environment you program for.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: egui does not claim to have reached all these goals yet! egui is still work in progress.&lt;/p&gt; &#xA;&lt;h3&gt;Non-goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Become the most powerful GUI library&lt;/li&gt; &#xA; &lt;li&gt;Native looking interface&lt;/li&gt; &#xA; &lt;li&gt;Advanced and flexible layouts (that&#39;s fundamentally incompatible with immediate mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is egui for?&lt;/h2&gt; &#xA;&lt;p&gt;egui aims to be the best choice when you want a simple way to create a GUI, or you want to add a GUI to a game engine.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using Rust, egui is not for you. If you want a GUI that looks native, egui is not for you. If you want something that doesn&#39;t break when you upgrade it, egui isn&#39;t for you (yet).&lt;/p&gt; &#xA;&lt;p&gt;But if you are writing something interactive in Rust that needs a simple GUI, egui may be for you.&lt;/p&gt; &#xA;&lt;h3&gt;egui vs Dear ImGui&lt;/h3&gt; &#xA;&lt;p&gt;The obvious alternative to egui is &lt;a href=&#34;https://github.com/Gekkio/imgui-rs&#34;&gt;&lt;code&gt;imgui-rs&lt;/code&gt;&lt;/a&gt;, the Rust wrapper around the C++ library &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt;. Dear ImGui is a great library (and the main inspiration for egui), with a lot more features and polish. However, egui provides some benefits for Rust users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;egui is pure Rust&lt;/li&gt; &#xA; &lt;li&gt;egui is easily compiled to WASM&lt;/li&gt; &#xA; &lt;li&gt;egui lets you use native Rust string types (&lt;code&gt;imgui-rs&lt;/code&gt; forces you to use annoying macros and wrappers for zero-terminated strings)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui/raw/master/crates/egui_demo_lib/src/demo/toggle_switch.rs&#34;&gt;Writing your own widgets in egui is simple&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;egui also tries to improve your experience in other small ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows are automatically sized based on their contents&lt;/li&gt; &#xA; &lt;li&gt;Windows are automatically positioned to not overlap with each other&lt;/li&gt; &#xA; &lt;li&gt;Some subtle animations make egui come alive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So in summary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;egui: pure Rust, new, exciting, work in progress&lt;/li&gt; &#xA; &lt;li&gt;Dear ImGui: feature rich, well tested, cumbersome Rust integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;State&lt;/h2&gt; &#xA;&lt;p&gt;egui is in active development. It works well for what it does, but it lacks many features and the interfaces are still in flux. New releases will have breaking changes.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Widgets: label, text button, hyperlink, checkbox, radio button, slider, draggable value, text editing, combo box, color picker&lt;/li&gt; &#xA; &lt;li&gt;Layouts: horizontal, vertical, columns, automatic wrapping&lt;/li&gt; &#xA; &lt;li&gt;Text editing: multiline, copy/paste, undo, emoji supports&lt;/li&gt; &#xA; &lt;li&gt;Windows: move, resize, name, minimize and close. Automatically sized and positioned.&lt;/li&gt; &#xA; &lt;li&gt;Regions: resizing, vertical scrolling, collapsing headers (sections)&lt;/li&gt; &#xA; &lt;li&gt;Rendering: Anti-aliased rendering of lines, circles, text and convex polygons.&lt;/li&gt; &#xA; &lt;li&gt;Tooltips on hover&lt;/li&gt; &#xA; &lt;li&gt;More&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/emilk/egui/master/media/widget_gallery.gif&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Light Theme:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/emilk/egui/master/media/light_theme.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;egui is built to be easy to integrate into any existing game engine or platform you are working on. egui itself doesn&#39;t know or care on what OS it is running or how to render things to the screen - that is the job of the egui integration.&lt;/p&gt; &#xA;&lt;p&gt;An integration needs to do the following each frame:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt;: Gather input (mouse, touches, keyboard, screen size, etc) and give it to egui&lt;/li&gt; &#xA; &lt;li&gt;Run the application code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: Handle egui output (cursor changes, paste, texture allocations, …)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Painting&lt;/strong&gt;: Render the triangle mesh egui produces (see &lt;a href=&#34;https://github.com/emilk/egui/raw/master/crates/egui_glow/src/painter.rs&#34;&gt;OpenGL example&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Official integrations&lt;/h3&gt; &#xA;&lt;p&gt;These are the official egui integrations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/eframe&#34;&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; for compiling the same app to web/wasm and desktop/native. Uses &lt;code&gt;egui-winit&lt;/code&gt; and &lt;code&gt;egui_glow&lt;/code&gt; or &lt;code&gt;egui-wgpu&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/egui_glow&#34;&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt; for rendering egui with &lt;a href=&#34;https://github.com/grovesNL/glow&#34;&gt;glow&lt;/a&gt; on native and web, and for making native apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/egui-wgpu&#34;&gt;&lt;code&gt;egui-wgpu&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://crates.io/crates/wgpu&#34;&gt;wgpu&lt;/a&gt; (WebGPU API).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/egui-winit&#34;&gt;&lt;code&gt;egui-winit&lt;/code&gt;&lt;/a&gt; for integrating with &lt;a href=&#34;https://github.com/rust-windowing/winit&#34;&gt;winit&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/egui_glium&#34;&gt;&lt;code&gt;egui_glium&lt;/code&gt;&lt;/a&gt; for compiling native apps with &lt;a href=&#34;https://github.com/glium/glium&#34;&gt;Glium&lt;/a&gt; (DEPRECATED - looking for new maintainer).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3rd party integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jgraef/amethyst_egui&#34;&gt;&lt;code&gt;amethyst_egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://amethyst.rs/&#34;&gt;the Amethyst game engine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvlabat/bevy_egui&#34;&gt;&lt;code&gt;bevy_egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://bevyengine.org/&#34;&gt;the Bevy game engine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cohaereo/egui_glfw_gl&#34;&gt;&lt;code&gt;egui_glfw_gl&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://crates.io/crates/glfw&#34;&gt;GLFW&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h3r2tic/egui-glutin-gl/&#34;&gt;&lt;code&gt;egui-glutin-gl&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://crates.io/crates/glutin&#34;&gt;glutin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/egui_sdl2_gl&#34;&gt;&lt;code&gt;egui_sdl2_gl&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://crates.io/crates/sdl2&#34;&gt;SDL2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ComLarsic/egui_sdl2_platform&#34;&gt;&lt;code&gt;egui_sdl2_platform&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://crates.io/crates/sdl2&#34;&gt;SDL2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derivator/egui_vulkano&#34;&gt;&lt;code&gt;egui_vulkano&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/vulkano-rs/vulkano&#34;&gt;Vulkano&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hakolao/egui_winit_vulkano&#34;&gt;&lt;code&gt;egui_winit_vulkano&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/vulkano-rs/vulkano&#34;&gt;Vulkano&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/optozorax/egui-macroquad&#34;&gt;&lt;code&gt;egui-macroquad&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/not-fl3/macroquad&#34;&gt;macroquad&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/not-fl3/egui-miniquad&#34;&gt;&lt;code&gt;egui-miniquad&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/not-fl3/miniquad&#34;&gt;Miniquad&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heretik31/egui_speedy2d&#34;&gt;&lt;code&gt;egui_speedy2d&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/QuantumBadger/Speedy2D&#34;&gt;Speedy2d&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/egui-tetra&#34;&gt;&lt;code&gt;egui-tetra&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://crates.io/crates/tetra&#34;&gt;Tetra&lt;/a&gt;, a 2D game framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MatchaChoco010/egui-winit-ash-integration&#34;&gt;&lt;code&gt;egui-winit-ash-integration&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/rust-windowing/winit&#34;&gt;winit&lt;/a&gt; and &lt;a href=&#34;https://github.com/MaikKlein/ash&#34;&gt;ash&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/fltk-egui&#34;&gt;&lt;code&gt;fltk-egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/fltk-rs/fltk-rs&#34;&gt;fltk-rs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NemuiSen/ggegui&#34;&gt;&lt;code&gt;ggegui&lt;/code&gt;&lt;/a&gt; for the &lt;a href=&#34;https://ggez.rs/&#34;&gt;ggez&lt;/a&gt; game framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/setzer22/godot-egui&#34;&gt;&lt;code&gt;godot-egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/godot-rust/godot-rust&#34;&gt;godot-rust&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nannou-org/nannou/tree/master/nannou_egui&#34;&gt;&lt;code&gt;nannou_egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://nannou.cc&#34;&gt;nannou&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nazariglez/notan/tree/main/crates/notan_egui&#34;&gt;&lt;code&gt;notan_egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/Nazariglez/notan&#34;&gt;notan&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/attackgoat/screen-13/tree/master/contrib/screen-13-egui&#34;&gt;&lt;code&gt;screen-13-egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/attackgoat/screen-13&#34;&gt;Screen 13&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucasmerlin/egui_skia&#34;&gt;&lt;code&gt;egui_skia&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/rust-skia/rust-skia/tree/master/skia-safe&#34;&gt;skia&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Smithay/smithay-egui&#34;&gt;&lt;code&gt;smithay-egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/Smithay/smithay/&#34;&gt;smithay&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tauri-apps/tauri-egui&#34;&gt;&lt;code&gt;tauri-egui&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://github.com/tauri-apps/tauri&#34;&gt;tauri&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Missing an integration for the thing you&#39;re working on? Create one, it&#39;s easy!&lt;/p&gt; &#xA;&lt;h3&gt;Writing your own egui integration&lt;/h3&gt; &#xA;&lt;p&gt;You need to collect &lt;a href=&#34;https://docs.rs/egui/latest/egui/struct.RawInput.html&#34;&gt;&lt;code&gt;egui::RawInput&lt;/code&gt;&lt;/a&gt; and handle &lt;a href=&#34;https://docs.rs/egui/latest/egui/struct.FullOutput.html&#34;&gt;&lt;code&gt;egui::FullOutput&lt;/code&gt;&lt;/a&gt;. The basic structure is this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let mut egui_ctx = egui::CtxRef::default();&#xA;&#xA;// Game loop:&#xA;loop {&#xA;    // Gather input (mouse, touches, keyboard, screen size, etc):&#xA;    let raw_input: egui::RawInput = my_integration.gather_input();&#xA;    let full_output = egui_ctx.run(raw_input, |egui_ctx| {&#xA;        my_app.ui(egui_ctx); // add panels, windows and widgets to `egui_ctx` here&#xA;    });&#xA;    let clipped_primitives = egui_ctx.tessellate(full_output.shapes); // creates triangles to paint&#xA;&#xA;    my_integration.paint(&amp;amp;full_output.textures_delta, clipped_primitives);&#xA;&#xA;    let platform_output = full_output.platform_output;&#xA;    my_integration.set_cursor_icon(platform_output.cursor_icon);&#xA;    if !platform_output.copied_text.is_empty() {&#xA;        my_integration.set_clipboard_text(platform_output.copied_text);&#xA;    }&#xA;    // See `egui::FullOutput` and `egui::PlatformOutput` for more&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a reference OpenGL backend, see &lt;a href=&#34;https://github.com/emilk/egui/raw/master/crates/egui_glium/src/painter.rs&#34;&gt;the &lt;code&gt;egui_glium&lt;/code&gt; painter&lt;/a&gt; or &lt;a href=&#34;https://github.com/emilk/egui/raw/master/crates/egui_glow/src/painter.rs&#34;&gt;the &lt;code&gt;egui_glow&lt;/code&gt; painter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging your integration&lt;/h3&gt; &#xA;&lt;h4&gt;Things look jagged&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Turn off backface culling.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;My text is blurry&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you set the proper &lt;code&gt;pixels_per_point&lt;/code&gt; in the input to egui.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the texture sampler is not off by half a pixel. Try nearest-neighbor sampler to check.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;My windows are too transparent or too dark&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;egui uses premultiplied alpha, so make sure your blending function is &lt;code&gt;(ONE, ONE_MINUS_SRC_ALPHA)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure your texture sampler is clamped (&lt;code&gt;GL_CLAMP_TO_EDGE&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;egui prefers linear color spaces for all blending so: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use an sRGBA-aware texture if available (e.g. &lt;code&gt;GL_SRGB8_ALPHA8&lt;/code&gt;). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Otherwise: remember to decode gamma in the fragment shader.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Decode the gamma of the incoming vertex colors in your vertex shader.&lt;/li&gt; &#xA;   &lt;li&gt;Turn on sRGBA/linear framebuffer if available (&lt;code&gt;GL_FRAMEBUFFER_SRGB&lt;/code&gt;). &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Otherwise: gamma-encode the colors before you write them again.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why immediate mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Immediate_mode_GUI&#34;&gt;immediate mode GUI library&lt;/a&gt;, as opposed to a &lt;em&gt;retained mode&lt;/em&gt; GUI library. The difference between retained mode and immediate mode is best illustrated with the example of a button: In a retained GUI you create a button, add it to some UI and install some on-click handler (callback). The button is retained in the UI, and to change the text on it you need to store some sort of reference to it. By contrast, in immediate mode you show the button and interact with it immediately, and you do so every frame (e.g. 60 times per second). This means there is no need for any on-click handler, nor to store any reference to it. In &lt;code&gt;egui&lt;/code&gt; this looks like this: &lt;code&gt;if ui.button(&#34;Save file&#34;).clicked() { save(file); }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A more detailed description of immediate mode can be found &lt;a href=&#34;https://docs.rs/egui/latest/egui/#understanding-immediate-mode&#34;&gt;in the &lt;code&gt;egui&lt;/code&gt; docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are advantages and disadvantages to both systems.&lt;/p&gt; &#xA;&lt;p&gt;The short of it is this: immediate mode GUI libraries are easier to use, but less powerful.&lt;/p&gt; &#xA;&lt;h3&gt;Advantages of immediate mode&lt;/h3&gt; &#xA;&lt;h4&gt;Usability&lt;/h4&gt; &#xA;&lt;p&gt;The main advantage of immediate mode is that the application code becomes vastly simpler:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You never need to have any on-click handlers and callbacks that disrupts your code flow.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t have to worry about a lingering callback calling something that is gone.&lt;/li&gt; &#xA; &lt;li&gt;Your GUI code can easily live in a simple function (no need for an object just for the UI).&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t have to worry about app state and GUI state being out-of-sync (i.e. the GUI showing something outdated), because the GUI isn&#39;t storing any state - it is showing the latest state &lt;em&gt;immediately&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In other words, a whole lot of code, complexity and bugs are gone, and you can focus your time on something more interesting than writing GUI code.&lt;/p&gt; &#xA;&lt;h3&gt;Disadvantages of immediate mode&lt;/h3&gt; &#xA;&lt;h4&gt;Layout&lt;/h4&gt; &#xA;&lt;p&gt;The main disadvantage of immediate mode is it makes layout more difficult. Say you want to show a small dialog window in the center of the screen. To position the window correctly the GUI library must first know the size of it. To know the size of the window the GUI library must first layout the contents of the window. In retained mode this is easy: the GUI library does the window layout, positions the window, then checks for interaction (&#34;was the OK button clicked?&#34;).&lt;/p&gt; &#xA;&lt;p&gt;In immediate mode you run into a paradox: to know the size of the window, we must do the layout, but the layout code also checks for interaction (&#34;was the OK button clicked?&#34;) and so it needs to know the window position &lt;em&gt;before&lt;/em&gt; showing the window contents. This means we must decide where to show the window &lt;em&gt;before&lt;/em&gt; we know its size!&lt;/p&gt; &#xA;&lt;p&gt;This is a fundamental shortcoming of immediate mode GUIs, and any attempt to resolve it comes with its own downsides.&lt;/p&gt; &#xA;&lt;p&gt;One workaround is to store the size and use it the next frame. This produces a frame-delay for the correct layout, producing occasional flickering the first frame something shows up. &lt;code&gt;egui&lt;/code&gt; does this for some things such as windows and grid layouts.&lt;/p&gt; &#xA;&lt;p&gt;You can also call the layout code twice (once to get the size, once to do the interaction), but that is not only more expensive, it&#39;s also complex to implement, and in some cases twice is not enough. &lt;code&gt;egui&lt;/code&gt; never does this.&lt;/p&gt; &#xA;&lt;p&gt;For &#34;atomic&#34; widgets (e.g. a button) &lt;code&gt;egui&lt;/code&gt; knows the size before showing it, so centering buttons, labels etc is possible in &lt;code&gt;egui&lt;/code&gt; without any special workarounds.&lt;/p&gt; &#xA;&lt;h4&gt;CPU usage&lt;/h4&gt; &#xA;&lt;p&gt;Since an immediate mode GUI does a full layout each frame, the layout code needs to be quick. If you have a very complex GUI this can tax the CPU. In particular, having a very large UI in a scroll area (with very long scrollback) can be slow, as the content needs to be laid out each frame.&lt;/p&gt; &#xA;&lt;p&gt;If you design the GUI with this in mind and refrain from huge scroll areas (or only lay out the part that is in view) then the performance hit is generally pretty small. For most cases you can expect &lt;code&gt;egui&lt;/code&gt; to take up 1-2 ms per frame, but &lt;code&gt;egui&lt;/code&gt; still has a lot of room for optimization (it&#39;s not something I&#39;ve focused on yet). You can also set up &lt;code&gt;egui&lt;/code&gt; to only repaint when there is interaction (e.g. mouse movement).&lt;/p&gt; &#xA;&lt;p&gt;If your GUI is highly interactive, then immediate mode may actually be more performant compared to retained mode. Go to any web page and resize the browser window, and you&#39;ll notice that the browser is very slow to do the layout and eats a lot of CPU doing it. Resize a window in &lt;code&gt;egui&lt;/code&gt; by contrast, and you&#39;ll get smooth 60 FPS at no extra CPU cost.&lt;/p&gt; &#xA;&lt;h4&gt;IDs&lt;/h4&gt; &#xA;&lt;p&gt;There are some GUI state that you want the GUI library to retain, even in an immediate mode library such as &lt;code&gt;egui&lt;/code&gt;. This includes position and sizes of windows and how far the user has scrolled in some UI. In these cases you need to provide &lt;code&gt;egui&lt;/code&gt; with a seed of a unique identifier (unique within the parent UI). For instance: by default &lt;code&gt;egui&lt;/code&gt; uses the window titles as unique IDs to store window positions. If you want two windows with the same name (or one window with a dynamic name) you must provide some other ID source to &lt;code&gt;egui&lt;/code&gt; (some unique integer or string).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; also needs to track which widget is being interacted with (e.g. which slider is being dragged). &lt;code&gt;egui&lt;/code&gt; uses unique id:s for this awell, but in this case the IDs are automatically generated, so there is no need for the user to worry about it. In particular, having two buttons with the same name is no problem (this is in contrast with &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;&lt;code&gt;Dear ImGui&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Overall, ID handling is a rare inconvenience, and not a big disadvantage.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/emilk/egui/discussions/categories/q-a&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Can I use &lt;code&gt;egui&lt;/code&gt; with non-latin characters?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! But you need to install your own font (&lt;code&gt;.ttf&lt;/code&gt; or &lt;code&gt;.otf&lt;/code&gt;) using &lt;code&gt;Context::set_fonts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Can I customize the look of egui?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! You can customize the colors, spacing, fonts and sizes of everything using &lt;code&gt;Context::set_style&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example (from &lt;a href=&#34;https://github.com/AlexxxRu/TinyPomodoro&#34;&gt;https://github.com/AlexxxRu/TinyPomodoro&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/emilk/egui/master/media/pompodoro-skin.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;h3&gt;How do I use egui with &lt;code&gt;async&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;If you call &lt;code&gt;.await&lt;/code&gt; in your GUI code, the UI will freeze, which is very bad UX. Instead, keep the GUI thread non-blocking and communicate with any concurrent tasks (&lt;code&gt;async&lt;/code&gt; tasks or other threads) with something like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Channels (e.g. &lt;a href=&#34;https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html&#34;&gt;&lt;code&gt;std::sync::mpsc::channel&lt;/code&gt;&lt;/a&gt;). Make sure to use &lt;a href=&#34;https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_recv&#34;&gt;&lt;code&gt;try_recv&lt;/code&gt;&lt;/a&gt; so you don&#39;t block the gui thread!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Arc&amp;lt;Mutex&amp;lt;Value&amp;gt;&amp;gt;&lt;/code&gt; (background thread sets a value; GUI thread reads it)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/poll-promise&#34;&gt;&lt;code&gt;poll_promise::Promise&lt;/code&gt;&lt;/a&gt; (example: &lt;a href=&#34;https://github.com/emilk/egui/raw/master/examples/download_image/&#34;&gt;&lt;code&gt;examples/download_image/&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/eventuals/latest/eventuals/struct.Eventual.html&#34;&gt;&lt;code&gt;eventuals::Eventual&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/tokio/latest/tokio/sync/watch/fn.channel.html&#34;&gt;&lt;code&gt;tokio::sync:&lt;span&gt;⌚&lt;/span&gt;:channel&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What about accessibility, such as screen readers?&lt;/h3&gt; &#xA;&lt;p&gt;egui includes optional support for &lt;a href=&#34;https://accesskit.dev/&#34;&gt;AccessKit&lt;/a&gt;, which currently implements the native accessibility APIs on Windows and macOS. This feature is enabled by default in eframe. For platforms that AccessKit doesn&#39;t yet support, including web, there is an experimental built-in screen reader; in &lt;a href=&#34;https://www.egui.rs/#demo&#34;&gt;the web demo&lt;/a&gt; you can enable it in the &#34;Backend&#34; tab.&lt;/p&gt; &#xA;&lt;p&gt;The original discussion of accessibility in egui is at &lt;a href=&#34;https://github.com/emilk/egui/issues/167&#34;&gt;https://github.com/emilk/egui/issues/167&lt;/a&gt;. Now that AccessKit support is merged, providing a strong foundation for future accessibility work, please open new issues on specific accessibility problems.&lt;/p&gt; &#xA;&lt;h3&gt;What is the difference between &lt;a href=&#34;https://docs.rs/egui&#34;&gt;egui&lt;/a&gt; and &lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/eframe&#34;&gt;eframe&lt;/a&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; is a 2D user interface library for laying out and interacting with buttons, sliders, etc. &lt;code&gt;egui&lt;/code&gt; has no idea if it is running on the web or natively, and does not know how to collect input or show things on screen. That is the job of &lt;em&gt;the integration&lt;/em&gt; or &lt;em&gt;backend&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is common to use &lt;code&gt;egui&lt;/code&gt; from a game engine (using e.g. &lt;a href=&#34;https://docs.rs/bevy_egui&#34;&gt;&lt;code&gt;bevy_egui&lt;/code&gt;&lt;/a&gt;), but you can also use &lt;code&gt;egui&lt;/code&gt; stand-alone using &lt;code&gt;eframe&lt;/code&gt;. &lt;code&gt;eframe&lt;/code&gt; has integration for web and native, and handles input and rendering. The &lt;em&gt;frame&lt;/em&gt; in &lt;code&gt;eframe&lt;/code&gt; stands both for the frame in which your egui app resides and also for &#34;framework&#34; (&lt;code&gt;frame&lt;/code&gt; is a framework, &lt;code&gt;egui&lt;/code&gt; is a library).&lt;/p&gt; &#xA;&lt;h3&gt;How do I render 3D stuff in an egui area?&lt;/h3&gt; &#xA;&lt;p&gt;There are multiple ways to combine egui with 3D. The simplest way is to use a 3D library and have egui sit on top of the 3D view. See for instance &lt;a href=&#34;https://github.com/mvlabat/bevy_egui&#34;&gt;&lt;code&gt;bevy_egui&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/asny/three-d&#34;&gt;&lt;code&gt;three-d&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to embed 3D into an egui view there are two options.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Shape::Callback&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilk/egui/raw/master/examples/custom_3d_glow.rs&#34;&gt;https://github.com/emilk/egui/blob/master/examples/custom_3d_glow.rs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Shape::Callback&lt;/code&gt; will call your code when egui gets painted, to show anything using whatever the background rendering context is. When using &lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/eframe&#34;&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; this will be &lt;a href=&#34;https://github.com/grovesNL/glow&#34;&gt;&lt;code&gt;glow&lt;/code&gt;&lt;/a&gt;. Other integrations will give you other rendering contexts, if they support &lt;code&gt;Shape::Callback&lt;/code&gt; at all.&lt;/p&gt; &#xA;&lt;h4&gt;Render-to-texture&lt;/h4&gt; &#xA;&lt;p&gt;You can also render your 3D scene to a texture and display it using &lt;a href=&#34;https://docs.rs/egui/latest/egui/struct.Ui.html#method.image&#34;&gt;&lt;code&gt;ui.image(…)&lt;/code&gt;&lt;/a&gt;. You first need to convert the native texture to an &lt;a href=&#34;https://docs.rs/egui/latest/egui/enum.TextureId.html&#34;&gt;&lt;code&gt;egui::TextureId&lt;/code&gt;&lt;/a&gt;, and how to do this depends on the integration you use.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/not-fl3/egui-miniquad&#34;&gt;&lt;code&gt;egui-miniquad&lt;/code&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/not-fl3/egui-miniquad/raw/master/examples/render_to_egui_image.rs&#34;&gt;https://github.com/not-fl3/egui-miniquad/blob/master/examples/render_to_egui_image.rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/emilk/egui/tree/master/crates/egui_glium&#34;&gt;&lt;code&gt;egui_glium&lt;/code&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/raw/master/crates/egui_glium/examples/native_texture.rs&#34;&gt;https://github.com/emilk/egui/blob/master/crates/egui_glium/examples/native_texture.rs&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Conventions and design choices&lt;/h3&gt; &#xA;&lt;p&gt;All coordinates are in screen space coordinates, with (0, 0) in the top left corner&lt;/p&gt; &#xA;&lt;p&gt;All coordinates are in &#34;points&#34; which may consist of many physical pixels.&lt;/p&gt; &#xA;&lt;p&gt;All colors have premultiplied alpha.&lt;/p&gt; &#xA;&lt;p&gt;egui uses the builder pattern for construction widgets. For instance: &lt;code&gt;ui.add(Label::new(&#34;Hello&#34;).text_color(RED));&lt;/code&gt; I am not a big fan of the builder pattern (it is quite verbose both in implementation and in use) but until Rust has named, default arguments it is the best we can do. To alleviate some of the verbosity there are common-case helper functions, like &lt;code&gt;ui.label(&#34;Hello&#34;);&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of using matching &lt;code&gt;begin/end&lt;/code&gt; style function calls (which can be error prone) egui prefers to use &lt;code&gt;FnOnce&lt;/code&gt; closures passed to a wrapping function. Lambdas are a bit ugly though, so I&#39;d like to find a nicer solution to this. More discussion of this at &lt;a href=&#34;https://github.com/emilk/egui/issues/1004#issuecomment-1001650754&#34;&gt;https://github.com/emilk/egui/issues/1004#issuecomment-1001650754&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;egui uses a single &lt;code&gt;RwLock&lt;/code&gt; for short-time locks on each access of &lt;code&gt;Context&lt;/code&gt; data. This is to leave implementation simple and transactional and allow users to run their UI logic in parallel. Instead of creating mutex guards, egui uses closures passed to a wrapping function, e.g. &lt;code&gt;ctx.input(|i| i.key_down(Key::A))&lt;/code&gt;. This is to make it less likely that a user would accidentally double-lock the &lt;code&gt;Context&lt;/code&gt;, which would lead to a deadlock.&lt;/p&gt; &#xA;&lt;h3&gt;Inspiration&lt;/h3&gt; &#xA;&lt;p&gt;The one and only &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt; is a great Immediate Mode GUI for C++ which works with many backends. That library revolutionized how I think about GUI code and turned GUI programming from something I hated to do to something I now enjoy.&lt;/p&gt; &#xA;&lt;h3&gt;Name&lt;/h3&gt; &#xA;&lt;p&gt;The name of the library and the project is &#34;egui&#34; and pronounced as &#34;e-gooey&#34;. Please don&#39;t write it as &#34;EGUI&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The library was originally called &#34;Emigui&#34;, but was renamed to &#34;egui&#34; in 2020.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;egui author and maintainer: Emil Ernerfeldt &lt;a href=&#34;https://github.com/emilk&#34;&gt;(@emilk&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Notable contributions by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n2&#34;&gt;@n2&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/253&#34;&gt;Mobile web input and IME support&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/optozorax&#34;&gt;@optozorax&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/257&#34;&gt;Arbitrary widget data storage&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quadruple-output&#34;&gt;@quadruple-output&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/306&#34;&gt;Multitouch&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EmbersArc&#34;&gt;@EmbersArc&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pulls?q=+is%3Apr+author%3AEmbersArc&#34;&gt;Plots&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AsmPrgmC3&#34;&gt;@AsmPrgmC3&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/650&#34;&gt;Proper sRGBA blending for web&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AlexApps99&#34;&gt;@AlexApps99&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/685&#34;&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mankinskin&#34;&gt;@mankinskin&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/543&#34;&gt;Context menus&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/t18b219k&#34;&gt;@t18b219k&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/868&#34;&gt;Port glow painter to web&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielkeller&#34;&gt;@danielkeller&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/1050&#34;&gt;&lt;code&gt;Context&lt;/code&gt; refactor&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MaximOsipenko&#34;&gt;@MaximOsipenko&lt;/a&gt;: &lt;a href=&#34;https://github.com/emilk/egui/pull/2625&#34;&gt;&lt;code&gt;Context&lt;/code&gt; lock refactor&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;And &lt;a href=&#34;https://github.com/emilk/egui/graphs/contributors?type=a&#34;&gt;many more&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;egui is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt; OR &lt;a href=&#34;https://raw.githubusercontent.com/emilk/egui/master/LICENSE-APACHE&#34;&gt;Apache-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The flattening algorithm for the cubic bezier curve and quadratic bezier curve is from &lt;a href=&#34;https://docs.rs/lyon_geom/latest/lyon_geom/&#34;&gt;lyon_geom&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Default fonts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;emoji-icon-font.ttf&lt;/code&gt;: &lt;a href=&#34;https://github.com/jslegers/emoji-icon-font&#34;&gt;Copyright (c) 2014 John Slegers&lt;/a&gt; , MIT License&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Hack-Regular.ttf&lt;/code&gt;: &lt;a href=&#34;https://github.com/source-foundry/Hack&#34;&gt;https://github.com/source-foundry/Hack&lt;/a&gt;, &lt;a href=&#34;https://github.com/source-foundry/Hack/raw/master/LICENSE.md&#34;&gt;MIT Licence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NotoEmoji-Regular.ttf&lt;/code&gt;: &lt;a href=&#34;https://google.com/get/noto&#34;&gt;google.com/get/noto&lt;/a&gt;, &lt;a href=&#34;https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;amp;id=OFL&#34;&gt;SIL Open Font License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ubuntu-Light.ttf&lt;/code&gt; by &lt;a href=&#34;http://www.daltonmaag.com/&#34;&gt;Dalton Maag&lt;/a&gt;: &lt;a href=&#34;https://ubuntu.com/legal/font-licence&#34;&gt;Ubuntu font licence&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/emilk/egui/master/media/rerun_io_logo.png&#34; width=&#34;50%&#34;&gt; &#xA; &lt;p&gt;egui development is sponsored by &lt;a href=&#34;https://www.rerun.io/&#34;&gt;Rerun&lt;/a&gt;, a startup doing&lt;br&gt; visualizations for computer vision and robotics.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>andreabergia/rjvm</title>
    <updated>2023-07-30T02:05:24Z</updated>
    <id>tag:github.com,2023-07-30:/andreabergia/rjvm</id>
    <link href="https://github.com/andreabergia/rjvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny JVM written in Rust. Learning project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RJVM&lt;/h1&gt; &#xA;&lt;p&gt;This project is an attempt to write a minimal JVM 7 using Rust.&lt;/p&gt; &#xA;&lt;p&gt;Important note: &lt;strong&gt;this is a hobby project, built for fun and for learning purposes&lt;/strong&gt;. In particular, it is my first real program in Rust and I&#39;ve used to learn the language - thus, I&#39;m sure some parts of the code are not very &#34;idiomatic&#34; Rust since I&#39;m just learning the language.&lt;/p&gt; &#xA;&lt;p&gt;The code quality is definitely not production ready - there are not enough tests, there isn&#39;t enough documentation and some of the initial decision should be revisited. (I.e.: this is not representative of the code I write for work 😊.)&lt;/p&gt; &#xA;&lt;p&gt;The code is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/andreabergia/rjvm/main/LICENSE&#34;&gt;Apache v2 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What has been implemented and what hasn&#39;t&lt;/h2&gt; &#xA;&lt;p&gt;The current code can execute &lt;a href=&#34;https://raw.githubusercontent.com/andreabergia/rjvm/main/vm/tests/resources/rjvm&#34;&gt;various simple programs&lt;/a&gt;, but it has a lot of limitations.&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of the implemented features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;parsing .class files&lt;/li&gt; &#xA; &lt;li&gt;resolving classes from a jar file, or from a folder&lt;/li&gt; &#xA; &lt;li&gt;execution of real code: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;primitive types, arrays, strings&lt;/li&gt; &#xA;   &lt;li&gt;control flow statements&lt;/li&gt; &#xA;   &lt;li&gt;classes, subclasses, interfaces&lt;/li&gt; &#xA;   &lt;li&gt;methods (virtual, static, natives)&lt;/li&gt; &#xA;   &lt;li&gt;exception throwing and catching&lt;/li&gt; &#xA;   &lt;li&gt;stack traces&lt;/li&gt; &#xA;   &lt;li&gt;garbage collection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, there are a lot of important things not implemented (and not planned to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;threading&lt;/li&gt; &#xA; &lt;li&gt;multi dimensional arrays&lt;/li&gt; &#xA; &lt;li&gt;reflection&lt;/li&gt; &#xA; &lt;li&gt;annotations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10&#34;&gt;class file verification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I/O&lt;/li&gt; &#xA; &lt;li&gt;just in time code execution (JIT)&lt;/li&gt; &#xA; &lt;li&gt;proper class loaders&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The JVM uses the &lt;em&gt;real classes&lt;/em&gt; from &lt;a href=&#34;https://jdk.java.net/java-se-ri/7&#34;&gt;OpenJDK 7&lt;/a&gt; - meaning the classes such as &lt;code&gt;java.lang.Object&lt;/code&gt;, &lt;code&gt;java.lang.String&lt;/code&gt; or &lt;code&gt;java.lang.Exception&lt;/code&gt; are real production classes, without any modifications. The JVM is &#34;good enough&#34; to parse and execute their code, something which makes me very happy indeed. 😊&lt;/p&gt; &#xA;&lt;p&gt;The VM is limited to 64 bits platforms, as there are quite a few places where I assume that the size of a pointer is exactly 8 bytes.&lt;/p&gt; &#xA;&lt;h2&gt;Implementations that should be modified&lt;/h2&gt; &#xA;&lt;p&gt;One poor implementation detail is that for things like stack overflow, accessing an array out of bounds, divisions by zero, etc. I should be throwing real java exceptions, rather than internal errors that will abort executions. In general, the error handling is not great - there are no details when you get an internal error, something that made debugging more painful than it should have been.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also quite a few things whose implementation is quite poor, or not really coherent with the JVM specs, but it is &#34;good enough&#34; to execute some simple code; for example I do not have a class for arrays. If you&#39;re curious, look for the TODO in the code.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m also quite sure there&#39;s a million bugs in the code. 😅&lt;/p&gt; &#xA;&lt;h2&gt;Code structure&lt;/h2&gt; &#xA;&lt;p&gt;The code is currently structured in three crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;reader&lt;/code&gt;, which is able to read a &lt;code&gt;.class&lt;/code&gt; file and contains various data structures for modelling their content;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vm&lt;/code&gt;, which contains the virtual machine that can execute the code as a library;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vm_cli&lt;/code&gt;, which contains a very simple command-line launcher to run the vm, in the spirit of the &lt;code&gt;java&lt;/code&gt; executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are some unit test and some integration tests - definitely not enough, but since this is not production code but just a learning exercise, I&#39;m not that worried about it. Still, IntelliJ tells me I have a bit above 80% of coverage, which is not bad. The error paths aren&#39;t really tested, though.&lt;/p&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt; as a command runner, but most tasks are just cargo commands.&lt;/p&gt; &#xA;&lt;h1&gt;Project status and further works&lt;/h1&gt; &#xA;&lt;p&gt;I consider the project complete. It was super instructive, but I do not plan to keep working on it. I do plan to blog about it &lt;a href=&#34;https://andreabergia.com&#34;&gt;on my website&lt;/a&gt;, though!&lt;/p&gt; &#xA;&lt;p&gt;The only thing I&#39;m considering is to extract the &lt;code&gt;reader&lt;/code&gt; crate in a separate repository, and publish it on &lt;a href=&#34;https://crates.io/&#34;&gt;crates.io&lt;/a&gt;, since it could actually be useful to someone else.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pretzelhammer/rust-blog</title>
    <updated>2023-07-30T02:05:24Z</updated>
    <id>tag:github.com,2023-07-30:/pretzelhammer/rust-blog</id>
    <link href="https://github.com/pretzelhammer/rust-blog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Educational blog posts for Rust beginners&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pretzelhammer&#39;s Rust blog 🦀&lt;/h1&gt; &#xA;&lt;p&gt;I write educational content for Rust beginners and Rust advanced beginners.&lt;/p&gt; &#xA;&lt;p&gt;My posts are listed below in reverse chronological order.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Date&lt;/th&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Translations&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2021-05-11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/restful-api-in-sync-and-async-rust.md&#34;&gt;RESTful API in Sync &amp;amp; Async Rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2021-03-31&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/tour-of-rusts-standard-library-traits.md&#34;&gt;Tour of Rust&#39;s Standard Library Traits&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/translations/zh-hans/tour-of-rusts-standard-library-traits.md&#34;&gt;中文&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2020-11-01&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/too-many-brainfuck-compilers.md&#34;&gt;Learn Assembly with Entirely Too Many Brainfuck Compilers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2020-07-22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/sizedness-in-rust.md&#34;&gt;Sizedness in Rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2020-05-19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/common-rust-lifetime-misconceptions.md&#34;&gt;Common Rust Lifetime Misconceptions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/translations/rus/common-rust-lifetime-misconceptions.md&#34;&gt;русский&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/translations/jp/common-rust-lifetime-misconceptions.md&#34;&gt;日本語&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/translations/zh-hans/common-rust-lifetime-misconceptions.md&#34;&gt;中文&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2020-05-09&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/learning-rust-in-2020.md&#34;&gt;Learning Rust in 2020&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/translations/zh-hans/learning-rust-in-2020.md&#34;&gt;中文&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2020-05-02&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/posts/why-blog.md&#34;&gt;Why blog?&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: Translations are community-maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Notifications&lt;/h2&gt; &#xA;&lt;p&gt;Get notified when a blog post get published by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/pretzelhammer&#34;&gt;Following pretzelhammer on Twitter&lt;/a&gt; or&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pretzelhammer/rust-blog/releases.atom&#34;&gt;Subscribing to this repo&#39;s release RSS feed&lt;/a&gt; or&lt;/li&gt; &#xA; &lt;li&gt;Watching this repo&#39;s releases (click &lt;code&gt;Watch&lt;/code&gt; -&amp;gt; click &lt;code&gt;Custom&lt;/code&gt; -&amp;gt; select &lt;code&gt;Releases&lt;/code&gt; -&amp;gt; click &lt;code&gt;Apply&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you have any feedback please feel welcome to &lt;a href=&#34;https://github.com/pretzelhammer/rust-blog/issues/new&#34;&gt;open an issue&lt;/a&gt; on this repo. I accept pull requests for minor fixes like typos and grammar.&lt;/p&gt; &#xA;&lt;h2&gt;Discuss&lt;/h2&gt; &#xA;&lt;p&gt;This repo has a &lt;a href=&#34;https://github.com/pretzelhammer/rust-blog/discussions&#34;&gt;discussion forum&lt;/a&gt;! Feel free to ask questions or start discussions.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;If you wanna translate a blog post into another language that&#39;s awesome! Please feel free to fork this repo and promote your translation however you like. I also accept pull requests for translations if you&#39;d like to host your translation on my blog directly.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;To be compatible with &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;Rust&lt;/a&gt;, all code examples in this blog are licensed under &lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/license-apache&#34;&gt;Apache License Version 2.0&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/pretzelhammer/rust-blog/master/license-mit&#34;&gt;MIT License&lt;/a&gt;, at your option.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d like to retain exclusive rights to the English version of the posts themselves, but as mentioned above if you translate a post into another language you&#39;re welcome to promote your translations however you like.&lt;/p&gt;</summary>
  </entry>
</feed>