<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-17T02:01:59Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>salvo-rs/salvo</title>
    <updated>2023-12-17T02:01:59Z</updated>
    <id>tag:github.com,2023-12-17:/salvo-rs/salvo</id>
    <link href="https://github.com/salvo-rs/salvo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful web framework that can make your work easier&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img alt=&#34;Savlo&#34; width=&#34;132&#34; style=&#34;max-width:40%;min-width:60px;&#34; src=&#34;https://salvo.rs/images/logo-text.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/salvo-rs/salvo/raw/main/README.md&#34;&gt;English&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/salvo-rs/salvo/raw/main/README.zh-hans.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/salvo-rs/salvo/raw/main/README.zh-hant.md&#34;&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/salvo-rs/salvo/actions&#34;&gt; &lt;img alt=&#34;build status&#34; src=&#34;https://github.com/salvo-rs/salvo/workflows/ci-linux/badge.svg?branch=main&amp;amp;event=push&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/salvo-rs/salvo/actions&#34;&gt; &lt;img alt=&#34;build status&#34; src=&#34;https://github.com/salvo-rs/salvo/workflows/ci-macos/badge.svg?branch=main&amp;amp;event=push&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/salvo-rs/salvo/actions&#34;&gt; &lt;img alt=&#34;build status&#34; src=&#34;https://github.com/salvo-rs/salvo/workflows/ci-windows/badge.svg?branch=main&amp;amp;event=push&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://discord.gg/G8KfmS6ByH&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1041442427006890014.svg?logo=discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/salvo&#34;&gt;&lt;img alt=&#34;crates.io&#34; src=&#34;https://img.shields.io/crates/v/salvo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/salvo&#34;&gt;&lt;img alt=&#34;Documentation&#34; src=&#34;https://docs.rs/salvo/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-secure-code/safety-dance/&#34;&gt;&lt;img alt=&#34;unsafe forbidden&#34; src=&#34;https://img.shields.io/badge/unsafe-forbidden-success.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html&#34;&gt;&lt;img alt=&#34;Rust Version&#34; src=&#34;https://img.shields.io/badge/rust-1.70%2B-blue&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://salvo.rs&#34;&gt; &lt;img alt=&#34;Website&#34; src=&#34;https://img.shields.io/badge/https-salvo.rs-%23f00&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/salvo-rs/salvo&#34;&gt;&lt;img alt=&#34;codecov&#34; src=&#34;https://codecov.io/gh/salvo-rs/salvo/branch/main/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/salvo&#34;&gt;&lt;img alt=&#34;Download&#34; src=&#34;https://img.shields.io/crates/d/salvo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/crates/l/salvo.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Salvo is an extremely simple and powerful Rust web backend framework. Only basic Rust knowledge is required to develop backend services.&lt;/p&gt; &#xA;&lt;h2&gt;üéØ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built with &lt;a href=&#34;https://crates.io/crates/hyper&#34;&gt;Hyper 1.0&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/tokio&#34;&gt;Tokio&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;HTTP1, HTTP2 and &lt;strong&gt;HTTP3&lt;/strong&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Unified middleware and handle interface;&lt;/li&gt; &#xA; &lt;li&gt;Router can be nested infinitely, and multiple middlewares can be attached to any router;&lt;/li&gt; &#xA; &lt;li&gt;Integrated Multipart form processing;&lt;/li&gt; &#xA; &lt;li&gt;Support WebSocket, WebTransport;&lt;/li&gt; &#xA; &lt;li&gt;Support OpenAPI, generate OpenAPI data automatic;&lt;/li&gt; &#xA; &lt;li&gt;Support Acme, automatically get TLS certificate from &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;let&#39;s encrypt&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Support Tower service and layer;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;You can view samples &lt;a href=&#34;https://github.com/salvo-rs/salvo/tree/main/examples&#34;&gt;here&lt;/a&gt;, or view &lt;a href=&#34;https://salvo.rs&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üõ†Ô∏è Salvo CLI&lt;/h3&gt; &#xA;&lt;p&gt;Salvo CLI is a command-line tool that simplifies the creation of new Salvo projects, supporting templates for web APIs, websites, databases (including SQLite, PostgreSQL, and MySQL via SQLx, SeaORM, Diesel, Rbatis), and basic middleware. You can use &lt;a href=&#34;https://github.com/salvo-rs/salvo-cli&#34;&gt;salvo-cli&lt;/a&gt; to create a new Salvo project:&lt;/p&gt; &#xA;&lt;h4&gt;install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install salvo-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;create a new salvo project&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;salvo new project_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Hello World with ACME and HTTP3&lt;/h3&gt; &#xA;&lt;p&gt;Easily implement a server that supports ACME to automatically obtain certificates and supports HTTP3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use salvo::prelude::*;&#xA;&#xA;#[handler]&#xA;async fn hello(res: &amp;amp;mut Response) {&#xA;    res.render(Text::Plain(&#34;Hello World&#34;));&#xA;}&#xA;&#xA;#[tokio::main]&#xA;async fn main() {&#xA;    let mut router = Router::new().get(hello);&#xA;    let listener = TcpListener::new(&#34;0.0.0.0:443&#34;)&#xA;        .acme()&#xA;        .cache_path(&#34;temp/letsencrypt&#34;)&#xA;        .add_domain(&#34;test.salvo.rs&#34;)&#xA;        .http01_challege(&amp;amp;mut router).quinn(&#34;0.0.0.0:443&#34;);&#xA;    let acceptor = listener.join(TcpListener::new(&#34;0.0.0.0:80&#34;)).bind().await;&#xA;    Server::new(acceptor).serve(router).await;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;There is no difference between Handler and Middleware, Middleware is just Handler. &lt;strong&gt;So you can write middlewares without to know concepts like associated type, generic type. You can write middleware if you can write function!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use salvo::http::header::{self, HeaderValue};&#xA;use salvo::prelude::*;&#xA;&#xA;#[handler]&#xA;async fn add_header(res: &amp;amp;mut Response) {&#xA;    res.headers_mut()&#xA;        .insert(header::SERVER, HeaderValue::from_static(&#34;Salvo&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add it to router:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;Router::new().hoop(add_header).get(hello)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a very simple middleware, it adds &lt;code&gt;Header&lt;/code&gt; to &lt;code&gt;Response&lt;/code&gt;, view &lt;a href=&#34;https://github.com/salvo-rs/salvo/raw/main/examples/middleware-add-header/src/main.rs&#34;&gt;full source code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chainable tree routing system&lt;/h3&gt; &#xA;&lt;p&gt;Normally we write routing like thisÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;Router::with_path(&#34;articles&#34;).get(list_articles).post(create_article);&#xA;Router::with_path(&#34;articles/&amp;lt;id&amp;gt;&#34;)&#xA;    .get(show_article)&#xA;    .patch(edit_article)&#xA;    .delete(delete_article);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Often viewing articles and article lists does not require user login, but creating, editing, deleting articles, etc. require user login authentication permissions. The tree-like routing system in Salvo can meet this demand. We can write routers without user login together:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;Router::with_path(&#34;articles&#34;)&#xA;    .get(list_articles)&#xA;    .push(Router::with_path(&#34;&amp;lt;id&amp;gt;&#34;).get(show_article));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then write the routers that require the user to login together, and use the corresponding middleware to verify whether the user is logged in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;Router::with_path(&#34;articles&#34;)&#xA;    .hoop(auth_check)&#xA;    .push(Router::with_path(&#34;&amp;lt;id&amp;gt;&#34;).patch(edit_article).delete(delete_article));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although these two routes have the same &lt;code&gt;path(&#34;articles&#34;)&lt;/code&gt;, they can still be added to the same parent route at the same time, so the final route looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;Router::new()&#xA;    .push(&#xA;        Router::with_path(&#34;articles&#34;)&#xA;            .get(list_articles)&#xA;            .push(Router::with_path(&#34;&amp;lt;id&amp;gt;&#34;).get(show_article)),&#xA;    )&#xA;    .push(&#xA;        Router::with_path(&#34;articles&#34;)&#xA;            .hoop(auth_check)&#xA;            .push(Router::with_path(&#34;&amp;lt;id&amp;gt;&#34;).patch(edit_article).delete(delete_article)),&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt; matches a fragment in the path, under normal circumstances, the article &lt;code&gt;id&lt;/code&gt; is just a number, which we can use regular expressions to restrict &lt;code&gt;id&lt;/code&gt; matching rules, &lt;code&gt;r&#34;&amp;lt;id:/\d+/&amp;gt;&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;&amp;lt;**&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;*+&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;*?&amp;gt;&lt;/code&gt; to match all remaining path fragments. In order to make the code more readable, you can also add appropriate name to make the path semantics more clear, for example: &lt;code&gt;&amp;lt;**file_path&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some regular expressions for matching paths need to be used frequently, and it can be registered in advance, such as GUID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;PathFilter::register_wisp_regex(&#xA;    &#34;guid&#34;,&#xA;    Regex::new(&#34;[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}&#34;).unwrap(),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This makes it more concise when path matching is required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;Router::with_path(&#34;&amp;lt;id:guid&amp;gt;&#34;).get(index)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View &lt;a href=&#34;https://github.com/salvo-rs/salvo/raw/main/examples/routing-guid/src/main.rs&#34;&gt;full source code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;File upload&lt;/h3&gt; &#xA;&lt;p&gt;We can get file async by the function &lt;code&gt;file&lt;/code&gt; in &lt;code&gt;Request&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[handler]&#xA;async fn upload(req: &amp;amp;mut Request, res: &amp;amp;mut Response) {&#xA;    let file = req.file(&#34;file&#34;).await;&#xA;    if let Some(file) = file {&#xA;        let dest = format!(&#34;temp/{}&#34;, file.name().unwrap_or_else(|| &#34;file&#34;.into()));&#xA;        if let Err(e) = tokio::fs::copy(&amp;amp;file.path, Path::new(&amp;amp;dest)).await {&#xA;            res.status_code(StatusCode::INTERNAL_SERVER_ERROR);&#xA;        } else {&#xA;            res.render(&#34;Ok&#34;);&#xA;        }&#xA;    } else {&#xA;        res.status_code(StatusCode::BAD_REQUEST);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extract data from request&lt;/h3&gt; &#xA;&lt;p&gt;You can easily get data from multiple different data sources and assemble it into the type you want. You can define a custom type first, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[derive(Serialize, Deserialize, Extractible, Debug)]&#xA;/// Get the data field value from the body by default.&#xA;#[salvo(extract(default_source(from = &#34;body&#34;)))]&#xA;struct GoodMan&amp;lt;&#39;a&amp;gt; {&#xA;    /// The id number is obtained from the request path parameter, and the data is automatically parsed as i64 type.&#xA;    #[salvo(extract(source(from = &#34;param&#34;)))]&#xA;    id: i64,&#xA;    /// Reference types can be used to avoid memory copying.&#xA;    username: &amp;amp;&#39;a str,&#xA;    first_name: String,&#xA;    last_name: String,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;Handler&lt;/code&gt; you can get the data like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[handler]&#xA;async fn edit(req: &amp;amp;mut Request) {&#xA;    let good_man: GoodMan&amp;lt;&#39;_&amp;gt; = req.extract().await.unwrap();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even pass the type directly to the function as a parameter, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[handler]&#xA;async fn edit&amp;lt;&#39;a&amp;gt;(good_man: GoodMan&amp;lt;&#39;a&amp;gt;) {&#xA;    res.render(Json(good_man));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View &lt;a href=&#34;https://github.com/salvo-rs/salvo/raw/main/examples/extract-nested/src/main.rs&#34;&gt;full source code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OpenAPI Supported&lt;/h3&gt; &#xA;&lt;p&gt;Perfect support for OpenAPI can be achieved without making significant changes to the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[derive(Serialize, Deserialize, ToSchema, Debug)]&#xA;struct MyObject&amp;lt;T: ToSchema + std::fmt::Debug&amp;gt; {&#xA;    value: T,&#xA;}&#xA;&#xA;#[endpoint]&#xA;async fn use_string(body: JsonBody&amp;lt;MyObject&amp;lt;String&amp;gt;&amp;gt;) -&amp;gt; String {&#xA;    format!(&#34;{:?}&#34;, body)&#xA;}&#xA;#[endpoint]&#xA;async fn use_i32(body: JsonBody&amp;lt;MyObject&amp;lt;i32&amp;gt;&amp;gt;) -&amp;gt; String {&#xA;    format!(&#34;{:?}&#34;, body)&#xA;}&#xA;#[endpoint]&#xA;async fn use_u64(body: JsonBody&amp;lt;MyObject&amp;lt;u64&amp;gt;&amp;gt;) -&amp;gt; String {&#xA;    format!(&#34;{:?}&#34;, body)&#xA;}&#xA;&#xA;#[tokio::main]&#xA;async fn main() {&#xA;    tracing_subscriber::fmt().init();&#xA;&#xA;    let router = Router::new()&#xA;        .push(Router::with_path(&#34;i32&#34;).post(use_i32))&#xA;        .push(Router::with_path(&#34;u64&#34;).post(use_u64))&#xA;        .push(Router::with_path(&#34;string&#34;).post(use_string));&#xA;&#xA;    let doc = OpenApi::new(&#34;test api&#34;, &#34;0.0.1&#34;).merge_router(&amp;amp;router);&#xA;&#xA;    let router = router&#xA;        .push(doc.into_router(&#34;/api-doc/openapi.json&#34;))&#xA;        .push(SwaggerUi::new(&#34;/api-doc/openapi.json&#34;).into_router(&#34;swagger-ui&#34;));&#xA;&#xA;    let acceptor = TcpListener::new(&#34;127.0.0.1:5800&#34;).bind().await;&#xA;    Server::new(acceptor).serve(router).await;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Examples&lt;/h3&gt; &#xA;&lt;p&gt;Your can find more examples in &lt;a href=&#34;https://raw.githubusercontent.com/salvo-rs/salvo/main/examples/&#34;&gt;examples&lt;/a&gt; folder. You can run these examples with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples&#xA;cargo run --bin example-basic-auth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any example name you want to run instead of &lt;code&gt;basic-auth&lt;/code&gt; here.&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Performance&lt;/h2&gt; &#xA;&lt;p&gt;Benchmark testing result can be found from here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://web-frameworks-benchmark.netlify.app/result?l=rust&#34;&gt;https://web-frameworks-benchmark.netlify.app/result?l=rust&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r22&#34;&gt;https://www.techempower.com/benchmarks/#section=data-r22&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü©∏ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are absolutely, positively welcome and encouraged! Contributions come in many forms. You could:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Submit a feature request or bug report as an issue;&lt;/li&gt; &#xA; &lt;li&gt;Comment on issues that require feedback;&lt;/li&gt; &#xA; &lt;li&gt;Contribute code via pull requests;&lt;/li&gt; &#xA; &lt;li&gt;Publish Salvo-related technical articles on blogs or technical platforms„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All pull requests are code reviewed and tested by the CI. Note that unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Salvo by you shall be dual licensed under the MIT License, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;h2&gt;‚òï Supporters&lt;/h2&gt; &#xA;&lt;p&gt;Salvo is an open source project. If you want to support Salvo, you can ‚òï &lt;a href=&#34;https://ko-fi.com/chrislearn&#34;&gt;&lt;strong&gt;buy a coffee here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö†Ô∏è License&lt;/h2&gt; &#xA;&lt;p&gt;Salvo is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/salvo-rs/salvo/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/salvo-rs/salvo/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jdx/rtx</title>
    <updated>2023-12-17T02:01:59Z</updated>
    <id>tag:github.com,2023-12-17:/jdx/rtx</id>
    <link href="https://github.com/jdx/rtx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Runtime Executor (asdf-plugin compatible)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/jdx/rtx&#34;&gt;&#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; width=&#34;617&#34; srcset=&#34;./docs/logo-dark@2x.png&#34;&gt; &#xA;   &lt;img alt=&#34;rtx logo&#34; width=&#34;617&#34; src=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/logo-light@2x.png&#34;&gt; &#xA;  &lt;/picture&gt;&lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/rtx-cli&#34;&gt;&lt;img alt=&#34;Crates.io&#34; src=&#34;https://img.shields.io/crates/v/rtx-cli?style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jdx/rtx/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/jdx/rtx?color=%2320A920&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jdx/rtx/actions/workflows/rtx.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/jdx/rtx/rtx.yml?color=%2320A920&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://codecov.io/gh/jdx/rtx&#34;&gt;&lt;img alt=&#34;Codecov&#34; src=&#34;https://img.shields.io/codecov/c/github/jdx/rtx?color=%2320A920&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/mABnUDvP57&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;em&gt;Polyglot runtime manager (asdf rust clone)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;asdf-compatible&lt;/strong&gt; - rtx is compatible with asdf plugins and &lt;code&gt;.tool-versions&lt;/code&gt; files. It can be used as a drop-in replacement. &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-do-i-migrate-from-asdf&#34;&gt;See below for migration instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polyglot&lt;/strong&gt; - compatible with any language, so no more figuring out how nvm, nodenv, pyenv, etc work individually‚Äîjust use 1 tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; - rtx is written in Rust and is very fast. 20x-200x faster than asdf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No shims&lt;/strong&gt; - shims cause problems, they break &lt;code&gt;which&lt;/code&gt;, and add overhead. By default, rtx does not use them‚Äîhowever you can if you want to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fuzzy matching and aliases&lt;/strong&gt; - It&#39;s enough to just say you want &#34;v20&#34; of node, or the &#34;lts&#34; version. rtx will figure out the right version without you needing to specify an exact version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arbitrary env vars&lt;/strong&gt; - Set custom env vars when in a project directory like &lt;code&gt;NODE_ENV=production&lt;/code&gt; or &lt;code&gt;AWS_PROFILE=staging&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;30 Second Demo&lt;/h2&gt; &#xA;&lt;p&gt;The following shows using rtx to install different versions of &lt;a href=&#34;https://nodejs.org&#34;&gt;node&lt;/a&gt;. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/demo.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install rtx on macOS (other methods &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#installation&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ curl https://rtx.jdx.dev/rtx-latest-macos-arm64 &amp;gt; ~/bin/rtx&#xA;$ chmod +x ~/bin/rtx&#xA;$ rtx --version&#xA;rtx 2023.12.30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hook rtx into your shell (pick the right one for your shell):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;# note this assumes rtx is located at ~/bin/rtx&#xA;echo &#39;eval &#34;$(~/bin/rtx activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;eval &#34;$(~/bin/rtx activate zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;~/bin/rtx activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you use direnv with &lt;code&gt;layout python&lt;/code&gt; or other logic that needs to reference rtx runtimes inside of an &lt;code&gt;.envrc&lt;/code&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#direnv&#34;&gt;direnv section&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install a runtime and set it as the global default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ rtx use --global node@20&#xA;$ node -v&#xA;v20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:START (TOC:collapse=true&amp;collapseText=Click to expand&amp;maxDepth=3) --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#30-second-demo&#34;&gt;30 Second Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#about&#34;&gt;About&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#common-commands&#34;&gt;Common commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#download-binary&#34;&gt;Download binary&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#register-shell-hook&#34;&gt;Register shell hook&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#migrate-from-asdf&#34;&gt;Migrate from asdf&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#uninstalling&#34;&gt;Uninstalling&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#shebang&#34;&gt;Shebang&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtxtoml&#34;&gt;&lt;code&gt;.rtx.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#legacy-version-files&#34;&gt;Legacy version files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#tool-versions&#34;&gt;&lt;code&gt;.tool-versions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#scopes&#34;&gt;Scopes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#global-config-configrtxconfigtoml&#34;&gt;Global config: &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#system-config-etcrtxconfigtoml&#34;&gt;System config: &lt;code&gt;/etc/rtx/config.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#aliases&#34;&gt;Aliases&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#plugins&#34;&gt;Plugins&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#plugin-options&#34;&gt;Plugin Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#directories&#34;&gt;Directories&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#configrtx&#34;&gt;&lt;code&gt;~/.config/rtx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#cachertx&#34;&gt;&lt;code&gt;~/.cache/rtx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#localsharertx&#34;&gt;&lt;code&gt;~/.local/share/rtx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#config-environments&#34;&gt;Config Environments&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#ide-integration&#34;&gt;IDE Integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#core-plugins&#34;&gt;Core Plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#faqs&#34;&gt;FAQs&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#i-dont-want-to-put-a-tool-versions-file-into-my-project-since-git-shows-it-as-an-untracked-file&#34;&gt;I don&#39;t want to put a &lt;code&gt;.tool-versions&lt;/code&gt; file into my project since git shows it as an untracked file&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#what-is-the-difference-between-nodejs-and-node-or-golang-and-go&#34;&gt;What is the difference between &#34;nodejs&#34; and &#34;node&#34; (or &#34;golang&#34; and &#34;go&#34;)?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#what-does-rtx-activate-do&#34;&gt;What does &lt;code&gt;rtx activate&lt;/code&gt; do?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-activate-doesnt-work-in-profile-bash_profile-zprofile&#34;&gt;&lt;code&gt;rtx activate&lt;/code&gt; doesn&#39;t work in &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zprofile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-is-failing-or-not-working-right&#34;&gt;rtx is failing or not working right&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#windows-support&#34;&gt;Windows support?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-do-i-use-rtx-with-http-proxies&#34;&gt;How do I use rtx with http proxies?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-do-the-shorthand-plugin-names-map-to-repositories&#34;&gt;How do the shorthand plugin names map to repositories?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#does-node20-mean-the-newest-available-version-of-node&#34;&gt;Does &#34;node@20&#34; mean the newest available version of node?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-do-i-migrate-from-asdf&#34;&gt;How do I migrate from asdf?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-compatible-is-rtx-with-asdf&#34;&gt;How compatible is rtx with asdf?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-isnt-working-when-calling-from-tmux-or-another-shell-initialization-script&#34;&gt;rtx isn&#39;t working when calling from tmux or another shell initialization script&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-do-i-disableforce-cli-color-output&#34;&gt;How do I disable/force CLI color output?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#is-rtx-secure&#34;&gt;Is rtx secure?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#comparison-to-asdf&#34;&gt;Comparison to asdf&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#environment-variables-in-rtx&#34;&gt;Environment variables in rtx&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#ux&#34;&gt;UX&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#cicd&#34;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#github-actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#shims&#34;&gt;Shims&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#direnv&#34;&gt;direnv&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-inside-of-direnv-use-rtx-in-envrc&#34;&gt;rtx inside of direnv (&lt;code&gt;use rtx&lt;/code&gt; in &lt;code&gt;.envrc&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#do-you-need-direnv&#34;&gt;Do you need direnv?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#cache-behavior&#34;&gt;Cache Behavior&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#pluginruntime-cache&#34;&gt;Plugin/Runtime Cache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#commands&#34;&gt;Commands&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-activate-options-shell_type&#34;&gt;&lt;code&gt;rtx activate [OPTIONS] [SHELL_TYPE]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-alias-get-plugin-alias&#34;&gt;&lt;code&gt;rtx alias get &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-alias-ls-options-plugin&#34;&gt;&lt;code&gt;rtx alias ls [OPTIONS] [PLUGIN]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-alias-set-plugin-alias-value&#34;&gt;&lt;code&gt;rtx alias set &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt; &amp;lt;VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-alias-unset-plugin-alias&#34;&gt;&lt;code&gt;rtx alias unset &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-bin-paths&#34;&gt;&lt;code&gt;rtx bin-paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-cache-clear-plugin&#34;&gt;&lt;code&gt;rtx cache clear [PLUGIN]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-completion-shell&#34;&gt;&lt;code&gt;rtx completion [SHELL]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-config-ls-options&#34;&gt;&lt;code&gt;rtx config ls [OPTIONS]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-config-generate-options&#34;&gt;&lt;code&gt;rtx config generate [OPTIONS]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-current-plugin&#34;&gt;&lt;code&gt;rtx current [PLUGIN]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-deactivate&#34;&gt;&lt;code&gt;rtx deactivate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-direnv-activate&#34;&gt;&lt;code&gt;rtx direnv activate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-doctor&#34;&gt;&lt;code&gt;rtx doctor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-env-options-toolversion&#34;&gt;&lt;code&gt;rtx env [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-env-vars-options-env_vars&#34;&gt;&lt;code&gt;rtx env-vars [OPTIONS] [ENV_VARS]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-exec-options-toolversion----command&#34;&gt;&lt;code&gt;rtx exec [OPTIONS] [TOOL@VERSION]... [-- &amp;lt;COMMAND&amp;gt;...]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-implode-options&#34;&gt;&lt;code&gt;rtx implode [OPTIONS]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-install-options-toolversion&#34;&gt;&lt;code&gt;rtx install [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-latest-options-toolversion&#34;&gt;&lt;code&gt;rtx latest [OPTIONS] &amp;lt;TOOL@VERSION&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-link-options-toolversion-path&#34;&gt;&lt;code&gt;rtx link [OPTIONS] &amp;lt;TOOL@VERSION&amp;gt; &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-ls-options-plugin&#34;&gt;&lt;code&gt;rtx ls [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-ls-remote-options-toolversion-prefix&#34;&gt;&lt;code&gt;rtx ls-remote [OPTIONS] [TOOL@VERSION] [PREFIX]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-outdated-toolversion&#34;&gt;&lt;code&gt;rtx outdated [TOOL@VERSION]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-plugins-install-options-new_plugin-git_url&#34;&gt;&lt;code&gt;rtx plugins install [OPTIONS] [NEW_PLUGIN] [GIT_URL]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-plugins-link-options-name-path&#34;&gt;&lt;code&gt;rtx plugins link [OPTIONS] &amp;lt;NAME&amp;gt; [PATH]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-plugins-ls-options&#34;&gt;&lt;code&gt;rtx plugins ls [OPTIONS]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-plugins-ls-remote-options&#34;&gt;&lt;code&gt;rtx plugins ls-remote [OPTIONS]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-plugins-uninstall-options-plugin&#34;&gt;&lt;code&gt;rtx plugins uninstall [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-plugins-update-options-plugin&#34;&gt;&lt;code&gt;rtx plugins update [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-prune-options-plugin&#34;&gt;&lt;code&gt;rtx prune [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-reshim&#34;&gt;&lt;code&gt;rtx reshim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-self-update-options-version&#34;&gt;&lt;code&gt;rtx self-update [OPTIONS] [VERSION]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-settings-get-setting&#34;&gt;&lt;code&gt;rtx settings get &amp;lt;SETTING&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-settings-ls&#34;&gt;&lt;code&gt;rtx settings ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-settings-set-setting-value&#34;&gt;&lt;code&gt;rtx settings set &amp;lt;SETTING&amp;gt; &amp;lt;VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-settings-unset-setting&#34;&gt;&lt;code&gt;rtx settings unset &amp;lt;SETTING&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-shell-options-toolversion&#34;&gt;&lt;code&gt;rtx shell [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-sync-node---brew--nvm--nodenv&#34;&gt;&lt;code&gt;rtx sync node &amp;lt;--brew|--nvm|--nodenv&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-sync-python---pyenv&#34;&gt;&lt;code&gt;rtx sync python --pyenv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-trust-options-config_file&#34;&gt;&lt;code&gt;rtx trust [OPTIONS] [CONFIG_FILE]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-uninstall-options-toolversion&#34;&gt;&lt;code&gt;rtx uninstall [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-upgrade-options-toolversion&#34;&gt;&lt;code&gt;rtx upgrade [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-use-options-toolversion&#34;&gt;&lt;code&gt;rtx use [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-version&#34;&gt;&lt;code&gt;rtx version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-where-toolversion&#34;&gt;&lt;code&gt;rtx where &amp;lt;TOOL@VERSION&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-which-options-bin_name&#34;&gt;&lt;code&gt;rtx which [OPTIONS] &amp;lt;BIN_NAME&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:END --&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;New developer? Try reading the &lt;a href=&#34;https://dev.to/jdxcode/beginners-guide-to-rtx-ac4&#34;&gt;Beginner&#39;s Guide&lt;/a&gt; for a gentler introduction.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;rtx is a tool for managing programming language and tool versions. For example, use this to install a particular version of Node.js and ruby for a project. Using &lt;code&gt;rtx activate&lt;/code&gt;, you can have your shell automatically switch to the correct node and ruby versions when you &lt;code&gt;cd&lt;/code&gt; into the project&#39;s directory[^cd]. Other projects on your machine can use a different set of versions.&lt;/p&gt; &#xA;&lt;p&gt;rtx is inspired by &lt;a href=&#34;https://asdf-vm.com&#34;&gt;asdf&lt;/a&gt; and uses asdf&#39;s vast &lt;a href=&#34;https://github.com/asdf-vm/asdf-plugins&#34;&gt;plugin ecosystem&lt;/a&gt; under the hood. However, it is &lt;em&gt;much&lt;/em&gt; faster than asdf and has a more friendly user experience. For more on how rtx compares to asdf, &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#comparison-to-asdf&#34;&gt;see below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;rtx can be configured in many ways. The most typical is by &lt;code&gt;.rtx.toml&lt;/code&gt;, but it&#39;s also compatible with asdf &lt;code&gt;.tool-versions&lt;/code&gt; files. It can also use idiomatic version files like &lt;code&gt;.node-version&lt;/code&gt; and &lt;code&gt;.ruby-version&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#configuration&#34;&gt;Configuration&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;p&gt;rtx hooks into your shell (with &lt;code&gt;rtx activate zsh&lt;/code&gt;) and sets the &lt;code&gt;PATH&lt;/code&gt; environment variable to point your shell to the correct runtime binaries. When you &lt;code&gt;cd&lt;/code&gt; into a directory[^cd] containing a &lt;code&gt;.tool-versions&lt;/code&gt;/&lt;code&gt;.rtx.toml&lt;/code&gt; file, rtx will automatically set the appropriate tool versions in &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After activating, every time your prompt displays it will call &lt;code&gt;rtx hook-env&lt;/code&gt; to fetch new environment variables. This should be very fast. It exits early if the directory wasn&#39;t changed or &lt;code&gt;.tool-versions&lt;/code&gt;/&lt;code&gt;.rtx.toml&lt;/code&gt; files haven&#39;t been modified.&lt;/p&gt; &#xA;&lt;p&gt;Unlike asdf which uses shim files to dynamically locate runtimes when they&#39;re called, rtx modifies &lt;code&gt;PATH&lt;/code&gt; ahead of time so the runtimes are called directly. This is not only faster since it avoids any overhead, but it also makes it so commands like &lt;code&gt;which node&lt;/code&gt; work as expected. This also means there isn&#39;t any need to run &lt;code&gt;asdf reshim&lt;/code&gt; after installing new runtime binaries.&lt;/p&gt; &#xA;&lt;p&gt;You should note that rtx does not directly install these tools. Instead, it leverages plugins to install runtimes. See &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#plugins&#34;&gt;plugins&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;[^cd]: Note that rtx does not modify &#34;cd&#34;. It actually runs every time the prompt is &lt;em&gt;displayed&lt;/em&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#what-does-rtx-activate-do&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Common commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rtx install node@20.0.0  Install a specific version number&#xA;rtx install node@20      Install a fuzzy version number&#xA;rtx use node@20          Use node-20.x in current project&#xA;rtx use -g node@20       Use node-20.x as global default&#xA;&#xA;rtx install node         Install the current version specified in .tool-versions/.rtx.toml&#xA;rtx use node@latest      Use latest node in current directory&#xA;rtx use -g node@system   Use system node as global default&#xA;&#xA;rtx x node@20 -- node app.js  Run `node app.js` node-20.x on PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installing rtx consists of two steps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the binary. This depends on the device and operating system you are running rtx in.&lt;/li&gt; &#xA; &lt;li&gt;Register a shell hook. This depends on the shell you are using. Read more about this step in the &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#what-does-rtx-activate-do&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Download binary&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Standalone&lt;/summary&gt; Note that it isn&#39;t necessary for `rtx` to be on `PATH`. If you run the activate script in your rc file, rtx will automatically add itself to `PATH`. &#xA; &lt;pre&gt;&lt;code&gt;curl https://rtx.jdx.dev/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to verify the install script hasn&#39;t been tampered with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 0x29DDE9E0&#xA;curl https://rtx.jdx.dev/install.sh.sig | gpg --decrypt &amp;gt; install.sh&#xA;# ensure the above is signed with the rtx release key&#xA;sh ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;or if you&#39;re allergic to &lt;code&gt;| sh&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl https://rtx.jdx.dev/rtx-latest-macos-arm64 &amp;gt; /usr/local/bin/rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;It doesn&#39;t matter where you put it. So use &lt;code&gt;~/bin&lt;/code&gt;, &lt;code&gt;/usr/local/bin&lt;/code&gt;, &lt;code&gt;~/.local/share/rtx/bin/rtx&lt;/code&gt; or whatever.&lt;/p&gt; &#xA; &lt;p&gt;Supported architectures:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;x64&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;arm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Supported platforms:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;macos&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;linux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you need something else, compile it with &lt;code&gt;cargo install rtx-cli&lt;/code&gt; (see below). &lt;a href=&#34;https://github.com/jdx/rtx/discussions/66&#34;&gt;Windows isn&#39;t currently supported.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Homebrew&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;brew install rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternatively, use the custom tap (which is updated immediately after a release)):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;brew install jdx/tap/rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;MacPorts&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;sudo port install rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Cargo&lt;/summary&gt; &#xA; &lt;p&gt;Build from source with Cargo:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo install rtx-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Do it faster with &lt;a href=&#34;https://github.com/cargo-bins/cargo-binstall&#34;&gt;cargo-binstall&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo install cargo-binstall&#xA;cargo binstall rtx-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Build from the latest commit in main:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cargo install rtx-cli --git https://github.com/jdx/rtx --branch main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;npm&lt;/summary&gt; &#xA; &lt;p&gt;rtx is available on npm as a precompiled binary. This isn&#39;t a Node.js package‚Äîjust distributed via npm. This is useful for JS projects that want to setup rtx via &lt;code&gt;package.json&lt;/code&gt; or &lt;code&gt;npx&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;npm install -g rtx-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Use npx if you just want to test it out for a single command without fully installing:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;npx rtx-cli exec python@3.11 -- python some_script.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GitHub Releases&lt;/summary&gt; &#xA; &lt;p&gt;Download the latest release from &lt;a href=&#34;https://github.com/jdx/rtx/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl https://github.com/jdx/rtx/releases/download/v2023.12.30/rtx-v2023.12.30-linux-x64 &amp;gt; /usr/local/bin/rtx&#xA;chmod +x /usr/local/bin/rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;apt&lt;/summary&gt; &#xA; &lt;p&gt;For installation on Ubuntu/Debian:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;sudo install -dm 755 /etc/apt/keyrings&#xA;wget -qO - https://rtx.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/rtx-archive-keyring.gpg 1&amp;gt; /dev/null&#xA;echo &#34;deb [signed-by=/etc/apt/keyrings/rtx-archive-keyring.gpg arch=amd64] https://rtx.jdx.dev/deb stable main&#34; | sudo tee /etc/apt/sources.list.d/rtx.list&#xA;sudo apt update&#xA;sudo apt install -y rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;p&gt;If you&#39;re on arm64 you&#39;ll need to run the following:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;echo &#34;deb [signed-by=/etc/apt/keyrings/rtx-archive-keyring.gpg arch=arm64] https://rtx.jdx.dev/deb stable main&#34; | sudo tee /etc/apt/sources.list.d/rtx.list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dnf&lt;/summary&gt; &#xA; &lt;p&gt;For Fedora, CentOS, Amazon Linux, RHEL and other dnf-based distributions:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;dnf install -y dnf-plugins-core&#xA;dnf config-manager --add-repo https://rtx.jdx.dev/rpm/rtx.repo&#xA;dnf install -y rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;yum&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;yum install -y yum-utils&#xA;yum-config-manager --add-repo https://rtx.jdx.dev/rpm/rtx.repo&#xA;yum install -y rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;apk&lt;/summary&gt; &#xA; &lt;p&gt;For Alpine Linux:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;apk add rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;rtx lives in the &lt;a href=&#34;https://gitlab.alpinelinux.org/alpine/aports/-/blob/master/community/rtx/APKBUILD&#34;&gt;community repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;aur&lt;/summary&gt; &#xA; &lt;p&gt;For Arch Linux:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;git clone https://aur.archlinux.org/rtx.git&#xA;cd rtx&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;nix&lt;/summary&gt; &#xA; &lt;p&gt;For the Nix package manager, at release 23.05 or later:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;nix-env -iA rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also import the package directly using &lt;code&gt;rtx-flake.packages.${system}.rtx&lt;/code&gt;. It supports all default Nix systems.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Docker&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;docker run jdxcode/rtx x node@20 -- node -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Register shell hook&lt;/h3&gt; &#xA;&lt;h4&gt;Bash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;eval &#34;$(rtx activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Zsh&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;eval &#34;$(rtx activate zsh)&#34;&#39; &amp;gt;&amp;gt; &#34;${ZDOTDIR-$HOME}/.zshrc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fish&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;rtx activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;For homebrew and possibly other installs rtx is automatically activated so this is not necessary.&lt;/p&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx_fish_auto_activate1&#34;&gt;&lt;code&gt;RTX_FISH_AUTO_ACTIVATE=1&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Nushell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nushell&#34;&gt;do {&#xA;  let rtxpath = ($nu.config-path | path dirname | path join &#34;rtx.nu&#34;)&#xA;  run-external rtx activate nu --redirect-stdout | save $rtxpath -f&#xA;  $&#34;\nsource &#34;($rtxpath)&#34;&#34; | save $nu.config-path --append&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Xonsh&lt;/h4&gt; &#xA;&lt;p&gt;Since &lt;code&gt;.xsh&lt;/code&gt; files are &lt;a href=&#34;https://github.com/xonsh/xonsh/issues/3953&#34;&gt;not compiled&lt;/a&gt; you may shave a bit off startup time by using a pure Python import: add the code below to, for example, &lt;code&gt;~/.config/xonsh/rtx.py&lt;/code&gt; config file and &lt;code&gt;import rtx&lt;/code&gt; it in &lt;code&gt;~/.config/xonsh/rc.xsh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xsh&#34;&gt;from pathlib         import Path&#xA;from xonsh.built_ins import XSH&#xA;&#xA;ctx = XSH.ctx&#xA;rtx_init = subprocess.run([Path(&#39;~/bin/rtx&#39;).expanduser(),&#39;activate&#39;,&#39;xonsh&#39;],capture_output=True,encoding=&#34;UTF-8&#34;).stdout&#xA;XSH.builtins.execx(rtx_init,&#39;exec&#39;,ctx,filename=&#39;rtx&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or continue to use &lt;code&gt;rc.xsh&lt;/code&gt;/&lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xsh&#34;&gt;echo &#39;execx($(~/bin/rtx activate xonsh))&#39; &amp;gt;&amp;gt; ~/.config/xonsh/rc.xsh # or ~/.xonshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given that &lt;code&gt;rtx&lt;/code&gt; replaces both shell env &lt;code&gt;$PATH&lt;/code&gt; and OS environ &lt;code&gt;PATH&lt;/code&gt;, watch out that your configs don&#39;t have these two set differently (might throw &lt;code&gt;os.environ[&#39;PATH&#39;] = xonsh.built_ins.XSH.env.get_detyped(&#39;PATH&#39;)&lt;/code&gt; at the end of a config to make sure they match)&lt;/p&gt; &#xA;&lt;h4&gt;Something else?&lt;/h4&gt; &#xA;&lt;p&gt;Adding a new shell is not hard at all since very little shell code is in this project. &lt;a href=&#34;https://github.com/jdx/rtx/tree/main/src/shell&#34;&gt;See here&lt;/a&gt; for how the others are implemented. If your shell isn&#39;t currently supported I&#39;d be happy to help you get yours integrated.&lt;/p&gt; &#xA;&lt;h3&gt;Migrate from asdf&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re moving from asdf to rtx, please review &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#how-do-i-migrate-from-asdf&#34;&gt;How do I migrate from asdf?&lt;/a&gt; for guidance.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;rtx implode&lt;/code&gt; to uninstall rtx. This will remove the rtx binary and all of its data. Use &lt;code&gt;rtx implode --help&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, manually remove the following directories to fully clean up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.local/share/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_DATA_DIR&lt;/code&gt; or &lt;code&gt;XDG_DATA_HOME/rtx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_CONFIG_DIR&lt;/code&gt; or &lt;code&gt;XDG_CONFIG_HOME/rtx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;on Linux: &lt;code&gt;~/.cache/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_CACHE_DIR&lt;/code&gt; or &lt;code&gt;XDG_CACHE_HOME/rtx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;on macOS: &lt;code&gt;~/Library/Caches/rtx&lt;/code&gt; (can also be &lt;code&gt;RTX_CACHE_DIR&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shebang&lt;/h2&gt; &#xA;&lt;p&gt;You can specify a tool and its version in a shebang without needing to first setup &lt;code&gt;.tool-versions&lt;/code&gt;/&lt;code&gt;.rtx.toml&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;#!/usr/bin/env -S rtx x node@20 -- node&#xA;// &#34;env -S&#34; allows multiple arguments in a shebang&#xA;console.log(`Running node: ${process.version}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be useful in environments where rtx isn&#39;t activated (such as a non-interactive session).&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;.rtx.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.rtx.toml&lt;/code&gt; is a new config file that replaces asdf-style &lt;code&gt;.tool-versions&lt;/code&gt; files with a file that has lot more flexibility. It supports functionality that is not possible with &lt;code&gt;.tool-versions&lt;/code&gt;, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setting arbitrary env vars while inside the directory&lt;/li&gt; &#xA; &lt;li&gt;passing options to plugins like &lt;code&gt;virtualenv=&#39;.venv&#39;&lt;/code&gt; for &lt;a href=&#34;https://github.com/jdx/rtx/raw/main/docs/python.md#experimental-automatic-virtualenv-creationactivation&#34;&gt;python&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;specifying custom plugin URLs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is what an &lt;code&gt;.rtx.toml&lt;/code&gt; looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[env]&#xA;# supports arbitrary env vars so rtx can be used like direnv/dotenv&#xA;NODE_ENV = &#39;production&#39;&#xA;&#xA;[tools]&#xA;# specify single or multiple versions&#xA;terraform = &#39;1.0.0&#39;&#xA;erlang = [&#39;23.3&#39;, &#39;24.0&#39;]&#xA;&#xA;# supports everything you can do with .tool-versions currently&#xA;node = [&#39;16&#39;, &#39;prefix:20&#39;, &#39;ref:master&#39;, &#39;path:~/.nodes/14&#39;]&#xA;&#xA;# send arbitrary options to the plugin, passed as:&#xA;# RTX_TOOL_OPTS__VENV=.venv&#xA;python = {version=&#39;3.10&#39;, virtualenv=&#39;.venv&#39;}&#xA;&#xA;[plugins]&#xA;# specify a custom repo url&#xA;# note this will only be used if the plugin does not already exist&#xA;python = &#39;https://github.com/asdf-community/asdf-python&#39;&#xA;&#xA;[settings] # project-local settings&#xA;verbose = true&#xA;&#xA;[alias.node] # project-local aliases&#xA;my_custom_node = &#39;20&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.rtx.toml&lt;/code&gt; files are hierarchical. The configuration in a file in the current directory will override conflicting configuration in parent directories. For example, if &lt;code&gt;~/src/myproj/.rtx.toml&lt;/code&gt; defines the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tools]&#xA;node = &#39;20&#39;&#xA;python = &#39;3.10&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;~/src/myproj/backend/.rtx.toml&lt;/code&gt; defines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tools]&#xA;node = &#39;18&#39;&#xA;ruby = &#39;3.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then when inside of &lt;code&gt;~/src/myproj/backend&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt; will be &lt;code&gt;18&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt; will be &lt;code&gt;3.10&lt;/code&gt;, and &lt;code&gt;ruby&lt;/code&gt; will be &lt;code&gt;3.1&lt;/code&gt;. You can check the active versions with &lt;code&gt;rtx ls --current&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also have environment specific config files like &lt;code&gt;.rtx.production.toml&lt;/code&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#config-environments&#34;&gt;Config Environments&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;[env]&lt;/code&gt; - Arbitrary Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;[env]&lt;/code&gt; section of .rtx.toml allows setting arbitrary environment variables. These can be simple key-value entries like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[env]&#xA;NODE_ENV = &#39;production&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PATH&lt;/code&gt; is treated specially, it needs to be defined as an array in &lt;code&gt;env_path&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;env_path = [&#xA;    # adds an absolute path&#xA;    &#34;~/.local/share/bin&#34;,&#xA;    # adds a path relative to the .rtx.toml, not PWD&#xA;    &#34;./node_modules/.bin&#34;,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;env_path&lt;/code&gt; is a top-level key, it does not go inside of &lt;code&gt;[env]&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Environment variable values can be templates, see &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#templates&#34;&gt;Templates&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[env]&#xA;LD_LIBRARY_PATH = &#34;/some/path:{{env.LD_LIBRARY_PATH}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;env_file&lt;/code&gt; can be used to specify a &lt;a href=&#34;https://dotenv.org&#34;&gt;dotenv&lt;/a&gt; file to load:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;env_file = &#39;.env&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;env_file&lt;/code&gt; goes at the top of the file, above &lt;code&gt;[env]&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[env]&#xA;NODE_ENV = false # unset a previously set NODE_ENV&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;[plugins]&lt;/code&gt; - Specify Custom Plugin Repository URLs&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;[plugins]&lt;/code&gt; to add/modify plugin shortnames. Note that this will only modify &lt;em&gt;new&lt;/em&gt; plugin installations. Existing plugins can use any URL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[plugins]&#xA;elixir = &#34;https://github.com/my-org/rtx-elixir.git&#34;&#xA;node = &#34;https://github.com/my-org/rtx-node.git#DEADBEEF&#34; # supports specific gitref&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you simply want to install a plugin from a specific URL once, it&#39;s better to use &lt;code&gt;rtx plugin install plugin &amp;lt;GIT_URL&amp;gt;&lt;/code&gt;. Add this section to &lt;code&gt;.rtx.toml&lt;/code&gt; if you want to share the plugin location/revision with other developers in your project.&lt;/p&gt; &#xA;&lt;p&gt;This is similar to &lt;a href=&#34;https://github.com/jdx/rtx#rtx_shorthands_fileconfigrtxshorthandstoml&#34;&gt;&lt;code&gt;RTX_SHORTHANDS&lt;/code&gt;&lt;/a&gt; but doesn&#39;t require a separate file.&lt;/p&gt; &#xA;&lt;h3&gt;Legacy version files&lt;/h3&gt; &#xA;&lt;p&gt;rtx supports &#34;legacy version files&#34; just like asdf. They&#39;re language-specific files like &lt;code&gt;.node-version&lt;/code&gt; and &lt;code&gt;.python-version&lt;/code&gt;. These are ideal for setting the runtime version of a project without forcing other developers to use a specific tool like rtx/asdf.&lt;/p&gt; &#xA;&lt;p&gt;They support aliases, which means you can have an &lt;code&gt;.nvmrc&lt;/code&gt; file with &lt;code&gt;lts/hydrogen&lt;/code&gt; and it will work in rtx and nvm. Here are some of the supported legacy version files:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugin&lt;/th&gt; &#xA;   &lt;th&gt;&#34;Legacy&#34; (Idiomatic) Files&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.crystal-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.exenv-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.go-version&lt;/code&gt;, &lt;code&gt;go.mod&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.java-version&lt;/code&gt;, &lt;code&gt;.sdkmanrc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;node&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.nvmrc&lt;/code&gt;, &lt;code&gt;.node-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.python-version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ruby-version&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;terraform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.terraform-version&lt;/code&gt;, &lt;code&gt;.packer-version&lt;/code&gt;, &lt;code&gt;main.tf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yarn&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.yarnrc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In rtx these are enabled by default. You can disable them with &lt;code&gt;rtx settings set legacy_version_file false&lt;/code&gt;. There is a performance cost to having these when they&#39;re parsed as it&#39;s performed by the plugin in &lt;code&gt;bin/parse-version-file&lt;/code&gt;. However these are &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#cache-behavior&#34;&gt;cached&lt;/a&gt; so it&#39;s not a huge deal. You may not even notice.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;asdf calls these &#34;legacy version files&#34; so we do too. I think this is a bad name since it implies that they shouldn&#39;t be used‚Äîwhich is definitely not the case IMO. I prefer the term &#34;idiomatic&#34; version files since they&#39;re version files not specific to asdf/rtx and can be used by other tools. (&lt;code&gt;.nvmrc&lt;/code&gt; being a notable exception, which is tied to a specific tool.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;code&gt;.tool-versions&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;.tool-versions&lt;/code&gt; file is asdf&#39;s config file and it can be used in rtx just like &lt;code&gt;.rtx.toml&lt;/code&gt;. It isn&#39;t as flexible so it&#39;s recommended to use &lt;code&gt;.rtx.toml&lt;/code&gt; instead. It can be useful if you already have a lot of &lt;code&gt;.tool-versions&lt;/code&gt; files or work on a team that uses asdf.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example with all the supported syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node        20.0.0       # comments are allowed&#xA;ruby        3            # can be fuzzy version&#xA;shellcheck  latest       # also supports &#34;latest&#34;&#xA;jq          1.6&#xA;erlang      ref:master   # compile from vcs ref&#xA;go          prefix:1.19  # uses the latest 1.19.x version‚Äîneeded in case &#34;1.19&#34; is an exact match&#xA;shfmt       path:./shfmt # use a custom runtime&#xA;node        lts          # use lts version of node (not supported by all plugins)&#xA;&#xA;node        sub-2:lts      # install 2 versions behind the latest lts (e.g.: 18 if lts is 20)&#xA;python      sub-0.1:latest # install python-3.10 if the latest is 3.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://asdf-vm.com/manage/configuration.html#tool-versions&#34;&gt;the asdf docs&lt;/a&gt; for more info on this file format.&lt;/p&gt; &#xA;&lt;h3&gt;Scopes&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;.rtx.toml&lt;/code&gt; and &lt;code&gt;.tool-versions&lt;/code&gt; support &#34;scopes&#34; which modify the behavior of the version:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ref:&amp;lt;SHA&amp;gt;&lt;/code&gt; - compile from a vcs (usually git) ref&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix:&amp;lt;PREFIX&amp;gt;&lt;/code&gt; - use the latest version that matches the prefix. Useful for Go since &lt;code&gt;1.20&lt;/code&gt; would only match &lt;code&gt;1.20&lt;/code&gt; exactly but &lt;code&gt;prefix:1.20&lt;/code&gt; will match &lt;code&gt;1.20.1&lt;/code&gt; and &lt;code&gt;1.20.2&lt;/code&gt; etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path:&amp;lt;PATH&amp;gt;&lt;/code&gt; - use a custom compiled version at the given path. One use-case is to re-use Homebrew tools (e.g.: &lt;code&gt;path:/opt/homebrew/opt/node@20&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sub-&amp;lt;PARTIAL_VERSION&amp;gt;:&amp;lt;ORIG_VERSION&amp;gt;&lt;/code&gt; - subtracts PARTIAL_VERSION from ORIG_VERSION. This can be used to express something like &#34;2 versions behind lts&#34; such as &lt;code&gt;sub-2:lts&lt;/code&gt;. Or 1 minor version behind the latest version: &lt;code&gt;sub-0.1:latest&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Global config: &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;rtx can be configured in &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;. It&#39;s like local &lt;code&gt;.rtx.toml&lt;/code&gt; files except that it is used for all directories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tools]&#xA;# global tool versions go here&#xA;# you can set these with `rtx use -g`&#xA;node = &#39;lts&#39;&#xA;python = [&#39;3.10&#39;, &#39;3.11&#39;]&#xA;&#xA;[settings]&#xA;# plugins can read the versions files used by other version managers (if enabled by the plugin)&#xA;# for example, .nvmrc in the case of node&#39;s nvm&#xA;legacy_version_file = true                     # enabled by default (unlike asdf)&#xA;legacy_version_file_disable_tools = [&#39;python&#39;] # disable for specific tools&#xA;&#xA;# configure `rtx install` to always keep the downloaded archive&#xA;always_keep_download = false        # deleted after install by default&#xA;always_keep_install = false         # deleted on failure by default&#xA;&#xA;# configure how frequently (in minutes) to fetch updated plugin repository changes&#xA;# this is updated whenever a new runtime is installed&#xA;# (note: this isn&#39;t currently implemented but there are plans to add it: https://github.com/jdx/rtx/issues/128)&#xA;plugin_autoupdate_last_check_duration = &#39;1 week&#39; # set to 0 to disable updates&#xA;&#xA;# config files with these prefixes will be trusted by default&#xA;trusted_config_paths = [&#xA;    &#39;~/work/my-trusted-projects&#39;,&#xA;]&#xA;&#xA;verbose = false     # set to true to see full installation output, see `RTX_VERBOSE`&#xA;asdf_compat = false # set to true to ensure .tool-versions will be compatible with asdf, see `RTX_ASDF_COMPAT`&#xA;jobs = 4            # number of plugins or runtimes to install in parallel. The default is `4`.&#xA;raw = false         # set to true to directly pipe plugins to stdin/stdout/stderr&#xA;yes = false         # set to true to automatically answer yes to all prompts&#xA;&#xA;shorthands_file = &#39;~/.config/rtx/shorthands.toml&#39; # path to the shorthands file, see `RTX_SHORTHANDS_FILE`&#xA;disable_default_shorthands = false # disable the default shorthands, see `RTX_DISABLE_DEFAULT_SHORTHANDS`&#xA;disable_tools = [&#39;node&#39;]           # disable specific tools, generally used to turn off core tools&#xA;&#xA;experimental = false # enable experimental features&#xA;&#xA;[alias.node]&#xA;my_custom_node = &#39;20&#39;  # makes `rtx install node@my_custom_node` install node-20.x&#xA;                       # this can also be specified in a plugin (see below in &#34;Aliases&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These settings can also be managed with &lt;code&gt;rtx settings ls|get|set|unset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;System config: &lt;code&gt;/etc/rtx/config.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt; but for all users on the system. This is useful for setting defaults for all users.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;rtx can also be configured via environment variables. The following options are available:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DATA_DIR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;~/.local/share/rtx&lt;/code&gt; or &lt;code&gt;$XDG_DATA_HOME/rtx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the directory where rtx stores plugins and tool installs. These are not supposed to be shared across machines.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_CACHE_DIR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default (Linux): &lt;code&gt;~/.cache/rtx&lt;/code&gt; or &lt;code&gt;$XDG_CACHE_HOME/rtx&lt;/code&gt; Default (macOS): &lt;code&gt;~/Library/Caches/rtx&lt;/code&gt; or &lt;code&gt;$XDG_CACHE_HOME/rtx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the directory where rtx stores internal cache. This is not supposed to be shared across machines. It may be deleted at any time rtx is not running.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_TMP_DIR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default: &lt;a href=&#34;https://doc.rust-lang.org/std/env/fn.temp_dir.html&#34;&gt;&lt;code&gt;std::env::temp_dir()&lt;/code&gt;&lt;/a&gt; implementation in rust&lt;/p&gt; &#xA;&lt;p&gt;This is used for temporary storage such as when installing tools.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_CONFIG_FILE&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;$RTX_CONFIG_DIR/config.toml&lt;/code&gt; (Usually ~/.config/rtx/config.toml)&lt;/p&gt; &#xA;&lt;p&gt;This is the path to the config file.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DEFAULT_TOOL_VERSIONS_FILENAME&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to something other than &#34;.tool-versions&#34; to have rtx look for &lt;code&gt;.tool-versions&lt;/code&gt; files but with a different name.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DEFAULT_CONFIG_FILENAME&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to something other than &lt;code&gt;.rtx.toml&lt;/code&gt; to have rtx look for &lt;code&gt;.rtx.toml&lt;/code&gt; config files with a different name.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_ENV&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Enables environment-specific config files such as &lt;code&gt;.rtx.development.toml&lt;/code&gt;. Use this for different env vars or different tool versions in development/staging/production environments. See &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#config-environments&#34;&gt;Config Environments&lt;/a&gt; for more on how to use this feature.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_USE_VERSIONS_HOST&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set to &#34;false&#34; to disable using &lt;a href=&#34;https://rtx-versions.jdx.dev&#34;&gt;rtx-versions&lt;/a&gt; as a quick way for rtx to query for new versions. This host regularly grabs all the latest versions of core and community plugins. It&#39;s faster than running a plugin&#39;s &lt;code&gt;list-all&lt;/code&gt; command and gets around GitHub rate limiting problems when using it.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_${PLUGIN}_VERSION&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set the version for a runtime. For example, &lt;code&gt;RTX_NODE_VERSION=20&lt;/code&gt; will use &lt;a href=&#34;mailto:node@20.x&#34;&gt;node@20.x&lt;/a&gt; regardless of what is set in &lt;code&gt;.tool-versions&lt;/code&gt;/&lt;code&gt;.rtx.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LEGACY_VERSION_FILE=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Plugins can read the versions files used by other version managers (if enabled by the plugin) for example, &lt;code&gt;.nvmrc&lt;/code&gt; in the case of node&#39;s nvm. See &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#legacy-version-files&#34;&gt;legacy version files&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Set to &#34;0&#34; to disable legacy version file parsing.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LEGACY_VERSION_FILE_DISABLE_TOOLS=node,python&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Disable legacy version file parsing for specific tools. Separate with &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_USE_TOML=0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to &lt;code&gt;1&lt;/code&gt; to default to using &lt;code&gt;.rtx.toml&lt;/code&gt; in &lt;code&gt;rtx local&lt;/code&gt; instead of &lt;code&gt;.tool-versions&lt;/code&gt; for configuration.&lt;/p&gt; &#xA;&lt;p&gt;For now this is not used by &lt;code&gt;rtx use&lt;/code&gt; which will only use &lt;code&gt;.rtx.toml&lt;/code&gt; unless &lt;code&gt;--path&lt;/code&gt; is specified.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_TRUSTED_CONFIG_PATHS&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a list of paths that rtx will automatically mark as trusted. They can be separated with &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LOG_LEVEL=trace|debug|info|warn|error&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;These change the verbosity of rtx.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;RTX_DEBUG=1&lt;/code&gt;, &lt;code&gt;RTX_TRACE=1&lt;/code&gt;, and &lt;code&gt;RTX_QUIET=1&lt;/code&gt; as well as &lt;code&gt;--log-level=trace|debug|info|warn|error&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LOG_FILE=~/rtx.log&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Output logs to a file.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_LOG_FILE_LEVEL=trace|debug|info|warn|error&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;RTX_LOG_LEVEL&lt;/code&gt; but for the log &lt;em&gt;file&lt;/em&gt; output level. This is useful if you want to store the logs but not have them litter your display.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_ALWAYS_KEEP_DOWNLOAD=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to &#34;1&#34; to always keep the downloaded archive. By default it is deleted after install.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_ALWAYS_KEEP_INSTALL=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to &#34;1&#34; to always keep the install directory. By default it is deleted on failure.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_VERBOSE=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This shows the installation output during &lt;code&gt;rtx install&lt;/code&gt; and &lt;code&gt;rtx plugin install&lt;/code&gt;. This should likely be merged so it behaves the same as &lt;code&gt;RTX_DEBUG=1&lt;/code&gt; and we don&#39;t have 2 configuration for the same thing, but for now it is its own config.&lt;/p&gt; &#xA;&lt;p&gt;Equivalent to &lt;code&gt;RTX_LOG_LEVEL=debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_QUIET=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Equivalent to &lt;code&gt;RTX_LOG_LEVEL=warn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_ASDF_COMPAT=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Only output &lt;code&gt;.tool-versions&lt;/code&gt; files in &lt;code&gt;rtx local|global&lt;/code&gt; which will be usable by asdf. This disables rtx functionality that would otherwise make these files incompatible with asdf.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_JOBS=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set the number plugins or runtimes to install in parallel. The default is &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_RAW=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set to &#34;1&#34; to directly pipe plugin scripts to stdin/stdout/stderr. By default stdin is disabled because when installing a bunch of plugins in parallel you won&#39;t see the prompt. Use this if a plugin accepts input or otherwise does not seem to be installing correctly.&lt;/p&gt; &#xA;&lt;p&gt;Sets &lt;code&gt;RTX_JOBS=1&lt;/code&gt; because only 1 plugin script can be executed at a time.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_SHORTHANDS_FILE=~/.config/rtx/shorthands.toml&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use a custom file for the shorthand aliases. This is useful if you want to share plugins within an organization.&lt;/p&gt; &#xA;&lt;p&gt;Shorthands make it so when a user runs something like &lt;code&gt;rtx install elixir&lt;/code&gt; rtx will automatically install the &lt;a href=&#34;https://github.com/asdf-vm/asdf-elixir&#34;&gt;asdf-elixir&lt;/a&gt; plugin. By default, it uses the shorthands in &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/src/default_shorthands.rs&#34;&gt;&lt;code&gt;src/default_shorthands.rs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The file should be in this toml format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;elixir = &#34;https://github.com/my-org/rtx-elixir.git&#34;&#xA;node = &#34;https://github.com/my-org/rtx-node.git&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DISABLE_DEFAULT_SHORTHANDS=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Disables the shorthand aliases for installing plugins. You will have to specify full URLs when installing plugins, e.g.: &lt;code&gt;rtx plugin install node https://github.com/asdf-vm/asdf-node.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_DISABLE_TOOLS=python,node&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Disables the specified tools. Separate with &lt;code&gt;,&lt;/code&gt;. Generally used for core plugins but works with all.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_YES=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This will automatically answer yes or no to prompts. This is useful for scripting.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_EXPERIMENTAL=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Enables experimental features.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_ALL_COMPILE=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default: false unless running NixOS or Alpine (let me know if others should be added)&lt;/p&gt; &#xA;&lt;p&gt;Do not use precompiled binaries for all languages. Useful if running on a Linux distrobution like Alpine that does not use glibc and therefore likely won&#39;t be able to run precompiled binaries.&lt;/p&gt; &#xA;&lt;p&gt;Note that this needs to be setup for each language. File a ticket if you notice a language that is not working with this config.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RTX_FISH_AUTO_ACTIVATE=1&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Configures the vendor_conf.d script for fish shell to automatically activate. This file is automatically used in homebrew and potentially other installs to automatically activate rtx without configuring.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to enabled, set to &#34;0&#34; to disable.&lt;/p&gt; &#xA;&lt;h2&gt;Aliases&lt;/h2&gt; &#xA;&lt;p&gt;rtx supports aliasing the versions of runtimes. One use-case for this is to define aliases for LTS versions of runtimes. For example, you may want to specify &lt;code&gt;lts-hydrogen&lt;/code&gt; as the version for &lt;a href=&#34;mailto:node@20.x&#34;&gt;node@20.x&lt;/a&gt; so you can use set it with &lt;code&gt;node lts-hydrogen&lt;/code&gt; in &lt;code&gt;.tool-versions&lt;/code&gt;/&lt;code&gt;.rtx.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;User aliases can be created by adding an &lt;code&gt;alias.&amp;lt;PLUGIN&amp;gt;&lt;/code&gt; section to &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[alias.node]&#xA;my_custom_20 = &#39;20&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Plugins can also provide aliases via a &lt;code&gt;bin/list-aliases&lt;/code&gt; script. Here is an example showing node.js versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;&#xA;echo &#34;lts-hydrogen 18&#34;&#xA;echo &#34;lts-gallium 16&#34;&#xA;echo &#34;lts-fermium 14&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Because this is rtx-specific functionality not currently used by asdf it isn&#39;t likely to be in any plugin currently, but plugin authors can add this script without impacting asdf users.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;rtx uses asdf&#39;s plugin ecosystem under the hood. These plugins contain shell scripts like &lt;code&gt;bin/install&lt;/code&gt; (for installing) and &lt;code&gt;bin/list-all&lt;/code&gt; (for listing all of the available versions).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/asdf-vm/asdf-plugins&#34;&gt;https://github.com/asdf-vm/asdf-plugins&lt;/a&gt; for the list of built-in plugins shorthands. See asdf&#39;s &lt;a href=&#34;https://asdf-vm.com/plugins/create.html&#34;&gt;Create a Plugin&lt;/a&gt; for how to create your own or just learn more about how they work.&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Options&lt;/h3&gt; &#xA;&lt;p&gt;rtx has support for &#34;plugin options&#34; which is configuration specified in &lt;code&gt;.rtx.toml&lt;/code&gt; to change behavior of plugins. One example of this is virtualenv on python runtimes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tools]&#xA;python = {version=&#39;3.11&#39;, virtualenv=&#39;.venv&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will be passed to all plugin scripts as &lt;code&gt;RTX_TOOL_OPTS__VIRTUALENV=.venv&lt;/code&gt;. The user can specify any option and it will be passed to the plugin in that format.&lt;/p&gt; &#xA;&lt;p&gt;Currently this only supports simple strings, but we can make it compatible with more complex types (arrays, tables) fairly easily if there is a need for it.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;rtx uses &lt;a href=&#34;https://calver.org/&#34;&gt;Calver&lt;/a&gt; versioning (&lt;code&gt;2023.6.1&lt;/code&gt;). Breaking changes will be few but when they do happen, they will be communicated in the CLI with plenty of notice whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;Rather than have SemVer major releases to communicate change in large releases, new functionality and changes can be opted-into with settings like &lt;code&gt;experimental = true&lt;/code&gt;. This way plugin authors and users can test out new functionality immediately without waiting for a major release.&lt;/p&gt; &#xA;&lt;p&gt;The numbers in Calver (YYYY.MM.RELEASE) simply represent the date of the release‚Äînot compatibility or how many new features were added. Each release will be small and incremental.&lt;/p&gt; &#xA;&lt;h2&gt;Directories&lt;/h2&gt; &#xA;&lt;p&gt;The following are the directories that rtx uses. These are the default directories, see &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#configuration&#34;&gt;Configuration&lt;/a&gt; for information on changing the locations.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you often find yourself using these directories (as I do), I suggest setting all of them to &lt;code&gt;~/.rtx&lt;/code&gt; for easy access.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;code&gt;~/.config/rtx&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This directory stores the global configuration file &lt;code&gt;~/.config/rtx/config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;~/.cache/rtx&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;On macOS this is &lt;code&gt;~/Library/Caches/rtx&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stores internal cache that rtx uses for things like the list of all available versions of a plugin. See &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#cache-behavior&#34;&gt;Cache Behavior&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;~/.local/share/rtx&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the main directory that rtx uses and is where plugins and tools are installed into. It is nearly identical to &lt;code&gt;~/.asdf&lt;/code&gt; in asdf, so much so that you may be able to get by symlinking these together and using asdf and rtx simultaneously. (Supporting this isn&#39;t a project goal, however).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;~/.local/share/rtx/downloads&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is where plugins may optionally cache downloaded assets such as tarballs. Use the &lt;code&gt;always_keep_downloads&lt;/code&gt; setting to prevent rtx from removing files from here.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;~/.local/share/rtx/plugins&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;rtx installs plugins to this directory when running &lt;code&gt;rtx plugins install&lt;/code&gt;. If you are working on a plugin, I suggest symlinking it manually by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s ~/src/rtx-my-tool ~/.local/share/rtx/plugins/my-tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;~/.local/share/rtx/installs&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is where tools are installed to when running &lt;code&gt;rtx install&lt;/code&gt;. For example, &lt;code&gt;rtx install node@20.0.0&lt;/code&gt; will install to &lt;code&gt;~/.local/share/rtx/installs/node/20.0.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will also create other symlinks to this directory for version prefixes (&#34;20&#34; and &#34;20.15&#34;) and matching aliases (&#34;lts&#34;, &#34;latest&#34;). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;20 -&amp;gt; ./20.15.0&#xA;20.15 -&amp;gt; ./20.15.0&#xA;latest -&amp;gt; ./20.15.0&#xA;lts -&amp;gt; ./20.15.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;~/.local/share/rtx/shims&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is where rtx places shims. Generally these are used for IDE integration or if &lt;code&gt;rtx activate&lt;/code&gt; does not work for some reason.&lt;/p&gt; &#xA;&lt;h2&gt;Templates&lt;/h2&gt; &#xA;&lt;p&gt;Templates are used in the following locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.tool-versions&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.rtx.toml&lt;/code&gt; files for most configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(Submit a ticket if you want to see it used elsewhere!)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following context objects are available inside templates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;env: HashMap&amp;lt;String, String&amp;gt;&lt;/code&gt; ‚Äì current environment variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config_root: PathBuf&lt;/code&gt; ‚Äì directory containing the &lt;code&gt;.rtx.toml&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As well as these functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;exec(command: &amp;amp;str) -&amp;gt; String&lt;/code&gt; ‚Äì execute a command and return the output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Templates are parsed with &lt;a href=&#34;https://keats.github.io/tera/docs/&#34;&gt;tera&lt;/a&gt;‚Äîwhich is quite powerful. For example, this snippet will get the directory name of the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[env]&#xA;PROJECT_NAME = &#34;{{config_root | split(pat=&#39;/&#39;) | last}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s another using &lt;code&gt;exec()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[aliases]&#xA;current = &#34;{{exec(command=&#39;node --version&#39;)}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Config Environments&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to have separate &lt;code&gt;.rtx.toml&lt;/code&gt; files in the same directory for different environments like &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt;. To enable, set &lt;code&gt;RTX_ENV&lt;/code&gt; to an environment like &lt;code&gt;development&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt;. rtx will then look for a &lt;code&gt;.rtx.{RTX_ENV}.toml&lt;/code&gt; file in the current directory.&lt;/p&gt; &#xA;&lt;p&gt;rtx will also look for &#34;local&#34; files like &lt;code&gt;.rtx.local.toml&lt;/code&gt; and &lt;code&gt;.rtx.{RTX_ENV}.local.toml&lt;/code&gt; in the current directory. These are intended to not be committed to version control. (Add &lt;code&gt;.rtx.local.toml&lt;/code&gt; and &lt;code&gt;.rtx.*.local.toml&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; file.)&lt;/p&gt; &#xA;&lt;p&gt;The priority of these files goes in this order (bottom overrides top):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.rtx.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.rtx.local.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.rtx.{RTX_ENV}.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.rtx.{RTX_ENV}.local.toml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;rtx doctor&lt;/code&gt; to see which files are being used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that currently modifying &lt;code&gt;RTX_DEFAULT_CONFIG_FILENAME&lt;/code&gt; to something other than &lt;code&gt;.rtx.toml&lt;/code&gt; will not work with this feature. For now, it will disable it entirely. This may change in the future.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;IDE Integration&lt;/h2&gt; &#xA;&lt;p&gt;IDEs work better with shims than they do environment variable modifications. The simplest way is to add the rtx shim directory to PATH.&lt;/p&gt; &#xA;&lt;p&gt;For IntelliJ and VSCode‚Äîand likely others, you can modify &lt;code&gt;~/.zprofile&lt;/code&gt; with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=&#34;$HOME/.local/share/rtx/shims:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This won&#39;t work for all of rtx&#39;s functionality. For example, arbitrary env vars in &lt;code&gt;[env]&lt;/code&gt; will only be set if a shim is executed. For this we need tighter integration with the IDE and a custom plugin. If you feel ambitious, take a look at existing direnv extensions for your IDE and see if you can modify it to work for rtx. Direnv and rtx work similarly and there should be a direnv extension that can be used as a starting point.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may be able to get tighter integration with a direnv extension and using the &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#direnv&#34;&gt;&lt;code&gt;use_rtx&lt;/code&gt;&lt;/a&gt; direnv function.&lt;/p&gt; &#xA;&lt;h2&gt;Core Plugins&lt;/h2&gt; &#xA;&lt;p&gt;rtx comes with some plugins built into the CLI written in Rust. These are new and will improve over time. They can be easily overridden by installing a plugin with the same name, e.g.: &lt;code&gt;rtx plugin install python https://github.com/asdf-community/asdf-python&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can see the core plugins with &lt;code&gt;rtx plugin ls --core&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/python.md&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/node.md&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/ruby.md&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/go.md&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/java.md&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/deno.md&#34;&gt;Deno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/docs/bun.md&#34;&gt;Bun&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;I don&#39;t want to put a &lt;code&gt;.tool-versions&lt;/code&gt; file into my project since git shows it as an untracked file&lt;/h3&gt; &#xA;&lt;p&gt;You can make git ignore these files in 3 different ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adding &lt;code&gt;.tool-versions&lt;/code&gt; to project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file. This has the downside that you need to commit the change to the ignore file.&lt;/li&gt; &#xA; &lt;li&gt;Adding &lt;code&gt;.tool-versions&lt;/code&gt; to project&#39;s &lt;code&gt;.git/info/exclude&lt;/code&gt;. This file is local to your project so there is no need to commit it.&lt;/li&gt; &#xA; &lt;li&gt;Adding &lt;code&gt;.tool-versions&lt;/code&gt; to global gitignore (&lt;code&gt;core.excludesFile&lt;/code&gt;). This will cause git to ignore &lt;code&gt;.tool-versions&lt;/code&gt; files in all projects. You can explicitly add one to a project if needed with &lt;code&gt;git add --force .tool-versions&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What is the difference between &#34;nodejs&#34; and &#34;node&#34; (or &#34;golang&#34; and &#34;go&#34;)?&lt;/h3&gt; &#xA;&lt;p&gt;These are aliased. For example, &lt;code&gt;rtx use nodejs@14.0&lt;/code&gt; is the same as &lt;code&gt;rtx install node@14.0&lt;/code&gt;. This means it is not possible to have these be different plugins.&lt;/p&gt; &#xA;&lt;p&gt;This is for convenience so you don&#39;t need to remember which one is the &#34;official&#34; name. However if something with the aliasing is acting up, submit a ticket or just stick to using &#34;node&#34; and &#34;go&#34;. Under the hood, when rtx reads a config file or takes CLI input it will swap out &#34;nodejs&#34; and &#34;golang&#34;.&lt;/p&gt; &#xA;&lt;p&gt;While this change is rolling out, there is some migration code that will move installs/plugins from the &#34;nodejs&#34; and &#34;golang&#34; directories to the new names. If this runs for you you&#39;ll see a message but it should not run again unless there is some kind of problem. In this case, it&#39;s probably easiest to just run &lt;code&gt;rm -rf ~/.local/share/rtx/installs/{golang,nodejs} ~/.local/share/rtx/plugins/{golang,nodejs}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once most users have migrated over this migration code will be removed.&lt;/p&gt; &#xA;&lt;h3&gt;What does &lt;code&gt;rtx activate&lt;/code&gt; do?&lt;/h3&gt; &#xA;&lt;p&gt;It registers a shell hook to run &lt;code&gt;rtx hook-env&lt;/code&gt; every time the shell prompt is displayed. &lt;code&gt;rtx hook-env&lt;/code&gt; checks the current env vars (most importantly &lt;code&gt;PATH&lt;/code&gt; but there are others like &lt;code&gt;GOROOT&lt;/code&gt; or &lt;code&gt;JAVA_HOME&lt;/code&gt; for some tools) and adds/removes/updates the ones that have changed.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you &lt;code&gt;cd&lt;/code&gt; into a different directory that has &lt;code&gt;java 18&lt;/code&gt; instead of &lt;code&gt;java 17&lt;/code&gt; specified, just before the next prompt is displayed the shell runs: &lt;code&gt;eval &#34;$(rtx hook-env)&#34;&lt;/code&gt; which will execute something like this in the current shell session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export JAVA_HOME=$HOME/.local/share/installs/java/18&#xA;export PATH=$HOME/.local/share/installs/java/18/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In reality updating &lt;code&gt;PATH&lt;/code&gt; is a bit more complex than that because it also needs to remove java-17, but you get the idea.&lt;/p&gt; &#xA;&lt;p&gt;You may think that is excessive to run &lt;code&gt;rtx hook-env&lt;/code&gt; every time the prompt is displayed and it should only run on &lt;code&gt;cd&lt;/code&gt;, however there are plenty of situations where it needs to run without the directory changing, for example if &lt;code&gt;.tool-versions&lt;/code&gt; or &lt;code&gt;.rtx.toml&lt;/code&gt; was just edited in the current shell.&lt;/p&gt; &#xA;&lt;p&gt;Because it runs on prompt display, if you attempt to use &lt;code&gt;rtx activate&lt;/code&gt; in a non-interactive session (like a bash script), it will never call &lt;code&gt;rtx hook-env&lt;/code&gt; and in effect will never modify PATH because it never displays a prompt. For this type of setup, you can either call &lt;code&gt;rtx hook-env&lt;/code&gt; manually every time you wish to update PATH, or use &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#shims&#34;&gt;shims&lt;/a&gt; instead (preferred). Or if you only need to use rtx for certain commands, just prefix the commands with &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx-exec-options-toolversion----command&#34;&gt;&lt;code&gt;rtx x --&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;rtx x -- npm test&lt;/code&gt; or &lt;code&gt;rtx x -- ./my_script.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rtx hook-env&lt;/code&gt; will exit early in different situations if no changes have been made. This prevents adding latency to your shell prompt every time you run a command. You can run &lt;code&gt;rtx hook-env&lt;/code&gt; yourself to see what it outputs, however it is likely nothing if you&#39;re in a shell that has already been activated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rtx activate&lt;/code&gt; also creates a shell function (in most shells) called &lt;code&gt;rtx&lt;/code&gt;. This is a trick that makes it possible for &lt;code&gt;rtx shell&lt;/code&gt; and &lt;code&gt;rtx deactivate&lt;/code&gt; to work without wrapping them in &lt;code&gt;eval &#34;$(rtx shell)&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx activate&lt;/code&gt; doesn&#39;t work in &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zprofile&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rtx activate&lt;/code&gt; should only be used in &lt;code&gt;rc&lt;/code&gt; files. These are the interactive ones used when a real user is using the terminal. (As opposed to being executed by an IDE or something). The prompt isn&#39;t displayed in non-interactive environments so PATH won&#39;t be modified.&lt;/p&gt; &#xA;&lt;p&gt;For non-interactive setups, consider using shims instead which will route calls to the correct directory by looking at &lt;code&gt;PWD&lt;/code&gt; every time they&#39;re executed. You can also call &lt;code&gt;rtx exec&lt;/code&gt; instead of expecting things to be directly on PATH. You can also run &lt;code&gt;rtx env&lt;/code&gt; in a non-interactive shell, however that will only setup the global tools. It won&#39;t modify the environment variables when entering into a different project.&lt;/p&gt; &#xA;&lt;p&gt;Also see the &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#shebang&#34;&gt;shebang&lt;/a&gt; example for a way to make scripts call rtx to get the runtime. That is another way to use rtx without activation.&lt;/p&gt; &#xA;&lt;h3&gt;rtx is failing or not working right&lt;/h3&gt; &#xA;&lt;p&gt;First try setting &lt;code&gt;RTX_DEBUG=1&lt;/code&gt; or &lt;code&gt;RTX_TRACE=1&lt;/code&gt; and see if that gives you more information. You can also set &lt;code&gt;RTX_LOG_FILE_LEVEL=debug RTX_LOG_FILE=/path/to/logfile&lt;/code&gt; to write logs to a file.&lt;/p&gt; &#xA;&lt;p&gt;If something is happening with the activate hook, you can try disabling it and calling &lt;code&gt;eval &#34;$(rtx hook-env)&#34;&lt;/code&gt; manually. It can also be helpful to use &lt;code&gt;rtx env&lt;/code&gt; which will just output environment variables that would be set. Also consider using &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#shims&#34;&gt;shims&lt;/a&gt; which can be more compatible.&lt;/p&gt; &#xA;&lt;p&gt;If runtime installation isn&#39;t working right, try using the &lt;code&gt;--raw&lt;/code&gt; flag which will install things in series and connect stdin/stdout/stderr directly to the terminal. If a plugin is trying to interact with you for some reason this will make it work.&lt;/p&gt; &#xA;&lt;p&gt;Of course check the version of rtx with &lt;code&gt;rtx --version&lt;/code&gt; and make sure it is the latest. Use &lt;code&gt;rtx self-update&lt;/code&gt; to update it. &lt;code&gt;rtx cache clean&lt;/code&gt; can be used to wipe the internal cache and &lt;code&gt;rtx implode&lt;/code&gt; can be used to remove everything except config.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting a ticket, it&#39;s a good idea to test what you were doing with asdf. That way we can rule out if the issue is with rtx or if it&#39;s with a particular plugin. For example, if &lt;code&gt;rtx install python@latest&lt;/code&gt; doesn&#39;t work, try running &lt;code&gt;asdf install python latest&lt;/code&gt; to see if it&#39;s an issue with asdf-python.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, there is &lt;code&gt;rtx doctor&lt;/code&gt; which will show diagnostic information and any warnings about issues detected with your setup. If you submit a bug report, please include the output of &lt;code&gt;rtx doctor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows support?&lt;/h3&gt; &#xA;&lt;p&gt;This is something we&#39;d like to add! &lt;a href=&#34;https://github.com/jdx/rtx/discussions/66&#34;&gt;https://github.com/jdx/rtx/discussions/66&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not a near-term goal and it would require plugin modifications, but it should be feasible.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use rtx with http proxies?&lt;/h3&gt; &#xA;&lt;p&gt;Short answer: just set &lt;code&gt;http_proxy&lt;/code&gt; and &lt;code&gt;https_proxy&lt;/code&gt; environment variables. These should be lowercase.&lt;/p&gt; &#xA;&lt;p&gt;rtx doesn&#39;t really do anything with http itself. The only exception to that is checking for new versions and &lt;code&gt;rtx self-update&lt;/code&gt;. It uses &lt;code&gt;git&lt;/code&gt; to clone plugins and the plugins themselves generally will download files with &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However this is really up to the plugin. If you&#39;re having a proxy-related issue installing something you should post an issue on the plugin&#39;s repository.&lt;/p&gt; &#xA;&lt;h3&gt;How do the shorthand plugin names map to repositories?&lt;/h3&gt; &#xA;&lt;p&gt;e.g.: how does &lt;code&gt;rtx plugin install elixir&lt;/code&gt; know to fetch &lt;a href=&#34;https://github.com/asdf-vm/asdf-elixir&#34;&gt;https://github.com/asdf-vm/asdf-elixir&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;p&gt;asdf maintains &lt;a href=&#34;https://github.com/asdf-vm/asdf-plugins&#34;&gt;an index&lt;/a&gt; of shorthands that rtx uses as a base. This is regularly updated every time that rtx has a release. This repository is stored directly into the codebase &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/src/default_shorthands.rs&#34;&gt;here&lt;/a&gt;. The bottom of that file contains modifications that rtx makes on top of asdf.&lt;/p&gt; &#xA;&lt;h3&gt;Does &#34;node@20&#34; mean the newest available version of node?&lt;/h3&gt; &#xA;&lt;p&gt;It depends on the command. Normally, for most commands and inside of config files, &#34;node@20&#34; will point to the latest &lt;em&gt;installed&lt;/em&gt; version of node-20.x. You can find this version by running &lt;code&gt;rtx latest --installed node@20&lt;/code&gt; or by seeing what the &lt;code&gt;~/.local/share/rtx/installs/node/20&lt;/code&gt; symlink points to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ ls -l ~/.local/share/rtx/installs/node/20&#xA;[...] /home/jdx/.local/share/rtx/installs/node/20 -&amp;gt; node-v20.0.0-linux-x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are some exceptions to this, such as the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rtx install node@20&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtx latest node@20&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtx upgrade node@20&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These will use the latest &lt;em&gt;available&lt;/em&gt; version of node-20.x. This generally makes sense because you wouldn&#39;t want to install a version that is already installed.&lt;/p&gt; &#xA;&lt;h3&gt;How do I migrate from asdf?&lt;/h3&gt; &#xA;&lt;p&gt;First, just install rtx with &lt;code&gt;rtx activate&lt;/code&gt; like in the getting started guide and remove asdf from your shell rc file.&lt;/p&gt; &#xA;&lt;p&gt;Then you can just run &lt;code&gt;rtx install&lt;/code&gt; in a directory with an asdf &lt;code&gt;.tool-versions&lt;/code&gt; file and it will install the runtimes. You could attempt to avoid this by copying the internal directory from asdf over to rtx with &lt;code&gt;cp -r ~/.asdf ~/.local/share/rtx&lt;/code&gt;. That &lt;em&gt;should&lt;/em&gt; work because they use the same structure, however this isn&#39;t officially supported or regularly tested. Alternatively you can set &lt;code&gt;RTX_DATA_DIR=~/.asdf&lt;/code&gt; and see what happens.&lt;/p&gt; &#xA;&lt;h3&gt;How compatible is rtx with asdf?&lt;/h3&gt; &#xA;&lt;p&gt;rtx should be able to read/install any &lt;code&gt;.tool-versions&lt;/code&gt; file used by asdf. Any asdf plugin should be usable in rtx. The commands in rtx are slightly different, such as &lt;code&gt;rtx install node@20.0.0&lt;/code&gt; vs &lt;code&gt;asdf install node 20.0.0&lt;/code&gt;‚Äîthis is done so multiple tools can be specified at once. However, asdf-style syntax is still supported: (&lt;code&gt;rtx install node 20.0.0&lt;/code&gt;). This is the case for most commands, though the help for the command may say that asdf-style syntax is supported.&lt;/p&gt; &#xA;&lt;p&gt;When in doubt, just try asdf syntax and see if it works. If it doesn&#39;t open a ticket. It may not be possible to support every command identically, but we should attempt to make things as consistent as possible.&lt;/p&gt; &#xA;&lt;p&gt;This isn&#39;t important for usability reasons so much as making it so plugins continue to work that call asdf commands.&lt;/p&gt; &#xA;&lt;p&gt;If you need to switch to/from asdf or work in a project with asdf users, you can set &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#rtx_asdf_compat1&#34;&gt;&lt;code&gt;RTX_ASDF_COMPAT=1&lt;/code&gt;&lt;/a&gt;. That prevents rtx from writing &lt;code&gt;.tool-versions&lt;/code&gt; files that will not be compatible with asdf. Also consider using &lt;code&gt;.rtx.toml&lt;/code&gt; instead which won&#39;t conflict with asdf setups.&lt;/p&gt; &#xA;&lt;h3&gt;rtx isn&#39;t working when calling from tmux or another shell initialization script&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rtx activate&lt;/code&gt; will not update PATH until the shell prompt is displayed. So if you need to access a tool provided by rtx before the prompt is displayed you must manually call &lt;code&gt;hook-env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(rtx activate bash)&#34;&#xA;eval &#34;$(rtx hook-env)&#34;&#xA;python --version # will work only after calling hook-env explicitly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#what-does-rtx-activate-do&#34;&gt;What does &lt;code&gt;rtx activate&lt;/code&gt; do?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How do I disable/force CLI color output?&lt;/h3&gt; &#xA;&lt;p&gt;rtx uses &lt;a href=&#34;https://docs.rs/console/latest/console/fn.colors_enabled.html&#34;&gt;console.rs&lt;/a&gt; which honors the &lt;a href=&#34;https://bixense.com/clicolors/&#34;&gt;clicolors spec&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CLICOLOR != 0&lt;/code&gt;: ANSI colors are supported and should be used when the program isn‚Äôt piped.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLICOLOR == 0&lt;/code&gt;: Don‚Äôt output ANSI color escape codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLICOLOR_FORCE != 0&lt;/code&gt;: ANSI colors should be enabled no matter what.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Is rtx secure?&lt;/h3&gt; &#xA;&lt;p&gt;Not as much as it should be, though currently a bit more secure than asdf. Work will happen in this area as secure supply chains are incredibly important. See &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to asdf&lt;/h2&gt; &#xA;&lt;p&gt;rtx is mostly a clone of asdf, but there are notable areas where improvements have been made.&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;asdf made (what I consider) a poor design decision to use shims that go between a call to a runtime and the runtime itself. e.g.: when you call &lt;code&gt;node&lt;/code&gt; it will call an asdf shim file &lt;code&gt;~/.asdf/shims/node&lt;/code&gt;, which then calls &lt;code&gt;asdf exec&lt;/code&gt;, which then calls the correct version of node.&lt;/p&gt; &#xA;&lt;p&gt;These shims have terrible performance, adding ~120ms to every runtime call. rtx does not use shims and instead updates &lt;code&gt;PATH&lt;/code&gt; so that it doesn&#39;t have any overhead when simply calling binaries. These shims are the main reason that I wrote this. Note that in the demo GIF at the top of this README that &lt;code&gt;rtx&lt;/code&gt; isn&#39;t actually used when calling &lt;code&gt;node -v&lt;/code&gt; for this reason. The performance is identical to running node without using rtx.&lt;/p&gt; &#xA;&lt;p&gt;I don&#39;t think it&#39;s possible for asdf to fix these issues. The author of asdf did a great writeup of &lt;a href=&#34;https://stratus3d.com/blog/2022/08/11/asdf-performance/&#34;&gt;performance problems&lt;/a&gt;. asdf is written in bash which certainly makes it challenging to be performant, however I think the real problem is the shim design. I don&#39;t think it&#39;s possible to fix that without a complete rewrite.&lt;/p&gt; &#xA;&lt;p&gt;rtx does call an internal command &lt;code&gt;rtx hook-env&lt;/code&gt; every time the directory has changed, but because it&#39;s written in Rust, this is very quick‚Äîtaking ~10ms on my machine. 4ms if there are no changes, 14ms if it&#39;s a full reload.&lt;/p&gt; &#xA;&lt;p&gt;tl;dr: asdf adds overhead (~120ms) when calling a runtime, rtx adds a small amount of overhead (~10ms) when the prompt loads.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables in rtx&lt;/h3&gt; &#xA;&lt;p&gt;asdf only helps manage runtime executables. However, some tools are managed via environment variables (notably Java which switches via &lt;code&gt;JAVA_HOME&lt;/code&gt;). This isn&#39;t supported very well in asdf and requires a separate shell extension just to manage.&lt;/p&gt; &#xA;&lt;p&gt;However asdf &lt;em&gt;plugins&lt;/em&gt; have a &lt;code&gt;bin/exec-env&lt;/code&gt; script that is used for exporting environment variables like &lt;a href=&#34;https://github.com/halcyon/asdf-java/raw/master/bin/exec-env&#34;&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt;&lt;/a&gt;. rtx simply exports the environment variables from the &lt;code&gt;bin/exec-env&lt;/code&gt; script in the plugin but places them in the shell for &lt;em&gt;all&lt;/em&gt; commands. In asdf it only exports those commands when the shim is called. This means if you call &lt;code&gt;java&lt;/code&gt; it will set &lt;code&gt;JAVA_HOME&lt;/code&gt;, but not if you call some Java tool like &lt;code&gt;mvn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means we&#39;re just using the existing plugin script but because rtx doesn&#39;t use shims it can be used for more things. It would be trivial to make a plugin that exports arbitrary environment variables like &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;dotenv&lt;/a&gt; or &lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;UX&lt;/h3&gt; &#xA;&lt;p&gt;Some commands are the same in asdf but others have been changed. Everything that&#39;s possible in asdf should be possible in rtx but may use slightly different syntax. rtx has more forgiving commands, such as using fuzzy-matching, e.g.: &lt;code&gt;rtx install node@20&lt;/code&gt;. While in asdf you &lt;em&gt;can&lt;/em&gt; run &lt;code&gt;asdf install node latest:20&lt;/code&gt;, you can&#39;t use &lt;code&gt;latest:20&lt;/code&gt; in a &lt;code&gt;.tool-versions&lt;/code&gt; file or many other places. In &lt;code&gt;rtx&lt;/code&gt; you can use fuzzy-matching everywhere.&lt;/p&gt; &#xA;&lt;p&gt;asdf requires several steps to install a new runtime if the plugin isn&#39;t installed, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;asdf plugin add node&#xA;asdf install node latest:20&#xA;asdf local node latest:20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;code&gt;rtx&lt;/code&gt; this can all be done in a single step to set the local runtime version. If the plugin and/or runtime needs to be installed it will prompt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/564031&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/564031.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve found asdf to be particularly rigid and difficult to learn. It also made strange decisions like having &lt;code&gt;asdf list all&lt;/code&gt; but &lt;code&gt;asdf latest --all&lt;/code&gt; (why is one a flag and one a positional argument?). &lt;code&gt;rtx&lt;/code&gt; makes heavy use of aliases so you don&#39;t need to remember if it&#39;s &lt;code&gt;rtx plugin add node&lt;/code&gt; or &lt;code&gt;rtx plugin install node&lt;/code&gt;. If I can guess what you meant, then I&#39;ll try to get rtx to respond in the right way.&lt;/p&gt; &#xA;&lt;p&gt;That said, there are a lot of great things about asdf. It&#39;s the best multi-runtime manager out there and I&#39;ve really been impressed with the plugin system. Most of the design decisions the authors made were very good. I really just have 2 complaints: the shims and the fact it&#39;s written in Bash.&lt;/p&gt; &#xA;&lt;h3&gt;CI/CD&lt;/h3&gt; &#xA;&lt;p&gt;Using rtx in CI/CD is a great way to synchronize tool versions for dev/build.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;rtx is pretty easy to use without an action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  build:&#xA;    steps:&#xA;    - run: |&#xA;        curl https://rtx.jdx.dev/install.sh | sh&#xA;        echo &#34;$HOME/.local/share/rtx/bin&#34; &amp;gt;&amp;gt; $GITHUB_PATH&#xA;        echo &#34;$HOME/.local/share/rtx/shims&#34; &amp;gt;&amp;gt; $GITHUB_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use the custom action &lt;a href=&#34;https://github.com/jdx/rtx-action&#34;&gt;&lt;code&gt;jdx/rtx-action&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  lint:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: jdx/rtx-action@v1&#xA;      - run: node -v # will be the node version from `.rtx.toml`/`.tool-versions`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shims&lt;/h2&gt; &#xA;&lt;p&gt;While the PATH design of rtx works great in most cases, there are some situations where shims are preferable. One example is when calling rtx binaries from an IDE.&lt;/p&gt; &#xA;&lt;p&gt;To support this, rtx does have a shim dir that can be used. It&#39;s located at &lt;code&gt;~/.local/share/rtx/shims&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ rtx i node@20.0.0&#xA;$ rtx reshim # may be required if new shims need to be created&#xA;$ ~/.local/share/rtx/shims/node -v&#xA;v20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;direnv&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt; and rtx both manage environment variables based on directory. Because they both analyze the current environment variables before and after their respective &#34;hook&#34; commands are run, they can sometimes conflict with each other.&lt;/p&gt; &#xA;&lt;p&gt;If you have an issue, it&#39;s likely to do with the ordering of PATH. This means it would really only be a problem if you were trying to manage the same tool with direnv and rtx. For example, you may use &lt;code&gt;layout python&lt;/code&gt; in an &lt;code&gt;.envrc&lt;/code&gt; but also be maintaining a &lt;code&gt;.tool-versions&lt;/code&gt; file with python in it as well.&lt;/p&gt; &#xA;&lt;p&gt;A more typical usage of direnv would be to set some arbitrary environment variables, or add unrelated binaries to PATH. In these cases, rtx will not interfere with direnv.&lt;/p&gt; &#xA;&lt;h3&gt;rtx inside of direnv (&lt;code&gt;use rtx&lt;/code&gt; in &lt;code&gt;.envrc&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;If you do encounter issues with &lt;code&gt;rtx activate&lt;/code&gt;, or just want to use direnv in an alternate way, this is a simpler setup that&#39;s less likely to cause issues‚Äîat the cost of functionality.&lt;/p&gt; &#xA;&lt;p&gt;This may be required if you want to use direnv&#39;s &lt;code&gt;layout python&lt;/code&gt; with rtx. Otherwise there are situations where rtx will override direnv&#39;s PATH. &lt;code&gt;use rtx&lt;/code&gt; ensures that direnv always has control.&lt;/p&gt; &#xA;&lt;p&gt;To do this, first use &lt;code&gt;rtx&lt;/code&gt; to build a &lt;code&gt;use_rtx&lt;/code&gt; function that you can use in &lt;code&gt;.envrc&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rtx direnv activate &amp;gt; ~/.config/direnv/lib/use_rtx.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now in your &lt;code&gt;.envrc&lt;/code&gt; file add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;use rtx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;direnv will now call rtx to export its environment variables. You&#39;ll need to make sure to add &lt;code&gt;use_rtx&lt;/code&gt; to all projects that use rtx (or use direnv&#39;s &lt;code&gt;source_up&lt;/code&gt; to load it from a subdirectory). You can also add &lt;code&gt;use rtx&lt;/code&gt; to &lt;code&gt;~/.config/direnv/direnvrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that in this method direnv typically won&#39;t know to refresh &lt;code&gt;.tool-versions&lt;/code&gt; files unless they&#39;re at the same level as a &lt;code&gt;.envrc&lt;/code&gt; file. You&#39;ll likely always want to have a &lt;code&gt;.envrc&lt;/code&gt; file next to your &lt;code&gt;.tool-versions&lt;/code&gt; for this reason. To make this a little easier to manage, I encourage &lt;em&gt;not&lt;/em&gt; actually using &lt;code&gt;.tool-versions&lt;/code&gt; at all, and instead setting environment variables entirely in &lt;code&gt;.envrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export RTX_NODE_VERSION=20.0.0&#xA;export RTX_PYTHON_VERSION=3.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course if you use &lt;code&gt;rtx activate&lt;/code&gt;, then these steps won&#39;t have been necessary and you can use rtx as if direnv was not used.&lt;/p&gt; &#xA;&lt;p&gt;If you continue to struggle, you can also try using the &lt;a href=&#34;https://raw.githubusercontent.com/jdx/rtx/main/#shims&#34;&gt;shims method&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Do you need direnv?&lt;/h3&gt; &#xA;&lt;p&gt;While making rtx compatible with direnv is, and will always be a major goal of this project, I also want rtx to be capable of replacing direnv if needed. This is why rtx includes support for managing env vars and &lt;a href=&#34;https://github.com/jdx/rtx/raw/main/docs/python.md#experimental-automatic-virtualenv-creationactivation&#34;&gt;virtualenv&lt;/a&gt; for python using &lt;code&gt;.rtx.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find you continue to need direnv, please open an issue and let me know what it is to see if it&#39;s something rtx could support. rtx will never be as capable as direnv with a DSL like &lt;code&gt;.envrc&lt;/code&gt;, but I think we can handle enough common use cases to make that unnecessary for most people.&lt;/p&gt; &#xA;&lt;h2&gt;Cache Behavior&lt;/h2&gt; &#xA;&lt;p&gt;rtx makes use of caching in many places in order to be efficient. The details about how long to keep cache for should eventually all be configurable. There may be gaps in the current behavior where things are hardcoded, but I&#39;m happy to add more settings to cover whatever config is needed.&lt;/p&gt; &#xA;&lt;p&gt;Below I explain the behavior it uses around caching. If you&#39;re seeing behavior where things don&#39;t appear to be updating, this is a good place to start.&lt;/p&gt; &#xA;&lt;h3&gt;Plugin/Runtime Cache&lt;/h3&gt; &#xA;&lt;p&gt;Each plugin has a cache that&#39;s stored in &lt;code&gt;~/$RTX_CACHE_DIR/&amp;lt;PLUGIN&amp;gt;&lt;/code&gt;. It stores the list of versions available for that plugin (&lt;code&gt;rtx ls-remote &amp;lt;PLUGIN&amp;gt;&lt;/code&gt;), the legacy filenames (see below), the list of aliases, the bin directories within each runtime installation, and the result of running &lt;code&gt;exec-env&lt;/code&gt; after the runtime was installed.&lt;/p&gt; &#xA;&lt;p&gt;Remote versions are updated daily by default. The file is zlib messagepack, if you want to view it you can run the following (requires &lt;a href=&#34;https://github.com/msgpack/msgpack-cli&#34;&gt;msgpack-cli&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;cat ~/$RTX_CACHE_DIR/node/remote_versions.msgpack.z | perl -e &#39;use Compress::Raw::Zlib;my $d=new Compress::Raw::Zlib::Inflate();my $o;undef $/;$d-&amp;gt;inflate(&amp;lt;&amp;gt;,$o);print $o;&#39; | msgpack-cli decode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the caching of &lt;code&gt;exec-env&lt;/code&gt; may be problematic if the script isn&#39;t simply exporting static values. The vast majority of &lt;code&gt;exec-env&lt;/code&gt; scripts only export static values, but if you&#39;re working with a plugin that has a dynamic &lt;code&gt;exec-env&lt;/code&gt; submit a ticket and we can try to figure out what to do.&lt;/p&gt; &#xA;&lt;p&gt;Caching &lt;code&gt;exec-env&lt;/code&gt; massively improved the performance of rtx since it requires calling bash every time rtx is initialized. Ideally, we can keep this behavior.&lt;/p&gt; &#xA;&lt;!-- RTX:COMMANDS --&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx activate [OPTIONS] [SHELL_TYPE]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Initializes rtx in the current shell session&#xA;&#xA;This should go into your shell&#39;s rc file.&#xA;Otherwise, it will only take effect in the current session.&#xA;(e.g. ~/.zshrc, ~/.bashrc)&#xA;&#xA;This is only intended to be used in interactive sessions, not scripts.&#xA;rtx is only capable of updating PATH when the prompt is displayed to the user.&#xA;For non-interactive use-cases, use shims instead.&#xA;&#xA;Typically this can be added with something like the following:&#xA;&#xA;    echo &#39;eval &#34;$(rtx activate)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&#xA;However, this requires that &#34;rtx&#34; is in your PATH. If it is not, you need to&#xA;specify the full path like this:&#xA;&#xA;    echo &#39;eval &#34;$(/path/to/rtx activate)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&#xA;Usage: activate [OPTIONS] [SHELL_TYPE]&#xA;&#xA;Arguments:&#xA;  [SHELL_TYPE]&#xA;          Shell type to generate the script for&#xA;&#xA;          [possible values: bash, fish, nu, xonsh, zsh]&#xA;&#xA;Options:&#xA;      --status&#xA;          Show &#34;rtx: &amp;lt;PLUGIN&amp;gt;@&amp;lt;VERSION&amp;gt;&#34; message when changing directories&#xA;&#xA;Examples:&#xA;  $ eval &#34;$(rtx activate bash)&#34;&#xA;  $ eval &#34;$(rtx activate zsh)&#34;&#xA;  $ rtx activate fish | source&#xA;  $ execx($(rtx activate xonsh))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias get &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Show an alias for a plugin&#xA;&#xA;This is the contents of an alias.&amp;lt;PLUGIN&amp;gt; entry in ~/.config/rtx/config.toml&#xA;&#xA;Usage: alias get &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;&#xA;          The plugin to show the alias for&#xA;&#xA;  &amp;lt;ALIAS&amp;gt;&#xA;          The alias to show&#xA;&#xA;Examples:&#xA; $ rtx alias get node lts-hydrogen&#xA; 20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias ls [OPTIONS] [PLUGIN]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;List aliases&#xA;Shows the aliases that can be specified.&#xA;These can come from user config or from plugins in `bin/list-aliases`.&#xA;&#xA;For user config, aliases are defined like the following in `~/.config/rtx/config.toml`:&#xA;&#xA;  [alias.node]&#xA;  lts = &#34;20.0.0&#34;&#xA;&#xA;Usage: alias ls [OPTIONS] [PLUGIN]&#xA;&#xA;Arguments:&#xA;  [PLUGIN]&#xA;          Show aliases for &amp;lt;PLUGIN&amp;gt;&#xA;&#xA;Options:&#xA;      --no-header&#xA;          Don&#39;t show table header&#xA;&#xA;Examples:&#xA;  $ rtx aliases&#xA;  node    lts-hydrogen   20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias set &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt; &amp;lt;VALUE&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Add/update an alias for a plugin&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: alias set &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt; &amp;lt;VALUE&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;&#xA;          The plugin to set the alias for&#xA;&#xA;  &amp;lt;ALIAS&amp;gt;&#xA;          The alias to set&#xA;&#xA;  &amp;lt;VALUE&amp;gt;&#xA;          The value to set the alias to&#xA;&#xA;Examples:&#xA;  $ rtx alias set node lts-hydrogen 18.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx alias unset &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Clears an alias for a plugin&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: alias unset &amp;lt;PLUGIN&amp;gt; &amp;lt;ALIAS&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;PLUGIN&amp;gt;&#xA;          The plugin to remove the alias from&#xA;&#xA;  &amp;lt;ALIAS&amp;gt;&#xA;          The alias to remove&#xA;&#xA;Examples:&#xA;  $ rtx alias unset node lts-hydrogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx bin-paths&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;List all the active runtime bin paths&#xA;&#xA;Usage: bin-paths&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx cache clear [PLUGIN]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Deletes all cache files in rtx&#xA;&#xA;Usage: cache clear [PLUGIN]...&#xA;&#xA;Arguments:&#xA;  [PLUGIN]...&#xA;          Plugin(s) to clear cache for e.g.: node, python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx completion [SHELL]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Generate shell completions&#xA;&#xA;Usage: completion [SHELL]&#xA;&#xA;Arguments:&#xA;  [SHELL]&#xA;          Shell type to generate completions for&#xA;&#xA;          [possible values: bash, fish, zsh]&#xA;&#xA;Examples:&#xA;  $ rtx completion bash &amp;gt; /etc/bash_completion.d/rtx&#xA;  $ rtx completion zsh  &amp;gt; /usr/local/share/zsh/site-functions/_rtx&#xA;  $ rtx completion fish &amp;gt; ~/.config/fish/completions/rtx.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx config ls [OPTIONS]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[experimental] List config files currently in use&#xA;&#xA;Usage: config ls [OPTIONS]&#xA;&#xA;Options:&#xA;      --no-header&#xA;          Do not print table header&#xA;&#xA;Examples:&#xA;  $ rtx config ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx config generate [OPTIONS]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[experimental] Generate an .rtx.toml file&#xA;&#xA;Usage: config generate [OPTIONS]&#xA;&#xA;Options:&#xA;  -o, --output &amp;lt;OUTPUT&amp;gt;&#xA;          Output to file instead of stdout&#xA;&#xA;Examples:&#xA;  $ rtx cf generate &amp;gt; .rtx.toml&#xA;  $ rtx cf generate --output=.rtx.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx current [PLUGIN]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Shows current active and installed runtime versions&#xA;&#xA;This is similar to `rtx ls --current`, but this only shows the runtime&#xA;and/or version. It&#39;s designed to fit into scripts more easily.&#xA;&#xA;Usage: current [PLUGIN]&#xA;&#xA;Arguments:&#xA;  [PLUGIN]&#xA;          Plugin to show versions of e.g.: ruby, node&#xA;&#xA;Examples:&#xA;  # outputs `.tool-versions` compatible format&#xA;  $ rtx current&#xA;  python 3.11.0 3.10.0&#xA;  shfmt 3.6.0&#xA;  shellcheck 0.9.0&#xA;  node 20.0.0&#xA;&#xA;  $ rtx current node&#xA;  20.0.0&#xA;&#xA;  # can output multiple versions&#xA;  $ rtx current python&#xA;  3.11.0 3.10.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx deactivate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Disable rtx for current shell session&#xA;&#xA;This can be used to temporarily disable rtx in a shell session.&#xA;&#xA;Usage: deactivate&#xA;&#xA;Examples:&#xA;  $ rtx deactivate bash&#xA;  $ rtx deactivate zsh&#xA;  $ rtx deactivate fish&#xA;  $ execx($(rtx deactivate xonsh))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx direnv activate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Output direnv function to use rtx inside direnv&#xA;&#xA;See https://github.com/jdx/rtx#direnv for more information&#xA;&#xA;Because this generates the legacy files based on currently installed plugins,&#xA;you should run this command after installing new plugins. Otherwise&#xA;direnv may not know to update environment variables when legacy file versions change.&#xA;&#xA;Usage: direnv activate&#xA;&#xA;Examples:&#xA;  $ rtx direnv activate &amp;gt; ~/.config/direnv/lib/use_rtx.sh&#xA;  $ echo &#39;use rtx&#39; &amp;gt; .envrc&#xA;  $ direnv allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx doctor&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Check rtx installation for possible problems.&#xA;&#xA;Usage: doctor&#xA;&#xA;Examples:&#xA;  $ rtx doctor&#xA;  [WARN] plugin node is not installed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx env [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Exports env vars to activate rtx a single time&#xA;&#xA;Use this if you don&#39;t want to permanently install rtx. It&#39;s not necessary to&#xA;use this if you have `rtx activate` in your shell rc file.&#xA;&#xA;Usage: env [OPTIONS] [TOOL@VERSION]...&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to use&#xA;&#xA;Options:&#xA;  -s, --shell &amp;lt;SHELL&amp;gt;&#xA;          Shell type to generate environment variables for&#xA;&#xA;          [possible values: bash, fish, nu, xonsh, zsh]&#xA;&#xA;  -j, --jobs &amp;lt;JOBS&amp;gt;&#xA;          Number of jobs to run in parallel&#xA;          [default: 4]&#xA;&#xA;          [env: RTX_JOBS=]&#xA;&#xA;  -J, --json&#xA;          Output in JSON format&#xA;&#xA;      --raw&#xA;          Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1&#xA;&#xA;Examples:&#xA;  $ eval &#34;$(rtx env -s bash)&#34;&#xA;  $ eval &#34;$(rtx env -s zsh)&#34;&#xA;  $ rtx env -s fish | source&#xA;  $ execx($(rtx env -s xonsh))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx env-vars [OPTIONS] [ENV_VARS]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Manage environment variables&#xA;&#xA;By default this command modifies &#34;.rtx.toml&#34; in the current directory.&#xA;You can specify the file name by either setting the RTX_DEFAULT_CONFIG_FILENAME environment variable, or by using the --file option.&#xA;&#xA;Usage: env-vars [OPTIONS] [ENV_VARS]...&#xA;&#xA;Arguments:&#xA;  [ENV_VARS]...&#xA;          Environment variable(s) to set&#xA;          e.g.: NODE_ENV=production&#xA;&#xA;Options:&#xA;      --file &amp;lt;FILE&amp;gt;&#xA;          The TOML file to update&#xA;&#xA;          Defaults to RTX_DEFAULT_CONFIG_FILENAME environment variable, or &#34;.rtx.toml&#34;.&#xA;&#xA;      --remove &amp;lt;ENV_VAR&amp;gt;&#xA;          Remove the environment variable from config file&#xA;&#xA;          Can be used multiple times.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx exec [OPTIONS] [TOOL@VERSION]... [-- &amp;lt;COMMAND&amp;gt;...]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Execute a command with tool(s) set&#xA;&#xA;use this to avoid modifying the shell session or running ad-hoc commands with rtx tools set.&#xA;&#xA;Tools will be loaded from .rtx.toml/.tool-versions, though they can be overridden with &amp;lt;RUNTIME&amp;gt; args&#xA;Note that only the plugin specified will be overridden, so if a `.tool-versions` file&#xA;includes &#34;node 20&#34; but you run `rtx exec python@3.11`; it will still load node@20.&#xA;&#xA;The &#34;--&#34; separates runtimes from the commands to pass along to the subprocess.&#xA;&#xA;Usage: exec [OPTIONS] [TOOL@VERSION]... [-- &amp;lt;COMMAND&amp;gt;...]&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to start e.g.: node@20 python@3.10&#xA;&#xA;  [COMMAND]...&#xA;          Command string to execute (same as --command)&#xA;&#xA;Options:&#xA;  -c, --command &amp;lt;C&amp;gt;&#xA;          Command string to execute&#xA;&#xA;  -C, --cd &amp;lt;CD&amp;gt;&#xA;          Change to this directory before executing the command&#xA;&#xA;  -j, --jobs &amp;lt;JOBS&amp;gt;&#xA;          Number of jobs to run in parallel&#xA;          [default: 4]&#xA;&#xA;          [env: RTX_JOBS=]&#xA;&#xA;      --raw&#xA;          Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1&#xA;&#xA;Examples:&#xA;  $ rtx exec node@20 -- node ./app.js  # launch app.js using node-20.x&#xA;  $ rtx x node@20 -- node ./app.js     # shorter alias&#xA;&#xA;  # Specify command as a string:&#xA;  $ rtx exec node@20 python@3.11 --command &#34;node -v &amp;amp;&amp;amp; python -V&#34;&#xA;&#xA;  # Run a command in a different directory:&#xA;  $ rtx x -C /path/to/project node@20 -- node ./app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx implode [OPTIONS]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Removes rtx CLI and all related data&#xA;&#xA;Skips config directory by default.&#xA;&#xA;Usage: implode [OPTIONS]&#xA;&#xA;Options:&#xA;      --config&#xA;          Also remove config directory&#xA;&#xA;  -n, --dry-run&#xA;          List directories that would be removed without actually removing them&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx install [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Install a tool version&#xA;&#xA;This will install a tool version to `~/.local/share/rtx/installs/&amp;lt;PLUGIN&amp;gt;/&amp;lt;VERSION&amp;gt;`&#xA;It won&#39;t be used simply by being installed, however.&#xA;For that, you must set up a `.rtx.toml`/`.tool-version` file manually or with `rtx use`.&#xA;Or you can call a tool version explicitly with `rtx exec &amp;lt;TOOL&amp;gt;@&amp;lt;VERSION&amp;gt; -- &amp;lt;COMMAND&amp;gt;`.&#xA;&#xA;Tools will be installed in parallel. To disable, set `--jobs=1` or `RTX_JOBS=1`&#xA;&#xA;Usage: install [OPTIONS] [TOOL@VERSION]...&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to install e.g.: node@20&#xA;&#xA;Options:&#xA;  -f, --force&#xA;          Force reinstall even if already installed&#xA;&#xA;  -j, --jobs &amp;lt;JOBS&amp;gt;&#xA;          Number of jobs to run in parallel&#xA;          [default: 4]&#xA;&#xA;          [env: RTX_JOBS=]&#xA;&#xA;      --raw&#xA;          Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1&#xA;&#xA;  -v, --verbose...&#xA;          Show installation output&#xA;&#xA;Examples:&#xA;  $ rtx install node@20.0.0  # install specific node version&#xA;  $ rtx install node@20      # install fuzzy node version&#xA;  $ rtx install node         # install version specified in .tool-versions or .rtx.toml&#xA;  $ rtx install                # installs everything specified in .tool-versions or .rtx.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx latest [OPTIONS] &amp;lt;TOOL@VERSION&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Gets the latest available version for a plugin&#xA;&#xA;Usage: latest [OPTIONS] &amp;lt;TOOL@VERSION&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;TOOL@VERSION&amp;gt;&#xA;          Tool to get the latest version of&#xA;&#xA;Options:&#xA;  -i, --installed&#xA;          Show latest installed instead of available version&#xA;&#xA;Examples:&#xA;  $ rtx latest node@20  # get the latest version of node 20&#xA;  20.0.0&#xA;&#xA;  $ rtx latest node     # get the latest stable version of node&#xA;  20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx link [OPTIONS] &amp;lt;TOOL@VERSION&amp;gt; &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Symlinks a tool version into rtx&#xA;&#xA;Use this for adding installs either custom compiled outside&#xA;rtx or built with a different tool.&#xA;&#xA;Usage: link [OPTIONS] &amp;lt;TOOL@VERSION&amp;gt; &amp;lt;PATH&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;TOOL@VERSION&amp;gt;&#xA;          Tool name and version to create a symlink for&#xA;&#xA;  &amp;lt;PATH&amp;gt;&#xA;          The local path to the tool version&#xA;          e.g.: ~/.nvm/versions/node/v20.0.0&#xA;&#xA;Options:&#xA;  -f, --force&#xA;          Overwrite an existing tool version if it exists&#xA;&#xA;Examples:&#xA;  # build node-20.0.0 with node-build and link it into rtx&#xA;  $ node-build 20.0.0 ~/.nodes/20.0.0&#xA;  $ rtx link node@20.0.0 ~/.nodes/20.0.0&#xA;&#xA;  # have rtx use the python version provided by Homebrew&#xA;  $ brew install node&#xA;  $ rtx link node@brew $(brew --prefix node)&#xA;  $ rtx use node@brew&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx ls [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;List installed and/or currently selected tool versions&#xA;&#xA;Usage: ls [OPTIONS] [PLUGIN]...&#xA;&#xA;Arguments:&#xA;  [PLUGIN]...&#xA;          Only show tool versions from [PLUGIN]&#xA;&#xA;Options:&#xA;  -c, --current&#xA;          Only show tool versions currently specified in a .tool-versions/.rtx.toml&#xA;&#xA;  -g, --global&#xA;          Only show tool versions currently specified in a the global .tool-versions/.rtx.toml&#xA;&#xA;  -i, --installed&#xA;          Only show tool versions that are installed Hides missing ones defined in .tool-versions/.rtx.toml but not yet installed&#xA;&#xA;  -J, --json&#xA;          Output in json format&#xA;&#xA;  -m, --missing&#xA;          Display missing tool versions&#xA;&#xA;      --prefix &amp;lt;PREFIX&amp;gt;&#xA;          Display versions matching this prefix&#xA;&#xA;      --no-header&#xA;          Don&#39;t display headers&#xA;&#xA;Examples:&#xA;  $ rtx ls&#xA;  node    20.0.0 ~/src/myapp/.tool-versions latest&#xA;  python  3.11.0 ~/.tool-versions           3.10&#xA;  python  3.10.0&#xA;&#xA;  $ rtx ls --current&#xA;  node    20.0.0 ~/src/myapp/.tool-versions 20&#xA;  python  3.11.0 ~/.tool-versions           3.11.0&#xA;&#xA;  $ rtx ls --json&#xA;  {&#xA;    &#34;node&#34;: [&#xA;      {&#xA;        &#34;version&#34;: &#34;20.0.0&#34;,&#xA;        &#34;install_path&#34;: &#34;/Users/jdx/.rtx/installs/node/20.0.0&#34;,&#xA;        &#34;source&#34;: {&#xA;          &#34;type&#34;: &#34;.rtx.toml&#34;,&#xA;          &#34;path&#34;: &#34;/Users/jdx/.rtx.toml&#34;&#xA;        }&#xA;      }&#xA;    ],&#xA;    &#34;python&#34;: [...]&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx ls-remote [OPTIONS] [TOOL@VERSION] [PREFIX]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;List runtime versions available for install&#xA;&#xA;note that the results are cached for 24 hours&#xA;run `rtx cache clean` to clear the cache and get fresh results&#xA;&#xA;Usage: ls-remote [OPTIONS] [TOOL@VERSION] [PREFIX]&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]&#xA;          Plugin to get versions for&#xA;&#xA;  [PREFIX]&#xA;          The version prefix to use when querying the latest version&#xA;          same as the first argument after the &#34;@&#34;&#xA;&#xA;Options:&#xA;      --all&#xA;          Show all installed plugins and versions&#xA;&#xA;Examples:&#xA;  $ rtx ls-remote node&#xA;  18.0.0&#xA;  20.0.0&#xA;&#xA;  $ rtx ls-remote node@20&#xA;  20.0.0&#xA;  20.1.0&#xA;&#xA;  $ rtx ls-remote node 20&#xA;  20.0.0&#xA;  20.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx outdated [TOOL@VERSION]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Shows outdated tool versions&#xA;&#xA;Usage: outdated [TOOL@VERSION]...&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to show outdated versions for&#xA;          e.g.: node@20 python@3.10&#xA;          If not specified, all tools in global and local configs will be shown&#xA;&#xA;Examples:&#xA;  $ rtx outdated&#xA;  Plugin  Requested  Current  Latest&#xA;  python  3.11       3.11.0   3.11.1&#xA;  node    20         20.0.0   20.1.0&#xA;&#xA;  $ rtx outdated node&#xA;  Plugin  Requested  Current  Latest&#xA;  node    20         20.0.0   20.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins install [OPTIONS] [NEW_PLUGIN] [GIT_URL]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Install a plugin&#xA;&#xA;note that rtx automatically can install plugins when you install a tool&#xA;e.g.: `rtx install node@20` will autoinstall the node plugin&#xA;&#xA;This behavior can be modified in ~/.config/rtx/config.toml&#xA;&#xA;Usage: plugins install [OPTIONS] [NEW_PLUGIN] [GIT_URL]&#xA;&#xA;Arguments:&#xA;  [NEW_PLUGIN]&#xA;          The name of the plugin to install&#xA;          e.g.: node, ruby&#xA;          Can specify multiple plugins: `rtx plugins install node ruby python`&#xA;&#xA;  [GIT_URL]&#xA;          The git url of the plugin&#xA;&#xA;Options:&#xA;  -f, --force&#xA;          Reinstall even if plugin exists&#xA;&#xA;  -a, --all&#xA;          Install all missing plugins&#xA;          This will only install plugins that have matching shorthands.&#xA;          i.e.: they don&#39;t need the full git repo url&#xA;&#xA;  -v, --verbose...&#xA;          Show installation output&#xA;&#xA;Examples:&#xA;  # install the node via shorthand&#xA;  $ rtx plugins install node&#xA;&#xA;  # install the node plugin using a specific git url&#xA;  $ rtx plugins install node https://github.com/rtx-plugins/rtx-nodejs.git&#xA;&#xA;  # install the node plugin using the git url only&#xA;  # (node is inferred from the url)&#xA;  $ rtx plugins install https://github.com/rtx-plugins/rtx-nodejs.git&#xA;&#xA;  # install the node plugin using a specific ref&#xA;  $ rtx plugins install node https://github.com/rtx-plugins/rtx-nodejs.git#v1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins link [OPTIONS] &amp;lt;NAME&amp;gt; [PATH]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Symlinks a plugin into rtx&#xA;&#xA;This is used for developing a plugin.&#xA;&#xA;Usage: plugins link [OPTIONS] &amp;lt;NAME&amp;gt; [PATH]&#xA;&#xA;Arguments:&#xA;  &amp;lt;NAME&amp;gt;&#xA;          The name of the plugin&#xA;          e.g.: node, ruby&#xA;&#xA;  [PATH]&#xA;          The local path to the plugin&#xA;          e.g.: ./rtx-node&#xA;&#xA;Options:&#xA;  -f, --force&#xA;          Overwrite existing plugin&#xA;&#xA;Examples:&#xA;  # essentially just `ln -s ./rtx-node ~/.local/share/rtx/plugins/node`&#xA;  $ rtx plugins link node ./rtx-node&#xA;&#xA;  # infer plugin name as &#34;node&#34;&#xA;  $ rtx plugins link ./rtx-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins ls [OPTIONS]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;List installed plugins&#xA;&#xA;Can also show remotely available plugins to install.&#xA;&#xA;Usage: plugins ls [OPTIONS]&#xA;&#xA;Options:&#xA;  -c, --core&#xA;          The built-in plugins only&#xA;          Normally these are not shown&#xA;&#xA;      --user&#xA;          List installed plugins&#xA;&#xA;          This is the default behavior but can be used with --core&#xA;          to show core and user plugins&#xA;&#xA;  -u, --urls&#xA;          Show the git url for each plugin&#xA;          e.g.: https://github.com/asdf-vm/asdf-node.git&#xA;&#xA;      --refs&#xA;          Show the git refs for each plugin&#xA;          e.g.: main 1234abc&#xA;&#xA;Examples:&#xA;  $ rtx plugins ls&#xA;  node&#xA;  ruby&#xA;&#xA;  $ rtx plugins ls --urls&#xA;  node                        https://github.com/asdf-vm/asdf-node.git&#xA;  ruby                          https://github.com/asdf-vm/asdf-ruby.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins ls-remote [OPTIONS]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;List all available remote plugins&#xA;&#xA;The full list is here: https://github.com/jdx/rtx/blob/main/src/default_shorthands.rs&#xA;&#xA;Examples:&#xA;  $ rtx plugins ls-remote&#xA;&#xA;&#xA;Usage: plugins ls-remote [OPTIONS]&#xA;&#xA;Options:&#xA;  -u, --urls&#xA;          Show the git url for each plugin e.g.: https://github.com/rtx-plugins/rtx-nodejs.git&#xA;&#xA;      --only-names&#xA;          Only show the name of each plugin by default it will show a &#34;*&#34; next to installed plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins uninstall [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Removes a plugin&#xA;&#xA;Usage: plugins uninstall [OPTIONS] [PLUGIN]...&#xA;&#xA;Arguments:&#xA;  [PLUGIN]...&#xA;          Plugin(s) to remove&#xA;&#xA;Options:&#xA;  -p, --purge&#xA;          Also remove the plugin&#39;s installs, downloads, and cache&#xA;&#xA;  -a, --all&#xA;          Remove all plugins&#xA;&#xA;Examples:&#xA;  $ rtx uninstall node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx plugins update [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Updates a plugin to the latest version&#xA;&#xA;note: this updates the plugin itself, not the runtime versions&#xA;&#xA;Usage: plugins update [OPTIONS] [PLUGIN]...&#xA;&#xA;Arguments:&#xA;  [PLUGIN]...&#xA;          Plugin(s) to update&#xA;&#xA;Options:&#xA;  -j, --jobs &amp;lt;JOBS&amp;gt;&#xA;          Number of jobs to run in parallel&#xA;          Default: 4&#xA;&#xA;Examples:&#xA;  $ rtx plugins update            # update all plugins&#xA;  $ rtx plugins update node       # update only node&#xA;  $ rtx plugins update node#beta  # specify a ref&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx prune [OPTIONS] [PLUGIN]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Delete unused versions of tools&#xA;&#xA;rtx tracks which config files have been used in ~/.local/share/rtx/tracked_config_files&#xA;Versions which are no longer the latest specified in any of those configs are deleted.&#xA;Versions installed only with environment variables (`RTX_&amp;lt;PLUGIN&amp;gt;_VERSION`) will be deleted,&#xA;as will versions only referenced on the command line (`rtx exec &amp;lt;PLUGIN&amp;gt;@&amp;lt;VERSION&amp;gt;`).&#xA;&#xA;Usage: prune [OPTIONS] [PLUGIN]...&#xA;&#xA;Arguments:&#xA;  [PLUGIN]...&#xA;          Prune only versions from these plugins&#xA;&#xA;Options:&#xA;  -n, --dry-run&#xA;          Do not actually delete anything&#xA;&#xA;Examples:&#xA;  $ rtx prune --dry-run&#xA;  rm -rf ~/.local/share/rtx/versions/node/20.0.0&#xA;  rm -rf ~/.local/share/rtx/versions/node/20.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx reshim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rebuilds the shim farm&#xA;&#xA;This creates new shims in ~/.local/share/rtx/shims for CLIs that have been added.&#xA;rtx will try to do this automatically for commands like `npm i -g` but there are&#xA;other ways to install things (like using yarn or pnpm for node) that rtx does&#xA;not know about and so it will be necessary to call this explicitly.&#xA;&#xA;If you think rtx should automatically call this for a particular command, please&#xA;open an issue on the rtx repo. You can also setup a shell function to reshim&#xA;automatically (it&#39;s really fast so you don&#39;t need to worry about overhead):&#xA;&#xA;npm() {&#xA;  command npm &#34;$@&#34;&#xA;  rtx reshim&#xA;}&#xA;&#xA;Usage: reshim&#xA;&#xA;Examples:&#xA;  $ rtx reshim&#xA;  $ ~/.local/share/rtx/shims/node -v&#xA;  v20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx self-update [OPTIONS] [VERSION]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Updates rtx itself&#xA;&#xA;Uses the GitHub Releases API to find the latest release and binary&#xA;By default, this will also update any installed plugins&#xA;&#xA;Usage: self-update [OPTIONS] [VERSION]&#xA;&#xA;Arguments:&#xA;  [VERSION]&#xA;          Update to a specific version&#xA;&#xA;Options:&#xA;  -f, --force&#xA;          Update even if already up to date&#xA;&#xA;      --no-plugins&#xA;          Disable auto-updating plugins&#xA;&#xA;  -y, --yes&#xA;          Skip confirmation prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings get &amp;lt;SETTING&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Show a current setting&#xA;&#xA;This is the contents of a single entry in ~/.config/rtx/config.toml&#xA;&#xA;Note that aliases are also stored in this file&#xA;but managed separately with `rtx aliases get`&#xA;&#xA;Usage: settings get &amp;lt;SETTING&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;SETTING&amp;gt;&#xA;          The setting to show&#xA;&#xA;Examples:&#xA;  $ rtx settings get legacy_version_file&#xA;  true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings ls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Show current settings&#xA;&#xA;This is the contents of ~/.config/rtx/config.toml&#xA;&#xA;Note that aliases are also stored in this file&#xA;but managed separately with `rtx aliases`&#xA;&#xA;Usage: settings ls&#xA;&#xA;Examples:&#xA;  $ rtx settings&#xA;  legacy_version_file = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings set &amp;lt;SETTING&amp;gt; &amp;lt;VALUE&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Add/update a setting&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: settings set &amp;lt;SETTING&amp;gt; &amp;lt;VALUE&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;SETTING&amp;gt;&#xA;          The setting to set&#xA;&#xA;  &amp;lt;VALUE&amp;gt;&#xA;          The value to set&#xA;&#xA;Examples:&#xA;  $ rtx settings set legacy_version_file true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx settings unset &amp;lt;SETTING&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Clears a setting&#xA;&#xA;This modifies the contents of ~/.config/rtx/config.toml&#xA;&#xA;Usage: settings unset &amp;lt;SETTING&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;SETTING&amp;gt;&#xA;          The setting to remove&#xA;&#xA;Examples:&#xA;  $ rtx settings unset legacy_version_file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx shell [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Sets a tool version for the current shell session&#xA;&#xA;Only works in a session where rtx is already activated.&#xA;&#xA;Usage: shell [OPTIONS] [TOOL@VERSION]...&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to use&#xA;&#xA;Options:&#xA;  -j, --jobs &amp;lt;JOBS&amp;gt;&#xA;          Number of jobs to run in parallel&#xA;          [default: 4]&#xA;&#xA;          [env: RTX_JOBS=]&#xA;&#xA;      --raw&#xA;          Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1&#xA;&#xA;  -u, --unset&#xA;          Removes a previously set version&#xA;&#xA;Examples:&#xA;  $ rtx shell node@20&#xA;  $ node -v&#xA;  v20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx sync node &amp;lt;--brew|--nvm|--nodenv&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Symlinks all tool versions from an external tool into rtx&#xA;&#xA;For example, use this to import all Homebrew node installs into rtx&#xA;&#xA;Usage: sync node &amp;lt;--brew|--nvm|--nodenv&amp;gt;&#xA;&#xA;Options:&#xA;      --brew&#xA;          Get tool versions from Homebrew&#xA;&#xA;      --nvm&#xA;          Get tool versions from nvm&#xA;&#xA;      --nodenv&#xA;          Get tool versions from nodenv&#xA;&#xA;Examples:&#xA;  $ brew install node@18 node@20&#xA;  $ rtx sync node --brew&#xA;  $ rtx use -g node@18 - uses Homebrew-provided node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx sync python --pyenv&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Symlinks all tool versions from an external tool into rtx&#xA;&#xA;For example, use this to import all pyenv installs into rtx&#xA;&#xA;Usage: sync python --pyenv&#xA;&#xA;Options:&#xA;      --pyenv&#xA;          Get tool versions from pyenv&#xA;&#xA;Examples:&#xA;  $ pyenv install 3.11.0&#xA;  $ rtx sync python --pyenv&#xA;  $ rtx use -g python@3.11.0 - uses pyenv-provided python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx trust [OPTIONS] [CONFIG_FILE]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Marks a config file as trusted&#xA;&#xA;This means rtx will parse the file with potentially dangerous&#xA;features enabled.&#xA;&#xA;This includes:&#xA;- environment variables&#xA;- templates&#xA;- `path:` plugin versions&#xA;&#xA;Usage: trust [OPTIONS] [CONFIG_FILE]&#xA;&#xA;Arguments:&#xA;  [CONFIG_FILE]&#xA;          The config file to trust&#xA;&#xA;Options:&#xA;      --untrust&#xA;          No longer trust this config&#xA;&#xA;Examples:&#xA;  # trusts ~/some_dir/.rtx.toml&#xA;  $ rtx trust ~/some_dir/.rtx.toml&#xA;&#xA;  # trusts .rtx.toml in the current or parent directory&#xA;  $ rtx trust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx uninstall [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Removes runtime versions&#xA;&#xA;Usage: uninstall [OPTIONS] [TOOL@VERSION]...&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to remove&#xA;&#xA;Options:&#xA;  -a, --all&#xA;          Delete all installed versions&#xA;&#xA;  -n, --dry-run&#xA;          Do not actually delete anything&#xA;&#xA;Examples:&#xA;  $ rtx uninstall node@18.0.0 # will uninstall specific version&#xA;  $ rtx uninstall node        # will uninstall current node version&#xA;  $ rtx uninstall --all node@18.0.0 # will uninstall all node versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx upgrade [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Upgrades outdated tool versions&#xA;&#xA;Usage: upgrade [OPTIONS] [TOOL@VERSION]...&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to upgrade&#xA;          e.g.: node@20 python@3.10&#xA;          If not specified, all current tools will be upgraded&#xA;&#xA;Options:&#xA;  -n, --dry-run&#xA;          Just print what would be done, don&#39;t actually do it&#xA;&#xA;  -j, --jobs &amp;lt;JOBS&amp;gt;&#xA;          Number of jobs to run in parallel&#xA;          [default: 4]&#xA;&#xA;          [env: RTX_JOBS=]&#xA;&#xA;      --raw&#xA;          Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx use [OPTIONS] [TOOL@VERSION]...&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Change the active version of a tool locally or globally.&#xA;&#xA;This will install the tool if it is not already installed.&#xA;By default, this will use an `.rtx.toml` file in the current directory.&#xA;Use the --global flag to use the global config file instead.&#xA;This replaces asdf&#39;s `local` and `global` commands, however those are still available in rtx.&#xA;&#xA;Usage: use [OPTIONS] [TOOL@VERSION]...&#xA;&#xA;Arguments:&#xA;  [TOOL@VERSION]...&#xA;          Tool(s) to add to config file&#xA;          e.g.: node@20&#xA;          If no version is specified, it will default to @latest&#xA;&#xA;Options:&#xA;  -f, --force&#xA;          Force reinstall even if already installed&#xA;&#xA;      --fuzzy&#xA;          Save fuzzy version to config file&#xA;          e.g.: `rtx use --fuzzy node@20` will save 20 as the version&#xA;          this is the default behavior unless RTX_ASDF_COMPAT=1&#xA;&#xA;  -g, --global&#xA;          Use the global config file (~/.config/rtx/config.toml) instead of the local one&#xA;&#xA;  -e, --env &amp;lt;ENV&amp;gt;&#xA;          Modify an environment-specific config file like .rtx.&amp;lt;env&amp;gt;.toml&#xA;&#xA;  -j, --jobs &amp;lt;JOBS&amp;gt;&#xA;          Number of jobs to run in parallel&#xA;          [default: 4]&#xA;&#xA;          [env: RTX_JOBS=]&#xA;&#xA;      --raw&#xA;          Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1&#xA;&#xA;      --remove &amp;lt;TOOL&amp;gt;&#xA;          Remove the tool(s) from config file&#xA;&#xA;  -p, --path &amp;lt;PATH&amp;gt;&#xA;          Specify a path to a config file or directory If a directory is specified, it will look for .rtx.toml (default) or .tool-versions&#xA;&#xA;      --pin&#xA;          Save exact version to config file&#xA;          e.g.: `rtx use --pin node@20` will save 20.0.0 as the version&#xA;&#xA;          [env: RTX_ASDF_COMPAT=]&#xA;&#xA;Examples:&#xA;  # set the current version of node to 20.x in .rtx.toml of current directory&#xA;  # will write the fuzzy version (e.g.: 20)&#xA;  $ rtx use node@20&#xA;&#xA;  # set the current version of node to 20.x in ~/.config/rtx/config.toml&#xA;  # will write the precise version (e.g.: 20.0.0)&#xA;  $ rtx use -g --pin node@20&#xA;&#xA;  # sets .rtx.local.toml (which is intended not to be committed to a project)&#xA;  $ rtx use --env local node@20&#xA;&#xA;  # sets .rtx.staging.toml (which is used if RTX_ENV=staging)&#xA;  $ rtx use --env staging node@20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx version&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Show rtx version&#xA;&#xA;Usage: version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx where &amp;lt;TOOL@VERSION&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Display the installation path for a runtime&#xA;&#xA;Must be installed.&#xA;&#xA;Usage: where &amp;lt;TOOL@VERSION&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;TOOL@VERSION&amp;gt;&#xA;          Tool(s) to look up&#xA;          e.g.: ruby@3&#xA;          if &#34;@&amp;lt;PREFIX&amp;gt;&#34; is specified, it will show the latest installed version&#xA;          that matches the prefix&#xA;          otherwise, it will show the current, active installed version&#xA;&#xA;Examples:&#xA;  # Show the latest installed version of node&#xA;  # If it is is not installed, errors&#xA;  $ rtx where node@20&#xA;  /home/jdx/.local/share/rtx/installs/node/20.0.0&#xA;&#xA;  # Show the current, active install directory of node&#xA;  # Errors if node is not referenced in any .tool-version file&#xA;  $ rtx where node&#xA;  /home/jdx/.local/share/rtx/installs/node/20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rtx which [OPTIONS] &amp;lt;BIN_NAME&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Shows the path that a bin name points to&#xA;&#xA;Usage: which [OPTIONS] &amp;lt;BIN_NAME&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;BIN_NAME&amp;gt;&#xA;          The bin name to look up&#xA;&#xA;Options:&#xA;      --plugin&#xA;          Show the plugin name instead of the path&#xA;&#xA;      --version&#xA;          Show the version instead of the path&#xA;&#xA;  -t, --tool &amp;lt;TOOL@VERSION&amp;gt;&#xA;          Use a specific tool@version&#xA;          e.g.: `rtx which npm --tool=node@20`&#xA;&#xA;Examples:&#xA;  $ rtx which node&#xA;  /home/username/.local/share/rtx/installs/node/20.0.0/bin/node&#xA;  $ rtx which node --plugin&#xA;  node&#xA;  $ rtx which node --version&#xA;  20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- RTX:COMMANDS --&gt;</summary>
  </entry>
  <entry>
    <title>openobserve/openobserve</title>
    <updated>2023-12-17T02:01:59Z</updated>
    <id>tag:github.com,2023-12-17:/openobserve/openobserve</id>
    <link href="https://github.com/openobserve/openobserve" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ 10x easier, üöÄ 140x lower storage cost, üöÄ high performance, üöÄ petabyte scale - Elasticsearch/Splunk/Datadog alternative for üöÄ (logs, metrics, traces, RUM, Error tracking, Session replay).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;üöÄ 10x easier, üöÄ 140x lower storage cost, üöÄ high performance, üöÄ petabyte scale - Elasticsearch/Splunk/Datadog alternative for üöÄ (logs, metrics, traces).&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://cloud.openobserve.ai&#34;&gt;OpenObserve Cloud&lt;/a&gt; | &lt;a href=&#34;https://openobserve.ai/docs/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://join.slack.com/t/zincobserve/shared_invite/zt-11r96hv2b-UwxUILuSJ1duzl_6mhJwVg&#34;&gt;Slack&lt;/a&gt; | &lt;a href=&#34;https://openobserve.ai&#34;&gt;Website&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;OpenObserve (O2 for short)&lt;/h1&gt; &#xA;&lt;p&gt;OpenObserve is a cloud native observability platform built specifically for logs, metrics, traces, analytics, RUM (Real User Monitoring - Performance, Errors, Session Replay) designed to work at petabyte scale.&lt;/p&gt; &#xA;&lt;p&gt;It is very simple and easy to operate as opposed to Elasticsearch which requires a couple dozen knobs to understand and tune which you can get up and running in under 2 minutes.&lt;/p&gt; &#xA;&lt;p&gt;It is a drop-in replacement for Elasticsearch if you are just ingesting data using APIs and searching using kibana (Kibana is not supported nor required with OpenObserve. OpenObserve provides its own UI which does not require separate installation unlike kibana).&lt;/p&gt; &#xA;&lt;p&gt;You can reduce your log storage costs by ~140x compared to Elasticsearch by using OpenObserve. Below are the results when we pushed logs from our production kubernetes cluster to Elasticsearch and OpenObserve using fluentbit. OpenObserve stored data in Amazon s3 and Elasticsearch stored data on Amazon EBS volumes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/zo_vs_es.png&#34; alt=&#34;OpenObserve Vs ElasticSearch&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openobserve/openobserve/assets/4242188/77c71e8c-23f6-4123-b42a-7113b464f7a6&#34;&gt;https://github.com/openobserve/openobserve/assets/4242188/77c71e8c-23f6-4123-b42a-7113b464f7a6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;p&gt;Some of the features are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Logs, Metrics, Traces&lt;/li&gt; &#xA; &lt;li&gt;OpenTelemetry support for logs, metrics traces (OTLP)&lt;/li&gt; &#xA; &lt;li&gt;RUM (Real user Monitoring) - Performance, Errors, Session Replay&lt;/li&gt; &#xA; &lt;li&gt;Alerts, Dashboards (14 different chart types (time series, bar, geo maps, heatmap, scatter, table, pie, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Ingest and Query functions to aid advanced capabilities like enrichment, redaction, log reduction, compliance, etc. e.g. you can use ingest functions to redact sensitive data like email IDs, AWS keys, etc. from logs before the get stored in logs.&lt;/li&gt; &#xA; &lt;li&gt;Advanced Embedded GUI&lt;/li&gt; &#xA; &lt;li&gt;SQL for Logs and Traces. SQL and PromQL for metrics. No need to learn yet another query language.&lt;/li&gt; &#xA; &lt;li&gt;Single binary for installation &amp;amp; running. Binaries available under &lt;a href=&#34;https://github.com/openobserve/openobserve/releases&#34;&gt;releases&lt;/a&gt; for multiple platforms.&lt;/li&gt; &#xA; &lt;li&gt;Storage in local Disk, s3, MinIO, GCS, Azure Blob Storage&lt;/li&gt; &#xA; &lt;li&gt;High availability and clustering&lt;/li&gt; &#xA; &lt;li&gt;Drop in replacement for elasticsearch&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Schema&lt;/li&gt; &#xA; &lt;li&gt;Out of the box authentication&lt;/li&gt; &#xA; &lt;li&gt;Vastly easier to operate&lt;/li&gt; &#xA; &lt;li&gt;Seamless upgrades&lt;/li&gt; &#xA; &lt;li&gt;UI in 11 supported languages (English, Turkish, German, French, Spanish, Portuguese, Chinese, Japanese, Korean, Italian, Dutch)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For full list of features check &lt;a href=&#34;https://openobserve.ai/docs/#project-status-features-and-roadmap&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install OpenObserve in under 2 minutes by following the &lt;a href=&#34;https://openobserve.ai/docs/quickstart/&#34;&gt;quickstart&lt;/a&gt; documentation&lt;/p&gt; &#xA;&lt;h1&gt;OpenObserve Cloud&lt;/h1&gt; &#xA;&lt;p&gt;You can also try OpenObserve without installing it in under 2 minutes by trying out OpenObserve Cloud at &lt;a href=&#34;https://cloud.openobserve.ai&#34;&gt;https://cloud.openobserve.ai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h2&gt;Home&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/zo_home.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Logs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/logs.webp&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Traces (Opentelemetry supported)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/traces.webp&#34; alt=&#34;Traces using Opentelemetry&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Visualization and dashboard&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/dashboard.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alerts&lt;/h2&gt; &#xA;&lt;h3&gt;Real time alerts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/alert_realtime.jpg&#34; alt=&#34;Alerts Realtime&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Scheduled alerts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/alert_scheduled.jpg&#34; alt=&#34;Alerts Scheduled&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Streams&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/zo_streams.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ingestion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/ingestion.webp&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;How to develop and contribute to OpenObserve&lt;/h4&gt; &lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; . Also check the &lt;a href=&#34;https://github.com/orgs/openobserve/projects/7&#34;&gt;roadmap items&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Join our Slack Channel&lt;/h4&gt; &lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/zincobserve/shared_invite/zt-11r96hv2b-UwxUILuSJ1duzl_6mhJwVg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/slack.png&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Easiest way to get support is to join the &lt;a href=&#34;https://join.slack.com/t/zincobserve/shared_invite/zt-11r96hv2b-UwxUILuSJ1duzl_6mhJwVg&#34;&gt;Slack channel&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Join our weChat Group&lt;/h4&gt; &lt;img src=&#34;https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/wechat_qr.jpg&#34; width=&#34;300&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>