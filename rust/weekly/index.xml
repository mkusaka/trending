<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T02:00:27Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>godot-rust/gdext</title>
    <updated>2023-09-24T02:00:27Z</updated>
    <id>tag:github.com,2023-09-24:/godot-rust/gdext</id>
    <link href="https://github.com/godot-rust/gdext" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust bindings for Godot 4&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/godot-rust/gdext/master/assets/gdext-ferris.png&#34; alt=&#34;logo.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Rust bindings for Godot 4&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://godot-rust.github.io&#34;&gt;Website&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://godot-rust.github.io/docs/gdext&#34;&gt;API Docs&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&#34;https://discord.gg/aKUCJ8rJsc&#34;&gt;Discord&lt;/a&gt; | &lt;a href=&#34;https://mastodon.gamedev.place/@GodotRust&#34;&gt;Mastodon&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/GodotRust&#34;&gt;Twitter&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;gdext&lt;/strong&gt; is a library to bind the &lt;strong&gt;Rust&lt;/strong&gt; language to &lt;strong&gt;Godot 4&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godotengine.org&#34;&gt;Godot&lt;/a&gt; is an open-source game engine, whose version 4 has brought large-scale improvements.&lt;br&gt; Its &lt;em&gt;GDExtension&lt;/em&gt; API allows integrating third-party languages and libraries.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are looking for a Rust binding for GDNative (Godot 3), check out &lt;a href=&#34;https://github.com/godot-rust/gdnative&#34;&gt;&lt;code&gt;gdnative&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;The Rust binding is an alternative to GDScript, with a focus on type safety, scalability and performance.&lt;/p&gt; &#xA;&lt;p&gt;The primary goal of gdext is to provide a &lt;em&gt;&lt;strong&gt;pragmatic Rust API&lt;/strong&gt;&lt;/em&gt; for game developers.&lt;/p&gt; &#xA;&lt;p&gt;Recurring workflows should be simple and require minimal boilerplate. APIs are designed to be safe and idiomatic Rust wherever possible. Due to interacting with Godot as a C++ engine, we sometimes follow unconventional approaches to provide a good user experience.&lt;/p&gt; &#xA;&lt;h2&gt;Development status&lt;/h2&gt; &#xA;&lt;p&gt;The gdext library has evolved a lot during 2023 and is now in a usable state for smaller projects. However, it is still in an early stage and there are certain things to keep in mind.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; The public API introduces breaking changes from time to time. Most of these are motivated by new features and improved ergonomics for existing ones. See also &lt;a href=&#34;https://godot-rust.github.io/book/gdext/advanced/compatibility.html#rust-api-stability&#34;&gt;API stability&lt;/a&gt; in the book.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt; While most Godot features are available, some less commonly used ones are missing. See &lt;a href=&#34;https://github.com/godot-rust/gdext/issues/24&#34;&gt;#24&lt;/a&gt; for an up-to-date overview.&lt;br&gt; At this point, there is &lt;strong&gt;no&lt;/strong&gt; support for Android, iOS or WASM. Contributions are very welcome!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bugs:&lt;/strong&gt; Most undefined behavior related to the FFI layer has been ironed out, but there may still be occasional safety issues. Apart from that, new additions to the library are typically not feature-complete from the start, but become more robust due to feedback and testing over time. To counter bugs, we have an elaborate CI suite including clippy, unit tests, engine integration tests and memory sanitizers.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To dive into Rust development with gdext, check out &lt;a href=&#34;https://godot-rust.github.io/book/gdext&#34;&gt;the godot-rust book&lt;/a&gt;. The book is still under construction, but already includes a tutorial to set up a simple example.&lt;/p&gt; &#xA;&lt;p&gt;To consult the API reference, have a look at the online &lt;a href=&#34;https://godot-rust.github.io/docs/gdext&#34;&gt;API Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, we provide a small example game in the &lt;a href=&#34;https://raw.githubusercontent.com/godot-rust/gdext/master/examples/dodge-the-creeps&#34;&gt;&lt;code&gt;examples/dodge-the-creeps&lt;/code&gt; directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need help, join our &lt;a href=&#34;https://discord.gg/aKUCJ8rJsc&#34;&gt;Discord&lt;/a&gt; server and ask in the &lt;code&gt;#help-gdext&lt;/code&gt; channel!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;We use the &lt;a href=&#34;https://www.mozilla.org/en-US/MPL&#34;&gt;Mozilla Public License 2.0&lt;/a&gt;. MPL tries to find a balance between permissive (MIT, Apache, Zlib) and copyleft licenses (GPL, LGPL).&lt;/p&gt; &#xA;&lt;p&gt;The license provides a lot of freedom: you can use the library commercially and keep your own code closed-source, i.e. game development is not restricted. The main condition is that if you change gdext &lt;em&gt;itself&lt;/em&gt;, you need to make those changes available (and only those, no surrounding code).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome! If you want to help out, see &lt;a href=&#34;https://raw.githubusercontent.com/godot-rust/gdext/master/Contributing.md&#34;&gt;&lt;code&gt;Contributing.md&lt;/code&gt;&lt;/a&gt; for some pointers on getting started.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CloudCannon/pagefind</title>
    <updated>2023-09-24T02:00:27Z</updated>
    <id>tag:github.com,2023-09-24:/CloudCannon/pagefind</id>
    <link href="https://github.com/CloudCannon/pagefind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static low-bandwidth search at scale&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pagefind&lt;/h1&gt; &#xA;&lt;p&gt;Pagefind is a fully static search library that aims to perform well on large sites, while using as little of your users‚Äô bandwidth as possible, and without hosting any infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;The full documentation on using Pagefind can be found at &lt;a href=&#34;https://pagefind.app/&#34;&gt;https://pagefind.app/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SeaQL/sea-orm</title>
    <updated>2023-09-24T02:00:27Z</updated>
    <id>tag:github.com,2023-09-24:/SeaQL/sea-orm</id>
    <link href="https://github.com/SeaQL/sea-orm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üêö An async &amp; dynamic ORM for Rust&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://www.sea-ql.org/SeaORM/img/SeaORM banner.png&#34;&gt; &#xA; &lt;h1&gt;SeaORM&lt;/h1&gt; &#xA; &lt;h3&gt;üêö An async &amp;amp; dynamic ORM for Rust&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://crates.io/crates/sea-orm&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/sea-orm.svg?sanitize=true&#34; alt=&#34;crate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/sea-orm&#34;&gt;&lt;img src=&#34;https://docs.rs/sea-orm/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;SeaORM&lt;/h1&gt; &#xA;&lt;h4&gt;SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.&lt;/h4&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/stargazers/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&amp;amp;label=Star&amp;amp;maxAge=1&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; If you like what we do, consider starring, sharing and contributing!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sea-ql.org/SeaORM&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sea-ql.org/sea-orm-tutorial&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sea-ql.org/sea-orm-cookbook&#34;&gt;Cookbook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/uCPdDXzbdv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/873880840487206962?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; Join our Discord server to chat with others in the SeaQL community!&lt;/p&gt; &#xA;&lt;p&gt;Please help us with maintaining SeaORM by completing the &lt;a href=&#34;https://sea-ql.org/community-survey&#34;&gt;SeaQL Community Survey 2023&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Integration examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example&#34;&gt;Actix v4 Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/actix3_example&#34;&gt;Actix v3 Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example&#34;&gt;Axum Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example&#34;&gt;GraphQL Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example&#34;&gt;jsonrpsee Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example&#34;&gt;Poem Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example&#34;&gt;Rocket Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example&#34;&gt;Salvo Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example&#34;&gt;Tonic Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example&#34;&gt;Seaography Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Async&lt;/p&gt; &lt;p&gt;Relying on &lt;a href=&#34;https://github.com/launchbadge/sqlx&#34;&gt;SQLx&lt;/a&gt;, SeaORM is a new library with async support from day 1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dynamic&lt;/p&gt; &lt;p&gt;Built upon &lt;a href=&#34;https://github.com/SeaQL/sea-query&#34;&gt;SeaQuery&lt;/a&gt;, SeaORM allows you to build complex dynamic queries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Testable&lt;/p&gt; &lt;p&gt;Use mock connections and/or SQLite to write tests for your application logic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Service Oriented&lt;/p&gt; &lt;p&gt;Quickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;A quick taste of SeaORM&lt;/h2&gt; &#xA;&lt;h3&gt;Entity&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use sea_orm::entity::prelude::*;&#xA;&#xA;#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]&#xA;#[sea_orm(table_name = &#34;cake&#34;)]&#xA;pub struct Model {&#xA;    #[sea_orm(primary_key)]&#xA;    pub id: i32,&#xA;    pub name: String,&#xA;}&#xA;&#xA;#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]&#xA;pub enum Relation {&#xA;    #[sea_orm(has_many = &#34;super::fruit::Entity&#34;)]&#xA;    Fruit,&#xA;}&#xA;&#xA;impl Related&amp;lt;super::fruit::Entity&amp;gt; for Entity {&#xA;    fn to() -&amp;gt; RelationDef {&#xA;        Relation::Fruit.def()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// find all models&#xA;let cakes: Vec&amp;lt;cake::Model&amp;gt; = Cake::find().all(db).await?;&#xA;&#xA;// find and filter&#xA;let chocolate: Vec&amp;lt;cake::Model&amp;gt; = Cake::find()&#xA;    .filter(cake::Column::Name.contains(&#34;chocolate&#34;))&#xA;    .all(db)&#xA;    .await?;&#xA;&#xA;// find one model&#xA;let cheese: Option&amp;lt;cake::Model&amp;gt; = Cake::find_by_id(1).one(db).await?;&#xA;let cheese: cake::Model = cheese.unwrap();&#xA;&#xA;// find related models (lazy)&#xA;let fruits: Vec&amp;lt;fruit::Model&amp;gt; = cheese.find_related(Fruit).all(db).await?;&#xA;&#xA;// find related models (eager)&#xA;let cake_with_fruits: Vec&amp;lt;(cake::Model, Vec&amp;lt;fruit::Model&amp;gt;)&amp;gt; =&#xA;    Cake::find().find_with_related(Fruit).all(db).await?;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let apple = fruit::ActiveModel {&#xA;    name: Set(&#34;Apple&#34;.to_owned()),&#xA;    ..Default::default() // no need to set primary key&#xA;};&#xA;&#xA;let pear = fruit::ActiveModel {&#xA;    name: Set(&#34;Pear&#34;.to_owned()),&#xA;    ..Default::default()&#xA;};&#xA;&#xA;// insert one&#xA;let pear = pear.insert(db).await?;&#xA;&#xA;// insert many&#xA;Fruit::insert_many([apple, pear]).exec(db).await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use sea_orm::sea_query::{Expr, Value};&#xA;&#xA;let pear: Option&amp;lt;fruit::Model&amp;gt; = Fruit::find_by_id(1).one(db).await?;&#xA;let mut pear: fruit::ActiveModel = pear.unwrap().into();&#xA;&#xA;pear.name = Set(&#34;Sweet pear&#34;.to_owned());&#xA;&#xA;// update one&#xA;let pear: fruit::Model = pear.update(db).await?;&#xA;&#xA;// update many: UPDATE &#34;fruit&#34; SET &#34;cake_id&#34; = NULL WHERE &#34;fruit&#34;.&#34;name&#34; LIKE &#39;%Apple%&#39;&#xA;Fruit::update_many()&#xA;    .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))&#xA;    .filter(fruit::Column::Name.contains(&#34;Apple&#34;))&#xA;    .exec(db)&#xA;    .await?;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Save&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let banana = fruit::ActiveModel {&#xA;    id: NotSet,&#xA;    name: Set(&#34;Banana&#34;.to_owned()),&#xA;    ..Default::default()&#xA;};&#xA;&#xA;// create, because primary key `id` is `NotSet`&#xA;let mut banana = banana.save(db).await?;&#xA;&#xA;banana.name = Set(&#34;Banana Mongo&#34;.to_owned());&#xA;&#xA;// update, because primary key `id` is `Set`&#xA;let banana = banana.save(db).await?;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// delete one&#xA;let orange: Option&amp;lt;fruit::Model&amp;gt; = Fruit::find_by_id(1).one(db).await?;&#xA;let orange: fruit::Model = orange.unwrap();&#xA;fruit::Entity::delete(orange.into_active_model())&#xA;    .exec(db)&#xA;    .await?;&#xA;&#xA;// or simply&#xA;let orange: Option&amp;lt;fruit::Model&amp;gt; = Fruit::find_by_id(1).one(db).await?;&#xA;let orange: fruit::Model = orange.unwrap();&#xA;orange.delete(db).await?;&#xA;&#xA;// delete many: DELETE FROM &#34;fruit&#34; WHERE &#34;fruit&#34;.&#34;name&#34; LIKE &#39;Orange&#39;&#xA;fruit::Entity::delete_many()&#xA;    .filter(fruit::Column::Name.contains(&#34;Orange&#34;))&#xA;    .exec(db)&#xA;    .await?;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üß≠ Seaography: GraphQL integration (preview)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeaQL/seaography&#34;&gt;Seaography&lt;/a&gt; is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!&lt;/p&gt; &#xA;&lt;p&gt;Starting &lt;code&gt;0.12&lt;/code&gt;, &lt;code&gt;seaography&lt;/code&gt; integration is built into &lt;code&gt;sea-orm&lt;/code&gt;. While Seaography development is still in an early stage, it is especially useful in prototyping and building internal-use admin panels.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png&#34;&gt; &#xA;&lt;p&gt;Look at the &lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example&#34;&gt;Seaography Example&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/DESIGN.md&#34;&gt;Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sea-ql.org/SeaORM/docs/internal-design/architecture/&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sea-ql.org/blog/2022-07-30-engineering/&#34;&gt;Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Who&#39;s using SeaORM?&lt;/h2&gt; &#xA;&lt;p&gt;The following products are powered by SeaORM:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;br&gt;&lt;a href=&#34;https://caido.io/&#34;&gt;&lt;img src=&#34;https://www.sea-ql.org/SeaORM/img/other/caido-logo.png&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;br&gt;A lightweight web security auditing toolkit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.svix.com/&#34;&gt;&lt;img src=&#34;https://www.sea-ql.org/SeaORM/img/other/svix-logo.svg?sanitize=true&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;br&gt;The enterprise ready webhooks service&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.spyglass.fyi/&#34;&gt;&lt;img src=&#34;https://www.sea-ql.org/SeaORM/img/other/spyglass-logo.svg?sanitize=true&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;br&gt;A personal search engine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more projects, see &lt;a href=&#34;https://github.com/SeaQL/sea-orm/raw/master/COMMUNITY.md#built-with-seaorm&#34;&gt;Built with SeaORM&lt;/a&gt;. Feel free to &lt;a href=&#34;https://github.com/SeaQL/sea-orm/issues/403&#34;&gt;submit yours&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/SeaQL/sea-orm/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/SeaQL/sea-orm/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;p&gt;SeaORM is a community driven project. We welcome you to participate, contribute and together help build Rust&#39;s future.&lt;/p&gt; &#xA;&lt;p&gt;A big shout out to our contributors!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SeaQL/sea-orm/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/sea-orm/contributors.svg?width=1000&amp;amp;button=false&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sea-ql.org/&#34;&gt;SeaQL.org&lt;/a&gt; is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via &lt;a href=&#34;https://github.com/sponsors/SeaQL&#34;&gt;GitHub Sponsor&lt;/a&gt; will be greatly appreciated, and goes a long way towards sustaining the organization.&lt;/p&gt; &#xA;&lt;p&gt;We invite you to participate, contribute and together help build Rust&#39;s future.&lt;/p&gt; &#xA;&lt;h2&gt;Mascot&lt;/h2&gt; &#xA;&lt;p&gt;A friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.&lt;/p&gt; &#xA;&lt;img alt=&#34;Terres&#34; src=&#34;https://www.sea-ql.org/SeaORM/img/Terres.png&#34; width=&#34;400&#34;&gt;</summary>
  </entry>
</feed>