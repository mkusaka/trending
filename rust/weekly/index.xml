<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-24T01:42:51Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>loco-rs/loco</title>
    <updated>2024-11-24T01:42:51Z</updated>
    <id>tag:github.com,2024-11-24:/loco-rs/loco</id>
    <link href="https://github.com/loco-rs/loco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚂 🦀 The one-person framework for Rust for side-projects and startups&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac&#34;&gt; &#xA; &lt;h1&gt;Welcome to Loco&lt;/h1&gt; &#xA; &lt;h3&gt; &#xA;  &lt;!-- &lt;snip id=&#34;description&#34; inject_from=&#34;yaml&#34;&gt; --&gt; 🚂 Loco is Rust on Rails. &#xA;  &lt;!--&lt;/snip&gt; --&gt; &lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://crates.io/crates/loco-rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/loco-rs.svg?sanitize=true&#34; alt=&#34;crate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/loco-rs&#34;&gt;&lt;img src=&#34;https://docs.rs/loco-rs/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/fTvyBzwKS8&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-Join-us&#34; alt=&#34;Discord channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;English · &lt;a href=&#34;https://raw.githubusercontent.com/loco-rs/loco/master/README-zh_CN.md&#34;&gt;中文&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/loco-rs/loco/master/README.fr.md&#34;&gt;Français&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/loco-rs/loco/master/README-pt_BR.md&#34;&gt;Portuguese (Brazil)&lt;/a&gt; ・ &lt;a href=&#34;https://raw.githubusercontent.com/loco-rs/loco/master/README.ja.md&#34;&gt;日本語&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/loco-rs/loco/master/README.ko.md&#34;&gt;한국어&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/loco-rs/loco/master/README.ru.md&#34;&gt;Русский&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s Loco?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Loco&lt;/code&gt; is strongly inspired by Rails. If you know Rails and Rust, you&#39;ll feel at home. If you only know Rails and new to Rust, you&#39;ll find Loco refreshing. We do not assume you know Rails.&lt;/p&gt; &#xA;&lt;p&gt;For a deeper dive into how Loco works, including detailed guides, examples, and API references, check out our &lt;a href=&#34;https://loco.rs&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features of Loco:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Convention Over Configuration:&lt;/code&gt; Similar to Ruby on Rails, Loco emphasizes simplicity and productivity by reducing the need for boilerplate code. It uses sensible defaults, allowing developers to focus on writing business logic rather than spending time on configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Rapid Development:&lt;/code&gt; Aim for high developer productivity, Loco’s design focuses on reducing boilerplate code and providing intuitive APIs, allowing developers to iterate quickly and build prototypes with minimal effort.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ORM Integration:&lt;/code&gt; Model your business with robust entities, eliminating the need to write SQL. Define relationships, validation, and custom logic directly on your entities for enhanced maintainability and scalability.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Controllers&lt;/code&gt;: Handle web requests parameters, body, validation, and render a response that is content-aware. We use Axum for the best performance, simplicity, and extensibility. Controllers also allow you to easily build middlewares, which can be used to add logic such as authentication, logging, or error handling before passing requests to the main controller actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Views:&lt;/code&gt; Loco can integrate with templating engines to generate dynamic HTML content from templates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Background Jobs:&lt;/code&gt; Perform compute or I/O intensive jobs in the background with a Redis backed queue, or with threads. Implementing a worker is as simple as implementing a perform function for the Worker trait.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Scheduler:&lt;/code&gt; Simplifies the traditional, often cumbersome crontab system, making it easier and more elegant to schedule tasks or shell scripts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Mailers:&lt;/code&gt; A mailer will deliver emails in the background using the existing loco background worker infrastructure. It will all be seamless for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Storage:&lt;/code&gt; In Loco Storage, we facilitate working with files through multiple operations. Storage can be in-memory, on disk, or use cloud services such as AWS S3, GCP, and Azure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Cache:&lt;/code&gt; Loco provides an cache layer to improve application performance by storing frequently accessed data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So see more Loco features, check out our &lt;a href=&#34;https://loco.rs/docs/getting-started/tour/&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;!-- &lt;snip id=&#34;quick-installation-command&#34; inject_from=&#34;yaml&#34; template=&#34;sh&#34;&gt; --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install loco&#xA;cargo install sea-orm-cli # Only when DB is needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &lt;/snip&gt; --&gt; &#xA;&lt;p&gt;Now you can create your new app (choose &#34;&lt;code&gt;SaaS&lt;/code&gt; app&#34;).&lt;/p&gt; &#xA;&lt;!-- &lt;snip id=&#34;loco-cli-new-from-template&#34; inject_from=&#34;yaml&#34; template=&#34;sh&#34;&gt; --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;❯ loco new&#xA;✔ ❯ App name? · myapp&#xA;✔ ❯ What would you like to build? · Saas App with client side rendering&#xA;✔ ❯ Select a DB Provider · Sqlite&#xA;✔ ❯ Select your background worker type · Async (in-process tokio async tasks)&#xA;&#xA;🚂 Loco app generated successfully in:&#xA;myapp/&#xA;&#xA;- assets: You&#39;ve selected `clientside` for your asset serving configuration.&#xA;&#xA;Next step, build your frontend:&#xA;  $ cd frontend/&#xA;  $ npm install &amp;amp;&amp;amp; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &lt;/snip&gt; --&gt; &#xA;&lt;p&gt;Now &lt;code&gt;cd&lt;/code&gt; into your &lt;code&gt;myapp&lt;/code&gt; and start your app:&lt;/p&gt; &#xA;&lt;!-- &lt;snip id=&#34;starting-the-server-command-with-output&#34; inject_from=&#34;yaml&#34; template=&#34;sh&#34;&gt; --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo loco start&#xA;&#xA;                      ▄     ▀&#xA;                                ▀  ▄&#xA;                  ▄       ▀     ▄  ▄ ▄▀&#xA;                                    ▄ ▀▄▄&#xA;                        ▄     ▀    ▀  ▀▄▀█▄&#xA;                                          ▀█▄&#xA;▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█&#xA;██████  █████   ███ █████   ███ █████   ███ ▀█&#xA;██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄&#xA;██████  █████   ███ █████       █████   ███ ████▄&#xA;██████  █████   ███ █████   ▄▄▄ █████   ███ █████&#xA;██████  █████   ███  ████   ███ █████   ███ ████▀&#xA;  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀&#xA;      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀&#xA;                https://loco.rs&#xA;&#xA;listening on port 5150&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &lt;/snip&gt; --&gt; &#xA;&lt;h2&gt;Powered by Loco&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spectralops.io&#34;&gt;SpectralOps&lt;/a&gt; - various services powered by Loco framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nativi.sh&#34;&gt;Nativish&lt;/a&gt; - app backend powered by Loco framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/loco-rs/loco/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=loco-rs/loco&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>jito-foundation/jito-solana</title>
    <updated>2024-11-24T01:42:51Z</updated>
    <id>tag:github.com,2024-11-24:/jito-foundation/jito-solana</id>
    <link href="https://github.com/jito-foundation/jito-solana" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jito Foundation MEV Solana Client&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://solana.com&#34;&gt; &lt;img alt=&#34;Solana&#34; src=&#34;https://i.imgur.com/0vfIMHo.png&#34; width=&#34;250&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/jito/jito-solana&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/3a7c88c0f777e1a0fddacc190823565271ae4c251ef78d83a8.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains Jito&#39;s fork of the Solana validator.&lt;/p&gt; &#xA;&lt;p&gt;We recommend checking out our &lt;a href=&#34;https://jito-foundation.gitbook.io/mev/jito-solana/building-the-software&#34;&gt;Gitbook&lt;/a&gt; for more detailed instructions on building and running Jito-Solana.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;1. Install rustc, cargo and rustfmt.&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl https://sh.rustup.rs -sSf | sh&#xA;$ source $HOME/.cargo/env&#xA;$ rustup component add rustfmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When building the master branch, please make sure you are using the latest stable rust version by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustup update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When building a specific release branch, you should check the rust version in &lt;code&gt;ci/rust-version.sh&lt;/code&gt; and if necessary, install that version by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustup install VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if this is not the latest rust version on your machine, cargo commands may require an &lt;a href=&#34;https://rust-lang.github.io/rustup/overrides.html&#34;&gt;override&lt;/a&gt; in order to use the correct version.&lt;/p&gt; &#xA;&lt;p&gt;On Linux systems you may need to install libssl-dev, pkg-config, zlib1g-dev, protobuf etc.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get update&#xA;$ sudo apt-get install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang cmake make libprotobuf-dev protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo dnf install openssl-devel systemd-devel pkg-config zlib-devel llvm clang cmake make protobuf-devel protobuf-compiler perl-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;2. Download the source code.&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/jito-foundation/jito-solana.git&#xA;$ cd jito-solana&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;3. Build.&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run the test suite:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Starting a local testnet&lt;/h3&gt; &#xA;&lt;p&gt;Start your own testnet locally, instructions are in the &lt;a href=&#34;https://docs.solanalabs.com/clusters/benchmark&#34;&gt;online docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing the remote development cluster&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;devnet&lt;/code&gt; - stable public cluster for development accessible via devnet.solana.com. Runs 24/7. Learn more about the &lt;a href=&#34;https://docs.solanalabs.com/clusters&#34;&gt;public clusters&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Benchmarking&lt;/h1&gt; &#xA;&lt;p&gt;First, install the nightly build of rustc. &lt;code&gt;cargo bench&lt;/code&gt; requires the use of the unstable features only available in the nightly build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustup install nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo +nightly bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Release Process&lt;/h1&gt; &#xA;&lt;p&gt;The release process for this project is described &lt;a href=&#34;https://raw.githubusercontent.com/jito-foundation/jito-solana/master/RELEASE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Code coverage&lt;/h1&gt; &#xA;&lt;p&gt;To generate code coverage statistics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ scripts/coverage.sh&#xA;$ open target/cov/lcov-local/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why coverage? While most see coverage as a code quality metric, we see it primarily as a developer productivity metric. When a developer makes a change to the codebase, presumably it&#39;s a &lt;em&gt;solution&lt;/em&gt; to some problem. Our unit-test suite is how we encode the set of &lt;em&gt;problems&lt;/em&gt; the codebase solves. Running the test suite should indicate that your change didn&#39;t &lt;em&gt;infringe&lt;/em&gt; on anyone else&#39;s solutions. Adding a test &lt;em&gt;protects&lt;/em&gt; your solution from future changes. Say you don&#39;t understand why a line of code exists, try deleting it and running the unit-tests. The nearest test failure should tell you what problem was solved by that code. If no test fails, go ahead and submit a Pull Request that asks, &#34;what problem is solved by this code?&#34; On the other hand, if a test does fail and you can think of a better way to solve the same problem, a Pull Request with your solution would most certainly be welcome! Likewise, if rewriting a test can better communicate what code it&#39;s protecting, please send us that patch!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rpcpool/yellowstone-grpc</title>
    <updated>2024-11-24T01:42:51Z</updated>
    <id>tag:github.com,2024-11-24:/rpcpool/yellowstone-grpc</id>
    <link href="https://github.com/rpcpool/yellowstone-grpc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;solana geyser grpc service&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Yellowstone Dragon&#39;s Mouth - a Geyser based gRPC interface for Solana&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains a fully functional gRPC interface for Solana. It is built around Solana&#39;s Geyser interface. In this repo we have the plugin as well as sample clients for multiple languages.&lt;/p&gt; &#xA;&lt;p&gt;It provides the ability to get slots, blocks, transactions, and account update notifications over a standardised path.&lt;/p&gt; &#xA;&lt;p&gt;For additional documentation, please see: &lt;a href=&#34;https://docs.triton.one/rpc-pool/grpc-subscriptions&#34;&gt;https://docs.triton.one/rpc-pool/grpc-subscriptions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Known bugs&lt;/h4&gt; &#xA;&lt;p&gt;Block reconstruction inside gRPC plugin based on information provided by BlockMeta, unfortunately number of entries for blocks generated on validators always equal to zero. These blocks always will have zero entries. See issue on GitHub: &lt;a href=&#34;https://github.com/solana-labs/solana/issues/33823&#34;&gt;https://github.com/solana-labs/solana/issues/33823&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Validator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ solana-validator --geyser-plugin-config yellowstone-grpc-geyser/config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin config check&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo-fmt &amp;amp;&amp;amp; cargo run --bin config-check -- --config yellowstone-grpc-geyser/config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Block reconstruction&lt;/h3&gt; &#xA;&lt;p&gt;Geyser interface on block update do not provide detailed information about transactions and accounts updates. To provide this information with block message we need to collect all messages and expect specified order. By default if we failed to reconstruct full block we log error message and increase &lt;code&gt;invalid_full_blocks_total&lt;/code&gt; counter in prometheus metrics. If you want to panic on invalid reconstruction you can change option &lt;code&gt;block_fail_action&lt;/code&gt; in config to &lt;code&gt;panic&lt;/code&gt; (default value is &lt;code&gt;log&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Filters for streamed data&lt;/h3&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://raw.githubusercontent.com/rpcpool/yellowstone-grpc/master/yellowstone-grpc-proto/proto/geyser.proto&#34;&gt;yellowstone-grpc-proto/proto/geyser.proto&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;commitment&lt;/code&gt; — commitment level: &lt;code&gt;processed&lt;/code&gt; / &lt;code&gt;confirmed&lt;/code&gt; / &lt;code&gt;finalized&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;accounts_data_slice&lt;/code&gt; — array of objects &lt;code&gt;{ offset: uint64, length: uint64 }&lt;/code&gt;, allow to receive only required data from accounts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ping&lt;/code&gt; — optional boolean field. Some cloud providers (like Cloudflare, Fly.io) close the stream if client doesn&#39;t send anything during some time. As workaroud you can send same filter every N seconds, but this would be not optimal since you need to keep this filter. Instead, you can send subscribe request with &lt;code&gt;ping&lt;/code&gt; field set to &lt;code&gt;true&lt;/code&gt; and ignore rest of the fields in the request. Since we sent &lt;code&gt;Ping&lt;/code&gt; message every 15s from the server, you can send subscribe request with &lt;code&gt;ping&lt;/code&gt; as reply and receive &lt;code&gt;Pong&lt;/code&gt; message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Slots&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;filter_by_commitment&lt;/code&gt; — by default slots sent for all commitment levels, but with this filter you can receive only selected commitment level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Account&lt;/h4&gt; &#xA;&lt;p&gt;Accounts can be filtered by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;account&lt;/code&gt; — acount Pubkey, match to any Pubkey from the array&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;owner&lt;/code&gt; — account owner Pubkey, match to any Pubkey from the array&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filters&lt;/code&gt; — same as &lt;code&gt;getProgramAccounts&lt;/code&gt; filters, array of &lt;code&gt;dataSize&lt;/code&gt; or &lt;code&gt;Memcmp&lt;/code&gt; (bytes, base58, base64 are supported)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If all fields are empty then all accounts are broadcasted. Otherwise fields works as logical &lt;code&gt;AND&lt;/code&gt; and values in arrays as logical &lt;code&gt;OR&lt;/code&gt; (except values in &lt;code&gt;filters&lt;/code&gt; that works as logical &lt;code&gt;AND&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Transactions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vote&lt;/code&gt; — enable/disable broadcast &lt;code&gt;vote&lt;/code&gt; transactions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;failed&lt;/code&gt; — enable/disable broadcast &lt;code&gt;failed&lt;/code&gt; transactions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signature&lt;/code&gt; — match only specified transaction&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;account_include&lt;/code&gt; — filter transactions that use any account from the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;account_exclude&lt;/code&gt; — opposite to &lt;code&gt;account_include&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;account_required&lt;/code&gt; — require all accounts from the list to be used in transaction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If all fields are empty then all transactions are broadcasted. Otherwise fields works as logical &lt;code&gt;AND&lt;/code&gt; and values in arrays as logical &lt;code&gt;OR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Entries&lt;/h4&gt; &#xA;&lt;p&gt;Currently we do not have filters for the entries, all entries broadcasted.&lt;/p&gt; &#xA;&lt;h4&gt;Blocks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;account_include&lt;/code&gt; — filter transactions and accounts that use any account from the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include_transactions&lt;/code&gt; — include all transactions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include_accounts&lt;/code&gt; — include all accounts updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include_entries&lt;/code&gt; — include all entries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Blocks meta&lt;/h4&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;Blocks&lt;/code&gt; but without &lt;code&gt;transactions&lt;/code&gt;, &lt;code&gt;accounts&lt;/code&gt; and entries. Currently we do not have filters for block meta, all messages are broadcasted.&lt;/p&gt; &#xA;&lt;h3&gt;Limit filters&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to add limits for filters in the config. If &lt;code&gt;filters&lt;/code&gt; field is omitted then filters doesn&#39;t have any limits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;grpc&#34;: {&#xA;   &#34;filters&#34;: {&#xA;      &#34;accounts&#34;: {&#xA;         &#34;max&#34;: 1,&#xA;         &#34;any&#34;: false,&#xA;         &#34;account_max&#34;: 10,&#xA;         &#34;account_reject&#34;: [&#34;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&#34;],&#xA;         &#34;owner_max&#34;: 10,&#xA;         &#34;owner_reject&#34;: [&#34;11111111111111111111111111111111&#34;]&#xA;      },&#xA;      &#34;slots&#34;: {&#xA;         &#34;max&#34;: 1&#xA;      },&#xA;      &#34;transactions&#34;: {&#xA;         &#34;max&#34;: 1,&#xA;         &#34;any&#34;: false,&#xA;         &#34;account_include_max&#34;: 10,&#xA;         &#34;account_include_reject&#34;: [&#34;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&#34;],&#xA;         &#34;account_exclude_max&#34;: 10,&#xA;         &#34;account_required_max&#34;: 10&#xA;      },&#xA;      &#34;blocks&#34;: {&#xA;         &#34;max&#34;: 1,&#xA;         &#34;account_include_max&#34;: 10,&#xA;         &#34;account_include_any&#34;: false,&#xA;         &#34;account_include_reject&#34;: [&#34;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&#34;],&#xA;         &#34;include_transactions&#34;: true,&#xA;         &#34;include_accounts&#34; : false,&#xA;         &#34;include_entries&#34; : false&#xA;      },&#xA;      &#34;blocks_meta&#34;: {&#xA;         &#34;max&#34;: 1&#xA;      },&#xA;      &#34;entry&#34;: {&#xA;         &#34;max&#34;: 1&#xA;      }&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unary gRPC methods&lt;/h3&gt; &#xA;&lt;h4&gt;Ping&lt;/h4&gt; &#xA;&lt;h4&gt;GetLatestBlockhash&lt;/h4&gt; &#xA;&lt;h4&gt;GetBlockHeight&lt;/h4&gt; &#xA;&lt;h4&gt;GetSlot&lt;/h4&gt; &#xA;&lt;h4&gt;IsBlockhashValid&lt;/h4&gt; &#xA;&lt;h4&gt;GetVersion&lt;/h4&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpcpool/yellowstone-grpc/master/examples/golang&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpcpool/yellowstone-grpc/master/examples/rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rpcpool/yellowstone-grpc/master/examples/typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Some load balancers will terminate gRPC connections if there are no messages sent from the client for a period of time. In order to mitigate this you need to send a message periodically. The &lt;code&gt;ping&lt;/code&gt; field in the SubscribeRequest is used for this purpose. The gRPC server already sends pings to the client, so you can simply reply with a ping and your connection will remain open. You can see in the rust example how to reply to the ping from the server with the client.&lt;/p&gt; &#xA;&lt;h3&gt;Projects based on Geyser gRPC&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpcpool/yellowstone-grpc-kafka&#34;&gt;https://github.com/rpcpool/yellowstone-grpc-kafka&lt;/a&gt; — forward gRPC stream to Kafka, dedup, read stream from Kafka with gRPC server&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>