<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:53:09Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sharkdp/bat</title>
    <updated>2024-03-24T01:53:09Z</updated>
    <id>tag:github.com,2024-03-24:/sharkdp/bat</id>
    <link href="https://github.com/sharkdp/bat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cat(1) clone with wings.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/logo-header.svg?sanitize=true&#34; alt=&#34;bat - a cat clone with wings&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/sharkdp/bat/actions?query=workflow%3ACICD&#34;&gt;&lt;img src=&#34;https://github.com/sharkdp/bat/workflows/CICD/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/crates/l/bat.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;a href=&#34;https://crates.io/crates/bat&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/bat.svg?colorB=319e8c&#34; alt=&#34;Version info&#34;&gt;&lt;/a&gt;&lt;br&gt; A &lt;i&gt;cat(1)&lt;/i&gt; clone with syntax highlighting and Git integration. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#syntax-highlighting&#34;&gt;Key Features&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#how-to-use&#34;&gt;How To Use&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#installation&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#customization&#34;&gt;Customization&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#project-goals-and-alternatives&#34;&gt;Project goals, alternatives&lt;/a&gt;&lt;br&gt; [English] [&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-zh.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ja.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;] [&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ko.md&#34;&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;] [&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/README-ru.md&#34;&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt;] &lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;A special &lt;em&gt;thank you&lt;/em&gt; goes to our biggest &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors.md&#34;&gt;sponsors&lt;/a&gt;:&lt;br&gt; &lt;a href=&#34;https://workos.com/?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=bat&amp;amp;utm_source=github&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/workos-logo-white-bg.svg?sanitize=true&#34; width=&#34;200&#34; alt=&#34;WorkOS&#34;&gt; &lt;br&gt; &lt;strong&gt;Your app, enterprise-ready.&lt;/strong&gt; &lt;br&gt; &lt;sub&gt;Start selling to enterprise customers with just a few lines of code.&lt;/sub&gt; &lt;br&gt; &lt;sup&gt;Add Single Sign-On (and more) in minutes instead of months.&lt;/sup&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=bat_20231001&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/sponsors/warp-logo.png&#34; width=&#34;200&#34; alt=&#34;Warp&#34;&gt; &lt;br&gt; &lt;strong&gt;Warp is a modern, Rust-based terminal with AI built in&lt;br&gt;so you and your team can build great software, faster.&lt;/strong&gt; &lt;br&gt; &lt;sub&gt;Feel more productive on the command line with parameterized commands,&lt;/sub&gt; &lt;br&gt; &lt;sup&gt;autosuggestions, and an IDE-like text editor.&lt;/sup&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Syntax highlighting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; supports syntax highlighting for a large number of programming and markup languages:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/rGsdnDe.png&#34; alt=&#34;Syntax highlighting example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Git integration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; communicates with &lt;code&gt;git&lt;/code&gt; to show modifications with respect to the index (see left side bar):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2lSW4RE.png&#34; alt=&#34;Git integration example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Show non-printable characters&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;-A&lt;/code&gt;/&lt;code&gt;--show-all&lt;/code&gt; option to show and highlight non-printable characters:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WndGp9H.png&#34; alt=&#34;Non-printable character example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Automatic paging&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;bat&lt;/code&gt; pipes its own output to a pager (e.g. &lt;code&gt;less&lt;/code&gt;) if the output is too large for one screen. If you would rather &lt;code&gt;bat&lt;/code&gt; work like &lt;code&gt;cat&lt;/code&gt; all the time (never page output), you can set &lt;code&gt;--paging=never&lt;/code&gt; as an option, either on the command line or in your configuration file. If you intend to alias &lt;code&gt;cat&lt;/code&gt; to &lt;code&gt;bat&lt;/code&gt; in your shell configuration, you can use &lt;code&gt;alias cat=&#39;bat --paging=never&#39;&lt;/code&gt; to preserve the default behavior.&lt;/p&gt; &#xA;&lt;h4&gt;File concatenation&lt;/h4&gt; &#xA;&lt;p&gt;Even with a pager set, you can still use &lt;code&gt;bat&lt;/code&gt; to concatenate files &lt;span&gt;üòâ&lt;/span&gt;. Whenever &lt;code&gt;bat&lt;/code&gt; detects a non-interactive terminal (i.e. when you pipe into another process or into a file), &lt;code&gt;bat&lt;/code&gt; will act as a drop-in replacement for &lt;code&gt;cat&lt;/code&gt; and fall back to printing the plain file contents, regardless of the &lt;code&gt;--pager&lt;/code&gt; option&#39;s value.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Display a single file on the terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; bat README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Display multiple files at once&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; bat src/*.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read from stdin, determine the syntax automatically (note, highlighting will only work if the syntax can be determined from the first line of the file, usually through a shebang such as &lt;code&gt;#!/bin/sh&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; curl -s https://sh.rustup.rs | bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read from stdin, specify the language explicitly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; yaml2json .travis.yml | json_pp | bat -l json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show and highlight non-printable characters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; bat -A /etc/hosts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use it as a &lt;code&gt;cat&lt;/code&gt; replacement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat &amp;gt; note.md  # quickly create a new file&#xA;&#xA;bat header.md content.md footer.md &amp;gt; document.md&#xA;&#xA;bat -n main.rs  # show line numbers (only)&#xA;&#xA;bat f - g  # output &#39;f&#39;, then stdin, then &#39;g&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration with other tools&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;bat&lt;/code&gt; as a previewer for &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt;. To do this, use &lt;code&gt;bat&lt;/code&gt;s &lt;code&gt;--color=always&lt;/code&gt; option to force colorized output. You can also use &lt;code&gt;--line-range&lt;/code&gt; option to restrict the load times for long files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fzf --preview &#34;bat --color=always --style=numbers --line-range=:500 {}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://github.com/junegunn/fzf#preview-window&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&#39;s &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;-exec&lt;/code&gt; option of &lt;code&gt;find&lt;/code&gt; to preview all search results with &lt;code&gt;bat&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find ‚Ä¶ -exec bat {} +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you happen to use &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/a&gt;, you can use the &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; option to do the same:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd ‚Ä¶ -X bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/eth-p/bat-extras/raw/master/doc/batgrep.md&#34;&gt;&lt;code&gt;batgrep&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;bat&lt;/code&gt; can be used as the printer for &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; search results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;batgrep needle src/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;tail -f&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can be combined with &lt;code&gt;tail -f&lt;/code&gt; to continuously monitor a given file with syntax highlighting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tail -f /var/log/pacman.log | bat --paging=never -l log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we have to switch off paging in order for this to work. We have also specified the syntax explicitly (&lt;code&gt;-l log&lt;/code&gt;), as it can not be auto-detected in this case.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can combine &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;git show&lt;/code&gt; to view an older version of a given file with proper syntax highlighting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git show v0.6.0:src/main.rs | bat -l rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can combine &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;git diff&lt;/code&gt; to view lines around code changes with proper syntax highlighting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;batdiff() {&#xA;    git diff --name-only --relative --diff-filter=d | xargs bat --diff&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to use this as a separate tool, check out &lt;code&gt;batdiff&lt;/code&gt; in &lt;a href=&#34;https://github.com/eth-p/bat-extras&#34;&gt;&lt;code&gt;bat-extras&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for more support for git and diff operations, check out &lt;a href=&#34;https://github.com/dandavison/delta&#34;&gt;&lt;code&gt;delta&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;xclip&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The line numbers and Git modification markers in the output of &lt;code&gt;bat&lt;/code&gt; can make it hard to copy the contents of a file. To prevent this, you can call &lt;code&gt;bat&lt;/code&gt; with the &lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--plain&lt;/code&gt; option or simply pipe the output into &lt;code&gt;xclip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat main.cpp | xclip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; will detect that the output is being redirected and print the plain file contents.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;man&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can be used as a colorizing pager for &lt;code&gt;man&lt;/code&gt;, by setting the &lt;code&gt;MANPAGER&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export MANPAGER=&#34;sh -c &#39;col -bx | bat -l man -p&#39;&#34;&#xA;man 2 select&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(replace &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;batcat&lt;/code&gt; if you are on Debian or Ubuntu)&lt;/p&gt; &#xA;&lt;p&gt;It might also be necessary to set &lt;code&gt;MANROFFOPT=&#34;-c&#34;&lt;/code&gt; if you experience formatting problems.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have this bundled in a new command, you can also use &lt;a href=&#34;https://github.com/eth-p/bat-extras/raw/master/doc/batman.md&#34;&gt;&lt;code&gt;batman&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/assets/syntaxes/02_Extra/Manpage.sublime-syntax&#34;&gt;Manpage syntax&lt;/a&gt; is developed in this repository and still needs some work.&lt;/p&gt; &#xA;&lt;p&gt;Also, note that this will &lt;a href=&#34;https://github.com/sharkdp/bat/issues/1145&#34;&gt;not work&lt;/a&gt; with Mandocs &lt;code&gt;man&lt;/code&gt; implementation.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;prettier&lt;/code&gt; / &lt;code&gt;shfmt&lt;/code&gt; / &lt;code&gt;rustfmt&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/eth-p/bat-extras/raw/master/doc/prettybat.md&#34;&gt;&lt;code&gt;prettybat&lt;/code&gt;&lt;/a&gt; script is a wrapper that will format code and print it with &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Highlighting &lt;code&gt;--help&lt;/code&gt; messages&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;bat&lt;/code&gt; to colorize help text: &lt;code&gt;$ cp --help | bat -plhelp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use a wrapper around this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in your .bashrc/.zshrc/*rc&#xA;alias bathelp=&#39;bat --plain --language=help&#39;&#xA;help() {&#xA;    &#34;$@&#34; --help 2&amp;gt;&amp;amp;1 | bathelp&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can do &lt;code&gt;$ help cp&lt;/code&gt; or &lt;code&gt;$ help git commit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you are using &lt;code&gt;zsh&lt;/code&gt;, you can also use global aliases to override &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt; entirely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias -g -- -h=&#39;-h 2&amp;gt;&amp;amp;1 | bat --language=help --style=plain&#39;&#xA;alias -g -- --help=&#39;--help 2&amp;gt;&amp;amp;1 | bat --language=help --style=plain&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, you can keep on using &lt;code&gt;cp --help&lt;/code&gt;, but get colorized help pages.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that in some cases, &lt;code&gt;-h&lt;/code&gt; may not be a shorthand of &lt;code&gt;--help&lt;/code&gt; (for example with &lt;code&gt;ls&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Please report any issues with the help syntax in &lt;a href=&#34;https://github.com/victor-gp/cmd-help-sublime-syntax&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/bat-cat/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/bat-cat.svg?columns=3&amp;amp;exclude_unsupported=1&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Ubuntu (using &lt;code&gt;apt&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; is available on &lt;a href=&#34;https://packages.ubuntu.com/search?keywords=bat&amp;amp;exact=1&#34;&gt;Ubuntu since 20.04 (&#34;Focal&#34;)&lt;/a&gt; and &lt;a href=&#34;https://packages.debian.org/bullseye/bat&#34;&gt;Debian since August 2021 (Debian 11 - &#34;Bullseye&#34;)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your Ubuntu/Debian installation is new enough you can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: If you install &lt;code&gt;bat&lt;/code&gt; this way, please note that the executable may be installed as &lt;code&gt;batcat&lt;/code&gt; instead of &lt;code&gt;bat&lt;/code&gt; (due to &lt;a href=&#34;https://github.com/sharkdp/bat/issues/982&#34;&gt;a name clash with another package&lt;/a&gt;). You can set up a &lt;code&gt;bat -&amp;gt; batcat&lt;/code&gt; symlink or alias to prevent any issues that may come up because of this and to be consistent with other distributions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/.local/bin&#xA;ln -s /usr/bin/batcat ~/.local/bin/bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Ubuntu (using most recent &lt;code&gt;.deb&lt;/code&gt; packages)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the package has not yet been promoted to your Ubuntu/Debian installation, or you want the most recent release of &lt;code&gt;bat&lt;/code&gt;, download the latest &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href=&#34;https://github.com/sharkdp/bat/releases&#34;&gt;release page&lt;/a&gt; and install it via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -i bat_0.18.3_amd64.deb  # adapt version number and architecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Alpine Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=bat&#34;&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources, provided you have the appropriate repository enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apk add bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://www.archlinux.org/packages/extra/x86_64/bat/&#34;&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Fedora&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://koji.fedoraproject.org/koji/packageinfo?packageID=27506&#34;&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official &lt;a href=&#34;https://docs.fedoraproject.org/en-US/modularity/using-modules/&#34;&gt;Fedora Modular&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Funtoo Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://github.com/funtoo/dev-kit/tree/1.4-release/sys-apps/bat&#34;&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from dev-kit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;emerge sys-apps/bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Gentoo Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://packages.gentoo.org/packages/sys-apps/bat&#34;&gt;the &lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; from the official sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;emerge sys-apps/bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Void Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via xbps-install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xbps-install -S bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Termux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via pkg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;You can install a precompiled &lt;a href=&#34;https://www.freshports.org/textproc/bat&#34;&gt;&lt;code&gt;bat&lt;/code&gt; package&lt;/a&gt; with pkg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or build it on your own from the FreeBSD ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /usr/ports/textproc/bat&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On OpenBSD&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; package using &lt;a href=&#34;https://man.openbsd.org/pkg_add.1&#34;&gt;&lt;code&gt;pkg_add(1)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkg_add bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via nix&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -i bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On openSUSE&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; with zypper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zypper install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via snap package&lt;/h3&gt; &#xA;&lt;p&gt;There is currently no recommended snap package available. Existing packages may be available, but are not officially supported and may contain &lt;a href=&#34;https://github.com/sharkdp/bat/issues/1519&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;On macOS (or Linux) via Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; with &lt;a href=&#34;https://formulae.brew.sh/formula/bat&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On macOS via MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;Or install &lt;code&gt;bat&lt;/code&gt; with &lt;a href=&#34;https://ports.macports.org/port/bat/summary&#34;&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;port install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;p&gt;There are a few options to install &lt;code&gt;bat&lt;/code&gt; on Windows. Once you have installed &lt;code&gt;bat&lt;/code&gt;, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#using-bat-on-windows&#34;&gt;&#34;Using &lt;code&gt;bat&lt;/code&gt; on Windows&#34;&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;You will need to install the &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Visual C++ Redistributable&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h4&gt;With WinGet&lt;/h4&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/package-manager/winget&#34;&gt;WinGet&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;winget install sharkdp.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With Chocolatey&lt;/h4&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href=&#34;https://chocolatey.org/packages/Bat&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With Scoop&lt;/h4&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bat&lt;/code&gt; via &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop install bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From prebuilt binaries:&lt;/h4&gt; &#xA;&lt;p&gt;You can download prebuilt binaries from the &lt;a href=&#34;https://github.com/sharkdp/bat/releases&#34;&gt;Release page&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;p&gt;You will need to install the &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Visual C++ Redistributable&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;From binaries&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/sharkdp/bat/releases&#34;&gt;Release page&lt;/a&gt; for prebuilt versions of &lt;code&gt;bat&lt;/code&gt; for many different architectures. Statically-linked binaries are also available: look for archives with &lt;code&gt;musl&lt;/code&gt; in the file name.&lt;/p&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;If you want to build &lt;code&gt;bat&lt;/code&gt; from source, you need Rust 1.70.0 or higher. You can then use &lt;code&gt;cargo&lt;/code&gt; to build everything:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --locked bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that additional files like the man page or shell completion files can not be installed in this way. They will be generated by &lt;code&gt;cargo&lt;/code&gt; and should be available in the cargo target folder (under &lt;code&gt;build&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Highlighting theme&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;bat --list-themes&lt;/code&gt; to get a list of all available themes for syntax highlighting. To select the &lt;code&gt;TwoDark&lt;/code&gt; theme, call &lt;code&gt;bat&lt;/code&gt; with the &lt;code&gt;--theme=TwoDark&lt;/code&gt; option or set the &lt;code&gt;BAT_THEME&lt;/code&gt; environment variable to &lt;code&gt;TwoDark&lt;/code&gt;. Use &lt;code&gt;export BAT_THEME=&#34;TwoDark&#34;&lt;/code&gt; in your shell&#39;s startup file to make the change permanent. Alternatively, use &lt;code&gt;bat&lt;/code&gt;s &lt;a href=&#34;https://github.com/sharkdp/bat#configuration-file&#34;&gt;configuration file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to preview the different themes on a custom file, you can use the following command (you need &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; for this):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat --list-themes | fzf --preview=&#34;bat --theme={} --color=always /path/to/file&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; looks good on a dark background by default. However, if your terminal uses a light background, some themes like &lt;code&gt;GitHub&lt;/code&gt; or &lt;code&gt;OneHalfLight&lt;/code&gt; will work better for you. You can also use a custom theme by following the &lt;a href=&#34;https://github.com/sharkdp/bat#adding-new-themes&#34;&gt;&#39;Adding new themes&#39; section below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;8-bit themes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; has three themes that always use &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&#34;&gt;8-bit colors&lt;/a&gt;, even when truecolor support is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ansi&lt;/code&gt; looks decent on any terminal. It uses 3-bit colors: black, red, green, yellow, blue, magenta, cyan, and white.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;base16&lt;/code&gt; is designed for &lt;a href=&#34;https://github.com/chriskempson/base16&#34;&gt;base16&lt;/a&gt; terminal themes. It uses 4-bit colors (3-bit colors plus bright variants) in accordance with the &lt;a href=&#34;https://github.com/chriskempson/base16/raw/master/styling.md&#34;&gt;base16 styling guidelines&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;base16-256&lt;/code&gt; is designed for &lt;a href=&#34;https://github.com/chriskempson/base16-shell&#34;&gt;base16-shell&lt;/a&gt;. It replaces certain bright colors with 8-bit colors from 16 to 21. &lt;strong&gt;Do not&lt;/strong&gt; use this simply because you have a 256-color terminal but are not using base16-shell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Although these themes are more restricted, they have three advantages over truecolor themes. They:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enjoy maximum compatibility. Some terminal utilities do not support more than 3-bit colors.&lt;/li&gt; &#xA; &lt;li&gt;Adapt to terminal theme changes. Even for already printed output.&lt;/li&gt; &#xA; &lt;li&gt;Visually harmonize better with other terminal software.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Output style&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;--style&lt;/code&gt; option to control the appearance of &lt;code&gt;bat&lt;/code&gt;s output. You can use &lt;code&gt;--style=numbers,changes&lt;/code&gt;, for example, to show only Git changes and line numbers but no grid and no file header. Set the &lt;code&gt;BAT_STYLE&lt;/code&gt; environment variable to make these changes permanent or use &lt;code&gt;bat&lt;/code&gt;s &lt;a href=&#34;https://github.com/sharkdp/bat#configuration-file&#34;&gt;configuration file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new syntaxes / language definitions&lt;/h3&gt; &#xA;&lt;p&gt;Should you find that a particular syntax is not available within &lt;code&gt;bat&lt;/code&gt;, you can follow these instructions to easily add new syntaxes to your current &lt;code&gt;bat&lt;/code&gt; installation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; uses the excellent &lt;a href=&#34;https://github.com/trishume/syntect/&#34;&gt;&lt;code&gt;syntect&lt;/code&gt;&lt;/a&gt; library for syntax highlighting. &lt;code&gt;syntect&lt;/code&gt; can read any &lt;a href=&#34;https://www.sublimetext.com/docs/3/syntax.html&#34;&gt;Sublime Text &lt;code&gt;.sublime-syntax&lt;/code&gt; file&lt;/a&gt; and theme.&lt;/p&gt; &#xA;&lt;p&gt;A good resource for finding Sublime Syntax packages is &lt;a href=&#34;https://packagecontrol.io/&#34;&gt;Package Control&lt;/a&gt;. Once you found a syntax:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a folder with syntax definition files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &#34;$(bat --config-dir)/syntaxes&#34;&#xA;cd &#34;$(bat --config-dir)/syntaxes&#34;&#xA;&#xA;# Put new &#39;.sublime-syntax&#39; language definition files&#xA;# in this folder (or its subdirectories), for example:&#xA;git clone https://github.com/tellnobody1/sublime-purescript-syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now use the following command to parse these files into a binary cache:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat cache --build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, use &lt;code&gt;bat --list-languages&lt;/code&gt; to check if the new languages are available.&lt;/p&gt; &lt;p&gt;If you ever want to go back to the default settings, call:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat cache --clear&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you think that a specific syntax should be included in &lt;code&gt;bat&lt;/code&gt; by default, please consider opening a &#34;syntax request&#34; ticket after reading the policies and instructions &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/assets.md&#34;&gt;here&lt;/a&gt;: &lt;a href=&#34;https://github.com/sharkdp/bat/issues/new?labels=syntax-request&amp;amp;template=syntax_request.md&#34;&gt;Open Syntax Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Adding new themes&lt;/h3&gt; &#xA;&lt;p&gt;This works very similar to how we add new syntax definitions.&lt;/p&gt; &#xA;&lt;p&gt;First, create a folder with the new syntax highlighting themes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &#34;$(bat --config-dir)/themes&#34;&#xA;cd &#34;$(bat --config-dir)/themes&#34;&#xA;&#xA;# Download a theme in &#39;.tmTheme&#39; format, for example:&#xA;git clone https://github.com/greggb/sublime-snazzy&#xA;&#xA;# Update the binary cache&#xA;bat cache --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, use &lt;code&gt;bat --list-themes&lt;/code&gt; to check if the new themes are available.&lt;/p&gt; &#xA;&lt;h3&gt;Adding or changing file type associations&lt;/h3&gt; &#xA;&lt;p&gt;You can add new (or change existing) file name patterns using the &lt;code&gt;--map-syntax&lt;/code&gt; command line option. The option takes an argument of the form &lt;code&gt;pattern:syntax&lt;/code&gt; where &lt;code&gt;pattern&lt;/code&gt; is a glob pattern that is matched against the file name and the absolute file path. The &lt;code&gt;syntax&lt;/code&gt; part is the full name of a supported language (use &lt;code&gt;bat --list-languages&lt;/code&gt; for an overview).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You probably want to use this option as &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#configuration-file&#34;&gt;an entry in &lt;code&gt;bat&lt;/code&gt;&#39;s configuration file&lt;/a&gt; for persistence instead of passing it on the command line as a one-off. Generally you&#39;d just use &lt;code&gt;-l&lt;/code&gt; if you want to manually specify a language for a file.&lt;/p&gt; &#xA;&lt;p&gt;Example: To use &#34;INI&#34; syntax highlighting for all files with a &lt;code&gt;.conf&lt;/code&gt; file extension, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--map-syntax=&#39;*.conf:INI&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: To open all files called &lt;code&gt;.ignore&lt;/code&gt; (exact match) with the &#34;Git Ignore&#34; syntax, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--map-syntax=&#39;.ignore:Git Ignore&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: To open all &lt;code&gt;.conf&lt;/code&gt; files in subfolders of &lt;code&gt;/etc/apache2&lt;/code&gt; with the &#34;Apache Conf&#34; syntax, use (this mapping is already built in):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--map-syntax=&#39;/etc/apache2/**/*.conf:Apache Conf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a different pager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; uses the pager that is specified in the &lt;code&gt;PAGER&lt;/code&gt; environment variable. If this variable is not set, &lt;code&gt;less&lt;/code&gt; is used by default. If you want to use a different pager, you can either modify the &lt;code&gt;PAGER&lt;/code&gt; variable or set the &lt;code&gt;BAT_PAGER&lt;/code&gt; environment variable to override what is specified in &lt;code&gt;PAGER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If &lt;code&gt;PAGER&lt;/code&gt; is &lt;code&gt;more&lt;/code&gt; or &lt;code&gt;most&lt;/code&gt;, &lt;code&gt;bat&lt;/code&gt; will silently use &lt;code&gt;less&lt;/code&gt; instead to ensure support for colors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to pass command-line arguments to the pager, you can also set them via the &lt;code&gt;PAGER&lt;/code&gt;/&lt;code&gt;BAT_PAGER&lt;/code&gt; variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export BAT_PAGER=&#34;less -RF&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of using environment variables, you can also use &lt;code&gt;bat&lt;/code&gt;s &lt;a href=&#34;https://github.com/sharkdp/bat#configuration-file&#34;&gt;configuration file&lt;/a&gt; to configure the pager (&lt;code&gt;--pager&lt;/code&gt; option).&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;less&lt;/code&gt; as a pager&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;less&lt;/code&gt; as a pager, &lt;code&gt;bat&lt;/code&gt; will automatically pass extra options along to &lt;code&gt;less&lt;/code&gt; to improve the experience. Specifically, &lt;code&gt;-R&lt;/code&gt;/&lt;code&gt;--RAW-CONTROL-CHARS&lt;/code&gt;, &lt;code&gt;-F&lt;/code&gt;/&lt;code&gt;--quit-if-one-screen&lt;/code&gt;, and under certain conditions, &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--no-init&lt;/code&gt; and/or &lt;code&gt;-S&lt;/code&gt;/&lt;code&gt;--chop-long-lines&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] These options will not be added if:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The pager is not named &lt;code&gt;less&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;code&gt;--pager&lt;/code&gt; argument contains any command-line arguments (e.g. &lt;code&gt;--pager=&#34;less -R&#34;&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;code&gt;BAT_PAGER&lt;/code&gt; environment variable contains any command-line arguments (e.g. &lt;code&gt;export BAT_PAGER=&#34;less -R&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;The &lt;code&gt;--quit-if-one-screen&lt;/code&gt; option will not be added when:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The &lt;code&gt;--paging=always&lt;/code&gt; argument is used.&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;code&gt;BAT_PAGING&lt;/code&gt; environment is set to &lt;code&gt;always&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;-R&lt;/code&gt; option is needed to interpret ANSI colors correctly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-F&lt;/code&gt; option instructs &lt;code&gt;less&lt;/code&gt; to exit immediately if the output size is smaller than the vertical size of the terminal. This is convenient for small files because you do not have to press &lt;code&gt;q&lt;/code&gt; to quit the pager.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt; option is needed to fix a bug with the &lt;code&gt;--quit-if-one-screen&lt;/code&gt; feature in versions of &lt;code&gt;less&lt;/code&gt; older than version 530. Unfortunately, it also breaks mouse-wheel support in &lt;code&gt;less&lt;/code&gt;. If you want to enable mouse-wheel scrolling on older versions of &lt;code&gt;less&lt;/code&gt; and do not mind losing the quit-if-one-screen feature, you can set the pager (via &lt;code&gt;--pager&lt;/code&gt; or &lt;code&gt;BAT_PAGER&lt;/code&gt;) to &lt;code&gt;less -R&lt;/code&gt;. For &lt;code&gt;less&lt;/code&gt; 530 or newer, it should work out of the box.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-S&lt;/code&gt; option is added when &lt;code&gt;bat&lt;/code&gt;&#39;s &lt;code&gt;-S&lt;/code&gt;/&lt;code&gt;--chop-long-lines&lt;/code&gt; option is used. This tells &lt;code&gt;less&lt;/code&gt; to truncate any lines larger than the terminal width.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; expands tabs to 4 spaces by itself, not relying on the pager. To change this, simply add the &lt;code&gt;--tabs&lt;/code&gt; argument with the number of spaces you want to be displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Defining tab stops for the pager (via the &lt;code&gt;--pager&lt;/code&gt; argument by &lt;code&gt;bat&lt;/code&gt;, or via the &lt;code&gt;LESS&lt;/code&gt; environment variable for &lt;code&gt;less&lt;/code&gt;) won&#39;t be taken into account because the pager will already get expanded spaces instead of tabs. This behaviour is added to avoid indentation issues caused by the sidebar. Calling &lt;code&gt;bat&lt;/code&gt; with &lt;code&gt;--tabs=0&lt;/code&gt; will override it and let tabs be consumed by the pager.&lt;/p&gt; &#xA;&lt;h3&gt;Dark mode&lt;/h3&gt; &#xA;&lt;p&gt;If you make use of the dark mode feature in macOS, you might want to configure &lt;code&gt;bat&lt;/code&gt; to use a different theme based on the OS theme. The following snippet uses the &lt;code&gt;default&lt;/code&gt; theme when in the &lt;em&gt;dark mode&lt;/em&gt; and the &lt;code&gt;GitHub&lt;/code&gt; theme when in the &lt;em&gt;light mode&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias cat=&#34;bat --theme=\$(defaults read -globalDomain AppleInterfaceStyle &amp;amp;&amp;gt; /dev/null &amp;amp;&amp;amp; echo default || echo GitHub)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; can also be customized with a configuration file. The location of the file is dependent on your operating system. To get the default path for your system, call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat --config-file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the &lt;code&gt;BAT_CONFIG_PATH&lt;/code&gt; environment variable to point &lt;code&gt;bat&lt;/code&gt; to a non-default location of the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export BAT_CONFIG_PATH=&#34;/path/to/bat.conf&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A default configuration file can be created with the &lt;code&gt;--generate-config-file&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat --generate-config-file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also now a systemwide configuration file, which is located under &lt;code&gt;/etc/bat/config&lt;/code&gt; on Linux and Mac OS and &lt;code&gt;C:\ProgramData\bat\config&lt;/code&gt; on windows. If the system wide configuration file is present, the content of the user configuration will simply be appended to it.&lt;/p&gt; &#xA;&lt;h3&gt;Format&lt;/h3&gt; &#xA;&lt;p&gt;The configuration file is a simple list of command line arguments. Use &lt;code&gt;bat --help&lt;/code&gt; to see a full list of possible options and values. In addition, you can add comments by prepending a line with the &lt;code&gt;#&lt;/code&gt; character.&lt;/p&gt; &#xA;&lt;p&gt;Example configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set the theme to &#34;TwoDark&#34;&#xA;--theme=&#34;TwoDark&#34;&#xA;&#xA;# Show line numbers, Git modifications and file header (but no grid)&#xA;--style=&#34;numbers,changes,header&#34;&#xA;&#xA;# Use italic text on the terminal (not supported on all terminals)&#xA;--italic-text=always&#xA;&#xA;# Use C++ syntax for Arduino .ino files&#xA;--map-syntax &#34;*.ino:C++&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;bat&lt;/code&gt; on Windows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; mostly works out-of-the-box on Windows, but a few features may need extra configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;You will need to install the &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Visual C++ Redistributable&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;Paging&lt;/h3&gt; &#xA;&lt;p&gt;Windows only includes a very limited pager in the form of &lt;code&gt;more&lt;/code&gt;. You can download a Windows binary for &lt;code&gt;less&lt;/code&gt; &lt;a href=&#34;http://www.greenwoodsoftware.com/less/download.html&#34;&gt;from its homepage&lt;/a&gt; or &lt;a href=&#34;https://chocolatey.org/packages/Less&#34;&gt;through Chocolatey&lt;/a&gt;. To use it, place the binary in a directory in your &lt;code&gt;PATH&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#using-a-different-pager&#34;&gt;define an environment variable&lt;/a&gt;. The &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#on-windows&#34;&gt;Chocolatey package&lt;/a&gt; installs &lt;code&gt;less&lt;/code&gt; automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;p&gt;Windows 10 natively supports colors in both &lt;code&gt;conhost.exe&lt;/code&gt; (Command Prompt) and PowerShell since &lt;a href=&#34;https://en.wikipedia.org/wiki/Windows_10_version_history#Version_1511_(November_Update)&#34;&gt;v1511&lt;/a&gt;, as well as in newer versions of bash. On earlier versions of Windows, you can use &lt;a href=&#34;http://cmder.net/&#34;&gt;Cmder&lt;/a&gt;, which includes &lt;a href=&#34;https://conemu.github.io/&#34;&gt;ConEmu&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Old versions of &lt;code&gt;less&lt;/code&gt; do not correctly interpret colors on Windows. To fix this, you can add the optional Unix tools to your PATH when installing Git. If you don‚Äôt have any other pagers installed, you can disable paging entirely by passing &lt;code&gt;--paging=never&lt;/code&gt; or by setting &lt;code&gt;BAT_PAGER&lt;/code&gt; to an empty string.&lt;/p&gt; &#xA;&lt;h3&gt;Cygwin&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; on Windows does not natively support Cygwin&#39;s unix-style paths (&lt;code&gt;/cygdrive/*&lt;/code&gt;). When passed an absolute cygwin path as an argument, &lt;code&gt;bat&lt;/code&gt; will encounter the following error: &lt;code&gt;The system cannot find the path specified. (os error 3)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This can be solved by creating a wrapper or adding the following function to your &lt;code&gt;.bash_profile&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bat() {&#xA;    local index&#xA;    local args=(&#34;$@&#34;)&#xA;    for index in $(seq 0 ${#args[@]}) ; do&#xA;        case &#34;${args[index]}&#34; in&#xA;        -*) continue;;&#xA;        *)  [ -e &#34;${args[index]}&#34; ] &amp;amp;&amp;amp; args[index]=&#34;$(cygpath --windows &#34;${args[index]}&#34;)&#34;;;&#xA;        esac&#xA;    done&#xA;    command bat &#34;${args[@]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Garbled output&lt;/h3&gt; &#xA;&lt;p&gt;If an input file contains color codes or other ANSI escape sequences or control characters, &lt;code&gt;bat&lt;/code&gt; will have problems performing syntax highlighting and text wrapping, and thus the output can become garbled. When displaying such files it is recommended to disable both syntax highlighting and wrapping by passing the &lt;code&gt;--color=never --wrap=never&lt;/code&gt; options to &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Terminals &amp;amp; colors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; handles terminals &lt;em&gt;with&lt;/em&gt; and &lt;em&gt;without&lt;/em&gt; truecolor support. However, the colors in most syntax highlighting themes are not optimized for 8-bit colors. It is therefore strongly recommended that you use a terminal with 24-bit truecolor support (&lt;code&gt;terminator&lt;/code&gt;, &lt;code&gt;konsole&lt;/code&gt;, &lt;code&gt;iTerm2&lt;/code&gt;, ...), or use one of the basic &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/#8-bit-themes&#34;&gt;8-bit themes&lt;/a&gt; designed for a restricted set of colors. See &lt;a href=&#34;https://gist.github.com/XVilka/8346728&#34;&gt;this article&lt;/a&gt; for more details and a full list of terminals with truecolor support.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that your truecolor terminal sets the &lt;code&gt;COLORTERM&lt;/code&gt; variable to either &lt;code&gt;truecolor&lt;/code&gt; or &lt;code&gt;24bit&lt;/code&gt;. Otherwise, &lt;code&gt;bat&lt;/code&gt; will not be able to determine whether or not 24-bit escape sequences are supported (and fall back to 8-bit colors).&lt;/p&gt; &#xA;&lt;h3&gt;Line numbers and grid are hardly visible&lt;/h3&gt; &#xA;&lt;p&gt;Please try a different theme (see &lt;code&gt;bat --list-themes&lt;/code&gt; for a list). The &lt;code&gt;OneHalfDark&lt;/code&gt; and &lt;code&gt;OneHalfLight&lt;/code&gt; themes provide grid and line colors that are brighter.&lt;/p&gt; &#xA;&lt;h3&gt;File encodings&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; natively supports UTF-8 as well as UTF-16. For every other file encoding, you may need to convert to UTF-8 first because the encodings can typically not be auto-detected. You can &lt;code&gt;iconv&lt;/code&gt; to do so. Example: if you have a PHP file in Latin-1 (ISO-8859-1) encoding, you can call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;iconv -f ISO-8859-1 -t UTF-8 my-file.php | bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: you might have to use the &lt;code&gt;-l&lt;/code&gt;/&lt;code&gt;--language&lt;/code&gt; option if the syntax can not be auto-detected by &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Recursive clone to retrieve all submodules&#xA;git clone --recursive https://github.com/sharkdp/bat&#xA;&#xA;# Build (debug version)&#xA;cd bat&#xA;cargo build --bins&#xA;&#xA;# Run unit tests and integration tests&#xA;cargo test&#xA;&#xA;# Install (release version)&#xA;cargo install --path . --locked&#xA;&#xA;# Build a bat binary with modified syntaxes and themes&#xA;bash assets/create.sh&#xA;cargo install --path . --locked --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to build an application that uses &lt;code&gt;bat&lt;/code&gt;s pretty-printing features as a library, check out the &lt;a href=&#34;https://docs.rs/bat/&#34;&gt;the API documentation&lt;/a&gt;. Note that you have to use either &lt;code&gt;regex-onig&lt;/code&gt; or &lt;code&gt;regex-fancy&lt;/code&gt; as a feature when you depend on &lt;code&gt;bat&lt;/code&gt; as a library.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp&#34;&gt;sharkdp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eth-p&#34;&gt;eth-p&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/keith-hall&#34;&gt;keith-hall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Enselic&#34;&gt;Enselic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please contact &lt;a href=&#34;https://david-peter.de/&#34;&gt;David Peter&lt;/a&gt; via email if you want to report a vulnerability in &lt;code&gt;bat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project goals and alternatives&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; tries to achieve the following goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide beautiful, advanced syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Integrate with Git to show file modifications&lt;/li&gt; &#xA; &lt;li&gt;Be a drop-in replacement for (POSIX) &lt;code&gt;cat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Offer a user-friendly command-line interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a lot of alternatives, if you are looking for similar programs. See &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/doc/alternatives.md&#34;&gt;this document&lt;/a&gt; for a comparison.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2018-2023 &lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;bat-developers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bat&lt;/code&gt; is made available under the terms of either the MIT License or the Apache License 2.0, at your option.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/bat/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; files for license details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prefix-dev/pixi</title>
    <updated>2024-03-24T01:53:09Z</updated>
    <id>tag:github.com,2024-03-24:/prefix-dev/pixi</id>
    <link href="https://github.com/prefix-dev/pixi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Package management made easy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;a href=&#34;https://github.com/prefix-dev/pixi/&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source srcset=&#34;https://github.com/prefix-dev/pixi/assets/4995967/a3f9ff01-c9fb-4893-83c0-2a3f924df63e&#34; type=&#34;image/webp&#34;&gt; &#xA;   &lt;source srcset=&#34;https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5&#34; type=&#34;image/png&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5&#34; alt=&#34;banner&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD--3--Clause-blue?style=flat-square&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://github.com/prefix-dev/pixi/actions/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/prefix-dev/pixi/rust.yml?style=flat-square&amp;amp;branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/kKV8ZxyzY4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1082332781146800168.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&amp;amp;style=flat-square&#34; alt=&#34;Project Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pixi.sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/prefix-dev/pixi/main/assets/badge/v0.json&amp;amp;style=flat-square&#34; alt=&#34;Pixi Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; &#xA;&lt;h1&gt;pixi: Package Management Made Easy&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pixi&lt;/code&gt; is a cross-platform, multi-language package manager and workflow tool built on the foundation of the conda ecosystem. It provides developers with an exceptional experience similar to popular package managers like &lt;code&gt;cargo&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;, but for any language.&lt;/p&gt; &#xA;&lt;p&gt;Developed with ‚ù§Ô∏è at &lt;a href=&#34;https://prefix.dev&#34;&gt;prefix.dev&lt;/a&gt;. &lt;a href=&#34;https://asciinema.org/a/636482&#34;&gt;&lt;img src=&#34;https://github.com/prefix-dev/pixi/assets/12893423/0fc8f8c8-ac13-4c14-891b-dc613f25475b&#34; alt=&#34;Real-time pixi_demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports &lt;strong&gt;multiple languages&lt;/strong&gt; including Python, C++, and R using Conda packages. You can find available packages on &lt;a href=&#34;https://prefix.dev&#34;&gt;prefix.dev&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with all major operating systems: Linux, Windows, macOS (including Apple Silicon).&lt;/li&gt; &#xA; &lt;li&gt;Always includes an up-to-date &lt;strong&gt;lockfile&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Provides a clean and simple Cargo-like &lt;strong&gt;command-line interface&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Allows you to install tools &lt;strong&gt;per-project&lt;/strong&gt; or &lt;strong&gt;system-wide&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Entirely written in &lt;strong&gt;Rust&lt;/strong&gt; and built on top of the &lt;strong&gt;&lt;a href=&#34;https://github.com/mamba-org/rattler&#34;&gt;rattler&lt;/a&gt;&lt;/strong&gt; library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ö° &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;a href=&#34;https://pixi.sh/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üòç &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üî® &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/#built-using-pixi&#34;&gt;Built using Pixi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üöÄ &lt;a href=&#34;https://github.com/prefix-dev/setup-pixi&#34;&gt;GitHub Action&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is currently in the &lt;em&gt;alpha stage&lt;/em&gt;. It&#39;s actively under development, and we&#39;re planning to add many more features. The file formats are still subject to change, and you should expect breaking changes as we work towards a v1.0.&lt;/p&gt; &#xA;&lt;p&gt;Some notable features we have in the pipeline are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build and publish&lt;/strong&gt; your project as a Conda package.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;PyPi packages&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;dependencies from source&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Improvements to documentation, examples, and user experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pixi&lt;/code&gt; can be installed on macOS, Linux, and Windows. The provided scripts will automatically download the latest version of &lt;code&gt;pixi&lt;/code&gt;, extract it, and move the &lt;code&gt;pixi&lt;/code&gt; binary to &lt;code&gt;~/.pixi/bin&lt;/code&gt;. If this directory does not exist, the script will create it.&lt;/p&gt; &#xA;&lt;h3&gt;macOS and Linux&lt;/h3&gt; &#xA;&lt;p&gt;To install Pixi on macOS and Linux, open a terminal and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://pixi.sh/install.sh | bash&#xA;# or with brew&#xA;brew install pixi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will also update your ~/.bash_profile to include ~/.pixi/bin in your PATH, allowing you to invoke the pixi command from anywhere. You might need to restart your terminal or source your shell for the changes to take effect.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;To install Pixi on Windows, open a PowerShell terminal (you may need to run it as an administrator) and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;iwr -useb https://pixi.sh/install.ps1 | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will inform you once the installation is successful and add the ~/.pixi/bin directory to your PATH, which will allow you to run the pixi command from any location. Or with &lt;code&gt;winget&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;winget install prefix-dev.pixi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Autocompletion&lt;/h3&gt; &#xA;&lt;p&gt;To get autocompletion run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On unix (MacOS or Linux), pick your shell (use `echo $SHELL` to find the shell you are using.):&#xA;echo &#39;eval &#34;$(pixi completion --shell bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;eval &#34;$(pixi completion --shell zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;pixi completion --shell fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;echo &#39;eval (pixi completion --shell elvish | slurp)&#39; &amp;gt;&amp;gt; ~/.elvish/rc.elv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For PowerShell on Windows, run the following command and then restart the shell or source the shell config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;Add-Content -Path $PROFILE -Value &#39;(&amp;amp; pixi completion --shell powershell) | Out-String | Invoke-Expression&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then restart the shell or source the shell config file.&lt;/p&gt; &#xA;&lt;h3&gt;Distro Packages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/pixi/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/pixi.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;pixi&lt;/code&gt; from the &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/pixi/&#34;&gt;extra repository&lt;/a&gt; using &lt;a href=&#34;https://wiki.archlinux.org/title/Pacman&#34;&gt;pacman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pacman -S pixi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Alpine Linux&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;pixi&lt;/code&gt; is available for &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=pixi&amp;amp;branch=edge&#34;&gt;Alpine Edge&lt;/a&gt;. It can be installed via &lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Alpine_Package_Keeper&#34;&gt;apk&lt;/a&gt; after enabling the &lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Repositories&#34;&gt;testing repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apk add pixi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build/install from source&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pixi&lt;/code&gt; is 100% written in Rust and therefore it can be installed, built and tested with cargo. To start using &lt;code&gt;pixi&lt;/code&gt; from a source build run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install --locked pixi&#xA;# Or to use the the latest `main` branch&#xA;cargo install --locked --git https://github.com/prefix-dev/pixi.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or when you want to make changes use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo build&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any issues building because of the dependency on &lt;code&gt;rattler&lt;/code&gt; checkout it&#39;s &lt;a href=&#34;https://github.com/mamba-org/rattler/tree/main#give-it-a-try&#34;&gt;compile steps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall the pixi binary should be removed. Delete &lt;code&gt;pixi&lt;/code&gt; from the &lt;code&gt;$PIXI_DIR&lt;/code&gt; which is default to &lt;code&gt;~/.pixi/bin/pixi&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;So on Linux its:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm ~/.pixi/bin/pixi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$PIXI_BIN = &#34;$Env:LocalAppData\pixi\bin\pixi&#34;; Remove-Item -Path $PIXI_BIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this command you can still use the tools you installed with &lt;code&gt;pixi&lt;/code&gt;. To remove these as well just remove the whole &lt;code&gt;~/.pixi&lt;/code&gt; directory and remove the directory from your path.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The cli looks as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ûú pixi&#xA;A package management and workflow tool&#xA;&#xA;Usage: pixi [OPTIONS] &amp;lt;COMMAND&amp;gt;&#xA;&#xA;Commands:&#xA;  completion  Generates a completion script for a shell&#xA;  init        Creates a new project&#xA;  add         Adds a dependency to the project&#xA;  run         Runs task in project&#xA;  shell       Start a shell in the pixi environment of the project&#xA;  global      Global is the main entry point for the part of pixi that executes on the global(system) level&#xA;  auth        Login to prefix.dev or anaconda.org servers to access private channels&#xA;  install     Install all dependencies&#xA;  task        Command management in project&#xA;  info        Information about the system and project&#xA;  upload      Upload a package to a prefix.dev channel&#xA;  search      Search a package, output will list the latest version of package&#xA;  project&#xA;  help        Print this message or the help of the given subcommand(s)&#xA;&#xA;Options:&#xA;  -v, --verbose...     More output per occurrence&#xA;  -q, --quiet...       Less output per occurrence&#xA;      --color &amp;lt;COLOR&amp;gt;  Whether the log needs to be colored [default: auto] [possible values: always, never, auto]&#xA;  -h, --help           Print help&#xA;  -V, --version        Print version&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating a pixi project&lt;/h2&gt; &#xA;&lt;p&gt;Initialize a new project and navigate to the project directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pixi init myproject&#xA;cd myproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the dependencies you want to use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pixi add cowpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the installed package in its environment&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pixi run cowpy &#34;Thanks for using pixi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Activate a shell in the environment&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pixi shell&#xA;cowpy &#34;Thanks for using pixi&#34;&#xA;exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing a conda package globally&lt;/h2&gt; &#xA;&lt;p&gt;You can also globally install conda packages into their own environment. This behavior is similar to &lt;a href=&#34;https://github.com/pypa/pipx&#34;&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/mariusvniekerk/condax&#34;&gt;&lt;code&gt;condax&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pixi global install cowpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use in GitHub Actions&lt;/h2&gt; &#xA;&lt;p&gt;You can use pixi in GitHub Actions to install dependencies and run commands. It supports automatic caching of your environments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- uses: prefix-dev/setup-pixi@v0.5.1&#xA;- run: pixi run cowpy &#34;Thanks for using pixi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://pixi.sh/latest/advanced/github_actions&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing üòç&lt;/h2&gt; &#xA;&lt;p&gt;We would absolutely love for you to contribute to &lt;code&gt;pixi&lt;/code&gt;! Whether you want to start an issue, fix a bug you encountered, or suggest an improvement, every contribution is greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re just getting started with our project or stepping into the Rust ecosystem for the first time, we&#39;ve got your back! We recommend beginning with issues labeled as &lt;code&gt;good first issue&lt;/code&gt;. These are carefully chosen tasks that provide a smooth entry point into contributing.These issues are typically more straightforward and are a great way to get familiar with the project.&lt;/p&gt; &#xA;&lt;p&gt;Got questions or ideas, or just want to chat? Join our lively conversations on Discord. We&#39;re very active and would be happy to welcome you to our community. &lt;a href=&#34;https://discord.gg/kKV8ZxyzY4&#34;&gt;Join our discord server today!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;pixibuilt&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Built using pixi&lt;/h2&gt; &#xA;&lt;p&gt;To see what&#39;s being built with &lt;code&gt;pixi&lt;/code&gt; check out the &lt;a href=&#34;https://raw.githubusercontent.com/prefix-dev/pixi/main/docs/Community.md&#34;&gt;Community&lt;/a&gt; page.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ast-grep/ast-grep</title>
    <updated>2024-03-24T01:53:09Z</updated>
    <id>tag:github.com,2024-03-24:/ast-grep/ast-grep</id>
    <link href="https://github.com/ast-grep/ast-grep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö°A CLI tool for code structural search, lint and rewriting. Written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://ast-grep.github.io/logo.svg?sanitize=true&#34; alt=&#34;ast-grep&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/ast-grep/ast-grep/actions/workflows/coverage.yaml/badge.svg?sanitize=true&#34; alt=&#34;coverage badge&#34;&gt; &lt;a href=&#34;https://app.codecov.io/gh/ast-grep/ast-grep&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ast-grep/ast-grep/branch/main/graph/badge.svg?token=37VX8H2EWV&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/4YZjf6htSQ&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1107749847722889217?label=Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/ast-grep/versions&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Repology&#34; src=&#34;https://repology.org/badge/tiny-repos/ast-grep.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/ast-grep/ast-grep?style=social&#34; alt=&#34;Badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/ast-grep/ast-grep?style=social&#34; alt=&#34;Badge&#34;&gt; &lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/HerringtonDarkholme?style=social&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;ast-grep(sg)&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep(sg) is a CLI tool for code structural search, lint, and rewriting.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep is an AST-based tool to search code by pattern code. Think it as your old-friend &lt;code&gt;grep&lt;/code&gt; but it matches AST nodes instead of text. You can write patterns as if you are writing ordinary code. It will match all code that has the same syntactical structure. You can use &lt;code&gt;$&lt;/code&gt; sign + upper case letters as wildcard, e.g. &lt;code&gt;$MATCH&lt;/code&gt;, to match any single AST node. Think it as REGEX dot &lt;code&gt;.&lt;/code&gt;, except it is not textual.&lt;/p&gt; &#xA;&lt;p&gt;Try the &lt;a href=&#34;https://ast-grep.github.io/playground.html&#34;&gt;online playground&lt;/a&gt; for a taste!&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ast-grep.github.io/image/search-replace.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See more screenshots on the &lt;a href=&#34;https://ast-grep.github.io/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install it from &lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;npm&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/&#34;&gt;pip&lt;/a&gt;, &lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;cargo&lt;/a&gt;, &lt;a href=&#34;https://brew.sh/&#34;&gt;homebrew&lt;/a&gt;, &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt; or &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --global @ast-grep/cli&#xA;pip install ast-grep-cli&#xA;cargo install ast-grep&#xA;&#xA;# install via homebrew, thank @henryhchchc&#xA;brew install ast-grep&#xA;&#xA;# install via scoop, thank @brian6932&#xA;scoop install main/ast-grep&#xA;&#xA;# install via MacPorts&#xA;sudo port install ast-grep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can build ast-grep from source. You need install rustup, clone the repository and then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --path ./crates/cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/ast-grep/versions&#34;&gt;Packages&lt;/a&gt; are available on other platforms too.&lt;/p&gt; &#xA;&lt;h2&gt;Command line usage example&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep has following form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sg --pattern &#39;var code = $PATTERN&#39; --rewrite &#39;let code = new $PATTERN&#39; --lang ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Hchan_mgn/status/1547061516993699841?s=20&amp;amp;t=ldDoj4U2nq-FRKQkU5GWXA&#34;&gt;Rewrite code in null coalescing operator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sg -p &#39;$A &amp;amp;&amp;amp; $A()&#39; -l ts -r &#39;$A?.()&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Hchan_mgn/status/1561802312846278657&#34;&gt;Rewrite&lt;/a&gt; &lt;a href=&#34;https://github.com/ecyrbe/zodios#migrate-to-v8&#34;&gt;Zodios&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sg -p &#39;new Zodios($URL,  $CONF as const,)&#39; -l ts -r &#39;new Zodios($URL, $CONF)&#39; -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Hchan_mgn/status/1560108625460355073&#34;&gt;Implement eslint rule using YAML.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HerringtonDarkholme/sponsors/main/sponsorkit/sponsors.svg?sanitize=true&#34; alt=&#34;Sponsors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you find ast-grep interesting and useful for your work, please &lt;a href=&#34;https://github.com/sponsors/HerringtonDarkholme&#34;&gt;buy me a coffee&lt;/a&gt; so I can spend more time on the project!&lt;/p&gt; &#xA;&lt;h2&gt;Feature Highlight&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep&#39;s core is an algorithm to search and replace code based on abstract syntax tree produced by tree-sitter. It can help you to do lightweight static analysis and massive scale code manipulation in an intuitive way.&lt;/p&gt; &#xA;&lt;p&gt;Key highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An intuitive pattern to find and replace AST. ast-grep&#39;s pattern looks like ordinary code you would write every day (you could say the pattern is isomorphic to code).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;jQuery like API for AST traversal and manipulation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;YAML configuration to write new linting rules or code modification.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Written in compiled language, with tree-sitter based parsing and utilizing multiple cores.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Beautiful command line interface :)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ast-grep&#39;s vision is to democratize abstract syntax tree magic and to liberate one from cumbersome AST programming!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are an open source library author, ast-grep can help your library users adopt breaking changes more easily.&lt;/li&gt; &#xA; &lt;li&gt;if you are a tech lead in your team, ast-grep can help you enforce code best practice tailored to your business need.&lt;/li&gt; &#xA; &lt;li&gt;If you are a security researcher, ast-grep can help you write rules much faster.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>