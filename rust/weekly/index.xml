<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T02:04:43Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tokio-rs/prost</title>
    <updated>2023-08-27T02:04:43Z</updated>
    <id>tag:github.com,2023-08-27:/tokio-rs/prost</id>
    <link href="https://github.com/tokio-rs/prost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PROST! a Protocol Buffers implementation for the Rust Language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/tokio-rs/prost/workflows/continuous%20integration/badge.svg?sanitize=true&#34; alt=&#34;continuous integration&#34;&gt; &lt;a href=&#34;https://docs.rs/prost/&#34;&gt;&lt;img src=&#34;https://docs.rs/prost/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/prost&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/prost.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/tokio-rs/prost&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/tokio-rs/prost/status.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/500028886025895936&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;PROST!&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; is a &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt; implementation for the &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust Language&lt;/a&gt;. &lt;code&gt;prost&lt;/code&gt; generates simple, idiomatic Rust code from &lt;code&gt;proto2&lt;/code&gt; and &lt;code&gt;proto3&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;Compared to other Protocol Buffers implementations, &lt;code&gt;prost&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generates simple, idiomatic, and readable Rust types by taking advantage of Rust &lt;code&gt;derive&lt;/code&gt; attributes.&lt;/li&gt; &#xA; &lt;li&gt;Retains comments from &lt;code&gt;.proto&lt;/code&gt; files in generated Rust code.&lt;/li&gt; &#xA; &lt;li&gt;Allows existing Rust types (not generated from a &lt;code&gt;.proto&lt;/code&gt;) to be serialized and deserialized by adding attributes.&lt;/li&gt; &#xA; &lt;li&gt;Uses the &lt;a href=&#34;https://github.com/carllerche/bytes&#34;&gt;&lt;code&gt;bytes::{Buf, BufMut}&lt;/code&gt;&lt;/a&gt; abstractions for serialization instead of &lt;code&gt;std::io::{Read, Write}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Respects the Protobuf &lt;code&gt;package&lt;/code&gt; specifier when organizing generated code into Rust modules.&lt;/li&gt; &#xA; &lt;li&gt;Preserves unknown enum values during deserialization.&lt;/li&gt; &#xA; &lt;li&gt;Does not include support for runtime reflection or message descriptors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;prost&lt;/code&gt; in a Cargo Project&lt;/h2&gt; &#xA;&lt;p&gt;First, add &lt;code&gt;prost&lt;/code&gt; and its public dependencies to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ignore&#34;&gt;[dependencies]&#xA;prost = &#34;0.11&#34;&#xA;# Only necessary if using Protobuf well-known types:&#xA;prost-types = &#34;0.11&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recommended way to add &lt;code&gt;.proto&lt;/code&gt; compilation to a Cargo project is to use the &lt;code&gt;prost-build&lt;/code&gt; library. See the &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/prost/master/prost-build&#34;&gt;&lt;code&gt;prost-build&lt;/code&gt; documentation&lt;/a&gt; for more details and examples.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/danburkert/snazzy&#34;&gt;snazzy repository&lt;/a&gt; for a simple start-to-finish example.&lt;/p&gt; &#xA;&lt;h3&gt;MSRV&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; follows the &lt;code&gt;tokio-rs&lt;/code&gt; projects MSRV model and supports 1.60. For more information on the tokio msrv policy you can check it out &lt;a href=&#34;https://github.com/tokio-rs/tokio/#supported-rust-versions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Generated Code&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; generates Rust code from source &lt;code&gt;.proto&lt;/code&gt; files using the &lt;code&gt;proto2&lt;/code&gt; or &lt;code&gt;proto3&lt;/code&gt; syntax. &lt;code&gt;prost&lt;/code&gt;&#39;s goal is to make the generated code as simple as possible.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;prost-build&lt;/code&gt; v0.11 release, &lt;code&gt;protoc&lt;/code&gt; will be required to invoke &lt;code&gt;compile_protos&lt;/code&gt; (unless &lt;code&gt;skip_protoc&lt;/code&gt; is enabled). Prost will no longer provide bundled a &lt;code&gt;protoc&lt;/code&gt; or attempt to compile &lt;code&gt;protoc&lt;/code&gt; for users. For install instructions for &lt;code&gt;protoc&lt;/code&gt; please check out the &lt;a href=&#34;https://github.com/protocolbuffers/protobuf#protocol-compiler-installation&#34;&gt;protobuf install&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;p&gt;Prost can now generate code for &lt;code&gt;.proto&lt;/code&gt; files that don&#39;t have a package spec. &lt;code&gt;prost&lt;/code&gt; will translate the Protobuf package into a Rust module. For example, given the &lt;code&gt;package&lt;/code&gt; specifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;package foo.bar;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All Rust types generated from the file will be in the &lt;code&gt;foo::bar&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h3&gt;Messages&lt;/h3&gt; &#xA;&lt;p&gt;Given a simple message declaration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;// Sample message.&#xA;message Foo {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; will generate the following Rust struct:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;/// Sample message.&#xA;#[derive(Clone, Debug, PartialEq, Message)]&#xA;pub struct Foo {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fields&lt;/h3&gt; &#xA;&lt;p&gt;Fields in Protobuf messages are translated into Rust as public struct fields of the corresponding type.&lt;/p&gt; &#xA;&lt;h4&gt;Scalar Values&lt;/h4&gt; &#xA;&lt;p&gt;Scalar value types are converted as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Protobuf Type&lt;/th&gt; &#xA;   &lt;th&gt;Rust Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;f32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uint32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uint64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sint32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sint64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fixed32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fixed64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;u64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sfixed32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sfixed64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Enumerations&lt;/h4&gt; &#xA;&lt;p&gt;All &lt;code&gt;.proto&lt;/code&gt; enumeration types convert to the Rust &lt;code&gt;i32&lt;/code&gt; type. Additionally, each enumeration type gets a corresponding Rust &lt;code&gt;enum&lt;/code&gt; type. For example, this &lt;code&gt;proto&lt;/code&gt; enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;enum PhoneType {&#xA;  MOBILE = 0;&#xA;  HOME = 1;&#xA;  WORK = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gets this corresponding Rust enum [^1]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;pub enum PhoneType {&#xA;    Mobile = 0,&#xA;    Home = 1,&#xA;    Work = 2,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^1]: Annotations have been elided for clarity. See below for a full example.&lt;/p&gt; &#xA;&lt;p&gt;You can convert a &lt;code&gt;PhoneType&lt;/code&gt; value to an &lt;code&gt;i32&lt;/code&gt; by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;PhoneType::Mobile as i32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;#[derive(::prost::Enumeration)]&lt;/code&gt; annotation added to the generated &lt;code&gt;PhoneType&lt;/code&gt; adds these associated functions to the type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;impl PhoneType {&#xA;    pub fn is_valid(value: i32) -&amp;gt; bool { ... }&#xA;    #[deprecated]&#xA;    pub fn from_i32(value: i32) -&amp;gt; Option&amp;lt;PhoneType&amp;gt; { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also adds an &lt;code&gt;impl TryFrom&amp;lt;i32&amp;gt; for PhoneType&lt;/code&gt;, so you can convert an &lt;code&gt;i32&lt;/code&gt; to its corresponding &lt;code&gt;PhoneType&lt;/code&gt; value by doing, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;let phone_type = 2i32;&#xA;&#xA;match PhoneType::try_from(phone_type) {&#xA;    Ok(PhoneType::Mobile) =&amp;gt; ...,&#xA;    Ok(PhoneType::Home) =&amp;gt; ...,&#xA;    Ok(PhoneType::Work) =&amp;gt; ...,&#xA;    Err(_) =&amp;gt; ...,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, wherever a &lt;code&gt;proto&lt;/code&gt; enum is used as a field in a &lt;code&gt;Message&lt;/code&gt;, the message will have &#39;accessor&#39; methods to get/set the value of the field as the Rust enum type. For instance, this proto &lt;code&gt;PhoneNumber&lt;/code&gt; message that has a field named &lt;code&gt;type&lt;/code&gt; of type &lt;code&gt;PhoneType&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;message PhoneNumber {&#xA;  string number = 1;&#xA;  PhoneType type = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become the following Rust type [^2] with methods &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;set_type&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;pub struct PhoneNumber {&#xA;    pub number: String,&#xA;    pub r#type: i32, // the `r#` is needed because `type` is a Rust keyword&#xA;}&#xA;&#xA;impl PhoneNumber {&#xA;    pub fn r#type(&amp;amp;self) -&amp;gt; PhoneType { ... }&#xA;    pub fn set_type(&amp;amp;mut self, value: PhoneType) { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the getter methods will return the Rust enum&#39;s default value if the field has an invalid &lt;code&gt;i32&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;enum&lt;/code&gt; type isn&#39;t used directly as a field, because the Protobuf spec mandates that enumerations values are &#39;open&#39;, and decoding unrecognized enumeration values must be possible.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: Annotations have been elided for clarity. See below for a full example.&lt;/p&gt; &#xA;&lt;h4&gt;Field Modifiers&lt;/h4&gt; &#xA;&lt;p&gt;Protobuf scalar value and enumeration message fields can have a modifier depending on the Protobuf version. Modifiers change the corresponding type of the Rust field:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;.proto&lt;/code&gt; Version&lt;/th&gt; &#xA;   &lt;th&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Rust Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;optional&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;default&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;T&lt;/code&gt; for scalar types, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;optional&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;proto2&lt;/code&gt;/&lt;code&gt;proto3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;repeated&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that in &lt;code&gt;proto3&lt;/code&gt; the default representation for all user-defined message types is &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, and for scalar types just &lt;code&gt;T&lt;/code&gt; (during decoding, a missing value is populated by &lt;code&gt;T::default()&lt;/code&gt;). If you need a witness of the presence of a scalar type &lt;code&gt;T&lt;/code&gt;, use the &lt;code&gt;optional&lt;/code&gt; modifier to enforce an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; representation in the generated Rust struct.&lt;/p&gt; &#xA;&lt;h4&gt;Map Fields&lt;/h4&gt; &#xA;&lt;p&gt;Map fields are converted to a Rust &lt;code&gt;HashMap&lt;/code&gt; with key and value type converted from the Protobuf key and value types.&lt;/p&gt; &#xA;&lt;h4&gt;Message Fields&lt;/h4&gt; &#xA;&lt;p&gt;Message fields are converted to the corresponding struct type. The table of field modifiers above applies to message fields, except that &lt;code&gt;proto3&lt;/code&gt; message fields without a modifier (the default) will be wrapped in an &lt;code&gt;Option&lt;/code&gt;. Typically message fields are unboxed. &lt;code&gt;prost&lt;/code&gt; will automatically box a message field if the field type and the parent type are recursively nested in order to avoid an infinite sized struct.&lt;/p&gt; &#xA;&lt;h4&gt;Oneof Fields&lt;/h4&gt; &#xA;&lt;p&gt;Oneof fields convert to a Rust enum. Protobuf &lt;code&gt;oneof&lt;/code&gt;s types are not named, so &lt;code&gt;prost&lt;/code&gt; uses the name of the &lt;code&gt;oneof&lt;/code&gt; field for the resulting Rust enum, and defines the enum in a module under the struct. For example, a &lt;code&gt;proto3&lt;/code&gt; message such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;message Foo {&#xA;  oneof widget {&#xA;    int32 quux = 1;&#xA;    string bar = 2;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generates the following Rust[^3]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;pub struct Foo {&#xA;    pub widget: Option&amp;lt;foo::Widget&amp;gt;,&#xA;}&#xA;pub mod foo {&#xA;    pub enum Widget {&#xA;        Quux(i32),&#xA;        Bar(String),&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;oneof&lt;/code&gt; fields are always wrapped in an &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[^3]: Annotations have been elided for clarity. See below for a full example.&lt;/p&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;prost-build&lt;/code&gt; allows a custom code-generator to be used for processing &lt;code&gt;service&lt;/code&gt; definitions. This can be used to output Rust traits according to an application&#39;s specific needs.&lt;/p&gt; &#xA;&lt;h3&gt;Generated Code Example&lt;/h3&gt; &#xA;&lt;p&gt;Example &lt;code&gt;.proto&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf,ignore&#34;&gt;syntax = &#34;proto3&#34;;&#xA;package tutorial;&#xA;&#xA;message Person {&#xA;  string name = 1;&#xA;  int32 id = 2;  // Unique ID number for this person.&#xA;  string email = 3;&#xA;&#xA;  enum PhoneType {&#xA;    MOBILE = 0;&#xA;    HOME = 1;&#xA;    WORK = 2;&#xA;  }&#xA;&#xA;  message PhoneNumber {&#xA;    string number = 1;&#xA;    PhoneType type = 2;&#xA;  }&#xA;&#xA;  repeated PhoneNumber phones = 4;&#xA;}&#xA;&#xA;// Our address book file is just one of these.&#xA;message AddressBook {&#xA;  repeated Person people = 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the generated Rust code (&lt;code&gt;tutorial.rs&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;#[derive(Clone, PartialEq, ::prost::Message)]&#xA;pub struct Person {&#xA;    #[prost(string, tag=&#34;1&#34;)]&#xA;    pub name: ::prost::alloc::string::String,&#xA;    /// Unique ID number for this person.&#xA;    #[prost(int32, tag=&#34;2&#34;)]&#xA;    pub id: i32,&#xA;    #[prost(string, tag=&#34;3&#34;)]&#xA;    pub email: ::prost::alloc::string::String,&#xA;    #[prost(message, repeated, tag=&#34;4&#34;)]&#xA;    pub phones: ::prost::alloc::vec::Vec&amp;lt;person::PhoneNumber&amp;gt;,&#xA;}&#xA;/// Nested message and enum types in `Person`.&#xA;pub mod person {&#xA;    #[derive(Clone, PartialEq, ::prost::Message)]&#xA;    pub struct PhoneNumber {&#xA;        #[prost(string, tag=&#34;1&#34;)]&#xA;        pub number: ::prost::alloc::string::String,&#xA;        #[prost(enumeration=&#34;PhoneType&#34;, tag=&#34;2&#34;)]&#xA;        pub r#type: i32,&#xA;    }&#xA;    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]&#xA;    #[repr(i32)]&#xA;    pub enum PhoneType {&#xA;        Mobile = 0,&#xA;        Home = 1,&#xA;        Work = 2,&#xA;    }&#xA;}&#xA;/// Our address book file is just one of these.&#xA;#[derive(Clone, PartialEq, ::prost::Message)]&#xA;pub struct AddressBook {&#xA;    #[prost(message, repeated, tag=&#34;1&#34;)]&#xA;    pub people: ::prost::alloc::vec::Vec&amp;lt;Person&amp;gt;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing the &lt;code&gt;protoc&lt;/code&gt; &lt;code&gt;FileDescriptorSet&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;prost_build::Config::file_descriptor_set_path&lt;/code&gt; option can be used to emit a file descriptor set during the build &amp;amp; code generation step. When used in conjunction with the &lt;code&gt;std::include_bytes&lt;/code&gt; macro and the &lt;code&gt;prost_types::FileDescriptorSet&lt;/code&gt; type, applications and libraries using Prost can implement introspection capabilities requiring details from the original &lt;code&gt;.proto&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;prost&lt;/code&gt; in a &lt;code&gt;no_std&lt;/code&gt; Crate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; is compatible with &lt;code&gt;no_std&lt;/code&gt; crates. To enable &lt;code&gt;no_std&lt;/code&gt; support, disable the &lt;code&gt;std&lt;/code&gt; features in &lt;code&gt;prost&lt;/code&gt; and &lt;code&gt;prost-types&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ignore&#34;&gt;[dependencies]&#xA;prost = { version = &#34;0.6&#34;, default-features = false, features = [&#34;prost-derive&#34;] }&#xA;# Only necessary if using Protobuf well-known types:&#xA;prost-types = { version = &#34;0.6&#34;, default-features = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, configure &lt;code&gt;prost-build&lt;/code&gt; to output &lt;code&gt;BTreeMap&lt;/code&gt;s instead of &lt;code&gt;HashMap&lt;/code&gt;s for all Protobuf &lt;code&gt;map&lt;/code&gt; fields in your &lt;code&gt;build.rs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;let mut config = prost_build::Config::new();&#xA;config.btree_map(&amp;amp;[&#34;.&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using edition 2015, it may be necessary to add an &lt;code&gt;extern crate core;&lt;/code&gt; directive to the crate which includes &lt;code&gt;prost&lt;/code&gt;-generated code.&lt;/p&gt; &#xA;&lt;h2&gt;Serializing Existing Types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; uses a custom derive macro to handle encoding and decoding types, which means that if your existing Rust type is compatible with Protobuf types, you can serialize and deserialize it by adding the appropriate derive and field annotations.&lt;/p&gt; &#xA;&lt;p&gt;Currently the best documentation on adding annotations is to look at the generated code examples above.&lt;/p&gt; &#xA;&lt;h3&gt;Tag Inference for Existing Types&lt;/h3&gt; &#xA;&lt;p&gt;Prost automatically infers tags for the struct.&lt;/p&gt; &#xA;&lt;p&gt;Fields are tagged sequentially in the order they are specified, starting with &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may skip tags which have been reserved, or where there are gaps between sequentially occurring tag values by specifying the tag number to skip to with the &lt;code&gt;tag&lt;/code&gt; attribute on the first field after the gap. The following fields will be tagged sequentially starting from the next number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;use prost;&#xA;use prost::{Enumeration, Message};&#xA;&#xA;#[derive(Clone, PartialEq, Message)]&#xA;struct Person {&#xA;    #[prost(string, tag = &#34;1&#34;)]&#xA;    pub id: String, // tag=1&#xA;    // NOTE: Old &#34;name&#34; field has been removed&#xA;    // pub name: String, // tag=2 (Removed)&#xA;    #[prost(string, tag = &#34;6&#34;)]&#xA;    pub given_name: String, // tag=6&#xA;    #[prost(string)]&#xA;    pub family_name: String, // tag=7&#xA;    #[prost(string)]&#xA;    pub formatted_name: String, // tag=8&#xA;    #[prost(uint32, tag = &#34;3&#34;)]&#xA;    pub age: u32, // tag=3&#xA;    #[prost(uint32)]&#xA;    pub height: u32, // tag=4&#xA;    #[prost(enumeration = &#34;Gender&#34;)]&#xA;    pub gender: i32, // tag=5&#xA;    // NOTE: Skip to less commonly occurring fields&#xA;    #[prost(string, tag = &#34;16&#34;)]&#xA;    pub name_prefix: String, // tag=16  (eg. mr/mrs/ms)&#xA;    #[prost(string)]&#xA;    pub name_suffix: String, // tag=17  (eg. jr/esq)&#xA;    #[prost(string)]&#xA;    pub maiden_name: String, // tag=18&#xA;}&#xA;&#xA;#[derive(Clone, Copy, Debug, PartialEq, Eq, Enumeration)]&#xA;pub enum Gender {&#xA;    Unknown = 0,&#xA;    Female = 1,&#xA;    Male = 2,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nix&lt;/h2&gt; &#xA;&lt;p&gt;The prost project maintains flakes support for local development. Once you have nix and nix flakes setup you can just run &lt;code&gt;nix develop&lt;/code&gt; to get a shell configured with the required dependencies to compile the whole project.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Could &lt;code&gt;prost&lt;/code&gt; be implemented as a serializer for &lt;a href=&#34;https://serde.rs/&#34;&gt;Serde&lt;/a&gt;?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Probably not, however I would like to hear from a Serde expert on the matter. There are two complications with trying to serialize Protobuf messages with Serde:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protobuf fields require a numbered tag, and currently there appears to be no mechanism suitable for this in &lt;code&gt;serde&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The mapping of Protobuf type to Rust type is not 1-to-1. As a result, trait-based approaches to dispatching don&#39;t work very well. Example: six different Protobuf field types correspond to a Rust &lt;code&gt;Vec&amp;lt;i32&amp;gt;&lt;/code&gt;: &lt;code&gt;repeated int32&lt;/code&gt;, &lt;code&gt;repeated sint32&lt;/code&gt;, &lt;code&gt;repeated sfixed32&lt;/code&gt;, and their packed counterparts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But it is possible to place &lt;code&gt;serde&lt;/code&gt; derive tags onto the generated types, so the same structure can support both &lt;code&gt;prost&lt;/code&gt; and &lt;code&gt;Serde&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;I get errors when trying to run &lt;code&gt;cargo test&lt;/code&gt; on MacOS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If the errors are about missing &lt;code&gt;autoreconf&lt;/code&gt; or similar, you can probably fix them by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ignore&#34;&gt;brew install automake&#xA;brew install libtool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prost&lt;/code&gt; is distributed under the terms of the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/tokio-rs/prost/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2022 Dan Burkert &amp;amp; Tokio Contributors&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>systeminit/si</title>
    <updated>2023-08-27T02:04:43Z</updated>
    <id>tag:github.com,2023-08-27:/systeminit/si</id>
    <link href="https://github.com/systeminit/si" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The System Initiative software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;System Initiative&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/system-init&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-gray?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/system-initiative&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/build%20dashboard-gray?style=for-the-badge&amp;amp;logo=buildkite&amp;amp;logoColor=white&#34; alt=&#34;Build dashboard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/system-initiative/si-merge-main&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/ecdbcb0ae243a74976f62a95826ec1fce62707e6fe07e4b973?style=for-the-badge&amp;amp;logo=buildkite&amp;amp;label=main&#34; alt=&#34;Main status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/system-initiative/si-nightly&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/311961055d5366e6b7d0bfb95cc01a513a103e8b39c8a42d33?style=for-the-badge&amp;amp;logo=buildkite&amp;amp;label=nightly&#34; alt=&#34;Nightly status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a monolithic repository containing the System Initiative software.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;System Initiative is a collaborative power tool designed to remove the papercuts from DevOps work. To learn more, read our &lt;a href=&#34;https://www.systeminit.com/blog-second-wave-devops&#34;&gt;&#34;Second Wave DevOps&#34; blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to get System Initiative (SI) up and running, navigate to the installation page on &lt;a href=&#34;https://systeminit.com&#34;&gt;our website&lt;/a&gt; to get started. If you would like to develop locally, follow the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/#local-development-setup&#34;&gt;Local Development Setup&lt;/a&gt; instructions below.&lt;/p&gt; &#xA;&lt;h2&gt;Local Development Setup&lt;/h2&gt; &#xA;&lt;p&gt;Running the System Initiative software locally can be done in a variety of ways, but this abbreviated section will focus on a single method for getting your environment ready to run the stack. For more information and options on running SI locally, see the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/docs/DEVELOPMENT_ENVIRONMENT.md&#34;&gt;development environment documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;(1) Choose a Supported Platform&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s start by choosing an officially supported platform.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Operating System&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x86_64 (amd64)&lt;/td&gt; &#xA;   &lt;td&gt;macOS, Linux, &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL2&lt;/a&gt; (Windows 10/11)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;aarch64 (arm64)&lt;/td&gt; &#xA;   &lt;td&gt;macOS, Linux, &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL2&lt;/a&gt; (Windows 10/11)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Platform Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Apple Silicon systems (i.e. macOS aarch64 (arm64)), Rosetta 2 must be installed (install it with &lt;code&gt;softwareupdate --install-rosetta&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; and Linux with MUSL instead of GNU (e.g. &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt;) will not likely work at this time&lt;/li&gt; &#xA; &lt;li&gt;Systemd may need to be enabled on WSL2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;(2) Install Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install dependencies on your chosen platform.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;1)&lt;/strong&gt; &lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer&#34;&gt;&lt;code&gt;nix&lt;/code&gt; with flakes enabled&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2)&lt;/strong&gt; &lt;code&gt;docker&lt;/code&gt; from &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt; or &lt;a href=&#34;https://docs.docker.com/engine/&#34;&gt;Docker Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;3a)&lt;/strong&gt; &lt;a href=&#34;https://direnv.net&#34;&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt; version &lt;code&gt;&amp;gt;= 2.30&lt;/code&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;3b)&lt;/strong&gt; &lt;a href=&#34;https://direnv.net/docs/hook.html&#34;&gt;&lt;code&gt;direnv&lt;/code&gt; hooked into your shell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For &lt;code&gt;nix&lt;/code&gt;, we highly recommend using the &lt;a href=&#34;https://github.com/DeterminateSystems/nix-installer&#34;&gt;Determinate Nix Installer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;docker&lt;/code&gt;, the Docker Desktop version corresponding to your native architecture should be used. WSL2 users should be able to use either Docker Desktop for WSL2 or Docker Engine inside the WSL2 VM.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;direnv&lt;/code&gt;, you can install it with &lt;a href=&#34;https://direnv.net/docs/installation.html&#34;&gt;your package manager of choice&lt;/a&gt;. However, if you&#39;re unsure which installation method to use or your package manager does not provide a compatible version, you can use &lt;code&gt;nix&lt;/code&gt; itself (e.g. &lt;code&gt;nix profile install nixpkgs#direnv&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We recommend using &lt;a href=&#34;https://direnv.net/docs/hook.html&#34;&gt;the upstream docs for hooking &lt;code&gt;direnv&lt;/code&gt; into your shell&lt;/a&gt;, but here is an example on how to do it on a system where &lt;code&gt;zsh&lt;/code&gt; is the default shell. In this example, the following is added to the end of &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;if [ $(command -v direnv) ]; then&#xA;   eval &#34;$(direnv hook zsh)&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;(3) Enter the Repository Directory&lt;/h3&gt; &#xA;&lt;p&gt;All commands need to be run from the &lt;code&gt;nix&lt;/code&gt; environment. Since &lt;code&gt;direnv&lt;/code&gt; is installed &lt;em&gt;and&lt;/em&gt; hooked into your shell, you can &lt;code&gt;cd&lt;/code&gt; into the repository and &lt;code&gt;nix&lt;/code&gt; will boostrap the environment for you using the flake.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note: you may notice a large download of dependencies when entering the repository for the first time.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;(4) Configure Providers&lt;/h3&gt; &#xA;&lt;p&gt;Configuring providers is optional for using the System Initiative software, but may be required depending on the types of assets used.&lt;/p&gt; &#xA;&lt;p&gt;If you are using AWS assets, authentication with the &lt;code&gt;aws&lt;/code&gt; CLI is required to deploy and manage your infrastructure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aws configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker Hub authentication is not strictly needed if you only access public docker images, but to avoid being rate-limited when qualifying images, we recommend authenticating with the &lt;code&gt;docker&lt;/code&gt; CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(5) Running the Stack&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/facebook/buck2&#34;&gt;&lt;strong&gt;buck2&lt;/strong&gt;&lt;/a&gt; to run the stack, run and build individual services and libraries, perform lints and tests, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Before continuing, you should stop any locally running services to avoid conflicting ports with the stack. Some of the services that will run include, but are not limited to the following: PostgreSQL, NATS, Jaeger and OpenTelemetry.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check if you are ready to run the stack before continuing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:healthcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may notice some checks related to resource limits. On macOS and in WSL2 in particular, we recommend significantly increasing the file descriptor limit for &lt;code&gt;buck2&lt;/code&gt; to work as intended (e.g. &lt;code&gt;ulimit -n 10240&lt;/code&gt;). &lt;em&gt;Please note: the new file descriptor limit may not persist to future sessions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once ready, we can build relevant services and run the entire stack locally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note: if you have used SI before, the following command will delete all contents of the database. Reach out to us &lt;a href=&#34;https://discord.com/invite/system-init&#34;&gt;on Discord&lt;/a&gt; if you have any questions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Tilt starts, you can check on the status of all services by accessing the UI through the given port on your local host (e.g. &lt;a href=&#34;http://localhost:10350/&#34;&gt;http://localhost:10350/&lt;/a&gt;). Every service should eventually have a green checkmark next to them, which ensures that they are in &#34;ready&#34; states.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note: database migrations may take some time to complete.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to learn more on what&#39;s running, check out the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/docs/ARCHITECTURE.md&#34;&gt;Architecture&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;(6) Troubleshooting in Tilt&lt;/h3&gt; &#xA;&lt;p&gt;If some services failed to start, you can restart them on the Tilt dashboard.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A backend service fails (e.g. &lt;code&gt;sdf&lt;/code&gt;): restart them in the following order: &lt;code&gt;veritech&lt;/code&gt;, &lt;code&gt;council&lt;/code&gt;, &lt;code&gt;pinga&lt;/code&gt;, &lt;code&gt;sdf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A frontend service fails (e.g. &lt;code&gt;web&lt;/code&gt;): restart the service individually&lt;/li&gt; &#xA; &lt;li&gt;A dependent service fails (e.g. PostgreSQL): tear down the stack and restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;(7) Tearing Down the Stack&lt;/h3&gt; &#xA;&lt;p&gt;The following command will stop all running services and containers. It will also remove the containers and, consequentially, the data held in them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if you wish to keep your data for later use, you can stop the containers without removing them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buck2 run dev:stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Where Do I Learn More?&lt;/h2&gt; &#xA;&lt;p&gt;For more information on how to use and develop the System Initiative software, talk to us on &lt;a href=&#34;https://discord.com/invite/system-init&#34;&gt;our Discord&lt;/a&gt; and see the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/docs&#34;&gt;docs&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;How Can I Contribute?&lt;/h2&gt; &#xA;&lt;p&gt;To start, we recommend reading the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/#open-source&#34;&gt;Open Source&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/#contributing&#34;&gt;Contributing&lt;/a&gt; sources below. They provide information on licensing, contributor rights, and more.&lt;/p&gt; &#xA;&lt;p&gt;Afterwards, navigate to the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Open Source&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the System Initiative software, covered under the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;, except where noted (any System Initiative logos or trademarks are not covered under the Apache License, and should be explicitly noted by a LICENSE file.)&lt;/p&gt; &#xA;&lt;p&gt;System Initiative is a product produced from this open source software, exclusively by System Initiative, Inc. It is distributed under our commercial terms.&lt;/p&gt; &#xA;&lt;p&gt;Others are allowed to make their own distribution of the software, but they cannot use any of the System Initiative trademarks, cloud services, etc.&lt;/p&gt; &#xA;&lt;p&gt;We explicitly grant permission for you to make a build that includes our trademarks while developing the System Initiative software itself. You may not publish or share the build, and you may not use that build to run System Initiative software for any other purpose.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://systeminit.com/open-source&#34;&gt;learn more about the System Initiative software and Open Source in our FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The System Initiative software is Open Source under the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;, and is the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/NOTICE&#34;&gt;copyright of its contributors&lt;/a&gt;. If you would like to contribute to the software, you must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/CONTRIBUTORS.md&#34;&gt;Contributors&lt;/a&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Agree to the terms by having a commit in your pull request &#34;signing&#34; the file by adding your name and GitHub handle on a new line at the bottom of the file.&lt;/li&gt; &#xA; &lt;li&gt;Make sure your commits Author metadata matches the name and handle you added to the file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This ensures that users, distributors, and other contributors can rely on all the software related to System Initiative being contributed under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/systeminit/si/main/LICENSE&#34;&gt;License&lt;/a&gt;. No contributions will be accepted without following this process.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rust-lang/rust-clippy</title>
    <updated>2023-08-27T02:04:43Z</updated>
    <id>tag:github.com,2023-08-27:/rust-lang/rust-clippy</id>
    <link href="https://github.com/rust-lang/rust-clippy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A bunch of lints to catch common mistakes and improve your Rust code. Book: https://doc.rust-lang.org/clippy/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clippy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test+(bors)%22+event%3Apush+branch%3Aauto&#34;&gt;&lt;img src=&#34;https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test%20(bors)/badge.svg?branch=auto&amp;amp;event=push&#34; alt=&#34;Clippy Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-clippy/master/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/clippy.svg?sanitize=true&#34; alt=&#34;License: MIT OR Apache-2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A collection of lints to catch common mistakes and improve your &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;Rust&lt;/a&gt; code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html&#34;&gt;There are over 650 lints included in this crate!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lints are divided into categories, each with a default &lt;a href=&#34;https://doc.rust-lang.org/rustc/lints/levels.html&#34;&gt;lint level&lt;/a&gt;. You can choose how much Clippy is supposed to &lt;del&gt;annoy&lt;/del&gt; help you by changing the lint level by category.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default level&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all lints that are on by default (correctness, suspicious, style, complexity, perf)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;warn/deny&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::correctness&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;code that is outright wrong or useless&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;deny&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::suspicious&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;code that is most likely wrong or useless&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;warn&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;code that should be written in a more idiomatic way&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;warn&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::complexity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;code that does something simple but in a complex way&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;warn&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::perf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;code that can be written to run faster&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;warn&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::pedantic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lints which are rather strict or have occasional false positives&lt;/td&gt; &#xA;   &lt;td&gt;allow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::restriction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lints which prevent the use of language and library features[^restrict]&lt;/td&gt; &#xA;   &lt;td&gt;allow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::nursery&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;new lints that are still under development&lt;/td&gt; &#xA;   &lt;td&gt;allow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clippy::cargo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lints for the cargo manifest&lt;/td&gt; &#xA;   &lt;td&gt;allow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;More to come, please &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues&#34;&gt;file an issue&lt;/a&gt; if you have ideas!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;restriction&lt;/code&gt; category should, &lt;em&gt;emphatically&lt;/em&gt;, not be enabled as a whole. The contained lints may lint against perfectly reasonable code, may not have an alternative suggestion, and may contradict any other lints (including other categories). Lints should be considered on a case-by-case basis before enabling.&lt;/p&gt; &#xA;&lt;p&gt;[^restrict]: Some use cases for &lt;code&gt;restriction&lt;/code&gt; lints include: - Strict coding styles (e.g. &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else&#34;&gt;&lt;code&gt;clippy::else_if_without_else&lt;/code&gt;&lt;/a&gt;). - Additional restrictions on CI (e.g. &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html#todo&#34;&gt;&lt;code&gt;clippy::todo&lt;/code&gt;&lt;/a&gt;). - Preventing panicking in certain functions (e.g. &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used&#34;&gt;&lt;code&gt;clippy::unwrap_used&lt;/code&gt;&lt;/a&gt;). - Running a lint only on a subset of code (e.g. &lt;code&gt;#[forbid(clippy::float_arithmetic)]&lt;/code&gt; on a module).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Table of contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-clippy/master/#usage&#34;&gt;Usage instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-clippy/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-clippy/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-clippy/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Below are instructions on how to use Clippy as a cargo subcommand, in projects that do not use cargo, or in Travis CI.&lt;/p&gt; &#xA;&lt;h3&gt;As a cargo subcommand (&lt;code&gt;cargo clippy&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;One way to use Clippy is by installing Clippy through rustup as a cargo subcommand.&lt;/p&gt; &#xA;&lt;h4&gt;Step 1: Install Rustup&lt;/h4&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://rustup.rs/&#34;&gt;Rustup&lt;/a&gt; on supported platforms. This will help us install Clippy and its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;If you already have Rustup installed, update to ensure you have the latest Rustup and compiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;rustup update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2: Install Clippy&lt;/h4&gt; &#xA;&lt;p&gt;Once you have rustup and the latest stable release (at least Rust 1.29) installed, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;rustup component add clippy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it says that it can&#39;t find the &lt;code&gt;clippy&lt;/code&gt; component, please run &lt;code&gt;rustup self update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Step 3: Run Clippy&lt;/h4&gt; &#xA;&lt;p&gt;Now you can run Clippy by invoking the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automatically applying Clippy suggestions&lt;/h4&gt; &#xA;&lt;p&gt;Clippy can automatically apply some lint suggestions, just like the compiler. Note that &lt;code&gt;--fix&lt;/code&gt; implies &lt;code&gt;--all-targets&lt;/code&gt;, so it can fix as much code as it can.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy --fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Workspaces&lt;/h4&gt; &#xA;&lt;p&gt;All the usual workspace options should work with Clippy. For example the following command will run Clippy on the &lt;code&gt;example&lt;/code&gt; crate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy -p example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with &lt;code&gt;cargo check&lt;/code&gt;, this includes dependencies that are members of the workspace, like path dependencies. If you want to run Clippy &lt;strong&gt;only&lt;/strong&gt; on the given crate, use the &lt;code&gt;--no-deps&lt;/code&gt; option like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy -p example -- --no-deps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;clippy-driver&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Clippy can also be used in projects that do not use cargo. To do so, run &lt;code&gt;clippy-driver&lt;/code&gt; with the same arguments you use for &lt;code&gt;rustc&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;clippy-driver --edition 2018 -Cpanic=abort foo.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;clippy-driver&lt;/code&gt; is designed for running Clippy only and should not be used as a general replacement for &lt;code&gt;rustc&lt;/code&gt;. &lt;code&gt;clippy-driver&lt;/code&gt; may produce artifacts that are not optimized as expected, for example.&lt;/p&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;You can add Clippy to Travis CI in the same way you use it locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: rust&#xA;rust:&#xA;  - stable&#xA;  - beta&#xA;before_script:&#xA;  - rustup component add clippy&#xA;script:&#xA;  - cargo clippy&#xA;  # if you want the build job to fail when encountering warnings, use&#xA;  - cargo clippy -- -D warnings&#xA;  # in order to also check tests and non-default crate features, use&#xA;  - cargo clippy --all-targets --all-features -- -D warnings&#xA;  - cargo test&#xA;  # etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that adding &lt;code&gt;-D warnings&lt;/code&gt; will cause your build to fail if &lt;strong&gt;any&lt;/strong&gt; warnings are found in your code. That includes warnings found by rustc (e.g. &lt;code&gt;dead_code&lt;/code&gt;, etc.). If you want to avoid this and only cause an error for Clippy warnings, use &lt;code&gt;#![deny(clippy::all)]&lt;/code&gt; in your code or &lt;code&gt;-D clippy::all&lt;/code&gt; on the command line. (You can swap &lt;code&gt;clippy::all&lt;/code&gt; with the specific lint category you are targeting.)&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Allowing/denying lints&lt;/h3&gt; &#xA;&lt;p&gt;You can add options to your code to &lt;code&gt;allow&lt;/code&gt;/&lt;code&gt;warn&lt;/code&gt;/&lt;code&gt;deny&lt;/code&gt; Clippy lints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;the whole set of &lt;code&gt;Warn&lt;/code&gt; lints using the &lt;code&gt;clippy&lt;/code&gt; lint group (&lt;code&gt;#![deny(clippy::all)]&lt;/code&gt;). Note that &lt;code&gt;rustc&lt;/code&gt; has additional &lt;a href=&#34;https://doc.rust-lang.org/rustc/lints/groups.html&#34;&gt;lint groups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;all lints using both the &lt;code&gt;clippy&lt;/code&gt; and &lt;code&gt;clippy::pedantic&lt;/code&gt; lint groups (&lt;code&gt;#![deny(clippy::all)]&lt;/code&gt;, &lt;code&gt;#![deny(clippy::pedantic)]&lt;/code&gt;). Note that &lt;code&gt;clippy::pedantic&lt;/code&gt; contains some very aggressive lints prone to false positives.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;only some lints (&lt;code&gt;#![deny(clippy::single_match, clippy::box_vec)]&lt;/code&gt;, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;allow&lt;/code&gt;/&lt;code&gt;warn&lt;/code&gt;/&lt;code&gt;deny&lt;/code&gt; can be limited to a single function or module using &lt;code&gt;#[allow(...)]&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;allow&lt;/code&gt; means to suppress the lint for your code. With &lt;code&gt;warn&lt;/code&gt; the lint will only emit a warning, while with &lt;code&gt;deny&lt;/code&gt; the lint will emit an error, when triggering for your code. An error causes clippy to exit with an error code, so is useful in scripts like CI/CD.&lt;/p&gt; &#xA;&lt;p&gt;If you do not want to include your lint levels in your code, you can globally enable/disable lints by passing extra flags to Clippy during the run:&lt;/p&gt; &#xA;&lt;p&gt;To allow &lt;code&gt;lint_name&lt;/code&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy -- -A clippy::lint_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to warn on &lt;code&gt;lint_name&lt;/code&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy -- -W clippy::lint_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works with lint groups. For example, you can run Clippy with warnings for all lints enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy -- -W clippy::pedantic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you care only about a single lint, you can allow all others and then explicitly warn on the lint(s) you are interested in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure the behavior of some lints&lt;/h3&gt; &#xA;&lt;p&gt;Some lints can be configured in a TOML file named &lt;code&gt;clippy.toml&lt;/code&gt; or &lt;code&gt;.clippy.toml&lt;/code&gt;. It contains a basic &lt;code&gt;variable = value&lt;/code&gt; mapping e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;avoid-breaking-exported-api = false&#xA;disallowed-names = [&#34;toto&#34;, &#34;tata&#34;, &#34;titi&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://doc.rust-lang.org/nightly/clippy/lint_configuration.html&#34;&gt;table of configurations&lt;/a&gt; contains all config values, their default, and a list of lints they affect. Each &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html#Configuration&#34;&gt;configurable lint&lt;/a&gt; , also contains information about these values.&lt;/p&gt; &#xA;&lt;p&gt;For configurations that are a list type with default values such as &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names&#34;&gt;disallowed-names&lt;/a&gt;, you can use the unique value &lt;code&gt;&#34;..&#34;&lt;/code&gt; to extend the default values instead of replacing them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# default of disallowed-names is [&#34;foo&#34;, &#34;baz&#34;, &#34;quux&#34;]&#xA;disallowed-names = [&#34;bar&#34;, &#34;..&#34;] # -&amp;gt; [&#34;bar&#34;, &#34;foo&#34;, &#34;baz&#34;, &#34;quux&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;clippy.toml&lt;/code&gt; or &lt;code&gt;.clippy.toml&lt;/code&gt; cannot be used to allow/deny lints.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To deactivate the “for further information visit &lt;em&gt;lint-link&lt;/em&gt;” message you can define the &lt;code&gt;CLIPPY_DISABLE_DOCS_LINKS&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the minimum supported Rust version&lt;/h3&gt; &#xA;&lt;p&gt;Projects that intend to support old versions of Rust can disable lints pertaining to newer features by specifying the minimum supported Rust version (MSRV) in the clippy configuration file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;msrv = &#34;1.30.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, the &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field&#34;&gt;&lt;code&gt;rust-version&lt;/code&gt; field&lt;/a&gt; in the &lt;code&gt;Cargo.toml&lt;/code&gt; can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Cargo.toml&#xA;rust-version = &#34;1.30&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MSRV can also be specified as an attribute, like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;#![feature(custom_inner_attributes)]&#xA;#![clippy::msrv = &#34;1.30.0&#34;]&#xA;&#xA;fn main() {&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also omit the patch version when specifying the MSRV, so &lt;code&gt;msrv = 1.30&lt;/code&gt; is equivalent to &lt;code&gt;msrv = 1.30.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;custom_inner_attributes&lt;/code&gt; is an unstable feature, so it has to be enabled explicitly.&lt;/p&gt; &#xA;&lt;p&gt;Lints that recognize this configuration option can be found &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html#msrv&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to Clippy, you can find more information in &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;!-- REUSE-IgnoreStart --&gt; &#xA;&lt;p&gt;Copyright 2014-2023 The Rust Project Developers&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 &amp;lt;LICENSE-APACHE or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&amp;gt; or the MIT license &amp;lt;LICENSE-MIT or &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;&amp;gt;, at your option. Files in the project may not be copied, modified, or distributed except according to those terms.&lt;/p&gt; &#xA;&lt;!-- REUSE-IgnoreEnd --&gt;</summary>
  </entry>
</feed>