<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-11T01:52:40Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ragnt/AngryOxide</title>
    <updated>2024-02-11T01:52:40Z</updated>
    <id>tag:github.com,2024-02-11:/Ragnt/AngryOxide</id>
    <link href="https://github.com/Ragnt/AngryOxide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;802.11 Attack Tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AngryOxide üò°&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ragnt/AngryOxide/master/death.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A 802.11 Attack tool built in Rust ü¶Ä !&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Ragnt/AngryOxide/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Ragnt/AngryOxide/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Builds and Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/w/Ragnt/AngryOxide&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;a href=&#34;https://discord.gg/QsEgaFndsQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1194365883099922643&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This tool is for research purposes only. I am not responsible for anything you do or damage you cause while using AngryOxide. Only use against networks that you have permission.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;AngryOxide was developed as a way to learn Rust, netlink, kernel sockets, and WiFi exploitation all at once.&lt;/p&gt; &#xA;&lt;p&gt;You can get information about how to use the tool in the &lt;a href=&#34;https://github.com/Ragnt/AngryOxide/wiki/User-Guide&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: This project is under HEAVY development and you can expect a very fast release cycle.&lt;/p&gt; &#xA;&lt;p&gt;The overall goal of this tool is to provide a single-interface survey capability with advanced automated attacks that result in valid hashlines you can crack with &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;Hashcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This tool is heavily inspired by &lt;a href=&#34;https://github.com/ZerBea/hcxdumptool&#34;&gt;hcxdumptool&lt;/a&gt; and development wouldn&#39;t have been possible without help from ZerBea.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions or any issues, you can reach me on the &lt;a href=&#34;https://discord.gg/QsEgaFndsQ&#34;&gt;AngryOxide Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;I wanna use it!&lt;/h2&gt; &#xA;&lt;p&gt;You can download pre-compiled binaries of AngryOxide in the &lt;a href=&#34;https://github.com/Ragnt/AngryOxide/releases/latest&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can get information about how to use the tool in the &lt;a href=&#34;https://github.com/Ragnt/AngryOxide/wiki/User-Guide&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active state-based attack engine used to retrieve relevent EAPOL messages from Access Points and clients.&lt;/li&gt; &#xA; &lt;li&gt;Target option that accepts MAC (aabbcc..., aa:bb:cc...) and SSID &#34;Test_SSID&#34; to limit attack scope.&lt;/li&gt; &#xA; &lt;li&gt;Whitelist option to protect specific networks from attacks. Useful if not using targets.&lt;/li&gt; &#xA; &lt;li&gt;Auto Hunt capability to find all target channels and hop between them.&lt;/li&gt; &#xA; &lt;li&gt;A Terminal-UI that presents all relevent data while still living in the terminal for easy usage over SSH.&lt;/li&gt; &#xA; &lt;li&gt;Limits DEAUTHENTICATION frames that can cause more damage than good to the authentication sequence.&lt;/li&gt; &#xA; &lt;li&gt;EAPOL 4-Way-Handshake validation using Nonce Correction, Replay Counter validation, and Temporal validation.&lt;/li&gt; &#xA; &lt;li&gt;Automatically elicits PMKID from access points where available.&lt;/li&gt; &#xA; &lt;li&gt;Utilizes GPSD with ability to set remote GPSD service address.&lt;/li&gt; &#xA; &lt;li&gt;Provides pcapng files with embedded GPS using the &lt;a href=&#34;https://www.kismetwireless.net/docs/dev/pcapng_gps/&#34;&gt;Kismet Format&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Provides a kismetdb file with all frames (with GPS) for post-processing.&lt;/li&gt; &#xA; &lt;li&gt;Wraps all output files in a gzipped tarball.&lt;/li&gt; &#xA; &lt;li&gt;Bash autocompletions for easy interface selection provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attacks&lt;/h2&gt; &#xA;&lt;p&gt;Will by default attack ALL access points in range, unless atleast one target is supplied, at which point the tool will only transmit against defined targets. (But will still passively collect on other access points).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Attempts authentication/association sequence to produce EAPOL Message 1 (PMKID Collection)&lt;/li&gt; &#xA; &lt;li&gt;Attempts to retrieve hidden SSID&#39;s with undirected probe requests.&lt;/li&gt; &#xA; &lt;li&gt;Utilizes Anonymous Reassociation to force Access Points to deauthenticate their own clients (MFP Bypass)&lt;/li&gt; &#xA; &lt;li&gt;Will attempt to send Channel Switch Announcement to send clients to adjacent channels.&lt;/li&gt; &#xA; &lt;li&gt;Attempts to downgrade RSN modes to WPA2-CCMP (Probe Response Injection)&lt;/li&gt; &#xA; &lt;li&gt;Attempts to collect EAPOL M2 from stations based solely on Probe Requests (Rogue AP)&lt;/li&gt; &#xA; &lt;li&gt;Will send controlled deauthentication frames unless told not to (--nodeauth)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these attacks are rate-controlled both to prevent erroneous EAPOL timer resets and to maintain some level of OPSEC.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ angryoxide --help&#xA;Does awesome things... with wifi.&#xA;&#xA;Usage: angryoxide [OPTIONS] --interface &amp;lt;INTERFACE&amp;gt;&#xA;&#xA;Options:&#xA;  -i, --interface &amp;lt;INTERFACE&amp;gt;  Interface to use&#xA;  -c, --channel &amp;lt;CHANNEL&amp;gt;      Optional - Channel to scan. Will use &#34;-c 1 -c 6 -c 11&#34; if none specified&#xA;  -b, --band &amp;lt;BAND&amp;gt;            Optional - Entire band to scan - will include all channels interface can support&#xA;  -t, --target &amp;lt;TARGET&amp;gt;        Optional - Target (MAC or SSID) to attack - will attack everything if none specified&#xA;  -w, --whitelist &amp;lt;WHITELIST&amp;gt;  Optional - Whitelist (MAC or SSID) to NOT attack&#xA;  -r, --rate &amp;lt;RATE&amp;gt;            Optional - Attack rate (1, 2, 3 || 3 is most aggressive) [default: 2]&#xA;  -o, --output &amp;lt;OUTPUT&amp;gt;        Optional - Output filename&#xA;      --combine                Optional - Combine all hc22000 files into one large file for bulk processing&#xA;      --noactive               Optional - Disable Active Monitor mode&#xA;      --rogue &amp;lt;ROGUE&amp;gt;          Optional - Tx MAC for rogue-based attacks - will randomize if excluded&#xA;      --gpsd &amp;lt;GPSD&amp;gt;            Optional - Alter default HOST:Port for GPSD connection [default: 127.0.0.1:2947]&#xA;      --autohunt               Optional - AO will auto-hunt all channels then lock in on the ones targets are on&#xA;      --headless               Optional - Set the tool to headless mode without a UI. (useful with --autoexit)&#xA;      --autoexit               Optional - AO will auto-exit when all targets have a valid hashline&#xA;      --notransmit             Optional - Do not transmit - passive only&#xA;      --nodeauth               Optional - Do NOT send deauths (will try other attacks only)&#xA;      --notar                  Optional - Do not tar output files&#xA;  -h, --help                   Print help&#xA;  -V, --version                Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build from source instead of using precompiled binaries, these are the basic instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Install Rust&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&#xA;# Clone this repo&#xA;git clone https://github.com/Ragnt/AngryOxide.git&#xA;&#xA;# Build/Install&#xA;cd AngryOxide&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build from source, install into /usr/bin/angryoxide, and install the bash completions for you.&lt;/p&gt; &#xA;&lt;h3&gt;Cross compiling:&lt;/h3&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/cross-rs/cross&#34;&gt;cross&lt;/a&gt; to cross compile to embedded architectures.&lt;/p&gt; &#xA;&lt;p&gt;Here is MIPS (mips-unknown-linux-musl) as an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# make sure you have the nightly installed&#xA;rustup install nightly&#xA;&#xA;# dynamically linked &amp;amp; soft-float&#xA;cross build +nightly --target mips-unknown-linux-musl --release -Zbuild-std&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bash completion script:&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;pkg-config --variable=completionsdir bash-completion&lt;/code&gt; to determine where the completions script should be installed.&lt;/p&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://github.com/3v1n0/zsh-bash-completions-fallback&#34;&gt;zsh-bash-completions-fallback plugin&lt;/a&gt; to enable the bash autocompletion file zsh.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ragnt/AngryOxide/master/screenshots/ap_tab.png&#34; alt=&#34;Access Points Page&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Ragnt/AngryOxide/master/screenshots/handshakes_tab.png&#34; alt=&#34;Handshakes Page&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>martinvonz/jj</title>
    <updated>2024-02-11T01:52:40Z</updated>
    <id>tag:github.com,2024-02-11:/martinvonz/jj</id>
    <link href="https://github.com/martinvonz/jj" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Git-compatible VCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;div class=&#34;title-block&#34; style=&#34;text-align: center;&#34; align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Jujutsu‚Äîa version control system&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/martinvonz/jj&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release-date/martinvonz/jj&#34; alt=&#34;&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/github/license/martinvonz/jj&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/martinvonz/jj/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://discord.gg/dkmfj3aGQN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://martinvonz.github.io/jj&#34;&gt;Homepage&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://martinvonz.github.io/jj/latest/install-and-setup&#34;&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://martinvonz.github.io/jj/latest/tutorial&#34;&gt;Getting Started&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Jujutsu is a powerful &lt;a href=&#34;https://en.wikipedia.org/wiki/Version_control&#34;&gt;version control system&lt;/a&gt; for software projects. You use it to get a copy of your code, track changes to the code, and finally publish those changes for others to see and use. It is designed from the ground up to be easy to use‚Äîwhether you&#39;re new or experienced, working on brand new projects alone, or large scale software projects with large histories and teams.&lt;/p&gt; &#xA;&lt;p&gt;Jujutsu is unlike most other systems, because internally it abstracts the user interface and version control algorithms from the &lt;em&gt;storage systems&lt;/em&gt; used to serve your content. This allows it to serve as a VCS with many possible physical backends, that may have their own data or networking models‚Äîlike &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;Mercurial&lt;/a&gt; or &lt;a href=&#34;https://www.breezy-vcs.org/&#34;&gt;Breezy&lt;/a&gt;, or hybrid systems like Google&#39;s cloud-based design, &lt;a href=&#34;https://youtu.be/W71BTkUbdqE?t=645&#34;&gt;Piper/CitC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Today, we use Git repositories as a storage layer to serve and track content, making it &lt;strong&gt;compatible with many of your favorite Git-based tools, right now!&lt;/strong&gt; All core developers use Jujutsu to develop Jujutsu, right here on GitHub. But it should hopefully work with your favorite Git forges, too.&lt;/p&gt; &#xA;&lt;p&gt;We combine many distinct design choices and concepts from other version control systems into a single tool. Some of those sources of inspiration include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;: We make an effort to &lt;a href=&#34;https://github.com/martinvonz/jj/discussions/49&#34;&gt;be fast&lt;/a&gt;‚Äîwith a snappy UX, efficient algorithms, correct data structures, and good-old-fashioned attention to detail. The default storage backend uses Git repositories for &#34;physical storage&#34;, for wide interoperability and ease of onboarding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mercurial &amp;amp; Sapling&lt;/strong&gt;: There are many Mercurial-inspired features, such as the &lt;a href=&#34;https://martinvonz.github.io/jj/latest/revsets/&#34;&gt;revset&lt;/a&gt; language to select commits. There is &lt;a href=&#34;https://martinvonz.github.io/jj/latest/git-comparison/#the-index&#34;&gt;no explicit index&lt;/a&gt; or staging area. Branches are &#34;anonymous&#34; like Mercurial, so you don&#39;t need to make up a name for each small change. Primitives for rewriting history are powerful and simple. Formatting output is done with a robust template language that can be configured by the user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pijul &amp;amp; Darcs&lt;/strong&gt;: Jujutsu keeps track of conflicts as &lt;a href=&#34;https://martinvonz.github.io/jj/latest/conflicts/&#34;&gt;first-class objects&lt;/a&gt; in its model; they are first-class in the same way commits are, while alternatives like Git simply think of conflicts as textual diffs. While not as rigorous as systems like Darcs and Pijul (which are based on a formalized theory of patches, as opposed to snapshots), the effect is that many forms of conflict resolution can be performed and propagated automatically.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And it adds several innovative, useful features of its own:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working-copy-as-a-commit&lt;/strong&gt;: Changes to files are &lt;a href=&#34;https://martinvonz.github.io/jj/latest/working-copy/&#34;&gt;recorded automatically&lt;/a&gt; as normal commits, and amended on every subsequent change. This &#34;snapshot&#34; design simplifies the user-facing data model (commits are the only visible object), simplifies internal algorithms, and completely subsumes features like Git&#39;s stashes or the index/staging-area.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operation log &amp;amp; undo&lt;/strong&gt;: Jujutsu records every operation that is performed on the repository, from commits, to pulls, to pushes. This makes debugging problems like &#34;what just happened?&#34; or &#34;how did I end up here?&#34; easier, &lt;em&gt;especially&lt;/em&gt; when you&#39;re helping your coworker answer those questions about their repository! And because everything is recorded, you can undo that mistake you just made with ease. Version control has finally entered &lt;a href=&#34;https://en.wikipedia.org/wiki/Undo#History&#34;&gt;the 1960s&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic rebase and conflict resolution&lt;/strong&gt;: When you modify a commit, every descendent is automatically rebased on top of the freshly-modified one. This makes &#34;patch-based&#34; workflows a breeze. If you resolve a conflict in a commit, the &lt;em&gt;resolution&lt;/em&gt; of that conflict is also propagated through descendants as well. In effect, this is a completely transparent version of &lt;code&gt;git rebase --update-refs&lt;/code&gt; combined with &lt;code&gt;git rerere&lt;/code&gt;, supported by design.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] The following features are available for use, but experimental; they may have bugs, backwards incompatible storage changes, and user-interface changes!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Safe, concurrent replication&lt;/strong&gt;: Have you ever wanted to store your version controlled repositories inside a Dropbox folder? Or continuously backup repositories to S3? No? Well, now you can!&lt;/p&gt; &lt;p&gt;The fundamental problem with using filesystems like Dropbox and backup tools like &lt;code&gt;rsync&lt;/code&gt; on your typical Git/Mercurial repositories is that they rely on &lt;em&gt;local filesystem operations&lt;/em&gt; being atomic, serialized, and non-concurrent with respect to other reads and writes‚Äîwhich is &lt;em&gt;not&lt;/em&gt; true when operating on distributed file systems, or when operations like concurrent file copies (for backup) happen while lock files are being held.&lt;/p&gt; &lt;p&gt;Jujutsu is instead designed to be &lt;a href=&#34;https://martinvonz.github.io/jj/latest/technical/concurrency/&#34;&gt;safe under concurrent scenarios&lt;/a&gt;; simply using rsync or Dropbox and then using that resulting repository should never result in a repository in a &lt;em&gt;corrupt state&lt;/em&gt;. The worst that &lt;em&gt;should&lt;/em&gt; happen is that it will expose conflicts between the local and remote state, leaving you to resolve them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it&#39;s easy to type and easy to replace (rare in English). The project is called &#34;Jujutsu&#34; because it matches &#34;jj&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Jujutsu is relatively young, with lots of work to still be done. If you have any questions, or want to talk about future plans, please join us on Discord &lt;a href=&#34;https://discord.gg/dkmfj3aGQN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; or start a &lt;a href=&#34;https://github.com/martinvonz/jj/discussions&#34;&gt;GitHub Discussion&lt;/a&gt;; the developers monitor both channels.&lt;/p&gt; &#xA;&lt;h3&gt;News and Updates üì£&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Oct 2023&lt;/strong&gt;: Version 0.10.0 is released! Now includes a bundled merge and diff editor for all platforms, &#34;immutable revsets&#34; to avoid accidentally &lt;code&gt;edit&lt;/code&gt;-ing the wrong revisions, and lots of polish.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin gave a presentation about Google&#39;s plans for Jujutsu at Git Merge 2022! See the &lt;a href=&#34;https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view&#34;&gt;slides&lt;/a&gt; or the &lt;a href=&#34;https://www.youtube.com/watch?v=bx_LGilOuE4&#34;&gt;recording&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Jujutsu is an &lt;strong&gt;experimental version control system&lt;/strong&gt;. While Git compatibility is stable, and most developers use it daily for all their needs, there may still be work-in-progress features, suboptimal UX, and workflow gaps that make it unusable for your particular use.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://martinvonz.github.io/jj/latest/install-and-setup&#34;&gt;installation instructions&lt;/a&gt; to obtain and configure &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The best way to get started is probably to go through &lt;a href=&#34;https://martinvonz.github.io/jj/latest/tutorial&#34;&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href=&#34;https://martinvonz.github.io/jj/latest/git-comparison&#34;&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;As you become more familiar with Jujutsu, the following resources may be helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://martinvonz.github.io/jj/latest/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://martinvonz.github.io/jj/latest/glossary&#34;&gt;Glossary&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;jj help&lt;/code&gt; command (e.g. &lt;code&gt;jj help rebase&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are using a &lt;strong&gt;prerelease&lt;/strong&gt; version of &lt;code&gt;jj&lt;/code&gt;, you would want to consult &lt;a href=&#34;https://martinvonz.github.io/jj/prerelease/&#34;&gt;the docs for the prerelease (main branch) version&lt;/a&gt;. You can also get there from the docs for the latest release by using the website&#39;s version switcher. The version switcher is visible in the header of the website when you scroll to the top of any page.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Compatible with Git&lt;/h3&gt; &#xA;&lt;p&gt;Jujutsu is designed so that the underlying data and storage model is abstract. Today, it features two &lt;a href=&#34;https://martinvonz.github.io/jj/latest/glossary#backend&#34;&gt;backends&lt;/a&gt;‚Äîone of them uses a Git repository for storage, while the other is a native storage backend[^native-backend].&lt;/p&gt; &#xA;&lt;p&gt;[^native-backend]: At this time, there&#39;s practically no reason to use the native backend. The backend exists mainly to make sure that it&#39;s possible to eventually add functionality that cannot easily be added to the Git backend.&lt;/p&gt; &#xA;&lt;p&gt;The Git backend is fully featured and maintained, and allows you to use Jujutsu as an alternative interface to Git. The commits you create will look like regular Git commits. You can always switch back to Git. The Git support uses the &lt;a href=&#34;https://libgit2.org/&#34;&gt;libgit2&lt;/a&gt; C library.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/git_compat.png&#34;&gt; &#xA;&lt;p&gt;You can even have a &lt;a href=&#34;https://martinvonz.github.io/jj/latest/git-compatibility#co-located-jujutsugit-repos&#34;&gt;&#34;co-located&#34; local repository&lt;/a&gt; where you can use both &lt;code&gt;jj&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands interchangeably.&lt;/p&gt; &#xA;&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; &#xA;&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; &#xA;&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no &#34;error: Your local changes to the following files...&#34;), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you&#39;re done with the changes.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/working_copy.png&#34;&gt; &#xA;&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; &#xA;&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; &#xA;&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; &#xA;&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily revert to an earlier repo state, or to simply undo a particular operation (which does not necessarily have to be the most recent operation).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/operation_log.png&#34;&gt; &#xA;&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; &#xA;&lt;p&gt;If an operation results in &lt;a href=&#34;https://martinvonz.github.io/jj/latest/glossary#conflict&#34;&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there&#39;s no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; &#xA;&lt;p&gt;Basic conflict resolution:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/resolve_conflicts.png&#34;&gt; &#xA;&lt;p&gt;Juggling conflicts:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/demos/juggle_conflicts.png&#34;&gt; &#xA;&lt;h3&gt;Automatic rebase&lt;/h3&gt; &#xA;&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Branches pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; &#xA;&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; &#xA;&lt;p&gt;Besides the usual rebase command, there&#39;s &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There&#39;s also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj move&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;The tool is fairly feature-complete, but some important features like (the equivalent of) &lt;code&gt;git blame&lt;/code&gt; are not yet supported. There are also several performance bugs. It&#39;s likely that workflows and setups different from what the core developers use are not well supported, e.g. there is no native support for email-based workflows.&lt;/p&gt; &#xA;&lt;p&gt;Today, all core developers use &lt;code&gt;jj&lt;/code&gt; to work on &lt;code&gt;jj&lt;/code&gt;. I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven&#39;t had to re-clone from source (I don&#39;t think I&#39;ve even had to restore from backup).&lt;/p&gt; &#xA;&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. Even the binary&#39;s name may change (i.e. away from &lt;code&gt;jj&lt;/code&gt;). For any format changes, we&#39;ll try to implement transparent upgrades (as we&#39;ve done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; &#xA;&lt;h2&gt;Related work&lt;/h2&gt; &#xA;&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href=&#34;https://martinvonz.github.io/jj/latest/related-work&#34;&gt;related work&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome outside contributions, and there&#39;s plenty of things to do, so don&#39;t be shy. Please ask if you want a pointer on something you can help with, and hopefully we can all figure something out.&lt;/p&gt; &#xA;&lt;p&gt;We do have &lt;a href=&#34;https://martinvonz.github.io/jj/prerelease/contributing/&#34;&gt;a few policies and suggestions&lt;/a&gt; for contributors. The broad TL;DR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug reports are very welcome!&lt;/li&gt; &#xA; &lt;li&gt;Every commit that lands in the &lt;code&gt;main&lt;/code&gt; branch is code reviewed.&lt;/li&gt; &#xA; &lt;li&gt;Please behave yourself, and obey the Community Guidelines.&lt;/li&gt; &#xA; &lt;li&gt;There &lt;strong&gt;is&lt;/strong&gt; a mandatory CLA you must agree to. Importantly, it &lt;strong&gt;does not&lt;/strong&gt; transfer copyright ownership to Google or anyone else; it simply gives us the right to safely redistribute and use your changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mandatory Google Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;I (Martin von Zweigbergk, &lt;a href=&#34;mailto:martinvonz@google.com&#34;&gt;martinvonz@google.com&lt;/a&gt;) started Jujutsu as a hobby project in late 2019, and it has evolved into my full-time project at Google, with several other Googlers (now) assisting development in various capacities. That said, &lt;strong&gt;this is not a Google product&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Jujutsu is available as Open Source Software, under the Apache 2.0 license. See &lt;a href=&#34;https://raw.githubusercontent.com/martinvonz/jj/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details about copyright and redistribution.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>YaLTeR/niri</title>
    <updated>2024-02-11T01:52:40Z</updated>
    <id>tag:github.com,2024-02-11:/YaLTeR/niri</id>
    <link href="https://github.com/YaLTeR/niri" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;niri&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://matrix.to/#/#niri:matrix.org&#34;&gt;&lt;img alt=&#34;Matrix&#34; src=&#34;https://img.shields.io/matrix/niri%3Amatrix.org?logo=matrix&amp;amp;label=matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YaLTeR/niri/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;GitHub License&#34; src=&#34;https://img.shields.io/github/license/YaLTeR/niri&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YaLTeR/niri/releases&#34;&gt;&lt;img alt=&#34;GitHub Release&#34; src=&#34;https://img.shields.io/github/v/release/YaLTeR/niri?logo=github&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YaLTeR/niri/assets/1794388/16f87a4a-afac-49aa-b3e6-5e6f16c943a9&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Windows are arranged in columns on an infinite strip going to the right. Opening a new window never causes existing windows to resize.&lt;/p&gt; &#xA;&lt;p&gt;Every monitor has its own separate window strip. Windows can never &#34;overflow&#34; onto an adjacent monitor.&lt;/p&gt; &#xA;&lt;p&gt;Workspaces are dynamic and arranged vertically. Every monitor has an independent set of workspaces, and there&#39;s always one empty workspace present all the way down.&lt;/p&gt; &#xA;&lt;p&gt;The workspace arrangement is preserved across disconnecting and connecting monitors where it makes sense. When a monitor disconnects, its workspaces will move to another monitor, but upon reconnection they will move back to the original monitor.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scrollable tiling&lt;/li&gt; &#xA; &lt;li&gt;Dynamic workspaces like in GNOME&lt;/li&gt; &#xA; &lt;li&gt;Built-in screenshot UI&lt;/li&gt; &#xA; &lt;li&gt;Monitor screencasting through xdg-desktop-portal-gnome&lt;/li&gt; &#xA; &lt;li&gt;Touchpad gesture to switch workspaces&lt;/li&gt; &#xA; &lt;li&gt;Configurable layout: gaps, borders, struts, window sizes&lt;/li&gt; &#xA; &lt;li&gt;Live-reloading config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Video Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/assets/1794388/5d355694-7b06-4f00-8920-8dce54a8721c&#34;&gt;https://github.com/YaLTeR/niri/assets/1794388/5d355694-7b06-4f00-8920-8dce54a8721c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;A lot of the essential functionality is implemented, plus some goodies on top. Feel free to give niri a try. Have your &lt;a href=&#34;https://github.com/Alexays/Waybar&#34;&gt;waybar&lt;/a&gt;s and &lt;a href=&#34;https://codeberg.org/dnkl/fuzzel&#34;&gt;fuzzel&lt;/a&gt;s ready: niri is not a complete desktop environment.&lt;/p&gt; &#xA;&lt;p&gt;Note that NVIDIA GPUs might have rendering issues.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;Niri is heavily inspired by &lt;a href=&#34;https://github.com/paperwm/PaperWM&#34;&gt;PaperWM&lt;/a&gt; which implements scrollable tiling on top of GNOME Shell.&lt;/p&gt; &#xA;&lt;p&gt;One of the reasons that prompted me to try writing my own compositor is being able to properly separate the monitors. Being a GNOME Shell extension, PaperWM has to work against Shell&#39;s global window coordinate space to prevent windows from overflowing.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] For Fedora users, there&#39;s a COPR with built and packaged niri: &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/yalter/niri/&#34;&gt;https://copr.fedorainfracloud.org/coprs/yalter/niri/&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;NixOS users, check out &lt;a href=&#34;https://github.com/sodiboo/niri-flake&#34;&gt;https://github.com/sodiboo/niri-flake&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;For Arch users, there&#39;s an AUR package: &lt;a href=&#34;https://aur.archlinux.org/packages/niri&#34;&gt;https://aur.archlinux.org/packages/niri&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, install the dependencies for your distribution.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu 23.10:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install -y gcc clang libudev-dev libgbm-dev libxkbcommon-dev libegl1-mesa-dev libwayland-dev libinput-dev libdbus-1-dev libsystemd-dev libseat-dev libpipewire-0.3-dev libpango1.0-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install gcc libudev-devel libgbm-devel libxkbcommon-devel wayland-devel libinput-devel dbus-devel systemd-devel libseat-devel pipewire-devel pango-devel cairo-gobject-devel clang&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, get latest stable Rust: &lt;a href=&#34;https://rustup.rs/&#34;&gt;https://rustup.rs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, build niri with &lt;code&gt;cargo build --release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;NixOS/Nix&lt;/h3&gt; &#xA;&lt;p&gt;We have a community-maintained flake which provides a devshell with required dependencies. Use &lt;code&gt;nix build&lt;/code&gt; to build niri, and then run &lt;code&gt;./results/bin/niri&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not on NixOS, you may need &lt;a href=&#34;https://github.com/nix-community/nixGL&#34;&gt;NixGL&lt;/a&gt; to run the resulting binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix run --impure github:guibou/nixGL -- ./results/bin/niri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install and run niri is as a standalone desktop session. To do that, put files into the correct directories according to this table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Destination&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;target/release/niri&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/bin/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources/niri-session&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/bin/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources/niri.desktop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/share/wayland-sessions/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources/niri-portals.conf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/share/xdg-desktop-portal/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources/niri.service&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/lib/systemd/user/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources/niri-shutdown.target&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/lib/systemd/user/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Doing this will make niri appear in GDM and, presumably, other display managers.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo run --release&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inside an existing desktop session, it will run in a window. On a TTY, it will run natively.&lt;/p&gt; &#xA;&lt;p&gt;To exit when running on a TTY, press &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;E&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Session&lt;/h3&gt; &#xA;&lt;p&gt;If you followed the recommended installation steps above, niri should appear in your display manager. Starting it from there will run niri as a desktop session.&lt;/p&gt; &#xA;&lt;p&gt;The niri session will autostart apps through the systemd xdg-autostart target. You can also autostart systemd services like &lt;a href=&#34;https://github.com/emersion/mako&#34;&gt;mako&lt;/a&gt; by symlinking them into &lt;code&gt;$HOME/.config/systemd/user/niri.service.wants/&lt;/code&gt;. A step-by-step process for this is explained &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Example-systemd-Setup&#34;&gt;on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Niri also works with some parts of xdg-desktop-portal-gnome. In particular, it supports file choosers and monitor screencasting (e.g. to &lt;a href=&#34;https://flathub.org/apps/com.obsproject.Studio&#34;&gt;OBS&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Important-Software&#34;&gt;This wiki page&lt;/a&gt; explains how to run important software required for normal desktop use, including portals.&lt;/p&gt; &#xA;&lt;h3&gt;Xwayland&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Xwayland&#34;&gt;the wiki page&lt;/a&gt; to learn how to use Xwayland with niri.&lt;/p&gt; &#xA;&lt;h3&gt;IPC&lt;/h3&gt; &#xA;&lt;p&gt;You can communicate with the running niri instance over an IPC socket. Check &lt;code&gt;niri msg --help&lt;/code&gt; for available commands.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--json&lt;/code&gt; flag prints the response in JSON, rather than formatted. For example, &lt;code&gt;niri msg --json outputs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For programmatic access, check the &lt;a href=&#34;https://raw.githubusercontent.com/YaLTeR/niri/main/niri-ipc/&#34;&gt;niri-ipc sub-crate&lt;/a&gt; which defines the types. The communication over the IPC socket happens in JSON.&lt;/p&gt; &#xA;&lt;h2&gt;Default Hotkeys&lt;/h2&gt; &#xA;&lt;p&gt;When running on a TTY, the Mod key is &lt;kbd&gt;Super&lt;/kbd&gt;. When running in a window, the Mod key is &lt;kbd&gt;Alt&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general system is: if a hotkey switches somewhere, then adding &lt;kbd&gt;Ctrl&lt;/kbd&gt; will move the focused window or column there.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hotkey&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;/&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show a list of important niri hotkeys&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;T&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Spawn &lt;code&gt;alacritty&lt;/code&gt; (terminal)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;D&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Spawn &lt;code&gt;fuzzel&lt;/code&gt; (application launcher)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Spawn &lt;code&gt;swaylock&lt;/code&gt; (screen locker)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Q&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close the focused window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;H&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;‚Üê&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus the column to the left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;‚Üí&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus the column to the right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;‚Üì&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus the window below in a column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;‚Üë&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus the window above in a column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;H&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;‚Üê&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused column to the left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;‚Üí&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused column to the right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;‚Üì&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused window below in a column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;‚Üë&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused window above in a column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Home&lt;/kbd&gt; and &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;End&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus the first or the last column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Home&lt;/kbd&gt; and &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;End&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused column to the very start or to the very end&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;H&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;‚Üê&lt;/kbd&gt;&lt;kbd&gt;‚Üì&lt;/kbd&gt;&lt;kbd&gt;‚Üë&lt;/kbd&gt;&lt;kbd&gt;‚Üí&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus the monitor to the side&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;H&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;‚Üê&lt;/kbd&gt;&lt;kbd&gt;‚Üì&lt;/kbd&gt;&lt;kbd&gt;‚Üë&lt;/kbd&gt;&lt;kbd&gt;‚Üí&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused column to the monitor to the side&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;U&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;PageDown&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch to the workspace below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;I&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;PageUp&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch to the workspace above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;U&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;PageDown&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused column to the workspace below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;I&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;PageUp&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused column to the workspace above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;1&lt;/kbd&gt;‚Äì&lt;kbd&gt;9&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch to a workspace by index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;1&lt;/kbd&gt;‚Äì&lt;kbd&gt;9&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused column to a workspace by index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;U&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;PageDown&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused workspace down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;I&lt;/kbd&gt; or &lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;PageUp&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the focused workspace up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;,&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Consume the window to the right into the focused column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;.&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expel the focused window into its own column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;R&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle between preset column widths&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximize column&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Center column within view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Decrease column width by 10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increase column width by 10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Decrease window height by 10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increase window height by 10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle full-screen on the focused window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;PrtSc&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Take an area screenshot. Select the area to screenshot with mouse, then press Space to save the screenshot, or Escape to cancel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;PrtSc&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Take a screenshot of the focused window to clipboard and to &lt;code&gt;~/Pictures/Screenshots/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;PrtSc&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Take a screenshot of the focused monitor to clipboard and to &lt;code&gt;~/Pictures/Screenshots/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;T&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle debug tinting of rendered elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Mod&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;E&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exit niri&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Niri will load configuration from &lt;code&gt;$XDG_CONFIG_HOME/.config/niri/config.kdl&lt;/code&gt; or &lt;code&gt;~/.config/niri/config.kdl&lt;/code&gt;. If this fails, it will load &lt;a href=&#34;https://raw.githubusercontent.com/YaLTeR/niri/main/resources/default-config.kdl&#34;&gt;the default configuration file&lt;/a&gt;. Please use the default configuration file as the starting point for your custom configuration.&lt;/p&gt; &#xA;&lt;p&gt;Niri will live-reload most of the configuration settings, like key binds or gaps or output modes, as you change the config file.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;We have a Matrix chat, feel free to join and ask a question: &lt;a href=&#34;https://matrix.to/#/#niri:matrix.org&#34;&gt;https://matrix.to/#/#niri:matrix.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>