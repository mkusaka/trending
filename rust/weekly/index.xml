<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-11T01:46:11Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glzr-io/glazewm</title>
    <updated>2024-08-11T01:46:11Z</updated>
    <id>tag:github.com,2024-08-11:/glzr-io/glazewm</id>
    <link href="https://github.com/glzr-io/glazewm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3wm.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;V3 is finally out - check out the changelog &lt;a href=&#34;https://github.com/glzr-io/GlazeWM/releases&#34;&gt;here&lt;/a&gt; 🔥&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/logo.svg?sanitize=true&#34; width=&#34;230&#34; alt=&#34;GlazeWM logo&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;h1&gt;GlazeWM&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;A tiling window manager for Windows inspired by i3wm.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/ud6z3qjRvM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1041662798196908052.svg?logo=discord&amp;amp;colorB=7289DA&#34; alt=&#34;Discord invite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/glzr-io/glazewm/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/glzr-io/glazewm/total?logo=github&amp;amp;logoColor=white&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/users/lars-berger/projects/2/views/1?sliceBy%5Bvalue%5D=good+first+issue&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/good_first_issues-7057ff&#34; alt=&#34;Good first issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;GlazeWM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#default-keybindings&#34;&gt;Default keybindings&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#config-docs&#34;&gt;Config documentation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#faq&#34;&gt;FAQ&lt;/a&gt; • &lt;a href=&#34;https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md&#34;&gt;Contributing ↗&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/demo.webp&#34; alt=&#34;Demo video&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;🌟 Key features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple YAML configuration&lt;/li&gt; &#xA; &lt;li&gt;Multi-monitor support&lt;/li&gt; &#xA; &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; &#xA; &lt;li&gt;Easy one-click installation&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://github.com/glzr-io/zebar&#34;&gt;Zebar&lt;/a&gt; as a status bar&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The latest version of GlazeWM is downloadable via &lt;a href=&#34;https://github.com/glzr-io/GlazeWM/releases&#34;&gt;releases&lt;/a&gt;.&lt;/strong&gt; Zebar can optionally be installed as well via a checkbox in the install.&lt;/p&gt; &#xA;&lt;p&gt;Scoop and Winget are currently not supported. If you instead want to build from source, refer to the &lt;a href=&#34;https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Default keybindings&lt;/h2&gt; &#xA;&lt;p&gt;On the first launch of GlazeWM, a default configuration can optionally be generated.&lt;/p&gt; &#xA;&lt;p&gt;Below is a cheatsheet of all available commands and their default keybindings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/cheatsheet.png&#34; alt=&#34;Infographic&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Config documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/glzr-io/glazewm/raw/main/resources/assets/sample-config.yaml&#34;&gt;default config&lt;/a&gt; file is generated at &lt;code&gt;%userprofile%\.glzr\glazewm\config.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config=&#34;...&#34;&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./glazewm.exe --config=&#34;C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config: General&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;general:&#xA;  # Commands to run when the WM has started (e.g. to run a script or launch&#xA;  # another application).&#xA;  startup_commands: []&#xA;&#xA;  # Whether to automatically focus windows underneath the cursor.&#xA;  focus_follows_cursor: false&#xA;&#xA;  # Whether to switch back and forth between the previously focused&#xA;  # workspace when focusing the current workspace.&#xA;  toggle_workspace_on_refocus: false&#xA;&#xA;  cursor_jump:&#xA;    # Whether to automatically move the cursor on the specified trigger.&#xA;    enabled: true&#xA;&#xA;    # Trigger for cursor jump:&#xA;    # - &#39;monitor_focus&#39;: Jump when focus changes between monitors.&#xA;    # - &#39;window_focus&#39;: Jump when focus changes between windows.&#xA;    trigger: &#34;monitor_focus&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config: Keybindings&lt;/h3&gt; &#xA;&lt;p&gt;The available keyboard shortcuts can be customized via the &lt;code&gt;keybindings&lt;/code&gt; option. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to use the alt key for keybindings. The Windows key is unfortunately a pain to remap, since certain keybindings (e.g. &lt;code&gt;lwin+l&lt;/code&gt;) are reserved by the OS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;keybindings:&#xA;  # Command(s) to run.&#xA;  - commands: [&#34;focus --workspace 1&#34;]&#xA;&#xA;    # Key combination(s) to trigger the keybinding.&#xA;    bindings: [&#34;alt+1&#34;]&#xA;&#xA;  # Multiple commands can be run in a sequence (e.g. to move a window to a&#xA;  # workspace + focus workspace).&#xA;  - commands: [&#34;move --workspace 1&#34;, &#34;focus --workspace 1&#34;]&#xA;    bindings: [&#34;alt+shift+1&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Full list of keys that can be used for keybindings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Keys list&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Key&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;a&lt;/code&gt; - &lt;code&gt;z&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Alphabetical letter keys&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Number keys&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;numpad0&lt;/code&gt; - &lt;code&gt;numpad9&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Numerical keypad keys&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;f1&lt;/code&gt; - &lt;code&gt;f24&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Function keys&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Either left or right SHIFT key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;lshift&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The left SHIFT key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;rshift&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The right SHIFT key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;control&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Either left or right CTRL key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;lctrl&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The left CTRL key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;rctrl&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The right CTRL key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Either left or right ALT key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;lalt&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The left ALT key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;ralt&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The right ALT key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;lwin&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The left ⊞ Windows logo key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;rwin&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The right ⊞ Windows logo key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;space&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The spacebar key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The ESCAPE key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;back&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The BACKSPACE key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The TAB key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The ENTER key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;left&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The ← arrow key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;right&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The → arrow key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;up&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The ↑ arrow key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;down&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The ↓ arrow key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;num_lock&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The NUM LOCK key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;scroll_lock&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The SCROLL LOCK key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;caps_lock&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The CAPS LOCK key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;page_up&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The PAGE UP key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;page_down&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The PAGE DOWN key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The INSERT key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The DELETE key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The END key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;home&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The HOME key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;print_screen&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The PRINT SCREEN key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;multiply&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;*&lt;/code&gt; key (only on numpad)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;+&lt;/code&gt; key (only on numpad)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;subtract&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt; key (only on numpad)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The DEL key (only on numpad)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;divide&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt; key (only on numpad)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;volume_up&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The volume up key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;volume_down&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The volume down key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;volume_mute&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The volume mute key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;media_next_track&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The media next track key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;media_prev_track&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The media prev track key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;media_stop&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The media stop key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;media_play_pause&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The media play/pause key&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_semicolon&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;;&lt;/code&gt;/&lt;code&gt;:&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_question&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_tilde&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;`&lt;/code&gt;/&lt;code&gt;~&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_open_brackets&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;[&lt;/code&gt;/&lt;code&gt;{&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_pipe&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;\&lt;/code&gt;/&lt;code&gt;|&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_close_brackets&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;]&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_quotes&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;&#39;&lt;/code&gt;/&lt;code&gt;&#34;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_plus&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;=&lt;/code&gt;/&lt;code&gt;+&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_comma&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;,&lt;/code&gt;/&lt;code&gt;&amp;lt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_minus&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt;/&lt;code&gt;_&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;oem_period&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;.&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If a key is not in the list above, it is likely still supported if you use it&#39;s character in a keybinding (e.g. &lt;code&gt;alt+å&lt;/code&gt; for the Norwegian Å character).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;German and US international keyboards treat the right-side alt key differently than normal. For these keyboard layouts, use &lt;code&gt;ralt+ctrl&lt;/code&gt; instead of &lt;code&gt;ralt&lt;/code&gt; to bind the right-side alt key.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Config: Gaps&lt;/h3&gt; &#xA;&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gaps:&#xA;  # Gap between adjacent windows.&#xA;  inner_gap: &#34;20px&#34;&#xA;&#xA;  # Gap between windows and the screen edge.&#xA;  outer_gap:&#xA;    top: &#34;20px&#34;&#xA;    right: &#34;20px&#34;&#xA;    bottom: &#34;20px&#34;&#xA;    left: &#34;20px&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config: Workspaces&lt;/h3&gt; &#xA;&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;workspaces:&#xA;  # This is the unique ID for the workspace. It&#39;s used in keybinding&#xA;  # commands, and is also the label shown in 3rd-party apps (e.g. Zebar) if&#xA;  # `display_name` is not provided.&#xA;  - name: &#34;1&#34;&#xA;&#xA;    # Optional override for the workspace label used in 3rd-party apps.&#xA;    # Does not need to be unique.&#xA;    display_name: &#34;Work&#34;&#xA;&#xA;    # Optionally force the workspace on a specific monitor if it exists.&#xA;    # 0 is your leftmost screen, 1 is the next one to the right, and so on.&#xA;    bind_to_monitor: 0&#xA;&#xA;    # Optionally prevent workspace from being deactivated when empty.&#xA;    keep_alive: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config: Window effects&lt;/h3&gt; &#xA;&lt;p&gt;Visual effects can be applied to windows via the &lt;code&gt;window_effects&lt;/code&gt; option. Currently, colored borders are the only effect available with more to come in the future.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Window effects are exclusive to Windows 11.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;window_effects:&#xA;  # Visual effects to apply to the focused window.&#xA;  focused_window:&#xA;    # Highlight the window with a colored border.&#xA;    border:&#xA;      enabled: true&#xA;      color: &#34;#0000ff&#34;&#xA;&#xA;  # Visual effects to apply to non-focused windows.&#xA;  other_windows:&#xA;    border:&#xA;      enabled: false&#xA;      color: &#34;#d3d3d3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config: Window behavior&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;window_behavior&lt;/code&gt; config option exists to customize the states that a window can be in (&lt;code&gt;tiling&lt;/code&gt;, &lt;code&gt;floating&lt;/code&gt;, &lt;code&gt;minimized&lt;/code&gt;, and &lt;code&gt;fullscreen&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;window_behavior:&#xA;  # New windows are created in this state whenever possible.&#xA;  # Allowed values: &#39;tiling&#39;, &#39;floating&#39;.&#xA;  initial_state: &#34;tiling&#34;&#xA;&#xA;  # Sets the default options for when a new window is created. This also&#xA;  # changes the defaults for when the state change commands, like&#xA;  # `set-floating`, are used without any flags.&#xA;  state_defaults:&#xA;    floating:&#xA;      # Whether to center floating windows by default.&#xA;      centered: true&#xA;&#xA;      # Whether to show floating windows as always on top.&#xA;      shown_on_top: false&#xA;&#xA;    fullscreen:&#xA;      # Maximize the window if possible. If the window doesn&#39;t have a&#xA;      # maximize button, then it&#39;ll be fullscreen&#39;ed normally instead.&#xA;      maximized: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config: Binding modes&lt;/h3&gt; &#xA;&lt;p&gt;Binding modes are used to modify keybindings while GlazeWM is running.&lt;/p&gt; &#xA;&lt;p&gt;A binding mode can be enabled with &lt;code&gt;wm-enable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt; and disabled with &lt;code&gt;wm-disable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;binding_modes:&#xA;  # When enabled, the focused window can be resized via arrow keys or HJKL.&#xA;  - name: &#34;resize&#34;&#xA;    keybindings:&#xA;      - commands: [&#34;resize --width -2%&#34;]&#xA;        bindings: [&#34;h&#34;, &#34;left&#34;]&#xA;      - commands: [&#34;resize --width +2%&#34;]&#xA;        bindings: [&#34;l&#34;, &#34;right&#34;]&#xA;      - commands: [&#34;resize --height +2%&#34;]&#xA;        bindings: [&#34;k&#34;, &#34;up&#34;]&#xA;      - commands: [&#34;resize --height -2%&#34;]&#xA;        bindings: [&#34;j&#34;, &#34;down&#34;]&#xA;      # Press enter/escape to return to default keybindings.&#xA;      - commands: [&#34;wm-disable-binding-mode --name resize&#34;]&#xA;        bindings: [&#34;escape&#34;, &#34;enter&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How do I run GlazeWM on startup?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a shortcut for the executable by right-clicking on the GlazeWM executable -&amp;gt; &lt;code&gt;Create shortcut&lt;/code&gt;. Put the shortcut in your startup folder, which you can get to by entering &lt;code&gt;shell:startup&lt;/code&gt; in the top bar in File Explorer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How can I create &lt;code&gt;&amp;lt;insert layout&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can create custom layouts by changing the tiling direction with &lt;code&gt;alt+v&lt;/code&gt;. This changes where the next window is placed &lt;em&gt;in relation to the current window&lt;/em&gt;. If the current window&#39;s direction is horizontal, the new window will be placed to the right of it. If it is vertical, it will be placed below it. This also applies when moving windows; the tiling direction of the stationary window will affect where the moved window will be placed.&lt;/p&gt; &#xA;&lt;p&gt;Community-made scripts like &lt;a href=&#34;https://github.com/ParasiteDelta/GlaAlt&#34;&gt;ParasiteDelta/GlaAlt&lt;/a&gt; and &lt;a href=&#34;https://github.com/burgr033/GlazeWM-autotiling-python&#34;&gt;burgr033/GlazeWM-autotiling-python&lt;/a&gt; can be used to automatically change the tiling direction. Native support for automatic layouts isn&#39;t &lt;em&gt;currently&lt;/em&gt; supported.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How do I create a rule for &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To match a specific application, you need a command to execute and either the window&#39;s process name, title or class name. For example, if you use Flow-Launcher and want to make the settings window float, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;window_rules:&#xA;  - command: &#34;set-floating&#34;&#xA;    match:&#xA;      - window_process: { equals: &#34;Flow.Launcher&#34; }&#xA;        title: { equals: &#34;Settings&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Programs like Winlister or AutoHotkey&#39;s Window Spy can be useful for getting info about a window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How can I ignore GlazeWM&#39;s keybindings when &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt; is focused?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This isn&#39;t currently supported, however, the keybinding &lt;code&gt;alt+shift+p&lt;/code&gt; in the default config is used to disable all other keybindings until &lt;code&gt;alt+shift+p&lt;/code&gt; is pressed again.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>versotile-org/verso</title>
    <updated>2024-08-11T01:46:11Z</updated>
    <id>tag:github.com,2024-08-11:/versotile-org/verso</id>
    <link href="https://github.com/versotile-org/verso" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A web browser that plays old world blues to build new world hope&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Verso&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://versotile.zulipchat.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-57a7ff?style=for-the-badge&amp;amp;labelColor=555555&amp;amp;logo=zulip&#34; alt=&#34;project chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A web browser that plays old world blues to build new world hope.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pewsheen/verso/assets/460329/7df44c7d-a4c5-4393-8378-a8b7bc438b03&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verso is a web browser built on top of Servo web engine. It&#39;s still under development. We dont&#39; accept any feature request at the moment. But if you are interested, feel free to help test it.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt; and then install other tools:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install git python llvm cmake curl&#xA;pip install mako&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can also use chocolatey to install if you prefer it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build &amp;amp; run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and then install other tools:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install cmake pkg-config harfbuzz&#xA;pip install mako&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build &amp;amp; run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Flatpak&lt;/h4&gt; &#xA;&lt;p&gt;For unified environment setup and package experience, we choose Flatpak to build the project from the start. Please follow the &lt;a href=&#34;https://flatpak.org/setup/&#34;&gt;Flatpak Setup&lt;/a&gt; page to install Flakpak based on your distribution.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install flatpak runtimes and extensions:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flatpak install flathub org.freedesktop.Platform//23.08&#xA;flatpak install flathub org.freedesktop.Sdk//23.08&#xA;flatpak install flathub org.freedesktop.Sdk.Extension.rust-stable//23.08&#xA;flatpak install flathub org.freedesktop.Sdk.Extension.llvm18//23.08&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate manifests and build: // TODO Exporting to a repository instead&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 ./flatpak-cargo-generator.py ./Cargo.lock -o cargo-sources.json&#xA;flatpak-builder --user --install --force-clean target org.versotile.verso.yml&#xA;flatpak run org.versotile.verso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nix&lt;/h4&gt; &#xA;&lt;p&gt;We also support building Verso in nix shell. But we don&#39;t bundle it in nix at the moment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For NixOS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-shell shell.nix --run &#39;cargo r&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For non-NixOS distributions:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-shell shell.nix --run &#39;nixGL cargo r&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to build the project without any sandbox, please follow the instructions in &lt;a href=&#34;https://book.servo.org/hacking/setting-up-your-environment.html#tools-for-linux&#34;&gt;Servo book&lt;/a&gt; to bootstrap. But please understand we don&#39;t triage any build issue without flatpak or nix setup.&lt;/p&gt; &#xA;&lt;h2&gt;Nightly Release&lt;/h2&gt; &#xA;&lt;p&gt;Nightly releases built with CrabNebula Cloud can be found at &lt;a href=&#34;https://web.crabnebula.cloud/verso/verso-nightly/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Packages are unsigned currently. If you have problem opening the app on macOS, try &lt;code&gt;xattr -d com.apple.quarantine /Applications/verso.app&lt;/code&gt; after installation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Future Work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiwindow support.&lt;/li&gt; &#xA; &lt;li&gt;Enable multiprocess mode.&lt;/li&gt; &#xA; &lt;li&gt;Enable sandbox in all platforms.&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;code&gt;Gstreamer&lt;/code&gt; feature.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>signalapp/libsignal</title>
    <updated>2024-08-11T01:46:11Z</updated>
    <id>tag:github.com,2024-08-11:/signalapp/libsignal</id>
    <link href="https://github.com/signalapp/libsignal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home to the Signal Protocol as well as other cryptographic primitives which make Signal possible.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;libsignal contains platform-agnostic APIs used by the official Signal clients and servers, exposed as a Java, Swift, or TypeScript library. The underlying implementations are written in Rust:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libsignal-protocol: Implements the Signal protocol, including the &lt;a href=&#34;https://signal.org/docs/&#34;&gt;Double Ratchet algorithm&lt;/a&gt;. A replacement for &lt;a href=&#34;https://github.com/signalapp/libsignal-protocol-java&#34;&gt;libsignal-protocol-java&lt;/a&gt; and &lt;a href=&#34;https://github.com/signalapp/libsignal-metadata-java&#34;&gt;libsignal-metadata-java&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;signal-crypto: Cryptographic primitives such as AES-GCM. We use &lt;a href=&#34;https://github.com/RustCrypto&#34;&gt;RustCrypto&lt;/a&gt;&#39;s where we can but sometimes have differing needs.&lt;/li&gt; &#xA; &lt;li&gt;device-transfer: Support logic for Signal&#39;s device-to-device transfer feature.&lt;/li&gt; &#xA; &lt;li&gt;attest: Functionality for remote attestation of &lt;a href=&#34;https://www.intel.com/content/www/us/en/architecture-and-technology/software-guard-extensions.html&#34;&gt;SGX enclaves&lt;/a&gt; and server-side &lt;a href=&#34;https://en.wikipedia.org/wiki/Hardware_security_module&#34;&gt;HSMs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;zkgroup: Functionality for &lt;a href=&#34;https://signal.org/blog/signal-private-group-system/&#34;&gt;zero-knowledge groups&lt;/a&gt; and related features available in Signal.&lt;/li&gt; &#xA; &lt;li&gt;zkcredential: An abstraction for the sort of zero-knowledge credentials used by zkgroup, based on the paper &#34;&lt;a href=&#34;https://eprint.iacr.org/2019/1416.pdf&#34;&gt;The Signal Private Group System&lt;/a&gt;&#34; by Chase, Perrin, and Zaverucha.&lt;/li&gt; &#xA; &lt;li&gt;poksho: Utilities for implementing zero-knowledge proofs (such as those used by zkgroup); stands for &#34;proof-of-knowledge, stateful-hash-object&#34;.&lt;/li&gt; &#xA; &lt;li&gt;pin: Functionality for consistently using &lt;a href=&#34;https://signal.org/blog/signal-pins/&#34;&gt;PINs&lt;/a&gt; as passwords in Signal&#39;s Secure Value Recovery system.&lt;/li&gt; &#xA; &lt;li&gt;usernames: Functionality for username generation, hashing, and proofs.&lt;/li&gt; &#xA; &lt;li&gt;media: Utilities for manipulating media.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository is used by the Signal client apps (&lt;a href=&#34;https://github.com/signalapp/Signal-Android&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://github.com/signalapp/Signal-iOS&#34;&gt;iOS&lt;/a&gt;, and &lt;a href=&#34;https://github.com/signalapp/Signal-Desktop&#34;&gt;Desktop&lt;/a&gt;) as well as server-side. Use outside of Signal is unsupported. In particular, the products of this repository are the Java, Swift, and TypeScript libraries that wrap the underlying Rust implementations. All APIs and implementations are subject to change without notice, as are the JNI, C, and Node add-on &#34;bridge&#34; layers. However, backwards-incompatible changes to the Java, Swift, TypeScript, and non-bridge Rust APIs will be reflected in the version number on a best-effort basis, including increases to the minimum supported tools versions.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;To build anything in this repository you must have &lt;a href=&#34;https://rust-lang.org&#34;&gt;Rust&lt;/a&gt; installed, as well as Clang, libclang, &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;, Make, protoc, and git. On a Debian-like system, you can get these extra dependencies through &lt;code&gt;apt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ apt-get install clang libclang-dev cmake make protobuf-compiler git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, some of the tests in this repository rely on submodules being checked out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build currently uses a specific version of the Rust nightly compiler, which will be downloaded automatically by cargo. To build and test the basic protocol libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cargo build&#xA;...&#xA;$ cargo test&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Java/Android&lt;/h2&gt; &#xA;&lt;p&gt;To build for Android you must install several additional packages including a JDK, the Android NDK/SDK, and add the Android targets to the Rust compiler, using&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build the Java/Android &lt;code&gt;jar&lt;/code&gt; and &lt;code&gt;aar&lt;/code&gt;, and run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd java&#xA;$ ./gradlew test&#xA;$ ./gradlew build # if you need AAR outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;-P debugLevelLogs&lt;/code&gt; to Gradle to build without filtering out debug- and verbose-level logs from Rust.&lt;/p&gt; &#xA;&lt;p&gt;Alternately, a build system using Docker is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd java&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When exposing new APIs to Java, you will need to run &lt;code&gt;rust/bridge/jni/bin/gen_java_decl.py&lt;/code&gt; in addition to rebuilding.&lt;/p&gt; &#xA;&lt;h3&gt;Maven Central&lt;/h3&gt; &#xA;&lt;p&gt;Signal publishes Java packages on &lt;a href=&#34;https://central.sonatype.org&#34;&gt;Maven Central&lt;/a&gt; for its own use, under the names org.signal:libsignal-server, org.signal:libsignal-client, and org.signal:libsignal-android. libsignal-client and libsignal-server contain native libraries for Debian-flavored x86_64 Linux as well as Windows (x86_64) and macOS (x86_64 and arm64). libsignal-android contains native libraries for armeabi-v7a, arm64-v8a, x86, and x86_64 Android.&lt;/p&gt; &#xA;&lt;p&gt;When building for Android you need &lt;em&gt;both&lt;/em&gt; libsignal-android and libsignal-client, but the Windows and macOS libraries in libsignal-client won&#39;t automatically be excluded from your final app. You can explicitly exclude them using &lt;code&gt;packagingOptions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;android {&#xA;  // ...&#xA;  packagingOptions {&#xA;    resources {&#xA;      excludes += setOf(&#34;libsignal_jni*.dylib&#34;, &#34;signal_jni*.dll&#34;)&#xA;    }&#xA;  }&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can additionally exclude &lt;code&gt;libsignal_jni_testing.so&lt;/code&gt; if you do not plan to use any of the APIs intended for client testing.&lt;/p&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;p&gt;To learn about the Swift build process see &lt;a href=&#34;https://raw.githubusercontent.com/signalapp/libsignal/main/swift/&#34;&gt;&lt;code&gt;swift/README.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Node&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need Node installed to build. If you have &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt;, you can run &lt;code&gt;nvm use&lt;/code&gt; to select an appropriate version automatically.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://classic.yarnpkg.com/&#34;&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; as our package manager, and &lt;code&gt;node-gyp&lt;/code&gt; to control building the Rust library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd node&#xA;$ nvm use&#xA;$ yarn install&#xA;$ yarn node-gyp rebuild  # clean-&amp;gt;configure-&amp;gt;build&#xA;$ yarn tsc&#xA;$ yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When testing changes locally, you can use &lt;code&gt;yarn build&lt;/code&gt; to do an incremental rebuild of the Rust library. Alternately, &lt;code&gt;yarn build-with-debug-level-logs&lt;/code&gt; will rebuild without filtering out debug- and verbose-level logs.&lt;/p&gt; &#xA;&lt;p&gt;When exposing new APIs to Node, you will need to run &lt;code&gt;rust/bridge/node/bin/gen_ts_decl.py&lt;/code&gt; in addition to rebuilding.&lt;/p&gt; &#xA;&lt;h3&gt;NPM&lt;/h3&gt; &#xA;&lt;p&gt;Signal publishes the NPM package &lt;code&gt;@signalapp/libsignal-client&lt;/code&gt; for its own use, including native libraries for Windows, macOS, and Debian-flavored Linux. Both x64 and arm64 builds are included for all three platforms, but the arm64 builds for Windows and Linux are considered experimental, since there are no official builds of Signal for those architectures.&lt;/p&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Signal does accept external contributions to this project. However unless the change is simple and easily understood, for example fixing a bug or portability issue, adding a new test, or improving performance, first open an issue to discuss your intended change as not all changes can be accepted.&lt;/p&gt; &#xA;&lt;p&gt;Contributions that will not be used directly by one of Signal&#39;s official client apps may still be considered, but only if they do not pose an undue maintenance burden or conflict with the goals of the project.&lt;/p&gt; &#xA;&lt;p&gt;Signing a &lt;a href=&#34;https://signal.org/cla/&#34;&gt;CLA (Contributor License Agreement)&lt;/a&gt; is required for all contributions.&lt;/p&gt; &#xA;&lt;h1&gt;Legal things&lt;/h1&gt; &#xA;&lt;h2&gt;Cryptography Notice&lt;/h2&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;http://www.wassenaar.org/&#34;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2020-2024 Signal Messenger, LLC&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the GNU AGPLv3: &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;https://www.gnu.org/licenses/agpl-3.0.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>