<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-14T02:03:41Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>memorysafety/sudo-rs</title>
    <updated>2023-05-14T02:03:41Z</updated>
    <id>tag:github.com,2023-05-14:/memorysafety/sudo-rs</id>
    <link href="https://github.com/memorysafety/sudo-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A memory safe implementation of sudo and su.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sudo-rs&lt;/h1&gt; &#xA;&lt;p&gt;A safety oriented and memory safe implementation of sudo and su written in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;⚠️ WARNING&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sudo-rs is currently under active development and is not suited for any production environment. Using sudo-rs is only recommended for development and testing purposes, but you should expect any system that has sudo-rs installed to break easily and to not be secure.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Sudo-rs currently only supports Linux-based operating systems, although other unix-based operating systems may work, they are currently not actively supported or maintained.&lt;/p&gt; &#xA;&lt;p&gt;Sudo-rs is written in Rust. We currently only support the latest stable compiler toolchain. To get a recent compiler toolchain we recommend using &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt;. To build sudo-rs, install the dependencies (listed below with their names in Debian repositories):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clang (clang)&lt;/li&gt; &#xA; &lt;li&gt;libclang development libraries (libclang-dev)&lt;/li&gt; &#xA; &lt;li&gt;PAM library (libpam0g-dev)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With dependencies installed, building sudo-rs is a simple matter of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This produces a binary &lt;code&gt;target/release/sudo&lt;/code&gt;. However, this binary must have the setuid flag set and must be owned by the root user in order to provide any useful functionality. Because we are in such an early stage we also require an environment variable &lt;code&gt;SUDO_RS_IS_UNSTABLE&lt;/code&gt; to be set, and it must have the value &lt;code&gt;I accept that my system may break unexpectedly&lt;/code&gt;. If you are unsure about how to set this up, then the current version of sudo is not intended for you.&lt;/p&gt; &#xA;&lt;p&gt;Sudo-rs needs the sudoers configuration file, but it currently reads it at &lt;code&gt;/etc/sudoers.test&lt;/code&gt;, instead of the default location. You must make sure that a valid sudoers configuration exists at that location. For an explanation of the sudoers syntax you can look at the &lt;a href=&#34;https://www.sudo.ws/docs/man/sudoers.man/&#34;&gt;original sudo man page&lt;/a&gt;. While most syntax should be supported as is, most functionality will currently not be implemented. Sudo-rs currently may not always warn about this, so your sudoers file may have a different meaning compared to the original sudo implementation.&lt;/p&gt; &#xA;&lt;p&gt;Sudo-rs always uses PAM for authentication at this time, your system must be set up for PAM. Sudo-rs will use the &lt;code&gt;sudo&lt;/code&gt; service configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Current work&lt;/h2&gt; &#xA;&lt;p&gt;Our current target is to build a drop-in replacement for most basic use cases of sudo. For the sudoers config syntax this means that we aim to at least support the default configuration files of some common Linux distributions (we currently aim to support both the Fedora and Debian default sudoers configs). Our implementation should eventually at least support all commonly used CLI flags from the original sudo implementation (e.g., flags like &lt;code&gt;-u&lt;/code&gt;, &lt;code&gt;-g&lt;/code&gt; and &lt;code&gt;-s&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Some parts of the original sudo are explicitly not in scope. Sudo has a large and rich history and some of the features available in the original sudo implementation are largely unused or only available for legacy platforms. In order to determine which features make it we both consider whether the feature is relevant for modern systems, and whether it will receive at very least decent usage. Finally, of course, a feature should not compromise the safety of the whole program.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;su&lt;/code&gt; program is a much simpler program and will only include basic functionality. However, we think that the building blocks that make up our sudo implementation will be suited to be used for creating a simple su implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;While we are still working on getting the basic infrastructure and architecture of sudo-rs up and running, accepting arbitrary contributions will be difficult. If you have any small changes or suggestions please do leave those, but if you want to work on larger parts of sudo-rs please ask first, or we may risk doing work twice or not being able to include your work.&lt;/p&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;p&gt;While our initial target is a drop-in replacement for most basic use cases of sudo, our work may evolve beyond that target. We are also looking into alternative ways to configure sudo without the sudoers config file syntax and to extract parts of our work in usable crates for other people.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>embassy-rs/embassy</title>
    <updated>2023-05-14T02:03:41Z</updated>
    <id>tag:github.com,2023-05-14:/embassy-rs/embassy</id>
    <link href="https://github.com/embassy-rs/embassy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern embedded framework, using Rust and async.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Embassy&lt;/h1&gt; &#xA;&lt;p&gt;Embassy is the next-generation framework for embedded applications. Write safe, correct and energy-efficient embedded code faster, using the Rust programming language, its async facilities, and the Embassy libraries.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://embassy.dev/dev/index.html&#34;&gt;Documentation&lt;/a&gt; - &lt;a href=&#34;https://docs.embassy.dev/&#34;&gt;API reference&lt;/a&gt; - &lt;a href=&#34;https://embassy.dev/&#34;&gt;Website&lt;/a&gt; - &lt;a href=&#34;https://matrix.to/#/#embassy-rs:matrix.org&#34;&gt;Chat&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Rust + async ❤️ embedded&lt;/h2&gt; &#xA;&lt;p&gt;The Rust programming language is blazingly fast and memory-efficient, with no runtime, garbage collector or OS. It catches a wide variety of bugs at compile time, thanks to its full memory- and thread-safety, and expressive type system.&lt;/p&gt; &#xA;&lt;p&gt;Rust&#39;s &lt;a href=&#34;https://rust-lang.github.io/async-book/&#34;&gt;async/await&lt;/a&gt; allows for unprecedently easy and efficient multitasking in embedded systems. Tasks get transformed at compile time into state machines that get run cooperatively. It requires no dynamic memory allocation, and runs on a single stack, so no per-task stack size tuning is required. It obsoletes the need for a traditional RTOS with kernel context switching, and is &lt;a href=&#34;https://tweedegolf.nl/en/blog/65/async-rust-vs-rtos-showdown&#34;&gt;faster and smaller than one!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Batteries included&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hardware Abstraction Layers&lt;/strong&gt; - HALs implement safe, idiomatic Rust APIs to use the hardware capabilities, so raw register manipulation is not needed. The Embassy project maintains HALs for select hardware, but you can still use HALs from other projects with Embassy.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.embassy.dev/embassy-stm32/&#34;&gt;embassy-stm32&lt;/a&gt;, for all STM32 microcontroller families.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.embassy.dev/embassy-nrf/&#34;&gt;embassy-nrf&lt;/a&gt;, for the Nordic Semiconductor nRF52, nRF53, nRF91 series.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.embassy.dev/embassy-rp/&#34;&gt;embassy-rp&lt;/a&gt;, for the Raspberry Pi RP2040 microcontroller.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/esp-rs&#34;&gt;esp-rs&lt;/a&gt;, for the Espressif Systems ESP32 series of chips. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Embassy HAL support for Espressif chips is being developed in the &lt;a href=&#34;https://github.com/esp-rs/esp-hal&#34;&gt;esp-rs/esp-hal&lt;/a&gt; repository.&lt;/li&gt; &#xA;     &lt;li&gt;Async WiFi, Bluetooth and ESP-NOW is being developed in the &lt;a href=&#34;https://github.com/esp-rs/esp-wifi&#34;&gt;esp-rs/esp-wifi&lt;/a&gt; repository.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Time that Just Works&lt;/strong&gt; - No more messing with hardware timers. &lt;a href=&#34;https://docs.embassy.dev/embassy-time&#34;&gt;embassy_time&lt;/a&gt; provides Instant, Duration and Timer types that are globally available and never overflow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Real-time ready&lt;/strong&gt; - Tasks on the same async executor run cooperatively, but you can create multiple executors with different priorities, so that higher priority tasks preempt lower priority ones. See the &lt;a href=&#34;https://github.com/embassy-rs/embassy/raw/master/examples/nrf52840/src/bin/multiprio.rs&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low-power ready&lt;/strong&gt; - Easily build devices with years of battery life. The async executor automatically puts the core to sleep when there&#39;s no work to do. Tasks are woken by interrupts, there is no busy-loop polling while waiting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt; - The &lt;a href=&#34;https://docs.embassy.dev/embassy-net/&#34;&gt;embassy-net&lt;/a&gt; network stack implements extensive networking functionality, including Ethernet, IP, TCP, UDP, ICMP and DHCP. Async drastically simplifies managing timeouts and serving multiple connections concurrently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt; - The &lt;a href=&#34;https://github.com/embassy-rs/nrf-softdevice&#34;&gt;nrf-softdevice&lt;/a&gt; crate provides Bluetooth Low Energy 4.x and 5.x support for nRF52 microcontrollers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LoRa&lt;/strong&gt; - &lt;a href=&#34;https://docs.embassy.dev/embassy-lora/&#34;&gt;embassy-lora&lt;/a&gt; supports LoRa networking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;USB&lt;/strong&gt; - &lt;a href=&#34;https://docs.embassy.dev/embassy-usb/&#34;&gt;embassy-usb&lt;/a&gt; implements a device-side USB stack. Implementations for common classes such as USB serial (CDC ACM) and USB HID are available, and a rich builder API allows building your own.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bootloader and DFU&lt;/strong&gt; - &lt;a href=&#34;https://github.com/embassy-rs/embassy/tree/master/embassy-boot&#34;&gt;embassy-boot&lt;/a&gt; is a lightweight bootloader supporting firmware application upgrades in a power-fail-safe way, with trial boots and rollbacks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sneak peek&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;use defmt::info;&#xA;use embassy_executor::Spawner;&#xA;use embassy_time::{Duration, Timer};&#xA;use embassy_nrf::gpio::{AnyPin, Input, Level, Output, OutputDrive, Pin, Pull};&#xA;use embassy_nrf::Peripherals;&#xA;&#xA;// Declare async tasks&#xA;#[embassy_executor::task]&#xA;async fn blink(pin: AnyPin) {&#xA;    let mut led = Output::new(pin, Level::Low, OutputDrive::Standard);&#xA;&#xA;    loop {&#xA;        // Timekeeping is globally available, no need to mess with hardware timers.&#xA;        led.set_high();&#xA;        Timer::after(Duration::from_millis(150)).await;&#xA;        led.set_low();&#xA;        Timer::after(Duration::from_millis(150)).await;&#xA;    }&#xA;}&#xA;&#xA;// Main is itself an async task as well.&#xA;#[embassy_executor::main]&#xA;async fn main(spawner: Spawner) {&#xA;    let p = embassy_nrf::init(Default::default());&#xA;&#xA;    // Spawned tasks run in the background, concurrently.&#xA;    spawner.spawn(blink(p.P0_13.degrade())).unwrap();&#xA;&#xA;    let mut button = Input::new(p.P0_11, Pull::Up);&#xA;    loop {&#xA;        // Asynchronously wait for GPIO events, allowing other tasks&#xA;        // to run, or the core to sleep.&#xA;        button.wait_for_low().await;&#xA;        info!(&#34;Button pressed!&#34;);&#xA;        button.wait_for_high().await;&#xA;        info!(&#34;Button released!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Examples are found in the &lt;code&gt;examples/&lt;/code&gt; folder seperated by the chip manufacturer they are designed to run on. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/nrf52840&lt;/code&gt; run on the &lt;code&gt;nrf52840-dk&lt;/code&gt; board (PCA10056) but should be easily adaptable to other nRF52 chips and boards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/nrf5340&lt;/code&gt; run on the &lt;code&gt;nrf5340-dk&lt;/code&gt; board (PCA10095).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/stm32xx&lt;/code&gt; for the various STM32 families.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/rp&lt;/code&gt; are for the RP2040 chip.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/std&lt;/code&gt; are designed to run locally on your PC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup git submodules (needed for STM32 examples)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;probe-rs-cli&lt;/code&gt; with defmt support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install probe-rs-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change directory to the sample&#39;s base directory. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples/nrf52840&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --bin blinky&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing Embassy with Rust Analyzer based editors&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://rust-analyzer.github.io/&#34;&gt;Rust Analyzer&lt;/a&gt; is used by &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; and others. Given the multiple targets that Embassy serves, there is no Cargo workspace file. Instead, the Rust Analyzer must be told of the target project to work with. In the case of Visual Studio Code, please refer to the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file&#39;s &lt;code&gt;rust-analyzer.linkedProjects&lt;/code&gt;setting.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum supported Rust version (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;Embassy is guaranteed to compile on the latest stable Rust version at the time of release. It might compile with older versions but that may change in any new patch release.&lt;/p&gt; &#xA;&lt;p&gt;Several features require nightly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;#[embassy_executor::main]&lt;/code&gt; and &lt;code&gt;#[embassy_executor::task]&lt;/code&gt; attribute macros.&lt;/li&gt; &#xA; &lt;li&gt;Async traits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are enabled by activating the &lt;code&gt;nightly&lt;/code&gt; Cargo feature. If you do so, Embassy is guaranteed to compile on the exact nightly version specified in &lt;code&gt;rust-toolchain.toml&lt;/code&gt;. It might compile with older or newer nightly versions, but that may change in any new patch release.&lt;/p&gt; &#xA;&lt;h2&gt;Why the name?&lt;/h2&gt; &#xA;&lt;p&gt;EMBedded ASYnc! :)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/embassy-rs/embassy/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/embassy-rs/embassy/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Byron/gitoxide</title>
    <updated>2023-05-14T02:03:41Z</updated>
    <id>tag:github.com,2023-05-14:/Byron/gitoxide</id>
    <link href="https://github.com/Byron/gitoxide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An idiomatic, lean, fast &amp; safe pure Rust implementation of Git&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/actions&#34;&gt;&lt;img src=&#34;https://github.com/Byron/gitoxide/workflows/Rust/badge.svg?sanitize=true&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/gitoxide&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/gitoxide.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Byron/gitoxide/main/etc/msrv-badge.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gitoxide&lt;/code&gt; is an implementation of &lt;code&gt;git&lt;/code&gt; written in Rust for developing future-proof applications which strive for correctness and performance while providing a pleasant and unsurprising developer experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gitoxide&lt;/code&gt; provides the &lt;code&gt;gix&lt;/code&gt; and &lt;code&gt;ein&lt;/code&gt; binaries for use on the command-line to allow experimentation with key features like &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;clone&lt;/code&gt;, and to validate the usability and control of the API offered by the &lt;a href=&#34;https://docs.rs/gix&#34;&gt;&lt;code&gt;gix&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gitoxide&lt;/code&gt; aspires to be a production-grade server implementation and the &lt;code&gt;ein&lt;/code&gt; binary aspires to become the default way to interact with git repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/542159&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/542159.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;The command-line tools as well as the status of each crate is described in &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md&#34;&gt;the crate status document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For use in applications, look for the &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix&#34;&gt;&lt;code&gt;gix&lt;/code&gt;&lt;/a&gt; crate, which serves as entrypoint to the functionality provided by various lower-level plumbing crates like &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-config&#34;&gt;&lt;code&gt;gix-config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Crates&lt;/h3&gt; &#xA;&lt;p&gt;Follow linked crate name for detailed status. Please note that all crates follow &lt;a href=&#34;https://semver.org&#34;&gt;semver&lt;/a&gt; as well as the &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/STABILITY.md&#34;&gt;stability guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Production Grade&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability Tier 1&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/gix-lock/README.md&#34;&gt;gix-lock&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stability Tier 2&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/gix-tempfile/README.md&#34;&gt;gix-tempfile&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stabilization Candidates&lt;/h3&gt; &#xA;&lt;p&gt;Crates that seem feature complete and need to see some more use before they can be released as 1.0. Documentation is complete and was reviewed at least once.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-mailmap&#34;&gt;gix-mailmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-chunk&#34;&gt;gix-chunk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-ref&#34;&gt;gix-ref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-config&#34;&gt;gix-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-config-value&#34;&gt;gix-config-value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-glob&#34;&gt;gix-glob&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Initial Development&lt;/h3&gt; &#xA;&lt;p&gt;These crates may be missing some features and thus are somewhat incomplete, but what&#39;s there is usable to some extent.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;usable&lt;/strong&gt; &lt;em&gt;(with rough but complete docs, possibly incomplete functionality)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix&#34;&gt;gix&lt;/a&gt; (&lt;strong&gt;⬅ entrypoint&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-actor&#34;&gt;gix-actor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-hash&#34;&gt;gix-hash&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-object&#34;&gt;gix-object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-validate&#34;&gt;gix-validate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-url&#34;&gt;gix-url&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-packetline&#34;&gt;gix-packetline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-transport&#34;&gt;gix-transport&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-protocol&#34;&gt;gix-protocol&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-pack&#34;&gt;gix-pack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-odb&#34;&gt;gix-odb&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-commitgraph&#34;&gt;gix-commitgraph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-diff&#34;&gt;gix-diff&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-traverse&#34;&gt;gix-traverse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-features&#34;&gt;gix-features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-credentials&#34;&gt;gix-credentials&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-sec&#34;&gt;gix-sec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-quote&#34;&gt;gix-quote&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-discover&#34;&gt;gix-discover&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-path&#34;&gt;gix-path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-attributes&#34;&gt;gix-attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-ignore&#34;&gt;gix-ignore&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-pathspec&#34;&gt;gix-pathspec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-index&#34;&gt;gix-index&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-revision&#34;&gt;gix-revision&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-command&#34;&gt;gix-command&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-prompt&#34;&gt;gix-prompt&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-refspec&#34;&gt;gix-refspec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-fs&#34;&gt;gix-fs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-utils&#34;&gt;gix-utils&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-hashtable&#34;&gt;gix-hashtable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-worktree&#34;&gt;gix-worktree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-bitmap&#34;&gt;gix-bitmap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitoxide-core&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;very early&lt;/strong&gt; &lt;em&gt;(possibly without any documentation and many rough edges)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-date&#34;&gt;gix-date&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-archive&#34;&gt;gix-archive&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;idea&lt;/strong&gt; &lt;em&gt;(just a name placeholder)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-note&#34;&gt;gix-note&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-fetchhead&#34;&gt;gix-fetchhead&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-filter&#34;&gt;gix-filter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-lfs&#34;&gt;gix-lfs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-rebase&#34;&gt;gix-rebase&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-sequencer&#34;&gt;gix-sequencer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-submodule&#34;&gt;gix-submodule&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-tui&#34;&gt;gix-tui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-tix&#34;&gt;gix-tix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/crate-status.md#gix-bundle&#34;&gt;gix-bundle&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stress Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Verify huge packs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Explode a pack to disk&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate and verify large commit graphs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate huge pack from a lot of loose objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stability and MSRV&lt;/h3&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/STABILITY.md&#34;&gt;stability guide&lt;/a&gt; helps to judge how much churn can be expected when depending on crates in this workspace.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Download a Binary Release&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;cargo quickinstall&lt;/code&gt;, one is able to fetch &lt;a href=&#34;https://github.com/Byron/gitoxide/releases&#34;&gt;binary releases&lt;/a&gt;. You can install it via &lt;code&gt;cargo install cargo-quickinstall&lt;/code&gt;, assuming the &lt;a href=&#34;https://rustup.rs&#34;&gt;rust toolchain&lt;/a&gt; is present.&lt;/p&gt; &#xA;&lt;p&gt;Then install gitoxide with &lt;code&gt;cargo quickinstall gitoxide&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/Byron/gitoxide/releases&#34;&gt;releases section&lt;/a&gt; for manual installation and various alternative builds that are &lt;em&gt;slimmer&lt;/em&gt; or &lt;em&gt;smaller&lt;/em&gt;, depending on your needs, for &lt;em&gt;Linux&lt;/em&gt;, &lt;em&gt;MacOS&lt;/em&gt; and &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download from Arch-Repository&lt;/h3&gt; &#xA;&lt;p&gt;For Arch Linux you can download &lt;code&gt;gitoxide&lt;/code&gt; from &lt;code&gt;community&lt;/code&gt; repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S gitoxide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source via Cargo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; is the Rust package manager which can easily be obtained through &lt;a href=&#34;https://rustup.rs&#34;&gt;rustup&lt;/a&gt;. With it, you can build your own binary effortlessly and for your particular CPU for additional performance gains.&lt;/p&gt; &#xA;&lt;p&gt;The minimum supported Rust version is &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/.github/workflows/msrv.yml#L23&#34;&gt;documented in the CI configuration&lt;/a&gt;, the latest stable one will work as well.&lt;/p&gt; &#xA;&lt;p&gt;There are various build configurations, all of them are &lt;a href=&#34;https://docs.rs/crate/gitoxide/latest&#34;&gt;documented here&lt;/a&gt;. The documentation should also be useful for packagers who need to tune external dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# A certain way to install `gitoxide` with just Rust and a C compiler installed.&#xA;# If there are problems with SSL certificates during clones, try to omit `--locked`.&#xA;cargo install gitoxide --locked --no-default-features --features max-pure &#xA;&#xA;# The default installation, &#39;max&#39;, is the fastest, but also needs some libraries available to build successfully.&#xA;# Installing these is platform-dependent and thus can&#39;t be explained here.&#xA;cargo install gitoxide&#xA;&#xA;# For smaller binaries and even faster build times that are traded for a less fancy CLI implementation, use `lean`&#xA;# or `lean-termion` respectively.&#xA;cargo install gitoxide --locked --no-default-features --features lean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following installs the latest unpublished release directly from git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --git https://github.com/Byron/gitoxide  gitoxide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to deal with build failures&lt;/h4&gt; &#xA;&lt;p&gt;On some platforms, installation may fail due to lack of tools required by &lt;code&gt;C&lt;/code&gt; toolchains. This can generally be avoided by installation with &lt;code&gt;cargo install gitoxide --no-default-features --features max-pure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;What follows is a list of known failures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Fedora, &lt;code&gt;perl&lt;/code&gt; needs to be installed for &lt;code&gt;OpenSSL&lt;/code&gt; to build properly. This can be done with the following command: &lt;code&gt;dnf install perl&lt;/code&gt; (see &lt;a href=&#34;https://github.com/Byron/gitoxide/issues/592&#34;&gt;this issue&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, there are two binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ein&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;high level commands, &lt;em&gt;porcelain&lt;/em&gt;, for every-day use, optimized for a pleasant user experience&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gix&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;low level commands, &lt;em&gt;plumbing&lt;/em&gt;, for use in more specialized cases and to validate newly written code in real-world scenarios&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Goals&lt;/h2&gt; &#xA;&lt;p&gt;Project goals can change over time as we learn more, and they can be challenged.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;a pure-rust implementation of git&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;including &lt;em&gt;transport&lt;/em&gt;, &lt;em&gt;object database&lt;/em&gt;, &lt;em&gt;references&lt;/em&gt;, &lt;em&gt;cli&lt;/em&gt; and &lt;em&gt;tui&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;a simple command-line interface is provided for the most common git operations, optimized for user experience. A &lt;em&gt;simple-git&lt;/em&gt; if you so will.&lt;/li&gt; &#xA;   &lt;li&gt;be the go-to implementation for anyone who wants to solve problems around git, and become &lt;em&gt;the&lt;/em&gt; alternative to &lt;code&gt;GitPython&lt;/code&gt; and &lt;em&gt;libgit2&lt;/em&gt; in the process.&lt;/li&gt; &#xA;   &lt;li&gt;become the foundation for a distributed alternative to GitHub, and maybe even for use within GitHub itself&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;learn from the best to write the best possible idiomatic Rust&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;libgit2&lt;/em&gt; is a fantastic resource to see what abstractions work, we will use them&lt;/li&gt; &#xA;   &lt;li&gt;use Rust&#39;s type system to make misuse impossible&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;be the best performing implementation&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use Rust&#39;s type system to optimize for work not done without being hard to use&lt;/li&gt; &#xA;   &lt;li&gt;make use of parallelism from the get go&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;sparse checkout&lt;/em&gt; support from day one&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;assure on-disk consistency&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;assure reads never interfere with concurrent writes&lt;/li&gt; &#xA;   &lt;li&gt;assure multiple concurrent writes don&#39;t cause trouble&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;take shortcuts, but not in quality&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;binaries may use &lt;code&gt;anyhow::Error&lt;/code&gt; exhaustively, knowing these errors are solely user-facing.&lt;/li&gt; &#xA;   &lt;li&gt;libraries use light-weight custom errors implemented using &lt;code&gt;quick-error&lt;/code&gt; or &lt;code&gt;thiserror&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;internationalization is nothing we are concerned with right now.&lt;/li&gt; &#xA;   &lt;li&gt;IO errors due to insufficient amount of open file handles don&#39;t always lead to operation failure&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross platform support, including Windows&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With the tools and experience available here there is no reason not to support Windows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Byron/gitoxide/raw/df66d74aa2a8cb62d8a03383135f08c8e8c579a8/.github/workflows/rust.yml#L34&#34;&gt;Windows is tested on CI&lt;/a&gt; and failures do prevent releases.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;p&gt;Project non-goals can change over time as we learn more, and they can be challenged.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;replicate &lt;code&gt;git&lt;/code&gt; command functionality perfectly&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git&lt;/code&gt; is &lt;code&gt;git&lt;/code&gt;, and there is no reason to not use it. Our path is the one of simplicity to make getting started with git easy.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;be incompatible to git&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the on-disk format must remain compatible, and we will never contend with it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;use async IO everywhere&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for the most part, git operations are heavily reliant on memory mapped IO as well as CPU to decompress data, which doesn&#39;t lend itself well to async IO out of the box.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;blocking&lt;/code&gt; as well as &lt;code&gt;gix-features::interrupt&lt;/code&gt; to bring operations into the async world and to control long running operations.&lt;/li&gt; &#xA;   &lt;li&gt;When connecting or streaming over TCP connections, especially when receiving on the server, async seems like a must though, but behind a feature flag.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If what you have seen so far sparked your interest to contribute, then let us say: We are happy to have you and help you to get started.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️Note❗️: For cloning, &lt;code&gt;gix-lfs&lt;/code&gt; needs to be locally installed or the checkout will fail. &lt;code&gt;git lfs install&lt;/code&gt; must have been called once, followed by &lt;code&gt;git lfs pull&lt;/code&gt; to replace the &lt;code&gt;lfs&lt;/code&gt;-pointer files.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We recommend running &lt;code&gt;make tests check-size&lt;/code&gt; during the development process to assure CI is green before pushing.&lt;/p&gt; &#xA;&lt;p&gt;A backlog for work ready to be picked up is &lt;a href=&#34;https://github.com/Byron/gitoxide/projects&#34;&gt;available in the Project&#39;s Kanban board&lt;/a&gt;, which contains instructions on how to pick a task. If it&#39;s empty or you have other questions, feel free to &lt;a href=&#34;https://github.com/Byron/gitoxide/discussions&#34;&gt;start a discussion&lt;/a&gt; or reach out to @Byron &lt;a href=&#34;https://keybase.io/byronbates&#34;&gt;privately&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For additional details, also take a look at the &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/COLLABORATING.md&#34;&gt;collaboration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting started with Video Tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/playlist?list=PLMHbQxe1e9Mk5kOHrm9v20-umkE2ck_gE&#34;&gt;Learning Rust with Gitoxide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In 17 episodes you can learn all you need to meaningfully contribute to &lt;code&gt;gitoxide&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/playlist?list=PLMHbQxe1e9MkEmuj9csczEK1O06l0Npy5&#34;&gt;Getting into Gitoxide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get an introduction to &lt;code&gt;gitoxide&lt;/code&gt; itself which should be a good foundation for any contribution, but isn&#39;t a requirement for contributions either.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLMHbQxe1e9MlhyyZQXPi_dc-bKudE-WUw&#34;&gt;Gifting Gitoxide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See how PRs are reviewed along with a lot of inner monologue.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other Media&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rustacean-station.org/episode/055-sebastian-thiel/&#34;&gt;Rustacean Station Podcast&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;Features for 1.0&lt;/h3&gt; &#xA;&lt;p&gt;Provide a CLI to for the most basic user journey:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; initialize a repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; fetch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; and update worktree&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;clone a repository &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; bare&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; with working tree&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; create a commit after adding worktree files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add a remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; push &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; create (thin) pack&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ideas for Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;gix tool open-remote&lt;/code&gt; open the URL of the remote, possibly after applying known transformations to go from &lt;code&gt;ssh&lt;/code&gt; to &lt;code&gt;https&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;tix&lt;/code&gt; as example implementation of &lt;code&gt;tig&lt;/code&gt;, displaying a version of the commit graph, useful for practicing how highly responsive GUIs can be made.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Something like &lt;a href=&#34;https://github.com/github/git-sizer&#34;&gt;&lt;code&gt;git-sizer&lt;/code&gt;&lt;/a&gt;, but leveraging extreme decompression speeds of indexed packs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Open up SQL for git using &lt;a href=&#34;https://github.com/rusqlite/rusqlite/raw/master/tests/vtab.rs&#34;&gt;sqlite virtual tables&lt;/a&gt;. Check out gitqlite as well. What would an MVP look like? Maybe even something that could ship with gitoxide. See &lt;a href=&#34;https://github.com/filhodanuvem/gitql&#34;&gt;this go implementation as example&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A truly awesome history rewriter which makes it easy to understand what happened while avoiding all pitfalls. Think BFG, but more awesome, if that&#39;s possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;gix-tui&lt;/code&gt; should learn a lot from &lt;a href=&#34;https://www.fossil-scm.org&#34;&gt;fossil-scm&lt;/a&gt; regarding the presentation of data. Maybe &lt;a href=&#34;https://github.com/Lutetium-Vanadium/requestty/&#34;&gt;this&lt;/a&gt; can be used for prompts. Probably &lt;a href=&#34;https://magit.vc&#34;&gt;magit&lt;/a&gt; has a lot to offer, too.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ideas for Spin-Offs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A system to integrate tightly with &lt;code&gt;gix-lfs&lt;/code&gt; to allow a multi-tier architecture so that assets can be stored in git and are accessible quickly from an intranet location (for example by accessing the storage read-only over the network) while changes are pushed immediately by the server to other edge locations, like &lt;em&gt;the cloud&lt;/em&gt; or backups. Sparse checkouts along with explorer/finder integrations make it convenient to only work on a small subset of files locally. Clones can contain all configuration somebody would need to work efficiently from their location, and authentication for the git history as well as LFS resources make the system secure. One could imagine encryption support for untrusted locations in &lt;em&gt;the cloud&lt;/em&gt; even though more research would have to be done to make it truly secure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A &lt;a href=&#34;https://github.com/syncthing/syncthing&#34;&gt;syncthing&lt;/a&gt; like client/server application. This is to demonstrate how lower-level crates can be combined into custom applications that use only part of git&#39;s technology to achieve their very own thing. Watch out for big file support, multi-device cross-syncing, the possibility for untrusted destinations using full-encryption, case-insensitive and sensitive filesystems, and extended file attributes as well as ignore files.&lt;/li&gt; &#xA; &lt;li&gt;An event-based database that uses commit messages to store deltas, while occasionally aggregating the actual state in a tree. Of course it&#39;s distributed by nature, allowing people to work offline. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It&#39;s abstracted to completely hide the actual data model behind it, allowing for all kinds of things to be implemented on top.&lt;/li&gt; &#xA;   &lt;li&gt;Commits probably need a nanosecond component for the timestamp, which can be added via custom header field.&lt;/li&gt; &#xA;   &lt;li&gt;having recording all changes allows for perfect merging, both on the client or on the server, while keeping a natural audit log which makes it useful for mission critical databases in business.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can markdown be used as database so issue-trackers along with meta-data could just be markdown files which are mostly human-editable? Could user interfaces be meta-data aware and just hide the meta-data chunks which are now editable in the GUI itself? Doing this would make conflicts easier to resolve than an &lt;code&gt;sqlite&lt;/code&gt; database.&lt;/li&gt; &#xA;     &lt;li&gt;A time tracker - simple data, very likely naturally conflict free, and interesting to see it in terms of teams or companies using it with maybe GitHub as Backing for authentication. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;How about supporting multiple different trackers, as in different remotes?&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shortcomings &amp;amp; Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Please take a look at the &lt;a href=&#34;https://github.com/Byron/gitoxide/raw/main/SHORTCOMINGS.md&#34;&gt;&lt;code&gt;SHORTCOMINGS.md&lt;/code&gt; file&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;itertools&lt;/strong&gt; &lt;em&gt;(MIT Licensed)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We use the &lt;code&gt;izip!&lt;/code&gt; macro in code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;deflate2&lt;/strong&gt; &lt;em&gt;(MIT Licensed)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We use various abstractions to implement decompression and compression directly on top of the rather low-level &lt;code&gt;miniz_oxide&lt;/code&gt; crate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🙏 Special Thanks 🙏&lt;/h2&gt; &#xA;&lt;p&gt;At least for now this section is exclusive to highlight the incredible support that &lt;a href=&#34;https://github.com/joshtriplett&#34;&gt;Josh Triplett&lt;/a&gt; has provided to me in the form of advice, sponsorship and countless other benefits that were incredibly meaningful. Going full time with &lt;code&gt;gitoxide&lt;/code&gt; would hardly have been feasible without his involvement, and I couldn&#39;t be more grateful 😌.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/Byron/gitoxide/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/Byron/gitoxide/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Fun facts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Originally @Byron was really fascinated by &lt;a href=&#34;https://github.com/gitpython-developers/GitPython/issues/765#issuecomment-396072153&#34;&gt;this problem&lt;/a&gt; and believes that with &lt;code&gt;gitoxide&lt;/code&gt; it will be possible to provide the fastest solution for it.&lt;/li&gt; &#xA; &lt;li&gt;@Byron has been absolutely blown away by &lt;code&gt;git&lt;/code&gt; from the first time he experienced git more than 13 years ago, and tried to implement it in &lt;a href=&#34;https://github.com/gitpython-developers/GitPython/pull/1028&#34;&gt;various shapes&lt;/a&gt; and &lt;a href=&#34;https://github.com/byron/gogit&#34;&gt;forms&lt;/a&gt; multiple &lt;a href=&#34;https://github.com/Byron/gitplusplus&#34;&gt;times&lt;/a&gt;. Now with Rust @Byron finally feels to have found the right tool for the job!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>