<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-08T01:46:50Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AppFlowy-IO/AppFlowy-Cloud</title>
    <updated>2024-09-08T01:46:50Z</updated>
    <id>tag:github.com,2024-09-08:/AppFlowy-IO/AppFlowy-Cloud</id>
    <link href="https://github.com/AppFlowy-IO/AppFlowy-Cloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AppFlowy is an open-source alternative to Notion. You are in charge of your data and customizations. Built with Flutter and Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/assets/logos/appflowy_logo.svg?sanitize=true&#34; width=&#34;500&#34; height=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/9Q2xaN37tV&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/AppFlowy.IO-discord-orange&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/AGPL-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPL-purple.svg?sanitize=true&#34; alt=&#34;License: AGPL&#34;&gt;&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.appflowy.io&#34;&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://twitter.com/appflowy&#34;&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;‚ö° The AppFlowy Cloud written with Rust ü¶Ä&lt;/p&gt; &#xA;&lt;h1&gt;AppFlowy Cloud&lt;/h1&gt; &#xA;&lt;p&gt;AppFlowy Cloud is part of the AppFlowy ecosystem, offering secure user authentication, file storage, and real-time WebSocket communication for an efficient and collaborative user experience.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#-deployment&#34;&gt;üöÄ Deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#-development&#34;&gt;üíª Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#-debugging&#34;&gt;üêû Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/#-contributing&#34;&gt;‚öôÔ∏è Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/doc/DEPLOYMENT.md&#34;&gt;deployment guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíª Development&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-requisites&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;copy the configurations from &lt;code&gt;dev.env&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;edit the &lt;code&gt;.env&lt;/code&gt; as required (such as SMTP configurations)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run with all dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./script/run_local_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This process will execute all the dependencies and start the AppFlowy-Cloud server. Alternatively, you have the option to run the AppFlowy-Cloud server independently&lt;/p&gt; &#xA;&lt;h3&gt;Run the AppFlowy-Cloud&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the dependency servers&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose --file docker-compose-dev.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install sqlx-cli&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install sqlx-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run sqlx migration&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqlx database create&#xA;sqlx migrate run&#xA;cargo sqlx prepare --workspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the tests&lt;/h3&gt; &#xA;&lt;p&gt;After the server is running, you can run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üêûDebugging&lt;/h2&gt; &#xA;&lt;p&gt;Effective debugging is essential for maintaining a healthy application. Here are some tools and commands to help you troubleshoot issues in various components of the AppFlowy cloud server:&lt;/p&gt; &#xA;&lt;h3&gt;Postgres&lt;/h3&gt; &#xA;&lt;p&gt;A web-based administration tool for PostgreSQL. Access it at &lt;a href=&#34;http://localhost:5400&#34;&gt;PgAdmin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OR command line:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    export PGPASSWORD=password&#xA;    psql --host=localhost --username=postgres --port=5432&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Redis offers a powerful command line interface for managing your Redis instance. Connect using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    redis-cli -p 6379&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minio&lt;/h3&gt; &#xA;&lt;p&gt;Minio provides a Web UI for easy management of your files and buckets. Access it at &lt;a href=&#34;http://localhost:9001&#34;&gt;Web UI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Portainer&lt;/h3&gt; &#xA;&lt;p&gt;For managing Docker containers, Portainer&#39;s Web UI is an excellent tool. Access it at Web UI to easily manage Docker environments, including container deployment, networking, volume management, and more. Access it at &lt;a href=&#34;http://localhost:9442&#34;&gt;Web UI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any new contribution is more than welcome in this project! If you want to know more about the development workflow or want to contribute, please visit our &lt;a href=&#34;https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy-Cloud/main/doc/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for detailed instructions!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>librespot-org/librespot</title>
    <updated>2024-09-08T01:46:50Z</updated>
    <id>tag:github.com,2024-09-08:/librespot-org/librespot</id>
    <link href="https://github.com/librespot-org/librespot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Spotify client library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/librespot-org/librespot/actions&#34;&gt;&lt;img src=&#34;https://github.com/librespot-org/librespot/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/librespot-org/spotify-connect-resources&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/librespot-org/librespot.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/librespot&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/librespot.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Current maintainers are &lt;a href=&#34;https://github.com/orgs/librespot-org/people&#34;&gt;listed on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;librespot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;librespot&lt;/em&gt; is an open source client library for Spotify. It enables applications to use Spotify&#39;s service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and &lt;a href=&#34;https://pyspotify.mopidy.com/en/latest/#libspotify-s-deprecation&#34;&gt;now deprecated&lt;/a&gt; closed-source &lt;code&gt;libspotify&lt;/code&gt;. Additionally, it will provide extra features which are not available in the official library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: librespot only works with Spotify Premium. This will remain the case. We will not support any features to make librespot compatible with free accounts, such as limited skips and adverts.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re available on &lt;a href=&#34;https://crates.io/crates/librespot&#34;&gt;crates.io&lt;/a&gt; as the &lt;em&gt;librespot&lt;/em&gt; package. Simply run &lt;code&gt;cargo install librespot&lt;/code&gt; to install librespot on your system. Check the wiki for more info and possible &lt;a href=&#34;https://github.com/librespot-org/librespot/wiki/Options&#34;&gt;usage options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After installation, you can run librespot from the CLI using a command such as &lt;code&gt;librespot -n &#34;Librespot Speaker&#34; -b 160&lt;/code&gt; to create a speaker called &lt;em&gt;Librespot Speaker&lt;/em&gt; serving 160 kbps audio.&lt;/p&gt; &#xA;&lt;h2&gt;This fork&lt;/h2&gt; &#xA;&lt;p&gt;As the origin by &lt;a href=&#34;https://github.com/plietar/&#34;&gt;plietar&lt;/a&gt; is no longer actively maintained, this organisation and repository have been set up so that the project may be maintained and upgraded in the future.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Documentation is currently a work in progress, contributions are welcome!&lt;/p&gt; &#xA;&lt;p&gt;There is some brief documentation on how the protocol works in the &lt;a href=&#34;https://github.com/librespot-org/librespot/tree/master/docs&#34;&gt;docs&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/librespot-org/librespot/raw/master/COMPILING.md&#34;&gt;COMPILING.md&lt;/a&gt; contains detailed instructions on setting up a development environment, and compiling librespot. More general usage and compilation information is available on the &lt;a href=&#34;https://github.com/librespot-org/librespot/wiki&#34;&gt;wiki&lt;/a&gt;. &lt;a href=&#34;https://github.com/librespot-org/librespot/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; also contains our contributing guidelines.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to learn more about how librespot works overall, the best way is to simply read the code, and ask any questions you have in our &lt;a href=&#34;https://gitter.im/librespot-org/spotify-connect-resources&#34;&gt;Gitter Room&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Issues &amp;amp; Discussions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;We have recently started using Github discussions for general questions and feature requests, as they are a more natural medium for such cases, and allow for upvoting to prioritize feature development. Check them out &lt;a href=&#34;https://github.com/librespot-org/librespot/discussions&#34;&gt;here&lt;/a&gt;. Bugs and issues with the underlying library should still be reported as issues.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you run into a bug when using librespot, please search the existing issues before opening a new one. Chances are, we&#39;ve encountered it before, and have provided a resolution. If not, please open a new one, and where possible, include the backtrace librespot generates on crashing, along with anything we can use to reproduce the issue, e.g. the Spotify URI of the song that caused the crash.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;A quick walkthrough of the build process is outlined below, while a detailed compilation guide can be found &lt;a href=&#34;https://github.com/librespot-org/librespot/raw/master/COMPILING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;We recently switched to using &lt;a href=&#34;https://github.com/tomaka/rodio&#34;&gt;Rodio&lt;/a&gt; for audio playback by default, hence for macOS and Windows, you should just be able to clone and build librespot (with the command below). For Linux, you will need to run the additional commands below, depending on your distro.&lt;/p&gt; &#xA;&lt;p&gt;On Debian/Ubuntu, the following command will install these dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install build-essential libasound2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora systems, the following command will install these dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install alsa-lib-devel make gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;librespot currently offers the following selection of &lt;a href=&#34;https://github.com/librespot-org/librespot/wiki/Audio-Backends&#34;&gt;audio backends&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rodio (default)&#xA;ALSA&#xA;GStreamer&#xA;PortAudio&#xA;PulseAudio&#xA;JACK&#xA;JACK over Rodio&#xA;SDL&#xA;Pipe&#xA;Subprocess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please check the corresponding &lt;a href=&#34;https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies&#34;&gt;Compiling&lt;/a&gt; entry on the wiki for backend specific dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve installed the dependencies and cloned this repository you can build &lt;em&gt;librespot&lt;/em&gt; with the default backend using Cargo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Packages&lt;/h1&gt; &#xA;&lt;p&gt;librespot is also available via official package system on various operating systems such as Linux, FreeBSD, NetBSD. &lt;a href=&#34;https://repology.org/project/librespot/versions&#34;&gt;Repology&lt;/a&gt; offers a good overview.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/librespot/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/librespot.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A sample program implementing a headless Spotify Connect receiver is provided. Once you&#39;ve built &lt;em&gt;librespot&lt;/em&gt;, run it using :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;target/release/librespot --name DEVICENAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above is a minimal example. Here is a more fully fledged one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;target/release/librespot -n &#34;Librespot&#34; -b 320 -c ./cache --enable-volume-normalisation --initial-volume 75 --device-type avr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command will create a receiver named &lt;code&gt;Librespot&lt;/code&gt;, with bitrate set to 320 kbps, initial volume at 75%, with volume normalisation enabled, and the device displayed in the app as an Audio/Video Receiver. A folder named &lt;code&gt;cache&lt;/code&gt; will be created/used in the current directory, and be used to cache audio data and credentials.&lt;/p&gt; &#xA;&lt;p&gt;A full list of runtime options is available &lt;a href=&#34;https://github.com/librespot-org/librespot/wiki/Options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please Note: When using the cache feature, an authentication blob is stored for your account in the cache directory. For security purposes, we recommend that you set directory permissions on the cache directory to &lt;code&gt;700&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Come and hang out on gitter if you need help or want to offer some: &lt;a href=&#34;https://gitter.im/librespot-org/spotify-connect-resources&#34;&gt;https://gitter.im/librespot-org/spotify-connect-resources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Using this code to connect to Spotify&#39;s API is probably forbidden by them. Use at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Everything in this repository is licensed under the MIT license.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;This is a non exhaustive list of projects that either use or have modified librespot. If you&#39;d like to include yours, submit a PR.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/librespot-org/librespot-golang&#34;&gt;librespot-golang&lt;/a&gt; - A golang port of librespot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcelveldt/plugin.audio.spotify&#34;&gt;plugin.audio.spotify&lt;/a&gt; - A Kodi plugin for Spotify.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dtcooper/raspotify&#34;&gt;raspotify&lt;/a&gt; - A Spotify Connect client that mostly Just Works‚Ñ¢&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Spotifyd/spotifyd&#34;&gt;Spotifyd&lt;/a&gt; - A stripped down librespot UNIX daemon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicokaiser/rpi-audio-receiver&#34;&gt;rpi-audio-receiver&lt;/a&gt; - easy Raspbian install scripts for Spotifyd, Bluetooth, Shairport and other audio receivers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/badfortrains/spotcontrol&#34;&gt;Spotcontrol&lt;/a&gt; - A golang implementation of a Spotify Connect controller. No playback functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devgianlu/librespot-java&#34;&gt;librespot-java&lt;/a&gt; - A Java port of librespot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrkfdn/ncspot&#34;&gt;ncspot&lt;/a&gt; - Cross-platform ncurses Spotify client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xMordax/ansible-role-librespot/tree/master&#34;&gt;ansible-role-librespot&lt;/a&gt; - Ansible role that will build, install and configure Librespot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xou816/spot&#34;&gt;Spot&lt;/a&gt; - Gtk/Rust native Spotify client for the GNOME desktop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/badaix/snapcast&#34;&gt;Snapcast&lt;/a&gt; - synchronised multi-room audio player that uses librespot as its source for Spotify content&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hatoo/oha</title>
    <updated>2024-09-08T01:46:50Z</updated>
    <id>tag:github.com,2024-09-08:/hatoo/oha</id>
    <link href="https://github.com/hatoo/oha" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ohayou(„Åä„ÅØ„Çà„ÅÜ), HTTP load generator, inspired by rakyll/hey with tui animation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oha („Åä„ÅØ„Çà„ÅÜ)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hatoo/oha/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/hatoo/oha/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/oha&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/oha.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/oha/&#34;&gt;&lt;img src=&#34;https://img.shields.io/archlinux/v/extra/x86_64/oha&#34; alt=&#34;Arch Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/oha&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/oha&#34; alt=&#34;Homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/hatoo-oha/community#&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/hatoo/oha&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/hatoo&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;oha is a tiny program that sends some load to a web application and show realtime tui inspired by &lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;rakyll/hey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This program is written in Rust and powered by &lt;a href=&#34;https://github.com/tokio-rs/tokio&#34;&gt;tokio&lt;/a&gt; and beautiful tui by &lt;a href=&#34;https://github.com/ratatui-org/ratatui&#34;&gt;ratatui&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hatoo/oha/master/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;This program is built on stable Rust, with both &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;cmake&lt;/code&gt; prerequisites to install via cargo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally build oha against &lt;a href=&#34;https://github.com/sfackler/rust-native-tls&#34;&gt;native-tls&lt;/a&gt; instead of &lt;a href=&#34;https://github.com/rustls/rustls&#34;&gt;rustls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --no-default-features --features rustls oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can enable VSOCK support by enabling &lt;code&gt;vsock&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --features vsock oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Arch Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On macOS (Homebrew)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Windows (winget)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install hatoo.oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;On Debian (&lt;a href=&#34;http://packages.azlux.fr/&#34;&gt;Azlux&#39;s repository&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ stable main&#34; | sudo tee /etc/apt/sources.list.d/azlux.list&#xA;sudo wget -O /usr/share/keyrings/azlux-archive-keyring.gpg https://azlux.fr/repo.gpg&#xA;apt update&#xA;apt install oha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Containerized&lt;/h2&gt; &#xA;&lt;p&gt;You can also build and create a container image including oha&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build . -t example.com/hatoo/oha:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use oha directly through the container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it example.com/hatoo/oha:latest https://example.com:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profile-Guided Optimization (PGO)&lt;/h2&gt; &#xA;&lt;p&gt;You can build &lt;code&gt;oha&lt;/code&gt; with PGO by using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bun run pgo.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the binary will be available at &lt;code&gt;target/[target-triple]/pgo/oha&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Platform&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux - Tested on Ubuntu 18.04 gnome-terminal&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 - Tested on Windows Powershell&lt;/li&gt; &#xA; &lt;li&gt;MacOS - Tested on iTerm2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;-q&lt;/code&gt; option works different from &lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;rakyll/hey&lt;/a&gt;. It&#39;s set overall query per second instead of for each workers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Ohayou(„Åä„ÅØ„Çà„ÅÜ), HTTP load generator, inspired by rakyll/hey with tui animation.&#xA;&#xA;Usage: oha [FLAGS] [OPTIONS] &amp;lt;url&amp;gt;&#xA;&#xA;Arguments:&#xA;  &amp;lt;URL&amp;gt;  Target URL.&#xA;&#xA;Options:&#xA;  -n &amp;lt;N_REQUESTS&amp;gt;&#xA;          Number of requests to run. [default: 200]&#xA;  -c &amp;lt;N_CONNECTIONS&amp;gt;&#xA;          Number of connections to run concurrently. You may should increase limit to number of open files for larger `-c`. [default: 50]&#xA;  -p &amp;lt;N_HTTP2_PARALLEL&amp;gt;&#xA;          Number of parallel requests to send on HTTP/2. `oha` will run c * p concurrent workers in total. [default: 1]&#xA;  -z &amp;lt;DURATION&amp;gt;&#xA;          Duration of application to send requests. If duration is specified, n is ignored.&#xA;          On HTTP/1, When the duration is reached, ongoing requests are aborted and counted as &#34;aborted due to deadline&#34;&#xA;          You can change this behavior with `-w` option.&#xA;          Currently, on HTTP/2, When the duration is reached, ongoing requests are waited. `-w` option is ignored.&#xA;          Examples: -z 10s -z 3m.&#xA;  -w, --wait-ongoing-requests-after-deadline&#xA;          When the duration is reached, ongoing requests are waited&#xA;  -q &amp;lt;QUERY_PER_SECOND&amp;gt;&#xA;          Rate limit for all, in queries per second (QPS)&#xA;      --burst-delay &amp;lt;BURST_DURATION&amp;gt;&#xA;          Introduce delay between a predefined number of requests.&#xA;          Note: If qps is specified, burst will be ignored&#xA;      --burst-rate &amp;lt;BURST_REQUESTS&amp;gt;&#xA;          Rates of requests for burst. Default is 1&#xA;          Note: If qps is specified, burst will be ignored&#xA;      --rand-regex-url&#xA;          Generate URL by rand_regex crate but dot is disabled for each query e.g. http://127.0.0.1/[a-z][a-z][0-9]. Currently dynamic scheme, host and port with keep-alive are not works well. See https://docs.rs/rand_regex/latest/rand_regex/struct.Regex.html for details of syntax.&#xA;      --max-repeat &amp;lt;MAX_REPEAT&amp;gt;&#xA;          A parameter for the &#39;--rand-regex-url&#39;. The max_repeat parameter gives the maximum extra repeat counts the x*, x+ and x{n,} operators will become. [default: 4]&#xA;      --dump-urls &amp;lt;DUMP_URLS&amp;gt;&#xA;          Dump target Urls &amp;lt;DUMP_URLS&amp;gt; times to debug --rand-regex-url&#xA;      --latency-correction&#xA;          Correct latency to avoid coordinated omission problem. It&#39;s ignored if -q is not set.&#xA;      --no-tui&#xA;          No realtime tui&#xA;  -j, --json&#xA;          Print results as JSON&#xA;      --fps &amp;lt;FPS&amp;gt;&#xA;          Frame per second for tui. [default: 16]&#xA;  -m, --method &amp;lt;METHOD&amp;gt;&#xA;          HTTP method [default: GET]&#xA;  -H &amp;lt;HEADERS&amp;gt;&#xA;          Custom HTTP header. Examples: -H &#34;foo: bar&#34;&#xA;  -t &amp;lt;TIMEOUT&amp;gt;&#xA;          Timeout for each request. Default to infinite.&#xA;  -A &amp;lt;ACCEPT_HEADER&amp;gt;&#xA;          HTTP Accept Header.&#xA;  -d &amp;lt;BODY_STRING&amp;gt;&#xA;          HTTP request body.&#xA;  -D &amp;lt;BODY_PATH&amp;gt;&#xA;          HTTP request body from file.&#xA;  -T &amp;lt;CONTENT_TYPE&amp;gt;&#xA;          Content-Type.&#xA;  -a &amp;lt;BASIC_AUTH&amp;gt;&#xA;          Basic authentication, username:password&#xA;      --http-version &amp;lt;HTTP_VERSION&amp;gt;&#xA;          HTTP version. Available values 0.9, 1.0, 1.1.&#xA;      --http2&#xA;          Use HTTP/2. Shorthand for --http-version=2&#xA;      --host &amp;lt;HOST&amp;gt;&#xA;          HTTP Host header&#xA;      --disable-compression&#xA;          Disable compression.&#xA;  -r, --redirect &amp;lt;REDIRECT&amp;gt;&#xA;          Limit for number of Redirect. Set 0 for no redirection. Redirection isn&#39;t supported for HTTP/2. [default: 10]&#xA;      --disable-keepalive&#xA;          Disable keep-alive, prevents re-use of TCP connections between different HTTP requests. This isn&#39;t supported for HTTP/2.&#xA;      --no-pre-lookup&#xA;          *Not* perform a DNS lookup at beginning to cache it&#xA;      --ipv6&#xA;          Lookup only ipv6.&#xA;      --ipv4&#xA;          Lookup only ipv4.&#xA;      --insecure&#xA;          Accept invalid certs.&#xA;      --connect-to &amp;lt;CONNECT_TO&amp;gt;&#xA;          Override DNS resolution and default port numbers with strings like &#39;example.org:443:localhost:8443&#39;&#xA;      --disable-color&#xA;          Disable the color scheme.&#xA;      --unix-socket &amp;lt;UNIX_SOCKET&amp;gt;&#xA;          Connect to a unix socket instead of the domain in the URL. Only for non-HTTPS URLs.&#xA;      --stats-success-breakdown&#xA;          Include a response status code successful or not successful breakdown for the time histogram and distribution statistics&#xA;      --db-url &amp;lt;DB_URL&amp;gt;&#xA;          Write succeeded requests to sqlite database url E.G test.db&#xA;  -h, --help&#xA;          Print help&#xA;  -V, --version&#xA;          Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;JSON output&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;oha&lt;/code&gt; prints JSON output when &lt;code&gt;-j&lt;/code&gt; option is set. The schema of JSON output is defined in &lt;a href=&#34;https://raw.githubusercontent.com/hatoo/oha/master/schema.json&#34;&gt;schema.json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmark&lt;/h1&gt; &#xA;&lt;h2&gt;Performance Comparison&lt;/h2&gt; &#xA;&lt;p&gt;We used &lt;code&gt;hyperfine&lt;/code&gt; for benchmarking &lt;code&gt;oha&lt;/code&gt; against &lt;code&gt;rakyll/hey&lt;/code&gt; on a local server. The server was coded using node. You can start the server by copy pasting this file and then running it via node. After copy-pasting the file, you can run the benchmark via &lt;code&gt;hyperfine&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy-paste the contents into a new javascript file called app.js&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const http = require(&#34;http&#34;);&#xA;&#xA;const server = http.createServer((req, res) =&amp;gt; {&#xA;  res.writeHead(200, { &#34;Content-Type&#34;: &#34;text/plain&#34; });&#xA;&#xA;  res.end(&#34;Hello World\n&#34;);&#xA;});&#xA;&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#34;Server running at http://localhost:3000/&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;node app.js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;hyperfine &#39;oha --no-tui http://localhost:3000&#39; &#39;hey http://localhost:3000&#39;&lt;/code&gt; in a different terminal tab&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Benchmark Results&lt;/h3&gt; &#xA;&lt;p&gt;Benchmark 1: oha --no-tui &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Time (mean ¬± œÉ): 10.8 ms ¬± 1.8 ms [User: 5.7 ms, System: 11.7 ms]&lt;/li&gt; &#xA; &lt;li&gt;Range (min ‚Ä¶ max): 8.7 ms ‚Ä¶ 24.8 ms (107 runs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Benchmark 2: hey &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Time (mean ¬± œÉ): 14.3 ms ¬± 4.6 ms [User: 12.2 ms, System: 19.4 ms]&lt;/li&gt; &#xA; &lt;li&gt;Range (min ‚Ä¶ max): 11.1 ms ‚Ä¶ 48.3 ms (88 runs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;p&gt;In this benchmark, &lt;code&gt;oha --no-tui http://localhost:3000&lt;/code&gt; was found to be faster, running approximately 1.32 ¬± 0.48 times faster than &lt;code&gt;hey http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;h2&gt;Stress test in more realistic condition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;oha&lt;/code&gt; uses default options inherited from &lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;rakyll/hey&lt;/a&gt; but you may need to change options to stress test in more realistic condition.&lt;/p&gt; &#xA;&lt;p&gt;I suggest to run &lt;code&gt;oha&lt;/code&gt; with following options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;oha &amp;lt;-z or -n&amp;gt; -c &amp;lt;number of concurrent connections&amp;gt; -q &amp;lt;query per seconds&amp;gt; --latency-correction --disable-keepalive &amp;lt;target-address&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;--disable-keepalive&lt;/p&gt; &lt;p&gt;In real, user doesn&#39;t query same URL using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive&#34;&gt;Keep-Alive&lt;/a&gt;. You may want to run without &lt;code&gt;Keep-Alive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;--latency-correction&lt;/p&gt; &lt;p&gt;You can avoid &lt;code&gt;Coordinated Omission Problem&lt;/code&gt; by using &lt;code&gt;--latency-correction&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Burst feature&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--burst-delay&lt;/code&gt; along with &lt;code&gt;--burst-rate&lt;/code&gt; option to introduce delay between a defined number of requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;oha -n 10 --burst-delay 2s --burst-rate 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this particular scenario, every 2 seconds, 4 requests will be processed, and after 6s the total of 10 requests will be processed. &lt;em&gt;NOTE: If you don&#39;t set &lt;code&gt;--burst-rate&lt;/code&gt; option, the amount is default to 1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic url feature&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--rand-regex-url&lt;/code&gt; option to generate random url for each connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;oha --rand-regex-url http://127.0.0.1/[a-z][a-z][0-9]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each Urls are generated by &lt;a href=&#34;https://github.com/kennytm/rand_regex&#34;&gt;rand_regex&lt;/a&gt; crate but regex&#39;s dot is disabled since it&#39;s not useful for this purpose and it&#39;s very inconvenient if url&#39;s dots are interpreted as regex&#39;s dot.&lt;/p&gt; &#xA;&lt;p&gt;Optionally you can set &lt;code&gt;--max-repeat&lt;/code&gt; option to limit max repeat count for each regex. e.g &lt;a href=&#34;http://127.0.0.1/%5Ba-z%5D&#34;&gt;http://127.0.0.1/[a-z]&lt;/a&gt;* with &lt;code&gt;--max-repeat 4&lt;/code&gt; will generate url like &lt;a href=&#34;http://127.0.0.1/%5Ba-z%5D%7B0,4%7D&#34;&gt;http://127.0.0.1/[a-z]{0,4}&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently dynamic scheme, host and port with keep-alive are not works well.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to help us!&lt;/p&gt; &#xA;&lt;p&gt;Here are some issues to improving.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write tests&lt;/li&gt; &#xA; &lt;li&gt;Improve tui design. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Show more information?&lt;/li&gt; &#xA;   &lt;li&gt;There are no color in realtime tui now. I want help from someone who has some color sense.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Improve speed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I&#39;m new to tokio. I think there are some space to optimize query scheduling.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>