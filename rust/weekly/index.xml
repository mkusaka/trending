<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:47:30Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zurawiki/gptcommit</title>
    <updated>2023-02-05T08:47:30Z</updated>
    <id>tag:github.com,2023-02-05:/zurawiki/gptcommit</id>
    <link href="https://github.com/zurawiki/gptcommit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A git prepare-commit-msg hook for authoring commit messages with GPT-3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;gptcommit&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zurawiki/gptcommit/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/zurawiki/gptcommit.svg?sanitize=true&#34; alt=&#34;Github Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zurawiki/gptcommit/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zurawiki/gptcommit.svg?sanitize=true&#34; alt=&#34;Github Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zurawiki/gptcommit/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/zurawiki/gptcommit/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/gptcommit&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/gptcommit.svg?sanitize=true&#34; alt=&#34;crates.io status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/gptcommit&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/gptcommit.svg?sanitize=true&#34; alt=&#34;crates.io downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/zurawiki/gptcommit&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/zurawiki/gptcommit/status.svg?sanitize=true&#34; alt=&#34;Rust dependency status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A git prepare-commit-msg hook for authoring commit messages with GPT-3. With this tool, you can easily generate clear, comprehensive and descriptive commit messages letting you focus on writing code.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://zura.wiki/post/never-write-a-commit-message-again-with-the-help-of-gpt-3/&#34;&gt;announcement blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/552380&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/552380.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install this tool locally with &lt;code&gt;cargo&lt;/code&gt; (recommended).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --locked gptcommit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or on macOS, use homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install zurawiki/brews/gptcommit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In your &lt;code&gt;git&lt;/code&gt; repository, run the following command to install &lt;code&gt;gptcommit&lt;/code&gt; as a git prepare-commit-msg hook. You will need to provide an OpenAI API key to complete the installation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;gptcommit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;code&gt;gptcommit&lt;/code&gt;, simply run &lt;code&gt;git commit&lt;/code&gt; as you normally would. The hook will automatically generate a commit message for you using GPT-3. If you&#39;re not satisfied with the generated message, you can always edit it before committing.&lt;/p&gt; &#xA;&lt;p&gt;Note: By default, &lt;code&gt;gptcommit&lt;/code&gt; uses the GPT-3 model. Please ensure you have sufficient credits in your OpenAI account to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;gptcommit&lt;/code&gt; supports a number of configuration options that are read from &lt;code&gt;$HOME/.config/gptcommit/config.toml&lt;/code&gt;. Configs are applied in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User settings as read from &lt;code&gt;$HOME/.config/gptcommit/config.toml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Environment variables starting with &lt;code&gt;GPTCOMMIT__*&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Set your OpenAI API key&lt;/h3&gt; &#xA;&lt;p&gt;Persist your OpenAI key&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gptcommit config set openai.api_key sk-...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also config this setting via the &lt;code&gt;GPTCOMMIT__OPENAI__API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To maintain compatibility with other OpenAI clients, we support the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variables. This will take the highest precedence.&lt;/p&gt; &#xA;&lt;h3&gt;Try out a different OpenAI model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gptcommit&lt;/code&gt; uses &lt;code&gt;text-davinci-003&lt;/code&gt; by default. The model can be configured to use other models as below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gptcommit config set openai.model text-davinci-002&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also config this setting via the &lt;code&gt;GPTCOMMIT__OPENAI__MODEL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a list of public OpenAI models, checkout the &lt;a href=&#34;https://beta.openai.com/docs/models/overview&#34;&gt;OpenAI docs&lt;/a&gt;. You can also bring in your own fine-tuned model.&lt;/p&gt; &#xA;&lt;h3&gt;Allow re-summarizing when amending commits&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gptcommit config set allow-amend true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Common Issues / FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;How can I reduce my OpenAI usage bill?&lt;/h3&gt; &#xA;&lt;p&gt;In the current design, gptcommit issues N+2 prompts, where N is the number of modified files with diffs under the max_token_limit. The other prompts are the title and summary.&lt;/p&gt; &#xA;&lt;p&gt;OpenAI Completions are billed by &#34;tokens&#34; that are both sent and generated. Pricing per token depends on the model used. The number of tokens generated are generally predictable (as a commit message is usually only so big) but gptcommit could be sending over a lot of tokens in the form of diff data.&lt;/p&gt; &#xA;&lt;p&gt;Today, I see two low-hanging solutions for reducing cost:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switch to a different model using the openai.model configuration option&lt;/li&gt; &#xA; &lt;li&gt;Reduce the side of prompts and diff data sent to OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OpenAI&#39;s pricing page can be found at &lt;a href=&#34;https://openai.com/api/pricing/#faq-completions-pricing&#34;&gt;https://openai.com/api/pricing/#faq-completions-pricing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The githook is not running when I commit&lt;/h3&gt; &#xA;&lt;p&gt;By default, the githook is only run for new commits. If a template is set or the commit is being amended, the githook will skip by default.&lt;/p&gt; &#xA;&lt;p&gt;Because the githook detected the user is supplying their own template, we make sure not to overwrite it with GPT. You can remove the commit template by making sure &lt;code&gt;git config --local commit.template&lt;/code&gt; is blank.&lt;/p&gt; &#xA;&lt;p&gt;You can allow gptcommit to summarize amended commits with the following configuration above.&lt;/p&gt; &#xA;&lt;h2&gt;Encountered any bugs?&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any bugs or have any suggestions for improvements, please open an issue on the repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/zurawiki/gptcommit/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>neondatabase/neon</title>
    <updated>2023-02-05T08:47:30Z</updated>
    <id>tag:github.com,2023-02-05:/neondatabase/neon</id>
    <link href="https://github.com/neondatabase/neon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neon: Serverless Postgres. We separated storage and compute to offer autoscaling, branching, and bottomless storage.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neon&lt;/h1&gt; &#xA;&lt;p&gt;Neon is a serverless open-source alternative to AWS Aurora Postgres. It separates storage and compute and substitutes the PostgreSQL storage layer by redistributing data across a cluster of nodes.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Try the &lt;a href=&#34;https://neon.tech/docs/introduction/technical-preview-free-tier/&#34;&gt;Neon Free Tier&lt;/a&gt; to create a serverless Postgres instance. Then connect to it with your preferred Postgres client (psql, dbeaver, etc) or use the online &lt;a href=&#34;https://neon.tech/docs/get-started-with-neon/query-with-neon-sql-editor/&#34;&gt;SQL Editor&lt;/a&gt;. See &lt;a href=&#34;https://neon.tech/docs/connect/connect-from-any-app/&#34;&gt;Connect from any application&lt;/a&gt; for connection instructions.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, compile and run the project &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/#running-local-installation&#34;&gt;locally&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture overview&lt;/h2&gt; &#xA;&lt;p&gt;A Neon installation consists of compute nodes and the Neon storage engine. Compute nodes are stateless PostgreSQL nodes backed by the Neon storage engine.&lt;/p&gt; &#xA;&lt;p&gt;The Neon storage engine consists of two major components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pageserver. Scalable storage backend for the compute nodes.&lt;/li&gt; &#xA; &lt;li&gt;Safekeepers. The safekeepers form a redundant WAL service that received WAL from the compute node, and stores it durably until it has been processed by the pageserver and uploaded to cloud storage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See developer documentation in &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/SUMMARY.md&#34;&gt;/docs/SUMMARY.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Running local installation&lt;/h2&gt; &#xA;&lt;h4&gt;Installing dependencies on Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install build dependencies and other applicable packages&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Ubuntu or Debian, this set of packages should be sufficient to build the code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install build-essential libtool libreadline-dev zlib1g-dev flex bison libseccomp-dev \&#xA;libssl-dev clang pkg-config libpq-dev cmake postgresql-client protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Fedora, these packages are needed:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install flex bison readline-devel zlib-devel openssl-devel \&#xA;  libseccomp-devel perl clang cmake postgresql postgresql-contrib protobuf-compiler \&#xA;  protobuf-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# recommended approach from https://www.rust-lang.org/tools/install&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing dependencies on OSX (12.3.1)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install XCode and dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcode-select --install&#xA;brew install protobuf openssl flex bison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# recommended approach from https://www.rust-lang.org/tools/install&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install PostgreSQL Client&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# from https://stackoverflow.com/questions/44654216/correct-way-to-install-psql-without-full-postgres-on-macos&#xA;brew install libpq&#xA;brew link --force libpq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rustc version&lt;/h4&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/rust-toolchain.toml&#34;&gt;rust toolchain file&lt;/a&gt; to define the version it&#39;s built with in CI for testing and local builds.&lt;/p&gt; &#xA;&lt;p&gt;This file is automatically picked up by &lt;a href=&#34;https://rust-lang.github.io/rustup/overrides.html#the-toolchain-file&#34;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; that installs (if absent) and uses the toolchain version pinned in the file.&lt;/p&gt; &#xA;&lt;p&gt;rustup users who want to build with another toolchain can use &lt;a href=&#34;https://rust-lang.github.io/rustup/overrides.html#directory-overrides&#34;&gt;&lt;code&gt;rustup override&lt;/code&gt;&lt;/a&gt; command to set a specific toolchain for the project&#39;s directory.&lt;/p&gt; &#xA;&lt;p&gt;non-rustup users most probably are not getting the same toolchain automatically from the file, so are responsible to manually verify their toolchain matches the version in the file. Newer rustc versions most probably will work fine, yet older ones might not be supported due to some new features used by the project or the crates.&lt;/p&gt; &#xA;&lt;h4&gt;Building on Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build neon and patched postgres&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Note: The path to the neon sources can not contain a space.&#xA;&#xA;git clone --recursive https://github.com/neondatabase/neon.git&#xA;cd neon&#xA;&#xA;# The preferred and default is to make a debug build. This will create a&#xA;# demonstrably slower build than a release build. For a release build,&#xA;# use &#34;BUILD_TYPE=release make -j`nproc`&#34;&#xA;&#xA;make -j`nproc`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building on OSX&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build neon and patched postgres&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Note: The path to the neon sources can not contain a space.&#xA;&#xA;git clone --recursive https://github.com/neondatabase/neon.git&#xA;cd neon&#xA;&#xA;# The preferred and default is to make a debug build. This will create a&#xA;# demonstrably slower build than a release build. For a release build,&#xA;# use &#34;BUILD_TYPE=release make -j`sysctl -n hw.logicalcpu`&#34;&#xA;&#xA;make -j`sysctl -n hw.logicalcpu`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dependency installation notes&lt;/h4&gt; &#xA;&lt;p&gt;To run the &lt;code&gt;psql&lt;/code&gt; client, install the &lt;code&gt;postgresql-client&lt;/code&gt; package or modify &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to include &lt;code&gt;pg_install/bin&lt;/code&gt; and &lt;code&gt;pg_install/lib&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;To run the integration tests or Python scripts (not required to use the code), install Python (3.9 or higher), and install python3 packages using &lt;code&gt;./scripts/pysync&lt;/code&gt; (requires &lt;a href=&#34;https://python-poetry.org/&#34;&gt;poetry&amp;gt;=1.3&lt;/a&gt;) in the project directory.&lt;/p&gt; &#xA;&lt;h4&gt;Running neon database&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start pageserver and postgres on top of it (should be called from repo root):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create repository in .neon with proper paths to binaries and data&#xA;# Later that would be responsibility of a package install script&#xA;&amp;gt; ./target/debug/neon_local init&#xA;Starting pageserver at &#39;127.0.0.1:64000&#39; in &#39;.neon&#39;.&#xA;&#xA;# start pageserver, safekeeper, and broker for their intercommunication&#xA;&amp;gt; ./target/debug/neon_local start&#xA;Starting neon broker at 127.0.0.1:50051&#xA;storage_broker started, pid: 2918372&#xA;Starting pageserver at &#39;127.0.0.1:64000&#39; in &#39;.neon&#39;.&#xA;pageserver started, pid: 2918386&#xA;Starting safekeeper at &#39;127.0.0.1:5454&#39; in &#39;.neon/safekeepers/sk1&#39;.&#xA;safekeeper 1 started, pid: 2918437&#xA;&#xA;# create initial tenant and use it as a default for every future neon_local invocation&#xA;&amp;gt; ./target/debug/neon_local tenant create --set-default&#xA;tenant 9ef87a5bf0d92544f6fafeeb3239695c successfully created on the pageserver&#xA;Created an initial timeline &#39;de200bd42b49cc1814412c7e592dd6e9&#39; at Lsn 0/16B5A50 for tenant: 9ef87a5bf0d92544f6fafeeb3239695c&#xA;Setting tenant 9ef87a5bf0d92544f6fafeeb3239695c as a default one&#xA;&#xA;# start postgres compute node&#xA;&amp;gt; ./target/debug/neon_local pg start main&#xA;Starting new postgres (v14) main on timeline de200bd42b49cc1814412c7e592dd6e9 ...&#xA;Extracting base backup to create postgres instance: path=.neon/pgdatadirs/tenants/9ef87a5bf0d92544f6fafeeb3239695c/main port=55432&#xA;Starting postgres node at &#39;host=127.0.0.1 port=55432 user=cloud_admin dbname=postgres&#39;&#xA;&#xA;# check list of running postgres instances&#xA;&amp;gt; ./target/debug/neon_local pg list&#xA; NODE  ADDRESS          TIMELINE                          BRANCH NAME  LSN        STATUS&#xA; main  127.0.0.1:55432  de200bd42b49cc1814412c7e592dd6e9  main         0/16B5BA8  running&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Now, it is possible to connect to postgres and run some queries:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;gt; psql -p55432 -h 127.0.0.1 -U cloud_admin postgres&#xA;postgres=# CREATE TABLE t(key int primary key, value text);&#xA;CREATE TABLE&#xA;postgres=# insert into t values(1,1);&#xA;INSERT 0 1&#xA;postgres=# select * from t;&#xA; key | value&#xA;-----+-------&#xA;   1 | 1&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;And create branches and run postgres on them:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create branch named migration_check&#xA;&amp;gt; ./target/debug/neon_local timeline branch --branch-name migration_check&#xA;Created timeline &#39;b3b863fa45fa9e57e615f9f2d944e601&#39; at Lsn 0/16F9A00 for tenant: 9ef87a5bf0d92544f6fafeeb3239695c. Ancestor timeline: &#39;main&#39;&#xA;&#xA;# check branches tree&#xA;&amp;gt; ./target/debug/neon_local timeline list&#xA;(L) main [de200bd42b49cc1814412c7e592dd6e9]&#xA;(L) ┗━ @0/16F9A00: migration_check [b3b863fa45fa9e57e615f9f2d944e601]&#xA;&#xA;# start postgres on that branch&#xA;&amp;gt; ./target/debug/neon_local pg start migration_check --branch-name migration_check&#xA;Starting new postgres migration_check on timeline b3b863fa45fa9e57e615f9f2d944e601 ...&#xA;Extracting base backup to create postgres instance: path=.neon/pgdatadirs/tenants/9ef87a5bf0d92544f6fafeeb3239695c/migration_check port=55433&#xA;Starting postgres node at &#39;host=127.0.0.1 port=55433 user=cloud_admin dbname=postgres&#39;&#xA;&#xA;# check the new list of running postgres instances&#xA;&amp;gt; ./target/debug/neon_local pg list&#xA; NODE             ADDRESS          TIMELINE                          BRANCH NAME      LSN        STATUS&#xA; main             127.0.0.1:55432  de200bd42b49cc1814412c7e592dd6e9  main             0/16F9A38  running&#xA; migration_check  127.0.0.1:55433  b3b863fa45fa9e57e615f9f2d944e601  migration_check  0/16F9A70  running&#xA;&#xA;# this new postgres instance will have all the data from &#39;main&#39; postgres,&#xA;# but all modifications would not affect data in original postgres&#xA;&amp;gt; psql -p55433 -h 127.0.0.1 -U cloud_admin postgres&#xA;postgres=# select * from t;&#xA; key | value&#xA;-----+-------&#xA;   1 | 1&#xA;(1 row)&#xA;&#xA;postgres=# insert into t values(2,2);&#xA;INSERT 0 1&#xA;&#xA;# check that the new change doesn&#39;t affect the &#39;main&#39; postgres&#xA;&amp;gt; psql -p55432 -h 127.0.0.1 -U cloud_admin postgres&#xA;postgres=# select * from t;&#xA; key | value&#xA;-----+-------&#xA;   1 | 1&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;If you want to run tests afterward (see below), you must stop all the running of the pageserver, safekeeper, and postgres instances you have just started. You can terminate them all with one command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; ./target/debug/neon_local stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;Ensure your dependencies are installed as described &lt;a href=&#34;https://github.com/neondatabase/neon#dependency-installation-notes&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recursive https://github.com/neondatabase/neon.git&#xA;&#xA;CARGO_BUILD_FLAGS=&#34;--features=testing&#34; make&#xA;&#xA;./scripts/pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/&#34;&gt;/docs/&lt;/a&gt; Contains a top-level overview of all available markdown documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/sourcetree.md&#34;&gt;/docs/sourcetree.md&lt;/a&gt; contains overview of source tree layout.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To view your &lt;code&gt;rustdoc&lt;/code&gt; documentation in a browser, try running &lt;code&gt;cargo doc --no-deps --open&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also README files in some source directories, and &lt;code&gt;rustdoc&lt;/code&gt; style documentation comments.&lt;/p&gt; &#xA;&lt;p&gt;Other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neon.tech/blog/hello-world/&#34;&gt;SELECT &#39;Hello, World&#39;&lt;/a&gt;: Blog post by Nikita Shamgunov on the high level architecture&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neon.tech/blog/architecture-decisions-in-neon/&#34;&gt;Architecture decisions in Neon&lt;/a&gt;: Blog post by Heikki Linnakangas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rES0yzeERns&#34;&gt;Neon: Serverless PostgreSQL!&lt;/a&gt;: Presentation on storage system by Heikki Linnakangas in the CMU Database Group seminar series&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Postgres-specific terms&lt;/h3&gt; &#xA;&lt;p&gt;Due to Neon&#39;s very close relation with PostgreSQL internals, numerous specific terms are used. The same applies to certain spelling: i.e. we use MB to denote 1024 * 1024 bytes, while MiB would be technically more correct, it&#39;s inconsistent with what PostgreSQL code and its documentation use.&lt;/p&gt; &#xA;&lt;p&gt;To get more familiar with this aspect, refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/glossary.md&#34;&gt;Neon glossary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/14/glossary.html&#34;&gt;PostgreSQL glossary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other PostgreSQL documentation and sources (Neon fork sources can be found &lt;a href=&#34;https://github.com/neondatabase/postgres&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join the development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; to learn about project code style and practices.&lt;/li&gt; &#xA; &lt;li&gt;To get familiar with a source tree layout, use &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/sourcetree.md&#34;&gt;/docs/sourcetree.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To learn more about PostgreSQL internals, check &lt;a href=&#34;http://www.interdb.jp/pg/index.html&#34;&gt;http://www.interdb.jp/pg/index.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>scsibug/nostr-rs-relay</title>
    <updated>2023-02-05T08:47:30Z</updated>
    <id>tag:github.com,2023-02-05:/scsibug/nostr-rs-relay</id>
    <link href="https://github.com/scsibug/nostr-rs-relay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of https://sr.ht/~gheartsfield/nostr-rs-relay/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://git.sr.ht/~gheartsfield/nostr-rs-relay&#34;&gt;nostr-rs-relay&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;https://github.com/nostr-protocol/nostr&#34;&gt;nostr&lt;/a&gt; relay, written in Rust. It currently supports the entire relay protocol, and persists data with SQLite. There is experimental support for Postgresql.&lt;/p&gt; &#xA;&lt;p&gt;The project master repository is available on &lt;a href=&#34;https://sr.ht/~gheartsfield/nostr-rs-relay/&#34;&gt;sourcehut&lt;/a&gt;, and is mirrored on &lt;a href=&#34;https://github.com/scsibug/nostr-rs-relay&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://builds.sr.ht/~gheartsfield/nostr-rs-relay/commits/master?&#34;&gt;&lt;img src=&#34;https://builds.sr.ht/~gheartsfield/nostr-rs-relay/commits/master.svg?sanitize=true&#34; alt=&#34;builds.sr.ht status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/schlunsen/nostr-rs-relay/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Github CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nostr-protocol/nips&#34;&gt;NIPs&lt;/a&gt; with a relay-specific implementation are listed here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-01: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/01.md&#34;&gt;Basic protocol flow description&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Core event model&lt;/li&gt; &#xA;   &lt;li&gt;Hide old metadata events&lt;/li&gt; &#xA;   &lt;li&gt;Id/Author prefix search&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-02: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/02.md&#34;&gt;Contact List and Petnames&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; NIP-03: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/03.md&#34;&gt;OpenTimestamps Attestations for Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-05: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/05.md&#34;&gt;Mapping Nostr keys to DNS-based internet identifiers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-09: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/09.md&#34;&gt;Event Deletion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-11: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/11.md&#34;&gt;Relay Information Document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-12: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/12.md&#34;&gt;Generic Tag Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-15: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/15.md&#34;&gt;End of Stored Events Notice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-16: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/16.md&#34;&gt;Event Treatment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-20: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/20.md&#34;&gt;Command Results&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-22: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/22.md&#34;&gt;Event &lt;code&gt;created_at&lt;/code&gt; limits&lt;/a&gt; (&lt;em&gt;future-dated events only&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; NIP-26: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/26.md&#34;&gt;Event Delegation&lt;/a&gt; (&lt;em&gt;implemented, but currently disabled&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-28: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/28.md&#34;&gt;Public Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NIP-33: &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/33.md&#34;&gt;Parameterized Replaceable Events&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The provided &lt;code&gt;Dockerfile&lt;/code&gt; will compile and build the server application. Use a bind mount to store the SQLite database outside of the container image, and map the container&#39;s 8080 port to a host port (7000 in the example below).&lt;/p&gt; &#xA;&lt;p&gt;The examples below start a rootless podman container, mapping a local data directory and config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ podman build -t nostr-rs-relay .&#xA;&#xA;$ mkdir data&#xA;&#xA;$ podman unshare chown 100:100 data&#xA;&#xA;$ podman run -it --rm -p 7000:8080 \&#xA;  --user=100:100 \&#xA;  -v $(pwd)/data:/usr/src/app/db:Z \&#xA;  -v $(pwd)/config.toml:/usr/src/app/config.toml:ro,Z \&#xA;  --name nostr-relay nostr-rs-relay:latest&#xA;&#xA;Nov 19 15:31:15.013  INFO nostr_rs_relay: Starting up from main&#xA;Nov 19 15:31:15.017  INFO nostr_rs_relay::server: listening on: 0.0.0.0:8080&#xA;Nov 19 15:31:15.019  INFO nostr_rs_relay::server: db writer created&#xA;Nov 19 15:31:15.019  INFO nostr_rs_relay::server: control message listener started&#xA;Nov 19 15:31:15.019  INFO nostr_rs_relay::db: Built a connection pool &#34;event writer&#34; (min=1, max=4)&#xA;Nov 19 15:31:15.019  INFO nostr_rs_relay::db: opened database &#34;/usr/src/app/db/nostr.db&#34; for writing&#xA;Nov 19 15:31:15.019  INFO nostr_rs_relay::schema: DB version = 0&#xA;Nov 19 15:31:15.054  INFO nostr_rs_relay::schema: database pragma/schema initialized to v7, and ready&#xA;Nov 19 15:31:15.054  INFO nostr_rs_relay::schema: All migration scripts completed successfully.  Welcome to v7.&#xA;Nov 19 15:31:15.521  INFO nostr_rs_relay::db: Built a connection pool &#34;client query&#34; (min=4, max=128)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;code&gt;nostr&lt;/code&gt; client such as &lt;a href=&#34;https://github.com/fiatjaf/noscl&#34;&gt;&lt;code&gt;noscl&lt;/code&gt;&lt;/a&gt; to publish and query events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ noscl publish &#34;hello world&#34;&#xA;Sent to &#39;ws://localhost:8090&#39;.&#xA;Seen it on &#39;ws://localhost:8090&#39;.&#xA;$ noscl home&#xA;Text Note [81cf...2652] from 296a...9b92 5 seconds ago&#xA;  hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A pre-built container is also available on DockerHub: &lt;a href=&#34;https://hub.docker.com/r/scsibug/nostr-rs-relay&#34;&gt;https://hub.docker.com/r/scsibug/nostr-rs-relay&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build and Run (without Docker)&lt;/h2&gt; &#xA;&lt;p&gt;Building &lt;code&gt;nostr-rs-relay&lt;/code&gt; requires an installation of Cargo &amp;amp; Rust: &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;https://www.rust-lang.org/tools/install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clone this repository, and then build a release version of the relay:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone -q https://git.sr.ht/\~gheartsfield/nostr-rs-relay&#xA;$ cd nostr-rs-relay&#xA;$ cargo build -q -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The relay executable is now located in &lt;code&gt;target/release/nostr-rs-relay&lt;/code&gt;. In order to run it with logging enabled, execute it with the &lt;code&gt;RUST_LOG&lt;/code&gt; variable set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ RUST_LOG=warn,nostr_rs_relay=info ./target/release/nostr-rs-relay&#xA;Dec 26 10:31:56.455  INFO nostr_rs_relay: Starting up from main&#xA;Dec 26 10:31:56.464  INFO nostr_rs_relay::server: listening on: 0.0.0.0:8080&#xA;Dec 26 10:31:56.466  INFO nostr_rs_relay::server: db writer created&#xA;Dec 26 10:31:56.466  INFO nostr_rs_relay::db: Built a connection pool &#34;event writer&#34; (min=1, max=2)&#xA;Dec 26 10:31:56.466  INFO nostr_rs_relay::db: opened database &#34;./nostr.db&#34; for writing&#xA;Dec 26 10:31:56.466  INFO nostr_rs_relay::schema: DB version = 11&#xA;Dec 26 10:31:56.467  INFO nostr_rs_relay::db: Built a connection pool &#34;maintenance writer&#34; (min=1, max=2)&#xA;Dec 26 10:31:56.467  INFO nostr_rs_relay::server: control message listener started&#xA;Dec 26 10:31:56.468  INFO nostr_rs_relay::db: Built a connection pool &#34;client query&#34; (min=4, max=8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You now have a running relay, on port &lt;code&gt;8080&lt;/code&gt;. Use a &lt;code&gt;nostr&lt;/code&gt; client or &lt;code&gt;websocat&lt;/code&gt; to connect and send/query for events.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The sample &lt;a href=&#34;https://raw.githubusercontent.com/scsibug/nostr-rs-relay/master/config.toml&#34;&gt;&lt;code&gt;config.toml&lt;/code&gt;&lt;/a&gt; file demonstrates the configuration available to the relay. This file is optional, but may be mounted into a docker container like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -it -p 7000:8080 \&#xA;  --mount src=$(pwd)/config.toml,target=/usr/src/app/config.toml,type=bind \&#xA;  --mount src=$(pwd)/data,target=/usr/src/app/db,type=bind \&#xA;  nostr-rs-relay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options include rate-limiting, event size limits, and network address settings.&lt;/p&gt; &#xA;&lt;h2&gt;Reverse Proxy Configuration&lt;/h2&gt; &#xA;&lt;p&gt;For examples of putting the relay behind a reverse proxy (for TLS termination, load balancing, and other features), see &lt;a href=&#34;https://raw.githubusercontent.com/scsibug/nostr-rs-relay/master/reverse-proxy.md&#34;&gt;Reverse Proxy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dev Channel&lt;/h2&gt; &#xA;&lt;p&gt;For development discussions, please feel free to use the &lt;a href=&#34;https://lists.sr.ht/~gheartsfield/nostr-rs-relay-devel&#34;&gt;sourcehut mailing list&lt;/a&gt;. Or, drop by the &lt;a href=&#34;https://t.me/nostr_protocol&#34;&gt;Nostr Telegram Channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To chat about &lt;code&gt;nostr-rs-relay&lt;/code&gt; on &lt;code&gt;nostr&lt;/code&gt; itself; visit our channel on &lt;a href=&#34;https://anigma.io/&#34;&gt;anigma&lt;/a&gt; or another client that supports &lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/28.md&#34;&gt;NIP-28&lt;/a&gt; chats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2ad246a094fee48c6e455dd13d759d5f41b5a233120f5719d81ebc1935075194&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is MIT licensed.&lt;/p&gt; &#xA;&lt;h2&gt;External Documentation and Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BlockChainCaffe/Nostr-Relay-Setup-Guide&#34;&gt;BlockChainCaffe&#39;s Nostr Relay Setup Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>