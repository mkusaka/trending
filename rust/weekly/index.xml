<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-02T02:03:41Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>typst/typst</title>
    <updated>2023-04-02T02:03:41Z</updated>
    <id>tag:github.com,2023-04-02:/typst/typst</id>
    <link href="https://github.com/typst/typst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new markup-based typesetting system that is powerful and easy to learn.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;Typst&#34; src=&#34;https://user-images.githubusercontent.com/17899797/226108480-722b770e-6313-40d7-84f2-26bebb55a281.png&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://typst.app/docs/&#34;&gt; &lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=docs&amp;amp;up_color=007aff&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app%2Fdocs&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://typst.app/&#34;&gt; &lt;img alt=&#34;Typst App&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=typst.app&amp;amp;up_color=239dad&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/2uDybryKPe&#34;&gt; &lt;img alt=&#34;Discord Server&#34; src=&#34;https://img.shields.io/discord/1054443721975922748?color=5865F2&amp;amp;label=discord&amp;amp;labelColor=555&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/typst/typst/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;Apache-2 License&#34; src=&#34;https://img.shields.io/badge/license-Apache%202-brightgreen&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Typst is a new markup-based typesetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. Typst has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in markup for the most common formatting tasks&lt;/li&gt; &#xA; &lt;li&gt;Flexible functions for everything else&lt;/li&gt; &#xA; &lt;li&gt;A tightly integrated scripting system&lt;/li&gt; &#xA; &lt;li&gt;Math typesetting, bibliography management, and more&lt;/li&gt; &#xA; &lt;li&gt;Fast compile times thanks to incremental compilation&lt;/li&gt; &#xA; &lt;li&gt;Friendly error messages in case something goes wrong&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains the Typst compiler and its CLI, which is everything you need to compile Typst documents locally. For the best writing experience, consider signing up to our &lt;a href=&#34;https://typst.app/&#34;&gt;collaborative online editor&lt;/a&gt; for free. It is currently in public beta.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://typst.app/docs/tutorial/&#34;&gt;gentle introduction&lt;/a&gt; to Typst is available in our documentation. However, if you want to see the power of Typst encapsulated in one image, here it is:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Example&#34; width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/17899797/228031796-ced0e452-fcee-4ae9-92da-b9287764ff25.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s dissect what&#39;s going on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;em&gt;set rules&lt;/em&gt; to configure element properties like the size of pages or the numbering of headings. By setting the page height to &lt;code&gt;auto&lt;/code&gt;, it scales to fit the content. Set rules accommodate the most common configurations. If you need full control, you can also use &lt;a href=&#34;https://typst.app/docs/reference/styling/#show-rules&#34;&gt;show rules&lt;/a&gt; to completely redefine the appearance of an element.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We insert a heading with the &lt;code&gt;= Heading&lt;/code&gt; syntax. One equals sign creates a top level heading, two create a subheading and so on. Typst has more lightweight markup like this, see the &lt;a href=&#34;https://typst.app/docs/reference/syntax/&#34;&gt;syntax&lt;/a&gt; reference for a full list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://typst.app/docs/reference/math/&#34;&gt;Mathematical equations&lt;/a&gt; are enclosed in dollar signs. By adding extra spaces around the contents of a equation, we can put it into a separate block. Multi-letter identifiers are interpreted as Typst definitions and functions unless put into quotes. This way, we don&#39;t need backslashes for things like &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;sqrt&lt;/code&gt;. And &lt;code&gt;phi.alt&lt;/code&gt; applies the &lt;code&gt;alt&lt;/code&gt; modifier to the &lt;code&gt;phi&lt;/code&gt; to select a particular symbol variant.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, we get to some &lt;a href=&#34;https://typst.app/docs/reference/scripting/&#34;&gt;scripting&lt;/a&gt;. To input code into a Typst document, we can write a hashtag followed by an expression. We define two variables and a recursive function to compute the n-th fibonacci number. Then, we display the results in a center-aligned table. The table function takes its cells row-by-row. Therefore, we first pass the formulas &lt;code&gt;$F_1$&lt;/code&gt; to &lt;code&gt;$F_10$&lt;/code&gt; and then the computed fibonacci numbers. We apply the spreading operator (&lt;code&gt;..&lt;/code&gt;) to both because they are arrays and we want to pass the arrays&#39; items as individual arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Text version of the code example.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#set page(width: 10cm, height: auto)&#xA;#set heading(numbering: &#34;1.&#34;)&#xA;&#xA;= Fibonacci sequence&#xA;The Fibonacci sequence is defined through the&#xA;recurrence relation $F_n = F_(n-1) + F_(n-2)$.&#xA;It can also be expressed in _closed form:_&#xA;&#xA;$ F_n = round(1 / sqrt(5) phi.alt^n), quad&#xA;  phi.alt = (1 + sqrt(5)) / 2 $&#xA;&#xA;#let count = 8&#xA;#let nums = range(1, count + 1)&#xA;#let fib(n) = (&#xA;  if n &amp;lt;= 2 { 1 }&#xA;  else { fib(n - 1) + fib(n - 2) }&#xA;)&#xA;&#xA;The first #count numbers of the sequence are:&#xA;&#xA;#align(center, table(&#xA;  columns: count,&#xA;  ..nums.map(n =&amp;gt; $F_#n$),&#xA;  ..nums.map(n =&amp;gt; str(fib(n))),&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can get sources and pre-built binaries for the latest release of Typst from the &lt;a href=&#34;https://github.com/typst/typst/releases/&#34;&gt;releases page&lt;/a&gt;. This will give you Typst&#39;s CLI which converts Typst sources into PDFs.&lt;/p&gt; &#xA;&lt;p&gt;Typst is also available through several package managers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# macOS or Linux using Homebrew&#xA;brew install typst&#xA;&#xA;# Arch Linux&#xA;pacman -S typst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nix users can use the &lt;code&gt;typst&lt;/code&gt; package with &lt;code&gt;nix-shell -p typst&lt;/code&gt; or build and run the bleeding edge version with &lt;code&gt;nix run github:typst/typst -- --version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed Typst, you can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Creates `file.pdf` in working directory.&#xA;typst file.typ&#xA;&#xA;# Creates PDF file at the desired path.&#xA;typst path/to/source.typ path/to/output.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also watch source files and automatically recompile on changes. This is faster than compiling from scratch each time because Typst has incremental compilation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Watches source files and recompiles on changes.&#xA;typst --watch file.typ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer an integrated IDE-like experience with autocompletion and instant preview, you can also check out the &lt;a href=&#34;https://typst.app/&#34;&gt;Typst web app&lt;/a&gt;, which is currently in public beta.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;To build Typst yourself, you need to have the &lt;a href=&#34;https://rustup.rs/&#34;&gt;latest stable Rust&lt;/a&gt; installed. Then, you can build the CLI with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build -p typst-cli --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optimized binary will be stored in &lt;code&gt;target/release/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We would love to see contributions from the community. If you experience bugs, feel free to open an issue or send a PR with a fix. For new features, we would invite you to open an issue first so we can explore the design space together. If you want to contribute and are wondering how everything works, also check out the &lt;a href=&#34;https://github.com/typst/typst/raw/main/ARCHITECTURE.md&#34;&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt; file. It explains how the compiler works.&lt;/p&gt; &#xA;&lt;h2&gt;Pronunciation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IPA&lt;/strong&gt;: /taÉªpst/&lt;/p&gt; &#xA;&lt;p&gt;&#34;Ty&#34; like in &lt;strong&gt;Ty&lt;/strong&gt;pesetting and &#34;pst&#34; like in Hi&lt;strong&gt;pst&lt;/strong&gt;er.&lt;/p&gt; &#xA;&lt;h2&gt;Design Principles&lt;/h2&gt; &#xA;&lt;p&gt;All of Typst has been designed with three key goals in mind: Power, simplicity, and performance. We think it&#39;s time for a system that matches the power of LaTeX, is easy to learn and use, all while being fast enough to realize instant preview. To achieve these goals, we follow three core design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simplicity through Consistency:&lt;/strong&gt; If you know how to do one thing in Typst, you should be able to transfer that knowledge to other things. If there are multiple ways to do the same thing, one of them should be at a different level of abstraction than the other. E.g. it&#39;s okay that &lt;code&gt;= Introduction&lt;/code&gt; and &lt;code&gt;#heading[Introduction]&lt;/code&gt; do the same thing because the former is just syntax sugar for the latter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Power through Composability:&lt;/strong&gt; There are two ways to make something flexible: Have a knob for everything or have a few knobs that you can combine in many ways. Typst is designed with the second way in mind. We provide systems that you can compose in ways we&#39;ve never even thought of. TeX is also in the second category, but it&#39;s a bit low-level and therefore people use LaTeX instead. But there, we don&#39;t really have that much composability. Instead, there&#39;s a package for everything (&lt;code&gt;\usepackage{knob}&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance through Incrementality:&lt;/strong&gt; All Typst language features must accommodate for incremental compilation. Luckily we have &lt;a href=&#34;https://github.com/typst/comemo/&#34;&gt;&lt;code&gt;comemo&lt;/code&gt;&lt;/a&gt;, a system for incremental compilation which does most of the hard work in the background.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tokio-rs/tracing</title>
    <updated>2023-04-02T02:03:41Z</updated>
    <id>tag:github.com,2023-04-02:/tokio-rs/tracing</id>
    <link href="https://github.com/tokio-rs/tracing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Application level tracing for Rust.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/assets/splash.svg?sanitize=true&#34; alt=&#34;Tracing â Structured, application-level diagnostics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/tracing&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/tracing.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/tracing&#34;&gt;&lt;img src=&#34;https://docs.rs/tracing/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tracing-rs.netlify.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-master-blue&#34; alt=&#34;Documentation (master)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tokio-rs/tracing/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/tokio-rs/tracing/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/EeF3cQw&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/500028886025895936?logo=discord&amp;amp;label=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tokio.rs&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/EeF3cQw&#34;&gt;Chat&lt;/a&gt; | &lt;a href=&#34;https://tracing-rs.netlify.com/&#34;&gt;Documentation (master branch)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The master branch is the pre-release, development version of &lt;code&gt;tracing&lt;/code&gt;. Please see the &lt;a href=&#34;https://github.com/tokio-rs/tracing/tree/v0.1.x&#34;&gt;v0.1.x&lt;/a&gt; branch for the versions of &lt;code&gt;tracing&lt;/code&gt; released to crates.io.&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tracing&lt;/code&gt; is a framework for instrumenting Rust programs to collect structured, event-based diagnostic information. &lt;code&gt;tracing&lt;/code&gt; is maintained by the Tokio project, but does &lt;em&gt;not&lt;/em&gt; require the &lt;code&gt;tokio&lt;/code&gt; runtime to be used.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;In Applications&lt;/h3&gt; &#xA;&lt;p&gt;In order to record trace events, executables have to use a collector implementation compatible with &lt;code&gt;tracing&lt;/code&gt;. A collector implements a way of collecting trace data, such as by logging it to standard output. &lt;a href=&#34;https://docs.rs/tracing-subscriber/&#34;&gt;&lt;code&gt;tracing-subscriber&lt;/code&gt;&lt;/a&gt;&#39;s &lt;a href=&#34;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/fmt/index.html&#34;&gt;&lt;code&gt;fmt&lt;/code&gt; module&lt;/a&gt; provides a collector for logging traces with reasonable defaults. Additionally, &lt;code&gt;tracing-subscriber&lt;/code&gt; is able to consume messages emitted by &lt;code&gt;log&lt;/code&gt;-instrumented libraries and modules.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;tracing-subscriber&lt;/code&gt;, add the following to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;tracing = &#34;0.1&#34;&#xA;tracing-subscriber = &#34;0.3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create and install a collector, for example using &lt;a href=&#34;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/fmt/fn.init.html&#34;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use tracing::info;&#xA;use tracing_subscriber;&#xA;&#xA;fn main() {&#xA;    // install global collector configured based on RUST_LOG env var.&#xA;    tracing_subscriber::fmt::init();&#xA;&#xA;    let number_of_yaks = 3;&#xA;    // this creates a new event, outside of any spans.&#xA;    info!(number_of_yaks, &#34;preparing to shave yaks&#34;);&#xA;&#xA;    let number_shaved = yak_shave::shave_all(number_of_yaks);&#xA;    info!(&#xA;        all_yaks_shaved = number_shaved == number_of_yaks,&#xA;        &#34;yak shaving completed.&#34;&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;init()&lt;/code&gt; calls &lt;a href=&#34;https://docs.rs/tracing/latest/tracing/subscriber/fn.set_global_default.html&#34;&gt;&lt;code&gt;set_global_default()&lt;/code&gt;&lt;/a&gt; so this collector will be used as the default in all threads for the remainder of the duration of the program, similar to how loggers work in the &lt;code&gt;log&lt;/code&gt; crate.&lt;/p&gt; &#xA;&lt;p&gt;For more control, a collector can be built in stages and not set globally, but instead used to locally override the default collector. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use tracing::{info, Level};&#xA;use tracing_subscriber;&#xA;&#xA;fn main() {&#xA;    let collector = tracing_subscriber::fmt()&#xA;        // filter spans/events with level TRACE or higher.&#xA;        .with_max_level(Level::TRACE)&#xA;        // build but do not install the subscriber.&#xA;        .finish();&#xA;&#xA;    tracing::collect::with_default(collector, || {&#xA;        info!(&#34;This will be logged to stdout&#34;);&#xA;    });&#xA;    info!(&#34;This will _not_ be logged to stdout&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any trace events generated outside the context of a collector will not be collected.&lt;/p&gt; &#xA;&lt;p&gt;This approach allows trace data to be collected by multiple collectors within different contexts in the program. Note that the override only applies to the currently executing thread; other threads will not see the change from with_default.&lt;/p&gt; &#xA;&lt;p&gt;Once a collector has been set, instrumentation points may be added to the executable using the &lt;code&gt;tracing&lt;/code&gt; crate&#39;s macros.&lt;/p&gt; &#xA;&lt;h3&gt;In Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Libraries should only rely on the &lt;code&gt;tracing&lt;/code&gt; crate and use the provided macros and types to collect whatever information might be useful to downstream consumers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::{error::Error, io};&#xA;use tracing::{debug, error, info, span, warn, Level};&#xA;&#xA;// the `#[tracing::instrument]` attribute creates and enters a span&#xA;// every time the instrumented function is called. The span is named after&#xA;// the function or method. Parameters passed to the function are recorded as fields.&#xA;#[tracing::instrument]&#xA;pub fn shave(yak: usize) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error + &#39;static&amp;gt;&amp;gt; {&#xA;    // this creates an event at the DEBUG level with two fields:&#xA;    // - `excitement`, with the key &#34;excitement&#34; and the value &#34;yay!&#34;&#xA;    // - `message`, with the key &#34;message&#34; and the value &#34;hello! I&#39;m gonna shave a yak.&#34;&#xA;    //&#xA;    // unlike other fields, `message`&#39;s shorthand initialization is just the string itself.&#xA;    debug!(excitement = &#34;yay!&#34;, &#34;hello! I&#39;m gonna shave a yak.&#34;);&#xA;    if yak == 3 {&#xA;        warn!(&#34;could not locate yak!&#34;);&#xA;        // note that this is intended to demonstrate `tracing`&#39;s features, not idiomatic&#xA;        // error handling! in a library or application, you should consider returning&#xA;        // a dedicated `YakError`. libraries like snafu or thiserror make this easy.&#xA;        return Err(io::Error::new(io::ErrorKind::Other, &#34;shaving yak failed!&#34;).into());&#xA;    } else {&#xA;        debug!(&#34;yak shaved successfully&#34;);&#xA;    }&#xA;    Ok(())&#xA;}&#xA;&#xA;pub fn shave_all(yaks: usize) -&amp;gt; usize {&#xA;    // Constructs a new span named &#34;shaving_yaks&#34; at the TRACE level,&#xA;    // and a field whose key is &#34;yaks&#34;. This is equivalent to writing:&#xA;    //&#xA;    // let span = span!(Level::TRACE, &#34;shaving_yaks&#34;, yaks = yaks);&#xA;    //&#xA;    // local variables (`yaks`) can be used as field values&#xA;    // without an assignment, similar to struct initializers.&#xA;    let span = span!(Level::TRACE, &#34;shaving_yaks&#34;, yaks);&#xA;    let _enter = span.enter();&#xA;&#xA;    info!(&#34;shaving yaks&#34;);&#xA;&#xA;    let mut yaks_shaved = 0;&#xA;    for yak in 1..=yaks {&#xA;        let res = shave(yak);&#xA;        debug!(yak, shaved = res.is_ok());&#xA;&#xA;        if let Err(ref error) = res {&#xA;            // Like spans, events can also use the field initialization shorthand.&#xA;            // In this instance, `yak` is the field being initialized.&#xA;            error!(yak, error = error.as_ref(), &#34;failed to shave yak!&#34;);&#xA;        } else {&#xA;            yaks_shaved += 1;&#xA;        }&#xA;        debug!(yaks_shaved);&#xA;    }&#xA;&#xA;    yaks_shaved&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;tracing = &#34;0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Libraries should &lt;em&gt;NOT&lt;/em&gt; install a collector by using a method that calls &lt;a href=&#34;https://docs.rs/tracing/latest/tracing/subscriber/fn.set_global_default.html&#34;&gt;&lt;code&gt;set_global_default()&lt;/code&gt;&lt;/a&gt;, as this will cause conflicts when executables try to set the default later.&lt;/p&gt; &#xA;&lt;h3&gt;In Asynchronous Code&lt;/h3&gt; &#xA;&lt;p&gt;To trace &lt;code&gt;async fn&lt;/code&gt;s, the preferred method is using the &lt;a href=&#34;https://docs.rs/tracing/latest/tracing/attr.instrument.html&#34;&gt;&lt;code&gt;#[instrument]&lt;/code&gt;&lt;/a&gt; attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use tracing::{info, instrument};&#xA;use tokio::{io::AsyncWriteExt, net::TcpStream};&#xA;use std::io;&#xA;&#xA;#[instrument]&#xA;async fn write(stream: &amp;amp;mut TcpStream) -&amp;gt; io::Result&amp;lt;usize&amp;gt; {&#xA;    let result = stream.write(b&#34;hello world\n&#34;).await;&#xA;    info!(&#34;wrote to stream; success={:?}&#34;, result.is_ok());&#xA;    result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Special handling is needed for the general case of code using &lt;a href=&#34;https://doc.rust-lang.org/stable/std/future/trait.Future.html&#34;&gt;&lt;code&gt;std::future::Future&lt;/code&gt;&lt;/a&gt; or blocks with &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, as the following example &lt;em&gt;will not&lt;/em&gt; work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;async {&#xA;    let _s = span.enter();&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The span guard &lt;code&gt;_s&lt;/code&gt; will not exit until the future generated by the &lt;code&gt;async&lt;/code&gt; block is complete. Since futures and spans can be entered and exited &lt;em&gt;multiple&lt;/em&gt; times without them completing, the span remains entered for as long as the future exists, rather than being entered only when it is polled, leading to very confusing and incorrect output. For more details, see &lt;a href=&#34;https://docs.rs/tracing/latest/tracing/span/index.html#closing-spans&#34;&gt;the documentation on closing spans&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This problem can be solved using the &lt;a href=&#34;https://docs.rs/tracing/latest/tracing/trait.Instrument.html#method.instrument&#34;&gt;&lt;code&gt;Future::instrument&lt;/code&gt;&lt;/a&gt; combinator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use tracing::Instrument;&#xA;&#xA;let my_future = async {&#xA;    // ...&#xA;};&#xA;&#xA;my_future&#xA;    .instrument(tracing::info_span!(&#34;my_future&#34;))&#xA;    .await&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Future::instrument&lt;/code&gt; attaches a span to the future, ensuring that the span&#39;s lifetime is as long as the future&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, the &lt;a href=&#34;https://docs.rs/tracing/latest/tracing/attr.instrument.html&#34;&gt;&lt;code&gt;#[instrument]&lt;/code&gt;&lt;/a&gt; macro performs the same explicit span attachment that &lt;code&gt;Future::instrument&lt;/code&gt; does.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; &#xA;&lt;p&gt;Tracing is built against the latest stable release. The minimum supported version is 1.49. The current Tracing version is not guaranteed to build on Rust versions earlier than the minimum supported version.&lt;/p&gt; &#xA;&lt;p&gt;Tracing follows the same compiler support policies as the rest of the Tokio project. The current stable Rust compiler and the three most recent minor versions before it will always be supported. For example, if the current stable compiler version is 1.45, the minimum supported version will not be increased past 1.42, three minor versions prior. Increasing the minimum supported compiler version is not considered a semver breaking change as long as doing so complies with this policy.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;First, see if the answer to your question can be found in the API documentation. If the answer is not there, there is an active community in the &lt;a href=&#34;https://discord.gg/EeF3cQw&#34;&gt;Tracing Discord channel&lt;/a&gt;. We would be happy to try to answer your question. Last, if that doesn&#39;t work, try opening an &lt;a href=&#34;https://github.com/tokio-rs/tracing/issues/new&#34;&gt;issue&lt;/a&gt; with the question.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;ð&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to help you get involved in the Tracing project.&lt;/p&gt; &#xA;&lt;h2&gt;Project layout&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing&#34;&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; crate contains the primary &lt;em&gt;instrumentation&lt;/em&gt; API, used for instrumenting libraries and applications to emit trace data. The &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-core&#34;&gt;&lt;code&gt;tracing-core&lt;/code&gt;&lt;/a&gt; crate contains the &lt;em&gt;core&lt;/em&gt; API primitives on which the rest of &lt;code&gt;tracing&lt;/code&gt; is instrumented. Authors of trace subscribers may depend on &lt;code&gt;tracing-core&lt;/code&gt;, which guarantees a higher level of stability.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, this repository contains several compatibility and utility libraries built on top of &lt;code&gt;tracing&lt;/code&gt;. Some of these crates are in a pre-release state, and are less stable than the &lt;code&gt;tracing&lt;/code&gt; and &lt;code&gt;tracing-core&lt;/code&gt; crates.&lt;/p&gt; &#xA;&lt;p&gt;The crates included as part of Tracing are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-futures&#34;&gt;&lt;code&gt;tracing-futures&lt;/code&gt;&lt;/a&gt;: Utilities for instrumenting &lt;code&gt;futures&lt;/code&gt;. (&lt;a href=&#34;https://crates.io/crates/tracing-futures&#34;&gt;crates.io&lt;/a&gt;|&lt;a href=&#34;https://docs.rs/tracing-futures&#34;&gt;docs&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-macros&#34;&gt;&lt;code&gt;tracing-macros&lt;/code&gt;&lt;/a&gt;: Experimental macros for emitting trace events (unstable).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-attributes&#34;&gt;&lt;code&gt;tracing-attributes&lt;/code&gt;&lt;/a&gt;: Procedural macro attributes for automatically instrumenting functions. (&lt;a href=&#34;https://crates.io/crates/tracing-attributes&#34;&gt;crates.io&lt;/a&gt;|&lt;a href=&#34;https://docs.rs/tracing-attributes&#34;&gt;docs&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-log&#34;&gt;&lt;code&gt;tracing-log&lt;/code&gt;&lt;/a&gt;: Compatibility with the &lt;code&gt;log&lt;/code&gt; crate (unstable).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-opentelemetry&#34;&gt;&lt;code&gt;tracing-opentelemetry&lt;/code&gt;&lt;/a&gt;: Provides a layer that connects spans from multiple systems into a trace and emits them to &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt;-compatible distributed tracing systems for processing and visualization. (&lt;a href=&#34;https://crates.io/crates/tracing-opentelemetry&#34;&gt;crates.io&lt;/a&gt;|&lt;a href=&#34;https://docs.rs/tracing-opentelemetry&#34;&gt;docs&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-serde&#34;&gt;&lt;code&gt;tracing-serde&lt;/code&gt;&lt;/a&gt;: A compatibility layer for serializing trace data with &lt;code&gt;serde&lt;/code&gt; (unstable).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.rs/tracing-subscriber/&#34;&gt;&lt;code&gt;tracing-subscriber&lt;/code&gt;&lt;/a&gt;: Collector implementations, and utilities for implementing and composing &lt;code&gt;Collector&lt;/code&gt;s. (&lt;a href=&#34;https://crates.io/crates/tracing-subscriber&#34;&gt;crates.io&lt;/a&gt;|&lt;a href=&#34;https://docs.rs/tracing-subscriber&#34;&gt;docs&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-tower&#34;&gt;&lt;code&gt;tracing-tower&lt;/code&gt;&lt;/a&gt;: Compatibility with the &lt;code&gt;tower&lt;/code&gt; ecosystem (unstable).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-appender&#34;&gt;&lt;code&gt;tracing-appender&lt;/code&gt;&lt;/a&gt;: Utilities for outputting tracing data, including a file appender and non-blocking writer. (&lt;a href=&#34;https://crates.io/crates/tracing-appender&#34;&gt;crates.io&lt;/a&gt;|&lt;a href=&#34;https://docs.rs/tracing-appender&#34;&gt;docs&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-error&#34;&gt;&lt;code&gt;tracing-error&lt;/code&gt;&lt;/a&gt;: Provides &lt;code&gt;SpanTrace&lt;/code&gt;, a type for instrumenting errors with tracing spans&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-flame&#34;&gt;&lt;code&gt;tracing-flame&lt;/code&gt;&lt;/a&gt;; Provides a layer for generating flame graphs based on tracing span entry / exit events.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/tracing-journald&#34;&gt;&lt;code&gt;tracing-journald&lt;/code&gt;&lt;/a&gt;: Provides a layer for recording events to the Linux &lt;code&gt;journald&lt;/code&gt; service, preserving structured data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Crates&lt;/h2&gt; &#xA;&lt;p&gt;In addition to this repository, here are also several third-party crates which are not maintained by the &lt;code&gt;tokio&lt;/code&gt; project. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-timing&#34;&gt;&lt;code&gt;tracing-timing&lt;/code&gt;&lt;/a&gt; implements inter-event timing metrics on top of &lt;code&gt;tracing&lt;/code&gt;. It provides a subscriber that records the time elapsed between pairs of &lt;code&gt;tracing&lt;/code&gt; events and generates histograms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-honeycomb&#34;&gt;&lt;code&gt;tracing-honeycomb&lt;/code&gt;&lt;/a&gt; Provides a layer that reports traces spanning multiple machines to &lt;a href=&#34;https://www.honeycomb.io/&#34;&gt;honeycomb.io&lt;/a&gt;. Backed by &lt;a href=&#34;https://crates.io/crates/tracing-distributed&#34;&gt;&lt;code&gt;tracing-distributed&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-distributed&#34;&gt;&lt;code&gt;tracing-distributed&lt;/code&gt;&lt;/a&gt; Provides a generic implementation of a layer that reports traces spanning multiple machines to some backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-actix-web&#34;&gt;&lt;code&gt;tracing-actix-web&lt;/code&gt;&lt;/a&gt; provides &lt;code&gt;tracing&lt;/code&gt; integration for the &lt;code&gt;actix-web&lt;/code&gt; web framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-actix&#34;&gt;&lt;code&gt;tracing-actix&lt;/code&gt;&lt;/a&gt; provides &lt;code&gt;tracing&lt;/code&gt; integration for the &lt;code&gt;actix&lt;/code&gt; actor framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-gelf&#34;&gt;&lt;code&gt;tracing-gelf&lt;/code&gt;&lt;/a&gt; implements a subscriber for exporting traces in Greylog GELF format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-coz&#34;&gt;&lt;code&gt;tracing-coz&lt;/code&gt;&lt;/a&gt; provides integration with the &lt;a href=&#34;https://github.com/plasma-umass/coz&#34;&gt;coz&lt;/a&gt; causal profiler (Linux-only).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-bunyan-formatter&#34;&gt;&lt;code&gt;tracing-bunyan-formatter&lt;/code&gt;&lt;/a&gt; provides a layer implementation that reports events and spans in &lt;a href=&#34;https://github.com/trentm/node-bunyan&#34;&gt;bunyan&lt;/a&gt; format, enriched with timing information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tide-tracing&#34;&gt;&lt;code&gt;tide-tracing&lt;/code&gt;&lt;/a&gt; provides a &lt;a href=&#34;https://crates.io/crates/tide&#34;&gt;tide&lt;/a&gt; middleware to trace all incoming requests and responses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/color-spantrace&#34;&gt;&lt;code&gt;color-spantrace&lt;/code&gt;&lt;/a&gt; provides a formatter for rendering span traces in the style of &lt;code&gt;color-backtrace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/color-eyre&#34;&gt;&lt;code&gt;color-eyre&lt;/code&gt;&lt;/a&gt; provides customized panic and eyre report handlers for &lt;code&gt;eyre::Report&lt;/code&gt; for capturing span traces and backtraces with new errors and pretty printing them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/spandoc&#34;&gt;&lt;code&gt;spandoc&lt;/code&gt;&lt;/a&gt; provides a proc macro for constructing spans from doc comments &lt;em&gt;inside&lt;/em&gt; of functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/tracing-wasm&#34;&gt;&lt;code&gt;tracing-wasm&lt;/code&gt;&lt;/a&gt; provides a &lt;code&gt;Collector&lt;/code&gt;/&lt;code&gt;Subscriber&lt;/code&gt; implementation that reports events and spans via browser &lt;code&gt;console.log&lt;/code&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API&#34;&gt;User Timing API (&lt;code&gt;window.performance&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-web&#34;&gt;&lt;code&gt;tracing-web&lt;/code&gt;&lt;/a&gt; provides a layer implementation of level-aware logging of events to web browsers&#39; &lt;code&gt;console.*&lt;/code&gt; and span events to the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API&#34;&gt;User Timing API (&lt;code&gt;window.performance&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/test-log&#34;&gt;&lt;code&gt;test-log&lt;/code&gt;&lt;/a&gt; takes care of initializing &lt;code&gt;tracing&lt;/code&gt; for tests, based on environment variables with an &lt;code&gt;env_logger&lt;/code&gt; compatible syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/tracing-unwrap&#34;&gt;&lt;code&gt;tracing-unwrap&lt;/code&gt;&lt;/a&gt; provides convenience methods to report failed unwraps on &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Option&lt;/code&gt; types to a &lt;code&gt;Collector&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/diesel-tracing&#34;&gt;&lt;code&gt;diesel-tracing&lt;/code&gt;&lt;/a&gt; provides integration with &lt;a href=&#34;https://crates.io/crates/diesel&#34;&gt;&lt;code&gt;diesel&lt;/code&gt;&lt;/a&gt; database connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-tracy&#34;&gt;&lt;code&gt;tracing-tracy&lt;/code&gt;&lt;/a&gt; provides a way to collect &lt;a href=&#34;https://github.com/wolfpld/tracy&#34;&gt;Tracy&lt;/a&gt; profiles in instrumented applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-elastic-apm&#34;&gt;&lt;code&gt;tracing-elastic-apm&lt;/code&gt;&lt;/a&gt; provides a layer for reporting traces to &lt;a href=&#34;https://www.elastic.co/apm&#34;&gt;Elastic APM&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/tracing-etw&#34;&gt;&lt;code&gt;tracing-etw&lt;/code&gt;&lt;/a&gt; provides a layer for emitting Windows &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/etw/about-event-tracing&#34;&gt;ETW&lt;/a&gt; events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/sentry-tracing&#34;&gt;&lt;code&gt;sentry-tracing&lt;/code&gt;&lt;/a&gt; provides a layer for reporting events and traces to &lt;a href=&#34;https://sentry.io/welcome/&#34;&gt;Sentry&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-forest&#34;&gt;&lt;code&gt;tracing-forest&lt;/code&gt;&lt;/a&gt; provides a subscriber that preserves contextual coherence by grouping together logs from the same spans during writing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-loki&#34;&gt;&lt;code&gt;tracing-loki&lt;/code&gt;&lt;/a&gt; provides a layer for shipping logs to &lt;a href=&#34;https://grafana.com/oss/loki/&#34;&gt;Grafana Loki&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-logfmt&#34;&gt;&lt;code&gt;tracing-logfmt&lt;/code&gt;&lt;/a&gt; provides a layer that formats events and spans into the logfmt format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/tracing-chrome&#34;&gt;&lt;code&gt;tracing-chrome&lt;/code&gt;&lt;/a&gt; provides a layer that exports trace data that can be viewed in &lt;code&gt;chrome://tracing&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/reqwest-tracing&#34;&gt;&lt;code&gt;reqwest-tracing&lt;/code&gt;&lt;/a&gt; provides a middleware to trace &lt;a href=&#34;https://crates.io/crates/reqwest&#34;&gt;&lt;code&gt;reqwest&lt;/code&gt;&lt;/a&gt; HTTP requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(if you&#39;re the maintainer of a &lt;code&gt;tracing&lt;/code&gt; ecosystem crate not in this list, please let us know!)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; that some of the ecosystem crates are currently unreleased and undergoing active development. They may be less stable than &lt;code&gt;tracing&lt;/code&gt; and &lt;code&gt;tracing-core&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;External Resources&lt;/h2&gt; &#xA;&lt;p&gt;This is a list of links to blog posts, conference talks, and tutorials about Tracing.&lt;/p&gt; &#xA;&lt;h4&gt;Blog Posts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tokio.rs/blog/2019-08-tracing/&#34;&gt;Diagnostics with Tracing&lt;/a&gt; on the Tokio blog, August 2019&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/better-programming/production-grade-logging-in-rust-applications-2c7fffd108a6&#34;&gt;Production-Grade Logging in Rust Applications&lt;/a&gt;, November 2020&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://burgers.io/custom-logging-in-rust-using-tracing&#34;&gt;Custom Logging in Rust using &lt;code&gt;tracing&lt;/code&gt; and &lt;code&gt;tracing-subscriber&lt;/code&gt;, part 1&lt;/a&gt; and &lt;a href=&#34;https://burgers.io/custom-logging-in-rust-using-tracing-part-2&#34;&gt;part 2&lt;/a&gt;, October 2021&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Talks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=j_kXRg3zlec&#34;&gt;Bay Area Rust Meetup talk and Q&amp;amp;A&lt;/a&gt;, March 2019&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JjItsfqFIdo&#34;&gt;RustConf 2019 talk&lt;/a&gt; and &lt;a href=&#34;https://www.elizas.website/slides/rustconf-8-2019.pdf&#34;&gt;slides&lt;/a&gt;, August 2019&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/HtKnLiFwHJM&#34;&gt;Are we observable yet? @ RustyDays talk&lt;/a&gt; and &lt;a href=&#34;https://docs.google.com/presentation/d/1zrxJs7fJgQ29bKfnAll1bYTo9cYZxsCZUwDDtyp5Fak/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;, August 2020&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Help us expand this list! If you&#39;ve written or spoken about Tracing, or know of resources that aren&#39;t listed, please open a pull request adding them.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/tokio-rs/tracing/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tracing by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>starkware-libs/cairo</title>
    <updated>2023-04-02T02:03:41Z</updated>
    <id>tag:github.com,2023-04-02:/starkware-libs/cairo</id>
    <link href="https://github.com/starkware-libs/cairo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cairo is the first Turing-complete language for creating provable programs for general computation.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Cairo ðº &lt;/h1&gt; &#xA; &lt;h2&gt; â¡ Blazing â¡ fast â¡ compiler for Cairo, written in ð¦ Rust ð¦ &lt;/h2&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/resources/img/cairo-logo-square.png&#34; height=&#34;200&#34; width=&#34;200&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://github.com/starkware-libs/cairo/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=01_BUG_REPORT.md&amp;amp;title=bug%3A+&#34;&gt;Report a Bug&lt;/a&gt; - &#xA; &lt;a href=&#34;https://github.com/starkware-libs/cairo/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=02_FEATURE_REQUEST.md&amp;amp;title=feat%3A+&#34;&gt;Request a Feature&lt;/a&gt; - &#xA; &lt;a href=&#34;https://github.com/starkware-libs/cairo/discussions&#34;&gt;Ask a Question&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/starkware-libs/cairo/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/starkware-libs/cairo/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/starkware-libs/cairo.svg?style=flat-square&#34; alt=&#34;Project license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/starkware-libs/cairo/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square&#34; alt=&#34;Pull Requests welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#compiling-and-running-cairo-files&#34;&gt;Compiling and running Cairo files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#development&#34;&gt;Development&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#install-the-language-server&#34;&gt;Install the language server&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#project-assistance&#34;&gt;Project assistance&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#authors--contributors&#34;&gt;Authors &amp;amp; contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Cairo is the first Turing-complete language for creating provable programs for general computation.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setup Rust:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup override set stable &amp;amp;&amp;amp; rustup update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure rust was installed correctly by running the following from the root project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling and running Cairo files&lt;/h3&gt; &#xA;&lt;p&gt;Compile Cairo to Sierra:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --bin cairo-compile -- /path/to/input.cairo /path/to/output.sierra --replace-ids&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile Sierra to casm (Cairo assembly):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --bin sierra-compile -- /path/to/input.sierra /path/to/output.casm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run Cairo code directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --bin cairo-run -- /path/to/file.cairo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more information &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/crates/cairo-lang-runner/README.md&#34;&gt;here&lt;/a&gt;. You can also find Cairo examples in the &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;For running tests specifically, see here: &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/crates/cairo-lang-test-runner/README.md&#34;&gt;cairo-test&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compiling Starknet Contracts&lt;/h3&gt; &#xA;&lt;p&gt;Compile a Starknet Contract to a Sierra ContractClass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --bin starknet-compile -- /path/to/input.cairo /path/to/output.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile the ContractClass of a CompiledClass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --bin starknet-sierra-compile -- /path/to/input.json /path/to/output.casm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;h4&gt;Install the language server&lt;/h4&gt; &#xA;&lt;p&gt;Follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/vscode-cairo/README.md&#34;&gt;vscode-cairo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The next milestone is to reach feature parity with the old Cairo version. You can track the exact progress &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/docs/FEATURE_PARITY.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We encourage developers to ask and answer questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/cairo-lang&#34;&gt;stackoverflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Contact options listed on &lt;a href=&#34;https://github.com/starkware-libs&#34;&gt;this GitHub profile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project assistance&lt;/h2&gt; &#xA;&lt;p&gt;If you want to say &lt;strong&gt;thank you&lt;/strong&gt; or/and support active development of Cairo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a &lt;a href=&#34;https://github.com/starkware-libs/cairo&#34;&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; &#xA; &lt;li&gt;Tweet about your Cairo work.&lt;/li&gt; &#xA; &lt;li&gt;Write interesting articles about the project on &lt;a href=&#34;https://dev.to/&#34;&gt;Dev.to&lt;/a&gt;, &lt;a href=&#34;https://medium.com/&#34;&gt;Medium&lt;/a&gt; or your personal blog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Together, we can make Cairo &lt;strong&gt;better&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;First off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/docs/CONTRIBUTING.md&#34;&gt;our contribution guidelines&lt;/a&gt;, and thank you for being involved!&lt;/p&gt; &#xA;&lt;h2&gt;Authors &amp;amp; contributors&lt;/h2&gt; &#xA;&lt;p&gt;For a full list of all authors and contributors, see &lt;a href=&#34;https://github.com/starkware-libs/cairo/contributors&#34;&gt;the contributors page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Cairo follows good practices of security, but 100% security cannot be assured. Cairo is provided &lt;strong&gt;&#34;as is&#34;&lt;/strong&gt; without any &lt;strong&gt;warranty&lt;/strong&gt;. Use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For more information and to report security issues, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/docs/SECURITY.md&#34;&gt;security documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;strong&gt;Apache 2.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/starkware-libs/cairo/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>