<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T02:07:59Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raphamorim/rio</title>
    <updated>2023-06-04T02:07:59Z</updated>
    <id>tag:github.com,2023-06-04:/raphamorim/rio</id>
    <link href="https://github.com/raphamorim/rio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A hardware-accelerated GPU terminal emulator powered by WebGPU, focusing to run in desktops and browsers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rio term&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;tl;dr: Rio is a terminal built to run everywhere, as a native desktop applications by Rust/WebGPU or even in the browser powered by WebAssembly/WebGPU.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/docs/assets/banner.png&#34; alt=&#34;Rio banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;h4&gt;Status&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸŸ¢&lt;/td&gt; &#xA;   &lt;td&gt;Stable and usable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸ”µ&lt;/td&gt; &#xA;   &lt;td&gt;Unstable and usable (minor bugs and incomplete features).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸŸ &lt;/td&gt; &#xA;   &lt;td&gt;Unstable and usable (major bugs and incomplete features).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸŸ¡&lt;/td&gt; &#xA;   &lt;td&gt;It does builds but provides a very limited usage or is not able to use at all.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸ”´&lt;/td&gt; &#xA;   &lt;td&gt;Development has not started.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Platform&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Version introduced&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOs &lt;em&gt;as desktop application&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸ”µ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.3&lt;/code&gt; &lt;a href=&#34;https://raphamorim.io/rio/install/#install&#34;&gt;(see more)&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web Browser &lt;em&gt;(WebAssembly)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸŸ¡&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux &lt;em&gt;as desktop application&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸ”µ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.5&lt;/code&gt; &lt;a href=&#34;https://raphamorim.io/rio/install/#build-from-the-source&#34;&gt;(see more)&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows &lt;em&gt;as desktop application&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸ”´&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nintendo Switch *&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸ”´&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;* Nintendo Switch development is just for fun, the goal is to have the renderer working and the basic features of a terminal.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo Gallery&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/resources/demo-tmux.png&#34; alt=&#34;Demo tmux&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/resources/demo-emacs.png&#34; alt=&#34;Demo emacs&#34; width=&#34;500px&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/resources/demo-text-styles.png&#34; alt=&#34;Demo text styles&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/resources/demo-selection.png&#34; alt=&#34;Demo selection&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/resources/demo-colors.png&#34; alt=&#34;Demo colors&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/resources/demo-neovim.png&#34; alt=&#34;Demo neovim&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: Emojis are rendered with Noto Emoji.&lt;/p&gt; &#xA;&lt;h2&gt;Sugarloaf&lt;/h2&gt; &#xA;&lt;p&gt;Rio is built over a custom renderer called &lt;a href=&#34;https://crates.io/crates/sugarloaf&#34;&gt;Sugarloaf&lt;/a&gt;, which is responsible for font and style rendering. Sugarloaf demo:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/sugarloaf/resources/demo-text-big.png&#34; alt=&#34;Demo Sugarloaf&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/#about-rio&#34;&gt;About Rio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/#development-status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Rio&lt;/h2&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://raphamorim.io/rio&#34;&gt;https://raphamorim.io/rio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using or want to help in any way please consider to donate via &lt;a href=&#34;https://github.com/sponsors/raphamorim&#34;&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Rio would not be possible without &lt;a href=&#34;https://raw.githubusercontent.com/raphamorim/rio/main/#acknowledgements&#34;&gt;few acknowledgements&lt;/a&gt; and specially &lt;a href=&#34;https://github.com/alacritty/alacritty/&#34;&gt;Alacritty&lt;/a&gt;, since a lot of Rio functionalities (e.g: ANSI parser, events, grid system) was originally written (and still uses a good amount) of Alacritty code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Read about Rio in the official website: &lt;a href=&#34;https://raphamorim.io/rio/docs&#34;&gt;https://raphamorim.io/rio/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration File&lt;/h2&gt; &#xA;&lt;p&gt;Configuration file is documented in Rio official website: &lt;a href=&#34;https://raphamorim.io/rio/docs#configuration-file&#34;&gt;https://raphamorim.io/rio/docs#configuration-file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alacritty ðŸ¥‡&lt;/li&gt; &#xA; &lt;li&gt;Rio logo was made using &lt;em&gt;Adobe Sketchbook&lt;/em&gt; on iPad.&lt;/li&gt; &#xA; &lt;li&gt;The default color palette is based on the colors of &lt;a href=&#34;https://ui.dev/&#34;&gt;ui.dev&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Text glyph render is from &lt;a href=&#34;https://github.com/hecrj/wgpu_glyph&#34;&gt;https://github.com/hecrj/wgpu_glyph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wez/wezterm&#34;&gt;https://github.com/wez/wezterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gaijin.at/en/infos/ascii-ansi-character-table#asciicontrol&#34;&gt;https://www.gaijin.at/en/infos/ascii-ansi-character-table#asciicontrol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/orthographic-projection-matrix.html&#34;&gt;https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/orthographic-projection-matrix.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mitsuhiko/rye</title>
    <updated>2023-06-04T02:07:59Z</updated>
    <id>tag:github.com,2023-06-04:/mitsuhiko/rye</id>
    <link href="https://github.com/mitsuhiko/rye" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Experimental Package Management Solution for Python&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/mitsuhiko/rye/main/docs/static/favicon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;Rye:&lt;/strong&gt; An Experimental Package Management Solution for Python&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/drbkcdtSbg&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/drbkcdtSbg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Rye is &lt;a href=&#34;https://github.com/mitsuhiko/&#34;&gt;Armin&#39;s&lt;/a&gt; personal one-stop-shop for all his Python needs. It installs and manages Python installations, manages &lt;code&gt;pyproject.toml&lt;/code&gt; files, installs and uninstalls dependencies, manages virtualenvs behind the scenes. It supports monorepos and global tool installations.&lt;/p&gt; &#xA;&lt;p&gt;It is a wish of what Python was, with no guarantee to work for anyone else. It&#39;s an exploration, and it&#39;s far from perfect. Thus also the question: &lt;strong&gt;&lt;a href=&#34;https://github.com/mitsuhiko/rye/discussions/6&#34;&gt;Should it exist?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://youtu.be/CyI8TBuKPF0&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/CyI8TBuKPF0/sddefault.jpg&#34; alt=&#34;Watch the instruction&#34; width=&#34;40%&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;em&gt;Click on the thumbnail to watch a 9 minute introduction video&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Learn more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mitsuhiko.github.io/rye&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mitsuhiko/rye/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mitsuhiko/rye/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/drbkcdtSbg&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For installation instructions please refer to the &lt;a href=&#34;https://mitsuhiko.github.io/rye/guide/installation/&#34;&gt;installation documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use rye for automatic management, you first need to create a new project using &lt;code&gt;rye init&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rye init my_project &amp;amp;&amp;amp; cd my_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once that&#39;s done, you can follow these steps to enjoy the benefits of automated management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rye sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to choose a specific version of Python, you can use the &lt;code&gt;rye pin&lt;/code&gt; command to specify the version you need (optionally):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rye pin cpython@3.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You can now easily achieve automatic management and switch between different versions of Python as needed.&lt;/p&gt; &#xA;&lt;p&gt;The virtualenv that &lt;code&gt;rye&lt;/code&gt; manages is placed in &lt;code&gt;.venv&lt;/code&gt; next to your &lt;code&gt;pyproject.toml&lt;/code&gt;. You can activate and work with it as normal with one notable exception: the Python installation in it does not contain &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Correctly installed, &lt;code&gt;rye&lt;/code&gt; will automatically pick up the right Python without manually activating the virtualenv. That is enabled by having &lt;code&gt;~/.rye/shims&lt;/code&gt; at higher priority in your &lt;code&gt;PATH&lt;/code&gt;. If you operate outside of a rye managed project, the regular Python is picked up automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Some of the things it does&lt;/h2&gt; &#xA;&lt;p&gt;It automatically installs and manages Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rye pin 3.11&#xA;$ rye run python&#xA;Python 3.11.1 (main, Jan 16 2023, 16:02:03) [Clang 15.0.7 ] on darwin&#xA;Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that does mean, that Rye will automatically download and install an appropriate Python binary for you.&lt;/strong&gt; These Python binaries are currently pulled from &lt;a href=&#34;https://github.com/indygreg/python-build-standalone/releases&#34;&gt;the indygreg python-build-standalone releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install tools in isolation globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rye install maturin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Manage dependencies of a local &lt;code&gt;pyproject.toml&lt;/code&gt; and update the virtualenv automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rye add flask&#xA;$ rye sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Decisions Made&lt;/h2&gt; &#xA;&lt;p&gt;To understand why things are the way they are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Virtualenvs:&lt;/strong&gt; while I personally do not like virtualenvs that much, they are so widespread and have reasonable tooling support, so I chose this over &lt;code&gt;__pypackages__&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Default Dependencies:&lt;/strong&gt; the virtualenvs when they come up are completely void of dependencies. Not even &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;setuptools&lt;/code&gt; are installed into it. Rye manages the virtualenv from outside the virtualenv.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Core Non Standard Stuff:&lt;/strong&gt; Rye (with the exception of it&#39;s own &lt;code&gt;tool&lt;/code&gt; section in the &lt;code&gt;pyproject.toml&lt;/code&gt;) uses standardized keys. That means it uses regular requirements as you would expect. It also does not use a custom lock file format and uses &lt;a href=&#34;https://github.com/jazzband/pip-tools&#34;&gt;&lt;code&gt;pip-tools&lt;/code&gt;&lt;/a&gt; behind the scenes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Pip:&lt;/strong&gt; Rye uses pip, but it does not expose it. It manage dependencies in &lt;code&gt;pyproject.toml&lt;/code&gt; only.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No System Python:&lt;/strong&gt; I can&#39;t deal with any more linux distribution weird Python installations or whatever mess there is on macOS. I used to build my own Pythons that are the same everywhere, now I use &lt;a href=&#34;https://github.com/indygreg/python-build-standalone&#34;&gt;indygreg&#39;s Python builds&lt;/a&gt;. Rye will automatically download and manage Python builds from there. No compiling, no divergence.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Project Local Shims:&lt;/strong&gt; Rye maintains a &lt;code&gt;python&lt;/code&gt; shim that auto discovers the current &lt;code&gt;pyproject.toml&lt;/code&gt; and automatically operates below it. Just add the shims to your shell and you can run &lt;code&gt;python&lt;/code&gt; and it will automatically always operate in the right project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Python Distributions&lt;/h2&gt; &#xA;&lt;p&gt;Rye does not use system python installations. Instead it uses Gregory Szorc&#39;s standalone Python builds: &lt;a href=&#34;https://github.com/indygreg/python-build-standalone&#34;&gt;python-build-standalone&lt;/a&gt;. This is done to create a unified experience of Python installations and to avoid incompatibilities created by different Python distributions. Most importantly this also means you never need to compile a Python any more, it just downloads prepared binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Global Tools&lt;/h2&gt; &#xA;&lt;p&gt;If you want tools to be installed into isolated virtualenvs (like pipsi and pipx), you can use &lt;code&gt;rye&lt;/code&gt; too (requires &lt;code&gt;~/.rye/shims&lt;/code&gt; to be on the path):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rye install pycowsay&#xA;$ pycowsay Wow&#xA;&#xA;  ---&#xA;&amp;lt; Wow &amp;gt;&#xA;  ---&#xA;   \   ^__^&#xA;    \  (oo)\_______&#xA;       (__)\       )\/\&#xA;           ||----w |&#xA;           ||     ||&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall run &lt;code&gt;rye uninstall pycowsay&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;p&gt;License: MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EAimTY/tuic</title>
    <updated>2023-06-04T02:07:59Z</updated>
    <id>tag:github.com,2023-06-04:/EAimTY/tuic</id>
    <link href="https://github.com/EAimTY/tuic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delicately-TUICed 0-RTT proxy protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TUIC&lt;/h1&gt; &#xA;&lt;p&gt;Delicately-TUICed 0-RTT proxy protocol&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: TUIC&#39;s &lt;a href=&#34;https://github.com/EAimTY/tuic/tree/dev&#34;&gt;dev&lt;/a&gt; branch is under heavy development. For end-user, please check out the latest released branch&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;TUIC is a proxy protocol focusing on the simplicity. It aims to minimize the additional handshake latency caused by relaying as much as possible&lt;/p&gt; &#xA;&lt;p&gt;TUIC is originally designed to be used on top of the &lt;a href=&#34;https://en.wikipedia.org/wiki/QUIC&#34;&gt;QUIC&lt;/a&gt; protocol, but you can use it with any other protocol, e.g. TCP, in theory&lt;/p&gt; &#xA;&lt;p&gt;When paired with QUIC, TUIC can achieve:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0-RTT TCP proxying&lt;/li&gt; &#xA; &lt;li&gt;0-RTT UDP proxying with NAT type &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc3489#section-5&#34;&gt;Full Cone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;0-RTT authentication&lt;/li&gt; &#xA; &lt;li&gt;Two UDP proxying modes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;native&lt;/code&gt;: Having characteristics of native UDP mechanism&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;quic&lt;/code&gt;: Transferring UDP packets losslessly using QUIC streams&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fully multiplexed&lt;/li&gt; &#xA; &lt;li&gt;All the advantages of QUIC: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bidirectional user-space congestion control&lt;/li&gt; &#xA;   &lt;li&gt;Connection migration&lt;/li&gt; &#xA;   &lt;li&gt;Optional 0-RTT connection handshake&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;There are 4 crates provided in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/EAimTY/tuic/tree/dev/tuic&#34;&gt;tuic&lt;/a&gt;&lt;/strong&gt; - Library. The protocol itself, protocol &amp;amp; model abstraction, synchronous / asynchronous marshalling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/EAimTY/tuic/tree/dev/tuic-quinn&#34;&gt;tuic-quinn&lt;/a&gt;&lt;/strong&gt; - Library. A thin layer on top of &lt;a href=&#34;https://github.com/quinn-rs/quinn&#34;&gt;quinn&lt;/a&gt; to provide functions of TUIC&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/EAimTY/tuic/tree/dev/tuic-server&#34;&gt;tuic-server&lt;/a&gt;&lt;/strong&gt; - Binary. Minimalistic TUIC server implementation as a reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/EAimTY/tuic/tree/dev/tuic-client&#34;&gt;tuic-client&lt;/a&gt;&lt;/strong&gt; - Binary. Minimalistic TUIC client implementation as a reference&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GNU General Public License v3.0&lt;/p&gt;</summary>
  </entry>
</feed>