<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:55:59Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gfx-rs/wgpu</title>
    <updated>2023-08-20T01:55:59Z</updated>
    <id>tag:github.com,2023-08-20:/gfx-rs/wgpu</id>
    <link href="https://github.com/gfx-rs/wgpu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform, safe, pure-rust graphics api.&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;right&#34; width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/gfx-rs/wgpu/trunk/logo.png&#34;&gt; &#xA;&lt;h1&gt;wgpu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#Wgpu:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Space&amp;amp;message=%23Wgpu&amp;amp;color=blue&amp;amp;logo=matrix&#34; alt=&#34;Matrix Space&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#wgpu:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=devs&amp;amp;message=%23wgpu&amp;amp;color=blueviolet&amp;amp;logo=matrix&#34; alt=&#34;Dev Matrix  &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#wgpu-users:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=users&amp;amp;message=%23wgpu-users&amp;amp;color=blueviolet&amp;amp;logo=matrix&#34; alt=&#34;User Matrix &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gfx-rs/wgpu/actions&#34;&gt;&lt;img src=&#34;https://github.com/gfx-rs/wgpu/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/gfx-rs/wgpu&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/gfx-rs/wgpu/branch/master/graph/badge.svg?token=84qJTesmeS&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;wgpu&lt;/code&gt; is a cross-platform, safe, pure-rust graphics api. It runs natively on Vulkan, Metal, D3D12, D3D11, and OpenGLES; and on top of WebGPU on wasm.&lt;/p&gt; &#xA;&lt;p&gt;The api is based on the &lt;a href=&#34;https://gpuweb.github.io/gpuweb/&#34;&gt;WebGPU standard&lt;/a&gt;. It serves as the core of the WebGPU integration in Firefox, Servo, and Deno.&lt;/p&gt; &#xA;&lt;h2&gt;Repo Overview&lt;/h2&gt; &#xA;&lt;p&gt;The repository hosts the following libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/wgpu&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/wgpu.svg?label=wgpu&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/wgpu/&#34;&gt;&lt;img src=&#34;https://docs.rs/wgpu/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; - User facing Rust API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/wgpu-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/wgpu-core.svg?label=wgpu-core&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/wgpu-core/&#34;&gt;&lt;img src=&#34;https://docs.rs/wgpu-core/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; - Internal WebGPU implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/wgpu-hal&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/wgpu-hal.svg?label=wgpu-hal&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/wgpu-hal/&#34;&gt;&lt;img src=&#34;https://docs.rs/wgpu-hal/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; - Internal unsafe GPU API abstraction layer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/wgpu-types&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/wgpu-types.svg?label=wgpu-types&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/wgpu-types/&#34;&gt;&lt;img src=&#34;https://docs.rs/wgpu-types/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; - Rust types shared between all crates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/deno_webgpu&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/deno_webgpu.svg?label=deno_webgpu&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; - WebGPU implementation for the Deno JavaScript/TypeScript runtime&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cts_runner&lt;/code&gt; - WebGPU Conformance Test Suite runner using &lt;code&gt;deno_webgpu&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player&lt;/code&gt; - standalone application for replaying the API traces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wgpu-info&lt;/code&gt; - program that prints out information about all the adapters on the system or invokes a command for every adapter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For an overview of all the components in the gfx-rs ecosystem, see &lt;a href=&#34;https://raw.githubusercontent.com/gfx-rs/wgpu/trunk/etc/big-picture.png&#34;&gt;the big picture&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MSRV policy&lt;/h3&gt; &#xA;&lt;p&gt;Minimum Supported Rust Version is &lt;strong&gt;1.65&lt;/strong&gt;. It is enforced on CI (in &#34;/.github/workflows/ci.yml&#34;) with &lt;code&gt;RUST_VERSION&lt;/code&gt; variable. This version can only be upgraded in breaking releases.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;wgpu-core&lt;/code&gt;, &lt;code&gt;wgpu-hal&lt;/code&gt;, and &lt;code&gt;wgpu-types&lt;/code&gt; crates should never require an MSRV ahead of Firefox&#39;s MSRV for nightly builds, as determined by the value of &lt;code&gt;MINIMUM_RUST_VERSION&lt;/code&gt; in &lt;a href=&#34;https://searchfox.org/mozilla-central/source/python/mozboot/mozboot/util.py&#34;&gt;&lt;code&gt;python/mozboot/mozboot/util.py&lt;/code&gt;&lt;/a&gt;. However, Firefox uses &lt;code&gt;cargo vendor&lt;/code&gt; to extract only those crates it actually uses, so the workspace&#39;s other crates can have more recent MSRVs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note for Rust 1.64&lt;/em&gt;: The workspace itself can even use a newer MSRV than Firefox, as long as the vendoring step&#39;s &lt;code&gt;Cargo.toml&lt;/code&gt; rewriting removes any features Firefox&#39;s MSRV couldn&#39;t handle. For example, &lt;code&gt;wgpu&lt;/code&gt; can use manifest key inheritance, added in Rust 1.64, even before Firefox reaches that MSRV, because &lt;code&gt;cargo vendor&lt;/code&gt; copies inherited values directly into the individual crates&#39; &lt;code&gt;Cargo.toml&lt;/code&gt; files, producing 1.63-compatible files.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;Rust examples can be found at &lt;code&gt;wgpu/examples&lt;/code&gt;. You can run the examples with &lt;code&gt;cargo run --bin name&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/gfx-rs/wgpu/trunk/examples&#34;&gt;list of examples&lt;/a&gt;. For detailed instructions, look at &lt;a href=&#34;https://github.com/gfx-rs/wgpu/wiki/Running-the-examples&#34;&gt;Running the examples&lt;/a&gt; on the wiki.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for a wgpu tutorial, look at the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sotrh.github.io/learn-wgpu/&#34;&gt;https://sotrh.github.io/learn-wgpu/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;C/C++&lt;/h3&gt; &#xA;&lt;p&gt;To use wgpu in C/C++, you need &lt;a href=&#34;https://github.com/gfx-rs/wgpu-native&#34;&gt;wgpu-native&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for a wgpu C++ tutorial, look at the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eliemichel.github.io/LearnWebGPU/&#34;&gt;https://eliemichel.github.io/LearnWebGPU/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use wgpu in other languages, there are many bindings to wgpu-native from languages such as Python, D, Julia, Kotlin, and more. See &lt;a href=&#34;https://github.com/gfx-rs/wgpu-native#bindings&#34;&gt;the list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;We have the Matrix space &lt;a href=&#34;https://matrix.to/#/#Wgpu:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Space&amp;amp;message=%23Wgpu&amp;amp;color=blue&amp;amp;logo=matrix&#34; alt=&#34;Matrix Space&#34;&gt;&lt;/a&gt; with a few different rooms that form the wgpu community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#wgpu:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=devs&amp;amp;message=%23wgpu&amp;amp;color=blueviolet&amp;amp;logo=matrix&#34; alt=&#34;Dev Matrix&#34;&gt;&lt;/a&gt; - discussion of the library&#39;s development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#wgpu-users:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=users&amp;amp;message=%23wgpu-users&amp;amp;color=blueviolet&amp;amp;logo=matrix&#34; alt=&#34;User Matrix&#34;&gt;&lt;/a&gt; - discussion of using the library and the surrounding ecosystem.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#wgpu-random:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=random&amp;amp;message=%23wgpu-random&amp;amp;color=blueviolet&amp;amp;logo=matrix&#34; alt=&#34;Random Matrix&#34;&gt;&lt;/a&gt; - discussion of everything else.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;https://github.com/gfx-rs/wgpu/wiki&#34;&gt;wiki&lt;/a&gt; that serves as a knowledge base.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;Linux &amp;amp; Android&lt;/th&gt; &#xA;   &lt;th&gt;macOS &amp;amp; iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vulkan&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt; (vulkan-portability)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DX12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; (W10+ only)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DX11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🛠&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GLES3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt; (macOS only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;span&gt;✅&lt;/span&gt; = First Class Support — &lt;span&gt;🆗&lt;/span&gt; = Best Effort Support — &lt;span&gt;🛠&lt;/span&gt; = Unsupported, but support in progress&lt;/p&gt; &#xA;&lt;h3&gt;Shader Support&lt;/h3&gt; &#xA;&lt;p&gt;wgpu supports shaders in &lt;a href=&#34;https://gpuweb.github.io/gpuweb/wgsl/&#34;&gt;WGSL&lt;/a&gt;, SPIR-V, and GLSL. Both &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler&#34;&gt;HLSL&lt;/a&gt; and &lt;a href=&#34;https://github.com/KhronosGroup/glslang&#34;&gt;GLSL&lt;/a&gt; have compilers to target SPIR-V. All of these shader languages can be used with any backend, we will handle all of the conversion. Additionally, support for these shader inputs is not going away.&lt;/p&gt; &#xA;&lt;p&gt;While WebGPU does not support any shading language other than WGSL, we will automatically convert your non-WGSL shaders if you&#39;re running on WebGPU.&lt;/p&gt; &#xA;&lt;p&gt;WGSL is always supported by default, but GLSL and SPIR-V need features enabled to compile in support.&lt;/p&gt; &#xA;&lt;p&gt;Note that the WGSL specification is still under development, so the &lt;a href=&#34;https://gpuweb.github.io/gpuweb/wgsl/&#34;&gt;draft specification&lt;/a&gt; does not exactly describe what &lt;code&gt;wgpu&lt;/code&gt; supports. See &lt;a href=&#34;https://raw.githubusercontent.com/gfx-rs/wgpu/trunk/#tracking-the-webgpu-and-wgsl-draft-specifications&#34;&gt;below&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;To enable SPIR-V shaders, enable the &lt;code&gt;spirv&lt;/code&gt; feature of wgpu. To enable GLSL shaders, enable the &lt;code&gt;glsl&lt;/code&gt; feature of wgpu.&lt;/p&gt; &#xA;&lt;h3&gt;Angle&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://angleproject.org&#34;&gt;Angle&lt;/a&gt; is a translation layer from GLES to other backends, developed by Google. We support running our GLES3 backend over it in order to reach platforms with GLES2 or DX11 support, which aren&#39;t accessible otherwise. In order to run with Angle, &#34;angle&#34; feature has to be enabled, and Angle libraries placed in a location visible to the application. These binaries can be downloaded from &lt;a href=&#34;https://github.com/DileSoft/gfbuild-angle&#34;&gt;gfbuild-angle&lt;/a&gt; artifacts, &lt;a href=&#34;https://github.com/google/angle/raw/main/doc/DevSetup.md&#34;&gt;manual compilation&lt;/a&gt; may be required on Macs with Apple silicon.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, you generally need to copy them into the working directory, in the same directory as the executable, or somewhere in your path. On Linux, you can point to them using &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; environment.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;All testing and example infrastructure shares the same set of environment variables that determine which Backend/GPU it will run on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WGPU_ADAPTER_NAME&lt;/code&gt; with a substring of the name of the adapter you want to use (ex. &lt;code&gt;1080&lt;/code&gt; will match &lt;code&gt;NVIDIA GeForce 1080ti&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WGPU_BACKEND&lt;/code&gt; with a comma separated list of the backends you want to use (&lt;code&gt;vulkan&lt;/code&gt;, &lt;code&gt;metal&lt;/code&gt;, &lt;code&gt;dx12&lt;/code&gt;, &lt;code&gt;dx11&lt;/code&gt;, or &lt;code&gt;gl&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WGPU_POWER_PREF&lt;/code&gt; with the power preference to choose when a specific adapter name isn&#39;t specified (&lt;code&gt;high&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WGPU_DX12_COMPILER&lt;/code&gt; with the DX12 shader compiler you wish to use (&lt;code&gt;dxc&lt;/code&gt; or &lt;code&gt;fxc&lt;/code&gt;, note that &lt;code&gt;dxc&lt;/code&gt; requires &lt;code&gt;dxil.dll&lt;/code&gt; and &lt;code&gt;dxcompiler.dll&lt;/code&gt; to be in the working directory otherwise it will fall back to &lt;code&gt;fxc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WGPU_GLES_MINOR_VERSION&lt;/code&gt; with the minor OpenGL ES 3 version number to request (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;automatic&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When running the CTS, use the variables &lt;code&gt;DENO_WEBGPU_ADAPTER_NAME&lt;/code&gt;, &lt;code&gt;DENO_WEBGPU_BACKEND&lt;/code&gt;, &lt;code&gt;DENO_WEBGPU_POWER_PREFERENCE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;We have multiple methods of testing, each of which tests different qualities about wgpu. We automatically run our tests on CI if possible. The current state of CI testing:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Backend/Platform&lt;/th&gt; &#xA;   &lt;th&gt;Tests&lt;/th&gt; &#xA;   &lt;th&gt;CTS&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DX12/Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;using WARP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DX11/Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚧&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;—&lt;/td&gt; &#xA;   &lt;td&gt;using WARP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metal/MacOS&lt;/td&gt; &#xA;   &lt;td&gt;—&lt;/td&gt; &#xA;   &lt;td&gt;—&lt;/td&gt; &#xA;   &lt;td&gt;metal requires GPU&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vulkan/Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;using lavapipe, &lt;a href=&#34;https://github.com/gfx-rs/wgpu/issues/1974&#34;&gt;cts hangs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GLES/Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;—&lt;/td&gt; &#xA;   &lt;td&gt;using llvmpipe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Core Test Infrastructure&lt;/h3&gt; &#xA;&lt;p&gt;We use a tool called &lt;a href=&#34;https://github.com/nextest-rs/nextest&#34;&gt;&lt;code&gt;cargo nextest&lt;/code&gt;&lt;/a&gt; to run our tests. To install it, run &lt;code&gt;cargo install cargo-nextest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run the test suite on the default device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo nextest run --no-fail-fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;wgpu-info&lt;/code&gt; can run the tests once for each adapter on your system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --bin wgpu-info -- cargo nextest run --no-fail-fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to run an example&#39;s image comparison tests, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo nextest run &amp;lt;example-test-name&amp;gt; --no-fail-fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or run a part of the integration test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo nextest run -p wgpu -- &amp;lt;name-of-test&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are a user and want a way to help contribute to wgpu, we always need more help writing test cases.&lt;/p&gt; &#xA;&lt;h3&gt;WebGPU Conformance Test Suite&lt;/h3&gt; &#xA;&lt;p&gt;WebGPU includes a Conformance Test Suite to validate that implementations are working correctly. We can run this CTS against wgpu.&lt;/p&gt; &#xA;&lt;p&gt;To run the CTS, first you need to check it out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/gpuweb/cts.git&#xA;cd cts&#xA;# works in bash and powershell&#xA;git checkout $(cat ../cts_runner/revision.txt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a given set of tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Must be inside the cts folder we just checked out, else this will fail&#xA;cargo run --manifest-path ../cts_runner/Cargo.toml -- ./tools/run_deno --verbose &#34;&amp;lt;test string&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find the full list of tests, go to the &lt;a href=&#34;https://gpuweb.github.io/cts/standalone/?runnow=0&amp;amp;worker=0&amp;amp;debug=0&amp;amp;q=webgpu:*&#34;&gt;online cts viewer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The list of currently enabled CTS tests can be found &lt;a href=&#34;https://raw.githubusercontent.com/gfx-rs/wgpu/trunk/cts_runner/test.lst&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tracking the WebGPU and WGSL draft specifications&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;wgpu&lt;/code&gt; crate is meant to be an idiomatic Rust translation of the &lt;a href=&#34;https://www.w3.org/TR/webgpu/&#34;&gt;WebGPU API&lt;/a&gt;. That specification, along with its shading language, &lt;a href=&#34;https://gpuweb.github.io/gpuweb/wgsl/&#34;&gt;WGSL&lt;/a&gt;, are both still in the &#34;Working Draft&#34; phase, and while the general outlines are stable, details change frequently. Until the specification is stabilized, the &lt;code&gt;wgpu&lt;/code&gt; crate and the version of WGSL it implements will likely differ from what is specified, as the implementation catches up.&lt;/p&gt; &#xA;&lt;p&gt;Exactly which WGSL features &lt;code&gt;wgpu&lt;/code&gt; supports depends on how you are using it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When running as native code, &lt;code&gt;wgpu&lt;/code&gt; uses the &lt;a href=&#34;https://github.com/gfx-rs/naga/&#34;&gt;Naga&lt;/a&gt; crate to translate WGSL code into the shading language of your platform&#39;s native GPU API. Naga has &lt;a href=&#34;https://github.com/gfx-rs/naga/milestone/4&#34;&gt;a milestone&lt;/a&gt; for catching up to the WGSL specification, but in general there is no up-to-date summary of the differences between Naga and the WGSL spec.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When running in a web browser (by compilation to WebAssembly) without the &lt;code&gt;&#34;webgl&#34;&lt;/code&gt; feature enabled, &lt;code&gt;wgpu&lt;/code&gt; relies on the browser&#39;s own WebGPU implementation. WGSL shaders are simply passed through to the browser, so that determines which WGSL features you can use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When running in a web browser with &lt;code&gt;wgpu&lt;/code&gt;&#39;s &lt;code&gt;&#34;webgl&#34;&lt;/code&gt; feature enabled, &lt;code&gt;wgpu&lt;/code&gt; uses Naga to translate WGSL programs into GLSL. This uses the same version of Naga as if you were running &lt;code&gt;wgpu&lt;/code&gt; as native code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coordinate Systems&lt;/h2&gt; &#xA;&lt;p&gt;wgpu uses the coordinate systems of D3D and Metal:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Render&lt;/th&gt; &#xA;   &lt;th&gt;Texture&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gfx-rs/wgpu/trunk/etc/render_coordinates.png&#34; alt=&#34;render_coordinates&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gfx-rs/wgpu/trunk/etc/texture_coordinates.png&#34; alt=&#34;texture_coordinates&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>clockworklabs/SpacetimeDB</title>
    <updated>2023-08-20T01:55:59Z</updated>
    <id>tag:github.com,2023-08-20:/clockworklabs/SpacetimeDB</id>
    <link href="https://github.com/clockworklabs/SpacetimeDB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiplayer at the speed of light&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://spacetimedb.com#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;320&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo.svg?sanitize=true&#34; alt=&#34;SpacetimeDB Logo&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://spacetimedb.com#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;320&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo.svg?sanitize=true&#34; alt=&#34;SpacetimeDB Logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://spacetimedb.com#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;250&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/dark/logo-text.svg?sanitize=true&#34; alt=&#34;SpacetimeDB&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://spacetimedb.com#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;250&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/light/logo-text.svg?sanitize=true&#34; alt=&#34;SpacetimeDB&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt; Multiplayer at the speed of light. &lt;/h3&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/clockworklabs/spacetimedb&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/clockworklabs/spacetimedb?color=%23ff00a0&amp;amp;include_prereleases&amp;amp;label=version&amp;amp;sort=semver&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/clockworklabs/spacetimedb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/built_with-Rust-dca282.svg?style=flat-square&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/clockworklabs/spacetimedb/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/clockworklabs/spacetimedb/ci.yml?style=flat-square&amp;amp;branch=main&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://status.spacetimedb.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/uptimerobot/ratio/7/m784409192-e472ca350bb615372ededed7?label=cloud%20uptime&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://hub.docker.com/r/clockworklabs/spacetimedb&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/clockworklabs/spacetimedb?style=flat-square&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/clockworklabs/spacetimedb/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSL_1.1-00bfff.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/spacetimedb&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1037340874172014652?label=discord&amp;amp;style=flat-square&amp;amp;color=5a66f6&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://twitter.com/spacetime_db&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-Follow_us-1d9bf0.svg?style=flat-square&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://clockworklabs.io/join&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/careers-Join_us-86f7b7.svg?style=flat-square&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://www.linkedin.com/company/clockworklabs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/linkedin-Connect_with_us-0a66c2.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/spacetimedb&#34;&gt;&lt;img height=&#34;25&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/discord.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://twitter.com/spacetime_db&#34;&gt;&lt;img height=&#34;25&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitter.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/clockworklabs/spacetimedb&#34;&gt;&lt;img height=&#34;25&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/github.svg?sanitize=true&#34; alt=&#34;Github&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://twitch.tv/SpacetimeDB&#34;&gt;&lt;img height=&#34;25&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/twitch.svg?sanitize=true&#34; alt=&#34;Twitch&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://youtube.com/@SpacetimeDB&#34;&gt;&lt;img height=&#34;25&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/youtube.svg?sanitize=true&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://www.linkedin.com/company/clockwork-labs/&#34;&gt;&lt;img height=&#34;25&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/linkedin.svg?sanitize=true&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/spacetimedb&#34;&gt;&lt;img height=&#34;25&#34; src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/social/stackoverflow.svg?sanitize=true&#34; alt=&#34;StackOverflow&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;What is &lt;a href=&#34;https://spacetimedb.com&#34;&gt;SpacetimeDB&lt;/a&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;You can think of SpacetimeDB as both a database and server combined into one.&lt;/p&gt; &#xA;&lt;p&gt;It is a relational database system that lets you upload your application logic directly into the database by way of fancy stored procedures called &#34;modules.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Instead of deploying a web or game server that sits in between your clients and your database, your clients connect directly to the database and execute your application logic inside the database itself. You can write all of your permission and authorization logic right inside your module just as you would in a normal server.&lt;/p&gt; &#xA;&lt;p&gt;This means that you can write your entire application in a single language, Rust, and deploy it as a single binary. No more microservices, no more containers, no more Kubernetes, no more Docker, no more VMs, no more DevOps, no more infrastructure, no more ops, no more servers.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/clockworklabs/SpacetimeDB/master/images/basic-architecture-diagram.png&#34; alt=&#34;SpacetimeDB Architecture&#34; style=&#34;width:100%&#34;&gt; &#xA; &lt;figcaption align=&#34;center&#34;&gt; &#xA;  &lt;p align=&#34;center&#34;&gt;&lt;b&gt;SpacetimeDB application architecture&lt;/b&gt;&lt;br&gt;&lt;sup&gt;&lt;sub&gt;(elements in white are provided by SpacetimeDB)&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; &#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;It&#39;s actually similar to the idea of smart contracts, except that SpacetimeDB is a database, has nothing to do with blockchain, and is orders of magnitude faster than any smart contract system.&lt;/p&gt; &#xA;&lt;p&gt;So fast, in fact, that the entire backend of our MMORPG &lt;a href=&#34;https://bitcraftonline.com&#34;&gt;BitCraft Online&lt;/a&gt; is just a SpacetimeDB module. We don&#39;t have any other servers or services running, which means that everything in the game, all of the chat messages, items, resources, terrain, and even the locations of the players are stored and processed by the database before being synchronized out to all of the clients in real-time.&lt;/p&gt; &#xA;&lt;p&gt;SpacetimeDB is optimized for maximum speed and minimum latency rather than batch processing or OLAP workloads. It is designed to be used for real-time applications like games, chat, and collaboration tools.&lt;/p&gt; &#xA;&lt;p&gt;This speed and latency is achieved by holding all of application state in memory, while persisting the data in a write-ahead-log (WAL) which is used to recover application state.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;SpacetimeDB is an embedded database library that you can use to extend your own applications. You can also run SpacetimeDB as a standalone database server via the &lt;code&gt;spacetime&lt;/code&gt; CLI tool.&lt;/p&gt; &#xA;&lt;p&gt;You can install and run the &lt;code&gt;spacetime&lt;/code&gt; CLI tool via Cargo, Homebrew, Docker, or by downloading the binary directly from our website.&lt;/p&gt; &#xA;&lt;h4&gt;Install on macOS&lt;/h4&gt; &#xA;&lt;p&gt;You can install SpacetimeDB on macOS using Homebrew. This will install the &lt;code&gt;spacetime&lt;/code&gt; CLI tool and the SpacetimeDB standalone server as a single executable. You can also install on macOS using the Linux instructions below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install clockworklabs/tap/spacetime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install on Linux&lt;/h4&gt; &#xA;&lt;p&gt;Installing SpacetimeDB on Linux (or other Unix operating systems) is as easy as downloading the binary and running it. You can also install on Linux using the Docker instructions below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://install.spacetimedb.com | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install on Windows&lt;/h4&gt; &#xA;&lt;p&gt;Run the following command in your terminal and follow the on-screen instructions to install the &lt;code&gt;spacetime&lt;/code&gt; CLI tool and the SpacetimeDB standalone server as a single executable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;iwr https://windows.spacetimedb.com -useb | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install with Cargo&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;d like to build the &lt;code&gt;spacetime&lt;/code&gt; CLI tool from source, you can install it using Cargo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install spacetimedb-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing from Source&lt;/h3&gt; &#xA;&lt;p&gt;For MacOS and Linux this is straightforward. Just run the following commands in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install rustup, you can skip this step if you have cargo and the wasm32-unknown-unknown target already installed.&#xA;curl https://sh.rustup.rs -sSf | sh&#xA;# Clone SpacetimeDB&#xA;git clone https://github.com/clockworklabs/SpacetimeDB&#xA;# Build and install the CLI&#xA;cd SpacetimeDB&#xA;cargo install --path ./crates/cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows may require some extra dependencies be installed, including openssl and a specific version of perl. A guide for this will be available soon.&lt;/p&gt; &#xA;&lt;h4&gt;Running with Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can execute the &lt;code&gt;spacetime&lt;/code&gt; CLI tool using Docker to run the SpacetimeDB standalone server without needing to install any command-line tools or other dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --pull always --name spacetimedb -p 3000:80 clockworklabs/spacetimedb:latest start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For more information about SpacetimeDB, getting started guides, game development guides, and reference material please see our &lt;a href=&#34;https://spacetimedb.com/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve prepared several getting started guides in each of our supported languages to help you get up and running with SpacetimeDB as quickly as possible. You can find them on our &lt;a href=&#34;https://spacetimedb.com/docs&#34;&gt;docs page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In summary there are only 4 steps to getting started with SpacetimeDB.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;code&gt;spacetime&lt;/code&gt; CLI tool.&lt;/li&gt; &#xA; &lt;li&gt;Start a SpacetimeDB standalone node with &lt;code&gt;spacetime start&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Write and upload a module in one of our supported module languages.&lt;/li&gt; &#xA; &lt;li&gt;Connect to the database with one of our client libraries.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can see a summary of the supported languages below with a link to the getting started guide for each.&lt;/p&gt; &#xA;&lt;h2&gt;Language Support&lt;/h2&gt; &#xA;&lt;p&gt;You can write SpacetimeDB modules in a bunch of popular languages, with many more to come in the future!&lt;/p&gt; &#xA;&lt;h4&gt;Serverside Libraries&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spacetimedb.com/docs/server-languages/rust/rust-module-quickstart-guide&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spacetimedb.com/docs/server-languages/csharp/csharp-module-reference&#34;&gt;C# (experimental)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Typescript (coming soon)&lt;/li&gt; &#xA; &lt;li&gt;Python (coming soon)&lt;/li&gt; &#xA; &lt;li&gt;C++ (planned)&lt;/li&gt; &#xA; &lt;li&gt;Lua (planned)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Client Libraries&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spacetimedb.com/docs/client-languages/rust/rust-sdk-quickstart-guide&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spacetimedb.com/docs/client-languages/csharp/csharp-sdk-quickstart-guide&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spacetimedb.com/docs/client-languages/typescript/typescript-sdk-quickstart-guide&#34;&gt;Typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spacetimedb.com/docs/client-languages/python/python-sdk-quickstart-guide&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C++ (planned)&lt;/li&gt; &#xA; &lt;li&gt;Lua (planned)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SpacetimeDB is licensed under the BSL 1.1 license. This is not an open source or free software license, however, it converts to the AGPL v3.0 license with a linking exception after a few years.&lt;/p&gt; &#xA;&lt;p&gt;Note that the AGPL v3.0 does not typically include a linking exception. We have added a custom linking exception to the AGPL license for SpacetimeDB. Our motivation for choosing a free software license is to ensure that contributions made to SpacetimeDB are propogated back to the community. We are expressly not interested in forcing users of SpacetimeDB to open source their own code if they link with SpacetimeDB, so we needed to include a linking exception.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>a16z/Lasso</title>
    <updated>2023-08-20T01:55:59Z</updated>
    <id>tag:github.com,2023-08-20:/a16z/Lasso</id>
    <link href="https://github.com/a16z/Lasso" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The lookup singularity. Based on Spartan; built on Arkworks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lasso&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/a16z/Lasso/master/imgs/lasso_logo.png&#34; alt=&#34;imgs/lasso_logo.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lookup Arguments via Sum-check and Sparse polynomial commitments, including for Oversized tables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This repository was forked from &lt;a href=&#34;https://github.com/arkworks-rs/spartan&#34;&gt;https://github.com/arkworks-rs/spartan&lt;/a&gt;. Original Spartan &lt;a href=&#34;https://github.com/microsoft/Spartan&#34;&gt;code&lt;/a&gt; by Srinath Setty.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://a16zcrypto.com/posts/article/introducing-lasso-and-jolt/&#34;&gt;Introducing Lasso and Jolt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://a16zcrypto.com/posts/article/building-on-lasso-and-jolt/&#34;&gt;Understanding Lasso and Jolt, from theory to code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/a16z/Lasso/master/EngineeringOverview.md&#34;&gt;EngineeringOverview.md&lt;/a&gt; for a high level technical outline&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/a16z/Lasso/master/HowToTable.md&#34;&gt;HowToTable.md&lt;/a&gt; for instructions on adding a new table type&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://people.cs.georgetown.edu/jthaler/Lasso-paper.pdf&#34;&gt;Lasso paper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://people.cs.georgetown.edu/jthaler/Jolt-paper.pdf&#34;&gt;Jolt paper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;  let mut dense: DensifiedRepresentation&amp;lt;F, C&amp;gt; = DensifiedRepresentation::from(&amp;amp;nz, log_M);&#xA;  let commitment = dense.commit::&amp;lt;G&amp;gt;(&amp;amp;gens);&#xA;&#xA;  let proof =&#xA;    SparsePolynomialEvaluationProof::&amp;lt;G, C, M, SubtableStrategy&amp;gt;::prove(&#xA;        &amp;amp;mut dense,&#xA;        &amp;amp;r,&#xA;        &amp;amp;gens,&#xA;        &amp;amp;mut prover_transcript,&#xA;        &amp;amp;mut random_tape,&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cmds&lt;/h2&gt; &#xA;&lt;p&gt;Note: requires nightly Rust&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo build --release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo run --release -- --name &amp;lt;bench_name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo run --release -- --name &amp;lt;bench_name&amp;gt; --chart&lt;/code&gt;: Display performance gant chart&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo run --release --features ark-msm -- --name &amp;lt;bench_name&amp;gt;&lt;/code&gt;: Run without MSM small field optimizations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo cargo flamegraph&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note on flamegraphing: Turn off the parallel feature in Cargo.toml (&lt;code&gt;multicore&lt;/code&gt;) and / or &lt;code&gt;export RAYON_NUM_THREADS=1&lt;/code&gt; to make flamegraph more interpretable.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This code is being provided as is. No guarantee, representation or warranty is being made, express or implied, as to the safety or correctness of the code. It has not been audited and as such there can be no assurance it will work as intended, and users may experience delays, failures, errors, omissions or loss of transmitted information. Nothing in this repo should be construed as investment advice or legal advice for any particular facts or circumstances and is not meant to replace competent counsel. It is strongly advised for you to contact a reputable attorney in your jurisdiction for any questions or concerns with respect thereto. a16z is not liable for any use of the foregoing, and users should proceed with caution and use at their own risk. See a16z.com/disclosures for more info.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>