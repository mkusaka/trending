<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-15T01:43:36Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antinomyhq/forge</title>
    <updated>2025-06-15T01:43:36Z</updated>
    <id>tag:github.com,2025-06-15:/antinomyhq/forge</id>
    <link href="https://github.com/antinomyhq/forge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI enabled pair programmer for Claude, GPT, O Series, Grok, Deepseek, Gemini and 300+ models&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;⚒️ Forge: AI-Enhanced Terminal Development Environment&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A comprehensive coding agent that integrates AI capabilities with your development environment&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;code&gt;npm install -g @antinomyhq/forge&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/antinomyhq/forge/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/antinomyhq/forge/ci.yml?style=for-the-badge&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/antinomyhq/forge/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/antinomyhq/forge?style=for-the-badge&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/kRZBPpkgwq&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cla-assistant.io/antinomyhq/forge&#34;&gt;&lt;img src=&#34;https://cla-assistant.io/readme/badge/antinomyhq/forge?style=for-the-badge&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://assets.antinomy.ai/images/forge_demo_2x.gif&#34; alt=&#34;Code-Forge Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Table&amp;nbsp;of&amp;nbsp;Contents&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#interactive-mode-examples&#34;&gt;Interactive Mode Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#why-forge&#34;&gt;Why Forge?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#command-line-options&#34;&gt;Command-Line Options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#advanced-configuration&#34;&gt;Advanced Configuration&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#provider-configuration&#34;&gt;Provider Configuration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#forgeyaml-configuration-options&#34;&gt;forge.yaml Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antinomyhq/forge/main/#support-us&#34;&gt;Support Us&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g @antinomyhq/forge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sign up at &lt;a href=&#34;https://app.antinomy.ai/app/&#34;&gt;Antinomy.ai&lt;/a&gt; to enable the Forge provider.&lt;/p&gt; &#xA;&lt;p&gt;Then set up your Forge provider key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;FORGE_KEY=ForgeKey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run Forge in interactive mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;forge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Forge is now ready to assist you with your development tasks.&lt;/p&gt; &#xA;&lt;h2&gt;Usage Examples&lt;/h2&gt; &#xA;&lt;p&gt;Forge can be used in different ways depending on your needs. Here are some common usage patterns:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Code Understanding&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; Can you explain how the authentication system works in this codebase?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge will analyze your project&#39;s structure, identify authentication-related files, and provide a detailed explanation of the authentication flow, including the relationships between different components.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Implementing New Features&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; I need to add a dark mode toggle to our React application. How should I approach this?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge will suggest the best approach based on your current codebase, explain the steps needed, and even scaffold the necessary components and styles for you.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Debugging Assistance&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; I&#39;m getting this error: &#34;TypeError: Cannot read property &#39;map&#39; of undefined&#34;. What might be causing it?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge will analyze the error, suggest potential causes based on your code, and propose different solutions to fix the issue.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; Please review the code in src/components/UserProfile.js and suggest improvements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge will analyze the code, identify potential issues, and suggest improvements for readability, performance, security, and maintainability.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Learning New Technologies&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; I want to integrate GraphQL into this Express application. Can you explain how to get started?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge will provide a tailored tutorial on integrating GraphQL with Express, using your specific project structure as context.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Database Schema Design&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; I need to design a database schema for a blog with users, posts, comments, and categories&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge will suggest an appropriate schema design, including tables/collections, relationships, indexes, and constraints based on your project&#39;s existing database technology.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Refactoring Legacy Code&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; Help me refactor this class-based component to use React Hooks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge can help modernize your codebase by walking you through refactoring steps and implementing them with your approval.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Git Operations&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;gt; I need to merge branch &#39;feature/user-profile&#39; into main but there are conflicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Forge can guide you through resolving git conflicts, explaining the differences and suggesting the best way to reconcile them.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Why Forge?&lt;/h2&gt; &#xA;&lt;p&gt;Forge is designed for developers who want to enhance their workflow with AI assistance while maintaining full control over their development environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zero configuration&lt;/strong&gt; - Just add your API key and you&#39;re ready to go&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Seamless integration&lt;/strong&gt; - Works right in your terminal, where you already work&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-provider support&lt;/strong&gt; - Use OpenAI, Anthropic, or other LLM providers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure by design&lt;/strong&gt; - Your code stays on your machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open-source&lt;/strong&gt; - Transparent, extensible, and community-driven&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Forge helps you code faster, solve complex problems, and learn new technologies without leaving your terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Command-Line Options&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a quick reference of Forge&#39;s command-line options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-p, --prompt &amp;lt;PROMPT&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Direct prompt to process without entering interactive mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-c, --command &amp;lt;COMMAND&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to a file containing initial commands to execute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-w, --workflow &amp;lt;WORKFLOW&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to a file containing the workflow to execute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-e, --event &amp;lt;EVENT&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dispatch an event to the workflow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--conversation &amp;lt;CONVERSATION&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to a file containing the conversation to execute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-r, --restricted&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable restricted shell mode for enhanced security&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable verbose output mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print help information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Advanced Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Provider Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Forge supports multiple AI providers. Below are setup instructions for each supported provider:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Antinomy.ai (Recommended)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;FORGE_KEY=ForgeKey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To use Antinomy&#39;s provider with Forge:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Visit &lt;a href=&#34;https://app.antinomy.ai/&#34;&gt;https://app.antinomy.ai/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Login with your existing credentials or create a new account&lt;/li&gt; &#xA;  &lt;li&gt;Once logged in, your account will automatically enable the Forge Provider&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;OpenRouter&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;OPENROUTER_API_KEY=&amp;lt;your_openrouter_api_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;No changes in &lt;code&gt;forge.yaml&lt;/code&gt; required&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;OPENAI_API_KEY=&amp;lt;your_openai_api_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;model: o3-mini-high&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Anthropic&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;ANTHROPIC_API_KEY=&amp;lt;your_anthropic_api_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;model: claude-3.7-sonnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Google Vertex AI&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;PROJECT_ID=&amp;lt;your_project_id&amp;gt;&#xA;LOCATION=&amp;lt;your_location&amp;gt;&#xA;OPENAI_API_KEY=&amp;lt;vertex_ai_key&amp;gt;&#xA;OPENAI_URL=https://${LOCATION}-aiplatform.googleapis.com/v1beta1/projects/${PROJECT_ID}/locations/${LOCATION}/endpoints/openapi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;model: publishers/anthropic/models/claude-3-7-sonnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;OpenAI-Compatible Providers&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;OPENAI_API_KEY=&amp;lt;your_provider_api_key&amp;gt;&#xA;OPENAI_URL=&amp;lt;your_provider_url&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;model: &amp;lt;provider-specific-model&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Groq&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;OPENAI_API_KEY=&amp;lt;your_groq_api_key&amp;gt;&#xA;OPENAI_URL=https://api.groq.com/openai/v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;model: deepseek-r1-distill-llama-70b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Amazon Bedrock&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;To use Amazon Bedrock models with Forge, you&#39;ll need to first set up the &lt;a href=&#34;https://github.com/aws-samples/bedrock-access-gateway&#34;&gt;Bedrock Access Gateway&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up Bedrock Access Gateway&lt;/strong&gt;:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Follow the deployment steps in the &lt;a href=&#34;https://github.com/aws-samples/bedrock-access-gateway&#34;&gt;Bedrock Access Gateway repo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Create your own API key in Secrets Manager&lt;/li&gt; &#xA;    &lt;li&gt;Deploy the CloudFormation stack&lt;/li&gt; &#xA;    &lt;li&gt;Note your API Base URL from the CloudFormation outputs&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create these files in your project directory&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;OPENAI_API_KEY=&amp;lt;your_bedrock_gateway_api_key&amp;gt;&#xA;OPENAI_URL=&amp;lt;your_bedrock_gateway_base_url&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;model: anthropic.claude-3-opus&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt;&#xA; &lt;/ol&gt;&#xA;&lt;/details&gt;   &#xA;&lt;h3&gt;forge.yaml Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;forge.yaml&lt;/code&gt; file supports several advanced configuration options that let you customize Forge&#39;s behavior.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Custom Rules&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Add your own guidelines that all agents should follow when generating responses.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;custom_rules: |&#xA;  1. Always add comprehensive error handling to any code you write.&#xA;  2. Include unit tests for all new functions.&#xA;  3. Follow our team&#39;s naming convention: camelCase for variables, PascalCase for classes.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Define custom commands as shortcuts for repetitive prompts:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;commands:&#xA;  - name: &#34;refactor&#34;&#xA;    description: &#34;Refactor selected code&#34;&#xA;    prompt: &#34;Please refactor this code to improve readability and performance&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Specify the default AI model to use for all agents in the workflow.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;model: &#34;claude-3.7-sonnet&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Max Walker Depth&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Control how deeply Forge traverses your project directory structure when gathering context.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;max_walker_depth: 3 # Limit directory traversal to 3 levels deep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Temperature&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Adjust the creativity and randomness in AI responses. Lower values (0.0-0.3) produce more focused, deterministic outputs, while higher values (0.7-2.0) generate more diverse and creative results.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# forge.yaml&#xA;temperature: 0.7 # Balanced creativity and focus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Model Context Protocol (MCP)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The MCP feature allows AI agents to communicate with external tools and services. This implementation follows Anthropic&#39;s &lt;a href=&#34;https://docs.anthropic.com/en/docs/claude-code/tutorials#set-up-model-context-protocol-mcp&#34;&gt;Model Context Protocol&lt;/a&gt; design.&lt;/p&gt; &#xA; &lt;h3&gt;MCP Configuration&lt;/h3&gt; &#xA; &lt;p&gt;Configure MCP servers using the CLI:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List all MCP servers&#xA;forge mcp list&#xA;&#xA;# Add a new server&#xA;forge mcp add&#xA;&#xA;# Add a server using JSON format&#xA;forge mcp add-json&#xA;&#xA;# Get server details&#xA;forge mcp get&#xA;&#xA;# Remove a server&#xA;forge mcp remove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or manually create a &lt;code&gt;.mcp.json&lt;/code&gt; file with the following structure:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcp_servers&#34;: {&#xA;    &#34;server_name&#34;: {&#xA;      &#34;command&#34;: &#34;command_to_execute&#34;,&#xA;      &#34;args&#34;: [&#34;arg1&#34;, &#34;arg2&#34;],&#xA;      &#34;env&#34;: {&#34;ENV_VAR&#34;: &#34;value&#34;}&#xA;    },&#xA;    &#34;another_server&#34;: {&#xA;      &#34;url&#34;: &#34;http://localhost:3000/events&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;MCP configurations are read from two locations (in order of precedence):&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Local configuration (project-specific)&lt;/li&gt; &#xA;  &lt;li&gt;User configuration (user-specific)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h3&gt;Example Use Cases&lt;/h3&gt; &#xA; &lt;p&gt;MCP can be used for various integrations:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Web browser automation&lt;/li&gt; &#xA;  &lt;li&gt;External API interactions&lt;/li&gt; &#xA;  &lt;li&gt;Tool integration&lt;/li&gt; &#xA;  &lt;li&gt;Custom service connections&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Usage in Multi-Agent Workflows&lt;/h3&gt; &#xA; &lt;p&gt;MCP tools can be used as part of multi-agent workflows, allowing specialized agents to interact with external systems as part of a collaborative problem-solving approach.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For comprehensive documentation on all features and capabilities, please visit the &lt;a href=&#34;https://github.com/antinomyhq/forge/tree/main/docs&#34;&gt;documentation site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our vibrant Discord community to connect with other Forge users and contributors, get help with your projects, share ideas, and provide feedback!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/kRZBPpkgwq&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1044859667798568962?style=for-the-badge&amp;amp;cacheSeconds=120&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Support Us&lt;/h2&gt; &#xA;&lt;p&gt;Your support drives Forge&#39;s continued evolution! By starring our GitHub repository, you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Help others discover this powerful tool 🔍&lt;/li&gt; &#xA; &lt;li&gt;Motivate our development team 💪&lt;/li&gt; &#xA; &lt;li&gt;Enable us to prioritize new features 🛠️&lt;/li&gt; &#xA; &lt;li&gt;Strengthen our open-source community 🌱&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>facet-rs/facet</title>
    <updated>2025-06-15T01:43:36Z</updated>
    <id>tag:github.com,2025-06-15:/facet-rs/facet</id>
    <link href="https://github.com/facet-rs/facet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust reflection, serialization, deserialization, pretty printing, etc. — the last proc macro you should need&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source type=&#34;image/webp&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/logo-v2/facet-b-dark.webp&#34;&gt; &#xA;  &lt;source type=&#34;image/png&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/logo-v2/facet-b-dark.png&#34;&gt; &#xA;  &lt;source type=&#34;image/webp&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/logo-v2/facet-b-light.webp&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/facet-rs/facet/raw/main/static/logo-v2/facet-b-light.png&#34; height=&#34;35&#34; alt=&#34;Facet logo - a reflection library for Rust&#34;&gt; &#xA; &lt;/picture&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/facet-rs/facet?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/facet-rs/facet/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fasterthanlime/free-of-syn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/free%20of-syn-hotpink&#34; alt=&#34;free of syn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/facet&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/facet.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/facet&#34;&gt;&lt;img src=&#34;https://docs.rs/facet/badge.svg?sanitize=true&#34; alt=&#34;documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/facet-rs/facet/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/facet.svg?sanitize=true&#34; alt=&#34;MIT/Apache-2.0 licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/JhD7CwCJ8F&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1379550208551026748?logo=discord&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Logo by &lt;a href=&#34;https://misiasart.com/&#34;&gt;Misiasart&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all individual and corporate sponsors, without whom this work could not exist:&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://ko-fi.com/fasterthanlime&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/kofi-dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/kofi-light.svg?sanitize=true&#34; height=&#34;40&#34; alt=&#34;Ko-fi&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/fasterthanlime&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/github-dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/github-light.svg?sanitize=true&#34; height=&#34;40&#34; alt=&#34;GitHub Sponsors&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;a href=&#34;https://patreon.com/fasterthanlime&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/patreon-dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/patreon-light.svg?sanitize=true&#34; height=&#34;40&#34; alt=&#34;Patreon&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;a href=&#34;https://zed.dev&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/zed-dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/zed-light.svg?sanitize=true&#34; height=&#34;40&#34; alt=&#34;Zed&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;a href=&#34;https://depot.dev?utm_source=facet&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/depot-dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://github.com/facet-rs/facet/raw/main/static/sponsors-v3/depot-light.svg?sanitize=true&#34; height=&#34;40&#34; alt=&#34;Depot&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;facet provides reflection for Rust: it gives types a &lt;code&gt;SHAPE&lt;/code&gt; associated const with details on the layout, fields, doc comments, attributes, etc.&lt;/p&gt; &#xA;&lt;p&gt;It can be used for many things, from (de)serialization to pretty-printing, rich debuggers, CLI parsing, reflection in templating engines, code generation, etc.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://facet.rs&#34;&gt;https://facet.rs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues and limitations&lt;/h2&gt; &#xA;&lt;p&gt;We have the occasional soundness issue, see the &lt;a href=&#34;https://github.com/facet-rs/facet/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22%F0%9F%8E%BA%20soundness%22&#34;&gt;soundness tag&lt;/a&gt;. Those are prioritized and fixed as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;Format crates like &lt;code&gt;facet-json&lt;/code&gt; are still very much incomplete, and will probably always be slower than the &lt;code&gt;serde-*&lt;/code&gt; equivalent. Reflection has advantages in terms of flexibility, ergonomics and compile time but has a runtime cost compared to &#34;monomorphize all the things&#34;.&lt;/p&gt; &#xA;&lt;p&gt;(Note: with codegen, one could get the best of both worlds. To be researched more)&lt;/p&gt; &#xA;&lt;p&gt;Some format crates (like &lt;code&gt;facet-toml&lt;/code&gt;) first deserialize to a DOM, and &lt;em&gt;then&lt;/em&gt; to partial structs — this is not as efficient as it could be, but it&#39;s a good first step.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;type_eq&lt;/code&gt; is not const, thus preventing many useful things in &lt;code&gt;const fn&lt;/code&gt;, see &lt;a href=&#34;https://github.com/facet-rs/facet/issues/98&#34;&gt;https://github.com/facet-rs/facet/issues/98&lt;/a&gt;. Language changes are needed to address that.&lt;/p&gt; &#xA;&lt;p&gt;The design of arbitrary attributes is still in flux, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/issues/108#issue-2986732759&#34;&gt;https://github.com/facet-rs/facet/issues/108#issue-2986732759&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/issues/151#issuecomment-2820476301&#34;&gt;https://github.com/facet-rs/facet/issues/151#issuecomment-2820476301&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There isn&#39;t a comparison between facet-reflect and bevy-reflect available right now— &lt;a href=&#34;https://github.com/facet-rs/facet/issues/298&#34;&gt;this is by design&lt;/a&gt;. We&#39;re letting facet develop on its own for a while; we&#39;ll make a detailed comparison once things have settled.&lt;/p&gt; &#xA;&lt;p&gt;There are more issues and limitations of course, but this should get you started.&lt;/p&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;The core crates, &lt;code&gt;facet-trait&lt;/code&gt;, &lt;code&gt;facet-types&lt;/code&gt; etc. are no_std-friendly.&lt;/p&gt; &#xA;&lt;p&gt;The main &lt;code&gt;facet&lt;/code&gt; crate re-exports symbols from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-core&#34;&gt;facet-core&lt;/a&gt;, which defines the main components: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;Facet&lt;/code&gt; trait and implementations for foreign types (mostly &lt;code&gt;libstd&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;Shape&lt;/code&gt; struct along with various vtables and the whole &lt;code&gt;Def&lt;/code&gt; tree&lt;/li&gt; &#xA;   &lt;li&gt;Type-erased pointer helpers like &lt;code&gt;PtrUninit&lt;/code&gt;, &lt;code&gt;PtrConst&lt;/code&gt;, and &lt;code&gt;Opaque&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Autoderef specialization trick needed for &lt;code&gt;facet-macros&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-macros&#34;&gt;facet-macros&lt;/a&gt;, which implements the &lt;code&gt;Facet&lt;/code&gt; derive attribute as a fast/light proc macro powered by &lt;a href=&#34;https://docs.rs/unsynn&#34;&gt;unsynn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For struct manipulation and reflection, the following is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-reflect&#34;&gt;facet-reflect&lt;/a&gt;, allows building values of arbitrary shapes in safe code, respecting invariants. It also allows peeking at existing values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-pretty&#34;&gt;facet-pretty&lt;/a&gt; is able to pretty-print Facet types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;facet supports deserialization from multiple data formats through dedicated crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-json&#34;&gt;facet-json&lt;/a&gt;: JSON deserialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-yaml&#34;&gt;facet-yaml&lt;/a&gt;: YAML deserialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-toml&#34;&gt;facet-toml&lt;/a&gt;: TOML deserialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-msgpack&#34;&gt;facet-msgpack&lt;/a&gt;: MessagePack deserialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-urlencoded&#34;&gt;facet-urlencoded&lt;/a&gt;: URL-encoded form data deserialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-args&#34;&gt;facet-args&lt;/a&gt;: CLI arguments (a-la clap)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internal crates include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-codegen&#34;&gt;facet-codegen&lt;/a&gt; is internal and generates some of the code of &lt;code&gt;facet-core&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facet-rs/facet/tree/main/facet-testhelpers&#34;&gt;facet-testhelpers&lt;/a&gt; a simpler log logger and color-backtrace configured with the lightweight btparse backend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://github.com/facet-rs/facet/raw/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://github.com/facet-rs/facet/raw/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt;</summary>
  </entry>
</feed>