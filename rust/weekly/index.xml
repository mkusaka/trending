<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-10T01:47:10Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>benfred/py-spy</title>
    <updated>2024-11-10T01:47:10Z</updated>
    <id>tag:github.com,2024-11-10:/benfred/py-spy</id>
    <link href="https://github.com/benfred/py-spy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sampling profiler for Python programs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;py-spy: Sampling profiler for Python programs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/benfred/py-spy/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/benfred/py-spy/workflows/Build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/benfred/py-spy&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/benfred/py-spy.svg?sanitize=true&#34; alt=&#34;FreeBSD Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;py-spy is a sampling profiler for Python programs. It lets you visualize what your Python program is spending time on without restarting the program or modifying the code in any way. py-spy is extremely low overhead: it is written in Rust for speed and doesn&#39;t run in the same process as the profiled Python program. This means py-spy is safe to use against production Python code.&lt;/p&gt; &#xA;&lt;p&gt;py-spy works on Linux, OSX, Windows and FreeBSD, and supports profiling all recent versions of the CPython interpreter (versions 2.3-2.7 and 3.3-3.13).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Prebuilt binary wheels can be installed from PyPI with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install py-spy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also download prebuilt binaries from the &lt;a href=&#34;https://github.com/benfred/py-spy/releases&#34;&gt;GitHub Releases Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a Rust user, py-spy can also be installed with: &lt;code&gt;cargo install py-spy&lt;/code&gt;. Note this builds py-spy from source and requires &lt;code&gt;libunwind&lt;/code&gt; on Linux and Window, e.g., &lt;code&gt;apt install libunwind-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On macOS, &lt;a href=&#34;https://formulae.brew.sh/formula/py-spy#default&#34;&gt;py-spy is in Homebrew&lt;/a&gt; and can be installed with &lt;code&gt;brew install py-spy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Arch Linux, &lt;a href=&#34;https://aur.archlinux.org/packages/py-spy/&#34;&gt;py-spy is in AUR&lt;/a&gt; and can be installed with &lt;code&gt;yay -S py-spy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Alpine Linux, &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=py-spy&amp;amp;branch=edge&amp;amp;repo=testing&#34;&gt;py-spy is in testing repository&lt;/a&gt; and can be installed with &lt;code&gt;apk add py-spy --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;py-spy works from the command line and takes either the PID of the program you want to sample from or the command line of the python program you want to run. py-spy has three subcommands &lt;code&gt;record&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;record&lt;/h3&gt; &#xA;&lt;p&gt;py-spy supports recording profiles to a file using the &lt;code&gt;record&lt;/code&gt; command. For example, you can generate a &lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html&#34;&gt;flame graph&lt;/a&gt; of your python process by going:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;py-spy record -o profile.svg --pid 12345&#xA;# OR&#xA;py-spy record -o profile.svg -- python myprogram.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will generate an interactive SVG file looking like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benfred/py-spy/master/images/flamegraph.svg?sanitize=true&#34; alt=&#34;flame graph&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change the file format to generate &lt;a href=&#34;https://github.com/jlfwong/speedscope&#34;&gt;speedscope&lt;/a&gt; profiles or raw data with the &lt;code&gt;--format&lt;/code&gt; parameter. See &lt;code&gt;py-spy record --help&lt;/code&gt; for information on other options including changing the sampling rate, filtering to only include threads that hold the GIL, profiling native C extensions, showing thread-ids, profiling subprocesses and more.&lt;/p&gt; &#xA;&lt;h3&gt;top&lt;/h3&gt; &#xA;&lt;p&gt;Top shows a live view of what functions are taking the most time in your python program, similar to the Unix &lt;a href=&#34;https://linux.die.net/man/1/top&#34;&gt;top&lt;/a&gt; command. Running py-spy with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;py-spy top --pid 12345&#xA;# OR&#xA;py-spy top -- python myprogram.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will bring up a live updating high level view of your python program:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benfred/py-spy/master/images/console_viewer.gif&#34; alt=&#34;console viewer demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;dump&lt;/h3&gt; &#xA;&lt;p&gt;py-spy can also display the current call stack for each python thread with the &lt;code&gt;dump&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;py-spy dump --pid 12345&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will dump out the call stacks for each thread, and some other basic process info to the console:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benfred/py-spy/master/images/dump.png&#34; alt=&#34;dump output&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is useful for the case where you just need a single call stack to figure out where your python program is hung on. This command also has the ability to print out the local variables associated with each stack frame by setting the &lt;code&gt;--locals&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;Why do we need another Python profiler?&lt;/h3&gt; &#xA;&lt;p&gt;This project aims to let you profile and debug any running Python program, even if the program is serving production traffic.&lt;/p&gt; &#xA;&lt;p&gt;While there are many other python profiling projects, almost all of them require modifying the profiled program in some way. Usually, the profiling code runs inside of the target python process, which will slow down and change how the program operates. This means it&#39;s not generally safe to use these profilers for debugging issues in production services since they will usually have a noticeable impact on performance.&lt;/p&gt; &#xA;&lt;h3&gt;How does py-spy work?&lt;/h3&gt; &#xA;&lt;p&gt;py-spy works by directly reading the memory of the python program using the &lt;a href=&#34;http://man7.org/linux/man-pages/man2/process_vm_readv.2.html&#34;&gt;process_vm_readv&lt;/a&gt; system call on Linux, the &lt;a href=&#34;https://developer.apple.com/documentation/kernel/1585350-vm_read?language=objc&#34;&gt;vm_read&lt;/a&gt; call on OSX or the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx&#34;&gt;ReadProcessMemory&lt;/a&gt; call on Windows.&lt;/p&gt; &#xA;&lt;p&gt;Figuring out the call stack of the Python program is done by looking at the global PyInterpreterState variable to get all the Python threads running in the interpreter, and then iterating over each PyFrameObject in each thread to get the call stack. Since the Python ABI changes between versions, we use rust&#39;s &lt;a href=&#34;https://github.com/rust-lang-nursery/rust-bindgen&#34;&gt;bindgen&lt;/a&gt; to generate different rust structures for each Python interpreter class we care about and use these generated structs to figure out the memory layout in the Python program.&lt;/p&gt; &#xA;&lt;p&gt;Getting the memory address of the Python Interpreter can be a little tricky due to &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;Address Space Layout Randomization&lt;/a&gt;. If the target python interpreter ships with symbols it is pretty easy to figure out the memory address of the interpreter by dereferencing the &lt;code&gt;interp_head&lt;/code&gt; or &lt;code&gt;_PyRuntime&lt;/code&gt; variables depending on the Python version. However, many Python versions are shipped with either stripped binaries or shipped without the corresponding PDB symbol files on Windows. In these cases we scan through the BSS section for addresses that look like they may point to a valid PyInterpreterState and check if the layout of that address is what we expect.&lt;/p&gt; &#xA;&lt;h3&gt;Can py-spy profile native extensions?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! py-spy supports profiling native python extensions written in languages like C/C++ or Cython, on x86_64 Linux and Windows. You can enable this mode by passing &lt;code&gt;--native&lt;/code&gt; on the command line. For best results, you should compile your Python extension with symbols. Also worth noting for Cython programs is that py-spy needs the generated C or C++ file in order to return line numbers of the original .pyx file. Read the &lt;a href=&#34;https://www.benfrederickson.com/profiling-native-python-extensions-with-py-spy/&#34;&gt;blog post&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;How can I profile subprocesses?&lt;/h3&gt; &#xA;&lt;p&gt;By passing in the &lt;code&gt;--subprocesses&lt;/code&gt; flag to either the record or top view, py-spy will also include the output from any python process that is a child process of the target program. This is useful for profiling applications that use multiprocessing or gunicorn worker pools. py-spy will monitor for new processes being created, and automatically attach to them and include samples from them in the output. The record view will include the PID and cmdline of each program in the callstack, with subprocesses appearing as children of their parent processes.&lt;/p&gt; &#xA;&lt;h3&gt;When do you need to run as sudo?&lt;/h3&gt; &#xA;&lt;p&gt;py-spy works by reading memory from a different python process, and this might not be allowed for security reasons depending on your OS and system settings. In many cases, running as a root user (with sudo or similar) gets around these security restrictions. OSX always requires running as root, but on Linux it depends on how you are launching py-spy and the system security settings.&lt;/p&gt; &#xA;&lt;p&gt;On Linux the default configuration is to require root permissions when attaching to a process that isn&#39;t a child. For py-spy this means you can profile without root access by getting py-spy to create the process (&lt;code&gt;py-spy record -- python myprogram.py&lt;/code&gt;) but attaching to an existing process by specifying a PID will usually require root (&lt;code&gt;sudo py-spy record --pid 123456&lt;/code&gt;). You can remove this restriction on Linux by setting the &lt;a href=&#34;https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace_Protection&#34;&gt;ptrace_scope sysctl variable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do you detect if a thread is idle or not?&lt;/h3&gt; &#xA;&lt;p&gt;py-spy attempts to only include stack traces from threads that are actively running code, and exclude threads that are sleeping or otherwise idle. When possible, py-spy attempts to get this thread activity information from the OS: by reading in &lt;code&gt;/proc/PID/stat&lt;/code&gt; on Linux, by using the mach &lt;a href=&#34;https://opensource.apple.com/source/xnu/xnu-792/osfmk/mach/thread_info.h.auto.html&#34;&gt;thread_basic_info&lt;/a&gt; call on OSX, and by looking if the current SysCall is &lt;a href=&#34;https://github.com/benfred/py-spy/raw/8326c6dbc6241d60125dfd4c01b70fed8b8b8138/remoteprocess/src/windows/mod.rs#L212-L229&#34;&gt;known to be idle&lt;/a&gt; on Windows.&lt;/p&gt; &#xA;&lt;p&gt;There are some limitations with this approach though that may cause idle threads to still be marked as active. First off, we have to get this thread activity information before pausing the program, because getting this from a paused program will cause it to always return that this is idle. This means there is a potential race condition, where we get the thread activity and then the thread is in a different state when we get the stack trace. Querying the OS for thread activity also isn&#39;t implemented yet for FreeBSD and i686/ARM processors on Linux. On Windows, calls that are blocked on IO also won&#39;t be marked as idle yet, for instance when reading input from stdin. Finally, on some Linux calls the ptrace attach that we are using may cause idle threads to wake up momentarily, causing false positives when reading from procfs. For these reasons, we also have a heuristic fallback that marks known certain known calls in python as being idle.&lt;/p&gt; &#xA;&lt;p&gt;You can disable this functionality by setting the &lt;code&gt;--idle&lt;/code&gt; flag, which will include frames that py-spy considers idle.&lt;/p&gt; &#xA;&lt;h3&gt;How does GIL detection work?&lt;/h3&gt; &#xA;&lt;p&gt;We get GIL activity by looking at the threadid value pointed to by the &lt;code&gt;_PyThreadState_Current&lt;/code&gt; symbol for Python 3.6 and earlier and by figuring out the equivalent from the &lt;code&gt;_PyRuntime&lt;/code&gt; struct in Python 3.7 and later. These symbols might not be included in your python distribution, which will cause resolving which thread holds on to the GIL to fail. Current GIL usage is also shown in the &lt;code&gt;top&lt;/code&gt; view as %GIL.&lt;/p&gt; &#xA;&lt;p&gt;Passing the &lt;code&gt;--gil&lt;/code&gt; flag will only include traces for threads that are holding on to the &lt;a href=&#34;https://wiki.python.org/moin/GlobalInterpreterLock&#34;&gt;Global Interpreter Lock&lt;/a&gt;. In some cases this might be a more accurate view of how your python program is spending its time, though you should be aware that this will miss activity in extensions that release the GIL while still active.&lt;/p&gt; &#xA;&lt;h3&gt;Why am I having issues profiling /usr/bin/python on OSX?&lt;/h3&gt; &#xA;&lt;p&gt;OSX has a feature called &lt;a href=&#34;https://en.wikipedia.org/wiki/System_Integrity_Protection&#34;&gt;System Integrity Protection&lt;/a&gt; that prevents even the root user from reading memory from any binary located in /usr/bin. Unfortunately, this includes the python interpreter that ships with OSX.&lt;/p&gt; &#xA;&lt;p&gt;There are a couple of different ways to deal with this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can install a different Python distribution. The built-in Python &lt;a href=&#34;https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_release_notes&#34;&gt;will be removed&lt;/a&gt; in a future OSX, and you probably want to migrate away from Python 2 anyways =).&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;a href=&#34;https://virtualenv.pypa.io/en/stable/&#34;&gt;virtualenv&lt;/a&gt; to run the system python in an environment where SIP doesn&#39;t apply.&lt;/li&gt; &#xA; &lt;li&gt;You can &lt;a href=&#34;https://www.macworld.co.uk/how-to/mac/how-turn-off-mac-os-x-system-integrity-protection-rootless-3638975/&#34;&gt;disable System Integrity Protection&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I run py-spy in Docker?&lt;/h3&gt; &#xA;&lt;p&gt;Running py-spy inside of a docker container will also usually bring up a permissions denied error even when running as root.&lt;/p&gt; &#xA;&lt;p&gt;This error is caused by docker restricting the process_vm_readv system call we are using. This can be overridden by setting &lt;a href=&#34;https://docs.docker.com/engine/security/seccomp/&#34;&gt;&lt;code&gt;--cap-add SYS_PTRACE&lt;/code&gt;&lt;/a&gt; when starting the docker container.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can edit the docker-compose yaml file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;your_service:&#xA;   cap_add:&#xA;     - SYS_PTRACE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to restart the docker container in order for this setting to take effect.&lt;/p&gt; &#xA;&lt;p&gt;You can also use py-spy from the Host OS to profile a running process running inside the docker container.&lt;/p&gt; &#xA;&lt;h3&gt;How do I run py-spy in Kubernetes?&lt;/h3&gt; &#xA;&lt;p&gt;py-spy needs &lt;code&gt;SYS_PTRACE&lt;/code&gt; to be able to read process memory. Kubernetes drops that capability by default, resulting in the error&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Permission Denied: Try running again with elevated permissions by going &#39;sudo env &#34;PATH=$PATH&#34; !!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recommended way to deal with this is to edit the spec and add that capability. For a deployment, this is done by adding this to &lt;code&gt;Deployment.spec.template.spec.containers&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;securityContext:&#xA;  capabilities:&#xA;    add:&#xA;    - SYS_PTRACE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details on this here: &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container&#34;&gt;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container&lt;/a&gt; Note that this will remove the existing pods and create those again.&lt;/p&gt; &#xA;&lt;h3&gt;How do I install py-spy on Alpine Linux?&lt;/h3&gt; &#xA;&lt;p&gt;Alpine python opts out of the &lt;code&gt;manylinux&lt;/code&gt; wheels: &lt;a href=&#34;https://github.com/pypa/pip/issues/3969#issuecomment-247381915&#34;&gt;pypa/pip#3969 (comment)&lt;/a&gt;. You can override this behaviour to use pip to install py-spy on Alpine by going:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;manylinux1_compatible = True&#39; &amp;gt; /usr/local/lib/python3.7/site-packages/_manylinux.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can download a musl binary from the &lt;a href=&#34;https://github.com/benfred/py-spy/releases&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How can I avoid pausing the Python program?&lt;/h3&gt; &#xA;&lt;p&gt;By setting the &lt;code&gt;--nonblocking&lt;/code&gt; option, py-spy won&#39;t pause the target python you are profiling from. While the performance impact of sampling from a process with py-spy is usually extremely low, setting this option will totally avoid interrupting your running python program.&lt;/p&gt; &#xA;&lt;p&gt;With this option set, py-spy will instead read the interpreter state from the python process as it is running. Since the calls we use to read memory from are not atomic, and we have to issue multiple calls to get a stack trace this means that occasionally we get errors when sampling. This can show up as an increased error rate when sampling, or as partial stack frames being included in the output.&lt;/p&gt; &#xA;&lt;h3&gt;Does py-spy support 32-bit Windows? Integrate with PyPy? Work with USC2 versions of Python2?&lt;/h3&gt; &#xA;&lt;p&gt;Not yet =).&lt;/p&gt; &#xA;&lt;p&gt;If there are features you&#39;d like to see in py-spy either thumb up the &lt;a href=&#34;https://github.com/benfred/py-spy/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc&#34;&gt;appropriate issue&lt;/a&gt; or create a new one that describes what functionality is missing.&lt;/p&gt; &#xA;&lt;h3&gt;How to force colored output when piping to a pager?&lt;/h3&gt; &#xA;&lt;p&gt;py-spy follows the &lt;a href=&#34;https://bixense.com/clicolors/&#34;&gt;CLICOLOR&lt;/a&gt; specification, thus setting &lt;code&gt;CLICOLOR_FORCE=1&lt;/code&gt; in your environment will have py-spy print colored output even when piped to a pager.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;py-spy is heavily inspired by &lt;a href=&#34;https://github.com/jvns/&#34;&gt;Julia Evans&lt;/a&gt; excellent work on &lt;a href=&#34;http://github.com/rbspy/rbspy&#34;&gt;rbspy&lt;/a&gt;. In particular, the code to generate flamegraph and speedscope files is taken directly from rbspy, and this project uses the &lt;a href=&#34;https://github.com/luser/read-process-memory&#34;&gt;read-process-memory&lt;/a&gt; and &lt;a href=&#34;https://github.com/benfred/proc-maps&#34;&gt;proc-maps&lt;/a&gt; crates that were spun off from rbspy.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;py-spy is released under the MIT License, see the &lt;a href=&#34;https://github.com/benfred/py-spy/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>modrinth/code</title>
    <updated>2024-11-10T01:47:10Z</updated>
    <id>tag:github.com,2024-11-10:/modrinth/code</id>
    <link href="https://github.com/modrinth/code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Modrinth monorepo containing all code which powers Modrinth!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modrinth/code/main/.github/assets/monorepo_cover.png&#34; alt=&#34;Modrinth Monorepo Cover&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/Modrinth/code?color=c78aff&amp;amp;label=issues&amp;amp;style=for-the-badge&#34; alt=&#34;Issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr-raw/Modrinth/code?color=c78aff&amp;amp;label=PRs&amp;amp;style=for-the-badge&#34; alt=&#34;Pull Requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/Modrinth/code?color=c78aff&amp;amp;label=contributors&amp;amp;style=for-the-badge&#34; alt=&#34;Contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https://ghloc.vercel.app/api/modrinth/code/badge?style=flat&amp;amp;logoColor=white&amp;amp;color=c78aff&amp;amp;style=for-the-badge&#34; alt=&#34;Lines&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/Modrinth/code?color=c78aff&amp;amp;label=commits&amp;amp;style=for-the-badge&#34; alt=&#34;Commit Activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/Modrinth/code?color=c78aff&amp;amp;label=last%20commit&amp;amp;style=for-the-badge&#34; alt=&#34;Last Commit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modrinth Monorepo&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the Modrinth Monorepo, the primary codebase for the Modrinth web interface and app. It contains &lt;img src=&#34;https://img.shields.io/endpoint?url=https://ghloc.vercel.app/api/modrinth/olympus/badge?logoColor=white&amp;amp;color=black&amp;amp;label=&#34; alt=&#34;Lines&#34;&gt; lines of code and has &lt;img src=&#34;https://img.shields.io/github/contributors/Modrinth/code?color=black&amp;amp;label=&#34; alt=&#34;Contributors&#34;&gt; contributors!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not a developer and you&#39;ve stumbled upon this repository, you can access the web interface on the &lt;a href=&#34;https://modrinth.com&#34;&gt;Modrinth website&lt;/a&gt; and download the latest release of the app &lt;a href=&#34;https://modrinth.com/app&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains two primary packages. For detailed development information, please refer to their respective READMEs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modrinth/code/main/apps/frontend/README.md&#34;&gt;Web Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modrinth/code/main/apps/app/README.md&#34;&gt;Desktop App&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Before submitting any contributions, please read our &lt;a href=&#34;https://docs.modrinth.com/contributing/getting-started/&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to fork this repository for your own purposes, please review our &lt;a href=&#34;https://raw.githubusercontent.com/modrinth/code/main/COPYING.md&#34;&gt;copying guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within our codebase, please follow our &lt;a href=&#34;https://modrinth.com/legal/security&#34;&gt;responsible disclosure guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you need help with the Modrinth web interface or app, please visit our &lt;a href=&#34;https://support.modrinth.com&#34;&gt;support page&lt;/a&gt;. For general inquiries, you can also join our &lt;a href=&#34;https://discord.modrinth.com&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All packages in this repository are licensed under their respective licenses. Refer to the LICENSE file in each package for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kitao/pyxel</title>
    <updated>2024-11-10T01:47:10Z</updated>
    <id>tag:github.com,2024-11-10:/kitao/pyxel</id>
    <link href="https://github.com/kitao/pyxel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A retro game engine for Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/pyxel_logo_152x64.png&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pyxel/&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/personalized-badge/pyxel?period=total&amp;amp;units=international_system&amp;amp;left_color=grey&amp;amp;right_color=blue&amp;amp;left_text=PyPI%20downloads&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kitao/pyxel&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/kitao/pyxel?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kitao/pyxel&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/kitao/pyxel?style=social&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/kitao&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/kitao?label=Sponsor%20me&amp;amp;logo=github%20sponsors&amp;amp;style=social&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/H2H27VDKD&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[ &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.cn.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.de.md&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.es.md&#34;&gt;Español&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.fr.md&#34;&gt;Français&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.it.md&#34;&gt;Italiano&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.ja.md&#34;&gt;日本語&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.ko.md&#34;&gt;한국어&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.pt.md&#34;&gt;Português&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.ru.md&#34;&gt;Русский&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.tr.md&#34;&gt;Türkçe&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/README.uk.md&#34;&gt;Українська&lt;/a&gt; ]&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pyxel&lt;/strong&gt; is a retro game engine for Python.&lt;/p&gt; &#xA;&lt;p&gt;With simple specifications inspired by retro gaming consoles, such as displaying only 16 colors and supporting 4 sound channels, you can easily enjoy making pixel-art-style games.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/pyxel_message.png&#34; width=&#34;480&#34;&gt; &#xA;&lt;p&gt;The development of Pyxel is driven by user feedback. Please give Pyxel a star on GitHub!&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/10_platformer.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/10_platformer.gif&#34; width=&#34;290&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/30sec_of_daylight.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/30sec_of_daylight.gif&#34; width=&#34;350&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/02_jump_game.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/02_jump_game.gif&#34; width=&#34;330&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/megaball.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/megaball.gif&#34; width=&#34;310&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/image_editor.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/image_tilemap_editor.gif&#34; width=&#34;320&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/sound_editor.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/sound_music_editor.gif&#34; width=&#34;320&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Pyxel&#39;s specifications and APIs are inspired by &lt;a href=&#34;https://www.lexaloffle.com/pico-8.php&#34;&gt;PICO-8&lt;/a&gt; and &lt;a href=&#34;https://tic80.com/&#34;&gt;TIC-80&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pyxel is open source under the &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/LICENSE&#34;&gt;MIT License&lt;/a&gt; and free to use. Let&#39;s start making retro games with Pyxel!&lt;/p&gt; &#xA;&lt;h2&gt;Specifications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runs on Windows, Mac, Linux, and Web&lt;/li&gt; &#xA; &lt;li&gt;Programming in Python&lt;/li&gt; &#xA; &lt;li&gt;16-color palette&lt;/li&gt; &#xA; &lt;li&gt;3 256x256-sized image banks&lt;/li&gt; &#xA; &lt;li&gt;8 256x256-sized tilemaps&lt;/li&gt; &#xA; &lt;li&gt;4 channels with 64 definable sounds&lt;/li&gt; &#xA; &lt;li&gt;8 music tracks combining any sounds&lt;/li&gt; &#xA; &lt;li&gt;Keyboard, mouse, and gamepad inputs&lt;/li&gt; &#xA; &lt;li&gt;Image and sound editing tools&lt;/li&gt; &#xA; &lt;li&gt;User-extensible colors, channels, and banks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Color Palette&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/05_color_palette.png&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/pyxel_palette.png&#34;&gt; &#xA;&lt;h2&gt;How to Install&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;After installing &lt;a href=&#34;https://www.python.org/&#34;&gt;Python3&lt;/a&gt; (version 3.8 or higher), run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install -U pyxel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When installing Python using the official installer, make sure to check the &lt;code&gt;Add Python 3.x to PATH&lt;/code&gt; option to enable the &lt;code&gt;pyxel&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;p&gt;After installing &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install pipx&#xA;pipx ensurepath&#xA;pipx install pyxel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To upgrade Pyxel after installation, run &lt;code&gt;pipx upgrade pyxel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;After installing the SDL2 package (&lt;code&gt;libsdl2-dev&lt;/code&gt; for Ubuntu), &lt;a href=&#34;https://www.python.org/&#34;&gt;Python3&lt;/a&gt; (version 3.8 or higher), and &lt;code&gt;python3-pip&lt;/code&gt;, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pip3 install -U pyxel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the previous command fails, consider building Pyxel from source by following the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/Makefile&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web&lt;/h3&gt; &#xA;&lt;p&gt;The web version of Pyxel does not require Python or Pyxel installation and runs on PCs, smartphones, and tablets with supported web browsers.&lt;/p&gt; &#xA;&lt;p&gt;For detailed instructions, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/pyxel-web-en.md&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Try Examples&lt;/h3&gt; &#xA;&lt;p&gt;After installing Pyxel, you can copy the examples to the current directory with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyxel copy_examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following examples will be copied to your current directory:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01_hello_pyxel.py&lt;/td&gt; &#xA;   &lt;td&gt;Simplest application&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/01_hello_pyxel.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/01_hello_pyxel.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02_jump_game.py&lt;/td&gt; &#xA;   &lt;td&gt;Jump game with Pyxel resource file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/02_jump_game.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/02_jump_game.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03_draw_api.py&lt;/td&gt; &#xA;   &lt;td&gt;Demonstration of drawing APIs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/03_draw_api.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/03_draw_api.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;04_sound_api.py&lt;/td&gt; &#xA;   &lt;td&gt;Demonstration of sound APIs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/04_sound_api.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/04_sound_api.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;05_color_palette.py&lt;/td&gt; &#xA;   &lt;td&gt;Color palette list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/05_color_palette.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/05_color_palette.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;06_click_game.py&lt;/td&gt; &#xA;   &lt;td&gt;Mouse click game&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/06_click_game.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/06_click_game.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;07_snake.py&lt;/td&gt; &#xA;   &lt;td&gt;Snake game with BGM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/07_snake.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/07_snake.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;08_triangle_api.py&lt;/td&gt; &#xA;   &lt;td&gt;Demonstration of triangle drawing APIs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/08_triangle_api.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/08_triangle_api.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;09_shooter.py&lt;/td&gt; &#xA;   &lt;td&gt;Shoot&#39;em up game with screen transitions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/09_shooter.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/09_shooter.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10_platformer.py&lt;/td&gt; &#xA;   &lt;td&gt;Side-scrolling platform game with map&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/10_platformer.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/10_platformer.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11_offscreen.py&lt;/td&gt; &#xA;   &lt;td&gt;Offscreen rendering with Image class&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/11_offscreen.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/11_offscreen.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12_perlin_noise.py&lt;/td&gt; &#xA;   &lt;td&gt;Perlin noise animation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/12_perlin_noise.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/12_perlin_noise.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13_bitmap_font.py&lt;/td&gt; &#xA;   &lt;td&gt;Drawing a bitmap font&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/13_bitmap_font.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/13_bitmap_font.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14_synthesizer.py&lt;/td&gt; &#xA;   &lt;td&gt;Synthesizer using audio expansion features&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/14_synthesizer.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/14_synthesizer.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15_tiled_map_file.py&lt;/td&gt; &#xA;   &lt;td&gt;Loading and drawing a Tile Map File (.tmx)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/15_tiled_map_file.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/15_tiled_map_file.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16_transform.py&lt;/td&gt; &#xA;   &lt;td&gt;Image rotation and scaling&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/16_transform.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/16_transform.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;99_flip_animation.py&lt;/td&gt; &#xA;   &lt;td&gt;Animation with flip function (non-web platforms only)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/docs/images/99_flip_animation.gif&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/raw/main/python/pyxel/examples/99_flip_animation.py&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30sec_of_daylight.pyxapp&lt;/td&gt; &#xA;   &lt;td&gt;1st Pyxel Jam winning game by &lt;a href=&#34;https://x.com/helpcomputer0&#34;&gt;Adam&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/30sec_of_daylight.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kitao/30sec_of_daylight&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;megaball.pyxapp&lt;/td&gt; &#xA;   &lt;td&gt;Arcade ball physics game by &lt;a href=&#34;https://x.com/helpcomputer0&#34;&gt;Adam&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/megaball.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/helpcomputer/megaball&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8bit-bgm-gen.pyxapp&lt;/td&gt; &#xA;   &lt;td&gt;Background music generator by &lt;a href=&#34;https://x.com/frenchbread1222&#34;&gt;frenchbread&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/8bit-bgm-gen.html&#34;&gt;Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shiromofufactory/8bit-bgm-generator&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;The examples can be executed with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd pyxel_examples&#xA;pyxel run 01_hello_pyxel.py&#xA;pyxel play 30sec_of_daylight.pyxapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;h3&gt;Create Application&lt;/h3&gt; &#xA;&lt;p&gt;In your Python script, import the Pyxel module, specify the window size with the &lt;code&gt;init&lt;/code&gt; function, and then start the Pyxel application with the &lt;code&gt;run&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyxel&#xA;&#xA;pyxel.init(160, 120)&#xA;&#xA;def update():&#xA;    if pyxel.btnp(pyxel.KEY_Q):&#xA;        pyxel.quit()&#xA;&#xA;def draw():&#xA;    pyxel.cls(0)&#xA;    pyxel.rect(10, 10, 20, 20, 11)&#xA;&#xA;pyxel.run(update, draw)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The arguments of the &lt;code&gt;run&lt;/code&gt; function are the &lt;code&gt;update&lt;/code&gt; function, which processes frame updates, and the &lt;code&gt;draw&lt;/code&gt; function, which handles screen drawing.&lt;/p&gt; &#xA;&lt;p&gt;In an actual application, it is recommended to wrap Pyxel code in a class, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyxel&#xA;&#xA;class App:&#xA;    def __init__(self):&#xA;        pyxel.init(160, 120)&#xA;        self.x = 0&#xA;        pyxel.run(self.update, self.draw)&#xA;&#xA;    def update(self):&#xA;        self.x = (self.x + 1) % pyxel.width&#xA;&#xA;    def draw(self):&#xA;        pyxel.cls(0)&#xA;        pyxel.rect(self.x, 0, 8, 8, 9)&#xA;&#xA;App()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For creating simple graphics without animation, you can use the &lt;code&gt;show&lt;/code&gt; function to simplify your code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyxel&#xA;&#xA;pyxel.init(120, 120)&#xA;pyxel.cls(1)&#xA;pyxel.circb(60, 60, 40, 7)&#xA;pyxel.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Application&lt;/h3&gt; &#xA;&lt;p&gt;A created script can be executed using the &lt;code&gt;python&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python PYTHON_SCRIPT_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can also be run with the &lt;code&gt;pyxel run&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyxel run PYTHON_SCRIPT_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, the &lt;code&gt;pyxel watch&lt;/code&gt; command monitors changes in a specified directory and automatically re-runs the program when changes are detected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyxel watch WATCH_DIR PYTHON_SCRIPT_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Directory monitoring can be stopped by pressing &lt;code&gt;Ctrl(Command)+C&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Special Key Controls&lt;/h3&gt; &#xA;&lt;p&gt;The following special key actions are available while a Pyxel application is running:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Esc&lt;/code&gt;&lt;br&gt; Quit the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt(Option)+1&lt;/code&gt;&lt;br&gt; Save the screenshot to the desktop&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt(Option)+2&lt;/code&gt;&lt;br&gt; Reset the recording start time of the screen capture video&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt(Option)+3&lt;/code&gt;&lt;br&gt; Save a screen capture video to the desktop (up to 10 seconds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt(Option)+8&lt;/code&gt; or &lt;code&gt;A+B+X+Y+DL&lt;/code&gt; on gamepad&lt;br&gt; Toggles screen scaling between maximum and integer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt(Option)+9&lt;/code&gt; or &lt;code&gt;A+B+X+Y+DR&lt;/code&gt; on gamepad&lt;br&gt; Switch between screen modes (Crisp/Smooth/Retro)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt(Option)+0&lt;/code&gt; or &lt;code&gt;A+B+X+Y+DU&lt;/code&gt; on gamepad&lt;br&gt; Toggle the performance monitor (fps/&lt;code&gt;update&lt;/code&gt; time/&lt;code&gt;draw&lt;/code&gt; time)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alt(Option)+Enter&lt;/code&gt; or &lt;code&gt;A+B+X+Y+DD&lt;/code&gt; on gamepad&lt;br&gt; Toggle fullscreen&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shift+Alt(Option)+1/2/3&lt;/code&gt;&lt;br&gt; Save image bank 0, 1, or 2 to the desktop&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shift+Alt(Option)+0&lt;/code&gt;&lt;br&gt; Save the current color palette to the desktop&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to Create Resources&lt;/h3&gt; &#xA;&lt;p&gt;Pyxel Editor can create images and sounds used in a Pyxel application.&lt;/p&gt; &#xA;&lt;p&gt;You can start Pyxel Editor with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyxel edit PYXEL_RESOURCE_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the specified Pyxel resource file (.pyxres) exists, it will be loaded. If it does not exist, a new file with the specified name will be created. If the resource file is omitted, a new file named &lt;code&gt;my_resource.pyxres&lt;/code&gt; will be created.&lt;/p&gt; &#xA;&lt;p&gt;After starting Pyxel Editor, you can switch to another resource file by dragging and dropping it onto Pyxel Editor.&lt;/p&gt; &#xA;&lt;p&gt;The created resource file can be loaded using the &lt;code&gt;load&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Pyxel Editor has the following editing modes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Image Editor&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The mode for editing the image in each &lt;strong&gt;image bank&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/image_editor.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/image_editor.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;You can drag and drop an image file (PNG/GIF/JPEG) into the image editor to load the image into the currently selected image bank.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tilemap Editor&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The mode for editing &lt;strong&gt;tilemaps&lt;/strong&gt; that arrange images from the image banks in a tile pattern.&lt;/p&gt; &#xA;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/tilemap_editor.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/tilemap_editor.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Drag and drop a TMX file (Tiled Map File) onto the tilemap editor to load its layer in the drawing order that corresponds to the currently selected tilemap number.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sound Editor&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The mode for editing &lt;strong&gt;sounds&lt;/strong&gt; used for melodies and sound effects.&lt;/p&gt; &#xA;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/sound_editor.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/sound_editor.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;strong&gt;Music Editor&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The mode for editing &lt;strong&gt;musics&lt;/strong&gt; in which the sounds are arranged in order of playback.&lt;/p&gt; &#xA;&lt;a href=&#34;https://kitao.github.io/pyxel/wasm/examples/music_editor.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/music_editor.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Other Resource Creation Methods&lt;/h3&gt; &#xA;&lt;p&gt;Pyxel images and tilemaps can also be created using the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an image from a list of strings using the &lt;code&gt;Image.set&lt;/code&gt; function or the &lt;code&gt;Tilemap.set&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;Load an image file (PNG/GIF/JPEG) in Pyxel palette with &lt;code&gt;Image.load&lt;/code&gt; function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pyxel sounds can also be created using the following method:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a sound from strings with &lt;code&gt;Sound.set&lt;/code&gt; function or &lt;code&gt;Music.set&lt;/code&gt; function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to the API reference for the usage of these functions.&lt;/p&gt; &#xA;&lt;h3&gt;How to Distribute Applications&lt;/h3&gt; &#xA;&lt;p&gt;Pyxel supports a dedicated application distribution file format (Pyxel application file) that is cross-platform.&lt;/p&gt; &#xA;&lt;p&gt;A Pyxel application file (.pyxapp) is created using the &lt;code&gt;pyxel package&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyxel package APP_DIR STARTUP_SCRIPT_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to include resources or additional modules, place them in the application directory.&lt;/p&gt; &#xA;&lt;p&gt;Metadata can be displayed at runtime by specifying it in the following format within the startup script. Fields other than &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt; are optional.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# title: Pyxel Platformer&#xA;# author: Takashi Kitao&#xA;# desc: A Pyxel platformer example&#xA;# site: https://github.com/kitao/pyxel&#xA;# license: MIT&#xA;# version: 1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The created application file can be run using the &lt;code&gt;pyxel play&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyxel play PYXEL_APP_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A Pyxel application file can also be converted to an executable or an HTML file using the &lt;code&gt;pyxel app2exe&lt;/code&gt; or &lt;code&gt;pyxel app2html&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;h3&gt;System&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;br&gt; The width and height of the screen&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;frame_count&lt;/code&gt;&lt;br&gt; The number of the elapsed frames&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;init(width, height, [title], [fps], [quit_key], [display_scale], [capture_scale], [capture_sec])&lt;/code&gt;&lt;br&gt; Initialize the Pyxel application with the screen size (&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;). The following options can be specified: the window title with &lt;code&gt;title&lt;/code&gt;, the frame rate with &lt;code&gt;fps&lt;/code&gt;, the key to quit the application with &lt;code&gt;quit_key&lt;/code&gt;, the display scale with &lt;code&gt;display_scale&lt;/code&gt;, the screen capture scale with &lt;code&gt;capture_scale&lt;/code&gt;, and the maximum recording time of the screen capture video with &lt;code&gt;capture_sec&lt;/code&gt;.&lt;br&gt; Example: &lt;code&gt;pyxel.init(160, 120, title=&#34;My Pyxel App&#34;, fps=60, quit_key=pyxel.KEY_NONE, capture_scale=3, capture_sec=0)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;run(update, draw)&lt;/code&gt;&lt;br&gt; Start the Pyxel application and call the &lt;code&gt;update&lt;/code&gt; function for frame update and the &lt;code&gt;draw&lt;/code&gt; function for drawing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;show()&lt;/code&gt;&lt;br&gt; Show the screen and wait until the &lt;code&gt;Esc&lt;/code&gt; key is pressed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;flip()&lt;/code&gt;&lt;br&gt; Refresh the screen by one frame. The application exits when the &lt;code&gt;Esc&lt;/code&gt; key is pressed. This function is not available in the web version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;quit()&lt;/code&gt;&lt;br&gt; Quit the Pyxel application.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resource&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;load(filename, [excl_images], [excl_tilemaps], [excl_sounds], [excl_musics])&lt;/code&gt;&lt;br&gt; Load the resource file (.pyxres). If an option is set to &lt;code&gt;True&lt;/code&gt;, the corresponding resource will be excluded from loading. If a palette file (.pyxpal) with the same name exists in the same location as the resource file, the palette display colors will also be updated. The palette file contains hexadecimal entries for the display colors (e.g. &lt;code&gt;1100FF&lt;/code&gt;), separated by newlines. The palette file can also be used to change the colors displayed in Pyxel Editor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;user_data_dir(vendor_name, app_name)&lt;/code&gt;&lt;br&gt; Returns the user data directory created based on &lt;code&gt;vendor_name&lt;/code&gt; and &lt;code&gt;app_name&lt;/code&gt;. If the directory does not exist, it will be created automatically. It is used to store high scores, game progress, and similar data.&lt;br&gt; Example: &lt;code&gt;print(pyxel.user_data_dir(&#34;Takashi Kitao&#34;, &#34;Pyxel Shooter&#34;))&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Input&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mouse_x&lt;/code&gt;, &lt;code&gt;mouse_y&lt;/code&gt;&lt;br&gt; The current position of the mouse cursor&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mouse_wheel&lt;/code&gt;&lt;br&gt; The current value of the mouse wheel&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;btn(key)&lt;/code&gt;&lt;br&gt; Return &lt;code&gt;True&lt;/code&gt; if the &lt;code&gt;key&lt;/code&gt; is pressed, otherwise return &lt;code&gt;False&lt;/code&gt;. (&lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/python/pyxel/__init__.pyi&#34;&gt;Key definition list&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;btnp(key, [hold], [repeat])&lt;/code&gt;&lt;br&gt; Return &lt;code&gt;True&lt;/code&gt; if the &lt;code&gt;key&lt;/code&gt; is pressed in that frame, otherwise return &lt;code&gt;False&lt;/code&gt;. If &lt;code&gt;hold&lt;/code&gt; and &lt;code&gt;repeat&lt;/code&gt; are specified, after the &lt;code&gt;key&lt;/code&gt; has been held down for &lt;code&gt;hold&lt;/code&gt; frames or more, &lt;code&gt;True&lt;/code&gt; is returned every &lt;code&gt;repeat&lt;/code&gt; frames.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;btnr(key)&lt;/code&gt;&lt;br&gt; Return &lt;code&gt;True&lt;/code&gt; if the &lt;code&gt;key&lt;/code&gt; is released in that frame, otherwise return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mouse(visible)&lt;/code&gt;&lt;br&gt; Show the mouse cursor if &lt;code&gt;visible&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, and hide it if &lt;code&gt;visible&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;. The cursor&#39;s position continues to update even when it is hidden.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Graphics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;colors&lt;/code&gt;&lt;br&gt; List of the palette display colors. The display color is specified by a 24-bit numerical value. Use &lt;code&gt;colors.from_list&lt;/code&gt; and &lt;code&gt;colors.to_list&lt;/code&gt; to directly assign and retrieve Python lists.&lt;br&gt; Example: &lt;code&gt;old_colors = pyxel.colors.to_list(); pyxel.colors.from_list([0x111111, 0x222222, 0x333333]); pyxel.colors[15] = 0x112233&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;images&lt;/code&gt;&lt;br&gt; List of the image banks (instances of the Image class) (0-2)&lt;br&gt; Example: &lt;code&gt;pyxel.images[0].load(0, 0, &#34;title.png&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tilemaps&lt;/code&gt;&lt;br&gt; List of the tilemaps (instances of the Tilemap class) (0-7)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clip(x, y, w, h)&lt;/code&gt;&lt;br&gt; Set the drawing area of the screen from (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) with a width of &lt;code&gt;w&lt;/code&gt; and a height of &lt;code&gt;h&lt;/code&gt;. Call &lt;code&gt;clip()&lt;/code&gt; to reset the drawing area to full screen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;camera(x, y)&lt;/code&gt;&lt;br&gt; Change the upper-left corner coordinates of the screen to (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;). Call &lt;code&gt;camera()&lt;/code&gt; to reset the upper-left corner coordinates to (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pal(col1, col2)&lt;/code&gt;&lt;br&gt; Replace color &lt;code&gt;col1&lt;/code&gt; with &lt;code&gt;col2&lt;/code&gt; when drawing. Call &lt;code&gt;pal()&lt;/code&gt; to reset to the initial palette.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dither(alpha)&lt;/code&gt;&lt;br&gt; Apply dithering (pseudo-transparency) when drawing. Set &lt;code&gt;alpha&lt;/code&gt; in the range &lt;code&gt;0.0&lt;/code&gt;-&lt;code&gt;1.0&lt;/code&gt;, where &lt;code&gt;0.0&lt;/code&gt; is transparent and &lt;code&gt;1.0&lt;/code&gt; is opaque.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cls(col)&lt;/code&gt;&lt;br&gt; Clear screen with color &lt;code&gt;col&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pget(x, y)&lt;/code&gt;&lt;br&gt; Get the color of the pixel at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pset(x, y, col)&lt;/code&gt;&lt;br&gt; Draw a pixel of color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;line(x1, y1, x2, y2, col)&lt;/code&gt;&lt;br&gt; Draw a line of color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;) to (&lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y2&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rect(x, y, w, h, col)&lt;/code&gt;&lt;br&gt; Draw a rectangle of width &lt;code&gt;w&lt;/code&gt;, height &lt;code&gt;h&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rectb(x, y, w, h, col)&lt;/code&gt;&lt;br&gt; Draw the outline of a rectangle of width &lt;code&gt;w&lt;/code&gt;, height &lt;code&gt;h&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;circ(x, y, r, col)&lt;/code&gt;&lt;br&gt; Draw a circle of radius &lt;code&gt;r&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;circb(x, y, r, col)&lt;/code&gt;&lt;br&gt; Draw the outline of a circle of radius &lt;code&gt;r&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;elli(x, y, w, h, col)&lt;/code&gt;&lt;br&gt; Draw an ellipse of width &lt;code&gt;w&lt;/code&gt;, height &lt;code&gt;h&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ellib(x, y, w, h, col)&lt;/code&gt;&lt;br&gt; Draw the outline of an ellipse of width &lt;code&gt;w&lt;/code&gt;, height &lt;code&gt;h&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tri(x1, y1, x2, y2, x3, y3, col)&lt;/code&gt;&lt;br&gt; Draw a triangle with vertices (&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;), (&lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y2&lt;/code&gt;), (&lt;code&gt;x3&lt;/code&gt;, &lt;code&gt;y3&lt;/code&gt;) and color &lt;code&gt;col&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trib(x1, y1, x2, y2, x3, y3, col)&lt;/code&gt;&lt;br&gt; Draw the outline of a triangle with vertices (&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;), (&lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y2&lt;/code&gt;), (&lt;code&gt;x3&lt;/code&gt;, &lt;code&gt;y3&lt;/code&gt;) and color &lt;code&gt;col&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fill(x, y, col)&lt;/code&gt;&lt;br&gt; Fill the area connected with the same color as (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) with color &lt;code&gt;col&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;blt(x, y, img, u, v, w, h, [colkey], [rotate], [scale])&lt;/code&gt;&lt;br&gt; Copy the region of size (&lt;code&gt;w&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;) from (&lt;code&gt;u&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt;) of the image bank &lt;code&gt;img&lt;/code&gt;(0-2) to (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;). If a negative value is assigned to &lt;code&gt;w&lt;/code&gt; and/or &lt;code&gt;h&lt;/code&gt;, the region will be flipped horizontally and/or vertically. If &lt;code&gt;colkey&lt;/code&gt; is specified, it will be treated as a transparent color. If &lt;code&gt;rotate&lt;/code&gt;(in degrees), &lt;code&gt;scale&lt;/code&gt;(1.0 = 100%), or both are specified, the corresponding transformations will be applied.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/blt_figure.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bltm(x, y, tm, u, v, w, h, [colkey], [rotate], [scale])&lt;/code&gt;&lt;br&gt; Copy the region of size (&lt;code&gt;w&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;) from (&lt;code&gt;u&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt;) of the tilemap &lt;code&gt;tm&lt;/code&gt;(0-7) to (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;). If a negative value is assigned to &lt;code&gt;w&lt;/code&gt; and/or &lt;code&gt;h&lt;/code&gt;, the region will be flipped horizontally and/or vertically. If &lt;code&gt;colkey&lt;/code&gt; is specified, it will be treated as a transparent color. If &lt;code&gt;rotate&lt;/code&gt;(in degrees), &lt;code&gt;scale&lt;/code&gt;(1.0 = 100%), or both are specified, the corresponding transformations will be applied. The size of a tile is 8x8 pixels and is stored in a tilemap as a tuple of &lt;code&gt;(tile_x, tile_y)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/images/bltm_figure.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;text(x, y, s, col)&lt;/code&gt;&lt;br&gt; Draw a string &lt;code&gt;s&lt;/code&gt; in color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Audio&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sounds&lt;/code&gt;&lt;br&gt; List of the sounds (instances of the Sound class) (0-63)&lt;br&gt; Example: &lt;code&gt;pyxel.sounds[0].speed = 60&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;musics&lt;/code&gt;&lt;br&gt; List of the musics (instances of the Music class) (0-7)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;play(ch, snd, [tick], [loop], [resume])&lt;/code&gt;&lt;br&gt; Play the sound &lt;code&gt;snd&lt;/code&gt;(0-63) on channel &lt;code&gt;ch&lt;/code&gt;(0-3). If &lt;code&gt;snd&lt;/code&gt; is a list, the sounds will be played in sequence. The playback start position can be specified by &lt;code&gt;tick&lt;/code&gt;(1 tick = 1/120 seconds). If &lt;code&gt;loop&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, loop playback is performed. To resume the previous sound after playback ends, set &lt;code&gt;resume&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;playm(msc, [tick], [loop])&lt;/code&gt;&lt;br&gt; Play the music &lt;code&gt;msc&lt;/code&gt;(0-7). The playback start position can be specified by &lt;code&gt;tick&lt;/code&gt;(1 tick = 1/120 seconds). If &lt;code&gt;loop&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, loop playback is performed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;stop([ch])&lt;/code&gt;&lt;br&gt; Stop playback of the specified channel &lt;code&gt;ch&lt;/code&gt;(0-3). Call &lt;code&gt;stop()&lt;/code&gt; to stop all channels.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;play_pos(ch)&lt;/code&gt;&lt;br&gt; Get the sound playback position of channel &lt;code&gt;ch&lt;/code&gt;(0-3) as a tuple of &lt;code&gt;(sound_no, note_no)&lt;/code&gt;. Return &lt;code&gt;None&lt;/code&gt; when playback has stopped.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Math&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ceil(x)&lt;/code&gt;&lt;br&gt; Return the smallest integer that is greater than or equal to &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;floor(x)&lt;/code&gt;&lt;br&gt; Return the largest integer that is less than or equal to &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sgn(x)&lt;/code&gt;&lt;br&gt; Return &lt;code&gt;1&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is positive, &lt;code&gt;0&lt;/code&gt; when it is &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;-1&lt;/code&gt; when it is negative.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sqrt(x)&lt;/code&gt;&lt;br&gt; Return the square root of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sin(deg)&lt;/code&gt;&lt;br&gt; Return the sine of &lt;code&gt;deg&lt;/code&gt; degrees.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cos(deg)&lt;/code&gt;&lt;br&gt; Return the cosine of &lt;code&gt;deg&lt;/code&gt; degrees.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;atan2(y, x)&lt;/code&gt;&lt;br&gt; Return the arctangent of &lt;code&gt;y&lt;/code&gt;/&lt;code&gt;x&lt;/code&gt; in degrees.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rseed(seed)&lt;/code&gt;&lt;br&gt; Sets the seed of the random number generator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rndi(a, b)&lt;/code&gt;&lt;br&gt; Return a random integer greater than or equal to &lt;code&gt;a&lt;/code&gt; and less than or equal to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rndf(a, b)&lt;/code&gt;&lt;br&gt; Return a random floating-point number greater than or equal to &lt;code&gt;a&lt;/code&gt; and less than or equal to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;nseed(seed)&lt;/code&gt;&lt;br&gt; Set the seed of Perlin noise.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;noise(x, [y], [z])&lt;/code&gt;&lt;br&gt; Return the Perlin noise value for the specified coordinates.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Image Class&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;br&gt; The width and height of the image&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set(x, y, data)&lt;/code&gt;&lt;br&gt; Set the image at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) using a list of strings.&lt;br&gt; Example: &lt;code&gt;pyxel.images[0].set(10, 10, [&#34;0123&#34;, &#34;4567&#34;, &#34;89ab&#34;, &#34;cdef&#34;])&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;load(x, y, filename)&lt;/code&gt;&lt;br&gt; Load an image file (PNG/GIF/JPEG) at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pget(x, y)&lt;/code&gt;&lt;br&gt; Get the color of the pixel at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pset(x, y, col)&lt;/code&gt;&lt;br&gt; Draw a pixel with the color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tilemap Class&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;br&gt; The width and height of the tilemap&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;imgsrc&lt;/code&gt;&lt;br&gt; The image bank (0-2) referenced by the tilemap&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set(x, y, data)&lt;/code&gt;&lt;br&gt; Set the tilemap at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) using a list of strings.&lt;br&gt; Example: &lt;code&gt;pyxel.tilemap(0).set(0, 0, [&#34;0000 0100 a0b0&#34;, &#34;0001 0101 a1b1&#34;])&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;load(x, y, filename, layer)&lt;/code&gt;&lt;br&gt; Load the layer in the drawing order &lt;code&gt;layer&lt;/code&gt;(0-) from the TMX file (Tiled Map File) at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pget(x, y)&lt;/code&gt;&lt;br&gt; Get the tile at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;). A tile is represented as a tuple of &lt;code&gt;(tile_x, tile_y)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pset(x, y, tile)&lt;/code&gt;&lt;br&gt; Draw a &lt;code&gt;tile&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;). A tile is represented as a tuple of &lt;code&gt;(tile_x, tile_y)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sound Class&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;notes&lt;/code&gt;&lt;br&gt; List of notes (0-127). The higher the number, the higher the pitch. Note &lt;code&gt;33&lt;/code&gt; corresponds to &#39;A2&#39;(440Hz). Rest notes are represented by &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tones&lt;/code&gt;&lt;br&gt; List of tones (0:Triangle / 1:Square / 2:Pulse / 3:Noise)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;volumes&lt;/code&gt;&lt;br&gt; List of volumes (0-7)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;effects&lt;/code&gt;&lt;br&gt; List of effects (0:None / 1:Slide / 2:Vibrato / 3:FadeOut / 4:Half-FadeOut / 5:Quarter-FadeOut)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;speed&lt;/code&gt;&lt;br&gt; Playback speed. &lt;code&gt;1&lt;/code&gt; is the fastest, and the larger the number, the slower the playback speed. At &lt;code&gt;120&lt;/code&gt;, the length of one note becomes 1 second.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set(notes, tones, volumes, effects, speed)&lt;/code&gt;&lt;br&gt; Set notes, tones, volumes, and effects using a string. If the length of tones, volumes, or effects are shorter than the notes, they will be repeated from the beginning.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set_notes(notes)&lt;/code&gt;&lt;br&gt; Set the notes using a string made of &#39;CDEFGAB&#39;+&#39;#-&#39;+&#39;01234&#39; or &#39;R&#39;. It is case-insensitive, and whitespace is ignored.&lt;br&gt; Example: &lt;code&gt;pyxel.sounds[0].set_notes(&#34;G2B-2D3R RF3F3F3&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set_tones(tones)&lt;/code&gt;&lt;br&gt; Set the tones with a string made of &#39;TSPN&#39;. Case-insensitive and whitespace is ignored.&lt;br&gt; Example: &lt;code&gt;pyxel.sounds[0].set_tones(&#34;TTSS PPPN&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set_volumes(volumes)&lt;/code&gt;&lt;br&gt; Set the volumes with a string made of &#39;01234567&#39;. Case-insensitive and whitespace is ignored.&lt;br&gt; Example: &lt;code&gt;pyxel.sounds[0].set_volumes(&#34;7777 7531&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set_effects(effects)&lt;/code&gt;&lt;br&gt; Set the effects with a string made of &#39;NSVFHQ&#39;. Case-insensitive and whitespace is ignored.&lt;br&gt; Example: &lt;code&gt;pyxel.sounds[0].set_effects(&#34;NFNF NVVS&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Music Class&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;seqs&lt;/code&gt;&lt;br&gt; A two-dimensional list of sounds (0-63) across multiple channels&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set(seq0, seq1, seq2, ...)&lt;/code&gt;&lt;br&gt; Set the lists of sound (0-63) for each channel. If an empty list is specified, that channel will not be used for playback.&lt;br&gt; Example: &lt;code&gt;pyxel.musics[0].set([0, 1], [], [3])&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced API&lt;/h3&gt; &#xA;&lt;p&gt;Pyxel includes an &#34;Advanced API&#34; that is not mentioned in this reference, as it may confuse users or require specialized knowledge to use.&lt;/p&gt; &#xA;&lt;p&gt;If you are confident in your skills, try creating amazing works using &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/python/pyxel/__init__.pyi&#34;&gt;this&lt;/a&gt; as a guide!&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Submitting Issues&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/kitao/pyxel/issues&#34;&gt;Issue Tracker&lt;/a&gt; to submit bug reports and feature or enhancement requests. Before submitting a new issue, make sure there are no similar open issues.&lt;/p&gt; &#xA;&lt;h3&gt;Functional Testing&lt;/h3&gt; &#xA;&lt;p&gt;Anyone who manually tests the code and reports bugs or suggestions for enhancements in the &lt;a href=&#34;https://github.com/kitao/pyxel/issues&#34;&gt;Issue Tracker&lt;/a&gt; is very welcome!&lt;/p&gt; &#xA;&lt;h3&gt;Submitting Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;Patches and fixes are accepted in the form of pull requests (PRs). Make sure that the issue the pull request addresses is open in the Issue Tracker.&lt;/p&gt; &#xA;&lt;p&gt;Submitting a pull request implies that you agree to license your contribution under the &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/docs/faq-en.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kitao/pyxel/wiki/Pyxel-User-Examples&#34;&gt;User Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/kitao&#34;&gt;Developer X account&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Pyxel is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/kitao/pyxel/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;. It can be reused in proprietary software, provided that all copies of the software or its substantial portions include a copy of the MIT License terms and a copyright notice.&lt;/p&gt; &#xA;&lt;h2&gt;Recruiting Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Pyxel is looking for sponsors on GitHub Sponsors. Please consider sponsoring Pyxel to support its continued maintenance and feature development. As a benefit, sponsors can consult directly with the Pyxel developer. For more details, please visit &lt;a href=&#34;https://github.com/sponsors/kitao&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>