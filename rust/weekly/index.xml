<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:40:54Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xelis-project/xelis-blockchain</title>
    <updated>2024-05-05T01:40:54Z</updated>
    <id>tag:github.com,2024-05-05:/xelis-project/xelis-blockchain</id>
    <link href="https://github.com/xelis-project/xelis-blockchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A private blockDAG using Homomorphic Encryption with Smart Contract support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XELIS&lt;/h1&gt; &#xA;&lt;p&gt;All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;A from scratch blockchain made in Rust and powered by Tokio, using account model. XELIS is based on an event-driven system combined with the native async/await and works with a unique and from scratch p2p system. This allow to be notified on any events happening on the network and to be able to react to them instead of checking periodically for updates.&lt;/p&gt; &#xA;&lt;p&gt;BlockDAG is enabled to improve the scalability and the security of the network. Homomorphic Encryption using ElGamal is used to provide privacy on transactions (transfered amounts) and balances.&lt;/p&gt; &#xA;&lt;p&gt;ElGamal cryptosystem was choosen because it&#39;s a well known and studied encryption algorithm which has homomorphism features. ElGamal is fast and is used in combination with Ristretto255 curve to provide a good level of security (~128 bits of security). Homomorphic operations available using ElGamal are addition/subtraction between ciphertexts and/or plaintext and multiplication against plaintext value.&lt;/p&gt; &#xA;&lt;p&gt;Account Model allows to have a more flexible system than UTXO model and to have a better privacy because there is no need to link inputs and outputs, which provide real fungibility. It allows also the fast-sync feature to only download the last state of the blockchain instead of downloading all the history.&lt;/p&gt; &#xA;&lt;p&gt;Pruning system is also available to reduce the size of the blockchain by removing old blocks and transactions.&lt;/p&gt; &#xA;&lt;p&gt;We also aims to enabled Smart Contracts support in the future.&lt;/p&gt; &#xA;&lt;p&gt;We provide different built-in networks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mainnet: Released April 20, 2024.&lt;/li&gt; &#xA; &lt;li&gt;Testnet: Running&lt;/li&gt; &#xA; &lt;li&gt;Devnet: this network is used for local development purpose where you want to create your own local chain. It has no peers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cchudant&#34;&gt;@cchudant&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimized decoding RistrettoPoint implementation (ECDLP).&lt;/li&gt; &#xA; &lt;li&gt;Twisted ElGamal implementation along ZK-Proofs integration for Confidential Transactions.&lt;/li&gt; &#xA; &lt;li&gt;To read more, please see &lt;a href=&#34;https://github.com/xelis-project/xelis-he&#34;&gt;XELIS-HE&lt;/a&gt; framework created by him.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deroholic&#34;&gt;@deroholic&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Difficulty adjustment algorithm using Kalman-Filter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you to every people testing actively the code base, honest miners and every future contributors!&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;p&gt;The main features of XELIS are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BlockDAG&lt;/strong&gt;: reduce orphaned blocks rate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Egalitarian Mining&lt;/strong&gt;: any CPU or GPU can mine XELIS easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Privacy&lt;/strong&gt;: Homomorphic Encryption allows to have encrypted balances and encrypted transfered amounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Confidential Asset&lt;/strong&gt;: Any asset deployed on XELIS network will have the same privacy and functionality like XELIS. Not just a number in a Smart Contract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Event system&lt;/strong&gt;: every event happening on the network (daemon or wallet) can be detected and notified easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instant Sync&lt;/strong&gt;: Your wallet balances and history is synced in few seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart Contracts&lt;/strong&gt;: Create and deploy unstoppable decentralized applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrated addresses&lt;/strong&gt;: introduce any data in your wallet address to share informations in a transaction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to use&lt;/strong&gt;: We aims to provide the most easiest platform to build and use daily.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Objectives&lt;/h2&gt; &#xA;&lt;p&gt;The main objectives of XELIS are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide privacy on transactions / balances.&lt;/li&gt; &#xA; &lt;li&gt;Provide Smart Contracts support.&lt;/li&gt; &#xA; &lt;li&gt;Secure and fast.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Others objectives in mind are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide real custom assets working as the native coin.&lt;/li&gt; &#xA; &lt;li&gt;Designed as CPU/GPU mining friendly to improve decentralization as possible.&lt;/li&gt; &#xA; &lt;li&gt;Simple to use.&lt;/li&gt; &#xA; &lt;li&gt;Community driven decisions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;h3&gt;Network&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expected Block Time is &lt;code&gt;15&lt;/code&gt; seconds&lt;/li&gt; &#xA; &lt;li&gt;Address prefix is &lt;code&gt;xel&lt;/code&gt; on mainnet and &lt;code&gt;xet&lt;/code&gt; for testnet/devnet&lt;/li&gt; &#xA; &lt;li&gt;Transaction fee is &lt;code&gt;0.01000&lt;/code&gt; XEL per KB&lt;/li&gt; &#xA; &lt;li&gt;Up to &lt;code&gt;8&lt;/code&gt; decimals&lt;/li&gt; &#xA; &lt;li&gt;Maximum supply: &lt;code&gt;18.4&lt;/code&gt; millions&lt;/li&gt; &#xA; &lt;li&gt;Maximum block size: &lt;code&gt;1.25&lt;/code&gt;&amp;nbsp;MB&lt;/li&gt; &#xA; &lt;li&gt;Difficulty adjustment algorithm: retarget at every block&lt;/li&gt; &#xA; &lt;li&gt;Block reward emission: retarget at every block (Smooth decrease)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Daemon&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default P2P port is &lt;code&gt;2125&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Defaut RPC Server port is &lt;code&gt;8080&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wallet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default RPC Server port is &lt;code&gt;8081&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Include extra fees when sending coins to a not-yet registered address&lt;/li&gt; &#xA; &lt;li&gt;Support of Smart Contracts (xelis-vm)&lt;/li&gt; &#xA; &lt;li&gt;Privacy (through Homomorphic Encryption)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BlockDAG&lt;/h2&gt; &#xA;&lt;p&gt;XELIS use a blockDAG with following rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A block is considered &lt;code&gt;Sync Block&lt;/code&gt; when the block height is less than &lt;code&gt;TOP_HEIGHT - STABLE_LIMIT&lt;/code&gt; and it&#39;s the unique block at a specific height (or only ordered block at its height and don&#39;t have lower cumulative difficulty than previous blocks).&lt;/li&gt; &#xA; &lt;li&gt;A block is considered &lt;code&gt;Side Block&lt;/code&gt; when block height is less than or equal to height of past 8 topological blocks.&lt;/li&gt; &#xA; &lt;li&gt;A block is considered &lt;code&gt;Orphaned&lt;/code&gt; when the block is not ordered in DAG (no topological height for it).&lt;/li&gt; &#xA; &lt;li&gt;A height is not unique anymore.&lt;/li&gt; &#xA; &lt;li&gt;Topo height is unique for each block, but can change when the DAG is re-ordered up to &lt;code&gt;TOP_HEIGHT - STABLE_LIMIT&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can have up to 3 previous blocks in a block.&lt;/li&gt; &#xA; &lt;li&gt;For mining, you have to mine on one of 3 of the most heavier tips.&lt;/li&gt; &#xA; &lt;li&gt;Block should not have deviated too much from main chain / heavier tips.&lt;/li&gt; &#xA; &lt;li&gt;Maximum 9% of difficulty difference between Tips selected in the same block.&lt;/li&gt; &#xA; &lt;li&gt;Side Blocks receive only 30% of block reward.&lt;/li&gt; &#xA; &lt;li&gt;Supply is re-calculated each time the block is re-ordered because its based on topo order.&lt;/li&gt; &#xA; &lt;li&gt;Transactions and miner rewards are re-computed when a new block is added and the block there linked to is not yet in stable topo height.&lt;/li&gt; &#xA; &lt;li&gt;A same transaction can be added in more than a block if they are not in the same tip branch. Client protocol will execute it only one time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Topoheight represents how many unique blocks there is in the blockchain ordered by DAG.&lt;/p&gt; &#xA;&lt;p&gt;A block ordered is a valid and executed one.&lt;/p&gt; &#xA;&lt;p&gt;Topoheight order is unstable and may change until the blocks are in the stable height.&lt;/p&gt; &#xA;&lt;p&gt;Longest chain is the one selected by nodes. But for tips branches conflicts, cumulative difficulty is used to select the main chain.&lt;/p&gt; &#xA;&lt;h2&gt;Homomorphic Encryption&lt;/h2&gt; &#xA;&lt;p&gt;Homomorphic Encryption (HE) will allow to add privacy on transactions and accounts by doing computation while staying in encrypted form. Each balances, transaction assets values are in encrypted form and nobody can determine the real value of it except involved parties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This part is not yet deployed and is under heavy work.&lt;/p&gt; &#xA;&lt;h2&gt;Mining&lt;/h2&gt; &#xA;&lt;p&gt;Mining capabilities of XELIS are a bit differents from others chains because of standards being not implemented. Each job send to a miner is a &lt;code&gt;BlockMiner&lt;/code&gt; instance in hex format.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;BlockMiner&lt;/code&gt; is in following format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;header work hash: 32 bytes&lt;/li&gt; &#xA; &lt;li&gt;timestamp (u64 for milliseconds): 8 bytes (BigEndian)&lt;/li&gt; &#xA; &lt;li&gt;nonce (u64): 8 bytes (BigEndian)&lt;/li&gt; &#xA; &lt;li&gt;extra nonce: 32 bytes&lt;/li&gt; &#xA; &lt;li&gt;miner public key: 32 bytes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The total block work size should be equal to 120 bytes. Header work hash is the immutable part of a block work, its a hash calculated using &lt;code&gt;Blake3&lt;/code&gt; hashing algorithm with the following format as input:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;block version: 1 byte&lt;/li&gt; &#xA; &lt;li&gt;block height (u64): 8 bytes (BigEndian)&lt;/li&gt; &#xA; &lt;li&gt;Hash of the tips: 32 bytes&lt;/li&gt; &#xA; &lt;li&gt;Hash of the transactions hashes: 32 bytes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The header work has to be equal to 73 bytes exactly and its hash to 32 bytes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Miner key is not included in the immutable of the block work to be have generic block template that can be compatible with any miner.&lt;/p&gt; &#xA;&lt;p&gt;All hashes are calculated using the &lt;code&gt;Blake3&lt;/code&gt; hashing algorithm except the Proof-Of-Work hash.&lt;/p&gt; &#xA;&lt;p&gt;POW Hash should be calculated from the &lt;code&gt;BlockMiner&lt;/code&gt; format and compared against the target difficulty.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: It is recommended to use the GetWork WebSocket server to be notified of new block work and submit correct work.&lt;/p&gt; &#xA;&lt;p&gt;Mining jobs are send only when a new block is found or when a new TX is added in mempool. Miners software are recommended to update themselves the block timestamp (or at least every 500ms) for best network difficulty calculation.&lt;/p&gt; &#xA;&lt;p&gt;The POW Hashing algorithm is &lt;a href=&#34;https://github.com/xelis-project/xelis-hash&#34;&gt;xelis-hash&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Client Protocol&lt;/h2&gt; &#xA;&lt;p&gt;XELIS integrate along with BlockDAG a way to accept multiple times the same TX and only execute it one time. Instead of excluding the whole block because we have a collision with another blockDAG branch for a TX, we just don&#39;t execute the TX and keep its hash.&lt;/p&gt; &#xA;&lt;p&gt;The same TX can be contained in multiple blocks only if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TX is not executed in stable height&lt;/li&gt; &#xA; &lt;li&gt;TX is not included in block Tips (previous blocks)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, for more security, user account should only do TXs on the same chain/tip to prevent any orphaned TX. An orphaned TX can happens when two differents TXs (but same owner) with the same nonce are sent in two differents branchs.&lt;/p&gt; &#xA;&lt;p&gt;During the generation of the DAG order (linking unique topoheight to a block hash), the first block being ordered will execute the TX first.&lt;/p&gt; &#xA;&lt;p&gt;This feature allows to accept others branch tips even if transactions are the same and prevent more orphans blocks when branches are merged.&lt;/p&gt; &#xA;&lt;h2&gt;Transaction&lt;/h2&gt; &#xA;&lt;p&gt;Transaction types supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transfer: possibility to send many assets to many addresses in the same TX (up to 255 outputs inside)&lt;/li&gt; &#xA; &lt;li&gt;Burn: publicly burn amount of a specific asset and use this TX as proof of burn (coins are completely deleted from circulation)&lt;/li&gt; &#xA; &lt;li&gt;Call Contract: call a Smart Contract with specific parameters and list of assets to deposit (WIP) (NOTE: Multi Call Contract in the same TX ?)&lt;/li&gt; &#xA; &lt;li&gt;Deploy Contract: deploy a new (valid) Smart Contract on chain (WIP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At this moment, transactions are public and have the following data.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Field&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;owner&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PublicKey&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Signer of this transaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;data&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TransactionType&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Type with data included of this transaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fee&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Fees to be paid by the owner for including this TX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nonce&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Matching nonce of balance to be validated and prevent any replay TX attack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;signature&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Signature&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Valid signature to prove that the owner validated this TX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Transactions support any registered asset natively.&lt;/p&gt; &#xA;&lt;p&gt;To prevent any replay attack or double spending, each TX should include a nonce that match the account balance. After each TX, the nonce is incremented by 1.&lt;/p&gt; &#xA;&lt;h2&gt;Integrated Address&lt;/h2&gt; &#xA;&lt;p&gt;Integrated address are base address with custom data integrated. For example, you can integrate in it a unique identifier that will be integrated in the future transaction done using it. Its helpful to determine easily which account to link a transaction with an account/order on service side.&lt;/p&gt; &#xA;&lt;p&gt;Maximum data allowed is 1KB (same as transaction payload).&lt;/p&gt; &#xA;&lt;p&gt;Every data is integrated in the transaction payload when using an integrated address.&lt;/p&gt; &#xA;&lt;h2&gt;P2p (Encrypted Network)&lt;/h2&gt; &#xA;&lt;p&gt;All transfered data are using a custom Serializer/Deserializer made by hand to transform a struct representation in raw bytes directly. This serialization is done using the fixed position of each fields and their corresponding bits size.&lt;/p&gt; &#xA;&lt;p&gt;Before sending a packet, we&#39;re encrypting it using ChaCha20-Poly1305 algorithm to prevent network traffic analysis and authenticate each transfered data.&lt;/p&gt; &#xA;&lt;p&gt;Every data transfered is done through the Packet system which allow easily to read &amp;amp; transfer data and doing the whole serialization itself.&lt;/p&gt; &#xA;&lt;p&gt;The connection for a new peer (took from the queue or a new incoming connections) is executed through a unique tokio task with the same allocated buffer for handshake. This prevents any DoS attack on creating multiple task and verifying connection.&lt;/p&gt; &#xA;&lt;p&gt;When the peer is verified and valid, we create him his own tasks. One for reading incoming packets and one for writing packets to him. By separating both directions in two differents task it prevents blocking the communication of opposed side.&lt;/p&gt; &#xA;&lt;p&gt;For transactions propagation, we keep in cache last N transactions sent or received from a peer to not send the same data twice during propagation.&lt;/p&gt; &#xA;&lt;p&gt;The daemon also have 3 tokio tasks running:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maintains connections with seed nodes&lt;/li&gt; &#xA; &lt;li&gt;Chain sync (which select a random peer for syncing its chain)&lt;/li&gt; &#xA; &lt;li&gt;Ping task which build a generic ping packet which is send to every peers connected (or build a specific one for each when its necessary)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pruning Mode&lt;/h3&gt; &#xA;&lt;p&gt;This allows anyone who want to run a light node to reduce the blockchain size by deleting blocks, transactions and versioned balances. The pruned topoheight can only be at a &lt;code&gt;Sync Block&lt;/code&gt; and behind at least &lt;code&gt;PRUNE_SAFETY_LIMIT&lt;/code&gt; blocks of the top topoheight.&lt;/p&gt; &#xA;&lt;p&gt;For wallets connected to a pruned node, you can&#39;t retrieve transactions history and miner rewards which happened before the pruned topoheight. But your balances are still up-to-date with the chain and if your wallets already synced them, they stay in your wallet database.&lt;/p&gt; &#xA;&lt;p&gt;The security of the chain is not reduced as all your blocks were already verified by your own node locally.&lt;/p&gt; &#xA;&lt;h3&gt;Fast Sync&lt;/h3&gt; &#xA;&lt;p&gt;Fast sync mode allow you to sync really fast the necessary data only to run a correct and valid version of the chain. For this we request a peer to send us its chain state at a stable point, which include all accounts nonces, assets, balances, top blocks. So in future, when the chain will be really heavy, anyone can still join it by using fast sync system, which is compatible with the pruning mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: You should use fast sync mode only with a trusted peer, because they can send you a potential fake chain.&lt;/p&gt; &#xA;&lt;h3&gt;Boost Sync&lt;/h3&gt; &#xA;&lt;p&gt;This is requesting the full chain to others nodes, but faster. Boost sync mode can be enabled using &lt;code&gt;--allow-boost-sync-mode&lt;/code&gt;. This mode use more resources but sync much faster. It is faster because it&#39;s requesting blocks to sync in parallel, instead of traditional synchronization that would just request one block, verify it, execute it, repeat. It&#39;s not enabled by default to prevent too much load on nodes.&lt;/p&gt; &#xA;&lt;p&gt;This is the perfect mix between Fast sync and traditional chain sync, to have the full ledger while being faster.&lt;/p&gt; &#xA;&lt;h3&gt;Packets&lt;/h3&gt; &#xA;&lt;p&gt;This parts explains the most importants packets used in XELIS network to communicate over the P2p network.&lt;/p&gt; &#xA;&lt;h4&gt;Key Exchange&lt;/h4&gt; &#xA;&lt;p&gt;Key Exchange is the real first packet to be sent when creating a new connection. This allow to exchange symetric encryption keys between peer to establish an encrypted communication channel over TCP.&lt;/p&gt; &#xA;&lt;p&gt;Currently, we are using ChaCha20-Poly1305 algorithm to encrypt / decrypt every packets.&lt;/p&gt; &#xA;&lt;p&gt;This packet can be sent later to rotate the key of a peer. This is currently done every 1 GB of data sent.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re using two different symetric keys for encryption per Peer. One key is from us, to encrypt our packet, and the other key is to decrypt peer&#39;s packets.&lt;/p&gt; &#xA;&lt;h4&gt;Handshake&lt;/h4&gt; &#xA;&lt;p&gt;Handshake packet must be the first packet sent with the blockchain state inside to upgrade a connection to a peer. If valid, the peer will send the same packet with is own blockchain state.&lt;/p&gt; &#xA;&lt;p&gt;Except at beginning, this packet should never be sent again.&lt;/p&gt; &#xA;&lt;h4&gt;Ping&lt;/h4&gt; &#xA;&lt;p&gt;Ping packet is sent at an regular interval and inform peers of the our blockchain state. Every 15 minutes, the packet can contains up to &lt;code&gt;MAX_LEN&lt;/code&gt; sockets addresses (IPv4 or IPv6) to help others nodes to extends theirs peers list.&lt;/p&gt; &#xA;&lt;h4&gt;Chain Sync&lt;/h4&gt; &#xA;&lt;p&gt;We select randomly a peer which is higher in height from the peers list than us and send him a chain request.&lt;/p&gt; &#xA;&lt;p&gt;The chain request includes last &lt;code&gt;CHAIN_SYNC_REQUEST_MAX_BLOCKS&lt;/code&gt; blocks hashes of our chain with theirs topoheight espaced exponentially. This data is used by the select peer to try to find a common point with our chain and his own (block hash must be at same topoheight as other peer). If selected peer found a common point, he add up to &lt;code&gt;CHAIN_SYNC_RESPONSE_MAX_BLOCKS&lt;/code&gt; blocks hashes ordered by block height.&lt;/p&gt; &#xA;&lt;p&gt;Through the &#34;ask and await&#34; request object system, we ask the complete block (block header with transactions included) and add it to chain directly.&lt;/p&gt; &#xA;&lt;p&gt;Chain sync is requested with a minimum interval of &lt;code&gt;CHAIN_SYNC_DELAY&lt;/code&gt; seconds.&lt;/p&gt; &#xA;&lt;h4&gt;Block Propagation&lt;/h4&gt; &#xA;&lt;p&gt;Block propagation packet contains the block header only. Its sent to all peers who have theirs height minus our height less than &lt;code&gt;STABLE_LIMIT&lt;/code&gt;. To build the block, we retrieve transactions from mempool. If a transaction is not found in the mempool, we request it from the same peer in order to build it.&lt;/p&gt; &#xA;&lt;h4&gt;Transaction Propagation&lt;/h4&gt; &#xA;&lt;p&gt;Transaction propagation packet contains the hash only to prevent sending the TX. Its also backed by a cache per peer to knows if the transaction was already received from him / send to him.&lt;/p&gt; &#xA;&lt;h2&gt;Storage&lt;/h2&gt; &#xA;&lt;p&gt;All theses data are saved in plaintext.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tree&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Key Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Value Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;transactions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Transaction&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save the whole transaction based on its hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;blocks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Block Header&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save the block header only based on its hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;blocks_at_height&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Array of Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save all blocks hash at a specific height&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;extra&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bytes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No specific type&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save the highest topo height, pruned topoheight and TIPS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;topo_by_hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save a block hash at a specific topo height&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;hash_by_topo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save a topo height for a specific block hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cumulative_difficulty&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save the cumulative difficulty for each block hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;assets&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Verify if an assets exist and its registration height&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;rewards&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Save the block reward&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;supply&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Calculated supply (past + block reward) at each block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;difficulty&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Difficulty for each block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tx_blocks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Array of Hash&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;All blocks in which this TX hash is included&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;balances&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Custom&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Last topoheight of versioned balance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nonces&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Public Key&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Integer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Store the highest topoheight of versioned nonce&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;versioned_balances&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Custom&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Versioned Balance&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Key is composed of topoheight + asset + public key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;versioned_nonces&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Custom&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Versioned Nonce&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Key is composed of topoheight + public key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;balances&lt;/code&gt; has a custom key which is composed of 32 bytes of Public Key and 32 bytes of Asset.&lt;/li&gt; &#xA; &lt;li&gt;Balances and nonces are versioned, which means they are stored each time a change happened in chain.&lt;/li&gt; &#xA; &lt;li&gt;Using a Tree per version is too heavy because of overhead per trees, solution is to hash a generated key based on properties.&lt;/li&gt; &#xA; &lt;li&gt;Assets registered have in value their topoheight at which it was registered.&lt;/li&gt; &#xA; &lt;li&gt;Supply and block rewards are only stored when the block is topologically ordered&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The database engine used is sled. It may changes in future.&lt;/p&gt; &#xA;&lt;p&gt;Current overhead per block:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;blocks&lt;/code&gt; saving Block header (132 bytes with no TXs) value using Hash (32 bytes) key.&lt;/li&gt; &#xA; &lt;li&gt;Trees &lt;code&gt;topo_by_hash&lt;/code&gt; and &lt;code&gt;hash_by_topo&lt;/code&gt; saving both Hash (32 bytes) &amp;lt;=&amp;gt; topoheight (8 bytes) pointers. (x2)&lt;/li&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;difficulty&lt;/code&gt; saving Difficulty value of a block (up to 33 bytes) using Hash (32 bytes) key.&lt;/li&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;cumulative_difficulty&lt;/code&gt; saving the cumulative difficulty value (up to 33 bytes) of a topoheight (8 bytes).&lt;/li&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;rewards&lt;/code&gt; saving block reward value (8 bytes) using topoheight (8 bytes) key.&lt;/li&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;supply&lt;/code&gt; saving current circulating supply value (8 bytes) using topoheight (8 bytes) key.&lt;/li&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;versioned_balances&lt;/code&gt; is updated at each block (for miner rewards), and also for each account that had interactions (transactions): 72 bytes for key and 16 bytes for value.&lt;/li&gt; &#xA; &lt;li&gt;Tree &lt;code&gt;versioned_nonces&lt;/code&gt; is updated for each account that send at least one TX per topoheight: 40 bytes for key and 16 bytes for value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At this moment with current implementation, minimal overhead per new account is 208 bytes for keys and 56 bytes for values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;balances&lt;/code&gt; Public Key + Asset (64 bytes) =&amp;gt; topoheight of last versioned balance (8 bytes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nonces&lt;/code&gt; Public Key (32 bytes) =&amp;gt; topoheight of last versioned nonce (8 bytes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;versioned_balances&lt;/code&gt; Public Topoheight + Key + Asset (72 bytes) =&amp;gt; Versioned Balance (16 bytes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;versioned_nonces&lt;/code&gt; Topoheight + Public Key (40 bytes) =&amp;gt; Versioned Nonce (16 bytes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An optimized version could be done to reduce further the disk usage by creating pointers. Instead of saving multiple times the whole Public Key (32 bytes), we create a pointer table to which a u64 value is assigned. And we store this u64 id instead of the whole Public Key, asset..&lt;/p&gt; &#xA;&lt;h2&gt;Wallet&lt;/h2&gt; &#xA;&lt;p&gt;Wallet keep tracks of all your transactions on chain, all your assets you own.&lt;/p&gt; &#xA;&lt;p&gt;When creating a new wallet, it generate a new random secure &#34;master key&#34; which will be encrypted by a password hashed. This master key allows to change easily the password of your wallet because you only have to save new encrypted version of it.&lt;/p&gt; &#xA;&lt;p&gt;The master key is also the one which will be able to decrypt/encrypt all your wallet storage.&lt;/p&gt; &#xA;&lt;p&gt;This way allow to save securely and easily data on any device.&lt;/p&gt; &#xA;&lt;p&gt;Password hashing algorithm used is Argon2id with a configuration of 15 MB and 16 iterations.&lt;/p&gt; &#xA;&lt;h3&gt;Storage&lt;/h3&gt; &#xA;&lt;p&gt;Wallet implement a fully-encrypted storage system with following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tree names are hashed with generated salt&lt;/li&gt; &#xA; &lt;li&gt;Keys data are hashed with generated salt&lt;/li&gt; &#xA; &lt;li&gt;Values are encrypted using XChaCha20Poly1305 and a random newly generated nonce each time its saved.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exception for assets list which has its key encrypted to be able to retrieve them later.&lt;/p&gt; &#xA;&lt;p&gt;Hash algorithm used is Blake3 for keys / tree names. The random salt generated is a 64 bytes length. This simple system prevent someone to read / use the data without the necessary secret key.&lt;/p&gt; &#xA;&lt;h3&gt;Data Type and Value&lt;/h3&gt; &#xA;&lt;p&gt;This protocol allows to transfer data through a custom wallet address called &lt;code&gt;integrated address&lt;/code&gt;. It will simply integrate encoded data in the wallet address which can be used to send specific data to the wallet when creating a transaction. Each transaction can reserve up to 1 KB of space (for encrypted data transfering for example).&lt;/p&gt; &#xA;&lt;p&gt;You can create simple service / communication on chain through wallets while staying anonymous and in encrypted form.&lt;/p&gt; &#xA;&lt;p&gt;Actually, you can have following values through API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Null value representation&lt;/li&gt; &#xA; &lt;li&gt;Boolean&lt;/li&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Unsigned numbers (&lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;u16&lt;/code&gt;, &lt;code&gt;u32&lt;/code&gt;, &lt;code&gt;u64&lt;/code&gt;, &lt;code&gt;u128&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And these types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Value (which is only one value, can be used for PaymentID representation)&lt;/li&gt; &#xA; &lt;li&gt;Array (of any different values types)&lt;/li&gt; &#xA; &lt;li&gt;Fields (which can be used to represent custom &lt;code&gt;struct&lt;/code&gt; for example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Http Server run using Actix Framework and serve the JSON-RPC API and WebSocket.&lt;/p&gt; &#xA;&lt;h3&gt;JSON-RPC&lt;/h3&gt; &#xA;&lt;p&gt;JSON-RPC is available on &lt;code&gt;/json_rpc&lt;/code&gt; route on RPC server address that you set (or default one). For a much more detailed API, see the API documentation &lt;a href=&#34;https://raw.githubusercontent.com/xelis-project/xelis-blockchain/master/API.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;WebSocket&lt;/h3&gt; &#xA;&lt;p&gt;WebSocket allow JSON-RPC call and any app to be notified when a specific event happens on the daemon. It is running on &lt;code&gt;/ws&lt;/code&gt; route on same RPC server address.&lt;/p&gt; &#xA;&lt;p&gt;Example to subscribe to a registered event in the WebSocket connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;jsonrpc&#34;: &#34;2.0&#34;,&#xA;    &#34;id&#34;: 1,&#xA;    &#34;method&#34;: &#34;subscribe&#34;,&#xA;    &#34;params&#34;: {&#xA;        &#34;notify&#34;: &#34;new_block&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can notify to several events, just do a request for each event you want. The daemon will send you every events happening as long as you don&#39;t unsubscribe or close the WebSocket.&lt;/p&gt; &#xA;&lt;p&gt;Example to unsubscribe to a specific event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;jsonrpc&#34;: &#34;2.0&#34;,&#xA;    &#34;id&#34;: 1,&#xA;    &#34;method&#34;: &#34;unsubscribe&#34;,&#xA;    &#34;params&#34;: {&#xA;        &#34;notify&#34;: &#34;new_block&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Daemon&lt;/h4&gt; &#xA;&lt;p&gt;Events availables to subscribe on the daemon API are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;block_ordered&lt;/code&gt;: when a block is ordered by DAG&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable_height_changed&lt;/code&gt;: when the stable height has been updated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;peer_connected&lt;/code&gt;: when a new peer has connected to the node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;peer_disconnected&lt;/code&gt;: when a peer disconnected from us&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;peer_peer_list_updated&lt;/code&gt;: when the peerlist of a peer has been updated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;peer_state_updated&lt;/code&gt;: when the peer state has been updated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;peer_peer_disconnected&lt;/code&gt;: when a common peer disconnect from one of our peer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;new_block&lt;/code&gt;: when a new block is accepted by chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transaction_added_in_mempool&lt;/code&gt;: when a new valid transaction is added in mempool&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transaction_executed&lt;/code&gt;: when a transaction has been included in a valid block &amp;amp; executed on chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transaction_sc_result&lt;/code&gt;: when a valid TX SC Call hash has been executed by chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;new_asset&lt;/code&gt;: when a new asset has been registered&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;block_ordered&lt;/code&gt; when a block is ordered for the first time or reordered to a new topoheight&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;block_orphaned&lt;/code&gt; when a block that was previously ordered became orphaned because it was not selected in DAG reorg.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Wallet&lt;/h4&gt; &#xA;&lt;p&gt;Events availables to subscribe on the wallet API are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;new_topoheight&lt;/code&gt;: when a new topoheight is sent by the daemon&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;new_asset&lt;/code&gt;: when a new asset has been added to the wallet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;new_transaction&lt;/code&gt;: when a new transaction (coinbase, outgoing, incoming) has been added to wallet history.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;balance_changed&lt;/code&gt;: when a balance changes has been detected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rescan&lt;/code&gt;: when a rescan happened on the wallet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;online&lt;/code&gt;: when the wallet network state is now online.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;offline&lt;/code&gt;: whenthe wallet network state is now offline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;XSWD&lt;/h3&gt; &#xA;&lt;p&gt;XSWD (XELIS Secure WebSocket DApp) Protocol is a WebSocket started on unique port &lt;code&gt;44325&lt;/code&gt; and path &lt;code&gt;/xswd&lt;/code&gt; for easy findings from dApps. Its job is to provide an easy to access and secure way to communicate from a desktop/CLI wallet to any dApp (software or in-browser/websites directly).&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s based on the JSON-RPC API and have exact same methods for easy compabitility, the only exception is how verification is done. On a traditional RPC-Server, if authentication is enabled, you must provide a username/password.&lt;/p&gt; &#xA;&lt;p&gt;XSWD stay open but request a manual action from user to accept the connection of the dApp on the XSWD Server. When accepted, the dApp can requests JSON-RPC methods easily and the user can set/configure a permission for each method. If no permission is found for a request method, it will be prompted/asked to the user for manual verification.&lt;/p&gt; &#xA;&lt;p&gt;XSWD also have the ability to sends JSON-RPC requests to the daemon directly. For this, set the prefix &lt;code&gt;node.&lt;/code&gt; in front of daemon requests, it will not be requested to the user as it&#39;s public on-chain data. For wallets RPC methods, set the prefix &lt;code&gt;wallet.&lt;/code&gt; which will requests/use the permission set by the user.&lt;/p&gt; &#xA;&lt;p&gt;DApp can also request to sign the &lt;code&gt;ApplicationData&lt;/code&gt; to persist the configured permissions on its side and then provide it when user would reconnect later.&lt;/p&gt; &#xA;&lt;p&gt;First JSON message from the dApp must be in following format to identify the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;id&#34;: &#34;0000006b2aec4651b82111816ed599d1b72176c425128c66b2ab945552437dc9&#34;,&#xA;    &#34;name&#34;: &#34;XELIS Example&#34;,&#xA;    &#34;description&#34;: &#34;Description example of up to 255 characters&#34;,&#xA;    &#34;url&#34;: &#34;https://xelis.io&#34;,&#xA;    &#34;permissions&#34;: {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;signature&lt;/code&gt; field and provide signed permissions if your dApp requested a signature from wallet in previous connection.&lt;/p&gt; &#xA;&lt;p&gt;If dApp is accepted by user through XSWD, you will receive the following response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;id&#34;: null,&#xA;    &#34;jsonrpc&#34;: &#34;2.0&#34;,&#xA;    &#34;result&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, an error like this will be sent and the connection will be closed by the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;error&#34;: {&#xA;        &#34;code&#34;: -32603,&#xA;        &#34;message&#34;: &#34;Invalid JSON format for application data&#34;&#xA;    },&#xA;    &#34;id&#34;: null,&#xA;    &#34;jsonrpc&#34;: &#34;2.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;Building this project requires a working &lt;a href=&#34;https://rustup.rs&#34;&gt;Rust&lt;/a&gt; (stable) toolchain.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s expected to be cross-platform and guaranteed to work on Linux, Windows, MacOS platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Build from sub project&lt;/h3&gt; &#xA;&lt;p&gt;Go to one of following folder you want to build from source: &lt;code&gt;xelis_daemon&lt;/code&gt;, &lt;code&gt;xelis_miner&lt;/code&gt; or &lt;code&gt;xelis_wallet&lt;/code&gt;. To build a release (optimized) version: &lt;code&gt;cargo build --release&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build from workspace&lt;/h3&gt; &#xA;&lt;p&gt;To build a version from workspace (parent folder) directly, use the option &lt;code&gt;--bin&lt;/code&gt; with &lt;code&gt;xelis_daemon&lt;/code&gt;, &lt;code&gt;xelis_miner&lt;/code&gt; or &lt;code&gt;xelis_wallet&lt;/code&gt; as value. Example: &lt;code&gt;cargo build --release --bin xelis_miner&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also build a debug version (just remove &lt;code&gt;--release&lt;/code&gt; option) or run it directly from cargo: &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build from Docker&lt;/h3&gt; &#xA;&lt;p&gt;To build using Docker, use the following command, using the &lt;code&gt;app&lt;/code&gt; build argument to chose which project to build: &lt;code&gt;docker build -t xelis-daemon:master --build-arg app=xelis_daemon .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;XELIS is a community driven project and is not funded by any company or organization. To helps the development, the success and provide a better support of XELIS, we set a dev fee percentage starting at 15% on block reward.&lt;/p&gt; &#xA;&lt;p&gt;Current dev fee curve is as following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;15% from block 0 to 1 250 000 (expected time is ~6 months with side blocks from blockDAG)&lt;/li&gt; &#xA; &lt;li&gt;10% from block 1 250 001 to 3 000 000 (expected time is another ~6 months with side blocks from blockDAG and network growing)&lt;/li&gt; &#xA; &lt;li&gt;5% from 3 000 001 until the project being developed and stable enough to reduce it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>feschber/lan-mouse</title>
    <updated>2024-05-05T01:40:54Z</updated>
    <id>tag:github.com,2024-05-05:/feschber/lan-mouse</id>
    <link href="https://github.com/feschber/lan-mouse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mouse &amp; keyboard sharing via LAN&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lan Mouse&lt;/h1&gt; &#xA;&lt;p&gt;Lan Mouse is a mouse and keyboard sharing software similar to universal-control on Apple devices. It allows for using multiple pcs with a single set of mouse and keyboard. This is also known as a Software KVM switch.&lt;/p&gt; &#xA;&lt;p&gt;The primary target is Wayland on Linux but Windows and MacOS and Linux on Xorg have partial support as well (see below for more details).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Now with a gtk frontend&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/feschber/lan-mouse/assets/40996949/016a06a9-76db-4951-9dcc-127d012c59df&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/feschber/lan-mouse/assets/40996949/d6318340-f811-4e16-9d6e-d1b79883c709&#34;&gt; &#xA; &lt;img alt=&#34;Screenshot of Lan-Mouse&#34; srcset=&#34;https://github.com/feschber/lan-mouse/assets/40996949/016a06a9-76db-4951-9dcc-127d012c59df&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;Goal of this project is to be an open-source replacement for proprietary tools like &lt;a href=&#34;https://symless.com/synergy&#34;&gt;Synergy 2/3&lt;/a&gt;, &lt;a href=&#34;https://www.sharemouse.com/de/&#34;&gt;Share Mouse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Focus lies on performance and a clean, manageable implementation that can easily be expanded to support additional backends like e.g. Android, iOS, ... .&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;blazingly fast™&lt;/strong&gt;&lt;/em&gt; because it&#39;s written in rust.&lt;/p&gt; &#xA;&lt;p&gt;For an alternative (with slightly different goals) you may check out &lt;a href=&#34;https://github.com/input-leap&#34;&gt;Input Leap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Since this tool has gained a bit of popularity over the past couple of days:&lt;/p&gt; &#xA; &lt;p&gt;All network traffic is currently &lt;strong&gt;unencrypted&lt;/strong&gt; and sent in &lt;strong&gt;plaintext&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;A malicious actor with access to the network could read input data or send input events with spoofed IPs to take control over a device.&lt;/p&gt; &#xA; &lt;p&gt;Therefore you should only use this tool in your local network with trusted devices for now and I take no responsibility for any leakage of data!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;OS Support&lt;/h2&gt; &#xA;&lt;p&gt;The following table shows support for input emulation (to emulate events received from other clients) and input capture (to send events &lt;em&gt;to&lt;/em&gt; other clients) on different operating systems:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS / Desktop Environment&lt;/th&gt; &#xA;   &lt;th&gt;input emulation&lt;/th&gt; &#xA;   &lt;th&gt;input capture&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wayland (wlroots)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wayland (KDE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wayland (Gnome)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt; (starting at GNOME 45)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Important] Gnome -&amp;gt; Sway only partially works (modifier events are not handled correctly)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Important] &lt;strong&gt;Wayfire&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you are using &lt;a href=&#34;https://github.com/WayfireWM/wayfire&#34;&gt;Wayfire&lt;/a&gt;, make sure to use a recent version (must be newer than October 23rd) and &lt;strong&gt;add &lt;code&gt;shortcuts-inhibit&lt;/code&gt; to the list of plugins in your wayfire config!&lt;/strong&gt; Otherwise input capture will not work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Install via cargo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install lan-mouse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download from Releases&lt;/h3&gt; &#xA;&lt;p&gt;Precompiled release binaries for Windows, MacOS and Linux are available in the &lt;a href=&#34;https://github.com/feschber/lan-mouse/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, the depenedencies are included in the .zip file, for other operating systems see &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/#installing-dependencies&#34;&gt;Installing Dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;Lan Mouse is available on the AUR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# git version (includes latest changes)&#xA;paru -S lan-mouse-git&#xA;&#xA;# alternatively&#xA;paru -S lan-mouse-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nixpkgs: &lt;a href=&#34;https://search.nixos.org/packages?channel=unstable&amp;amp;show=lan-mouse&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=lan-mouse&#34;&gt;search.nixos.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;flake: &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/nix/README.md&#34;&gt;README.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;p&gt;First make sure to &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/#installing-dependencies&#34;&gt;install the necessary dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Build in release mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install lan-mouse&#xA;sudo cp target/release/lan-mouse /usr/local/bin/&#xA;&#xA;# install app icon&#xA;sudo mkdir -p /usr/local/share/icons/hicolor/scalable/apps&#xA;sudo cp resources/de.feschber.LanMouse.svg /usr/local/share/icons/hicolor/scalable/apps&#xA;&#xA;# update icon cache&#xA;gtk-update-icon-cache /usr/local/share/icons/hicolor/&#xA;&#xA;# install desktop entry&#xA;sudo mkdir -p /usr/local/share/applications&#xA;sudo cp de.feschber.LanMouse.desktop /usr/local/share/applications&#xA;&#xA;# when using firewalld: install firewall rule&#xA;sudo cp firewall/lan-mouse.xml /etc/firewalld/services&#xA;# -&amp;gt; enable the service in firewalld settings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional Compilation&lt;/h3&gt; &#xA;&lt;p&gt;Currently only x11, wayland, windows and MacOS are supported backends. Depending on the toolchain used, support for other platforms is omitted automatically (it does not make sense to build a Windows &lt;code&gt;.exe&lt;/code&gt; with support for x11 and wayland backends).&lt;/p&gt; &#xA;&lt;p&gt;However one might still want to omit support for e.g. wayland, x11 or libei on a Linux system.&lt;/p&gt; &#xA;&lt;p&gt;This is possible through &lt;a href=&#34;https://doc.rust-lang.org/cargo/reference/features.html&#34;&gt;cargo features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;E.g. if only wayland support is needed, the following command produces an executable with just support for wayland:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build --no-default-features --features wayland&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a detailed list of available features, checkout the &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/Cargo.toml&#34;&gt;Cargo.toml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing Dependencies&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;MacOS&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install libadwaita&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Ubuntu and derivatives&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install libadwaita-1-dev libgtk-4-dev libx11-dev libxtst-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Arch and derivatives&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S libadwaita gtk libx11 libxtst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Fedora and derivatives&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install libadwaita-devel libXtst-devel libX11-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Windows&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!NOTE] This is only necessary when building lan-mouse from source. The windows release comes with precompiled gtk dlls.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;First install &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Then follow the instructions at &lt;a href=&#34;https://gtk-rs.org/gtk4-rs/stable/latest/book/installation_windows.html&#34;&gt;gtk-rs.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;em&gt;TLDR:&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;Build gtk from source&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The following commands should be run in an &lt;strong&gt;admin power shell&lt;/strong&gt; instance:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install chocolatey&#xA;Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))&#xA;&#xA;# install gvsbuild dependencies&#xA;choco install python git msys2 visualstudio2022-workload-vctools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The following commands should be run in a &lt;strong&gt;regular power shell&lt;/strong&gt; instance:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install gvsbuild with python&#xA;python -m pip install --user pipx&#xA;python -m pipx ensurepath&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Relaunch your powershell instance so the changes in the environment are reflected.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pipx install gvsbuild&#xA;&#xA;# build gtk + libadwaita&#xA;gvsbuild build gtk4 libadwaita librsvg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Make sure to add the directory&lt;/strong&gt; &lt;code&gt;C:\gtk-build\gtk\x64\release\bin&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/(https://learn.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ee537574(v=office.14))&#34;&gt;&lt;strong&gt;to the &lt;code&gt;PATH&lt;/code&gt; environment variable&lt;/strong&gt;&lt;/a&gt;. Otherwise the project will fail to build.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;To avoid building GTK from source, it is possible to disable the gtk frontend (see conditional compilation below).&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Gtk Frontend&lt;/h3&gt; &#xA;&lt;p&gt;By default the gtk frontend will open when running &lt;code&gt;lan-mouse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add a new connection, simply click the &lt;code&gt;Add&lt;/code&gt; button on &lt;em&gt;both&lt;/em&gt; devices, enter the corresponding hostname and activate it.&lt;/p&gt; &#xA;&lt;p&gt;If the mouse can not be moved onto a device, make sure you have port &lt;code&gt;4242&lt;/code&gt; (or the one selected) opened up in your firewall.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Interface&lt;/h3&gt; &#xA;&lt;p&gt;The cli interface can be enabled using &lt;code&gt;--frontend cli&lt;/code&gt; as commandline arguments. Type &lt;code&gt;help&lt;/code&gt; to list the available commands.&lt;/p&gt; &#xA;&lt;p&gt;E.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo run --release -- --frontend cli&#xA;(...)&#xA;&amp;gt; connect &amp;lt;host&amp;gt; left|right|top|bottom&#xA;(...)&#xA;&amp;gt; list&#xA;(...)&#xA;&amp;gt; activate 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Daemon&lt;/h3&gt; &#xA;&lt;p&gt;Lan Mouse can be launched in daemon mode to keep it running in the background. To do so, add &lt;code&gt;--daemon&lt;/code&gt; to the commandline args:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cargo run --release -- --daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to start lan-mouse with a graphical session automatically, the &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/service/lan-mouse.service&#34;&gt;systemd-service&lt;/a&gt; can be used:&lt;/p&gt; &#xA;&lt;p&gt;Copy the file to &lt;code&gt;~/.config/systemd/user/&lt;/code&gt; and enable the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp service/lan-mouse.service ~/.config/systemd/user&#xA;systemctl --user daemon-reload&#xA;systemctl --user enable --now lan-mouse.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;To automatically load clients on startup, the file &lt;code&gt;$XDG_CONFIG_HOME/lan-mouse/config.toml&lt;/code&gt; is parsed. &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; defaults to &lt;code&gt;~/.config/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To create this file you can copy the following example config:&lt;/p&gt; &#xA;&lt;h3&gt;Example config&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] key symbols in the release bind are named according to their names in &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/src/scancode.rs#L172&#34;&gt;src/scancode.rs#L172&lt;/a&gt;. This is bound to change&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# example configuration&#xA;&#xA;# configure release bind&#xA;release_bind = [ &#34;KeyA&#34;, &#34;KeyS&#34;, &#34;KeyD&#34;, &#34;KeyF&#34; ]&#xA;&#xA;# optional port (defaults to 4242)&#xA;port = 4242&#xA;# # optional frontend -&amp;gt; defaults to gtk if available&#xA;# # possible values are &#34;cli&#34; and &#34;gtk&#34; &#xA;# frontend = &#34;gtk&#34;&#xA;&#xA;# define a client on the right side with host name &#34;iridium&#34;&#xA;[right]&#xA;# hostname&#xA;hostname = &#34;iridium&#34;&#xA;# activate this client immediately when lan-mouse is started&#xA;activate_on_startup = true&#xA;# optional list of (known) ip addresses&#xA;ips = [&#34;192.168.178.156&#34;]&#xA;&#xA;# define a client on the left side with IP address 192.168.178.189&#xA;[left]&#xA;# The hostname is optional: When no hostname is specified,&#xA;# at least one ip address needs to be specified.&#xA;hostname = &#34;thorium&#34;&#xA;# ips for ethernet and wifi&#xA;ips = [&#34;192.168.178.189&#34;, &#34;192.168.178.172&#34;]&#xA;# optional port&#xA;port = 4242&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;left&lt;/code&gt; can be either &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; or &lt;code&gt;bottom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Graphical frontend (gtk + libadwaita)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; respect xdg-config-home for config file location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IP Address switching&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Liveness tracking Automatically ungrab mouse when client unreachable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Liveness tracking: Automatically release keys, when server offline&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MacOS KeyCode Translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Libei Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; X11 Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Windows Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; MacOS Input Capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Latency measurement and visualization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Bandwidth usage measurement and visualization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Clipboard support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;em&gt;Encryption&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Protocol&lt;/h2&gt; &#xA;&lt;p&gt;Currently &lt;em&gt;all&lt;/em&gt; mouse and keyboard events are sent via &lt;strong&gt;UDP&lt;/strong&gt; for performance reasons. Each event is sent as one single datagram, currently without any acknowledgement to guarantee 0% packet loss. This means, any packet that is lost results in a discarded mouse / key event, which is ignored for now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt; also has the additional benefit that no reconnection logic is required. Any client can just go offline and it will simply start working again as soon as it comes back online.&lt;/p&gt; &#xA;&lt;p&gt;Additionally a tcp server is hosted for data that needs to be sent reliably (e.g. the keymap from the server or clipboard contents in the future) can be requested via a tcp connection.&lt;/p&gt; &#xA;&lt;h2&gt;Bandwidth considerations&lt;/h2&gt; &#xA;&lt;p&gt;The most bandwidth is taken up by mouse events. A typical office mouse has a polling rate of 125Hz while gaming mice typically have a much higher polling rate of 1000Hz. A mouse Event consists of 21 Bytes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1 Byte for the event type enum,&lt;/li&gt; &#xA; &lt;li&gt;4 Bytes (u32) for the timestamp,&lt;/li&gt; &#xA; &lt;li&gt;8 Bytes (f64) for dx,&lt;/li&gt; &#xA; &lt;li&gt;8 Bytes (f64) for dy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally the IP header with 20 Bytes and the udp header with 8 Bytes take up another 28 Byte. So in total there is 49 * 1000 Bytes/s for a 1000Hz gaming mouse. This makes for a bandwidth requirement of 392 kbit/s in total &lt;em&gt;even&lt;/em&gt; for a high end gaming mouse. So bandwidth is a non-issue.&lt;/p&gt; &#xA;&lt;p&gt;Larger data chunks, like the keymap are offered by the server via tcp listening on the same port. This way we dont need to implement any congestion control and leave this up to tcp. In the future this can be used for e.g. clipboard contents as well.&lt;/p&gt; &#xA;&lt;h2&gt;Packets per Second&lt;/h2&gt; &#xA;&lt;p&gt;While on LAN the performance is great, some WIFI cards seem to struggle with the amount of packets per second, particularly on high-end gaming mice with 1000Hz+ polling rates.&lt;/p&gt; &#xA;&lt;p&gt;The plan is to implement a way of accumulating packets and sending them as one single key event to reduce the packet rate (basically reducing the polling rate artificially).&lt;/p&gt; &#xA;&lt;p&gt;The way movement data is currently sent is also quite wasteful since even a 16bit integer is likely enough to represent even the fastest possible mouse movement. A different encoding that is more efficient for smaller values like &lt;a href=&#34;https://protobuf.dev/programming-guides/encoding/&#34;&gt;Protocol Buffers&lt;/a&gt; would be a better choice for the future and could also help for WIFI connections.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Sending key and mouse event data over the local network might not be the biggest security concern but in any public network or business environment it&#39;s &lt;em&gt;QUITE&lt;/em&gt; a problem to basically broadcast your keystrokes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be an encryption layer below the application to enable a secure link.&lt;/li&gt; &#xA; &lt;li&gt;The encryption keys could be generated by the graphical frontend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wayland support&lt;/h2&gt; &#xA;&lt;h3&gt;Input Emulation (for receiving events)&lt;/h3&gt; &#xA;&lt;p&gt;On wayland input-emulation is in an early/unstable state as of writing this.&lt;/p&gt; &#xA;&lt;p&gt;For this reason a suitable backend is chosen based on the active desktop environment / compositor.&lt;/p&gt; &#xA;&lt;p&gt;Different compositors have different ways of enabling input emulation:&lt;/p&gt; &#xA;&lt;h4&gt;Wlroots&lt;/h4&gt; &#xA;&lt;p&gt;Most wlroots-based compositors like Hyprland and Sway support the following unstable wayland protocols for keyboard and mouse emulation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wayland.app/protocols/virtual-keyboard-unstable-v1&#34;&gt;virtual-keyboard-unstable-v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wayland.app/protocols/wlr-virtual-pointer-unstable-v1&#34;&gt;wlr-virtual-pointer-unstable-v1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;KDE&lt;/h4&gt; &#xA;&lt;p&gt;KDE also has a protocol for input emulation (&lt;a href=&#34;https://wayland.app/protocols/kde-fake-input&#34;&gt;kde-fake-input&lt;/a&gt;), it is however not exposed to third party applications.&lt;/p&gt; &#xA;&lt;p&gt;The recommended way to emulate input on KDE is the &lt;a href=&#34;https://flatpak.github.io/xdg-desktop-portal/#gdbus-org.freedesktop.portal.RemoteDesktop&#34;&gt;freedesktop remote-desktop-portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Gnome&lt;/h4&gt; &#xA;&lt;p&gt;Gnome uses &lt;a href=&#34;https://gitlab.freedesktop.org/libinput/libei&#34;&gt;libei&lt;/a&gt; for input emulation and capture, which has the goal to become the general approach for emulating and capturing Input on Wayland.&lt;/p&gt; &#xA;&lt;h3&gt;Input capture&lt;/h3&gt; &#xA;&lt;p&gt;To capture mouse and keyboard input, a few things are necessary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displaying an immovable surface at screen edges&lt;/li&gt; &#xA; &lt;li&gt;Locking the mouse in place&lt;/li&gt; &#xA; &lt;li&gt;(optionally but highly recommended) reading unaccelerated mouse input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Required Protocols (Event Emitting)&lt;/th&gt; &#xA;   &lt;th&gt;Sway&lt;/th&gt; &#xA;   &lt;th&gt;Kwin&lt;/th&gt; &#xA;   &lt;th&gt;Gnome&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pointer-constraints-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;relative-pointer-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keyboard-shortcuts-inhibit-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wlr-layer-shell-unstable-v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/feschber/lan-mouse/main/wlr-virtual-pointer-unstable-v1&#34;&gt;zwlr_virtual_pointer_manager_v1&lt;/a&gt; is required to display surfaces on screen edges and used to display the immovable window on both wlroots based compositors and KDE.&lt;/p&gt; &#xA;&lt;p&gt;Gnome unfortunately does not support this protocol and &lt;a href=&#34;https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/1141&#34;&gt;likely won&#39;t ever support it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;In order for layershell surfaces to be able to lock the pointer using the pointer_constraints protocol &lt;a href=&#34;https://github.com/swaywm/sway/pull/7178&#34;&gt;this patch&lt;/a&gt; needs to be applied to sway.&lt;/del&gt; (this works natively on sway versions &amp;gt;= 1.8)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LukeMathWalker/zero-to-production</title>
    <updated>2024-05-05T01:40:54Z</updated>
    <id>tag:github.com,2024-05-05:/LukeMathWalker/zero-to-production</id>
    <link href="https://github.com/LukeMathWalker/zero-to-production" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for &#34;Zero To Production In Rust&#34;, a book on API development using Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zero To Production In Rust&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://zero2prod.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.zero2prod.com/assets/img/zero2prod.png&#34; width=&#34;75%&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zero2prod.com&#34;&gt;Zero To Production In Rust&lt;/a&gt; is an opinionated introduction to backend development using Rust.&lt;/p&gt; &#xA;&lt;p&gt;This repository serves as supplementary material for &lt;a href=&#34;https://zero2prod.com/&#34;&gt;the book&lt;/a&gt;: it hosts several snapshots of the codebase for our email newsletter project as it evolves throughout the book.&lt;/p&gt; &#xA;&lt;h2&gt;Chapter snapshots&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt; branch shows the project at the end of the book.&lt;/p&gt; &#xA;&lt;p&gt;You can browse the project at the end of previous chapters by switching to their dedicated branches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-03-part0&#34;&gt;Chapter 3, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-03-part1&#34;&gt;Chapter 3, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-04&#34;&gt;Chapter 4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-05&#34;&gt;Chapter 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-06-part0&#34;&gt;Chapter 6, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-06-part1&#34;&gt;Chapter 6, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-07-part0&#34;&gt;Chapter 7, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-07-part1&#34;&gt;Chapter 7, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-07-part2&#34;&gt;Chapter 7, Part 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-08&#34;&gt;Chapter 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-09&#34;&gt;Chapter 9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part0&#34;&gt;Chapter 10, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part1&#34;&gt;Chapter 10, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part2&#34;&gt;Chapter 10, Part 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part3&#34;&gt;Chapter 10, Part 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-11&#34;&gt;Chapter 11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pre-requisites&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need to install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also some OS-specific requirements.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install -f cargo-binutils&#xA;rustup component add llvm-tools-preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --version=&#34;~0.7&#34; sqlx-cli --no-default-features --features rustls,postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Ubuntu &#xA;sudo apt-get install lld clang libssl-dev postgresql-client&#xA;# Arch &#xA;sudo pacman -S lld clang postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --version=&#34;~0.7&#34; sqlx-cli --no-default-features --features rustls,postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install michaeleisel/zld/zld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --version=&#34;~0.7&#34; sqlx-cli --no-default-features --features rustls,postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;Launch a (migrated) Postgres database via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_db.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch a Redis instance via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_redis.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now try with opening a browser on &lt;a href=&#34;http://127.0.0.1:8000/login&#34;&gt;http://127.0.0.1:8000/login&lt;/a&gt; after having launch the web server with &lt;code&gt;cargo run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a default &lt;code&gt;admin&lt;/code&gt; account with password &lt;code&gt;everythinghastostartsomewhere&lt;/code&gt;. The available entrypoints are listed in &lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/raw/6bd30650cb8670a146819a342ccefd3d73ed5085/src/startup.rs#L92&#34;&gt;src/startup.rs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test&lt;/h2&gt; &#xA;&lt;p&gt;Launch a (migrated) Postgres database via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_db.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch a Redis instance via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_redis.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo test &#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>