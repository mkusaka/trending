<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-06T01:47:13Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dora-rs/dora</title>
    <updated>2025-04-06T01:47:13Z</updated>
    <id>tag:github.com,2025-04-06:/dora-rs/dora</id>
    <link href="https://github.com/dora-rs/dora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DORA (Dataflow-Oriented Robotic Architecture) is middleware designed to streamline and simplify the creation of AI-based robotic applications. It offers low latency, composable, and distributed dataflow capabilities. Applications are modeled as directed graphs, also referred to as pipelines.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dora-rs/dora/main/docs/src/logo.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.dora-rs.ai&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://dora-rs.ai/docs/guides/getting-started/conversation_py/&#34;&gt;Python API&lt;/a&gt; | &lt;a href=&#34;https://docs.rs/dora-node-api/latest/dora_node_api/&#34;&gt;Rust API&lt;/a&gt; | &lt;a href=&#34;https://www.dora-rs.ai/docs/guides/&#34;&gt;Guide&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/6eMGGutkfE&#34;&gt;Discord&lt;/a&gt; &lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/dora-rs/dora/actions&#34;&gt; &lt;img src=&#34;https://github.com/dora-rs/dora/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build and test&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/dora-rs&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/dora_node_api.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://docs.rs/dora-node-api/latest/dora_node_api/&#34;&gt; &lt;img src=&#34;https://docs.rs/dora-node-api/badge.svg?sanitize=true&#34; alt=&#34;rust docs&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://pypi.org/project/dora-rs/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/dora-rs.svg?sanitize=true&#34; alt=&#34;PyPi Latest Release&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://trendshift.io/repositories/9190&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/9190&#34; alt=&#34;dora-rs%2Fdora | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚀 dora-rs is a framework to run realtime multi-AI and multi-hardware applications.&lt;/li&gt; &#xA; &lt;li&gt;🦀 dora-rs internals are 100% Rust making it extremely fast compared to alternative such as being ⚡️ &lt;a href=&#34;https://github.com/dora-rs/dora-benchmark&#34;&gt;10-17x faster&lt;/a&gt; than &lt;code&gt;ros2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;❇️ Includes a large set of pre-packaged nodes for fast prototyping which simplifies integration of hardware, algorithms, and AI models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture align=&#34;center&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/dora-rs/dora/main/docs/src/bar_chart_dark.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/dora-rs/dora/main/docs/src/bar_chart_light.svg&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/dora-rs/dora/main/docs/src/bar_chart_light.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/dora-rs/dora-benchmark/&#34;&gt; &lt;i&gt;Latency benchmark with Python API for both framework, sending 40M of random bytes.&lt;/i&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Latest News 🎉&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;2025&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[03/05] dora-rs has been accepted to &lt;a href=&#34;https://summerofcode.withgoogle.com/programs/2025/organizations/dora-rs-tb&#34;&gt;&lt;strong&gt;GSoC 2025 🎉&lt;/strong&gt;&lt;/a&gt;, with the following &lt;a href=&#34;https://github.com/dora-rs/dora/wiki/GSoC_2025&#34;&gt;&lt;strong&gt;idea list&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;[03/04] Add support for Zenoh for distributed dataflow.&lt;/li&gt; &#xA;  &lt;li&gt;[03/04] Add support for Meta SAM2, Kokoro(TTS), Improved Qwen2.5 Performance using &lt;code&gt;llama.cpp&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;[02/25] Add support for Qwen2.5(LLM), Qwen2.5-VL(VLM), outetts(TTS)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Support Matrix&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;dora-rs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;APIs&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python &amp;gt;= 3.7 ✅ &lt;br&gt; Rust ✅&lt;br&gt; C/C++ 🆗 &lt;br&gt;ROS2 &amp;gt;= Foxy 🆗&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux: Arm 32 ✅ Arm 64 ✅ x64_86 ✅ &lt;br&gt;MacOS: Arm 64 ✅ x64_86 ✅&lt;br&gt;Windows: x64_86 🆗&lt;br&gt; Android: 🛠️ (Blocked by: &lt;a href=&#34;https://github.com/elast0ny/shared_memory/issues/32&#34;&gt;https://github.com/elast0ny/shared_memory/issues/32&lt;/a&gt;) &lt;br&gt; IOS: 🛠️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Message Format&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Arrow ✅ &lt;br&gt; Standard Specification 🛠️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Local Communication&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shared Memory ✅ &lt;br&gt; &lt;a href=&#34;https://arrow.apache.org/docs/python/api/cuda.html&#34;&gt;Cuda IPC&lt;/a&gt; 📐&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Remote Communication&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://zenoh.io/&#34;&gt;Zenoh&lt;/a&gt; 📐&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Metrics, Tracing, and Logging&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opentelemetry 📐&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;YAML ✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Package Manager&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/&#34;&gt;pip&lt;/a&gt;: Python Node ✅ Rust Node ✅ C/C++ Node 🛠️ &lt;br&gt;&lt;a href=&#34;https://crates.io/&#34;&gt;cargo&lt;/a&gt;: Rust Node ✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;✅ = First Class Support&lt;/li&gt; &#xA;  &lt;li&gt;🆗 = Best Effort Support&lt;/li&gt; &#xA;  &lt;li&gt;📐 = Experimental and looking for contributions&lt;/li&gt; &#xA;  &lt;li&gt;🛠️ = Unsupported but hoped for through contributions&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Everything is open for contributions 🙋&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Node Hub&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Feel free to modify this README with your own nodes so that it benefits the community.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Downloads&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camera&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-pyorbbecksdk&#34;&gt;PyOrbbeckSDK&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Image and depth from Orbbeck Camera&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-pyorbbecksdk?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-pyorbbecksdk?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camera&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-pyrealsense&#34;&gt;PyRealsense&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux🆗 &lt;br&gt; Mac🛠️&lt;/td&gt; &#xA;   &lt;td&gt;Image and depth from Realsense&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-pyrealsense?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-pyrealsense?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camera&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/opencv-video-capture&#34;&gt;OpenCV Video Capture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Image stream from OpenCV Camera&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/opencv-video-capture?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/opencv-video-capture?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Peripheral&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-keyboard&#34;&gt;Keyboard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Keyboard char listener&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-keyboard?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-keyboard?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Peripheral&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-microphone&#34;&gt;Microphone&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Audio from microphone&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-microphone?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-microphone?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Peripheral&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-pyaudio&#34;&gt;PyAudio(Speaker)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Output audio from speaker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-pyaudio?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-pyaudio?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Actuator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/node-hub/feetech-client&#34;&gt;Feetech&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Feetech Client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Actuator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/node-hub/dynamixel-client&#34;&gt;Dynamixel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Dynamixel Client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chassis&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-ugv&#34;&gt;Agilex - UGV&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Robomaster Client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-ugv?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-ugv?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chassis&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/datasets/dora-rs/dora-robomaster&#34;&gt;DJI - Robomaster S1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Robomaster Client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chassis&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-kit-car&#34;&gt;Dora Kit Car&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Open Source Chassis&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-kit-car?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-kit-car?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/robots/alexk-lcr&#34;&gt;Alex Koch - Low Cost Robot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Alex Koch - Low Cost Robot Client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/node-hub/lebai-client&#34;&gt;Lebai - LM3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Lebai client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-piper&#34;&gt;Agilex - Piper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Agilex arm client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-piper?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-piper?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/node-hub/dora-reachy1&#34;&gt;Pollen - Reachy 1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Reachy 1 Client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-reachy2&#34;&gt;Pollen - Reachy 2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Reachy 2 client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-reachy2?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-reachy2?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/robots/aloha&#34;&gt;Trossen - Aloha&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Aloha client&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Voice Activity Detection(VAD)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-vad&#34;&gt;Silero VAD&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Silero Voice activity detection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-vad?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-vad?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Speech to Text(STT)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-distil-whisper&#34;&gt;Whisper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Transcribe audio to text&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-distil-whisper?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-distil-whisper?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Object Detection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-yolo&#34;&gt;Yolov8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Object detection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-yolo?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-yolo?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Segmentation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-sam2&#34;&gt;SAM2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cuda✅ &lt;br&gt; Metal🛠️&lt;/td&gt; &#xA;   &lt;td&gt;Segment Anything&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-sam2?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-sam2?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Large Language Model(LLM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-qwen&#34;&gt;Qwen2.5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Large Language Model using Qwen&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-qwen?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-qwen?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vision Language Model(VLM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-qwen2-5-vl&#34;&gt;Qwen2.5-vl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Vision Language Model using Qwen2.5 VL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-qwen2-5-vl?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-qwen2-5-vl?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vision Language Model(VLM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-internvl&#34;&gt;InternVL&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;InternVL is a vision language model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-internvl?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-internvl?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vision Language Action(VLA)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-rdt-1b&#34;&gt;RDT-1B&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Infer policy using Robotic Diffusion Transformer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-rdt-1b?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-rdt-1b?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Translation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-argotranslate&#34;&gt;ArgosTranslate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Open Source translation engine&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-argotranslate?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-argotranslate?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Translation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-opus&#34;&gt;Opus MT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Translate text between language&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-opus?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-opus?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text to Speech(TTS)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-kokoro-tts&#34;&gt;Kokoro TTS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Efficient Text to Speech&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-kokoro-tts?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-kokoro-tts?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Recorder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/llama-factory-recorder&#34;&gt;Llama Factory Recorder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🆗&lt;/td&gt; &#xA;   &lt;td&gt;Record data to train LLM and VLM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/llama-factory-recorder?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/llama-factory-recorder?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Recorder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/node-hub/lerobot-dashboard&#34;&gt;LeRobot Recorder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;LeRobot Recorder helper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visualization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/opencv-plot&#34;&gt;Plot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Simple OpenCV plot visualization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-yolo?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/opencv-plot?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visualization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/node-hub/dora-rerun&#34;&gt;Rerun&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Visualization tool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/dora-rerun?label=%20&#34; alt=&#34;Downloads&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/dora-rerun?label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Simulator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/node-hub/mujoco-client&#34;&gt;Mujoco&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Mujoco Simulator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Simulator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-drives&#34;&gt;Carla&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Carla Simulator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Simulator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-lerobot/raw/main/gym_dora&#34;&gt;Gymnasium&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;📐&lt;/td&gt; &#xA;   &lt;td&gt;Experimental OpenAI Gymnasium bridge&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Last Commit&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/speech-to-text&#34;&gt;Speech to Text(STT)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Transform speech to text.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fspeech-to-text&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/translation&#34;&gt;Translation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Translate audio in real time.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Ftranslation&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vision&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/vlm&#34;&gt;Vision Language Model(VLM)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use a VLM to understand images.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fvlm&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vision&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/python-dataflow&#34;&gt;YOLO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use YOLO to detect object within image.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fpython-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vision&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/camera&#34;&gt;Camera&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple webcam plot example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fcamera&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Model Training&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/piper&#34;&gt;Piper RDT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Piper RDT Pipeline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fpiper&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Model Training&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dora-rs/dora-lerobot/refs/heads/main/README.md&#34;&gt;LeRobot - Alexander Koch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Training Alexander Koch Low Cost Robot with LeRobot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora-lerobot?path=robots&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROS2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/c++-ros2-dataflow&#34;&gt;C++ ROS2 Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example using C++ ROS2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fc%2b%2b-ros2-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROS2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/rust-ros2-dataflow&#34;&gt;Rust ROS2 Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example using Rust ROS2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Frust-ros2-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROS2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/python-ros2-dataflow&#34;&gt;Python ROS2 Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example using Python ROS2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fpython-ros2-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/cuda-benchmark&#34;&gt;GPU Benchmark&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPU Benchmark of dora-rs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fcuda-benchmark&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-benchmark/raw/main&#34;&gt;CPU Benchmark&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CPU Benchmark of dora-rs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora-benchmark?path=dora-rs&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tutorial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/rust-dataflow&#34;&gt;Rust Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example using Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Frust-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tutorial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/python-dataflow&#34;&gt;Python Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example using Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fpython-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tutorial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/cmake-dataflow&#34;&gt;CMake Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example using CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fcmake-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tutorial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/c-dataflow&#34;&gt;C Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example with C node&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fc-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tutorial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/cuda-benchmark&#34;&gt;CUDA Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example using CUDA Zero Copy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fcuda-benchmark&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tutorial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/examples/c++-dataflow&#34;&gt;C++ Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example with C++ node&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dora-rs/dora?path=examples%2Fc%2b%2b-dataflow&amp;amp;label=%20&#34; alt=&#34;License&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install dora-rs-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt;&lt;b&gt;Additional installation methods&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Install dora with our standalone installers, or from &lt;a href=&#34;https://crates.io/crates/dora-cli&#34;&gt;crates.io&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;h3&gt;With cargo&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install dora-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;With Github release for macOS and Linux&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://raw.githubusercontent.com/dora-rs/dora/main/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;With Github release for Windows&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;powershell -c &#34;irm https://raw.githubusercontent.com/dora-rs/dora/main/install.ps1 | iex&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;With Source&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/dora-rs/dora.git&#xA;cd dora&#xA;cargo build --release -p dora-cli&#xA;PATH=$PATH:$(pwd)/target/release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the yolo python example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## Create a virtual environment&#xA;uv venv --seed -p 3.11&#xA;&#xA;## Install nodes dependencies of a remote graph&#xA;dora build https://raw.githubusercontent.com/dora-rs/dora/refs/heads/main/examples/object-detection/yolo.yml --uv&#xA;&#xA;## Run yolo graph&#xA;dora run yolo.yml --uv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure to have a webcam&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To stop your dataflow, you can use &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To understand what is happening, you can look at the dataflow with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat yolo.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resulting in:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nodes:&#xA;  - id: camera&#xA;    build: pip install opencv-video-capture&#xA;    path: opencv-video-capture&#xA;    inputs:&#xA;      tick: dora/timer/millis/20&#xA;    outputs:&#xA;      - image&#xA;    env:&#xA;      CAPTURE_PATH: 0&#xA;      IMAGE_WIDTH: 640&#xA;      IMAGE_HEIGHT: 480&#xA;&#xA;  - id: object-detection&#xA;    build: pip install dora-yolo&#xA;    path: dora-yolo&#xA;    inputs:&#xA;      image: camera/image&#xA;    outputs:&#xA;      - bbox&#xA;&#xA;  - id: plot&#xA;    build: pip install dora-rerun&#xA;    path: dora-rerun&#xA;    inputs:&#xA;      image: camera/image&#xA;      boxes2d: object-detection/bbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the above example, we can understand that the camera is sending image to both the rerun viewer as well as a yolo model that generates bounding box that is visualized within rerun.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The full documentation is available on &lt;a href=&#34;https://dora-rs.ai/&#34;&gt;our website&lt;/a&gt;. A lot of guides are available on &lt;a href=&#34;https://dora-rs.ai/docs/guides/&#34;&gt;this section&lt;/a&gt; of our website.&lt;/p&gt; &#xA;&lt;h2&gt;What is Dora? And what features does Dora offer?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;ataflow-&lt;strong&gt;O&lt;/strong&gt;riented &lt;strong&gt;R&lt;/strong&gt;obotic &lt;strong&gt;A&lt;/strong&gt;rchitecture (&lt;code&gt;dora-rs&lt;/code&gt;) is a framework that makes creation of robotic applications fast and simple.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dora-rs&lt;/code&gt; implements a declarative dataflow paradigm where tasks are split between nodes isolated as individual processes.&lt;/p&gt; &#xA;&lt;p&gt;The dataflow paradigm has the advantage of creating an abstraction layer that makes robotic applications modular and easily configurable.&lt;/p&gt; &#xA;&lt;h3&gt;TCP Communication and Shared Memory&lt;/h3&gt; &#xA;&lt;p&gt;Communication between nodes is handled with shared memory on a same machine and TCP on distributed machines. Our shared memory implementation tracks messages across processes and discards them when obsolete. Shared memory slots are cached to avoid new memory allocation.&lt;/p&gt; &#xA;&lt;h3&gt;Arrow Message Format&lt;/h3&gt; &#xA;&lt;p&gt;Nodes communicate with Apache Arrow Data Format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/arrow-rs&#34;&gt;Apache Arrow&lt;/a&gt; is a universal memory format for flat and hierarchical data. The Arrow memory format supports zero-copy reads for lightning-fast data access without serialization overhead. It defines a C data interface without any build-time or link-time dependency requirement, that means that &lt;code&gt;dora-rs&lt;/code&gt; has &lt;strong&gt;no compilation step&lt;/strong&gt; beyond the native compiler of your favourite language.&lt;/p&gt; &#xA;&lt;h3&gt;Opentelemetry&lt;/h3&gt; &#xA;&lt;p&gt;dora-rs uses Opentelemetry to record all your logs, metrics and traces. This means that the data and telemetry can be linked using a shared abstraction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opentelemetry.io/&#34;&gt;Opentelemetry&lt;/a&gt; is an open source observability standard that makes dora-rs telemetry collectable by most backends such as elasticsearch, prometheus, Datadog...&lt;/p&gt; &#xA;&lt;p&gt;Opentelemetry is language independent, backend agnostic, and easily collect distributed data, making it perfect for dora-rs applications.&lt;/p&gt; &#xA;&lt;h3&gt;ROS2 Bridge&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this feature is marked as unstable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compilation Free Message passing to ROS 2&lt;/li&gt; &#xA; &lt;li&gt;Automatic conversion ROS 2 Message &amp;lt;-&amp;gt; Arrow Array&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyarrow as pa&#xA;&#xA;# Configuration Boilerplate...&#xA;turtle_twist_writer = ...&#xA;&#xA;## Arrow Based ROS2 Twist Message&#xA;## which does not require ROS2 import&#xA;message = pa.array([{&#xA;            &#34;linear&#34;: {&#xA;                &#34;x&#34;: 1,&#xA;            },&#xA;            &#34;angular&#34;: {&#xA;                &#34;z&#34;: 1&#xA;            },&#xA;        }])&#xA;&#xA;turtle_twist_writer.publish(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You might want to use ChatGPT to write the Arrow Formatting: &lt;a href=&#34;https://chat.openai.com/share/4eec1c6d-dbd2-46dc-b6cd-310d2895ba15&#34;&gt;https://chat.openai.com/share/4eec1c6d-dbd2-46dc-b6cd-310d2895ba15&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Zenoh Integration for Distributed Dataflow (Experimental)&lt;/h2&gt; &#xA;&lt;p&gt;Zenoh is a high-performance pub/sub and query protocol that unifies data in motion and at rest. In &lt;strong&gt;dora-rs&lt;/strong&gt;, Zenoh is used for remote communication between nodes running on different machines, enabling distributed dataflow across networks.&lt;/p&gt; &#xA;&lt;h3&gt;What is Zenoh?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://zenoh.io&#34;&gt;Zenoh&lt;/a&gt; is an open-source communication middleware offering pub/sub and query capabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Benefits in DORA:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Simplifies communication between distributed nodes.&lt;/li&gt; &#xA;   &lt;li&gt;Handles NAT traversal and inter-network communication.&lt;/li&gt; &#xA;   &lt;li&gt;Integrates with DORA to manage remote data exchange while local communication still uses efficient shared memory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enabling Zenoh Support&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run a Zenoh Router (&lt;code&gt;zenohd&lt;/code&gt;):&lt;/strong&gt;&lt;br&gt; Launch a Zenoh daemon to mediate communication. For example, using Docker:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 7447:7447 -p 8000:8000 --name zenoh-router eclipse/zenohd:latest&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## Create a Zenoh Configuration File 🎛️&#xA;&#xA;Create a file (e.g., `zenoh.json5`) with the router endpoint details:&#xA;&#xA;```json5&#xA;{&#xA;  &#34;connect&#34;: {&#xA;    &#34;endpoints&#34;: [ &#34;tcp/203.0.113.10:7447&#34; ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Launch DORA Daemons with Zenoh Enabled 🚀&lt;/h2&gt; &#xA;&lt;p&gt;On each machine, export the configuration and start the daemon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ZENOH_CONFIG=/path/to/zenoh.json5  &#xA;dora daemon --coordinator-addr &amp;lt;COORD_IP&amp;gt; --machine-id &amp;lt;MACHINE_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deploy Distributed Nodes via YAML 📄&lt;/h2&gt; &#xA;&lt;p&gt;Mark nodes for remote deployment using the &lt;code&gt;_unstable_deploy&lt;/code&gt; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nodes:&#xA;  - id: camera_node&#xA;    outputs: [image]&#xA;&#xA;  - id: processing_node&#xA;    _unstable_deploy:&#xA;      machine: robot1&#xA;      path: /home/robot/dora-nodes/processing_node&#xA;    inputs:&#xA;      image: camera_node/image&#xA;    outputs: [result]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Start the Coordinator and Dataflow 🏁&lt;/h2&gt; &#xA;&lt;p&gt;Run the coordinator on a designated machine and start the dataflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dora coordinator&#xA;dora start dataflow.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;YAML Example for Distributed Dataflow 📘&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;communication:&#xA;  zenoh: {}&#xA;&#xA;nodes:&#xA;  - id: camera_node&#xA;    custom:&#xA;      run: ./camera_driver.py&#xA;    outputs:&#xA;      - image&#xA;&#xA;  - id: processing_node&#xA;    _unstable_deploy:&#xA;      machine: robot1&#xA;      path: /home/robot/dora-nodes/processing_node&#xA;    inputs:&#xA;      image: camera_node/image&#xA;    outputs:&#xA;      - result&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href=&#34;https://github.com/dora-rs/dora/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Discussions&lt;/h2&gt; &#xA;&lt;p&gt;Our main communication channels are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/6eMGGutkfE&#34;&gt;Our Discord server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/dora-rs/discussions&#34;&gt;Our Github Project Discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to reach out on any topic, issues or ideas.&lt;/p&gt; &#xA;&lt;p&gt;We also have &lt;a href=&#34;https://raw.githubusercontent.com/dora-rs/dora/main/CONTRIBUTING.md&#34;&gt;a contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under Apache-2.0. Check out &lt;a href=&#34;https://raw.githubusercontent.com/dora-rs/dora/main/NOTICE.md&#34;&gt;NOTICE.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Further Resources 📚&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zenoh.io/docs/&#34;&gt;Zenoh Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dora-rs/dora/issues/512&#34;&gt;DORA Zenoh Discussion (GitHub Issue #512)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dora-rs/dora-autoware-localization-demo&#34;&gt;Dora Autoware Localization Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>medialab/xan</title>
    <updated>2025-04-06T01:47:13Z</updated>
    <id>tag:github.com,2025-04-06:/medialab/xan</id>
    <link href="https://github.com/medialab/xan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The CSV magician&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/medialab/xan/actions&#34;&gt;&lt;img src=&#34;https://github.com/medialab/xan/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;xan&lt;/code&gt;, the CSV magician&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; is a command line tool that can be used to process CSV files directly from the shell.&lt;/p&gt; &#xA;&lt;p&gt;It has been written in Rust to be as fast as possible, use as little memory as possible, and can easily handle very large CSV files (Gigabytes). It is also able to leverage parallelism (through multithreading) to make some tasks complete as fast as your computer can allow.&lt;/p&gt; &#xA;&lt;p&gt;It can easily preview, filter, slice, aggregate, sort, join CSV files, and exposes a large collection of composable commands that can be chained together to perform a wide variety of typical tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; also leverages its own expression language so you can perform complex tasks that cannot be done by relying on the simplest commands. This minimalistic language has been tailored for CSV data and is &lt;em&gt;way&lt;/em&gt; faster than evaluating typical dynamically-typed languages such as Python, Lua, JavaScript etc.&lt;/p&gt; &#xA;&lt;p&gt;Note that this tool is originally a fork of &lt;a href=&#34;https://github.com/BurntSushi&#34;&gt;BurntSushi&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/BurntSushi/xsv&#34;&gt;&lt;code&gt;xsv&lt;/code&gt;&lt;/a&gt;, but has been nearly entirely rewritten at that point, to fit &lt;a href=&#34;https://github.com/medialab&#34;&gt;SciencesPo&#39;s médialab&lt;/a&gt; use-cases, rooted in web data collection and analysis geared towards social sciences (you might think CSV is outdated by now, but read our &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/LOVE_LETTER.md&#34;&gt;love letter&lt;/a&gt; to the format before judging too quickly).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; therefore goes beyond typical data manipulation and expose utilities related to lexicometry, graph theory and even scraping.&lt;/p&gt; &#xA;&lt;p&gt;Finally, &lt;code&gt;xan&lt;/code&gt; can be used to display CSV files in the terminal, for easy exploration, and can even be used to draw basic data visualisations:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;em&gt;view command&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;em&gt;flatten command&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/view.png&#34; alt=&#34;view&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/flatten.png&#34; alt=&#34;flatten&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;categorical histogram&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;scatterplot&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/categ-hist.png&#34; alt=&#34;categ-hist&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/correlation.png&#34; alt=&#34;correlation&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;categorical scatterplot&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;histograms&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/scatter.png&#34; alt=&#34;scatter&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/hist.png&#34; alt=&#34;hist&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;parallel processing&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;time series&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/parallel.png&#34; alt=&#34;parallel&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/series.png&#34; alt=&#34;series&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;small multiples (facet grid)&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;grouped view&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/small-multiples.png&#34; alt=&#34;small-multiples&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/view-grid.png&#34; alt=&#34;view-grid&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;correlation matrix heatmap&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;em&gt;heatmap&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/corr-heatmap.png&#34; alt=&#34;small-multiples&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/img/grid/heatmap.png&#34; alt=&#34;view-grid&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#how-to-install&#34;&gt;How to install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#cargo&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#scoop-windows&#34;&gt;Scoop (Windows)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#homebrew-macos&#34;&gt;Homebrew (macOS)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#arch-linux&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#nix&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#pre-built-binaries&#34;&gt;Pre-built binaries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#installing-completions&#34;&gt;Installing completions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#quick-tour&#34;&gt;Quick tour&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#available-commands&#34;&gt;Available commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#general-flags-and-io-model&#34;&gt;General flags and IO model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#expression-language-reference&#34;&gt;Expression language reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#cookbook&#34;&gt;Cookbook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#news&#34;&gt;News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/#frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; can be installed using cargo (it usually comes with &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install xan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also tweak the build flags to make sure the Rust compiler is able to leverage all your CPU&#39;s features:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CARGO_BUILD_RUSTFLAGS=&#39;-C target-cpu=native&#39; cargo install xan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install the latest dev version thusly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install --git https://github.com/medialab/xan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; can be installed using &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras&#xA;scoop install xan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; can be installed with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; on macOS thusly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install xan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;xan&lt;/code&gt; from the &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/xan/&#34;&gt;extra repository&lt;/a&gt; using &lt;code&gt;pacman&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S xan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; is packaged for Nix, and is available in Nixpkgs as of 25.05 release. To install it, you may add it to your &lt;code&gt;environment.systemPackages&lt;/code&gt; as &lt;code&gt;pkgs.xan&lt;/code&gt; or use &lt;code&gt;nix-shell&lt;/code&gt; to enter an ephemeral shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell -p xan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-built binaries&lt;/h3&gt; &#xA;&lt;p&gt;Pre-built binaries can be found attached to every GitHub &lt;a href=&#34;https://github.com/medialab/xan/releases/latest&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently supported targets include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x86_64-pc-windows-gnu&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to open a PR to improve the CI by adding relevant targets.&lt;/p&gt; &#xA;&lt;h3&gt;Installing completions&lt;/h3&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;xan&lt;/code&gt; also exposes handy automatic completions for command and header/column names that you can install through the &lt;code&gt;xan completions&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to understand how to install those completions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan completions -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick tour&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s learn about the most commonly used &lt;code&gt;xan&lt;/code&gt; commands by exploring a corpus of French medias:&lt;/p&gt; &#xA;&lt;h3&gt;Downloading the corpus&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -LO https://github.com/medialab/corpora/raw/master/polarisation/medias.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Displaying the file&#39;s headers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan headers medias.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;0   webentity_id&#xA;1   name&#xA;2   prefixes&#xA;3   home_page&#xA;4   start_pages&#xA;5   indegree&#xA;6   hyphe_creation_timestamp&#xA;7   hyphe_last_modification_timestamp&#xA;8   outreach&#xA;9   foundation_year&#xA;10  batch&#xA;11  edito&#xA;12  parody&#xA;13  origin&#xA;14  digital_native&#xA;15  mediacloud_ids&#xA;16  wheel_category&#xA;17  wheel_subcategory&#xA;18  has_paywall&#xA;19  inactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Counting the number of rows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan count medias.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;478&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Previewing the file in the terminal&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan view medias.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 5/20 cols from 10 first rows of medias.csv&#xA;┌───┬───────────────┬───────────────┬────────────┬───┬─────────────┬──────────┐&#xA;│ - │ name          │ prefixes      │ home_page  │ … │ has_paywall │ inactive │&#xA;├───┼───────────────┼───────────────┼────────────┼───┼─────────────┼──────────┤&#xA;│ 0 │ Acrimed.org   │ http://acrim… │ http://ww… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 1 │ 24matins.fr   │ http://24mat… │ https://w… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 2 │ Actumag.info  │ http://actum… │ https://a… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 3 │ 2012un-Nouve… │ http://2012u… │ http://ww… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 4 │ 24heuresactu… │ http://24heu… │ http://24… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 5 │ AgoraVox      │ http://agora… │ http://ww… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 6 │ Al-Kanz.org   │ http://al-ka… │ https://w… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 7 │ Alalumieredu… │ http://alalu… │ http://al… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 8 │ Allodocteurs… │ http://allod… │ https://w… │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 9 │ Alterinfo.net │ http://alter… │ http://ww… │ … │ &amp;lt;empty&amp;gt;     │ true     │&#xA;│ … │ …             │ …             │ …          │ … │ …           │ …        │&#xA;└───┴───────────────┴───────────────┴────────────┴───┴─────────────┴──────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On unix, don&#39;t hesitate to use the &lt;code&gt;-p&lt;/code&gt; flag to automagically forward the full output to an appropriate pager and skim through all the columns.&lt;/p&gt; &#xA;&lt;h3&gt;Reading a flattened representation of the first row&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# NOTE: drop -c to avoid truncating the values&#xA;xan flatten -c medias.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Row n°0&#xA;───────────────────────────────────────────────────────────────────────────────&#xA;webentity_id                      1&#xA;name                              Acrimed.org&#xA;prefixes                          http://acrimed.org|http://acrimed69.blogspot…&#xA;home_page                         http://www.acrimed.org&#xA;start_pages                       http://acrimed.org|http://acrimed69.blogspot…&#xA;indegree                          61&#xA;hyphe_creation_timestamp          1560347020330&#xA;hyphe_last_modification_timestamp 1560526005389&#xA;outreach                          nationale&#xA;foundation_year                   2002&#xA;batch                             1&#xA;edito                             media&#xA;parody                            false&#xA;origin                            france&#xA;digital_native                    true&#xA;mediacloud_ids                    258269&#xA;wheel_category                    Opinion Journalism&#xA;wheel_subcategory                 Left Wing&#xA;has_paywall                       false&#xA;inactive                          &amp;lt;empty&amp;gt;&#xA;&#xA;Row n°1&#xA;───────────────────────────────────────────────────────────────────────────────&#xA;webentity_id                      2&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Searching for rows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan search -s outreach internationale medias.csv | xan view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 4/20 cols from 10 first rows of &amp;lt;stdin&amp;gt;&#xA;┌───┬──────────────┬────────────────────┬───┬─────────────┬──────────┐&#xA;│ - │ webentity_id │ name               │ … │ has_paywall │ inactive │&#xA;├───┼──────────────┼────────────────────┼───┼─────────────┼──────────┤&#xA;│ 0 │ 25           │ Businessinsider.fr │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 1 │ 59           │ Europe-Israel.org  │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 2 │ 66           │ France 24          │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 3 │ 220          │ RFI                │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 4 │ 231          │ fr.Sott.net        │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 5 │ 246          │ Voltairenet.org    │ … │ true        │ &amp;lt;empty&amp;gt;  │&#xA;│ 6 │ 254          │ Afp.com /fr        │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 7 │ 265          │ Euronews FR        │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 8 │ 333          │ Arte.tv            │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ 9 │ 341          │ I24News.tv         │ … │ false       │ &amp;lt;empty&amp;gt;  │&#xA;│ … │ …            │ …                  │ … │ …           │ …        │&#xA;└───┴──────────────┴────────────────────┴───┴─────────────┴──────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Selecting some columns&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan select foundation_year,name medias.csv | xan view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 2 cols from 10 first rows of &amp;lt;stdin&amp;gt;&#xA;┌───┬─────────────────┬───────────────────────────────────────┐&#xA;│ - │ foundation_year │ name                                  │&#xA;├───┼─────────────────┼───────────────────────────────────────┤&#xA;│ 0 │ 2002            │ Acrimed.org                           │&#xA;│ 1 │ 2006            │ 24matins.fr                           │&#xA;│ 2 │ 2013            │ Actumag.info                          │&#xA;│ 3 │ 2012            │ 2012un-Nouveau-Paradigme.com          │&#xA;│ 4 │ 2010            │ 24heuresactu.com                      │&#xA;│ 5 │ 2005            │ AgoraVox                              │&#xA;│ 6 │ 2008            │ Al-Kanz.org                           │&#xA;│ 7 │ 2012            │ Alalumieredunouveaumonde.blogspot.com │&#xA;│ 8 │ 2005            │ Allodocteurs.fr                       │&#xA;│ 9 │ 2005            │ Alterinfo.net                         │&#xA;│ … │ …               │ …                                     │&#xA;└───┴─────────────────┴───────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sorting the file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan sort -s foundation_year medias.csv | xan view -s name,foundation_year&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 2 cols from 10 first rows of &amp;lt;stdin&amp;gt;&#xA;┌───┬────────────────────────────────────┬─────────────────┐&#xA;│ - │ name                               │ foundation_year │&#xA;├───┼────────────────────────────────────┼─────────────────┤&#xA;│ 0 │ Le Monde Numérique (Ouest France)  │ &amp;lt;empty&amp;gt;         │&#xA;│ 1 │ Le Figaro                          │ 1826            │&#xA;│ 2 │ Le journal de Saône-et-Loire       │ 1826            │&#xA;│ 3 │ L&#39;Indépendant                      │ 1846            │&#xA;│ 4 │ Le Progrès                         │ 1859            │&#xA;│ 5 │ La Dépêche du Midi                 │ 1870            │&#xA;│ 6 │ Le Pélerin                         │ 1873            │&#xA;│ 7 │ Dernières Nouvelles d&#39;Alsace (DNA) │ 1877            │&#xA;│ 8 │ La Croix                           │ 1883            │&#xA;│ 9 │ Le Chasseur Francais               │ 1885            │&#xA;│ … │ …                                  │ …               │&#xA;└───┴────────────────────────────────────┴─────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deduplicating the file on some column&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Some medias of our corpus have the same ids on mediacloud.org&#xA;xan dedup -s mediacloud_ids medias.csv | xan count &amp;amp;&amp;amp; xan count medias.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;457&#xA;478&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deduplicating can also be done while sorting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan sort -s mediacloud_ids -u medias.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Computing frequency tables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan frequency -s edito medias.csv | xan view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 3 cols from 5 rows of &amp;lt;stdin&amp;gt;&#xA;┌───┬───────┬────────────┬───────┐&#xA;│ - │ field │ value      │ count │&#xA;├───┼───────┼────────────┼───────┤&#xA;│ 0 │ edito │ media      │ 423   │&#xA;│ 1 │ edito │ individu   │ 30    │&#xA;│ 2 │ edito │ plateforme │ 14    │&#xA;│ 3 │ edito │ agrégateur │ 10    │&#xA;│ 4 │ edito │ agence     │ 1     │&#xA;└───┴───────┴────────────┴───────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Printing a histogram&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan frequency -s edito medias.csv | xan hist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Histogram for edito (bars: 5, sum: 478, max: 423):&#xA;&#xA;media      |423  88.49%|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|&#xA;individu   | 30   6.28%|━━━╸                                                  |&#xA;plateforme | 14   2.93%|━╸                                                    |&#xA;agrégateur | 10   2.09%|━╸                                                    |&#xA;agence     |  1   0.21%|╸                                                     |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Computing descriptive statistics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan stats -s indegree,edito medias.csv | xan transpose | xan view -I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 2 cols from 14 rows of &amp;lt;stdin&amp;gt;&#xA;┌─────────────┬───────────────────┬────────────┐&#xA;│ field       │ indegree          │ edito      │&#xA;├─────────────┼───────────────────┼────────────┤&#xA;│ count       │ 463               │ 478        │&#xA;│ count_empty │ 15                │ 0          │&#xA;│ type        │ int               │ string     │&#xA;│ types       │ int|empty         │ string     │&#xA;│ sum         │ 25987             │ &amp;lt;empty&amp;gt;    │&#xA;│ mean        │ 56.12742980561554 │ &amp;lt;empty&amp;gt;    │&#xA;│ variance    │ 4234.530197929737 │ &amp;lt;empty&amp;gt;    │&#xA;│ stddev      │ 65.07326792108829 │ &amp;lt;empty&amp;gt;    │&#xA;│ min         │ 0                 │ &amp;lt;empty&amp;gt;    │&#xA;│ max         │ 424               │ &amp;lt;empty&amp;gt;    │&#xA;│ lex_first   │ 0                 │ agence     │&#xA;│ lex_last    │ 99                │ plateforme │&#xA;│ min_length  │ 0                 │ 5          │&#xA;│ max_length  │ 3                 │ 11         │&#xA;└─────────────┴───────────────────┴────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluating an expression to filter a file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan filter &#39;batch &amp;gt; 1&#39; medias.csv | xan count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;130&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the expression language&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/cheatsheet.md&#34;&gt;cheatsheet&lt;/a&gt;, run &lt;code&gt;xan help cheatsheet&lt;/code&gt;. To display the full list of available &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/functions.md&#34;&gt;functions&lt;/a&gt;, run &lt;code&gt;xan help functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluating an expression to create a new column based on other ones&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan map &#39;fmt(&#34;{} ({})&#34;, name, foundation_year)&#39; key medias.csv | xan select key | xan slice -l 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;key&#xA;Acrimed.org (2002)&#xA;24matins.fr (2006)&#xA;Actumag.info (2013)&#xA;2012un-Nouveau-Paradigme.com (2012)&#xA;24heuresactu.com (2010)&#xA;AgoraVox (2005)&#xA;Al-Kanz.org (2008)&#xA;Alalumieredunouveaumonde.blogspot.com (2012)&#xA;Allodocteurs.fr (2005)&#xA;Alterinfo.net (2005)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the expression language&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/cheatsheet.md&#34;&gt;cheatsheet&lt;/a&gt;, run &lt;code&gt;xan help cheatsheet&lt;/code&gt;. To display the full list of available &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/functions.md&#34;&gt;functions&lt;/a&gt;, run &lt;code&gt;xan help functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Transform a column by evaluating an expression&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan transform name &#39;split(name, &#34;.&#34;) | first | upper&#39; medias.csv | xan select name | xan slice -l 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;name&#xA;ACRIMED&#xA;24MATINS&#xA;ACTUMAG&#xA;2012UN-NOUVEAU-PARADIGME&#xA;24HEURESACTU&#xA;AGORAVOX&#xA;AL-KANZ&#xA;ALALUMIEREDUNOUVEAUMONDE&#xA;ALLODOCTEURS&#xA;ALTERINFO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the expression language&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/cheatsheet.md&#34;&gt;cheatsheet&lt;/a&gt;, run &lt;code&gt;xan help cheatsheet&lt;/code&gt;. To display the full list of available &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/functions.md&#34;&gt;functions&lt;/a&gt;, run &lt;code&gt;xan help functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performing custom aggregation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan agg &#39;sum(indegree) as total_indegree, mean(indegree) as mean_indegree&#39; medias.csv | xan view -I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 1 col from 1 rows of &amp;lt;stdin&amp;gt;&#xA;┌────────────────┬───────────────────┐&#xA;│ total_indegree │ mean_indegree     │&#xA;├────────────────┼───────────────────┤&#xA;│ 25987          │ 56.12742980561554 │&#xA;└────────────────┴───────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the expression language&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/cheatsheet.md&#34;&gt;cheatsheet&lt;/a&gt;, run &lt;code&gt;xan help cheatsheet&lt;/code&gt;. To display the full list of available &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/functions.md&#34;&gt;functions&lt;/a&gt;, run &lt;code&gt;xan help functions&lt;/code&gt;. Finally, to display the list of available &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/aggs.md&#34;&gt;aggregation functions&lt;/a&gt;, run &lt;code&gt;xan help aggs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Grouping rows and performing per-group aggregation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xan groupby edito &#39;sum(indegree) as indegree&#39; medias.csv | xan view -I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Displaying 1 col from 5 rows of &amp;lt;stdin&amp;gt;&#xA;┌────────────┬──────────┐&#xA;│ edito      │ indegree │&#xA;├────────────┼──────────┤&#xA;│ agence     │ 50       │&#xA;│ agrégateur │ 459      │&#xA;│ plateforme │ 658      │&#xA;│ media      │ 24161    │&#xA;│ individu   │ 659      │&#xA;└────────────┴──────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the expression language&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/cheatsheet.md&#34;&gt;cheatsheet&lt;/a&gt;, run &lt;code&gt;xan help cheatsheet&lt;/code&gt;. To display the full list of available &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/functions.md&#34;&gt;functions&lt;/a&gt;, run &lt;code&gt;xan help functions&lt;/code&gt;. Finally, to display the list of available &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/aggs.md&#34;&gt;aggregation functions&lt;/a&gt;, run &lt;code&gt;xan help aggs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/help.md&#34;&gt;&lt;strong&gt;help&lt;/strong&gt;&lt;/a&gt;: Get help regarding the expression language&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Explore &amp;amp; visualize&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/count.md&#34;&gt;&lt;strong&gt;count (c)&lt;/strong&gt;&lt;/a&gt;: Count rows in file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/headers.md&#34;&gt;&lt;strong&gt;headers (h)&lt;/strong&gt;&lt;/a&gt;: Show header names&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/view.md&#34;&gt;&lt;strong&gt;view (v)&lt;/strong&gt;&lt;/a&gt;: Preview a CSV file in a human-friendly way&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/flatten.md&#34;&gt;&lt;strong&gt;flatten&lt;/strong&gt;&lt;/a&gt;: Display a flattened version of each row of a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/hist.md&#34;&gt;&lt;strong&gt;hist&lt;/strong&gt;&lt;/a&gt;: Print a histogram with rows of CSV file as bars&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/plot.md&#34;&gt;&lt;strong&gt;plot&lt;/strong&gt;&lt;/a&gt;: Draw a scatter plot or line chart&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/heatmap.md&#34;&gt;&lt;strong&gt;heatmap&lt;/strong&gt;&lt;/a&gt;: Draw a heatmap of a CSV matrix&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/progress.md&#34;&gt;&lt;strong&gt;progress&lt;/strong&gt;&lt;/a&gt;: Display a progress bar while reading CSV data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Search &amp;amp; filter&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/search.md&#34;&gt;&lt;strong&gt;search&lt;/strong&gt;&lt;/a&gt;: Search for (or replace) patterns in CSV data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/filter.md&#34;&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;/a&gt;: Only keep some CSV rows based on an evaluated expression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/slice.md&#34;&gt;&lt;strong&gt;slice&lt;/strong&gt;&lt;/a&gt;: Slice rows of CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/top.md&#34;&gt;&lt;strong&gt;top&lt;/strong&gt;&lt;/a&gt;: Find top rows of a CSV file according to some column&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/sample.md&#34;&gt;&lt;strong&gt;sample&lt;/strong&gt;&lt;/a&gt;: Randomly sample CSV data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Sort &amp;amp; deduplicate&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/sort.md&#34;&gt;&lt;strong&gt;sort&lt;/strong&gt;&lt;/a&gt;: Sort CSV data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/dedup.md&#34;&gt;&lt;strong&gt;dedup&lt;/strong&gt;&lt;/a&gt;: Deduplicate a CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/shuffle.md&#34;&gt;&lt;strong&gt;shuffle&lt;/strong&gt;&lt;/a&gt;: Shuffle CSV data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Aggregate&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/frequency.md&#34;&gt;&lt;strong&gt;frequency (freq)&lt;/strong&gt;&lt;/a&gt;: Show frequency tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/groupby.md&#34;&gt;&lt;strong&gt;groupby&lt;/strong&gt;&lt;/a&gt;: Aggregate data by groups of a CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/stats.md&#34;&gt;&lt;strong&gt;stats&lt;/strong&gt;&lt;/a&gt;: Compute basic statistics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/agg.md&#34;&gt;&lt;strong&gt;agg&lt;/strong&gt;&lt;/a&gt;: Aggregate data from CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/bins.md&#34;&gt;&lt;strong&gt;bins&lt;/strong&gt;&lt;/a&gt;: Dispatch numeric columns into bins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Combine multiple CSV files&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/cat.md&#34;&gt;&lt;strong&gt;cat&lt;/strong&gt;&lt;/a&gt;: Concatenate by row or column&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/join.md&#34;&gt;&lt;strong&gt;join&lt;/strong&gt;&lt;/a&gt;: Join CSV files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/regex-join.md&#34;&gt;&lt;strong&gt;regex-join&lt;/strong&gt;&lt;/a&gt;: Fuzzy join CSV files using regex patterns&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/url-join.md&#34;&gt;&lt;strong&gt;url-join&lt;/strong&gt;&lt;/a&gt;: Join CSV files on url prefixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/merge.md&#34;&gt;&lt;strong&gt;merge&lt;/strong&gt;&lt;/a&gt;: Merge multiple similar already sorted CSV files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Add, transform, drop and move columns&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/select.md&#34;&gt;&lt;strong&gt;select&lt;/strong&gt;&lt;/a&gt;: Select columns from a CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/drop.md&#34;&gt;&lt;strong&gt;drop&lt;/strong&gt;&lt;/a&gt;: Drop columns from a CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/map.md&#34;&gt;&lt;strong&gt;map&lt;/strong&gt;&lt;/a&gt;: Create a new column by evaluating an expression on each CSV row&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/transform.md&#34;&gt;&lt;strong&gt;transform&lt;/strong&gt;&lt;/a&gt;: Transform a column by evaluating an expression on each CSV row&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/enum.md&#34;&gt;&lt;strong&gt;enum&lt;/strong&gt;&lt;/a&gt;: Enumerate CSV file by preprending an index column&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/flatmap.md&#34;&gt;&lt;strong&gt;flatmap&lt;/strong&gt;&lt;/a&gt;: Emit one row per value yielded by an expression evaluated for each CSV row&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/fill.md&#34;&gt;&lt;strong&gt;fill&lt;/strong&gt;&lt;/a&gt;: Fill empty cells&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/blank.md&#34;&gt;&lt;strong&gt;blank&lt;/strong&gt;&lt;/a&gt;: Blank down contiguous identical cell values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Format, convert &amp;amp; recombobulate&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/behead.md&#34;&gt;&lt;strong&gt;behead&lt;/strong&gt;&lt;/a&gt;: Drop header from CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/rename.md&#34;&gt;&lt;strong&gt;rename&lt;/strong&gt;&lt;/a&gt;: Rename columns of a CSV file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/input.md&#34;&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;/a&gt;: Read unusually formatted CSV data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/fixlengths.md&#34;&gt;&lt;strong&gt;fixlengths&lt;/strong&gt;&lt;/a&gt;: Makes all rows have same length&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/fmt.md&#34;&gt;&lt;strong&gt;fmt&lt;/strong&gt;&lt;/a&gt;: Format CSV output (change field delimiter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/explode.md&#34;&gt;&lt;strong&gt;explode&lt;/strong&gt;&lt;/a&gt;: Explode rows based on some column separator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/implode.md&#34;&gt;&lt;strong&gt;implode&lt;/strong&gt;&lt;/a&gt;: Collapse consecutive identical rows based on a diverging column&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/from.md&#34;&gt;&lt;strong&gt;from&lt;/strong&gt;&lt;/a&gt;: Convert a variety of formats to CSV&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/to.md&#34;&gt;&lt;strong&gt;to&lt;/strong&gt;&lt;/a&gt;: Convert a CSV file to a variety of data formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/scrape.md&#34;&gt;&lt;strong&gt;scrape&lt;/strong&gt;&lt;/a&gt;: Scrape HTML into CSV data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/reverse.md&#34;&gt;&lt;strong&gt;reverse&lt;/strong&gt;&lt;/a&gt;: Reverse rows of CSV data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/transpose.md&#34;&gt;&lt;strong&gt;transpose (t)&lt;/strong&gt;&lt;/a&gt;: Transpose CSV file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Split a CSV file into multiple&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/split.md&#34;&gt;&lt;strong&gt;split&lt;/strong&gt;&lt;/a&gt;: Split CSV data into chunks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/partition.md&#34;&gt;&lt;strong&gt;partition&lt;/strong&gt;&lt;/a&gt;: Partition CSV data based on a column value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Parallel operation over multiple CSV files&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/parallel.md&#34;&gt;&lt;strong&gt;parallel (p)&lt;/strong&gt;&lt;/a&gt;: Map-reduce-like parallel computation over multiple CSV files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Generate CSV files&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/range.md&#34;&gt;&lt;strong&gt;range&lt;/strong&gt;&lt;/a&gt;: Create a CSV file from a numerical range&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Perform side-effects&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/eval.md&#34;&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/a&gt;: Evaluate/debug a single expression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/foreach.md&#34;&gt;&lt;strong&gt;foreach&lt;/strong&gt;&lt;/a&gt;: Loop over a CSV file to perform side effects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Lexicometry &amp;amp; fuzzy matching&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/tokenize.md&#34;&gt;&lt;strong&gt;tokenize&lt;/strong&gt;&lt;/a&gt;: Tokenize a text column&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/vocab.md&#34;&gt;&lt;strong&gt;vocab&lt;/strong&gt;&lt;/a&gt;: Build a vocabulary over tokenized documents&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/cluster.md&#34;&gt;&lt;strong&gt;cluster&lt;/strong&gt;&lt;/a&gt;: Cluster CSV data to find near-duplicates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Matrix &amp;amp; network-related commands&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/matrix.md&#34;&gt;&lt;strong&gt;matrix&lt;/strong&gt;&lt;/a&gt;: Convert CSV data to matrix data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cmd/network.md&#34;&gt;&lt;strong&gt;network&lt;/strong&gt;&lt;/a&gt;: Convert CSV data to network data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General flags and IO model&lt;/h2&gt; &#xA;&lt;h3&gt;Getting help&lt;/h3&gt; &#xA;&lt;p&gt;If you ever feel lost, each command has a &lt;code&gt;-h/--help&lt;/code&gt; flag that will print the related documentation.&lt;/p&gt; &#xA;&lt;p&gt;If you need help about the expression language, check out the &lt;code&gt;help&lt;/code&gt; command itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Help about help ;)&#xA;xan help --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Regarding input &amp;amp; output formats&lt;/h3&gt; &#xA;&lt;p&gt;All &lt;code&gt;xan&lt;/code&gt; commands expect a &#34;standard&#34; CSV file, e.g. comma-delimited, with proper double-quote escaping. This said, &lt;code&gt;xan&lt;/code&gt; is also perfectly able to infer the delimiter from typical file extensions such as &lt;code&gt;.tsv&lt;/code&gt;, &lt;code&gt;.tab&lt;/code&gt;, &lt;code&gt;.psv&lt;/code&gt;, &lt;code&gt;.ssv&lt;/code&gt; or &lt;code&gt;.scsv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to process a file with a custom delimiter, you can either use the &lt;code&gt;xan input&lt;/code&gt; command or use the &lt;code&gt;-d/--delimiter&lt;/code&gt; flag available with all commands.&lt;/p&gt; &#xA;&lt;p&gt;If you need to output a custom CSV dialect (e.g. using &lt;code&gt;;&lt;/code&gt; delimiters), feel free to use the &lt;code&gt;xan fmt&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Finally, even if most &lt;code&gt;xan&lt;/code&gt; commands won&#39;t even need to decode the file&#39;s bytes, some might still need to. In this case, &lt;code&gt;xan&lt;/code&gt; will expect correctly formatted UTF-8 text. Please use &lt;code&gt;iconv&lt;/code&gt; or other utils if you need to process other encodings such as &lt;code&gt;latin1&lt;/code&gt; ahead of &lt;code&gt;xan&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Working with headless CSV file&lt;/h3&gt; &#xA;&lt;p&gt;Even if this is good practice to name your columns, some CSV file simply don&#39;t have headers. Most commands are able to deal with those file if you give the &lt;code&gt;-n/--no-headers&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Note that this flag always relates to the input, not the output. If for some reason you want to drop a CSV output&#39;s header row, use the &lt;code&gt;xan behead&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Regarding stdin&lt;/h3&gt; &#xA;&lt;p&gt;By default, all commands will try to read from stdin when the file path is not specified. This makes piping easy and comfortable as it respects typical unix standards. Some commands may have multiple inputs (&lt;code&gt;xan join&lt;/code&gt;, for instance), in which case stdin is usually specifiable using the &lt;code&gt;-&lt;/code&gt; character:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First file given to join will be read from stdin&#xA;cat file1.csv | xan join col1 - col2 file2.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the command will also warn you when stdin cannot be read, in case you forgot to indicate the file&#39;s path.&lt;/p&gt; &#xA;&lt;h3&gt;Regarding stdout&lt;/h3&gt; &#xA;&lt;p&gt;By default, all commands will print their output to stdout (note that this output is usually buffered for performance reasons).&lt;/p&gt; &#xA;&lt;p&gt;In addition, all commands expose a &lt;code&gt;-o/--output&lt;/code&gt; flag that can be use to specify where to write the output. This can be useful if you do not want to or cannot use &lt;code&gt;&amp;gt;&lt;/code&gt; (typically in some Windows shells). In which case, &lt;code&gt;-&lt;/code&gt; as a output path will mean forwarding to stdout also. This can be useful when scripting sometimes.&lt;/p&gt; &#xA;&lt;h3&gt;Gzipped files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;xan&lt;/code&gt; is able to read gzipped files (having a &lt;code&gt;.gz&lt;/code&gt; extension) out of the box.&lt;/p&gt; &#xA;&lt;h2&gt;Expression language reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/cheatsheet.md&#34;&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/functions.md&#34;&gt;Comprehensive list of functions &amp;amp; operators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/aggs.md&#34;&gt;Comprehensive list of aggregation functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/moonblade/scraping.md&#34;&gt;Scraping DSL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cookbook&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cookbook/frequency_tables.md&#34;&gt;Merging frequency tables, three ways&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cookbook/dates.md&#34;&gt;Parsing and visualizing dates with xan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cookbook/urls.md&#34;&gt;Joining files by URL prefixes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/cookbook/misc.md&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;For news about the tool&#39;s evolutions feel free to read:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://raw.githubusercontent.com/medialab/xan/master/docs/XANZINE.md&#34;&gt;xan zines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;How to display a vertical bar chart?&lt;/h3&gt; &#xA;&lt;p&gt;Rotate your screen ;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MystenLabs/walrus</title>
    <updated>2025-04-06T01:47:13Z</updated>
    <id>tag:github.com,2025-04-06:/MystenLabs/walrus</id>
    <link href="https://github.com/MystenLabs/walrus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A decentralized blob store using Sui for coordination and governance.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Walrus&lt;/h1&gt; &#xA;&lt;p&gt;A decentralized blob store using &lt;a href=&#34;https://github.com/MystenLabs/sui&#34;&gt;Sui&lt;/a&gt; for coordination and governance.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Our main documentation is available &lt;a href=&#34;https://docs.wal.app&#34;&gt;as a Walrus Site&lt;/a&gt; (see &lt;a href=&#34;https://docs.wal.app/walrus-sites/intro.html&#34;&gt;the documentation&lt;/a&gt; for further information on what this means) and on &lt;a href=&#34;https://mystenlabs.github.io/walrus&#34;&gt;GitHub Pages&lt;/a&gt;; it is generated using &lt;a href=&#34;https://rust-lang.github.io/mdBook/&#34;&gt;mdBook&lt;/a&gt; from source files in the &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/docs/book&#34;&gt;&lt;code&gt;docs/book&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also build the documentation locally (assuming you have Rust installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install mdbook mdbook-admonish mdbook-katex mdbook-linkcheck mdbook-tabs mdbook-templates --locked&#xA;mdbook serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, you can browse the documentation at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are some additional documentation resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage examples are available under &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/docs/examples/&#34;&gt;docs/examples&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our encoding system, which we call &lt;em&gt;Red Stuff&lt;/em&gt;, is described in detail in &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/docs/red-stuff.md&#34;&gt;docs/red-stuff.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All our code is covered by Rust docs. You can build these and open them in your web browser by running the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo doc --workspace --open # add `--no-deps` to prevent building docs of all dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Repository structure&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains all Walrus-related code, tools, and documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/contracts&#34;&gt;&lt;code&gt;contracts&lt;/code&gt;&lt;/a&gt; contains all smart contracts used by Walrus for coordination and governance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates&#34;&gt;&lt;code&gt;crates&lt;/code&gt;&lt;/a&gt; contains all Rust crates related to Walrus including binaries for storage nodes and clients. See &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/#rust-crates&#34;&gt;below&lt;/a&gt; for further information about those.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/docker&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; contains Dockerfiles and docker-compose setups for building and running Walrus.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; contains high-level technical and design documentation about Walrus.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt; contains tools used for evaluating and testing the code. In particular, this contains a script to run a local testbed, see &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/CONTRIBUTING.md#run-a-local-walrus-testbed&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/setup&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; contains setup scripts and configuration files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/testnet-contracts&#34;&gt;&lt;code&gt;testnet-contracts&lt;/code&gt;&lt;/a&gt; contains the Walrus contracts deployed for Walrus Testnet. The object IDs of the published contracts are included in the &lt;code&gt;Move.lock&lt;/code&gt; files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rust crates&lt;/h3&gt; &#xA;&lt;p&gt;Our Rust code is split into several crates with different responsibilities. The main code for Walrus is contained in the following crates:&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable proper-names --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-core/&#34;&gt;walrus-core&lt;/a&gt; contains core types and functionality, including encoding and authentication mechanisms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-sdk/&#34;&gt;walrus-sdk&lt;/a&gt; contains (client) interactions with storage nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-service/&#34;&gt;walrus-service&lt;/a&gt; contains client and server functionality including the storage backend. This crate also contains all main binaries, in particular &lt;code&gt;walrus&lt;/code&gt; and &lt;code&gt;walrus-node&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-sui/&#34;&gt;walrus-sui&lt;/a&gt; contains all types and interactions with the Sui smart contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-utils/&#34;&gt;walrus-utils&lt;/a&gt; contains utility functions used in multiple crates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following crates contain additional tools that are not part of the main functionality of Walrus and more extensive tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/checkpoint-downloader/&#34;&gt;checkpoint-downloader&lt;/a&gt; contains code to download checkpoints from Sui RPC nodes and checkpoint buckets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-e2e-tests/&#34;&gt;walrus-e2e-tests&lt;/a&gt; contains end-to-end tests, some of which are also run as simulation tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-orchestrator/&#34;&gt;walrus-orchestrator&lt;/a&gt; contains tools to deploy and benchmark distributed Walrus networks. This crate is not a default member of the workspace and therefore needs to be built explicitly by adding &lt;code&gt;-p walrus-orchestrator&lt;/code&gt; or &lt;code&gt;--workspace&lt;/code&gt; to the cargo commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-proc-macros/&#34;&gt;walrus-proc-macros&lt;/a&gt; contains procedural macros used in the other crates, notably to define simulation tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-proxy/&#34;&gt;walrus-proxy&lt;/a&gt; contains a metrics proxy that authenticates storage nodes and collects metrics from them. This crate is not a default member of the workspace and therefore needs to be built explicitly by adding &lt;code&gt;-p walrus-proxy&lt;/code&gt; or &lt;code&gt;--workspace&lt;/code&gt; to the cargo commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-simtest/&#34;&gt;walrus-simtest&lt;/a&gt; contains simulation tests to ensure that Walrus works correctly for all interleavings of concurrent operations and in the presence of crashes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-stress/&#34;&gt;walrus-stress&lt;/a&gt; contains a stress client, which is used to put load on storage nodes and perform randomized staking re-assignments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/crates/walrus-test-utils/&#34;&gt;walrus-test-utils&lt;/a&gt; contains test macros and other utilities used in the other crates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdownlint-enable proper-names --&gt; &#xA;&lt;h2&gt;Using the Walrus client&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to use the Walrus Mainnet or Testnet, please follow the &lt;a href=&#34;https://docs.wal.app/usage/setup.html&#34;&gt;setup instructions in our documentation&lt;/a&gt;. Further information about the usage is also available in the &lt;a href=&#34;https://docs.wal.app/usage/interacting.html&#34;&gt;public documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build the binary from source or run local tests, see the instructions &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/#building-from-source-and-testing&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We assume that this code is executed on at least 32-bit hardware; concretely, we assume that a &lt;code&gt;u32&lt;/code&gt; can be converted safely into a &lt;code&gt;usize&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Servers are assumed to use a 64-bit architecture (or higher); concretely, &lt;code&gt;usize&lt;/code&gt; has at least 64 bits.&lt;/li&gt; &#xA; &lt;li&gt;Our encoding relies on vector instructions to be efficient. Our default builds assume AVX2 and SSSE3 support on x86 CPUs and Neon support on ARM CPUs. Walrus binaries can be built for CPUs without these features, but will be much slower.&lt;/li&gt; &#xA; &lt;li&gt;When a client is executed on a 32-bit architecture, it may panic for blobs above a certain size. Given sufficient physical memory (4 GiB), it is generally possible to encode or decode blobs smaller than 500 MiB on 32-bit architectures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building from source and testing&lt;/h2&gt; &#xA;&lt;p&gt;To build Walrus you need to install Rust as described in the &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust documentation&lt;/a&gt;, and the correct Rust toolchain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup update &amp;amp;&amp;amp; rustup toolchain install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can build Walrus using Cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build # add `--release` for optimized builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can directly run a local build of the &lt;code&gt;walrus&lt;/code&gt; binary as &lt;code&gt;cargo run --bin walrus&lt;/code&gt;. Arguments and options can be specified after a &lt;code&gt;--&lt;/code&gt;, for example &lt;code&gt;cargo run --bin walrus -- store README.md --epochs 1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can run our test suite by installing &lt;a href=&#34;https://nexte.st/&#34;&gt;nextest&lt;/a&gt;, and then calling &lt;code&gt;cargo nextest run&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/CONTRIBUTING.md#tests&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for further details on our tests and instructions on how to run a local Walrus testbed.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you observe a bug or want to request a feature, please search for an existing &lt;a href=&#34;https://github.com/MystenLabs/walrus/issues&#34;&gt;issue&lt;/a&gt; on this topic and, if none exists, create a new one. If you would like to contribute code directly (which we highly appreciate), please familiarize yourself with our &lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/CONTRIBUTING.md&#34;&gt;contributing workflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/MystenLabs/walrus/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
</feed>