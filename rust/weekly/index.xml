<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-16T01:51:05Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Y2Z/monolith</title>
    <updated>2025-02-16T01:51:05Z</updated>
    <id>tag:github.com,2025-02-16:/Y2Z/monolith</id>
    <link href="https://github.com/Y2Z/monolith" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⬛️ CLI tool for saving complete web pages as a single HTML file&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Y2Z/monolith/actions?query=workflow%3AGNU%2FLinux&#34;&gt;&lt;img src=&#34;https://github.com/Y2Z/monolith/workflows/GNU%2FLinux/badge.svg?sanitize=true&#34; alt=&#34;monolith build status on GNU/Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Y2Z/monolith/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/Y2Z/monolith/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;monolith build status on macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Y2Z/monolith/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/Y2Z/monolith/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;monolith build status on Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; _____     ______________    __________      ___________________    ___&#xA;|     \   /              \  |          |    |                   |  |   |&#xA;|      \_/       __       \_|    __    |    |    ___     ___    |__|   |&#xA;|               |  |            |  |   |    |   |   |   |   |          |&#xA;|   |\     /|   |__|    _       |__|   |____|   |   |   |   |    __    |&#xA;|   | \___/ |          | \                      |   |   |   |   |  |   |&#xA;|___|       |__________|  \_____________________|   |___|   |___|  |___|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A data hoarder’s dream come true: bundle any web page into a single HTML file. You can finally replace that gazillion of open tabs with a gazillion of .html files stored somewhere on your precious little drive.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the conventional “Save page as”, &lt;code&gt;monolith&lt;/code&gt; not only saves the target document, it embeds CSS, image, and JavaScript assets &lt;strong&gt;all at once&lt;/strong&gt;, producing a single HTML5 document that is a joy to store and share.&lt;/p&gt; &#xA;&lt;p&gt;If compared to saving websites with &lt;code&gt;wget -mpk&lt;/code&gt;, this tool embeds all assets as data URLs and therefore lets browsers render the saved page exactly the way it was on the Internet, even when no network connection is available.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://crates.io/crates/monolith&#34;&gt;Cargo&lt;/a&gt; (cross-platform)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via &lt;a href=&#34;https://formulae.brew.sh/formula/monolith&#34;&gt;Homebrew&lt;/a&gt; (macOS and GNU/Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via &lt;a href=&#34;https://community.chocolatey.org/packages/monolith&#34;&gt;Chocolatey&lt;/a&gt; (Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;choco install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via &lt;a href=&#34;https://scoop.sh/#/apps?q=monolith&#34;&gt;Scoop&lt;/a&gt; (Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;scoop install main/monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via &lt;a href=&#34;https://winstall.app/apps/Y2Z.Monolith&#34;&gt;Winget&lt;/a&gt; (Windows)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;winget install --id=Y2Z.Monolith -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via &lt;a href=&#34;https://ports.macports.org/port/monolith/summary&#34;&gt;MacPorts&lt;/a&gt; (macOS)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo port install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://snapcraft.io/monolith&#34;&gt;Snapcraft&lt;/a&gt; (GNU/Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;snap install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://packages.guix.gnu.org/packages/monolith&#34;&gt;Guix&lt;/a&gt; (GNU/Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;guix install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://search.nixos.org/packages?channel=unstable&amp;amp;show=monolith&amp;amp;query=monolith&#34;&gt;NixPkgs&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix-env -iA nixpkgs.monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://flox.dev&#34;&gt;Flox&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;flox install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/monolith&#34;&gt;Pacman&lt;/a&gt; (Arch Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pacman -S monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=monolith&#34;&gt;aports&lt;/a&gt; (Alpine Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;apk add monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://voidlinux.org/packages/?q=monolith&#34;&gt;XBPS Package Manager&lt;/a&gt; (Void Linux)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;xbps-install -S monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://svnweb.freebsd.org/ports/head/www/monolith/&#34;&gt;FreeBSD packages&lt;/a&gt; (FreeBSD)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pkg install monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://www.freshports.org/www/monolith/&#34;&gt;FreeBSD ports&lt;/a&gt; (FreeBSD)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd /usr/ports/www/monolith/&#xA;make install clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://pkgsrc.se/www/monolith&#34;&gt;pkgsrc&lt;/a&gt; (NetBSD, OpenBSD, Haiku, etc)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd /usr/pkgsrc/www/monolith&#xA;make install clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://www.docker.com/&#34;&gt;containers&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build -t y2z/monolith .&#xA;sudo install -b dist/run-in-container.sh /usr/local/bin/monolith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From &lt;a href=&#34;https://github.com/Y2Z/monolith&#34;&gt;source&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Dependencies: &lt;code&gt;libssl&lt;/code&gt;, &lt;code&gt;cargo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Install cargo (GNU/Linux)&lt;/summary&gt; Check if cargo is installed &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If cargo is not already installed, install and add it to your existing &lt;code&gt;$PATH&lt;/code&gt; (paraphrasing the &lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;official installation instructions&lt;/a&gt;):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl https://sh.rustup.rs -sSf | sh&#xA;. &#34;$HOME/.cargo/env&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Proceed with installing from source:&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git clone https://github.com/Y2Z/monolith.git&#xA;cd monolith&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/Y2Z/monolith/releases&#34;&gt;pre-built binaries&lt;/a&gt; (Windows, ARM-based devices, etc)&lt;/h4&gt; &#xA;&lt;p&gt;Every release contains pre-built binaries for Windows, GNU/Linux, as well as platforms with non-standard CPU architecture.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;monolith https://lyrics.github.io/db/P/Portishead/Dummy/Roads/ -o portishead-roads-lyrics.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cat some-site-page.html | monolith -aIiFfcMv -b https://some.site/ - &amp;gt; some-site-page-with-assets.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-a&lt;/code&gt;: Exclude audio sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-b&lt;/code&gt;: Use &lt;code&gt;custom base URL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-B&lt;/code&gt;: Forbid retrieving assets from specified domain(s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: Exclude CSS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-C&lt;/code&gt;: Read cookies from &lt;code&gt;file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: Allow retrieving assets only from specified &lt;code&gt;domain(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: Ignore network errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-E&lt;/code&gt;: Save document using &lt;code&gt;custom encoding&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-f&lt;/code&gt;: Omit frames&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-F&lt;/code&gt;: Exclude web fonts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-h&lt;/code&gt;: Print help information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: Remove images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-I&lt;/code&gt;: Isolate the document&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-j&lt;/code&gt;: Exclude JavaScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-k&lt;/code&gt;: Accept invalid X.509 (TLS) certificates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-M&lt;/code&gt;: Don&#39;t add timestamp and URL information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-n&lt;/code&gt;: Extract contents of NOSCRIPT elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: Write output to &lt;code&gt;file&lt;/code&gt; (use “-” for STDOUT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-s&lt;/code&gt;: Be quiet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-t&lt;/code&gt;: Adjust &lt;code&gt;network request timeout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-u&lt;/code&gt;: Provide &lt;code&gt;custom User-Agent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: Exclude videos&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Whitelisting and blacklisting domains&lt;/h2&gt; &#xA;&lt;p&gt;Options &lt;code&gt;-d&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; provide control over what domains can be used to retrieve assets from, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;monolith -I -d example.com -d www.example.com https://example.com -o example-only.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;monolith -I -B -d .googleusercontent.com -d googleanalytics.com -d .google.com https://example.com -o example-no-ads.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dynamic content&lt;/h2&gt; &#xA;&lt;p&gt;Monolith doesn&#39;t feature a JavaScript engine, hence websites that retrieve and display data after initial load may require usage of additional tools.&lt;/p&gt; &#xA;&lt;p&gt;For example, Chromium (Chrome) can be used to act as a pre-processor for such pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;chromium --headless --window-size=1920,1080 --run-all-compositor-stages-before-draw --virtual-time-budget=9000 --incognito --dump-dom https://github.com | monolith - -I -b https://github.com -o github.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Proxies&lt;/h2&gt; &#xA;&lt;p&gt;Please set &lt;code&gt;https_proxy&lt;/code&gt;, &lt;code&gt;http_proxy&lt;/code&gt;, and &lt;code&gt;no_proxy&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please open an issue if something is wrong, that helps make this project better.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;To the extent possible under law, the author(s) have dedicated all copyright related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>agersant/polaris</title>
    <updated>2025-02-16T01:51:05Z</updated>
    <id>tag:github.com,2025-02-16:/agersant/polaris</id>
    <link href="https://github.com/agersant/polaris" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Polaris is a music streaming application, designed to let you enjoy your music collection from any computer or mobile device.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/agersant/polaris/master/res/readme/logo.png?raw=true&#34;&gt;&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/agersant/polaris/actions&#34;&gt;&lt;img src=&#34;https://github.com/agersant/polaris/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/agersant/polaris&#34;&gt;&lt;img src=&#34;https://codecov.io/github/agersant/polaris/graph/badge.svg?token=EQqCmBEf2T&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/agersant/polaris/master/LICENSE-MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/agersant/polaris/master/res/readme/web_ui.png?raw=true&#34; alt=&#34;Polaris Web UI&#34; title=&#34;Polaris Web UI&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;Polaris is a self-hosted music streaming server, to enjoy your music collection from any computer or mobile device. It is free and open-source software, without any kind of premium version.&lt;/p&gt; &#xA;&lt;p&gt;The goals of this project are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥 Exceptional performance and responsiveness&lt;/li&gt; &#xA; &lt;li&gt;📚️ First-class support for large music collections (100,000+ songs)&lt;/li&gt; &#xA; &lt;li&gt;📦️ Ease of installation, deployment and maintenance&lt;/li&gt; &#xA; &lt;li&gt;✨ Beautiful user interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Try It Out!&lt;/h1&gt; &#xA;&lt;p&gt;Check out the demo over at &lt;a href=&#34;https://demo.polaris.stream&#34;&gt;https://demo.polaris.stream&lt;/a&gt;, featuring a selection of Creative Commons Music. The credentials to access this server are:&lt;/p&gt; &#xA;&lt;p&gt;Username: &lt;code&gt;demo_user&lt;/code&gt;&lt;br&gt; Password: &lt;code&gt;demo_password&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🖥️ Runs on Windows, Linux, BSD, or through Docker&lt;/li&gt; &#xA; &lt;li&gt;🔊 Support for &lt;code&gt;flac&lt;/code&gt;, &lt;code&gt;mp3&lt;/code&gt;, &lt;code&gt;mp4&lt;/code&gt;, &lt;code&gt;mpc&lt;/code&gt;, &lt;code&gt;ogg&lt;/code&gt;, &lt;code&gt;opus&lt;/code&gt;, &lt;code&gt;ape&lt;/code&gt;, &lt;code&gt;wav&lt;/code&gt; and &lt;code&gt;aiff&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;🌈 Dark mode variants and customizable color palette&lt;/li&gt; &#xA; &lt;li&gt;💿️ Browse your music by album, artist or genre&lt;/li&gt; &#xA; &lt;li&gt;📂 Browse your music as a file tree&lt;/li&gt; &#xA; &lt;li&gt;🌊 Song audio-waveform visualization&lt;/li&gt; &#xA; &lt;li&gt;🏷️ Support for multi-value fields in song metadata (eg. multiple artists per song)&lt;/li&gt; &#xA; &lt;li&gt;🔍️ Powerful search functionality with per-field queries&lt;/li&gt; &#xA; &lt;li&gt;⚙️ Plain-text configuration also editable with built-in UI&lt;/li&gt; &#xA; &lt;li&gt;👥 Setup multiple users, each with their own playlists&lt;/li&gt; &#xA; &lt;li&gt;📱 Listen to your music on the go: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Polaris Android (&lt;a href=&#34;https://play.google.com/store/apps/details?id=agersant.polaris&#34;&gt;Google Play Store&lt;/a&gt; · &lt;a href=&#34;https://f-droid.org/packages/agersant.polaris/&#34;&gt;F-Droid&lt;/a&gt; · &lt;a href=&#34;https://github.com/agersant/polaris-android&#34;&gt;Repository&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Polarios (&lt;a href=&#34;https://apps.apple.com/app/polarios/id1662366309&#34;&gt;App Store&lt;/a&gt; · &lt;a href=&#34;https://gitlab.com/elise/Polarios&#34;&gt;Repository&lt;/a&gt;) [third-party]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/agersant/polaris/master/docs/SETUP.md&#34;&gt;Installation documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/agersant/polaris/master/docs/DDNS.md&#34;&gt;Streaming from remote devices&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/polaris-streaming/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/polaris-streaming.svg?columns=3&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📒 &lt;a href=&#34;https://raw.githubusercontent.com/agersant/polaris/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://raw.githubusercontent.com/agersant/polaris/master/docs/CONFIGURATION.md&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;👷 &lt;a href=&#34;https://raw.githubusercontent.com/agersant/polaris/master/docs/CONTRIBUTING.md&#34;&gt;Contribute to Polaris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🛟 &lt;a href=&#34;https://raw.githubusercontent.com/agersant/polaris/master/docs/MAINTENANCE.md&#34;&gt;Maintenance Runbooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Polaris server API is documented via &lt;a href=&#34;https://demo.polaris.stream/api-docs/&#34;&gt;OpenAPI&lt;/a&gt;. Every installation of Polaris distributes this interactive documentation. To access it, open &lt;a href=&#34;http://localhost:5050/api-docs/&#34;&gt;http://localhost:5050/api-docs/&lt;/a&gt; in your browser on the machine running Polaris.&lt;/p&gt; &#xA;&lt;h1&gt;Credits &amp;amp; License Information&lt;/h1&gt; &#xA;&lt;p&gt;Music featured in the demo installation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chriszabriskie.bandcamp.com/album/abandon-babylon&#34;&gt;Chris Zabriskie - Abandon Babylon&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;(License)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chriszabriskie.bandcamp.com/album/angies-sunday-service&#34;&gt;Chris Zabriskie - Angie&#39;s Sunday Service&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;(License)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://steviasphere.bandcamp.com/album/pool-water-blue&#34;&gt;glaciære - pool water blue&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;(License)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://steviasphere.bandcamp.com/album/light-ripples&#34;&gt;glaciære - light ripples&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;(License)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koresma.bandcamp.com/album/south&#34;&gt;Koresma South&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;(License)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://petemurphy.bandcamp.com/album/falling-down-the-fred-astaires-solo-jazz-piano&#34;&gt;Pete Murphy - Essence EP&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;(License)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ramesesb.bandcamp.com/album/essence-ep&#34;&gt;Rameses B - Essence EP&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/3.0/&#34;&gt;(License)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>n0-computer/iroh</title>
    <updated>2025-02-16T01:51:05Z</updated>
    <id>tag:github.com,2025-02-16:/n0-computer/iroh</id>
    <link href="https://github.com/n0-computer/iroh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;peer-2-peer that just works&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://iroh.computer&#34;&gt;&lt;img alt=&#34;iroh&#34; src=&#34;https://raw.githubusercontent.com/n0-computer/iroh/main/.img/iroh_wordmark.svg?sanitize=true&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; less net work for networks &lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.rs/iroh/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/iroh&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/iroh.svg?style=flat-square&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/iroh&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/iroh.svg?style=flat-square&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/DpmJgtU7cW&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1161119546170687619?logo=discord&amp;amp;style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@n0computer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YouTube-red?logo=youtube&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-APACHE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?style=flat-square&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/n0-computer/iroh/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/n0-computer/iroh/ci.yml?branch=main&amp;amp;style=flat-square&amp;amp;label=CI&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://iroh.computer/docs&#34;&gt; Docs Site &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://docs.rs/iroh&#34;&gt; Rust Docs &lt;/a&gt; &lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;What is iroh?&lt;/h2&gt; &#xA;&lt;p&gt;Iroh gives you an API for dialing by public key. You say “connect to that phone”, iroh will find &amp;amp; maintain the fastest connection for you, regardless of where it is.&lt;/p&gt; &#xA;&lt;h3&gt;Hole-punching&lt;/h3&gt; &#xA;&lt;p&gt;The fastest route is a direct connection, so if necessary, iroh tries to hole-punch. Should this fail, it can fall back to an open ecosystem of public relay servers. To ensure these connections are as fast as possible, we &lt;a href=&#34;https://perf.iroh.computer&#34;&gt;continuously measure iroh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Built on &lt;a href=&#34;https://en.wikipedia.org/wiki/QUIC&#34;&gt;QUIC&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Iroh uses &lt;a href=&#34;https://github.com/quinn-rs/quinn&#34;&gt;Quinn&lt;/a&gt; to establish &lt;a href=&#34;https://en.wikipedia.org/wiki/QUIC&#34;&gt;QUIC&lt;/a&gt; connections between nodes. This way you get authenticated encryption, concurrent streams with stream priorities, a datagram transport and avoid head-of-line-blocking out of the box.&lt;/p&gt; &#xA;&lt;h2&gt;Compose Protocols&lt;/h2&gt; &#xA;&lt;p&gt;Use pre-existing protocols built on iroh instead of writing your own:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n0-computer/iroh-blobs&#34;&gt;iroh-blobs&lt;/a&gt; for &lt;a href=&#34;https://github.com/BLAKE3-team/BLAKE3&#34;&gt;BLAKE3&lt;/a&gt;-based content-addressed blob transfer scaling from kilobytes to terabytes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n0-computer/iroh-gossip&#34;&gt;iroh-gossip&lt;/a&gt; for establishing publish-subscribe overlay networks that scale, requiring only resources that your average phone can handle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n0-computer/iroh-docs&#34;&gt;iroh-docs&lt;/a&gt; for an eventually-consistent key-value store of &lt;a href=&#34;https://github.com/n0-computer/iroh-blobs&#34;&gt;iroh-blobs&lt;/a&gt; blobs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n0-computer/iroh-willow&#34;&gt;iroh-willow&lt;/a&gt; for an (in-construction) implementation of the &lt;a href=&#34;https://willowprotocol.org&#34;&gt;willow protocol&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Rust Library&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s easiest to use iroh from rust. Install it using &lt;code&gt;cargo add iroh&lt;/code&gt;, then on the connecting side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;const ALPN: &amp;amp;[u8] = b&#34;iroh-example/echo/0&#34;;&#xA;&#xA;let endpoint = Endpoint::builder().discovery_n0().bind().await?;&#xA;&#xA;// Open a connection to the accepting node&#xA;let conn = endpoint.connect(addr, ALPN).await?;&#xA;&#xA;// Open a bidirectional QUIC stream&#xA;let (mut send, mut recv) = conn.open_bi().await?;&#xA;&#xA;// Send some data to be echoed&#xA;send.write_all(b&#34;Hello, world!&#34;).await?;&#xA;send.finish()?;&#xA;&#xA;// Receive the echo&#xA;let response = recv.read_to_end(1000).await?;&#xA;assert_eq!(&amp;amp;response, b&#34;Hello, world!&#34;);&#xA;&#xA;// Close the endpoint and all its connections&#xA;endpoint.close().await;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And on the accepting side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rs&#34;&gt;let endpoint = Endpoint::builder().discovery_n0().bind().await?;&#xA;&#xA;let router = Router::builder(endpoint)&#xA;    .accept(ALPN.to_vec(), Arc::new(Echo))&#xA;    .spawn()&#xA;    .await?;&#xA;&#xA;// The protocol definition:&#xA;#[derive(Debug, Clone)]&#xA;struct Echo;&#xA;&#xA;impl ProtocolHandler for Echo {&#xA;    fn accept(self: Arc&amp;lt;Self&amp;gt;, connecting: Connecting) -&amp;gt; BoxedFuture&amp;lt;Result&amp;lt;()&amp;gt;&amp;gt; {&#xA;        Box::pin(async move {&#xA;            let connection = connecting.await?;&#xA;            let (mut send, mut recv) = connection.accept_bi().await?;&#xA;&#xA;            // Echo any bytes received back directly.&#xA;            let bytes_sent = tokio::io::copy(&amp;amp;mut recv, &amp;amp;mut send).await?;&#xA;&#xA;            send.finish()?;&#xA;            connection.closed().await;&#xA;&#xA;            Ok(())&#xA;        })&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full example code with more comments can be found at &lt;a href=&#34;https://raw.githubusercontent.com/n0-computer/iroh/main/iroh/examples/echo.rs&#34;&gt;&lt;code&gt;echo.rs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or use one of the pre-existing protocols, e.g. &lt;a href=&#34;https://github.com/n0-computer/iroh-blobs&#34;&gt;iroh-blobs&lt;/a&gt; or &lt;a href=&#34;https://github.com/n0-computer/iroh-gossip&#34;&gt;iroh-gossip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other Languages&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use iroh from other languages, make sure to check out &lt;a href=&#34;https://github.com/n0-computer/iroh-ffi&#34;&gt;iroh-ffi&lt;/a&gt;, the repository for FFI bindings.&lt;/p&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RwAt36Xe3UI_&#34;&gt;Introducing Iroh (video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iroh.computer/docs&#34;&gt;Iroh Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n0-computer/iroh-examples&#34;&gt;Iroh Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n0-computer/iroh-experiments&#34;&gt;Iroh Experiments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a workspace of crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;iroh&lt;/code&gt;: The core library for hole-punching &amp;amp; communicating with relays.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iroh-relay&lt;/code&gt;: The relay server implementation. This is the code we run in production (and you can, too!).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iroh-base&lt;/code&gt;: Common types like &lt;code&gt;Hash&lt;/code&gt;, key types or &lt;code&gt;RelayUrl&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iroh-dns-server&lt;/code&gt;: DNS server implementation powering the &lt;code&gt;n0_discovery&lt;/code&gt; for NodeIds, running at dns.iroh.link.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iroh-net-report&lt;/code&gt;: Analyzes your host&#39;s networking ability &amp;amp; NAT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2024 N0, INC.&lt;/p&gt; &#xA;&lt;p&gt;This project is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this project by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>