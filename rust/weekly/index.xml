<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-05T02:01:04Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cube-js/cube</title>
    <updated>2023-11-05T02:01:04Z</updated>
    <id>tag:github.com,2023-11-05:/cube-js/cube</id>
    <link href="https://github.com/cube-js/cube" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üìä Cube ‚Äî The Semantic Layer for Building Data Applications&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cube.dev?ref=github-readme&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cube-js/cube.js/master/docs/content/cube-logo-with-bg.png&#34; alt=&#34;Cube ‚Äî Semantic Layer for Data Applications&#34; width=&#34;300px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cube.dev?ref=github-readme&#34;&gt;Website&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://cube.dev/docs/getting-started?ref=github-readme&#34;&gt;Getting Started&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://cube.dev/docs?ref=github-readme&#34;&gt;Docs&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://cube.dev/docs/examples?ref=github-readme&#34;&gt;Examples&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://cube.dev/blog?ref=github-readme&#34;&gt;Blog&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://slack.cube.dev?ref=github-readme&#34;&gt;Slack&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://twitter.com/the_cube_dev&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/%40cubejs-backend%2Fserver&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40cubejs-backend%2Fserver.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cube-js/cube/actions?query=workflow%3ABuild+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/cube-js/cube/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cube is the semantic layer for building data applications.&lt;/strong&gt; It helps data engineers and application developers access data from modern data stores, organize it into consistent definitions, and deliver it to every application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ucarecdn.com/8d945f29-e9eb-4e7f-9e9e-29ae7074e195/&#34; style=&#34;border: none&#34; width=&#34;100%&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Learn more about connecting Cube to &lt;a href=&#34;https://cube.dev/docs/config/databases?ref=github-readme&#34; target=&#34;_blank&#34;&gt;data sources&lt;/a&gt; and &lt;a href=&#34;https://cube.dev/docs/config/downstream?ref=github-readme&#34; target=&#34;_blank&#34;&gt;analytics &amp;amp; visualization tools&lt;/a&gt;.&lt;/i&gt; &lt;/p&gt; &#xA;&lt;p&gt;Cube was designed to work with all SQL-enabled data sources, including cloud data warehouses like Snowflake or Google BigQuery, query engines like Presto or Amazon Athena, and application databases like Postgres. Cube has a built-in relational caching engine to provide sub-second latency and high concurrency for API requests.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://cube.dev/docs/cubejs-introduction?ref=github-readme&#34;&gt;introduction&lt;/a&gt; page in our documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Why Cube?&lt;/h2&gt; &#xA;&lt;p&gt;If you are building a data application‚Äîsuch as a business intelligence tool or a customer-facing analytics feature‚Äîyou‚Äôll probably face the following problems:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL code organization.&lt;/strong&gt; Sooner or later, modeling even a dozen metrics with a dozen dimensions using pure SQL queries becomes a maintenance nightmare, which leads to building a modeling framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance.&lt;/strong&gt; Most of the time and effort in modern analytics software development is spent providing adequate time to insight. In a world where every company‚Äôs data is big data, writing just SQL queries to get insight isn‚Äôt enough anymore.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access Control.&lt;/strong&gt; It is important to secure and govern access to data for all downstream data consuming applications.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Cube has the necessary infrastructure and features to implement efficient data modeling, access control, and performance optimizations so that every application‚Äîlike embedded analytics, dashboarding and reporting tools, data notebooks, and other tools‚Äîcan access consistent data via REST, SQL, and GraphQL APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cube-js/cube.js/master/docs/content/old-was-vs-cubejs-way.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started üöÄ&lt;/h2&gt; &#xA;&lt;h3&gt;Cube Cloud&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cube.dev/cloud?ref=github-readme&#34;&gt;Cube Cloud&lt;/a&gt; is the fastest way to get started with Cube. It provides managed infrastructure as well as an instant and free access for development projects and proofs of concept.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cubecloud.dev/auth/signup?ref=github-readme&#34;&gt;&lt;img src=&#34;https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f1f1eac0-0b44-4c47-936e-33b5c06eedf0.png&#34; alt=&#34;Get started now&#34; width=&#34;200px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a step-by-step guide on Cube Cloud, &lt;a href=&#34;https://cube.dev/docs/getting-started/cloud/overview?ref=github-readme&#34;&gt;see the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can get started with Cube locally or self-host it with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once Docker is installed, in a new folder for your project, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 4000:4000 \&#xA;  -p 15432:15432 \&#xA;  -v ${PWD}:/cube/conf \&#xA;  -e CUBEJS_DEV_MODE=true \&#xA;  cubejs/cube&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, open &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; in your browser to continue setup.&lt;/p&gt; &#xA;&lt;p&gt;For a step-by-step guide on Docker, &lt;a href=&#34;https://cube.dev/docs/getting-started-docker?ref=github-readme&#34;&gt;see the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cube.dev/docs?ref=github-readme&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cube.dev/docs/getting-started?ref=github-readme&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cube.dev/docs/examples?ref=github-readme&#34;&gt;Examples &amp;amp; Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cube.dev/docs/cubejs-introduction?ref=github-readme#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways you can contribute to Cube! Here are a few possibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Star this repo and follow us on &lt;a href=&#34;https://twitter.com/the_cube_dev&#34;&gt;Twitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add Cube to your stack on &lt;a href=&#34;https://stackshare.io/cube-js&#34;&gt;Stackshare&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Upvote issues with üëç reaction so we know what&#39;s the demand for particular issue to prioritize it within road map.&lt;/li&gt; &#xA; &lt;li&gt;Create issues every time you feel something is missing or goes wrong.&lt;/li&gt; &#xA; &lt;li&gt;Ask questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/cube.js&#34;&gt;Stack Overflow with cube.js tag&lt;/a&gt; if others can have these questions as well.&lt;/li&gt; &#xA; &lt;li&gt;Provide pull requests for all open issues and especially for those with &lt;a href=&#34;https://github.com/cube-js/cube/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;help wanted&lt;/a&gt; and &lt;a href=&#34;https://github.com/cube-js/cube/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issue&lt;/a&gt; labels.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All sort of contributions are &lt;strong&gt;welcome and extremely helpful&lt;/strong&gt; üôå Please refer to &lt;a href=&#34;https://github.com/cube-js/cube/raw/master/CONTRIBUTING.md&#34;&gt;the contribution guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Cube Client is &lt;a href=&#34;https://raw.githubusercontent.com/cube-js/cube/master/packages/cubejs-client-core/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cube Backend is &lt;a href=&#34;https://raw.githubusercontent.com/cube-js/cube/master/packages/cubejs-server/LICENSE&#34;&gt;Apache 2.0 licensed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wasmerio/wasmer</title>
    <updated>2023-11-05T02:01:04Z</updated>
    <id>tag:github.com,2023-11-05:/wasmerio/wasmer</id>
    <link href="https://github.com/wasmerio/wasmer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ The leading WebAssembly Runtime supporting WASIX, WASI and Emscripten&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://wasmer.io&#34; target=&#34;_blank&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source srcset=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/logo-white.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;   &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/logo.png&#34; alt=&#34;Wasmer logo&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/wasmerio/wasmer/actions?query=workflow%3Abuild&#34;&gt; &lt;img src=&#34;https://github.com/wasmerio/wasmer/actions/workflows/build.yml/badge.svg?event=push&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/wasmerio/wasmer.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://docs.wasmer.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Docs&amp;amp;message=docs.wasmer.io&amp;amp;color=blue&#34; alt=&#34;Wasmer Docs&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/rWkMNStrEW&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1110300506942881873&#34; alt=&#34;Wasmer on Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Wasmer is a &lt;em&gt;blazing fast&lt;/em&gt; and &lt;em&gt;secure&lt;/em&gt; &lt;a href=&#34;https://webassembly.org&#34;&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt;&lt;/a&gt; runtime that enables incredibly &lt;em&gt;lightweight containers&lt;/em&gt; to run anywhere: from &lt;em&gt;Desktop&lt;/em&gt; to the &lt;em&gt;Cloud&lt;/em&gt;, &lt;em&gt;Edge&lt;/em&gt; and even the browser.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt; by default. No file, network, or environment access, unless explicitly enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pluggable&lt;/strong&gt;. supports &lt;a href=&#34;https://wasix.org/&#34;&gt;&lt;strong&gt;WASIX&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/WebAssembly/WASI&#34;&gt;WASI&lt;/a&gt; and &lt;a href=&#34;https://emscripten.org/&#34;&gt;Emscripten&lt;/a&gt; out of the box.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Incredibly Fast&lt;/strong&gt;. Run WebAssembly at near-native speeds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embeddable&lt;/strong&gt; &lt;a href=&#34;https://github.com/wasmerio/wasmer/#wasmer-sdk&#34;&gt;anywhere via Wasmer SDKs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install Wasmer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://get.wasmer.io -sSfL | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Other installation options (Powershell, Brew, Cargo, ...)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;Wasmer can be installed from various package managers. Choose the one that fits best for your environment:&lt;/em&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Powershell (Windows) &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;iwr https://win.wasmer.io -useb | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/wasmer&#34;&gt;Homebrew&lt;/a&gt; (macOS, Linux)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install wasmer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/wasmer.json&#34;&gt;Scoop&lt;/a&gt; (Windows)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install wasmer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://chocolatey.org/packages/wasmer&#34;&gt;Chocolatey&lt;/a&gt; (Windows)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install wasmer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://crates.io/crates/cargo-binstall/&#34;&gt;Cargo binstall&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo binstall wasmer-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://crates.io/crates/wasmer-cli/&#34;&gt;Cargo&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note: All the available features are described in the &lt;a href=&#34;https://github.com/wasmerio/wasmer/tree/master/lib/cli/README.md&#34;&gt;&lt;code&gt;wasmer-cli&lt;/code&gt; crate docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install wasmer-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Looking for more installation options? See &lt;a href=&#34;https://github.com/wasmerio/wasmer-install&#34;&gt;the &lt;code&gt;wasmer-install&lt;/code&gt; repository&lt;/a&gt; to learn more!&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You can also try Wasmer online in &lt;a href=&#34;https://wasmer.sh/&#34;&gt;wasmer.sh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;You can start by running &lt;a href=&#34;https://wasmer.io/syrusakbary/cowsay&#34;&gt;Cowsay&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wasmer run cowsay &#34;hello world&#34;&#xA; _____________&#xA;&amp;lt; hello world &amp;gt;&#xA; -------------&#xA;        \   ^__^&#xA;         \  (oo)\_______&#xA;            (__)\       )\/\&#xA;               ||----w |&#xA;                ||     ||&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There are many more available packages, such as &lt;a href=&#34;https://wasmer.io/wasmer/python&#34;&gt;&lt;code&gt;wasmer/python&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://wasmer.io/saghul/quickjs&#34;&gt;&lt;code&gt;quickjs&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://docs.wasmer.io/registry/get-started&#34;&gt;Create your own package&lt;/a&gt;, or explore packages from the community: &lt;a href=&#34;https://wasmer.io/explore&#34;&gt;https://wasmer.io/explore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Here is what you can do next:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.wasmer.io/runtime/get-started&#34;&gt;Run a package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.wasmer.io/registry/get-started&#34;&gt;Publish a package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.wasmer.io/edge/get-started&#34;&gt;Deploy your website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasmer.io/posts&#34;&gt;Read more about Wasmer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wasmer SDK&lt;/h2&gt; &#xA;&lt;p&gt;You can use the Wasmer runtime &lt;strong&gt;embedded in different languages&lt;/strong&gt; with the Wasmer SDK:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/rust.svg?sanitize=true&#34; alt=&#34;Rust logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer/tree/master/lib/api&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/wasmer/&#34;&gt;&lt;code&gt;wasmer&lt;/code&gt; Rust crate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/wasmer/&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/c.svg?sanitize=true&#34; alt=&#34;C logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer/tree/master/lib/c-api&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/lib/c-api/tests/wasm-c-api/include/wasm.h&#34;&gt;&lt;code&gt;wasm.h&lt;/code&gt; header&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/wasmer-c-api/*/wasmer/wasm_c_api/index.html&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/cpp.svg?sanitize=true&#34; alt=&#34;C++ logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer/tree/master/lib/c-api&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/lib/c-api/tests/wasm-c-api/include/wasm.hh&#34;&gt;&lt;code&gt;wasm.hh&lt;/code&gt; header&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rs/wasmer-c-api/*/wasmer/wasm_c_api/index.html&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/csharp.svg?sanitize=true&#34; alt=&#34;C# logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/migueldeicaza/WasmerSharp&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WasmerSharp/&#34;&gt;&lt;code&gt;WasmerSharp&lt;/code&gt; NuGet package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://migueldeicaza.github.io/WasmerSharp/&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/d.svg?sanitize=true&#34; alt=&#34;D logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/chances/wasmer-d&#34;&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://code.dlang.org/packages/wasmer&#34;&gt;&lt;code&gt;wasmer&lt;/code&gt; Dub package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chances.github.io/wasmer-d&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/python.svg?sanitize=true&#34; alt=&#34;Python logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-python&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/wasmer/&#34;&gt;&lt;code&gt;wasmer&lt;/code&gt; PyPI package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wasmerio.github.io/wasmer-python/api/wasmer&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/js.svg?sanitize=true&#34; alt=&#34;JS logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-js&#34;&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/org/wasmer&#34;&gt;&lt;code&gt;@wasmerio&lt;/code&gt; NPM packages&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.wasmer.io/integrations/js/reference-api&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/go.svg?sanitize=true&#34; alt=&#34;Go logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-go&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer&#34;&gt;&lt;code&gt;wasmer&lt;/code&gt; Go package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer?tab=doc&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/php.svg?sanitize=true&#34; alt=&#34;PHP logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-php&#34;&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pecl.php.net/package/wasm&#34;&gt;&lt;code&gt;wasm&lt;/code&gt; PECL package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wasmerio.github.io/wasmer-php/&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/ruby.svg?sanitize=true&#34; alt=&#34;Ruby logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-ruby&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rubygems.org/gems/wasmer&#34;&gt;&lt;code&gt;wasmer&lt;/code&gt; Ruby Gem&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wasmerio.github.io/wasmer-ruby/wasmer_ruby/index.html&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/java.svg?sanitize=true&#34; alt=&#34;Java logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-java&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bintray.com/wasmer/wasmer-jni/wasmer-jni&#34;&gt;&lt;code&gt;wasmer/wasmer-jni&lt;/code&gt; Bintray package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-java/#api-of-the-wasmer-library&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/r.svg?sanitize=true&#34; alt=&#34;R logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dirkschumacher/wasmr&#34;&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dirkschumacher/wasmr#example&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/postgres.svg?sanitize=true&#34; alt=&#34;Postgres logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-postgres&#34;&gt;&lt;strong&gt;Postgres&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-postgres#usage--documentation&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/swift.svg?sanitize=true&#34; alt=&#34;Swift logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AlwaysRightInstitute/SwiftyWasmer&#34;&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ziglang/logo/master/zig-favicon.png&#34; alt=&#34;Zig logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zigwasm/wasmer-zig&#34;&gt;&lt;strong&gt;Zig&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/dart.svg?sanitize=true&#34; alt=&#34;Dart logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dart-lang/wasm&#34;&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/wasm&#34;&gt;&lt;code&gt;wasm&lt;/code&gt; pub package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/crystal.svg?sanitize=true&#34; alt=&#34;Crystal logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/naqvis/wasmer-crystal&#34;&gt;&lt;strong&gt;Crystal&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://naqvis.github.io/wasmer-crystal/&#34;&gt;Learn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/lisp.svg?sanitize=true&#34; alt=&#34;Lisp logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/helmutkian/cl-wasm-runtime&#34;&gt;&lt;strong&gt;Lisp&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/julia.svg?sanitize=true&#34; alt=&#34;Julia logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Pangoraw/Wasmer.jl&#34;&gt;&lt;strong&gt;Julia&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/vlang.svg?sanitize=true&#34; alt=&#34;VLang logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vlang/wasmer&#34;&gt;&lt;strong&gt;V&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no published package&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/ocaml.svg?sanitize=true&#34; alt=&#34;Ocaml logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer-ocaml&#34;&gt;&lt;strong&gt;OCaml&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://opam.ocaml.org/packages/wasmer/&#34;&gt;&lt;code&gt;wasmer&lt;/code&gt; OCaml package&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wasmerio/wasmer/issues/new?assignees=&amp;amp;labels=%F0%9F%8E%89+enhancement&amp;amp;template=---feature-request.md&amp;amp;title=&#34;&gt;üëã&amp;nbsp;&amp;nbsp;Missing a language?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate your help! üíú&lt;/p&gt; &#xA;&lt;p&gt;We recommend reading the following guide on how to contribute into a complex project successfully: &lt;a href=&#34;https://mitchellh.com/writing/contributing-to-complex-projects&#34;&gt;https://mitchellh.com/writing/contributing-to-complex-projects&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check our docs on how to &lt;a href=&#34;https://docs.wasmer.io/developers/build-from-source&#34;&gt;build Wasmer from source&lt;/a&gt; or &lt;a href=&#34;https://docs.wasmer.io/developers/testing&#34;&gt;test your changes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- ## Bounties&#xA;&#xA;For some issues we offer paid bounties. You&#39;ll get paid automatically as soon as your PR solving the issue is merged!&#xA;&#xA;&lt;a href=&#34;https://console.algora.io/org/wasmerio/bounties?status=open&#34;&gt;&#xA;  &lt;picture&gt;&#xA;    &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://console.algora.io/api/og/wasmerio/bounties.png?p=0&amp;status=open&amp;theme=dark&#34;&gt;&#xA;    &lt;img alt=&#34;Bounties of wasmerio&#34; src=&#34;https://console.algora.io/api/og/wasmerio/bounties.png?p=0&amp;status=open&amp;theme=light&#34;&gt;&#xA;  &lt;/picture&gt;&#xA;&lt;/a&gt; --&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Wasmer has an amazing community of developers and contributors. Welcome, please join us! üëã&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/rWkMNStrEW&#34;&gt;Wasmer Community Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/wasmerio&#34;&gt;Wasmer on Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;README also in: &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/docs/cn/README.md&#34;&gt;üá®üá≥ ‰∏≠ Êñá -Chinese&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/docs/de/README.md&#34;&gt;üá©üá™ Deutsch-German&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/docs/es/README.md&#34;&gt;üá™üá∏ Espa√±ol-Spanish&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/docs/fr/README.md&#34;&gt;üá´üá∑ Fran√ßais-French&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/docs/ja/README.md&#34;&gt;üáØüáµ Êó•Êú¨ Ë™û -Japanese&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/docs/ko/README.md&#34;&gt;üá∞üá∑ ÌïúÍµ≠Ïñ¥ -Korean&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>awslabs/aws-lambda-rust-runtime</title>
    <updated>2023-11-05T02:01:04Z</updated>
    <id>tag:github.com,2023-11-05:/awslabs/aws-lambda-rust-runtime</id>
    <link href="https://github.com/awslabs/aws-lambda-rust-runtime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rust runtime for AWS Lambda&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rust Runtime for AWS Lambda&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/aws-lambda-rust-runtime/actions&#34;&gt;&lt;img src=&#34;https://github.com/awslabs/aws-lambda-rust-runtime/workflows/Rust/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package makes it easy to run AWS Lambda Functions written in Rust. This workspace includes multiple crates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/lambda_runtime&#34;&gt;&lt;img src=&#34;https://docs.rs/lambda_runtime/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;strong&gt;&lt;code&gt;lambda-runtime&lt;/code&gt;&lt;/strong&gt; is a library that provides a Lambda runtime for applications written in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/lambda_http&#34;&gt;&lt;img src=&#34;https://docs.rs/lambda_http/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;strong&gt;&lt;code&gt;lambda-http&lt;/code&gt;&lt;/strong&gt; is a library that makes it easy to write API Gateway proxy event focused Lambda functions in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/lambda-extension&#34;&gt;&lt;img src=&#34;https://docs.rs/lambda-extension/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;strong&gt;&lt;code&gt;lambda-extension&lt;/code&gt;&lt;/strong&gt; is a library that makes it easy to write Lambda Runtime Extensions in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/aws_lambda_events&#34;&gt;&lt;img src=&#34;https://docs.rs/aws_lambda_events/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;strong&gt;&lt;code&gt;lambda-events&lt;/code&gt;&lt;/strong&gt; is a library with strongly-typed Lambda event structs in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/lambda_runtime_api_client&#34;&gt;&lt;img src=&#34;https://docs.rs/lambda_runtime_api_client/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;strong&gt;&lt;code&gt;lambda-runtime-api-client&lt;/code&gt;&lt;/strong&gt; is a shared library between the lambda runtime and lambda extension libraries that includes a common API client to talk with the AWS Lambda Runtime API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Rust runtime client is an experimental package. It is subject to change and intended only for evaluation purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to start writing Lambda functions with Rust is by using &lt;a href=&#34;https://www.cargo-lambda.info/&#34;&gt;Cargo Lambda&lt;/a&gt;, a related project. Cargo Lambda is a Cargo plugin, or subcommand, that provides several commands to help you in your journey with Rust on AWS Lambda.&lt;/p&gt; &#xA;&lt;p&gt;The preferred way to install Cargo Lambda is by using a package manager.&lt;/p&gt; &#xA;&lt;p&gt;1- Use Homebrew on &lt;a href=&#34;https://brew.sh/&#34;&gt;MacOS&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap cargo-lambda/cargo-lambda&#xA;brew install cargo-lambda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2- Use &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop bucket add cargo-lambda https://github.com/cargo-lambda/scoop-cargo-lambda&#xA;scoop install cargo-lambda/cargo-lambda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or PiP on any system with Python 3 installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install cargo-lambda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See other installation options in &lt;a href=&#34;https://www.cargo-lambda.info/guide/installation.html&#34;&gt;the Cargo Lambda documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Your first function&lt;/h3&gt; &#xA;&lt;p&gt;To create your first function, run Cargo Lambda with the &lt;a href=&#34;https://www.cargo-lambda.info/commands/new.html&#34;&gt;subcommand &lt;code&gt;new&lt;/code&gt;&lt;/a&gt;. This command will generate a Rust package with the initial source code for your function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda new YOUR_FUNCTION_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example function&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to manually create your first function, the code below shows you a simple function that receives an event with a &lt;code&gt;firstName&lt;/code&gt; field and returns a message to the caller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use lambda_runtime::{service_fn, LambdaEvent, Error};&#xA;use serde_json::{json, Value};&#xA;&#xA;#[tokio::main]&#xA;async fn main() -&amp;gt; Result&amp;lt;(), Error&amp;gt; {&#xA;    let func = service_fn(func);&#xA;    lambda_runtime::run(func).await?;&#xA;    Ok(())&#xA;}&#xA;&#xA;async fn func(event: LambdaEvent&amp;lt;Value&amp;gt;) -&amp;gt; Result&amp;lt;Value, Error&amp;gt; {&#xA;    let (event, _context) = event.into_parts();&#xA;    let first_name = event[&#34;firstName&#34;].as_str().unwrap_or(&#34;world&#34;);&#xA;&#xA;    Ok(json!({ &#34;message&#34;: format!(&#34;Hello, {}!&#34;, first_name) }))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building and deploying your Lambda functions&lt;/h2&gt; &#xA;&lt;p&gt;If you already have Cargo Lambda installed in your machine, run the next command to build your function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other ways of building your function: manually with the AWS CLI, with &lt;a href=&#34;https://github.com/aws/aws-sam-cli&#34;&gt;AWS SAM&lt;/a&gt;, and with the &lt;a href=&#34;https://serverless.com/framework/&#34;&gt;Serverless framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1. Cross-compiling your Lambda functions&lt;/h3&gt; &#xA;&lt;p&gt;By default, Cargo Lambda builds your functions to run on x86_64 architectures. If you&#39;d like to use a different architecture, use the options described below.&lt;/p&gt; &#xA;&lt;h4&gt;1.2. Build your Lambda functions&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Amazon Linux 2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We recommend you to use Amazon Linux 2 runtimes (such as &lt;code&gt;provided.al2&lt;/code&gt;) as much as possible for building Lambda functions in Rust. To build your Lambda functions for Amazon Linux 2 runtimes, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda build --release --arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Amazon Linux 1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Amazon Linux 1 uses glibc version 2.17, while Rust binaries need glibc version 2.18 or later by default. However, with Cargo Lambda, you can specify a different version of glibc.&lt;/p&gt; &#xA;&lt;p&gt;If you are building for Amazon Linux 1, or you want to support both Amazon Linux 2 and 1, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda build --release --target aarch64-unknown-linux-gnu.2.17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Replace &#34;aarch64&#34; with &#34;x86_64&#34; if you are building for x86_64&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2. Deploying the binary to AWS Lambda&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html&#34;&gt;a custom runtime&lt;/a&gt;, AWS Lambda looks for an executable called &lt;code&gt;bootstrap&lt;/code&gt; in the deployment package zip. Rename the generated executable to &lt;code&gt;bootstrap&lt;/code&gt; and add it to a zip archive.&lt;/p&gt; &#xA;&lt;p&gt;You can find the &lt;code&gt;bootstrap&lt;/code&gt; binary for your function under the &lt;code&gt;target/lambda&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;2.2. Deploying with Cargo Lambda&lt;/h4&gt; &#xA;&lt;p&gt;Once you&#39;ve built your code with one of the options described earlier, use the &lt;code&gt;deploy&lt;/code&gt; subcommand to upload your function to AWS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda deploy \&#xA;  --iam-role arn:aws:iam::XXXXXXXXXXXXX:role/your_lambda_execution_role&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Make sure to replace the execution role with an existing role in your account!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This command will create a Lambda function with the same name of your rust package. You can change the name of the function by adding the argument at the end of the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda deploy \&#xA;  --iam-role arn:aws:iam::XXXXXXXXXXXXX:role/your_lambda_execution_role \&#xA;  my-first-lambda-function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; See other deployment options in &lt;a href=&#34;https://www.cargo-lambda.info/commands/deploy.html&#34;&gt;the Cargo Lambda documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can test the function with the &lt;a href=&#34;https://www.cargo-lambda.info/commands/invoke.html&#34;&gt;invoke subcommand&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda invoke --remote \&#xA;  --data-ascii &#39;{&#34;command&#34;: &#34;hi&#34;}&#39; \&#xA;  --output-format json \&#xA;  my-first-lambda-function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; CLI commands in the examples use Linux/MacOS syntax. For different shells like Windows CMD or PowerShell, modify syntax when using nested quotation marks like &lt;code&gt;&#39;{&#34;command&#34;: &#34;hi&#34;}&#39;&lt;/code&gt;. Escaping with a backslash may be necessary. See &lt;a href=&#34;https://docs.amazonaws.cn/en_us/cli/latest/userguide/cli-usage-parameters-quoting-strings.html#cli-usage-parameters-quoting-strings-containing&#34;&gt;AWS CLI Reference&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;2.2. Deploying with the AWS CLI&lt;/h4&gt; &#xA;&lt;p&gt;You can also use the AWS CLI to deploy your Rust functions. First, you will need to create a ZIP archive of your function. Cargo Lambda can do that for you automatically when it builds your binary if you add the &lt;code&gt;output-format&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda build --release --arm64 --output-format zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the resulting zip file in &lt;code&gt;target/lambda/YOUR_PACKAGE/bootstrap.zip&lt;/code&gt;. Use that file path to deploy your function with the &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws lambda create-function --function-name rustTest \&#xA;  --handler bootstrap \&#xA;  --zip-file fileb://./target/lambda/basic/bootstrap.zip \&#xA;  --runtime provided.al2 \ # Change this to provided.al if you would like to use Amazon Linux 1.&#xA;  --role arn:aws:iam::XXXXXXXXXXXXX:role/your_lambda_execution_role \&#xA;  --environment Variables={RUST_BACKTRACE=1} \&#xA;  --tracing-config Mode=Active&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Make sure to replace the execution role with an existing role in your account!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can now test the function using the AWS CLI or the AWS Lambda console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws lambda invoke&#xA;  --cli-binary-format raw-in-base64-out \&#xA;  --function-name rustTest \&#xA;  --payload &#39;{&#34;command&#34;: &#34;Say Hi!&#34;}&#39; \&#xA;  output.json&#xA;$ cat output.json  # Prints: {&#34;msg&#34;: &#34;Command Say Hi! executed.&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;code&gt;--cli-binary-format raw-in-base64-out&lt;/code&gt; is a required argument when using the AWS CLI version 2. &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cliv2-migration.html#cliv2-migration-binaryparam&#34;&gt;More Information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;2.3. AWS Serverless Application Model (SAM)&lt;/h4&gt; &#xA;&lt;p&gt;You can use Lambda functions built in Rust with the &lt;a href=&#34;https://aws.amazon.com/serverless/sam/&#34;&gt;AWS Serverless Application Model (SAM)&lt;/a&gt;. To do so, you will need to install the &lt;a href=&#34;https://github.com/aws/aws-sam-cli&#34;&gt;AWS SAM CLI&lt;/a&gt;, which will help you package and deploy your Lambda functions in your AWS account.&lt;/p&gt; &#xA;&lt;p&gt;You will need to create a &lt;code&gt;template.yaml&lt;/code&gt; file containing your desired infrastructure in YAML. Here is an example with a single Lambda function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;AWSTemplateFormatVersion: &#39;2010-09-09&#39;&#xA;Transform: AWS::Serverless-2016-10-31&#xA;&#xA;Resources:&#xA;  HelloWorldFunction:&#xA;    Type: AWS::Serverless::Function&#xA;    Properties:&#xA;      MemorySize: 128&#xA;      Architectures: [&#34;arm64&#34;]&#xA;      Handler: bootstrap&#xA;      Runtime: provided.al2&#xA;      Timeout: 5&#xA;      CodeUri: target/lambda/basic/&#xA;&#xA;Outputs:&#xA;  FunctionName:&#xA;    Value: !Ref HelloWorldFunction&#xA;    Description: Name of the Lambda function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then deploy your Lambda function using the AWS SAM CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sam deploy --guided&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the end, &lt;code&gt;sam&lt;/code&gt; will output the actual Lambda function name. You can use this name to invoke your function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws lambda invoke&#xA;  --cli-binary-format raw-in-base64-out \&#xA;  --function-name HelloWorldFunction-XXXXXXXX \ # Replace with the actual function name&#xA;  --payload &#39;{&#34;command&#34;: &#34;Say Hi!&#34;}&#39; \&#xA;  output.json&#xA;$ cat output.json  # Prints: {&#34;msg&#34;: &#34;Command Say Hi! executed.&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.4. Serverless Framework&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, you can build a Rust-based Lambda function declaratively using the &lt;a href=&#34;https://github.com/softprops/serverless-rust&#34;&gt;Serverless framework Rust plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A number of getting started Serverless application templates exist to get you up and running quickly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a minimal &lt;a href=&#34;https://github.com/softprops/serverless-aws-rust&#34;&gt;echo function&lt;/a&gt; to demonstrate what the smallest Rust function setup looks like&lt;/li&gt; &#xA; &lt;li&gt;a minimal &lt;a href=&#34;https://github.com/softprops/serverless-aws-rust-http&#34;&gt;http function&lt;/a&gt; to demonstrate how to interface with API Gateway using Rust&#39;s native &lt;a href=&#34;https://crates.io/crates/http&#34;&gt;http&lt;/a&gt; crate (note this will be a git dependency until 0.2 is published)&lt;/li&gt; &#xA; &lt;li&gt;a combination &lt;a href=&#34;https://github.com/softprops/serverless-aws-rust-multi&#34;&gt;multi function service&lt;/a&gt; to demonstrate how to set up a services with multiple independent functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Assuming your host machine has a relatively recent version of node, you &lt;a href=&#34;https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner&#34;&gt;won&#39;t need to install any host-wide serverless dependencies&lt;/a&gt;. To get started, run the following commands to create a new lambda Rust application and install project level dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npx serverless install \&#xA;  --url https://github.com/softprops/serverless-aws-rust \&#xA;  --name my-new-app \&#xA;  &amp;amp;&amp;amp; cd my-new-app \&#xA;  &amp;amp;&amp;amp; npm install --silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy it using the standard serverless workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build, package, and deploy service to aws lambda&#xA;$ npx serverless deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoke it using serverless framework or a configured AWS integrated trigger source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx serverless invoke -f hello -d &#39;{&#34;foo&#34;:&#34;bar&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.5. Docker&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, you can build a Rust-based Lambda function in a &lt;a href=&#34;https://github.com/rust-serverless/lambda-rust&#34;&gt;docker mirror of the AWS Lambda provided runtime with the Rust toolchain preinstalled&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Running the following command will start an ephemeral docker container, which will build your Rust application and produce a zip file containing its binary auto-renamed to &lt;code&gt;bootstrap&lt;/code&gt; to meet the AWS Lambda&#39;s expectations for binaries under &lt;code&gt;target/lambda_runtime/release/{your-binary-name}.zip&lt;/code&gt;. Typically, this is just the name of your crate if you are using the cargo default binary (i.e. &lt;code&gt;main.rs&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build and package deploy-ready artifact&#xA;$ docker run --rm \&#xA;    -v ${PWD}:/code \&#xA;    -v ${HOME}/.cargo/registry:/root/.cargo/registry \&#xA;    -v ${HOME}/.cargo/git:/root/.cargo/git \&#xA;    rustserverless/lambda-rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With your application built and packaged, it&#39;s ready to ship to production. You can also invoke it locally to verify is behavior using the &lt;a href=&#34;https://hub.docker.com/r/lambci/lambda/&#34;&gt;lambci :provided docker container&lt;/a&gt;, which is also a mirror of the AWS Lambda provided runtime with build dependencies omitted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start a docker container replicating the &#34;provided&#34; lambda runtime&#xA;# awaiting an event to be provided via stdin&#xA;$ unzip -o \&#xA;    target/lambda/release/{your-binary-name}.zip \&#xA;    -d /tmp/lambda &amp;amp;&amp;amp; \&#xA;  docker run \&#xA;    -i -e DOCKER_LAMBDA_USE_STDIN=1 \&#xA;    --rm \&#xA;    -v /tmp/lambda:/var/task \&#xA;    lambci/lambda:provided&#xA;&#xA;# provide an event payload via stdin (typically a json blob)&#xA;&#xA;# Ctrl-D to yield control back to your function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Local development and testing&lt;/h2&gt; &#xA;&lt;h3&gt;Testing your code with unit and integration tests&lt;/h3&gt; &#xA;&lt;p&gt;AWS Lambda events are plain structures deserialized from JSON objects. If your function handler uses the standard runtime, you can use &lt;code&gt;serde&lt;/code&gt; to deserialize your text fixtures into the structures, and call your handler directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;#[test]&#xA;fn test_my_lambda_handler() {&#xA;  let input = serde_json::from_str(&#34;{\&#34;command\&#34;: \&#34;Say Hi!\&#34;}&#34;).expect(&#34;failed to parse event&#34;);&#xA;  let context = lambda_runtime::Context::default();&#xA;&#xA;  let event = lambda_runtime::LambdaEvent::new(input, context);&#xA;&#xA;  my_lambda_handler(event).await.expect(&#34;failed to handle event&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;lambda_http&lt;/code&gt; to receive HTTP events, you can also create &lt;code&gt;http_lambda::Request&lt;/code&gt; structures from plain text fixtures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;#[test]&#xA;fn test_my_lambda_handler() {&#xA;  let input = include_str!(&#34;apigw_proxy_request.json&#34;);&#xA;&#xA;  let request = lambda_http::request::from_str(input)&#xA;    .expect(&#34;failed to create request&#34;);&#xA;&#xA;  let response = my_lambda_handler(request).await.expect(&#34;failed to handle request&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo Lambda&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cargo-lambda.info&#34;&gt;Cargo Lambda&lt;/a&gt; provides a local server that emulates the AWS Lambda control plane. This server works on Windows, Linux, and MacOS. In the root of your Lambda project. You can run the following subcommand to compile your function(s) and start the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda watch -a 127.0.0.1 -p 9001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use the &lt;code&gt;cargo lambda invoke&lt;/code&gt; to send requests to your function. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo lambda invoke &amp;lt;lambda-function-name&amp;gt; --data-ascii &#39;{ &#34;command&#34;: &#34;hi&#34; }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the command on a HTTP function (Function URL, API Gateway, etc) will require you to use the appropriate scheme. You can find examples of these schemes &lt;a href=&#34;https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/lambda-http/tests/data&#34;&gt;here&lt;/a&gt;. Otherwise, you will be presented with the following error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;Error: serde_json::error::Error&#xA;&#xA;  √ó data did not match any variant of untagged enum LambdaRequest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An simpler alternative is to cURL the following endpoint based on the address and port you defined. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v -X POST \&#xA;  &#39;http://127.0.0.1:9001/lambda-url/&amp;lt;lambda-function-name&amp;gt;/&#39; \&#xA;  -H &#39;content-type: application/json&#39; \&#xA;  -d &#39;{ &#34;command&#34;: &#34;hi&#34; }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Do not remove the &lt;code&gt;content-type&lt;/code&gt; header. It is necessary to instruct the function how to deserialize the request body.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can read more about how &lt;a href=&#34;https://www.cargo-lambda.info/commands/watch.html&#34;&gt;cargo lambda watch&lt;/a&gt; and &lt;a href=&#34;https://www.cargo-lambda.info/commands/invoke.html&#34;&gt;cargo lambda invoke&lt;/a&gt; work on the project&#39;s &lt;a href=&#34;https://www.cargo-lambda.info&#34;&gt;documentation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Lambda Debug Proxy&lt;/h3&gt; &#xA;&lt;p&gt;Lambdas can be run and debugged locally using a special &lt;a href=&#34;https://github.com/rimutaka/lambda-debug-proxy&#34;&gt;Lambda debug proxy&lt;/a&gt; (a non-AWS repo maintained by @rimutaka), which is a Lambda function that forwards incoming requests to one AWS SQS queue and reads responses from another queue. A local proxy running on your development computer reads the queue, calls your Lambda locally and sends back the response. This approach allows debugging of Lambda functions locally while being part of your AWS workflow. The Lambda handler code does not need to be modified between the local and AWS versions.&lt;/p&gt; &#xA;&lt;h2&gt;AWS event objects&lt;/h2&gt; &#xA;&lt;p&gt;This project does not currently include Lambda event struct definitions. Instead, the community-maintained &lt;a href=&#34;https://crates.io/crates/aws_lambda_events&#34;&gt;&lt;code&gt;aws_lambda_events&lt;/code&gt;&lt;/a&gt; crate can be leveraged to provide strongly-typed Lambda event structs. You can create your own custom event objects and their corresponding structs as well.&lt;/p&gt; &#xA;&lt;h3&gt;Custom event objects&lt;/h3&gt; &#xA;&lt;p&gt;To serialize and deserialize events and responses, we suggest using the &lt;a href=&#34;https://github.com/serde-rs/serde&#34;&gt;&lt;code&gt;serde&lt;/code&gt;&lt;/a&gt; library. To receive custom events, annotate your structure with Serde&#39;s macros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use serde::{Serialize, Deserialize};&#xA;use serde_json::json;&#xA;use std::error::Error;&#xA;&#xA;#[derive(Serialize, Deserialize)]&#xA;pub struct NewIceCreamEvent {&#xA;  pub flavors: Vec&amp;lt;String&amp;gt;,&#xA;}&#xA;&#xA;#[derive(Serialize, Deserialize)]&#xA;pub struct NewIceCreamResponse {&#xA;  pub flavors_added_count: usize,&#xA;}&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;Error&amp;gt;&amp;gt; {&#xA;    let flavors = json!({&#xA;      &#34;flavors&#34;: [&#xA;        &#34;Nocciola&#34;,&#xA;        &#34;ÊäπËå∂&#34;,&#xA;        &#34;‡§Ü‡§Æ&#34;&#xA;      ]&#xA;    });&#xA;&#xA;    let event: NewIceCreamEvent = serde_json::from_value(flavors)?;&#xA;    let response = NewIceCreamResponse {&#xA;        flavors_added_count: event.flavors.len(),&#xA;    };&#xA;    serde_json::to_string(&amp;amp;response)?;&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature flags in lambda_http&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lambda_http&lt;/code&gt; is a wrapper for HTTP events coming from three different services, Amazon Load Balancer (ALB), Amazon Api Gateway (APIGW), and AWS Lambda Function URLs. Amazon Api Gateway can also send events from three different endpoints, REST APIs, HTTP APIs, and WebSockets. &lt;code&gt;lambda_http&lt;/code&gt; transforms events from all these sources into native &lt;code&gt;http::Request&lt;/code&gt; objects, so you can incorporate Rust HTTP semantics into your Lambda functions.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;lambda_http&lt;/code&gt; compiles your function to support any of those services. This increases the compile time of your function because we have to generate code for all the sources. In reality, you&#39;ll usually put a Lambda function only behind one of those sources. You can choose which source to generate code for with feature flags.&lt;/p&gt; &#xA;&lt;p&gt;The available features flags for &lt;code&gt;lambda_http&lt;/code&gt; are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;alb&lt;/code&gt;: for events coming from &lt;a href=&#34;https://aws.amazon.com/elasticloadbalancing/&#34;&gt;Amazon Elastic Load Balancer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;apigw_rest&lt;/code&gt;: for events coming from &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html&#34;&gt;Amazon API Gateway Rest APIs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;apigw_http&lt;/code&gt;: for events coming from &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html&#34;&gt;Amazon API Gateway HTTP APIs&lt;/a&gt; and &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html&#34;&gt;AWS Lambda Function URLs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;apigw_websockets&lt;/code&gt;: for events coming from &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html&#34;&gt;Amazon API Gateway WebSockets&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you only want to support one of these sources, you can disable the default features, and enable only the source that you care about in your package&#39;s &lt;code&gt;Cargo.toml&lt;/code&gt; file. Substitute the dependency line for &lt;code&gt;lambda_http&lt;/code&gt; for the snippet below, changing the feature that you want to enable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies.lambda_http]&#xA;version = &#34;0.5.3&#34;&#xA;default-features = false&#xA;features = [&#34;apigw_rest&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will make your function compile much faster.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Rust Versions (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;The AWS Lambda Rust Runtime requires a minimum of Rust 1.64, and is not guaranteed to build on compiler versions earlier than that.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/aws-lambda-rust-runtime/main/CONTRIBUTING.md#security-issue-notifications&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache-2.0 License.&lt;/p&gt;</summary>
  </entry>
</feed>