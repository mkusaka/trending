<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-04T01:59:09Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zed-industries/zed</title>
    <updated>2024-02-04T01:59:09Z</updated>
    <id>tag:github.com,2024-02-04:/zed-industries/zed</id>
    <link href="https://github.com/zed-industries/zed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code at the speed of thought â€“ Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zed-industries/zed/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href=&#34;https://github.com/atom/atom&#34;&gt;Atom&lt;/a&gt; and &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://zed.dev/download&#34;&gt;download&lt;/a&gt; Zed today for macOS (v10.15+).&lt;/p&gt; &#xA;&lt;p&gt;Support for additional platforms is on our &lt;a href=&#34;https://zed.dev/roadmap&#34;&gt;roadmap&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (&lt;a href=&#34;https://github.com/zed-industries/zed/issues/5395&#34;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Windows (&lt;a href=&#34;https://github.com/zed-industries/zed/issues/5394&#34;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Web (&lt;a href=&#34;https://github.com/zed-industries/zed/issues/5396&#34;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For macOS users, you can also install Zed from Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install zed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing Zed&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/developing_zed__building_zed.md&#34;&gt;Building Zed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/developing_zed__local_collaboration.md&#34;&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/EmbarkStudios/cargo-about&#34;&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you&#39;ve created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate&#39;s Cargo.toml.&lt;/li&gt; &#xA; &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license&#39;s requirements. If you&#39;re unsure, ask a lawyer. Once you&#39;ve verified that this system is acceptable add the license&#39;s SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href=&#34;https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration&#34;&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>FuelLabs/fuels-rs</title>
    <updated>2024-02-04T01:59:09Z</updated>
    <id>tag:github.com,2024-02-04:/FuelLabs/fuels-rs</id>
    <link href="https://github.com/FuelLabs/fuels-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fuel Network Rust SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fuels-rs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuels-rs/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/FuelLabs/fuels-rs/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/fuels&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/fuels?label=latest&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/fuels&#34;&gt;&lt;img src=&#34;https://docs.rs/fuels/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/xfpK4Pe&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat%20on-discord-orange?&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rust SDK for Fuel. It can be used for a variety of things, including but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compiling, deploying, and testing &lt;a href=&#34;https://github.com/FuelLabs/sway&#34;&gt;Sway&lt;/a&gt; contracts;&lt;/li&gt; &#xA; &lt;li&gt;Launching a local Fuel network;&lt;/li&gt; &#xA; &lt;li&gt;Crafting and signing transactions with hand-crafted scripts or contract calls;&lt;/li&gt; &#xA; &lt;li&gt;Generating type-safe Rust bindings of contract methods;&lt;/li&gt; &#xA; &lt;li&gt;And more, &lt;code&gt;fuels-rs&lt;/code&gt; is still in active development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://fuellabs.github.io/fuels-rs/latest/&#34;&gt;the &lt;code&gt;fuels-rs&lt;/code&gt; book&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Launch Fuel nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Deploy contracts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interact with deployed contracts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Type-safe Sway contracts bindings code generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run Sway scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CLI for common operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Local test wallets&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Wallet integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Events querying/monitoring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;What dependencies do I need?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fuel.network/guides/installation/#installing-rust&#34;&gt;The latest &lt;code&gt;stable&lt;/code&gt; Rust toolchain&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.fuel.network/guides/installation/#installing-the-fuel-toolchain-using-fuelup&#34;&gt;&lt;code&gt;forc&lt;/code&gt; and &lt;code&gt;fuel-core&lt;/code&gt; binaries&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How can I run the SDK tests?&lt;/h3&gt; &#xA;&lt;p&gt;First, build the test projects using &lt;code&gt;forc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;forc build --path packages/fuels&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run the SDK tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run specific tests. The following example will run all integration tests in &lt;code&gt;types.rs&lt;/code&gt; whose names contain &lt;code&gt;in_vector&lt;/code&gt; and show their outputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo test --test types in_vector -- --show-output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to run WASM tests?&lt;/h3&gt; &#xA;&lt;p&gt;You need to have wasm32 as a target, if you don&#39;t already:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; rustup target add wasm32-unknown-unknown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need &lt;code&gt;wasm-pack&lt;/code&gt;, if you don&#39;t already:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install wasm-pack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;packages/wasm-tests&lt;/code&gt; and run &lt;code&gt;wasm-pack test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What to do if my tests are failing on &lt;code&gt;master&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Before doing anything else, try all these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo clean&#xA;rm Cargo.lock&#xA;forc build --path packages/fuels&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Why is the prefix &lt;code&gt;fuels&lt;/code&gt; and not &lt;code&gt;fuel&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;In order to make the SDK for Fuel feel familiar with those coming from the &lt;a href=&#34;https://github.com/ethers-io/ethers.js&#34;&gt;ethers.js&lt;/a&gt; ecosystem, this project opted for an &lt;code&gt;s&lt;/code&gt; at the end. The &lt;code&gt;fuels-*&lt;/code&gt; family of SDKs is inspired by The Ethers Project.&lt;/p&gt; &#xA;&lt;h3&gt;How can I run the docs locally?&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;code&gt;mdbook&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo install mdbook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, navigate to the &lt;code&gt;docs&lt;/code&gt; folder and run the command below to start a local server and open a new tab in you browser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mdbook serve --open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build the book by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mdbook build&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>skyzh/mini-lsm</title>
    <updated>2024-02-04T01:59:09Z</updated>
    <id>tag:github.com,2024-02-04:/skyzh/mini-lsm</id>
    <link href="https://github.com/skyzh/mini-lsm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tutorial of building an LSM-Tree storage engine in a week!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skyzh/mini-lsm/main/mini-lsm-book/src/mini-lsm-logo.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LSM in a Week&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/skyzh/mini-lsm/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/skyzh/mini-lsm/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI (main)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build a simple key-value storage engine in a week! And extend your LSM engine on the second + third week.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://skyzh.github.io/mini-lsm&#34;&gt;Tutorial&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The Mini-LSM book is available at &lt;a href=&#34;https://skyzh.github.io/mini-lsm&#34;&gt;https://skyzh.github.io/mini-lsm&lt;/a&gt;. You may follow this guide and implement the Mini-LSM storage engine. We have 3 weeks (parts) of the tutorial, each of them consists of 7 days (chapters).&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You may join skyzh&#39;s Discord server and study with the mini-lsm community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://skyzh.dev/join/discord&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/ZgXzxpua3H&#34; alt=&#34;Join skyzh&#39;s Discord Server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add Your Solution&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you finished at least one full week of this tutorial, you can add your solution to the community solution list at &lt;a href=&#34;https://raw.githubusercontent.com/skyzh/mini-lsm/main/SOLUTIONS.md&#34;&gt;SOLUTIONS.md&lt;/a&gt;. You can submit a pull request and we might do a quick review of your code in return of your hard work.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Students&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should modify code in &lt;code&gt;mini-lsm-starter&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo x install-tools&#xA;cargo x copy-test --week 1 --day 1&#xA;cargo x scheck&#xA;cargo run --bin mini-lsm-cli&#xA;cargo run --bin compaction-simulator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Course Developers&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should modify &lt;code&gt;mini-lsm&lt;/code&gt; and &lt;code&gt;mini-lsm-mvcc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo x install-tools&#xA;cargo x check&#xA;cargo x book&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you changed public API in the reference solution, you might also need to synchronize it to the starter crate. To do this, use &lt;code&gt;cargo x sync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mini-lsm: the final solution code for &amp;lt;= week 2&lt;/li&gt; &#xA; &lt;li&gt;mini-lsm-mvcc: the final solution code for week 3 MVCC&lt;/li&gt; &#xA; &lt;li&gt;mini-lsm-starter: the starter code&lt;/li&gt; &#xA; &lt;li&gt;mini-lsm-book: the tutorial&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have another repo mini-lsm-solution-checkpoint at &lt;a href=&#34;https://github.com/skyzh/mini-lsm-solution-checkpoint&#34;&gt;https://github.com/skyzh/mini-lsm-solution-checkpoint&lt;/a&gt;. In this repo, each commit corresponds to a chapter in the tutorial. We will not update the solution checkpoint very often.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;You can run the reference solution by yourself to gain an overview of the system before you start.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --bin mini-lsm-cli-ref&#xA;cargo run --bin mini-lsm-cli-mvcc-ref&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And we have a compaction simulator to experiment with your compaction algorithm implementation,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo run --bin compaction-simulator-ref&#xA;cargo run --bin compaction-simulator-mvcc-ref&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tutorial Structure&lt;/h2&gt; &#xA;&lt;p&gt;We have 3 weeks + 1 extra week (in progress) for this tutorial.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Week 1: Storage Format + Engine Skeleton&lt;/li&gt; &#xA; &lt;li&gt;Week 2: Compaction and Persistence&lt;/li&gt; &#xA; &lt;li&gt;Week 3: Multi-Version Concurrency Control&lt;/li&gt; &#xA; &lt;li&gt;The Extra Week / Rest of Your Life: Optimizations (unlikely to be available in 2024...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skyzh/mini-lsm/main/mini-lsm-book/src/lsm-tutorial/00-full-overview.svg?sanitize=true&#34; alt=&#34;Tutorial Roadmap&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Week + Chapter&lt;/th&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;   &lt;td&gt;Memtable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.2&lt;/td&gt; &#xA;   &lt;td&gt;Merge Iterator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.3&lt;/td&gt; &#xA;   &lt;td&gt;Block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.4&lt;/td&gt; &#xA;   &lt;td&gt;Sorted String Table (SST)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.5&lt;/td&gt; &#xA;   &lt;td&gt;Read Path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.6&lt;/td&gt; &#xA;   &lt;td&gt;Write Path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.7&lt;/td&gt; &#xA;   &lt;td&gt;SST Optimizations: Prefix Key Encoding + Bloom Filters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.1&lt;/td&gt; &#xA;   &lt;td&gt;Compaction Implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;Simple Compaction Strategy (Traditional Leveled Compaction)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.3&lt;/td&gt; &#xA;   &lt;td&gt;Tiered Compaction Strategy (RocksDB Universal Compaction)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.4&lt;/td&gt; &#xA;   &lt;td&gt;Leveled Compaction Strategy (RocksDB Leveled Compaction)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.5&lt;/td&gt; &#xA;   &lt;td&gt;Manifest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.6&lt;/td&gt; &#xA;   &lt;td&gt;Write-Ahead Log (WAL)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.7&lt;/td&gt; &#xA;   &lt;td&gt;Batch Write and Checksums&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1&lt;/td&gt; &#xA;   &lt;td&gt;Timestamp Key Encoding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.2&lt;/td&gt; &#xA;   &lt;td&gt;Snapshot Read - Memtables and Timestamps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.3&lt;/td&gt; &#xA;   &lt;td&gt;Snapshot Read - Transaction API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.4&lt;/td&gt; &#xA;   &lt;td&gt;Watermark and Garbage Collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.5&lt;/td&gt; &#xA;   &lt;td&gt;Transactions and Optimistic Concurrency Control&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.6&lt;/td&gt; &#xA;   &lt;td&gt;Serializable Snapshot Isolation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.7&lt;/td&gt; &#xA;   &lt;td&gt;Compaction Filters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Mini-LSM starter code and solution are under &lt;a href=&#34;https://raw.githubusercontent.com/skyzh/mini-lsm/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;. The author reserves the full copyright of the tutorial materials (markdown files and figures).&lt;/p&gt;</summary>
  </entry>
</feed>