<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:56:34Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdx/mise</title>
    <updated>2024-01-07T01:56:34Z</updated>
    <id>tag:github.com,2024-01-07:/jdx/mise</id>
    <link href="https://github.com/jdx/mise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;a href=&#34;https://mise.jdx.dev&#34;&gt;mise-en-place&lt;/a&gt;&lt;/h1&gt; &#xA; &lt;!-- &lt;a href=&#34;https://mise.jdx.dev&#34;&gt;&lt;picture&gt; --&gt; &#xA; &lt;!--   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; width=&#34;617&#34; srcset=&#34;./docs/logo-dark@2x.png&#34;&gt; --&gt; &#xA; &lt;!--   &lt;img alt=&#34;mise logo&#34; width=&#34;617&#34; src=&#34;./docs/logo-light@2x.png&#34;&gt; --&gt; &#xA; &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/mise&#34;&gt;&lt;img alt=&#34;Crates.io&#34; src=&#34;https://img.shields.io/crates/v/mise?style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jdx/mise/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/jdx/mise?color=%2320A920&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jdx/mise/actions/workflows/test.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?color=%2320A920&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://codecov.io/gh/jdx/mise&#34;&gt;&lt;img alt=&#34;Codecov&#34; src=&#34;https://img.shields.io/codecov/c/github/jdx/mise?color=%2320A920&amp;style=for-the-badge&#34;&gt;&lt;/a&gt; --&gt; &#xA; &lt;a href=&#34;https://discord.gg/mABnUDvP57&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;em&gt;The front-end to your dev env. (&lt;a href=&#34;https://mise.jdx.dev/rtx.html&#34;&gt;formerly called &#34;rtx&#34;&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Like &lt;a href=&#34;https://asdf-vm.com&#34;&gt;asdf&lt;/a&gt; (or &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; or &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; but for any language) it manages dev tools like node, python, cmake, terraform, and &lt;a href=&#34;https://mise.jdx.dev/plugins.html&#34;&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Like &lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt; it manages &lt;a href=&#34;https://mise.jdx.dev/environments.html&#34;&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; &#xA; &lt;li&gt;Like &lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34;&gt;make&lt;/a&gt; it manages &lt;a href=&#34;https://mise.jdx.dev/tasks/&#34;&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;30 Second Demo&lt;/h2&gt; &#xA;&lt;p&gt;The following shows using mise to install different versions of &lt;a href=&#34;https://nodejs.org&#34;&gt;node&lt;/a&gt;. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdx/mise/main/docs/demo.gif&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdx/mise/main/docs/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install mise (other methods &lt;a href=&#34;https://mise.jdx.dev/getting-started.html&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ curl https://mise.jdx.dev/install.sh | sh&#xA;$ ~/.local/bin/mise --version&#xA;mise 2024.1.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;# note this assumes mise is located at ~/.local/bin/mise&#xA;# which is what install.sh does by default&#xA;echo &#39;eval &#34;$(~/.local/bin/mise activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;eval &#34;$(~/.local/bin/mise activate zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;~/.local/bin/mise activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install a runtime and set it as the global default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ mise use --global node@20&#xA;$ node -v&#xA;v20.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Full Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://mise.jdx.dev&#34;&gt;mise.jdx.dev&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rust-windowing/winit</title>
    <updated>2024-01-07T01:56:34Z</updated>
    <id>tag:github.com,2024-01-07:/rust-windowing/winit</id>
    <link href="https://github.com/rust-windowing/winit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Window handling library in pure Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;winit - Cross-platform window creation and management in Rust&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/winit&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/winit.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/winit&#34;&gt;&lt;img src=&#34;https://docs.rs/winit/badge.svg?sanitize=true&#34; alt=&#34;Docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-windowing.github.io/winit/winit/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/rust-windowing/winit/docs.yml?branch=master&amp;amp;label=master%20docs&#34; alt=&#34;Master Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-windowing/winit/actions&#34;&gt;&lt;img src=&#34;https://github.com/rust-windowing/winit/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;winit = &#34;0.29.9&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.rs/winit&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For features &lt;em&gt;within&lt;/em&gt; the scope of winit, see &lt;a href=&#34;https://raw.githubusercontent.com/rust-windowing/winit/master/FEATURES.md&#34;&gt;FEATURES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For features &lt;em&gt;outside&lt;/em&gt; the scope of winit, see &lt;a href=&#34;https://areweguiyet.com/&#34;&gt;Are we GUI Yet?&lt;/a&gt; and &lt;a href=&#34;https://arewegameyet.rs/&#34;&gt;Are we game yet?&lt;/a&gt;, depending on what kind of project you&#39;re looking to do.&lt;/p&gt; &#xA;&lt;h2&gt;Contact Us&lt;/h2&gt; &#xA;&lt;p&gt;Join us in any of these:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#rust-windowing:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Matrix-%23rust--windowing%3Amatrix.org-blueviolet.svg?sanitize=true&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/#winit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/libera.chat-%23winit-red.svg?sanitize=true&#34; alt=&#34;Libera.Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Winit is a window creation and management library. It can create windows and lets you handle events (for example: the window being resized, a key being pressed, a mouse movement, etc.) produced by the window.&lt;/p&gt; &#xA;&lt;p&gt;Winit is designed to be a low-level brick in a hierarchy of libraries. Consequently, in order to show something on the window you need to use the platform-specific getters provided by winit, or another library.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo Features&lt;/h3&gt; &#xA;&lt;p&gt;Winit provides the following features, which can be enabled in your &lt;code&gt;Cargo.toml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;serde&lt;/code&gt;: Enables serialization/deserialization of certain types with &lt;a href=&#34;https://crates.io/crates/serde&#34;&gt;Serde&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x11&lt;/code&gt; (enabled by default): On Unix platform, compiles with the X11 backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wayland&lt;/code&gt; (enabled by default): On Unix platform, compiles with the Wayland backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mint&lt;/code&gt;: Enables mint (math interoperability standard types) conversions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MSRV Policy&lt;/h2&gt; &#xA;&lt;p&gt;This crate&#39;s Minimum Supported Rust Version (MSRV) is &lt;strong&gt;1.70&lt;/strong&gt;. Changes to the MSRV will be accompanied by a minor version bump.&lt;/p&gt; &#xA;&lt;p&gt;As a &lt;strong&gt;tentative&lt;/strong&gt; policy, the upper bound of the MSRV is given by the following formula:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;min(sid, stable - 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;sid&lt;/code&gt; is the current version of &lt;code&gt;rustc&lt;/code&gt; provided by &lt;a href=&#34;https://packages.debian.org/sid/rustc&#34;&gt;Debian Sid&lt;/a&gt;, and &lt;code&gt;stable&lt;/code&gt; is the latest stable version of Rust. This bound may be broken in case of a major ecosystem shift or a security vulnerability.&lt;/p&gt; &#xA;&lt;p&gt;The exception is for the Android platform, where a higher Rust version must be used for certain Android features. In this case, the MSRV will be capped at the latest stable version of Rust minus three. This inconsistency is not reflected in Cargo metadata, as it is not powerful enough to expose this restriction.&lt;/p&gt; &#xA;&lt;p&gt;All crates in the &lt;a href=&#34;https://github.com/rust-windowing&#34;&gt;&lt;code&gt;rust-windowing&lt;/code&gt;&lt;/a&gt; organizations have the same MSRV policy.&lt;/p&gt; &#xA;&lt;h3&gt;Platform-specific usage&lt;/h3&gt; &#xA;&lt;h4&gt;Wayland&lt;/h4&gt; &#xA;&lt;p&gt;Note that windows don&#39;t appear on Wayland until you draw/present to them.&lt;/p&gt; &#xA;&lt;h4&gt;WebAssembly&lt;/h4&gt; &#xA;&lt;p&gt;To run the web example: &lt;code&gt;cargo run-wasm --example web&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Winit supports compiling to the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target with &lt;code&gt;web-sys&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On the web platform, a Winit window is backed by a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element. You can either &lt;a href=&#34;https://docs.rs/winit/latest/wasm32-unknown-unknown/winit/platform/web/trait.WindowBuilderExtWebSys.html#tymethod.with_canvas&#34;&gt;provide Winit with a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element&lt;/a&gt;, or &lt;a href=&#34;https://docs.rs/winit/latest/wasm32-unknown-unknown/winit/platform/web/trait.WindowExtWebSys.html#tymethod.canvas&#34;&gt;let Winit create a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element which you can then retrieve&lt;/a&gt; and insert it into the DOM yourself.&lt;/p&gt; &#xA;&lt;p&gt;For the example code using Winit with WebAssembly, check out the &lt;a href=&#34;https://raw.githubusercontent.com/rust-windowing/winit/master/examples/web.rs&#34;&gt;web example&lt;/a&gt;. For information on using Rust on WebAssembly, check out the &lt;a href=&#34;https://rustwasm.github.io/book/&#34;&gt;Rust and WebAssembly book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;The Android backend builds on (and exposes types from) the &lt;a href=&#34;https://docs.rs/ndk/latest/ndk/&#34;&gt;&lt;code&gt;ndk&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; &#xA;&lt;p&gt;Native Android applications need some form of &#34;glue&#34; crate that is responsible for defining the main entry point for your Rust application as well as tracking various life-cycle events and synchronizing with the main JVM thread.&lt;/p&gt; &#xA;&lt;p&gt;Winit uses the &lt;a href=&#34;https://github.com/rib/android-activity&#34;&gt;android-activity&lt;/a&gt; as a glue crate (prior to &lt;code&gt;0.28&lt;/code&gt; it used &lt;a href=&#34;https://github.com/rust-windowing/android-ndk-rs/tree/master/ndk-glue&#34;&gt;ndk-glue&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The version of the glue crate that your application depends on &lt;em&gt;must&lt;/em&gt; match the version that Winit depends on because the glue crate is responsible for your application&#39;s main entry point. If Cargo resolves multiple versions, they will clash.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;winit&lt;/code&gt; glue compatibility table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;winit&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ndk-glue&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;android-activity = &#34;0.5&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;android-activity = &#34;0.4&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ndk-glue = &#34;0.7&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ndk-glue = &#34;0.5&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ndk-glue = &#34;0.3&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ndk-glue = &#34;0.2&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The recommended way to avoid a conflict with the glue version is to avoid explicitly depending on the &lt;code&gt;android-activity&lt;/code&gt; crate, and instead consume the API that is re-exported by Winit under &lt;code&gt;winit::platform::android::activity::*&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running on an Android device needs a dynamic system library. Add this to Cargo.toml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[lib]&#xA;name = &#34;main&#34;&#xA;crate-type = [&#34;cdylib&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All Android applications are based on an &lt;code&gt;Activity&lt;/code&gt; subclass, and the &lt;code&gt;android-activity&lt;/code&gt; crate is designed to support different choices for this base class. Your application &lt;em&gt;must&lt;/em&gt; specify the base class it needs via a feature flag:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Base Class&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Feature Flag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;NativeActivity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;android-native-activity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Built-in to Android - it is possible to use without compiling any Java or Kotlin code. Java or Kotlin code may be needed to subclass &lt;code&gt;NativeActivity&lt;/code&gt; to access some platform features. It does not derive from the &lt;a href=&#34;https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity&#34;&gt;&lt;code&gt;AndroidAppCompat&lt;/code&gt;&lt;/a&gt; base class.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://developer.android.com/games/agdk/game-activity&#34;&gt;&lt;code&gt;GameActivity&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;android-game-activity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Derives from &lt;a href=&#34;https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity&#34;&gt;&lt;code&gt;AndroidAppCompat&lt;/code&gt;&lt;/a&gt;, a defacto standard &lt;code&gt;Activity&lt;/code&gt; base class that helps support a wider range of Android versions. Requires a build system that can compile Java or Kotlin and fetch Android dependencies from a &lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/games&#34;&gt;Maven repository&lt;/a&gt; (or link with an embedded &lt;a href=&#34;https://developer.android.com/games/agdk/download#agdk-libraries&#34;&gt;release&lt;/a&gt; of &lt;a href=&#34;https://developer.android.com/games/agdk/game-activity&#34;&gt;&lt;code&gt;GameActivity&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more details, refer to these &lt;code&gt;android-activity&lt;/code&gt; &lt;a href=&#34;https://github.com/rib/android-activity/tree/main/examples&#34;&gt;example applications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Converting from &lt;code&gt;ndk-glue&lt;/code&gt; to &lt;code&gt;android-activity&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If your application is currently based on &lt;code&gt;NativeActivity&lt;/code&gt; via the &lt;code&gt;ndk-glue&lt;/code&gt; crate and building with &lt;code&gt;cargo apk&lt;/code&gt;, then the minimal changes would be:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove &lt;code&gt;ndk-glue&lt;/code&gt; from your &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enable the &lt;code&gt;&#34;android-native-activity&#34;&lt;/code&gt; feature for Winit: &lt;code&gt;winit = { version = &#34;0.29.9&#34;, features = [ &#34;android-native-activity&#34; ] }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add an &lt;code&gt;android_main&lt;/code&gt; entrypoint (as above), instead of using the &#39;&lt;code&gt;[ndk_glue::main]&lt;/code&gt; proc macro from &lt;code&gt;ndk-macros&lt;/code&gt; (optionally add a dependency on &lt;code&gt;android_logger&lt;/code&gt; and initialize logging as above).&lt;/li&gt; &#xA; &lt;li&gt;Pass a clone of the &lt;code&gt;AndroidApp&lt;/code&gt; that your application receives to Winit when building your event loop (as shown above).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;p&gt;A lot of functionality expects the application to be ready before you start doing anything; this includes creating windows, fetching monitors, drawing, and so on, see issues &lt;a href=&#34;https://github.com/rust-windowing/winit/issues/2238&#34;&gt;#2238&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-windowing/winit/issues/2051&#34;&gt;#2051&lt;/a&gt; and &lt;a href=&#34;https://github.com/rust-windowing/winit/issues/2087&#34;&gt;#2087&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter problems, you should try doing your initialization inside &lt;code&gt;Event::Resumed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;Similar to macOS, iOS&#39;s main &lt;code&gt;UIApplicationMain&lt;/code&gt; does some init work that&#39;s required by all UI-related code (see issue &lt;a href=&#34;https://github.com/rust-windowing/winit/issues/1705&#34;&gt;#1705&lt;/a&gt;). It would be best to consider creating your windows inside &lt;code&gt;Event::Resumed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Redox OS&lt;/h4&gt; &#xA;&lt;p&gt;Redox OS has some functionality not yet present that will be implemented when its orbital display server provides it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atuinsh/atuin</title>
    <updated>2024-01-07T01:56:34Z</updated>
    <id>tag:github.com,2024-01-07:/atuinsh/atuin</id>
    <link href="https://github.com/atuinsh/atuin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✨ Magical shell history&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/atuinsh/atuin/assets/53315310/13216a1d-1ac0-4c99-b0eb-d88290fe0efd&#34;&gt; &#xA;  &lt;img alt=&#34;Text changing depending on mode. Light: &#39;So light!&#39; Dark: &#39;So dark!&#39;&#34; src=&#34;https://github.com/atuinsh/atuin/assets/53315310/08bc86d4-a781-4aaa-8d7e-478ae6bcd129&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;magical shell history&lt;/em&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/atuinsh/atuin/actions?query=workflow%3ARust&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/atuinsh/atuin/rust.yml?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/atuin&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/atuin.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/atuin&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/atuin.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/atuinsh/atuin/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/atuin.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Fq8bJSKPHh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/954121165239115808&#34;&gt;&lt;/a&gt; &lt;a rel=&#34;me&#34; href=&#34;https://hachyderm.io/@atuin&#34;&gt;&lt;img src=&#34;https://img.shields.io/mastodon/follow/109944632283122560?domain=https%3A%2F%2Fhachyderm.io&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/atuinsh&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/atuinsh?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://actuated.dev/&#34;&gt;&lt;img alt=&#34;Arm CI sponsored by Actuated&#34; src=&#34;https://docs.actuated.dev/images/actuated-badge.png&#34; width=&#34;120px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/docs/zh-CN/README.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and &lt;em&gt;fully encrypted&lt;/em&gt; synchronisation of your history between machines, via an Atuin server.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/demo.gif&#34; alt=&#34;animated&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;exit code, duration, time and command shown&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p&gt;As well as the search UI, it can do things like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# search for all successful `make` commands, recorded after 3pm yesterday&#xA;atuin search --exit 0 --after &#34;yesterday 3pm&#34; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may use either the server I host, or host your own! Or just don&#39;t use sync at all. As all history sync is encrypted, I couldn&#39;t access your data even if I wanted to. And I &lt;strong&gt;really&lt;/strong&gt; don&#39;t want to.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rebind &lt;code&gt;ctrl-r&lt;/code&gt; and &lt;code&gt;up&lt;/code&gt; (configurable) to a full screen history search UI&lt;/li&gt; &#xA; &lt;li&gt;store shell history in a sqlite database&lt;/li&gt; &#xA; &lt;li&gt;backup and sync &lt;strong&gt;encrypted&lt;/strong&gt; shell history&lt;/li&gt; &#xA; &lt;li&gt;the same history across terminals, across sessions, and across machines&lt;/li&gt; &#xA; &lt;li&gt;log exit code, cwd, hostname, session, command duration, etc&lt;/li&gt; &#xA; &lt;li&gt;calculate statistics such as &#34;most used command&#34;&lt;/li&gt; &#xA; &lt;li&gt;old history file is not replaced&lt;/li&gt; &#xA; &lt;li&gt;quick-jump to previous items with &lt;kbd&gt;Alt-&amp;lt;num&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;switch filter modes via ctrl-r; search history just from the current session, directory, or globally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/import&#34;&gt;Import&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/config&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/search&#34;&gt;Searching history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/sync&#34;&gt;Cloud history sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/stats&#34;&gt;History stats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/self-hosting&#34;&gt;Self host Atuin server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/key-binding&#34;&gt;Key binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/shell-completions&#34;&gt;Shell completions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Shells&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zsh&lt;/li&gt; &#xA; &lt;li&gt;bash&lt;/li&gt; &#xA; &lt;li&gt;fish&lt;/li&gt; &#xA; &lt;li&gt;nushell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Forum&lt;/h3&gt; &#xA;&lt;p&gt;Atuin has a community forum, please ask here for help and support: &lt;a href=&#34;https://forum.atuin.sh/&#34;&gt;https://forum.atuin.sh/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Discord&lt;/h3&gt; &#xA;&lt;p&gt;Atuin also has a community Discord, available &lt;a href=&#34;https://discord.gg/jR3tfchVvW&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;h2&gt;With the default sync server&lt;/h2&gt; &#xA;&lt;p&gt;This will sign you up for the default sync server, hosted by me. Everything is end-to-end encrypted, so your secrets are safe!&lt;/p&gt; &#xA;&lt;p&gt;Read more below for offline-only usage, or for hosting your own server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# bash/zsh/etc&#xA;bash &amp;lt;(curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://setup.atuin.sh)&#xA;&#xA;# fish&#xA;bash (curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://setup.atuin.sh | psub)&#xA;&#xA;atuin register -u &amp;lt;USERNAME&amp;gt; -e &amp;lt;EMAIL&amp;gt;&#xA;atuin import auto&#xA;atuin sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then restart your shell!&lt;/p&gt; &#xA;&lt;h3&gt;Opt-in to activity graph&lt;/h3&gt; &#xA;&lt;p&gt;Alongside the hosted Atuin server, there is also a service which generates activity graphs for your shell history! These are inspired by the GitHub graph.&lt;/p&gt; &#xA;&lt;p&gt;For example, here is mine:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/docs/static/img/activity-graph-example.png&#34; alt=&#34;Activity Graph Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you wish to get your own, after signing up for the sync server, run this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://api.atuin.sh/enable -d $(cat ~/.local/share/atuin/session)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response includes the URL to your graph. Feel free to share and/or embed this URL, the token is &lt;em&gt;not&lt;/em&gt; a secret, and simply prevents user enumeration.&lt;/p&gt; &#xA;&lt;h2&gt;Offline only (no sync)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl https://raw.githubusercontent.com/atuinsh/atuin/main/install.sh)&#xA;            &#xA;atuin import auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Atuin will check for updates. You can &lt;a href=&#34;https://atuin.sh/docs/config/#update_check&#34;&gt;disable update checks by modifying&lt;/a&gt; &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then restart your shell!&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packaging status&lt;/summary&gt; &#xA; &lt;a href=&#34;https://repology.org/project/atuin/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/atuin.svg?columns=3&#34; alt=&#34;Packaging status&#34;&gt; &lt;/a&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Script (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;The install script will help you through the setup, ensuring your shell is properly configured. It will also use one of the below methods, preferring the system package manager where possible (pacman, homebrew, etc etc).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# do not run this as root, root will be asked for if required&#xA;bash &amp;lt;(curl https://raw.githubusercontent.com/atuinsh/atuin/main/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;With cargo&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s best to use &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; to get setup with a Rust toolchain, then you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;Atuin is also available in &lt;a href=&#34;https://ports.macports.org/port/atuin/&#34;&gt;MacPorts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;This repository is a flake, and can be installed using &lt;code&gt;nix profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix profile install &#34;github:atuinsh/atuin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Atuin is also available in &lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-env -f &#39;&amp;lt;nixpkgs&amp;gt;&#39; -iA atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pacman&lt;/h3&gt; &#xA;&lt;p&gt;Atuin is available in the Arch Linux &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/atuin/&#34;&gt;[extra] repository&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Xbps&lt;/h3&gt; &#xA;&lt;p&gt;Atuin is available in the Void Linux &lt;a href=&#34;https://github.com/void-linux/void-packages/tree/master/srcpkgs/atuin&#34;&gt;repository&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xbps-install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Termux&lt;/h3&gt; &#xA;&lt;p&gt;Atuin is available in the Termux package repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/atuinsh/atuin.git&#xA;cd atuin/atuin&#xA;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/atuinsh/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Shell plugin&lt;/h2&gt; &#xA;&lt;p&gt;Once the binary is installed, the shell plugin requires installing. If you use the install script, this should all be done for you! After installing, remember to restart your shell.&lt;/p&gt; &#xA;&lt;h3&gt;zsh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;eval &#34;$(atuin init zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Zinit&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zinit load atuinsh/atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Antigen&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;antigen bundle atuinsh/atuin@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;bash&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/akinomyoga/ble.sh&#34;&gt;ble.sh&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Atuin works best in bash when using &lt;a href=&#34;https://github.com/akinomyoga/ble.sh&#34;&gt;ble.sh&lt;/a&gt; &amp;gt;= 0.4.&lt;/p&gt; &#xA;&lt;p&gt;With ble.sh (&amp;gt;= 0.4) installed, just add atuin to your .bashrc&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;eval &#34;$(atuin init bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please make sure that the above line comes after sourcing ble.sh so atuin knows the presence of ble.sh.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/rcaloras/bash-preexec&#34;&gt;bash-preexec&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rcaloras/bash-preexec&#34;&gt;Bash-preexec&lt;/a&gt; can also be used, but you may experience some minor problems with the recorded duration and exit status of some commands.&lt;/p&gt; &#xA;&lt;p&gt;To use bash-preexec, download and initialize it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh&#xA;echo &#39;[[ -f ~/.bash-preexec.sh ]] &amp;amp;&amp;amp; source ~/.bash-preexec.sh&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then setup Atuin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;eval &#34;$(atuin init bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PLEASE NOTE&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;bash-preexec currently has an issue where it will stop honoring &lt;code&gt;ignorespace&lt;/code&gt;. While Atuin will ignore commands prefixed with whitespace, they may still end up in your bash history. Please check your configuration! All other shells do not have this issue.&lt;/p&gt; &#xA;&lt;h3&gt;fish&lt;/h3&gt; &#xA;&lt;p&gt;Add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;atuin init fish | source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your &lt;code&gt;is-interactive&lt;/code&gt; block in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;h3&gt;Nushell&lt;/h3&gt; &#xA;&lt;p&gt;Run in &lt;em&gt;Nushell&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir ~/.local/share/atuin/&#xA;atuin init nu | save ~/.local/share/atuin/init.nu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;config.nu&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ~/.local/share/atuin/init.nu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;a href=&#34;https://github.com/atuinsh/atuin/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=atuinsh/atuin&amp;amp;max=300&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>