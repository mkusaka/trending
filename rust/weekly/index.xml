<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-09T01:52:27Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rust-random/rand</title>
    <updated>2025-02-09T01:52:27Z</updated>
    <id>tag:github.com,2025-02-09:/rust-random/rand</id>
    <link href="https://github.com/rust-random/rand" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rust library for random number generation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rand&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rust-random/rand/actions&#34;&gt;&lt;img src=&#34;https://github.com/rust-random/rand/actions/workflows/test.yml/badge.svg?event=push&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/rand&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/rand.svg?sanitize=true&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-random.github.io/book/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/book-master-yellow.svg?sanitize=true&#34; alt=&#34;Book&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-random.github.io/rand/rand&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-master-yellow.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/rand&#34;&gt;&lt;img src=&#34;https://docs.rs/rand/badge.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rand is a set of crates supporting (pseudo-)random generators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built over a standard RNG trait: &lt;a href=&#34;https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html&#34;&gt;&lt;code&gt;rand_core::RngCore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With fast implementations of both &lt;a href=&#34;https://rust-random.github.io/book/guide-rngs.html#cryptographically-secure-pseudo-random-number-generators-csprngs&#34;&gt;strong&lt;/a&gt; and &lt;a href=&#34;https://rust-random.github.io/book/guide-rngs.html#basic-pseudo-random-number-generators-prngs&#34;&gt;small&lt;/a&gt; generators: &lt;a href=&#34;https://docs.rs/rand/latest/rand/rngs/index.html&#34;&gt;&lt;code&gt;rand::rngs&lt;/code&gt;&lt;/a&gt;, and more RNGs: &lt;a href=&#34;https://docs.rs/rand_chacha&#34;&gt;&lt;code&gt;rand_chacha&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/rand_xoshiro/&#34;&gt;&lt;code&gt;rand_xoshiro&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/rand_pcg/&#34;&gt;&lt;code&gt;rand_pcg&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-random/rngs/&#34;&gt;rngs repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rand/latest/rand/fn.rng.html&#34;&gt;&lt;code&gt;rand::rng&lt;/code&gt;&lt;/a&gt; is an asymptotically-fast, automatically-seeded and reasonably strong generator available on all &lt;code&gt;std&lt;/code&gt; targets&lt;/li&gt; &#xA; &lt;li&gt;Direct support for seeding generators from the &lt;a href=&#34;https://crates.io/crates/getrandom&#34;&gt;getrandom&lt;/a&gt; crate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With broad support for random value generation and random processes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rand/latest/rand/distr/struct.StandardUniform.html&#34;&gt;&lt;code&gt;StandardUniform&lt;/code&gt;&lt;/a&gt; random value sampling, &lt;a href=&#34;https://docs.rs/rand/latest/rand/distr/struct.Uniform.html&#34;&gt;&lt;code&gt;Uniform&lt;/code&gt;&lt;/a&gt;-ranged value sampling and &lt;a href=&#34;https://docs.rs/rand/latest/rand/distr/index.html&#34;&gt;more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Samplers for a large number of non-uniform random number distributions via our own &lt;a href=&#34;https://docs.rs/rand_distr&#34;&gt;&lt;code&gt;rand_distr&lt;/code&gt;&lt;/a&gt; and via the &lt;a href=&#34;https://docs.rs/statrs/0.13.0/statrs/&#34;&gt;&lt;code&gt;statrs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Random processes (mostly choose and shuffle) via &lt;a href=&#34;https://docs.rs/rand/latest/rand/seq/index.html&#34;&gt;&lt;code&gt;rand::seq&lt;/code&gt;&lt;/a&gt; traits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-random.github.io/book/portability.html&#34;&gt;Portably reproducible output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#[no_std]&lt;/code&gt; compatibility (partial)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Many&lt;/em&gt; performance optimisations thanks to contributions from the wide user-base&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rand &lt;strong&gt;is not&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Small (LoC). Most low-level crates are small, but the higher-level &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;rand_distr&lt;/code&gt; each contain a lot of functionality.&lt;/li&gt; &#xA; &lt;li&gt;Simple (implementation). We have a strong focus on correctness, speed and flexibility, but not simplicity. If you prefer a small-and-simple library, there are alternatives including &lt;a href=&#34;https://crates.io/crates/fastrand&#34;&gt;fastrand&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/oorandom&#34;&gt;oorandom&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Primarily a cryptographic library. &lt;code&gt;rand&lt;/code&gt; does provide some generators which aim to support unpredictable value generation under certain constraints; see &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; for details. Users are expected to determine for themselves whether &lt;code&gt;rand&lt;/code&gt;&#39;s functionality meets their own security requirements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-random.github.io/book&#34;&gt;The Rust Rand Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rust-random.github.io/rand&#34;&gt;API reference (master branch)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/rand&#34;&gt;API reference (docs.rs)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;Rand is &lt;em&gt;mature&lt;/em&gt; (suitable for general usage, with infrequent breaking releases which minimise breakage) but not yet at 1.0. Current versions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version 0.9 was released in January 2025.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; or &lt;a href=&#34;https://rust-random.github.io/book/update.html&#34;&gt;Upgrade Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Crate Features&lt;/h2&gt; &#xA;&lt;p&gt;Rand is built with these features enabled by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;std&lt;/code&gt; enables functionality dependent on the &lt;code&gt;std&lt;/code&gt; lib&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alloc&lt;/code&gt; (implied by &lt;code&gt;std&lt;/code&gt;) enables functionality requiring an allocator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;os_rng&lt;/code&gt; (implied by &lt;code&gt;std&lt;/code&gt;) enables &lt;code&gt;rngs::OsRng&lt;/code&gt;, using the &lt;a href=&#34;https://crates.io/crates/getrandom&#34;&gt;getrandom&lt;/a&gt; crate&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;std_rng&lt;/code&gt; enables inclusion of &lt;code&gt;StdRng&lt;/code&gt;, &lt;code&gt;ThreadRng&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optionally, the following dependencies can be enabled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;log&lt;/code&gt; enables logging via &lt;a href=&#34;https://crates.io/crates/log&#34;&gt;log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, these features configure Rand:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;small_rng&lt;/code&gt; enables inclusion of the &lt;code&gt;SmallRng&lt;/code&gt; PRNG&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; includes some additions requiring nightly Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;simd_support&lt;/code&gt; (experimental) enables sampling of SIMD values (uniformly random SIMD integers and floats), requiring nightly Rust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that nightly features are not stable and therefore not all library and compiler versions will be compatible. This is especially true of Rand&#39;s experimental &lt;code&gt;simd_support&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;p&gt;Rand supports limited functionality in &lt;code&gt;no_std&lt;/code&gt; mode (enabled via &lt;code&gt;default-features = false&lt;/code&gt;). In this case, &lt;code&gt;OsRng&lt;/code&gt; and &lt;code&gt;from_os_rng&lt;/code&gt; are unavailable (unless &lt;code&gt;os_rng&lt;/code&gt; is enabled), large parts of &lt;code&gt;seq&lt;/code&gt; are unavailable (unless &lt;code&gt;alloc&lt;/code&gt; is enabled), and &lt;code&gt;ThreadRng&lt;/code&gt; is unavailable.&lt;/p&gt; &#xA;&lt;h2&gt;Portability and platform support&lt;/h2&gt; &#xA;&lt;p&gt;Many (but not all) algorithms are intended to have reproducible output. Read more in the book: &lt;a href=&#34;https://rust-random.github.io/book/portability.html&#34;&gt;Portability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Rand library supports a variety of CPU architectures. Platform integration is outsourced to &lt;a href=&#34;https://crates.io/crates/getrandom&#34;&gt;getrandom&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;WebAssembly support&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/WebAssembly/WASI/tree/main&#34;&gt;WASI&lt;/a&gt; and Emscripten targets are directly supported. The &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target is not &lt;em&gt;automatically&lt;/em&gt; supported. To enable support for this target, refer to the &lt;a href=&#34;https://docs.rs/getrandom/latest/getrandom/#webassembly-support&#34;&gt;&lt;code&gt;getrandom&lt;/code&gt; documentation for WebAssembly&lt;/a&gt;. Alternatively, the &lt;code&gt;os_rng&lt;/code&gt; feature may be disabled.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Rand is distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/rust-random/rand/master/COPYRIGHT&#34;&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linera-io/linera-protocol</title>
    <updated>2025-02-09T01:52:27Z</updated>
    <id>tag:github.com,2025-02-09:/linera-io/linera-protocol</id>
    <link href="https://github.com/linera-io/linera-protocol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main repository for the Linera protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/assets/1105398/fe08c941-93af-4114-bb83-bcc0eaec95f9&#34; width=&#34;250&#34; height=&#34;90&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/dynamodb.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/dynamodb.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for DynamoDB&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![Build Status for Kubernetes](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml/badge.svg)](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linera.io&#34;&gt;Linera&lt;/a&gt; is a decentralized blockchain infrastructure designed for highly scalable, low-latency Web3 applications.&lt;/p&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;https://linera.dev&#34;&gt;developer page&lt;/a&gt; and read our &lt;a href=&#34;https://linera.io/whitepaper&#34;&gt;whitepaper&lt;/a&gt; to learn more about the Linera protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;The main crates and directories of this repository can be summarized as follows: (listed from low to high levels in the dependency graph)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_base/index.html&#34;&gt;&lt;code&gt;linera-base&lt;/code&gt;&lt;/a&gt; Base definitions, including cryptography.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_version/index.html&#34;&gt;&lt;code&gt;linera-version&lt;/code&gt;&lt;/a&gt; A library to manage version info in binaries and services.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_views/index.html&#34;&gt;&lt;code&gt;linera-views&lt;/code&gt;&lt;/a&gt; A library mapping complex data structures onto a key-value store. The corresponding procedural macros are implemented in &lt;code&gt;linera-views-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_execution/index.html&#34;&gt;&lt;code&gt;linera-execution&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logic for runtime and execution of Linera applications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_chain/index.html&#34;&gt;&lt;code&gt;linera-chain&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logic for chains of blocks, certificates, and cross-chain messaging.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_storage/index.html&#34;&gt;&lt;code&gt;linera-storage&lt;/code&gt;&lt;/a&gt; Defines the storage abstractions for the protocol on top of &lt;code&gt;linera-chain&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_core/index.html&#34;&gt;&lt;code&gt;linera-core&lt;/code&gt;&lt;/a&gt; The core Linera protocol, including client and server logic, node synchronization, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_rpc/index.html&#34;&gt;&lt;code&gt;linera-rpc&lt;/code&gt;&lt;/a&gt; Defines the data-type for RPC messages (currently all client ↔ proxy ↔ chain ↔ chain interactions), and track the corresponding data schemas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_client/index.html&#34;&gt;&lt;code&gt;linera-client&lt;/code&gt;&lt;/a&gt; Library for writing Linera clients. Used for the command-line client and the node service in &lt;code&gt;linera-service&lt;/code&gt;, as well as the Web client in &lt;a href=&#34;https://github.com/linera-io/linera-web/&#34;&gt;&lt;code&gt;linera-web&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_service/index.html&#34;&gt;&lt;code&gt;linera-service&lt;/code&gt;&lt;/a&gt; Executable for clients (aka CLI wallets), proxy (aka validator frontend) and servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_sdk/index.html&#34;&gt;&lt;code&gt;linera-sdk&lt;/code&gt;&lt;/a&gt; The library to develop Linera applications written in Rust for the Wasm virtual machine. The corresponding procedural macros are implemented in &lt;code&gt;linera-sdk-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; Examples of Linera applications written in Rust.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart with the Linera service CLI&lt;/h2&gt; &#xA;&lt;p&gt;The following commands set up a local test network and run some transfers between the microchains owned by a single wallet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Make sure to compile the Linera binaries and add them in the $PATH.&#xA;# cargo build -p linera-storage-service -p linera-service --bins --features storage-service&#xA;export PATH=&#34;$PWD/target/debug:$PATH&#34;&#xA;&#xA;# Import the optional helper function `linera_spawn_and_read_wallet_variables`.&#xA;source /dev/stdin &amp;lt;&amp;lt;&amp;lt;&#34;$(linera net helper 2&amp;gt;/dev/null)&#34;&#xA;&#xA;# Run a local test network with the default parameters and a number of microchains&#xA;# owned by the default wallet. (The helper function `linera_spawn_and_read_wallet_variables`&#xA;# is used to set the two environment variables LINERA_{WALLET,STORAGE}.)&#xA;linera_spawn_and_read_wallet_variables \&#xA;linera net up&#xA;&#xA;# Print the set of validators.&#xA;linera query-validators&#xA;&#xA;# Query the chain balance of some of the chains.&#xA;CHAIN1=&#34;aee928d4bf3880353b4a3cd9b6f88e6cc6e5ed050860abae439e7782e9b2dfe8&#34;&#xA;CHAIN2=&#34;a3edc33d8e951a1139333be8a4b56646b5598a8f51216e86592d881808972b07&#34;&#xA;linera query-balance &#34;$CHAIN1&#34;&#xA;linera query-balance &#34;$CHAIN2&#34;&#xA;&#xA;# Transfer 10 units then 5 back&#xA;linera transfer 10 --from &#34;$CHAIN1&#34; --to &#34;$CHAIN2&#34;&#xA;linera transfer 5 --from &#34;$CHAIN2&#34; --to &#34;$CHAIN1&#34;&#xA;&#xA;# Query balances again&#xA;linera query-balance &#34;$CHAIN1&#34;&#xA;linera query-balance &#34;$CHAIN2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complex examples may be found in our &lt;a href=&#34;https://linera.dev&#34;&gt;developer manual&lt;/a&gt; as well as the &lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples&#34;&gt;example applications&lt;/a&gt; in this repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>block/goose</title>
    <updated>2025-02-09T01:52:27Z</updated>
    <id>tag:github.com,2025-02-09:/block/goose</id>
    <link href="https://github.com/block/goose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;an open-source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; codename goose &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;an open-source, extensible AI agent that goes beyond code suggestions&lt;br&gt;install, execute, edit, and test with any LLM&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/7GaTvbDwga&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1287729918100246654?logo=discord&amp;amp;logoColor=white&amp;amp;label=Join+Us&amp;amp;color=blueviolet&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/block/goose/actions/workflows/ci.yml&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/block/goose/ci.yml?branch=main&#34; alt=&#34;CI&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://block.github.io/goose&#34;&gt;documentation&lt;/a&gt;, or to try it out head to the &lt;a href=&#34;https://block.github.io/goose/docs/getting-started/installation&#34;&gt;installation&lt;/a&gt; instructions!&lt;/p&gt;</summary>
  </entry>
</feed>