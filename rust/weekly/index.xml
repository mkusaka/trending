<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-15T01:49:58Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>libnyanpasu/clash-nyanpasu</title>
    <updated>2024-09-15T01:49:58Z</updated>
    <id>tag:github.com,2024-09-15:/libnyanpasu/clash-nyanpasu</id>
    <link href="https://github.com/libnyanpasu/clash-nyanpasu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clash Nyanpasu～(∠・ω&lt; )⌒☆&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://nyanpasu.elaina.moe/images/banner/nyanpasu_banner.png&#34; alt=&#34;Clash Nyanpasu Banner&#34;&gt; &lt;/h1&gt; &#xA;&lt;h3&gt;Clash Nyanpasu&lt;/h3&gt; &#xA;&lt;h3&gt; A &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash&lt;/a&gt; GUI based on &lt;a href=&#34;https://github.com/tauri-apps/tauri&#34;&gt;tauri&lt;/a&gt;. &lt;/h3&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/LibNyanpasu/clash-nyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/releases/pre-release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/LibNyanpasu/clash-nyanpasu/target-dev-build.yaml?style=flat-square&#34; alt=&#34;Dev Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/LibNyanpasu/clash-nyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/LibNyanpasu/clash-nyanpasu/total?style=flat-square&#34; alt=&#34;GitHub Downloads (all assets, all releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LibNyanpasu/clash-nyanpasu/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/LibNyanpasu/clash-nyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ClashNyanpasu&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ClashNyanpasu?style=flat-square&#34; alt=&#34;Nyanpasu Twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in support &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash Premium&lt;/a&gt;, &lt;a href=&#34;https://github.com/MetaCubeX/mihomo&#34;&gt;Clash.Meta&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/Watfaq/clash-rs&#34;&gt;Clash-Rust&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Profiles management and enhancement (by yaml, JavaScript &amp;amp; Lua). &lt;a href=&#34;https://nyanpasu.elaina.moe/tutorial/proxy-chain.html&#34;&gt;Doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Provider management support.&lt;/li&gt; &#xA; &lt;li&gt;Google Material You Design UI and amimation support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nyanpasu.elaina.moe/images/screenshot/app-dashboard-light.png&#34; alt=&#34;preview-light&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nyanpasu.elaina.moe/images/screenshot/app-dashboard-dark.png&#34; alt=&#34;preview-dark&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/tutorial/install.html&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/others/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/others/issues.html&#34;&gt;Q&amp;amp;A Convention&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nyanpasu.elaina.moe/others/how-to-ask.html&#34;&gt;How To Ask Questions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Configure your development environment&lt;/h3&gt; &#xA;&lt;p&gt;You should install Rust and Nodejs, see &lt;a href=&#34;https://tauri.app/v1/guides/getting-started/prerequisites&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Clash Nyanpasu uses the pnpm package manager. See &lt;a href=&#34;https://pnpm.io/installation&#34;&gt;here&lt;/a&gt; for installation instructions. Then, install Node.js packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download the Clash binary &amp;amp; other dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# force update to latest version&#xA;# pnpm check --force&#xA;&#xA;pnpm check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run dev&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm dev&#xA;&#xA;# run it in another way if app instance exists&#xA;pnpm dev:diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build application&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Issue and PR welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Clash Nyanpasu was based on or inspired by these projects and so on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zzzgydi/clash-verge&#34;&gt;zzzgydi/clash-verge&lt;/a&gt;: A Clash GUI based on tauri. Supports Windows, macOS and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clash-verge-rev/clash-verge-rev&#34;&gt;clash-verge-rev/clash-verge-rev&lt;/a&gt;: Another fork of Clash Verge. Some patches are included for bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tauri-apps/tauri&#34;&gt;tauri-apps/tauri&lt;/a&gt;: Build smaller, faster, and more secure desktop applications with a web frontend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Dreamacro/clash&lt;/a&gt;: A rule-based tunnel in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetaCubeX/mihomo&#34;&gt;MetaCubeX/Clash.Meta&lt;/a&gt;: A rule-based tunnel in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Watfaq/clash-rs&#34;&gt;ClashRs&lt;/a&gt;: A custom protocol, rule based network proxy software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fndroid/clash_for_windows_pkg&#34;&gt;Fndroid/clash_for_windows_pkg&lt;/a&gt;: A Windows/macOS GUI based on Clash.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitejs/vite&#34;&gt;vitejs/vite&lt;/a&gt;: Next generation frontend tooling. It&#39;s fast!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mui/material-ui&#34;&gt;mui/material-ui&lt;/a&gt;: Ready-to-use foundational React components, free forever.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=LibNyanpasu/clash-nyanpasu&#34; alt=&#34;Contributors&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPL-3.0 License. See &lt;a href=&#34;https://raw.githubusercontent.com/libnyanpasu/clash-nyanpasu/main/LICENSE&#34;&gt;License here&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>esp-rs/esp-hal</title>
    <updated>2024-09-15T01:49:58Z</updated>
    <id>tag:github.com,2024-09-15:/esp-rs/esp-hal</id>
    <link href="https://github.com/esp-rs/esp-hal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;no_std Hardware Abstraction Layers for ESP32 microcontrollers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;esp-hal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/esp-rs/esp-hal/ci.yml?labelColor=1C2C2E&amp;amp;label=CI&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;GitHub Actions Workflow Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/esp-rs/esp-hal/hil.yml?labelColor=1C2C2E&amp;amp;label=HIL&amp;amp;logo=github&amp;amp;style=flat-square&amp;amp;event=merge_group&#34; alt=&#34;GitHub Actions Workflow Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT%2FApache--2.0-blue?labelColor=1C2C2E&amp;amp;style=flat-square&#34; alt=&#34;MIT/Apache-2.0 licensed&#34;&gt; &lt;a href=&#34;https://matrix.to/#/%23esp-rs:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/esp-rs:matrix.org?labelColor=1C2C2E&amp;amp;label=join%20matrix&amp;amp;color=BEC5C9&amp;amp;logo=matrix&amp;amp;style=flat-square&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bare-metal (&lt;code&gt;no_std&lt;/code&gt;) hardware abstraction layer for Espressif devices. Currently supports, to varying degrees, the following devices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32 Series: &lt;em&gt;ESP32&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32-C Series: &lt;em&gt;ESP32-C2, ESP32-C3, ESP32-C6&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32-H Series: &lt;em&gt;ESP32-H2&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32-S Series: &lt;em&gt;ESP32-S2, ESP32-S3&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally provides limited support for programming the low-power RISC-V cores found on the &lt;em&gt;ESP32-C6&lt;/em&gt;, &lt;em&gt;ESP32-S2&lt;/em&gt;, and &lt;em&gt;ESP32-S3&lt;/em&gt; via the &lt;a href=&#34;https://github.com/esp-rs/esp-hal/tree/main/esp-lp-hal&#34;&gt;esp-lp-hal&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;These packages are all &lt;code&gt;no_std&lt;/code&gt;; if you are looking for &lt;code&gt;std&lt;/code&gt; support, please use &lt;a href=&#34;https://github.com/esp-rs/esp-idf-svc&#34;&gt;esp-idf-svc&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, comments, or concerns, please &lt;a href=&#34;https://github.com/esp-rs/esp-hal/issues/new&#34;&gt;open an issue&lt;/a&gt;, &lt;a href=&#34;https://github.com/esp-rs/esp-hal/discussions/new&#34;&gt;start a new discussion&lt;/a&gt;, or join us on &lt;a href=&#34;https://matrix.to/#/%23esp-rs:matrix.org&#34;&gt;Matrix&lt;/a&gt;. For additional information regarding any of the crates in this repository, please refer to the relevant crate&#39;s README.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;This project is still in the relatively early stages of development, and as such there should be no expectation of API stability. A significant number of peripherals currently have drivers implemented but have varying levels of functionality. For most tasks, this should be usable already, however some more advanced or uncommon features may not yet be implemented.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For information relating to the development of Rust applications on ESP devices, please first read &lt;a href=&#34;https://esp-rs.github.io/book/&#34;&gt;The Rust on ESP Book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For information about the HAL and how to use it in your own projects, please refer to the &lt;a href=&#34;https://docs.esp-rs.org/esp-hal/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/&#34;&gt;The Rust Programming Language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rust-embedded.org/book/index.html&#34;&gt;The Embedded Rust Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rust-embedded.org/embedonomicon/&#34;&gt;The Embedonomicon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esp-rs.github.io/book/&#34;&gt;The Rust on ESP Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esp-rs.github.io/no_std-training/&#34;&gt;Embedded Rust (no_std) on Espressif&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Crates&lt;/h2&gt; &#xA;&lt;p&gt;This repository is home to a number of different packages; for more information regarding a particular package, please refer to its &lt;code&gt;README.md&lt;/code&gt; and/or documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We have a number of living documents to aid contributing to the project, please give these a read before modifying code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esp-rs/esp-hal/raw/main/documentation/API-GUIDELINES.md&#34;&gt;API-GUIDELINES&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esp-rs/esp-hal/raw/main/documentation/CONTRIBUTING.md&#34;&gt;CONTRIBUTING-GUIDE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/esp-rs/esp-hal/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/esp-rs/esp-hal/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution notice&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>open-telemetry/opentelemetry-rust</title>
    <updated>2024-09-15T01:49:58Z</updated>
    <id>tag:github.com,2024-09-15:/open-telemetry/opentelemetry-rust</id>
    <link href="https://github.com/open-telemetry/opentelemetry-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Rust OpenTelemetry implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTelemetry Rust&lt;/h1&gt; &#xA;&lt;p&gt;The Rust &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; implementation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/opentelemetry.svg?sanitize=true&#34; alt=&#34;Crates.io: opentelemetry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/opentelemetry&#34;&gt;&lt;img src=&#34;https://docs.rs/opentelemetry/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-rust/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/opentelemetry&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-rust/actions?query=workflow%3ACI+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/open-telemetry/opentelemetry-rust/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-rust&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-rust/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud-native.slack.com/archives/C03GDP0H023&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@cncf/otel/rust-brightgreen.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;OpenTelemetry is a collection of tools, APIs, and SDKs used to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) for analysis in order to understand your software&#39;s performance and behavior. You can export and analyze them using &lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt;, &lt;a href=&#34;https://www.jaegertracing.io&#34;&gt;Jaeger&lt;/a&gt;, and other observability tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Compiler support: &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-rust/main/#supported-rust-versions&#34;&gt;requires &lt;code&gt;rustc&lt;/code&gt; 1.65+&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Signal/Component&lt;/th&gt; &#xA;   &lt;th&gt;Overall Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs-API&lt;/td&gt; &#xA;   &lt;td&gt;Beta*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs-SDK&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs-OTLP Exporter&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs-Appender-Tracing&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metrics-API&lt;/td&gt; &#xA;   &lt;td&gt;Alpha&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metrics-SDK&lt;/td&gt; &#xA;   &lt;td&gt;Alpha&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metrics-OTLP Exporter&lt;/td&gt; &#xA;   &lt;td&gt;Alpha&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traces-API&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traces-SDK&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traces-OTLP Exporter&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*OpenTelemetry Rust is not introducing a new end user callable Logging API. Instead, it provides &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-specification/raw/main/specification/logs/bridge-api.md&#34;&gt;Logs Bridge API&lt;/a&gt;, that allows one to write log appenders that can bridge existing logging libraries to the OpenTelemetry log data model. The following log appenders are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-rust/main/opentelemetry-appender-log/README.md&#34;&gt;opentelemetry-appender-log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-rust/main/opentelemetry-appender-tracing/README.md&#34;&gt;opentelemetry-appender-tracing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you already use the logging APIs from above, continue to use them, and use the appenders above to bridge the logs to OpenTelemetry. If you are using a library not listed here, feel free to contribute a new appender for the same.&lt;/p&gt; &#xA;&lt;p&gt;If you are starting fresh, then consider using &lt;a href=&#34;https://github.com/tokio-rs/tracing&#34;&gt;tracing&lt;/a&gt; as your logging API. It supports structured logging and is actively maintained.&lt;/p&gt; &#xA;&lt;p&gt;Project versioning information and stability guarantees can be found &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-rust/main/VERSIONING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use opentelemetry::{&#xA;    global,&#xA;    trace::{Tracer, TracerProvider as _},&#xA;};&#xA;use opentelemetry_sdk::trace::TracerProvider;&#xA;&#xA;fn main() {&#xA;    // Create a new trace pipeline that prints to stdout&#xA;    let provider = TracerProvider::builder()&#xA;        .with_simple_exporter(opentelemetry_stdout::SpanExporter::default())&#xA;        .build();&#xA;    let tracer = provider.tracer(&#34;readme_example&#34;);&#xA;&#xA;    tracer.in_span(&#34;doing_work&#34;, |cx| {&#xA;        // Traced app logic here...&#xA;    });&#xA;&#xA;    // Shutdown trace pipeline&#xA;    global::shutdown_tracer_provider();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above requires the following packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Cargo.toml&#xA;[dependencies]&#xA;opentelemetry = &#34;0.22&#34;&#xA;opentelemetry_sdk = &#34;0.22&#34;&#xA;opentelemetry-stdout = { version = &#34;0.3&#34;, features = [&#34;trace&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-rust/main/examples&#34;&gt;examples&lt;/a&gt; directory for different integration patterns.&lt;/p&gt; &#xA;&lt;h2&gt;Overview of crates&lt;/h2&gt; &#xA;&lt;p&gt;The following crates are maintained in this repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry&#34;&gt;&lt;code&gt;opentelemetry&lt;/code&gt;&lt;/a&gt; This is the OpenTelemetry API crate, and is the crate required to instrument libraries and applications. It contains Context API, Baggage API, Propagators API, Logging Bridge API, Metrics API, and Tracing API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-sdk&#34;&gt;&lt;code&gt;opentelemetry-sdk&lt;/code&gt;&lt;/a&gt; This is the OpenTelemetry SDK crate, and contains the official OpenTelemetry SDK implementation. It contains Logging SDK, Metrics SDK, and Tracing SDK. It also contains propagator implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-otlp&#34;&gt;&lt;code&gt;opentelemetry-otlp&lt;/code&gt;&lt;/a&gt; - exporter to send telemetry (logs, metrics and traces) in the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/protocol&#34;&gt;OTLP format&lt;/a&gt; to an endpoint accepting OTLP. This could be the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector&#34;&gt;OTel Collector&lt;/a&gt;, telemetry backends like &lt;a href=&#34;https://www.jaegertracing.io/&#34;&gt;Jaeger&lt;/a&gt;, &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/feature_flags/#otlp-receiver&#34;&gt;Prometheus&lt;/a&gt; or &lt;a href=&#34;https://opentelemetry.io/ecosystem/vendors/&#34;&gt;vendor specific endpoints&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-stdout&#34;&gt;&lt;code&gt;opentelemetry-stdout&lt;/code&gt;&lt;/a&gt; exporter for sending logs, metrics and traces to stdout, for learning/debugging purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-http&#34;&gt;&lt;code&gt;opentelemetry-http&lt;/code&gt;&lt;/a&gt; This crate contains utility functions to help with exporting telemetry, propagation, over &lt;a href=&#34;https://crates.io/crates/http&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-appender-log&#34;&gt;&lt;code&gt;opentelemetry-appender-log&lt;/code&gt;&lt;/a&gt; This crate provides logging appender to route logs emitted using the &lt;a href=&#34;https://docs.rs/log/latest/log/&#34;&gt;log&lt;/a&gt; crate to opentelemetry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-appender-tracing&#34;&gt;&lt;code&gt;opentelemetry-appender-tracing&lt;/code&gt;&lt;/a&gt; This crate provides logging appender to route logs emitted using the &lt;a href=&#34;https://crates.io/crates/tracing&#34;&gt;tracing&lt;/a&gt; crate to opentelemetry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-jaeger-propagator&#34;&gt;&lt;code&gt;opentelemetry-jaeger-propagator&lt;/code&gt;&lt;/a&gt; provides context propagation using &lt;a href=&#34;https://www.jaegertracing.io/docs/1.18/client-libraries/#propagation-format&#34;&gt;jaeger propagation format&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-prometheus&#34;&gt;&lt;code&gt;opentelemetry-prometheus&lt;/code&gt;&lt;/a&gt; provides a pipeline and exporter for sending metrics to &lt;a href=&#34;https://prometheus.io&#34;&gt;&lt;code&gt;Prometheus&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-semantic-conventions&#34;&gt;&lt;code&gt;opentelemetry-semantic-conventions&lt;/code&gt;&lt;/a&gt; provides standard names and semantic otel conventions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crates.io/crates/opentelemetry-zipkin&#34;&gt;&lt;code&gt;opentelemetry-zipkin&lt;/code&gt;&lt;/a&gt; provides a pipeline and exporter for sending traces to &lt;a href=&#34;https://zipkin.io&#34;&gt;&lt;code&gt;Zipkin&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there are several other useful crates in the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-rust-contrib&#34;&gt;OTel Rust Contrib repo&lt;/a&gt;. A lot of crates maintained outside OpenTelemetry owned repos can be found in the &lt;a href=&#34;https://opentelemetry.io/ecosystem/registry/?language=rust&#34;&gt;OpenTelemetry Registry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; &#xA;&lt;p&gt;OpenTelemetry is built against the latest stable release. The minimum supported version is 1.65. The current OpenTelemetry version is not guaranteed to build on Rust versions earlier than the minimum supported version.&lt;/p&gt; &#xA;&lt;p&gt;The current stable Rust compiler and the three most recent minor versions before it will always be supported. For example, if the current stable compiler version is 1.49, the minimum supported version will not be increased past 1.46, three minor versions prior. Increasing the minimum supported compiler version is not considered a semver breaking change as long as doing so complies with this policy.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-rust/main/CONTRIBUTING.md&#34;&gt;contributing file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Rust special interest group (SIG) meets weekly on Tuesdays at 9 AM Pacific Time. The meeting is subject to change depending on contributors&#39; availability. Check the &lt;a href=&#34;https://github.com/open-telemetry/community?tab=readme-ov-file#calendar&#34;&gt;OpenTelemetry community calendar&lt;/a&gt; for specific dates and for Zoom meeting links. &#34;OTel Rust SIG&#34; is the name of meeting for this group.&lt;/p&gt; &#xA;&lt;p&gt;Meeting notes are available as a public &lt;a href=&#34;https://docs.google.com/document/d/1tGKuCsSnyT2McDncVJrMgg74_z8V06riWZa0Sr79I_4/edit&#34;&gt;Google doc&lt;/a&gt;. If you have trouble accessing the doc, please get in touch on &lt;a href=&#34;https://cloud-native.slack.com/archives/C03GDP0H023&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The meeting is open for all to join. We invite everyone to join our meeting, regardless of your experience level. Whether you&#39;re a seasoned OpenTelemetry developer, just starting your journey, or simply curious about the work we do, you&#39;re more than welcome to participate!&lt;/p&gt; &#xA;&lt;h2&gt;Approvers and Maintainers&lt;/h2&gt; &#xA;&lt;h3&gt;Maintainers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cijothomas&#34;&gt;Cijo Thomas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hdost&#34;&gt;Harold Dost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtescher&#34;&gt;Julian Tescher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lalitb&#34;&gt;Lalit Kumar Bhasin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyCpp&#34;&gt;Zhongyang Wu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Approvers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shaun-cox&#34;&gt;Shaun Cox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/utpilla&#34;&gt;Utkarsh Umesan Pillai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emeritus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/djc&#34;&gt;Dirkjan Ochtman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frigus02&#34;&gt;Jan Kühle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iredelmeier&#34;&gt;Isobel Redelmeier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikeGoldsmith&#34;&gt;Mike Goldsmith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Thanks to all the people who have contributed&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-rust/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contributors-img.web.app/image?repo=open-telemetry/opentelemetry-rust&#34; alt=&#34;contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>