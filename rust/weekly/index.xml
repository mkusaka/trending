<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-01T01:43:34Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mfontanini/presenterm</title>
    <updated>2025-06-01T01:43:34Z</updated>
    <id>tag:github.com,2025-06-01:/mfontanini/presenterm</id>
    <link href="https://github.com/mfontanini/presenterm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A markdown terminal slideshow tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;presenterm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/presenterm&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/presenterm&#34; alt=&#34;crates-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/presenterm&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/presenterm&#34; alt=&#34;brew-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.nixos.org/packages?size=1&amp;amp;show=presenterm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Packaged_for-Nix-5277C3.svg?logo=nixos&amp;amp;labelColor=73C3D5&#34; alt=&#34;nix-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/presenterm/&#34;&gt;&lt;img src=&#34;https://img.shields.io/archlinux/v/extra/x86_64/presenterm&#34; alt=&#34;arch-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scoop.sh/#/apps?q=presenterm&amp;amp;id=a462290f824b50f180afbaa6d8c7c1e6e0952e3a&#34;&gt;&lt;img src=&#34;https://img.shields.io/scoop/v/presenterm&#34; alt=&#34;scoop-badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;presenterm&lt;/em&gt; lets you create presentations in markdown format and run them from your terminal, with support for image and animated gifs, highly customizable themes, code highlighting, exporting presentations into PDF format, and plenty of other features. This is how the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/examples/demo.md&#34;&gt;demo presentation&lt;/a&gt; looks like when running in the &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;kitty terminal&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/docs/src/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the rest of the example presentations in the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/examples&#34;&gt;examples directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://mfontanini.github.io/presenterm/&#34;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define your presentation in a single markdown file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/images.html&#34;&gt;Images and animated gifs&lt;/a&gt; on terminals like &lt;em&gt;kitty&lt;/em&gt;, &lt;em&gt;iterm2&lt;/em&gt;, and &lt;em&gt;wezterm&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/themes/introduction.html&#34;&gt;Customizable themes&lt;/a&gt; including colors, margins, layout (left/center aligned content), footer for every slide, etc. Several &lt;a href=&#34;https://mfontanini.github.io/presenterm/features/themes/introduction.html#built-in-themes&#34;&gt;built-in themes&lt;/a&gt; can give your presentation the look you want without having to define your own.&lt;/li&gt; &#xA; &lt;li&gt;Code highlighting for a &lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/highlighting.html&#34;&gt;wide list of programming languages&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#font-sizes&#34;&gt;Font sizes&lt;/a&gt; for terminals that support them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/highlighting.html#selective-highlighting&#34;&gt;Selective/dynamic&lt;/a&gt; code highlighting that only highlights portions of code at a time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/layout.html&#34;&gt;Column layouts&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/mermaid.html&#34;&gt;mermaid graph rendering&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/latex.html&#34;&gt;&lt;em&gt;LaTeX&lt;/em&gt; and &lt;em&gt;typst&lt;/em&gt; formula rendering&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#introduction-slide&#34;&gt;Introduction slide&lt;/a&gt; that displays the presentation title and your name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#slide-titles&#34;&gt;Slide titles&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/execution.html&#34;&gt;Snippet execution&lt;/a&gt; for various programming languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/exports.html&#34;&gt;Export presentations to PDF and HTML&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/slide-transitions.html&#34;&gt;Slide transitions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/commands.html#pauses&#34;&gt;Pause&lt;/a&gt; portions of your slides.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/configuration/settings.html#key-bindings&#34;&gt;Custom key bindings&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#hot-reload&#34;&gt;Automatically reload your presentation&lt;/a&gt; every time it changes for a fast development loop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/speaker-notes.html&#34;&gt;Define speaker notes&lt;/a&gt; to aid you during presentations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://mfontanini.github.io/presenterm/&#34;&gt;introduction page&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h1&gt;Presenterm in action&lt;/h1&gt; &#xA;&lt;p&gt;Here are some talks and demos that feature &lt;em&gt;presenterm&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iepbyYrF_YQ&#34;&gt;Bringing Terminal Aesthetics to the Web With Rust&lt;/a&gt; by &lt;a href=&#34;https://github.com/orhun&#34;&gt;Orhun Parmaksız&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ATiKwUiqnAU&#34;&gt;7 Rust Terminal Tools That You Should Use&lt;/a&gt; by &lt;a href=&#34;https://github.com/orhun&#34;&gt;Orhun Parmaksız&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hWG51Mc1DlM&#34;&gt;Renaissance of Terminal User Interfaces with Rust&lt;/a&gt; by &lt;a href=&#34;https://github.com/orhun&#34;&gt;Orhun Parmaksız&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pwnwriter/PTN11&#34;&gt;Using Nix on Apple Silicon and declarative development environments&lt;/a&gt; by &lt;a href=&#34;https://github.com/pwnwriter&#34;&gt;pwnwriter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Gave a talk using &lt;em&gt;presenterm&lt;/em&gt;? We would love to feature it here! Open a PR or issue to get it added.&lt;/p&gt; &#xA;&lt;!-- links --&gt;</summary>
  </entry>
  <entry>
    <title>facebook/pyrefly</title>
    <updated>2025-06-01T01:43:34Z</updated>
    <id>tag:github.com,2025-06-01:/facebook/pyrefly</id>
    <link href="https://github.com/facebook/pyrefly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast type checker and IDE for Python&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pyrefly: A fast type checker and IDE for Python&lt;/h1&gt; &#xA;&lt;p&gt;Currently under active development with known issues. Please open an issue if you find bugs.&lt;/p&gt; &#xA;&lt;p&gt;Pyrefly is a fast type checker for Python. It&#39;s designed to replace the existing Pyre type checker at Meta by the end of 2025. This README describes basic usage. See the &lt;a href=&#34;https://pyrefly.org&#34;&gt;Pyrefly website&lt;/a&gt; for full documentation and a tool for checking code.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Pyrefly aims to increase development velocity with IDE features and by checking your Python code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try out pyrefly in your browser: &lt;a href=&#34;https://pyrefly.org/sandbox/&#34;&gt;Sandbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the command-line tool: &lt;code&gt;pip install pyrefly&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the VSCode extension: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=meta.pyrefly&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type Inference: Pyrefly infers types in most locations, apart from function parameters. It can infer types of variables and return types.&lt;/li&gt; &#xA; &lt;li&gt;Flow Types: Pyrefly can understand your program&#39;s control flow to refine static types.&lt;/li&gt; &#xA; &lt;li&gt;Incrementality: Pyrefly aims for large-scale incrementality at the module level, with optimized checking and parallelism.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Involved&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions or would like to report a bug, please &lt;a href=&#34;https://github.com/facebook/pyrefly/issues&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://github.com/facebook/pyrefly/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for information on how to contribute to Pyrefly.&lt;/p&gt; &#xA;&lt;h2&gt;Choices&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of choices when writing a Python type checker. We are taking inspiration from &lt;a href=&#34;https://pyre-check.org/&#34;&gt;Pyre1&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;Pyright&lt;/a&gt; and &lt;a href=&#34;https://mypy.readthedocs.io/en/stable/&#34;&gt;MyPy&lt;/a&gt;. Some notable choices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We infer types in most locations, apart from parameters to functions. We do infer types of variables and return types. As an example, &lt;code&gt;def foo(x): return True&lt;/code&gt; would result in something equivalent to had you written &lt;code&gt;def foo(x: Any) -&amp;gt; bool: ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We attempt to infer the type of &lt;code&gt;[]&lt;/code&gt; to however it is used first, then fix it after. For example &lt;code&gt;xs = []; xs.append(1); xs.append(&#34;&#34;)&lt;/code&gt; will infer that &lt;code&gt;xs: List[int]&lt;/code&gt; and then error on the final statement.&lt;/li&gt; &#xA; &lt;li&gt;We use flow types which refine static types, e.g. &lt;code&gt;x: int = 4&lt;/code&gt; will both know that &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;int&lt;/code&gt;, but also that the immediately next usage of &lt;code&gt;x&lt;/code&gt; will be aware the type is &lt;code&gt;Literal[4]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We aim for large-scale incrementality (at the module level) and optimized checking with parallelism, aiming to use the advantages of Rust to keep the code a bit simpler.&lt;/li&gt; &#xA; &lt;li&gt;We expect large strongly connected components of modules, and do not attempt to take advantage of a DAG-shape in the source code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;There are many nuances of design that change on a regular basis. But the basic substrate on which the checker is built involves three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Figure out what each module exports. That requires solving all &lt;code&gt;import *&lt;/code&gt; statements transitively.&lt;/li&gt; &#xA; &lt;li&gt;For each module in isolation, convert it to bindings, dealing with all statements and scope information (both static and flow).&lt;/li&gt; &#xA; &lt;li&gt;Solve those bindings, which may require the solutions of bindings in other modules.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If we encounter unknowable information (e.g. recursion) we use &lt;code&gt;Type::Var&lt;/code&gt; to insert placeholders which are filled in later.&lt;/p&gt; &#xA;&lt;p&gt;For each module, we solve the steps sequentially and completely. In particular, we do not try and solve a specific identifier first (like &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; or &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;), and do not use fine-grained incrementality (like &lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;Rust Analyzer&lt;/a&gt; using &lt;a href=&#34;https://github.com/salsa-rs/salsa&#34;&gt;Salsa&lt;/a&gt;). Instead, we aim for raw performance and a simpler module-centric design - there&#39;s no need to solve a single binding in isolation if solving all bindings in a module is fast enough.&lt;/p&gt; &#xA;&lt;h3&gt;Example of bindings&lt;/h3&gt; &#xA;&lt;p&gt;Given the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1: x: int = 4&#xA;2: print(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We might produce the bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;define int@0&lt;/code&gt; = &lt;code&gt;from builtins import int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;define x@1&lt;/code&gt; = &lt;code&gt;4: int@0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use x@2&lt;/code&gt; = &lt;code&gt;x@1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;anon @2&lt;/code&gt; = &lt;code&gt;print(x@2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;export x&lt;/code&gt; = &lt;code&gt;x@2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The keys are things like &lt;code&gt;define&lt;/code&gt; (the definition of something), &lt;code&gt;use&lt;/code&gt; (a usage of a thing) and &lt;code&gt;anon&lt;/code&gt; (a statement we need to type check, but don&#39;t care about the result of).&lt;/li&gt; &#xA; &lt;li&gt;In many cases the value of a key refers to other keys.&lt;/li&gt; &#xA; &lt;li&gt;Some keys are imported from other modules, via &lt;code&gt;export&lt;/code&gt; keys and &lt;code&gt;import&lt;/code&gt; values.&lt;/li&gt; &#xA; &lt;li&gt;In order to disambiguate identifiers we use the textual position at which they occur (in the example we&#39;ve used &lt;code&gt;@line&lt;/code&gt;, but in reality it&#39;s the byte offset in the file).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example of &lt;code&gt;Var&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Given the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1: x = 1&#xA;2: while test():&#xA;3:     x = x&#xA;4: print(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We end up with the bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;x@1&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x@3&lt;/code&gt; = &lt;code&gt;phi(x@1, x@3)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x@4&lt;/code&gt; = &lt;code&gt;phi(x@1, x@3)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The expression &lt;code&gt;phi&lt;/code&gt; is the join point of the two values, e.g. &lt;code&gt;phi(int, str)&lt;/code&gt; would be &lt;code&gt;int | str&lt;/code&gt;. We skip the distinction between &lt;code&gt;define&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;, since it is not necessary for this example.&lt;/p&gt; &#xA;&lt;p&gt;When solving &lt;code&gt;x@3&lt;/code&gt; we encounter recursion. Operationally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We start solving &lt;code&gt;x@3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;That requires us to solve &lt;code&gt;x@1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We solve &lt;code&gt;x@1&lt;/code&gt; to be &lt;code&gt;Literal[1]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;We start solving &lt;code&gt;x@3&lt;/code&gt;. But we are currently solving &lt;code&gt;x@3&lt;/code&gt;, so we invent a fresh &lt;code&gt;Var&lt;/code&gt; (let&#39;s call it &lt;code&gt;?1&lt;/code&gt;) and return that.&lt;/li&gt; &#xA; &lt;li&gt;We conclude that &lt;code&gt;x@3&lt;/code&gt; must be &lt;code&gt;Literal[1] | ?1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since &lt;code&gt;?1&lt;/code&gt; was introduced by &lt;code&gt;x@3&lt;/code&gt; we record that &lt;code&gt;?1 = Literal[1] | ?1&lt;/code&gt;. We can take the upper reachable bound of that and conclude that &lt;code&gt;?1 = Literal[1]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We simplify &lt;code&gt;x@3&lt;/code&gt; to just &lt;code&gt;Literal[1]&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>probe-rs/probe-rs</title>
    <updated>2025-06-01T01:43:34Z</updated>
    <id>tag:github.com,2025-06-01:/probe-rs/probe-rs</id>
    <link href="https://github.com/probe-rs/probe-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A debugging toolset and library for debugging embedded ARM and RISC-V targets on a separate host&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;probe-rs&lt;/h1&gt; &#xA;&lt;p&gt;a modern, embedded debugging toolkit, written in Rust&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/probe-rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/probe-rs&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/probe-rs&#34;&gt;&lt;img src=&#34;https://docs.rs/probe-rs/badge.svg?sanitize=true&#34; alt=&#34;documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/probe-rs/probe-rs/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/probe-rs/probe-rs/ci.yml?branch=master&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/%23probe-rs:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-probe--rs%3Amatrix.org-brightgreen&#34; alt=&#34;chat&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/sponsors/probe-rs&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal of this library is to provide a toolkit to interact with a variety of embedded MCUs and debug probes and provides a direct interface to the debug probe, which then enables other software to use its debug functionality.&lt;/p&gt; &#xA;&lt;p&gt;Additionally the project offers a variety of tools to be used directly for flashing and debugging, such as cargo extensions, a VS Code extension, a GDB server and a standalone CLI.&lt;/p&gt; &#xA;&lt;h2&gt;Functionality&lt;/h2&gt; &#xA;&lt;p&gt;As of version 0.27.0 this library can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect to a DAPLink, STLink, JLink, FTDI probes, ESP32 devices with USB JTAG, WLink and the Blackmagic probe.&lt;/li&gt; &#xA; &lt;li&gt;Talk to ARM, Risc-V and Xtensa cores via SWD or JTAG.&lt;/li&gt; &#xA; &lt;li&gt;Read and write arbitrary memory of the target.&lt;/li&gt; &#xA; &lt;li&gt;Halt, run, step and step any core, operate breakpoints, enable trace functionality and much more.&lt;/li&gt; &#xA; &lt;li&gt;Download ELF, BIN and IHEX binaries using standard CMSIS-Pack flash algorithms.&lt;/li&gt; &#xA; &lt;li&gt;Debug a target via the CLI, VSCode (MS-DAP) and GDB.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To see what new functionality gets added every release, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/probe-rs/probe-rs/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you think probe-rs makes your embedded journey more enjoyable or even earns you money, please consider supporting the project on &lt;a href=&#34;https://github.com/sponsors/probe-rs/&#34;&gt;Github Sponsors&lt;/a&gt; for better support and more features.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;In addition to being a library, probe-rs also includes a suite of tools which can be used for flashing and debugging.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to install the tools is to download a precompiled version, using one of the methods below. See &lt;a href=&#34;https://probe.rs/docs/getting-started/installation&#34;&gt;https://probe.rs/docs/getting-started/installation&lt;/a&gt; for a more detailed guide.&lt;/p&gt; &#xA;&lt;h3&gt;cargo-flash&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;cargo-flash&lt;/code&gt; utility can be used as a cargo subcommand to download a compiled Rust program onto a target device. It can also be used to download arbitrary ELF files that might come out of a C/C++ compiler. Have a look at &lt;a href=&#34;https://probe.rs/docs/tools/cargo-flash&#34;&gt;cargo-flash&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;cargo-embed&lt;/h3&gt; &#xA;&lt;p&gt;If you are looking for a more extended debugging experience, please have a look at &lt;a href=&#34;https://probe.rs/docs/tools/cargo-embed&#34;&gt;cargo-embed&lt;/a&gt; which provides support for GDB, RTT, and config files.&lt;/p&gt; &#xA;&lt;h3&gt;Editors and IDEs&lt;/h3&gt; &#xA;&lt;p&gt;We have implemented the &lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/&#34;&gt;Microsoft Debug Adapter Protocol (DAP)&lt;/a&gt;. This makes embedded debugging via probe-rs available in modern code editors implementing the standard, such as VSCode. The DAP website includes &lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/implementors/tools/&#34;&gt;a list of editors and IDEs which support DAP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;VSCode&lt;/h4&gt; &#xA;&lt;p&gt;The probe-rs website includes &lt;a href=&#34;https://probe.rs/docs/tools/debugger&#34;&gt;VSCode configuration instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Halting the attached chip&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use probe_rs::probe::{list::Lister, Probe};&#xA;use probe_rs::Permissions;&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), probe_rs::Error&amp;gt; {&#xA;    // Get a list of all available debug probes.&#xA;    let lister = Lister::new();&#xA;&#xA;    let probes = async_io::block_on(lister.list_all());&#xA;&#xA;    // Use the first probe found.&#xA;    let mut probe = probes[0].open()?;&#xA;&#xA;    // Attach to a chip.&#xA;    let mut session = probe.attach(&#34;nRF52840_xxAA&#34;, Permissions::default())?;&#xA;&#xA;    // Select a core.&#xA;    let mut core = session.core(0)?;&#xA;&#xA;    // Halt the attached core.&#xA;    core.halt(std::time::Duration::from_millis(10))?;&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading from RAM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use probe_rs::{MemoryInterface, Permissions, Session, SessionConfig};&#xA;use probe_rs::probe::WireProtocol;&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), probe_rs::Error&amp;gt; {&#xA;    // Attach to a chip.&#xA;    let speed = Some(5500);&#xA;    let protocol = Some(WireProtocol::Swd);&#xA;    let session_config = SessionConfig {&#xA;      speed,&#xA;      protocol,&#xA;      ..Default::default()&#xA;    };&#xA;&#xA;    let mut session = async_io::block_on(Session::auto_attach(&#34;nRF52840_xxAA&#34;, session_config))?;&#xA;&#xA;    // Select a core.&#xA;    let mut core = session.core(0)?;&#xA;&#xA;    // Read a block of 50 32 bit words.&#xA;    let mut buff = [0u32; 50];&#xA;    core.read_32(0x2000_0000, &amp;amp;mut buff)?;&#xA;&#xA;    // Read a single 32 bit word.&#xA;    let word = core.read_word_32(0x2000_0000)?;&#xA;&#xA;    // Writing is just as simple.&#xA;    let buff = [0u32; 50];&#xA;    core.write_32(0x2000_0000, &amp;amp;buff)?;&#xA;&#xA;    // of course we can also write 8bit words.&#xA;    let buff = [0u8; 50];&#xA;    core.write_8(0x2000_0000, &amp;amp;buff)?;&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;I need help!&lt;/h3&gt; &#xA;&lt;p&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/probe-rs/probe-rs/issues/new&#34;&gt;file an issue&lt;/a&gt;, ask questions on &lt;a href=&#34;https://matrix.to/#/%23probe-rs:matrix.org&#34;&gt;Matrix&lt;/a&gt;, or contact &lt;a href=&#34;https://github.com/Yatekii&#34;&gt;@Yatekii&lt;/a&gt; via e-mail.&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://probe.rs/docs/knowledge-base/troubleshooting&#34;&gt;troubleshooting section&lt;/a&gt; on the &lt;a href=&#34;https://probe.rs/&#34;&gt;project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How can I help?&lt;/h3&gt; &#xA;&lt;p&gt;Please have a look at the issues or open one if you feel that something is needed.&lt;/p&gt; &#xA;&lt;p&gt;Any contributions are very welcome!&lt;/p&gt; &#xA;&lt;p&gt;Also have a look at &lt;a href=&#34;https://raw.githubusercontent.com/probe-rs/probe-rs/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Our company needs feature X and would pay for its development&lt;/h3&gt; &#xA;&lt;p&gt;Please reach out to &lt;a href=&#34;https://github.com/Yatekii&#34;&gt;@Yatekii&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Building requires Rust and Cargo which can be installed &lt;a href=&#34;https://rustup.rs/&#34;&gt;using rustup&lt;/a&gt;. On Linux these can be installed with your package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Ubuntu&#xA;&amp;gt; sudo apt install -y libudev-dev&#xA;&#xA;# Fedora&#xA;&amp;gt; sudo dnf install -y libudev-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Targets&lt;/h3&gt; &#xA;&lt;p&gt;Target files are generated using &lt;a href=&#34;https://github.com/probe-rs/probe-rs/tree/master/target-gen&#34;&gt;target-gen&lt;/a&gt; from CMSIS packs provided &lt;a href=&#34;https://developer.arm.com/tools-and-software/embedded/cmsis/cmsis-search&#34;&gt;here&lt;/a&gt;. Generated files are then placed in &lt;code&gt;probe-rs/targets&lt;/code&gt; for inclusion in the probe-rs project.&lt;/p&gt; &#xA;&lt;h3&gt;Updating STM32 targets&lt;/h3&gt; &#xA;&lt;p&gt;STM32 memory region data has been proven unreliable on multiple occasions. We now rely on &lt;a href=&#34;https://github.com/embassy-rs/stm32-data/tree/main&#34;&gt;stm32-data&lt;/a&gt; for the correct values. Use target-gen to update the list of devices and their flash algorithms, then use the &lt;a href=&#34;https://github.com/bugadani/stm-probers&#34;&gt;https://github.com/bugadani/stm-probers&lt;/a&gt; tool to regenerate memory maps for all STM32 devices.&lt;/p&gt; &#xA;&lt;h3&gt;Writing new flash algorithms&lt;/h3&gt; &#xA;&lt;p&gt;If there is no CMSIS-Pack with a flash algorithm available, it is necessary to write a target definition and a flash algorithm by oneself. You can use our &lt;a href=&#34;https://github.com/probe-rs/flash-algorithm-template&#34;&gt;template&lt;/a&gt; for writing an algorithm. Please follow the instructions in the &lt;code&gt;README.md&lt;/code&gt; in that repo.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;In early stages of this library, we profited invaluably from the pyOCD code to understand how flashing works. Also it&#39;s always a good reference to cross check how ARM specific things work. So, a big thank you to the team behind pyOCD!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/probe-rs/probe-rs/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/probe-rs/probe-rs/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;) at your option.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>