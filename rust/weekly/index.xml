<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-23T01:48:54Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cordx56/rustowl</title>
    <updated>2025-02-23T01:48:54Z</updated>
    <id>tag:github.com,2025-02-23:/cordx56/rustowl</id>
    <link href="https://github.com/cordx56/rustowl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visualize Ownership and Lifetimes in Rust&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; ðŸ¦‰&lt;br&gt; RustOwl &lt;/h1&gt; &#xA; &lt;p&gt; Visualize ownership and lifetimes in Rust for debugging and optimization &lt;/p&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cordx56/rustowl/main/docs/readme-screenshot.png&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;RustOwl visualizes ownership movement and lifetimes of variables. When you save Rust source code, it is analyzed, and the ownership and lifetimes of variables are visualized when you hover over a variable or function call.&lt;/p&gt; &#xA;&lt;p&gt;RustOwl visualizes those by using underlines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ðŸŸ© green: variable&#39;s actual lifetime&lt;/li&gt; &#xA; &lt;li&gt;ðŸŸ¦ blue: immutable borrowing&lt;/li&gt; &#xA; &lt;li&gt;ðŸŸª purple: mutable borrowing&lt;/li&gt; &#xA; &lt;li&gt;ðŸŸ§ orange: value moved / function call&lt;/li&gt; &#xA; &lt;li&gt;ðŸŸ¥ red: lifetime error - diff of lifetime between actual and expected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, we offer VSCode extension, Neovim plugin and Emacs package. For these editors, move the text cursor over the variable or function call you want to inspect and wait for 2 seconds to visualize the information. We implemented LSP server &lt;code&gt;cargo owlsp&lt;/code&gt; with an extended protocol. So, RustOwl can be used easily from other editor.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Here we describe how to start using RustOwl with VSCode.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisite&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;rustup&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio Code (VSCode) installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We tested this guide on macOS Sequoia 15.2 on arm64 architecture with VSCode 1.96.4 and &lt;code&gt;rustup&lt;/code&gt; 1.27.1.&lt;/p&gt; &#xA;&lt;p&gt;We also tested this guide on Ubuntu 25.04 on arm64 architecture with VSCode 1.96.4 and &lt;code&gt;rustup&lt;/code&gt; 1.27.1. On Ubuntu, you need to run &lt;code&gt;apt install build-essential&lt;/code&gt; before installing.&lt;/p&gt; &#xA;&lt;p&gt;After installation, the extension will automatically run RustOwl when you save any Rust program in cargo workspace. The initial analysis may take some time, but from the second run onward, compile caching is used to reduce the analysis time.&lt;/p&gt; &#xA;&lt;p&gt;We tested on Windows 11 Education 23H2 on amd64 architecture. For Windows, please clone this repository and build RustOwl manually.&lt;/p&gt; &#xA;&lt;h3&gt;Install RustOwl&lt;/h3&gt; &#xA;&lt;p&gt;To install RustOwl command, run the command below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L &#34;https://github.com/cordx56/rustowl/releases/download/v0.1.4/install.sh&#34; | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;VSCode&lt;/h3&gt; &#xA;&lt;p&gt;You can install VSCode extension from &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=cordx56.rustowl-vscode&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, you can download VSCode extension file ( &lt;code&gt;.vsix&lt;/code&gt; ) from &lt;a href=&#34;https://github.com/cordx56/rustowl/releases/download/v0.1.4/rustowl-vscode-0.1.4.vsix&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other editor support&lt;/h2&gt; &#xA;&lt;p&gt;We support Neovim and Emacs. You can also create your own LSP client.&lt;/p&gt; &#xA;&lt;h3&gt;Neovim&lt;/h3&gt; &#xA;&lt;p&gt;Add to plugin manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ &#34;cordx56/rustowl&#34;, dependencies = { &#34;neovim/nvim-lspconfig&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lspconfig.rustowl.setup {&#xA;    trigger = {&#xA;        hover = false,&#xA;    },&#xA;}&#xA;&#xA;keymap(&#xA;    &#34;n&#34;,&#xA;    &#34;&amp;lt;c-o&amp;gt;&#34;,&#xA;    require(&#34;rustowl&#34;).rustowl_cursor,&#xA;    { noremap = true, silent = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Elpaca example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(elpaca&#xA;  (rustowlsp&#xA;    :host github&#xA;    :repo &#34;cordx56/rustowl&#34;&#xA;    :files (:defaults &#34;emacs/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RustRover / IntelliJ IDEs&lt;/h3&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/siketyan/intellij-rustowl&#34;&gt;third-party repository&lt;/a&gt; that supports IntelliJ IDEs.&lt;/p&gt; &#xA;&lt;h2&gt;Build manually&lt;/h2&gt; &#xA;&lt;p&gt;Here, we describe manual install instructions from source code.&lt;/p&gt; &#xA;&lt;h3&gt;RustOwl&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisite&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustup&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt; installed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can install &lt;code&gt;rustup&lt;/code&gt; from &lt;a href=&#34;https://rustup.rs/&#34;&gt;this link&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;You need to set up the &lt;code&gt;PATH&lt;/code&gt; environment variable. To do this, follow the instructions provided by the &lt;code&gt;rustup&lt;/code&gt; installer. For example, in bash, run &lt;code&gt;export PATH=$HOME/.cargo/bin:$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;RustOwl has been tested on macOS Sequoia 15.2 on arm64 architecture with &lt;code&gt;rustup&lt;/code&gt; 1.27.1. We have not tested the installation of dependencies from other package repositories, such as Homebrew. You may need to uninstall any Rust-related packages installed through those repositories first. Other dependencies are locked in the configuration files and will be installed automatically.&lt;/p&gt; &#xA;&lt;p&gt;We have also tested this on Ubuntu 25.04 on arm64 architecture with &lt;code&gt;rustup&lt;/code&gt; 1.27.1. Additional dependencies may be required. We have confirmed that running &lt;code&gt;apt install build-essential&lt;/code&gt; is necessary on a freshly installed Ubuntu for linking.&lt;/p&gt; &#xA;&lt;h4&gt;Build &amp;amp; Run&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd rustowl&#xA;cargo install --path . --locked&#xA;cargo owlsp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;VSCode extension&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisite&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VSCode installed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can install VSCode from &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;this link&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Node.js installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt; installed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;After installing Node.js, You can install &lt;code&gt;yarn&lt;/code&gt; by running &lt;code&gt;npm install -g yarn&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;VSCode extension has been tested on macOS Sequoia 15.2 on arm64 architecture with Visual Studio Code 1.96.4, Node.js v20.16.0, and &lt;code&gt;yarn&lt;/code&gt; 1.22.22. Other dependencies are locked in the configuration files and will be installed automatically.&lt;/p&gt; &#xA;&lt;h4&gt;Build &amp;amp; Run&lt;/h4&gt; &#xA;&lt;p&gt;First, install the dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd vscode&#xA;yarn install --frozen-lockfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open &lt;code&gt;vscode&lt;/code&gt; directory in VSCode.&lt;/p&gt; &#xA;&lt;p&gt;A notification to install the recommended VSCode extension will appear in the bottom right corner of VSCode. Click the install button, wait for the installation to finish, and then restart VSCode.&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;code&gt;vscode&lt;/code&gt; directory again, and press the &lt;code&gt;F5&lt;/code&gt; key in the VSCode window. A new VSCode window with the extension enabled will appear.&lt;/p&gt; &#xA;&lt;p&gt;Open cargo workspace directory in the new VSCode window.&lt;/p&gt; &#xA;&lt;p&gt;When you save Rust files, decoration indicating the movement of ownership and lifetimes will appear in the editor.&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;In this tool, due to the limitations of VSCode&#39;s decoration specifications, characters with descenders, such as g or parentheses, may occasionally not display underlines properly. Additionally, we observed that the &lt;code&gt;println!&lt;/code&gt; macro sometimes produces extra output, though this does not affect usability in any significant way.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unionlabs/union</title>
    <updated>2025-02-23T01:48:54Z</updated>
    <id>tag:github.com,2025-02-23:/unionlabs/union</id>
    <link href="https://github.com/unionlabs/union" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The trust-minimized, zero-knowledge bridging protocol, designed for censorship resistance, extremely high security, and usage in decentralized finance.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./.github/images/union-logo-white.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./.github/images/union-logo-black.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Union&#34; src=&#34;https://raw.githubusercontent.com/unionlabs/union/main/.github/images/union-logo-black.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://garnix.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fgarnix.io%2Fapi%2Fbadges%2Funionlabs%2Funion%3Fbranch%3Dmain&#34; alt=&#34;built with garnix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.union.build&#34; title=&#34;Official Union Docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-main-blue&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.union.build&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1158939416870522930?logo=discord&#34; alt=&#34;Discord badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=union_build&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/union_build.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter handle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Union is the hyper-efficient zero-knowledge infrastructure layer for general message passing, asset transfers, NFTs, and DeFi. Itâ€™s based on &lt;a href=&#34;https://union.build/docs/concepts/consensus-verification/&#34;&gt;Consensus Verification&lt;/a&gt; and has no dependencies on trusted third parties, oracles, multi-signatures, or MPC. It implements &lt;a href=&#34;https://github.com/cosmos/ibc&#34; title=&#34;cosmos/ibc&#34;&gt;IBC&lt;/a&gt; for compatibility with &lt;a href=&#34;https://cosmos.network&#34;&gt;Cosmos&lt;/a&gt; chains and connects to EVM chains like &lt;a href=&#34;https://ethereum.org&#34;&gt;Ethereum&lt;/a&gt;, &lt;a href=&#34;https://github.com/berachain/beacon-kit&#34;&gt;Berachain (beacon-kit)&lt;/a&gt;, &lt;a href=&#34;https://github.com/OffchainLabs/arbitrum&#34;&gt;Arbitrum&lt;/a&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;The upgradability of contracts on other chains, connections, token configurations, and evolution of the protocol will all be controlled by decentralized governance, aligning the priorities of Union with its users, validators, and operators.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Language(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/uniond&#34;&gt;&lt;code&gt;uniond&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Union node implementation, using &lt;a href=&#34;https://github.com/unionlabs/cometbls&#34;&gt;&lt;code&gt;CometBLS&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/galoisd&#34;&gt;&lt;code&gt;galoisd&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The zero-knowledge prover implementation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://github.com/ConsenSys/gnark&#34;&gt;Gnark&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/voyager&#34;&gt;&lt;code&gt;voyager&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Modular hyper-performant cross-ecosystem relayer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/hubble&#34;&gt;&lt;code&gt;hubble&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Multi-ecosystem, GMP-enabled chain indexer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/cosmwasm&#34;&gt;&lt;code&gt;cosmwasm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cosmwasm.com/&#34;&gt;CosmWasm&lt;/a&gt; smart contract stack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/cosmwasm/ibc-union/lightclient&#34;&gt;&lt;code&gt;light-clients&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://a16zcrypto.com/posts/article/an-introduction-to-light-clients/&#34;&gt;Light Clients&lt;/a&gt; for various ecosystems&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/unionvisor/README.md&#34;&gt;&lt;code&gt;unionvisor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Node supervisor intended for production usage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/drip&#34;&gt;&lt;code&gt;drip&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Faucet for &lt;a href=&#34;https://cosmos.network&#34;&gt;Cosmos&lt;/a&gt; chains: &lt;a href=&#34;https://app.union.build/faucet&#34;&gt;app.union.build/faucet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/evm&#34;&gt;&lt;code&gt;evm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34;&gt;EVM&lt;/a&gt; smart contract stack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://soliditylang.org/&#34;&gt;Solidity&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/app&#34;&gt;&lt;code&gt;app&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://app.union.build&#34;&gt;app.union.build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; &lt;a href=&#34;https://svelte.dev&#34;&gt;Svelte&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/site&#34;&gt;&lt;code&gt;site&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://union.build&#34;&gt;union.build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; &lt;a href=&#34;https://astro.build&#34;&gt;Astro&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/typescript-sdk&#34;&gt;&lt;code&gt;TypeScript SDK&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TypeScript SDK for interacting with Union&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://zero-to-nix.com/&#34;&gt;Nix&lt;/a&gt; to &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reproducible_builds&#34;&gt;reproducibly build&lt;/a&gt; any component&lt;/em&gt;, and to enter a dev shell with &lt;em&gt;all dependencies&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(Note that some components can only be built on Linux. If you are using macOS, we recommend using &lt;a href=&#34;https://orbstack.dev/&#34;&gt;OrbStack&lt;/a&gt; to easily set up a &lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; VM within two minutes. Most Union developers use macOS with &lt;a href=&#34;https://orbstack.dev/&#34;&gt;OrbStack&lt;/a&gt;, and there is no need to install Nix inside of the &lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; VM.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can now &lt;em&gt;reproducibly&lt;/em&gt; build any of Union&#39;s components from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix build .#uniond -L&#xA;nix build .#voyager -L&#xA;nix build .#app -L&#xA;&#xA;# to see all packages, run:&#xA;nix flake show&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result of whatever you build will be in &lt;code&gt;result/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can now also enter our dev shell, which has all of the dependencies (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) you need to work on any component: &lt;em&gt;(Don&#39;t worry, this will not affect your system outside of this repo)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to format the entire repo and check your spelling before each PR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run .#pre-commit -L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;#developers&lt;/code&gt; channel on &lt;a href=&#34;https://discord.union.build&#34;&gt;Union&#39;s discord&lt;/a&gt; if you need any help with this.&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;The official docs are hosted &lt;a href=&#34;https://docs.union.build&#34; title=&#34;Official Union Docs&#34;&gt;here&lt;/a&gt;. Each individual component also has accompanying developer documentation for contributors, which you can find in each &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>longbridge/gpui-component</title>
    <updated>2025-02-23T01:48:54Z</updated>
    <id>tag:github.com,2025-02-23:/longbridge/gpui-component</id>
    <link href="https://github.com/longbridge/gpui-component" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UI components for building fantastic desktop application by using GPUI.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GPUI Component&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is still an early stage of development, we may change API frequently. But the features is ok to use, you must keep tracking our changes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;UI components for building fantastic desktop application by using &lt;a href=&#34;https://gpui.rs&#34;&gt;GPUI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Theming&lt;/li&gt; &#xA; &lt;li&gt;TitleBar&lt;/li&gt; &#xA; &lt;li&gt;Dock, Tiles&lt;/li&gt; &#xA; &lt;li&gt;TextInput, TextArea, OtpInput&lt;/li&gt; &#xA; &lt;li&gt;Button, Link&lt;/li&gt; &#xA; &lt;li&gt;Label&lt;/li&gt; &#xA; &lt;li&gt;Icon&lt;/li&gt; &#xA; &lt;li&gt;Checkbox, Radio, Switch&lt;/li&gt; &#xA; &lt;li&gt;Dropdown&lt;/li&gt; &#xA; &lt;li&gt;Tabs&lt;/li&gt; &#xA; &lt;li&gt;Notification&lt;/li&gt; &#xA; &lt;li&gt;Tooltip&lt;/li&gt; &#xA; &lt;li&gt;Popover&lt;/li&gt; &#xA; &lt;li&gt;Resizable&lt;/li&gt; &#xA; &lt;li&gt;Progress &amp;amp; Indicator&lt;/li&gt; &#xA; &lt;li&gt;Slider&lt;/li&gt; &#xA; &lt;li&gt;Skeleton&lt;/li&gt; &#xA; &lt;li&gt;DatePicker, DateRangePicker, Calendar&lt;/li&gt; &#xA; &lt;li&gt;ColorPicker&lt;/li&gt; &#xA; &lt;li&gt;List&lt;/li&gt; &#xA; &lt;li&gt;Table&lt;/li&gt; &#xA; &lt;li&gt;Menu&lt;/li&gt; &#xA; &lt;li&gt;Drawer&lt;/li&gt; &#xA; &lt;li&gt;Modal&lt;/li&gt; &#xA; &lt;li&gt;WebView&lt;/li&gt; &#xA; &lt;li&gt;Accordion&lt;/li&gt; &#xA; &lt;li&gt;Sidebar&lt;/li&gt; &#xA; &lt;li&gt;Breadcrumb&lt;/li&gt; &#xA; &lt;li&gt;Badge&lt;/li&gt; &#xA; &lt;li&gt;TextView (Markdown, Simple HTML) to native rendering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;Here is the first application: &lt;a href=&#34;https://longbridge.com&#34;&gt;Longbridge&lt;/a&gt; that is built by using GPUI Component.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It still under development, not published yet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img width=&#34;2017&#34; alt=&#34;SCR-20250107-kagq&#34; src=&#34;https://github.com/user-attachments/assets/55f9e012-34ce-44d1-908f-768f8d2c8abf&#34;&gt; &#xA;&lt;img width=&#34;2017&#34; alt=&#34;SCR-20250107-kaky&#34; src=&#34;https://github.com/user-attachments/assets/a56995ca-1c54-43bb-9a27-bc9023a169dd&#34;&gt; &#xA;&lt;img width=&#34;2017&#34; alt=&#34;SCR-20250107-kapd&#34; src=&#34;https://github.com/user-attachments/assets/ecdfe8cd-f8d8-4df4-bafe-ab2d8517f8db&#34;&gt; &#xA;&lt;img width=&#34;2017&#34; alt=&#34;SCR-20250107-kfvk&#34; src=&#34;https://github.com/user-attachments/assets/ccc4f25f-16c2-4140-a2ad-d194aadaa544&#34;&gt; &#xA;&lt;p&gt;We build multi-themes support in application, this feature is not including in GPUI Component. It is based on &lt;code&gt;Theme&lt;/code&gt; feature, so it easy to do.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;GPUI and GPUI Component still in development, so we need add dependency by git.&lt;/p&gt; &#xA;&lt;p&gt;And GPUI Component depends on &lt;code&gt;gpui&lt;/code&gt; by special version (It keep updated to upstream) for including WebView support.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;gpui = { git = &#34;https://github.com/huacnlee/zed.git&#34;, branch = &#34;webview&#34; }&#xA;gpui-component = { git = &#34;https://github.com/longbridge/gpui-component.git&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More usage can be found in &lt;a href=&#34;https://github.com/longbridge/gpui-component/tree/main/crates/story&#34;&gt;story&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Icons&lt;/h3&gt; &#xA;&lt;p&gt;GPUI Component have &lt;code&gt;Icon&lt;/code&gt; element, but it does not include SVG files by default.&lt;/p&gt; &#xA;&lt;p&gt;The example is using &lt;a href=&#34;https://lucide.dev&#34;&gt;Lucide&lt;/a&gt; icons, but you can use any icons you like, just named the svg files like &lt;a href=&#34;https://github.com/longbridge/gpui-component/raw/main/crates/ui/src/icon.rs#L86&#34;&gt;IconName&lt;/a&gt; defined the path name. You can add icons that you need in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;If you want to see the demo, here is a some demo applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/user-attachments/files/17396296/gpui-app-windows.zip&#34;&gt;gpui-app-windows.zip&lt;/a&gt; - Updated at 2024/10/16&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found in &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Checkout &lt;a href=&#34;https://raw.githubusercontent.com/longbridge/gpui-component/main/DEVELOPMENT&#34;&gt;DEVELOPMENT&lt;/a&gt; to see more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache-2.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UI design based on &lt;a href=&#34;https://ui.shadcn.com&#34;&gt;shadcn/ui&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Icon from &lt;a href=&#34;https://lucide.dev&#34;&gt;Lucide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>