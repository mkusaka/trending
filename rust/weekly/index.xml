<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-06T01:47:14Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>makepad/makepad</title>
    <updated>2024-10-06T01:47:14Z</updated>
    <id>tag:github.com,2024-10-06:/makepad/makepad</id>
    <link href="https://github.com/makepad/makepad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Makepad is a creative software development platform for Rust that compiles to wasm/webGL, osx/metal, windows/dx11 linux/opengl&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Rik Arends: @rikarends on twitter, &lt;a href=&#34;https://fosstodon.org/@rikarends#&#34;&gt;https://fosstodon.org/@rikarends#&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eddy Bruel: @ejpbruel on twitter&lt;/p&gt; &#xA;&lt;p&gt;Sebastian Michailidis: @SebMichailidis on twitter&lt;/p&gt; &#xA;&lt;p&gt;Our discord channel for Makepad: &lt;a href=&#34;https://discord.gg/adqBRq7Ece&#34;&gt;https://discord.gg/adqBRq7Ece&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most recent talk about makepad: &lt;a href=&#34;https://www.youtube.com/watch?v=rC4FCS-oMpg&#34;&gt;https://www.youtube.com/watch?v=rC4FCS-oMpg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Makepad&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is the repository for Makepad, a new way to build UIs in Rust for both native and the web.&lt;/p&gt; &#xA;&lt;p&gt;Makepad consists of Makepad Framework and Makepad Studio.&lt;/p&gt; &#xA;&lt;p&gt;Makepad Framework is our UI framework. It consists of multiple crates, but the top level crate is &lt;a href=&#34;https://crates.io/crates/makepad-widgets&#34;&gt;makepad-widgets&lt;/a&gt;. For a further explanation of Makepad Framework, please see the README for that crate.&lt;/p&gt; &#xA;&lt;p&gt;Makepad Studio is a prototype of an IDE that we&#39;ve built using Makepad Framework. It&#39;s still under heavy development, but our eventual goal with Makepad Studio is to create an IDE that enables the design of an application to be changed at runtime. The main crate for Makepad Studio is &lt;a href=&#34;https://crates.io/crates/makepad-studio&#34;&gt;makepad-studio&lt;/a&gt;. Please see the README for that crate for more.&lt;/p&gt; &#xA;&lt;p&gt;Demo links:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makepad.nl/makepad/examples/fractal_zoom/src/index.html&#34;&gt;makepad-example-fractal-zoom&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makepad.nl/makepad/examples/ironfish/src/index.html&#34;&gt;makepad-example-ironfish&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makepad.nl/makepad/examples/simple/src/index.html&#34;&gt;makepad-example-simple&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To build the Makepad crates you first need to install Rust. &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;https://www.rust-lang.org/tools/install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our native builds work on the stable Rust toolchain. However, some of the errors generated by Makepad at runtime (particulary those originating in our DSL) do not contain line information unless you use the nightly Rust toolchain. Moreover, our web builds only work on nightly for now. For this reason, we recommend that you build Makepad using the nightly Rust toolchain.&lt;/p&gt; &#xA;&lt;p&gt;For the non standard build targets (apple ios, apple tvos, android, wasm) we have a buildtool called &#39;cargo-makepad&#39; that you need to install.&lt;/p&gt; &#xA;&lt;p&gt;Install it from the repo:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo install --path=./tools/cargo_makepad&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or install it from cargo (might be behind the repo)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo install cargo-makepad&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now this tool can be used to install toolchains per platform needed&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo makepad wasm install-toolchain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo makepad apple ios install-toolchain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo makepad apple tvos install-toolchain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo makepad android --abi=all install-toolchain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running makepad studio&lt;/h2&gt; &#xA;&lt;p&gt;Makepad studio allows you to easily build and view the examples, and it uses cargo-makepad internally so be sure to install cargo-makepad as shown above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo run -p makepad-studio --release&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or install it from cargo (might be behind the repo)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cargo install makepad-studio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you build the wasm applications, you can open it on:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8010&#34;&gt;http://127.0.0.1:8010&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build &amp;amp; Run Commands&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/makepad/makepad&#34;&gt;Makepad&lt;/a&gt; is a cross-platform UI framework written in Rust. It is in active development, but is already usable to build quick prototypes and simple (or even complicated UI) applications.&lt;/p&gt; &#xA;&lt;p&gt;One of the key features of the Makepad is its ability to simply, and quickly, build and run applications on multiple platforms, including MacOS, Windows, Linux, Android, iOS, and WebAssembly.&lt;/p&gt; &#xA;&lt;p&gt;Here are the current/latest instructions on how to build and run Makepad applications on the different platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Assumptions&lt;/h2&gt; &#xA;&lt;p&gt;We will assume the following: Name of application: &lt;strong&gt;&lt;code&gt;makepad-example-simple&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It can be changed to any one of the existing example apps in the &lt;a href=&#34;https://github.com/makepad/makepad//tree/master/examples&#34;&gt;&lt;em&gt;Makepad&lt;/em&gt; examples folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build &amp;amp; Run Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Follow step 1 commands below for initial setup of the Makepad build and run environment. After step 2, you may choose any one or more of the platforms you&#39;re interested in building for.&lt;/p&gt; &#xA;&lt;h2&gt;1. Setup Makepad&lt;/h2&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;projects&lt;/code&gt; with your own directory name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clone the Makepad repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/makepad/makepad.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:makepad/makepad.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change to latest &#39;rik&#39; branch (Optional)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad&#xA;git branch rik&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install makepad subcommand for cargo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad&#xA;cargo install --path ./tools/cargo_makepad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install platform toolchains&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup toolchain install nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2. Go To Examples folder (Optional)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad/examples&#xA;ls -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All examples in this directory have the application name of &lt;code&gt;makepad-example-&lt;/code&gt; prefix plus the name of directory.&lt;/p&gt; &#xA;&lt;h2&gt;3. MacOS / PC&lt;/h2&gt; &#xA;&lt;p&gt;Running on Desktop is the quickest way to try out an example app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad/examples/simple&#xA;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad&#xA;cargo run -p makepad-example-simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And there should be a desktop application window now running (may need to click on the icon on MacOS&#39;s Dock to show it)&lt;/p&gt; &#xA;&lt;h2&gt;4. Android Build&lt;/h2&gt; &#xA;&lt;h3&gt;Install Android toolchain (First time)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad android install-toolchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install app on Android device or Android emulator&lt;/h3&gt; &#xA;&lt;p&gt;Open either the Android emulator or connect to a real Android device use &lt;code&gt;adb&lt;/code&gt; command to make sure there&#39;s a single device connected properly, then install and run as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad&#xA;cargo makepad android run -p makepad-example-simple --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The application will be installed and launch on either the emulator or device.&lt;/p&gt; &#xA;&lt;h2&gt;5. iOS Setup &amp;amp; Install&lt;/h2&gt; &#xA;&lt;h3&gt;Install iOS toolchain (First time)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcode-select --install&#xA;cargo makepad apple ios install-toolchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install app on Apple devivce or iOS simulator&lt;/h3&gt; &#xA;&lt;h3&gt;iOS Setup&lt;/h3&gt; &#xA;&lt;p&gt;For iOS, the process is slightly more complicated. The steps involved are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable your iPhone&#39;s Developer Mode, please see instructions here: &lt;a href=&#34;https://www.delasign.com/blog/how-to-turn-on-developer-mode-on-an-iphone/&#34;&gt;Enable Developer Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setup an Apple Developer account&lt;/li&gt; &#xA; &lt;li&gt;Setup an empty skeleton project in XCode &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;File -&amp;gt; New -&amp;gt; Project to create a new &#34;App&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Set the Product Name as &lt;strong&gt;&lt;code&gt;makepad-example-simple&lt;/code&gt;&lt;/strong&gt; (used in --app later)&lt;/li&gt; &#xA;   &lt;li&gt;Set the Organization Identifier to a value of your choice, for this example we will use &lt;strong&gt;&lt;code&gt;my.test&lt;/code&gt;&lt;/strong&gt; (used in --org later)&lt;/li&gt; &#xA;   &lt;li&gt;Setup the Project Signing &amp;amp; Capabilities to select the proper team account&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;In XCode, Build/Run this project to install and run the app on the simulator and device&lt;/li&gt; &#xA; &lt;li&gt;Once the simulator and device has the &#34;skeleton&#34; app installed and running properly, then it is ready for Makepad to install its application.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Makepad Install&lt;/h3&gt; &#xA;&lt;p&gt;We will run the &lt;code&gt;cargo makepad apple ios&lt;/code&gt; command, similar to Android build above, but there are some 2 to 6 additional parameters that need to be filled in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;--org&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First few parts of the organization identifier. Usually in the form of &lt;em&gt;com.somecompany&lt;/em&gt; or &lt;em&gt;org.orgname&lt;/em&gt;, etc. This is the same value used to setup the initial skeleton app above. For this example:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;my.test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;--app&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The name of the application or the project. This is the same as the Product Name used to setup the initial skeleton app above. In this case:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;makepad-example-simple&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Install app on iOS simulator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad&#xA;cargo makepad apple ios \&#xA;  --org=my.test \&#xA;  --app=makepad-example-simple \&#xA;  run-sim -p makepad-example-simple --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install app on iOS device&lt;/h3&gt; &#xA;&lt;p&gt;For installing on real device, the process is more involved due to possibility of multiple profiles and signing identities and target devices. For this reason, Makepad provides a list command to show all the local provisioning profiles, signing identities and connected devices, which can be used as the value for the subsequent command arguments.&lt;/p&gt; &#xA;&lt;p&gt;For example, first run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/projects/makepad&#xA;cargo makepad apple list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will print out the list of all provisioning profiles, signing identities, and device identifiers on the current system. The user has to decide and choose the ones that he/she needs to use for each type.&lt;/p&gt; &#xA;&lt;p&gt;Once decided, run the folloiwng command and fill in the &lt;strong&gt;unique starting characters&lt;/strong&gt; chosen from the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad apple ios \&#xA;&amp;nbsp;--profile=unique-starting-hex-string-of-provisioning-profiles \&#xA;&amp;nbsp;--cert=UNIQUE_STARTING_HEX_STRING-of-signing-certificates \&#xA; --device-identifier=UNIQUE-STARTING-HEX-STRING-of-devices \&#xA;&amp;nbsp;--org=my.test \&#xA; --app=makepad-example-simple \&#xA; run-device -p makepad-example-simple –release&#xA;&amp;nbsp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The application will be installed and launched on either the emulator or real device. (Make sure the device is connected and unlocked)&lt;/p&gt; &#xA;&lt;h2&gt;6. WASM Build&lt;/h2&gt; &#xA;&lt;p&gt;Running the Makepad application as a WASM build is as simple as a single command. The sript will automatically generate the necessary index.html and other files and also start a local webserver at port 8010. After running the command below, just open your browser to &lt;a href=&#34;http://127.0.0.1:8010/&#34;&gt;http://127.0.0.1:8010/&lt;/a&gt; in order for the app to load and run.&lt;/p&gt; &#xA;&lt;h3&gt;Install WASM toolchain (First time)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad wasm install-toolchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install app as WASM binary for browsers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad wasm run -p makepad-example-simple --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Makepad Commands Quick Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Cargo Tools Installations&lt;/h3&gt; &#xA;&lt;p&gt;These are commands that need to be run at least once initially to setup Makepad development environments. They should also be run once in a while or when there are updates to the cargo_makepad script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup update&#xA;rustup install nightly&#xA;rustup toolchain install nightly&#xA;&#xA;cd ~/projects/makepad&#xA;cargo install --path ./tools/cargo_makepad&#xA;cargo makepad android install-toolchain&#xA;cargo makepad apple ios install-toolchain&#xA;cargo makepad apple tv install-toolchain&#xA;cargo makepad wasm install-toolchain&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Command for installing the app onto an iOS Simulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad android run -p makepad-example-simple --release&#xA;&#xA;cargo makepad android run -p makepad-example-fractal-zoom --release&#xA;&#xA;cargo makepad android run -p makepad-example-ironfish --release&#xA;&#xA;cargo makepad android run -p makepad-example-news-feed --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Simulator&lt;/h3&gt; &#xA;&lt;p&gt;Command for installing the app onto an iOS Simulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad apple ios --org=my.test --app=makepad-example-simple run-sim -p makepad-example-simple --release&#xA;&#xA;cargo makepad apple ios --org=my.test --app=makepad-example-fractal-zoom run-sim -p makepad-example-fractal-zoom --release&#xA;&#xA;cargo makepad apple ios --org=my.test --app=makepad-example-ironfish run-sim -p makepad-example-ironfish --release&#xA;&#xA;cargo makepad apple ios --org=my.test --app=makepad-example-news-feed run-sim -p makepad-example-news-feed --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Device&lt;/h3&gt; &#xA;&lt;p&gt;Command for installing the app onto a physical iOS device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See Step 5 above for more detailed instructions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-simple run-device -p makepad-example-simple --release&#xA;&#xA;cargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-fractal-zoom run-device -p makepad-example-fractal-zoom --release&#xA;&#xA;cargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-ironfish -run-device -p makepad-example-ironfish --release&#xA;&#xA;cargo makepad apple ios --org=my.test --profile=ABC --cert=DEF --device=MyiPhone --app=makepad-example-news-feed run-device -p makepad-example-news-feed --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo Check Builds&lt;/h3&gt; &#xA;&lt;p&gt;Command to check that the compilation passes for all Makepad supported platforms: (Will use 100% CPU and cause hang machine, only try on high-end systems)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo makepad check install-toolchain&#xA;cargo makepad check all&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mediar-ai/screenpipe</title>
    <updated>2024-10-06T01:47:14Z</updated>
    <id>tag:github.com,2024-10-06:/mediar-ai/screenpipe</id>
    <link href="https://github.com/mediar-ai/screenpipe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;24/7 local AI screen &amp; mic recording. Build AI apps that have the full context. Works with Ollama. Alternative to Rewind.ai. Open. Secure. You own your data. Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://screenpi.pe&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/d3b1de26-c3c0-4c84-b9c4-b03213b97a30&#34; alt=&#34;logo&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;pre align=&#34;center&#34;&gt;&#xA;   ___  ___ _ __ ___  ___ _ __  _ __ (_)_ __   ___ &#xA;  / __|/ __| &#39;__/ _ \/ _ \ &#39;_ \| &#39;_ \| | &#39;_ \ / _ \&#xA;  \__ \ (__| | |  __/  __/ | | | |_) | | |_) |  __/&#xA;  |___/\___|_|  \___|\___|_| |_| .__/|_| .__/ \___|&#xA;                               |_|     |_|         &#xA;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://screenpi.pe&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Download%20The-Desktop%20App-blue?style=for-the-badge&#34; alt=&#34;Download the Desktop App&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.youtube.com/@mediar_ai&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;YouTube Channel Subscribers&#34; src=&#34;https://img.shields.io/youtube/channel/subscribers/UCwjkpAsb70_mENKvy7hT5bw&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/dU9EBuw7Uq&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/823813159592001537?color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Join us on Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/screen_pipe&#34;&gt;&lt;img alt=&#34;X account&#34; src=&#34;https://img.shields.io/twitter/url/https/twitter.com/diffuserslib.svg?style=social&amp;amp;label=Follow%20%40screen_pipe&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://console.algora.io/org/mediar-ai/bounties?status=completed&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dcompleted&#34; alt=&#34;Rewarded Bounties&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://console.algora.io/org/mediar-ai/bounties?status=open&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dopen&#34; alt=&#34;Open Bounties&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cal.com/louis030195/screenpipe&#34;&gt; &lt;img alt=&#34;Let&#39;s chat&#34; src=&#34;https://cal.com/book-with-cal-dark.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://screenpi.pe&#34;&gt; &lt;img alt=&#34;demo&#34; src=&#34;https://github.com/user-attachments/assets/39d27adc-e17e-4ca5-89c5-faf45a3ea20f&#34; width=&#34;800&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest News&lt;/em&gt; 🔥&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2024/09] &lt;a href=&#34;https://x.com/louis030195/status/1840859691754344483&#34;&gt;screenpipe is number 1 github trending repo &amp;amp; on hackernews!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024/09] 150 users run screenpipe 24/7!&lt;/li&gt; &#xA; &lt;li&gt;[2024/09] Released a v0 of our &lt;a href=&#34;https://docs.screenpi.pe/&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024/08] Anyone can now &lt;a href=&#34;https://youtu.be/iCqHgZgQHyA?si=DjKJir7HfZoQKItK&#34;&gt;create, share, install pipes&lt;/a&gt; (plugins) from the app interface based on a github repo/dir&lt;/li&gt; &#xA; &lt;li&gt;[2024/08] We&#39;re running bounties! Contribute to screenpipe &amp;amp; make money, &lt;a href=&#34;https://github.com/mediar-ai/screenpipe/issues&#34;&gt;check issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2024/08] Audio input &amp;amp; output now works perfect on Windows, Linux, MacOS (&amp;lt;15.0). We also support multi monitor capture and defaulting STT to Whisper Distil large v3&lt;/li&gt; &#xA; &lt;li&gt;[2024/08] We released video embedding. AI gives you links to your video recording in the chat!&lt;/li&gt; &#xA; &lt;li&gt;[2024/08] We released the pipe store! Create, share, use plugins that get you the most out of your data in less than 30s, even if you are not technical.&lt;/li&gt; &#xA; &lt;li&gt;[2024/08] We released Apple &amp;amp; Windows Native OCR.&lt;/li&gt; &#xA; &lt;li&gt;[2024/08] &lt;strong&gt;The Linux desktop app is here!&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2024/07] &lt;strong&gt;The Windows desktop app is here! &lt;a href=&#34;https://screenpi.pe&#34;&gt;Get it now!&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2024/07] 🎁 Screenpipe won Friends (the AI necklace) hackathon at AGI House (integrations soon)&lt;/li&gt; &#xA; &lt;li&gt;[2024/07] &lt;strong&gt;We just launched the desktop app! &lt;a href=&#34;https://screenpi.pe&#34;&gt;Download now!&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;24/7 Screen &amp;amp; Audio Capture&lt;/h1&gt; &#xA;&lt;p&gt;Library to build personalized AI powered by what you&#39;ve seen, said, or heard. Works with Ollama. Alternative to Rewind.ai. Open. Secure. You own your data. Rust.&lt;br&gt; We are shipping daily, make suggestions, post bugs, &lt;a href=&#34;mailto:louis@screenpi.pe?subject=Screenpipe%20Feedback&amp;amp;body=I&#39;d%20like%20to%20use%20Screenpipe%20for%20...%0D%0A%0D%0AI%20cannot%20because%20of%20...%0D%0A%0D%0AWe%20can%20also%20have%20a%20call,%20book%20at%20https://cal.com/louis030195/screenpipe&#34;&gt;give feedback&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mediar-ai/screenpipe/main/content/diagram2.png&#34; alt=&#34;diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Why?&lt;/h1&gt; &#xA;&lt;p&gt;Building a reliable stream of audio and screenshot data, where a user simply clicks a button and the script runs in the background 24/7, collecting and extracting data from screen and audio input/output, can be frustrating.&lt;/p&gt; &#xA;&lt;p&gt;There are numerous use cases that can be built on top of this layer. To simplify life for other developers, we decided to solve this non-trivial problem. It&#39;s still in its early stages, but it works end-to-end. We&#39;re working on this full-time and would love to hear your feedback and suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to install screenpipe:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as a CLI for technical users&lt;/li&gt; &#xA; &lt;li&gt;as a &lt;a href=&#34;https://screenpi.pe/onboarding&#34;&gt;paid desktop app&lt;/a&gt; with 1 year updates, priority support, and priority features&lt;/li&gt; &#xA; &lt;li&gt;as a free forever desktop app (but you need to build it yourself). We&#39;re 100% OSS.&lt;/li&gt; &#xA; &lt;li&gt;get the desktop app 1 year license by sending a PR (&lt;a href=&#34;https://github.com/mediar-ai/screenpipe/issues/120#issuecomment-2275043418&#34;&gt;example&lt;/a&gt;) or &lt;a href=&#34;https://screenpi.pe/onboarding/free-community&#34;&gt;sharing about screenpipe online&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;as a Rust or WASM library - check this &lt;a href=&#34;https://github.com/mediar-ai/screenpipe/raw/main/screenpipe-vision/examples/websocket.rs&#34;&gt;websocket&lt;/a&gt; to stream frames + OCR to your app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cal.com/louis030195/screenpipe-for-businesses&#34;&gt;as a business&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.screenpi.pe/docs/getting-started&#34;&gt;&lt;strong&gt;👉 install screenpipe now&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;p&gt;screenpipe has a plugin system called &#34;pipe&#34; which lets you run code in a sandboxed environment within the Rust code, &lt;a href=&#34;https://docs.screenpi.pe/docs/plugins&#34;&gt;get started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.screenpi.pe/docs/examples&#34;&gt;check examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;star history&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/5d5c9672-d2d3-4e4c-8734-a7e0c2fee246&#34; alt=&#34;GitHub Star History (10)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you&#39;d like to contribute, please read &lt;a href=&#34;https://raw.githubusercontent.com/mediar-ai/screenpipe/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://console.algora.io/org/mediar-ai/bounties?status=completed&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dcompleted&#34; alt=&#34;Rewarded Bounties&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://console.algora.io/org/mediar-ai/bounties?status=open&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dopen&#34; alt=&#34;Open Bounties&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>mufeedvh/code2prompt</title>
    <updated>2024-10-06T01:47:14Z</updated>
    <id>tag:github.com,2024-10-06:/mufeedvh/code2prompt</id>
    <link href="https://github.com/mufeedvh/code2prompt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI tool to convert your codebase into a single LLM prompt with source tree, prompt templating, and token counting.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;code2prompt&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/code2prompt&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/code2prompt.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mufeedvh/code2prompt/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mufeedvh/code2prompt.svg#cache1&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/mufeedvh/code2prompt&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/.assets/code2prompt-screenshot.png&#34; alt=&#34;code2prompt&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;code2prompt&lt;/code&gt; is a command-line tool (CLI) that converts your codebase into a single LLM prompt with a source tree, prompt templating, and token counting.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#user-defined-variables&#34;&gt;User Defined Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#tokenizers&#34;&gt;Tokenizers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#support-the-author&#34;&gt;Support The Author&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;You can run this tool on the entire directory and it would generate a well-formatted Markdown prompt detailing the source tree structure, and all the code. You can then upload this document to either GPT or Claude models with higher context windows and ask it to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickly generate LLM prompts from codebases of any size.&lt;/li&gt; &#xA; &lt;li&gt;Customize prompt generation with Handlebars templates. (See the &lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/src/default_template.hbs&#34;&gt;default template&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Respects &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Filter and exclude files using glob patterns.&lt;/li&gt; &#xA; &lt;li&gt;Display the token count of the generated prompt. (See &lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#tokenizers&#34;&gt;Tokenizers&lt;/a&gt; for more details)&lt;/li&gt; &#xA; &lt;li&gt;Optionally include Git diff output (staged files) in the generated prompt.&lt;/li&gt; &#xA; &lt;li&gt;Automatically copy the generated prompt to the clipboard.&lt;/li&gt; &#xA; &lt;li&gt;Save the generated prompt to an output file.&lt;/li&gt; &#xA; &lt;li&gt;Exclude files and folders by name or path.&lt;/li&gt; &#xA; &lt;li&gt;Add line numbers to source code blocks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can customize the prompt template to achieve any of the desired use cases. It essentially traverses a codebase and creates a prompt with all source files combined. In short, it automates copy-pasting multiple source files into your prompt and formatting them along with letting you know how many tokens your code consumes.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Binary releases&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest binary for your OS from &lt;a href=&#34;https://github.com/mufeedvh/code2prompt/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Source build&lt;/h3&gt; &#xA;&lt;p&gt;Requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.org/downloads&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt; and Cargo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/mufeedvh/code2prompt.git&#xA;cd code2prompt/&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;cargo&lt;/h2&gt; &#xA;&lt;p&gt;installs from the &lt;a href=&#34;https://crates.io&#34;&gt;&lt;code&gt;crates.io&lt;/code&gt;&lt;/a&gt; registry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install code2prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For unpublished builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --git https://github.com/mufeedvh/code2prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AUR&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;code2prompt&lt;/code&gt; is available in the &lt;a href=&#34;https://aur.archlinux.org/packages?O=0&amp;amp;K=code2prompt&#34;&gt;&lt;code&gt;AUR&lt;/code&gt;&lt;/a&gt;. Install it via any AUR helpers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru/yay -S code2prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;If you are on nix, You can use &lt;code&gt;nix-env&lt;/code&gt; or &lt;code&gt;profile&lt;/code&gt; to install.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# without flakes:&#xA;nix-env -iA nixpkgs.code2prompt&#xA;# with flakes:&#xA;nix profile install nixpkgs#code2prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Generate a prompt from a codebase directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a custom Handlebars template file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase -t path/to/template.hbs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filter files using glob patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --include=&#34;*.rs,*.toml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude files using glob patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --exclude=&#34;*.txt,*.md&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude files/folders from the source tree based on exclude patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --exclude=&#34;*.npy,*.wav&#34; --exclude-from-tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Display the token count of the generated prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --tokens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify a tokenizer for token count:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --tokens --encoding=p50k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported tokenizers: &lt;code&gt;cl100k&lt;/code&gt;, &lt;code&gt;p50k&lt;/code&gt;, &lt;code&gt;p50k_edit&lt;/code&gt;, &lt;code&gt;r50k_bas&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/#tokenizers&#34;&gt;Tokenizers&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Save the generated prompt to an output file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --output=output.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Print output as JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JSON output will have the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;prompt&#34;: &#34;&amp;lt;Generated Prompt&amp;gt;&#34;, &#xA;  &#34;directory_name&#34;: &#34;codebase&#34;,&#xA;  &#34;token_count&#34;: 1234,&#xA;  &#34;model_info&#34;: &#34;ChatGPT models, text-embedding-ada-002&#34;,&#xA;  &#34;files&#34;: []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate a Git commit message (for staged files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --diff -t templates/write-git-commit.hbs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate a Pull Request with branch comparing (for staged files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --git-diff-branch &#39;main, development&#39; --git-log-branch &#39;main, development&#39; -t templates/write-github-pull-request.hbs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add line numbers to source code blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --line-number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disable wrapping code inside markdown code blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase --no-codeblock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rewrite the code to another language.&lt;/li&gt; &#xA; &lt;li&gt;Find bugs/security vulnerabilities.&lt;/li&gt; &#xA; &lt;li&gt;Document the code.&lt;/li&gt; &#xA; &lt;li&gt;Implement new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I initially wrote this for personal use to utilize Claude 3.0&#39;s 200K context window and it has proven to be pretty useful so I decided to open-source it!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Templates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;code2prompt&lt;/code&gt; comes with a set of built-in templates for common use cases. You can find them in the &lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates&#34;&gt;&lt;code&gt;templates&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/document-the-code.hbs&#34;&gt;&lt;code&gt;document-the-code.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to generate prompts for documenting the code. It will add documentation comments to all public functions, methods, classes and modules in the codebase.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/find-security-vulnerabilities.hbs&#34;&gt;&lt;code&gt;find-security-vulnerabilities.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to generate prompts for finding potential security vulnerabilities in the codebase. It will look for common security issues and provide recommendations on how to fix or mitigate them.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/clean-up-code.hbs&#34;&gt;&lt;code&gt;clean-up-code.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to generate prompts for cleaning up and improving the code quality. It will look for opportunities to improve readability, adherence to best practices, efficiency, error handling, and more.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/fix-bugs.hbs&#34;&gt;&lt;code&gt;fix-bugs.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to generate prompts for fixing bugs in the codebase. It will help diagnose issues, provide fix suggestions, and update the code with proposed fixes.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/write-github-pull-request.hbs&#34;&gt;&lt;code&gt;write-github-pull-request.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to create GitHub pull request description in markdown by comparing the git diff and git log of two branches.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/write-github-readme.hbs&#34;&gt;&lt;code&gt;write-github-readme.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to generate a high-quality README file for the project, suitable for hosting on GitHub. It will analyze the codebase to understand its purpose and functionality, and generate the README content in Markdown format.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/write-git-commit.hbs&#34;&gt;&lt;code&gt;write-git-commit.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to generate git commits from the staged files in your git directory. It will analyze the codebase to understand its purpose and functionality, and generate the git commit message content in Markdown format.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mufeedvh/code2prompt/main/templates/improve-performance.hbs&#34;&gt;&lt;code&gt;improve-performance.hbs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this template to generate prompts for improving the performance of the codebase. It will look for optimization opportunities, provide specific suggestions, and update the code with the changes.&lt;/p&gt; &#xA;&lt;p&gt;You can use these templates by passing the &lt;code&gt;-t&lt;/code&gt; flag followed by the path to the template file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;code2prompt path/to/codebase -t templates/document-the-code.hbs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User Defined Variables&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;code2prompt&lt;/code&gt; supports the use of user defined variables in the Handlebars templates. Any variables in the template that are not part of the default context (&lt;code&gt;absolute_code_path&lt;/code&gt;, &lt;code&gt;source_tree&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt;) will be treated as user defined variables.&lt;/p&gt; &#xA;&lt;p&gt;During prompt generation, &lt;code&gt;code2prompt&lt;/code&gt; will prompt the user to enter values for these user defined variables. This allows for further customization of the generated prompts based on user input.&lt;/p&gt; &#xA;&lt;p&gt;For example, if your template includes &lt;code&gt;{{challenge_name}}&lt;/code&gt; and &lt;code&gt;{{challenge_description}}&lt;/code&gt;, you will be prompted to enter values for these variables when running &lt;code&gt;code2prompt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature enables creating reusable templates that can be adapted to different scenarios based on user provided information.&lt;/p&gt; &#xA;&lt;h2&gt;Tokenizers&lt;/h2&gt; &#xA;&lt;p&gt;Tokenization is implemented using &lt;a href=&#34;https://github.com/zurawiki/tiktoken-rs&#34;&gt;&lt;code&gt;tiktoken-rs&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;tiktoken&lt;/code&gt; supports these encodings used by OpenAI models:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Encoding name&lt;/th&gt; &#xA;   &lt;th&gt;OpenAI models&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cl100k_base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ChatGPT models, &lt;code&gt;text-embedding-ada-002&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;p50k_base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Code models, &lt;code&gt;text-davinci-002&lt;/code&gt;, &lt;code&gt;text-davinci-003&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;p50k_edit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use for edit models like &lt;code&gt;text-davinci-edit-001&lt;/code&gt;, &lt;code&gt;code-davinci-edit-001&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;r50k_base&lt;/code&gt; (or &lt;code&gt;gpt2&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;GPT-3 models like &lt;code&gt;davinci&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more context on the different tokenizers, see the &lt;a href=&#34;https://github.com/openai/openai-cookbook/raw/66b988407d8d13cad5060a881dc8c892141f2d5c/examples/How_to_count_tokens_with_tiktoken.ipynb&#34;&gt;OpenAI Cookbook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How is it useful?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;code2prompt&lt;/code&gt; makes it easy to generate prompts for LLMs from your codebase. It traverses the directory, builds a tree structure, and collects information about each file. You can customize the prompt generation using Handlebars templates. The generated prompt is automatically copied to your clipboard and can also be saved to an output file. &lt;code&gt;code2prompt&lt;/code&gt; helps streamline the process of creating LLM prompts for code analysis, generation, and other tasks.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Ways to contribute:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suggest a feature&lt;/li&gt; &#xA; &lt;li&gt;Report a bug&lt;/li&gt; &#xA; &lt;li&gt;Fix something and open a pull request&lt;/li&gt; &#xA; &lt;li&gt;Help me document the code&lt;/li&gt; &#xA; &lt;li&gt;Spread the word&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT License, see &lt;a href=&#34;https://github.com/mufeedvh/code2prompt/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Liked the project?&lt;/h2&gt; &#xA;&lt;p&gt;If you liked the project and found it useful, please give it a &lt;span&gt;⭐&lt;/span&gt; and consider supporting the authors!&lt;/p&gt;</summary>
  </entry>
</feed>