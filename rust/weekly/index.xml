<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-23T02:02:15Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>delta-io/delta-rs</title>
    <updated>2023-04-23T02:02:15Z</updated>
    <id>tag:github.com,2023-04-23:/delta-io/delta-rs</id>
    <link href="https://github.com/delta-io/delta-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native Rust library for Delta Lake, with bindings into Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;delta-rs&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/delta-io/delta-rs/actions&#34;&gt;&lt;img src=&#34;https://github.com/delta-io/delta-rs/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://crates.io/crates/deltalake&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/deltalake.svg?style=flat-square&#34; alt=&#34;Crate&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://docs.rs/deltalake&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-rust-blue.svg?style=flat-square&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://pypi.org/project/deltalake&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/deltalake.svg?style=flat-square&#34; alt=&#34;Python binding&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://pypi.org/project/deltalake&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/deltalake?style=flat-square&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://delta-io.github.io/delta-rs/python&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-python-blue.svg?style=flat-square&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/logo.png&#34; alt=&#34;Delta-rs logo&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;A native interface to &lt;a href=&#34;https://delta.io&#34;&gt;Delta Lake&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA;   &lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&#xA;    Table of Contents&#xA;   &lt;/div&gt; &#xA;   &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/#_about&#34;&gt;About&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/#_features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/#_get_involved&#34;&gt;Get Involved&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/#_development_meeting&#34;&gt;Development Meeting&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/#_development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/#_rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta-rs/main/#_python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_about&#34;&gt;About&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This library provides low level access to Delta tables in Rust, which can be used with data processing frameworks like &lt;a href=&#34;https://github.com/apache/arrow-datafusion&#34;&gt;datafusion&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/arrow-datafusion/tree/master/ballista&#34;&gt;ballista&lt;/a&gt;, &lt;a href=&#34;https://github.com/pola-rs/polars&#34;&gt;polars&lt;/a&gt;, &lt;a href=&#34;https://github.com/rajasekarv/vega&#34;&gt;vega&lt;/a&gt;, etc. It also provides bindings to other higher level language &lt;a href=&#34;https://delta-io.github.io/delta-rs/python/&#34;&gt;Python&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_features&#34;&gt;Features&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;strong&gt;Supported backends:&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Local file system&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;AWS S3&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Azure Blob Storage / Azure Datalake Storage Gen2&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Google Cloud Storage&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;HDFS&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt; &#xA;    &lt;caption class=&#34;title&#34;&gt;&#xA;     Table 1. Support features&#xA;    &lt;/caption&gt; &#xA;    &lt;colgroup&gt; &#xA;     &lt;col style=&#34;width: 33.3333%;&#34;&gt; &#xA;     &lt;col style=&#34;width: 33.3333%;&#34;&gt; &#xA;     &lt;col style=&#34;width: 33.3334%;&#34;&gt; &#xA;    &lt;/colgroup&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Operation/Feature&lt;/th&gt; &#xA;      &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Rust&lt;/th&gt; &#xA;      &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Python&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Read table&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Stream table update&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Filter files with partitions&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Vacuum (delete stale files)&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;History&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Write transactions&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Checkpoint creation&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;High-level file writer&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Optimize&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/p&gt;&lt;/td&gt; &#xA;      &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://github.com/delta-io/delta-rs/issues/622&#34;&gt;#622&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_get_involved&#34;&gt;Get Involved&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Join &lt;a href=&#34;https://join.slack.com/t/delta-users/shared_invite/zt-1t1ahwrpx-hIEXnP20PCDzcBSf5V3heA&#34;&gt;#delta-rs in the Delta Lake Slack workspace&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_development_meeting&#34;&gt;Development Meeting&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We have a standing development sync meeting for those that are interested. The meeting is held every two weeks at &lt;strong&gt;9am PST&lt;/strong&gt; on Tuesday mornings. The direct meeting URL is shared in the Slack channel above &lt;span&gt;☝&lt;/span&gt; before the meeting.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;These meetings are also &lt;a href=&#34;https://www.youtube.com/channel/UCSKhDO79MNcX4pIIRFD0UVg&#34;&gt;streamed live via YouTube&lt;/a&gt; if you just want to listen in.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_development&#34;&gt;Development&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;delta-rs requires the Rust compiler, which can be installed with the &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; command.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Running tests can be done with &lt;code&gt;cargo test&lt;/code&gt; in the root directory, or one of the directories below:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_rust&#34;&gt;Rust&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;code&gt;rust/&lt;/code&gt; directory contains core Rust APIs for accessing Delta Lake from Rust, or for higher-level language bindings.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_python&#34;&gt;Python&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;code&gt;python/&lt;/code&gt; directory contains the &lt;code&gt;deltalake&lt;/code&gt; Python package built on top of delta-rs&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>copy/v86</title>
    <updated>2023-04-23T02:02:15Z</updated>
    <id>tag:github.com,2023-04-23:/copy/v86</id>
    <link href="https://github.com/copy/v86" rel="alternate"></link>
    <summary type="html">&lt;p&gt;x86 virtualization in your browser, recompiling x86 to wasm on the fly&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/copy/v86&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/copy/v86&#34;&gt;&lt;/a&gt; or #v86 on &lt;a href=&#34;https://libera.chat/&#34;&gt;irc.libera.chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;v86 emulates an x86-compatible CPU and hardware. Machine code is translated to WebAssembly modules at runtime in order to achieve decent performance. Here&#39;s a list of emulated hardware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An x86-compatible CPU. The instruction set is around Pentium 4 level, including full SSE2 support. Some features are missing, in particular: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Task gates, far calls in protected mode&lt;/li&gt; &#xA;   &lt;li&gt;Some 16 bit protected mode features&lt;/li&gt; &#xA;   &lt;li&gt;Single stepping (trap flag, debug registers)&lt;/li&gt; &#xA;   &lt;li&gt;Some exceptions, especially floating point and SSE&lt;/li&gt; &#xA;   &lt;li&gt;Multicore&lt;/li&gt; &#xA;   &lt;li&gt;64-bit extensions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A floating point unit (FPU). Calculations are done using the Berkeley SoftFloat library and therefore should be precise (but slow). Trigonometric and log functions are emulated using 64-bit floats and may be less precise. Not all FPU exceptions are supported.&lt;/li&gt; &#xA; &lt;li&gt;A floppy disk controller (8272A).&lt;/li&gt; &#xA; &lt;li&gt;An 8042 Keyboard Controller, PS2. With mouse support.&lt;/li&gt; &#xA; &lt;li&gt;An 8254 Programmable Interval Timer (PIT).&lt;/li&gt; &#xA; &lt;li&gt;An 8259 Programmable Interrupt Controller (PIC).&lt;/li&gt; &#xA; &lt;li&gt;Partial APIC support.&lt;/li&gt; &#xA; &lt;li&gt;A CMOS Real Time Clock (RTC).&lt;/li&gt; &#xA; &lt;li&gt;A generic VGA card with SVGA support and Bochs VBE Extensions.&lt;/li&gt; &#xA; &lt;li&gt;A PCI bus. This one is partly incomplete and not used by every device.&lt;/li&gt; &#xA; &lt;li&gt;An IDE disk controller.&lt;/li&gt; &#xA; &lt;li&gt;An NE2000 (8390) PCI network card.&lt;/li&gt; &#xA; &lt;li&gt;A virtio filesystem.&lt;/li&gt; &#xA; &lt;li&gt;A SoundBlaster 16 sound card.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://copy.sh/v86/?profile=archlinux&#34;&gt;Arch Linux&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=dsl&#34;&gt;Damn Small Linux&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=buildroot&#34;&gt;Buildroot Linux&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=reactos&#34;&gt;ReactOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows2000&#34;&gt;Windows 2000&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows98&#34;&gt;Windows 98&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows95&#34;&gt;Windows 95&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows1&#34;&gt;Windows 1.01&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=msdos&#34;&gt;MS-DOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=freedos&#34;&gt;FreeDOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=freebsd&#34;&gt;FreeBSD&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=openbsd&#34;&gt;OpenBSD&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=9front&#34;&gt;9front&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=haiku&#34;&gt;Haiku&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=oberon&#34;&gt;Oberon&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=kolibrios&#34;&gt;KolibriOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=qnx&#34;&gt;QNX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/how-it-works.md&#34;&gt;How it works&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/networking.md&#34;&gt;Networking&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/archlinux.md&#34;&gt;Archlinux guest setup&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/windows-xp.md&#34;&gt;Windows 2000/XP guest setup&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/filesystem.md&#34;&gt;9p filesystem&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/linux-9p-image.md&#34;&gt;Linux rootfs on 9p&lt;/a&gt; — &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/profiling.md&#34;&gt;Profiling&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an overview of the operating systems supported in v86:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux works pretty well. 64-bit kernels are not supported. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Damn Small Linux (2.4 Kernel) works.&lt;/li&gt; &#xA;   &lt;li&gt;All tested versions of TinyCore work.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://buildroot.uclibc.org&#34;&gt;Buildroot&lt;/a&gt; can be used to build a minimal image. &lt;a href=&#34;https://github.com/humphd/browser-vm&#34;&gt;humphd/browser-vm&lt;/a&gt; and &lt;a href=&#34;https://github.com/Darin755/browser-buildroot&#34;&gt;darin755/browser-buildroot&lt;/a&gt; have some useful scripts for building one.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/skiffos/SkiffOS/tree/master/configs/browser/v86&#34;&gt;SkiffOS&lt;/a&gt; (based on Buildroot) can cross-compile a custom image.&lt;/li&gt; &#xA;   &lt;li&gt;Archlinux works. See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/archlinux.md&#34;&gt;archlinux.md&lt;/a&gt; for building an image.&lt;/li&gt; &#xA;   &lt;li&gt;Debian works. An image can be built from a Dockerfile, see &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tools/docker/debian/&#34;&gt;tools/docker/debian/&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu up to 16.04 works.&lt;/li&gt; &#xA;   &lt;li&gt;Alpine Linux works.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ReactOS works.&lt;/li&gt; &#xA; &lt;li&gt;FreeDOS, Windows 1.01 and MS-DOS run very well.&lt;/li&gt; &#xA; &lt;li&gt;KolibriOS works.&lt;/li&gt; &#xA; &lt;li&gt;Haiku works.&lt;/li&gt; &#xA; &lt;li&gt;Android x86 1.6-r2 works if one selects VESA mode at the boot prompt. Newer versions may work if compiled without SSE3. See &lt;a href=&#34;https://github.com/copy/v86/issues/224&#34;&gt;#224&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Windows 1, 3.0, 95, 98, ME and 2000 work. Other versions currently don&#39;t (see &lt;a href=&#34;https://github.com/copy/v86/issues/86&#34;&gt;#86&lt;/a&gt;, &lt;a href=&#34;https://github.com/copy/v86/issues/208&#34;&gt;#208&lt;/a&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In Windows 2000 and higher the PC type has to be changed from ACPI PC to Standard PC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Many hobby operating systems work.&lt;/li&gt; &#xA; &lt;li&gt;9front works.&lt;/li&gt; &#xA; &lt;li&gt;Plan 9 doesn&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;QNX works.&lt;/li&gt; &#xA; &lt;li&gt;OS/2 doesn&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD works.&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD works with a specific boot configuration. At the &lt;code&gt;boot&amp;gt;&lt;/code&gt; prompt type &lt;code&gt;boot -c&lt;/code&gt;, then at the &lt;code&gt;UKC&amp;gt;&lt;/code&gt; prompt &lt;code&gt;disable mpbios&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;NetBSD works only with a custom kernel, see &lt;a href=&#34;https://github.com/copy/v86/issues/350&#34;&gt;#350&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;SerenityOS works.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can get some infos on the disk images here: &lt;a href=&#34;https://github.com/copy/images&#34;&gt;https://github.com/copy/images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build, run and embed?&lt;/h2&gt; &#xA;&lt;p&gt;You need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;Rust with the wasm32-unknown-unknown target&lt;/li&gt; &#xA; &lt;li&gt;A version of clang compatible with Rust&lt;/li&gt; &#xA; &lt;li&gt;java (for Closure Compiler, not necessary when using &lt;code&gt;debug.html&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;nodejs (a recent version is required, v16.11.1 is known to be working)&lt;/li&gt; &#xA; &lt;li&gt;To run tests: nasm, gdb, qemu-system, gcc, libc-i386 and rustfmt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tools/docker/test-image/Dockerfile&#34;&gt;tools/docker/test-image/Dockerfile&lt;/a&gt; for a full setup on Debian or &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; to build the debug build (at &lt;code&gt;debug.html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make all&lt;/code&gt; to build the optimized build (at &lt;code&gt;index.html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;ROM and disk images are loaded via XHR, so if you want to try out &lt;code&gt;index.html&lt;/code&gt; locally, make sure to serve it from a local webserver. You can use &lt;code&gt;make run&lt;/code&gt; to serve the files using Python&#39;s http module.&lt;/li&gt; &#xA; &lt;li&gt;If you only want to embed v86 in a webpage you can use libv86.js. For usage, check out the &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/&#34;&gt;examples&lt;/a&gt;. You can download it from the release section.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Alternatively, to build using docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have docker installed, you can run the whole system inside a container.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;tools/docker/exec&lt;/code&gt; to find Dockerfile required for this.&lt;/li&gt; &#xA; &lt;li&gt;You can run &lt;code&gt;docker build -f tools/docker/exec/Dockerfile -t v86:alpine-3.14 .&lt;/code&gt; from the root directory to generate docker image.&lt;/li&gt; &#xA; &lt;li&gt;Then you can simply run &lt;code&gt;docker run -it -p 8000:8000 v86:alpine-3.14&lt;/code&gt; to start the server.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;code&gt;localhost:8000&lt;/code&gt; for hosted server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The disk images for testing are not included in this repository. You can download them directly from the website using:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;wget -P images/ https://k.copy.sh/{linux.iso,linux4.iso,buildroot-bzimage.bin,openbsd-floppy.img,kolibri.img,windows101.img,os8.img,freedos722.img}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run all tests: &lt;code&gt;make jshint rustfmt kvm-unit-test nasmtests nasmtests-force-jit expect-tests jitpagingtests qemutests rust-test tests&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tests/Readme.md&#34;&gt;tests/Readme.md&lt;/a&gt; for more infos.&lt;/p&gt; &#xA;&lt;h2&gt;API examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/basic.html&#34;&gt;Basic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/serial.html&#34;&gt;Programatically using the serial terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/lua.html&#34;&gt;A Lua interpreter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/two_instances.html&#34;&gt;Two instances in one window&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/save_restore.html&#34;&gt;Saving and restoring emulator state&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using v86 for your own purposes is as easy as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var emulator = new V86Starter({&#xA;    screen_container: document.getElementById(&#34;screen_container&#34;),&#xA;    bios: {&#xA;        url: &#34;../../bios/seabios.bin&#34;,&#xA;    },&#xA;    vga_bios: {&#xA;        url: &#34;../../bios/vgabios.bin&#34;,&#xA;    },&#xA;    cdrom: {&#xA;        url: &#34;../../images/linux.iso&#34;,&#xA;    },&#xA;    autostart: true,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/src/browser/starter.js&#34;&gt;starter.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;v86 is distributed under the terms of the Simplified BSD License, see &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;. The following third-party dependencies are included in the repository under their own licenses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/lib/softfloat/softfloat.c&#34;&gt;&lt;code&gt;lib/softfloat/softfloat.c&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/lib/zstd/zstddeclib.c&#34;&gt;&lt;code&gt;lib/zstd/zstddeclib.c&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tests/kvm-unit-tests&#34;&gt;&lt;code&gt;tests/kvm-unit-tests/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tests/qemutests&#34;&gt;&lt;code&gt;tests/qemutests/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU test cases via &lt;a href=&#34;https://wiki.qemu.org/Main_Page&#34;&gt;QEMU&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More tests via &lt;a href=&#34;https://www.linux-kvm.org/page/KVM-unit-tests&#34;&gt;kvm-unit-tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/zstd&#34;&gt;zstd&lt;/a&gt; support is included for better compression of state images&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jhauser.us/arithmetic/SoftFloat.html&#34;&gt;Berkeley SoftFloat&lt;/a&gt; is included to precisely emulate 80-bit floating point numbers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s-macke/jor1k&#34;&gt;The jor1k project&lt;/a&gt; for 9p, filesystem and uart drivers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://winworldpc.com/&#34;&gt;WinWorld&lt;/a&gt; sources of some old operating systems&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More questions?&lt;/h2&gt; &#xA;&lt;p&gt;Shoot me an email to &lt;code&gt;copy@copy.sh&lt;/code&gt;. Please report bugs on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Fabian Hemmer (&lt;a href=&#34;https://copy.sh/&#34;&gt;https://copy.sh/&lt;/a&gt;, &lt;code&gt;copy@copy.sh&lt;/code&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rust-bakery/nom</title>
    <updated>2023-04-23T02:02:15Z</updated>
    <id>tag:github.com,2023-04-23:/rust-bakery/nom</id>
    <link href="https://github.com/rust-bakery/nom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust parser combinator framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nom, eating data byte by byte&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/Geal/nom?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/Geal/nom&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-bakery/nom/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/rust-bakery/nom/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/rust-bakery/nom?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/rust-bakery/nom/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/nom&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/nom.svg?sanitize=true&#34; alt=&#34;crates.io Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#rust-version-requirements-msrv&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rustc-1.56.0+-lightgray.svg?sanitize=true&#34; alt=&#34;Minimum rustc version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;nom is a parser combinators library written in Rust. Its goal is to provide tools to build safe parsers without compromising the speed or memory consumption. To that end, it uses extensively Rust&#39;s &lt;em&gt;strong typing&lt;/em&gt; and &lt;em&gt;memory safety&lt;/em&gt; to produce fast and correct parsers, and provides functions, macros and traits to abstract most of the error prone plumbing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Geal/nom/main/assets/nom.png&#34; alt=&#34;nom logo in CC0 license, by Ange Albertini&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;nom will happily take a byte out of your files :)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#why-use-nom&#34;&gt;Why use nom?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#binary-format-parsers&#34;&gt;Binary format parsers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#text-format-parsers&#34;&gt;Text format parsers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#programming-language-parsers&#34;&gt;Programming language parsers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#streaming-formats&#34;&gt;Streaming formats&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#parser-combinators&#34;&gt;Parser combinators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#technical-features&#34;&gt;Technical features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#rust-version-requirements-msrv&#34;&gt;Rust version requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#related-projects&#34;&gt;Related projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#parsers-written-with-nom&#34;&gt;Parsers written with nom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-bakery/nom/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/color&#34;&gt;Hexadecimal color&lt;/a&gt; parser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use nom::{&#xA;  bytes::complete::{tag, take_while_m_n},&#xA;  combinator::map_res,&#xA;  sequence::Tuple,&#xA;  IResult,&#xA;};&#xA;&#xA;#[derive(Debug, PartialEq)]&#xA;pub struct Color {&#xA;  pub red: u8,&#xA;  pub green: u8,&#xA;  pub blue: u8,&#xA;}&#xA;&#xA;fn from_hex(input: &amp;amp;str) -&amp;gt; Result&amp;lt;u8, std::num::ParseIntError&amp;gt; {&#xA;  u8::from_str_radix(input, 16)&#xA;}&#xA;&#xA;fn is_hex_digit(c: char) -&amp;gt; bool {&#xA;  c.is_digit(16)&#xA;}&#xA;&#xA;fn hex_primary(input: &amp;amp;str) -&amp;gt; IResult&amp;lt;&amp;amp;str, u8&amp;gt; {&#xA;  map_res(take_while_m_n(2, 2, is_hex_digit), from_hex)(input)&#xA;}&#xA;&#xA;fn hex_color(input: &amp;amp;str) -&amp;gt; IResult&amp;lt;&amp;amp;str, Color&amp;gt; {&#xA;  let (input, _) = tag(&#34;#&#34;)(input)?;&#xA;  let (input, (red, green, blue)) = (hex_primary, hex_primary, hex_primary).parse(input)?;&#xA;  Ok((input, Color { red, green, blue }))&#xA;}&#xA;&#xA;fn main() {&#xA;  println!(&#34;{:?}&#34;, hex_color(&#34;#2F14DF&#34;))&#xA;}&#xA;&#xA;#[test]&#xA;fn parse_color() {&#xA;  assert_eq!(&#xA;    hex_color(&#34;#2F14DF&#34;),&#xA;    Ok((&#xA;      &#34;&#34;,&#xA;      Color {&#xA;        red: 47,&#xA;        green: 20,&#xA;        blue: 223,&#xA;      }&#xA;    ))&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/nom&#34;&gt;Reference documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tfpk.github.io/nominomicon/&#34;&gt;The Nominomicon: A Guide To Using Nom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-bakery/nom/tree/main/doc&#34;&gt;Various design documents and tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-bakery/nom/raw/main/doc/choosing_a_combinator.md&#34;&gt;List of combinators and their behaviour&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need any help developing your parsers, please ping &lt;code&gt;geal&lt;/code&gt; on IRC (Libera, Geeknode, OFTC), go to &lt;code&gt;#nom-parsers&lt;/code&gt; on Libera IRC, or on the &lt;a href=&#34;https://gitter.im/Geal/nom&#34;&gt;Gitter chat room&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why use nom&lt;/h2&gt; &#xA;&lt;p&gt;If you want to write:&lt;/p&gt; &#xA;&lt;h3&gt;Binary format parsers&lt;/h3&gt; &#xA;&lt;p&gt;nom was designed to properly parse binary formats from the beginning. Compared to the usual handwritten C parsers, nom parsers are just as fast, free from buffer overflow vulnerabilities, and handle common patterns for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Type-length-value&#34;&gt;TLV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bit level parsing&lt;/li&gt; &#xA; &lt;li&gt;Hexadecimal viewer in the debugging macros for easy data analysis&lt;/li&gt; &#xA; &lt;li&gt;Streaming parsers for network formats and huge files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-av/flavors&#34;&gt;FLV parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-av/matroska&#34;&gt;Matroska parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Keruspe/tar-parser.rs&#34;&gt;tar parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Text format parsers&lt;/h3&gt; &#xA;&lt;p&gt;While nom was made for binary format at first, it soon grew to work just as well with text formats. From line based formats like CSV, to more complex, nested formats such as JSON, nom can manage it, and provides you with useful tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast case insensitive comparison&lt;/li&gt; &#xA; &lt;li&gt;Recognizers for escaped strings&lt;/li&gt; &#xA; &lt;li&gt;Regular expressions can be embedded in nom parsers to represent complex character patterns succinctly&lt;/li&gt; &#xA; &lt;li&gt;Special care has been given to managing non ASCII characters properly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sozu-proxy/sozu/tree/main/lib/src/protocol/http/parser&#34;&gt;HTTP proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joelself/tomllib&#34;&gt;TOML parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Programming language parsers&lt;/h3&gt; &#xA;&lt;p&gt;While programming language parsers are usually written manually for more flexibility and performance, nom can be (and has been successfully) used as a prototyping parser for a language.&lt;/p&gt; &#xA;&lt;p&gt;nom will get you started quickly with powerful custom error types, that you can leverage with &lt;a href=&#34;https://github.com/fflorent/nom_locate&#34;&gt;nom_locate&lt;/a&gt; to pinpoint the exact line and column of the error. No need for separate tokenizing, lexing and parsing phases: nom can automatically handle whitespace parsing, and construct an AST in place.&lt;/p&gt; &#xA;&lt;p&gt;Example projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tagua-vm/parser&#34;&gt;PHP VM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;eve language prototype&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xshade-lang/xshade&#34;&gt;xshade shading language&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Streaming formats&lt;/h3&gt; &#xA;&lt;p&gt;While a lot of formats (and the code handling them) assume that they can fit the complete data in memory, there are formats for which we only get a part of the data at once, like network formats, or huge files. nom has been designed for a correct behaviour with partial data: If there is not enough data to decide, nom will tell you it needs more instead of silently returning a wrong result. Whether your data comes entirely or in chunks, the result should be the same.&lt;/p&gt; &#xA;&lt;p&gt;It allows you to build powerful, deterministic state machines for your protocols.&lt;/p&gt; &#xA;&lt;p&gt;Example projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sozu-proxy/sozu/tree/main/lib/src/protocol/http/parser&#34;&gt;HTTP proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-bakery/generator_nom&#34;&gt;Using nom with generators&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Parser combinators&lt;/h2&gt; &#xA;&lt;p&gt;Parser combinators are an approach to parsers that is very different from software like &lt;a href=&#34;https://en.wikipedia.org/wiki/Lex_(software)&#34;&gt;lex&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Yacc&#34;&gt;yacc&lt;/a&gt;. Instead of writing the grammar in a separate file and generating the corresponding code, you use very small functions with very specific purpose, like &#34;take 5 bytes&#34;, or &#34;recognize the word &#39;HTTP&#39;&#34;, and assemble them in meaningful patterns like &#34;recognize &#39;HTTP&#39;, then a space, then a version&#34;. The resulting code is small, and looks like the grammar you would have written with other parser approaches.&lt;/p&gt; &#xA;&lt;p&gt;This has a few advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The parsers are small and easy to write&lt;/li&gt; &#xA; &lt;li&gt;The parsers components are easy to reuse (if they&#39;re general enough, please add them to nom!)&lt;/li&gt; &#xA; &lt;li&gt;The parsers components are easy to test separately (unit tests and property-based tests)&lt;/li&gt; &#xA; &lt;li&gt;The parser combination code looks close to the grammar you would have written&lt;/li&gt; &#xA; &lt;li&gt;You can build partial parsers, specific to the data you need at the moment, and ignore the rest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technical features&lt;/h2&gt; &#xA;&lt;p&gt;nom parsers are for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;byte-oriented&lt;/strong&gt;: The basic type is &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; and parsers will work as much as possible on byte array slices (but are not limited to them)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;bit-oriented&lt;/strong&gt;: nom can address a byte slice as a bit stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;string-oriented&lt;/strong&gt;: The same kind of combinators can apply on UTF-8 strings as well&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;zero-copy&lt;/strong&gt;: If a parser returns a subset of its input data, it will return a slice of that input, without copying&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;streaming&lt;/strong&gt;: nom can work on partial data and detect when it needs more data to produce a correct result&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;descriptive errors&lt;/strong&gt;: The parsers can aggregate a list of error codes with pointers to the incriminated input slice. Those error lists can be pattern matched to provide useful messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;custom error types&lt;/strong&gt;: You can provide a specific type to improve errors returned by parsers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;safe parsing&lt;/strong&gt;: nom leverages Rust&#39;s safe memory handling and powerful types, and parsers are routinely fuzzed and tested with real world data. So far, the only flaws found by fuzzing were in code written outside of nom&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;speed&lt;/strong&gt;: Benchmarks have shown that nom parsers often outperform many parser combinators library like Parsec and attoparsec, some regular expression engines and even handwritten C parsers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some benchmarks are available on &lt;a href=&#34;https://github.com/rust-bakery/parser_benchmarks&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rust version requirements (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;The 7.0 series of nom supports &lt;strong&gt;Rustc version 1.56 or greater&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The current policy is that this will only be updated in the next major nom release.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;nom is available on &lt;a href=&#34;https://crates.io/crates/nom&#34;&gt;crates.io&lt;/a&gt; and can be included in your Cargo enabled project like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;nom = &#34;7&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few compilation features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;alloc&lt;/code&gt;: (activated by default) if disabled, nom can work in &lt;code&gt;no_std&lt;/code&gt; builds without memory allocators. If enabled, combinators that allocate (like &lt;code&gt;many0&lt;/code&gt;) will be available&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;std&lt;/code&gt;: (activated by default, activates &lt;code&gt;alloc&lt;/code&gt; too) if disabled, nom can work in &lt;code&gt;no_std&lt;/code&gt; builds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can configure those features like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies.nom]&#xA;version = &#34;7&#34;&#xA;default-features = false&#xA;features = [&#34;alloc&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Related projects&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fflorent/nom_locate&#34;&gt;Get line and column info in nom&#39;s input type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rydgel/monkey-rust&#34;&gt;Using nom as lexer and parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Parsers written with nom&lt;/h1&gt; &#xA;&lt;p&gt;Here is a (non exhaustive) list of known projects using nom:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text file formats: &lt;a href=&#34;https://github.com/cholcombe973/crushtool&#34;&gt;Ceph Crush&lt;/a&gt;, &lt;a href=&#34;https://github.com/ayrat555/cronenberg&#34;&gt;Cronenberg&lt;/a&gt;, &lt;a href=&#34;https://github.com/ChrisMacNaughton/xfs-rs&#34;&gt;XFS Runtime Stats&lt;/a&gt;, &lt;a href=&#34;https://github.com/GuillaumeGomez/csv-parser&#34;&gt;CSV&lt;/a&gt;, &lt;a href=&#34;https://github.com/TianyiShi2001/nom-fasta&#34;&gt;FASTA&lt;/a&gt;, &lt;a href=&#34;https://github.com/elij/fastq.rs&#34;&gt;FASTQ&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-bakery/nom/raw/main/tests/ini.rs&#34;&gt;INI&lt;/a&gt;, &lt;a href=&#34;https://github.com/badboy/iso8601&#34;&gt;ISO 8601 dates&lt;/a&gt;, &lt;a href=&#34;https://github.com/filipegoncalves/rust-config&#34;&gt;libconfig-like configuration file format&lt;/a&gt;, &lt;a href=&#34;https://github.com/sbeckeriv/warc_nom_parser&#34;&gt;Web archive&lt;/a&gt;, &lt;a href=&#34;https://github.com/TianyiShi2001/nom-pdb&#34;&gt;PDB&lt;/a&gt;, &lt;a href=&#34;https://github.com/tafia/protobuf-parser&#34;&gt;proto files&lt;/a&gt;, &lt;a href=&#34;https://github.com/adamchalmers/fountain-rs&#34;&gt;Fountain screenplay markup&lt;/a&gt;, &lt;a href=&#34;https://github.com/chipsenkbeil/vimwiki-rs/tree/master/vimwiki&#34;&gt;vimwiki&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/chipsenkbeil/vimwiki-rs/tree/master/vimwiki_macros&#34;&gt;vimwiki_macros&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Programming languages: &lt;a href=&#34;https://github.com/tagua-vm/parser&#34;&gt;PHP&lt;/a&gt;, &lt;a href=&#34;https://github.com/balajisivaraman/basic_calculator_rs&#34;&gt;Basic Calculator&lt;/a&gt;, &lt;a href=&#34;https://github.com/phaazon/glsl&#34;&gt;GLSL&lt;/a&gt;, &lt;a href=&#34;https://github.com/rozbb/nom-lua53&#34;&gt;Lua&lt;/a&gt;, &lt;a href=&#34;https://github.com/ProgVal/rust-python-parser&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/ms705/nom-sql&#34;&gt;SQL&lt;/a&gt;, &lt;a href=&#34;https://github.com/cout970/Elm-interpreter&#34;&gt;Elm&lt;/a&gt;, &lt;a href=&#34;https://github.com/dalance/sv-parser&#34;&gt;SystemVerilog&lt;/a&gt;, &lt;a href=&#34;https://github.com/vandenoever/rome/tree/master/src/io/turtle&#34;&gt;Turtle&lt;/a&gt;, &lt;a href=&#34;https://github.com/CSML-by-Clevy/csml-engine/tree/dev/csml_interpreter&#34;&gt;CSML&lt;/a&gt;, &lt;a href=&#34;https://github.com/fabrizio-m/wasm-nom&#34;&gt;Wasm&lt;/a&gt;, &lt;a href=&#34;https://github.com/Gungy2/pseudocod&#34;&gt;Pseudocode&lt;/a&gt;, &lt;a href=&#34;https://github.com/meilisearch/meilisearch&#34;&gt;Filter for MeiliSearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interface definition formats: &lt;a href=&#34;https://github.com/thehydroimpulse/thrust&#34;&gt;Thrift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio, video and image formats: &lt;a href=&#34;https://github.com/Geal/gif.rs&#34;&gt;GIF&lt;/a&gt;, &lt;a href=&#34;https://github.com/dust-engine/dot_vox&#34;&gt;MagicaVoxel .vox&lt;/a&gt;, &lt;a href=&#34;https://github.com/derekdreery/nom-midi-rs&#34;&gt;MIDI&lt;/a&gt;, &lt;a href=&#34;https://github.com/open-flash/swf-parser&#34;&gt;SWF&lt;/a&gt;, &lt;a href=&#34;https://github.com/Noise-Labs/wave&#34;&gt;WAVE&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-av/matroska&#34;&gt;Matroska (MKV)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Document formats: &lt;a href=&#34;https://github.com/Keruspe/tar-parser.rs&#34;&gt;TAR&lt;/a&gt;, &lt;a href=&#34;https://github.com/nharward/nom-gzip&#34;&gt;GZ&lt;/a&gt;, &lt;a href=&#34;https://github.com/erihsu/gds2-io&#34;&gt;GDSII&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cryptographic formats: &lt;a href=&#34;https://github.com/rusticata/x509-parser&#34;&gt;X.509&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Network protocol formats: &lt;a href=&#34;https://github.com/jbaum98/bencode.rs&#34;&gt;Bencode&lt;/a&gt;, &lt;a href=&#34;https://github.com/toshokan/misato&#34;&gt;D-Bus&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/dhcp-parser&#34;&gt;DHCP&lt;/a&gt;, &lt;a href=&#34;https://github.com/sozu-proxy/sozu/tree/main/lib/src/protocol/http&#34;&gt;HTTP&lt;/a&gt;, &lt;a href=&#34;https://github.com/santifa/rrp/raw/master/src/uri.rs&#34;&gt;URI&lt;/a&gt;, &lt;a href=&#34;https://github.com/djc/tokio-imap&#34;&gt;IMAP&lt;/a&gt;, &lt;a href=&#34;https://github.com/Detegr/RBot-parser&#34;&gt;IRC&lt;/a&gt;, &lt;a href=&#34;https://github.com/richo/pcapng-rs&#34;&gt;Pcap-NG&lt;/a&gt;, &lt;a href=&#34;https://github.com/ithinuel/pcap-rs&#34;&gt;Pcap&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/pcap-parser&#34;&gt;Pcap + PcapNG&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/ipsec-parser&#34;&gt;IKEv2&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/ntp-parser&#34;&gt;NTP&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/snmp-parser&#34;&gt;SNMP&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/kerberos-parser&#34;&gt;Kerberos v5&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/der-parser&#34;&gt;DER&lt;/a&gt;, &lt;a href=&#34;https://github.com/rusticata/tls-parser&#34;&gt;TLS&lt;/a&gt;, &lt;a href=&#34;https://github.com/dominotree/rs-ipfix&#34;&gt;IPFIX / Netflow v10&lt;/a&gt;, &lt;a href=&#34;https://github.com/fuerstenau/gorrosion-gtp&#34;&gt;GTP&lt;/a&gt;, &lt;a href=&#34;https://github.com/kurotych/sipcore/tree/master/crates/sipmsg&#34;&gt;SIP&lt;/a&gt;, &lt;a href=&#34;https://github.com/vectordotdev/vector/raw/master/lib/prometheus-parser/src/line.rs&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Language specifications: &lt;a href=&#34;https://github.com/shnewto/bnf&#34;&gt;BNF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Misc formats: &lt;a href=&#34;https://github.com/MarkMcCaskey/gameboy-rom-parser&#34;&gt;Game Boy ROM&lt;/a&gt;, &lt;a href=&#34;https://github.com/stadelmanma/fitparse-rs&#34;&gt;ANT FIT&lt;/a&gt;, &lt;a href=&#34;https://github.com/fosskers/rs-versions&#34;&gt;Version Numbers&lt;/a&gt;, &lt;a href=&#34;https://github.com/JamesHarrison/otdrs&#34;&gt;Telcordia/Bellcore SR-4731 SOR OTDR files&lt;/a&gt;, &lt;a href=&#34;https://github.com/PrivateRookie/boxercrab&#34;&gt;MySQL binary log&lt;/a&gt;, &lt;a href=&#34;https://github.com/Skasselbard/nom-uri&#34;&gt;URI&lt;/a&gt;, &lt;a href=&#34;https://github.com/sachaarbonel/furigana.rs&#34;&gt;Furigana&lt;/a&gt;, &lt;a href=&#34;https://github.com/Fyko/wordle-stats/tree/main/parser&#34;&gt;Wordle Result&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to create a new parser using &lt;code&gt;nom&lt;/code&gt;? A list of not yet implemented formats is available &lt;a href=&#34;https://github.com/rust-bakery/nom/issues/14&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Want to add your parser here? Create a pull request for it!&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;nom is the fruit of the work of many contributors over the years, many thanks for your help!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/rust-bakery/nom/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=rust-bakery/nom&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>