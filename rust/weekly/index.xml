<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T02:00:31Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uutils/coreutils</title>
    <updated>2023-02-19T02:00:31Z</updated>
    <id>tag:github.com,2023-02-19:/uutils/coreutils</id>
    <link href="https://github.com/uutils/coreutils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uutils coreutils&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/coreutils&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/coreutils.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/wQVJbvJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aaronepower/tokei&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/uutils/coreutils?category=code&#34; alt=&#34;LOC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/uutils/coreutils&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true&#34; alt=&#34;dependency status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/uutils/coreutils&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;CodeCov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/MSRV-1.64.0-brightgreen&#34; alt=&#34;MSRV&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- markdownlint-disable commands-show-output no-duplicate-heading --&gt; &#xA;&lt;!-- spell-checker:ignore markdownlint ; (options) DESTDIR RUNTEST UTILNAME --&gt; &#xA;&lt;p&gt;uutils is an attempt at writing universal (as in cross-platform) CLI utilities in &lt;a href=&#34;http://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; &#xA;&lt;p&gt;To install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo install coreutils&#xA;$ ~/.cargo/bin/coreutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, Mac, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms. Rust was chosen not only because it is fast and safe, but is also excellent for writing cross-platform code.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uutils.github.io/user/&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uutils.github.io/dev/coreutils/&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href=&#34;https://github.com/uutils/uutils.github.io&#34;&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GNU Make (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rust Version&lt;/h3&gt; &#xA;&lt;p&gt;uutils follows Rust&#39;s release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.64.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Building the full package, including all documentation, requires both Cargo and Gnu Make on a Unix platform.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/uutils/coreutils&#xA;$ cd coreutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named &#39;coreutils&#39;, on most Rust-supported platforms.&lt;/p&gt; &#xA;&lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --release --features macos&#xA;# or ...&#xA;$ cargo build --release --features windows&#xA;# or ...&#xA;$ cargo build --release --features unix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --features &#34;base32 cat echo rm&#34; --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named &#34;uu_UTILNAME&#34;. To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; &#xA;&lt;p&gt;To simply build all available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will install uutils into Cargo&#39;s &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This does not install files necessary for shell completion. For shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;To install all available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo -E make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make PROG_PREFIX=PREFIX_GOES_HERE install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the multicall binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make MULTICALL=y install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# DESTDIR is also supported&#xA;$ make PREFIX=/my/path install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually install shell completions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; &#xA;&lt;p&gt;The syntax is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Un-installation&lt;/h2&gt; &#xA;&lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;To uninstall uutils:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo uninstall uutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;To uninstall all utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make PROG_PREFIX=PREFIX_GOES_HERE uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make MULTICALL=y uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# DESTDIR is also supported&#xA;$ make PREFIX=/my/path uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Testing can be done using either Cargo or &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Just like with building, we follow the standard procedure for testing using Cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;cargo test&lt;/code&gt; only runs the common programs. To run also platform specific tests, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test --features unix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would prefer to test a select few utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test --features &#34;chmod mv tail&#34; --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also want to test the core utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test  -p uucore -p coreutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gdb --args target/debug/coreutils ls&#xA;(gdb) b ls.rs:79&#xA;(gdb) run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;To simply test all available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test all but a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test only a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To include tests for unimplemented behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; SPEC=y test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Busybox Tests&lt;/h3&gt; &#xA;&lt;p&gt;This testing functionality is only available on *nix operating systems and requires &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run busybox tests for all utilities for which busybox has tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make busytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run busybox tests for a few of the available utilities&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; busytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass an argument like &#34;-v&#34; to the busybox test runtime&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; RUNTEST_ARGS=&#39;-v&#39; busytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comparing with GNU&lt;/h3&gt; &#xA;&lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href=&#34;https://uutils.github.io/user/test_coverage.html&#34;&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.png?raw=true&#34; alt=&#34;Evolution over time&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bash util/build-gnu.sh&#xA;$ bash util/run-gnu-test.sh&#xA;# To run a single test:&#xA;$ bash util/run-gnu-test.sh tests/touch/not-owner.sh # for example&#xA;# To run several tests:&#xA;$ bash util/run-gnu-test.sh tests/touch/not-owner.sh tests/rm/no-give-up.sh # for example&#xA;# If this is a perl (.pl) test, to run in debug:&#xA;$ DEBUG=1 bash util/run-gnu-test.sh tests/misc/sm3sum.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it relies on individual utilities (not the multicall binary).&lt;/p&gt; &#xA;&lt;h3&gt;Improving the GNU compatibility&lt;/h3&gt; &#xA;&lt;p&gt;The Python script &lt;code&gt;./util/remaining-gnu-error.py&lt;/code&gt; shows the list of failing tests in the CI.&lt;/p&gt; &#xA;&lt;p&gt;To improve the GNU compatibility, the following process is recommended:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Identify a test (the smaller, the better) on a program that you understand or is easy to understand. You can use the &lt;code&gt;./util/remaining-gnu-error.py&lt;/code&gt; script to help with this decision.&lt;/li&gt; &#xA; &lt;li&gt;Build both the GNU and Rust coreutils using: &lt;code&gt;bash util/build-gnu.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the test with &lt;code&gt;bash util/run-gnu-test.sh &amp;lt;your test&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start to modify &lt;code&gt;&amp;lt;your test&amp;gt;&lt;/code&gt; to understand what is wrong. Examples: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Add &lt;code&gt;set -v&lt;/code&gt; to have the bash verbose mode&lt;/li&gt; &#xA;   &lt;li&gt;Add &lt;code&gt;echo $?&lt;/code&gt; where needed&lt;/li&gt; &#xA;   &lt;li&gt;When the variable &lt;code&gt;fail&lt;/code&gt; is used in the test, &lt;code&gt;echo $fail&lt;/code&gt; to see when the test started to fail&lt;/li&gt; &#xA;   &lt;li&gt;Bump the content of the output (ex: &lt;code&gt;cat err&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Or, if the test is simple, extract the relevant information to create a new test case running both GNU &amp;amp; Rust implementation&lt;/li&gt; &#xA; &lt;li&gt;Start to modify the Rust implementation to match the expected behavior&lt;/li&gt; &#xA; &lt;li&gt;Add a test to make sure that we don&#39;t regress (our test suite is super quick)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute to uutils, please see &lt;a href=&#34;https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;p&gt;Please note that this is not fully accurate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some new options can be added / removed in the GNU implementation;&lt;/li&gt; &#xA; &lt;li&gt;Some error management might be missing;&lt;/li&gt; &#xA; &lt;li&gt;Some behaviors might be different.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/uutils/coreutils/issues/3336&#34;&gt;https://github.com/uutils/coreutils/issues/3336&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;WIP&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;arch&lt;/td&gt; &#xA;   &lt;td&gt;cp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base32&lt;/td&gt; &#xA;   &lt;td&gt;date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base64&lt;/td&gt; &#xA;   &lt;td&gt;dd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;basename&lt;/td&gt; &#xA;   &lt;td&gt;df&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;basenc&lt;/td&gt; &#xA;   &lt;td&gt;expr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cat&lt;/td&gt; &#xA;   &lt;td&gt;install&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chcon&lt;/td&gt; &#xA;   &lt;td&gt;ls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chgrp&lt;/td&gt; &#xA;   &lt;td&gt;more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chmod&lt;/td&gt; &#xA;   &lt;td&gt;numfmt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chown&lt;/td&gt; &#xA;   &lt;td&gt;od (&lt;code&gt;--strings&lt;/code&gt; and 128-bit data types missing)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chroot&lt;/td&gt; &#xA;   &lt;td&gt;pr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cksum&lt;/td&gt; &#xA;   &lt;td&gt;printf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comm&lt;/td&gt; &#xA;   &lt;td&gt;sort&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;csplit&lt;/td&gt; &#xA;   &lt;td&gt;split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cut&lt;/td&gt; &#xA;   &lt;td&gt;tac&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dircolors&lt;/td&gt; &#xA;   &lt;td&gt;test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dirname&lt;/td&gt; &#xA;   &lt;td&gt;dir&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;du&lt;/td&gt; &#xA;   &lt;td&gt;vdir&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;echo&lt;/td&gt; &#xA;   &lt;td&gt;stty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;env&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;expand&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;factor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fmt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fold&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;groups&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hashsum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;head&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostid&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostname&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;join&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kill&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;link&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ln&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;logname&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;md5sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha1sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha224sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha256sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha384sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha512sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mkdir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mkfifo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mknod&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mktemp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nohup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nproc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paste&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pathchk&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pinky&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;printenv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ptx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pwd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;readlink&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;realpath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;relpath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rmdir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;runcon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shred&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shuf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sleep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stdbuf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sync&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tail&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tee&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timeout&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;touch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;truncate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tsort&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tty&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uname&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unexpand&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uniq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unlink&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uptime&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;users&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;who&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;whoami&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; &#xA;&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lambdaclass/lambdaworks</title>
    <updated>2023-02-19T02:00:31Z</updated>
    <id>tag:github.com,2023-02-19:/lambdaclass/lambdaworks</id>
    <link href="https://github.com/lambdaclass/lambdaworks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The library for kids who wanna learn how to do SNARKs and learn other cryptographic stuff too&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LambdaWorks&lt;/h1&gt; &#xA;&lt;div&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://t.me/+98Whlzql7Hs0MDZh&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?color=green&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;style=flat&amp;amp;message=join&#34; alt=&#34;Telegram Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/lambdaclass/lambdaworks&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/lambdaclass/lambdaworks&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;From the heights of these towers of fields, forty centuries of mathematics look down on us. The library for kids who wanna learn how to do SNARKs and learn other cryptographic stuff too.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;Lambdaworks&lt;/code&gt; libraries in your research projects, please cite them using the following template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{Lambdaworks,&#xA;  author={Lambdaworks contributors},&#xA;  title={Lambdaworks},&#xA;  url={https://github.com/lambdaclass/lambdaworks},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building blocks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finite Field Algebra&lt;/li&gt; &#xA; &lt;li&gt;Elliptic curve models&lt;/li&gt; &#xA; &lt;li&gt;Elliptic curve operations&lt;/li&gt; &#xA; &lt;li&gt;Arithmetization schemes&lt;/li&gt; &#xA; &lt;li&gt;Polynomial commitment schemes&lt;/li&gt; &#xA; &lt;li&gt;PIOP&lt;/li&gt; &#xA; &lt;li&gt;Cryptographic tools&lt;/li&gt; &#xA; &lt;li&gt;Advanced tools: agreggation, recursion, accumulation&lt;/li&gt; &#xA; &lt;li&gt;Protocols&lt;/li&gt; &#xA; &lt;li&gt;Gadgets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blocks&lt;/h2&gt; &#xA;&lt;h3&gt;Finite Field Algebra&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Big integer representation&lt;/li&gt; &#xA; &lt;li&gt;Basic algebra: addition, multiplication, subtraction, inversion, square root (Tonelli–Shanks)&lt;/li&gt; &#xA; &lt;li&gt;Field extensions&lt;/li&gt; &#xA; &lt;li&gt;Number theoretic transform&lt;/li&gt; &#xA; &lt;li&gt;Polynomial operations&lt;/li&gt; &#xA; &lt;li&gt;Fast Fourier Transform&lt;/li&gt; &#xA; &lt;li&gt;Montgomery and Barrett&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Elliptic curve models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BLS12-381 (H)&lt;/li&gt; &#xA; &lt;li&gt;BLS12-377 (H)&lt;/li&gt; &#xA; &lt;li&gt;secp256k1 (H)&lt;/li&gt; &#xA; &lt;li&gt;Ed25519 (H)&lt;/li&gt; &#xA; &lt;li&gt;Jubjub (M)&lt;/li&gt; &#xA; &lt;li&gt;BN254 (M)&lt;/li&gt; &#xA; &lt;li&gt;Pasta: Pallas and Vesta (L)&lt;/li&gt; &#xA; &lt;li&gt;Forms:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Affine (H)&lt;/li&gt; &#xA; &lt;li&gt;Projective (H)&lt;/li&gt; &#xA; &lt;li&gt;Montgomery (M)&lt;/li&gt; &#xA; &lt;li&gt;Twisted Edwards (H)&lt;/li&gt; &#xA; &lt;li&gt;Jacobi (L)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Elliptic curve operations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add, double, scalar multiplication.&lt;/li&gt; &#xA; &lt;li&gt;Multiscalar multiplication (Pippenger)&lt;/li&gt; &#xA; &lt;li&gt;Weyl, Tate and Ate pairings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Arithmetization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;R1CS - gadgets (H)&lt;/li&gt; &#xA; &lt;li&gt;AIR (M)&lt;/li&gt; &#xA; &lt;li&gt;Plonkish (H)&lt;/li&gt; &#xA; &lt;li&gt;ACIR (L)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Polynomial commitment schemes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KZG and variants&lt;/li&gt; &#xA; &lt;li&gt;Hashing&lt;/li&gt; &#xA; &lt;li&gt;Inner product arguments&lt;/li&gt; &#xA; &lt;li&gt;Dory (L)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PIOP/PCS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Groth16&lt;/li&gt; &#xA; &lt;li&gt;Plonk&lt;/li&gt; &#xA; &lt;li&gt;Marlin&lt;/li&gt; &#xA; &lt;li&gt;FRI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/RustCrypto&#34;&gt;Crypto primitives&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pseudorandom generator&lt;/li&gt; &#xA; &lt;li&gt;Hashes&lt;/li&gt; &#xA; &lt;li&gt;Blake2&lt;/li&gt; &#xA; &lt;li&gt;Keccak&lt;/li&gt; &#xA; &lt;li&gt;Poseidon&lt;/li&gt; &#xA; &lt;li&gt;Pedersen&lt;/li&gt; &#xA; &lt;li&gt;Encryption schemes&lt;/li&gt; &#xA; &lt;li&gt;AES&lt;/li&gt; &#xA; &lt;li&gt;ChaCha20&lt;/li&gt; &#xA; &lt;li&gt;Rescue&lt;/li&gt; &#xA; &lt;li&gt;ElGamal&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Protocol&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fiat-Shamir&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Gadgets&lt;/h3&gt; &#xA;&lt;h2&gt;📊 Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;To run the benchmarks you will need &lt;code&gt;cargo-criterion&lt;/code&gt;, to install do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-criterion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the complete benchmark suite with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a specific benchmark suite with &lt;code&gt;cargo&lt;/code&gt;, for example to run the one for &lt;code&gt;field&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo criterion --bench field&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the generated HTML report in &lt;code&gt;target/criterion/reports/index.html&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hyperium/tonic</title>
    <updated>2023-02-19T02:00:31Z</updated>
    <id>tag:github.com,2023-02-19:/hyperium/tonic</id>
    <link href="https://github.com/hyperium/tonic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native gRPC client &amp; server implementation with async/await support.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/hyperium/tonic/raw/master/.github/assets/tonic-banner.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A rust implementation of &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt;, a high performance, open source, general RPC framework that puts mobile and HTTP/2 first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hyperium/tonic&#34;&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt; is a gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility. This library was created to have first class support of async/await and to act as a core building block for production systems written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/tonic&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/tonic&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/tonic&#34;&gt;&lt;img src=&#34;https://docs.rs/tonic/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hyperium/tonic/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/tonic&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/examples&#34;&gt;Examples&lt;/a&gt; | &lt;a href=&#34;https://github.com/hyperium/tonic&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.rs/tonic&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/6yGkFeN&#34;&gt;Chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hyperium/tonic&#34;&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt; is composed of three main components: the generic gRPC implementation, the high performance HTTP/2 implementation and the codegen powered by &lt;a href=&#34;https://github.com/tokio-rs/prost&#34;&gt;&lt;code&gt;prost&lt;/code&gt;&lt;/a&gt;. The generic implementation can support any HTTP/2 implementation and any encoding via a set of generic traits. The HTTP/2 implementation is based on &lt;a href=&#34;https://github.com/hyperium/hyper&#34;&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;, a fast HTTP/1.1 and HTTP/2 client and server built on top of the robust &lt;a href=&#34;https://github.com/tokio-rs/tokio&#34;&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt; stack. The codegen contains the tools to build clients and servers from &lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;&lt;code&gt;protobuf&lt;/code&gt;&lt;/a&gt; definitions.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bi-directional streaming&lt;/li&gt; &#xA; &lt;li&gt;High performance async io&lt;/li&gt; &#xA; &lt;li&gt;Interoperability&lt;/li&gt; &#xA; &lt;li&gt;TLS backed by &lt;a href=&#34;https://github.com/rustls/rustls&#34;&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Load balancing&lt;/li&gt; &#xA; &lt;li&gt;Custom metadata&lt;/li&gt; &#xA; &lt;li&gt;Authentication&lt;/li&gt; &#xA; &lt;li&gt;Health Checking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Examples can be found in &lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; and for more complex scenarios &lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/interop&#34;&gt;&lt;code&gt;interop&lt;/code&gt;&lt;/a&gt; may be a good resource as it shows examples of many of the gRPC features.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://rust-analyzer.github.io&#34;&gt;rust-analyzer&lt;/a&gt; we recommend you set &lt;code&gt;&#34;rust-analyzer.cargo.buildScripts.enable&#34;: true&lt;/code&gt; to correctly load the generated code.&lt;/p&gt; &#xA;&lt;p&gt;For IntelliJ IDEA users, please refer to &lt;a href=&#34;https://github.com/intellij-rust/intellij-rust/pull/8056&#34;&gt;this&lt;/a&gt; and enable &lt;code&gt;org.rust.cargo.evaluate.build.scripts&lt;/code&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-faq.html#experimental-features&#34;&gt;experimental feature&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rust Version&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;tonic&lt;/code&gt;&#39;s MSRV is &lt;code&gt;1.60&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rustup update&#xA;$ cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;In order to build &lt;code&gt;tonic&lt;/code&gt; &amp;gt;= 0.8.0, you need the &lt;code&gt;protoc&lt;/code&gt; Protocol Buffers compiler, along with Protocol Buffers resource files.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y&#xA;sudo apt install -y protobuf-compiler libprotobuf-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Alpine Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apk add protoc protobuf-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;Assuming &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; is already installed. (If not, see instructions for installing Homebrew on &lt;a href=&#34;https://brew.sh/&#34;&gt;the Homebrew website&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew install protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the latest version of &lt;code&gt;protoc-xx.y-win64.zip&lt;/code&gt; from &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases/latest&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the file &lt;code&gt;bin\protoc.exe&lt;/code&gt; and put it somewhere in the &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Verify installation by opening a command prompt and enter &lt;code&gt;protoc --version&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/hyperium/tonic/raw/master/examples/helloworld-tutorial.md&#34;&gt;&lt;code&gt;helloworld&lt;/code&gt;&lt;/a&gt; tutorial provides a basic example of using &lt;code&gt;tonic&lt;/code&gt;, perfect for first time users!&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/hyperium/tonic/raw/master/examples/routeguide-tutorial.md&#34;&gt;&lt;code&gt;routeguide&lt;/code&gt;&lt;/a&gt; tutorial provides a complete example of using &lt;code&gt;tonic&lt;/code&gt; and all its features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;First, see if the answer to your question can be found in the API documentation. If the answer is not there, there is an active community in the &lt;a href=&#34;https://discord.gg/6yGkFeN&#34;&gt;Tonic Discord channel&lt;/a&gt;. We would be happy to try to answer your question. If that doesn&#39;t work, try opening an &lt;a href=&#34;https://github.com/hyperium/tonic/issues/new&#34;&gt;issue&lt;/a&gt; with the question.&lt;/p&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/tonic&#34;&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;: Generic gRPC and HTTP/2 client/server implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/tonic-build&#34;&gt;&lt;code&gt;tonic-build&lt;/code&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/tokio-rs/prost&#34;&gt;&lt;code&gt;prost&lt;/code&gt;&lt;/a&gt; based service codegen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/tonic-types&#34;&gt;&lt;code&gt;tonic-types&lt;/code&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/tokio-rs/prost&#34;&gt;&lt;code&gt;prost&lt;/code&gt;&lt;/a&gt; based grpc utility types including support for gRPC Well Known Types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/tonic-health&#34;&gt;&lt;code&gt;tonic-health&lt;/code&gt;&lt;/a&gt;: Implementation of the standard &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/doc/health-checking.md&#34;&gt;gRPC health checking service&lt;/a&gt;. Also serves as an example of both unary and response streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/tonic-reflection&#34;&gt;&lt;code&gt;tonic-reflection&lt;/code&gt;&lt;/a&gt;: A tonic based gRPC reflection implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: Example gRPC implementations showing off tls, load balancing and bi-directional streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperium/tonic/tree/master/interop&#34;&gt;&lt;code&gt;interop&lt;/code&gt;&lt;/a&gt;: Interop tests implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;🎈&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href=&#34;https://raw.githubusercontent.com/hyperium/tonic/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to help you get involved in the Tonic project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/hyperium/tonic/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tonic by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
</feed>