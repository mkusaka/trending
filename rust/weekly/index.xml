<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:57:29Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fish-shell/fish-shell</title>
    <updated>2023-12-03T01:57:29Z</updated>
    <id>tag:github.com,2023-12-03:/fish-shell/fish-shell</id>
    <link href="https://github.com/fish-shell/fish-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The user-friendly command line shell.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. |Cirrus CI| image:: &lt;a href=&#34;https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master&#34;&gt;https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master&lt;/a&gt; :target: &lt;a href=&#34;https://cirrus-ci.com/github/fish-shell/fish-shell&#34;&gt;https://cirrus-ci.com/github/fish-shell/fish-shell&lt;/a&gt; :alt: Cirrus CI Build Status&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;fish &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ - the friendly interactive shell |Build Status| |Cirrus CI|&lt;/h1&gt; &#xA;&lt;p&gt;fish is a smart and user-friendly command line shell for macOS, Linux, and the rest of the family. fish includes features like syntax highlighting, autosuggest-as-you-type, and fancy tab completions that just work, with no configuration required.&lt;/p&gt; &#xA;&lt;p&gt;For downloads, screenshots and more, go to &lt;a href=&#34;https://fishshell.com/&#34;&gt;https://fishshell.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;fish generally works like other shells, like bash or zsh. A few important differences can be found at &lt;a href=&#34;https://fishshell.com/docs/current/tutorial.html&#34;&gt;https://fishshell.com/docs/current/tutorial.html&lt;/a&gt; by searching for the magic phrase “unlike other shells”.&lt;/p&gt; &#xA;&lt;p&gt;Detailed user documentation is available by running &lt;code&gt;help&lt;/code&gt; within fish, and also at &lt;a href=&#34;https://fishshell.com/docs/current/index.html&#34;&gt;https://fishshell.com/docs/current/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting fish&lt;/h2&gt; &#xA;&lt;p&gt;macOS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;fish can be installed:&#xA;&#xA;-  using `Homebrew &amp;lt;http://brew.sh/&amp;gt;`__: ``brew install fish``&#xA;-  using `MacPorts &amp;lt;https://www.macports.org/&amp;gt;`__:&#xA;   ``sudo port install fish``&#xA;-  using the `installer from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__&#xA;-  as a `standalone app from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__&#xA;&#xA;Note: The minimum supported macOS version is 10.10 &#34;Yosemite&#34;.&#xA;&#xA;Packages for Linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Packages for Debian, Fedora, openSUSE, and Red Hat Enterprise Linux/CentOS are available from the &lt;code&gt;openSUSE Build Service &amp;lt;https://software.opensuse.org/download.html?project=shells%3Afish&amp;amp;package=fish&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;Packages for Ubuntu are available from the &lt;code&gt;fish PPA &amp;lt;https://launchpad.net/~fish-shell/+archive/ubuntu/release-3&amp;gt;&lt;/code&gt;__, and can be installed using the following commands:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;sudo apt-add-repository ppa:fish-shell/release-3 sudo apt update sudo apt install fish&lt;/p&gt; &#xA;&lt;p&gt;Instructions for other distributions may be found at &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;-  On Windows 10, fish can be installed under the WSL Windows Subsystem&#xA;   for Linux with the instructions for the appropriate distribution&#xA;   listed above under “Packages for Linux”, or from source with the&#xA;   instructions below.&#xA;-  Fish can also be installed on all versions of Windows using&#xA;   `Cygwin &amp;lt;https://cygwin.com/&amp;gt;`__ (from the **Shells** category).&#xA;&#xA;Building from source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If packages are not available for your platform, GPG-signed tarballs are available from &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ and &lt;code&gt;fish-shell on GitHub &amp;lt;https://github.com/fish-shell/fish-shell/releases&amp;gt;&lt;/code&gt;&lt;strong&gt;. See the &lt;code&gt;Building &amp;lt;#building&amp;gt;&lt;/code&gt;&lt;/strong&gt; section for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Running fish&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, run &lt;code&gt;fish&lt;/code&gt; from your current shell to try fish out!&lt;/p&gt; &#xA;&lt;p&gt;Dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Running fish requires:&#xA;&#xA;-  curses or ncurses (preinstalled on most \*nix systems)&#xA;-  some common \*nix system utilities (currently ``mktemp``), in&#xA;   addition to the basic POSIX utilities (``cat``, ``cut``, ``dirname``,&#xA;   ``ls``, ``mkdir``, ``mkfifo``, ``rm``, ``sort``, ``tee``, ``tr``,&#xA;   ``uname`` and ``sed`` at least, but the full coreutils plus ``find`` and&#xA;   ``awk`` is preferred)&#xA;-  The gettext library, if compiled with&#xA;   translation support&#xA;&#xA;The following optional features also have specific requirements:&#xA;&#xA;-  builtin commands that have the ``--help`` option or print usage&#xA;   messages require ``nroff`` or ``mandoc`` for&#xA;   display&#xA;-  automated completion generation from manual pages requires Python 3.5+&#xA;-  the ``fish_config`` web configuration tool requires Python 3.5+ and a web browser&#xA;-  system clipboard integration (with the default Ctrl-V and Ctrl-X&#xA;   bindings) require either the ``xsel``, ``xclip``,&#xA;   ``wl-copy``/``wl-paste`` or ``pbcopy``/``pbpaste`` utilities&#xA;-  full completions for ``yarn`` and ``npm`` require the&#xA;   ``all-the-package-names`` NPM module&#xA;-  ``colorls`` is used, if installed, to add color when running ``ls`` on platforms&#xA;   that do not have color support (such as OpenBSD)&#xA;&#xA;Switching to fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to use fish as your default shell, use the following command, from inside fish:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;chsh -s (command -s fish)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chsh&lt;/code&gt; wants a full path, this will try to find where fish is installed. If that doesn&#39;t work, try to pass the path manually - it will usually be &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; if you built from source, or &lt;code&gt;/usr/bin/fish&lt;/code&gt; if you installed a package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chsh&lt;/code&gt; will prompt you for your password and change your default shell. Log out, then log in again for the changes to take effect.&lt;/p&gt; &#xA;&lt;p&gt;Use the following command if fish isn’t already added to &lt;code&gt;/etc/shells&lt;/code&gt; to permit fish to be your login shell (e.g. if &lt;code&gt;chsh&lt;/code&gt; complains that it &#34;doesn&#39;t exist&#34; or similar):&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;echo (command -s fish) | sudo tee -a /etc/shells&lt;/p&gt; &#xA;&lt;p&gt;To switch your default shell back, you can run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; (substituting &lt;code&gt;/bin/bash&lt;/code&gt; with &lt;code&gt;/bin/tcsh&lt;/code&gt; or &lt;code&gt;/bin/zsh&lt;/code&gt; as appropriate).&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;.. _dependencies-1:&lt;/p&gt; &#xA;&lt;p&gt;Dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Compiling fish from a tarball requires:&#xA;&#xA;-  a C++11 compiler (g++ 4.8 or later, or clang 3.3 or later)&#xA;-  CMake (version 3.5 or later)&#xA;-  a curses implementation such as ncurses (headers and libraries)&#xA;-  PCRE2 (headers and libraries) - optional, this will be downloaded if missing&#xA;-  gettext (headers and libraries) - optional, for translation support&#xA;&#xA;Sphinx is also optionally required to build the documentation from a&#xA;cloned git repository.&#xA;&#xA;Additionally, running the test suite requires Python 3.5+ and the pexpect package.&#xA;&#xA;Dependencies, git master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building from git master currently requires, in addition to the dependencies for a tarball:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rust (version 1.67 or later)&lt;/li&gt; &#xA; &lt;li&gt;CMake (version 3.19 or later)&lt;/li&gt; &#xA; &lt;li&gt;libclang, even if you are compiling with GCC&lt;/li&gt; &#xA; &lt;li&gt;an Internet connection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;fish is in the process of being ported to Rust, replacing all C++ code, and as such these dependencies are a bit awkward and in flux.&lt;/p&gt; &#xA;&lt;p&gt;In general, we would currently not recommend running from git master if you just want to &lt;em&gt;use&lt;/em&gt; fish. Given the nature of the port, what is currently there is mostly a slower and buggier version of the last C++-based release.&lt;/p&gt; &#xA;&lt;p&gt;Building from source (all platforms) - Makefile generator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;To install into ``/usr/local``, run:&#xA;&#xA;.. code:: bash&#xA;&#xA;   mkdir build; cd build&#xA;   cmake ..&#xA;   make&#xA;   sudo make install&#xA;&#xA;The install directory can be changed using the&#xA;``-DCMAKE_INSTALL_PREFIX`` parameter for ``cmake``.&#xA;&#xA;Build options&#xA;~~~~~~~~~~~~~&#xA;&#xA;In addition to the normal CMake build options (like ``CMAKE_INSTALL_PREFIX``), fish has some other options available to customize it.&#xA;&#xA;- BUILD_DOCS=ON|OFF - whether to build the documentation. This is automatically set to OFF when Sphinx isn&#39;t installed.&#xA;- INSTALL_DOCS=ON|OFF - whether to install the docs. This is automatically set to on when BUILD_DOCS is or prebuilt documentation is available (like when building in-tree from a tarball).&#xA;- FISH_USE_SYSTEM_PCRE2=ON|OFF - whether to use an installed pcre2. This is normally autodetected.&#xA;- MAC_CODESIGN_ID=String|OFF - the codesign ID to use on Mac, or &#34;OFF&#34; to disable codesigning.&#xA;- WITH_GETTEXT=ON|OFF - whether to build with gettext support for translations.&#xA;&#xA;Note that fish does *not* support static linking and will attempt to error out if it detects it.&#xA;&#xA;Help, it didn’t build!&#xA;~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;If fish reports that it could not find curses, try installing a curses&#xA;development package and build again.&#xA;&#xA;On Debian or Ubuntu you want:&#xA;&#xA;::&#xA;&#xA;   sudo apt install build-essential cmake ncurses-dev libncurses5-dev libpcre2-dev gettext&#xA;&#xA;On RedHat, CentOS, or Amazon EC2:&#xA;&#xA;::&#xA;&#xA;   sudo yum install ncurses-devel&#xA;&#xA;Contributing Changes to the Code&#xA;--------------------------------&#xA;&#xA;See the `Guide for Developers &amp;lt;CONTRIBUTING.rst&amp;gt;`__.&#xA;&#xA;Contact Us&#xA;----------&#xA;&#xA;Questions, comments, rants and raves can be posted to the official fish&#xA;mailing list at https://lists.sourceforge.net/lists/listinfo/fish-users&#xA;or join us on our `matrix&#xA;channel &amp;lt;https://matrix.to/#/#fish-shell:matrix.org&amp;gt;`__. Or use the `fish tag&#xA;on Unix &amp;amp; Linux Stackexchange &amp;lt;https://unix.stackexchange.com/questions/tagged/fish&amp;gt;`__.&#xA;There is also a fish tag on Stackoverflow, but it is typically a poor fit.&#xA;&#xA;Found a bug? Have an awesome idea? Please `open an&#xA;issue &amp;lt;https://github.com/fish-shell/fish-shell/issues/new&amp;gt;`__.&#xA;&#xA;.. |Build Status| image:: https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg&#xA;   :target: https://github.com/fish-shell/fish-shell/actions&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>XAMPPRocky/tokei</title>
    <updated>2023-12-03T01:57:29Z</updated>
    <id>tag:github.com,2023-12-03:/XAMPPRocky/tokei</id>
    <link href="https://github.com/XAMPPRocky/tokei" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Count your code, quickly.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tokei (&lt;a href=&#34;https://en.wiktionary.org/wiki/%E6%99%82%E8%A8%88&#34;&gt;時計&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XAMPPRocky/tokei/actions?query=workflow%3A%22Mean+Bean+CI%22&#34;&gt;&lt;img src=&#34;https://github.com/XAMPPRocky/tokei/workflows/Mean%20Bean%20CI/badge.svg?sanitize=true&#34; alt=&#34;Mean Bean CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XAMPPRocky/tokei/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/XAMPPRocky/tokei/help%20wanted?color=green&#34; alt=&#34;Help Wanted&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XAMPPRocky/tokei&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/XAMPPRocky/tokei?category=code&#34; alt=&#34;Lines Of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/tokei/&#34;&gt;&lt;img src=&#34;https://docs.rs/tokei/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/crates/d/tokei?label=downloads%20%28crates.io%29&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/xampprocky/tokei/total?label=downloads%20%28GH%29&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/homebrew/installs/dy/tokei?color=brightgreen&amp;amp;label=downloads%20%28brew%29&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tokei is a program that displays statistics about your code. Tokei will show the number of files, total lines within those files and code, comments, and blanks grouped by language.&lt;/p&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chinanf-boy/tokei-zh#%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80&#34;&gt;中文&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&#xA; Language            Files        Lines         Code     Comments       Blanks&#xA;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&#xA; BASH                    4           49           30           10            9&#xA; JSON                    1         1332         1332            0            0&#xA; Shell                   1           49           38            1           10&#xA; TOML                    2           77           64            4            9&#xA;───────────────────────────────────────────────────────────────────────────────&#xA; Markdown                5         1355            0         1074          281&#xA; |- JSON                 1           41           41            0            0&#xA; |- Rust                 2           53           42            6            5&#xA; |- Shell                1           22           18            0            4&#xA; (Total)                           1471          101         1080          290&#xA;───────────────────────────────────────────────────────────────────────────────&#xA; Rust                   19         3416         2840          116          460&#xA; |- Markdown            12          351            5          295           51&#xA; (Total)                           3767         2845          411          511&#xA;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&#xA; Total                  32         6745         4410         1506          829&#xA;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.rs/tokei&#34;&gt;API Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#package-managers&#34;&gt;Package Managers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#how-to-use-tokei&#34;&gt;How to use Tokei&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#badges&#34;&gt;Badges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#supported-languages&#34;&gt;Supported Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#common-issues&#34;&gt;Common Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#canonical-source&#34;&gt;Canonical Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#copyright-and-license&#34;&gt;Copyright and License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokei is &lt;strong&gt;very fast&lt;/strong&gt;, and is able to count millions of lines of code in seconds. Check out the &lt;a href=&#34;https://github.com/XAMPPRocky/tokei/releases/v11.0.0&#34;&gt;11.0.0 release&lt;/a&gt; to see how Tokei&#39;s speed compares to others.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokei is &lt;strong&gt;accurate&lt;/strong&gt;, Tokei correctly handles multi line comments, nested comments, and not counting comments that are in strings. Providing an accurate code statistics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokei has huge range of languages, supporting over &lt;strong&gt;150&lt;/strong&gt; languages, and their various extensions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokei can output in multiple formats(&lt;strong&gt;CBOR&lt;/strong&gt;, &lt;strong&gt;JSON&lt;/strong&gt;, &lt;strong&gt;YAML&lt;/strong&gt;) allowing Tokei&#39;s output to be easily stored, and reused. These can also be reused in tokei combining a previous run&#39;s statistics with another set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokei is available on &lt;strong&gt;Mac&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt;, and &lt;strong&gt;Windows&lt;/strong&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/#installation&#34;&gt;installation instructions&lt;/a&gt; for how to get Tokei on your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokei is also a &lt;strong&gt;library&lt;/strong&gt; allowing you to easily integrate it with other projects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokei comes with and without color. Set the env variable NO_COLOR to 1, and it&#39;ll be black and white.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Package Managers&lt;/h3&gt; &#xA;&lt;h4&gt;Unix&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Alpine Linux (since 3.13)&#xA;apk add tokei&#xA;# Arch Linux&#xA;pacman -S tokei&#xA;# Cargo&#xA;cargo install tokei&#xA;# Conda&#xA;conda install -c conda-forge tokei&#xA;# Fedora&#xA;sudo dnf install tokei&#xA;# FreeBSD&#xA;pkg install tokei&#xA;# NetBSD&#xA;pkgin install tokei&#xA;# Nix/NixOS&#xA;nix-env -i tokei&#xA;# OpenSUSE&#xA;sudo zypper install tokei&#xA;# Void Linux&#xA;sudo xbps-install tokei&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Homebrew&#xA;brew install tokei&#xA;# MacPorts&#xA;sudo port selfupdate&#xA;sudo port install tokei&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Winget&#xA;winget install XAMPPRocky.tokei&#xA;# Scoop&#xA;scoop install tokei&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;h4&gt;Downloading&lt;/h4&gt; &#xA;&lt;p&gt;You can download prebuilt binaries in the &lt;a href=&#34;https://github.com/XAMPPRocky/tokei/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;You can also build and install from source (requires the latest stable &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt; compiler.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo install --git https://github.com/XAMPPRocky/tokei.git tokei&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Tokei has a &lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/tokei.example.toml&#34;&gt;configuration&lt;/a&gt; file that allows you to change default behaviour. The file can be named &lt;code&gt;tokei.toml&lt;/code&gt; or &lt;code&gt;.tokeirc&lt;/code&gt;. Currently tokei looks for this file in three different places. The current directory, your home directory, and your configuration directory.&lt;/p&gt; &#xA;&lt;h2&gt;How to use Tokei&lt;/h2&gt; &#xA;&lt;h4&gt;Basic usage&lt;/h4&gt; &#xA;&lt;p&gt;This is the basic way to use tokei. Which will report on the code in &lt;code&gt;./foo&lt;/code&gt; and all subfolders.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple folders&lt;/h4&gt; &#xA;&lt;p&gt;To have tokei report on multiple folders in the same call simply add a comma, or a space followed by another path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo ./bar ./baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo, ./bar, ./baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Excluding folders&lt;/h4&gt; &#xA;&lt;p&gt;Tokei will respect all &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;.ignore&lt;/code&gt; files, and you can use the &lt;code&gt;--exclude&lt;/code&gt; option to exclude any additional files. The &lt;code&gt;--exclude&lt;/code&gt; flag has the same semantics as &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo --exclude *.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Paths to exclude can also be listed in a &lt;code&gt;.tokeignore&lt;/code&gt; file, using the same &lt;a href=&#34;https://git-scm.com/docs/gitignore&#34;&gt;syntax&lt;/a&gt; as .gitignore files.&lt;/p&gt; &#xA;&lt;h4&gt;Sorting output&lt;/h4&gt; &#xA;&lt;p&gt;By default tokei sorts alphabetically by language name, however using &lt;code&gt;--sort&lt;/code&gt; tokei can also sort by any of the columns.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;blanks, code, comments, lines&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo --sort code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Outputting file statistics&lt;/h4&gt; &#xA;&lt;p&gt;By default tokei only outputs the total of the languages, and using &lt;code&gt;--files&lt;/code&gt; flag tokei can also output individual file statistics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo --files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Outputting into different formats&lt;/h4&gt; &#xA;&lt;p&gt;Tokei normally outputs into a nice human readable format designed for terminals. There is also using the &lt;code&gt;--output&lt;/code&gt; option various other formats that are more useful for bringing the data into another program.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This version of tokei was compiled without any serialization formats, to enable serialization, reinstall tokei with the features flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  ALL:&#xA;  cargo install tokei --features all&#xA;&#xA;  CBOR:&#xA;  cargo install tokei --features cbor&#xA;&#xA;  YAML:&#xA;  cargo install tokei --features yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Currently supported formats&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSON &lt;code&gt;--output json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;YAML &lt;code&gt;--output yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;CBOR &lt;code&gt;--output cbor&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo --output json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reading in stored formats&lt;/h4&gt; &#xA;&lt;p&gt;Tokei can also take in the outputted formats added in the previous results to its current run. Tokei can take either a path to a file, the format passed in as a value to the option, or from stdin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tokei ./foo --input ./stats.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;USAGE:&#xA;    tokei [FLAGS] [OPTIONS] [--] [input]...&#xA;&#xA;FLAGS:&#xA;    -f, --files               Will print out statistics on individual files.&#xA;    -h, --help                Prints help information&#xA;        --hidden              Count hidden files.&#xA;    -l, --languages           Prints out supported languages and their extensions.&#xA;        --no-ignore           Don&#39;t respect ignore files (.gitignore, .ignore, etc.). This implies --no-ignore-parent,&#xA;                              --no-ignore-dot, and --no-ignore-vcs.&#xA;        --no-ignore-dot       Don&#39;t respect .ignore and .tokeignore files, including those in parent directories.&#xA;        --no-ignore-parent    Don&#39;t respect ignore files (.gitignore, .ignore, etc.) in parent directories.&#xA;        --no-ignore-vcs       Don&#39;t respect VCS ignore files (.gitignore, .hgignore, etc.), including those in parent&#xA;                              directories.&#xA;    -V, --version             Prints version information&#xA;    -v, --verbose             Set log output level:&#xA;                                          1: to show unknown file extensions,&#xA;                                          2: reserved for future debugging,&#xA;                                          3: enable file level trace. Not recommended on multiple files&#xA;&#xA;OPTIONS:&#xA;    -c, --columns &amp;lt;columns&amp;gt;       Sets a strict column width of the output, only available for terminal output.&#xA;    -e, --exclude &amp;lt;exclude&amp;gt;...    Ignore all files &amp;amp; directories matching the pattern.&#xA;    -i, --input &amp;lt;file_input&amp;gt;      Gives statistics from a previous tokei run. Can be given a file path, or &#34;stdin&#34; to&#xA;                                  read from stdin.&#xA;    -o, --output &amp;lt;output&amp;gt;         Outputs Tokei in a specific format. Compile with additional features for more format&#xA;                                  support. [possible values: cbor, json, yaml]&#xA;    -s, --sort &amp;lt;sort&amp;gt;             Sort languages based on column [possible values: files, lines, blanks, code, comments]&#xA;    -t, --type &amp;lt;types&amp;gt;            Filters output by language type, separated by a comma. i.e. -t=Rust,Markdown&#xA;&#xA;ARGS:&#xA;    &amp;lt;input&amp;gt;...    The path(s) to the file or directory to be counted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Badges&lt;/h2&gt; &#xA;&lt;p&gt;Tokei has support for badges. For example &lt;a href=&#34;https://github.com/XAMPPRocky/tokei&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/XAMPPRocky/tokei&#34; alt=&#34;&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[![](https://tokei.rs/b1/github/XAMPPRocky/tokei)](https://github.com/XAMPPRocky/tokei).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tokei&#39;s URL scheme is as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://tokei.rs/b1/{host: values: github|gitlab}/{Repo Owner eg: XAMPPRocky}/{Repo name eg: tokei}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the badge will show the repo&#39;s LoC(&lt;em&gt;Lines of Code&lt;/em&gt;), you can also specify for it to show a different category, by using the &lt;code&gt;?category=&lt;/code&gt; query string. It can be either &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;blanks&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt;, &lt;code&gt;lines&lt;/code&gt;, &lt;code&gt;comments&lt;/code&gt;, Example show total lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[![](https://tokei.rs/b1/github/XAMPPRocky/tokei?category=lines)](https://github.com/XAMPPRocky/tokei).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server code hosted on tokei.rs is in &lt;a href=&#34;https://github.com/XAMPPRocky/tokei_rs&#34;&gt;XAMPPRocky/tokei_rs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dockerized version&lt;/h2&gt; &#xA;&lt;p&gt;Tokei is available in a small &lt;code&gt;alpine&lt;/code&gt;-based docker image, buildable through:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;earthly +docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once built, one can run the image with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v /path/to/analyze:/src tokei .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to simply analyze the current folder (linux):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v $(pwd):/src tokei .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Languages&lt;/h2&gt; &#xA;&lt;p&gt;If there is a language that you would to add to tokei feel free to make a pull request. Languages are defined in &lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/languages.json&#34;&gt;&lt;code&gt;languages.json&lt;/code&gt;&lt;/a&gt;, and you can read how to add and test your language in our &lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Abap&#xA;ActionScript&#xA;Ada&#xA;Agda&#xA;Alex&#xA;Alloy&#xA;Asn1&#xA;Asp&#xA;AspNet&#xA;Assembly&#xA;AssemblyGAS&#xA;ATS&#xA;Autoconf&#xA;AutoHotKey&#xA;Automake&#xA;AWK&#xA;Bash&#xA;Batch&#xA;Bazel&#xA;Bean&#xA;Bitbake&#xA;BrightScript&#xA;C&#xA;Cabal&#xA;Cassius&#xA;Ceylon&#xA;CHeader&#xA;Clojure&#xA;ClojureC&#xA;ClojureScript&#xA;CMake&#xA;Cobol&#xA;CoffeeScript&#xA;Cogent&#xA;ColdFusion&#xA;ColdFusionScript&#xA;Coq&#xA;Cpp&#xA;CppHeader&#xA;Crystal&#xA;CSharp&#xA;CShell&#xA;Css&#xA;Cuda&#xA;Cython&#xA;D&#xA;DAML&#xA;Dart&#xA;DeviceTree&#xA;Dhall&#xA;Dockerfile&#xA;DotNetResource&#xA;DreamMaker&#xA;Dust&#xA;Ebuild&#xA;EdgeDB&#xA;Edn&#xA;Elisp&#xA;Elixir&#xA;Elm&#xA;Elvish&#xA;EmacsDevEnv&#xA;Emojicode&#xA;Erlang&#xA;Factor&#xA;FEN&#xA;Fish&#xA;FlatBuffers&#xA;ForgeConfig&#xA;Forth&#xA;FortranLegacy&#xA;FortranModern&#xA;FreeMarker&#xA;FSharp&#xA;Fstar&#xA;GDB&#xA;GdScript&#xA;Gherkin&#xA;Gleam&#xA;Glsl&#xA;Go&#xA;Graphql&#xA;Groovy&#xA;Gwion&#xA;Hamlet&#xA;Handlebars&#xA;Happy&#xA;Haskell&#xA;Haxe&#xA;Hcl&#xA;Hex&#xA;Hlsl&#xA;HolyC&#xA;Html&#xA;Hy&#xA;Idris&#xA;Ini&#xA;IntelHex&#xA;Isabelle&#xA;Jai&#xA;Java&#xA;JavaScript&#xA;Jq&#xA;Json&#xA;Jsx&#xA;Julia&#xA;Julius&#xA;KakouneScript&#xA;Kotlin&#xA;Lean&#xA;Less&#xA;LinkerScript&#xA;Liquid&#xA;Lisp&#xA;LLVM&#xA;Logtalk&#xA;Lua&#xA;Lucius&#xA;Madlang&#xA;Makefile&#xA;Markdown&#xA;Meson&#xA;Mint&#xA;Mlatu&#xA;ModuleDef&#xA;MoonScript&#xA;MsBuild&#xA;Mustache&#xA;Nim&#xA;Nix&#xA;NotQuitePerl&#xA;NuGetConfig&#xA;Nushell&#xA;ObjectiveC&#xA;ObjectiveCpp&#xA;OCaml&#xA;Odin&#xA;Org&#xA;Oz&#xA;Pascal&#xA;Perl&#xA;Perl6&#xA;Pest&#xA;Php&#xA;Poke&#xA;Polly&#xA;Pony&#xA;PostCss&#xA;PowerShell&#xA;Processing&#xA;Prolog&#xA;Protobuf&#xA;PSL&#xA;PureScript&#xA;Python&#xA;Qcl&#xA;Qml&#xA;R&#xA;Racket&#xA;Rakefile&#xA;Razor&#xA;Renpy&#xA;ReStructuredText&#xA;RON&#xA;RPMSpecfile&#xA;Ruby&#xA;RubyHtml&#xA;Rust&#xA;Sass&#xA;Scala&#xA;Scheme&#xA;Scons&#xA;Sh&#xA;ShaderLab&#xA;Sml&#xA;Solidity&#xA;SpecmanE&#xA;Spice&#xA;Sql&#xA;SRecode&#xA;Stratego&#xA;Svelte&#xA;Svg&#xA;Swift&#xA;Swig&#xA;SystemVerilog&#xA;Tcl&#xA;Tex&#xA;Text&#xA;Thrift&#xA;Toml&#xA;Tsx&#xA;Twig&#xA;TypeScript&#xA;UMPL&#xA;UnrealDeveloperMarkdown&#xA;UnrealPlugin&#xA;UnrealProject&#xA;UnrealScript&#xA;UnrealShader&#xA;UnrealShaderHeader&#xA;UrWeb&#xA;UrWebProject&#xA;Vala&#xA;VB6&#xA;VBScript&#xA;Velocity&#xA;Verilog&#xA;VerilogArgsFile&#xA;Vhdl&#xA;VimScript&#xA;VisualBasic&#xA;VisualStudioProject&#xA;VisualStudioSolution&#xA;Vue&#xA;WebAssembly&#xA;Wolfram&#xA;Xaml&#xA;XcodeConfig&#xA;Xml&#xA;XSL&#xA;Xtend&#xA;Yaml&#xA;ZenCode&#xA;Zig&#xA;Zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Common issues&lt;/h2&gt; &#xA;&lt;h3&gt;Tokei says I have a lot of D code, but I know there is no D code!&lt;/h3&gt; &#xA;&lt;p&gt;This is likely due to &lt;code&gt;gcc&lt;/code&gt; generating &lt;code&gt;.d&lt;/code&gt; files. Until the D people decide on a different file extension, you can always exclude &lt;code&gt;.d&lt;/code&gt; files using the &lt;code&gt;-e --exclude&lt;/code&gt; flag like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tokei . -e *.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Canonical Source&lt;/h2&gt; &#xA;&lt;p&gt;The canonical source of this repo is hosted on &lt;a href=&#34;https://github.com/XAMPPRocky/tokei&#34;&gt;GitHub&lt;/a&gt;. If you have a GitHub account, please make your issues, and pull requests there.&lt;/p&gt; &#xA;&lt;h2&gt;Related Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/laixintao/tokei-pie&#34;&gt;tokei-pie&lt;/a&gt;: Render tokei&#39;s output to interactive sunburst chart.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;(C) Copyright 2015 by XAMPPRocky and contributors&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/XAMPPRocky/tokei/graphs/contributors&#34;&gt;the graph&lt;/a&gt; for a full list of contributors.&lt;/p&gt; &#xA;&lt;p&gt;Tokei is distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/LICENCE-APACHE&#34;&gt;LICENCE-APACHE&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/XAMPPRocky/tokei/master/LICENCE-MIT&#34;&gt;LICENCE-MIT&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Morganamilo/paru</title>
    <updated>2023-12-03T01:57:29Z</updated>
    <id>tag:github.com,2023-12-03:/Morganamilo/paru</id>
    <link href="https://github.com/Morganamilo/paru" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feature packed AUR helper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Paru&lt;/h1&gt; &#xA;&lt;p&gt;Feature packed AUR helper&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/paru/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/paru?color=1793d1&amp;amp;label=paru&amp;amp;logo=arch-linux&amp;amp;style=for-the-badge&#34; alt=&#34;paru&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/paru-bin/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/paru-bin?color=1793d1&amp;amp;label=paru-bin&amp;amp;logo=arch-linux&amp;amp;style=for-the-badge&#34; alt=&#34;paru-bin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/paru-git/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/paru-git?color=1793d1&amp;amp;label=paru-git&amp;amp;logo=arch-linux&amp;amp;style=for-the-badge&#34; alt=&#34;paru-git&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Paru is your standard pacman wrapping AUR helper with lots of features and minimal interaction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/sEh1ZpZZUgXUsgqKxuDdhpdEE&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/sEh1ZpZZUgXUsgqKxuDdhpdEE.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S --needed base-devel&#xA;git clone https://aur.archlinux.org/paru.git&#xA;cd paru&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Morganamilo/paru/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;General Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Man pages&lt;/strong&gt;: For documentation on paru&#39;s options and config file see &lt;code&gt;paru(8)&lt;/code&gt; and &lt;code&gt;paru.conf(5)&lt;/code&gt; respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Color&lt;/strong&gt;: Paru only enables color if color is enabled in pacman. Enable &lt;code&gt;color&lt;/code&gt; in your &lt;code&gt;pacman.conf&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;File based review&lt;/strong&gt;: To get a more advanced review process enable &lt;code&gt;FileManager&lt;/code&gt; with your file manager of choice in &lt;code&gt;paru.conf&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flip search order&lt;/strong&gt;: To get search results to start at the bottom and go upwards, enable &lt;code&gt;BottomUp&lt;/code&gt; in &lt;code&gt;paru.conf&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Editing PKGBUILDs&lt;/strong&gt;: When editing PKGBUILDs, you can commit your changes to make them permanent. When the package is upgraded, &lt;code&gt;git&lt;/code&gt; will try to merge your changes with upstream&#39;s.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;PKGBUILD syntax highlighting&lt;/strong&gt;: You can install &lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;&lt;code&gt;bat&lt;/code&gt;&lt;/a&gt; to enable syntax highlighting during PKGBUILD review.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tracking -git packages&lt;/strong&gt;: Paru tracks -git package by monitoring the upstream repository. Paru can only do this for packages that paru itself installed. &lt;code&gt;paru --gendb&lt;/code&gt; will make paru aware of packages it did not install.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;paru &amp;lt;target&amp;gt;&lt;/code&gt; -- Interactively search and install &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru&lt;/code&gt; -- Alias for &lt;code&gt;paru -Syu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru -S &amp;lt;target&amp;gt;&lt;/code&gt; -- Install a specific package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru -Sua&lt;/code&gt; -- Upgrade AUR packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru -Qua&lt;/code&gt; -- Print available AUR updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru -G &amp;lt;target&amp;gt;&lt;/code&gt; -- Download the PKGBUILD and related files of &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru -Gp &amp;lt;target&amp;gt;&lt;/code&gt; -- Print the PKGBUILD of &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru -Gc &amp;lt;target&amp;gt;&lt;/code&gt; -- Print the AUR comments of &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru --gendb&lt;/code&gt; -- Generate the devel database for tracking &lt;code&gt;*-git&lt;/code&gt; packages. This is only needed when you initially start using paru.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;paru -Bi .&lt;/code&gt; -- Build and install a PKGBUILD in the current directory.&lt;/p&gt; &#xA;&lt;h2&gt;IRC&lt;/h2&gt; &#xA;&lt;p&gt;Paru now has an IRC. #paru on &lt;a href=&#34;https://libera.chat/&#34;&gt;Libera Chat&lt;/a&gt;. Feel free to join for discussion and help with paru.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Paru is not an official tool. If paru can&#39;t build a package, you should first check if makepkg can successfully build the package. If it can&#39;t, then you should report the issue to the maintainer. Otherwise, it is likely an issue with paru and should be reported here.&lt;/p&gt;</summary>
  </entry>
</feed>