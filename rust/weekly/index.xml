<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-06T01:45:35Z</updated>
  <subtitle>Weekly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zama-ai/tfhe-rs</title>
    <updated>2025-07-06T01:45:35Z</updated>
    <id>tag:github.com,2025-07-06:/zama-ai/tfhe-rs</id>
    <link href="https://github.com/zama-ai/tfhe-rs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TFHE-rs: A Pure Rust implementation of the TFHE Scheme for Boolean and Integer Arithmetics Over Encrypted Data.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- product name logo --&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/zama-ai/tfhe-rs/assets/157474013/5283e0ba-da1e-43af-9f2a-c5221367a12b&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/zama-ai/tfhe-rs/assets/157474013/b94a8c96-7595-400b-9311-70765c706955&#34;&gt; &#xA;  &lt;img width=&#34;600&#34; alt=&#34;Zama TFHE-rs&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/zama-ai/tfhe-rs-handbook/raw/main/tfhe-rs-handbook.pdf&#34;&gt; 📃 Read Handbook&lt;/a&gt; |&lt;a href=&#34;https://docs.zama.ai/tfhe-rs&#34;&gt; 📒 Documentation&lt;/a&gt; | &lt;a href=&#34;https://zama.ai/community&#34;&gt; 💛 Community support&lt;/a&gt; | &lt;a href=&#34;https://github.com/zama-ai/awesome-zama&#34;&gt; 📚 FHE resources by Zama&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/zama-ai/tfhe-rs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/zama-ai/tfhe-rs?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD--3--Clause--Clear-%23ffb243?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zama-ai/bounty-program&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contribute-Zama%20Bounty%20Program-%23ffd208?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slsa.dev&#34;&gt;&lt;img alt=&#34;SLSA 3&#34; src=&#34;https://slsa.dev/images/gh-badge-level3.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;h3&gt;What is TFHE-rs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;TFHE-rs&lt;/strong&gt; is a pure Rust implementation of TFHE for boolean and integer arithmetics over encrypted data.&lt;/p&gt; &#xA;&lt;p&gt;It includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;strong&gt;Rust&lt;/strong&gt; API&lt;/li&gt; &#xA; &lt;li&gt;a &lt;strong&gt;C&lt;/strong&gt; API&lt;/li&gt; &#xA; &lt;li&gt;and a &lt;strong&gt;client-side WASM&lt;/strong&gt; API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TFHE-rs is designed for developers and researchers who want full control over what they can do with TFHE, while not having to worry about the low-level implementation. The goal is to have a stable, simple, high-performance, and production-ready library for all the advanced features of TFHE. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Main features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low-level cryptographic library&lt;/strong&gt; that implements Zama’s variant of TFHE, including programmable bootstrapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Implementation of the original TFHE boolean API&lt;/strong&gt; that can be used as a drop-in replacement for other TFHE libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Short integer API&lt;/strong&gt; that enables exact, unbounded FHE integer arithmetics with up to 8 bits of message space&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Size-efficient public key encryption&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ciphertext and server key compression&lt;/strong&gt; for efficient data transfer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Rust API, C bindings to the Rust High-Level API, and client-side Javascript API using WASM&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Learn more about TFHE-rs features in the &lt;a href=&#34;https://docs.zama.ai/tfhe-rs/readme&#34;&gt;documentation&lt;/a&gt;.&lt;/em&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#cargotoml-configuration&#34;&gt;Cargo.toml configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#a-simple-example&#34;&gt;A simple example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#tfhe-deep-dive&#34;&gt;TFHE deep dive&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#working-with-tfhe-rs&#34;&gt;Working with TFHE-rs&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#disclaimers&#34;&gt;Disclaimers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#citations&#34;&gt;Citations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Important] &lt;strong&gt;TFHE-rs&lt;/strong&gt; released its first stable version v1.0.0 in February 2025, stabilizing the high-level API for the x86 CPU backend.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cargo.toml configuration&lt;/h3&gt; &#xA;&lt;p&gt;To use the latest version of &lt;code&gt;TFHE-rs&lt;/code&gt; in your project, you first need to add it as a dependency in your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;tfhe = { version = &#34;*&#34;, features = [&#34;boolean&#34;, &#34;shortint&#34;, &#34;integer&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] Note: You need to use Rust version &amp;gt;= 1.84 to compile TFHE-rs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] Note: AArch64-based machines are not supported for Windows as it&#39;s currently missing an entropy source to be able to seed the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator&#34;&gt;CSPRNGs&lt;/a&gt; used in TFHE-rs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#about&#34;&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;A simple example&lt;/h3&gt; &#xA;&lt;p&gt;Here is a full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use tfhe::prelude::*;&#xA;use tfhe::{generate_keys, set_server_key, ConfigBuilder, FheUint32, FheUint8};&#xA;&#xA;fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    // Basic configuration to use homomorphic integers&#xA;    let config = ConfigBuilder::default().build();&#xA;&#xA;    // Key generation&#xA;    let (client_key, server_keys) = generate_keys(config);&#xA;&#xA;    let clear_a = 1344u32;&#xA;    let clear_b = 5u32;&#xA;    let clear_c = 7u8;&#xA;&#xA;    // Encrypting the input data using the (private) client_key&#xA;    // FheUint32: Encrypted equivalent to u32&#xA;    let mut encrypted_a = FheUint32::try_encrypt(clear_a, &amp;amp;client_key)?;&#xA;    let encrypted_b = FheUint32::try_encrypt(clear_b, &amp;amp;client_key)?;&#xA;&#xA;    // FheUint8: Encrypted equivalent to u8&#xA;    let encrypted_c = FheUint8::try_encrypt(clear_c, &amp;amp;client_key)?;&#xA;&#xA;    // On the server side:&#xA;    set_server_key(server_keys);&#xA;&#xA;    // Clear equivalent computations: 1344 * 5 = 6720&#xA;    let encrypted_res_mul = &amp;amp;encrypted_a * &amp;amp;encrypted_b;&#xA;&#xA;    // Clear equivalent computations: 6720 &amp;gt;&amp;gt; 5 = 210&#xA;    encrypted_a = &amp;amp;encrypted_res_mul &amp;gt;&amp;gt; &amp;amp;encrypted_b;&#xA;&#xA;    // Clear equivalent computations: let casted_a = a as u8;&#xA;    let casted_a: FheUint8 = encrypted_a.cast_into();&#xA;&#xA;    // Clear equivalent computations: min(210, 7) = 7&#xA;    let encrypted_res_min = &amp;amp;casted_a.min(&amp;amp;encrypted_c);&#xA;&#xA;    // Operation between clear and encrypted data:&#xA;    // Clear equivalent computations: 7 &amp;amp; 1 = 1&#xA;    let encrypted_res = encrypted_res_min &amp;amp; 1_u8;&#xA;&#xA;    // Decrypting on the client side:&#xA;    let clear_res: u8 = encrypted_res.decrypt(&amp;amp;client_key);&#xA;    assert_eq!(clear_res, 1_u8);&#xA;&#xA;    Ok(())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run this code, use the following command:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;code&gt; cargo run --release &lt;/code&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] Note that when running code that uses &lt;code&gt;TFHE-rs&lt;/code&gt;, it is highly recommended to run in release mode with cargo&#39;s &lt;code&gt;--release&lt;/code&gt; flag to have the best performances possible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Find an example with more explanations in &lt;a href=&#34;https://docs.zama.ai/tfhe-rs/get-started/quick_start&#34;&gt;this part of the documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#about&#34;&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;TFHE-rs Handbook&lt;/h3&gt; &#xA;&lt;p&gt;A document containing scientific and technical details about algorithms implemented into the library is available here: &lt;a href=&#34;https://github.com/zama-ai/tfhe-rs-handbook/raw/main/tfhe-rs-handbook.pdf&#34;&gt;TFHE-rs: A (Practical) Handbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TFHE deep dive&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/tfhe-deep-dive-part-1&#34;&gt;TFHE Deep Dive - Part I - Ciphertext types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/tfhe-deep-dive-part-2&#34;&gt;TFHE Deep Dive - Part II - Encodings and linear leveled operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/tfhe-deep-dive-part-3&#34;&gt;TFHE Deep Dive - Part III - Key switching and leveled multiplications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/tfhe-deep-dive-part-4&#34;&gt;TFHE Deep Dive - Part IV - Programmable Bootstrapping&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/video-tutorial-implement-signed-integers-ssing-tfhe-rs&#34;&gt;[Video tutorial] Implement signed integers using TFHE-rs &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.zama.ai/tfhe-rs/tutorials/parity_bit&#34;&gt;Homomorphic parity bit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.zama.ai/tfhe-rs/tutorials/ascii_fhe_string&#34;&gt;Homomorphic case changing on Ascii string&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/boolean-sha256-tfhe-rs&#34;&gt;Boolean SHA256 with TFHE-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/dark-market-tfhe-rs&#34;&gt;Dark market with TFHE-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zama.ai/post/regex-engine-tfhe-rs&#34;&gt;Regular expression engine with TFHE-rs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Explore more useful resources in &lt;a href=&#34;https://docs.zama.ai/tfhe-rs/tutorials&#34;&gt;TFHE-rs tutorials&lt;/a&gt; and &lt;a href=&#34;https://github.com/zama-ai/awesome-zama&#34;&gt;Awesome Zama repo&lt;/a&gt;&lt;/em&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Full, comprehensive documentation is available here: &lt;a href=&#34;https://docs.zama.ai/tfhe-rs&#34;&gt;https://docs.zama.ai/tfhe-rs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#about&#34;&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Working with TFHE-rs&lt;/h2&gt; &#xA;&lt;h3&gt;Disclaimers&lt;/h3&gt; &#xA;&lt;h4&gt;Security estimation&lt;/h4&gt; &#xA;&lt;p&gt;Security estimations are done using the &lt;a href=&#34;https://github.com/malb/lattice-estimator&#34;&gt;Lattice Estimator&lt;/a&gt; with &lt;code&gt;red_cost_model = reduction.RC.BDGL16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When a new update is published in the Lattice Estimator, we update parameters accordingly.&lt;/p&gt; &#xA;&lt;h3&gt;Security model&lt;/h3&gt; &#xA;&lt;p&gt;By default, the parameter sets used in the High-Level API with the x86 CPU backend have a failure probability $\le 2^{128}$ to securely work in the IND-CPA^D model using the algorithmic techniques provided in our code base [1]. If you want to work within the IND-CPA security model, which is less strict than the IND-CPA-D model, the parameter sets can easily be changed and would have slightly better performance. More details can be found in the &lt;a href=&#34;https://docs.zama.ai/tfhe-rs&#34;&gt;TFHE-rs documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default parameters used in the High-Level API with the GPU backend are chosen considering the IND-CPA security model, and are selected with a bootstrapping failure probability fixed at $p_{error} \le 2^{-64}$. In particular, it is assumed that the results of decrypted computations are not shared by the secret key owner with any third parties, as such an action can lead to leakage of the secret encryption key. If you are designing an application where decryptions must be shared, you will need to craft custom encryption parameters which are chosen in consideration of the IND-CPA^D security model [2].&lt;/p&gt; &#xA;&lt;p&gt;[1] Bernard, Olivier, et al. &#34;Drifting Towards Better Error Probabilities in Fully Homomorphic Encryption Schemes&#34;. &lt;a href=&#34;https://eprint.iacr.org/2024/1718.pdf&#34;&gt;https://eprint.iacr.org/2024/1718.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[2] Li, Baiyu, et al. &#34;Securing approximate homomorphic encryption using differential privacy.&#34; Annual International Cryptology Conference. Cham: Springer Nature Switzerland, 2022. &lt;a href=&#34;https://eprint.iacr.org/2022/816.pdf&#34;&gt;https://eprint.iacr.org/2022/816.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Side-channel attacks&lt;/h4&gt; &#xA;&lt;p&gt;Mitigation for side-channel attacks has not yet been implemented in TFHE-rs, and will be released in upcoming versions. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Citations&lt;/h3&gt; &#xA;&lt;p&gt;To cite TFHE-rs in academic papers, please use the following entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@Misc{TFHE-rs,&#xA;  title={{TFHE-rs: A Pure Rust Implementation of the TFHE Scheme for Boolean and Integer Arithmetics Over Encrypted Data}},&#xA;  author={Zama},&#xA;  year={2022},&#xA;  note={\url{https://github.com/zama-ai/tfhe-rs}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to contribute to TFHE-rs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zama-ai/tfhe-rs/issues/new/choose&#34;&gt;Open issues&lt;/a&gt; to report bugs and typos, or to suggest new ideas&lt;/li&gt; &#xA; &lt;li&gt;Request to become an official contributor by emailing &lt;a href=&#34;mailto:hello@zama.ai&#34;&gt;hello@zama.ai&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Becoming an approved contributor involves signing our Contributor License Agreement (CLA). Only approved contributors can send pull requests, so please make sure to get in touch before you do! &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This software is distributed under the &lt;strong&gt;BSD-3-Clause-Clear&lt;/strong&gt; license. Read &lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/LICENSE&#34;&gt;this&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;FAQ&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Is Zama’s technology free to use?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Zama’s libraries are free to use under the BSD 3-Clause Clear license only for development, research, prototyping, and experimentation purposes. However, for any commercial use of Zama&#39;s open source code, companies must purchase Zama’s commercial patent license.&lt;/p&gt; &#xA; &lt;p&gt;Everything we do is open source and we are very transparent on what it means for our users, you can read more about how we monetize our open source products at Zama in &lt;a href=&#34;https://www.zama.ai/post/open-source&#34;&gt;this blogpost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;What do I need to do if I want to use Zama’s technology for commercial purposes?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To commercially use Zama’s technology you need to be granted Zama’s patent license. Please contact us &lt;a href=&#34;mailto:hello@zama.ai&#34;&gt;hello@zama.ai&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do you file IP on your technology?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Yes, all Zama’s technologies are patented.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can you customize a solution for my specific use case?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We are open to collaborating and advancing the FHE space with our partners. If you have specific needs, please email us at &lt;a href=&#34;mailto:hello@zama.ai&#34;&gt;hello@zama.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#about&#34;&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://community.zama.ai&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/zama-ai/tfhe-rs/assets/157474013/08656d0a-3f44-4126-b8b6-8c601dff5380&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/zama-ai/tfhe-rs/assets/157474013/1c9c9308-50ac-4aab-a4b9-469bb8c536a4&#34;&gt; &#xA;  &lt;img alt=&#34;Support&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;p&gt;🌟 If you find this project helpful or interesting, please consider giving it a star on GitHub! Your support helps to grow the community and motivates further development.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zama-ai/tfhe-rs/main/#about&#34;&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tursodatabase/turso</title>
    <updated>2025-07-06T01:45:35Z</updated>
    <id>tag:github.com,2025-07-06:/tursodatabase/turso</id>
    <link href="https://github.com/tursodatabase/turso" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turso Database is a project to build the next evolution of SQLite.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tursodatabase/turso/main/turso.png&#34; alt=&#34;Turso Database&#34; width=&#34;800&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Turso Database&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Turso Database&lt;/i&gt; is an in-process SQL database, compatible with SQLite. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;Build Status&#34; target=&#34;_blank&#34; href=&#34;https://github.com/tursodatabase/turso/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/tursodatabase/turso/rust.yml?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Releases&#34; target=&#34;_blank&#34; href=&#34;https://github.com/tursodatabase/turso/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/tursodatabase/turso?style=flat-square&amp;amp;color=9CF&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Rust&#34; target=&#34;_blank&#34; href=&#34;https://crates.io/crates/turso&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/crates/v/turso&#34;&gt;&lt;/a&gt; &lt;a title=&#34;JavaScript&#34; target=&#34;_blank&#34; href=&#34;https://www.npmjs.com/package/@tursodatabase/turso&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/npm/v/@tursodatabase/turso&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Python&#34; target=&#34;_blank&#34; href=&#34;https://pypi.org/project/pyturso/&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/pyturso&#34;&gt;&lt;/a&gt; &lt;a title=&#34;MIT&#34; target=&#34;_blank&#34; href=&#34;https://github.com/tursodatabase/turso/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-orange.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a title=&#34;GitHub Pull Requests&#34; target=&#34;_blank&#34; href=&#34;https://github.com/tursodatabase/turso/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr-closed/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9966&#34;&gt;&lt;/a&gt; &lt;a title=&#34;GitHub Commits&#34; target=&#34;_blank&#34; href=&#34;https://github.com/tursodatabase/turso/commits/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/tursodatabase/turso.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Last Commit&#34; target=&#34;_blank&#34; href=&#34;https://github.com/tursodatabase/turso/commits/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9900&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;Developer&#39;s Discord&#34; target=&#34;_blank&#34; href=&#34;https://discord.gg/jgjmyYgHwB&#34;&gt;&lt;img alt=&#34;Chat with the Core Developers on Discord&#34; src=&#34;https://img.shields.io/discord/1258658826257961020?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Core%20Developers&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;Users&#39;s Discord&#34; target=&#34;_blank&#34; href=&#34;https://tur.so/discord&#34;&gt;&lt;img alt=&#34;Chat with other users of Turso (and Turso Cloud) on Discord&#34; src=&#34;https://img.shields.io/discord/933071162680958986?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Users&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features and Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Turso Database is a &lt;em&gt;work-in-progress&lt;/em&gt;, in-process OLTP database engine library written in Rust that has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQLite compatibility&lt;/strong&gt; [&lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/turso/main/COMPAT.md&#34;&gt;doc&lt;/a&gt;] for SQL dialect, file formats, and the C API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Language bindings&lt;/strong&gt; for JavaScript/WebAssembly, Rust, Go, Python, and &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asynchronous I/O&lt;/strong&gt; support on Linux with &lt;code&gt;io_uring&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS support&lt;/strong&gt; for Linux, macOS, and Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the future, we will be also working on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;BEGIN CONCURRENT&lt;/code&gt;&lt;/strong&gt; for improved write throughput.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Indexing for vector search&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Improved schema management&lt;/strong&gt; including better &lt;code&gt;ALTER&lt;/code&gt; support and strict column types by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/turso/main/docs/manual.md&#34;&gt;Turso Database Manual&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;💻 Command Line&lt;/summary&gt; &#xA; &lt;br&gt; You can install the latest `turso` release with: &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -LsSf \&#xA;  https://github.com/tursodatabase/turso/releases/latest/download/turso_cli-installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then launch the shell to execute SQL statements:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Turso&#xA;Enter &#34;.help&#34; for usage hints.&#xA;Connected to a transient in-memory database.&#xA;Use &#34;.open FILENAME&#34; to reopen on a persistent database&#xA;turso&amp;gt; CREATE TABLE users (id INT PRIMARY KEY, username TEXT);&#xA;turso&amp;gt; INSERT INTO users VALUES (1, &#39;alice&#39;);&#xA;turso&amp;gt; INSERT INTO users VALUES (2, &#39;bob&#39;);&#xA;turso&amp;gt; SELECT * FROM users;&#xA;1|alice&#xA;2|bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also build and run the latest development version with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🦀 Rust&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo add turso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example usage:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let db = Builder::new_local(&#34;sqlite.db&#34;).build().await?;&#xA;let conn = db.connect()?;&#xA;&#xA;let res = conn.query(&#34;SELECT * FROM users&#34;, ()).await?;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;✨ JavaScript&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;npm i @tursodatabase/turso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example usage:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Database } from &#39;@tursodatabase/turso&#39;;&#xA;&#xA;const db = new Database(&#39;sqlite.db&#39;);&#xA;const stmt = db.prepare(&#39;SELECT * FROM users&#39;);&#xA;const users = stmt.all();&#xA;console.log(users);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🐍 Python&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install pyturso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example usage:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import turso&#xA;&#xA;con = turso.connect(&#34;sqlite.db&#34;)&#xA;cur = con.cursor()&#xA;res = cur.execute(&#34;SELECT * FROM users&#34;)&#xA;print(res.fetchone())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🐹 Go&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Clone the repository&lt;/li&gt; &#xA;  &lt;li&gt;Build the library and set your LD_LIBRARY_PATH to include turso&#39;s target directory&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo build --package limbo-go&#xA;export LD_LIBRARY_PATH=/path/to/limbo/target/debug:$LD_LIBRARY_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Use the driver&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go get github.com/tursodatabase/turso&#xA;go install github.com/tursodatabase/turso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example usage:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;database/sql&#34;&#xA;    _ &#34;github.com/tursodatabase/turso&#34;&#xA;)&#xA;&#xA;conn, _ = sql.Open(&#34;sqlite3&#34;, &#34;sqlite.db&#34;)&#xA;defer conn.Close()&#xA;&#xA;stmt, _ := conn.Prepare(&#34;select * from users&#34;)&#xA;defer stmt.Close()&#xA;&#xA;rows, _ = stmt.Query()&#xA;for rows.Next() {&#xA;    var id int&#xA;    var username string&#xA;    _ := rows.Scan(&amp;amp;id, &amp;amp;username)&#xA;    fmt.Printf(&#34;User: ID: %d, Username: %s\n&#34;, id, username)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;☕️ Java&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;We integrated Turso Database into JDBC. For detailed instructions on how to use Turso Database with java, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java/README.md&#34;&gt;README.md under bindings/java&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to have you contribute to Turso Database! Please check out the &lt;a href=&#34;https://github.com/tursodatabase/turso/raw/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Is Turso Database ready for production use?&lt;/h3&gt; &#xA;&lt;p&gt;Turso Database is currently under heavy development and is &lt;strong&gt;not&lt;/strong&gt; ready for production use.&lt;/p&gt; &#xA;&lt;h3&gt;How is Turso Database different from Turso&#39;s libSQL?&lt;/h3&gt; &#xA;&lt;p&gt;Turso Database is a project to build the next evolution of SQLite in Rust, with a strong open contribution focus and features like native async support, vector search, and more. The libSQL project is also an attempt to evolve SQLite in a similar direction, but through a fork rather than a rewrite.&lt;/p&gt; &#xA;&lt;p&gt;Rewriting SQLite in Rust started as an unassuming experiment, and due to its incredible success, replaces libSQL as our intended direction. At this point, libSQL is production ready, Turso Database is not - although it is evolving rapidly. More details &lt;a href=&#34;https://turso.tech/blog/we-will-rewrite-sqlite-and-we-are-going-all-in&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pekka Enberg, Sasu Tarkoma, Jon Crowcroft Ashwin Rao (2024). Serverless Runtime / Database Co-Design With Asynchronous I/O. In &lt;em&gt;EdgeSys ‘24&lt;/em&gt;. &lt;a href=&#34;https://penberg.org/papers/penberg-edgesys24.pdf&#34;&gt;[PDF]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pekka Enberg, Sasu Tarkoma, and Ashwin Rao (2023). Towards Database and Serverless Runtime Co-Design. In &lt;em&gt;CoNEXT-SW ’23&lt;/em&gt;. [&lt;a href=&#34;https://penberg.org/papers/penberg-conext-sw-23.pdf&#34;&gt;PDF&lt;/a&gt;] [&lt;a href=&#34;https://penberg.org/papers/penberg-conext-sw-23-slides.pdf&#34;&gt;Slides&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://github.com/tursodatabase/turso/raw/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Turso Database by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;h2&gt;Partners&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the partners of Turso!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blacksmith.sh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tursodatabase/turso/main/assets/blacksmith.svg?sanitize=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://antithesis.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tursodatabase/turso/main/assets/antithesis.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the contributors to Turso Database!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/tursodatabase/turso/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=tursodatabase/turso&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>