<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-01T02:12:57Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BurntSushi/ripgrep</title>
    <updated>2023-08-01T02:12:57Z</updated>
    <id>tag:github.com,2023-08-01:/BurntSushi/ripgrep</id>
    <link href="https://github.com/BurntSushi/ripgrep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ripgrep recursively searches directories for a regex pattern while respecting your gitignore&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ripgrep (rg)&lt;/h2&gt; &#xA;&lt;p&gt;ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern. By default, ripgrep will respect gitignore rules and automatically skip hidden files/directories and binary files. (To disable all automatic filtering by default, use &lt;code&gt;rg -uuu&lt;/code&gt;.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for &lt;a href=&#34;https://github.com/BurntSushi/ripgrep/releases&#34;&gt;every release&lt;/a&gt;. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep/actions&#34;&gt;&lt;img src=&#34;https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/ripgrep&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/ripgrep.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/ripgrep/badges&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/ripgrep.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dual-licensed under MIT or the &lt;a href=&#34;https://unlicense.org&#34;&gt;UNLICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CHANGELOG&lt;/h3&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for a release history.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation quick links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/regex/1/regex/#syntax&#34;&gt;Regex syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file&#34;&gt;Configuration files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#complete&#34;&gt;Shell completions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Screenshot of search results&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://burntsushi.net/stuff/ripgrep1.png&#34;&gt;&lt;img src=&#34;https://burntsushi.net/stuff/ripgrep1.png&#34; alt=&#34;A screenshot of a sample search with ripgrep&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick examples comparing tools&lt;/h3&gt; &#xA;&lt;p&gt;This example searches the entire &lt;a href=&#34;https://github.com/BurntSushi/linux&#34;&gt;Linux kernel source tree&lt;/a&gt; (after running &lt;code&gt;make defconfig &amp;amp;&amp;amp; make -j8&lt;/code&gt;) for &lt;code&gt;[A-Z]+_SUSPEND&lt;/code&gt;, where all matches must be words. Timings were collected on a system with an Intel i7-6900K 3.2 GHz.&lt;/p&gt; &#xA;&lt;p&gt;Please remember that a single benchmark is never enough! See my &lt;a href=&#34;https://blog.burntsushi.net/ripgrep/&#34;&gt;blog post on ripgrep&lt;/a&gt; for a very detailed comparison with more benchmarks and analysis.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Line count&lt;/th&gt; &#xA;   &lt;th&gt;Time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ripgrep (Unicode)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rg -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;452&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.136s&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/git-grep.html&#34;&gt;git grep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;git grep -P -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;452&lt;/td&gt; &#xA;   &lt;td&gt;0.348s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Genivia/ugrep&#34;&gt;ugrep (Unicode)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ugrep -r --ignore-files --no-hidden -I -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;452&lt;/td&gt; &#xA;   &lt;td&gt;0.506s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;The Silver Searcher&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ag -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;452&lt;/td&gt; &#xA;   &lt;td&gt;0.654s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/git-grep.html&#34;&gt;git grep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LC_ALL=C git grep -E -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;452&lt;/td&gt; &#xA;   &lt;td&gt;1.150s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/beyondgrep/ack3&#34;&gt;ack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ack -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;452&lt;/td&gt; &#xA;   &lt;td&gt;4.054s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/git-grep.html&#34;&gt;git grep (Unicode)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 git grep -E -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;452&lt;/td&gt; &#xA;   &lt;td&gt;4.205s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s another benchmark on the same corpus as above that disregards gitignore files and searches with a whitelist instead. The corpus is the same as in the previous benchmark, and the flags passed to each command ensure that they are doing equivalent work:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Line count&lt;/th&gt; &#xA;   &lt;th&gt;Time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ripgrep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rg -uuu -tc -n -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;388&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.096s&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Genivia/ugrep&#34;&gt;ugrep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ugrep -r -n --include=&#39;*.c&#39; --include=&#39;*.h&#39; -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;388&lt;/td&gt; &#xA;   &lt;td&gt;0.493s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gnu.org/software/grep/&#34;&gt;GNU grep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;egrep -r -n --include=&#39;*.c&#39; --include=&#39;*.h&#39; -w &#39;[A-Z]+_SUSPEND&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;388&lt;/td&gt; &#xA;   &lt;td&gt;0.806s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And finally, a straight-up comparison between ripgrep, ugrep and GNU grep on a single large file cached in memory (~13GB, &lt;a href=&#34;http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz&#34;&gt;&lt;code&gt;OpenSubtitles.raw.en.gz&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Line count&lt;/th&gt; &#xA;   &lt;th&gt;Time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ripgrep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rg -w &#39;Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7882&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2.769s&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Genivia/ugrep&#34;&gt;ugrep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ugrep -w &#39;Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7882&lt;/td&gt; &#xA;   &lt;td&gt;6.802s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gnu.org/software/grep/&#34;&gt;GNU grep&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LC_ALL=en_US.UTF-8 egrep -w &#39;Sherlock [A-Z]\w+&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7882&lt;/td&gt; &#xA;   &lt;td&gt;9.027s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In the above benchmark, passing the &lt;code&gt;-n&lt;/code&gt; flag (for showing line numbers) increases the times to &lt;code&gt;3.423s&lt;/code&gt; for ripgrep and &lt;code&gt;13.031s&lt;/code&gt; for GNU grep. ugrep times are unaffected by the presence or absence of &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Why should I use ripgrep?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It can replace many use cases served by other search tools because it contains most of their features and is generally faster. (See &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/FAQ.md#posix4ever&#34;&gt;the FAQ&lt;/a&gt; for more details on whether ripgrep can truly replace grep.)&lt;/li&gt; &#xA; &lt;li&gt;Like other tools specialized to code search, ripgrep defaults to &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#recursive-search&#34;&gt;recursive search&lt;/a&gt; and does &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#automatic-filtering&#34;&gt;automatic filtering&lt;/a&gt;. Namely, ripgrep won&#39;t search files ignored by your &lt;code&gt;.gitignore&lt;/code&gt;/&lt;code&gt;.ignore&lt;/code&gt;/&lt;code&gt;.rgignore&lt;/code&gt; files, it won&#39;t search hidden files and it won&#39;t search binary files. Automatic filtering can be disabled with &lt;code&gt;rg -uuu&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ripgrep can &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#manual-filtering-file-types&#34;&gt;search specific types of files&lt;/a&gt;. For example, &lt;code&gt;rg -tpy foo&lt;/code&gt; limits your search to Python files and &lt;code&gt;rg -Tjs foo&lt;/code&gt; excludes JavaScript files from your search. ripgrep can be taught about new file types with custom matching rules.&lt;/li&gt; &#xA; &lt;li&gt;ripgrep supports many features found in &lt;code&gt;grep&lt;/code&gt;, such as showing the context of search results, searching multiple patterns, highlighting matches with color and full Unicode support. Unlike GNU grep, ripgrep stays fast while supporting Unicode (which is always on).&lt;/li&gt; &#xA; &lt;li&gt;ripgrep has optional support for switching its regex engine to use PCRE2. Among other things, this makes it possible to use look-around and backreferences in your patterns, which are not supported in ripgrep&#39;s default regex engine. PCRE2 support can be enabled with &lt;code&gt;-P/--pcre2&lt;/code&gt; (use PCRE2 always) or &lt;code&gt;--auto-hybrid-regex&lt;/code&gt; (use PCRE2 only if needed). An alternative syntax is provided via the &lt;code&gt;--engine (default|pcre2|auto-hybrid)&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;ripgrep has &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#replacements&#34;&gt;rudimentary support for replacements&lt;/a&gt;, which permit rewriting output based on what was matched.&lt;/li&gt; &#xA; &lt;li&gt;ripgrep supports &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#file-encoding&#34;&gt;searching files in text encodings&lt;/a&gt; other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more. (Some support for automatically detecting UTF-16 is provided. Other text encodings must be specifically specified with the &lt;code&gt;-E/--encoding&lt;/code&gt; flag.)&lt;/li&gt; &#xA; &lt;li&gt;ripgrep supports searching files compressed in a common format (brotli, bzip2, gzip, lz4, lzma, xz, or zstandard) with the &lt;code&gt;-z/--search-zip&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;ripgrep supports &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#preprocessor&#34;&gt;arbitrary input preprocessing filters&lt;/a&gt; which could be PDF text extraction, less supported decompression, decrypting, automatic encoding detection and so on.&lt;/li&gt; &#xA; &lt;li&gt;ripgrep can be configured via a &lt;a href=&#34;https://raw.githubusercontent.com/BurntSushi/ripgrep/master/GUIDE.md#configuration-file&#34;&gt;configuration file&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In other words, use ripgrep if you like speed, filtering by default, fewer bugs and Unicode support.&lt;/p&gt; &#xA;&lt;h3&gt;Why shouldn&#39;t I use ripgrep?&lt;/h3&gt; &#xA;&lt;p&gt;Despite initially not wanting to add every feature under the sun to ripgrep, over time, ripgrep has grown support for most features found in other file searching tools. This includes searching for results spanning across multiple lines, and opt-in support for PCRE2, which provides look-around and backreference support.&lt;/p&gt; &#xA;&lt;p&gt;At this point, the primary reasons not to use ripgrep probably consist of one or more of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need a portable and ubiquitous tool. While ripgrep works on Windows, macOS and Linux, it is not ubiquitous and it does not conform to any standard such as POSIX. The best tool for this job is good old grep.&lt;/li&gt; &#xA; &lt;li&gt;There still exists some other feature (or bug) not listed in this README that you rely on that&#39;s in another tool that isn&#39;t in ripgrep.&lt;/li&gt; &#xA; &lt;li&gt;There is a performance edge case where ripgrep doesn&#39;t do well where another tool does do well. (Please file a bug report!)&lt;/li&gt; &#xA; &lt;li&gt;ripgrep isn&#39;t possible to install on your machine or isn&#39;t available for your platform. (Please file a bug report!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Is it really faster than everything else?&lt;/h3&gt; &#xA;&lt;p&gt;Generally, yes. A large number of benchmarks with detailed analysis for each is &lt;a href=&#34;https://blog.burntsushi.net/ripgrep/&#34;&gt;available on my blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Summarizing, ripgrep is fast because:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is built on top of &lt;a href=&#34;https://github.com/rust-lang/regex&#34;&gt;Rust&#39;s regex engine&lt;/a&gt;. Rust&#39;s regex engine uses finite automata, SIMD and aggressive literal optimizations to make searching very fast. (PCRE2 support can be opted into with the &lt;code&gt;-P/--pcre2&lt;/code&gt; flag.)&lt;/li&gt; &#xA; &lt;li&gt;Rust&#39;s regex library maintains performance with full Unicode support by building UTF-8 decoding directly into its deterministic finite automaton engine.&lt;/li&gt; &#xA; &lt;li&gt;It supports searching with either memory maps or by searching incrementally with an intermediate buffer. The former is better for single files and the latter is better for large directories. ripgrep chooses the best searching strategy for you automatically.&lt;/li&gt; &#xA; &lt;li&gt;Applies your ignore patterns in &lt;code&gt;.gitignore&lt;/code&gt; files using a &lt;a href=&#34;https://docs.rs/regex/1/regex/struct.RegexSet.html&#34;&gt;&lt;code&gt;RegexSet&lt;/code&gt;&lt;/a&gt;. That means a single file path can be matched against multiple glob patterns simultaneously.&lt;/li&gt; &#xA; &lt;li&gt;It uses a lock-free parallel recursive directory iterator, courtesy of &lt;a href=&#34;https://docs.rs/crossbeam&#34;&gt;&lt;code&gt;crossbeam&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/ignore&#34;&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Feature comparison&lt;/h3&gt; &#xA;&lt;p&gt;Andy Lester, author of &lt;a href=&#34;https://beyondgrep.com/&#34;&gt;ack&lt;/a&gt;, has published an excellent table comparing the features of ack, ag, git-grep, GNU grep and ripgrep: &lt;a href=&#34;https://beyondgrep.com/feature-comparison/&#34;&gt;https://beyondgrep.com/feature-comparison/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that ripgrep has grown a few significant new features recently that are not yet present in Andy&#39;s table. This includes, but is not limited to, configuration files, passthru, support for searching compressed files, multiline search and opt-in fancy regex support via PCRE2.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The binary name for ripgrep is &lt;code&gt;rg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep/releases&#34;&gt;Archives of precompiled binaries for ripgrep are available for Windows, macOS and Linux.&lt;/a&gt;&lt;/strong&gt; Linux and Windows binaries are static executables. Users of platforms not explicitly mentioned below are advised to download one of these archives.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;macOS Homebrew&lt;/strong&gt; or a &lt;strong&gt;Linuxbrew&lt;/strong&gt; user, then you can install ripgrep from homebrew-core:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;MacPorts&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&#34;https://www.macports.org/ports.php?by=name&amp;amp;substr=ripgrep&#34;&gt;official ports&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo port install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Windows Chocolatey&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&#34;https://chocolatey.org/packages/ripgrep&#34;&gt;official repo&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ choco install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Windows Scoop&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/ripgrep.json&#34;&gt;official bucket&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scoop install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Windows Winget&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&#34;https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep&#34;&gt;winget-pkgs&lt;/a&gt; repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ winget install BurntSushi.ripgrep.MSVC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re an &lt;strong&gt;Arch Linux&lt;/strong&gt; user, then you can install ripgrep from the official repos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pacman -S ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Gentoo&lt;/strong&gt; user, you can install ripgrep from the &lt;a href=&#34;https://packages.gentoo.org/packages/sys-apps/ripgrep&#34;&gt;official repo&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo emerge sys-apps/ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Fedora&lt;/strong&gt; user, you can install ripgrep from official repositories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo dnf install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re an &lt;strong&gt;openSUSE&lt;/strong&gt; user, ripgrep is included in &lt;strong&gt;openSUSE Tumbleweed&lt;/strong&gt; and &lt;strong&gt;openSUSE Leap&lt;/strong&gt; since 15.1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo zypper install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;RHEL/CentOS 7/8&lt;/strong&gt; user, you can install ripgrep from &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/&#34;&gt;copr&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo yum install -y yum-utils&#xA;$ sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo&#xA;$ sudo yum install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Nix&lt;/strong&gt; user, you can install ripgrep from &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/text/ripgrep/default.nix&#34;&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-env --install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Guix&lt;/strong&gt; user, you can install ripgrep from the official package collection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo guix install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Debian&lt;/strong&gt; user (or a user of a Debian derivative like &lt;strong&gt;Ubuntu&lt;/strong&gt;), then ripgrep can be installed using a binary &lt;code&gt;.deb&lt;/code&gt; file provided in each &lt;a href=&#34;https://github.com/BurntSushi/ripgrep/releases&#34;&gt;ripgrep release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb&#xA;$ sudo dpkg -i ripgrep_13.0.0_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run Debian stable, ripgrep is &lt;a href=&#34;https://tracker.debian.org/pkg/rust-ripgrep&#34;&gt;officially maintained by Debian&lt;/a&gt;, although its version may be older than the &lt;code&gt;deb&lt;/code&gt; package available in the previous step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re an &lt;strong&gt;Ubuntu Cosmic (18.10)&lt;/strong&gt; (or newer) user, ripgrep is &lt;a href=&#34;https://launchpad.net/ubuntu/+source/rust-ripgrep&#34;&gt;available&lt;/a&gt; using the same packaging as Debian:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them seem to work right and generate a number of very strange bug reports that I don&#39;t know how to fix and don&#39;t have the time to fix. Therefore, it is no longer a recommended installation option.)&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an &lt;strong&gt;ALT&lt;/strong&gt; user, you can install ripgrep from the &lt;a href=&#34;https://packages.altlinux.org/en/search?name=ripgrep&#34;&gt;official repo&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;FreeBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&#34;https://www.freshports.org/textproc/ripgrep/&#34;&gt;official ports&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pkg install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re an &lt;strong&gt;OpenBSD&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&#34;https://openports.se/textproc/ripgrep&#34;&gt;official ports&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ doas pkg_add ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;NetBSD&lt;/strong&gt; user, then you can install ripgrep from &lt;a href=&#34;https://pkgsrc.se/textproc/ripgrep&#34;&gt;pkgsrc&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pkgin install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Haiku x86_64&lt;/strong&gt; user, then you can install ripgrep from the &lt;a href=&#34;https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep&#34;&gt;official ports&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Haiku x86_gcc2&lt;/strong&gt; user, then you can install ripgrep from the same port as Haiku x86_64 using the x86 secondary architecture build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pkgman install ripgrep_x86&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a &lt;strong&gt;Rust programmer&lt;/strong&gt;, ripgrep can be installed with &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note that the minimum supported version of Rust for ripgrep is &lt;strong&gt;1.70.0&lt;/strong&gt;, although ripgrep may work with older versions.&lt;/li&gt; &#xA; &lt;li&gt;Note that the binary may be bigger than expected because it contains debug symbols. This is intentional. To remove debug symbols and therefore reduce the file size, run &lt;code&gt;strip&lt;/code&gt; on the binary.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;ripgrep is written in Rust, so you&#39;ll need to grab a &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust installation&lt;/a&gt; in order to compile it. ripgrep compiles with Rust 1.70.0 (stable) or newer. In general, ripgrep tracks the latest stable release of the Rust compiler.&lt;/p&gt; &#xA;&lt;p&gt;To build ripgrep:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/BurntSushi/ripgrep&#xA;$ cd ripgrep&#xA;$ cargo build --release&#xA;$ ./target/release/rg --version&#xA;0.1.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a Rust nightly compiler and a recent Intel CPU, then you can enable additional optional SIMD acceleration like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RUSTFLAGS=&#34;-C target-cpu=native&#34; cargo build --release --features &#39;simd-accel&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;simd-accel&lt;/code&gt; feature enables SIMD support in certain ripgrep dependencies (responsible for transcoding). They are not necessary to get SIMD optimizations for search; those are enabled automatically. Hopefully, some day, the &lt;code&gt;simd-accel&lt;/code&gt; feature will similarly become unnecessary. &lt;strong&gt;WARNING:&lt;/strong&gt; Currently, enabling this option can increase compilation times dramatically.&lt;/p&gt; &#xA;&lt;p&gt;Finally, optional PCRE2 support can be built with ripgrep by enabling the &lt;code&gt;pcre2&lt;/code&gt; feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo build --release --features &#39;pcre2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Tip: use &lt;code&gt;--features &#39;pcre2 simd-accel&#39;&lt;/code&gt; to also include compile time SIMD optimizations, which will only work with a nightly compiler.)&lt;/p&gt; &#xA;&lt;p&gt;Enabling the PCRE2 feature works with a stable Rust compiler and will attempt to automatically find and link with your system&#39;s PCRE2 library via &lt;code&gt;pkg-config&lt;/code&gt;. If one doesn&#39;t exist, then ripgrep will build PCRE2 from source using your system&#39;s C compiler and then statically link it into the final executable. Static linking can be forced even when there is an available PCRE2 system library by either building ripgrep with the MUSL target or by setting &lt;code&gt;PCRE2_SYS_STATIC=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ripgrep can be built with the MUSL target on Linux by first installing the MUSL library on your system (consult your friendly neighborhood package manager). Then you just need to add MUSL support to your Rust toolchain and rebuild ripgrep, which yields a fully static executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rustup target add x86_64-unknown-linux-musl&#xA;$ cargo build --release --target x86_64-unknown-linux-musl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Applying the &lt;code&gt;--features&lt;/code&gt; flag from above works as expected. If you want to build a static executable with MUSL and with PCRE2, then you will need to have &lt;code&gt;musl-gcc&lt;/code&gt; installed, which might be in a separate package from the actual MUSL library, depending on your Linux distribution.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;ripgrep is relatively well-tested, including both unit tests and integration tests. To run the full test suite, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo test --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the repository root.&lt;/p&gt; &#xA;&lt;h3&gt;Related tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dandavison/delta&#34;&gt;delta&lt;/a&gt; is a syntax highlighting pager that supports the &lt;code&gt;rg --json&lt;/code&gt; output format. So all you need to do to make it work is &lt;code&gt;rg --json pattern | delta&lt;/code&gt;. See &lt;a href=&#34;https://dandavison.github.io/delta/grep.html&#34;&gt;delta&#39;s manual section on grep&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Vulnerability reporting&lt;/h3&gt; &#xA;&lt;p&gt;For reporting a security vulnerability, please &lt;a href=&#34;https://blog.burntsushi.net/about/&#34;&gt;contact Andrew Gallant&lt;/a&gt;. The contact page has my email address and PGP public key if you wish to send an encrypted message.&lt;/p&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;p&gt;The following is a list of known translations of ripgrep&#39;s documentation. These are unofficially maintained and may not be up to date.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-&#34;&gt;Chinese&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UltiRequiem/traducciones/tree/master/ripgrep&#34;&gt;Spanish&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tree-sitter/tree-sitter</title>
    <updated>2023-08-01T02:12:57Z</updated>
    <id>tag:github.com,2023-08-01:/tree-sitter/tree-sitter</id>
    <link href="https://github.com/tree-sitter/tree-sitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An incremental parsing system for programming tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tree-sitter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter/actions/workflows/CICD.yml&#34;&gt;&lt;img src=&#34;https://github.com/tree-sitter/tree-sitter/actions/workflows/CICD.yml/badge.svg?sanitize=true&#34; alt=&#34;CICD badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/14164618&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/14164618.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;General&lt;/strong&gt; enough to parse any programming language&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; enough to parse on every keystroke in a text editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; enough to provide useful results even in the presence of syntax errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency-free&lt;/strong&gt; so that the runtime library (which is written in pure C) can be embedded in any application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tree-sitter.github.io&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/lib/binding_rust/README.md&#34;&gt;Rust binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/lib/binding_web/README.md&#34;&gt;WASM binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tree-sitter/tree-sitter/master/cli/README.md&#34;&gt;Command-line interface&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dani-garcia/vaultwarden</title>
    <updated>2023-08-01T02:12:57Z</updated>
    <id>tag:github.com,2023-08-01:/dani-garcia/vaultwarden</id>
    <link href="https://github.com/dani-garcia/vaultwarden" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Alternative implementation of the Bitwarden server API written in Rust and compatible with &lt;a href=&#34;https://bitwarden.com/download/&#34;&gt;upstream Bitwarden clients&lt;/a&gt;*, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.&lt;/h3&gt; &#xA;&lt;p&gt;📢 Note: This project was known as Bitwarden_RS and has been renamed to separate itself from the official Bitwarden server in the hopes of avoiding confusion and trademark/branding issues. Please see &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/discussions/1642&#34;&gt;#1642&lt;/a&gt; for more explanation.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/pkgs/container/vaultwarden&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ghcr.io-download-blue&#34; alt=&#34;ghcr.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/vaultwarden/server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/vaultwarden/server.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/vaultwarden/server&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Quay.io-download-blue&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/dani-garcia/vaultwarden&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/dani-garcia/vaultwarden/status.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/dani-garcia/vaultwarden.svg?sanitize=true&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/raw/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dani-garcia/vaultwarden.svg?sanitize=true&#34; alt=&#34;AGPL-3.0 Licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#vaultwarden:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/vaultwarden:matrix.org.svg?logo=matrix&#34; alt=&#34;Matrix Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Image is based on &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden&#34;&gt;Rust implementation of Bitwarden API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project is not associated with the &lt;a href=&#34;https://bitwarden.com/&#34;&gt;Bitwarden&lt;/a&gt; project nor Bitwarden, Inc.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;⚠️&lt;strong&gt;IMPORTANT&lt;/strong&gt;⚠️: When using this server, please report any bugs or suggestions to us directly (look at the bottom of this page for ways to get in touch), regardless of whatever clients you are using (mobile, desktop, browser...). DO NOT use the official support channels.&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Basically full implementation of Bitwarden API is provided including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Organizations support&lt;/li&gt; &#xA; &lt;li&gt;Attachments and Send&lt;/li&gt; &#xA; &lt;li&gt;Vault API support&lt;/li&gt; &#xA; &lt;li&gt;Serving the static files for Vault interface&lt;/li&gt; &#xA; &lt;li&gt;Website icons API&lt;/li&gt; &#xA; &lt;li&gt;Authenticator and U2F support&lt;/li&gt; &#xA; &lt;li&gt;YubiKey and Duo support&lt;/li&gt; &#xA; &lt;li&gt;Emergency Access&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Pull the docker image and mount a volume from the host for persistent storage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull vaultwarden/server:latest&#xA;docker run -d --name vaultwarden -v /vw-data/:/data/ --restart unless-stopped -p 80:80 vaultwarden/server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will preserve any persistent data under /vw-data/, you can adapt the path to whatever suits you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Most modern web browsers, disallow the use of Web Crypto APIs in insecure contexts. In this case, you might get an error like &lt;code&gt;Cannot read property &#39;importKey&#39;&lt;/code&gt;. To solve this problem, you need to access the web vault via HTTPS or localhost.&lt;/p&gt; &#xA;&lt;p&gt;This can be configured in &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/wiki/Enabling-HTTPS&#34;&gt;vaultwarden directly&lt;/a&gt; or using a third-party reverse proxy (&lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/wiki/Proxy-examples&#34;&gt;some examples&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you have an available domain name, you can get HTTPS certificates with &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&#39;s Encrypt&lt;/a&gt;, or you can generate self-signed certificates with utilities like &lt;a href=&#34;https://github.com/FiloSottile/mkcert&#34;&gt;mkcert&lt;/a&gt;. Some proxies automatically do this step, like Caddy (see examples linked above).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/wiki&#34;&gt;vaultwarden wiki&lt;/a&gt; for more information on how to configure and run the vaultwarden server.&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch&lt;/h2&gt; &#xA;&lt;p&gt;To ask a question, offer suggestions or new features or to get help configuring or installing the software, please use &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; or &lt;a href=&#34;https://vaultwarden.discourse.group/&#34;&gt;the forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you spot any bugs or crashes with vaultwarden itself, please &lt;a href=&#34;https://github.com/dani-garcia/vaultwarden/issues/&#34;&gt;create an issue&lt;/a&gt;. Make sure you are on the latest version and there aren&#39;t any similar issues open, though!&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to chat, we&#39;re usually hanging around at &lt;a href=&#34;https://matrix.to/#/#vaultwarden:matrix.org&#34;&gt;#vaultwarden:matrix.org&lt;/a&gt; room on Matrix. Feel free to join us!&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks for your contribution to the project!&lt;/p&gt; &#xA;&lt;!--&#xA;&lt;table&gt;&#xA;  &lt;tr&gt;&#xA;    &lt;td align=&#34;center&#34;&gt;&#xA;      &lt;a href=&#34;https://github.com/username&#34;&gt;&#xA;        &lt;img src=&#34;https://avatars.githubusercontent.com/u/725423?s=75&amp;v=4&#34; width=&#34;75px;&#34; alt=&#34;username&#34;/&gt;&#xA;        &lt;br /&gt;&#xA;        &lt;sub&gt;&lt;b&gt;username&lt;/b&gt;&lt;/sub&gt;&#xA;      &lt;/a&gt;&#xA;  &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;br/&gt;&#xA;--&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/themightychris&#34; style=&#34;width: 75px&#34;&gt; &lt;sub&gt;&lt;b&gt;Chris Alfano&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/numberly&#34; style=&#34;width: 75px&#34;&gt; &lt;sub&gt;&lt;b&gt;Numberly&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
</feed>