<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-01T01:55:07Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tokio-rs/tokio</title>
    <updated>2024-08-01T01:55:07Z</updated>
    <id>tag:github.com,2024-08-01:/tokio-rs/tokio</id>
    <link href="https://github.com/tokio-rs/tokio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A runtime for writing reliable asynchronous applications with Rust. Provides I/O, networking, scheduling, timers, ...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tokio&lt;/h1&gt; &#xA;&lt;p&gt;A runtime for writing reliable, asynchronous, and slim applications with the Rust programming language. It is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Tokio&#39;s zero-cost abstractions give you bare-metal performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Tokio leverages Rust&#39;s ownership, type system, and concurrency model to reduce bugs and ensure thread safety.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Tokio has a minimal footprint, and handles backpressure and cancellation naturally.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/tokio&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/tokio.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/tokio-rs/tokio/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/500028886025895936.svg?logo=discord&amp;amp;style=flat-square&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tokio.rs&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://tokio.rs/tokio/tutorial&#34;&gt;Guides&lt;/a&gt; | &lt;a href=&#34;https://docs.rs/tokio/latest/tokio&#34;&gt;API Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;Chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A multithreaded, work-stealing based task &lt;a href=&#34;https://docs.rs/tokio/latest/tokio/runtime/index.html&#34;&gt;scheduler&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A reactor backed by the operating system&#39;s event queue (epoll, kqueue, IOCP, etc...).&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous &lt;a href=&#34;https://docs.rs/tokio/latest/tokio/net/index.html&#34;&gt;TCP and UDP&lt;/a&gt; sockets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These components provide the runtime components necessary for building an asynchronous application.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A basic TCP echo server with Tokio.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you activated the full features of the tokio crate on Cargo.toml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;tokio = { version = &#34;1.39.2&#34;, features = [&#34;full&#34;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, on your main.rs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,no_run&#34;&gt;use tokio::net::TcpListener;&#xA;use tokio::io::{AsyncReadExt, AsyncWriteExt};&#xA;&#xA;#[tokio::main]&#xA;async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {&#xA;    let listener = TcpListener::bind(&#34;127.0.0.1:8080&#34;).await?;&#xA;&#xA;    loop {&#xA;        let (mut socket, _) = listener.accept().await?;&#xA;&#xA;        tokio::spawn(async move {&#xA;            let mut buf = [0; 1024];&#xA;&#xA;            // In a loop, read data from the socket and write the data back.&#xA;            loop {&#xA;                let n = match socket.read(&amp;amp;mut buf).await {&#xA;                    // socket closed&#xA;                    Ok(n) if n == 0 =&amp;gt; return,&#xA;                    Ok(n) =&amp;gt; n,&#xA;                    Err(e) =&amp;gt; {&#xA;                        eprintln!(&#34;failed to read from socket; err = {:?}&#34;, e);&#xA;                        return;&#xA;                    }&#xA;                };&#xA;&#xA;                // Write the data back&#xA;                if let Err(e) = socket.write_all(&amp;amp;buf[0..n]).await {&#xA;                    eprintln!(&#34;failed to write to socket; err = {:?}&#34;, e);&#xA;                    return;&#xA;                }&#xA;            }&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found &lt;a href=&#34;https://github.com/tokio-rs/tokio/tree/master/examples&#34;&gt;here&lt;/a&gt;. For a larger &#34;real world&#34; example, see the &lt;a href=&#34;https://github.com/tokio-rs/mini-redis/&#34;&gt;mini-redis&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of the available features flags that can be enabled, check our &lt;a href=&#34;https://docs.rs/tokio/#feature-flags&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;First, see if the answer to your question can be found in the &lt;a href=&#34;https://tokio.rs/tokio/tutorial&#34;&gt;Guides&lt;/a&gt; or the &lt;a href=&#34;https://docs.rs/tokio/latest/tokio&#34;&gt;API documentation&lt;/a&gt;. If the answer is not there, there is an active community in the &lt;a href=&#34;https://discord.gg/tokio&#34;&gt;Tokio Discord server&lt;/a&gt;. We would be happy to try to answer your question. You can also ask your question on &lt;a href=&#34;https://github.com/tokio-rs/tokio/discussions&#34;&gt;the discussions page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;🎈&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to help you get involved in the Tokio project.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the crates in this repository, the Tokio project also maintains several other libraries, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/axum&#34;&gt;&lt;code&gt;axum&lt;/code&gt;&lt;/a&gt;: A web application framework that focuses on ergonomics and modularity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hyperium/hyper&#34;&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;: A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hyperium/tonic&#34;&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;: A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/seanmonstar/warp&#34;&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt;: A super-easy, composable, web server framework for warp speeds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tower-rs/tower&#34;&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt;: A library of modular and reusable components for building robust networking clients and servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/tracing&#34;&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; (formerly &lt;code&gt;tokio-trace&lt;/code&gt;): A framework for application-level tracing and async-aware diagnostics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/mio&#34;&gt;&lt;code&gt;mio&lt;/code&gt;&lt;/a&gt;: A low-level, cross-platform abstraction over OS I/O APIs that powers &lt;code&gt;tokio&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/bytes&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;: Utilities for working with bytes, including efficient byte buffers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/loom&#34;&gt;&lt;code&gt;loom&lt;/code&gt;&lt;/a&gt;: A testing tool for concurrent Rust code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;The Tokio repository contains multiple crates. Each crate has its own changelog.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-util&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-util/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-stream&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-stream/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-macros&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-macros/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokio-test&lt;/code&gt; - &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/tokio-test/CHANGELOG.md&#34;&gt;view changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; &#xA;&lt;!--&#xA;When updating this, also update:&#xA;- .github/workflows/ci.yml&#xA;- CONTRIBUTING.md&#xA;- README.md&#xA;- tokio/README.md&#xA;- tokio/Cargo.toml&#xA;- tokio-util/Cargo.toml&#xA;- tokio-test/Cargo.toml&#xA;- tokio-stream/Cargo.toml&#xA;--&gt; &#xA;&lt;p&gt;Tokio will keep a rolling MSRV (minimum supported rust version) policy of &lt;strong&gt;at least&lt;/strong&gt; 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.70.&lt;/p&gt; &#xA;&lt;p&gt;Note that the MSRV is not increased automatically, and only as part of a minor release. The MSRV history for past minor releases can be found below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.39 to now - Rust 1.70&lt;/li&gt; &#xA; &lt;li&gt;1.30 to 1.38 - Rust 1.63&lt;/li&gt; &#xA; &lt;li&gt;1.27 to 1.29 - Rust 1.56&lt;/li&gt; &#xA; &lt;li&gt;1.17 to 1.26 - Rust 1.49&lt;/li&gt; &#xA; &lt;li&gt;1.15 to 1.16 - Rust 1.46&lt;/li&gt; &#xA; &lt;li&gt;1.0 to 1.14 - Rust 1.45&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that although we try to avoid the situation where a dependency transitively increases the MSRV of Tokio, we do not guarantee that this does not happen. However, every minor release will have some set of versions of dependencies that works with the MSRV of that minor release.&lt;/p&gt; &#xA;&lt;h2&gt;Release schedule&lt;/h2&gt; &#xA;&lt;p&gt;Tokio doesn&#39;t follow a fixed release schedule, but we typically make one to two new minor releases each month. We make patch releases for bugfixes as necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Bug patching policy&lt;/h2&gt; &#xA;&lt;p&gt;For the purposes of making patch releases with bugfixes, we have designated certain minor releases as LTS (long term support) releases. Whenever a bug warrants a patch release with a fix for the bug, it will be backported and released as a new patch release for each LTS minor version. Our current LTS releases are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1.32.x&lt;/code&gt; - LTS release until September 2024. (MSRV 1.63)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.36.x&lt;/code&gt; - LTS release until March 2025. (MSRV 1.63)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.38.x&lt;/code&gt; - LTS release until July 2025. (MSRV 1.63)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each LTS release will continue to receive backported fixes for at least a year. If you wish to use a fixed minor release in your project, we recommend that you use an LTS release.&lt;/p&gt; &#xA;&lt;p&gt;To use a fixed minor version, you can specify the version with a tilde. For example, to specify that you wish to use the newest &lt;code&gt;1.32.x&lt;/code&gt; patch release, you can use the following dependency specification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;tokio = { version = &#34;~1.32&#34;, features = [...] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Previous LTS releases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1.8.x&lt;/code&gt; - LTS release until February 2022.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.14.x&lt;/code&gt; - LTS release until June 2022.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.18.x&lt;/code&gt; - LTS release until June 2023.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.20.x&lt;/code&gt; - LTS release until September 2023.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.25.x&lt;/code&gt; - LTS release until March 2024.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://github.com/tokio-rs/tokio/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tokio by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>umijs/mako</title>
    <updated>2024-08-01T01:55:07Z</updated>
    <id>tag:github.com,2024-08-01:/umijs/mako</id>
    <link href="https://github.com/umijs/mako" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extremely fast, production-grade web bundler based on Rust.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.alicdn.com/imgextra/i2/O1CN01kdmA7X1FVqCPcRi3L_!!6000000000493-2-tps-584-584.png&#34; alt=&#34;Mako logo&#34; width=&#34;160&#34; height=&#34;160&#34;&gt; &#xA; &lt;h1&gt;Mako 🦈&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@umijs/mako&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/@umijs/mako&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@umijs/mako&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/dm/@umijs/mako&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/umijs/mako/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/umijs/mako/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@umijs/mako&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/license/umi&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Mako &lt;code&gt;[&#39;mɑːkoʊ]&lt;/code&gt; is an &lt;strong&gt;extremely fast&lt;/strong&gt;, &lt;strong&gt;production-grade&lt;/strong&gt; web bundler based on &lt;strong&gt;Rust&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;✨ See more at &lt;a href=&#34;https://makojs.dev&#34;&gt;makojs.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Who&#39;s using Mako?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web App，Hybrid App, Mini Program (Partly), Low Code, Serverless in &lt;a href=&#34;https://www.antgroup.com/&#34;&gt;Ant Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ant-design/ant-design/&#34;&gt;Ant Design&lt;/a&gt; using Mako for its website&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://umijs.org/&#34;&gt;Umi&lt;/a&gt; integrated Mako for its bundling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://d.umijs.org/&#34;&gt;Dumi&lt;/a&gt; integrated Mako for its bundling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/umijs/father/&#34;&gt;Father&lt;/a&gt; integrated Mako for its bundling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Create a new mako project with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm create mako&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://makojs.dev/&#34;&gt;https://makojs.dev/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;CONTRIBUTING&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/umijs/mako/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CHANGELOG&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/umijs/mako/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CONTACT US&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://makojs.dev/docs/feedback&#34;&gt;Feedback on makojs.dev&lt;/a&gt; on joining the discussion, contacting the maintainers, and joining the mako contributors.&lt;/p&gt; &#xA;&lt;h2&gt;CREDITS&lt;/h2&gt; &#xA;&lt;p&gt;This project is inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webpack/webpack&#34;&gt;webpack&lt;/a&gt;, which inspired lots of ideas of Mako.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swc-project/swc&#34;&gt;swc&lt;/a&gt; by &lt;a href=&#34;https://github.com/kdy1&#34;&gt;@kdy1&lt;/a&gt;, which powered the parsing, transforming and codegen of Mako.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/farm-fe/farm&#34;&gt;farm&lt;/a&gt; by &lt;a href=&#34;https://github.com/wre232114&#34;&gt;@brightwu&lt;/a&gt;, which inspired the tree shaking, plugin system and others of Mako.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/web-infra-dev/rspack&#34;&gt;rspack&lt;/a&gt;, which inspired the tree shaking of Mako.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oxc-project/oxc-resolver&#34;&gt;oxc-resolver&lt;/a&gt; by &lt;a href=&#34;https://github.com/Boshen&#34;&gt;@Boshen&lt;/a&gt; which powered the resolver of Mako.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oxc-project/oxc/&#34;&gt;Oxc&lt;/a&gt; by &lt;a href=&#34;https://github.com/Boshen&#34;&gt;@Boshen&lt;/a&gt; from which we learned a lot about how to develop efficiently in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;biome&lt;/a&gt; by &lt;a href=&#34;https://github.com/ematipico&#34;&gt;@ematipico&lt;/a&gt; from which we learned a lot about how to develop efficiently in Rust.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/umijs/mako/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>neondatabase/neon</title>
    <updated>2024-08-01T01:55:07Z</updated>
    <id>tag:github.com,2024-08-01:/neondatabase/neon</id>
    <link href="https://github.com/neondatabase/neon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neon: Serverless Postgres. We separated storage and compute to offer autoscaling, code-like database branching, and scale to zero.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://neon.tech&#34;&gt;&lt;img src=&#34;https://github.com/neondatabase/neon/assets/11527560/f15a17f0-836e-40c5-b35d-030606a6b660&#34; alt=&#34;Neon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Neon&lt;/h1&gt; &#xA;&lt;p&gt;Neon is a serverless open-source alternative to AWS Aurora Postgres. It separates storage and compute and substitutes the PostgreSQL storage layer by redistributing data across a cluster of nodes.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Try the &lt;a href=&#34;https://neon.tech/github&#34;&gt;Neon Free Tier&lt;/a&gt; to create a serverless Postgres instance. Then connect to it with your preferred Postgres client (psql, dbeaver, etc) or use the online &lt;a href=&#34;https://neon.tech/docs/get-started-with-neon/query-with-neon-sql-editor/&#34;&gt;SQL Editor&lt;/a&gt;. See &lt;a href=&#34;https://neon.tech/docs/connect/connect-from-any-app/&#34;&gt;Connect from any application&lt;/a&gt; for connection instructions.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, compile and run the project &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/#running-local-installation&#34;&gt;locally&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture overview&lt;/h2&gt; &#xA;&lt;p&gt;A Neon installation consists of compute nodes and the Neon storage engine. Compute nodes are stateless PostgreSQL nodes backed by the Neon storage engine.&lt;/p&gt; &#xA;&lt;p&gt;The Neon storage engine consists of two major components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pageserver: Scalable storage backend for the compute nodes.&lt;/li&gt; &#xA; &lt;li&gt;Safekeepers: The safekeepers form a redundant WAL service that received WAL from the compute node, and stores it durably until it has been processed by the pageserver and uploaded to cloud storage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See developer documentation in &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/SUMMARY.md&#34;&gt;SUMMARY.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Running local installation&lt;/h2&gt; &#xA;&lt;h4&gt;Installing dependencies on Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install build dependencies and other applicable packages&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Ubuntu or Debian, this set of packages should be sufficient to build the code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install build-essential libtool libreadline-dev zlib1g-dev flex bison libseccomp-dev \&#xA;libssl-dev clang pkg-config libpq-dev cmake postgresql-client protobuf-compiler \&#xA;libcurl4-openssl-dev openssl python3-poetry lsof libicu-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Fedora, these packages are needed:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install flex bison readline-devel zlib-devel openssl-devel \&#xA;  libseccomp-devel perl clang cmake postgresql postgresql-contrib protobuf-compiler \&#xA;  protobuf-devel libcurl-devel openssl poetry lsof libicu-devel libpq-devel python3-devel \&#xA;  libffi-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Arch based systems, these packages are needed:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S base-devel readline zlib libseccomp openssl clang \&#xA;postgresql-libs cmake postgresql protobuf curl lsof&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building Neon requires 3.15+ version of &lt;code&gt;protoc&lt;/code&gt; (protobuf-compiler). If your distribution provides an older version, you can install a newer version from &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# recommended approach from https://www.rust-lang.org/tools/install&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing dependencies on macOS (12.3.1)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install XCode and dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcode-select --install&#xA;brew install protobuf openssl flex bison icu4c pkg-config&#xA;&#xA;# add openssl to PATH, required for ed25519 keys generation in neon_local&#xA;echo &#39;export PATH=&#34;$(brew --prefix openssl)/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# recommended approach from https://www.rust-lang.org/tools/install&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install PostgreSQL Client&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# from https://stackoverflow.com/questions/44654216/correct-way-to-install-psql-without-full-postgres-on-macos&#xA;brew install libpq&#xA;brew link --force libpq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rustc version&lt;/h4&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/rust-toolchain.toml&#34;&gt;rust toolchain file&lt;/a&gt; to define the version it&#39;s built with in CI for testing and local builds.&lt;/p&gt; &#xA;&lt;p&gt;This file is automatically picked up by &lt;a href=&#34;https://rust-lang.github.io/rustup/overrides.html#the-toolchain-file&#34;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; that installs (if absent) and uses the toolchain version pinned in the file.&lt;/p&gt; &#xA;&lt;p&gt;rustup users who want to build with another toolchain can use the &lt;a href=&#34;https://rust-lang.github.io/rustup/overrides.html#directory-overrides&#34;&gt;&lt;code&gt;rustup override&lt;/code&gt;&lt;/a&gt; command to set a specific toolchain for the project&#39;s directory.&lt;/p&gt; &#xA;&lt;p&gt;non-rustup users most probably are not getting the same toolchain automatically from the file, so are responsible to manually verify that their toolchain matches the version in the file. Newer rustc versions most probably will work fine, yet older ones might not be supported due to some new features used by the project or the crates.&lt;/p&gt; &#xA;&lt;h4&gt;Building on Linux&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build neon and patched postgres&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Note: The path to the neon sources can not contain a space.&#xA;&#xA;git clone --recursive https://github.com/neondatabase/neon.git&#xA;cd neon&#xA;&#xA;# The preferred and default is to make a debug build. This will create a&#xA;# demonstrably slower build than a release build. For a release build,&#xA;# use &#34;BUILD_TYPE=release make -j`nproc` -s&#34;&#xA;# Remove -s for the verbose build log&#xA;&#xA;make -j`nproc` -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building on OSX&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build neon and patched postgres&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Note: The path to the neon sources can not contain a space.&#xA;&#xA;git clone --recursive https://github.com/neondatabase/neon.git&#xA;cd neon&#xA;&#xA;# The preferred and default is to make a debug build. This will create a&#xA;# demonstrably slower build than a release build. For a release build,&#xA;# use &#34;BUILD_TYPE=release make -j`sysctl -n hw.logicalcpu` -s&#34;&#xA;# Remove -s for the verbose build log&#xA;&#xA;make -j`sysctl -n hw.logicalcpu` -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dependency installation notes&lt;/h4&gt; &#xA;&lt;p&gt;To run the &lt;code&gt;psql&lt;/code&gt; client, install the &lt;code&gt;postgresql-client&lt;/code&gt; package or modify &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to include &lt;code&gt;pg_install/bin&lt;/code&gt; and &lt;code&gt;pg_install/lib&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;To run the integration tests or Python scripts (not required to use the code), install Python (3.9 or higher), and install the python3 packages using &lt;code&gt;./scripts/pysync&lt;/code&gt; (requires &lt;a href=&#34;https://python-poetry.org/&#34;&gt;poetry&amp;gt;=1.3&lt;/a&gt;) in the project directory.&lt;/p&gt; &#xA;&lt;h4&gt;Running neon database&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start pageserver and postgres on top of it (should be called from repo root):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create repository in .neon with proper paths to binaries and data&#xA;# Later that would be responsibility of a package install script&#xA;&amp;gt; cargo neon init&#xA;Initializing pageserver node 1 at &#39;127.0.0.1:64000&#39; in &#34;.neon&#34;&#xA;&#xA;# start pageserver, safekeeper, and broker for their intercommunication&#xA;&amp;gt; cargo neon start&#xA;Starting neon broker at 127.0.0.1:50051.&#xA;storage_broker started, pid: 2918372&#xA;Starting pageserver node 1 at &#39;127.0.0.1:64000&#39; in &#34;.neon&#34;.&#xA;pageserver started, pid: 2918386&#xA;Starting safekeeper at &#39;127.0.0.1:5454&#39; in &#39;.neon/safekeepers/sk1&#39;.&#xA;safekeeper 1 started, pid: 2918437&#xA;&#xA;# create initial tenant and use it as a default for every future neon_local invocation&#xA;&amp;gt; cargo neon tenant create --set-default&#xA;tenant 9ef87a5bf0d92544f6fafeeb3239695c successfully created on the pageserver&#xA;Created an initial timeline &#39;de200bd42b49cc1814412c7e592dd6e9&#39; at Lsn 0/16B5A50 for tenant: 9ef87a5bf0d92544f6fafeeb3239695c&#xA;Setting tenant 9ef87a5bf0d92544f6fafeeb3239695c as a default one&#xA;&#xA;# create postgres compute node&#xA;&amp;gt; cargo neon endpoint create main&#xA;&#xA;# start postgres compute node&#xA;&amp;gt; cargo neon endpoint start main&#xA;Starting new endpoint main (PostgreSQL v14) on timeline de200bd42b49cc1814412c7e592dd6e9 ...&#xA;Starting postgres at &#39;postgresql://cloud_admin@127.0.0.1:55432/postgres&#39;&#xA;&#xA;# check list of running postgres instances&#xA;&amp;gt; cargo neon endpoint list&#xA; ENDPOINT  ADDRESS          TIMELINE                          BRANCH NAME  LSN        STATUS&#xA; main      127.0.0.1:55432  de200bd42b49cc1814412c7e592dd6e9  main         0/16B5BA8  running&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Now, it is possible to connect to postgres and run some queries:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;gt; psql -p 55432 -h 127.0.0.1 -U cloud_admin postgres&#xA;postgres=# CREATE TABLE t(key int primary key, value text);&#xA;CREATE TABLE&#xA;postgres=# insert into t values(1,1);&#xA;INSERT 0 1&#xA;postgres=# select * from t;&#xA; key | value&#xA;-----+-------&#xA;   1 | 1&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;And create branches and run postgres on them:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create branch named migration_check&#xA;&amp;gt; cargo neon timeline branch --branch-name migration_check&#xA;Created timeline &#39;b3b863fa45fa9e57e615f9f2d944e601&#39; at Lsn 0/16F9A00 for tenant: 9ef87a5bf0d92544f6fafeeb3239695c. Ancestor timeline: &#39;main&#39;&#xA;&#xA;# check branches tree&#xA;&amp;gt; cargo neon timeline list&#xA;(L) main [de200bd42b49cc1814412c7e592dd6e9]&#xA;(L) ┗━ @0/16F9A00: migration_check [b3b863fa45fa9e57e615f9f2d944e601]&#xA;&#xA;# create postgres on that branch&#xA;&amp;gt; cargo neon endpoint create migration_check --branch-name migration_check&#xA;&#xA;# start postgres on that branch&#xA;&amp;gt; cargo neon endpoint start migration_check&#xA;Starting new endpoint migration_check (PostgreSQL v14) on timeline b3b863fa45fa9e57e615f9f2d944e601 ...&#xA;Starting postgres at &#39;postgresql://cloud_admin@127.0.0.1:55434/postgres&#39;&#xA;&#xA;# check the new list of running postgres instances&#xA;&amp;gt; cargo neon endpoint list&#xA; ENDPOINT         ADDRESS          TIMELINE                          BRANCH NAME      LSN        STATUS&#xA; main             127.0.0.1:55432  de200bd42b49cc1814412c7e592dd6e9  main             0/16F9A38  running&#xA; migration_check  127.0.0.1:55434  b3b863fa45fa9e57e615f9f2d944e601  migration_check  0/16F9A70  running&#xA;&#xA;# this new postgres instance will have all the data from &#39;main&#39; postgres,&#xA;# but all modifications would not affect data in original postgres&#xA;&amp;gt; psql -p 55434 -h 127.0.0.1 -U cloud_admin postgres&#xA;postgres=# select * from t;&#xA; key | value&#xA;-----+-------&#xA;   1 | 1&#xA;(1 row)&#xA;&#xA;postgres=# insert into t values(2,2);&#xA;INSERT 0 1&#xA;&#xA;# check that the new change doesn&#39;t affect the &#39;main&#39; postgres&#xA;&amp;gt; psql -p 55432 -h 127.0.0.1 -U cloud_admin postgres&#xA;postgres=# select * from t;&#xA; key | value&#xA;-----+-------&#xA;   1 | 1&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;If you want to run tests afterwards (see below), you must stop all the running pageserver, safekeeper, and postgres instances you have just started. You can terminate them all with one command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; cargo neon stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More advanced usages can be found at &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/control_plane/README.md&#34;&gt;Control Plane and Neon Local&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Handling build failures&lt;/h4&gt; &#xA;&lt;p&gt;If you encounter errors during setting up the initial tenant, it&#39;s best to stop everything (&lt;code&gt;cargo neon stop&lt;/code&gt;) and remove the &lt;code&gt;.neon&lt;/code&gt; directory. Then fix the problems, and start the setup again.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;h3&gt;Rust unit tests&lt;/h3&gt; &#xA;&lt;p&gt;We are using &lt;a href=&#34;https://nexte.st/&#34;&gt;&lt;code&gt;cargo-nextest&lt;/code&gt;&lt;/a&gt; to run the tests in Github Workflows. Some crates do not support running plain &lt;code&gt;cargo test&lt;/code&gt; anymore, prefer &lt;code&gt;cargo nextest run&lt;/code&gt; instead. You can install &lt;code&gt;cargo-nextest&lt;/code&gt; with &lt;code&gt;cargo install cargo-nextest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;Ensure your dependencies are installed as described &lt;a href=&#34;https://github.com/neondatabase/neon#dependency-installation-notes&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recursive https://github.com/neondatabase/neon.git&#xA;&#xA;CARGO_BUILD_FLAGS=&#34;--features=testing&#34; make&#xA;&#xA;./scripts/pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this runs both debug and release modes, and all supported postgres versions. When testing locally, it is convenient to run just one set of permutations, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DEFAULT_PG_VERSION=15 BUILD_TYPE=release ./scripts/pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flamegraphs&lt;/h2&gt; &#xA;&lt;p&gt;You may find yourself in need of flamegraphs for software in this repository. You can use &lt;a href=&#34;https://github.com/flamegraph-rs/flamegraph&#34;&gt;&lt;code&gt;flamegraph-rs&lt;/code&gt;&lt;/a&gt; or the original &lt;a href=&#34;https://github.com/brendangregg/FlameGraph&#34;&gt;&lt;code&gt;flamegraph.pl&lt;/code&gt;&lt;/a&gt;. Your choice!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If you&#39;re using &lt;code&gt;lld&lt;/code&gt; or &lt;code&gt;mold&lt;/code&gt;, you need the &lt;code&gt;--no-rosegment&lt;/code&gt; linker argument. It&#39;s a &lt;a href=&#34;https://crbug.com/919499#c16&#34;&gt;general thing with Rust / lld / mold&lt;/a&gt;, not specific to this repository. See &lt;a href=&#34;https://github.com/neondatabase/neon/pull/6764&#34;&gt;this PR for further instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Cleanup&lt;/h2&gt; &#xA;&lt;p&gt;For cleaning up the source tree from build artifacts, run &lt;code&gt;make clean&lt;/code&gt; in the source directory.&lt;/p&gt; &#xA;&lt;p&gt;For removing every artifact from build and configure steps, run &lt;code&gt;make distclean&lt;/code&gt;, and also consider removing the cargo binaries in the &lt;code&gt;target&lt;/code&gt; directory, as well as the database in the &lt;code&gt;.neon&lt;/code&gt; directory. Note that removing the &lt;code&gt;.neon&lt;/code&gt; directory will remove your database, with all data in it. You have been warned!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs&#34;&gt;docs&lt;/a&gt; Contains a top-level overview of all available markdown documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/sourcetree.md&#34;&gt;sourcetree.md&lt;/a&gt; contains overview of source tree layout.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To view your &lt;code&gt;rustdoc&lt;/code&gt; documentation in a browser, try running &lt;code&gt;cargo doc --no-deps --open&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also README files in some source directories, and &lt;code&gt;rustdoc&lt;/code&gt; style documentation comments.&lt;/p&gt; &#xA;&lt;p&gt;Other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neon.tech/blog/hello-world/&#34;&gt;SELECT &#39;Hello, World&#39;&lt;/a&gt;: Blog post by Nikita Shamgunov on the high level architecture&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neon.tech/blog/architecture-decisions-in-neon/&#34;&gt;Architecture decisions in Neon&lt;/a&gt;: Blog post by Heikki Linnakangas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rES0yzeERns&#34;&gt;Neon: Serverless PostgreSQL!&lt;/a&gt;: Presentation on storage system by Heikki Linnakangas in the CMU Database Group seminar series&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Postgres-specific terms&lt;/h3&gt; &#xA;&lt;p&gt;Due to Neon&#39;s very close relation with PostgreSQL internals, numerous specific terms are used. The same applies to certain spelling: i.e. we use MB to denote 1024 * 1024 bytes, while MiB would be technically more correct, it&#39;s inconsistent with what PostgreSQL code and its documentation use.&lt;/p&gt; &#xA;&lt;p&gt;To get more familiar with this aspect, refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/glossary.md&#34;&gt;Neon glossary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/14/glossary.html&#34;&gt;PostgreSQL glossary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other PostgreSQL documentation and sources (Neon fork sources can be found &lt;a href=&#34;https://github.com/neondatabase/postgres&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join the development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to learn about project code style and practices.&lt;/li&gt; &#xA; &lt;li&gt;To get familiar with a source tree layout, use &lt;a href=&#34;https://raw.githubusercontent.com/neondatabase/neon/main/docs/sourcetree.md&#34;&gt;sourcetree.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To learn more about PostgreSQL internals, check &lt;a href=&#34;http://www.interdb.jp/pg/index.html&#34;&gt;http://www.interdb.jp/pg/index.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>