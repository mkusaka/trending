<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-01T02:03:27Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>juspay/hyperswitch</title>
    <updated>2025-04-01T02:03:27Z</updated>
    <id>tag:github.com,2025-04-01:/juspay/hyperswitch</id>
    <link href="https://github.com/juspay/hyperswitch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source payments switch written in Rust to make payments fast, reliable and affordable&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-dark.svg#gh-dark-mode-only&#34; alt=&#34;Hyperswitch-Logo&#34; width=&#34;40%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-light.svg#gh-light-mode-only&#34; alt=&#34;Hyperswitch-Logo&#34; width=&#34;40%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Open-Source Payments Orchestration&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Single API to access the payments ecosystem and its features &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/juspay/hyperswitch/actions?query=workflow%3ACI+branch%3Amain&#34;&gt; &lt;img src=&#34;https://github.com/juspay/hyperswitch/workflows/CI-push/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/juspay/hyperswitch/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/juspay/hyperswitch&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/juspay/hyperswitch/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Made_in-Rust-orange&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- Uncomment when we reach &gt;50% coverage --&gt; &#xA; &lt;!-- &lt;a href=&#34;https://codecov.io/github/juspay/hyperswitch&#34; &gt;&#xA;    &lt;img src=&#34;https://codecov.io/github/juspay/hyperswitch/graph/badge.svg&#34;/&gt;&#xA;  &lt;/a&gt; --&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.linkedin.com/company/hyperswitch/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/follow-hyperswitch-blue?logo=linkedin&amp;amp;labelColor=grey&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://x.com/hyperswitchio&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/follow-%40hyperswitchio-white?logo=x&amp;amp;labelColor=grey&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/hyperswitch-io/shared_invite/zt-2jqxmpsbm-WXUENx022HjNEy~Ark7Orw&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on_slack-blue?logo=slack&amp;amp;labelColor=grey&amp;amp;color=%233f0e40&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview&#34;&gt;Architectural Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#try-hyperswitch&#34;&gt;Try Hyperswitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#support-feature-requests&#34;&gt;Support, Feature requests &amp;amp; Bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#our-vision&#34;&gt;Our Vision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license&#34;&gt;Copyright and License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#introduction&#34;&gt; &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt; &lt;/a&gt; Juspay, founded in 2012, is a global leader in payment orchestration and checkout solutions, trusted by 400+ leading enterprises and brands worldwide. Hyperswitch is Juspay&#39;s new generation of composable, commercial open-source payments platform for merchant and brands. It is an enterprise-grade, transparent and modular payments platform designed to provide digital businesses access to the best payments infrastructure. &#xA;&lt;p&gt;Here are the key components of Hyperswitch that deliver the whole solution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/juspay/hyperswitch&#34;&gt;Hyperswitch Backend&lt;/a&gt;: Hyperswitch backend enables seamless payment processing with comprehensive support for various payment flows - authorization, authentication, void and capture workflows along with robust management of post-payment processes like refunds and chargeback handling. Additionally, Hyperswitch supports non-payment use cases by enabling connections with external FRM or authentication providers as part of the payment flow. The backend optimizes payment routing with customizable workflows, including success rate-based routing, rule-based routing, volume distribution, fallback handling, and intelligent retry mechanisms for failed payments based on specific error codes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/juspay/hyperswitch-web&#34;&gt;SDK (Frontend)&lt;/a&gt;: The SDK, available for web, &lt;a href=&#34;https://github.com/juspay/hyperswitch-client-core&#34;&gt;Android, and iOS&lt;/a&gt;, unifies the payment experience across various methods such as cards, wallets, BNPL, bank transfers, and more, while supporting the diverse payment flows of underlying PSPs. When paired with the locker, it surfaces the user&#39;s saved payment methods.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/juspay/hyperswitch-control-center&#34;&gt;Control Center&lt;/a&gt;: The Control Center enables users to manage the entire payments stack without any coding. It allows the creation of workflows for routing, payment retries, and defining conditions to invoke 3DS, fraud risk management (FRM), and surcharge modules. The Control Center provides access to transaction, refund, and chargeback operations across all integrated PSPs, transaction-level logs for initial debugging, and detailed analytics and insights into payment performance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://docs.hyperswitch.io/&#34;&gt;Hyperswitch docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview&#34;&gt; &lt;h2 id=&#34;architectural-overview&#34;&gt;Architectural Overview&lt;/h2&gt; &lt;/a&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/features.png&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/non-functional-features.png&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-architecture-v1.png&#34;&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#try-hyperswitch&#34;&gt; &lt;h2 id=&#34;try-hyperswitch&#34;&gt;Try Hyperswitch&lt;/h2&gt; &lt;/a&gt; &#xA;&lt;h3&gt;1. Local Setup&lt;/h3&gt; &#xA;&lt;p&gt;You can run Hyperswitch on your system using Docker compose after cloning this repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 --branch latest https://github.com/juspay/hyperswitch&#xA;cd hyperswitch&#xA;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/try_local_system.md&#34;&gt;local setup guide&lt;/a&gt; for a more details on setting up the entire stack or component wise. This takes 15-mins and gives the following output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[+] Running 2/2&#xA;✔ hyperswitch-control-center Pulled 2.9s&#xA;✔ hyperswitch-server Pulled 3.0s&#xA;[+] Running 6/0&#xA;&#xA;✔ Container hyperswitch-pg-1 Created 0.0s&#xA;✔ Container hyperswitch-redis-standalone-1 Created 0.0s&#xA;✔ Container hyperswitch-migration_runner-1 Created 0.0s&#xA;✔ Container hyperswitch-hyperswitch-server-1 Created 0.0s&#xA;✔ Container hyperswitch-hyperswitch-web-1 Created 0.0s&#xA;✔ Container hyperswitch-hyperswitch-control-center-1 Created 0.0s&#xA;&#xA;Attaching to hyperswitch-control-center-1, hyperswitch-server-1, hyperswitch-web-1, migration_runner-1, pg-1, redis-standalone-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Deployment on cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest and easiest way to try Hyperswitch on AWS is via our CDK scripts&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the following button for a quick standalone deployment on AWS, suitable for prototyping. No code or setup is required in your system and the deployment is covered within the AWS free-tier setup.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=HyperswitchBootstarp&amp;amp;templateURL=https://hyperswitch-synth.s3.eu-central-1.amazonaws.com/hs-starter-config.yaml&#34;&gt;&lt;img src=&#34;https://github.com/juspay/hyperswitch/raw/main/docs/imgs/aws_button.png?raw=true&#34; height=&#34;35&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sign-in to your AWS console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the instructions provided on the console to successfully deploy Hyperswitch. This takes 30-45mins and gives the following output&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;Host&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;App server running on&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://hyperswitch-&amp;lt;host-id.region&amp;gt;.elb.amazonaws.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HyperloaderJS Hosted at&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://&amp;lt;cloudfront.host-id&amp;gt;/0.103.1/v0/HyperLoader.js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Control center server running on&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://hyperswitch-control-center-&amp;lt;host-id.region&amp;gt;.elb.amazonaws.com&lt;/code&gt;, Login with Email: &lt;code&gt;test@gmail.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hyperswitch Demo Store running on&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://hyperswitch-sdk-demo-&amp;lt;host-id.region&amp;gt;.elb.amazonaws.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs server running on&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://hyperswitch-logs-&amp;lt;host-id.region&amp;gt;.elb.amazonaws.com&lt;/code&gt;, Login with username: &lt;code&gt;admin&lt;/code&gt;, password: &lt;code&gt;admin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We support deployment on GCP and Azure via Helm charts which takes 30-45mins. You can read more at &lt;a href=&#34;https://docs.hyperswitch.io/hyperswitch-open-source/deploy-on-kubernetes-using-helm&#34;&gt;Hyperswitch docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3. Hosted Sandbox&lt;/h3&gt; &#xA;&lt;p&gt;You can experience the product by signing up for our &lt;a href=&#34;https://app.hyperswitch.io/&#34;&gt;hosted sandbox&lt;/a&gt;. The signup process accepts any email ID and provides access to the entire Control Center. You can set up connectors, define workflows for routing and retries, and even try payments from the dashboard.&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/support-feature-requests&#34;&gt; &lt;h2 id=&#34;support-feature-requests&#34;&gt;Support, Feature requests &amp;amp; Bugs&lt;/h2&gt; &lt;/a&gt; &#xA;&lt;p&gt;For any support, join the conversation in &lt;a href=&#34;https://join.slack.com/t/hyperswitch-io/shared_invite/zt-2jqxmpsbm-WXUENx022HjNEy~Ark7Orw&#34;&gt;Slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For new product features, enhancements, roadmap discussions, or to share queries and ideas, visit our &lt;a href=&#34;https://github.com/juspay/hyperswitch/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For reporting a bug, please read the issue guidelines and search for &lt;a href=&#34;https://github.com/juspay/hyperswitch/issues&#34;&gt;existing and closed issues&lt;/a&gt;. If your problem or idea is not addressed yet, please &lt;a href=&#34;https://github.com/juspay/hyperswitch/issues/new/choose&#34;&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/our-vision&#34;&gt; &lt;h2 id=&#34;our-vision&#34;&gt;Our Vision&lt;/h2&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Linux for Payments&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Payments are evolving rapidly worldwide, with hundreds of processors, fraud detection systems, authentication modules, and new payment methods and flows emerging. Businesses building or managing their own payment stacks often face similar challenges, struggle with comparable issues, and find it hard to innovate at the desired pace.&lt;/p&gt; &#xA;&lt;p&gt;Hyperswitch serves as a well-architected designed reference platform, built on best-in-class design principles, empowering businesses to own and customize their payment stack. It provides a reusable core payments stack that can be tailored to specific requirements while relying on the Hyperswitch team for enhancements, support, and continuous innovation.&lt;/p&gt; &#xA;&lt;h3&gt;Our Values&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Embrace Payments Diversity: It will drive innovation in the ecosystem in multiple ways.&lt;/li&gt; &#xA; &lt;li&gt;Make it Open Source: Increases trust; Improves the quality and reusability of software.&lt;/li&gt; &#xA; &lt;li&gt;Be community driven: It enables participatory design and development.&lt;/li&gt; &#xA; &lt;li&gt;Build it like Systems Software: This sets a high bar for Reliability, Security and Performance SLAs.&lt;/li&gt; &#xA; &lt;li&gt;Maximise Value Creation: For developers, customers &amp;amp; partners.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This project is being created and maintained by &lt;a href=&#34;https://juspay.io&#34;&gt;Juspay&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning&#34;&gt; &lt;h2 id=&#34;versioning&#34;&gt;Versioning&lt;/h2&gt; &lt;/a&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license&#34;&gt; &lt;h2 id=&#34;copyright-and-license&#34;&gt;Copyright and License&lt;/h2&gt; &lt;/a&gt; &#xA;&lt;p&gt;This product is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/juspay/hyperswitch/main/team-behind-hyperswitch&#34;&gt; &lt;h2 id=&#34;team-behind-hyperswitch&#34;&gt;Team behind Hyperswitch&lt;/h2&gt; &lt;/a&gt; &#xA;&lt;p&gt;The core team of 150+ engineers building Hyperswitch. Keep up the great work! 🥂&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/juspay/hyperswitch/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=juspay/hyperswitch&#34; alt=&#34;Contributors&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>katanemo/archgw</title>
    <updated>2025-04-01T02:03:27Z</updated>
    <id>tag:github.com,2025-04-01:/katanemo/archgw</id>
    <link href="https://github.com/katanemo/archgw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The AI-native proxy server for agents. Arch handles the pesky heavy lifting in building agentic apps - routing prompts to agents or specifc tools, clarifying user inputs, unifying access and observability to any LLM - so you can build smarter and ship faster.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/arch-logo.png&#34; alt=&#34;Arch Logo&#34; width=&#34;75%&#34; heigh=&#34;auto&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;em&gt;The intelligent (edge and LLM) proxy server for agentic applications.&lt;/em&gt;&lt;br&gt;&lt;br&gt; Move faster by letting Arch handle the &lt;strong&gt;pesky&lt;/strong&gt; heavy lifting in building agents: fast input clarification, agent routing, seamless integration of prompts with tools for common tasks, and unified access and observability of LLMs.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/#Quickstart&#34;&gt;Quickstart&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/#Demos&#34;&gt;Demos&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/#Build-AI-Agent-with-Arch-Gateway&#34;&gt;Build agentic apps with Arch&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/#Use-Arch-Gateway-as-LLM-Router&#34;&gt;Use Arch as an LLM router&lt;/a&gt; • &lt;a href=&#34;https://docs.archgw.com&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/#Contact&#34;&gt;Contact&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/katanemo/arch/actions/workflows/pre-commit.yml&#34;&gt;&lt;img src=&#34;https://github.com/katanemo/arch/actions/workflows/pre-commit.yml/badge.svg?sanitize=true&#34; alt=&#34;pre-commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/katanemo/arch/actions/workflows/rust_tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/katanemo/arch/actions/workflows/rust_tests.yml/badge.svg?sanitize=true&#34; alt=&#34;rust tests (prompt and llm gateway)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/katanemo/arch/actions/workflows/e2e_tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/katanemo/arch/actions/workflows/e2e_tests.yml/badge.svg?sanitize=true&#34; alt=&#34;e2e tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/katanemo/arch/actions/workflows/static.yml&#34;&gt;&lt;img src=&#34;https://github.com/katanemo/arch/actions/workflows/static.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Deploy Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/arch-3?embed=true&amp;amp;utm_source=badge-top-post-badge&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-arch-3&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/top-post-badge.svg?post_id=565761&amp;amp;theme=dark&amp;amp;period=daily&amp;amp;t=1742359429995&#34; alt=&#34;Arch - Build fast, hyper-personalized agents with intelligent infra | Product Hunt&#34; style=&#34;width: 188px; height: 41px;&#34; width=&#34;188&#34; height=&#34;41&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Past the thrill of an AI demo, have you found yourself hitting these walls? You know, the all too familiar ones:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You go from one BIG prompt to specialized prompts, but get stuck building &lt;strong&gt;routing and handoff&lt;/strong&gt; code?&lt;/li&gt; &#xA; &lt;li&gt;You want use new LLMs, but struggle to &lt;strong&gt;quickly and safely add LLMs&lt;/strong&gt; without writing integration code?&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re bogged down with prompt engineering just to &lt;strong&gt;clarify user intent and validate inputs&lt;/strong&gt; effectively?&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re wasting cycles choosing and integrating code for &lt;strong&gt;observability&lt;/strong&gt; instead of it happening transparently?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And you think to youself, can&#39;t I move faster by focusing on higher-level objectives in a language/framework agnostic way? Well, you can! &lt;strong&gt;Arch Gateway&lt;/strong&gt; was built by the contributors of &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy Proxy&lt;/a&gt; with the belief that:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Prompts are nuanced and opaque user requests, which require the same capabilities as traditional HTTP requests including secure handling, intelligent routing, robust observability, and integration with backend (API) systems to improve speed and accuracy for common agentic scenarios – all outside core application logic.*&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core Features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;🚦 Routing&lt;/code&gt;. Engineered with purpose-built &lt;a href=&#34;https://huggingface.co/collections/katanemo/arch-function-66f209a693ea8df14317ad68&#34;&gt;LLMs&lt;/a&gt; for fast (&amp;lt;100ms) agent routing and hand-off scenarios&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;⚡ Tools Use&lt;/code&gt;: For common agentic scenarios let Arch instantly clarfiy and convert prompts to tools/API calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;⛨ Guardrails&lt;/code&gt;: Centrally configure and prevent harmful outcomes and ensure safe user interactions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;🔗 Access to LLMs&lt;/code&gt;: Centralize access and traffic to LLMs with smart retries for continuous availability&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;🕵 Observability&lt;/code&gt;: W3C compatible request tracing and LLM metrics that instantly plugin with popular tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;🧱 Built on Envoy&lt;/code&gt;: Arch runs alongside app servers as a containerized process, and builds on top of &lt;a href=&#34;https://envoyproxy.io&#34;&gt;Envoy&#39;s&lt;/a&gt; proven HTTP management and scalability features to handle ingress and egress traffic related to prompts and LLMs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;High-Level Sequence Diagram&lt;/strong&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/arch_network_diagram_high_level.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Jump to our &lt;a href=&#34;https://docs.archgw.com&#34;&gt;docs&lt;/a&gt;&lt;/strong&gt; to learn how you can use Arch to improve the speed, security and personalization of your GenAI apps.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Today, the function calling LLM (Arch-Function) designed for the agentic and RAG scenarios is hosted free of charge in the US-central region. To offer consistent latencies and throughput, and to manage our expenses, we will enable access to the hosted version via developers keys soon, and give you the option to run that LLM locally. For more details see this issue &lt;a href=&#34;https://github.com/katanemo/archgw/issues/258&#34;&gt;#258&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;To get in touch with us, please join our &lt;a href=&#34;https://discord.gg/pGZf2gcwEc&#34;&gt;discord server&lt;/a&gt;. We will be monitoring that actively and offering support there.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/demos/samples_python/weather_forecast/README.md&#34;&gt;Sample App: Weather Forecast Agent&lt;/a&gt; - A sample agentic weather forecasting app that highlights core function calling capabilities of Arch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/demos/samples_python/network_switch_operator_agent/README.md&#34;&gt;Sample App: Network Operator Agent&lt;/a&gt; - A simple network device switch operator agent that can retrive device statistics and reboot them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/demos/use_cases/spotify_bearer_auth&#34;&gt;User Case: Connecting to SaaS APIs&lt;/a&gt; - Connect 3rd party SaaS APIs to your agentic chat experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Follow this quickstart guide to use arch gateway to build a simple AI agent. Laster in the section we will see how you can Arch Gateway to manage access keys, provide unified access to upstream LLMs and to provide e2e observability.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before you begin, ensure you have the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-started/get-docker/&#34;&gt;Docker System&lt;/a&gt; (v24)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker compose&lt;/a&gt; (v2.29)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt; (v3.12)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Arch&#39;s CLI allows you to manage and interact with the Arch gateway efficiently. To install the CLI, simply run the following command:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] We recommend that developers create a new Python virtual environment to isolate dependencies before installing Arch. This ensures that archgw and its dependencies do not interfere with other packages on your system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python -m venv venv&#xA;$ source venv/bin/activate   # On Windows, use: venv\Scripts\activate&#xA;$ pip install archgw==0.2.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build AI Agent with Arch Gateway&lt;/h3&gt; &#xA;&lt;p&gt;In following quickstart we will show you how easy it is to build AI agent with Arch gateway. We will build a currency exchange agent using following simple steps. For this demo we will use &lt;code&gt;https://api.frankfurter.dev/&lt;/code&gt; to fetch latest price for currencies and assume USD as base currency.&lt;/p&gt; &#xA;&lt;h4&gt;Step 1. Create arch config file&lt;/h4&gt; &#xA;&lt;p&gt;Create &lt;code&gt;arch_config.yaml&lt;/code&gt; file with following content,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v0.1&#xA;&#xA;listener:&#xA;  address: 0.0.0.0&#xA;  port: 10000&#xA;  message_format: huggingface&#xA;  connect_timeout: 0.005s&#xA;&#xA;llm_providers:&#xA;  - name: gpt-4o&#xA;    access_key: $OPENAI_API_KEY&#xA;    provider: openai&#xA;    model: gpt-4o&#xA;&#xA;system_prompt: |&#xA;  You are a helpful assistant.&#xA;&#xA;prompt_guards:&#xA;  input_guards:&#xA;    jailbreak:&#xA;      on_exception:&#xA;        message: Looks like you&#39;re curious about my abilities, but I can only provide assistance for currency exchange.&#xA;&#xA;prompt_targets:&#xA;  - name: currency_exchange&#xA;    description: Get currency exchange rate from USD to other currencies&#xA;    parameters:&#xA;      - name: currency_symbol&#xA;        description: the currency that needs conversion&#xA;        required: true&#xA;        type: str&#xA;        in_path: true&#xA;    endpoint:&#xA;      name: frankfurther_api&#xA;      path: /v1/latest?base=USD&amp;amp;symbols={currency_symbol}&#xA;    system_prompt: |&#xA;      You are a helpful assistant. Show me the currency symbol you want to convert from USD.&#xA;&#xA;  - name: get_supported_currencies&#xA;    description: Get list of supported currencies for conversion&#xA;    endpoint:&#xA;      name: frankfurther_api&#xA;      path: /v1/currencies&#xA;&#xA;endpoints:&#xA;  frankfurther_api:&#xA;    endpoint: api.frankfurter.dev:443&#xA;    protocol: https&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2. Start arch gateway with currency conversion config&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&#xA;$ archgw up arch_config.yaml&#xA;2024-12-05 16:56:27,979 - cli.main - INFO - Starting archgw cli version: 0.1.5&#xA;...&#xA;2024-12-05 16:56:28,485 - cli.utils - INFO - Schema validation successful!&#xA;2024-12-05 16:56:28,485 - cli.main - INFO - Starging arch model server and arch gateway&#xA;...&#xA;2024-12-05 16:56:51,647 - cli.core - INFO - Container is healthy!&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the gateway is up you can start interacting with at port 10000 using openai chat completion API.&lt;/p&gt; &#xA;&lt;p&gt;Some of the sample queries you can ask could be &lt;code&gt;what is currency rate for gbp?&lt;/code&gt; or &lt;code&gt;show me list of currencies for conversion&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Step 3. Interacting with gateway using curl command&lt;/h4&gt; &#xA;&lt;p&gt;Here is a sample curl command you can use to interact,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl --header &#39;Content-Type: application/json&#39; \&#xA;  --data &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;,&#34;content&#34;: &#34;what is exchange rate for gbp&#34;}]}&#39; \&#xA;  http://localhost:10000/v1/chat/completions | jq &#34;.choices[0].message.content&#34;&#xA;&#xA;&#34;As of the date provided in your context, December 5, 2024, the exchange rate for GBP (British Pound) from USD (United States Dollar) is 0.78558. This means that 1 USD is equivalent to 0.78558 GBP.&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to get list of supported currencies,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl --header &#39;Content-Type: application/json&#39; \&#xA;  --data &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;,&#34;content&#34;: &#34;show me list of currencies that are supported for conversion&#34;}]}&#39; \&#xA;  http://localhost:10000/v1/chat/completions | jq &#34;.choices[0].message.content&#34;&#xA;&#xA;&#34;Here is a list of the currencies that are supported for conversion from USD, along with their symbols:\n\n1. AUD - Australian Dollar\n2. BGN - Bulgarian Lev\n3. BRL - Brazilian Real\n4. CAD - Canadian Dollar\n5. CHF - Swiss Franc\n6. CNY - Chinese Renminbi Yuan\n7. CZK - Czech Koruna\n8. DKK - Danish Krone\n9. EUR - Euro\n10. GBP - British Pound\n11. HKD - Hong Kong Dollar\n12. HUF - Hungarian Forint\n13. IDR - Indonesian Rupiah\n14. ILS - Israeli New Sheqel\n15. INR - Indian Rupee\n16. ISK - Icelandic Króna\n17. JPY - Japanese Yen\n18. KRW - South Korean Won\n19. MXN - Mexican Peso\n20. MYR - Malaysian Ringgit\n21. NOK - Norwegian Krone\n22. NZD - New Zealand Dollar\n23. PHP - Philippine Peso\n24. PLN - Polish Złoty\n25. RON - Romanian Leu\n26. SEK - Swedish Krona\n27. SGD - Singapore Dollar\n28. THB - Thai Baht\n29. TRY - Turkish Lira\n30. USD - United States Dollar\n31. ZAR - South African Rand\n\nIf you want to convert USD to any of these currencies, you can select the one you are interested in.&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use Arch Gateway as LLM Router&lt;/h3&gt; &#xA;&lt;h4&gt;Step 1. Create arch config file&lt;/h4&gt; &#xA;&lt;p&gt;Arch operates based on a configuration file where you can define LLM providers, prompt targets, guardrails, etc. Below is an example configuration that defines openai and mistral LLM providers.&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;arch_config.yaml&lt;/code&gt; file with following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v0.1&#xA;&#xA;listener:&#xA;  address: 0.0.0.0&#xA;  port: 10000&#xA;  message_format: huggingface&#xA;  connect_timeout: 0.005s&#xA;&#xA;llm_providers:&#xA;  - name: gpt-4o&#xA;    access_key: $OPENAI_API_KEY&#xA;    provider: openai&#xA;    model: gpt-4o&#xA;    default: true&#xA;&#xA;  - name: ministral-3b&#xA;    access_key: $MISTRAL_API_KEY&#xA;    provider: openai&#xA;    model: ministral-3b-latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2. Start arch gateway&lt;/h4&gt; &#xA;&lt;p&gt;Once the config file is created ensure that you have env vars setup for &lt;code&gt;MISTRAL_API_KEY&lt;/code&gt; and &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; (or these are defined in &lt;code&gt;.env&lt;/code&gt; file).&lt;/p&gt; &#xA;&lt;p&gt;Start arch gateway,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ archgw up arch_config.yaml&#xA;2024-12-05 11:24:51,288 - cli.main - INFO - Starting archgw cli version: 0.1.5&#xA;2024-12-05 11:24:51,825 - cli.utils - INFO - Schema validation successful!&#xA;2024-12-05 11:24:51,825 - cli.main - INFO - Starting arch model server and arch gateway&#xA;...&#xA;2024-12-05 11:25:16,131 - cli.core - INFO - Container is healthy!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 3: Interact with LLM&lt;/h3&gt; &#xA;&lt;h4&gt;Step 3.1: Using OpenAI python client&lt;/h4&gt; &#xA;&lt;p&gt;Make outbound calls via Arch gateway&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from openai import OpenAI&#xA;&#xA;# Use the OpenAI client as usual&#xA;client = OpenAI(&#xA;  # No need to set a specific openai.api_key since it&#39;s configured in Arch&#39;s gateway&#xA;  api_key = &#39;--&#39;,&#xA;  # Set the OpenAI API base URL to the Arch gateway endpoint&#xA;  base_url = &#34;http://127.0.0.1:12000/v1&#34;&#xA;)&#xA;&#xA;response = client.chat.completions.create(&#xA;    # we select model from arch_config file&#xA;    model=&#34;None&#34;,&#xA;    messages=[{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;What is the capital of France?&#34;}],&#xA;)&#xA;&#xA;print(&#34;OpenAI Response:&#34;, response.choices[0].message.content)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3.2: Using curl command&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl --header &#39;Content-Type: application/json&#39; \&#xA;  --data &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;,&#34;content&#34;: &#34;What is the capital of France?&#34;}]}&#39; \&#xA;  http://localhost:12000/v1/chat/completions&#xA;&#xA;{&#xA;  ...&#xA;  &#34;model&#34;: &#34;gpt-4o-2024-08-06&#34;,&#xA;  &#34;choices&#34;: [&#xA;    {&#xA;      ...&#xA;      &#34;message&#34;: {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;The capital of France is Paris.&#34;,&#xA;      },&#xA;    }&#xA;  ],&#xA;...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override model selection using &lt;code&gt;x-arch-llm-provider-hint&lt;/code&gt; header. For example if you want to use mistral using following curl command,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl --header &#39;Content-Type: application/json&#39; \&#xA;  --header &#39;x-arch-llm-provider-hint: ministral-3b&#39; \&#xA;  --data &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;,&#34;content&#34;: &#34;What is the capital of France?&#34;}]}&#39; \&#xA;  http://localhost:12000/v1/chat/completions&#xA;{&#xA;  ...&#xA;  &#34;model&#34;: &#34;ministral-3b-latest&#34;,&#xA;  &#34;choices&#34;: [&#xA;    {&#xA;      &#34;message&#34;: {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;The capital of France is Paris. It is the most populous city in France and is known for its iconic landmarks such as the Eiffel Tower, the Louvre Museum, and Notre-Dame Cathedral. Paris is also a major global center for art, fashion, gastronomy, and culture.&#34;,&#xA;      },&#xA;      ...&#xA;    }&#xA;  ],&#xA;  ...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.archgw.com/guides/observability/observability.html&#34;&gt;Observability&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Arch is designed to support best-in class observability by supporting open standards. Please read our &lt;a href=&#34;https://docs.archgw.com/guides/observability/observability.html&#34;&gt;docs&lt;/a&gt; on observability for more details on tracing, metrics, and logs. The screenshot below is from our integration with Signoz (among others)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/docs/source/_static/img/tracing.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;When debugging issues / errors application logs and access logs provide key information to give you more context on whats going on with the system. Arch gateway runs in info log level and following is a typical output you could see in a typical interaction between developer and arch gateway,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ archgw up --service archgw --foreground&#xA;...&#xA;[2025-03-26 18:32:01.350][26][info] prompt_gateway: on_http_request_body: sending request to model server&#xA;[2025-03-26 18:32:01.851][26][info] prompt_gateway: on_http_call_response: model server response received&#xA;[2025-03-26 18:32:01.852][26][info] prompt_gateway: on_http_call_response: dispatching api call to developer endpoint: weather_forecast_service, path: /weather, method: POST&#xA;[2025-03-26 18:32:01.882][26][info] prompt_gateway: on_http_call_response: developer api call response received: status code: 200&#xA;[2025-03-26 18:32:01.882][26][info] prompt_gateway: on_http_call_response: sending request to upstream llm&#xA;[2025-03-26 18:32:01.883][26][info] llm_gateway: on_http_request_body: provider: gpt-4o-mini, model requested: None, model selected: gpt-4o-mini&#xA;[2025-03-26 18:32:02.818][26][info] llm_gateway: on_http_response_body: time to first token: 1468ms&#xA;[2025-03-26 18:32:04.532][26][info] llm_gateway: on_http_response_body: request latency: 3183ms&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log level can be changed to debug to get more details. To enable debug logs edit (Dockerfile)[arch/Dockerfile], change the log level &lt;code&gt;--component-log-level wasm:info&lt;/code&gt; to &lt;code&gt;--component-log-level wasm:debug&lt;/code&gt;. And after that you need to rebuild docker image and restart the arch gateway using following set of commands,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# make sure you are at the root of the repo&#xA;$ archgw build&#xA;# go to your service that has arch_config.yaml file and issue following command,&#xA;$ archgw up --service archgw --foreground&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;We would love feedback on our &lt;a href=&#34;https://github.com/orgs/katanemo/projects/1&#34;&gt;Roadmap&lt;/a&gt; and we welcome contributions to &lt;strong&gt;Arch&lt;/strong&gt;! Whether you&#39;re fixing bugs, adding new features, improving documentation, or creating tutorials, your help is much appreciated. Please visit our &lt;a href=&#34;https://raw.githubusercontent.com/katanemo/archgw/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; for more details&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sharkdp/fd</title>
    <updated>2025-04-01T02:03:27Z</updated>
    <id>tag:github.com,2025-04-01:/sharkdp/fd</id>
    <link href="https://github.com/sharkdp/fd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, fast and user-friendly alternative to &#39;find&#39;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sharkdp/fd/actions/workflows/CICD.yml&#34;&gt;&lt;img src=&#34;https://github.com/sharkdp/fd/actions/workflows/CICD.yml/badge.svg?sanitize=true&#34; alt=&#34;CICD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/fd-find&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/fd-find.svg?sanitize=true&#34; alt=&#34;Version info&#34;&gt;&lt;/a&gt; [&lt;a href=&#34;https://github.com/cha0ran/fd-zh&#34;&gt;中文&lt;/a&gt;] [&lt;a href=&#34;https://github.com/spearkkk/fd-kor&#34;&gt;한국어&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; is a program to find entries in your filesystem. It is a simple, fast and user-friendly alternative to &lt;a href=&#34;https://www.gnu.org/software/findutils/&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;. While it does not aim to support all of &lt;code&gt;find&lt;/code&gt;&#39;s powerful functionality, it provides sensible (opinionated) defaults for a majority of use cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intuitive syntax: &lt;code&gt;fd PATTERN&lt;/code&gt; instead of &lt;code&gt;find -iname &#39;*PATTERN*&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Regular expression (default) and glob-based patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#benchmark&#34;&gt;Very fast&lt;/a&gt; due to parallelized directory traversal.&lt;/li&gt; &#xA; &lt;li&gt;Uses colors to highlight different file types (same as &lt;code&gt;ls&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#command-execution&#34;&gt;parallel command execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Smart case: the search is case-insensitive by default. It switches to case-sensitive if the pattern contains an uppercase character&lt;a href=&#34;http://vimdoc.sourceforge.net/htmldoc/options.html#&#39;smartcase&#39;&#34;&gt;*&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ignores hidden directories and files, by default.&lt;/li&gt; &#xA; &lt;li&gt;Ignores patterns from your &lt;code&gt;.gitignore&lt;/code&gt;, by default.&lt;/li&gt; &#xA; &lt;li&gt;The command name is &lt;em&gt;50%&lt;/em&gt; shorter&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;*&lt;/a&gt; than &lt;code&gt;find&lt;/code&gt; :-).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/doc/screencast.svg?sanitize=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;First, to get an overview of all available command line options, you can either run &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#command-line-options&#34;&gt;&lt;code&gt;fd -h&lt;/code&gt;&lt;/a&gt; for a concise help message or &lt;code&gt;fd --help&lt;/code&gt; for a more detailed version.&lt;/p&gt; &#xA;&lt;h3&gt;Simple search&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;fd&lt;/em&gt; is designed to find entries in your filesystem. The most basic search you can perform is to run &lt;em&gt;fd&lt;/em&gt; with a single argument: the search pattern. For example, assume that you want to find an old script of yours (the name included &lt;code&gt;netflix&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd netfl&#xA;Software/python/imdb-ratings/netflix-details.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If called with just a single argument like this, &lt;em&gt;fd&lt;/em&gt; searches the current directory recursively for any entries that &lt;em&gt;contain&lt;/em&gt; the pattern &lt;code&gt;netfl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Regular expression search&lt;/h3&gt; &#xA;&lt;p&gt;The search pattern is treated as a regular expression. Here, we search for entries that start with &lt;code&gt;x&lt;/code&gt; and end with &lt;code&gt;rc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd /etc&#xA;&amp;gt; fd &#39;^x.*rc$&#39;&#xA;X11/xinit/xinitrc&#xA;X11/xinit/xserverrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The regular expression syntax used by &lt;code&gt;fd&lt;/code&gt; is &lt;a href=&#34;https://docs.rs/regex/latest/regex/#syntax&#34;&gt;documented here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the root directory&lt;/h3&gt; &#xA;&lt;p&gt;If we want to search a specific directory, it can be given as a second argument to &lt;em&gt;fd&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd passwd /etc&#xA;/etc/default/passwd&#xA;/etc/pam.d/passwd&#xA;/etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List all files, recursively&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;fd&lt;/em&gt; can be called with no arguments. This is very useful to get a quick overview of all entries in the current directory, recursively (similar to &lt;code&gt;ls -R&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd fd/tests&#xA;&amp;gt; fd&#xA;testenv&#xA;testenv/mod.rs&#xA;tests.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use this functionality to list all files in a given directory, you have to use a catch-all pattern such as &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd . fd/tests/&#xA;testenv&#xA;testenv/mod.rs&#xA;tests.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Searching for a particular file extension&lt;/h3&gt; &#xA;&lt;p&gt;Often, we are interested in all files of a particular type. This can be done with the &lt;code&gt;-e&lt;/code&gt; (or &lt;code&gt;--extension&lt;/code&gt;) option. Here, we search for all Markdown files in the fd repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd fd&#xA;&amp;gt; fd -e md&#xA;CONTRIBUTING.md&#xA;README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-e&lt;/code&gt; option can be used in combination with a search pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -e rs mod&#xA;src/fshelper/mod.rs&#xA;src/lscolors/mod.rs&#xA;tests/testenv/mod.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Searching for a particular file name&lt;/h3&gt; &#xA;&lt;p&gt;To find files with exactly the provided search pattern, use the &lt;code&gt;-g&lt;/code&gt; (or &lt;code&gt;--glob&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -g libc.so /usr&#xA;/usr/lib32/libc.so&#xA;/usr/lib/libc.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hidden and ignored files&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;fd&lt;/em&gt; does not search hidden directories and does not show hidden files in the search results. To disable this behavior, we can use the &lt;code&gt;-H&lt;/code&gt; (or &lt;code&gt;--hidden&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd pre-commit&#xA;&amp;gt; fd -H pre-commit&#xA;.git/hooks/pre-commit.sample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we work in a directory that is a Git repository (or includes Git repositories), &lt;em&gt;fd&lt;/em&gt; does not search folders (and does not show files) that match one of the &lt;code&gt;.gitignore&lt;/code&gt; patterns. To disable this behavior, we can use the &lt;code&gt;-I&lt;/code&gt; (or &lt;code&gt;--no-ignore&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd num_cpu&#xA;&amp;gt; fd -I num_cpu&#xA;target/debug/deps/libnum_cpus-f5ce7ef99006aa05.rlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To really search &lt;em&gt;all&lt;/em&gt; files and directories, simply combine the hidden and ignore features to show everything (&lt;code&gt;-HI&lt;/code&gt;) or use &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Matching the full path&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;fd&lt;/em&gt; only matches the filename of each file. However, using the &lt;code&gt;--full-path&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; option, you can match against the full path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -p -g &#39;**/.git/config&#39;&#xA;&amp;gt; fd -p &#39;.*/lesson-\d+/[a-z]+.(jpg|png)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command execution&lt;/h3&gt; &#xA;&lt;p&gt;Instead of just showing the search results, you often want to &lt;em&gt;do something&lt;/em&gt; with them. &lt;code&gt;fd&lt;/code&gt; provides two ways to execute external commands for each of your search results:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt; option runs an external command &lt;em&gt;for each of the search results&lt;/em&gt; (in parallel).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; option launches the external command once, with &lt;em&gt;all search results as arguments&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;Recursively find all zip archives and unpack them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e zip -x unzip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are two such files, &lt;code&gt;file1.zip&lt;/code&gt; and &lt;code&gt;backup/file2.zip&lt;/code&gt;, this would execute &lt;code&gt;unzip file1.zip&lt;/code&gt; and &lt;code&gt;unzip backup/file2.zip&lt;/code&gt;. The two &lt;code&gt;unzip&lt;/code&gt; processes run in parallel (if the files are found fast enough).&lt;/p&gt; &#xA;&lt;p&gt;Find all &lt;code&gt;*.h&lt;/code&gt; and &lt;code&gt;*.cpp&lt;/code&gt; files and auto-format them inplace with &lt;code&gt;clang-format -i&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e h -e cpp -x clang-format -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how the &lt;code&gt;-i&lt;/code&gt; option to &lt;code&gt;clang-format&lt;/code&gt; can be passed as a separate argument. This is why we put the &lt;code&gt;-x&lt;/code&gt; option last.&lt;/p&gt; &#xA;&lt;p&gt;Find all &lt;code&gt;test_*.py&lt;/code&gt; files and open them in your favorite editor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -g &#39;test_*.py&#39; -X vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we use capital &lt;code&gt;-X&lt;/code&gt; here to open a single &lt;code&gt;vim&lt;/code&gt; instance. If there are two such files, &lt;code&gt;test_basic.py&lt;/code&gt; and &lt;code&gt;lib/test_advanced.py&lt;/code&gt;, this will run &lt;code&gt;vim test_basic.py lib/test_advanced.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To see details like file permissions, owners, file sizes etc., you can tell &lt;code&gt;fd&lt;/code&gt; to show them by running &lt;code&gt;ls&lt;/code&gt; for each result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd … -X ls -lhd --color=always&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This pattern is so useful that &lt;code&gt;fd&lt;/code&gt; provides a shortcut. You can use the &lt;code&gt;-l&lt;/code&gt;/&lt;code&gt;--list-details&lt;/code&gt; option to execute &lt;code&gt;ls&lt;/code&gt; in this way: &lt;code&gt;fd … -l&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt; option is also useful when combining &lt;code&gt;fd&lt;/code&gt; with &lt;a href=&#34;https://github.com/BurntSushi/ripgrep/&#34;&gt;ripgrep&lt;/a&gt; (&lt;code&gt;rg&lt;/code&gt;) in order to search within a certain class of files, like all C++ source files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e cpp -e cxx -e h -e hpp -X rg &#39;std::cout&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert all &lt;code&gt;*.jpg&lt;/code&gt; files to &lt;code&gt;*.png&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd -e jpg -x convert {} {.}.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;{}&lt;/code&gt; is a placeholder for the search result. &lt;code&gt;{.}&lt;/code&gt; is the same, without the file extension. See below for more details on the placeholder syntax.&lt;/p&gt; &#xA;&lt;p&gt;The terminal output of commands run from parallel threads using &lt;code&gt;-x&lt;/code&gt; will not be interlaced or garbled, so &lt;code&gt;fd -x&lt;/code&gt; can be used to rudimentarily parallelize a task run over many files. An example of this is calculating the checksum of each individual file within a directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fd -tf -x md5sum &amp;gt; file_checksums.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Placeholder syntax&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; options take a &lt;em&gt;command template&lt;/em&gt; as a series of arguments (instead of a single string). If you want to add additional options to &lt;code&gt;fd&lt;/code&gt; after the command template, you can terminate it with a &lt;code&gt;\;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The syntax for generating commands is similar to that of &lt;a href=&#34;https://www.gnu.org/software/parallel/&#34;&gt;GNU Parallel&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{}&lt;/code&gt;: A placeholder token that will be replaced with the path of the search result (&lt;code&gt;documents/images/party.jpg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{.}&lt;/code&gt;: Like &lt;code&gt;{}&lt;/code&gt;, but without the file extension (&lt;code&gt;documents/images/party&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{/}&lt;/code&gt;: A placeholder that will be replaced by the basename of the search result (&lt;code&gt;party.jpg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{//}&lt;/code&gt;: The parent of the discovered path (&lt;code&gt;documents/images&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{/.}&lt;/code&gt;: The basename, with the extension removed (&lt;code&gt;party&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do not include a placeholder, &lt;em&gt;fd&lt;/em&gt; automatically adds a &lt;code&gt;{}&lt;/code&gt; at the end.&lt;/p&gt; &#xA;&lt;h4&gt;Parallel vs. serial execution&lt;/h4&gt; &#xA;&lt;p&gt;For &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt;, you can control the number of parallel jobs by using the &lt;code&gt;-j&lt;/code&gt;/&lt;code&gt;--threads&lt;/code&gt; option. Use &lt;code&gt;--threads=1&lt;/code&gt; for serial execution.&lt;/p&gt; &#xA;&lt;h3&gt;Excluding specific files or directories&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes we want to ignore search results from a specific subdirectory. For example, we might want to search all hidden files and directories (&lt;code&gt;-H&lt;/code&gt;) but exclude all matches from &lt;code&gt;.git&lt;/code&gt; directories. We can use the &lt;code&gt;-E&lt;/code&gt; (or &lt;code&gt;--exclude&lt;/code&gt;) option for this. It takes an arbitrary glob pattern as an argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -H -E .git …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use this to skip mounted directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -E /mnt/external-drive …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.. or to skip certain file types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -E &#39;*.bak&#39; …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make exclude-patterns like these permanent, you can create a &lt;code&gt;.fdignore&lt;/code&gt; file. They work like &lt;code&gt;.gitignore&lt;/code&gt; files, but are specific to &lt;code&gt;fd&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cat ~/.fdignore&#xA;/mnt/external-drive&#xA;*.bak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;code&gt;fd&lt;/code&gt; also supports &lt;code&gt;.ignore&lt;/code&gt; files that are used by other programs such as &lt;code&gt;rg&lt;/code&gt; or &lt;code&gt;ag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want &lt;code&gt;fd&lt;/code&gt; to ignore these patterns globally, you can put them in &lt;code&gt;fd&lt;/code&gt;&#39;s global ignore file. This is usually located in &lt;code&gt;~/.config/fd/ignore&lt;/code&gt; in macOS or Linux, and &lt;code&gt;%APPDATA%\fd\ignore&lt;/code&gt; in Windows.&lt;/p&gt; &#xA;&lt;p&gt;You may wish to include &lt;code&gt;.git/&lt;/code&gt; in your &lt;code&gt;fd/ignore&lt;/code&gt; file so that &lt;code&gt;.git&lt;/code&gt; directories, and their contents are not included in output if you use the &lt;code&gt;--hidden&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Deleting files&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;fd&lt;/code&gt; to remove all files and directories that are matched by your search pattern. If you only want to remove files, you can use the &lt;code&gt;--exec-batch&lt;/code&gt;/&lt;code&gt;-X&lt;/code&gt; option to call &lt;code&gt;rm&lt;/code&gt;. For example, to recursively remove all &lt;code&gt;.DS_Store&lt;/code&gt; files, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -H &#39;^\.DS_Store$&#39; -tf -X rm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are unsure, always call &lt;code&gt;fd&lt;/code&gt; without &lt;code&gt;-X rm&lt;/code&gt; first. Alternatively, use &lt;code&gt;rm&lt;/code&gt;s &#34;interactive&#34; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -H &#39;^\.DS_Store$&#39; -tf -X rm -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also want to remove a certain class of directories, you can use the same technique. You will have to use &lt;code&gt;rm&lt;/code&gt;s &lt;code&gt;--recursive&lt;/code&gt;/&lt;code&gt;-r&lt;/code&gt; flag to remove directories.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] There are scenarios where using &lt;code&gt;fd … -X rm -r&lt;/code&gt; can cause race conditions: if you have a path like &lt;code&gt;…/foo/bar/foo/…&lt;/code&gt; and want to remove all directories named &lt;code&gt;foo&lt;/code&gt;, you can end up in a situation where the outer &lt;code&gt;foo&lt;/code&gt; directory is removed first, leading to (harmless) &lt;em&gt;&#34;&#39;foo/bar/foo&#39;: No such file or directory&#34;&lt;/em&gt; errors in the &lt;code&gt;rm&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Command-line options&lt;/h3&gt; &#xA;&lt;p&gt;This is the output of &lt;code&gt;fd -h&lt;/code&gt;. To see the full set of command-line options, use &lt;code&gt;fd --help&lt;/code&gt; which also includes a much more detailed help text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: fd [OPTIONS] [pattern] [path]...&#xA;&#xA;Arguments:&#xA;  [pattern]  the search pattern (a regular expression, unless &#39;--glob&#39; is used; optional)&#xA;  [path]...  the root directories for the filesystem search (optional)&#xA;&#xA;Options:&#xA;  -H, --hidden                     Search hidden files and directories&#xA;  -I, --no-ignore                  Do not respect .(git|fd)ignore files&#xA;  -s, --case-sensitive             Case-sensitive search (default: smart case)&#xA;  -i, --ignore-case                Case-insensitive search (default: smart case)&#xA;  -g, --glob                       Glob-based search (default: regular expression)&#xA;  -a, --absolute-path              Show absolute instead of relative paths&#xA;  -l, --list-details               Use a long listing format with file metadata&#xA;  -L, --follow                     Follow symbolic links&#xA;  -p, --full-path                  Search full abs. path (default: filename only)&#xA;  -d, --max-depth &amp;lt;depth&amp;gt;          Set maximum search depth (default: none)&#xA;  -E, --exclude &amp;lt;pattern&amp;gt;          Exclude entries that match the given glob pattern&#xA;  -t, --type &amp;lt;filetype&amp;gt;            Filter by type: file (f), directory (d/dir), symlink (l),&#xA;                                   executable (x), empty (e), socket (s), pipe (p), char-device&#xA;                                   (c), block-device (b)&#xA;  -e, --extension &amp;lt;ext&amp;gt;            Filter by file extension&#xA;  -S, --size &amp;lt;size&amp;gt;                Limit results based on the size of files&#xA;      --changed-within &amp;lt;date|dur&amp;gt;  Filter by file modification time (newer than)&#xA;      --changed-before &amp;lt;date|dur&amp;gt;  Filter by file modification time (older than)&#xA;  -o, --owner &amp;lt;user:group&amp;gt;         Filter by owning user and/or group&#xA;      --format &amp;lt;fmt&amp;gt;               Print results according to template&#xA;  -x, --exec &amp;lt;cmd&amp;gt;...              Execute a command for each search result&#xA;  -X, --exec-batch &amp;lt;cmd&amp;gt;...        Execute a command with all search results at once&#xA;  -c, --color &amp;lt;when&amp;gt;               When to use colors [default: auto] [possible values: auto,&#xA;                                   always, never]&#xA;      --hyperlink[=&amp;lt;when&amp;gt;]         Add hyperlinks to output paths [default: never] [possible&#xA;                                   values: auto, always, never]&#xA;  -h, --help                       Print help (see more with &#39;--help&#39;)&#xA;  -V, --version                    Print version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s search my home folder for files that end in &lt;code&gt;[0-9].jpg&lt;/code&gt;. It contains ~750.000 subdirectories and about a 4 million files. For averaging and statistical analysis, I&#39;m using &lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34;&gt;hyperfine&lt;/a&gt;. The following benchmarks are performed with a &#34;warm&#34;/pre-filled disk-cache (results for a &#34;cold&#34; disk-cache show the same trends).&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s start with &lt;code&gt;find&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark 1: find ~ -iregex &#39;.*[0-9]\.jpg$&#39;&#xA;  Time (mean ± σ):     19.922 s ±  0.109 s&#xA;  Range (min … max):   19.765 s … 20.065 s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;find&lt;/code&gt; is much faster if it does not need to perform a regular-expression search:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark 2: find ~ -iname &#39;*[0-9].jpg&#39;&#xA;  Time (mean ± σ):     11.226 s ±  0.104 s&#xA;  Range (min … max):   11.119 s … 11.466 s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s try the same for &lt;code&gt;fd&lt;/code&gt;. Note that &lt;code&gt;fd&lt;/code&gt; performs a regular expression search by default. The options &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt; option is needed here for a fair comparison. Otherwise &lt;code&gt;fd&lt;/code&gt; does not have to traverse hidden folders and ignored paths (see below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Benchmark 3: fd -u &#39;[0-9]\.jpg$&#39; ~&#xA;  Time (mean ± σ):     854.8 ms ±  10.0 ms&#xA;  Range (min … max):   839.2 ms … 868.9 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this particular example, &lt;code&gt;fd&lt;/code&gt; is approximately &lt;strong&gt;23 times faster&lt;/strong&gt; than &lt;code&gt;find -iregex&lt;/code&gt; and about &lt;strong&gt;13 times faster&lt;/strong&gt; than &lt;code&gt;find -iname&lt;/code&gt;. By the way, both tools found the exact same 546 files &lt;span&gt;😄&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is &lt;em&gt;one particular&lt;/em&gt; benchmark on &lt;em&gt;one particular&lt;/em&gt; machine. While we have performed a lot of different tests (and found consistent results), things might be different for you! We encourage everyone to try it out on their own. See &lt;a href=&#34;https://github.com/sharkdp/fd-benchmarks&#34;&gt;this repository&lt;/a&gt; for all necessary scripts.&lt;/p&gt; &#xA;&lt;p&gt;Concerning &lt;em&gt;fd&lt;/em&gt;&#39;s speed, a lot of credit goes to the &lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; crates that are also used in &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; (check it out!).&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;fd&lt;/code&gt; does not find my file!&lt;/h3&gt; &#xA;&lt;p&gt;Remember that &lt;code&gt;fd&lt;/code&gt; ignores hidden directories and files by default. It also ignores patterns from &lt;code&gt;.gitignore&lt;/code&gt; files. If you want to make sure to find absolutely every possible file, always use the options &lt;code&gt;-u&lt;/code&gt;/&lt;code&gt;--unrestricted&lt;/code&gt; option (or &lt;code&gt;-HI&lt;/code&gt; to enable hidden and ignored files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -u …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also remember that by default, &lt;code&gt;fd&lt;/code&gt; only searches based on the filename and doesn&#39;t compare the pattern to the full path. If you want to search based on the full path (similar to the &lt;code&gt;-path&lt;/code&gt; option of &lt;code&gt;find&lt;/code&gt;) you need to use the &lt;code&gt;--full-path&lt;/code&gt; (or &lt;code&gt;-p&lt;/code&gt;) option.&lt;/p&gt; &#xA;&lt;h3&gt;Colorized output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; can colorize files by extension, just like &lt;code&gt;ls&lt;/code&gt;. In order for this to work, the environment variable &lt;a href=&#34;https://linux.die.net/man/5/dir_colors&#34;&gt;&lt;code&gt;LS_COLORS&lt;/code&gt;&lt;/a&gt; has to be set. Typically, the value of this variable is set by the &lt;code&gt;dircolors&lt;/code&gt; command which provides a convenient configuration format to define colors for different file formats. On most distributions, &lt;code&gt;LS_COLORS&lt;/code&gt; should be set already. If you are on Windows or if you are looking for alternative, more complete (or more colorful) variants, see &lt;a href=&#34;https://github.com/sharkdp/vivid&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/seebi/dircolors-solarized&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/trapd00r/LS_COLORS&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; also honors the &lt;a href=&#34;https://no-color.org/&#34;&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/a&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;fd&lt;/code&gt; doesn&#39;t seem to interpret my regex pattern correctly&lt;/h3&gt; &#xA;&lt;p&gt;A lot of special regex characters (like &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, ..) are also special characters in your shell. If in doubt, always make sure to put single quotes around the regex pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd &#39;^[A-Z][0-9]+$&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your pattern starts with a dash, you have to add &lt;code&gt;--&lt;/code&gt; to signal the end of command line options. Otherwise, the pattern will be interpreted as a command-line option. Alternatively, use a character class with a single hyphen character:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -- &#39;-pattern&#39;&#xA;&amp;gt; fd &#39;[-]pattern&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&#34;Command not found&#34; for &lt;code&gt;alias&lt;/code&gt;es or shell functions&lt;/h3&gt; &#xA;&lt;p&gt;Shell &lt;code&gt;alias&lt;/code&gt;es and shell functions can not be used for command execution via &lt;code&gt;fd -x&lt;/code&gt; or &lt;code&gt;fd -X&lt;/code&gt;. In &lt;code&gt;zsh&lt;/code&gt;, you can make the alias global via &lt;code&gt;alias -g myalias=&#34;…&#34;&lt;/code&gt;. In &lt;code&gt;bash&lt;/code&gt;, you can use &lt;code&gt;export -f my_function&lt;/code&gt; to make available to child processes. You would still need to call &lt;code&gt;fd -x bash -c &#39;my_function &#34;$1&#34;&#39; bash&lt;/code&gt;. For other use cases or shells, use a (temporary) shell script.&lt;/p&gt; &#xA;&lt;h2&gt;Integration with other programs&lt;/h2&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;fzf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;em&gt;fd&lt;/em&gt; to generate input for the command-line fuzzy finder &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type file&#39;&#xA;export FZF_CTRL_T_COMMAND=&#34;$FZF_DEFAULT_COMMAND&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can type &lt;code&gt;vim &amp;lt;Ctrl-T&amp;gt;&lt;/code&gt; on your terminal to open fzf and search through the fd-results.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you might like to follow symbolic links and include hidden files (but exclude &lt;code&gt;.git&lt;/code&gt; folders):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type file --follow --hidden --exclude .git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even use fd&#39;s colored output inside fzf by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export FZF_DEFAULT_COMMAND=&#34;fd --type file --color=always&#34;&#xA;export FZF_DEFAULT_OPTS=&#34;--ansi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://github.com/junegunn/fzf#tips&#34;&gt;Tips section&lt;/a&gt; of the fzf README.&lt;/p&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;rofi&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/davatorium/rofi&#34;&gt;&lt;em&gt;rofi&lt;/em&gt;&lt;/a&gt; is a graphical launch menu application that is able to create menus by reading from &lt;em&gt;stdin&lt;/em&gt;. Piping &lt;code&gt;fd&lt;/code&gt; output into &lt;code&gt;rofi&lt;/code&gt;s &lt;code&gt;-dmenu&lt;/code&gt; mode creates fuzzy-searchable lists of files and directories.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Create a case-insensitive searchable multi-select list of &lt;em&gt;PDF&lt;/em&gt; files under your &lt;code&gt;$HOME&lt;/code&gt; directory and open the selection with your configured PDF viewer. To list all file types, drop the &lt;code&gt;-e pdf&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fd --type f -e pdf . $HOME | rofi -keep-right -dmenu -i -p FILES -multi-select | xargs -I {} xdg-open {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To modify the list that is presented by rofi, add arguments to the &lt;code&gt;fd&lt;/code&gt; command. To modify the search behaviour of rofi, add arguments to the &lt;code&gt;rofi&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;emacs&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The emacs package &lt;a href=&#34;https://github.com/technomancy/find-file-in-project&#34;&gt;find-file-in-project&lt;/a&gt; can use &lt;em&gt;fd&lt;/em&gt; to find files.&lt;/p&gt; &#xA;&lt;p&gt;After installing &lt;code&gt;find-file-in-project&lt;/code&gt;, add the line &lt;code&gt;(setq ffip-use-rust-fd t)&lt;/code&gt; to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;In emacs, run &lt;code&gt;M-x find-file-in-project-by-selected&lt;/code&gt; to find matching files. Alternatively, run &lt;code&gt;M-x find-file-in-project&lt;/code&gt; to list all available files in the project.&lt;/p&gt; &#xA;&lt;h3&gt;Printing the output as a tree&lt;/h3&gt; &#xA;&lt;p&gt;To format the output of &lt;code&gt;fd&lt;/code&gt; as a file-tree you can use the &lt;code&gt;tree&lt;/code&gt; command with &lt;code&gt;--fromfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ fd | tree --fromfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be more useful than running &lt;code&gt;tree&lt;/code&gt; by itself because &lt;code&gt;tree&lt;/code&gt; does not ignore any files by default, nor does it support as rich a set of options as &lt;code&gt;fd&lt;/code&gt; does to control what to print:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ fd --extension rs | tree --fromfile&#xA;.&#xA;├── build.rs&#xA;└── src&#xA;    ├── app.rs&#xA;    └── error.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On bash and similar you can simply create an alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ alias as-tree=&#39;tree --fromfile&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using fd with &lt;code&gt;xargs&lt;/code&gt; or &lt;code&gt;parallel&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;fd&lt;/code&gt; has a builtin feature for &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/#command-execution&#34;&gt;command execution&lt;/a&gt; with its &lt;code&gt;-x&lt;/code&gt;/&lt;code&gt;--exec&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt;/&lt;code&gt;--exec-batch&lt;/code&gt; options. If you prefer, you can still use it in combination with &lt;code&gt;xargs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; fd -0 -e rs | xargs -0 wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the &lt;code&gt;-0&lt;/code&gt; option tells &lt;em&gt;fd&lt;/em&gt; to separate search results by the NULL character (instead of newlines). In the same way, the &lt;code&gt;-0&lt;/code&gt; option of &lt;code&gt;xargs&lt;/code&gt; tells it to read the input in this way.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/fd-find/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/fd-find.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;... and other Debian-based Linux distributions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you run Ubuntu 19.04 (Disco Dingo) or newer, you can install the &lt;a href=&#34;https://packages.ubuntu.com/fd-find&#34;&gt;officially maintained package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the binary is called &lt;code&gt;fdfind&lt;/code&gt; as the binary name &lt;code&gt;fd&lt;/code&gt; is already used by another package. It is recommended that after installation, you add a link to &lt;code&gt;fd&lt;/code&gt; by executing command &lt;code&gt;ln -s $(which fdfind) ~/.local/bin/fd&lt;/code&gt;, in order to use &lt;code&gt;fd&lt;/code&gt; in the same way as in this documentation. Make sure that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use an older version of Ubuntu, you can download the latest &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href=&#34;https://github.com/sharkdp/fd/releases&#34;&gt;release page&lt;/a&gt; and install it via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -i fd_9.0.0_amd64.deb # adapt version number and architecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the .deb packages on the release page for this project still name the executable &lt;code&gt;fd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;On Debian&lt;/h3&gt; &#xA;&lt;p&gt;If you run Debian Buster or newer, you can install the &lt;a href=&#34;https://tracker.debian.org/pkg/rust-fd-find&#34;&gt;officially maintained Debian package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the binary is called &lt;code&gt;fdfind&lt;/code&gt; as the binary name &lt;code&gt;fd&lt;/code&gt; is already used by another package. It is recommended that after installation, you add a link to &lt;code&gt;fd&lt;/code&gt; by executing command &lt;code&gt;ln -s $(which fdfind) ~/.local/bin/fd&lt;/code&gt;, in order to use &lt;code&gt;fd&lt;/code&gt; in the same way as in this documentation. Make sure that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the .deb packages on the release page for this project still name the executable &lt;code&gt;fd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;On Fedora&lt;/h3&gt; &#xA;&lt;p&gt;Starting with Fedora 28, you can install &lt;code&gt;fd&lt;/code&gt; from the official package sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Alpine Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=fd&#34;&gt;the fd package&lt;/a&gt; from the official sources, provided you have the appropriate repository enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apk add fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://www.archlinux.org/packages/extra/x86_64/fd/&#34;&gt;the fd package&lt;/a&gt; from the official repos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install fd &lt;a href=&#34;https://aur.archlinux.org/packages/fd-git&#34;&gt;from the AUR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;On Gentoo Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://packages.gentoo.org/packages/sys-apps/fd&#34;&gt;the fd ebuild&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge -av fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On openSUSE Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://software.opensuse.org/package/fd&#34;&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Void Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;fd&lt;/code&gt; via xbps-install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xbps-install -S fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On ALT Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://packages.altlinux.org/en/sisyphus/srpms/fd/&#34;&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Solus&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://github.com/getsolus/packages/tree/main/packages/f/fd&#34;&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On RedHat Enterprise Linux 8/9 (RHEL8/9), Almalinux 8/9, EuroLinux 8/9 or Rocky Linux 8/9&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/tkbcopr/fd/&#34;&gt;the &lt;code&gt;fd&lt;/code&gt; package&lt;/a&gt; from Fedora Copr.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf copr enable tkbcopr/fd&#xA;dnf install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A different version using the &lt;a href=&#34;https://github.com/sharkdp/fd/pull/481#issuecomment-534494592&#34;&gt;slower&lt;/a&gt; malloc &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=2216193#c1&#34;&gt;instead of jemalloc&lt;/a&gt; is also available from the EPEL8/9 repo as the package &lt;code&gt;fd-find&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;On macOS&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;fd&lt;/code&gt; with &lt;a href=&#34;https://formulae.brew.sh/formula/fd&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;… or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;port install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;p&gt;You can download pre-built binaries from the &lt;a href=&#34;https://github.com/sharkdp/fd/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can install &lt;code&gt;fd&lt;/code&gt; via &lt;a href=&#34;http://scoop.sh&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/package-manager/&#34;&gt;Winget&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install sharkdp.fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On GuixOS&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://guix.gnu.org/en/packages/fd-8.1.1/&#34;&gt;the fd package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;guix install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On NixOS / via Nix&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix package manager&lt;/a&gt; to install &lt;code&gt;fd&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-env -i fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via Flox&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://flox.dev&#34;&gt;Flox&lt;/a&gt; to install &lt;code&gt;fd&lt;/code&gt; into a Flox environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flox install fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://www.freshports.org/sysutils/fd&#34;&gt;the fd-find package&lt;/a&gt; from the official repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From npm&lt;/h3&gt; &#xA;&lt;p&gt;On Linux and macOS, you can install the &lt;a href=&#34;https://npm.im/fd-find&#34;&gt;fd-find&lt;/a&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;With Rust&#39;s package manager &lt;a href=&#34;https://github.com/rust-lang/cargo&#34;&gt;cargo&lt;/a&gt;, you can install &lt;em&gt;fd&lt;/em&gt; via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install fd-find&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that rust version &lt;em&gt;1.77.2&lt;/em&gt; or later is required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; is also needed for the build.&lt;/p&gt; &#xA;&lt;h3&gt;From binaries&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/sharkdp/fd/releases&#34;&gt;release page&lt;/a&gt; includes precompiled binaries for Linux, macOS and Windows. Statically-linked binaries are also available: look for archives with &lt;code&gt;musl&lt;/code&gt; in the file name.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sharkdp/fd&#xA;&#xA;# Build&#xA;cd fd&#xA;cargo build&#xA;&#xA;# Run unit tests and integration tests&#xA;cargo test&#xA;&#xA;# Install&#xA;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp&#34;&gt;sharkdp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tmccombs&#34;&gt;tmccombs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tavianator&#34;&gt;tavianator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; is distributed under the terms of both the MIT License and the Apache License 2.0.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sharkdp/fd/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; files for license details.&lt;/p&gt;</summary>
  </entry>
</feed>