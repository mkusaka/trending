<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-01T01:49:07Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BloopAI/bloop</title>
    <updated>2024-06-01T01:49:07Z</updated>
    <id>tag:github.com,2024-06-01:/BloopAI/bloop</id>
    <link href="https://github.com/BloopAI/bloop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;bloop is a fast code search engine written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://assets.bloop.ai/bloop_github_logo_dark.png&#34;&gt; &#xA; &lt;img alt=&#34;bloop logo&#34; src=&#34;https://assets.bloop.ai/bloop_github_logo_light.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;bloop is ChatGPT for your code. Ask questions in natural language, search for code and generate patches using your existing codebase as context.&lt;/p&gt; &#xA;&lt;p&gt;Engineers are increasing their productivity by using bloop to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explain how files or features work in simple language&lt;/li&gt; &#xA; &lt;li&gt;Write new features, using their code as context&lt;/li&gt; &#xA; &lt;li&gt;Understand how to use poorly documented open source libraries&lt;/li&gt; &#xA; &lt;li&gt;Pinpoint errors&lt;/li&gt; &#xA; &lt;li&gt;Ask questions about English language codebases in other languages&lt;/li&gt; &#xA; &lt;li&gt;Reduce code duplication by checking for existing functionality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BloopAI/bloop/assets/7957964/01db3ccb-4af0-49a0-92d6-5a9c42357a51&#34;&gt;https://github.com/BloopAI/bloop/assets/7957964/01db3ccb-4af0-49a0-92d6-5a9c42357a51&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AI-based conversational search&lt;/li&gt; &#xA; &lt;li&gt;Code Studio, an LLM playground that uses your code as context&lt;/li&gt; &#xA; &lt;li&gt;Blazing fast regex search&lt;/li&gt; &#xA; &lt;li&gt;Sync your local and GitHub repositories&lt;/li&gt; &#xA; &lt;li&gt;Sophisticated query filters so you can narrow down your results&lt;/li&gt; &#xA; &lt;li&gt;Find functions, variables or traits with symbol search&lt;/li&gt; &#xA; &lt;li&gt;Precise code navigation (go-to-reference and go-to-definition) for 10+ of the most popular languages built with &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;Tree-sitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Privacy focussed on-device embedding for semantic search&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;bloop stands on the shoulders of the Rust ecosystem. Our search indexes are powered by &lt;a href=&#34;https://github.com/quickwit-oss/tantivy&#34;&gt;Tantivy&lt;/a&gt; and &lt;a href=&#34;https://github.com/qdrant/qdrant&#34;&gt;Qdrant&lt;/a&gt;, and our multi-platform app is built with &lt;a href=&#34;https://github.com/tauri-apps/tauri&#34;&gt;Tauri&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BloopAI/bloop/assets/7957964/93715188-d8d5-477b-8cd1-95d9cbd368cb&#34;&gt;https://github.com/BloopAI/bloop/assets/7957964/93715188-d8d5-477b-8cd1-95d9cbd368cb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to get started with bloop is to &lt;a href=&#34;https://github.com/BloopAI/bloop/releases&#34;&gt;download the app&lt;/a&gt; and follow the onboarding steps. Checkout our &lt;a href=&#34;https://bloop.ai/understand/docs/getting-started&#34;&gt;getting started guide&lt;/a&gt; and our references for &lt;a href=&#34;https://bloop.ai/understand/docs/natural-language-queries&#34;&gt;conversational&lt;/a&gt; and &lt;a href=&#34;https://bloop.ai/understand/docs/regex-queries&#34;&gt;regex&lt;/a&gt; search and &lt;a href=&#34;https://bloop.ai/understand/docs/code-studio&#34;&gt;Code Studio&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For instructions on how to build from source or run bloop from the command line, check out these pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BloopAI/bloop/oss/apps/desktop/README.md&#34;&gt;Build bloop app from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BloopAI/bloop/oss/server/README.md&#34;&gt;Run bloop from the command line&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you encounter any index issues you can wipe the bloop cache and reindex. Instructions on how to do this on different platforms &lt;a href=&#34;https://raw.githubusercontent.com/BloopAI/bloop/oss/apps/desktop/README.md&#34;&gt;are here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;You can build bloop from source and run it with your own OpenAI API key. Clone the repo, make sure the &lt;code&gt;oss&lt;/code&gt; branch is checked out, and create a file called &lt;code&gt;local_config.json&lt;/code&gt; at the top-level of the repo. &lt;code&gt;local_config.json&lt;/code&gt; should contain the following fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;github_access_token&#34;: &#34;&amp;lt;YOUR_GITHUB_ACCESS_TOKEN&amp;gt;&#34;,&#xA;    &#34;openai_api_key&#34;: &#34;&amp;lt;YOUR_OPENAI_API_KEY&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then follow &lt;a href=&#34;https://raw.githubusercontent.com/BloopAI/bloop/oss/apps/desktop/README.md&#34;&gt;these installation instructions&lt;/a&gt;. If built from source, bloop will not collect any telemetry.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/BloopAI/bloop&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions big and small! Before jumping in please read &lt;a href=&#34;https://raw.githubusercontent.com/BloopAI/bloop/oss/CONTRIBUTING.md&#34;&gt;our contributors guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BloopAI/bloop/oss/CODE_OF_CONDUCT.md&#34;&gt;our code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to find your way around the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;apps/desktop&lt;/code&gt;: The Tauri app&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server/bleep&lt;/code&gt;: The Rust backend which contains the core search and navigation logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;client&lt;/code&gt;: The React frontend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We use Git LFS for dependencies that are expensive to build.&lt;/p&gt; &#xA;&lt;p&gt;To make sure you have everything you need to start building, you&#39;ll need to install the &lt;code&gt;git-lfs&lt;/code&gt; package for your favourite operating system, then run the following commands in this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git lfs install&#xA;git lfs pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you find a bug or have a feature request, &lt;a href=&#34;https://github.com/BloopAI/bloop/issues&#34;&gt;open an issue&lt;/a&gt;! You can find the application logs here:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Logs Path&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/Library/Application\ Support/ai.bloop.bloop/bleep/logs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;%APPDATA%/bloop/bleep/logs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/.local/share/bloop/bleep/logs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;We store as little data as possible. We use telemetry to helps us identify bugs and make data-driven product decisions. You can read our full privacy policy &lt;a href=&#34;https://bloop.ai/privacy&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;bloop is licensed under the &lt;code&gt;Apache 2.0&lt;/code&gt; license as defined in &lt;a href=&#34;https://raw.githubusercontent.com/BloopAI/bloop/oss/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linebender/xilem</title>
    <updated>2024-06-01T01:49:07Z</updated>
    <id>tag:github.com,2024-06-01:/linebender/xilem</id>
    <link href="https://github.com/linebender/xilem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An experimental Rust native UI framework&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Xilem&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;An experimental Rust architecture for reactive UI&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://xi.zulipchat.com/#narrow/stream/354396-xilem&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Xi%20Zulip-%23xilem-blue?logo=Zulip&#34; alt=&#34;Xi Zulip&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/linebender/xilem&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/linebender/xilem/status.svg?sanitize=true&#34; alt=&#34;dependency status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/linebender/xilem/main/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true&#34; alt=&#34;Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linebender/xilem/actions&#34;&gt;&lt;img src=&#34;https://github.com/linebender/xilem/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/xilem&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/xilem.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/xilem&#34;&gt;&lt;img src=&#34;https://docs.rs/xilem/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This repo contains an experimental architecture, implemented with a toy UI. At a very high level, it combines ideas from Flutter, SwiftUI, and Elm. Like all of these, it uses lightweight view objects, diffing them to provide minimal updates to a retained UI. Like SwiftUI, it is strongly typed.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xi.zulipchat.com/#narrow/stream/354396-xilem&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Xi%20Zulip-%23xilem-blue?logo=Zulip&#34; alt=&#34;Xi Zulip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discussion of Xilem development happens in the &lt;a href=&#34;https://xi.zulipchat.com/&#34;&gt;Xi Zulip&lt;/a&gt;, specifically the &lt;a href=&#34;https://xi.zulipchat.com/#narrow/stream/354396-xilem&#34;&gt;#xilem stream&lt;/a&gt;. All public content can be read without logging in&lt;/p&gt; &#xA;&lt;h2&gt;Overall program flow&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This README is a bit out of date. To understand more of what&#39;s going on, please read the blog post, &lt;a href=&#34;https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html&#34;&gt;Xilem: an architecture for UI in Rust&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Like Elm, the app logic contains &lt;em&gt;centralized state.&lt;/em&gt; On each cycle (meaning, roughly, on each high-level UI interaction such as a button click), the framework calls a closure, giving it mutable access to the app state, and the return value is a &lt;em&gt;view tree.&lt;/em&gt; This view tree is fairly short-lived; it is used to render the UI, possibly dispatch some events, and be used as a reference for &lt;em&gt;diffing&lt;/em&gt; by the next cycle, at which point it is dropped.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll use the standard counter example. Here the state is a single integer, and the view tree is a column containing two buttons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn app_logic(data: &amp;amp;mut u32) -&amp;gt; impl View&amp;lt;u32, (), Element = impl Widget&amp;gt; {&#xA;    Column::new((&#xA;        Button::new(format!(&#34;count: {}&#34;, data), |data| *data += 1),&#xA;        Button::new(&#34;reset&#34;, |data| *data = 0),&#xA;    ))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are all just vanilla data structures. The next step is diffing or reconciling against a previous version, now a standard technique. The result is an &lt;em&gt;element tree.&lt;/em&gt; Each node type in the view tree has a corresponding element as an associated type. The &lt;code&gt;build&lt;/code&gt; method on a view node creates the element, and the &lt;code&gt;rebuild&lt;/code&gt; method diffs against the previous version (for example, if the string changes) and updates the element. There&#39;s also an associated state tree, not actually needed in this simple example, but would be used for memoization.&lt;/p&gt; &#xA;&lt;p&gt;The closures are the interesting part. When they&#39;re run, they take a mutable reference to the app data.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;A major goal is to support React-like components, where modules that build UI for some fragment of the overall app state are composed together.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct AppData {&#xA;    count: u32,&#xA;}&#xA;&#xA;fn count_button(count: u32) -&amp;gt; impl View&amp;lt;u32, (), Element = impl Widget&amp;gt; {&#xA;    Button::new(format!(&#34;count: {}&#34;, count), |data| *data += 1)&#xA;}&#xA;&#xA;fn app_logic(data: &amp;amp;mut AppData) -&amp;gt; impl View&amp;lt;AppData, (), Element = impl Widget&amp;gt; {&#xA;    Adapt::new(|data: &amp;amp;mut AppData, thunk| thunk.call(&amp;amp;mut data.count),&#xA;        count_button(data.count))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adapt node is very similar to a lens (quite familiar to existing Druid users), and is also very similar to the [Html.map] node in Elm. Note that in this case the data presented to the child component to render, and the mutable app state available in callbacks is the same, but that is not necessarily the case.&lt;/p&gt; &#xA;&lt;h2&gt;Memoization&lt;/h2&gt; &#xA;&lt;p&gt;In the simplest case, the app builds the entire view tree, which is diffed against the previous tree, only to find that most of it hasn&#39;t changed.&lt;/p&gt; &#xA;&lt;p&gt;When a subtree is a pure function of some data, as is the case for the button above, it makes sense to &lt;em&gt;memoize.&lt;/em&gt; The data is compared to the previous version, and only when it&#39;s changed is the view tree build. The signature of the memoize node is nearly identical to &lt;a href=&#34;https://guide.elm-lang.org/optimization/lazy.html&#34;&gt;Html.lazy&lt;/a&gt; in Elm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn app_logic(data: &amp;amp;mut AppData) -&amp;gt; impl View&amp;lt;AppData, (), Element = impl Widget&amp;gt; {&#xA;    Memoize::new(data.count, |count| {&#xA;        Button::new(format!(&#34;count: {}&#34;, count), |data: &amp;amp;mut AppData| {&#xA;            data.count += 1&#xA;        })&#xA;    }),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current code uses a &lt;code&gt;PartialEq&lt;/code&gt; bound, but in practice I think it might be much more useful to use pointer equality on &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The combination of memoization with pointer equality and an adapt node that calls &lt;a href=&#34;https://doc.rust-lang.org/std/rc/struct.Rc.html#method.make_mut&#34;&gt;Rc::make_mut&lt;/a&gt; on the parent type is actually a powerful form of change tracking, similar in scope to Adapton, self-adjusting computation, or the types of binding objects used in SwiftUI. If a piece of data is rendered in two different places, it automatically propagates the change to both of those, without having to do any explicit management of the dependency graph.&lt;/p&gt; &#xA;&lt;p&gt;I anticipate it will also be possible to do dirty tracking manually - the app logic can set a dirty flag when a subtree needs re-rendering.&lt;/p&gt; &#xA;&lt;h2&gt;Optional type erasure&lt;/h2&gt; &#xA;&lt;p&gt;By default, view nodes are strongly typed. The type of a container includes the types of its children (through the &lt;code&gt;ViewTuple&lt;/code&gt; trait), so for a large tree the type can become quite large. In addition, such types don&#39;t make for easy dynamic reconfiguration of the UI. SwiftUI has exactly this issue, and provides &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/anyview&#34;&gt;AnyView&lt;/a&gt; as the solution. Ours is more or less identical.&lt;/p&gt; &#xA;&lt;p&gt;The type erasure of View nodes is not an easy trick, as the trait has two associated types and the &lt;code&gt;rebuild&lt;/code&gt; method takes the previous view as a &lt;code&gt;&amp;amp;Self&lt;/code&gt; typed parameter. Nonetheless, it is possible. (As far as I know, Olivier Faure was the first to demonstrate this technique, in &lt;a href=&#34;https://github.com/PoignardAzur/panoramix&#34;&gt;Panoramix&lt;/a&gt;, but I&#39;m happy to be further enlightened)&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Linux and BSD&lt;/h3&gt; &#xA;&lt;p&gt;You need to have installed &lt;code&gt;pkg-config&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt;, and the development packages of &lt;code&gt;wayland&lt;/code&gt;, &lt;code&gt;libxkbcommon&lt;/code&gt;, &lt;code&gt;libxcb&lt;/code&gt;, and &lt;code&gt;vulkan-loader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most distributions have &lt;code&gt;pkg-config&lt;/code&gt; installed by default. To install the remaining packages on Fedora, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install clang wayland-devel libxkbcommon-x11-devel libxcb-devel vulkan-loader-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install them on Debian or Ubuntu, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install pkg-config clang libwayland-dev libxkbcommon-x11-dev libvulkan-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/linebender/xilem/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome by pull request. The &lt;a href=&#34;https://www.rust-lang.org/policies/code-of-conduct&#34;&gt;Rust code of conduct&lt;/a&gt; applies.&lt;/p&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paritytech/polkadot-sdk</title>
    <updated>2024-06-01T01:49:07Z</updated>
    <id>tag:github.com,2024-06-01:/paritytech/polkadot-sdk</id>
    <link href="https://github.com/paritytech/polkadot-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Parity Polkadot Blockchain SDK&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/images/Polkadot_Logo_Horizontal_Pink_White.png#gh-dark-mode-only&#34; alt=&#34;SDK Logo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/images/Polkadot_Logo_Horizontal_Pink_Black.png#gh-light-mode-only&#34; alt=&#34;SDK Logo&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;Polkadot SDK&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/paritytech/polkadot-sdk&#34; alt=&#34;GitHub stars&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/forks/paritytech/polkadot-sdk&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/p&gt; &#xA; &lt;!-- markdownlint-disable-next-line MD013 --&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://substrate.stackexchange.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/StackExchange-Community%20&amp;amp;%20Support-222222?logo=stackexchange&#34; alt=&#34;StackExchange&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/contributors/paritytech/polkadot-sdk&#34; alt=&#34;GitHub contributors&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/paritytech/polkadot-sdk&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://tokei.rs/b1/github/paritytech/polkadot-sdk&#34; alt=&#34;GitHub lines of code&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://img.shields.io/github/last-commit/paritytech/polkadot-sdk&#34; alt=&#34;GitHub last commit&#34;&gt;&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;The Polkadot SDK repository provides all the components needed to start building on the &lt;a href=&#34;https://polkadot.network&#34;&gt;Polkadot&lt;/a&gt; network, a multi-chain blockchain platform that enables different blockchains to interoperate and share information in a secure and scalable way.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;📚 Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/index.html&#34;&gt;🦀 rust-docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/polkadot_sdk/index.html&#34;&gt;Introduction&lt;/a&gt; to each component of the Polkadot SDK: Substrate, FRAME, Cumulus, and XCM&lt;/li&gt; &#xA; &lt;li&gt;Other Resources: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://wiki.polkadot.network/docs/build-guide&#34;&gt;Polkadot Wiki -&amp;gt; Build&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Releases&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Our release process is still Work-In-Progress and may not yet reflect the aspired outline here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Polkadot-SDK has two release channels: &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;nightly&lt;/code&gt;. Production software is advised to only use &lt;code&gt;stable&lt;/code&gt;. &lt;code&gt;nightly&lt;/code&gt; is meant for tinkerers to try out the latest features. The detailed release process is described in &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/RELEASE.md&#34;&gt;RELEASE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;😌 Stable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;stable&lt;/code&gt; releases have a support duration of &lt;strong&gt;three months&lt;/strong&gt;. In this period, the release will not have any breaking changes. It will receive bug fixes, security fixes, performance fixes and new non-breaking features on a &lt;strong&gt;two week&lt;/strong&gt; cadence.&lt;/p&gt; &#xA;&lt;h3&gt;🤠 Nightly&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nightly&lt;/code&gt; releases are released every night from the &lt;code&gt;master&lt;/code&gt; branch, potentially with breaking changes. They have pre-release version numbers in the format &lt;code&gt;major.0.0-nightlyYYMMDD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🔐 Security&lt;/h2&gt; &#xA;&lt;p&gt;The security policy and procedures can be found in &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/SECURITY.md&#34;&gt;docs/contributor/SECURITY.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🤍 Contributing &amp;amp; Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you follow our &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. In every interaction and contribution, this project adheres to the &lt;a href=&#34;https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;👾 Ready to Contribute?&lt;/h3&gt; &#xA;&lt;p&gt;Take a look at the issues labeled with &lt;a href=&#34;https://github.com/paritytech/polkadot-sdk/labels/C1-mentor&#34;&gt;&lt;code&gt;mentor&lt;/code&gt;&lt;/a&gt; (or alternatively &lt;a href=&#34;https://mentor.tasty.limo/&#34;&gt;this&lt;/a&gt; page, created by one of the maintainers) label to get started! We always recognize valuable contributions by proposing an on-chain tip to the Polkadot network as a token of our appreciation.&lt;/p&gt; &#xA;&lt;h2&gt;Polkadot Fellowship&lt;/h2&gt; &#xA;&lt;p&gt;Development in this repo usually goes hand in hand with the &lt;code&gt;fellowship&lt;/code&gt; organization. In short, this repository provides all the SDK pieces needed to build both Polkadot and its parachains. But, the actual Polkadot runtime lives in the &lt;code&gt;fellowship/runtimes&lt;/code&gt; repository. Read more about the fellowship, this separation, the RFC process &lt;a href=&#34;https://polkadot-fellows.github.io/dashboard/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This repository is the amalgamation of 3 separate repositories that used to make up Polkadot SDK, namely Substrate, Polkadot and Cumulus. Read more about the merge and its history &lt;a href=&#34;https://polkadot-public.notion.site/Polkadot-SDK-FAQ-fbc4cecc2c46443fb37b9eeec2f0d85f&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>