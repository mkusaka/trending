<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T02:11:58Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cloudflare/pingora</title>
    <updated>2024-04-01T02:11:58Z</updated>
    <id>tag:github.com,2024-04-01:/cloudflare/pingora</id>
    <link href="https://github.com/cloudflare/pingora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for building fast, reliable and evolvable network services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pingora&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudflare/pingora/main/docs/assets/pingora_banner.png&#34; alt=&#34;Pingora banner image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Pingora&lt;/h2&gt; &#xA;&lt;p&gt;Pingora is a Rust framework to &lt;a href=&#34;https://blog.cloudflare.com/pingora-open-source&#34;&gt;build fast, reliable and programmable networked systems&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pingora is battle tested as it has been serving more than 40 million Internet requests per second for &lt;a href=&#34;https://blog.cloudflare.com/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet&#34;&gt;more than a few years&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Async Rust: fast and reliable&lt;/li&gt; &#xA; &lt;li&gt;HTTP 1/2 end to end proxy&lt;/li&gt; &#xA; &lt;li&gt;TLS over OpenSSL or BoringSSL&lt;/li&gt; &#xA; &lt;li&gt;gRPC and websocket proxying&lt;/li&gt; &#xA; &lt;li&gt;Graceful reload&lt;/li&gt; &#xA; &lt;li&gt;Customizable load balancing and failover strategies&lt;/li&gt; &#xA; &lt;li&gt;Support for a variety of observability tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reasons to use Pingora&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; is your top priority: Pingora is a more memory safe alternative for services that are written in C/C++&lt;/li&gt; &#xA; &lt;li&gt;Your service is &lt;strong&gt;performance-sensitive&lt;/strong&gt;: Pingora is fast and efficient&lt;/li&gt; &#xA; &lt;li&gt;Your service requires extensive &lt;strong&gt;customization&lt;/strong&gt;: The APIs Pingora proxy framework provides are highly programmable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/cloudflare/pingora/main/docs/quick_start.md&#34;&gt;quick starting guide&lt;/a&gt; to see how easy it is to build a load balancer.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://raw.githubusercontent.com/cloudflare/pingora/main/docs/user_guide/index.md&#34;&gt;user guide&lt;/a&gt; covers more topics such as how to configure and run Pingora servers, as well as how to build custom HTTP servers and proxy logic on top of Pingora&#39;s framework.&lt;/p&gt; &#xA;&lt;p&gt;API docs are also available for all the crates.&lt;/p&gt; &#xA;&lt;h1&gt;Notable crates in this workspace&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pingora: the &#34;public facing&#34; crate to build networked systems and proxies&lt;/li&gt; &#xA; &lt;li&gt;Pingora-core: this crate defines the protocols, functionalities and basic traits&lt;/li&gt; &#xA; &lt;li&gt;Pingora-proxy: the logic and APIs to build HTTP proxies&lt;/li&gt; &#xA; &lt;li&gt;Pingora-error: the common error type used across Pingora crates&lt;/li&gt; &#xA; &lt;li&gt;Pingora-http: the HTTP header definitions and APIs&lt;/li&gt; &#xA; &lt;li&gt;Pingora-openssl &amp;amp; pingora-boringssl: SSL related extensions and APIs&lt;/li&gt; &#xA; &lt;li&gt;Pingora-ketama: the &lt;a href=&#34;https://github.com/RJ/ketama&#34;&gt;Ketama&lt;/a&gt; consistent algorithm&lt;/li&gt; &#xA; &lt;li&gt;Pingora-limits: efficient counting algorithms&lt;/li&gt; &#xA; &lt;li&gt;Pingora-load-balancing: load balancing algorithm extensions for pingora-proxy&lt;/li&gt; &#xA; &lt;li&gt;Pingora-memory-cache: Async in-memory caching with cache lock to prevent cache stampede&lt;/li&gt; &#xA; &lt;li&gt;Pingora-timeout: A more efficient async timer system&lt;/li&gt; &#xA; &lt;li&gt;TinyUfo: The caching algorithm behind pingora-memory-cache&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Systems&lt;/h2&gt; &#xA;&lt;p&gt;Linux is our tier 1 environment and main focus.&lt;/p&gt; &#xA;&lt;p&gt;We will try our best for most code to compile for Unix environments. This is for developers and users to have an easier time developing with Pingora in Unix-like environments like macOS (though some features might be missing)&lt;/p&gt; &#xA;&lt;p&gt;Both x86_64 and aarch64 architectures will be supported.&lt;/p&gt; &#xA;&lt;h2&gt;Rust version&lt;/h2&gt; &#xA;&lt;p&gt;Pingora keeps a rolling MSRV (minimum supported Rust version) policy of 6 months. This means we will accept PRs that upgrade the MSRV as long as the new Rust version used is at least 6 months old.&lt;/p&gt; &#xA;&lt;p&gt;Our current MSRV is 1.72.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/cloudflare/pingora/main/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/cloudflare/pingora/main/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Wilfred/difftastic</title>
    <updated>2024-04-01T02:11:58Z</updated>
    <id>tag:github.com,2024-04-01:/Wilfred/difftastic</id>
    <link href="https://github.com/Wilfred/difftastic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a structural diff that understands syntax ðŸŸ¥ðŸŸ©&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Wilfred/difftastic/master/#readme&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/difftastic/master/img/logo.png&#34; alt=&#34;it&#39;s difftastic!&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://difftastic.wilfred.me.uk/introduction.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/manual-en-brightgreen?style=flat-square&#34; alt=&#34;English manual&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://difftastic.wilfred.me.uk/zh-CN/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/manual-zh--CN-brightgreen?style=flat-square&#34; alt=&#34;Chinese manual&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/difftastic&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/difftastic.svg?style=flat-square&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Wilfred/difftastic&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/Wilfred/difftastic?style=flat-square&amp;amp;token=dZzAZtQT2S&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Difftastic is a structural diff tool that compares files based on their syntax.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For installation instructions, see &lt;a href=&#34;https://difftastic.wilfred.me.uk/installation.html&#34;&gt;Installation&lt;/a&gt; in &lt;a href=&#34;http://difftastic.wilfred.me.uk/&#34;&gt;the manual&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/difftastic/master/img/js.png&#34; alt=&#34;Screenshot of difftastic and JS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this JavaScript example, we can see:&lt;/p&gt; &#xA;&lt;p&gt;(1) Difftastic understands nesting. It highlights the matching &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, but understands that &lt;code&gt;foo()&lt;/code&gt; hasn&#39;t changed despite the leading whitespace.&lt;/p&gt; &#xA;&lt;p&gt;(2) Difftastic understands which lines should be aligned. It&#39;s aligned &lt;code&gt;bar(1)&lt;/code&gt; on the left with &lt;code&gt;bar(2)&lt;/code&gt; on the right, even though the textual content isn&#39;t identical.&lt;/p&gt; &#xA;&lt;p&gt;(3) Difftastic understands that line-wrapping isn&#39;t meaningful. &lt;code&gt;&#34;eric&#34;&lt;/code&gt; is now on a new line, but it hasn&#39;t changed.&lt;/p&gt; &#xA;&lt;h2&gt;One Minute Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/480875&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/480875.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This one minute screencast demonstrates difftastic usage with both standalone files and git.&lt;/p&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;p&gt;Difftastic supports over 30 programming languages, see &lt;a href=&#34;https://difftastic.wilfred.me.uk/&#34;&gt;the manual&lt;/a&gt; for the full list.&lt;/p&gt; &#xA;&lt;p&gt;If a file has an unrecognised extension, difftastic uses a textual diff with word highlighting.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;Performance. Difftastic scales relatively poorly on files with a large number of changes, and can use a lot of memory.&lt;/p&gt; &#xA;&lt;p&gt;Display. Difftastic has a side-by-side display which usually works well, but can be confusing.&lt;/p&gt; &#xA;&lt;p&gt;Robustness. Difftastic regularly has releases that fix crashes.&lt;/p&gt; &#xA;&lt;h2&gt;Non-goals&lt;/h2&gt; &#xA;&lt;p&gt;Patching. Difftastic output is intended for human consumption, and it does not generate patches that you can apply later. Use &lt;code&gt;diff&lt;/code&gt; if you need a patch.&lt;/p&gt; &#xA;&lt;p&gt;(Patch files are also line-oriented, which is too limited for difftastic. Difftastic might find additions and removals on the same line, and it tracks the relationship between line numbers in the old and new file.)&lt;/p&gt; &#xA;&lt;p&gt;Merging. AST merging is a hard problem that difftastic does not address.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Isn&#39;t this basically &lt;code&gt;--word-diff --ignore-all-space&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;Word diffing &lt;a href=&#34;https://twitter.com/_wilfredh/status/1510139929971421191/photo/1&#34;&gt;can&#39;t do this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Difftastic parses your code. It understands when whitespace matters, such as inside string literals or languages like Python. It understands that &lt;code&gt;x-1&lt;/code&gt; is three tokens in JS but one token in Lisp.&lt;/p&gt; &#xA;&lt;h3&gt;Can I use difftastic with git?&lt;/h3&gt; &#xA;&lt;p&gt;You can! The difftastic manual &lt;a href=&#34;https://difftastic.wilfred.me.uk/git.html&#34;&gt;includes instructions for git usage&lt;/a&gt;. You can also use it &lt;a href=&#34;https://difftastic.wilfred.me.uk/mercurial.html&#34;&gt;with mercurial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a magit user, check out &lt;a href=&#34;https://tsdh.org/posts/2022-08-01-difftastic-diffing-with-magit.html&#34;&gt;this blog post&lt;/a&gt; showing one way to use difftastic with magit.&lt;/p&gt; &#xA;&lt;h3&gt;Does difftastic integrate with my favourite tool?&lt;/h3&gt; &#xA;&lt;p&gt;Probably not. Difftastic is young. Consider writing a plugin for your favourite tool, and I will link it in the README!&lt;/p&gt; &#xA;&lt;h3&gt;Can difftastic help me with merge conflicts?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! As of version 0.50, difftastic understands merge conflict markers (i.e. &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;=======&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Pass your file with conflicts as a single argument to difftastic. Difftastic will construct the two conflicting files and diff those.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ difft file_with_conflicts.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Can difftastic do merges?&lt;/h3&gt; &#xA;&lt;p&gt;No. AST merging is a hard problem that difftastic does not address.&lt;/p&gt; &#xA;&lt;p&gt;AST diffing is a also lossy process from the perspective of a text diff. Difftastic will ignore whitespace that isn&#39;t syntactically significant, but merging requires tracking whitespace.&lt;/p&gt; &#xA;&lt;h3&gt;Can I use difftastic to check for syntactic changes without diffing?&lt;/h3&gt; &#xA;&lt;p&gt;Yes. Difftastic can check if the two files have the same AST, without calculating a diff. This is much faster than normal diffing, and useful for building tools that check for changes.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ difft --check-only --exit-code before.js after.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will set the exit code to 0 if there are no syntactic changes, or 1 if there are changes found.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Difftastic treats structural diffing as a graph problem, and uses Dijkstra&#39;s algorithm.&lt;/p&gt; &#xA;&lt;p&gt;My &lt;a href=&#34;https://www.wilfred.me.uk/blog/2022/09/06/difftastic-the-fantastic-diff/&#34;&gt;blog post&lt;/a&gt; describes the design, and there is also an &lt;a href=&#34;https://difftastic.wilfred.me.uk/diffing.html&#34;&gt;internals section in the manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wilfred/difftastic/master/translation/zh-CN/README-zh-CN.md&#34;&gt;Chinese&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Difftastic is open source under the MIT license, see LICENSE for more details.&lt;/p&gt; &#xA;&lt;p&gt;This repository also includes tree-sitter parsers by other authors in the &lt;code&gt;vendored_parsers/&lt;/code&gt; directory. These are a mix of the MIT license and the Apache license. See &lt;code&gt;vendored_parsers/*/LICENSE&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Files in &lt;code&gt;sample_files/&lt;/code&gt; are also under the MIT license unless stated otherwise in their header.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>robbert-vdh/nih-plug</title>
    <updated>2024-04-01T02:11:58Z</updated>
    <id>tag:github.com,2024-04-01:/robbert-vdh/nih-plug</id>
    <link href="https://github.com/robbert-vdh/nih-plug" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust VST3 and CLAP plugin framework and plugins - because everything is better when you do it yourself&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NIH-plug&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Automated builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/test.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/test.yml/badge.svg?branch=master&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nih-plug.robbertvanderhelm.nl/&#34;&gt;&lt;img src=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/docs.yml/badge.svg?branch=master&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NIH-plug is an API-agnostic audio plugin framework written in Rust, as well as a small collection of plugins. The idea is to have a stateful yet simple plugin API that gets rid of as much unnecessary ceremony wherever possible, while also keeping the amount of magic to minimum and making it easy to experiment with different approaches to things. See the &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#current-features&#34;&gt;current features&lt;/a&gt; section for more information on the project&#39;s current status.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://nih-plug.robbertvanderhelm.nl/&#34;&gt;documentation&lt;/a&gt;, or use the &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug-template&#34;&gt;cookiecutter template&lt;/a&gt; to quickly get started with NIH-plug.&lt;/p&gt; &#xA;&lt;h3&gt;Table of contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#framework&#34;&gt;Framework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#current-features&#34;&gt;Current features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#plugin-formats&#34;&gt;Plugin formats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#example-plugins&#34;&gt;Example plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Check each plugin&#39;s readme file for more details on what the plugin actually does. You can download the development binaries for Linux, Windows and macOS from the &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/actions/workflows/build.yml?query=branch%3Amaster&#34;&gt;automated builds&lt;/a&gt; page. Or if you&#39;re not signed in on GitHub, then you can also find the latest nightly build &lt;a href=&#34;https://nightly.link/robbert-vdh/nih-plug/workflows/build/master&#34;&gt;here&lt;/a&gt;. You may need to &lt;a href=&#34;https://disable-gatekeeper.github.io/&#34;&gt;disable Gatekeeper&lt;/a&gt; on macOS to be able to use the plugins.&lt;/p&gt; &#xA;&lt;p&gt;Scroll down for more information on the underlying plugin framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/buffr_glitch&#34;&gt;&lt;strong&gt;Buffr Glitch&lt;/strong&gt;&lt;/a&gt; is the plugin for you if you enjoy the sound of a CD player skipping This plugin is essentially a MIDI triggered buffer repeat plugin. When you play a note, the plugin will sample the period corresponding to that note&#39;s frequency and use that as a single waveform cycle. This can end up sounding like an in-tune glitch when used sparingly, or like a weird synthesizer when used less subtly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/crisp&#34;&gt;&lt;strong&gt;Crisp&lt;/strong&gt;&lt;/a&gt; adds a bright crispy top end to any low bass sound. Inspired by Polarity&#39;s &lt;a href=&#34;https://youtu.be/MKfFn4L1zeg&#34;&gt;Fake Distortion&lt;/a&gt; video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/crossover&#34;&gt;&lt;strong&gt;Crossover&lt;/strong&gt;&lt;/a&gt; is as boring as it sounds. It cleanly splits the signal into two to five bands using a variety of algorithms. Those bands are then sent to auxiliary outputs so they can be accessed and processed individually. Meant as an alternative to Bitwig&#39;s Multiband FX devices but with cleaner crossovers and a linear-phase option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/diopser&#34;&gt;&lt;strong&gt;Diopser&lt;/strong&gt;&lt;/a&gt; is a totally original phase rotation plugin. Useful for oomphing up kickdrums and basses, transforming synths into their evil phase-y cousin, and making everything sound like a cheap Sci-Fi laser beam.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/loudness_war_winner&#34;&gt;&lt;strong&gt;Loudness War Winner&lt;/strong&gt;&lt;/a&gt; does what it says on the tin. Have you ever wanted to show off your dominance by winning the loudness war? Neither have I. Dissatisfaction guaranteed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/puberty_simulator&#34;&gt;&lt;strong&gt;Puberty Simulator&lt;/strong&gt;&lt;/a&gt; is that patent pending One Weird Plugin that simulates the male voice change during puberty! If it was not already obvious from that sentence, this plugin is a joke, but it might actually be useful (or at least interesting) in some situations. This plugin pitches the signal down an octave, but it also has the side effect of causing things to sound like a cracking voice or to make them sound slightly out of tune.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/safety_limiter&#34;&gt;&lt;strong&gt;Safety Limiter&lt;/strong&gt;&lt;/a&gt; is a simple tool to prevent ear damage. As soon as there is a peak above 0 dBFS or the specified threshold, the plugin will cut over to playing SOS in Morse code, gradually fading out again when the input returns back to safe levels. Made for personal use during plugin development and intense sound design sessions, but maybe you&#39;ll find it useful too!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/soft_vacuum&#34;&gt;&lt;strong&gt;Soft Vacuum&lt;/strong&gt;&lt;/a&gt; is a straightforward port of Airwindows&#39; &lt;a href=&#34;https://www.airwindows.com/hard-vacuum-vst/&#34;&gt;Hard Vacuum&lt;/a&gt; plugin with parameter smoothing and up to 16x linear-phase oversampling, because I liked the distortion and just wished it had oversampling. All credit goes to Chris from Airwindows. I just wanted to share this in case anyone else finds it useful.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/spectral_compressor&#34;&gt;&lt;strong&gt;Spectral Compressor&lt;/strong&gt;&lt;/a&gt; can squash anything into pink noise, apply simultaneous upwards and downwards compressor to dynamically match the sidechain signal&#39;s spectrum and morph one sound into another, and lots more. Have you ever wondered what a 16384 band OTT would sound like? Neither have I.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Framework&lt;/h2&gt; &#xA;&lt;h3&gt;Current features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports both VST3 and &lt;a href=&#34;https://github.com/free-audio/clap&#34;&gt;CLAP&lt;/a&gt; by simply adding the corresponding &lt;code&gt;nih_export_&amp;lt;api&amp;gt;!(Foo)&lt;/code&gt; macro to your plugin&#39;s library.&lt;/li&gt; &#xA; &lt;li&gt;Standalone binaries can be made by calling &lt;code&gt;nih_export_standalone(Foo)&lt;/code&gt; from your &lt;code&gt;main()&lt;/code&gt; function. Standalones come with a CLI for configuration and full JACK audio, MIDI, and transport support.&lt;/li&gt; &#xA; &lt;li&gt;Rich declarative parameter system without any boilerplate. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Define parameters for your plugin by adding &lt;code&gt;FloatParam&lt;/code&gt;, &lt;code&gt;IntParam&lt;/code&gt;, &lt;code&gt;BoolParam&lt;/code&gt;, and &lt;code&gt;EnumParam&amp;lt;T&amp;gt;&lt;/code&gt; fields to your parameter struct, assign stable IDs to them with the &lt;code&gt;#[id = &#34;foobar&#34;]&lt;/code&gt;, and a &lt;code&gt;#[derive(Params)]&lt;/code&gt; does all of the boring work for you.&lt;/li&gt; &#xA;   &lt;li&gt;Parameters can have complex value distributions and the parameter objects come with built-in smoothers and callbacks.&lt;/li&gt; &#xA;   &lt;li&gt;Use simple enums deriving the &lt;code&gt;Enum&lt;/code&gt; trait with the &lt;code&gt;EnumParam&amp;lt;T&amp;gt;&lt;/code&gt; parameter type for parameters that allow the user to choose between multiple discrete options. That way you can use regular Rust pattern matching when working with these values without having to do any conversions yourself.&lt;/li&gt; &#xA;   &lt;li&gt;Store additional non-parameter state for your plugin by adding any field that can be serialized with &lt;a href=&#34;https://serde.rs/&#34;&gt;Serde&lt;/a&gt; to your plugin&#39;s &lt;code&gt;Params&lt;/code&gt; object and annotating them with &lt;code&gt;#[persist = &#34;key&#34;]&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Optional support for state migrations, for handling breaking changes in plugin parameters.&lt;/li&gt; &#xA;   &lt;li&gt;Group your parameters into logical groups by nesting &lt;code&gt;Params&lt;/code&gt; objects using the &lt;code&gt;#[nested(group = &#34;...&#34;)]&lt;/code&gt;attribute.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;#[nested]&lt;/code&gt; attribute also enables you to use multiple copies of the same parameter, either as regular object fields or through arrays.&lt;/li&gt; &#xA;   &lt;li&gt;When needed, you can also provide your own implementation for the &lt;code&gt;Params&lt;/code&gt; trait to enable compile time generated parameters and other bespoke functionality.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stateful. Behaves mostly like JUCE, just without all of the boilerplate.&lt;/li&gt; &#xA; &lt;li&gt;Comes with a simple yet powerful way to asynchronously run background tasks from a plugin that&#39;s both type-safe and realtime-safe.&lt;/li&gt; &#xA; &lt;li&gt;Does not make any assumptions on how you want to process audio, but does come with utilities and adapters to help with common access patterns. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Efficiently iterate over an audio buffer either per-sample per-channel, per-block per-channel, or even per-block per-sample-per-channel with the option to manually index the buffer or get access to a channel slice at any time.&lt;/li&gt; &#xA;   &lt;li&gt;Easily leverage per-channel SIMD using the SIMD adapters on the buffer and block iterators.&lt;/li&gt; &#xA;   &lt;li&gt;Comes with bring-your-own-FFT adapters for common (inverse) short-time Fourier Transform operations. More to come.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional sample accurate automation support for VST3 and CLAP that can be enabled by setting the &lt;code&gt;Plugin::SAMPLE_ACCURATE_AUTOMATION&lt;/code&gt; constant to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Optional support for compressing the human readable JSON state files using &lt;a href=&#34;https://en.wikipedia.org/wiki/Zstd&#34;&gt;Zstandard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Comes with adapters for popular Rust GUI frameworks as well as some basic widgets for them that integrate with NIH-plug&#39;s parameter system. Currently there&#39;s support for &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_egui&#34;&gt;egui&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_iced&#34;&gt;iced&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/nih_plug_vizia&#34;&gt;VIZIA&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A simple and safe API for state saving and restoring from the editor is provided by the framework if you want to do your own internal preset management.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Full support for receiving and outputting both modern polyphonic note expression events as well as MIDI CCs, channel pressure, and pitch bend for CLAP and VST3. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MIDI SysEx is also supported. Plugins can define their own structs or sum types to wrap around those messages so they don&#39;t need to interact with raw byte buffers in the process function.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support for flexible dynamic buffer configurations, including variable numbers of input and output ports.&lt;/li&gt; &#xA; &lt;li&gt;First-class support several more exotic CLAP features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Both monophonic and polyphonic parameter modulation are supported.&lt;/li&gt; &#xA;   &lt;li&gt;Plugins can declaratively define pages of remote controls that DAWs can bind to hardware controllers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A plugin bundler accessible through the &lt;code&gt;cargo xtask bundle &amp;lt;package&amp;gt; &amp;lt;build_arguments&amp;gt;&lt;/code&gt; command that automatically detects which plugin targets your plugin exposes and creates the correct plugin bundles for your target operating system and architecture, with cross-compilation support. The cargo subcommand can easily be added to &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/tree/master/nih_plug_xtask&#34;&gt;your own project&lt;/a&gt; as an alias or &lt;a href=&#34;https://github.com/robbert-vdh/nih-plug/tree/master/cargo_nih_plug&#34;&gt;globally&lt;/a&gt; as a regular cargo subcommand.&lt;/li&gt; &#xA; &lt;li&gt;Tested on Linux and Windows, with limited testing on macOS. Windows support has mostly been tested through Wine with &lt;a href=&#34;https://github.com/robbert-vdh/yabridge&#34;&gt;yabridge&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/src/plugin.rs&#34;&gt;&lt;code&gt;Plugin&lt;/code&gt;&lt;/a&gt; trait&#39;s documentation for an incomplete list of the functionality that has currently not yet been implemented.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;NIH-plug works with the latest stable Rust compiler.&lt;/p&gt; &#xA;&lt;p&gt;After installing &lt;a href=&#34;https://rustup.rs/&#34;&gt;Rust&lt;/a&gt;, you can compile any of the plugins in the &lt;code&gt;plugins&lt;/code&gt; directory in the following way, replacing &lt;code&gt;gain&lt;/code&gt; with the name of the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo xtask bundle gain --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin formats&lt;/h3&gt; &#xA;&lt;p&gt;NIH-plug can currently export VST3 and &lt;a href=&#34;https://github.com/free-audio/clap&#34;&gt;CLAP&lt;/a&gt; plugins. Exporting a specific plugin format for a plugin is as simple as calling the &lt;code&gt;nih_export_&amp;lt;format&amp;gt;!(Foo);&lt;/code&gt; macro. The &lt;code&gt;cargo xtask bundle&lt;/code&gt; command will detect which plugin formats your plugin supports and create the appropriate bundles accordingly, even when cross compiling.&lt;/p&gt; &#xA;&lt;h3&gt;Example plugins&lt;/h3&gt; &#xA;&lt;p&gt;The best way to get an idea for what the API looks like is to look at the examples.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain&#34;&gt;&lt;strong&gt;gain&lt;/strong&gt;&lt;/a&gt; is a simple smoothed gain plugin that shows off a couple other parts of the API, like support for storing arbitrary serializable state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gain-gui&lt;/strong&gt; is the same plugin as gain, but with a GUI to control the parameter and a digital peak meter. Comes in three exciting flavors: &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_egui&#34;&gt;egui&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_iced&#34;&gt;iced&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/gain_gui_vizia&#34;&gt;VIZIA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/midi_inverter&#34;&gt;&lt;strong&gt;midi_inverter&lt;/strong&gt;&lt;/a&gt; takes note/MIDI events and flips around the note, channel, expression, pressure, and CC values. This example demonstrates how to receive and output those events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/poly_mod_synth&#34;&gt;&lt;strong&gt;poly_mod_synth&lt;/strong&gt;&lt;/a&gt; is a simple polyphonic synthesizer with support for polyphonic modulation in supported CLAP hosts. This demonstrates how polyphonic modulation can be used in NIH-plug.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/sine&#34;&gt;&lt;strong&gt;sine&lt;/strong&gt;&lt;/a&gt; is a simple test tone generator plugin with frequency smoothing that can also make use of MIDI input instead of generating a static signal based on the plugin&#39;s parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/stft&#34;&gt;&lt;strong&gt;stft&lt;/strong&gt;&lt;/a&gt; shows off some of NIH-plug&#39;s other optional higher level helper features, such as an adapter to process audio with a short-term Fourier transform using the overlap-add method, all using the compositional &lt;code&gt;Buffer&lt;/code&gt; interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robbert-vdh/nih-plug/master/plugins/examples/sysex&#34;&gt;&lt;strong&gt;sysex&lt;/strong&gt;&lt;/a&gt; is a simple example of how to send and receive SysEx messages by defining custom message types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;The framework, its libraries, and the example plugins in &lt;code&gt;plugins/examples/&lt;/code&gt; are all licensed under the &lt;a href=&#34;https://www.isc.org/licenses/&#34;&gt;ISC license&lt;/a&gt;. However, the &lt;a href=&#34;https://github.com/RustAudio/vst3-sys&#34;&gt;VST3 bindings&lt;/a&gt; used by &lt;code&gt;nih_export_vst3!()&lt;/code&gt; are licensed under the GPLv3 license. This means that unless you replace these bindings with your own bindings made from scratch, any VST3 plugins built with NIH-plug need to be able to comply with the terms of the GPLv3 license.&lt;/p&gt; &#xA;&lt;p&gt;The other plugins in the &lt;code&gt;plugins/&lt;/code&gt; directory may be licensed under the GPLv3 license. Check the plugin&#39;s &lt;code&gt;Cargo.toml&lt;/code&gt; file for more information.&lt;/p&gt;</summary>
  </entry>
</feed>