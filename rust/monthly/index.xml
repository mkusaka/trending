<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:22:36Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lsd-rs/lsd</title>
    <updated>2023-10-01T02:22:36Z</updated>
    <id>tag:github.com,2023-10-01:/lsd-rs/lsd</id>
    <link href="https://github.com/lsd-rs/lsd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The next gen ls command&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LSD (LSDeluxe)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-Apache%20v2-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/lsd&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/lsd.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lsd-rs/lsd/actions&#34;&gt;&lt;img src=&#34;https://github.com/lsd-rs/lsd/workflows/CICD/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/lsd-rs/lsd&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/lsd-rs/lsd/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/lsd/versions&#34;&gt;&lt;img src=&#34;https://img.shields.io/repology/repositories/lsd&#34; alt=&#34;versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/assets/screen_lsd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is a rewrite of GNU &lt;code&gt;ls&lt;/code&gt; with lots of added features like colors, icons, tree-view, more formatting options etc. The project is heavily inspired by the super &lt;a href=&#34;https://github.com/athityakumar/colorls&#34;&gt;colorls&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packaging status&lt;/summary&gt; &#xA; &lt;a href=&#34;https://repology.org/project/lsd/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/lsd.svg?columns=3&#34; alt=&#34;Packaging status&#34;&gt; &lt;/a&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Install the patched fonts of powerline nerd-font and/or font-awesome. Have a look at the &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/raw/master/readme.md&#34;&gt;Nerd Font README&lt;/a&gt; for more installation instructions. Don&#39;t forget to setup your terminal in order to use the correct font.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS/Distro&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Archlinux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pacman -S lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dnf install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo emerge sys-apps/lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;brew install lsd&lt;/code&gt; or &lt;code&gt;sudo port install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NixOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -iA nixos.lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NetBSD or any &lt;code&gt;pkgsrc&lt;/code&gt; platform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkgin install lsd&lt;/code&gt; or &lt;code&gt;cd /usr/pkgsrc/sysutils/lsd &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg_add lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scoop install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android (via Termux)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian sid and bookworm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apt install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 23.04 (Lunar Lobster)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apt install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Earlier Ubuntu/Debian versions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;snap discontinued&lt;/strong&gt;, use &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#from-binaries&#34;&gt;From Binaries&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solus&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eopkg it lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo xbps-install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo zypper install lsd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;With Rust&#39;s package manager cargo, you can install lsd via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install lsd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install the latest master branch commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install --git https://github.com/lsd-rs/lsd.git --branch master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Binaries&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/lsd-rs/lsd/releases&#34;&gt;release page&lt;/a&gt; includes precompiled binaries for Linux, macOS and Windows for every release. You can also get the latest binary of &lt;code&gt;master&lt;/code&gt; branch from the &lt;a href=&#34;https://github.com/lsd-rs/lsd/actions?query=branch%3Amaster+is%3Asuccess+event%3Apush&#34;&gt;GitHub action build artifacts&lt;/a&gt; (choose the top action and scroll down to the artifacts section).&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lsd&lt;/code&gt; can be configured with a configuration file to set the default options. Check &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#config-file-content&#34;&gt;Config file content&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Config file location&lt;/h3&gt; &#xA;&lt;h3&gt;Non-Windows&lt;/h3&gt; &#xA;&lt;p&gt;On non-Windows systems &lt;code&gt;lsd&lt;/code&gt; follows the &lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG Base Directory Specification&lt;/a&gt; convention for the location of the configuration file. The configuration dir &lt;code&gt;lsd&lt;/code&gt; uses is itself named &lt;code&gt;lsd&lt;/code&gt;. In that directory it looks first for a file called &lt;code&gt;config.yaml&lt;/code&gt;. For most people it should be enough to put their config file at &lt;code&gt;~/.config/lsd/config.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows systems &lt;code&gt;lsd&lt;/code&gt; only looks for the &lt;code&gt;config.yaml&lt;/code&gt; files in one location: &lt;code&gt;%APPDATA%\lsd\&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom&lt;/h3&gt; &#xA;&lt;p&gt;You can also provide a configuration file from a non standard location: &lt;code&gt;lsd --config-file [PATH]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Config file content&lt;/h3&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;This is an example config file with the default values and some additional remarks.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# == Classic ==&#xA;# This is a shorthand to override some of the options to be backwards compatible&#xA;# with `ls`. It affects the &#34;color&#34;-&amp;gt;&#34;when&#34;, &#34;sorting&#34;-&amp;gt;&#34;dir-grouping&#34;, &#34;date&#34;&#xA;# and &#34;icons&#34;-&amp;gt;&#34;when&#34; options.&#xA;# Possible values: false, true&#xA;classic: false&#xA;&#xA;# == Blocks ==&#xA;# This specifies the columns and their order when using the long and the tree&#xA;# layout.&#xA;# Possible values: permission, user, group, context, size, date, name, inode, links, git&#xA;blocks:&#xA;  - permission&#xA;  - user&#xA;  - group&#xA;  - size&#xA;  - date&#xA;  - name&#xA;&#xA;# == Color ==&#xA;# This has various color options. (Will be expanded in the future.)&#xA;color:&#xA;  # When to colorize the output.&#xA;  # When &#34;classic&#34; is set, this is set to &#34;never&#34;.&#xA;  # Possible values: never, auto, always&#xA;  when: auto&#xA;  # How to colorize the output.&#xA;  # When &#34;classic&#34; is set, this is set to &#34;no-color&#34;.&#xA;  # Possible values: default, custom&#xA;  # When &#34;custom&#34; is set, lsd will look in the config directory for `colors.yaml`.&#xA;  theme: default&#xA;&#xA;# == Date ==&#xA;# This specifies the date format for the date column. The freeform format&#xA;# accepts a strftime like string.&#xA;# When &#34;classic&#34; is set, this is set to &#34;date&#34;.&#xA;# Possible values: date, relative, &#39;+&amp;lt;date_format&amp;gt;&#39;&#xA;# `date_format` will be a `strftime` formatted value. e.g. `date: &#39;+%d %b %y %X&#39;` will give you a date like this: 17 Jun 21 20:14:55&#xA;date: date&#xA;&#xA;# == Dereference ==&#xA;# Whether to dereference symbolic links.&#xA;# Possible values: false, true&#xA;dereference: false&#xA;&#xA;# == Display ==&#xA;# What items to display. Do not specify this for the default behavior.&#xA;# Possible values: all, almost-all, directory-only&#xA;# display: all&#xA;&#xA;# == Icons ==&#xA;icons:&#xA;  # When to use icons.&#xA;  # When &#34;classic&#34; is set, this is set to &#34;never&#34;.&#xA;  # Possible values: always, auto, never&#xA;  when: auto&#xA;  # Which icon theme to use.&#xA;  # Possible values: fancy, unicode&#xA;  theme: fancy&#xA;  # Separator between icon and the name&#xA;  # Default to 1 space&#xA;  separator: &#34; &#34;&#xA;&#xA;# == Ignore Globs ==&#xA;# A list of globs to ignore when listing.&#xA;# ignore-globs:&#xA;#   - .git&#xA;&#xA;# == Indicators ==&#xA;# Whether to add indicator characters to certain listed files.&#xA;# Possible values: false, true&#xA;indicators: false&#xA;&#xA;# == Layout ==&#xA;# Which layout to use. &#34;oneline&#34; might be a bit confusing here and should be&#xA;# called &#34;one-per-line&#34;. It might be changed in the future.&#xA;# Possible values: grid, tree, oneline&#xA;layout: grid&#xA;&#xA;# == Recursion ==&#xA;recursion:&#xA;  # Whether to enable recursion.&#xA;  # Possible values: false, true&#xA;  enabled: false&#xA;  # How deep the recursion should go. This has to be a positive integer. Leave&#xA;  # it unspecified for (virtually) infinite.&#xA;  # depth: 3&#xA;&#xA;# == Size ==&#xA;# Specifies the format of the size column.&#xA;# Possible values: default, short, bytes&#xA;size: default&#xA;&#xA;# == Permission ==&#xA;# Specify the format of the permission column&#xA;# Possible value: rwx, octal&#xA;permission: rwx&#xA;&#xA;# == Sorting ==&#xA;sorting:&#xA;  # Specify what to sort by.&#xA;  # Possible values: extension, name, time, size, version&#xA;  column: name&#xA;  # Whether to reverse the sorting.&#xA;  # Possible values: false, true&#xA;  reverse: false&#xA;  # Whether to group directories together and where.&#xA;  # When &#34;classic&#34; is set, this is set to &#34;none&#34;.&#xA;  # Possible values: first, last, none&#xA;  dir-grouping: none&#xA;&#xA;# == No Symlink ==&#xA;# Whether to omit showing symlink targets&#xA;# Possible values: false, true&#xA;no-symlink: false&#xA;&#xA;# == Total size ==&#xA;# Whether to display the total size of directories.&#xA;# Possible values: false, true&#xA;total-size: false&#xA;&#xA;# == Hyperlink ==&#xA;# Attach hyperlink to filenames&#xA;# Possible values: always, auto, never&#xA;hyperlink: never&#xA;&#xA;# == Symlink arrow ==&#xA;# Specifies how the symlink arrow display, chars in both ascii and utf8&#xA;symlink-arrow: ⇒&#xA;&#xA;# == Header ==&#xA;# Whether to display block headers.&#xA;# Possible values: false, true&#xA;header: false&#xA;&#xA;# == Literal ==&#xA;# Whether to show quotes on filenames.&#xA;# Possible values: false, true&#xA;literal: false&#xA;&#xA;# == Truncate owner ==&#xA;# How to truncate the username and group names for a file if they exceed a certain&#xA;# number of characters.&#xA;truncate-owner:&#xA;  # Number of characters to keep. By default, no truncation is done (empty value).&#xA;  after:&#xA;  # String to be appended to a name if truncated.&#xA;  marker: &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Theme&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lsd&lt;/code&gt; can be configured with theme files to set the colors or icons.&lt;/p&gt; &#xA;&lt;h3&gt;Color Theme&lt;/h3&gt; &#xA;&lt;p&gt;Color theme can be configured in the &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#configuration&#34;&gt;configuration file&lt;/a&gt;(color.theme), The valid theme configurations are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default&lt;/code&gt;: the default color scheme shipped in &lt;code&gt;lsd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;custom&lt;/code&gt;: use a custom color scheme defined in &lt;code&gt;colors.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(deprecated) theme_file_name(yaml): use the theme file to specify colors(without the &lt;code&gt;yaml&lt;/code&gt; extension)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When set to &lt;code&gt;custom&lt;/code&gt;, &lt;code&gt;lsd&lt;/code&gt; will look for &lt;code&gt;colors.yaml&lt;/code&gt; in the XDG Base Directory, e.g. ~/.config/lsd/colors.yaml&lt;/p&gt; &#xA;&lt;p&gt;When configured with the &lt;code&gt;theme-file-name&lt;/code&gt; which is a &lt;code&gt;yaml&lt;/code&gt; file, &lt;code&gt;lsd&lt;/code&gt; will look up the theme file in the following way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;relative name: check the XDG Base Directory, e.g. ~/.config/lsd/themes/&#xA;  &lt;theme-file-name&gt;&#xA;   .yaml&#xA;  &lt;/theme-file-name&gt;&lt;/li&gt; &#xA; &lt;li&gt;absolute name: use the file path and name to find theme file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#color-theme-file-content&#34;&gt;Color Theme file content&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;Color Theme file content&lt;/h4&gt; &#xA;&lt;p&gt;Theme file use the &lt;a href=&#34;https://crates.io/crates/crossterm&#34;&gt;crossterm&lt;/a&gt; to configure the colors, check &lt;a href=&#34;https://docs.rs/crossterm/0.20.0/crossterm/style/enum.Color.html&#34;&gt;crossterm&lt;/a&gt; for supported colors.&lt;/p&gt; &#xA;&lt;p&gt;Color table: &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg&#34;&gt;https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please notice that color values would ignore the case, both lowercase and UPPERCASE is supported.&lt;/p&gt; &#xA;&lt;p&gt;This is the default theme scheme shipped with &lt;code&gt;lsd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;user: 230&#xA;group: 187&#xA;permission:&#xA;  read: dark_green&#xA;  write: dark_yellow&#xA;  exec: dark_red&#xA;  exec-sticky: 5&#xA;  no-access: 245&#xA;  octal: 6&#xA;  acl: dark_cyan&#xA;  context: cyan&#xA;date:&#xA;  hour-old: 40&#xA;  day-old: 42&#xA;  older: 36&#xA;size:&#xA;  none: 245&#xA;  small: 229&#xA;  medium: 216&#xA;  large: 172&#xA;inode:&#xA;  valid: 13&#xA;  invalid: 245&#xA;links:&#xA;  valid: 13&#xA;  invalid: 245&#xA;tree-edge: 245&#xA;git-status:&#xA;  default: 245&#xA;  unmodified: 245&#xA;  ignored: 245&#xA;  new-in-index: dark_green&#xA;  new-in-workdir: dark_green&#xA;  typechange: dark_yellow&#xA;  deleted: dark_red&#xA;  renamed: dark_green&#xA;  modified: dark_yellow&#xA;  conflicted: dark_red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When creating a theme for &lt;code&gt;lsd&lt;/code&gt;, you can specify any part of the default theme, and then change its colors, the items missed would fallback to use the default colors.&lt;/p&gt; &#xA;&lt;p&gt;Please also notice that an empty theme is &lt;strong&gt;NOT&lt;/strong&gt; supported due to &lt;a href=&#34;https://github.com/dtolnay/serde-yaml/issues/86&#34;&gt;a bug in serde lib&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Icon Theme&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This feature is not available in a release yet. You can get this feature by &lt;a href=&#34;https://github.com/lsd-rs/lsd#from-source&#34;&gt;building from &lt;code&gt;master&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Icon theme can be configured in a fixed location, &lt;code&gt;$XDG_CONFIG_DIR/lsd/icons.yaml&lt;/code&gt;, for example, &lt;code&gt;~/.config/lsd/icons.yaml&lt;/code&gt; on macOS, please check &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#config-file-location&#34;&gt;Config file location&lt;/a&gt; to make sure where is &lt;code&gt;$XDG_CONFIG_DIR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As the file name indicated, the icon theme file is a &lt;code&gt;yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#icon-theme-file-content&#34;&gt;Icon Theme file content&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;Icon Theme file content&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;lsd&lt;/code&gt; support 3 kinds of icon overrides, by &lt;code&gt;name&lt;/code&gt;, by &lt;code&gt;filetype&lt;/code&gt; and by &lt;code&gt;extension&lt;/code&gt;. The final set of icons used will be a combination of what is shipped with in &lt;code&gt;lsd&lt;/code&gt; with overrides from config applied on top of it. &lt;em&gt;You can find the default set of icons &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/src/theme/icon.rs&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Both nerd font glyphs and unicode emojis can be used for icons. You can find an example of icons customization below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name:&#xA;  .trash: &#xA;  .cargo: &#xA;  .emacs.d: &#xA;  a.out: &#xA;extension:&#xA;  go: &#xA;  hs: &#xA;  rs: 🦀&#xA;filetype:&#xA;  dir: 📂&#xA;  file: 📄&#xA;  pipe: 📩&#xA;  socket: 󰆨&#xA;  executable: &#xA;  symlink-dir: &#xA;  symlink-file: &#xA;  device-char: &#xA;  device-block: 󰜫&#xA;  special: &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;External Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;p&gt;Enable nerd fonts for your terminal, URxvt for example in &lt;code&gt;.Xresources&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;URxvt*font:    xft:Hack Nerd Font:style=Regular:size=11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;p&gt;In order to use lsd when entering the &lt;code&gt;ls&lt;/code&gt; command, you need to add this to your shell configuration file (~/.bashrc, ~/.zshrc, etc.):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias ls=&#39;lsd&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some further examples of useful aliases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias l=&#39;ls -l&#39;&#xA;alias la=&#39;ls -a&#39;&#xA;alias lla=&#39;ls -la&#39;&#xA;alias lt=&#39;ls --tree&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;F.A.Q&lt;/h2&gt; &#xA;&lt;h3&gt;Icons not showing up&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;code&gt;lsd&lt;/code&gt; to be able to display icons, the font has to include special font glyphs. This might not be the case for most fonts that you download. Thankfully, you can patch most fonts using &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;NerdFont&lt;/a&gt; and add these icons. Or you can just download an already patched version of your favourite font from &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;NerdFont font download page&lt;/a&gt;. Here is a guide on how to setup fonts on &lt;a href=&#34;https://github.com/lsd-rs/lsd/issues/199#issuecomment-494218334&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/lsd-rs/lsd/issues/423&#34;&gt;Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To check if the font you are using is setup correctly, try running the following snippet in a shell and see if that &lt;a href=&#34;https://github.com/lsd-rs/lsd/issues/510#issuecomment-860000306&#34;&gt;prints a folder icon&lt;/a&gt;. If it prints a box, or question mark or something else, then you might have some issues in how you setup the font or how your terminal emulator renders the font.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $&#39;\uf115&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Icons missing or not rendering correctly using PuTTY/KiTTY on Windows&lt;/h3&gt; &#xA;&lt;p&gt;First of all, make sure a patched font is installed and PuTTY/KiTTY is configurated to use it, please check &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are problems for PuTTY/KiTTY to show 2 char wide icons, make sure using a 1 char wide font like &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Hack/Regular/complete/Hack%20Regular%20Nerd%20Font%20Complete%20Mono%20Windows%20Compatible.ttf&#34;&gt;Hack Regular Nerd Font Complete Mono Windows Compatible&lt;/a&gt;, check &lt;a href=&#34;https://github.com/lsd-rs/lsd/issues/331&#34;&gt;this issue&lt;/a&gt; for detail.&lt;/p&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;p&gt;You can customize filetype colors using &lt;code&gt;LS_COLORS&lt;/code&gt; and other colors using the theme.&lt;/p&gt; &#xA;&lt;p&gt;The default colors are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;User/Group&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Permission&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File Type (changes based on your terminal colorscheme)&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/ffffd7/000000?text=+&#34; alt=&#34;#ffffd7&#34;&gt; User&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/00d700/000000?text=+&#34; alt=&#34;#00d700&#34;&gt; Read&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/0087ff/000000?text=+&#34; alt=&#34;#0087ff&#34;&gt; Directory&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/00d700/000000?text=+&#34; alt=&#34;#00d700&#34;&gt; within the last hour&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/ffffaf/000000?text=+&#34; alt=&#34;#ffffaf&#34;&gt; Small File&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/d7d7af/000000?text=+&#34; alt=&#34;#d7d7af&#34;&gt; Group&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/d7ff87/000000?text=+&#34; alt=&#34;#d7ff87&#34;&gt; Write&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/00d700/000000?text=+&#34; alt=&#34;#00d700&#34;&gt; Executable File&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/00d787/000000?text=+&#34; alt=&#34;#00d787&#34;&gt; within the last day&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/ffaf87/000000?text=+&#34; alt=&#34;#ffaf87&#34;&gt; Medium File&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/af0000/000000?text=+&#34; alt=&#34;#af0000&#34;&gt; Execute&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/ffffff/000000?text=+&#34; alt=&#34;#ffffff&#34;&gt; Non-Executable File&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/00af87/000000?text=+&#34; alt=&#34;#00af87&#34;&gt; older&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/d78700/000000?text=+&#34; alt=&#34;#d78700&#34;&gt; Large File&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/ff00ff/000000?text=+&#34; alt=&#34;#ff00ff&#34;&gt; Execute with Stickybit&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/af0000/000000?text=+&#34; alt=&#34;#af0000&#34;&gt; Broken Symlink&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/ffffff/000000?text=+&#34; alt=&#34;#ffffff&#34;&gt; Non File&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/d75f87/000000?text=+&#34; alt=&#34;#d75f87&#34;&gt; No Access&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/00d7d7/000000?text=+&#34; alt=&#34;#00d7d7&#34;&gt; Pipe/Symlink/Blockdevice/Socket/Special&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://via.placeholder.com/15/d78700/000000?text=+&#34; alt=&#34;#d78700&#34;&gt; CharDevice&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Checkout &lt;a href=&#34;https://github.com/trapd00r/LS_COLORS&#34;&gt;trapd00r/LS_COLORS&lt;/a&gt; and &lt;a href=&#34;https://github.com/sharkdp/vivid&#34;&gt;sharkdp/vivid&lt;/a&gt; for help in themeing using &lt;code&gt;LS_COLORS&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;First char of folder/file getting trimmed&lt;/h3&gt; &#xA;&lt;p&gt;Workaround for Konsole: ㅤEdit the config file (or &lt;a href=&#34;https://raw.githubusercontent.com/lsd-rs/lsd/master/#config-file-location&#34;&gt;create it&lt;/a&gt; if it doesn&#39;t already exist) and paste the following into it (contains invisible unicode characters):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;icons:&#xA;    separator: &#34; ㅤ&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a known issue in a few terminal emulator. Try using a different terminal emulator like. &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt; and &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;Kitty&lt;/a&gt; are really good alternatives. You might also want to check if your font is responsible for causing this. To verify this, try running lsd with icons disabled and if it still does not have the first character, then this is an lsd bug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lsd --icon never --ignore-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UTF-8 Chars&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;lsd&lt;/code&gt; will try to display the UTF-8 chars in file name, A &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt;(�) is used to represent the invalid UTF-8 chars.&lt;/p&gt; &#xA;&lt;h3&gt;Icons are showing up strangely&lt;/h3&gt; &#xA;&lt;p&gt;Nerd Fonts is moving the codepoints of the Material Design Icons in 3.0, so lsd has updated the icons in #830. If your icons look weird, use fonts that have been patched using Nerd Fonts v2.3.0 or later.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/releases/tag/v2.3.3&#34;&gt;https://github.com/ryanoasis/nerd-fonts/releases/tag/v2.3.3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Everyone can contribute to this project, improving the code or adding functions. If anyone wants something to be added we will try to do it.&lt;/p&gt; &#xA;&lt;p&gt;As this is being updated regularly, don&#39;t forget to rebase your fork before creating a pull-request.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/meain&#34;&gt;meain&lt;/a&gt; for all his contributions and reviews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danieldulaney&#34;&gt;danieldulaney&lt;/a&gt; for the Windows integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp&#34;&gt;sharkdp&lt;/a&gt; and his superb &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; from which I have stolen a lot of CI stuff.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/athityakumar&#34;&gt;athityakumar&lt;/a&gt; for the project &lt;a href=&#34;https://github.com/athityakumar/colorls&#34;&gt;colorls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lsd-rs/lsd/graphs/contributors&#34;&gt;All the other contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rerun-io/rerun</title>
    <updated>2023-10-01T02:22:36Z</updated>
    <id>tag:github.com,2023-10-01:/rerun-io/rerun</id>
    <link href="https://github.com/rerun-io/rerun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visualize streams of multimodal data. Fast, easy to use, and simple to integrate. Built in Rust using egui.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.rerun.io/&#34;&gt; &lt;img alt=&#34;banner&#34; src=&#34;https://user-images.githubusercontent.com/1148717/218142418-1d320929-6b7a-486e-8277-fbeef2432529.png&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/rerun-sdk/&#34;&gt; &lt;img alt=&#34;PyPi&#34; src=&#34;https://img.shields.io/pypi/v/rerun-sdk.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/rerun&#34;&gt; &lt;img alt=&#34;crates.io&#34; src=&#34;https://img.shields.io/crates/v/rerun.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/rerun-io/rerun/raw/master/LICENSE-MIT&#34;&gt; &lt;img alt=&#34;MIT&#34; src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/rerun-io/rerun/raw/master/LICENSE-APACHE&#34;&gt; &lt;img alt=&#34;Apache&#34; src=&#34;https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/Gcm8BbTaAj&#34;&gt; &lt;img alt=&#34;Rerun Discord&#34; src=&#34;https://img.shields.io/discord/1062300748202921994?label=Rerun%20Discord&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h1&gt;Build time aware visualizations of multimodal data&lt;/h1&gt; &#xA;&lt;p&gt;Use the Rerun SDK (available in Python, Rust, and soon C++) to log data like images, tensors, point clouds, and text. Logs are streamed to the Rerun Viewer for live visualization or to file for later use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import rerun as rr  # pip install rerun-sdk&#xA;&#xA;rr.init(&#34;rerun_example_app&#34;)&#xA;&#xA;rr.connect()  # Connect to a remote viewer&#xA;# rr.spawn()  # Spawn a child process with a viewer and connect&#xA;# rr.save(&#34;recording.rrd&#34;)  # Stream all logs to disk&#xA;&#xA;# Associate subsequent data with 42 on the “frame” timeline&#xA;rr.set_time_sequence(&#34;frame&#34;, 42))&#xA;&#xA;# Log colored 3D points to the entity at `path/to/points`&#xA;rr.log(&#34;path/to/points&#34;, rr.Points3D(positions, colors=colors))&#xA;…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;800&#34; alt=&#34;Rerun Viewer&#34; src=&#34;https://github.com/rerun-io/rerun/assets/2624717/c4900538-fc3a-43b8-841a-8d226e7b5a2e&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or on &lt;a href=&#34;https://github.com/conda-forge/rerun-sdk-feedstock&#34;&gt;&lt;code&gt;conda&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;code&gt;cargo add rerun&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C / C++&lt;/strong&gt;: &lt;a href=&#34;https://github.com/rerun-io/rerun/issues/2919&#34;&gt;Coming soon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rerun Viewer binary&lt;/h3&gt; &#xA;&lt;p&gt;Both the Python and Rust library can start the Rerun Viewer, but to stream log data over the network or load our &lt;code&gt;.rrd&lt;/code&gt; data files you also need the &lt;code&gt;rerun&lt;/code&gt; binary.&lt;/p&gt; &#xA;&lt;p&gt;It can be installed with &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or with &lt;code&gt;cargo install rerun-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should now be able to run &lt;code&gt;rerun --help&lt;/code&gt; in any terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📚 &lt;a href=&#34;http://rerun.io/docs&#34;&gt;High-level docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🐍 &lt;a href=&#34;https://ref.rerun.io/docs/python&#34;&gt;Python API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🦀 &lt;a href=&#34;https://docs.rs/rerun/&#34;&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⁉️ &lt;a href=&#34;https://www.rerun.io/docs/getting-started/troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;We are in active development. There are many features we want to add, and the API is still evolving. &lt;em&gt;Expect breaking changes!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some shortcomings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Big points clouds (1M+) are slow (&lt;a href=&#34;https://github.com/rerun-io/rerun/issues/1136&#34;&gt;#1136&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The data you want to visualize must fit in RAM. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://www.rerun.io/docs/howto/limit-ram&#34;&gt;https://www.rerun.io/docs/howto/limit-ram&lt;/a&gt; for how to bound memory use&lt;/li&gt; &#xA;   &lt;li&gt;We plan on having a disk-based data store some time in the future&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The Rust library takes a long time to compile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We have way too many big dependencies, and we are planning on improving the situation (&lt;a href=&#34;https://github.com/rerun-io/rerun/pull/1316&#34;&gt;#1316&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Business model&lt;/h2&gt; &#xA;&lt;p&gt;Rerun uses an open-core model. Everything in this repository will stay open source and free (both as in beer and as in freedom). In the future, Rerun will offer a commercial product that builds on top of the core free project.&lt;/p&gt; &#xA;&lt;p&gt;The Rerun open source project targets the needs of individual developers. The commercial product targets the needs specific to teams that build and run computer vision and robotics products.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/ARCHITECTURE.md&#34;&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/BUILD.md&#34;&gt;&lt;code&gt;BUILD.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/rerun_py/README.md&#34;&gt;&lt;code&gt;rerun_py/README.md&lt;/code&gt;&lt;/a&gt; - build instructions for Python SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_STYLE.md&#34;&gt;&lt;code&gt;CODE_STYLE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rerun-io/rerun/main/RELEASES.md&#34;&gt;&lt;code&gt;RELEASES.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing a pre-release Python SDK&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the correct &lt;code&gt;.whl&lt;/code&gt; from &lt;a href=&#34;https://github.com/rerun-io/rerun/releases&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pip install rerun_sdk&amp;lt;…&amp;gt;.whl&lt;/code&gt; (replace &lt;code&gt;&amp;lt;…&amp;gt;&lt;/code&gt; with the actual filename)&lt;/li&gt; &#xA; &lt;li&gt;Test it: &lt;code&gt;rerun --version&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>signalapp/libsignal</title>
    <updated>2023-10-01T02:22:36Z</updated>
    <id>tag:github.com,2023-10-01:/signalapp/libsignal</id>
    <link href="https://github.com/signalapp/libsignal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home to the Signal Protocol as well as other cryptographic primitives which make Signal possible.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;libsignal contains platform-agnostic APIs used by the official Signal clients and servers, exposed as a Java, Swift, or TypeScript library. The underlying implementations are written in Rust:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libsignal-protocol: Implements the Signal protocol, including the &lt;a href=&#34;https://signal.org/docs/&#34;&gt;Double Ratchet algorithm&lt;/a&gt;. A replacement for &lt;a href=&#34;https://github.com/signalapp/libsignal-protocol-java&#34;&gt;libsignal-protocol-java&lt;/a&gt; and &lt;a href=&#34;https://github.com/signalapp/libsignal-metadata-java&#34;&gt;libsignal-metadata-java&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;signal-crypto: Cryptographic primitives such as AES-GCM. We use &lt;a href=&#34;https://github.com/RustCrypto&#34;&gt;RustCrypto&lt;/a&gt;&#39;s where we can but sometimes have differing needs.&lt;/li&gt; &#xA; &lt;li&gt;device-transfer: Support logic for Signal&#39;s device-to-device transfer feature.&lt;/li&gt; &#xA; &lt;li&gt;attest: Functionality for remote attestation of &lt;a href=&#34;https://www.intel.com/content/www/us/en/architecture-and-technology/software-guard-extensions.html&#34;&gt;SGX enclaves&lt;/a&gt; and server-side &lt;a href=&#34;https://en.wikipedia.org/wiki/Hardware_security_module&#34;&gt;HSMs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;zkgroup: Functionality for &lt;a href=&#34;https://signal.org/blog/signal-private-group-system/&#34;&gt;zero-knowledge groups&lt;/a&gt; and related features available in Signal.&lt;/li&gt; &#xA; &lt;li&gt;zkcredential: An abstraction for the sort of zero-knowledge credentials used by zkgroup, based on the paper &#34;&lt;a href=&#34;https://eprint.iacr.org/2019/1416.pdf&#34;&gt;The Signal Private Group System&lt;/a&gt;&#34; by Chase, Perrin, and Zaverucha.&lt;/li&gt; &#xA; &lt;li&gt;poksho: Utilities for implementing zero-knowledge proofs (such as those used by zkgroup); stands for &#34;proof-of-knowledge, stateful-hash-object&#34;.&lt;/li&gt; &#xA; &lt;li&gt;pin: Functionality for consistently using &lt;a href=&#34;https://signal.org/blog/signal-pins/&#34;&gt;PINs&lt;/a&gt; as passwords in Signal&#39;s Secure Value Recovery system.&lt;/li&gt; &#xA; &lt;li&gt;usernames: Functionality for username generation, hashing, and proofs.&lt;/li&gt; &#xA; &lt;li&gt;media: Utilities for manipulating media.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository is used by the Signal client apps (&lt;a href=&#34;https://github.com/signalapp/Signal-Android&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://github.com/signalapp/Signal-iOS&#34;&gt;iOS&lt;/a&gt;, and &lt;a href=&#34;https://github.com/signalapp/Signal-Desktop&#34;&gt;Desktop&lt;/a&gt;) as well as server-side. Use outside of Signal is unsupported. In particular, the products of this repository are the Java, Swift, and TypeScript libraries that wrap the underlying Rust implementations. All APIs and implementations are subject to change without notice, as are the JNI, C, and Node add-on &#34;bridge&#34; layers. However, backwards-incompatible changes to the Java, Swift, TypeScript, and non-bridge Rust APIs will be reflected in the version number on a best-effort basis.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;To build anything in this repository you must have &lt;a href=&#34;https://rust-lang.org&#34;&gt;Rust&lt;/a&gt; installed, as well as Clang, libclang, &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;, and Make. On a Debian-like system, you can get these extra dependencies through &lt;code&gt;apt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ apt-get install clang libclang-dev cmake make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build currently uses a specific version of the Rust nightly compiler, which will be downloaded automatically by cargo. To build and test the basic protocol libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cargo build&#xA;...&#xA;$ cargo test&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Java/Android&lt;/h2&gt; &#xA;&lt;p&gt;To build for Android you must install several additional packages including a JDK, the Android NDK/SDK, and add the Android targets to the Rust compiler, using&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build the Java/Android &lt;code&gt;jar&lt;/code&gt; and &lt;code&gt;aar&lt;/code&gt;, and run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd java&#xA;$ ./gradlew test&#xA;$ ./gradlew build # if you need AAR outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, a build system using Docker is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd java&#xA;$ make java_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When exposing new APIs to Java, you will need to run &lt;code&gt;rust/bridge/jni/bin/gen_java_decl.py&lt;/code&gt; in addition to rebuilding.&lt;/p&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;p&gt;To learn about the Swift build process see &lt;a href=&#34;https://raw.githubusercontent.com/signalapp/libsignal/main/swift/&#34;&gt;&lt;code&gt;swift/README.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Node&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need Node installed to build. If you have &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt;, you can run &lt;code&gt;nvm use&lt;/code&gt; to select an appropriate version automatically.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://classic.yarnpkg.com/&#34;&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; as our package manager. The Rust library will automatically be built when you run &lt;code&gt;yarn install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd node&#xA;$ nvm use&#xA;$ yarn install&#xA;$ yarn tsc&#xA;$ yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When testing changes locally, you can use &lt;code&gt;yarn build&lt;/code&gt; to do an incremental rebuild of the Rust library.&lt;/p&gt; &#xA;&lt;p&gt;When exposing new APIs to Node, you will need to run &lt;code&gt;rust/bridge/node/bin/gen_ts_decl.py&lt;/code&gt; in addition to rebuilding.&lt;/p&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Signal does accept external contributions to this project. However unless the change is simple and easily understood, for example fixing a bug or portability issue, adding a new test, or improving performance, first open an issue to discuss your intended change as not all changes can be accepted.&lt;/p&gt; &#xA;&lt;p&gt;Contributions that will not be used directly by one of Signal&#39;s official client apps may still be considered, but only if they do not pose an undue maintenance burden or conflict with the goals of the project.&lt;/p&gt; &#xA;&lt;p&gt;Signing a &lt;a href=&#34;https://signal.org/cla/&#34;&gt;CLA (Contributor License Agreement)&lt;/a&gt; is required for all contributions.&lt;/p&gt; &#xA;&lt;h1&gt;Legal things&lt;/h1&gt; &#xA;&lt;h2&gt;Cryptography Notice&lt;/h2&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;http://www.wassenaar.org/&#34;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2020-2023 Signal Messenger, LLC.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the AGPLv3: &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;https://www.gnu.org/licenses/agpl-3.0.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>