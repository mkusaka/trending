<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-01T01:51:33Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>astral-sh/ruff</title>
    <updated>2025-06-01T01:51:33Z</updated>
    <id>tag:github.com,2025-06-01:/astral-sh/ruff</id>
    <link href="https://github.com/astral-sh/ruff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruff&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&#34; alt=&#34;Ruff&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/ruff&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/ruff.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/ruff.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/ruff&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/ruff.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff/actions&#34;&gt;&lt;img src=&#34;https://github.com/astral-sh/ruff/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/astral-sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://play.ruff.rs/&#34;&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture align=&#34;center&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/1309177/232603514-c95e9b0f-6b31-43de-9a80-9e844173fd6a.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Shows a bar chart with benchmark results.&#34; src=&#34;https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Linting the CPython codebase from scratch.&lt;/i&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ö°Ô∏è 10-100x faster than existing linters (like Flake8) and formatters (like Black)&lt;/li&gt; &#xA; &lt;li&gt;üêç Installable via &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è &lt;code&gt;pyproject.toml&lt;/code&gt; support&lt;/li&gt; &#xA; &lt;li&gt;ü§ù Python 3.13 compatibility&lt;/li&gt; &#xA; &lt;li&gt;‚öñÔ∏è Drop-in parity with &lt;a href=&#34;https://docs.astral.sh/ruff/faq/#how-does-ruffs-linter-compare-to-flake8&#34;&gt;Flake8&lt;/a&gt;, isort, and &lt;a href=&#34;https://docs.astral.sh/ruff/faq/#how-does-ruffs-formatter-compare-to-black&#34;&gt;Black&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üì¶ Built-in caching, to avoid re-analyzing unchanged files&lt;/li&gt; &#xA; &lt;li&gt;üîß Fix support, for automatic error correction (e.g., automatically remove unused imports)&lt;/li&gt; &#xA; &lt;li&gt;üìè Over &lt;a href=&#34;https://docs.astral.sh/ruff/rules/&#34;&gt;800 built-in rules&lt;/a&gt;, with native re-implementations of popular Flake8 plugins, like flake8-bugbear&lt;/li&gt; &#xA; &lt;li&gt;‚å®Ô∏è First-party &lt;a href=&#34;https://docs.astral.sh/ruff/editors&#34;&gt;editor integrations&lt;/a&gt; for &lt;a href=&#34;https://github.com/astral-sh/ruff-vscode&#34;&gt;VS Code&lt;/a&gt; and &lt;a href=&#34;https://docs.astral.sh/ruff/editors/setup&#34;&gt;more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üåé Monorepo-friendly, with &lt;a href=&#34;https://docs.astral.sh/ruff/configuration/#config-file-discovery&#34;&gt;hierarchical and cascading configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ruff aims to be orders of magnitude faster than alternative tools while integrating more functionality behind a single, common interface.&lt;/p&gt; &#xA;&lt;p&gt;Ruff can be used to replace &lt;a href=&#34;https://pypi.org/project/flake8/&#34;&gt;Flake8&lt;/a&gt; (plus dozens of plugins), &lt;a href=&#34;https://github.com/psf/black&#34;&gt;Black&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/isort/&#34;&gt;isort&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/pydocstyle/&#34;&gt;pydocstyle&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/pyupgrade/&#34;&gt;pyupgrade&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/autoflake/&#34;&gt;autoflake&lt;/a&gt;, and more, all while executing tens or hundreds of times faster than any individual tool.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is extremely actively developed and used in major open-source projects like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/airflow&#34;&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/superset&#34;&gt;Apache Superset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Hugging Face&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scipy/scipy&#34;&gt;SciPy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;...and &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff&#34;&gt;many more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is backed by &lt;a href=&#34;https://astral.sh&#34;&gt;Astral&lt;/a&gt;. Read the &lt;a href=&#34;https://astral.sh/blog/announcing-astral-the-company-behind-ruff&#34;&gt;launch post&lt;/a&gt;, or the original &lt;a href=&#34;https://notes.crmarsh.com/python-tooling-could-be-much-much-faster&#34;&gt;project announcement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/tiangolo/status/1591912354882764802&#34;&gt;&lt;strong&gt;Sebasti√°n Ram√≠rez&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;FastAPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it&#39;s actually running and checking the code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/schrockn/status/1612615862904827904&#34;&gt;&lt;strong&gt;Nick Schrock&lt;/strong&gt;&lt;/a&gt;, founder of &lt;a href=&#34;https://www.elementl.com/&#34;&gt;Elementl&lt;/a&gt;, co-creator of &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On our largest module (dagster itself, 250k LOC) pylint takes about 2.5 minutes, parallelized across 4 cores on my M1. Running ruff against our &lt;em&gt;entire&lt;/em&gt; codebase takes .4 seconds.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bokeh/bokeh/pull/12605&#34;&gt;&lt;strong&gt;Bryan Van de Ven&lt;/strong&gt;&lt;/a&gt;, co-creator of &lt;a href=&#34;https://github.com/bokeh/bokeh/&#34;&gt;Bokeh&lt;/a&gt;, original author of &lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;Conda&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of ~20s. This is an enormous quality of life improvement for local dev. It&#39;s fast enough that I added it as an actual commit hook, which is terrific.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/timothycrosley/status/1606420868514877440&#34;&gt;&lt;strong&gt;Timothy Crosley&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just switched my first project to Ruff. Only one downside so far: it&#39;s so fast I couldn&#39;t believe it was working till I intentionally introduced some errors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/astral-sh/ruff/issues/465#issuecomment-1317400028&#34;&gt;&lt;strong&gt;Tim Abbott&lt;/strong&gt;&lt;/a&gt;, lead developer of &lt;a href=&#34;https://github.com/zulip/zulip&#34;&gt;Zulip&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is just ridiculously fast... &lt;code&gt;ruff&lt;/code&gt; is amazing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- End section: Overview --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#rules&#34;&gt;Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff&#34;&gt;Who&#39;s Using Ruff?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;a id=&#34;getting-started&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Ruff is available as &lt;a href=&#34;https://pypi.org/project/ruff/&#34;&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/a&gt; on PyPI.&lt;/p&gt; &#xA;&lt;p&gt;Invoke Ruff directly with &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;&lt;code&gt;uvx&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uvx ruff check   # Lint all files in the current directory.&#xA;uvx ruff format  # Format all files in the current directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install Ruff with &lt;code&gt;uv&lt;/code&gt; (recommended), &lt;code&gt;pip&lt;/code&gt;, or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# With uv.&#xA;uv tool install ruff@latest  # Install Ruff globally.&#xA;uv add --dev ruff            # Or add Ruff to your project.&#xA;&#xA;# With pip.&#xA;pip install ruff&#xA;&#xA;# With pipx.&#xA;pipx install ruff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting with version &lt;code&gt;0.5.0&lt;/code&gt;, Ruff can be installed with our standalone installers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On macOS and Linux.&#xA;curl -LsSf https://astral.sh/ruff/install.sh | sh&#xA;&#xA;# On Windows.&#xA;powershell -c &#34;irm https://astral.sh/ruff/install.ps1 | iex&#34;&#xA;&#xA;# For a specific version.&#xA;curl -LsSf https://astral.sh/ruff/0.11.12/install.sh | sh&#xA;powershell -c &#34;irm https://astral.sh/ruff/0.11.12/install.ps1 | iex&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install Ruff via &lt;a href=&#34;https://formulae.brew.sh/formula/ruff&#34;&gt;Homebrew&lt;/a&gt;, &lt;a href=&#34;https://anaconda.org/conda-forge/ruff&#34;&gt;Conda&lt;/a&gt;, and with &lt;a href=&#34;https://docs.astral.sh/ruff/installation/&#34;&gt;a variety of other package managers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To run Ruff as a linter, try any of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff check                          # Lint all files in the current directory (and any subdirectories).&#xA;ruff check path/to/code/            # Lint all files in `/path/to/code` (and any subdirectories).&#xA;ruff check path/to/code/*.py        # Lint all `.py` files in `/path/to/code`.&#xA;ruff check path/to/code/to/file.py  # Lint `file.py`.&#xA;ruff check @arguments.txt           # Lint using an input file, treating its contents as newline-delimited command-line arguments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to run Ruff as a formatter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff format                          # Format all files in the current directory (and any subdirectories).&#xA;ruff format path/to/code/            # Format all files in `/path/to/code` (and any subdirectories).&#xA;ruff format path/to/code/*.py        # Format all `.py` files in `/path/to/code`.&#xA;ruff format path/to/code/to/file.py  # Format `file.py`.&#xA;ruff format @arguments.txt           # Format using an input file, treating its contents as newline-delimited command-line arguments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruff can also be used as a &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; hook via &lt;a href=&#34;https://github.com/astral-sh/ruff-pre-commit&#34;&gt;&lt;code&gt;ruff-pre-commit&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- repo: https://github.com/astral-sh/ruff-pre-commit&#xA;  # Ruff version.&#xA;  rev: v0.11.12&#xA;  hooks:&#xA;    # Run the linter.&#xA;    - id: ruff&#xA;      args: [ --fix ]&#xA;    # Run the formatter.&#xA;    - id: ruff-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruff can also be used as a &lt;a href=&#34;https://github.com/astral-sh/ruff-vscode&#34;&gt;VS Code extension&lt;/a&gt; or with &lt;a href=&#34;https://docs.astral.sh/ruff/editors/setup&#34;&gt;various other editors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff can also be used as a &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Action&lt;/a&gt; via &lt;a href=&#34;https://github.com/astral-sh/ruff-action&#34;&gt;&lt;code&gt;ruff-action&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Ruff&#xA;on: [ push, pull_request ]&#xA;jobs:&#xA;  ruff:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v4&#xA;      - uses: astral-sh/ruff-action@v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;a id=&#34;configuration&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Ruff can be configured through a &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;ruff.toml&lt;/code&gt;, or &lt;code&gt;.ruff.toml&lt;/code&gt; file (see: &lt;a href=&#34;https://docs.astral.sh/ruff/configuration/&#34;&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt;, or &lt;a href=&#34;https://docs.astral.sh/ruff/settings/&#34;&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/a&gt; for a complete list of all configuration options).&lt;/p&gt; &#xA;&lt;p&gt;If left unspecified, Ruff&#39;s default configuration is equivalent to the following &lt;code&gt;ruff.toml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Exclude a variety of commonly ignored directories.&#xA;exclude = [&#xA;    &#34;.bzr&#34;,&#xA;    &#34;.direnv&#34;,&#xA;    &#34;.eggs&#34;,&#xA;    &#34;.git&#34;,&#xA;    &#34;.git-rewrite&#34;,&#xA;    &#34;.hg&#34;,&#xA;    &#34;.ipynb_checkpoints&#34;,&#xA;    &#34;.mypy_cache&#34;,&#xA;    &#34;.nox&#34;,&#xA;    &#34;.pants.d&#34;,&#xA;    &#34;.pyenv&#34;,&#xA;    &#34;.pytest_cache&#34;,&#xA;    &#34;.pytype&#34;,&#xA;    &#34;.ruff_cache&#34;,&#xA;    &#34;.svn&#34;,&#xA;    &#34;.tox&#34;,&#xA;    &#34;.venv&#34;,&#xA;    &#34;.vscode&#34;,&#xA;    &#34;__pypackages__&#34;,&#xA;    &#34;_build&#34;,&#xA;    &#34;buck-out&#34;,&#xA;    &#34;build&#34;,&#xA;    &#34;dist&#34;,&#xA;    &#34;node_modules&#34;,&#xA;    &#34;site-packages&#34;,&#xA;    &#34;venv&#34;,&#xA;]&#xA;&#xA;# Same as Black.&#xA;line-length = 88&#xA;indent-width = 4&#xA;&#xA;# Assume Python 3.9&#xA;target-version = &#34;py39&#34;&#xA;&#xA;[lint]&#xA;# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.&#xA;select = [&#34;E4&#34;, &#34;E7&#34;, &#34;E9&#34;, &#34;F&#34;]&#xA;ignore = []&#xA;&#xA;# Allow fix for all enabled rules (when `--fix`) is provided.&#xA;fixable = [&#34;ALL&#34;]&#xA;unfixable = []&#xA;&#xA;# Allow unused variables when underscore-prefixed.&#xA;dummy-variable-rgx = &#34;^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$&#34;&#xA;&#xA;[format]&#xA;# Like Black, use double quotes for strings.&#xA;quote-style = &#34;double&#34;&#xA;&#xA;# Like Black, indent with spaces, rather than tabs.&#xA;indent-style = &#34;space&#34;&#xA;&#xA;# Like Black, respect magic trailing commas.&#xA;skip-magic-trailing-comma = false&#xA;&#xA;# Like Black, automatically detect the appropriate line ending.&#xA;line-ending = &#34;auto&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, in a &lt;code&gt;pyproject.toml&lt;/code&gt;, each section header should be prefixed with &lt;code&gt;tool.ruff&lt;/code&gt;. For example, &lt;code&gt;[lint]&lt;/code&gt; should be replaced with &lt;code&gt;[tool.ruff.lint]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some configuration options can be provided via dedicated command-line arguments, such as those related to rule enablement and disablement, file discovery, and logging level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff check --select F401 --select F403 --quiet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The remaining configuration options can be provided through a catch-all &lt;code&gt;--config&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff check --config &#34;lint.per-file-ignores = {&#39;some_file.py&#39; = [&#39;F841&#39;]}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To opt in to the latest lint rules, formatter style changes, interface updates, and more, enable &lt;a href=&#34;https://docs.astral.sh/ruff/rules/&#34;&gt;preview mode&lt;/a&gt; by setting &lt;code&gt;preview = true&lt;/code&gt; in your configuration file or passing &lt;code&gt;--preview&lt;/code&gt; on the command line. Preview mode enables a collection of unstable features that may change prior to stabilization.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;ruff help&lt;/code&gt; for more on Ruff&#39;s top-level commands, or &lt;code&gt;ruff help check&lt;/code&gt; and &lt;code&gt;ruff help format&lt;/code&gt; for more on the linting and formatting commands, respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;a id=&#34;rules&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;!-- Begin section: Rules --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ruff supports over 800 lint rules&lt;/strong&gt;, many of which are inspired by popular tools like Flake8, isort, pyupgrade, and others. Regardless of the rule&#39;s origin, Ruff re-implements every rule in Rust as a first-party feature.&lt;/p&gt; &#xA;&lt;p&gt;By default, Ruff enables Flake8&#39;s &lt;code&gt;F&lt;/code&gt; rules, along with a subset of the &lt;code&gt;E&lt;/code&gt; rules, omitting any stylistic rules that overlap with the use of a formatter, like &lt;code&gt;ruff format&lt;/code&gt; or &lt;a href=&#34;https://github.com/psf/black&#34;&gt;Black&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re just getting started with Ruff, &lt;strong&gt;the default rule set is a great place to start&lt;/strong&gt;: it catches a wide variety of common errors (like unused imports) with zero configuration.&lt;/p&gt; &#xA;&lt;!-- End section: Rules --&gt; &#xA;&lt;p&gt;Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code quality tools, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/autoflake/&#34;&gt;autoflake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/eradicate/&#34;&gt;eradicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-2020/&#34;&gt;flake8-2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-annotations/&#34;&gt;flake8-annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-async&#34;&gt;flake8-async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-bandit/&#34;&gt;flake8-bandit&lt;/a&gt; (&lt;a href=&#34;https://github.com/astral-sh/ruff/issues/1646&#34;&gt;#1646&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-blind-except/&#34;&gt;flake8-blind-except&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-boolean-trap/&#34;&gt;flake8-boolean-trap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-bugbear/&#34;&gt;flake8-bugbear&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-builtins/&#34;&gt;flake8-builtins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-commas/&#34;&gt;flake8-commas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-comprehensions/&#34;&gt;flake8-comprehensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-copyright/&#34;&gt;flake8-copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-datetimez/&#34;&gt;flake8-datetimez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-debugger/&#34;&gt;flake8-debugger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-django/&#34;&gt;flake8-django&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-docstrings/&#34;&gt;flake8-docstrings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-eradicate/&#34;&gt;flake8-eradicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-errmsg/&#34;&gt;flake8-errmsg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-executable/&#34;&gt;flake8-executable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-future-annotations/&#34;&gt;flake8-future-annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-gettext/&#34;&gt;flake8-gettext&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-implicit-str-concat/&#34;&gt;flake8-implicit-str-concat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaopalmeiro/flake8-import-conventions&#34;&gt;flake8-import-conventions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-logging/&#34;&gt;flake8-logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-logging-format/&#34;&gt;flake8-logging-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-no-pep420&#34;&gt;flake8-no-pep420&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-pie/&#34;&gt;flake8-pie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-print/&#34;&gt;flake8-print&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-pyi/&#34;&gt;flake8-pyi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-pytest-style/&#34;&gt;flake8-pytest-style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-quotes/&#34;&gt;flake8-quotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-raise/&#34;&gt;flake8-raise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-return/&#34;&gt;flake8-return&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-self/&#34;&gt;flake8-self&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-simplify/&#34;&gt;flake8-simplify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-slots/&#34;&gt;flake8-slots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-super/&#34;&gt;flake8-super&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-tidy-imports/&#34;&gt;flake8-tidy-imports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-todos/&#34;&gt;flake8-todos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-type-checking/&#34;&gt;flake8-type-checking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-use-pathlib/&#34;&gt;flake8-use-pathlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flynt/&#34;&gt;flynt&lt;/a&gt; (&lt;a href=&#34;https://github.com/astral-sh/ruff/issues/2102&#34;&gt;#2102&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/isort/&#34;&gt;isort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/mccabe/&#34;&gt;mccabe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pandas-vet/&#34;&gt;pandas-vet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pep8-naming/&#34;&gt;pep8-naming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pydocstyle/&#34;&gt;pydocstyle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pre-commit/pygrep-hooks&#34;&gt;pygrep-hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pylint-airflow/&#34;&gt;pylint-airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pyupgrade/&#34;&gt;pyupgrade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/tryceratops/&#34;&gt;tryceratops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/yesqa/&#34;&gt;yesqa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a complete enumeration of the supported rules, see &lt;a href=&#34;https://docs.astral.sh/ruff/rules/&#34;&gt;&lt;em&gt;Rules&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;a id=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and highly appreciated. To get started, check out the &lt;a href=&#34;https://docs.astral.sh/ruff/contributing/&#34;&gt;&lt;strong&gt;contributing guidelines&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join us on &lt;a href=&#34;https://discord.com/invite/astral-sh&#34;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;a id=&#34;support&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Having trouble? Check out the existing issues on &lt;a href=&#34;https://github.com/astral-sh/ruff/issues&#34;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;, or feel free to &lt;a href=&#34;https://github.com/astral-sh/ruff/issues/new&#34;&gt;&lt;strong&gt;open a new one&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also ask for help on &lt;a href=&#34;https://discord.com/invite/astral-sh&#34;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;a id=&#34;acknowledgements&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ruff&#39;s linter draws on both the APIs and implementation details of many other tools in the Python ecosystem, especially &lt;a href=&#34;https://github.com/PyCQA/flake8&#34;&gt;Flake8&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyCQA/pyflakes&#34;&gt;Pyflakes&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyCQA/pycodestyle&#34;&gt;pycodestyle&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyCQA/pydocstyle&#34;&gt;pydocstyle&lt;/a&gt;, &lt;a href=&#34;https://github.com/asottile/pyupgrade&#34;&gt;pyupgrade&lt;/a&gt;, and &lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In some cases, Ruff includes a &#34;direct&#34; Rust port of the corresponding tool. We&#39;re grateful to the maintainers of these tools for their work, and for all the value they&#39;ve provided to the Python community.&lt;/p&gt; &#xA;&lt;p&gt;Ruff&#39;s formatter is built on a fork of Rome&#39;s &lt;a href=&#34;https://github.com/rome/tools/tree/main/crates/rome_formatter&#34;&gt;&lt;code&gt;rome_formatter&lt;/code&gt;&lt;/a&gt;, and again draws on both API and implementation details from &lt;a href=&#34;https://github.com/rome/tools&#34;&gt;Rome&lt;/a&gt;, &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;Prettier&lt;/a&gt;, and &lt;a href=&#34;https://github.com/psf/black&#34;&gt;Black&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff&#39;s import resolver is based on the import resolution algorithm from &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;Pyright&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is also influenced by a number of tools outside the Python ecosystem, like &lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;Clippy&lt;/a&gt; and &lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;ESLint&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is the beneficiary of a large number of &lt;a href=&#34;https://github.com/astral-sh/ruff/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is released under the MIT license.&lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s Using Ruff?&lt;a id=&#34;whos-using-ruff&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ruff is used by a number of major open-source projects and companies, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/albumentations-team/albumentations&#34;&gt;Albumentations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Amazon (&lt;a href=&#34;https://github.com/aws/serverless-application-model&#34;&gt;AWS SAM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Anthropic (&lt;a href=&#34;https://github.com/anthropics/anthropic-sdk-python&#34;&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/airflow&#34;&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AstraZeneca (&lt;a href=&#34;https://github.com/AstraZeneca/magnus-core&#34;&gt;Magnus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-babel/babel&#34;&gt;Babel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Benchling (&lt;a href=&#34;https://github.com/benchling/refac&#34;&gt;Refac&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bokeh/bokeh&#34;&gt;Bokeh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CrowdCent (&lt;a href=&#34;https://github.com/crowdcent/numerblox&#34;&gt;NumerBlox&lt;/a&gt;) &#xA;  &lt;!-- typos: ignore --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;Cryptography (PyCA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CERN (&lt;a href=&#34;https://getindico.io/&#34;&gt;Indico&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iterative/dvc&#34;&gt;DVC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dagger/dagger&#34;&gt;Dagger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dagster-io/dagster&#34;&gt;Dagster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Databricks (&lt;a href=&#34;https://github.com/mlflow/mlflow&#34;&gt;MLflow&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langgenius/dify&#34;&gt;Dify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/godotengine/godot&#34;&gt;Godot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/great-expectations/great_expectations&#34;&gt;Great Expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/encode/httpx&#34;&gt;HTTPX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/hatch&#34;&gt;Hatch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/home-assistant/core&#34;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hugging Face (&lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Transformers&lt;/a&gt;, &lt;a href=&#34;https://github.com/huggingface/datasets&#34;&gt;Datasets&lt;/a&gt;, &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;Diffusers&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;IBM (&lt;a href=&#34;https://github.com/Qiskit/qiskit&#34;&gt;Qiskit&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ING Bank (&lt;a href=&#34;https://github.com/ing-bank/popmon&#34;&gt;popmon&lt;/a&gt;, &lt;a href=&#34;https://github.com/ing-bank/probatus&#34;&gt;probatus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibis-project/ibis&#34;&gt;Ibis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unifyai/ivy&#34;&gt;ivy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jax-ml/jax&#34;&gt;JAX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jupyter-server/jupyter_server&#34;&gt;Jupyter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kraken.tech/&#34;&gt;Kraken Tech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://litestar.dev/&#34;&gt;Litestar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jerryjliu/llama_index&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matrix (&lt;a href=&#34;https://github.com/matrix-org/synapse&#34;&gt;Synapse&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oxsecurity/megalinter&#34;&gt;MegaLinter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Meltano (&lt;a href=&#34;https://github.com/meltano/meltano&#34;&gt;Meltano CLI&lt;/a&gt;, &lt;a href=&#34;https://github.com/meltano/sdk&#34;&gt;Singer SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft (&lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/onnxruntime&#34;&gt;ONNX Runtime&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/LightGBM&#34;&gt;LightGBM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Modern Treasury (&lt;a href=&#34;https://github.com/Modern-Treasury/modern-treasury-python&#34;&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mozilla (&lt;a href=&#34;https://github.com/mozilla/gecko-dev&#34;&gt;Firefox&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python/mypy&#34;&gt;Mypy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nautobot/nautobot&#34;&gt;Nautobot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Netflix (&lt;a href=&#34;https://github.com/Netflix/dispatch&#34;&gt;Dispatch&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neondatabase/neon&#34;&gt;Neon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nokia.com/&#34;&gt;Nokia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nonebot/nonebot2&#34;&gt;NoneBot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyro-ppl/numpyro&#34;&gt;NumPyro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onnx/onnx&#34;&gt;ONNX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenBB-finance/OpenBBTerminal&#34;&gt;OpenBB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Open-Wine-Components/umu-launcher&#34;&gt;Open Wine Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pdm-project/pdm&#34;&gt;PDM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaddlePaddle/Paddle&#34;&gt;PaddlePaddle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-pillow/Pillow&#34;&gt;Pillow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-poetry/poetry&#34;&gt;Poetry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pola-rs/polars&#34;&gt;Polars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PostHog/posthog&#34;&gt;PostHog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prefect (&lt;a href=&#34;https://github.com/PrefectHQ/prefect&#34;&gt;Python SDK&lt;/a&gt;, &lt;a href=&#34;https://github.com/PrefectHQ/marvin&#34;&gt;Marvin&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyinstaller/pyinstaller&#34;&gt;PyInstaller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pymc-devs/pymc/&#34;&gt;PyMC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pymc-labs/pymc-marketing&#34;&gt;PyMC-Marketing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytest-dev/pytest&#34;&gt;pytest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytorch/pytorch&#34;&gt;PyTorch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydantic/pydantic&#34;&gt;Pydantic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/pylint&#34;&gt;Pylint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyvista/pyvista&#34;&gt;PyVista&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reflex-dev/reflex&#34;&gt;Reflex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/online-ml/river&#34;&gt;River&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rippling.com&#34;&gt;Rippling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sansyrox/robyn&#34;&gt;Robyn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saleor/saleor&#34;&gt;Saleor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scale AI (&lt;a href=&#34;https://github.com/scaleapi/launch-python-client&#34;&gt;Launch SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scipy/scipy&#34;&gt;SciPy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Snowflake (&lt;a href=&#34;https://github.com/Snowflake-Labs/snowcli&#34;&gt;SnowCLI&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sphinx-doc/sphinx&#34;&gt;Sphinx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DLR-RM/stable-baselines3&#34;&gt;Stable Baselines3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/encode/starlette&#34;&gt;Starlette&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/streamlit/streamlit&#34;&gt;Streamlit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Python&#34;&gt;The Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altair-viz/altair&#34;&gt;Vega-Altair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WordPress (&lt;a href=&#34;https://github.com/WordPress/openverse&#34;&gt;Openverse&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml&#34;&gt;ZenML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zulip/zulip&#34;&gt;Zulip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/build&#34;&gt;build (PyPA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/cibuildwheel&#34;&gt;cibuildwheel (PyPA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/delta-rs&#34;&gt;delta-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alteryx/featuretools&#34;&gt;featuretools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mesonbuild/meson-python&#34;&gt;meson-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wntrblm/nox&#34;&gt;nox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/pip&#34;&gt;pip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Show Your Support&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Ruff, consider adding the Ruff badge to your project&#39;s &lt;code&gt;README.md&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or &lt;code&gt;README.rst&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rst&#34;&gt;.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&#xA;    :target: https://github.com/astral-sh/ruff&#xA;    :alt: Ruff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or, as HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&amp;gt;&amp;lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&#34; alt=&#34;Ruff&#34; style=&#34;max-width:100%;&#34;&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;a id=&#34;license&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://github.com/astral-sh/ruff/raw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://astral.sh&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg?sanitize=true&#34; alt=&#34;Made by Astral&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>unionlabs/union</title>
    <updated>2025-06-01T01:51:33Z</updated>
    <id>tag:github.com,2025-06-01:/unionlabs/union</id>
    <link href="https://github.com/unionlabs/union" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The trust-minimized, zero-knowledge bridging protocol, designed for censorship resistance, extremely high security, and usage in decentralized finance.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./.github/images/union-logo-white.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./.github/images/union-logo-black.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Union&#34; src=&#34;https://raw.githubusercontent.com/unionlabs/union/main/.github/images/union-logo-black.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://garnix.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fgarnix.io%2Fapi%2Fbadges%2Funionlabs%2Funion%3Fbranch%3Dmain&#34; alt=&#34;built with garnix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.union.build&#34; title=&#34;Official Union Docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-main-blue&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.union.build&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1158939416870522930?logo=discord&#34; alt=&#34;Discord badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=union_build&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/union_build.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter handle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Union is the hyper-efficient zero-knowledge infrastructure layer for general message passing, asset transfers, NFTs, and DeFi. Its based on &lt;a href=&#34;https://union.build/docs/concepts/consensus-verification/&#34;&gt;Consensus Verification&lt;/a&gt; and has no dependencies on trusted third parties, oracles, multi-signatures or MPC. It implements &lt;a href=&#34;https://github.com/cosmos/ibc&#34; title=&#34;cosmos/ibc&#34;&gt;IBC&lt;/a&gt; for compatibility with &lt;a href=&#34;https://cosmos.network&#34;&gt;Cosmos&lt;/a&gt; chains and connects to EVM chains like &lt;a href=&#34;https://ethereum.org&#34;&gt;Ethereum&lt;/a&gt;, &lt;a href=&#34;https://github.com/berachain/beacon-kit&#34;&gt;Berachain (beacon-kit)&lt;/a&gt;, &lt;a href=&#34;https://github.com/OffchainLabs/arbitrum&#34;&gt;Arbitrum&lt;/a&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;The upgradability of contracts on other chains, connections, token configurations, and evolution of the protocol will all be controlled by decentralized governance, aligning the priorities of Union with its users, validators, and operators.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Language(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/uniond/README.md&#34;&gt;&lt;code&gt;uniond&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Union node implementation, using &lt;a href=&#34;https://github.com/unionlabs/cometbls&#34;&gt;&lt;code&gt;CometBLS&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/galoisd&#34;&gt;&lt;code&gt;galoisd&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The zero-knowledge prover implementation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://github.com/ConsenSys/gnark&#34;&gt;Gnark&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/voyager&#34;&gt;&lt;code&gt;voyager&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Modular hyper-performant cross-ecosystem relayer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/hubble&#34;&gt;&lt;code&gt;hubble&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Multi-ecosystem, GMP-enabled chain indexer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/cosmwasm&#34;&gt;&lt;code&gt;cosmwasm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cosmwasm.com/&#34;&gt;CosmWasm&lt;/a&gt; smart contract stack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/cosmwasm/ibc-union/lightclient&#34;&gt;&lt;code&gt;light-clients&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://a16zcrypto.com/posts/article/an-introduction-to-light-clients/&#34;&gt;Light Clients&lt;/a&gt; for various ecosystems&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/unionvisor/README.md&#34;&gt;&lt;code&gt;unionvisor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Node supervisor intended for production usage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/drip&#34;&gt;&lt;code&gt;drip&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Faucet for &lt;a href=&#34;https://cosmos.network&#34;&gt;Cosmos&lt;/a&gt; chains: &lt;a href=&#34;https://app.union.build/faucet&#34;&gt;app.union.build/faucet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/evm&#34;&gt;&lt;code&gt;evm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34;&gt;EVM&lt;/a&gt; smart contract stack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://soliditylang.org/&#34;&gt;Solidity&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/app2&#34;&gt;&lt;code&gt;app&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://app.union.build&#34;&gt;app.union.build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; &lt;a href=&#34;https://svelte.dev&#34;&gt;Svelte&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/site&#34;&gt;&lt;code&gt;site&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://union.build&#34;&gt;union.build&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; &lt;a href=&#34;https://astro.build&#34;&gt;Astro&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unionlabs/union/main/typescript-sdk&#34;&gt;&lt;code&gt;TypeScript SDK&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TypeScript SDK for interacting with Union&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://zero-to-nix.com/&#34;&gt;Nix&lt;/a&gt; to &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reproducible_builds&#34;&gt;reproducibly build&lt;/a&gt; any component&lt;/em&gt;, and to enter a dev shell with &lt;em&gt;all dependencies&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(Note that some components can only be built on Linux. If you are using macOS, we recommend using &lt;a href=&#34;https://orbstack.dev/&#34;&gt;OrbStack&lt;/a&gt; to easily set up a &lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; VM within two minutes. Most Union developers use macOS with &lt;a href=&#34;https://orbstack.dev/&#34;&gt;OrbStack&lt;/a&gt;, and there is no need to install Nix inside of the &lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; VM.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can now &lt;em&gt;reproducibly&lt;/em&gt; build any of Union&#39;s components from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix build .#uniond -L&#xA;nix build .#voyager -L&#xA;nix build .#app -L&#xA;&#xA;# to see all packages, run:&#xA;nix flake show&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result of whatever you build will be in &lt;code&gt;result/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can now also enter our dev shell, which has all of the dependencies (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) you need to work on any component: &lt;em&gt;(Don&#39;t worry, this will not affect your system outside of this repo)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to format the entire repo and check your spelling before each PR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run .#pre-commit -L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;#developers&lt;/code&gt; channel on &lt;a href=&#34;https://discord.union.build&#34;&gt;Union&#39;s discord&lt;/a&gt; if you need any help with this.&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;The official docs are hosted &lt;a href=&#34;https://docs.union.build&#34; title=&#34;Official Union Docs&#34;&gt;here&lt;/a&gt;. Each individual component also has accompanying developer documentation for contributors, which you can find in each &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LGFae/swww</title>
    <updated>2025-06-01T01:51:33Z</updated>
    <id>tag:github.com,2025-06-01:/LGFae/swww</id>
    <link href="https://github.com/LGFae/swww" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Solution to your Wayland Wallpaper Woes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Solution to your Wayland Wallpaper Woes&lt;/h1&gt; &#xA;&lt;h3&gt;Efficient animated wallpaper daemon for wayland, controlled at runtime&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Leuh6wm.gif&#34; alt=&#34;animated gif demonstration&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LGFae/swww/demos/assets/grow.gif&#34; alt=&#34;image transition demonstration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a compositor that implements the wlr-layer-shell (typically wlroots based compositors)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lz4/lz4&#34;&gt;lz4&lt;/a&gt; (for compressing frames when animating)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that this means &lt;code&gt;swww&lt;/code&gt; will not run on Gnome, because it does not implement the &lt;code&gt;wlr-layer-shell&lt;/code&gt; protocol&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;a href=&#34;https://repology.org/project/swww/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/swww.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Dependencies:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;wayland-client and wayland-protocol &lt;code&gt;.xml&lt;/code&gt; files installed in your system (&lt;code&gt;pkg-config&lt;/code&gt; must be able to find it)&lt;/li&gt; &#xA; &lt;li&gt;Up to date stable rustc compiler and cargo (specifically, MSRV is 1.82.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build, clone this repository and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, put &lt;strong&gt;both binaries&lt;/strong&gt; &lt;code&gt;target/release/swww&lt;/code&gt; and &lt;code&gt;target/release/swww-daemon&lt;/code&gt; in your path. Optionally, autocompletion scripts for bash, zsh, fish and elvish are offered in the &lt;code&gt;completions&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Man pages:&lt;/h4&gt; &#xA;&lt;p&gt;In order to generate the man pages, &lt;strong&gt;you must have &lt;code&gt;scdoc&lt;/code&gt; installed&lt;/strong&gt;. Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./doc/gen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The man pages will be in &lt;code&gt;doc/generated&lt;/code&gt;. To install them, you must move them to to the appropriate location in your system. You should be able to figure out where that is by running &lt;code&gt;manpath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;NixOS users can directly use this repository to get the latest swww for their system.&lt;/p&gt; &#xA;&lt;p&gt;Add in your &lt;code&gt;flake.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;  inputs.swww.url = &#34;github:LGFae/swww&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass inputs to your modules using &lt;code&gt;specialArgs&lt;/code&gt; and Then in &lt;code&gt;configuration.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;  environment.systemPackages = [&#xA;    inputs.swww.packages.${pkgs.system}.swww&#xA;  ];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display animated gifs on your desktop&lt;/li&gt; &#xA; &lt;li&gt;Display any image in the formats: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;jpeg&lt;/li&gt; &#xA;   &lt;li&gt;png&lt;/li&gt; &#xA;   &lt;li&gt;gif&lt;/li&gt; &#xA;   &lt;li&gt;pnm&lt;/li&gt; &#xA;   &lt;li&gt;tga&lt;/li&gt; &#xA;   &lt;li&gt;tiff&lt;/li&gt; &#xA;   &lt;li&gt;webp&lt;/li&gt; &#xA;   &lt;li&gt;bmp&lt;/li&gt; &#xA;   &lt;li&gt;farbfeld&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clear the screen with an arbitrary rrggbb color&lt;/li&gt; &#xA; &lt;li&gt;Smooth transition effect when you switch images&lt;/li&gt; &#xA; &lt;li&gt;Do all of that without having to shutdown and reinitialize the daemon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;There are two main reasons that compelled me to make this: the first is that &lt;a href=&#34;https://github.com/vilhalmer/oguri&#34;&gt;&lt;code&gt;oguri&lt;/code&gt;&lt;/a&gt; is unmaintained and archived, despite there being serious problems with excess of memory use while displaying certain gifs (see &lt;a href=&#34;https://github.com/vilhalmer/oguri/issues/38&#34;&gt;this&lt;/a&gt;, for example). The best alternative I&#39;ve found for &lt;code&gt;oguri&lt;/code&gt; was &lt;a href=&#34;https://github.com/GhostNaN/mpvpaper&#34;&gt;&lt;code&gt;mpvpaper&lt;/code&gt;&lt;/a&gt;, but if felt overkill for my purposes.&lt;/p&gt; &#xA;&lt;p&gt;Comparing to &lt;code&gt;oguri&lt;/code&gt;, &lt;code&gt;swww&lt;/code&gt; uses less cpu power to animate once it has cached all the frames in the animation. It should also be &lt;strong&gt;significantly&lt;/strong&gt; more memory efficient.&lt;/p&gt; &#xA;&lt;p&gt;The second is that, to my knowledge, there is no wallpaper daemon for wayland that allows you to change the wallpaper at runtime. That is, in order to, for example, cycle through the images of a directory, you&#39;d have to kill the daemon and restart it. Not only does it make simple shell scripts a pain to write, it makes switching from one image to the next to happen very abruptly.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Start by initializing the daemon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww-daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in a different terminal, simply pass the image you want to display:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww img &amp;lt;path/to/img&amp;gt;&#xA;&#xA;# You can also specify outputs:&#xA;swww img -o &amp;lt;outputs&amp;gt; &amp;lt;path/to/img&amp;gt;&#xA;&#xA;# Control how smoothly the transition will happen, as well as its frame rate.&#xA;# --transition-step: smaller values = smoother. Default is 2 if --transition-type is `simple`, and 90 if it is not.&#xA;# --transition-fps: Default = 30.&#xA;swww img &amp;lt;path/to/img&amp;gt; --transition-step &amp;lt;1 to 255&amp;gt; --transition-fps &amp;lt;1 to 255&amp;gt;&#xA;&#xA;# There are also many different transition effects:&#xA;swww img &amp;lt;path/to/img&amp;gt; --transition-type center&#xA;&#xA;# Note you may also control the above by setting up the SWWW_TRANSITION_FPS,&#xA;# SWWW_TRANSITION_STEP, and SWWW_TRANSITION environment variables.&#xA;&#xA;# To see all options, run&#xA;swww img --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to know the valid values for &lt;em&gt;&amp;lt;outputs&amp;gt;&lt;/em&gt;, you can query the daemon. This will also tell you what the current image being displayed is, as well as the dimensions detected for the outputs. If you need more detailed information, I would recommend using &lt;a href=&#34;https://sr.ht/~emersion/wlr-randr/&#34;&gt;&lt;code&gt;wlr-randr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww query&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to stop the daemon, kill it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swww kill&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more complete description, run &lt;code&gt;swww --help&lt;/code&gt; or &lt;code&gt;swww &amp;lt;subcommand&amp;gt; --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, to get a feel for what you can do with some shell scripting, check out the &lt;a href=&#34;https://raw.githubusercontent.com/LGFae/swww/main/example_scripts/&#34;&gt;example_scripts&lt;/a&gt; folder. It can help you get started.&lt;/p&gt; &#xA;&lt;h2&gt;Transitions&lt;/h2&gt; &#xA;&lt;h4&gt;Example wipe transition:&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;wipe transition with angle set to 30 deg&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LGFae/swww/demos/assets/wipe.gif&#34; alt=&#34;top transition demonstration&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; transitions all work similarly.&lt;/p&gt; &#xA;&lt;h4&gt;Example outer transition&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LGFae/swww/demos/assets/outer.gif&#34; alt=&#34;outer transition demonstration&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;center&lt;/code&gt; transition is the opposite: it starts from the center and goes towards the edges.&lt;/p&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;simple&lt;/code&gt;, which simply fades into the new image, &lt;code&gt;any&lt;/code&gt;, which starts at a random point with either &lt;code&gt;center&lt;/code&gt; of &lt;code&gt;outer&lt;/code&gt; transitions, and &lt;code&gt;random&lt;/code&gt;, which selects a transition effect at random.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;The image looks tilted and in grayscale on my laptop&lt;/h3&gt; &#xA;&lt;p&gt;See #233. Current workaround is to use &lt;code&gt;swww-daemon --format xrgb&lt;/code&gt; when starting the daemon.&lt;/p&gt; &#xA;&lt;h3&gt;High cpu usage during caching of a gif&#39;s frames&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;swww&lt;/code&gt; will use a non-insignificant amount of cpu power while caching the images. This will be specially noticeable if the images need to be resized before being displayed. So, if you have a very large gif, I would recommend resizing it &lt;strong&gt;before&lt;/strong&gt; sending it to &lt;code&gt;swww&lt;/code&gt;. That would make the caching phase much faster, and thus ultimately reduce power consumption. I can personally recommend &lt;a href=&#34;https://github.com/kohler/gifsicle&#34;&gt;&lt;code&gt;gifsicle&lt;/code&gt;&lt;/a&gt; for this purpose.&lt;/p&gt; &#xA;&lt;h3&gt;Wallpaper disappears when reconnecting monitor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;swww&lt;/code&gt; used to cache its images so that it could reload the current the last displayed image automatically. This lead to many problems and also proved to be very annoying to keep working with when we updated to &lt;a href=&#34;https://github.com/Smithay/client-toolkit&#34;&gt;&lt;code&gt;sctk 0.17&lt;/code&gt;&lt;/a&gt;. So I decided to nuke it.&lt;/p&gt; &#xA;&lt;p&gt;If you want a wallpaper to be set automatically when you reconnect to a monitor, you should use a combination of scripts and a program that lets you run commands when a new output is connected, like &lt;a href=&#34;https://sr.ht/~emersion/kanshi/&#34;&gt;&lt;code&gt;kanshi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About new features&lt;/h2&gt; &#xA;&lt;p&gt;Broadly speaking, &lt;strong&gt;NEW FEATURES WILL NOT BE ADDED, UNLESS THEY ARE EGREGIOUSLY SIMPLE&lt;/strong&gt;. I made &lt;code&gt;swww&lt;/code&gt; with the specific usecase of making shell scripts in mind. So, for example, stuff like timed wallpapers, or a setup that loads a different image at different times of the day, and so on, should all be done by combining &lt;code&gt;swww&lt;/code&gt; with other programs (see the &lt;a href=&#34;https://raw.githubusercontent.com/LGFae/swww/main/example_scripts/&#34;&gt;example_scripts&lt;/a&gt; for some examples).&lt;/p&gt; &#xA;&lt;p&gt;If you really want some new feature within &lt;code&gt;swww&lt;/code&gt; itself, I would recommend forking the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;swww&lt;/code&gt; isn&#39;t really the simplest, mostest minimalest software you could find for managing wallpapers. If you are looking for something simpler, have a look at the &lt;a href=&#34;https://github.com/natpen/awesome-wayland#wallpaper&#34;&gt;awesome-wayland repository list of wallpaper programs &lt;/a&gt;. I can personally recommend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/dnkl/wbg&#34;&gt;&lt;code&gt;wbg&lt;/code&gt;&lt;/a&gt; - probably the simplest of them all. Strongly recommend if you just care about setting a single png as your permanent wallpaper on something like a laptop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaywm/swaybg&#34;&gt;&lt;code&gt;swaybg&lt;/code&gt;&lt;/a&gt; - made by the wlroots gods themselves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GhostNaN/mpvpaper&#34;&gt;&lt;code&gt;mpvpaper&lt;/code&gt;&lt;/a&gt; - if you want to display videos as your wallpapers. This is also what I used for gifs before making &lt;code&gt;swww&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;&lt;code&gt;kitty&lt;/code&gt;&lt;/a&gt; - you can use the kitty terminal emulator with its &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/kittens/panel/&#34;&gt;panel&lt;/a&gt; kitten to have the output of an arbitrary TUI program such as htop or btop or similar as your desktop wallpaper.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;A huge thanks to everyone involved in the &lt;a href=&#34;https://github.com/Smithay&#34;&gt;smithay&lt;/a&gt; project. Making this program would not have been possible without it. In fact, the first versions of swww were quite literally copy pasted from the &lt;a href=&#34;https://github.com/Smithay/client-toolkit/raw/master/examples/layer_shell.rs&#34;&gt;layer shell example in the client-toolkit &lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A big thank-you also to &lt;a href=&#34;https://github.com/HakierGrzonzo&#34;&gt;HakierGrzonzo&lt;/a&gt;, for setting up the AUR package.&lt;/p&gt; &#xA;&lt;h3&gt;Wallpapers used in this README&lt;/h3&gt; &#xA;&lt;p&gt;Pixel Art, by Waneella - &lt;a href=&#34;https://www.patreon.com/waneella&#34;&gt;https://www.patreon.com/waneella&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gradient - &lt;a href=&#34;https://www.behance.net/gallery/86128681/Free-Unicorn-Vector-Gradients&#34;&gt;https://www.behance.net/gallery/86128681/Free-Unicorn-Vector-Gradients&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Silhouette of Skyway - &lt;a href=&#34;https://unsplash.com/photos/silhouette-of-skyway-UUJzCuHUfYI&#34;&gt;https://unsplash.com/photos/silhouette-of-skyway-UUJzCuHUfYI&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>