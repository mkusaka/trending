<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-01T01:49:43Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aws/amazon-q-developer-cli</title>
    <updated>2025-05-01T01:49:43Z</updated>
    <id>tag:github.com,2025-05-01:/aws/amazon-q-developer-cli</id>
    <link href="https://github.com/aws/amazon-q-developer-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ú® Agentic AI experience in your terminal for building applications using natural language&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/.github/media/amazon-q-logo.avif&#34; alt=&#34;Amazon Q&#34; width=&#34;200px&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; Amazon Q CLI brings IDE-style autocomplete and agentic capabilities to your terminal. &lt;/h4&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/aws/amazon-q-developer-cli/graphs/commit-activity&#34;&gt;&lt;img alt=&#34;GitHub commit activity&#34; src=&#34;https://img.shields.io/github/commit-activity/m/aws/amazon-q-developer-cli&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/aws/amazon-q-developer-cli/issues&#34;&gt;&lt;img alt=&#34;GitHub open issues&#34; src=&#34;https://img.shields.io/github/issues/aws/amazon-q-developer-cli&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/aws/amazon-q-developer-cli/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/aws/amazon-q-developer-cli/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;Rust Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aws/amazon-q-developer-cli/actions/workflows/typos.yml&#34;&gt;&lt;img src=&#34;https://github.com/aws/amazon-q-developer-cli/actions/workflows/typos.yml/badge.svg?sanitize=true&#34; alt=&#34;Typos Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aws/amazon-q-developer-cli/actions/workflows/typescript.yml&#34;&gt;&lt;img src=&#34;https://github.com/aws/amazon-q-developer-cli/actions/workflows/typescript.yml/badge.svg?sanitize=true&#34; alt=&#34;Typescript Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/.github/media/amazon-q-cli-features.jpeg&#34; alt=&#34;Amazon Q CLI Features&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üòç Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîÆ &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-autocomplete.html&#34;&gt;&lt;strong&gt;Auto Completion&lt;/strong&gt;&lt;/a&gt;: IDE-style completions to hundreds of popular CLIs like &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;, and &lt;code&gt;aws&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üí¨ &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-chat.html&#34;&gt;&lt;strong&gt;Natural Language Chat&lt;/strong&gt;&lt;/a&gt;: Interact with your terminal using natural language to ask questions, debug issues, or explore the codebase.&lt;/li&gt; &#xA; &lt;li&gt;üß† &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-chat.html#command-line-chat-context-integration&#34;&gt;&lt;strong&gt;Contextual Awareness&lt;/strong&gt;&lt;/a&gt;: Integrates context from your local development environment, so answers are tailored to your specific code and setup.&lt;/li&gt; &#xA; &lt;li&gt;ü§ñ &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-autocomplete.html&#34;&gt;&lt;strong&gt;Agentic Execution&lt;/strong&gt;&lt;/a&gt;: Let Amazon Q take action: generate code, edit files, automate Git workflows, resolve merge conflicts, and more ‚Äî with your permission.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;DMG&lt;/strong&gt;: &lt;a href=&#34;https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg&#34;&gt;Download now&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Homebrew&lt;/strong&gt;: &lt;code&gt;brew install amazon-q&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-ubuntu&#34;&gt;Ubuntu/Debian&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-appimage&#34;&gt;AppImage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-alternative-linux&#34;&gt;Alternative Linux builds&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow the discussions for &lt;a href=&#34;https://github.com/aws/q-command-line-discussions/discussions/15&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Or &lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-windows&#34;&gt;use it on Windows with WSL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Remote machines&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-autocomplete-ssh.html&#34;&gt;Autocomplete in SSH&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Start Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Xcode 13 or later&lt;/li&gt; &#xA;   &lt;li&gt;Brew&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1. Clone repo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/aws/amazon-q-for-command-line.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Setup&lt;/h3&gt; &#xA;&lt;p&gt;Hassle-free setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you&#39;d like to DIY:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manual Setup&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;h3&gt;1. Install platform dependencies&lt;/h3&gt; &#xA;  &lt;p&gt;For Debian/Ubuntu:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt update&#xA;sudo apt install build-essential pkg-config jq dpkg curl wget cmake clang libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libdbus-1-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev valac libibus-1.0-dev libglib2.0-dev sqlite3 libxdo-dev protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;2. Install Rust toolchain using &lt;a href=&#34;https://rustup.rs&#34;&gt;Rustup&lt;/a&gt;:&lt;/h3&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;rustup default stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For pre-commit hooks, the following commands are required:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rustup toolchain install nightly&#xA;cargo install typos-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For MacOS development make sure the right targets are installed:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rustup target add x86_64-apple-darwin&#xA;rustup target add aarch64-apple-darwin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;3. Setup Python and Node using &lt;a href=&#34;https://mise.jdx.dev&#34;&gt;&lt;code&gt;mise&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;  &lt;p&gt;Add mise integrations to your shell:&lt;/p&gt; &#xA;  &lt;p&gt;For zsh:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#39;eval &#34;$(mise activate zsh)&#34;&#39; &amp;gt;&amp;gt; &#34;${ZDOTDIR-$HOME}/.zshrc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For bash:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#39;eval &#34;$(mise activate bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For fish:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#39;mise activate fish | source&#39; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Install the Python and Node toolchains using:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mise trust&#xA;mise install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;4. Setup precommit hooks&lt;/h3&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;pnpm&lt;/code&gt; in root directory to add pre-commit hooks:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm install --ignore-scripts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;3. Start Local Development&lt;/h3&gt; &#xA;&lt;p&gt;To compile and view changes made to &lt;code&gt;q chat&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo run --bin q_cli -- chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are working on other q commands, just replace &lt;code&gt;chat&lt;/code&gt; with the command name&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To run tests for the Q CLI crate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo test -p q_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To format Rust files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo +nightly fmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run clippy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cargo clippy --locked --workspace --color always -- -D warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üí° Quick Tip for Onboarding&lt;/h3&gt; &#xA;&lt;p&gt;Use Q CLI to help you onboard Q CLI!&lt;/p&gt; &#xA;&lt;p&gt;Start a &lt;code&gt;q chat&lt;/code&gt; session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;q chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once inside &lt;code&gt;q chat&lt;/code&gt;, you can supply project context by adding the &lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/codebase-summary.md&#34;&gt;&lt;code&gt;codebase-summary.md&lt;/code&gt;&lt;/a&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/context add codebase-summary.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables Q to answer onboarding questions like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;‚ÄúWhat does this crate do?‚Äù&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;‚ÄúWhere is X implemented?‚Äù&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;‚ÄúHow do these components interact?‚Äù&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Great for speeding up your ramp-up and navigating the repo more effectively.&lt;/p&gt; &#xA;&lt;h2&gt;üèóÔ∏è Project Layout&lt;/h2&gt; &#xA;&lt;p&gt;Several projects live here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/packages/autocomplete/&#34;&gt;&lt;code&gt;autocomplete&lt;/code&gt;&lt;/a&gt; - The autocomplete react app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/packages/dashboard-app/&#34;&gt;&lt;code&gt;dashboard&lt;/code&gt;&lt;/a&gt; - The dashboard react app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/figterm/&#34;&gt;&lt;code&gt;figterm&lt;/code&gt;&lt;/a&gt; - figterm, our headless terminal/pseudoterminal that intercepts the user‚Äôs terminal edit buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/q_cli/&#34;&gt;&lt;code&gt;q_cli&lt;/code&gt;&lt;/a&gt; - the &lt;code&gt;q&lt;/code&gt; CLI, allows users to interface with Amazon Q Developer from the command line&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/fig_desktop/&#34;&gt;&lt;code&gt;fig_desktop&lt;/code&gt;&lt;/a&gt; - the Rust desktop app, uses &lt;a href=&#34;https://docs.rs/tao/latest/tao/&#34;&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://docs.rs/wry/latest/wry/&#34;&gt;&lt;code&gt;wry&lt;/code&gt;&lt;/a&gt; for windowing/webviews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/fig_input_method/&#34;&gt;&lt;code&gt;fig_input_method&lt;/code&gt;&lt;/a&gt; - The input method used to get cursor position on macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/extensions/vscode/&#34;&gt;&lt;code&gt;vscode&lt;/code&gt;&lt;/a&gt; - Contains the VSCode plugin needed for the Amazon Q Developer for command line to work in VSCode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/extensions/jetbrains/&#34;&gt;&lt;code&gt;jetbrains&lt;/code&gt;&lt;/a&gt; - Contains the VSCode plugin needed for the Amazon Q Developer for command line to work in Jetbrains IDEs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other folder to be aware of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/build-scripts/&#34;&gt;&lt;code&gt;build-scripts/&lt;/code&gt;&lt;/a&gt; - Contains all python scripts to build, sign, and test the project on macOS and Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/&#34;&gt;&lt;code&gt;crates/&lt;/code&gt;&lt;/a&gt; - Contains all internal rust crates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/packages/&#34;&gt;&lt;code&gt;packages/&lt;/code&gt;&lt;/a&gt; - Contains all internal npm packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/proto/&#34;&gt;&lt;code&gt;proto/&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protocol buffer&lt;/a&gt; message specification for inter-process communication&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/tests/&#34;&gt;&lt;code&gt;tests/&lt;/code&gt;&lt;/a&gt; - Contain integration tests for the projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below is a high level architecture of how the different components of the app and their IPC:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/docs/assets/architecture.svg?sanitize=true&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üõ°Ô∏è Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/CONTRIBUTING.md#security-issue-notifications&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;üìú Licensing&lt;/h2&gt; &#xA;&lt;p&gt;This repo is dual licensed under MIT and Apache 2.0 licenses.&lt;/p&gt; &#xA;&lt;p&gt;‚ÄúAmazon Web Services‚Äù and all related marks, including logos, graphic designs, and service names, are trademarks or trade dress of AWS in the U.S. and other countries. AWS‚Äôs trademarks and trade dress may not be used in connection with any product or service that is not AWS‚Äôs, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits AWS.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linera-io/linera-protocol</title>
    <updated>2025-05-01T01:49:43Z</updated>
    <id>tag:github.com,2025-05-01:/linera-io/linera-protocol</id>
    <link href="https://github.com/linera-io/linera-protocol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main repository for the Linera protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/assets/1105398/fe08c941-93af-4114-bb83-bcc0eaec95f9&#34; width=&#34;250&#34; height=&#34;90&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/docker-compose.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/docker-compose.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://x.com/linera_io&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/linera_io&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/linera&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/984941796272521226&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![Build Status for Kubernetes](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml/badge.svg)](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linera.io&#34;&gt;Linera&lt;/a&gt; is a decentralized blockchain infrastructure designed for highly scalable, low-latency Web3 applications.&lt;/p&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;https://linera.dev&#34;&gt;developer page&lt;/a&gt; and read our &lt;a href=&#34;https://linera.io/whitepaper&#34;&gt;whitepaper&lt;/a&gt; to learn more about the Linera protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;The main crates and directories of this repository can be summarized as follows: (listed from low to high levels in the dependency graph)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_base/index.html&#34;&gt;&lt;code&gt;linera-base&lt;/code&gt;&lt;/a&gt; Base definitions, including cryptography.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_version/index.html&#34;&gt;&lt;code&gt;linera-version&lt;/code&gt;&lt;/a&gt; A library to manage version info in binaries and services.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_views/index.html&#34;&gt;&lt;code&gt;linera-views&lt;/code&gt;&lt;/a&gt; A library mapping complex data structures onto a key-value store. The corresponding procedural macros are implemented in &lt;code&gt;linera-views-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_execution/index.html&#34;&gt;&lt;code&gt;linera-execution&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logic for runtime and execution of Linera applications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_chain/index.html&#34;&gt;&lt;code&gt;linera-chain&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logic for chains of blocks, certificates, and cross-chain messaging.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_storage/index.html&#34;&gt;&lt;code&gt;linera-storage&lt;/code&gt;&lt;/a&gt; Defines the storage abstractions for the protocol on top of &lt;code&gt;linera-chain&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_core/index.html&#34;&gt;&lt;code&gt;linera-core&lt;/code&gt;&lt;/a&gt; The core Linera protocol, including client and server logic, node synchronization, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_rpc/index.html&#34;&gt;&lt;code&gt;linera-rpc&lt;/code&gt;&lt;/a&gt; Defines the data-type for RPC messages (currently all client ‚Üî proxy ‚Üî chain ‚Üî chain interactions), and track the corresponding data schemas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_client/index.html&#34;&gt;&lt;code&gt;linera-client&lt;/code&gt;&lt;/a&gt; Library for writing Linera clients. Used for the command-line client and the node service in &lt;code&gt;linera-service&lt;/code&gt;, as well as the Web client in &lt;a href=&#34;https://github.com/linera-io/linera-web/&#34;&gt;&lt;code&gt;linera-web&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_service/index.html&#34;&gt;&lt;code&gt;linera-service&lt;/code&gt;&lt;/a&gt; Executable for clients (aka CLI wallets), proxy (aka validator frontend) and servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_sdk/index.html&#34;&gt;&lt;code&gt;linera-sdk&lt;/code&gt;&lt;/a&gt; The library to develop Linera applications written in Rust for the Wasm virtual machine. The corresponding procedural macros are implemented in &lt;code&gt;linera-sdk-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; Examples of Linera applications written in Rust.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart with the Linera CLI tool&lt;/h2&gt; &#xA;&lt;p&gt;The following commands set up a local test network and run some transfers between the microchains owned by a single wallet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Make sure to compile the Linera binaries and add them in the $PATH.&#xA;# cargo build -p linera-storage-service -p linera-service --bins&#xA;export PATH=&#34;$PWD/target/debug:$PATH&#34;&#xA;&#xA;# Import the optional helper function `linera_spawn`.&#xA;source /dev/stdin &amp;lt;&amp;lt;&amp;lt;&#34;$(linera net helper 2&amp;gt;/dev/null)&#34;&#xA;&#xA;# Run a local test network with the default parameters and a number of microchains&#xA;# owned by the default wallet. This also defines `LINERA_TMP_DIR`.&#xA;linera_spawn \&#xA;linera net up --with-faucet --faucet-port 8080&#xA;&#xA;# Remember the URL of the faucet.&#xA;FAUCET_URL=http://localhost:8080&#xA;&#xA;# If you&#39;re using a testnet, start here and run this instead:&#xA;#   LINERA_TMP_DIR=$(mktemp -d)&#xA;#   FAUCET_URL=https://faucet.testnet-XXX.linera.net  # for some value XXX&#xA;&#xA;# Set the path of the future wallet.&#xA;export LINERA_WALLET=&#34;$LINERA_TMP_DIR/wallet.json&#34;&#xA;export LINERA_STORAGE=&#34;rocksdb:$LINERA_TMP_DIR/client.db&#34;&#xA;&#xA;# Initialize a new user wallet.&#xA;linera wallet init --faucet $FAUCET_URL&#xA;&#xA;# Request chains.&#xA;INFO1=($(linera wallet request-chain --faucet $FAUCET_URL))&#xA;INFO2=($(linera wallet request-chain --faucet $FAUCET_URL))&#xA;CHAIN1=&#34;${INFO1[0]}&#34;&#xA;ACCOUNT1=&#34;${INFO1[2]}&#34;&#xA;CHAIN2=&#34;${INFO2[0]}&#34;&#xA;ACCOUNT2=&#34;${INFO2[2]}&#34;&#xA;&#xA;# Show the different chains tracked by the wallet.&#xA;linera wallet show&#xA;&#xA;# Query the chain balance of some of the chains.&#xA;linera query-balance &#34;$CHAIN1&#34;&#xA;linera query-balance &#34;$CHAIN2&#34;&#xA;&#xA;# Transfer 10 units then 5 back.&#xA;linera transfer 10 --from &#34;$CHAIN1&#34; --to &#34;$CHAIN2&#34;&#xA;linera transfer 5 --from &#34;$CHAIN2&#34; --to &#34;$CHAIN1&#34;&#xA;&#xA;# Query balances again.&#xA;linera query-balance &#34;$CHAIN1&#34;&#xA;linera query-balance &#34;$CHAIN2&#34;&#xA;&#xA;# Now let&#39;s fund the user balances.&#xA;linera transfer 5 --from &#34;$CHAIN1&#34; --to &#34;$CHAIN1:$ACCOUNT1&#34;&#xA;linera transfer 2 --from &#34;$CHAIN1:$ACCOUNT1&#34; --to &#34;$CHAIN2:$ACCOUNT2&#34;&#xA;&#xA;# Query user balances again.&#xA;linera query-balance &#34;$CHAIN1:$ACCOUNT1&#34;&#xA;linera query-balance &#34;$CHAIN2:$ACCOUNT2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complex examples may be found in our &lt;a href=&#34;https://linera.dev&#34;&gt;developer manual&lt;/a&gt; as well as the &lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples&#34;&gt;example applications&lt;/a&gt; in this repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ankitects/anki</title>
    <updated>2025-05-01T01:49:43Z</updated>
    <id>tag:github.com,2025-05-01:/ankitects/anki</id>
    <link href="https://github.com/ankitects/anki" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Anki&#39;s shared backend and web components, and the Qt frontend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anki&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/ankitects/anki-ci&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/c9edf020a4aec976f9835e54751cc5409d843adbb66d043bd3.svg?branch=main&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the source code for the computer version of &lt;a href=&#34;https://apps.ankiweb.net&#34;&gt;Anki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;Anki is a spaced repetition program. Please see the &lt;a href=&#34;https://apps.ankiweb.net&#34;&gt;website&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h3&gt;Anki Betas&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to try development builds of Anki but don&#39;t feel comfortable building the code, please see &lt;a href=&#34;https://betas.ankiweb.net/&#34;&gt;Anki betas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Developing&lt;/h3&gt; &#xA;&lt;p&gt;For more information on building and developing, please see &lt;a href=&#34;https://raw.githubusercontent.com/ankitects/anki/main/docs/development.md&#34;&gt;Development&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Want to contribute to Anki? Check out the &lt;a href=&#34;https://raw.githubusercontent.com/ankitects/anki/main/docs/contributing.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Anki Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitects/anki/main/CONTRIBUTORS&#34;&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Anki&#39;s license: &lt;a href=&#34;https://raw.githubusercontent.com/ankitects/anki/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>