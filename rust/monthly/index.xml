<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T02:21:56Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ellie/atuin</title>
    <updated>2023-06-01T02:21:56Z</updated>
    <id>tag:github.com,2023-06-01:/ellie/atuin</id>
    <link href="https://github.com/ellie/atuin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üê¢ Magical shell history&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;250&#34; src=&#34;https://user-images.githubusercontent.com/53315310/171035743-53991112-9477-4f3d-8811-5deee40c7879.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;magical shell history&lt;/em&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ellie/atuin/actions?query=workflow%3ARust&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ellie/atuin/rust.yml?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/atuin&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/atuin.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/atuin&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/d/atuin.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ellie/atuin/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/l/atuin.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Fq8bJSKPHh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/954121165239115808&#34;&gt;&lt;/a&gt; &lt;a rel=&#34;me&#34; href=&#34;https://hachyderm.io/@atuin&#34;&gt;&lt;img src=&#34;https://img.shields.io/mastodon/follow/109944632283122560?domain=https%3A%2F%2Fhachyderm.io&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/atuinsh&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/atuinsh?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/docs/zh-CN/README.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and &lt;em&gt;fully encrypted&lt;/em&gt; synchronisation of your history between machines, via an Atuin server.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ellie/atuin/main/demo.gif&#34; alt=&#34;animated&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;exit code, duration, time and command shown&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p&gt;As well as the search UI, it can do things like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# search for all successful `make` commands, recorded after 3pm yesterday&#xA;atuin search --exit 0 --after &#34;yesterday 3pm&#34; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may use either the server I host, or host your own! Or just don&#39;t use sync at all. As all history sync is encrypted, I couldn&#39;t access your data even if I wanted to. And I &lt;strong&gt;really&lt;/strong&gt; don&#39;t want to.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rebind &lt;code&gt;ctrl-r&lt;/code&gt; and &lt;code&gt;up&lt;/code&gt; (configurable) to a full screen history search UI&lt;/li&gt; &#xA; &lt;li&gt;store shell history in a sqlite database&lt;/li&gt; &#xA; &lt;li&gt;backup and sync &lt;strong&gt;encrypted&lt;/strong&gt; shell history&lt;/li&gt; &#xA; &lt;li&gt;the same history across terminals, across sessions, and across machines&lt;/li&gt; &#xA; &lt;li&gt;log exit code, cwd, hostname, session, command duration, etc&lt;/li&gt; &#xA; &lt;li&gt;calculate statistics such as &#34;most used command&#34;&lt;/li&gt; &#xA; &lt;li&gt;old history file is not replaced&lt;/li&gt; &#xA; &lt;li&gt;quick-jump to previous items with &lt;kbd&gt;Alt-&amp;lt;num&amp;gt;&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;switch filter modes via ctrl-r; search history just from the current session, directory, or globally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/import&#34;&gt;Import&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/config&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/search&#34;&gt;Searching history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/sync&#34;&gt;Cloud history sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/stats&#34;&gt;History stats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/self-hosting&#34;&gt;Self host Atuin server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/config/key-binding&#34;&gt;Key binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atuin.sh/docs/commands/shell-completions&#34;&gt;Shell completions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Shells&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zsh&lt;/li&gt; &#xA; &lt;li&gt;bash&lt;/li&gt; &#xA; &lt;li&gt;fish&lt;/li&gt; &#xA; &lt;li&gt;nushell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Atuin has a community Discord, available &lt;a href=&#34;https://discord.gg/Fq8bJSKPHh&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;h2&gt;With the default sync server&lt;/h2&gt; &#xA;&lt;p&gt;This will sign you up for the default sync server, hosted by me. Everything is end-to-end encrypted, so your secrets are safe!&lt;/p&gt; &#xA;&lt;p&gt;Read more below for offline-only usage, or for hosting your own server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl https://raw.githubusercontent.com/ellie/atuin/main/install.sh)&#xA;&#xA;atuin register -u &amp;lt;USERNAME&amp;gt; -e &amp;lt;EMAIL&amp;gt;&#xA;atuin import auto&#xA;atuin sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then restart your shell!&lt;/p&gt; &#xA;&lt;h3&gt;Opt-in to activity graph&lt;/h3&gt; &#xA;&lt;p&gt;Alongside the hosted Atuin server, there is also a service which generates activity graphs for your shell history! These are inspired by the GitHub graph.&lt;/p&gt; &#xA;&lt;p&gt;For example, here is mine:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ellie/atuin/main/docs/static/img/activity-graph-example.png&#34; alt=&#34;Activity Graph Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you wish to get your own, after signing up for the sync server, run this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://api.atuin.sh/enable -d $(cat ~/.local/share/atuin/session)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response includes the URL to your graph. Feel free to share and/or embed this URL, the token is &lt;em&gt;not&lt;/em&gt; a secret, and simply prevents user enumeration.&lt;/p&gt; &#xA;&lt;h2&gt;Offline only (no sync)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl https://raw.githubusercontent.com/ellie/atuin/main/install.sh)&#xA;            &#xA;atuin import auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Atuin will check for updates. You can &lt;a href=&#34;https://atuin.sh/docs/config/#update_check&#34;&gt;disable update checks by modifying&lt;/a&gt; &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then restart your shell!&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Script (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;The install script will help you through the setup, ensuring your shell is properly configured. It will also use one of the below methods, preferring the system package manager where possible (pacman, homebrew, etc etc).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# do not run this as root, root will be asked for if required&#xA;bash &amp;lt;(curl https://raw.githubusercontent.com/ellie/atuin/main/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;With cargo&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s best to use &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; to get setup with a Rust toolchain, then you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;Atuin is also available in &lt;a href=&#34;https://ports.macports.org/port/atuin/&#34;&gt;MacPorts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;This repository is a flake, and can be installed using &lt;code&gt;nix profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix profile install &#34;github:ellie/atuin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Atuin is also available in &lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;nixpkgs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-env -f &#39;&amp;lt;nixpkgs&amp;gt;&#39; -iA atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pacman&lt;/h3&gt; &#xA;&lt;p&gt;Atuin is available in the Arch Linux &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/atuin/&#34;&gt;[extra] repository&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Termux&lt;/h3&gt; &#xA;&lt;p&gt;Atuin is available in the Termux package repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ellie/atuin.git&#xA;cd atuin/atuin&#xA;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow &lt;a href=&#34;https://raw.githubusercontent.com/ellie/atuin/main/#shell-plugin&#34;&gt;the shell setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Shell plugin&lt;/h2&gt; &#xA;&lt;p&gt;Once the binary is installed, the shell plugin requires installing. If you use the install script, this should all be done for you! After installing, remember to restart your shell.&lt;/p&gt; &#xA;&lt;h3&gt;zsh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;eval &#34;$(atuin init zsh)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Zinit&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zinit load ellie/atuin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Antigen&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;antigen bundle ellie/atuin@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;bash&lt;/h3&gt; &#xA;&lt;p&gt;We need to setup some hooks, so first install bash-preexec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh&#xA;echo &#39;[[ -f ~/.bash-preexec.sh ]] &amp;amp;&amp;amp; source ~/.bash-preexec.sh&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then setup Atuin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;eval &#34;$(atuin init bash)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PLEASE NOTE&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;bash-preexec currently has an issue where it will stop honoring &lt;code&gt;ignorespace&lt;/code&gt;. While Atuin will ignore commands prefixed with whitespace, they may still end up in your bash history. Please check your configuration! All other shells do not have this issue.&lt;/p&gt; &#xA;&lt;h3&gt;fish&lt;/h3&gt; &#xA;&lt;p&gt;Add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;atuin init fish | source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your &lt;code&gt;is-interactive&lt;/code&gt; block in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;h3&gt;Fig&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;code&gt;atuin&lt;/code&gt; shell plugin in zsh, bash, or fish with &lt;a href=&#34;https://fig.io&#34;&gt;Fig&lt;/a&gt; in one click.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fig.io/plugins/shell/atuin&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://fig.io/badges/install-with-fig.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Nushell&lt;/h3&gt; &#xA;&lt;p&gt;Run in &lt;em&gt;Nushell&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir ~/.local/share/atuin/&#xA;atuin init nu | save ~/.local/share/atuin/init.nu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;config.nu&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ~/.local/share/atuin/init.nu&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>veloren/veloren</title>
    <updated>2023-06-01T02:21:56Z</updated>
    <id>tag:github.com,2023-06-01:/veloren/veloren</id>
    <link href="https://github.com/veloren/veloren" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open world, open source voxel RPG inspired by Dwarf Fortress and Cube World. This repository is a mirror. Please submit all PRs and issues on our GitLab page.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Veloren logo on a screenshot&#34; src=&#34;https://cdn.discordapp.com/attachments/541307708146581519/712295605170602075/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.com/veloren/veloren/commits/master&#34;&gt;&lt;img src=&#34;https://gitlab.com/veloren/veloren/badges/master/pipeline.svg?sanitize=true&#34; alt=&#34;pipeline status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/veloren/veloren/commits/master&#34;&gt;&lt;img src=&#34;https://gitlab.com/veloren/veloren/badges/master/coverage.svg?sanitize=true&#34; alt=&#34;coverage report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/veloren/veloren/blob/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/veloren/veloren.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/veloren-community-449602562165833758&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/449602562165833758.svg?sanitize=true&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tokei.rs/b1/gitlab/veloren/veloren&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/gitlab/veloren/veloren&#34; alt=&#34;lines of code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/veloren/veloren/-/graphs/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/veloren/veloren&#34; alt=&#34;contributor count&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Welcome to Veloren!&lt;/h2&gt; &#xA;&lt;p&gt;Veloren is a multiplayer voxel RPG written in Rust. It is inspired by games such as Cube World, The Legend of Zelda: Breath of the Wild, Dwarf Fortress and Minecraft. The game is in active development and enjoys a flourishing player community.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Currently, most communication among contributors takes place on our &lt;a href=&#34;https://discord.gg/veloren-community-449602562165833758&#34;&gt;official Discord server&lt;/a&gt;. You can join it to keep up with the game development, talk to us or even contribute something yourself. Anyone who shows genuine effort to help is welcome in our team. You do not need to know how to code to contribute to the game!&lt;/p&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://veloren.net/account/&#34;&gt;Sign up&lt;/a&gt; - Here you can create an official account for Veloren. Most Veloren servers require you to register with the official authentication server to play.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here for more details about authentication&lt;/summary&gt; The official authentication server uses TLS encryption extensively. It also employs salted hashing to ensure your login credentials are stored securely. Additionally, the server neither tracks any metrics nor uses data for any purpose other than providing the authentication service. &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.veloren.net&#34;&gt;The wiki&lt;/a&gt; - The official wiki which provides various information about the game.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://book.veloren.net&#34;&gt;The book&lt;/a&gt; - The book is a collection of supplementary information about the game. It includes instructions on how to compile the game.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.com/veloren/veloren/-/milestones&#34;&gt;Future plans&lt;/a&gt; - This is the development roadmap and what issues the community is currently working on.&lt;/p&gt; &#xA;&lt;h3&gt;Official social media and websites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://veloren.net&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/veloren-community-449602562165833758&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#veloren-space:fachschaften.org&#34;&gt;Matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/velorenproject&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://floss.social/@veloren&#34;&gt;Mastodon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Veloren&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/@Veloren&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/veloren_dev&#34;&gt;Twitch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Veloren&lt;/h2&gt; &#xA;&lt;p&gt;We provide builds for Windows, macOS and Linux. The game can be downloaded on the official website:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://veloren.net/download/&#34;&gt;https://veloren.net/download/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to rapid game development, stable versions become outdated fast and might be &lt;strong&gt;incompatible with the public server&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://book.veloren.net/players/airshipper.html&#34;&gt;Airshipper&lt;/a&gt;, our official launcher, to keep your game up-to-date easily.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to compile the game yourself, follow the instructions in our &lt;a href=&#34;https://book.veloren.net/contributors/introduction.html&#34;&gt;book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;F.A.Q.&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Q:&lt;/strong&gt; How is this game licensed?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; &lt;strong&gt;It is free to play, modify and distribute. Forever.&lt;/strong&gt; Since it is a community project, we decided to license it under the &lt;strong&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;GNU GPL 3.0&lt;/a&gt;&lt;/strong&gt; license which means it will always stay free and open source.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Q:&lt;/strong&gt; What platforms are supported?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Veloren can run on Windows, macOS and Linux, on all CPU architectures. However, the x86_64 architecture is the main focus in development. Official builds for the ARM64 architecture are also provided for macOS and Linux. It is likely possible to compile the game on other platforms as well.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Q:&lt;/strong&gt; Do you accept donations?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; You can support the project on our &lt;a href=&#34;https://opencollective.com/veloren&#34;&gt;Open Collective&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to everyone who has contributed to Veloren&#39;s source code, provided ideas for the game, crafted game art, composed music, hunted bugs, created tools and, overall, supported the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>embassy-rs/embassy</title>
    <updated>2023-06-01T02:21:56Z</updated>
    <id>tag:github.com,2023-06-01:/embassy-rs/embassy</id>
    <link href="https://github.com/embassy-rs/embassy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern embedded framework, using Rust and async.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Embassy&lt;/h1&gt; &#xA;&lt;p&gt;Embassy is the next-generation framework for embedded applications. Write safe, correct and energy-efficient embedded code faster, using the Rust programming language, its async facilities, and the Embassy libraries.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://embassy.dev/dev/index.html&#34;&gt;Documentation&lt;/a&gt; - &lt;a href=&#34;https://docs.embassy.dev/&#34;&gt;API reference&lt;/a&gt; - &lt;a href=&#34;https://embassy.dev/&#34;&gt;Website&lt;/a&gt; - &lt;a href=&#34;https://matrix.to/#/#embassy-rs:matrix.org&#34;&gt;Chat&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Rust + async ‚ù§Ô∏è embedded&lt;/h2&gt; &#xA;&lt;p&gt;The Rust programming language is blazingly fast and memory-efficient, with no runtime, garbage collector or OS. It catches a wide variety of bugs at compile time, thanks to its full memory- and thread-safety, and expressive type system.&lt;/p&gt; &#xA;&lt;p&gt;Rust&#39;s &lt;a href=&#34;https://rust-lang.github.io/async-book/&#34;&gt;async/await&lt;/a&gt; allows for unprecedently easy and efficient multitasking in embedded systems. Tasks get transformed at compile time into state machines that get run cooperatively. It requires no dynamic memory allocation, and runs on a single stack, so no per-task stack size tuning is required. It obsoletes the need for a traditional RTOS with kernel context switching, and is &lt;a href=&#34;https://tweedegolf.nl/en/blog/65/async-rust-vs-rtos-showdown&#34;&gt;faster and smaller than one!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Batteries included&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hardware Abstraction Layers&lt;/strong&gt; - HALs implement safe, idiomatic Rust APIs to use the hardware capabilities, so raw register manipulation is not needed. The Embassy project maintains HALs for select hardware, but you can still use HALs from other projects with Embassy.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.embassy.dev/embassy-stm32/&#34;&gt;embassy-stm32&lt;/a&gt;, for all STM32 microcontroller families.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.embassy.dev/embassy-nrf/&#34;&gt;embassy-nrf&lt;/a&gt;, for the Nordic Semiconductor nRF52, nRF53, nRF91 series.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.embassy.dev/embassy-rp/&#34;&gt;embassy-rp&lt;/a&gt;, for the Raspberry Pi RP2040 microcontroller.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/esp-rs&#34;&gt;esp-rs&lt;/a&gt;, for the Espressif Systems ESP32 series of chips. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Embassy HAL support for Espressif chips is being developed in the &lt;a href=&#34;https://github.com/esp-rs/esp-hal&#34;&gt;esp-rs/esp-hal&lt;/a&gt; repository.&lt;/li&gt; &#xA;     &lt;li&gt;Async WiFi, Bluetooth and ESP-NOW is being developed in the &lt;a href=&#34;https://github.com/esp-rs/esp-wifi&#34;&gt;esp-rs/esp-wifi&lt;/a&gt; repository.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Time that Just Works&lt;/strong&gt; - No more messing with hardware timers. &lt;a href=&#34;https://docs.embassy.dev/embassy-time&#34;&gt;embassy_time&lt;/a&gt; provides Instant, Duration and Timer types that are globally available and never overflow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Real-time ready&lt;/strong&gt; - Tasks on the same async executor run cooperatively, but you can create multiple executors with different priorities, so that higher priority tasks preempt lower priority ones. See the &lt;a href=&#34;https://github.com/embassy-rs/embassy/raw/master/examples/nrf52840/src/bin/multiprio.rs&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low-power ready&lt;/strong&gt; - Easily build devices with years of battery life. The async executor automatically puts the core to sleep when there&#39;s no work to do. Tasks are woken by interrupts, there is no busy-loop polling while waiting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt; - The &lt;a href=&#34;https://docs.embassy.dev/embassy-net/&#34;&gt;embassy-net&lt;/a&gt; network stack implements extensive networking functionality, including Ethernet, IP, TCP, UDP, ICMP and DHCP. Async drastically simplifies managing timeouts and serving multiple connections concurrently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt; - The &lt;a href=&#34;https://github.com/embassy-rs/nrf-softdevice&#34;&gt;nrf-softdevice&lt;/a&gt; crate provides Bluetooth Low Energy 4.x and 5.x support for nRF52 microcontrollers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LoRa&lt;/strong&gt; - &lt;a href=&#34;https://docs.embassy.dev/embassy-lora/&#34;&gt;embassy-lora&lt;/a&gt; supports LoRa networking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;USB&lt;/strong&gt; - &lt;a href=&#34;https://docs.embassy.dev/embassy-usb/&#34;&gt;embassy-usb&lt;/a&gt; implements a device-side USB stack. Implementations for common classes such as USB serial (CDC ACM) and USB HID are available, and a rich builder API allows building your own.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bootloader and DFU&lt;/strong&gt; - &lt;a href=&#34;https://github.com/embassy-rs/embassy/tree/master/embassy-boot&#34;&gt;embassy-boot&lt;/a&gt; is a lightweight bootloader supporting firmware application upgrades in a power-fail-safe way, with trial boots and rollbacks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sneak peek&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust,ignore&#34;&gt;use defmt::info;&#xA;use embassy_executor::Spawner;&#xA;use embassy_time::{Duration, Timer};&#xA;use embassy_nrf::gpio::{AnyPin, Input, Level, Output, OutputDrive, Pin, Pull};&#xA;use embassy_nrf::Peripherals;&#xA;&#xA;// Declare async tasks&#xA;#[embassy_executor::task]&#xA;async fn blink(pin: AnyPin) {&#xA;    let mut led = Output::new(pin, Level::Low, OutputDrive::Standard);&#xA;&#xA;    loop {&#xA;        // Timekeeping is globally available, no need to mess with hardware timers.&#xA;        led.set_high();&#xA;        Timer::after(Duration::from_millis(150)).await;&#xA;        led.set_low();&#xA;        Timer::after(Duration::from_millis(150)).await;&#xA;    }&#xA;}&#xA;&#xA;// Main is itself an async task as well.&#xA;#[embassy_executor::main]&#xA;async fn main(spawner: Spawner) {&#xA;    let p = embassy_nrf::init(Default::default());&#xA;&#xA;    // Spawned tasks run in the background, concurrently.&#xA;    spawner.spawn(blink(p.P0_13.degrade())).unwrap();&#xA;&#xA;    let mut button = Input::new(p.P0_11, Pull::Up);&#xA;    loop {&#xA;        // Asynchronously wait for GPIO events, allowing other tasks&#xA;        // to run, or the core to sleep.&#xA;        button.wait_for_low().await;&#xA;        info!(&#34;Button pressed!&#34;);&#xA;        button.wait_for_high().await;&#xA;        info!(&#34;Button released!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Examples are found in the &lt;code&gt;examples/&lt;/code&gt; folder seperated by the chip manufacturer they are designed to run on. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/nrf52840&lt;/code&gt; run on the &lt;code&gt;nrf52840-dk&lt;/code&gt; board (PCA10056) but should be easily adaptable to other nRF52 chips and boards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/nrf5340&lt;/code&gt; run on the &lt;code&gt;nrf5340-dk&lt;/code&gt; board (PCA10095).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/stm32xx&lt;/code&gt; for the various STM32 families.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/rp&lt;/code&gt; are for the RP2040 chip.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/std&lt;/code&gt; are designed to run locally on your PC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;probe-rs-cli&lt;/code&gt; with defmt support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install probe-rs-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change directory to the sample&#39;s base directory. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples/nrf52840&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run --release --bin blinky&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing Embassy with Rust Analyzer based editors&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://rust-analyzer.github.io/&#34;&gt;Rust Analyzer&lt;/a&gt; is used by &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; and others. Given the multiple targets that Embassy serves, there is no Cargo workspace file. Instead, the Rust Analyzer must be told of the target project to work with. In the case of Visual Studio Code, please refer to the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file&#39;s &lt;code&gt;rust-analyzer.linkedProjects&lt;/code&gt;setting.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum supported Rust version (MSRV)&lt;/h2&gt; &#xA;&lt;p&gt;Embassy is guaranteed to compile on the latest stable Rust version at the time of release. It might compile with older versions but that may change in any new patch release.&lt;/p&gt; &#xA;&lt;p&gt;Several features require nightly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;#[embassy_executor::main]&lt;/code&gt; and &lt;code&gt;#[embassy_executor::task]&lt;/code&gt; attribute macros.&lt;/li&gt; &#xA; &lt;li&gt;Async traits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are enabled by activating the &lt;code&gt;nightly&lt;/code&gt; Cargo feature. If you do so, Embassy is guaranteed to compile on the exact nightly version specified in &lt;code&gt;rust-toolchain.toml&lt;/code&gt;. It might compile with older or newer nightly versions, but that may change in any new patch release.&lt;/p&gt; &#xA;&lt;h2&gt;Why the name?&lt;/h2&gt; &#xA;&lt;p&gt;EMBedded ASYnc! :)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt;</summary>
  </entry>
</feed>