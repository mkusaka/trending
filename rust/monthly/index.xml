<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Rust Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T02:28:01Z</updated>
  <subtitle>Monthly Trending of Rust in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>biomejs/biome</title>
    <updated>2023-12-01T02:28:01Z</updated>
    <id>tag:github.com,2023-12-01:/biomejs/biome</id>
    <link href="https://github.com/biomejs/biome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolchain for web projects, aimed to provide functionalities to maintain them. Biome offers formatter and linter, usable via CLI and LSP.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Biome - Toolchain of the web&#34; src=&#34;https://raw.githubusercontent.com/biomejs/resources/main/biome-logo-slogan.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/BypW39g6Yc&#34;&gt;&lt;img src=&#34;https://badgen.net/discord/online-members/BypW39g6Yc?icon=discord&amp;amp;label=discord&amp;amp;color=green&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/biomejs/biome/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/biomejs/biome/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI on main&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@biomejs/biome/v/latest&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/@biomejs/biome?icon=npm&amp;amp;color=green&amp;amp;label=%40biomejs%2Fbiome&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=biomejs.biome&#34;&gt;&lt;img src=&#34;https://badgen.net/vs-marketplace/v/biomejs.biome?label=vscode&amp;amp;icon=visualstudio&amp;amp;color=green&#34; alt=&#34;VSCode version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open-vsx.org/extension/biomejs/biome&#34;&gt;&lt;img src=&#34;https://badgen.net/open-vsx/version/biomejs/biome?label=open-vsx&amp;amp;color=green&#34; alt=&#34;Open VSX version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; is a performant toolchain for web projects, it aims to provide developer tools to maintain the health of said projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome is a &lt;a href=&#34;https://raw.githubusercontent.com/biomejs/biome/main/benchmark#formatting&#34;&gt;fast formatter&lt;/a&gt;&lt;/strong&gt; for &lt;em&gt;JavaScript&lt;/em&gt;, &lt;em&gt;TypeScript&lt;/em&gt;, &lt;em&gt;JSX&lt;/em&gt;, and &lt;em&gt;JSON&lt;/em&gt; that scores &lt;strong&gt;&lt;a href=&#34;https://console.algora.io/challenges/prettier&#34;&gt;96% compatibility with &lt;em&gt;Prettier&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome is a &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/benchmark#linting&#34;&gt;performant linter&lt;/a&gt;&lt;/strong&gt; for &lt;em&gt;JavaScript&lt;/em&gt;, &lt;em&gt;TypeScript&lt;/em&gt;, and &lt;em&gt;JSX&lt;/em&gt; that features &lt;strong&gt;&lt;a href=&#34;https://biomejs.dev/linter/rules/&#34;&gt;more than 170 rules&lt;/a&gt;&lt;/strong&gt; from ESLint, TypeSCript ESLint, and &lt;a href=&#34;https://github.com/biomejs/biome/discussions/3&#34;&gt;other sources&lt;/a&gt;. It &lt;strong&gt;outputs detailed and contextualized diagnostics&lt;/strong&gt; that help you to improve your code and become a better programmer!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; is designed from the start to be used &lt;a href=&#34;https://biomejs.dev/guides/integrate-in-editor/&#34;&gt;interactively within an editor&lt;/a&gt;. It can format and lint malformed code as you are writing it.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install --save-dev --save-exact @biomejs/biome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# format files&#xA;npx @biomejs/biome format --write ./src&#xA;&#xA;# lint files&#xA;npx @biomejs/biome lint ./src&#xA;&#xA;# run format, lint, etc. and apply the safe suggestions&#xA;npx @biomejs/biome check --apply ./src&#xA;&#xA;# check all files against format, lint, etc. in CI environments&#xA;npx @biomejs/biome ci ./src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to give Biome a run without installing it, use the &lt;a href=&#34;https://biomejs.dev/playground/&#34;&gt;online playground&lt;/a&gt;, compiled to WebAssembly.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://biomejs.dev/&#34;&gt;homepage&lt;/a&gt; to learn more about Biome, or directly head to the &lt;a href=&#34;https://biomejs.dev/guides/getting-started/&#34;&gt;Getting Started guide&lt;/a&gt; to start using Biome.&lt;/p&gt; &#xA;&lt;h2&gt;More about Biome&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; has sane defaults and it doesn&#39;t require configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; aims to support &lt;a href=&#34;https://biomejs.dev/internals/language-support/&#34;&gt;all main languages&lt;/a&gt; of modern web development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; &lt;a href=&#34;https://biomejs.dev/guides/manual-installation/&#34;&gt;doesn&#39;t require Node.js&lt;/a&gt; to function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; has first-class LSP support, with a sophisticated parser that represents the source text in full fidelity and top-notch error recovery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; unifies functionality that has previously been separate tools. Building upon a shared base allows us to provide a cohesive experience for processing code, displaying errors, parallelize work, caching, and configuration.&lt;/p&gt; &#xA;&lt;p&gt;Read more about our &lt;a href=&#34;https://biomejs.dev/internals/philosophy/&#34;&gt;project philosophy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Biome&lt;/strong&gt; is &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/LICENSE-MIT&#34;&gt;MIT licensed&lt;/a&gt; or &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/LICENSE-APACHE&#34;&gt;Apache 2.0 licensed&lt;/a&gt; and moderated under the &lt;a href=&#34;https://github.com/biomejs/biome/tree/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;h3&gt;Gold Sponsors&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://shiguredo.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://shiguredo.jp/official_shiguredo_logo.svg?sanitize=true&#34; height=&#34;120&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Bronze Sponsors&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.kanamekey.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images.opencollective.com/kaname/d15fd98/logo/256.png?height=80&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>ordinals/ord</title>
    <updated>2023-12-01T02:28:01Z</updated>
    <id>tag:github.com,2023-12-01:/ordinals/ord</id>
    <link href="https://github.com/ordinals/ord" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üëÅ‚Äçüó® Rare and exotic sats&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;ord&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; is an index, block explorer, and command-line wallet. It is experimental software with no warranty. See &lt;a href=&#34;https://raw.githubusercontent.com/ordinals/ord/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Ordinal theory imbues satoshis with numismatic value, allowing them to be collected and traded as curios.&lt;/p&gt; &#xA;&lt;p&gt;Ordinal numbers are serial numbers for satoshis, assigned in the order in which they are mined, and preserved across transactions.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.ordinals.com&#34;&gt;the docs&lt;/a&gt; for documentation and guides.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ordinals/ord/master/bip.mediawiki&#34;&gt;the BIP&lt;/a&gt; for a technical description of the assignment and transfer algorithm.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/users/casey/projects/3/&#34;&gt;the project board&lt;/a&gt; for currently prioritized issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ordinals/ord/milestones&#34;&gt;milestones&lt;/a&gt; to get a sense of where the project is and where it&#39;s going.&lt;/p&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;https://discord.gg/87cjuz4FYg&#34;&gt;the Discord server&lt;/a&gt; to chat with fellow ordinal degenerates.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;Ordinals is open-source and community funded. The current lead maintainer of &lt;code&gt;ord&lt;/code&gt; is &lt;a href=&#34;https://github.com/raphjaph/&#34;&gt;raphjaph&lt;/a&gt;. Raph&#39;s work on &lt;code&gt;ord&lt;/code&gt; is entirely funded by donations. If you can, please consider donating!&lt;/p&gt; &#xA;&lt;p&gt;The donation address is &lt;a href=&#34;https://mempool.space/address/bc1qguzk63exy7h5uygg8m2tcenca094a8t464jfyvrmr0s6wkt74wls3zr5m3&#34;&gt;bc1qguzk63exy7h5uygg8m2tcenca094a8t464jfyvrmr0s6wkt74wls3zr5m3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This address is 2 of 4 multisig wallet with keys held by &lt;a href=&#34;https://twitter.com/raphjaph&#34;&gt;raphjaph&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/realizingerin&#34;&gt;erin&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/rodarmor&#34;&gt;rodarmor&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/veryordinally&#34;&gt;ordinally&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bitcoin received will go towards funding maintenance and development of &lt;code&gt;ord&lt;/code&gt;, as well as hosting costs for &lt;a href=&#34;https://ordinals.com&#34;&gt;ordinals.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for donating!&lt;/p&gt; &#xA;&lt;h2&gt;Wallet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; relies on Bitcoin Core for private key management and transaction signing. This has a number of implications that you must understand in order to use &lt;code&gt;ord&lt;/code&gt; wallet commands safely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Bitcoin Core is not aware of inscriptions and does not perform sat control. Using &lt;code&gt;bitcoin-cli&lt;/code&gt; commands and RPC calls with &lt;code&gt;ord&lt;/code&gt; wallets may lead to loss of inscriptions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ord wallet&lt;/code&gt; commands automatically load the &lt;code&gt;ord&lt;/code&gt; wallet given by the &lt;code&gt;--wallet&lt;/code&gt; option, which defaults to &#39;ord&#39;. Keep in mind that after running an &lt;code&gt;ord wallet&lt;/code&gt; command, an &lt;code&gt;ord&lt;/code&gt; wallet may be loaded.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Because &lt;code&gt;ord&lt;/code&gt; has access to your Bitcoin Core wallets, &lt;code&gt;ord&lt;/code&gt; should not be used with wallets that contain a material amount of funds. Keep ordinal and cardinal wallets segregated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pre-alpha wallet migration&lt;/h3&gt; &#xA;&lt;p&gt;Alpha &lt;code&gt;ord&lt;/code&gt; wallets are not compatible with wallets created by previous versions of &lt;code&gt;ord&lt;/code&gt;. To migrate, use &lt;code&gt;ord wallet send&lt;/code&gt; from the old wallet to send sats and inscriptions to addresses generated by the new wallet with &lt;code&gt;ord wallet receive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; is written in Rust and can be built from &lt;a href=&#34;https://github.com/ordinals/ord&#34;&gt;source&lt;/a&gt;. Pre-built binaries are available on the &lt;a href=&#34;https://github.com/ordinals/ord/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install the latest pre-built binary from the command line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -fsLS https://ordinals.com/install.sh | bash -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once &lt;code&gt;ord&lt;/code&gt; is installed, you should be able to run &lt;code&gt;ord --version&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;On Debian and Ubuntu, &lt;code&gt;ord&lt;/code&gt; requires &lt;code&gt;libssl-dev&lt;/code&gt; when building from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need Rust:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build &lt;code&gt;ord&lt;/code&gt; from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ordinals/ord.git&#xA;cd ord&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once built, the &lt;code&gt;ord&lt;/code&gt; binary can be found at &lt;code&gt;./target/release/ord&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; requires &lt;code&gt;rustc&lt;/code&gt; version 1.67.0 or later. Run &lt;code&gt;rustc --version&lt;/code&gt; to ensure you have this version. Run &lt;code&gt;rustup update&lt;/code&gt; to get the latest stable release.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; is available in &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install ord&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debian Package&lt;/h3&gt; &#xA;&lt;p&gt;To build a &lt;code&gt;.deb&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-deb&#xA;cargo deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contribute there are a couple things that are helpful to know. We put a lot of emphasis on proper testing in the code base, with three broad categories of tests: unit, integration and fuzz. Unit tests can usually be found at the bottom of a file in a mod block called &lt;code&gt;tests&lt;/code&gt;. If you add or modify a function please also add a corresponding test. Integration tests try to test end-to-end functionality by executing a subcommand of the binary. Those can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/ordinals/ord/master/tests&#34;&gt;tests&lt;/a&gt; directory. We don&#39;t have a lot of fuzzing but the basic structure of how we do it can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/ordinals/ord/master/fuzz&#34;&gt;fuzz&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;We strongly recommend installing &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt; to make running the tests easier. To run our CI test suite you would do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;just ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This corresponds to the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo fmt -- --check&#xA;cargo test --all&#xA;cargo test --all -- --ignored&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/ordinals/ord/master/justfile&#34;&gt;justfile&lt;/a&gt; to see some more helpful recipes (commands). Here are a couple more good ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;just fmt&#xA;just fuzz&#xA;just doc&#xA;just watch ltest --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the tests are failing or hanging, you might need to increase the maximum number of open files by running &lt;code&gt;ulimit -n 1024&lt;/code&gt; in your shell before you run the tests, or in your shell configuration.&lt;/p&gt; &#xA;&lt;p&gt;We also try to follow a TDD (Test-Driven-Development) approach, which means we use tests as a way to get visibility into the code. Tests have to run fast for that reason so that the feedback loop between making a change, running the test and seeing the result is small. To facilitate that we created a mocked Bitcoin Core instance in &lt;a href=&#34;https://raw.githubusercontent.com/ordinals/ord/master/test-bitcoincore-rpc&#34;&gt;test-bitcoincore-rpc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Syncing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; requires a synced &lt;code&gt;bitcoind&lt;/code&gt; node with &lt;code&gt;-txindex&lt;/code&gt; to build the index of satoshi locations. &lt;code&gt;ord&lt;/code&gt; communicates with &lt;code&gt;bitcoind&lt;/code&gt; via RPC.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;bitcoind&lt;/code&gt; is run locally by the same user, without additional configuration, &lt;code&gt;ord&lt;/code&gt; should find it automatically by reading the &lt;code&gt;.cookie&lt;/code&gt; file from &lt;code&gt;bitcoind&lt;/code&gt;&#39;s datadir, and connecting using the default RPC port.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;bitcoind&lt;/code&gt; is not on mainnet, is not run by the same user, has a non-default datadir, or a non-default port, you&#39;ll need to pass additional flags to &lt;code&gt;ord&lt;/code&gt;. See &lt;code&gt;ord --help&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;bitcoind&lt;/code&gt; RPC Authentication&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; makes RPC calls to &lt;code&gt;bitcoind&lt;/code&gt;, which usually requires a username and password.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;ord&lt;/code&gt; looks a username and password in the cookie file created by &lt;code&gt;bitcoind&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The cookie file path can be configured using &lt;code&gt;--cookie-file&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ord --cookie-file /path/to/cookie/file server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;ord&lt;/code&gt; can be supplied with a username and password on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ord --bitcoin-rpc-user foo --bitcoin-rpc-pass bar server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ORD_BITCOIN_RPC_USER=foo&#xA;export ORD_BITCOIN_RPC_PASS=bar&#xA;ord server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bitcoin_rpc_user: foo&#xA;bitcoin_rpc_pass: bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; uses &lt;a href=&#34;https://docs.rs/env_logger/latest/env_logger/&#34;&gt;env_logger&lt;/a&gt;. Set the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable in order to turn on logging. For example, run the server and show &lt;code&gt;info&lt;/code&gt;-level log messages and above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ RUST_LOG=info cargo run server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;New Releases&lt;/h2&gt; &#xA;&lt;p&gt;Release commit messages use the following template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Release x.y.z&#xA;&#xA;- Bump version: x.y.z ‚Üí x.y.z&#xA;- Update changelog&#xA;- Update dependencies&#xA;- Update database schema version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;To translate &lt;a href=&#34;https://docs.ordinals.com&#34;&gt;the docs&lt;/a&gt; we use this &lt;a href=&#34;https://github.com/google/mdbook-i18n-helpers&#34;&gt;mdBook i18n helper&lt;/a&gt;. So read through their &lt;a href=&#34;https://github.com/google/mdbook-i18n-helpers/raw/main/i18n-helpers/USAGE.md&#34;&gt;usage guide&lt;/a&gt; to see the structure that translations should follow.&lt;/p&gt; &#xA;&lt;p&gt;There are some other things to watch out for but feel free to just start a translation and open a PR. Have a look at &lt;a href=&#34;https://github.com/ordinals/ord/commit/329f31bf6dac207dad001507dd6f18c87fdef355&#34;&gt;this commit&lt;/a&gt; for an idea of what to do. A maintainer will also help you integrate it into our build system.&lt;/p&gt; &#xA;&lt;p&gt;To align your translated version of the Handbook with reference to commit &lt;a href=&#34;https://github.com/ordinals/ord/pull/2426&#34;&gt;#2427&lt;/a&gt;, here are some guiding commands to assist you. It is assumed that your local environment is already well-configured with &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/rust-lang/mdBook&#34;&gt;Mdbook&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/mdbook-i18n-helpers&#34;&gt;mdBook i18n helper&lt;/a&gt; and that you&#39;ve clone this repo.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the following command to generate a new &lt;code&gt;pot&lt;/code&gt; file, which is named as &lt;code&gt;messages.pot&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;MDBOOK_OUTPUT=&#39;{&#34;xgettext&#34;: {&#34;pot-file&#34;: &#34;messages.pot&#34;}}&#39;&#xA;mdbook build -d po&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;msgmerge&lt;/code&gt; where &lt;code&gt;xx.po&lt;/code&gt; is your localized language version following the naming standard of &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO639-1&lt;/a&gt;. This process will update the &lt;code&gt;po&lt;/code&gt; file with the most recent original version:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;msgmerge --update po/xx.po po/messages.pot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Look for &lt;code&gt;#, fuzzy&lt;/code&gt;. The &lt;code&gt;mdBook-i18n-helper&lt;/code&gt; tool utilizes the &lt;code&gt;&#34;fuzzy&#34;&lt;/code&gt; tag to highlight sections that have been recently edited. You can proceed to perform the translation tasks by editing the &lt;code&gt;&#34;fuzzy&#34;&lt;/code&gt;part.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the &lt;code&gt;mdbook&lt;/code&gt; command. A demonstration in Chinese (&lt;code&gt;zh&lt;/code&gt;) is given below:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;mdbook build docs -d build&#xA;MDBOOK_BOOK__LANGUAGE=zh mdbook build docs -d build/zh&#xA;mv docs/build/zh/html docs/build/html/zh&#xA;python3 -m http.server --directory docs/build/html --bind 127.0.0.1 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Upon verifying everything and ensuring all is in order, you can commit the modifications and progress to open a Pull Request (PR) on Github. (&lt;strong&gt;Note&lt;/strong&gt;: Please ensure &lt;strong&gt;ONLY&lt;/strong&gt; the &lt;strong&gt;&#39;xx.po&#39;&lt;/strong&gt; file is pushed, other files such as &#39;.pot&#39; or files ending in &#39;~&#39; are &lt;strong&gt;unnecessary&lt;/strong&gt; and should &lt;strong&gt;NOT&lt;/strong&gt; be included in the Pull Request.Ôºâ&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>oxc-project/oxc</title>
    <updated>2023-12-01T02:28:01Z</updated>
    <id>tag:github.com,2023-12-01:/oxc-project/oxc</id>
    <link href="https://github.com/oxc-project/oxc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öì A collection of JavaScript tools written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-dark-transparent.png&#34; width=&#34;600&#34;&gt; &#xA;  &lt;img alt=&#34;OXC Logo&#34; src=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/preview-white.png&#34; width=&#34;600&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/oxc-project/oxc/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=event%3Apush+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml/badge.svg?event=push&amp;amp;branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/oxc-project/oxc&#34;&gt;&lt;img src=&#34;https://codecov.io/github/oxc-project/oxc/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codspeed.io/oxc-project/oxc&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://codspeed.io/badge.json&#34; alt=&#34;CodSpeed Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/Boshen&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/Boshen&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1079625926024900739?logo=discord&amp;amp;label=Discord&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oxc-project.github.io/oxc/playground&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Playground-blue?color=9BE4E0&#34; alt=&#34;Playground&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;‚öì Oxc&lt;/h2&gt; &#xA;&lt;p&gt;The Oxidation Compiler is creating a suite of high-performance tools for JavaScript and TypeScript.&lt;/p&gt; &#xA;&lt;p&gt;Oxc is building a parser, linter, formatter, transpiler, minifier, resolver ... all written in Rust.&lt;/p&gt; &#xA;&lt;h2&gt;üí° Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;This project shares the same philosophies as &lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; and &lt;a href=&#34;https://beta.ruff.rs&#34;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;JavaScript tooling could be rewritten in a more performant language.&lt;/li&gt; &#xA; &lt;li&gt;An integrated toolchain can tap into efficiencies that are not available to a disparate set of tools.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The linter is ready to catch mistakes for you. It comes with over 60 default rules and no configuration is required.&lt;/p&gt; &#xA;&lt;p&gt;To start using, install &lt;a href=&#34;https://www.npmjs.com/package/oxlint&#34;&gt;oxlint&lt;/a&gt; or via &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx oxlint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To give you an idea of its capabilities, here is an example from the &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt; repository, which finishes linting 4000+ files in 0.5 seconds.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34; align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/oxc-assets/main/linter-screenshot.png&#34; width=&#34;60%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Performance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The parser aim to be the fastest Rust-based ready-for-production parser.&lt;/li&gt; &#xA; &lt;li&gt;The linter is more than 50 times faster than &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, and scales with the number of CPU cores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p float=&#34;left&#34; align=&#34;middle&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/bench-javascript-parser-written-in-rust/main/bar-graph.svg?sanitize=true&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Boshen/bench-javascript-linter/main/bar-graph.svg?sanitize=true&#34; width=&#34;49%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚å®Ô∏è Programming Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;Individual crates are published, you may use them to build your own JavaScript tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The umbrella crate &lt;a href=&#34;https://docs.rs/oxc&#34;&gt;oxc&lt;/a&gt; exports all public crates from this repository.&lt;/li&gt; &#xA; &lt;li&gt;The AST and parser crates &lt;a href=&#34;https://docs.rs/oxc_ast&#34;&gt;oxc_ast&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/oxc_parser&#34;&gt;oxc_parser&lt;/a&gt; are production ready.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;crates/*/examples&lt;/code&gt; for example usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While Rust has gained a reputation for its comparatively slower compilation speed, we have dedicated significant effort to fine-tune the Rust compilation speed. Our aim is to minimize any impact on your development workflow, ensuring that developing your own Oxc based tools remains a smooth and efficient experience.&lt;/p&gt; &#xA;&lt;p&gt;This is demonstrated by our &lt;a href=&#34;https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;CI runs&lt;/a&gt;, where warm runs complete in 5 minutes.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may use the parser via napi: &lt;a href=&#34;https://www.npmjs.com/package/oxc-parser&#34;&gt;oxc-parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üéØ Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ast-and-parser&#34;&gt;AST and Parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-linter&#34;&gt;Linter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-resolver&#34;&gt;Resolver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-minifier&#34;&gt;Minifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-formatter&#34;&gt;Formatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-transpiler&#34;&gt;Transpiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ezno-type-checker&#34;&gt;Ezno Type Checker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üî∏ AST and Parser&lt;/h3&gt; &#xA;&lt;p&gt;Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.&lt;/p&gt; &#xA;&lt;p&gt;As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools. By developing our parser, we have the opportunity to explore and implement well-researched performance techniques.&lt;/p&gt; &#xA;&lt;p&gt;While many existing JavaScript tools rely on &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; as their AST specification, a notable drawback is its abundance of ambiguous nodes. This ambiguity often leads to confusion during development with &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Oxc AST differs slightly from the &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; AST by removing ambiguous nodes and introducing distinct types. For example, instead of using a generic &lt;a href=&#34;https://github.com/estree/estree&#34;&gt;estree&lt;/a&gt; &lt;code&gt;Identifier&lt;/code&gt;, the Oxc AST provides specific types such as &lt;code&gt;BindingIdentifier&lt;/code&gt;, &lt;code&gt;IdentifierReference&lt;/code&gt;, and &lt;code&gt;IdentifierName&lt;/code&gt;. This clear distinction greatly enhances the development experience by aligning more closely with the ECMAScript specification.&lt;/p&gt; &#xA;&lt;h4&gt;üèÜ Parser Performance&lt;/h4&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/Boshen/bench-javascript-parser-written-in-rust&#34;&gt;benchmark&lt;/a&gt; reveals that the Oxc parser surpasses the speed of the &lt;a href=&#34;https://swc.rs&#34;&gt;swc&lt;/a&gt; parser by approximately 2 times and the &lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; parser by 3 times.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How is it so fast?&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;AST is allocated in a memory arena (&lt;a href=&#34;https://crates.io/crates/bumpalo&#34;&gt;bumpalo&lt;/a&gt;) for fast AST memory allocation and deallocation.&lt;/li&gt; &#xA;  &lt;li&gt;Short strings are inlined by &lt;a href=&#34;https://crates.io/crates/compact_str&#34;&gt;CompactString&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;No other heap allocations are done except the above two.&lt;/li&gt; &#xA;  &lt;li&gt;Scope binding, symbol resolution and some syntax errors are not done in the parser, they are delegated to the semantic analyzer.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üî∏ Linter&lt;/h3&gt; &#xA;&lt;p&gt;The linter embraces convention over configuration, eliminating the need for extensive configuration and plugin setup. Unlike other linters like &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;, which often require intricate configurations and plugin installations (e.g. &lt;a href=&#34;https://typescript-eslint.io&#34;&gt;@typescript-eslint&lt;/a&gt;), our linter only requires a single command that you can immediately run on your codebase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx oxlint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also plan to port essential plugins such as &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-import&#34;&gt;eslint-plugin-import&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-jest&#34;&gt;eslint-plugin-jest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;üèÜ Linter Performance&lt;/h4&gt; &#xA;&lt;p&gt;The linter is 50 - 100 times faster than &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; depending on the number of rules and number of CPU cores used. It completes in less than a second for most codebases with a few hundred files and completes in a few seconds for larger monorepos. See &lt;a href=&#34;https://github.com/Boshen/bench-javascript-linter&#34;&gt;bench-javascript-linter&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;As an upside, the binary is approximately 3MB, whereas &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; and its associated plugin dependencies can easily exceed 100.&lt;/p&gt; &#xA;&lt;p&gt;You may also download the linter binary from the &lt;a href=&#34;https://github.com/oxc-project/oxc/releases/latest&#34;&gt;latest release tag&lt;/a&gt; as a standalone binary, this lets you run the linter without a Node.js installation in your CI.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How is it so fast?&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Oxc parser is used.&lt;/li&gt; &#xA;  &lt;li&gt;AST visit is a fast operation due to linear memory scan from the memory arena.&lt;/li&gt; &#xA;  &lt;li&gt;Files are linted in a multi-threaded environment, so scales with the total number of CPU cores.&lt;/li&gt; &#xA;  &lt;li&gt;Every single lint rule is tuned for performance.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Linter Plugin&lt;/h4&gt; &#xA;&lt;p&gt;We are currently developing a DSL-based plugin system. The plugin system uses &lt;a href=&#34;https://github.com/obi1kenobi/trustfall&#34;&gt;trustfall&lt;/a&gt; as its query engine and a subset of GraphQL as its query language.&lt;/p&gt; &#xA;&lt;p&gt;You will not need to use JavaScript or Rust to write a plugin, this is useful for QAs and security researchers.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Resolver&lt;/h3&gt; &#xA;&lt;p&gt;Module resolution plays a crucial role in JavaScript tooling, especially for tasks like multi-file analysis or bundling. However, it can often become a performance bottleneck. To address this, we are actively working on porting &lt;a href=&#34;https://github.com/webpack/enhanced-resolve&#34;&gt;enhanced-resolve&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-import&#34;&gt;eslint-plugin-import&lt;/a&gt; will be our first application for the resolver, since it is currently a performance and complexity blocker for a lot of projects.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Transpiler&lt;/h3&gt; &#xA;&lt;p&gt;A transpiler is responsible for turning higher versions of ECMAScript to a lower version that can be used in older browsers. We are currently focusing on an esnext to es2015 transpiler. See the &lt;a href=&#34;https://github.com/oxc-project/oxc/issues/974&#34;&gt;umbrella issue&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Minifier&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript minification plays a crucial role in optimizing website performance as it reduces the amount of data sent to users, resulting in faster page loads. This holds tremendous economic value, particularly for e-commerce websites, where every second can equate to millions of dollars.&lt;/p&gt; &#xA;&lt;p&gt;However, existing minifiers typically require a trade-off between compression quality and speed. You have to choose between the slowest for the best compression or the fastest for less compression. But what if we could develop a faster minifier without compromising on compression?&lt;/p&gt; &#xA;&lt;p&gt;We are actively working on a prototype that aims to achieve this goal, by porting all test cases from well-known minifiers such as &lt;a href=&#34;https://github.com/google/closure-compiler&#34;&gt;google-closure-compiler&lt;/a&gt;, &lt;a href=&#34;https://terser.org&#34;&gt;terser&lt;/a&gt;, &lt;a href=&#34;https://esbuild.github.io/&#34;&gt;esbuild&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tdewolff/minify&#34;&gt;tdewolff-minify&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Preliminary results indicate that we are on track to achieve our objectives. With the Oxc minifier, you can expect faster minification times without sacrificing compression quality.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Formatter&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://prettier.io&#34;&gt;prettier&lt;/a&gt; has established itself as the de facto code formatter for JavaScript, there is a significant demand in the developer community for a less opinionated alternative. Recognizing this need, our ambition is to undertake research and development to create a new JavaScript formatter that offers increased flexibility and customization options. Unfortunately we are currently lacking the resources to do so.&lt;/p&gt; &#xA;&lt;h3&gt;üî∏ Ezno Type Checker&lt;/h3&gt; &#xA;&lt;p&gt;Developed by @kaleidawave, &lt;a href=&#34;https://github.com/kaleidawave/ezno&#34;&gt;ezno&lt;/a&gt; is a TypeScript checker written in Rust with a focus on static analysis and runtime performance. You may read the &lt;a href=&#34;https://kaleidawave.github.io/posts/introducing-ezno/&#34;&gt;announcement blog post&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The type checker is available via &lt;code&gt;npx oxidation-compiler@latest check path&lt;/code&gt; and the &lt;a href=&#34;https://oxc-project.github.io/oxc/playground&#34;&gt;playground&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidance.&lt;/p&gt; &#xA;&lt;p&gt;Check out some of the &lt;a href=&#34;https://github.com/oxc-project/oxc/contribute&#34;&gt;good first issues&lt;/a&gt; or ask us on &lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are unable to contribute by code, you can still participate by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a &lt;a href=&#34;https://github.com/oxc-project/oxc/stargazers&#34;&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; &#xA; &lt;li&gt;Join us on &lt;a href=&#34;https://discord.gg/9uXCAwqQZW&#34;&gt;Discord&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/boshen_c&#34;&gt;Follow me on twitter&lt;/a&gt; and tweet about this project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Learning Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;My small tutorial on &lt;a href=&#34;https://oxc-project.github.io/javascript-parser-in-rust&#34;&gt;how to write a JavaScript Parser in Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;My small article &lt;a href=&#34;https://rustmagazine.org/issue-3/javascript-compiler/&#34;&gt;Pursuit of Performance on Building a JavaScript Compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://craftinginterpreters.com&#34;&gt;Crafting Interpreters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vimeo.com/649009599&#34;&gt;Andrew Kelley - Practical DOD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üßë‚Äçüíª Maintenance&lt;/h2&gt; &#xA;&lt;p&gt;Oxc is being maintained by &lt;a href=&#34;https://github.com/boshen&#34;&gt;Boshen&lt;/a&gt; as the project lead with the help of &lt;a href=&#34;https://github.com/oxc-project/oxc/graphs/contributors&#34;&gt;contributors&lt;/a&gt; from all over the world.&lt;/p&gt; &#xA;&lt;p&gt;Rules of thumb:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;APIs should be simple and well-documented.&lt;/li&gt; &#xA; &lt;li&gt;All performance issues (runtime and compilation speed) are considered as bugs in this project.&lt;/li&gt; &#xA; &lt;li&gt;Third-party dependencies should be minimal.&lt;/li&gt; &#xA; &lt;li&gt;Monitor code coverage for unused code. Aim for 99% code coverage.&lt;/li&gt; &#xA; &lt;li&gt;Embrace data-oriented design.&lt;/li&gt; &#xA; &lt;li&gt;Prefer smaller PRs. Try &lt;a href=&#34;https://graphite.dev&#34;&gt;graphite.dev&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project was incubated with the assistance of these exceptional mentors and their projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://biomejs.dev/&#34;&gt;Biome&lt;/a&gt; - &lt;a href=&#34;https://github.com/ematipico&#34;&gt;@ematipico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.ruff.rs&#34;&gt;Ruff&lt;/a&gt; - &lt;a href=&#34;https://github.com/charliermarsh&#34;&gt;@charliermarsh&lt;/a&gt;, &lt;a href=&#34;https://github.com/MichaReiser&#34;&gt;@MichaReiser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quick-lint-js.com&#34;&gt;quick-lint-js&lt;/a&gt; - &lt;a href=&#34;https://github.com/strager&#34;&gt;@strager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://package.elm-lang.org/packages/jfmengels/elm-review/latest&#34;&gt;elm-review&lt;/a&gt; - &lt;a href=&#34;https://github.com/jfmengels&#34;&gt;@jfmengels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks go to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domonji&#34;&gt;@domonji&lt;/a&gt; for contribution to the TypeScript parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guan-wy&#34;&gt;@guan-wy&lt;/a&gt; for the &lt;a href=&#34;https://github.com/Boshen/oxc-assets&#34;&gt;project logo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And also&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kaleidawave&#34;&gt;@kaleidawave&lt;/a&gt; for &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/#-ezno-type-checker&#34;&gt;Ezno Type Checker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zackradisic&#34;&gt;@zackradisic&lt;/a&gt; for &lt;a href=&#34;https://github.com/zackradisic/tyvm&#34;&gt;tyvm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/u9g&#34;&gt;@u9g&lt;/a&gt; for the work in progress &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/crates/oxc_linter_plugin&#34;&gt;oxc_linter_plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìñ License&lt;/h2&gt; &#xA;&lt;p&gt;Oxc is free and open-source software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Oxc partially copies code from the following projects, their licenses are listed in &lt;a href=&#34;https://raw.githubusercontent.com/oxc-project/oxc/main/THIRD-PARTY-LICENSE&#34;&gt;&lt;strong&gt;Third-party library licenses&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eslint/eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint&#34;&gt;typescript-eslint/typescript-eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/import-js/eslint-plugin-import&#34;&gt;import-js/eslint-plugin-import&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/import-js/eslint-plugin-import/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jest-community/eslint-plugin-jest&#34;&gt;jest-community/eslint-plugin-jest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jest-community/eslint-plugin-jest/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript&#34;&gt;microsoft/TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/TypeScript/raw/main/LICENSE.txt&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;biomejs/biome&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/biomejs/biome/raw/main/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus&#34;&gt;mozilla-spidermonkey/jsparagus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt; &lt;a href=&#34;https://github.com/mozilla-spidermonkey/jsparagus/raw/master/LICENSE-APACHE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier/prettier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/prettier/prettier/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn&#34;&gt;acorn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acornjs/acorn/raw/master/acorn/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette&#34;&gt;zkat/miette&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zkat/miette/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sindresorhus/globals&#34;&gt;sindresorhus/globals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sindresorhus/globals/raw/main/license&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser&#34;&gt;terser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terser/terser/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanw/esbuild&#34;&gt;evanw/esbuild&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanw/esbuild/raw/main/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/closure-compiler&#34;&gt;google/closure-compiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/closure-compiler#closure-compiler-license&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tdewolff/minify&#34;&gt;tdewolff/minify&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tdewolff/minify/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/parcel-bundler/parcel&#34;&gt;parcel-bundler/parcel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/parcel-bundler/parcel/raw/v2/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dividab/tsconfig-paths&#34;&gt;dividab/tsconfig-paths&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dividab/tsconfig-paths/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tmccombs/json-comments-rs&#34;&gt;tmccombs/json-comments-rs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tmccombs/json-comments-rs/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>