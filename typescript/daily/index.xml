<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-12T01:42:32Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebook/lexical</title>
    <updated>2022-09-12T01:42:32Z</updated>
    <id>tag:github.com,2022-09-12:/facebook/lexical</id>
    <link href="https://github.com/facebook/lexical" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lexical is an extensible text editor framework that provides excellent reliability, accessibility and performance.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://lexical.dev&#34;&gt;Lexical&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/workflow/status/facebook/lexical/Lexical%20Tests&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/lexical&#34;&gt; &lt;img alt=&#34;Visit the NPM page&#34; src=&#34;https://img.shields.io/npm/v/lexical&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/KmG4wQnnD9&#34;&gt; &lt;img alt=&#34;Add yourself to our Discord&#34; src=&#34;https://img.shields.io/discord/953974421008293909&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=lexicaljs&#34;&gt; &lt;img alt=&#34;Follow us on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/lexicaljs?style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️ Lexical is currently in early development and APIs and packages are likely to change quite often.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lexical is an extensible JavaScript web text-editor framework with an emphasis on reliability, accessibility, and performance. Lexical aims to provide a best-in-class developer experience, so you can easily prototype and build features with confidence. Combined with a highly extensible architecture, Lexical allows developers to create unique text editing experiences that scale in size and functionality.&lt;/p&gt; &#xA;&lt;p&gt;For documentation and more information about Lexical, be sure to &lt;a href=&#34;https://lexical.dev&#34;&gt;visit the Lexical website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples of what you can do with Lexical:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playground.lexical.dev&#34;&gt;Lexical Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codesandbox.io/s/lexical-plain-text-example-g932e&#34;&gt;Plain text sandbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codesandbox.io/s/lexical-rich-text-example-5tncvy&#34;&gt;Rich text sandbox&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overview:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#getting-started-with-react&#34;&gt;Getting started with React&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#lexical-is-a-framework&#34;&gt;Lexical is a framework&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#working-with-lexical&#34;&gt;Working with Lexical&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#contributing-to-lexical&#34;&gt;Contributing to Lexical&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting started with React&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Lexical is not only limited to React. Lexical can support any underlying DOM based library once bindings for that library have been created.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install &lt;code&gt;lexical&lt;/code&gt; and &lt;code&gt;@lexical/react&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install --save lexical @lexical/react&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is an example of a basic plain text editor using &lt;code&gt;lexical&lt;/code&gt; and &lt;code&gt;@lexical/react&lt;/code&gt; (&lt;a href=&#34;https://codesandbox.io/s/lexical-plain-text-example-g932e&#34;&gt;try it yourself&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {$getRoot, $getSelection} from &#39;lexical&#39;;&#xA;import {useEffect} from &#39;react&#39;;&#xA;&#xA;import {LexicalComposer} from &#39;@lexical/react/LexicalComposer&#39;;&#xA;import {PlainTextPlugin} from &#39;@lexical/react/LexicalPlainTextPlugin&#39;;&#xA;import {ContentEditable} from &#39;@lexical/react/LexicalContentEditable&#39;;&#xA;import {HistoryPlugin} from &#39;@lexical/react/LexicalHistoryPlugin&#39;;&#xA;import {OnChangePlugin} from &#39;@lexical/react/LexicalOnChangePlugin&#39;;&#xA;import {useLexicalComposerContext} from &#39;@lexical/react/LexicalComposerContext&#39;;&#xA;&#xA;const theme = {&#xA;  // Theme styling goes here&#xA;  // ...&#xA;}&#xA;&#xA;// When the editor changes, you can get notified via the&#xA;// LexicalOnChangePlugin!&#xA;function onChange(editorState) {&#xA;  editorState.read(() =&amp;gt; {&#xA;    // Read the contents of the EditorState here.&#xA;    const root = $getRoot();&#xA;    const selection = $getSelection();&#xA;&#xA;    console.log(root, selection);&#xA;  });&#xA;}&#xA;&#xA;// Lexical React plugins are React components, which makes them&#xA;// highly composable. Furthermore, you can lazy load plugins if&#xA;// desired, so you don&#39;t pay the cost for plugins until you&#xA;// actually use them.&#xA;function MyCustomAutoFocusPlugin() {&#xA;  const [editor] = useLexicalComposerContext();&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    // Focus the editor when the effect fires!&#xA;    editor.focus();&#xA;  }, [editor]);&#xA;&#xA;  return null;&#xA;}&#xA;&#xA;// Catch any errors that occur during Lexical updates and log them&#xA;// or throw them as needed. If you don&#39;t throw them, Lexical will&#xA;// try to recover gracefully without losing user data.&#xA;function onError(error) {&#xA;  console.error(error);&#xA;}&#xA;&#xA;function Editor() {&#xA;  const initialConfig = {&#xA;    namespace: &#39;MyEditor&#39;,&#xA;    theme,&#xA;    onError,&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;LexicalComposer initialConfig={initialConfig}&amp;gt;&#xA;      &amp;lt;PlainTextPlugin&#xA;        contentEditable={&amp;lt;ContentEditable /&amp;gt;}&#xA;        placeholder={&amp;lt;div&amp;gt;Enter some text...&amp;lt;/div&amp;gt;}&#xA;      /&amp;gt;&#xA;      &amp;lt;OnChangePlugin onChange={onChange} /&amp;gt;&#xA;      &amp;lt;HistoryPlugin /&amp;gt;&#xA;      &amp;lt;MyCustomAutoFocusPlugin /&amp;gt;&#xA;    &amp;lt;/LexicalComposer&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lexical is a framework&lt;/h2&gt; &#xA;&lt;p&gt;The core of Lexical is a dependency-free text editor framework that allows developers to build powerful, simple and complex, editor surfaces. Lexical has a few concepts that are worth exploring:&lt;/p&gt; &#xA;&lt;h3&gt;Editor instances&lt;/h3&gt; &#xA;&lt;p&gt;Editor instances are the core thing that wires everything together. You can attach a contenteditable DOM element to editor instances, and also register listeners and commands. Most importantly, the editor allows for updates to its &lt;code&gt;EditorState&lt;/code&gt;. You can create an editor instance using the &lt;code&gt;createEditor()&lt;/code&gt; API, however you normally don&#39;t have to worry when using framework bindings such as &lt;code&gt;@lexical/react&lt;/code&gt; as this is handled for you.&lt;/p&gt; &#xA;&lt;h3&gt;Editor States&lt;/h3&gt; &#xA;&lt;p&gt;An Editor State is the underlying data model that represents what you want to show on the DOM. Editor States contain two parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a Lexical node tree&lt;/li&gt; &#xA; &lt;li&gt;a Lexical selection object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Editor States are immutable once created, and in order to create one, you must do so via &lt;code&gt;editor.update(() =&amp;gt; {...})&lt;/code&gt;. However, you can also &#34;hook&#34; into an existing update using node transforms or command handlers – which are invoked as part of an existing update workflow to prevent cascading/waterfalling of updates. You can retrieve the current editor state using &lt;code&gt;editor.getEditorState()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Editor States are also fully serializable to JSON and can easily be serialized back into the editor using &lt;code&gt;editor.parseEditorState()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Editor Updates&lt;/h3&gt; &#xA;&lt;p&gt;When you want to change something in an Editor State, you must do it via an update, &lt;code&gt;editor.update(() =&amp;gt; {...})&lt;/code&gt;. The closure passed to the update call is important. It&#39;s a place where you have full &#34;lexical&#34; context of the active editor state, and it exposes access to the underlying Editor State&#39;s node tree. We promote using &lt;code&gt;$&lt;/code&gt; prefixed functions in this context, as it signifies a place where they can be used exclusively. Attempting to use them outside of an update will trigger a runtime error with an appropriate error. For those familiar with React Hooks, you can think of these as having a similar functionality (except &lt;code&gt;$&lt;/code&gt; functions can be used in any order).&lt;/p&gt; &#xA;&lt;h3&gt;DOM Reconciler&lt;/h3&gt; &#xA;&lt;p&gt;Lexical has its own DOM reconciler that takes a set of Editor States (always the &#34;current&#34; and the &#34;pending&#34;) and applies a &#34;diff&#34; on them. It then uses this diff to update only the parts of the DOM that need changing. You can think of this as a kind-of virtual DOM, except Lexical is able to skip doing much of the diffing work, as it knows what was mutated in a given update. The DOM reconciler adopts performance optimizations that benefit the typical heuristics of a content editable – and is able to ensure consistency for LTR and RTL languages automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Listeners, Node Transforms and Commands&lt;/h3&gt; &#xA;&lt;p&gt;Outside of invoking updates, the bulk of work done with Lexical is via listeners, node transforms and commands. These all stem from the editor and are prefixed with &lt;code&gt;register&lt;/code&gt;. Another important feature is that all the register methods return a function to easily unsubscribe them. For example here is how you listen to an update to a Lexical editor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const unregisterListener = editor.registerUpdateListener(({editorState}) =&amp;gt; {&#xA;  // An update has occurred!&#xA;  console.log(editorState);&#xA;});&#xA;&#xA;// Ensure we remove the listener later!&#xA;unregisterListener();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commands are the communication system used to wire everything together in Lexical. Custom commands can be created using &lt;code&gt;createCommand()&lt;/code&gt; and dispatched to an editor using &lt;code&gt;editor.dispatchCommand(command, payload)&lt;/code&gt;. Lexical dispatches commands internally when key presses are triggered and when other important signals occur. Commands can also be handled using &lt;code&gt;editor.registerCommand(handler, priority)&lt;/code&gt;, and incoming commands are propagated through all handlers by priority until a handler stops the propagation (in a similar way to event propagation in the browser).&lt;/p&gt; &#xA;&lt;h2&gt;Working with Lexical&lt;/h2&gt; &#xA;&lt;p&gt;This section covers how to use Lexical, independently of any framework or library. For those intending to use Lexical in their React applications, it&#39;s advisable to &lt;a href=&#34;https://github.com/facebook/lexical/tree/main/packages/lexical-react/src&#34;&gt;check out the source-code for the hooks that are shipped in &lt;code&gt;@lexical/react&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Creating an editor and using it&lt;/h3&gt; &#xA;&lt;p&gt;When you work with Lexical, you normally work with a single editor instance. An editor instance can be thought of as the one responsible for wiring up an EditorState with the DOM. The editor is also the place where you can register custom nodes, add listeners, and transforms.&lt;/p&gt; &#xA;&lt;p&gt;An editor instance can be created from the &lt;code&gt;lexical&lt;/code&gt; package and accepts an optional configuration object that allows for theming and other options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {createEditor} from &#39;lexical&#39;;&#xA;&#xA;const config = {&#xA;  namespace: &#39;MyEditor&#39;,&#xA;  theme: {&#xA;    ...&#xA;  },&#xA;};&#xA;&#xA;const editor = createEditor(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have an editor instance, when ready, you can associate the editor instance with a content editable &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element in your document:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const contentEditableElement = document.getElementById(&#39;editor&#39;);&#xA;&#xA;editor.setRootElement(contentEditableElement);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to clear the editor instance from the element, you can pass &lt;code&gt;null&lt;/code&gt;. Alternatively, you can switch to another element if need be, just pass an alternative element reference to &lt;code&gt;setRootElement()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Working with Editor States&lt;/h3&gt; &#xA;&lt;p&gt;With Lexical, the source of truth is not the DOM, but rather an underlying state model that Lexical maintains and associates with an editor instance. You can get the latest editor state from an editor by calling &lt;code&gt;editor.getEditorState()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Editor states are serializable to JSON, and the editor instance provides a useful method to deserialize stringified editor states.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stringifiedEditorState = JSON.stringify(editor.getEditorState().toJSON());&#xA;&#xA;const newEditorState = editor.parseEditorState(stringifiedEditorState);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating an editor&lt;/h3&gt; &#xA;&lt;p&gt;There are a few ways to update an editor instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trigger an update with &lt;code&gt;editor.update()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setting the editor state via &lt;code&gt;editor.setEditorState()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Applying a change as part of an existing update via &lt;code&gt;editor.registerNodeTransform()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using a command listener with &lt;code&gt;editor.registerCommand(EXAMPLE_COMMAND, () =&amp;gt; {...}, priority)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The most common way to update the editor is to use &lt;code&gt;editor.update()&lt;/code&gt;. Calling this function requires a function to be passed in that will provide access to mutate the underlying editor state. When starting a fresh update, the current editor state is cloned and used as the starting point. From a technical perspective, this means that Lexical leverages a technique called double-buffering during updates. There&#39;s an editor state to represent what is current on the screen, and another work-in-progress editor state that represents future changes.&lt;/p&gt; &#xA;&lt;p&gt;Creating an update is typically an async process that allows Lexical to batch multiple updates together in a single update – improving performance. When Lexical is ready to commit the update to the DOM, the underlying mutations and changes in the update will form a new immutable editor state. Calling &lt;code&gt;editor.getEditorState()&lt;/code&gt; will then return the latest editor state based on the changes from the update.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how you can update an editor instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {$getRoot, $getSelection, $createParagraphNode} from &#39;lexical&#39;;&#xA;&#xA;// Inside the `editor.update` you can use special $ prefixed helper functions.&#xA;// These functions cannot be used outside the closure, and will error if you try.&#xA;// (If you&#39;re familiar with React, you can imagine these to be a bit like using a hook&#xA;// outside of a React function component).&#xA;editor.update(() =&amp;gt; {&#xA;  // Get the RootNode from the EditorState&#xA;  const root = $getRoot();&#xA;&#xA;  // Get the selection from the EditorState&#xA;  const selection = $getSelection();&#xA;&#xA;  // Create a new ParagraphNode&#xA;  const paragraphNode = $createParagraphNode();&#xA;&#xA;  // Create a new TextNode&#xA;  const textNode = $createTextNode(&#39;Hello world&#39;);&#xA;&#xA;  // Append the text node to the paragraph&#xA;  paragraphNode.append(textNode);&#xA;&#xA;  // Finally, append the paragraph to the root&#xA;  root.append(paragraphNode);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to know when the editor updates so you can react to the changes, you can add an update listener to the editor, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;editor.registerUpdateListener(({editorState}) =&amp;gt; {&#xA;  // The latest EditorState can be found as `editorState`.&#xA;  // To read the contents of the EditorState, use the following API:&#xA;&#xA;  editorState.read(() =&amp;gt; {&#xA;    // Just like editor.update(), .read() expects a closure where you can use&#xA;    // the $ prefixed helper functions.&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating custom Lexical nodes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/lexical/raw/main/examples/decorators.md&#34;&gt;Creating custom decorator nodes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Lexical&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start local server and run tests&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run start&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test-e2e-chromium&lt;/code&gt; to run only chromium e2e tests &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The server needs to be running for the e2e tests&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;npm run start&lt;/code&gt; will start both the dev server and collab server. If you don&#39;t need collab, use &lt;code&gt;npm run dev&lt;/code&gt; to start just the dev server.&lt;/p&gt; &#xA;&lt;h3&gt;Optional but recommended, use VSCode for development&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and install VSCode&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download from &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;here&lt;/a&gt; (it’s recommended to use the unmodified version)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install extensions&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode&#34;&gt;Flow Language Support&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Make sure to follow the setup steps in the README&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34;&gt;Prettier&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Set prettier as the default formatter in &lt;code&gt;editor.defaultFormatter&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Optional: set format on save &lt;code&gt;editor.formatOnSave&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&#34;&gt;ESlint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/docs/design.md&#34;&gt;How Lexical was designed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/docs/testing.md&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firefox 52+&lt;/li&gt; &#xA; &lt;li&gt;Chrome 49+&lt;/li&gt; &#xA; &lt;li&gt;Edge 79+ (when Edge switched to Chromium)&lt;/li&gt; &#xA; &lt;li&gt;Safari 11+&lt;/li&gt; &#xA; &lt;li&gt;iOS 11+ (Safari)&lt;/li&gt; &#xA; &lt;li&gt;iPad OS 13+ (Safari)&lt;/li&gt; &#xA; &lt;li&gt;Android Chrome 72+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Lexical does not support Internet Explorer or legacy versions of Edge.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new branch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git checkout -b my-new-branch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Commit your changes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git commit -a -m &#39;Description of the changes&#39;&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;There are many ways of doing this and this is just a suggestion&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Push your branch to GitHub &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git push origin my-new-branch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go to the repository page in GitHub and click on &#34;Compare &amp;amp; pull request&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://cli.github.com/manual/gh_pr_create&#34;&gt;GitHub CLI&lt;/a&gt; allows you to skip the web interface for this step (and much more)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions about Lexical, would like to discuss a bug report, or have questions about new integrations, feel free to join us at &lt;a href=&#34;https://discord.gg/KmG4wQnnD9&#34;&gt;our Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lexical engineers are checking this regularly.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-unit&lt;/code&gt; runs only unit tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-e2e-chromium&lt;/code&gt; runs only chromium e2e tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run debug-test-e2e-chromium&lt;/code&gt; runs only chromium e2e tests in head mode for debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-e2e-firefox&lt;/code&gt; runs only firefox e2e tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run debug-test-e2e-firefox&lt;/code&gt; runs only firefox e2e tests in head mode for debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-e2e-webkit&lt;/code&gt; runs only webkit e2e tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run debug-test-e2e-webkit&lt;/code&gt; runs only webkit e2e tests in head mode for debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Lexical is &lt;a href=&#34;https://github.com/facebook/lexical/raw/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gitname/react-gh-pages</title>
    <updated>2022-09-12T01:42:32Z</updated>
    <id>tag:github.com,2022-09-12:/gitname/react-gh-pages</id>
    <link href="https://github.com/gitname/react-gh-pages" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deploying a React App (created using create-react-app) to GitHub Pages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deploying a React App* to GitHub Pages&lt;/h1&gt; &#xA;&lt;p&gt;* created using &lt;code&gt;create-react-app&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;In this tutorial, I&#39;ll show you how you can create a React app and deploy it to GitHub Pages.&lt;/p&gt; &#xA;&lt;p&gt;To create the React app, I&#39;ll be using &lt;a href=&#34;https://create-react-app.dev/&#34;&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt;, which is a tool people can use to create a React app from scratch. To deploy the React app, I&#39;ll be using &lt;a href=&#34;https://github.com/tschaub/gh-pages&#34;&gt;&lt;code&gt;gh-pages&lt;/code&gt;&lt;/a&gt;, which is an npm package people can use to deploy things to &lt;a href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages&#34;&gt;GitHub Pages&lt;/a&gt;, a free web hosting service provided by GitHub.&lt;/p&gt; &#xA;&lt;p&gt;If you follow along with this tutorial, you&#39;ll end up with a new React app—hosted on GitHub Pages—which you can then customize.&lt;/p&gt; &#xA;&lt;h1&gt;Tutorial&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node and npm&lt;/a&gt; are installed. Here are the versions I&#39;ll be using while making this tutorial:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ node --version&#xA;v16.13.2&#xA;&#xA;$ npm --version&#xA;8.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Installing npm adds two commands to the system—&lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;npx&lt;/code&gt;—both of which I&#39;ll be using while making this tutorial.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;Git&lt;/a&gt; is installed. Here&#39;s the version I&#39;ll be using while making this tutorial:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git --version&#xA;git version 2.29.1.windows.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://github.com/signup&#34;&gt;GitHub&lt;/a&gt; account. &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Procedure&lt;/h2&gt; &#xA;&lt;h3&gt;1. Create an &lt;strong&gt;empty&lt;/strong&gt; repository on GitHub&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign into your GitHub account.&lt;/li&gt; &#xA; &lt;li&gt;Visit the &lt;a href=&#34;https://github.com/new&#34;&gt;Create a new repository&lt;/a&gt; form.&lt;/li&gt; &#xA; &lt;li&gt;Fill in the form as follows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Repository name:&lt;/strong&gt; You can enter any name you want*.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;* For a &lt;a href=&#34;https://pages.github.com/#project-site&#34;&gt;project site&lt;/a&gt;, you can enter any name you want. For a &lt;a href=&#34;https://pages.github.com/#user-site&#34;&gt;user site&lt;/a&gt;, GitHub &lt;a href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites&#34;&gt;requires&lt;/a&gt; that the repository&#39;s name have the following format: &lt;code&gt;{username}.github.io&lt;/code&gt; (e.g. &lt;code&gt;gitname.github.io&lt;/code&gt;)&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;The name you enter will show up in a few places: (a) in references to the repository throughout GitHub, (b) in the URL of the repository, and (c) in the URL of the deployed React app.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;In this tutorial, I&#39;ll be deploying the React app as a project site.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;p&gt;I&#39;ll enter: &lt;code&gt;react-gh-pages&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Repository privacy:&lt;/strong&gt; Select &lt;em&gt;Public&lt;/em&gt; (or &lt;em&gt;Private&lt;/em&gt;*).&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;* For &lt;a href=&#34;https://docs.github.com/en/get-started/learning-about-github/githubs-products#github-free-for-user-accounts&#34;&gt;GitHub Free&lt;/a&gt; users, the only type of repository that can be used with GitHub Pages is &lt;em&gt;Public&lt;/em&gt;. For &lt;a href=&#34;https://docs.github.com/en/get-started/learning-about-github/githubs-products#github-pro&#34;&gt;GitHub Pro&lt;/a&gt; users (and other paying users), both &lt;em&gt;Public&lt;/em&gt; and &lt;em&gt;Private&lt;/em&gt; repositories can be used with GitHub Pages.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;p&gt;I&#39;ll choose: &lt;em&gt;Public&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Initialize repository:&lt;/strong&gt; Leave all checkboxes empty.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;That will make it so GitHub creates an empty repository, instead of pre-populating the repository with a &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;.gitignore&lt;/code&gt;, and/or &lt;code&gt;LICENSE&lt;/code&gt; file.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Submit the form.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, your GitHub account contains an empty repository, having the name and privacy type that you specified.&lt;/p&gt; &#xA;&lt;h3&gt;2. Create a React app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a React app named &lt;code&gt;my-app&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;In case you want to use a different name from &lt;code&gt;my-app&lt;/code&gt; (e.g. &lt;code&gt;web-ui&lt;/code&gt;), you can accomplish that by replacing all occurrences of &lt;code&gt;my-app&lt;/code&gt; in this tutorial, with that other name (i.e. &lt;code&gt;my-app&lt;/code&gt; --&amp;gt; &lt;code&gt;web-ui&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npx create-react-app my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;That command will create a React app written in JavaScript. To create one written in &lt;a href=&#34;https://create-react-app.dev/docs/adding-typescript/#installation&#34;&gt;TypeScript&lt;/a&gt;, you can issue this command instead:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npx create-react-app my-app --template typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;That command will create a new folder named &lt;code&gt;my-app&lt;/code&gt;, which will contain the source code of a React app.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;In addition to containing the source code of the React app, that folder is also a Git repository. That characteristic of the folder will come into play in Step 6.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the newly-created folder:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, there is a React app on your computer and you are in the folder that contains its source code. All of the remaining commands shown in this tutorial can be run from that folder.&lt;/p&gt; &#xA;&lt;h3&gt;3. Install the &lt;code&gt;gh-pages&lt;/code&gt; npm package&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;a href=&#34;https://github.com/tschaub/gh-pages&#34;&gt;&lt;code&gt;gh-pages&lt;/code&gt;&lt;/a&gt; npm package and designate it as a &lt;a href=&#34;https://nodejs.dev/learn/npm-dependencies-and-devdependencies&#34;&gt;development dependency&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm install gh-pages --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, the &lt;code&gt;gh-pages&lt;/code&gt; npm package is installed on your computer and the React app&#39;s dependence upon it is documented in the React app&#39;s &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;4. Add a &lt;code&gt;homepage&lt;/code&gt; property to the &lt;code&gt;package.json&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;package.json&lt;/code&gt; file in a text editor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ vi package.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;In this tutorial, the text editor I&#39;ll be using is &lt;a href=&#34;https://www.vim.org/&#34;&gt;vi&lt;/a&gt;. You can use any text editor you want; for example, &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;homepage&lt;/code&gt; property in this format*: &lt;code&gt;https://{username}.github.io/{repo-name}&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;* For a &lt;a href=&#34;https://pages.github.com/#project-site&#34;&gt;project site&lt;/a&gt;, that&#39;s the format. For a &lt;a href=&#34;https://pages.github.com/#user-site&#34;&gt;user site&lt;/a&gt;, the format is: &lt;code&gt;https://{username}.github.io&lt;/code&gt;. You can read more about the &lt;code&gt;homepage&lt;/code&gt; property in the &lt;a href=&#34;https://create-react-app.dev/docs/deployment/#github-pages&#34;&gt;&#34;GitHub Pages&#34; section&lt;/a&gt; of the &lt;code&gt;create-react-app&lt;/code&gt; documentation.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;{&#xA;  &#34;name&#34;: &#34;my-app&#34;,&#xA;  &#34;version&#34;: &#34;0.1.0&#34;,&#xA;+ &#34;homepage&#34;: &#34;https://gitname.github.io/react-gh-pages&#34;,&#xA;  &#34;private&#34;: true,&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, the React app&#39;s &lt;code&gt;package.json&lt;/code&gt; file includes a property named &lt;code&gt;homepage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;5. Add deployment scripts to the &lt;code&gt;package.json&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;package.json&lt;/code&gt; file in a text editor (if it isn&#39;t already open in one).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ vi package.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;predeploy&lt;/code&gt; property and a &lt;code&gt;deploy&lt;/code&gt; property to the &lt;code&gt;scripts&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;&#34;scripts&#34;: {&#xA;+   &#34;predeploy&#34;: &#34;npm run build&#34;,&#xA;+   &#34;deploy&#34;: &#34;gh-pages -d build&#34;,&#xA;    &#34;start&#34;: &#34;react-scripts start&#34;,&#xA;    &#34;build&#34;: &#34;react-scripts build&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, the React app&#39;s &lt;code&gt;package.json&lt;/code&gt; file includes deployment scripts.&lt;/p&gt; &#xA;&lt;h3&gt;6. Add a &#34;remote&#34; that points to the GitHub repository&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &#34;&lt;a href=&#34;https://git-scm.com/docs/git-remote&#34;&gt;remote&lt;/a&gt;&#34; to the local Git repository.&lt;/p&gt; &lt;p&gt;You can do that by issuing a command in this format:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git remote add origin https://github.com/{username}/{repo-name}.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To customize that command for your situation, replace &lt;code&gt;{username}&lt;/code&gt; with your GitHub username and replace &lt;code&gt;{repo-name}&lt;/code&gt; with the name of the GitHub repository you created in Step 1.&lt;/p&gt; &lt;p&gt;In my case, I&#39;ll run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git remote add origin https://github.com/gitname/react-gh-pages.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;That command tells Git where I want it to push things whenever I—or the &lt;code&gt;gh-pages&lt;/code&gt; npm package acting on my behalf—issue the &lt;code&gt;$ git push&lt;/code&gt; command from within this local Git repository.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, the local repository has a &#34;remote&#34; whose URL points to the GitHub repository you created in Step 1.&lt;/p&gt; &#xA;&lt;h3&gt;7. Deploy the React app to GitHub Pages&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy the React app to GitHub Pages&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm run deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;That will cause the &lt;code&gt;predeploy&lt;/code&gt; and &lt;code&gt;deploy&lt;/code&gt; scripts defined in &lt;code&gt;package.json&lt;/code&gt; to run.&lt;/p&gt; &#xA;   &lt;p&gt;Under the hood, the &lt;code&gt;predeploy&lt;/code&gt; script will build a distributable version of the React app and store it in a folder named &lt;code&gt;build&lt;/code&gt;. Then, the &lt;code&gt;deploy&lt;/code&gt; script will push the contents of that folder to a new commit on the &lt;code&gt;gh-pages&lt;/code&gt; branch of the GitHub repository, creating that branch if it doesn&#39;t already exist.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;By default, the new commit on the &lt;code&gt;gh-pages&lt;/code&gt; branch will have a commit message of &#34;Updates&#34;. You can &lt;a href=&#34;https://github.com/gitname/react-gh-pages/issues/80#issuecomment-1042449820&#34;&gt;specify a custom commit message&lt;/a&gt; via the &lt;code&gt;-m&lt;/code&gt; option, like this:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm run deploy -- -m &#34;Deploy React app to GitHub Pages&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;GitHub Pages will automatically detect that a new commit has been added to the &lt;code&gt;gh-pages&lt;/code&gt; branch of the GitHub repository. Once it detects that, it will begin serving the files that make up that commit — in this case, the distributable version of the React app — to anyone that visits the &lt;code&gt;homepage&lt;/code&gt; URL you specified in Step 4.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;That&#39;s it!&lt;/strong&gt; The React app has been deployed to GitHub Pages! &lt;span&gt;🚀&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;At this point, the React app is accessible to anyone who visits the &lt;code&gt;homepage&lt;/code&gt; URL you specified in Step 4. For example, the React app I deployed is accessible at &lt;a href=&#34;https://gitname.github.io/react-gh-pages&#34;&gt;https://gitname.github.io/react-gh-pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;8. (Optional) Store the React app&#39;s &lt;em&gt;source code&lt;/em&gt; on GitHub&lt;/h3&gt; &#xA;&lt;p&gt;In the previous step, the &lt;code&gt;gh-pages&lt;/code&gt; npm package pushed the distributable version of the React app to a branch named &lt;code&gt;gh-pages&lt;/code&gt; in the GitHub repository. However, the &lt;em&gt;source code&lt;/em&gt; of the React app is not yet stored on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;In this step, I&#39;ll show you how you can store the source code of the React app on GitHub.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Commit the changes you made while you were following this tutorial, to the &lt;code&gt;master&lt;/code&gt; branch of the local Git repository; then, push that branch up to the &lt;code&gt;master&lt;/code&gt; branch of the GitHub repository.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git add .&#xA;$ git commit -m &#34;Configure React app for deployment to GitHub Pages&#34;&#xA;$ git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;I recommend exploring the GitHub repository at this point. It will have two branches: &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt;. The &lt;code&gt;master&lt;/code&gt; branch will contain the React app&#39;s source code, while the &lt;code&gt;gh-pages&lt;/code&gt; branch will contain the distributable version of the React app.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://create-react-app.dev/docs/deployment/#github-pages&#34;&gt;The official &lt;code&gt;create-react-app&lt;/code&gt; deployment guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.blog/changelog/2020-09-03-build-and-deploy-github-pages-from-any-branch/&#34;&gt;GitHub blog: Build and deploy GitHub Pages from any branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gitname/react-gh-pages/issues/89#issuecomment-1207271670&#34;&gt;Preserving the &lt;code&gt;CNAME&lt;/code&gt; file when using a custom domain&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special thanks to GitHub (the company) for providing us with the GitHub Pages hosting service for free.&lt;/li&gt; &#xA; &lt;li&gt;And now, time to turn the default React app generated by &lt;code&gt;create-react-app&lt;/code&gt; into something unique!&lt;/li&gt; &#xA; &lt;li&gt;This repository consists of two branches: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;master&lt;/code&gt; - the &lt;em&gt;source code&lt;/em&gt; of the React app&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gh-pages&lt;/code&gt; - the React app &lt;em&gt;built from&lt;/em&gt; that source code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Thanks to these people for contributing to the maintenance of this tutorial.&lt;/p&gt; &#xA;&lt;!--&#xA;&#xA;Template:&#xA;---------&#xA;&#xA;&lt;a href=&#34;https://github.com/____&#34; target=&#34;_blank&#34; title=&#34;____&#34;&gt;&#xA;  &lt;img src=&#34;https://github.com/____.png?size=40&#34; height=&#34;40&#34; width=&#34;40&#34; alt=&#34;____&#34; /&gt;&#xA;&lt;/a&gt;&#xA;&#xA;Instructions:&#xA;-------------&#xA;&#xA;1. Copy the template and paste it below.&#xA;2. Replace the four &#34;____&#34; strings with the contributor&#39;s GitHub username.&#xA;&#xA;Note: I specified the avatars using HTML because, when I did so using Markdown,&#xA;      only the _custom_ avatars appeared at the size I specified via the URL&#xA;      (e.g. 40px squared, for `https://github.com/gitname.png?size=40`);&#xA;      the GitHub-generated avatars seemed to ignore the size parameter and,&#xA;      instead, appear at their full size (approximately 420px squared).&#xA;      By using HTML, I can force _both_ types to appear at 40px squared.&#xA;&#xA;--&gt; &#xA;&lt;a href=&#34;https://github.com/gitname&#34; target=&#34;_blank&#34; title=&#34;gitname&#34;&gt; &lt;img src=&#34;https://github.com/gitname.png?size=40&#34; height=&#34;40&#34; width=&#34;40&#34; alt=&#34;gitname&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/rhulse&#34; target=&#34;_blank&#34; title=&#34;rhulse&#34;&gt; &lt;img src=&#34;https://github.com/rhulse.png?size=40&#34; height=&#34;40&#34; width=&#34;40&#34; alt=&#34;rhulse&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/AbhishekCode&#34; target=&#34;_blank&#34; title=&#34;AbhishekCode&#34;&gt; &lt;img src=&#34;https://github.com/AbhishekCode.png?size=40&#34; height=&#34;40&#34; width=&#34;40&#34; alt=&#34;AbhishekCode&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/adnjoo&#34; target=&#34;_blank&#34; title=&#34;adnjoo&#34;&gt; &lt;img src=&#34;https://github.com/adnjoo.png?size=40&#34; height=&#34;40&#34; width=&#34;40&#34; alt=&#34;adnjoo&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/thebeatlesphan&#34; target=&#34;_blank&#34; title=&#34;thebeatlesphan&#34;&gt; &lt;img src=&#34;https://github.com/thebeatlesphan.png?size=40&#34; height=&#34;40&#34; width=&#34;40&#34; alt=&#34;thebeatlesphan&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/valerio-pescatori&#34; target=&#34;_blank&#34; title=&#34;valerio-pescatori&#34;&gt; &lt;img src=&#34;https://github.com/valerio-pescatori.png?size=40&#34; height=&#34;40&#34; width=&#34;40&#34; alt=&#34;valerio-pescatori&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This list is maintained manually—for now—and includes (a) each person who submitted a pull request that was eventually merged into &lt;code&gt;master&lt;/code&gt;, and (b) each person who contributed in a different way (e.g. providing constructive feedback) and who approved of me including them in this list.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lingo3d/lingo3d</title>
    <updated>2022-09-12T01:42:32Z</updated>
    <id>tag:github.com,2022-09-12:/lingo3d/lingo3d</id>
    <link href="https://github.com/lingo3d/lingo3d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lingo3D is a web-first 3d game development library with React and Vue integration.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Lingo3D?&lt;/h2&gt; &#xA;&lt;p&gt;Lingo3D is a React/Vue 3d game development framework that ships with a complete visual editor&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.lingo3d.com&#34;&gt; &lt;img src=&#34;https://github.com/lingo3d/lingo3d-readme/raw/main/image/bg-top.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/lingo3d-react&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/npm--React-1.3.6-blue&#34; alt=&#34;npm package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/lingo3d&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/npm-1.11.3-green&#34; alt=&#34;npm package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/lingo3d-vue&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/npm--Vue-1.3.6-yellow&#34; alt=&#34;npm package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/lingo3d-vanilla&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/npm--vanilla-1.3.4-red&#34; alt=&#34;npm package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.lingo3d.com/examples&#34;&gt; &lt;img src=&#34;https://github.com/lingo3d/lingo3d-readme/raw/main/image/examples.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;yarn install&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add lingo3d-react&#xA;yarn add lingo3d-vue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;npm install&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install lingo3d-react&#xA;npm install lingo3d-vue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lingo3d.com/documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>