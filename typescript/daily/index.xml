<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-14T01:40:41Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vercel/swr</title>
    <updated>2022-12-14T01:40:41Z</updated>
    <id>tag:github.com,2022-12-14:/vercel/swr</id>
    <link href="https://github.com/vercel/swr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Hooks for Data Fetching&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://swr.vercel.app&#34;&gt;&lt;img src=&#34;https://assets.vercel.com/image/upload/v1572289618/swr/banner.png&#34; alt=&#34;SWR&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Vercel logo&#34; href=&#34;https://vercel.com&#34;&gt; &lt;img src=&#34;https://badgen.net/badge/icon/Made%20by%20Vercel?icon=zeit&amp;amp;label&amp;amp;color=black&amp;amp;labelColor=black&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a aria-label=&#34;NPM version&#34; href=&#34;https://www.npmjs.com/package/swr&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://badgen.net/npm/v/swr&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Package size&#34; href=&#34;https://bundlephobia.com/result?p=swr&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://badgen.net/bundlephobia/minzip/swr&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;License&#34; href=&#34;https://github.com/vercel/swr/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://badgen.net/npm/license/swr&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;SWR is a React Hooks library for data fetching.&lt;/p&gt; &#xA;&lt;p&gt;The name “&lt;strong&gt;SWR&lt;/strong&gt;” is derived from &lt;code&gt;stale-while-revalidate&lt;/code&gt;, a cache invalidation strategy popularized by &lt;a href=&#34;https://tools.ietf.org/html/rfc5861&#34;&gt;HTTP RFC 5861&lt;/a&gt;. &lt;strong&gt;SWR&lt;/strong&gt; first returns the data from cache (stale), then sends the request (revalidate), and finally comes with the up-to-date data again.&lt;/p&gt; &#xA;&lt;p&gt;With just one hook, you can significantly simplify the data fetching logic in your project. And it also covered in all aspects of speed, correctness, and stability to help you build better experiences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;, &lt;strong&gt;lightweight&lt;/strong&gt; and &lt;strong&gt;reusable&lt;/strong&gt; data fetching&lt;/li&gt; &#xA; &lt;li&gt;Transport and protocol agnostic&lt;/li&gt; &#xA; &lt;li&gt;Built-in &lt;strong&gt;cache&lt;/strong&gt; and request deduplication&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-time&lt;/strong&gt; experience&lt;/li&gt; &#xA; &lt;li&gt;Revalidation on focus&lt;/li&gt; &#xA; &lt;li&gt;Revalidation on network recovery&lt;/li&gt; &#xA; &lt;li&gt;Polling&lt;/li&gt; &#xA; &lt;li&gt;Pagination and scroll position recovery&lt;/li&gt; &#xA; &lt;li&gt;SSR and SSG&lt;/li&gt; &#xA; &lt;li&gt;Local mutation (Optimistic UI)&lt;/li&gt; &#xA; &lt;li&gt;Built-in smart error retry&lt;/li&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;React Suspense&lt;/li&gt; &#xA; &lt;li&gt;React Native&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;...and a lot more.&lt;/p&gt; &#xA;&lt;p&gt;With SWR, components will get &lt;strong&gt;a stream of data updates constantly and automatically&lt;/strong&gt;. Thus, the UI will be always &lt;strong&gt;fast&lt;/strong&gt; and &lt;strong&gt;reactive&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;View full documentation and examples on &lt;a href=&#34;https://swr.vercel.app&#34;&gt;swr.vercel.app&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import useSWR from &#39;swr&#39;&#xA;&#xA;function Profile() {&#xA;  const { data, error } = useSWR(&#39;/api/user&#39;, fetcher)&#xA;&#xA;  if (error) return &amp;lt;div&amp;gt;failed to load&amp;lt;/div&amp;gt;&#xA;  if (!data) return &amp;lt;div&amp;gt;loading...&amp;lt;/div&amp;gt;&#xA;  return &amp;lt;div&amp;gt;hello {data.name}!&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the React Hook &lt;code&gt;useSWR&lt;/code&gt; accepts a &lt;code&gt;key&lt;/code&gt; and a &lt;code&gt;fetcher&lt;/code&gt; function. The &lt;code&gt;key&lt;/code&gt; is a unique identifier of the request, normally the URL of the API. And the &lt;code&gt;fetcher&lt;/code&gt; accepts &lt;code&gt;key&lt;/code&gt; as its parameter and returns the data asynchronously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;useSWR&lt;/code&gt; also returns 2 values: &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;. When the request (fetcher) is not yet finished, &lt;code&gt;data&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;. And when we get a response, it sets &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; based on the result of &lt;code&gt;fetcher&lt;/code&gt; and rerenders the component.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;fetcher&lt;/code&gt; can be any asynchronous function, you can use your favourite data-fetching library to handle that part.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;View full documentation and examples on &lt;a href=&#34;https://swr.vercel.app&#34;&gt;swr.vercel.app&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;This library is created by the team behind &lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;, with contributions from our community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shu Ding (&lt;a href=&#34;https://twitter.com/shuding_&#34;&gt;@shuding_&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guillermo Rauch (&lt;a href=&#34;https://twitter.com/rauchg&#34;&gt;@rauchg&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joe Haddad (&lt;a href=&#34;https://twitter.com/timer150&#34;&gt;@timer150&lt;/a&gt;) - &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paco Coursey (&lt;a href=&#34;https://twitter.com/pacocoursey&#34;&gt;@pacocoursey&lt;/a&gt;) - &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vercel/swr/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to Ryan Chen for providing the awesome &lt;code&gt;swr&lt;/code&gt; npm package name!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>typestack/class-validator</title>
    <updated>2022-12-14T01:40:41Z</updated>
    <id>tag:github.com,2022-12-14:/typestack/class-validator</id>
    <link href="https://github.com/typestack/class-validator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decorator-based property validation for classes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;class-validator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/typestack/class-validator/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/typestack/class-validator&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/typestack/class-validator/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/js/class-validator&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/class-validator.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagephobia.now.sh/result?p=class-validator&#34;&gt;&lt;img src=&#34;https://packagephobia.now.sh/badge?p=class-validator&#34; alt=&#34;install size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Allows use of decorator and non-decorator based validation. Internally uses &lt;a href=&#34;https://github.com/chriso/validator.js&#34;&gt;validator.js&lt;/a&gt; to perform validation. Class-validator works on both browser and node.js platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#class-validator&#34;&gt;class-validator&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#passing-options&#34;&gt;Passing options&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validation-errors&#34;&gt;Validation errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validation-messages&#34;&gt;Validation messages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validating-arrays&#34;&gt;Validating arrays&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validating-sets&#34;&gt;Validating sets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validating-maps&#34;&gt;Validating maps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validating-nested-objects&#34;&gt;Validating nested objects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validating-promises&#34;&gt;Validating promises&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#inheriting-validation-decorators&#34;&gt;Inheriting Validation decorators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#conditional-validation&#34;&gt;Conditional validation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#whitelisting&#34;&gt;Whitelisting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#passing-context-to-decorators&#34;&gt;Passing context to decorators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#skipping-missing-properties&#34;&gt;Skipping missing properties&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validation-groups&#34;&gt;Validation groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#custom-validation-classes&#34;&gt;Custom validation classes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#custom-validation-decorators&#34;&gt;Custom validation decorators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#using-service-container&#34;&gt;Using service container&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#synchronous-validation&#34;&gt;Synchronous validation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#manual-validation&#34;&gt;Manual validation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validation-decorators&#34;&gt;Validation decorators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#defining-validation-schema-without-decorators&#34;&gt;Defining validation schema without decorators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validating-plain-objects&#34;&gt;Validating plain objects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#samples&#34;&gt;Samples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#release-notes&#34;&gt;Release notes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install class-validator --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Please use at least npm@6 when using class-validator. From npm@6 the dependency tree is flattened, which is required by &lt;code&gt;class-validator&lt;/code&gt; to function properly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create your class and put some validation decorators on the properties you want to validate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {&#xA;  validate,&#xA;  validateOrReject,&#xA;  Contains,&#xA;  IsInt,&#xA;  Length,&#xA;  IsEmail,&#xA;  IsFQDN,&#xA;  IsDate,&#xA;  Min,&#xA;  Max,&#xA;} from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @Length(10, 20)&#xA;  title: string;&#xA;&#xA;  @Contains(&#39;hello&#39;)&#xA;  text: string;&#xA;&#xA;  @IsInt()&#xA;  @Min(0)&#xA;  @Max(10)&#xA;  rating: number;&#xA;&#xA;  @IsEmail()&#xA;  email: string;&#xA;&#xA;  @IsFQDN()&#xA;  site: string;&#xA;&#xA;  @IsDate()&#xA;  createDate: Date;&#xA;}&#xA;&#xA;let post = new Post();&#xA;post.title = &#39;Hello&#39;; // should not pass&#xA;post.text = &#39;this is a great post about hell world&#39;; // should not pass&#xA;post.rating = 11; // should not pass&#xA;post.email = &#39;google.com&#39;; // should not pass&#xA;post.site = &#39;googlecom&#39;; // should not pass&#xA;&#xA;validate(post).then(errors =&amp;gt; {&#xA;  // errors is an array of validation errors&#xA;  if (errors.length &amp;gt; 0) {&#xA;    console.log(&#39;validation failed. errors: &#39;, errors);&#xA;  } else {&#xA;    console.log(&#39;validation succeed&#39;);&#xA;  }&#xA;});&#xA;&#xA;validateOrReject(post).catch(errors =&amp;gt; {&#xA;  console.log(&#39;Promise rejected (validation failed). Errors: &#39;, errors);&#xA;});&#xA;// or&#xA;async function validateOrRejectExample(input) {&#xA;  try {&#xA;    await validateOrReject(input);&#xA;  } catch (errors) {&#xA;    console.log(&#39;Caught promise rejection (validation failed). Errors: &#39;, errors);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;validate&lt;/code&gt; function optionally expects a &lt;code&gt;ValidatorOptions&lt;/code&gt; object as a second parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export interface ValidatorOptions {&#xA;  skipMissingProperties?: boolean;&#xA;  whitelist?: boolean;&#xA;  forbidNonWhitelisted?: boolean;&#xA;  groups?: string[];&#xA;  dismissDefaultMessages?: boolean;&#xA;  validationError?: {&#xA;    target?: boolean;&#xA;    value?: boolean;&#xA;  };&#xA;&#xA;  forbidUnknownValues?: boolean;&#xA;  stopAtFirstError?: boolean;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; The &lt;code&gt;forbidUnknownValues&lt;/code&gt; value is set to &lt;code&gt;true&lt;/code&gt; by default and &lt;strong&gt;it is highly advised to keep the default&lt;/strong&gt;. Setting it to &lt;code&gt;false&lt;/code&gt; will result unknown objects passing the validation!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Validation errors&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;validate&lt;/code&gt; method returns an array of &lt;code&gt;ValidationError&lt;/code&gt; objects. Each &lt;code&gt;ValidationError&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;{&#xA;    target: Object; // Object that was validated.&#xA;    property: string; // Object&#39;s property that haven&#39;t pass validation.&#xA;    value: any; // Value that haven&#39;t pass a validation.&#xA;    constraints?: { // Constraints that failed validation with error messages.&#xA;        [type: string]: string;&#xA;    };&#xA;    children?: ValidationError[]; // Contains all nested validation errors of the property&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In our case, when we validated a Post object, we have such an array of &lt;code&gt;ValidationError&lt;/code&gt; objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;[{&#xA;    target: /* post object */,&#xA;    property: &#34;title&#34;,&#xA;    value: &#34;Hello&#34;,&#xA;    constraints: {&#xA;        length: &#34;$property must be longer than or equal to 10 characters&#34;&#xA;    }&#xA;}, {&#xA;    target: /* post object */,&#xA;    property: &#34;text&#34;,&#xA;    value: &#34;this is a great post about hell world&#34;,&#xA;    constraints: {&#xA;        contains: &#34;text must contain a hello string&#34;&#xA;    }&#xA;},&#xA;// and other errors&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want a &lt;code&gt;target&lt;/code&gt; to be exposed in validation errors, there is a special option when you use validator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;validator.validate(post, { validationError: { target: false } });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful when you send errors back over http, and you most probably don&#39;t want to expose the whole target object.&lt;/p&gt; &#xA;&lt;h2&gt;Validation messages&lt;/h2&gt; &#xA;&lt;p&gt;You can specify validation message in the decorator options and that message will be returned in the &lt;code&gt;ValidationError&lt;/code&gt; returned by the &lt;code&gt;validate&lt;/code&gt; method (in the case that validation for this field fails).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { MinLength, MaxLength } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @MinLength(10, {&#xA;    message: &#39;Title is too short&#39;,&#xA;  })&#xA;  @MaxLength(50, {&#xA;    message: &#39;Title is too long&#39;,&#xA;  })&#xA;  title: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are few special tokens you can use in your messages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$value&lt;/code&gt; - the value that is being validated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$property&lt;/code&gt; - name of the object&#39;s property being validated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$target&lt;/code&gt; - name of the object&#39;s class being validated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$constraint1&lt;/code&gt;, &lt;code&gt;$constraint2&lt;/code&gt;, ... &lt;code&gt;$constraintN&lt;/code&gt; - constraints defined by specific validation type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { MinLength, MaxLength } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @MinLength(10, {&#xA;    // here, $constraint1 will be replaced with &#34;10&#34;, and $value with actual supplied value&#xA;    message: &#39;Title is too short. Minimal length is $constraint1 characters, but actual is $value&#39;,&#xA;  })&#xA;  @MaxLength(50, {&#xA;    // here, $constraint1 will be replaced with &#34;50&#34;, and $value with actual supplied value&#xA;    message: &#39;Title is too long. Maximal length is $constraint1 characters, but actual is $value&#39;,&#xA;  })&#xA;  title: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you can provide a function, that returns a message. This allows you to create more granular messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { MinLength, MaxLength, ValidationArguments } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @MinLength(10, {&#xA;    message: (args: ValidationArguments) =&amp;gt; {&#xA;      if (args.value.length === 1) {&#xA;        return &#39;Too short, minimum length is 1 character&#39;;&#xA;      } else {&#xA;        return &#39;Too short, minimum length is &#39; + args.constraints[0] + &#39; characters&#39;;&#xA;      }&#xA;    },&#xA;  })&#xA;  title: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Message function accepts &lt;code&gt;ValidationArguments&lt;/code&gt; which contains the following information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt; - the value that is being validated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;constraints&lt;/code&gt; - array of constraints defined by specific validation type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;targetName&lt;/code&gt; - name of the object&#39;s class being validated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;object&lt;/code&gt; - object that is being validated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;property&lt;/code&gt; - name of the object&#39;s property being validated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Validating arrays&lt;/h2&gt; &#xA;&lt;p&gt;If your field is an array and you want to perform validation of each item in the array you must specify a special &lt;code&gt;each: true&lt;/code&gt; decorator option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { MinLength, MaxLength } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @MaxLength(20, {&#xA;    each: true,&#xA;  })&#xA;  tags: string[];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will validate each item in &lt;code&gt;post.tags&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;h2&gt;Validating sets&lt;/h2&gt; &#xA;&lt;p&gt;If your field is a set and you want to perform validation of each item in the set you must specify a special &lt;code&gt;each: true&lt;/code&gt; decorator option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { MinLength, MaxLength } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @MaxLength(20, {&#xA;    each: true,&#xA;  })&#xA;  tags: Set&amp;lt;string&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will validate each item in &lt;code&gt;post.tags&lt;/code&gt; set.&lt;/p&gt; &#xA;&lt;h2&gt;Validating maps&lt;/h2&gt; &#xA;&lt;p&gt;If your field is a map and you want to perform validation of each item in the map you must specify a special &lt;code&gt;each: true&lt;/code&gt; decorator option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { MinLength, MaxLength } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @MaxLength(20, {&#xA;    each: true,&#xA;  })&#xA;  tags: Map&amp;lt;string, string&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will validate each item in &lt;code&gt;post.tags&lt;/code&gt; map.&lt;/p&gt; &#xA;&lt;h2&gt;Validating nested objects&lt;/h2&gt; &#xA;&lt;p&gt;If your object contains nested objects and you want the validator to perform their validation too, then you need to use the &lt;code&gt;@ValidateNested()&lt;/code&gt; decorator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ValidateNested } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @ValidateNested()&#xA;  user: User;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that nested object &lt;em&gt;must&lt;/em&gt; be an instance of a class, otherwise &lt;code&gt;@ValidateNested&lt;/code&gt; won&#39;t know what class is target of validation. Check also &lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/#validating-plain-objects&#34;&gt;Validating plain objects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also works with multi-dimensional array, like :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ValidateNested } from &#39;class-validator&#39;;&#xA;&#xA;export class Plan2D {&#xA;  @ValidateNested()&#xA;  matrix: Point[][];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validating promises&lt;/h2&gt; &#xA;&lt;p&gt;If your object contains property with &lt;code&gt;Promise&lt;/code&gt;-returned value that should be validated, then you need to use the &lt;code&gt;@ValidatePromise()&lt;/code&gt; decorator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ValidatePromise, Min } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @Min(0)&#xA;  @ValidatePromise()&#xA;  userId: Promise&amp;lt;number&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also works great with &lt;code&gt;@ValidateNested&lt;/code&gt; decorator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ValidateNested, ValidatePromise } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  @ValidateNested()&#xA;  @ValidatePromise()&#xA;  user: Promise&amp;lt;User&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inheriting Validation decorators&lt;/h2&gt; &#xA;&lt;p&gt;When you define a subclass which extends from another one, the subclass will automatically inherit the parent&#39;s decorators. If a property is redefined in the descendant, class decorators will be applied on it from both its own class and the base class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { validate } from &#39;class-validator&#39;;&#xA;&#xA;class BaseContent {&#xA;  @IsEmail()&#xA;  email: string;&#xA;&#xA;  @IsString()&#xA;  password: string;&#xA;}&#xA;&#xA;class User extends BaseContent {&#xA;  @MinLength(10)&#xA;  @MaxLength(20)&#xA;  name: string;&#xA;&#xA;  @Contains(&#39;hello&#39;)&#xA;  welcome: string;&#xA;&#xA;  @MinLength(20)&#xA;  password: string;&#xA;}&#xA;&#xA;let user = new User();&#xA;&#xA;user.email = &#39;invalid email&#39;; // inherited property&#xA;user.password = &#39;too short&#39;; // password wil be validated not only against IsString, but against MinLength as well&#xA;user.name = &#39;not valid&#39;;&#xA;user.welcome = &#39;helo&#39;;&#xA;&#xA;validate(user).then(errors =&amp;gt; {&#xA;  // ...&#xA;}); // it will return errors for email, title and text properties&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Conditional validation&lt;/h2&gt; &#xA;&lt;p&gt;The conditional validation decorator (&lt;code&gt;@ValidateIf&lt;/code&gt;) can be used to ignore the validators on a property when the provided condition function returns false. The condition function takes the object being validated and must return a &lt;code&gt;boolean&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ValidateIf, IsNotEmpty } from &#39;class-validator&#39;;&#xA;&#xA;export class Post {&#xA;  otherProperty: string;&#xA;&#xA;  @ValidateIf(o =&amp;gt; o.otherProperty === &#39;value&#39;)&#xA;  @IsNotEmpty()&#xA;  example: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, the validation rules applied to &lt;code&gt;example&lt;/code&gt; won&#39;t be run unless the object&#39;s &lt;code&gt;otherProperty&lt;/code&gt; is &lt;code&gt;&#34;value&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that when the condition is false all validation decorators are ignored, including &lt;code&gt;isDefined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Whitelisting&lt;/h2&gt; &#xA;&lt;p&gt;Even if your object is an instance of a validation class it can contain additional properties that are not defined. If you do not want to have such properties on your object, pass special flag to &lt;code&gt;validate&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { validate } from &#39;class-validator&#39;;&#xA;// ...&#xA;validate(post, { whitelist: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will strip all properties that don&#39;t have any decorators. If no other decorator is suitable for your property, you can use @Allow decorator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {validate, Allow, Min} from &#34;class-validator&#34;;&#xA;&#xA;export class Post {&#xA;&#xA;    @Allow()&#xA;    title: string;&#xA;&#xA;    @Min(0)&#xA;    views: number;&#xA;&#xA;    nonWhitelistedProperty: number;&#xA;}&#xA;&#xA;let post = new Post();&#xA;post.title = &#39;Hello world!&#39;;&#xA;post.views = 420;&#xA;&#xA;post.nonWhitelistedProperty = 69;&#xA;(post as any).anotherNonWhitelistedProperty = &#34;something&#34;;&#xA;&#xA;validate(post).then(errors =&amp;gt; {&#xA;  // post.nonWhitelistedProperty is not defined&#xA;  // (post as any).anotherNonWhitelistedProperty is not defined&#xA;  ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would rather to have an error thrown when any non-whitelisted properties are present, pass another flag to &lt;code&gt;validate&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { validate } from &#39;class-validator&#39;;&#xA;// ...&#xA;validate(post, { whitelist: true, forbidNonWhitelisted: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Passing context to decorators&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to pass a custom object to decorators which will be accessible on the &lt;code&gt;ValidationError&lt;/code&gt; instance of the property if validation failed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { validate } from &#39;class-validator&#39;;&#xA;&#xA;class MyClass {&#xA;  @MinLength(32, {&#xA;    message: &#39;EIC code must be at least 32 characters&#39;,&#xA;    context: {&#xA;      errorCode: 1003,&#xA;      developerNote: &#39;The validated string must contain 32 or more characters.&#39;,&#xA;    },&#xA;  })&#xA;  eicCode: string;&#xA;}&#xA;&#xA;const model = new MyClass();&#xA;&#xA;validate(model).then(errors =&amp;gt; {&#xA;  //errors[0].contexts[&#39;minLength&#39;].errorCode === 1003&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Skipping missing properties&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you may want to skip validation of the properties that do not exist in the validating object. This is usually desirable when you want to update some parts of the object, and want to validate only updated parts, but skip everything else, e.g. skip missing properties. In such situations you will need to pass a special flag to &lt;code&gt;validate&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { validate } from &#39;class-validator&#39;;&#xA;// ...&#xA;validate(post, { skipMissingProperties: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When skipping missing properties, sometimes you want not to skip all missing properties, some of them maybe required for you, even if skipMissingProperties is set to true. For such cases you should use &lt;code&gt;@IsDefined()&lt;/code&gt; decorator. &lt;code&gt;@IsDefined()&lt;/code&gt; is the only decorator that ignores &lt;code&gt;skipMissingProperties&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Validation groups&lt;/h2&gt; &#xA;&lt;p&gt;In different situations you may want to use different validation schemas of the same object. In such cases you can use validation groups.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Calling a validation with a group combination that would not result in a validation (eg: non existent group name) will result in a unknown value error. When validating with groups the provided group combination should match at least one decorator.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { validate, Min, Length } from &#39;class-validator&#39;;&#xA;&#xA;export class User {&#xA;  @Min(12, {&#xA;    groups: [&#39;registration&#39;],&#xA;  })&#xA;  age: number;&#xA;&#xA;  @Length(2, 20, {&#xA;    groups: [&#39;registration&#39;, &#39;admin&#39;],&#xA;  })&#xA;  name: string;&#xA;}&#xA;&#xA;let user = new User();&#xA;user.age = 10;&#xA;user.name = &#39;Alex&#39;;&#xA;&#xA;validate(user, {&#xA;  groups: [&#39;registration&#39;],&#xA;}); // this will not pass validation&#xA;&#xA;validate(user, {&#xA;  groups: [&#39;admin&#39;],&#xA;}); // this will pass validation&#xA;&#xA;validate(user, {&#xA;  groups: [&#39;registration&#39;, &#39;admin&#39;],&#xA;}); // this will not pass validation&#xA;&#xA;validate(user, {&#xA;  groups: undefined, // the default&#xA;}); // this will not pass validation since all properties get validated regardless of their groups&#xA;&#xA;validate(user, {&#xA;  groups: [],&#xA;}); // this will not pass validation, (equivalent to &#39;groups: undefined&#39;, see above)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a special flag &lt;code&gt;always: true&lt;/code&gt; in validation options that you can use. This flag says that this validation must be applied always no matter which group is used.&lt;/p&gt; &#xA;&lt;h2&gt;Custom validation classes&lt;/h2&gt; &#xA;&lt;p&gt;If you have custom validation logic you can create a &lt;em&gt;Constraint class&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First create a file, lets say &lt;code&gt;CustomTextLength.ts&lt;/code&gt;, and define a new class:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments } from &#39;class-validator&#39;;&#xA;&#xA;@ValidatorConstraint({ name: &#39;customText&#39;, async: false })&#xA;export class CustomTextLength implements ValidatorConstraintInterface {&#xA;  validate(text: string, args: ValidationArguments) {&#xA;    return text.length &amp;gt; 1 &amp;amp;&amp;amp; text.length &amp;lt; 10; // for async validations you must return a Promise&amp;lt;boolean&amp;gt; here&#xA;  }&#xA;&#xA;  defaultMessage(args: ValidationArguments) {&#xA;    // here you can provide default error message if validation failed&#xA;    return &#39;Text ($value) is too short or too long!&#39;;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We marked our class with &lt;code&gt;@ValidatorConstraint&lt;/code&gt; decorator. You can also supply a validation constraint name - this name will be used as &#34;error type&#34; in ValidationError. If you will not supply a constraint name - it will be auto-generated.&lt;/p&gt; &lt;p&gt;Our class must implement &lt;code&gt;ValidatorConstraintInterface&lt;/code&gt; interface and its &lt;code&gt;validate&lt;/code&gt; method, which defines validation logic. If validation succeeds, method returns true, otherwise false. Custom validator can be asynchronous, if you want to perform validation after some asynchronous operations, simply return a promise with boolean inside in &lt;code&gt;validate&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;Also we defined optional method &lt;code&gt;defaultMessage&lt;/code&gt; which defines a default error message, in the case that the decorator&#39;s implementation doesn&#39;t set an error message.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Then you can use your new validation constraint in your class:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Validate } from &#39;class-validator&#39;;&#xA;import { CustomTextLength } from &#39;./CustomTextLength&#39;;&#xA;&#xA;export class Post {&#xA;  @Validate(CustomTextLength, {&#xA;    message: &#39;Title is too short or long!&#39;,&#xA;  })&#xA;  title: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here we set our newly created &lt;code&gt;CustomTextLength&lt;/code&gt; validation constraint for &lt;code&gt;Post.title&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And use validator as usual:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { validate } from &#39;class-validator&#39;;&#xA;&#xA;validate(post).then(errors =&amp;gt; {&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also pass constraints to your validator, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Validate } from &#39;class-validator&#39;;&#xA;import { CustomTextLength } from &#39;./CustomTextLength&#39;;&#xA;&#xA;export class Post {&#xA;  @Validate(CustomTextLength, [3, 20], {&#xA;    message: &#39;Wrong post title&#39;,&#xA;  })&#xA;  title: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use them from &lt;code&gt;validationArguments&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from &#39;class-validator&#39;;&#xA;&#xA;@ValidatorConstraint()&#xA;export class CustomTextLength implements ValidatorConstraintInterface {&#xA;  validate(text: string, validationArguments: ValidationArguments) {&#xA;    return text.length &amp;gt; validationArguments.constraints[0] &amp;amp;&amp;amp; text.length &amp;lt; validationArguments.constraints[1];&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom validation decorators&lt;/h2&gt; &#xA;&lt;p&gt;You can also create a custom decorators. Its the most elegant way of using a custom validations. Lets create a decorator called &lt;code&gt;@IsLongerThan&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a decorator itself:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { registerDecorator, ValidationOptions, ValidationArguments } from &#39;class-validator&#39;;&#xA;&#xA;export function IsLongerThan(property: string, validationOptions?: ValidationOptions) {&#xA;  return function (object: Object, propertyName: string) {&#xA;    registerDecorator({&#xA;      name: &#39;isLongerThan&#39;,&#xA;      target: object.constructor,&#xA;      propertyName: propertyName,&#xA;      constraints: [property],&#xA;      options: validationOptions,&#xA;      validator: {&#xA;        validate(value: any, args: ValidationArguments) {&#xA;          const [relatedPropertyName] = args.constraints;&#xA;          const relatedValue = (args.object as any)[relatedPropertyName];&#xA;          return typeof value === &#39;string&#39; &amp;amp;&amp;amp; typeof relatedValue === &#39;string&#39; &amp;amp;&amp;amp; value.length &amp;gt; relatedValue.length; // you can return a Promise&amp;lt;boolean&amp;gt; here as well, if you want to make async validation&#xA;        },&#xA;      },&#xA;    });&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put it to use:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { IsLongerThan } from &#39;./IsLongerThan&#39;;&#xA;&#xA;export class Post {&#xA;  title: string;&#xA;&#xA;  @IsLongerThan(&#39;title&#39;, {&#xA;    /* you can also use additional validation options, like &#34;groups&#34; in your custom validation decorators. &#34;each&#34; is not supported */&#xA;    message: &#39;Text must be longer than the title&#39;,&#xA;  })&#xA;  text: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In your custom decorators you can also use &lt;code&gt;ValidationConstraint&lt;/code&gt;. Lets create another custom validation decorator called &lt;code&gt;IsUserAlreadyExist&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a ValidationConstraint and decorator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {&#xA;  registerDecorator,&#xA;  ValidationOptions,&#xA;  ValidatorConstraint,&#xA;  ValidatorConstraintInterface,&#xA;  ValidationArguments,&#xA;} from &#39;class-validator&#39;;&#xA;&#xA;@ValidatorConstraint({ async: true })&#xA;export class IsUserAlreadyExistConstraint implements ValidatorConstraintInterface {&#xA;  validate(userName: any, args: ValidationArguments) {&#xA;    return UserRepository.findOneByName(userName).then(user =&amp;gt; {&#xA;      if (user) return false;&#xA;      return true;&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;export function IsUserAlreadyExist(validationOptions?: ValidationOptions) {&#xA;  return function (object: Object, propertyName: string) {&#xA;    registerDecorator({&#xA;      target: object.constructor,&#xA;      propertyName: propertyName,&#xA;      options: validationOptions,&#xA;      constraints: [],&#xA;      validator: IsUserAlreadyExistConstraint,&#xA;    });&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;note that we marked our constraint that it will by async by adding &lt;code&gt;{ async: true }&lt;/code&gt; in validation options.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And put it to use:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { IsUserAlreadyExist } from &#39;./IsUserAlreadyExist&#39;;&#xA;&#xA;export class User {&#xA;  @IsUserAlreadyExist({&#xA;    message: &#39;User $value already exists. Choose another name.&#39;,&#xA;  })&#xA;  name: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using service container&lt;/h2&gt; &#xA;&lt;p&gt;Validator supports service container in the case if want to inject dependencies into your custom validator constraint classes. Here is example how to integrate it with &lt;a href=&#34;https://github.com/pleerock/typedi&#34;&gt;typedi&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Container } from &#39;typedi&#39;;&#xA;import { useContainer, Validator } from &#39;class-validator&#39;;&#xA;&#xA;// do this somewhere in the global application level:&#xA;useContainer(Container);&#xA;let validator = Container.get(Validator);&#xA;&#xA;// now everywhere you can inject Validator class which will go from the container&#xA;// also you can inject classes using constructor injection into your custom ValidatorConstraint-s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Synchronous validation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to perform a simple non async validation you can use &lt;code&gt;validateSync&lt;/code&gt; method instead of regular &lt;code&gt;validate&lt;/code&gt; method. It has the same arguments as &lt;code&gt;validate&lt;/code&gt; method. But note, this method &lt;strong&gt;ignores&lt;/strong&gt; all async validations you have.&lt;/p&gt; &#xA;&lt;h2&gt;Manual validation&lt;/h2&gt; &#xA;&lt;p&gt;There are several method exist in the Validator that allows to perform non-decorator based validation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { isEmpty, isBoolean } from &#39;class-validator&#39;;&#xA;&#xA;isEmpty(value);&#xA;isBoolean(value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validation decorators&lt;/h2&gt; &#xA;&lt;!-- Disable table formatting because Prettier messing it up. --&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Decorator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Common validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsDefined(value: any)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if value is defined (!== undefined, !== null). This is the only decorator that ignores skipMissingProperties option.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsOptional()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if given value is empty (=== null, === undefined) and if so, ignores all the validators on the property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Equals(comparison: any)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if value equals (&#34;===&#34;) comparison.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@NotEquals(comparison: any)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if value not equal (&#34;!==&#34;) comparison.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsEmpty()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if given value is empty (=== &#39;&#39;, === null, === undefined).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsNotEmpty()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if given value is not empty (!== &#39;&#39;, !== null, !== undefined).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsIn(values: any[])&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if value is in an array of allowed values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsNotIn(values: any[])&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if value is not in an array of disallowed values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Type validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsBoolean()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a value is a boolean.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsDate()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is a date.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsString()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is a string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsNumber(options: IsNumberOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is a number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsInt()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is an integer number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsArray()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsEnum(entity: object)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is a valid enum&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Number validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsDivisibleBy(num: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is a number that&#39;s divisible by another.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsPositive()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is a positive number greater than zero.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsNegative()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the value is a negative number smaller than zero.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Min(min: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the given number is greater than or equal to given number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Max(max: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the given number is less than or equal to given number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Date validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;`@MinDate(date: Date&lt;/td&gt; &#xA;   &lt;td&gt;(() =&amp;gt; Date))`&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;`@MaxDate(date: Date&lt;/td&gt; &#xA;   &lt;td&gt;(() =&amp;gt; Date))`&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;String-type validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsBooleanString()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a string is a boolean (e.g. is &#34;true&#34; or &#34;false&#34; or &#34;1&#34;, &#34;0&#34;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsDateString()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Alias for &lt;code&gt;@IsISO8601()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsNumberString(options?: IsNumericOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a string is a number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;String validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Contains(seed: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains the seed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@NotContains(seed: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string not contains the seed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsAlpha()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains only letters (a-zA-Z).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsAlphanumeric()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains only letters and numbers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsDecimal(options?: IsDecimalOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid decimal value. Default IsDecimalOptions are &lt;code&gt;force_decimal=False&lt;/code&gt;, &lt;code&gt;decimal_digits: &#39;1,&#39;&lt;/code&gt;, &lt;code&gt;locale: &#39;en-US&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsAscii()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains ASCII chars only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsBase32()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a string is base32 encoded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsBase58()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a string is base58 encoded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsBase64(options?: IsBase64Options)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a string is base64 encoded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsIBAN()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a string is a IBAN (International Bank Account Number).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsBIC()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if a string is a BIC (Bank Identification Code) or SWIFT code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsByteLength(min: number, max?: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string&#39;s length (in bytes) falls in a range.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsCreditCard()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a credit card.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsCurrency(options?: IsCurrencyOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid currency amount.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISO4217CurrencyCode()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an ISO 4217 currency code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsEthereumAddress()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an Ethereum address using basic regex. Does not validate address checksums.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsBtcAddress()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid BTC address.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsDataURI()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a data uri format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsEmail(options?: IsEmailOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an email.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsFQDN(options?: IsFQDNOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a fully qualified domain name (e.g. domain.com).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsFullWidth()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains any full-width chars.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsHalfWidth()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains any half-width chars.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsVariableWidth()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains a mixture of full and half-width chars.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsHexColor()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a hexadecimal color.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsHSL()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an HSL color based on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&#34;&gt;CSS Colors Level 4 specification&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsRgbColor(options?: IsRgbOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a rgb or rgba color.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsIdentityCard(locale?: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid identity card code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsPassportNumber(countryCode?: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid passport number relative to a specific country code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsPostalCode(locale?: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a postal code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsHexadecimal()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a hexadecimal number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsOctal()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a octal number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsMACAddress(options?: IsMACAddressOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a MAC Address.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsIP(version?: &#34;4&#34;|&#34;6&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an IP (version 4 or 6).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsPort()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid port number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISBN(version?: &#34;10&#34;|&#34;13&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an ISBN (version 10 or 13).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsEAN()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an if the string is an EAN (European Article Number).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISIN()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is an ISIN (stock/security identifier).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISO8601(options?: IsISO8601Options)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid ISO 8601 date format. Use the option strict = true for additional checks for a valid date.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsJSON()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is valid JSON.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsJWT()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is valid JWT.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsObject()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the object is valid Object (null, functions, arrays will return false).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsNotEmptyObject()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the object is not empty.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsLowercase()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is lowercase.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsLatLong()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid latitude-longitude coordinate in the format lat, long.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsLatitude()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string or number is a valid latitude coordinate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsLongitude()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string or number is a valid longitude coordinate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsMobilePhone(locale: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a mobile phone number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISO31661Alpha2()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid ISO 3166-1 alpha-2 officially assigned country code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISO31661Alpha3()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid ISO 3166-1 alpha-3 officially assigned country code.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsLocale()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a locale.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsPhoneNumber(region: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid phone number using libphonenumber-js.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsMongoId()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsMultibyte()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains one or more multibyte chars.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsNumberString(options?: IsNumericOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is numeric.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsSurrogatePair()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string contains any surrogate pairs chars.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsTaxId()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid tax ID. Default locale is &lt;code&gt;en-US&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsUrl(options?: IsURLOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsMagnetURI()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Magnet_URI_scheme&#34;&gt;magnet uri format&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsUUID(version?: UUIDVersion)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a UUID (version 3, 4, 5 or all ).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsFirebasePushId()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a &lt;a href=&#34;https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html&#34;&gt;Firebase Push ID&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsUppercase()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is uppercase.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Length(min: number, max?: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string&#39;s length falls in a range.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@MinLength(min: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string&#39;s length is not less than given number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@MaxLength(max: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string&#39;s length is not more than given number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Matches(pattern: RegExp, modifiers?: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if string matches the pattern. Either matches(&#39;foo&#39;, /foo/i) or matches(&#39;foo&#39;, &#39;foo&#39;, &#39;i&#39;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsMilitaryTime()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid representation of military time in the format HH:MM.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsTimeZone()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string represents a valid IANA time-zone.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsHash(algorithm: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a hash The following types are supported:&lt;code&gt;md4&lt;/code&gt;, &lt;code&gt;md5&lt;/code&gt;, &lt;code&gt;sha1&lt;/code&gt;, &lt;code&gt;sha256&lt;/code&gt;, &lt;code&gt;sha384&lt;/code&gt;, &lt;code&gt;sha512&lt;/code&gt;, &lt;code&gt;ripemd128&lt;/code&gt;, &lt;code&gt;ripemd160&lt;/code&gt;, &lt;code&gt;tiger128&lt;/code&gt;, &lt;code&gt;tiger160&lt;/code&gt;, &lt;code&gt;tiger192&lt;/code&gt;, &lt;code&gt;crc32&lt;/code&gt;, &lt;code&gt;crc32b&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsMimeType()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string matches to a valid &lt;a href=&#34;https://en.wikipedia.org/wiki/Media_type&#34;&gt;MIME type&lt;/a&gt; format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsSemVer()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a Semantic Versioning Specification (SemVer).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISSN(options?: IsISSNOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a ISSN.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsISRC()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a &lt;a href=&#34;https://en.wikipedia.org/wiki/International_Standard_Recording_Code&#34;&gt;ISRC&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsRFC3339()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a valid &lt;a href=&#34;https://tools.ietf.org/html/rfc3339&#34;&gt;RFC 3339&lt;/a&gt; date.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsStrongPassword(options?: IsStrongPasswordOptions)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the string is a strong password.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Array validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@ArrayContains(values: any[])&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if array contains all values from the given array of values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@ArrayNotContains(values: any[])&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if array does not contain any of the given values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@ArrayNotEmpty()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if given array is not empty.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@ArrayMinSize(min: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the array&#39;s length is greater than or equal to the specified number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@ArrayMaxSize(max: number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the array&#39;s length is less or equal to the specified number.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@ArrayUnique(identifier?: (o) =&amp;gt; any)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if all array&#39;s values are unique. Comparison for objects is reference-based. Optional function can be speciefied which return value will be used for the comparsion.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Object validation decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@IsInstance(value: any)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the property is an instance of the passed value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Other decorators&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@Allow()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prevent stripping off the property when no other constraint is specified for it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Defining validation schema without decorators&lt;/h2&gt; &#xA;&lt;p&gt;Schema-based validation without decorators is no longer supported by &lt;code&gt;class-validator&lt;/code&gt;. This feature was broken in version 0.12 and it will not be fixed. If you are interested in schema-based validation, you can find several such frameworks in &lt;a href=&#34;https://github.com/colinhacks/zod#comparison&#34;&gt;the zod readme&#39;s comparison section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Validating plain objects&lt;/h2&gt; &#xA;&lt;p&gt;Due to nature of the decorators, the validated object has to be instantiated using &lt;code&gt;new Class()&lt;/code&gt; syntax. If you have your class defined using class-validator decorators and you want to validate plain JS object (literal object or returned by JSON.parse), you need to transform it to the class instance via using &lt;a href=&#34;https://github.com/pleerock/class-transformer&#34;&gt;class-transformer&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;Take a look on samples in &lt;a href=&#34;https://github.com/pleerock/class-validator/tree/master/sample&#34;&gt;./sample&lt;/a&gt; for more examples of usages.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;There are several extensions that simplify class-validator integration with other modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/19majkel94/class-transformer-validator&#34;&gt;class-validator integration&lt;/a&gt; with &lt;a href=&#34;https://github.com/pleerock/class-transformer&#34;&gt;class-transformer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yantrab/class-validator-rule&#34;&gt;class-validator-rule&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EndyKaufman/ngx-dynamic-form-builder&#34;&gt;ngx-dynamic-form-builder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abarghoud/ngx-reactive-form-class-validator&#34;&gt;abarghoud/ngx-reactive-form-class-validator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release notes&lt;/h2&gt; &#xA;&lt;p&gt;See information about breaking changes and release notes &lt;a href=&#34;https://raw.githubusercontent.com/typestack/class-validator/develop/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For information about how to contribute to this project, see &lt;a href=&#34;https://github.com/typestack/.github/raw/master/CONTRIBUTING.md&#34;&gt;TypeStack&#39;s general contribution guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spacebudz/nebula</title>
    <updated>2022-12-14T01:40:41Z</updated>
    <id>tag:github.com,2022-12-14:/spacebudz/nebula</id>
    <link href="https://github.com/spacebudz/nebula" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Cardano NFT marketplace contract including chain indexer and event listener for individual projects.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/spacebudz/nebula/main/assets/nebula.svg?sanitize=true&#34; align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Nebula&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A Cardano NFT marketplace contract including chain indexer and event listener for individual projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ The contract hasn&#39;t been thoroughly tested yet. Use the contract at your own risk. Changes/improvements will still happen. Changes can also be breaking.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deno.land/&#34;&gt;Deno&lt;/a&gt; $\ge$ Version 1.28.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Import &lt;code&gt;Contract&lt;/code&gt; and &lt;code&gt;Lucid&lt;/code&gt; and create royalty/fee token.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Contract } from &#34;https://deno.land/x/nebula@0.1.2/contract/mod.ts&#34;&#xA;import { Lucid, Blockfrost } from &#34;https://deno.land/x/lucid@0.7.9/mod.ts&#34;&#xA;&#xA;const lucid = await Lucid.new(&#xA;  new Blockfrost(&#xA;    &#34;https://cardano-preprod.blockfrost.io/api/v0&#34;,&#xA;    &#34;&amp;lt;project_id&amp;gt;&#34;,&#xA;  ),&#xA;  &#34;Preprod&#34;,&#xA;);&#xA;&#xA;lucid.selectWalletFromSeed(&#xA;  &#34;&amp;lt;seed_phrase&amp;gt;&#34;,&#xA;);&#xA;&#xA;const owner = &#34;addr...&#34;;&#xA;&#xA;const txHash = await Contract.createRoyalty(&#xA;  lucid,&#xA;  [{&#xA;    recipient:&#xA;      &#34;addr...&#34;,&#xA;    fee: 0.016, // 1.6%&#xA;    fixedFee: 1500000n, // lovelace&#xA;  }], &#xA;  owner,&#xA;);&#xA;console.log(txHash);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a unique royalty token and sends it to a script address controlled by the owner. The output contains the royalty/fee information. After calling &lt;code&gt;Contract.createRoyalty(..)&lt;/code&gt; you should see a message in the terminal including the &lt;code&gt;royalty token&lt;/code&gt;. Paste it into the Contract config as described in the next step.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Instantiate the contract and deploy reference scripts.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const contract = new Contract(lucid, {&#xA;  royaltyToken: &#34;&amp;lt;royalty_token&amp;gt;&#34;,&#xA;  owner, // Make sure you use the same owner here as in Contract.createRoyalty(..)!&#xA;  policyId: &#34;&amp;lt;policy_id_of_your_nft_project&amp;gt;&#34;,&#xA;});&#xA;&#xA;console.log(await contract.deployScripts());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After calling &lt;code&gt;contract.deployScripts()&lt;/code&gt; you should see a message in the terminal including the &lt;code&gt;tx hash&lt;/code&gt; of the deployment of the scripts. Paste it into the Contract config as described in the next step.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Re-instantiate the contract with reference scripts.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const contract = new Contract(lucid, {&#xA;  royaltyToken: &#34;&amp;lt;royalty_token&amp;gt;&#34;,&#xA;  owner, // Make sure you use the same owner here as the one in Contract.createRoyalty(..)!&#xA;  policyId: &#34;&amp;lt;policy_id_of_your_nft_project&amp;gt;&#34;,&#xA;  deployTxHash: &#34;&amp;lt;deploy_tx_hash&amp;gt;&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the contract is initialised.&lt;br&gt; &lt;strong&gt;Make sure you don&#39;t change the configuration as it could change the script hashes!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Time to play with the marketplace!&lt;/p&gt; &#xA;&lt;p&gt;Place a bid (on SpaceBud #10):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;console.log(await contract.bid(idToBud(10), 5000000000n));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accept bid (sell):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const [bid] = await contract.getBids(idToBud(10));&#xA;console.log(await contract.sell([{ bidUtxo: bid }]));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List an NFT (SpaceBud #10):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;console.log(await contract.list(idToBud(10), 6000000000n));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Buy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const [listing] = await contract.getListings(idToBud(10));&#xA;console.log(await contract.buy([listing]));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Place a floor/open bid with optional constraints (this only works if your NFT is CIP-0068 compliant):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;console.log(&#xA;  await contract.bidOpen(10000000000n, {&#xA;    types: [&#34;Bear&#34;],&#xA;    traits: [{ trait: &#34;Hockey Stick&#34; }],&#xA;  }),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accept open bid (with SpaceBud #650 as it is a Bear and has a Hockey Stick):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const [bid] = await contract.getBids(&#34;open&#34;);&#xA;console.log(await contract.sell([{ bidUtxo: bid, assetName: idToBud(650) }]));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And much more is possible!&lt;/p&gt; &#xA;&lt;h2&gt;Nebula Watcher&lt;/h2&gt; &#xA;&lt;p&gt;If you want to keep track of historic data or want to index marketplace data or want to listen to certain events, then you may want to run the watcher.&lt;br&gt; It is not a requirement to run the core of the marketplace.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deno.land/&#34;&gt;Deno&lt;/a&gt; $\ge$ Version 1.28.3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ogmios.dev/&#34;&gt;Ogmios&lt;/a&gt; $\ge$ Version 5.5.7&lt;/li&gt; &#xA; &lt;li&gt;Active connection to a Cardano node with Ogmios as bridge.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up the &lt;code&gt;config.ts&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Call &lt;code&gt;contract.getContractHashes()&lt;/code&gt; on your Contract instance to get all the relevant hashes you need for the config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {&#xA;  BidAndListingBundleEventData,&#xA;  BidAndListingSingleEventData,&#xA;  BidOpenEventData,&#xA;  Config,&#xA;  MarketplaceEvent,&#xA;  SaleBundleEventData,&#xA;  SaleSingleEventData,&#xA;} from &#34;https://deno.land/x/nebula@0.1.2/watcher/src/types.ts&#34;;&#xA;&#xA;&#xA;/** &#xA; * Run &#39;contract.getContractHashes()&#39; on your Contract instance to get all the relevant hashes you need for the config.&#xA; */&#xA;export const config: Config = {&#xA;  scriptHash: &#34;&amp;lt;script_hash&amp;gt;&#34;,&#xA;  bidPolicyId: &#34;&amp;lt;bid_policy_id&amp;gt;&#34;,&#xA;  projects: [&#34;&amp;lt;nft_policy_id&amp;gt;&#34;],&#xA;};&#xA;&#xA;// optionally handle events&#xA;export function eventsHandler(events: MarketplaceEvent[]) {&#xA;  for (const event of events) {&#xA;    switch (event.type) {&#xA;      case &#34;BidBundle&#34;: {&#xA;        const eventData: BidAndListingBundleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;BidOpen&#34;: {&#xA;        const eventData: BidOpenEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;BidSingle&#34;: {&#xA;        const eventData: BidAndListingSingleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;ListingBundle&#34;: {&#xA;        const eventData: BidAndListingBundleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;ListingSingle&#34;: {&#xA;        const eventData: BidAndListingSingleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;BuyBundle&#34;: {&#xA;        const eventData: SaleBundleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;BuySingle&#34;: {&#xA;        const eventData: SaleSingleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;SellBundle&#34;: {&#xA;        const eventData: SaleBundleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;SellSingle&#34;: {&#xA;        const eventData: SaleSingleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;CancelBidBundle&#34;: {&#xA;        const eventData: BidAndListingBundleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;CancelBidOpen&#34;: {&#xA;        const eventData: BidOpenEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;CancelBidSingle&#34;: {&#xA;        const eventData: BidAndListingSingleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;CancelListingBundle&#34;: {&#xA;        const eventData: BidAndListingBundleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;      case &#34;CancelListingSingle&#34;: {&#xA;        const eventData: BidAndListingSingleEventData = event.data;&#xA;        // Your logic here&#xA;        break;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start the watcher:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;deno run -A https://deno.land/x/nebula@0.1.2/watcher/mod.ts --ogmios-url ws://localhost:1337 --database ./marketplace.sqlite --config ./config.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/spacebudz/nebula/main/assets/watcher.png&#34; align=&#34;center&#34;&gt; &#xA;&lt;h2&gt;Nebula Querier&lt;/h2&gt; &#xA;&lt;p&gt;Run the querier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;deno run -A https://deno.land/x/nebula@0.1.2/watcher/querier.ts --database ./marketplace.sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Runs on port &lt;code&gt;3000&lt;/code&gt; by default. It hosts the database and allows you to make simple queries. The API will likely be extended and improved over time.&lt;/p&gt; &#xA;&lt;h2&gt;Nebula Contract&lt;/h2&gt; &#xA;&lt;p&gt;To execute the below listed commands you need to be in the &lt;code&gt;contract&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Bundle for NPM/Node&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;deno task build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outputs a &lt;code&gt;dist&lt;/code&gt; folder at &lt;code&gt;./contract/dist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compile contract&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/spacebudz/nebula/main/contract/src/ghc/README.md&#34;&gt;requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;deno task build:contract&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Protocol fee&lt;/h3&gt; &#xA;&lt;p&gt;Nebula charges by default a protocol fee for each sale, which is currently about &lt;code&gt;0.9 ADA&lt;/code&gt; (the minimum ADA by protocol parameters and it is adjusted automatically when the protocol parameters change). We appreciate all support to fund the development of Nebula. If you want to disable the protocol fee set the flag &lt;code&gt;fundProtocol&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; when instantiating the &lt;code&gt;Contract&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve and extend documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Move contract to Aiken.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make the Nebula contract also available on NPM as official package.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>