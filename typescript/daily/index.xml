<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-15T01:39:54Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Elliott-Chong/quizmify</title>
    <updated>2023-08-15T01:39:54Z</updated>
    <id>tag:github.com,2023-08-15:/Elliott-Chong/quizmify</id>
    <link href="https://github.com/Elliott-Chong/quizmify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; project bootstrapped with &lt;a href=&#34;https://github.com/vercel/next.js/tree/canary/packages/create-next-app&#34;&gt;&lt;code&gt;create-next-app&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;First, run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;# or&#xA;yarn dev&#xA;# or&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt; &#xA;&lt;p&gt;You can start editing the page by modifying &lt;code&gt;app/page.tsx&lt;/code&gt;. The page auto-updates as you edit the file.&lt;/p&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://nextjs.org/docs/basic-features/font-optimization&#34;&gt;&lt;code&gt;next/font&lt;/code&gt;&lt;/a&gt; to automatically optimize and load Inter, a custom Google Font.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about Next.js, take a look at the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/docs&#34;&gt;Next.js Documentation&lt;/a&gt; - learn about Next.js features and API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/learn&#34;&gt;Learn Next.js&lt;/a&gt; - an interactive Next.js tutorial.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out &lt;a href=&#34;https://github.com/vercel/next.js/&#34;&gt;the Next.js GitHub repository&lt;/a&gt; - your feedback and contributions are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Deploy on Vercel&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to deploy your Next.js app is to use the &lt;a href=&#34;https://vercel.com/new?utm_medium=default-template&amp;amp;filter=next.js&amp;amp;utm_source=create-next-app&amp;amp;utm_campaign=create-next-app-readme&#34;&gt;Vercel Platform&lt;/a&gt; from the creators of Next.js.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://nextjs.org/docs/deployment&#34;&gt;Next.js deployment documentation&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shikijs/shiki</title>
    <updated>2023-08-15T01:39:54Z</updated>
    <id>tag:github.com,2023-08-15:/shikijs/shiki</id>
    <link href="https://github.com/shikijs/shiki" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A beautiful Syntax Highlighter.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;We are working towards 1.0, which means:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0.13.0 will be the last minor version&lt;/li&gt; &#xA; &lt;li&gt;No new features, only minor bug fixes&lt;/li&gt; &#xA; &lt;li&gt;Work will happen in &lt;code&gt;dev&lt;/code&gt; branch&lt;/li&gt; &#xA; &lt;li&gt;If you want to help, or ask for features, comment in &lt;a href=&#34;https://github.com/shikijs/shiki/issues/424&#34;&gt;#424&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;Shiki&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Shiki is a beautiful syntax highlighter. &lt;a href=&#34;http://shiki.matsu.io&#34;&gt;Demo&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shikijs/shiki/actions&#34;&gt;&lt;img src=&#34;https://github.com/shikijs/shiki/workflows/CI/badge.svg?branch=main&#34; alt=&#34;Github Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/shiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/shiki.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/shiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/shiki.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Shiki uses TextMate grammars to tokenize strings, and colors the tokens via VS Code themes. In short, Shiki generates HTML that looks exactly like your code in VS Code, and it works great in your static website generator (or your dynamic website).&lt;/p&gt; &#xA;&lt;p&gt;No custom RegEx to maintain, no custom CSS to maintain, no custom HTML to maintain. And as your favorite languages and themes in VS Code evolve - your syntax highlighting will evolve too.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Get a quick start in Node.js or in plain websites with the instructions below.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;p&gt;To use Shiki in Node.js, install it with npm (or your favorite package manager):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i shiki&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const shiki = require(&#39;shiki&#39;)&#xA;&#xA;shiki&#xA;  .getHighlighter({&#xA;    theme: &#39;nord&#39;&#xA;  })&#xA;  .then(highlighter =&amp;gt; {&#xA;    console.log(highlighter.codeToHtml(`console.log(&#39;shiki&#39;);`, { lang: &#39;js&#39; }))&#xA;  })&#xA;&#xA;// &amp;lt;pre class=&#34;shiki nord&#34; style=&#34;background-color: #2e3440&#34;&amp;gt;&amp;lt;code&amp;gt;&#xA;//   &amp;lt;!-- Highlighted Code --&amp;gt;&#xA;// &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have a Node.js project, or if you just want to use the build in the browser, you can use one of the CDN builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/shiki&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;!-- or --&amp;gt;&#xA;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/shiki&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  shiki&#xA;    .getHighlighter({&#xA;      theme: &#39;nord&#39;,&#xA;      langs: [&#39;js&#39;],&#xA;    })&#xA;    .then(highlighter =&amp;gt; {&#xA;      const code = highlighter.codeToHtml(`console.log(&#39;shiki&#39;);`, { lang: &#39;js&#39; })&#xA;      document.getElementById(&#39;output&#39;).innerHTML = code&#xA;    })&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more custom usage, learn about &lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/#shikis-architecture&#34;&gt;Shiki&#39;s architecture&lt;/a&gt;, and take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/#configuration-and-options&#34;&gt;Configuration and Options&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;And after that you can (and should) check out the reference docs for deeper dives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/docs/themes.md&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/docs/languages.md&#34;&gt;Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/packages/renderer-svg/README.md&#34;&gt;SVG Renderer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/packages/vuepress-plugin/README.md&#34;&gt;vuepress-plugin-shiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shiki&#39;s architecture&lt;/h2&gt; &#xA;&lt;p&gt;Shiki has a lot of points for customization notably: themes, languages, and custom renderers.&lt;/p&gt; &#xA;&lt;p&gt;Shiki leverages the &lt;a href=&#34;https://macromates.com/manual/en/language_grammars&#34;&gt;TextMate&lt;/a&gt; grammar system to tokenize code. It uses the &lt;a href=&#34;https://github.com/microsoft/vscode-oniguruma&#34;&gt;VS Code Oniguruma&lt;/a&gt; library to do the heavy lifting of matching the grammar rules to code.&lt;/p&gt; &#xA;&lt;p&gt;At the core is Shiki&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/packages/shiki/src/highlighter.ts&#34;&gt;highlighter&lt;/a&gt;. The highlighter is a class which takes a theme and languages, and exposes functions like &lt;code&gt;codeToHtml&lt;/code&gt; which converts string of arbitrary code and returns a string of HTML for rendering on the web.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;getHighlighter&lt;/code&gt;, Shiki will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;load the theme and the languages you&#39;ve requested&lt;/li&gt; &#xA; &lt;li&gt;load the WebAssembly file from Oniguruma&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and return a &lt;code&gt;Highlighter&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;The default locations where the files are loaded from depend on the environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In Node.js:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Languages are loaded from &lt;code&gt;node_modules/shiki/languages&lt;/code&gt;. Similarly, the themes are loaded from &lt;code&gt;node_modules/shiki/themes&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Oniguruma WebAssembly file is loaded from the &lt;code&gt;node_modules/vscode-oniguruma/release/onig.wasm&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the browser:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Languages are loaded from &lt;code&gt;/languages&lt;/code&gt;, &lt;strong&gt;relative to your site&#39;s root&lt;/strong&gt;. Similarly, the themes are loaded from &lt;code&gt;/themes&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Oniguruma WebAssembly file is loaded from &lt;code&gt;/dist/onig.wasm&lt;/code&gt; path &lt;strong&gt;relative to your site&#39;s root&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After that you can use the highlighter to generate HTML using &lt;code&gt;highlighter.codeToHtml&lt;/code&gt;. This works by converting the code into tokens and then rendering the tokens using a default renderer which applies the theme&#39;s colors to the tokens.&lt;/p&gt; &#xA;&lt;p&gt;As with all things, there are more details, so let&#39;s take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/#configuration-and-options&#34;&gt;Configuration and Options&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and Options&lt;/h2&gt; &#xA;&lt;h3&gt;Creating the highlighter&lt;/h3&gt; &#xA;&lt;p&gt;The exported named function &lt;code&gt;getHighlighter&lt;/code&gt; returns a Promise, choose either the async/await syntax or the &lt;code&gt;.then&lt;/code&gt; syntax based on your preference:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Note no languages are specified. Which then defaults to load all languages.&#xA;// Which is probably ok in Node.js, but not something you want in the browser.&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This async code is&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Load the highlighter with a default theme and a list of languages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ONLY the languages specified will be loaded. If you need other languages later,&#xA;// you&#39;ll need to load them separately (see below).&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the highlighter with a default theme and no languages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ONLY the languages specified will be loaded. It&#39;s an empty array, so Shiki won&#39;t  preload anything.&#xA;// For every language that you need later you&#39;ll have to load it separately (see down below).&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: []&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the highlighter with multiple themes, and a list of languages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// The first theme in the list will be the default theme.&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  themes: [&#39;github-light&#39;, &#39;nord&#39;],&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the highlighter with multiple themes, a list of languages, and override the default paths for the languages and themes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const highlighter = await getHighlighter({&#xA;  themes: [&#39;github-light&#39;, &#39;nord&#39;],&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;],&#xA;  paths: {&#xA;    themes: &#39;/path/to/themes&#39;,&#xA;    languages: &#39;/path/to/languages&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Most likely you won&#39;t need to do this, but it&#39;s useful to understand the options.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Convert code to HTML&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;highlighter&lt;/code&gt; exposes a &lt;code&gt;codeToHtml&lt;/code&gt; method that takes a string of code, an options object, and returns a string of HTML.&lt;/p&gt; &#xA;&lt;p&gt;Convert code to HTML with the default theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const code = `console.log(&#34;Here is your code.&#34;);`&#xA;const output = highlighter.codeToHtml(code, { lang: &#39;js&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert code to HTML with a specific theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const code = `console.log(&#34;Here is your code.&#34;);`&#xA;const output = highlighter.codeToHtml(code, { lang: &#39;js&#39;, theme: &#39;nord&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load languages and themes after the highlighter has been created&lt;/h3&gt; &#xA;&lt;p&gt;You can load languages and themes after the highlighter has been created. For that, the highlighter exposes &lt;code&gt;getLoadedLanguages()&lt;/code&gt;/&lt;code&gt;getLoadedThemes()&lt;/code&gt; and &lt;code&gt;loadLanguage()&lt;/code&gt;/&lt;code&gt;loadTheme()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A good practice, especially for browser environments, is to initialize the highlighter with your most used languages and themes, and then load more languages and themes on demand.&lt;/p&gt; &#xA;&lt;p&gt;You can also access the list of all themes and languages which are bundled using &lt;code&gt;BUNDLED_LANGUAGES&lt;/code&gt; and &lt;code&gt;BUNDLED_THEMES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { BUNDLED_LANGUAGES, BUNDLED_THEMES, getHighlighter } from &#39;shiki&#39;&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&#xA;// Some code that tells you that you now need `ruby` highlighting&#xA;const code = imaginaryCodeThatNeedsRubyHighlighting()&#xA;const language = imaginaryLanguageDetection(code)&#xA;const newTheme = imaginaryCodeThatDefinesTheTheme()&#xA;&#xA;// Check for the loaded languages, and load the language if it&#39;s not loaded yet.&#xA;if (!highlighter.getLoadedLanguages().includes(language)) {&#xA;  // Check if the language is supported by Shiki&#xA;  const bundles = BUNDLED_LANGUAGES.filter((bundle) =&amp;gt; {&#xA;    // Languages are specified by their id, they can also have aliases (i. e. &#34;js&#34; and &#34;javascript&#34;)&#xA;    return bundle.id === language || bundle.aliases?.includes(language);&#xA;  });&#xA;  if (bundles.length &amp;gt; 0) {&#xA;    await highlighter.loadLanguage(language)&#xA;  } else {&#xA;    // Do some error handling or default to another language or...&#xA;  }&#xA;}&#xA;&#xA;// Check for the loaded themes, and load the theme if it&#39;s not loaded yet.&#xA;if (!highlighter.getLoadedThemes().includes(newTheme)) {&#xA;  // Check if the theme is supported by Shiki&#xA;  if (BUNDLED_THEMES.includes(newTheme) {&#xA;    await highlighter.loadTheme(newTheme)&#xA;  } else {&#xA;    // Do some error handling or default to another theme or...&#xA;  }&#xA;}&#xA;&#xA;const output = highlighter.codeToHtml(code, { lang: language, theme: newTheme })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify a custom root directory&lt;/h3&gt; &#xA;&lt;p&gt;You can specify a custom root directory for your languages and themes. This is useful if you want to use Shiki in a browser environment and want to specify a different host (and/or path), or if you want to specify a dedicated directory structure for the current host.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If used, &lt;code&gt;setCDN&lt;/code&gt; must be invoked before &lt;code&gt;getHighlighter&lt;/code&gt; is called. You won&#39;t have to use &lt;code&gt;setCDN&lt;/code&gt; if you use the pre-built packages on &lt;a href=&#34;https://unpkg.com/shiki%22&#34;&gt;unpkg&lt;/a&gt; or &lt;a href=&#34;https://cdn.jsdelivr.net/npm/shiki&#34;&gt;jsDelivr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Set a custom root path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getHighlighter, setCDN } from &#39;shiki&#39;&#xA;&#xA;// Assets will be loaded from the host root + asset path, for example `/assets/shiki/languages/&#39;&#xA;setCDN(&#39;/assets/shiki/&#39;)&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a custom host and root path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getHighlighter, setCDN } from &#39;shiki&#39;&#xA;&#xA;// Assets will be loaded from remote host + asset path, for example `https://your.cdn.com/your/path/languages/`&#xA;setCDN(&#39;https://your.cdn.com/your/path/&#39;)&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a custom root path and a custom asset path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getHighlighter, setCDN } from &#39;shiki&#39;&#xA;&#xA;setCDN(&#39;/assets/shiki/&#39;)&#xA;&#xA;// Languages will be loaded from `/assets/shiki/imported/` instead of `/languages/`.&#xA;// Themes will be loaded from `/assets/shiki/themes/` (as their default is not overridden).&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;  paths: {&#xA;    languages: &#39;imported/&#39;,&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify how to load WebAssembly&lt;/h3&gt; &#xA;&lt;p&gt;Shiki makes use of &lt;a href=&#34;https://github.com/microsoft/vscode-oniguruma&#34;&gt;VS Code Oniguruma&lt;/a&gt; for tokenization (see &lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/#shikis-architecture&#34;&gt;Shiki&#39;s Architecture&lt;/a&gt; for more information). Oniguruma is written in C and compiled to WebAssembly. Which means that the WebAssembly file needs to be loaded.&lt;/p&gt; &#xA;&lt;p&gt;For Node.js environments the WASM file is automatically loaded, for browser environments you can specify how to load the WASM file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If used, &lt;code&gt;setWASM&lt;/code&gt; must be invoked before &lt;code&gt;getHighlighter&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you make use of a reverse proxy like &lt;a href=&#34;https://www.nginx.com/&#34;&gt;nginx&lt;/a&gt; or &lt;a href=&#34;https://traefik.io/traefik/&#34;&gt;traefik&lt;/a&gt; you may have to specify in its configuration the MIME type for wasm files.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Use the default loader: (applies to Node.js and browser environments)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getHighlighter } from &#39;shiki&#39;&#xA;&#xA;// With the default settings, the WASM file will be loaded from `/dist/´.&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the default loader, and override the default path for the WASM file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getHighlighter } from &#39;shiki&#39;&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;],&#xA;  paths: {&#xA;    wasm: &#39;your/path/&#39; // If you use `setCDN`, this path will be relative to the CDN root.&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the WASM file yourself, and provide a &lt;code&gt;Response&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getHighlighter, setWasm } from &#39;shiki&#39;&#xA;&#xA;// It is recommended to use a Response object. Oniguruma will then use WebAssembly.instantiateStreaming(), which&#xA;// means it can start parsing the file while it&#39;s still downloading.&#xA;const wasmResponse = await fetch(&#39;/your/path/onig.wasm&#39;)&#xA;setWasm(wasmResponse)&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the WASM file yourself, and provide an &lt;code&gt;ArrayBuffer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getHighlighter, setWasm } from &#39;shiki&#39;&#xA;&#xA;// It is recommended to use a Response object. Oniguruma will then use WebAssembly.instantiateStreaming(), which&#xA;// means it can start parsing the file while it&#39;s still downloading.&#xA;//&#xA;// With an ArrayBuffer this is not possible, so the file will be fully downloaded before parsing starts.&#xA;const wasmBuffer = await fetch(&#39;/your/path/onig.wasm&#39;).then(res =&amp;gt; res.arrayBuffer())&#xA;setWasm(wasmBuffer)&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom rendering of code blocks&lt;/h2&gt; &#xA;&lt;p&gt;The default functionality of rendering code blocks would use &lt;code&gt;codeToHtml&lt;/code&gt; from the &lt;code&gt;Highlighter&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;p&gt;If you want to render the tokens into a code yourself, Shiki exposes two key methods to do that.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;codeToThemedTokens&lt;/code&gt; takes a code string and a language id and returns an array of tokens. A token represents a single part of the code, for example a keyword, a string, a comment, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;renderToHTML&lt;/code&gt; takes an array of tokens and returns an HTML string that represents the provided code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import shiki, { getHighlighter } from &#39;shiki&#39;&#xA;&#xA;const highlighter = await getHighlighter({&#xA;  theme: &#39;nord&#39;,&#xA;  langs: [&#39;javascript&#39;, &#39;python&#39;]&#xA;})&#xA;&#xA;const code = `console.log(&#34;Here is your code.&#34;);`&#xA;&#xA;// This will return an array of tokens for the provided code.&#xA;// A token represents a single part of the code, for example a keyword, a string, a comment, etc.&#xA;const tokens = highlighter.codeToThemedTokens(code, &#39;javascript&#39;)&#xA;&#xA;// This will return an HTML string that represents the provided code.&#xA;const html = shiki.renderToHTML(tokens)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can add to &lt;code&gt;renderToHTML&lt;/code&gt; the desired element shape for &lt;code&gt;pre&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;line (span)&lt;/code&gt;, and &lt;code&gt;token (span)&lt;/code&gt;, and override the theme colors for background and foreground.&lt;/p&gt; &#xA;&lt;p&gt;For more about that, or to build your own renderer, check out the implementation in &lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/packages/shiki/src/renderer.ts&#34;&gt;shiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const html = shiki.renderToHTML(tokens, {&#xA;  fg: highlighter.getForegroundColor(&#39;nord&#39;), // Set a specific foreground color.&#xA;  bg: highlighter.getBackgroundColor(&#39;nord&#39;), // Set a specific background color.&#xA;  // Specified elements override the default elements.&#xA;  elements: {&#xA;    pre({ className, style, children }) {&#xA;      return `${children}`&#xA;    },&#xA;    code({ className, style, children }) {&#xA;      return `${children}`&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are multiple Shiki renderers out there in the wild. You can see a bunch linked below.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple Shiki instances on the same page&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use Shiki in a browser multiple times on the same page, you should make sure that there is only a single &lt;code&gt;Highlighter&lt;/code&gt; instance. Use cases are for example a markdown editor and a preview, or wrapping Shiki within a web component.&lt;/p&gt; &#xA;&lt;p&gt;Common scenarios are to use the Observable pattern, or to use a singleton pattern.&lt;/p&gt; &#xA;&lt;p&gt;In both cases you&#39;ve to ensure that the &lt;code&gt;Highlighter&lt;/code&gt; instance is only created once, and that it is bootstrapped asynchronously before calling any of the exposed functions.&lt;/p&gt; &#xA;&lt;h2&gt;Seen&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shiki Docs: &lt;a href=&#34;https://shiki.matsu.io&#34;&gt;https://shiki.matsu.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interactive Demo on CodeSandbox (with Next.js): &lt;a href=&#34;https://codesandbox.io/s/shiki-next-js-cir0y&#34;&gt;https://codesandbox.io/s/shiki-next-js-cir0y&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com&#34;&gt;VS Code website&lt;/a&gt;, such as in the &lt;a href=&#34;https://code.visualstudio.com/api/extension-guides/notebook&#34;&gt;Notebook API page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript website&lt;/a&gt;, such as in the &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/basic-types.html#tuple&#34;&gt;Basic Types documentation page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=bierner.markdown-Shiki&#34;&gt;Markdown Preview Shiki Highlighting&lt;/a&gt;, a VS Code plugin to use Shiki&#39;s highlighting in Markdown preview.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fatihkalifa.com/typescript-twoslash&#34;&gt;Fatih Kalifa&#39;s website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.blockstack.org/&#34;&gt;Blockstack Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://torchlight.dev/&#34;&gt;Torchlight&lt;/a&gt;, a syntax highlighting API powered by the Shiki tokenizer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/a20185/codechalk&#34;&gt;CodeChalk&lt;/a&gt;, A neat terminal code highlighting tool powered by Shiki tokenizer and Chalk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codehike.org/&#34;&gt;Code Hike&lt;/a&gt;, a collection of components and mods for MDX codeblocks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom Renderers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shiki Twoslash: &lt;a href=&#34;https://shikijs.github.io/twoslash/&#34;&gt;https://shikijs.github.io/twoslash/&lt;/a&gt; Playground: &lt;a href=&#34;https://shikijs.github.io/twoslash/playground&#34;&gt;https://shikijs.github.io/twoslash/playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/shiki-latex&#34;&gt;Shiki LaTeX&lt;/a&gt;, a Shiki renderer for &lt;a href=&#34;https://www.latex-project.org&#34;&gt;LaTeX&lt;/a&gt;. Compatible with &lt;a href=&#34;https://github.com/gpoore/minted&#34;&gt;minted&lt;/a&gt;, replacing &lt;a href=&#34;https://pygments.org&#34;&gt;Pygments&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/scarbon&#34;&gt;Scarbon&lt;/a&gt;, an elegant code renderer made using Shiki for highlighting, &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt; for formatting, and &lt;a href=&#34;https://www.npmjs.com/package/canvas&#34;&gt;Canvas&lt;/a&gt; for rendering&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Vap0r1ze/vpc-shiki&#34;&gt;VPC Shiki&lt;/a&gt;, Shiki codeblocks on Discord. Powered by &lt;a href=&#34;http://powercord.dev/&#34;&gt;Powercord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/shiki-renderer-canvas&#34;&gt;shiki-renderer-canvas&lt;/a&gt;, a Canvas renderer for Shiki that works in Node.js and the browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sachinraja/shiki-renderer-pdf&#34;&gt;shiki-renderer-pdf&lt;/a&gt;, a Shiki renderer for PDFs. Used in &lt;a href=&#34;https://github.com/sachinraja/pdfc&#34;&gt;pdfc&lt;/a&gt; to compile your source code to PDFs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/shikijs/shiki/main/.github/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shiki uses &lt;a href=&#34;https://github.com/microsoft/vscode-oniguruma&#34;&gt;vscode-oniguruma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A lot of code is based on &lt;a href=&#34;https://github.com/Microsoft/vscode-textmate&#34;&gt;vscode-textmate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;If you find Shiki useful, please consider sponsoring my Open Source development. Thank you 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/octref&#34;&gt;https://github.com/sponsors/octref&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT © &lt;a href=&#34;https://github.com/octref&#34;&gt;Pine Wu&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vercel/ai</title>
    <updated>2023-08-15T01:39:54Z</updated>
    <id>tag:github.com,2023-08-15:/vercel/ai</id>
    <link href="https://github.com/vercel/ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build AI-powered applications with React, Svelte, Vue, and Solid&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vercel AI SDK&lt;/h1&gt; &#xA;&lt;p&gt;The Vercel AI SDK is &lt;strong&gt;a library for building AI-powered streaming text and chat UIs&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swr.vercel.app&#34;&gt;SWR&lt;/a&gt;-powered React, Svelte, Vue and Solid helpers for streaming text responses and building chat and completion UIs&lt;/li&gt; &#xA; &lt;li&gt;First-class support for &lt;a href=&#34;https://js.langchain.com/docs&#34;&gt;LangChain&lt;/a&gt; and &lt;a href=&#34;https://openai.com&#34;&gt;OpenAI&lt;/a&gt;, &lt;a href=&#34;https://www.anthropic.com&#34;&gt;Anthropic&lt;/a&gt;, &lt;a href=&#34;https://cohere.com&#34;&gt;Cohere&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co&#34;&gt;Hugging Face&lt;/a&gt;, and &lt;a href=&#34;https://replicate.com&#34;&gt;Replicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Node.js, Serverless, and &lt;a href=&#34;https://edge-runtime.vercel.app/&#34;&gt;Edge Runtime&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Callbacks for saving completed streaming responses to a database (in the same request)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm install ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View the full documentation and examples on &lt;a href=&#34;https://sdk.vercel.ai/docs&#34;&gt;sdk.vercel.ai/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example: An AI Chatbot with Next.js and OpenAI&lt;/h2&gt; &#xA;&lt;p&gt;With the Vercel AI SDK, you can build a ChatGPT-like app in just a few lines of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// ./app/api/chat/route.js&#xA;import { Configuration, OpenAIApi } from &#39;openai-edge&#39;&#xA;import { OpenAIStream, StreamingTextResponse } from &#39;ai&#39;&#xA;&#xA;const config = new Configuration({&#xA;  apiKey: process.env.OPENAI_API_KEY&#xA;})&#xA;const openai = new OpenAIApi(config)&#xA;&#xA;export const runtime = &#39;edge&#39;&#xA;&#xA;export async function POST(req) {&#xA;  const { messages } = await req.json()&#xA;  const response = await openai.createChatCompletion({&#xA;    model: &#39;gpt-4&#39;,&#xA;    stream: true,&#xA;    messages&#xA;  })&#xA;  const stream = OpenAIStream(response)&#xA;  return new StreamingTextResponse(stream)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// ./app/page.js&#xA;&#39;use client&#39;&#xA;&#xA;import { useChat } from &#39;ai/react&#39;&#xA;&#xA;export default function Chat() {&#xA;  const { messages, input, handleInputChange, handleSubmit } = useChat()&#xA;&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      {messages.map(m =&amp;gt; (&#xA;        &amp;lt;div key={m.id}&amp;gt;&#xA;          {m.role}: {m.content}&#xA;        &amp;lt;/div&amp;gt;&#xA;      ))}&#xA;&#xA;      &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#xA;        &amp;lt;input&#xA;          value={input}&#xA;          placeholder=&#34;Say something...&#34;&#xA;          onChange={handleInputChange}&#xA;        /&amp;gt;&#xA;      &amp;lt;/form&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;View the full documentation and examples on &lt;a href=&#34;https://sdk.vercel.ai/docs&#34;&gt;sdk.vercel.ai/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;This library is created by &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt; and &lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt; team members, with contributions from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jared Palmer (&lt;a href=&#34;https://twitter.com/jaredpalmer&#34;&gt;@jaredpalmer&lt;/a&gt;) - &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shu Ding (&lt;a href=&#34;https://twitter.com/shuding_&#34;&gt;@shuding_&lt;/a&gt;) - &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Max Leiter (&lt;a href=&#34;https://twitter.com/max_leiter&#34;&gt;@max_leiter&lt;/a&gt;) - &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Malte Ubl (&lt;a href=&#34;https://twitter.com/cramforce&#34;&gt;@cramforce&lt;/a&gt;) - &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Justin Ridgewell (&lt;a href=&#34;https://github.com/jridgewell&#34;&gt;@jridgewell&lt;/a&gt;) - &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vercel/ai/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>