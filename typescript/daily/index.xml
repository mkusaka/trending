<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T01:43:55Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liyupi/sql-mother</title>
    <updated>2023-08-06T01:43:55Z</updated>
    <id>tag:github.com,2023-08-06:/liyupi/sql-mother</id>
    <link href="https://github.com/liyupi/sql-mother" rel="alternate"></link>
    <summary type="html">&lt;p&gt;免费的闯关式 SQL 自学教程网站，从 0 到 1 带大家掌握常用 SQL 语法，纯前端实现，简单易学~&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQL 之母 - 闯关式 SQL 自学网&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;纯前端实现的闯关式 SQL 自学网&lt;/p&gt; &#xA; &lt;p&gt;By &lt;a href=&#34;https://docs.qq.com/doc/DUFFRVWladXVjeUxW&#34;&gt;程序员鱼皮&lt;/a&gt; ，一人全役&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;在线体验：&lt;a href=&#34;http://sqlmother.yupi.icu&#34;&gt;http://sqlmother.yupi.icu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;视频演示：&lt;a href=&#34;https://www.bilibili.com/video/BV1pV4y1i7LW&#34;&gt;https://www.bilibili.com/video/BV1pV4y1i7LW&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目介绍&lt;/h2&gt; &#xA;&lt;p&gt;一个完全免费的闯关式 SQL 自学教程网站，结合鱼皮自己的 SQL 学习实践经验，编写了 30 多个关卡，用户可以在线提交 SQL 代码做题闯关，目标是从 0 到 1 地带大家掌握常用的 SQL 语法。&lt;/p&gt; &#xA;&lt;p&gt;此外，网站支持自由选择关卡、自定义关卡、SQL 在线练习广场等功能。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/sql-mother/master/doc/index.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;为什么做这样一个网站？&lt;/h3&gt; &#xA;&lt;p&gt;首先，SQL 知识极为重要，几乎是程序员、产品经理、数据分析同学的必备技能。&lt;/p&gt; &#xA;&lt;p&gt;对于 SQL 的学习，比起看教程，更适合通过实战来入门。网上虽然也有类似的 SQL 自学网，但是要么收费、要么不够体系化。&lt;/p&gt; &#xA;&lt;p&gt;所以鱼皮决定自己动手，搞一个开源的 SQL 学习网，一方面希望能够帮助大家更轻松地入门 SQL；另一方面，也希望项目代码也能给大家一些启发，让更多同学有机会参与进来成为贡献者，一起做好一个项目！&lt;/p&gt; &#xA;&lt;h2&gt;20 秒学会使用&lt;/h2&gt; &#xA;&lt;p&gt;1）直接进入主页，左侧是教程和题目区域，请先完整阅读&lt;/p&gt; &#xA;&lt;p&gt;2）在右上区域编写 SQL 代码做题，点击运行提交结果&lt;/p&gt; &#xA;&lt;p&gt;3）可以通过右下的题目助手区域帮助自己做题&lt;/p&gt; &#xA;&lt;p&gt;4）执行结果正确后，可以进入下一关&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/sql-mother/master/doc/tutorial.png&#34; alt=&#34;SQL 之母使用教程&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;你也可以自由选择关卡来挑战，所有关卡都没有任何限制，不一定非要按顺序做题：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/sql-mother/master/doc/levels.png&#34; alt=&#34;选择关卡&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1 分钟本地启动&lt;/h2&gt; &#xA;&lt;p&gt;由于项目采用纯前端实现，本地启动项目非常简单！&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在线访问人数较多，可能会卡顿，所以更推荐大家自己在本地使用~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;1）下载本项目代码&lt;/p&gt; &#xA;&lt;p&gt;2）进入项目根目录，执行 &lt;code&gt;npm install&lt;/code&gt; 安装项目依赖&lt;/p&gt; &#xA;&lt;p&gt;3）执行 &lt;code&gt;npm run dev&lt;/code&gt; 本地启动即可&lt;/p&gt; &#xA;&lt;h2&gt;功能和特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;展示教程题目文档（Markdown 格式）&lt;/li&gt; &#xA; &lt;li&gt;在线做题 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;比对结果&lt;/li&gt; &#xA;   &lt;li&gt;题目助手 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;展示执行结果&lt;/li&gt; &#xA;     &lt;li&gt;查看提示&lt;/li&gt; &#xA;     &lt;li&gt;查看建表语句&lt;/li&gt; &#xA;     &lt;li&gt;查看答案&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;关卡设置 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;自由选择关卡&lt;/li&gt; &#xA;   &lt;li&gt;主线关卡 - 支持上一关 / 下一关&lt;/li&gt; &#xA;   &lt;li&gt;自定义关卡&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SQL 广场（自由输入 SQL）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/sql-mother/master/doc/sql-playground.png&#34; alt=&#34;SQL 广场&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;技术选型&lt;/h2&gt; &#xA;&lt;p&gt;本项目采用纯前端实现，不需要任何后端的前置知识~&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Q：为什么采用纯前端实现？&lt;/p&gt; &#xA; &lt;p&gt;A：减少攻击风险 + 省钱 + 新的学习尝试&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;主框架：Vue 3&lt;/li&gt; &#xA; &lt;li&gt;组件库：ant-design-vue&lt;/li&gt; &#xA; &lt;li&gt;Markdown 展示组件：bytemd + github-markdown-css 主题&lt;/li&gt; &#xA; &lt;li&gt;代码编辑器：monaco-editor&lt;/li&gt; &#xA; &lt;li&gt;SQL 执行：sql.js&lt;/li&gt; &#xA; &lt;li&gt;SQL 代码格式化：sql-formatter&lt;/li&gt; &#xA; &lt;li&gt;全局状态管理：pinia + pinia-plugin-persistedstate&lt;/li&gt; &#xA; &lt;li&gt;前端工程化：typescript + eslint + prettier&lt;/li&gt; &#xA; &lt;li&gt;工具库：lodash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;核心设计&lt;/h2&gt; &#xA;&lt;h3&gt;1、界面模块化&lt;/h3&gt; &#xA;&lt;p&gt;采用模块化的开发思想，把做题页面（主页）拆分为题目浏览区、SQL 编码区、题目结果区，每个区都是一个独立的 Vue 组件文件，实现了逻辑的隔离和组件的复用（比如 SQL 编码区同样可以复用到 SQL 练习广场页面）。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;题目浏览区（QuestionBoard）：展示题目 Markdown 文档&lt;/li&gt; &#xA; &lt;li&gt;SQL 编码区（SqlEditor）：封装了代码编辑器、运行 / 格式化 / 重置按钮&lt;/li&gt; &#xA; &lt;li&gt;题目结果区（SqlResult）：封装了题目执行结果的展示&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;然后在 &lt;code&gt;IndexPage.vue&lt;/code&gt; 中就可以引入这些组件，并且传递关卡信息、运行结果等数据给组件，组装成一个完整的页面。&lt;/p&gt; &#xA;&lt;h3&gt;2、关卡设计&lt;/h3&gt; &#xA;&lt;p&gt;虽然没有后端数据库，但是仍应该把所有关卡的数据统一进行管理，所以定义了 &lt;code&gt;levels&lt;/code&gt; 目录，统一存放关卡相关数据。&lt;/p&gt; &#xA;&lt;p&gt;首先将关卡分为了两类，主线关卡（教程）和自定义关卡（便于扩展），分别在 &lt;code&gt;mainLevels.ts&lt;/code&gt; 和 &lt;code&gt;customLevels.ts&lt;/code&gt; 文件中进行管理。&lt;/p&gt; &#xA;&lt;p&gt;每个关卡都是一个单独的目录，实现了关卡之间的隔离。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/sql-mother/master/doc/customLevel.png&#34; alt=&#34;每个关卡独立目录&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;由于每个关卡的题目教程文章可能非常长，直接写在 ts 文件中不利于阅读和管理，所以这里的策略是把所有文章写在 &lt;code&gt;.md&lt;/code&gt; Markdown 文件中，在关卡定义文件 &lt;code&gt;index.ts&lt;/code&gt; 中读取 &lt;code&gt;.md&lt;/code&gt; 文件。&lt;/p&gt; &#xA;&lt;p&gt;示例代码如下，每个关卡的信息独立定义、相互隔离：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import md from &#34;./README.md?raw&#34;;&#xA;import sql from &#34;./createTable.sql?raw&#34;;&#xA;&#xA;export default {&#xA;  key: &#34;level1&#34;,&#xA;  title: &#34;基础语法 - 查询 - 全表查询&#34;,&#xA;  initSQL: sql,&#xA;  content: md,&#xA;  defaultSQL: &#34;select * from student&#34;,&#xA;  answer: &#34;select * from student&#34;,&#xA;  hint: &#34;请仔细查看本关给出的示例&#34;,&#xA;  type: &#34;main&#34;,&#xA;} as LevelType;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3、纯前端 SQL 执行&lt;/h3&gt; &#xA;&lt;p&gt;纯前端是怎么操作数据库、执行 SQL 的呢？有前端经验的同学会本能地想到 &lt;code&gt;webassembly&lt;/code&gt; 技术。&lt;/p&gt; &#xA;&lt;p&gt;没错，通过 &lt;code&gt;webassembly&lt;/code&gt; 技术，我们可以在浏览器中执行 JS 之外的语言（比如 C++）。但是没必要自己去实现 SQL 执行逻辑了，站在巨人的肩膀上，直接使用开源的 &lt;code&gt;sql.js&lt;/code&gt; 库，就可以在前端执行自己的 SQL 操作了。&lt;/p&gt; &#xA;&lt;p&gt;核心代码在 &lt;code&gt;src/core/sqlExecutor.ts&lt;/code&gt; 中，定义了初始化 DB 和执行 SQL 两个函数，很简单：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import initSqlJs, { Database, SqlJsStatic } from &#34;sql.js&#34;;&#xA;&#xA;/**&#xA; * SQL 执行器&#xA; *&#xA; * @author coder_yupi https://github.com/liyupi&#xA; */&#xA;let SQL: SqlJsStatic;&#xA;&#xA;/**&#xA; * 获取初始化 DB&#xA; * @param initSql&#xA; */&#xA;export const initDB = async (initSql?: string) =&amp;gt; {&#xA;  if (!SQL) {&#xA;    SQL = await initSqlJs({&#xA;      // Required to load the wasm binary asynchronously&#xA;      locateFile: () =&amp;gt;&#xA;        &#34;https://cdn.bootcdn.net/ajax/libs/sql.js/1.7.0/sql-wasm.wasm&#34;,&#xA;    });&#xA;  }&#xA;  // Create a database&#xA;  const db = new SQL.Database();&#xA;  if (initSql) {&#xA;    // Execute a single SQL string that contains multiple statements&#xA;    db.run(initSql); // Run the query without returning anything&#xA;  }&#xA;  return db;&#xA;};&#xA;&#xA;/**&#xA; * 执行 SQL&#xA; * @param db&#xA; * @param sql&#xA; */&#xA;export const runSQL = (db: Database, sql: string) =&amp;gt; {&#xA;  return db.exec(sql);&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在关卡加载时，会先执行关卡对应的初始化 SQL 语句完成建表和导入示例数据，然后用户就可以编写 SQL 查询表中的数据了。&lt;/p&gt; &#xA;&lt;h3&gt;4、判题机制&lt;/h3&gt; &#xA;&lt;p&gt;和判题相关的代码全部集中定义在 &lt;code&gt;src/core/result.ts&lt;/code&gt; 文件中，包括定义了几种执行状态，以及判断结果是否正确的函数。&lt;/p&gt; &#xA;&lt;p&gt;如何判断用户的 SQL 语句是否正确呢？&lt;/p&gt; &#xA;&lt;p&gt;不是直接去对比用户的输入语句和我们预设的答案是否一致（那样太死板了），而是依次执行以下 3 个操作：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;分别提交用户的输入语句和答案语句，得到两份结果表&lt;/li&gt; &#xA; &lt;li&gt;判断两个结果表输出的列名是否一致（名称和顺序都要一致）&lt;/li&gt; &#xA; &lt;li&gt;判断两个结果表输出的数据是否一致&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;这里作者用了个 trick 方式来对比数据，直接把两份结果集转为 JSON 格式，对比 JSON 字符串是否一致即可，而不是多重 for 循环。&lt;/p&gt; &#xA;&lt;h2&gt;目录结构&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;public：公共静态资源&lt;/li&gt; &#xA; &lt;li&gt;doc：文档相关资源&lt;/li&gt; &#xA; &lt;li&gt;src &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;assets：静态资源&lt;/li&gt; &#xA;   &lt;li&gt;components：组件 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;CodeEditor.vue：代码编辑器&lt;/li&gt; &#xA;     &lt;li&gt;MdViewer.vue：Markdown 浏览&lt;/li&gt; &#xA;     &lt;li&gt;QuestionBoard.vue：题目面板（教程区）&lt;/li&gt; &#xA;     &lt;li&gt;SqlEditor.vue：SQL 编辑器（练习区）&lt;/li&gt; &#xA;     &lt;li&gt;SqlResult.vue：SQL 执行结果（结果区）&lt;/li&gt; &#xA;     &lt;li&gt;SqlResultTable.vue：SQL 结果表格&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;configs：配置 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;routes：路由&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;core：核心 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;sqlExecutor.ts：SQL 执行引擎&lt;/li&gt; &#xA;     &lt;li&gt;result.ts：执行结果相关变量和函数&lt;/li&gt; &#xA;     &lt;li&gt;globalStore.ts：全局状态管理&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;levels：关卡 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;custom：自定义关卡&lt;/li&gt; &#xA;     &lt;li&gt;main：主线关卡 &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;level1：每个关卡都是一个单独的目录 &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;createTable.sql：关卡依赖的建表语句&lt;/li&gt; &#xA;         &lt;li&gt;index.ts：关卡的定义&lt;/li&gt; &#xA;         &lt;li&gt;README.md：关卡教程&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;index.ts：定义了关卡相关变量和函数&lt;/li&gt; &#xA;     &lt;li&gt;level.d.ts：关卡类型定义&lt;/li&gt; &#xA;     &lt;li&gt;mainLevels：主线关卡列表&lt;/li&gt; &#xA;     &lt;li&gt;customLevels：自定义关卡列表&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;pages：页面 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;IndexPage.vue：主页&lt;/li&gt; &#xA;     &lt;li&gt;LevelsPage.vue：关卡页面&lt;/li&gt; &#xA;     &lt;li&gt;PlaygroundPage.vue：广场页面&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;App.vue：主页&lt;/li&gt; &#xA;   &lt;li&gt;main.ts：Vue 主文件&lt;/li&gt; &#xA;   &lt;li&gt;style.css：全局样式文件&lt;/li&gt; &#xA;   &lt;li&gt;vite-env.d.ts：环境定义&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;.eslintrc.js：代码规范&lt;/li&gt; &#xA; &lt;li&gt;.gitignore：提交忽略文件&lt;/li&gt; &#xA; &lt;li&gt;index.html：静态主页&lt;/li&gt; &#xA; &lt;li&gt;package.json：项目管理&lt;/li&gt; &#xA; &lt;li&gt;tsconfig.json：TS 配置&lt;/li&gt; &#xA; &lt;li&gt;vite.config.ts：打包工具配置&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献指南&lt;/h2&gt; &#xA;&lt;p&gt;欢迎各路好汉参与贡献，利人利己~&lt;/p&gt; &#xA;&lt;p&gt;目前有几种推荐的贡献方式：&lt;/p&gt; &#xA;&lt;h3&gt;1、贡献关卡&lt;/h3&gt; &#xA;&lt;p&gt;在贡献关卡前，请确保你已经理解了本项目加载关卡的方式。&lt;/p&gt; &#xA;&lt;p&gt;为保证教程的连贯性，更推荐贡献 &lt;code&gt;自定义关卡&lt;/code&gt; 而不是主线关卡，更容易被合并。&lt;/p&gt; &#xA;&lt;p&gt;贡献自定义关卡的步骤：&lt;/p&gt; &#xA;&lt;p&gt;1）复制 &lt;code&gt;src/levels/custom/自定义关卡模板&lt;/code&gt; ，将目录名改为自己的关卡中文名&lt;/p&gt; &#xA;&lt;p&gt;2）修改模板中的 &lt;code&gt;createTable.sql&lt;/code&gt; 建表语句，导入默认数据&lt;/p&gt; &#xA;&lt;p&gt;3）修改模板中的 &lt;code&gt;index.ts&lt;/code&gt; 文件，设置关卡的中英文名、默认 SQL、答案 SQL、提示等&lt;/p&gt; &#xA;&lt;p&gt;4）修改模板中的 &lt;code&gt;README.md&lt;/code&gt; 文件，更改标题和题目内容，需要给出表结构信息、并且尽量把题目表达清楚（比如必须按照某个顺序输出）&lt;/p&gt; &#xA;&lt;p&gt;5）在 &lt;code&gt;customLevels.ts&lt;/code&gt; 文件中引入自定义的关卡。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意，本项目仅支持 SQLite 语法（基本上是通用的 SQL）！不要使用太花里胡哨的函数！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/sql-mother/master/doc/customLevel.png&#34; alt=&#34;自定义关卡&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2、完善关卡&lt;/h3&gt; &#xA;&lt;p&gt;比如修复关卡的错误、优化关卡的文案使其更易于理解或增加更多干货、调整关卡的难度等。&lt;/p&gt; &#xA;&lt;h3&gt;3、项目扩展&lt;/h3&gt; &#xA;&lt;p&gt;本项目仅为鱼皮一人开发，时间和精力有限，很多地方没有做到完善，欢迎大家给项目进行扩展，打造属于自己的 SQL 之子、SQL 之孙、SQL 之曾孙系列产品。。。&lt;/p&gt; &#xA;&lt;p&gt;一些可能的扩展思路：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;点击 “提交” 题目后，自动展开执行结果区域&lt;/li&gt; &#xA; &lt;li&gt;过关后，给出更友好的过关提示，可以更方便地到达下一关&lt;/li&gt; &#xA; &lt;li&gt;支持 SQL 一键格式化&lt;/li&gt; &#xA; &lt;li&gt;优化关卡加载机制，按需加载&lt;/li&gt; &#xA; &lt;li&gt;给项目增加一个后端，用数据库来存放关卡数据，并且支持在线提交 / 审核关卡&lt;/li&gt; &#xA; &lt;li&gt;增加过关排行榜&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;感谢阅读，也欢迎加入 &lt;a href=&#34;https://yupi.icu&#34;&gt;作者的编程学习圈&lt;/a&gt;，学习更多原创项目~&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vercel/next.js</title>
    <updated>2023-08-06T01:43:55Z</updated>
    <id>tag:github.com,2023-08-06:/vercel/next.js</id>
    <link href="https://github.com/vercel/next.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://nextjs.org&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://assets.vercel.com/image/upload/v1662130559/nextjs/Icon_dark_background.png&#34;&gt; &#xA;   &lt;img src=&#34;https://assets.vercel.com/image/upload/v1662130559/nextjs/Icon_light_background.png&#34; height=&#34;128&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://nextjs.org&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Vercel logo&#34; href=&#34;https://vercel.com&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=Vercel&amp;amp;labelColor=000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;NPM version&#34; href=&#34;https://www.npmjs.com/package/next&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/v/next.svg?style=for-the-badge&amp;amp;labelColor=000000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;License&#34; href=&#34;https://github.com/vercel/next.js/raw/canary/license.md&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/l/next.svg?style=for-the-badge&amp;amp;labelColor=000000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join the community on GitHub&#34; href=&#34;https://github.com/vercel/next.js/discussions&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&amp;amp;logo=Next.js&amp;amp;labelColor=000000&amp;amp;logoWidth=20&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a aria-label=&#34;next.js learn&#34; href=&#34;https://nextjs.org/learn&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://nextjs.org/learn&#34;&gt;https://nextjs.org/learn&lt;/a&gt; to get started with Next.js.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://nextjs.org/docs&#34;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; &#xA;&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&#34;https://nextjs.org/showcase&#34;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The Next.js community can be found on &lt;a href=&#34;https://github.com/vercel/next.js/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; &#xA;&lt;p&gt;To chat with other community members you can join the &lt;a href=&#34;https://nextjs.org/discord&#34;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/vercel/next.js/raw/canary/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&#34;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Good First Issues&lt;/h3&gt; &#xA;&lt;p&gt;We have a list of &lt;a href=&#34;https://github.com/vercel/next.js/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; that contain bugs that have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tim Neutkens (&lt;a href=&#34;https://twitter.com/timneutkens&#34;&gt;@timneutkens&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&#34;https://twitter.com/nkzawa&#34;&gt;@nkzawa&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Guillermo Rauch (&lt;a href=&#34;https://twitter.com/rauchg&#34;&gt;@rauchg&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Arunoda Susiripala (&lt;a href=&#34;https://twitter.com/arunoda&#34;&gt;@arunoda&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tony Kovanen (&lt;a href=&#34;https://twitter.com/tonykovanen&#34;&gt;@tonykovanen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dan Zajdband (&lt;a href=&#34;https://twitter.com/impronunciable&#34;&gt;@impronunciable&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you believe you have found a security vulnerability in Next.js, we encourage you to responsibly disclose this and not open a public issue. We will investigate all legitimate reports. Email &lt;code&gt;security@vercel.com&lt;/code&gt; to disclose any security vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/security&#34;&gt;https://vercel.com/security&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openaivn/oav-chatbox</title>
    <updated>2023-08-06T01:43:55Z</updated>
    <id>tag:github.com,2023-08-06:/openaivn/oav-chatbox</id>
    <link href="https://github.com/openaivn/oav-chatbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OAV Chatbox Widget&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Chatbox&lt;/h1&gt; &#xA;&lt;p&gt;An Open-source Chatbox Widget For Website with ChatGPT integration&lt;/p&gt; &#xA;&lt;p&gt;Demo: &lt;a href=&#34;https://openaivn.github.io/oav-chatbox/&#34;&gt;https://openaivn.github.io/oav-chatbox/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;For Development&lt;/h1&gt; &#xA;&lt;p&gt;Start project for develoment&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;npm start&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Build the project&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;npm run build&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;API Elements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oav-info&lt;/li&gt; &#xA; &lt;li&gt;oav-chat-widget&lt;/li&gt; &#xA; &lt;li&gt;oav-chat-button&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use?&lt;/h1&gt; &#xA;&lt;p&gt;Copy the following code, embed into your website&lt;/p&gt; &#xA;&lt;h3&gt;Example 1:&lt;/h3&gt; &#xA;&lt;p&gt;Auto inject, just paste code with attribute: &lt;code&gt;data-botscript=&#34;autoInject&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- head: just only insert lib --&amp;gt;&#xA;&amp;lt;script type=&#34;text/javascript&#34; data-botscript=&#34;autoInject&#34; data-name=&#34;cooing-aquamarine-dormouse&#34; src=&#34;https://openaivn.github.io/oav-chatbox/js/oav-chatbox-latest.js&#34; async&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 2:&lt;/h3&gt; &#xA;&lt;p&gt;Using custom elements: &lt;code&gt;oav-chat-widget&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- head: insert lib --&amp;gt;&#xA;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;https://openaivn.github.io/oav-chatbox/js/oav-chatbox-latest.js&#34; async&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;!-- body: embed --&amp;gt;&#xA;&amp;lt;oav-chat-widget name=&#34;demo&#34; active=&#34;true&#34;&amp;gt;&amp;lt;/oav-chat-widget&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 3:&lt;/h3&gt; &#xA;&lt;p&gt;Using custom elements: &lt;code&gt;oav-chat-button&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- head: insert lib --&amp;gt;&#xA;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;https://openaivn.github.io/oav-chatbox/js/oav-chatbox-latest.js&#34; async&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;!-- body: embed --&amp;gt;&#xA;&amp;lt;oav-chat-button name=&#34;demo&#34; active=&#34;true&#34;&amp;gt;TURN ON&amp;lt;/oav-chat-button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;OAV Community&lt;/h1&gt; &#xA;&lt;p&gt;Join us on social networks!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://facebook.com/groups/openaivnofficial&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Facebook-1877F2?style=for-the-badge&amp;amp;logo=facebook&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/OpenAI_VN&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/2NMK8hhDxx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-5865F2?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2023 OpenAI Vietnam&lt;/p&gt;</summary>
  </entry>
</feed>