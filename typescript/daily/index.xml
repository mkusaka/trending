<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-29T01:56:40Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openshift/console</title>
    <updated>2022-07-29T01:56:40Z</updated>
    <id>tag:github.com,2022-07-29:/openshift/console</id>
    <link href="https://github.com/openshift/console" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenShift Cluster Console UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenShift Console&lt;/h1&gt; &#xA;&lt;p&gt;Codename: &#34;Bridge&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://quay.io/repository/openshift/origin-console?tab=tags&#34;&gt;quay.io/openshift/origin-console&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The console is a more friendly &lt;code&gt;kubectl&lt;/code&gt; in the form of a single page webapp. It also integrates with other services like monitoring, chargeback, and OLM. Some things that go on behind the scenes include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proxying the Kubernetes API under &lt;code&gt;/api/kubernetes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Providing additional non-Kubernetes APIs for interacting with the cluster&lt;/li&gt; &#xA; &lt;li&gt;Serving all frontend static assets&lt;/li&gt; &#xA; &lt;li&gt;User Authentication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; &amp;gt;= 14 &amp;amp; &lt;a href=&#34;https://yarnpkg.com/en/docs/install&#34;&gt;yarn&lt;/a&gt; &amp;gt;= 1.20&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;go&lt;/a&gt; &amp;gt;= 1.18+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.4/&#34;&gt;oc&lt;/a&gt; or &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;kubectl&lt;/a&gt; and an OpenShift or Kubernetes cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/download/&#34;&gt;jq&lt;/a&gt; (for &lt;code&gt;contrib/environment.sh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Google Chrome/Chromium or Firefox for integration tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build everything:&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go modules&lt;/a&gt;, so you should clone the project outside of your &lt;code&gt;GOPATH&lt;/code&gt;. To build both the frontend and backend, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Backend binaries are output to &lt;code&gt;./bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configure the application&lt;/h3&gt; &#xA;&lt;p&gt;The following instructions assume you have an existing cluster you can connect to. OpenShift 4.x clusters can be installed using the &lt;a href=&#34;https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/&#34;&gt;OpenShift Installer&lt;/a&gt;. More information about installing OpenShift can be found at &lt;a href=&#34;https://try.openshift.com/&#34;&gt;https://try.openshift.com/&lt;/a&gt;. You can also use &lt;a href=&#34;https://github.com/code-ready/crc&#34;&gt;CodeReady Containers&lt;/a&gt; for local installs, or native Kubernetes clusters.&lt;/p&gt; &#xA;&lt;h4&gt;OpenShift (no authentication)&lt;/h4&gt; &#xA;&lt;p&gt;For local development, you can disable OAuth and run bridge with an OpenShift user&#39;s access token. If you&#39;ve installed OpenShift 4.0, run the following commands to login as the kubeadmin user and start a local console for development. Make sure to replace &lt;code&gt;/path/to/install-dir&lt;/code&gt; with the directory you used to install OpenShift.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;oc login -u kubeadmin -p $(cat /path/to/install-dir/auth/kubeadmin-password)&#xA;source ./contrib/oc-environment.sh&#xA;./bin/bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The console will be running at &lt;a href=&#34;http://localhost:9000&#34;&gt;localhost:9000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have &lt;code&gt;kubeadmin&lt;/code&gt; access, you can use any user&#39;s API token, although you will be limited to that user&#39;s access and might not be able to run the full integration test suite.&lt;/p&gt; &#xA;&lt;h4&gt;OpenShift (with authentication)&lt;/h4&gt; &#xA;&lt;p&gt;If you need to work on the backend code for authentication or you need to test different users, you can set up authentication in your development environment. Registering an OpenShift OAuth client requires administrative privileges for the entire cluster, not just a local project. You must be logged in as a cluster admin such as &lt;code&gt;system:admin&lt;/code&gt; or &lt;code&gt;kubeadmin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run bridge locally connected to an OpenShift cluster, create an &lt;code&gt;OAuthClient&lt;/code&gt; resource with a generated secret and read that secret:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;oc process -f examples/console-oauth-client.yaml | oc apply -f -&#xA;oc get oauthclient console-oauth-client -o jsonpath=&#39;{.secret}&#39; &amp;gt; examples/console-client-secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the CA bundle of the OpenShift API server is unavailable, fetch the CA certificates from a service account secret. Otherwise copy the CA bundle to &lt;code&gt;examples/ca.crt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;oc get secrets -n default --field-selector type=kubernetes.io/service-account-token -o json | \&#xA;    jq &#39;.items[0].data.&#34;ca.crt&#34;&#39; -r | python -m base64 -d &amp;gt; examples/ca.crt&#xA;# Note: use &#34;openssl base64&#34; because the &#34;base64&#34; tool is different between mac and linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally run the console and visit &lt;a href=&#34;http://localhost:9000&#34;&gt;localhost:9000&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./examples/run-bridge.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CodeReady Containers&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use CodeReady for local development, first make sure &lt;a href=&#34;https://crc.dev/crc/#setting-up-codeready-containers_gsg&#34;&gt;it is set up&lt;/a&gt;, and the &lt;a href=&#34;https://crc.dev/crc/#starting-the-virtual-machine_gsg&#34;&gt;OpenShift cluster is started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To login to the cluster&#39;s API server, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;oc login -u kubeadmin -p $(cat ~/.crc/machines/crc/kubeadmin-password) https://api.crc.testing:6443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;… or, alternatively, use the CRC daemon UI (&lt;em&gt;Copy OC Login Command --&amp;gt; kubeadmin&lt;/em&gt;) to get the cluster-specific command.&lt;/p&gt; &#xA;&lt;p&gt;Finally, prepare the environment, and run the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source ./contrib/environment.sh&#xA;./bin/bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Native Kubernetes&lt;/h4&gt; &#xA;&lt;p&gt;If you have a working &lt;code&gt;kubectl&lt;/code&gt; on your path, you can run the application with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export KUBECONFIG=/path/to/kubeconfig&#xA;source ./contrib/environment.sh&#xA;./bin/bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script in &lt;code&gt;contrib/environment.sh&lt;/code&gt; sets sensible defaults in the environment, and uses &lt;code&gt;kubectl&lt;/code&gt; to query your cluster for endpoint and authentication information.&lt;/p&gt; &#xA;&lt;p&gt;To configure the application to run by hand, (or if &lt;code&gt;environment.sh&lt;/code&gt; doesn&#39;t work for some reason) you can manually provide a Kubernetes bearer token with the following steps.&lt;/p&gt; &#xA;&lt;p&gt;First get the secret ID that has a type of &lt;code&gt;kubernetes.io/service-account-token&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl get secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then get the secret contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl describe secrets/&amp;lt;secret-id-obtained-previously&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use this token value to set the &lt;code&gt;BRIDGE_K8S_AUTH_BEARER_TOKEN&lt;/code&gt; environment variable when running Bridge.&lt;/p&gt; &#xA;&lt;h2&gt;Operator&lt;/h2&gt; &#xA;&lt;p&gt;In OpenShift 4.x, the console is installed and managed by the &lt;a href=&#34;https://github.com/openshift/console-operator/&#34;&gt;console operator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for workflow &amp;amp; convention details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/STYLEGUIDE.md&#34;&gt;STYLEGUIDE&lt;/a&gt; for file format and coding style guide.&lt;/p&gt; &#xA;&lt;h3&gt;Dev Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;go 1.18+, nodejs/yarn, kubectl&lt;/p&gt; &#xA;&lt;h3&gt;Frontend Development&lt;/h3&gt; &#xA;&lt;p&gt;All frontend code lives in the &lt;code&gt;frontend/&lt;/code&gt; directory. The frontend uses node, yarn, and webpack to compile dependencies into self contained bundles which are loaded dynamically at run time in the browser. These bundles are not committed to git. Tasks are defined in &lt;code&gt;package.json&lt;/code&gt; in the &lt;code&gt;scripts&lt;/code&gt; section and are aliased to &lt;code&gt;yarn run &amp;lt;cmd&amp;gt;&lt;/code&gt; (in the frontend directory).&lt;/p&gt; &#xA;&lt;h4&gt;Install Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;To install the build tools and dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd frontend&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must run this command once, and every time the dependencies change. &lt;code&gt;node_modules&lt;/code&gt; are not committed to git.&lt;/p&gt; &#xA;&lt;h4&gt;Interactive Development&lt;/h4&gt; &#xA;&lt;p&gt;The following build task will watch the source code for changes and compile automatically. If you would like to disable hot reloading, set the environment variable &lt;code&gt;HOT_RELOAD&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If changes aren&#39;t detected, you might need to increase &lt;code&gt;fs.inotify.max_user_watches&lt;/code&gt;. See &lt;a href=&#34;https://webpack.js.org/configuration/watch/#not-enough-watchers&#34;&gt;https://webpack.js.org/configuration/watch/#not-enough-watchers&lt;/a&gt;. If you need to increase your watchers, it&#39;s common to see multiple errors beginning with &lt;code&gt;Error from chokidar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run all unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run backend tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./test-backend.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run frontend tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./test-frontend.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging Unit Tests&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd frontend; yarn run build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;debugger;&lt;/code&gt; statements to any unit test&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn debug-test route-pages&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chrome browser URL: &#39;chrome://inspect/#devices&#39;, click on the &#39;inspect&#39; link in &lt;strong&gt;Target (v10...)&lt;/strong&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Launches chrome-dev tools, click Resume button to continue&lt;/li&gt; &#xA; &lt;li&gt;Will break on any &lt;code&gt;debugger;&lt;/code&gt; statements&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integration Tests&lt;/h3&gt; &#xA;&lt;h4&gt;Cypress&lt;/h4&gt; &#xA;&lt;p&gt;Cypress integration tests are implemented in &lt;a href=&#34;https://www.cypress.io/&#34;&gt;Cypress.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Launch Cypress test runner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd frontend&#xA;oc login ...&#xA;yarn run test-cypress-console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will launch the Cypress Test Runner UI in the &lt;code&gt;console&lt;/code&gt; package, where you can run one or all cypress tests. By default, it will look for Chrome in the system and use it, but if you want to use Firefox instead, set &lt;code&gt;BRIDGE_E2E_BROWSER_NAME&lt;/code&gt; environment variable in your shell with the value &lt;code&gt;firefox&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Execute Cypress in different packages&lt;/h5&gt; &#xA;&lt;p&gt;An alternate way to execute cypress tests is via &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/test-cypress.sh&#34;&gt;test-cypress.sh&lt;/a&gt; which takes a &lt;code&gt;-p &amp;lt;package&amp;gt;&lt;/code&gt; parameter to allow execution in different packages. It also can run Cypress tests in the Test Runner UI or in &lt;code&gt;-- headless&lt;/code&gt; mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;console&amp;gt;./test-cypress.sh&#xA;Runs Cypress tests in Test Runner or headless mode&#xA;Usage: test-cypress [-p] &amp;lt;package&amp;gt; [-s] &amp;lt;filemask&amp;gt; [-h true]&#xA;  &#39;-p &amp;lt;package&amp;gt;&#39; may be &#39;console, &#39;olm&#39; or &#39;devconsole&#39;&#xA;  &#39;-s &amp;lt;specmask&amp;gt;&#39; is a file mask for spec test files, such as &#39;tests/monitoring/*&#39;. Used only in headless mode when &#39;-p&#39; is specified.&#xA;  &#39;-h true&#39; runs Cypress in headless mode. When omitted, launches Cypress Test Runner&#xA;Examples:&#xA;  test-cypress.sh                                       // displays this help text&#xA;  test-cypress.sh -p console                            // opens Cypress Test Runner for console tests&#xA;  test-cypress.sh -p olm                                // opens Cypress Test Runner for OLM tests&#xA;  test-cypress.sh -h true                               // runs all packages in headless mode&#xA;  test-cypress.sh -p olm -h true                        // runs OLM tests in headless mode&#xA;  test-cypress.sh -p console -s &#39;tests/crud/*&#39; -h true  // runs console CRUD tests in headless mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/integration-tests-cypress/README.md&#34;&gt;&lt;strong&gt;&lt;em&gt;More information on Console&#39;s Cypress usage&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/dev-console/integration-tests/README.md&#34;&gt;&lt;strong&gt;&lt;em&gt;More information on DevConsole&#39;s Cypress usage&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Protractor&lt;/h4&gt; &#xA;&lt;p&gt;Integration tests are run in a headless browser driven by &lt;a href=&#34;http://www.protractortest.org/#/&#34;&gt;protractor&lt;/a&gt;. Requirements include Chrome or Firefox, a working cluster, kubectl, and bridge itself (see building above). By default, it will look for Chrome in the system and use it, but if you want to use Firefox instead, set &lt;code&gt;BRIDGE_E2E_BROWSER_NAME&lt;/code&gt; environment variable in your shell with the value &lt;code&gt;firefox&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Setup (or any time you change node_modules - &lt;code&gt;yarn add&lt;/code&gt; or &lt;code&gt;yarn install&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd frontend &amp;amp;&amp;amp; yarn run webdriver-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn run test-protractor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run integration tests on an OpenShift cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn run test-protractor-openshift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will include the normal k8s CRUD tests and CRUD tests for OpenShift resources.&lt;/p&gt; &#xA;&lt;p&gt;If you get Jasmine spec timeout errors during runs perhaps against a busy cluster or over slow network, you can try setting a bigger timeout in milliseconds to &lt;code&gt;BRIDGE_JASMINE_TIMEOUT&lt;/code&gt; environment variable in your shell before running the tests. Default 120000 (2 minutes).&lt;/p&gt; &#xA;&lt;p&gt;If your local Chrome version doesn&#39;t match the Chromedriver version from the console dependencies, override the version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn run webdriver-update --versions.chrome=77.0.3865.120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Fedora, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn run webdriver-update-fedora&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For macOS, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn run webdriver-update-macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Hacking Protractor Tests&lt;/h5&gt; &#xA;&lt;p&gt;To see what the tests are actually doing, it is possible to run in non-&lt;code&gt;headless&lt;/code&gt; mode by setting the &lt;code&gt;NO_HEADLESS&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ NO_HEADLESS=true ./test-protractor.sh &amp;lt;suite&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a specific binary version of chrome, it is possible to set the &lt;code&gt;CHROME_BINARY_PATH&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ CHROME_BINARY_PATH=&#34;/usr/bin/chromium-browser&#34; ./test-protractor.sh &amp;lt;suite&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid skipping remaining portion of tests upon encountering the first failure, &lt;code&gt;NO_FAILFAST&lt;/code&gt; environment variable can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ NO_FAILFAST=true ./test-protractor.sh &amp;lt;suite&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Debugging Protractor Tests&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd frontend; yarn run build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;debugger;&lt;/code&gt; statements to any e2e test&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn run debug-protractor-suite --suite &amp;lt;suite-to-debug&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chrome browser URL: &#39;chrome://inspect/#devices&#39;, click on the &#39;inspect&#39; link in &lt;strong&gt;Target (v10...)&lt;/strong&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Launches chrome-dev tools, click Resume button to continue&lt;/li&gt; &#xA; &lt;li&gt;Will break on any &lt;code&gt;debugger;&lt;/code&gt; statements&lt;/li&gt; &#xA; &lt;li&gt;Pauses browser when not using &lt;code&gt;--headless&lt;/code&gt; argument!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;How the Integration Tests Run in CI&lt;/h4&gt; &#xA;&lt;p&gt;The end-to-end tests run against pull requests using &lt;a href=&#34;https://github.com/openshift/ci-operator/&#34;&gt;ci-operator&lt;/a&gt;. The tests are defined in &lt;a href=&#34;https://github.com/openshift/release/raw/master/ci-operator/jobs/openshift/console/openshift-console-master-presubmits.yaml&#34;&gt;this manifest&lt;/a&gt; in the &lt;a href=&#34;https://github.com/openshift/release&#34;&gt;openshift/release&lt;/a&gt; repo and were generated with &lt;a href=&#34;https://github.com/openshift/ci-operator-prowgen&#34;&gt;ci-operator-prowgen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CI runs the &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/test-prow-e2e.sh&#34;&gt;test-prow-e2e.sh&lt;/a&gt; script, which runs &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/test-cypress.sh&#34;&gt;test-cypress.sh&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/test-protractor.sh&#34;&gt;&#39;test-protractor.sh e2e&#39;&lt;/a&gt;, which runs the protractor &lt;code&gt;e2e&lt;/code&gt; test suite.&lt;/p&gt; &#xA;&lt;h5&gt;Cypress in CI&lt;/h5&gt; &#xA;&lt;p&gt;The CI executes &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/test-cypress.sh&#34;&gt;test-cypress.sh&lt;/a&gt; to run all Cypress tests, in all &#39;packages&#39; (console, olm, and devconsole), in &lt;code&gt;-- headless&lt;/code&gt; mode via:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;test-cypress.sh -h true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information on &lt;code&gt;test-cypress.sh&lt;/code&gt; usage please see &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/#execute-cypress-in-different-packages&#34;&gt;Execute Cypress in different packages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Protractor in CI&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/test-protractor.sh&#34;&gt;&#39;test-protractor.sh e2e&#39;&lt;/a&gt; runs the protractor &lt;code&gt;e2e&lt;/code&gt; test suite defined in &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/integration-tests/protractor.conf.ts&#34;&gt;protractor.conf.ts&lt;/a&gt; You can simulate an e2e run against an existing cluster with the following commands (replace &lt;code&gt;/path/to/install-dir&lt;/code&gt; with your OpenShift install directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ oc apply -f ./frontend/integration-tests/data/htpasswd-secret.yaml&#xA;$ oc patch oauths cluster --patch &#34;$(cat ./frontend/integration-tests/data/patch-htpasswd.yaml)&#34; --type=merge&#xA;$ export BRIDGE_BASE_ADDRESS=&#34;$(oc get consoles.config.openshift.io cluster -o jsonpath=&#39;{.status.consoleURL}&#39;)&#34;&#xA;$ export BRIDGE_KUBEADMIN_PASSWORD=$(cat &#34;/path/to/install-dir/auth/kubeadmin-password&#34;)&#xA;$ ./test-protractor.sh e2e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to run the entire e2e tests, you can use a different suite from &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/integration-tests/protractor.conf.ts&#34;&gt;protractor.conf.ts&lt;/a&gt;. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./test-protractor.sh &amp;lt;suite&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Internationalization&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/INTERNATIONALIZATION.md&#34;&gt;INTERNATIONALIZATION&lt;/a&gt; for information on our internationalization tools and guidelines.&lt;/p&gt; &#xA;&lt;h3&gt;Deploying a Custom Image to an OpenShift Cluster&lt;/h3&gt; &#xA;&lt;p&gt;Once you have made changes locally, these instructions will allow you to push changes to an OpenShift cluster for others to review. This involves building a local image, pushing the image to an image registry, then updating the OpenShift cluster to pull the new image.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Docker v17.05 or higher for multi-stage builds&lt;/li&gt; &#xA; &lt;li&gt;An image registry like &lt;a href=&#34;https://quay.io/signin/&#34;&gt;quay.io&lt;/a&gt; or &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Steps&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a repository in the image registry of your choice to hold the image.&lt;/li&gt; &#xA; &lt;li&gt;Build Image &lt;code&gt;docker build -t &amp;lt;your-image-name&amp;gt; &amp;lt;path-to-repository | url&amp;gt;&lt;/code&gt;. For example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t quay.io/myaccount/console:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Push image to image registry &lt;code&gt;docker push &amp;lt;your-image-name&amp;gt;&lt;/code&gt;. Make sure docker is logged into your image registry! For example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker push quay.io/myaccount/console:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Put the console operator in unmanaged state:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;oc patch consoles.operator.openshift.io cluster --patch &#39;{ &#34;spec&#34;: { &#34;managementState&#34;: &#34;Unmanaged&#34; } }&#39; --type=merge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Update the console Deployment with the new image:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;oc set image deploy console console=quay.io/myaccount/console:latest -n openshift-console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Wait for the changes to rollout:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;oc rollout status -w deploy/console -n openshift-console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now be able to see your development changes on the remote OpenShift cluster!&lt;/p&gt; &#xA;&lt;p&gt;When done, you can put the console operator back in a managed state to remove the custom image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;oc patch consoles.operator.openshift.io cluster --patch &#39;{ &#34;spec&#34;: { &#34;managementState&#34;: &#34;Managed&#34; } }&#39; --type=merge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependency Management&lt;/h3&gt; &#xA;&lt;p&gt;Dependencies should be pinned to an exact semver, sha, or git tag (eg, no ^).&lt;/p&gt; &#xA;&lt;h4&gt;Backend&lt;/h4&gt; &#xA;&lt;p&gt;Whenever making vendor changes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Finish updating dependencies &amp;amp; writing changes&lt;/li&gt; &#xA; &lt;li&gt;Commit everything &lt;em&gt;except&lt;/em&gt; &lt;code&gt;vendor/&lt;/code&gt; (eg, &lt;code&gt;server: add x feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Make a second commit with only &lt;code&gt;vendor/&lt;/code&gt; (eg, &lt;code&gt;vendor: revendor&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Adding new or updating existing backend dependencies:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;go.mod&lt;/code&gt; file to the desired version (most likely a git hash)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;go mod tidy &amp;amp;&amp;amp; go mod vendor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Verify update was successful. &lt;code&gt;go.sum&lt;/code&gt; will have been updated to reflect the changes to &lt;code&gt;go.mod&lt;/code&gt; and the package will have been updated in &lt;code&gt;vendor&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Frontend&lt;/h4&gt; &#xA;&lt;p&gt;Add new frontend dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add &amp;lt;package@version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update existing frontend dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn upgrade &amp;lt;package@version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To upgrade yarn itself, download a new yarn release from &lt;a href=&#34;https://github.com/yarnpkg/yarn/releases&#34;&gt;https://github.com/yarnpkg/yarn/releases&lt;/a&gt;, replace the release in &lt;code&gt;frontend/.yarn/releases&lt;/code&gt; with the new version, and update &lt;code&gt;yarn-path&lt;/code&gt; in &lt;code&gt;frontend/.yarnrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Supported Browsers&lt;/h4&gt; &#xA;&lt;p&gt;We support the latest versions of the following browsers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edge&lt;/li&gt; &#xA; &lt;li&gt;Chrome&lt;/li&gt; &#xA; &lt;li&gt;Safari&lt;/li&gt; &#xA; &lt;li&gt;Firefox&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;IE 11 and earlier is not supported.&lt;/p&gt; &#xA;&lt;h2&gt;Frontend Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/ceph-storage-plugin/README.md&#34;&gt;ceph-storage-plugin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/console-dynamic-plugin-sdk/README.md&#34;&gt;console-dynamic-plugin-sdk&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/console-dynamic-plugin-sdk/docs/api.md&#34;&gt;[API]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/console-dynamic-plugin-sdk/docs/console-extensions.md&#34;&gt;[Console Extensions]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/console-plugin-shared/README.md&#34;&gt;console-plugin-shared&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/dev-console/README.md&#34;&gt;dev-console&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/eslint-plugin-console/README.md&#34;&gt;eslint-plugin-console&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/integration-tests-cypress/README.md&#34;&gt;integration-tests-cypress&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/knative-plugin/README.md&#34;&gt;knative-plugin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;operator-lifecycle-manager &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/operator-lifecycle-manager/src/components/descriptors/README.md&#34;&gt;[Descriptors README]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/operator-lifecycle-manager/src/components/descriptors/reference/reference.md&#34;&gt;[Descriptors API Reference]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openshift/console/master/frontend/packages/rhoas-plugin/README.md&#34;&gt;rhoas-plugin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>frangoteam/FUXA</title>
    <updated>2022-07-29T01:56:40Z</updated>
    <id>tag:github.com,2022-07-29:/frangoteam/FUXA</id>
    <link href="https://github.com/frangoteam/FUXA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web-based Process Visualization (SCADA/HMI/Dashboard) software&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frangoteam/FUXA/master/client/src/favicon.ico&#34; alt=&#34;fuxa logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FUXA&lt;/h1&gt; &#xA;&lt;p&gt;FUXA is a web-based Process Visualization (SCADA/HMI/Dashboard) software. With FUXA you can create modern process visualizations with individual designs for your machines and real-time data display.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frangoteam/FUXA/master/screenshot/fuxa-editor.png&#34; alt=&#34;fuxa editor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frangoteam/FUXA/master/screenshot/fuxa-ani.gif&#34; alt=&#34;fuxa ani&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Devices connectivity with Modbus RTU/TCP, Siemens S7 Protocol, OPC-UA, BACnet IP, MQTT, Ethernet/IP (Allen Bradley)&lt;/li&gt; &#xA; &lt;li&gt;SCADA/HMI Web-Editor - Engineering and Design completely web-based&lt;/li&gt; &#xA; &lt;li&gt;Cross-Platform Full-Stack - Backend with NodeJs and Frontend with Web technologies (HTML5, CSS, Javascript, Angular, SVG)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Live Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here is a &lt;a href=&#34;https://frangoteam.github.io&#34;&gt;live demo&lt;/a&gt; example of FUXA editor.&lt;/p&gt; &#xA;&lt;h2&gt;Installing and Running&lt;/h2&gt; &#xA;&lt;p&gt;FUXA is developed with NodeJS (backend) and Angular (frontend).&lt;/p&gt; &#xA;&lt;p&gt;You need to have installed &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; (Version 10, 12 or 14) and NPM (Version &amp;gt;= 6.11 and &amp;lt; 7.xx).&lt;/p&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://www.npmjs.com/package/@frangoteam/fuxa&#34;&gt;NPM&lt;/a&gt; (first option)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g --unsafe-perm @frangoteam/fuxa&#xA;fuxa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or &lt;a href=&#34;https://github.com/frangoteam/FUXA/releases&#34;&gt;Download the latest release&lt;/a&gt; and unpack it (second option)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ./server&#xA;npm install&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in linux running from docker (third option)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull frangoteam/fuxa:latest&#xA;docker run -d -p 1881:1881 frangoteam/fuxa:latest&#xA;&#xA;// persistent storage of application data (project), daq (tags history) and logs&#xA;docker run -d -p 1881:1881 -v fuxa_appdata:/usr/src/app/FUXA/server/_appdata -v fuxa_db:/usr/src/app/FUXA/server/_db -v fuxa_logs:/usr/src/app/FUXA/server/_logs frangoteam/fuxa:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open up a browser (better Chrome) and navigate to &lt;a href=&#34;http://localhost:1881&#34;&gt;http://localhost:1881&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Look the guide in &lt;a href=&#34;https://github.com/frangoteam/FUXA/wiki&#34;&gt;wiki&lt;/a&gt; pages&lt;/p&gt; &#xA;&lt;h2&gt;To Debug (Full Stack)&lt;/h2&gt; &#xA;&lt;p&gt;Install and start to serve the frontend&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ./client&#xA;npm install&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the Server and Client (Browser) in Debug Mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;In vscode: Debug ‘Server &amp;amp; Client’&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To Build&lt;/h2&gt; &#xA;&lt;p&gt;Build the frontend for production&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ./client&#xA;ng build --prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any contributions you make are greatly appreciated. If you identify any errors, or have an idea for an improvement, please open an &lt;a href=&#34;https://raw.githubusercontent.com/frangoteam/issues&#34;&gt;issue&lt;/a&gt;. But before filing a new issue, please look through already existing issues. Search open and closed issues first.&lt;/p&gt; &#xA;&lt;h3&gt;Pull-Requests&lt;/h3&gt; &#xA;&lt;p&gt;If you want to raise a pull-request with a new feature, or a refactoring of existing code please first open an issue explaining the problem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Fork the Project&#xA;2. Create your Feature Branch (git checkout -b feature/AmazingFeature)&#xA;3. Commit your Changes (git commit -m &#39;Add some AmazingFeature&#39;)&#xA;4. Push to the Branch (git push origin feature/AmazingFeature)&#xA;5. Open a Pull Request&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Coding standards&lt;/h3&gt; &#xA;&lt;p&gt;Please ensure you follow the coding standards used through-out the existing code base. Some basic rules include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indent with 4-spaces, no tabs.&lt;/li&gt; &#xA; &lt;li&gt;Opening brace on same line as if/for/function and so on, closing brace on its own line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Let us know!&lt;/h2&gt; &#xA;&lt;p&gt;We’d be really happy if you send us your own shapes in order to collect a library to share it with others. Just send an email to &lt;a href=&#34;mailto:4frango@gmail.com&#34;&gt;4frango@gmail.com&lt;/a&gt; and do let us know if you have any questions or suggestions regarding our work.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>verdaccio/verdaccio</title>
    <updated>2022-07-29T01:56:40Z</updated>
    <id>tag:github.com,2022-07-29:/verdaccio/verdaccio</id>
    <link href="https://github.com/verdaccio/verdaccio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📦🔐 A lightweight Node.js private proxy registry&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://donate.redcrossredcrescent.org/ua/donate/~my-donation?_cv=1&#34;&gt;&lt;img src=&#34;https://cdn.verdaccio.dev/readme/banner-uk.svg?sanitize=true&#34; alt=&#34;BannerUK&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Verdaccio stands for &lt;strong&gt;peace&lt;/strong&gt;, stop the war, we will be yellow / blue 🇺🇦 until that happens.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.verdaccio.dev/readme/verdaccio@2x.png&#34; alt=&#34;verdaccio logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.verdaccio.dev/readme/readme-website.png&#34; alt=&#34;verdaccio gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Version 6 (Development branch)&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Looking for Verdaccio 5 version? Check the branch &lt;code&gt;5.x&lt;/code&gt; The plugins for the &lt;code&gt;v5.x&lt;/code&gt; that are hosted within this organization are located at the &lt;a href=&#34;https://github.com/verdaccio/monorepo&#34;&gt;&lt;code&gt;verdaccio/monorepo&lt;/code&gt;&lt;/a&gt; repository, while for the v6.x are hosted on this project &lt;code&gt;./packages/plugins&lt;/code&gt;, keep on mind &lt;code&gt;v6.x&lt;/code&gt; plugins will eventually would be incompatible with &lt;code&gt;v5.x&lt;/code&gt; versions. Note that contributing guidelines might be different based on the branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://verdaccio.org/&#34;&gt;Verdaccio&lt;/a&gt; is a simple, &lt;strong&gt;zero-config-required local private npm registry&lt;/strong&gt;. No need for an entire database just to get started! Verdaccio comes out of the box with &lt;strong&gt;its own tiny database&lt;/strong&gt;, and the ability to proxy other registries (eg. npmjs.org), caching the downloaded modules along the way. For those looking to extend their storage capabilities, Verdaccio &lt;strong&gt;supports various community-made plugins to hook into services such as Amazon&#39;s s3, Google Cloud Storage&lt;/strong&gt; or create your own plugin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/verdaccio&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/verdaccio/latest.svg?sanitize=true&#34; alt=&#34;verdaccio (latest)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/verdaccio&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dy/verdaccio.svg?sanitize=true&#34; alt=&#34;verdaccio (downloads)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://verdaccio.org/docs/en/docker.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/verdaccio/verdaccio.svg?maxAge=43200&#34; alt=&#34;docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/tiers/backer/badge.svg?label=Backer&amp;amp;color=brightgreen&#34; alt=&#34;backers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackshare.io/verdaccio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow%20on-StackShare-blue.svg?logo=stackshare&amp;amp;style=flat&#34; alt=&#34;stackshare&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://chat.verdaccio.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/388674437219745793.svg?sanitize=true&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/verdaccio/verdaccio/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/verdaccio&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/verdaccio/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/verdaccio_npm&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/verdaccio_npm.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter followers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/verdaccio/verdaccio/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/verdaccio/verdaccio.svg?style=social&amp;amp;label=Stars&#34; alt=&#34;Github&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vshymanskyy/StandWithUkraine/raw/main/docs/README.md&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg?sanitize=true&#34; alt=&#34;StandWithUkraine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Latest Node.js v16 required&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install with npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --global verdaccio@6-next&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull verdaccio/verdaccio:nightly-master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;em&gt;helm&lt;/em&gt; &lt;a href=&#34;https://github.com/verdaccio/charts&#34;&gt;official chart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm repo add verdaccio https://charts.verdaccio.org&#xA;helm repo update&#xA;helm install verdaccio/verdaccio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Furthermore, you can read the &lt;a href=&#34;https://github.com/verdaccio/verdaccio/wiki/Debugging-Verdaccio&#34;&gt;&lt;strong&gt;Debugging Guidelines&lt;/strong&gt;&lt;/a&gt; and the &lt;a href=&#34;https://github.com/verdaccio/verdaccio/tree/master/docker-examples&#34;&gt;&lt;strong&gt;Docker Examples&lt;/strong&gt;&lt;/a&gt; for more advanced development.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;You can develop your own &lt;a href=&#34;https://verdaccio.org/docs/plugins&#34;&gt;plugins&lt;/a&gt; with the &lt;a href=&#34;https://github.com/verdaccio/generator-verdaccio-plugin&#34;&gt;verdaccio generator&lt;/a&gt;. Installing &lt;a href=&#34;https://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g yo&#xA;npm install -g generator-verdaccio-plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more &lt;a href=&#34;https://verdaccio.org/docs/dev-plugins&#34;&gt;here&lt;/a&gt; how to develop plugins. Share your plugins with the community.&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;Verdaccio is run by &lt;strong&gt;volunteers&lt;/strong&gt;; nobody is working full-time on it. If you find this project to be useful and would like to support its development, consider do a long support donation - &lt;strong&gt;and your logo will be on this section of the readme.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sponsors/verdaccio&#34;&gt;Donate&lt;/a&gt;&lt;/strong&gt; 💵👍🏻 starting from &lt;em&gt;$1/month&lt;/em&gt; or just one single contribution.&lt;/p&gt; &#xA;&lt;h2&gt;What does Verdaccio do for me?&lt;/h2&gt; &#xA;&lt;h3&gt;Use private packages&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use all benefits of npm package system in your company without sending all code to the public, and use your private packages just as easy as public ones.&lt;/p&gt; &#xA;&lt;h3&gt;Cache npmjs.org registry&lt;/h3&gt; &#xA;&lt;p&gt;If you have more than one server you want to install packages on, you might want to use this to decrease latency (presumably &#34;slow&#34; npmjs.org will be connected to only once per package/version) and provide limited failover (if npmjs.org is down, we might still find something useful in the cache) or avoid issues like &lt;em&gt;&lt;a href=&#34;https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/&#34;&gt;How one developer just broke Node, Babel and thousands of projects in 11 lines of JavaScript&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&#34;https://github.com/npm/registry-issue-archive/issues/255&#34;&gt;Many packages suddenly disappeared&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&#34;https://github.com/npm/registry-issue-archive/issues/329&#34;&gt;Registry returns 404 for a package I have installed before&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Link multiple registries&lt;/h3&gt; &#xA;&lt;p&gt;If you use multiples registries in your organization and need to fetch packages from multiple sources in one single project you might take advance of the uplinks feature with Verdaccio, chaining multiple registries and fetching from one single endpoint.&lt;/p&gt; &#xA;&lt;h3&gt;Override public packages&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use a modified version of some 3rd-party package (for example, you found a bug, but maintainer didn&#39;t accept pull request yet), you can publish your version locally under the same name. See in detail &lt;a href=&#34;https://verdaccio.org/docs/en/best#override-public-packages&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;E2E Testing&lt;/h3&gt; &#xA;&lt;p&gt;Verdaccio has proved to be a lightweight registry that can be booted in a couple of seconds, fast enough for any CI. Many open source projects use verdaccio for end to end testing, to mention some examples, &lt;strong&gt;create-react-app&lt;/strong&gt;, &lt;strong&gt;mozilla neutrino&lt;/strong&gt;, &lt;strong&gt;pnpm&lt;/strong&gt;, &lt;strong&gt;storybook&lt;/strong&gt;, &lt;strong&gt;babel.js&lt;/strong&gt;, &lt;strong&gt;angular-cli&lt;/strong&gt; or &lt;strong&gt;docusaurus&lt;/strong&gt;. You can read more in &lt;a href=&#34;https://verdaccio.org/docs/e2e&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, here few examples how to start:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juanpicado/e2e-ci-example-gh-actions&#34;&gt;e2e-ci-example-gh-actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juanpicado/verdaccio-end-to-end-tests&#34;&gt;verdaccio-end-to-end-tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juanpicado/verdaccio-fork&#34;&gt;verdaccio-fork&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Watch our Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Node Congress 2022, February 2022, Online Free&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://portal.gitnation.org/contents/five-ways-of-taking-advantage-of-verdaccio-your-private-and-proxy-nodejs-registry&#34;&gt; &lt;img src=&#34;https://cdn.verdaccio.dev/readme/nodejscongress2022.jpg&#34; alt=&#34;nodejs&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;You might want to check out as well our previous talks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zRI0skF1f8I&#34;&gt;Using Docker and Verdaccio to make Integration Testing Easy - &lt;strong&gt;Docker All Hands #4 December - 2021&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bRKZbrlQqLY&amp;amp;t=16s&amp;amp;ab_channel=ReactFinland&#34;&gt;&lt;strong&gt;Juan Picado&lt;/strong&gt; – Testing the integrity of React components by publishing in a private registry - React Finland - 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6SyjqBmS49Y&amp;amp;ab_channel=BeerJSCba&#34;&gt;BeerJS Cba Meetup No. 53 May 2021 - &lt;strong&gt;Juan Picado&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qTRADSp3Hpo&#34;&gt;Node.js Dependency Confusion Attacks - April 2021 - &lt;strong&gt;Juan Picado&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oVCjDWeehAQ&#34;&gt;&lt;strong&gt;OpenJS World 2020&lt;/strong&gt; about *Cover your Projects with a Multi purpose Lightweight Node.js Registry - &lt;strong&gt;Juan Picado&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hDIFKzmoCa&#34;&gt;ViennaJS Meetup - Introduction to Verdaccio by &lt;strong&gt;Priscila Olivera&lt;/strong&gt; and &lt;strong&gt;Juan Picado&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=A5CWxJC9xzc&#34;&gt;Open Source? trivago - Verdaccio (&lt;strong&gt;Ayush&lt;/strong&gt; and &lt;strong&gt;Juan Picado&lt;/strong&gt;) January 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gpjC8Qp9B9A&#34;&gt;GitNation Open Source Stage - How we have built a Node.js Registry with React - &lt;strong&gt;Juan Picado&lt;/strong&gt; December 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?reload=9&amp;amp;v=P_hxy7W-IL4&amp;amp;ab_channel=TheDestroDevShow&#34;&gt;Verdaccio - A lightweight Private Proxy Registry built in Node.js | &lt;strong&gt;Juan Picado&lt;/strong&gt; at The Destro Dev Show&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Run in your terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;verdaccio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You would need set some npm configuration, this is optional.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm set registry http://localhost:4873/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For one-off commands or to avoid setting the registry globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NPM_CONFIG_REGISTRY=http://localhost:4873 npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can navigate to &lt;a href=&#34;http://localhost:4873/&#34;&gt;http://localhost:4873/&lt;/a&gt; where your local packages will be listed and can be searched.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Warning: Verdaccio &lt;a href=&#34;https://github.com/verdaccio/verdaccio/issues/1301#issuecomment-489302298&#34;&gt;does not currently support PM2&#39;s cluster mode&lt;/a&gt;, running it with cluster mode may cause unknown behavior.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Publishing&lt;/h2&gt; &#xA;&lt;h4&gt;1. create a user and log in&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm adduser --registry http://localhost:4873&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;if you use HTTPS, add an appropriate CA information (&#34;null&#34; means get CA list from OS)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm set ca null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. publish your package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm publish --registry http://localhost:4873&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will prompt you for user credentials which will be saved on the &lt;code&gt;verdaccio&lt;/code&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Below are the most commonly needed information, every aspect of Docker and verdaccio is &lt;a href=&#34;https://www.verdaccio.org/docs/en/docker.html&#34;&gt;documented separately&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull verdaccio/verdaccio:nightly-master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available as &lt;a href=&#34;https://hub.docker.com/r/verdaccio/verdaccio/tags/&#34;&gt;tags&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running verdaccio using Docker&lt;/h3&gt; &#xA;&lt;p&gt;To run the docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker examples are available &lt;a href=&#34;https://github.com/verdaccio/verdaccio/tree/master/docker-examples&#34;&gt;in this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Verdaccio aims to support all features of a standard npm client that make sense to support in private repository. Unfortunately, it isn&#39;t always possible.&lt;/p&gt; &#xA;&lt;h3&gt;Basic features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing packages (npm install, npm upgrade, etc.) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Publishing packages (npm publish) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced package control&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unpublishing packages (npm unpublish) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tagging (npm tag) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deprecation (npm deprecate) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;User management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Registering new users (npm adduser {newuser}) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change password (npm profile set password) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Transferring ownership (npm owner add {user} {pkg}) - not supported, &lt;em&gt;PR-welcome&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Token (npm token) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Miscellany&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Searching (npm search) - &lt;strong&gt;supported&lt;/strong&gt; (cli / browser)&lt;/li&gt; &#xA; &lt;li&gt;Ping (npm ping) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Starring (npm star, npm unstar, npm stars) - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;npm/yarn audit - &lt;strong&gt;supported&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Report a vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;If you want to report a security vulnerability, please follow the steps which we have defined for you in our &lt;a href=&#34;https://github.com/verdaccio/verdaccio/security/policy&#34;&gt;security policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the following companies to help us to achieve our goals providing free open source licenses. Every company provides enough resources to move this project forward.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Company&lt;/th&gt; &#xA;   &lt;th&gt;Logo&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JetBrains&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/verdaccio/verdaccio/master/assets/thanks/jetbrains/logo.png&#34; alt=&#34;jetbrain&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JetBrains provides licenses for products for active maintainers, renewable yearly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crowdin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crowdin.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/verdaccio/verdaccio/master/assets/thanks/crowdin/logo.png&#34; alt=&#34;crowdin&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Crowdin provides platform for translations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BrowserStack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.browserstack.com/&#34;&gt;&lt;img src=&#34;https://cdn.verdaccio.dev/readme/browserstack_logo.png&#34; alt=&#34;browserstack&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BrowserStack provides plan to run End to End testing for the UI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Netlify&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;&lt;img src=&#34;https://www.netlify.com/img/global/badges/netlify-color-accent.svg?sanitize=true&#34; alt=&#34;netlify&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Netlify provides pro plan for website deployment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Algolia&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://algolia.com/&#34;&gt;&lt;img src=&#34;https://cdn.verdaccio.dev/sponsor/logo/algolia/logo.png&#34; alt=&#34;algolia&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Algolia provides search services for the website&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.docker.com/community/open-source/application&#34;&gt;&lt;img src=&#34;https://cdn.verdaccio.dev/sponsor/logo/docker/docker.png&#34; alt=&#34;docker&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Docker offers unlimited pulls and unlimited egress to any and all users&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/juanpicado&#34;&gt;Juan Picado&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/ayusharma&#34;&gt;Ayush Sharma&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/sergiohgz&#34;&gt;Sergio Hg&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/558752?s=120&amp;amp;v=4&#34; alt=&#34;jotadeveloper&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/6918450?s=120&amp;amp;v=4&#34; alt=&#34;ayusharma&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/14012309?s=120&amp;amp;v=4&#34; alt=&#34;sergiohgz&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/jotadeveloper&#34;&gt;@jotadeveloper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/ayusharma_&#34;&gt;@ayusharma_&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/sergiohgz&#34;&gt;@sergiohgz&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/priscilawebdev&#34;&gt;Priscila Oliveria&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DanielRuf&#34;&gt;Daniel Ruf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/29228205?s=120&amp;amp;v=4&#34; alt=&#34;priscilawebdev&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/827205?s=120&amp;amp;v=4&#34; alt=&#34;DanielRuf&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/priscilawebdev&#34;&gt;@priscilawebdev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/DanielRufde&#34;&gt;@DanielRufde&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can find and chat with then over Discord, click &lt;a href=&#34;http://chat.verdaccio.org&#34;&gt;here&lt;/a&gt; or follow them at &lt;em&gt;Twitter&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who is using Verdaccio?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/create-react-app/raw/master/CONTRIBUTING.md#customizing-e2e-registry-configuration&#34;&gt;create-react-app&lt;/a&gt; &lt;em&gt;(+86.2k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gatsbyjs/gatsby&#34;&gt;Gatsby&lt;/a&gt; &lt;em&gt;(+49.2k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/babel/babel&#34;&gt;Babel.js&lt;/a&gt; &lt;em&gt;(+38.5k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/docusaurus&#34;&gt;Docusaurus&lt;/a&gt; &lt;em&gt;(+34k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/vue-cli&#34;&gt;Vue CLI&lt;/a&gt; &lt;em&gt;(+27.4k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/angular/angular-cli&#34;&gt;Angular CLI&lt;/a&gt; &lt;em&gt;(+24.3k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/transloadit/uppy&#34;&gt;Uppy&lt;/a&gt; &lt;em&gt;(+23.8k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teambit/bit&#34;&gt;bit&lt;/a&gt; &lt;em&gt;(+13k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aurelia/framework&#34;&gt;Aurelia Framework&lt;/a&gt; &lt;em&gt;(+11.6k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pnpm/pnpm&#34;&gt;pnpm&lt;/a&gt; &lt;em&gt;(+10.1k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/web3.js&#34;&gt;ethereum/web3.js&lt;/a&gt; &lt;em&gt;(+9.8k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nrwl/nx&#34;&gt;NX&lt;/a&gt; &lt;em&gt;(+6.1k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webiny/webiny-js&#34;&gt;webiny-js&lt;/a&gt; &lt;em&gt;(+4.3k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neutrinojs/neutrino&#34;&gt;Mozilla Neutrino&lt;/a&gt; &lt;em&gt;(+3.7k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/workshopper/how-to-npm&#34;&gt;workshopper how to npm&lt;/a&gt; &lt;em&gt;(+1k ⭐️)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws/aws-sdk-js-v3&#34;&gt;Amazon SDK v3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws/aws-encryption-sdk-javascript&#34;&gt;Amazon Encryption SDK for Javascript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🤓 Don&#39;t be shy, add yourself to this readme.&lt;/p&gt; &#xA;&lt;h2&gt;Open Collective Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/verdaccio#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/0/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/1/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/2/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/3/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/4/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/5/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/6/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/7/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/8/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/verdaccio/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/sponsor/9/avatar.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Open Collective Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/verdaccio#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/verdaccio#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/backers.svg?width=890&#34; alt=&#34;backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/verdaccio/verdaccio/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/verdaccio/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/verdaccio/contributors.svg?width=890&amp;amp;button=true&#34; alt=&#34;contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;FAQ / Contact / Troubleshoot&lt;/h3&gt; &#xA;&lt;p&gt;If you have any issue you can try the following options, do no desist to ask or check our issues database, perhaps someone has asked already what you are looking for.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://verdaccio.org/blog/&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/verdaccio&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/verdaccio/verdaccio/issues/new/choose&#34;&gt;Reporting an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/verdaccio/verdaccio/issues?q=is%3Aissue+is%3Aopen+label%3Adiscuss&#34;&gt;Running discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/7qWJxBf&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://verdaccio.org/docs/en/logo&#34;&gt;Logos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/verdaccio/verdaccio/tree/master/docker-examples&#34;&gt;Docker Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/verdaccio/verdaccio/discussions/categories/q-a&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Verdaccio is &lt;a href=&#34;https://github.com/verdaccio/verdaccio/raw/master/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Verdaccio documentation and logos (excluding /thanks, e.g., .md, .png, .sketch) files within the /assets folder) is &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>