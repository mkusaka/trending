<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T01:43:43Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>croissanteth/chatgpt-token</title>
    <updated>2023-09-24T01:43:43Z</updated>
    <id>tag:github.com,2023-09-24:/croissanteth/chatgpt-token</id>
    <link href="https://github.com/croissanteth/chatgpt-token" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully automated token deployment on ETH, with the help of autonomous code and ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;-Node.js&lt;/p&gt; &#xA;&lt;p&gt;-Hardhat development environment&lt;/p&gt; &#xA;&lt;p&gt;-OpenAI API key&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository.&lt;/p&gt; &#xA;&lt;p&gt;run &lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create empty &#34;contracts&#34; folder, and .env file containing OPENAI_API_KEY, GOERLI_PRIVATE_KEY, and GOERLI_URL (RPC) values&lt;/p&gt; &#xA;&lt;h3&gt;Modifying GPT Interactions&lt;/h3&gt; &#xA;&lt;p&gt;To modify the interactions with GPT, refer to the deploygpt4.ts script inside the scripts directory:&lt;/p&gt; &#xA;&lt;p&gt;API Key: Ensure your OpenAI API key is set in the .env file. The key is retrieved in the script at Line 11. API Calls: The OpenAI API is called at Line 17 and Line 96. Modify the request body or headers as required to customize the GPT response. DALLÂ·E Interactions: If you wish to modify interactions with OpenAI&#39;s DALLÂ·E model, refer to Line 277.&lt;/p&gt; &#xA;&lt;h3&gt;Running locally&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;npx hardhat run scripts/deploygpt4.ts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Deploy to blockchain&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;npx hardhat run scripts/deploygpt4.ts --network GOERLI&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atomicals/atomicals-js</title>
    <updated>2023-09-24T01:43:43Z</updated>
    <id>tag:github.com,2023-09-24:/atomicals/atomicals-js</id>
    <link href="https://github.com/atomicals/atomicals-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Atomicals CLI and Javascript Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Atomicals Javascript Library&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;atomicals.xyz Documentation: &lt;a href=&#34;https://docs.atomicals.xyz&#34;&gt;https://docs.atomicals.xyz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/atomicals/atomicals-js/master/banner.png&#34; alt=&#34;Atomicals&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install, Build and Run Tests&lt;/h3&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Download the github repo and then run:&#xA;&#xA;npm install&#xA;npm build&#xA;&#xA;See all commands at:&#xA;&#xA;npm run cli --help&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick Start - Command Line (CLI)&lt;/h3&gt; &#xA;&lt;p&gt;First install packages and build, then follow the steps here to create your first Atomical and query the status. Use &lt;code&gt;yarn cli&lt;/code&gt;to get a list of all commands available.&lt;/p&gt; &#xA;&lt;h4&gt;0. Environment File (.env)&lt;/h4&gt; &#xA;&lt;p&gt;The environment file comes with defaults (&lt;code&gt;.env.example&lt;/code&gt;), but it is highly recommend to install and operate your own ElectrumX server. Web browser communication is possible through the &lt;code&gt;wss&lt;/code&gt; (secure websockets) interface of ElectrumX.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ELECTRUMX_WSS=wss://electrumx.atomicals.xyz:50012&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;ELECTRUMX_WSS&lt;/em&gt;: URL of the ElectrumX with Atomicals support. Note that only &lt;code&gt;wss&lt;/code&gt; endpoints are accessible from web browsers.&lt;/p&gt; &#xA;&lt;h4&gt;1. Wallet Setup&lt;/h4&gt; &#xA;&lt;p&gt;The purpose of the wallet is to create p2tr (pay-to-taproot) spend scripts and to receive change from the transactions made for the various operations. &lt;em&gt;Do not put more funds than you can afford to lose, as this is still beta!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To initialize a new &lt;code&gt;wallet.json&lt;/code&gt; file that will store your address for receiving change use the &lt;code&gt;wallet-init&lt;/code&gt; command. Alternatively, you may populate the &lt;code&gt;wallet.json&lt;/code&gt; manually, ensuring that the address at &lt;code&gt;m/44&#39;/0&#39;/0&#39;/0/0&lt;/code&gt; is equal to the address and the derivePath is set correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn cli wallet-init&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&#xA;Wallet created at wallet.json&#xA;phrase: maple maple maple maple maple maple maple maple maple maple maple maple&#xA;Legacy address (for change): 1FXL2CJ9nAC...u3e9Evdsa2pKrPhkag&#xA;Derive Path: m/44&#39;/0&#39;/0&#39;/0/0&#xA;WIF: L5Sa65gNR6QsBjqK.....r6o4YzcqNRnJ1p4a6GPxqQQ&#xA;------------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Explore the CLI&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn cli --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Quick Commands&lt;/h4&gt; &#xA;&lt;p&gt;Get all of the commands available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run cli --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the documentation at &lt;a href=&#34;https://docs.atomicals.xyz&#34;&gt;https://docs.atomicals.xyz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ElectrumX Server RPC Interface&lt;/h2&gt; &#xA;&lt;p&gt;See updated ElectrumX (&lt;a href=&#34;https://github.com/atomicals/electrumx-atomicals&#34;&gt;https://github.com/atomicals/electrumx-atomicals&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Any questions or ideas?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://atomicals.xyz&#34;&gt;https://atomicals.xyz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://x.com/atomicalsxyz&#34;&gt;https://x.com/atomicalsxyz&lt;/a&gt; (X - Formerly Twitter)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ccrsxx/twitter-clone</title>
    <updated>2023-09-24T01:43:43Z</updated>
    <id>tag:github.com,2023-09-24:/ccrsxx/twitter-clone</id>
    <link href="https://github.com/ccrsxx/twitter-clone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Twitter clone built in Next.js + TypeScript + Tailwind CSS using Cloud Firestore and Storage&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ccrsxx/twitter-clone/main/.github/assets/presentation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Twitter clone built in Next.js + TypeScript + Tailwind CSS using Cloud Firestore and Storage &lt;/p&gt; &#xA;&lt;h2&gt;Preview ðŸŽ¬&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/55032197/201472767-9db0177a-79b5-4913-8666-1744102b0ad7.mp4&#34;&gt;https://user-images.githubusercontent.com/55032197/201472767-9db0177a-79b5-4913-8666-1744102b0ad7.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features âœ¨&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authentication with Firebase Authentication&lt;/li&gt; &#xA; &lt;li&gt;Strongly typed React components with TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Users can add tweets, like, retweet, and reply&lt;/li&gt; &#xA; &lt;li&gt;Users can delete tweets, add a tweet to bookmarks, and pin their tweet&lt;/li&gt; &#xA; &lt;li&gt;Users can add images and GIFs to tweet&lt;/li&gt; &#xA; &lt;li&gt;Users can follow and unfollow other users&lt;/li&gt; &#xA; &lt;li&gt;Users can see their and other followers and the following list&lt;/li&gt; &#xA; &lt;li&gt;Users can see all users and the trending list&lt;/li&gt; &#xA; &lt;li&gt;Realtime update likes, retweets, and user profile&lt;/li&gt; &#xA; &lt;li&gt;Realtime trending data from Twitter API&lt;/li&gt; &#xA; &lt;li&gt;User can edit their profile&lt;/li&gt; &#xA; &lt;li&gt;Responsive design for mobile, tablet, and desktop&lt;/li&gt; &#xA; &lt;li&gt;Users can customize the site color scheme and color background&lt;/li&gt; &#xA; &lt;li&gt;All images uploads are stored on Firebase Cloud Storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tech ðŸ› &lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firebase.google.com&#34;&gt;Firebase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swr.vercel.app&#34;&gt;SWR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://headlessui.com&#34;&gt;Headless UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-hot-toast.com&#34;&gt;React Hot Toast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://framer.com&#34;&gt;Framer Motion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development ðŸ’»&lt;/h2&gt; &#xA;&lt;p&gt;Here are the steps to run the project locally.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ccrsxx/twitter-clone.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Firebase project and select the web app&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your Firebase config to &lt;code&gt;.env.development&lt;/code&gt;. Note that &lt;code&gt;NEXT_PUBLIC_MEASUREMENT_ID&lt;/code&gt; is optional&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have enabled the following Firebase services:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Authentication. Enable the Google sign-in method.&lt;/li&gt; &#xA;   &lt;li&gt;Cloud Firestore. Create a database and set its location to your nearest region.&lt;/li&gt; &#xA;   &lt;li&gt;Cloud Storage. Create a storage bucket.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Firebase CLI globally&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g firebase-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in to Firebase&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;firebase login&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get your project ID&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;firebase projects:list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select your project ID&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;firebase use your-project-id&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;At this point, you have two choices. Either run this project using the Firebase on the cloud or locally using emulator.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using the Firebase Cloud Backend:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Deploy Firestore rules, Firestore indexes, and Cloud Storage rules&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;firebase deploy --except functions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Run the project&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Using Firebase Local Emulator:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://jdk.java.net/&#34;&gt;Java JDK version 11 or higher&lt;/a&gt; before proceeding. This is required to run the emulators.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Set the environment variable &lt;code&gt;NEXT_PUBLIC_USE_EMULATOR&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;.env.development&lt;/code&gt;. This will make the app use the emulators instead of the cloud backend.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;At this point, you can run the following command to have a fully functional Twitter clone running locally:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev:emulators&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: When you deploy Firestore indexes rules, it might take a few minutes to complete. So before the indexes are enabled, you will get an error when you fetch the data from Firestore.&lt;br&gt;&lt;br&gt;You can check the status of your Firestore indexes with the link below, replace &lt;code&gt;your-project-id&lt;/code&gt; with your project ID: &lt;a href=&#34;https://console.firebase.google.com/u/0/project/your-project-id/firestore/indexes&#34;&gt;https://console.firebase.google.com/u/0/project/your-project-id/firestore/indexes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to get trending data from Twitter API, you need to create a Twitter developer account and get your API keys. Then add your API keys to &lt;code&gt;.env.development&lt;/code&gt;. I hope Elon Musk doesn&#39;t make this API paid ðŸ˜….&lt;/li&gt; &#xA; &lt;li&gt;If you want to make the user stats synced with the deleted tweets, you need to enable the Cloud Functions for Firebase. Then deploy the Cloud Functions.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>