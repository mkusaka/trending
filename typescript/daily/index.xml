<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-28T01:40:34Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>samchon/typescript-json</title>
    <updated>2022-10-28T01:40:34Z</updated>
    <id>tag:github.com,2022-10-28:/samchon/typescript-json</id>
    <link href="https://github.com/samchon/typescript-json" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Super-fast Runtime validator (type checker) with only one line&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TypeScript-JSON&lt;/h1&gt; &#xA;&lt;p&gt;Super-fast Runtime validators and &lt;code&gt;JSON.stringify()&lt;/code&gt; functions, with only one line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/typescript-json&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/typescript-json.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/typescript-json&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/typescript-json.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/samchon/typescript-json/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://github.com/samchon/typescript-json/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/samchon/typescript-json/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/wiki-documentation-forestgreen&#34; alt=&#34;Guide Documents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Github: &lt;a href=&#34;https://github.com/samchon/typescript-json&#34;&gt;https://github.com/samchon/typescript-json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NPM: &lt;a href=&#34;https://www.npmjs.com/package/typescript-json&#34;&gt;https://www.npmjs.com/package/typescript-json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guide Documents: &lt;a href=&#34;https://github.com/samchon/typescript-json/wiki&#34;&gt;https://github.com/samchon/typescript-json/wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import TSON from &#34;typescript-json&#34;;&#xA;&#xA;// ALLOW SUPERFLUOUS PROPERTIES&#xA;TSON.assertType&amp;lt;T&amp;gt;(input); // throws exception&#xA;TSON.is&amp;lt;T&amp;gt;(input); // returns boolean value&#xA;TSON.validate&amp;lt;T&amp;gt;(input); // archives all errors&#xA;&#xA;// DO NOT ALLOW SUPERFLUOUS PROPERTIES&#xA;TSON.equals&amp;lt;T&amp;gt;(input); // returns boolean value&#xA;TSON.assertEquals&amp;lt;T&amp;gt;(input); // throws exception&#xA;TSON.validateEquals&amp;lt;T&amp;gt;(input); // archives all errors&#xA;&#xA;// APPENDIX FUNCTIONS&#xA;TSON.stringify&amp;lt;T&amp;gt;(input); // 5x faster JSON.stringify()&#xA;TSON.assertStringify&amp;lt;T&amp;gt;(input); // assertType() + stringify() &#xA;TSON.isStringify&amp;lt;T&amp;gt;(input); // is() + stringify()&#xA;TSON.application&amp;lt;[T, U, V], &#34;ajv&#34;&amp;gt;(); // JSON schema application generator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript-json&lt;/code&gt; is a transformer library providing JSON related functions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Powerful Runtime type checkers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Performed by only one line, &lt;code&gt;TSON.assertType&amp;lt;T&amp;gt;(input)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Only one library which can validate union type&lt;/li&gt; &#xA;   &lt;li&gt;Maximum 2,000x faster than other libraries&lt;/li&gt; &#xA;   &lt;li&gt;20,000x faster optimizer construction time than similar libraries&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;5x faster &lt;code&gt;JSON.stringify()&lt;/code&gt; function: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Performed by only one line: &lt;code&gt;TSON.stringify&amp;lt;T&amp;gt;(input)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Guarded by type validation: &lt;code&gt;TSON.assertStringify&amp;lt;T&amp;gt;(input)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Only one library which can stringify union type&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13158709/197366076-1d5592e7-b717-4ea3-b9d7-949e7fa4fc76.png&#34; alt=&#34;Is Function Benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13158709/197366105-2b784668-70dd-44bf-b73d-2e601e54c48f.png&#34; alt=&#34;Assert Function Benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Measured on AMD R9 5900HX and Intel i5-1135g7&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;NPM Package&lt;/h3&gt; &#xA;&lt;p&gt;At first, install this &lt;code&gt;typescript-json&lt;/code&gt; by the &lt;code&gt;npm install&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Also, you need additional &lt;code&gt;devDependencies&lt;/code&gt; to compile the TypeScript code with transformation. Therefore, install those all libraries &lt;code&gt;typescript&lt;/code&gt;, &lt;code&gt;ttypescript&lt;/code&gt; and &lt;code&gt;ts-node&lt;/code&gt;. Inform that, &lt;code&gt;ttypescript&lt;/code&gt; is not mis-writing. Do not forget to install the &lt;code&gt;ttypescript&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --save typescript-json&#xA;&#xA;# ENSURE THOSE PACKAGES ARE INSTALLED&#xA;npm install --save-dev typescript&#xA;npm install --save-dev ttypescript&#xA;npm install --save-dev ts-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tsconfig.json&lt;/h3&gt; &#xA;&lt;p&gt;After the installation, you&#39;ve to configure &lt;code&gt;tsconfig.json&lt;/code&gt; file like below.&lt;/p&gt; &#xA;&lt;p&gt;Add a property &lt;code&gt;transform&lt;/code&gt; and its value as &lt;code&gt;typescript-json/lib/transform&lt;/code&gt; into &lt;code&gt;compilerOptions.plugins&lt;/code&gt; array. When configuring, I recommend you to use the &lt;code&gt;strict&lt;/code&gt; option, to enforce developers to distinguish whether each property is nullable or undefindable.&lt;/p&gt; &#xA;&lt;p&gt;Also, you can configure additional properties like &lt;code&gt;numeric&lt;/code&gt; and &lt;code&gt;functional&lt;/code&gt;. The first, &lt;code&gt;numeric&lt;/code&gt; is an option whether to test &lt;code&gt;Number.isNaN()&lt;/code&gt; and &lt;code&gt;Number.isFinite()&lt;/code&gt; to numeric value or not. The second, &lt;code&gt;functional&lt;/code&gt; is an option whether to test function type or not. Default values of those options are all &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;{&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;strict&#34;: true,&#xA;    &#34;plugins&#34;: [&#xA;      {&#xA;        &#34;transform&#34;: &#34;typescript-json/lib/transform&#34;,&#xA;        // &#34;functional&#34;: true, // test function type&#xA;        // &#34;numeric&#34;: true, // test `isNaN()` and `isFinite()`&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the &lt;code&gt;tsconfig.json&lt;/code&gt; definition, you can compile &lt;code&gt;typescript-json&lt;/code&gt; utilized code by using &lt;code&gt;ttypescript&lt;/code&gt;. If you want to run your TypeScript file through &lt;code&gt;ts-node&lt;/code&gt;, use &lt;code&gt;-C ttypescript&lt;/code&gt; argument like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# COMPILE&#xA;npx ttsc&#xA;&#xA;# WITH TS-NODE&#xA;npx ts-node -C ttypescript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vite&lt;/h3&gt; &#xA;&lt;p&gt;Just open &lt;code&gt;vite.config.ts&lt;/code&gt; file and assign &lt;code&gt;typescript: ttsc&lt;/code&gt; property like below.&lt;/p&gt; &#xA;&lt;p&gt;For reference, don&#39;t forget configuring &lt;a href=&#34;https://raw.githubusercontent.com/samchon/typescript-json/master/#tsconfigjson&#34;&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt; file of above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { defineConfig } from &#39;vite&#39;&#xA;import react from &#39;@vitejs/plugin-react&#39;&#xA;import typescript from &#34;@rollup/plugin-typescript&#34;;&#xA;import ttsc from &#34;ttypescript&#34;;&#xA;&#xA;// https://vitejs.dev/config/&#xA;export default defineConfig({&#xA;  plugins: [&#xA;    react(),&#xA;    typescript({&#xA;      typescript: ttsc,&#xA;    })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;webpack&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;webpack&lt;/code&gt; with &lt;code&gt;ts-loader&lt;/code&gt;, configure the &lt;code&gt;webpack.config.js&lt;/code&gt; file like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const transform = require(&#34;typescript-json/lib/transform&#34;).default;&#xA;&#xA;module.exports = {&#xA;    // I am hiding the rest of the webpack config&#xA;    module: {&#xA;        rules: [&#xA;            {&#xA;                test: /\.(ts|tsx)$/,&#xA;                exclude: /node_modules/,&#xA;                loader: &#39;ts-loader&#39;,&#xA;                options: {&#xA;                    getCustomTransformers: program =&amp;gt; ({&#xA;                        before: [transform(program)]&#xA;                        // before: [&#xA;                        //     transform(program, {&#xA;                        //         functional: true,&#xA;                        //         numeric: true&#xA;                        // })&#xA;                        // ]&#xA;                    })&#xA;                }&#xA;            }&#xA;        ]&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Runtime Validators&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// ALLOW SUPERFLUOUS PROPERTIES&#xA;export function is&amp;lt;T&amp;gt;(input: T | unknown): input is T; // true or false&#xA;export function assertType&amp;lt;T&amp;gt;(input: T | unknown): T; // throws `TypeGuardError`&#xA;export function validate&amp;lt;T&amp;gt;(input: T | unknown): IValidation; // detailed reasons&#xA;&#xA;// DO NOT ALLOW SUPERFLUOUS PROPERTIES&#xA;export function equals&amp;lt;T&amp;gt;(input: T | unknown): boolean;&#xA;export function assertEquals&amp;lt;T&amp;gt;(input: T | unknown): T;&#xA;export function validateEquals&amp;lt;T&amp;gt;(input: T | unknown): IValidation;&#xA;&#xA;// REUSABLE FUNCTIONS&#xA;export function createIs&amp;lt;T&amp;gt;(): (input: unknown): input is T;&#xA;export function createAssertType&amp;lt;T&amp;gt;(): (input: unknown) =&amp;gt; T;&#xA;export function createValidate&amp;lt;T&amp;gt;(): (input: unknown) =&amp;gt; IValidation;&#xA;&#xA;export function createEquals&amp;lt;T&amp;gt;(): (input: unknown) =&amp;gt; input is T;&#xA;export function createAssertEquals&amp;lt;T&amp;gt;(): (input: unknown) =&amp;gt; T;&#xA;export function createValidateEquals&amp;lt;T&amp;gt;(): (input: unknown) =&amp;gt; IValidation;&#xA;&#xA;// DATA STRUCTURES&#xA;export interface IValidation {&#xA;    success: boolean;&#xA;    errors: IValidation.IError[];&#xA;}&#xA;export namespace IValidation {&#xA;    export interface IError {&#xA;        path: string;&#xA;        expected: string;&#xA;        value: any;&#xA;    }&#xA;}&#xA;&#xA;export class TypeGuardError extends Error {&#xA;    public readonly method: string;&#xA;    public readonly path: string | undefined;&#xA;    public readonly expected: string;&#xA;    public readonly value: any;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can enhance type constraint more by using &lt;a href=&#34;https://raw.githubusercontent.com/samchon/typescript-json/master/#comment-tags&#34;&gt;&lt;strong&gt;Comment Tags&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript-json&lt;/code&gt; provides three basic validator functions.&lt;/p&gt; &#xA;&lt;p&gt;The first, &lt;code&gt;assertType()&lt;/code&gt; is a function throwing &lt;code&gt;TypeGuardError&lt;/code&gt; when an &lt;code&gt;input&lt;/code&gt; value is different with its type, generic argument &lt;code&gt;T&lt;/code&gt;. The second function, &lt;code&gt;is()&lt;/code&gt; returns a &lt;code&gt;boolean&lt;/code&gt; value meaning whether matched or not. The last &lt;code&gt;validate()&lt;/code&gt; function archives all type errors into an &lt;code&gt;IValidation.errors&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;p&gt;If you want much strict validators that do not allow superfluous properties, you can use below functions instead. &lt;code&gt;assertEquals()&lt;/code&gt; function throws &lt;code&gt;TypeGuardError&lt;/code&gt;, &lt;code&gt;equals()&lt;/code&gt; function returns &lt;code&gt;boolean&lt;/code&gt; value, and &lt;code&gt;validateEquals()&lt;/code&gt; function archives all type errors into an &lt;code&gt;IValidation.errors&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Basic&lt;/th&gt; &#xA;   &lt;th&gt;Strict&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;assertType&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assertEquals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;is&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;equals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;validateEquals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;interface IPerson {&#xA;    name: string;&#xA;    age: number;&#xA;}&#xA;&#xA;const person = {&#xA;    name: &#34;Jeongho Nam&#34;,&#xA;    age: 34,&#xA;    account: &#34;samchon&#34;, // superfluous property&#xA;};&#xA;&#xA;TSON.is&amp;lt;IPerson&amp;gt;(person); // -&amp;gt; true, allow superfluous property&#xA;TSON.equals&amp;lt;IPerson&amp;gt;(person); // -&amp;gt; false, do not allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comparing those type checker functions with other similar libraries, &lt;code&gt;typescript-json&lt;/code&gt; is much easier than others. For example, &lt;code&gt;ajv&lt;/code&gt; requires complicate JSON schema definition that is different with the TypeScript type. Besides, &lt;code&gt;typescript-json&lt;/code&gt; requires only one line.&lt;/p&gt; &#xA;&lt;p&gt;Also, only &lt;code&gt;typescript-json&lt;/code&gt; can validate union typed structure exactly. All the other libraries can check simple object type, however, none of them can validate complicate union type. The fun thing is, &lt;code&gt;ajv&lt;/code&gt; requires JSON schema definition for validation, but it can&#39;t validate the JSON schema type. How contradict it is.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Components&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;TSON&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;TypeBox&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;ajv&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;io-ts&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;zod&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;C.V.&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Easy to use&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ObjectSimple.ts&#34;&gt;Object (simple)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ObjectHierarchical.ts&#34;&gt;Object (hierarchical)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ObjectRecursive.ts&#34;&gt;Object (recursive)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ObjectUnionImplicit.ts&#34;&gt;Object (union, implicit)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ObjectUnionExplicit.ts&#34;&gt;Object (union, explicit)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/#comment-tags&#34;&gt;Object (additional tags)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/TemplateUnion.ts&#34;&gt;Object (template literal types)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/DynamicTemplate.ts&#34;&gt;Object (dynamic properties)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ArrayHierarchical.ts&#34;&gt;Array (hierarchical)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ArrayRecursive.ts&#34;&gt;Array (recursive)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ArrayRecursiveUnionExplicit.ts&#34;&gt;Array (recursive, union)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/test/structures/ArrayRecursiveUnionImplicit.ts&#34;&gt;Array (R+U, implicit)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/src/schemas/IJsonSchema.ts&#34;&gt;&lt;strong&gt;Ultimate Union Type&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;TSON: &lt;code&gt;typescript-json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;C.V.: &lt;code&gt;class-validator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Furthermore, when union type comes, &lt;code&gt;typescript-json&lt;/code&gt; is extremely faster than others.&lt;/p&gt; &#xA;&lt;p&gt;As you can see from the above table, &lt;code&gt;ajv&lt;/code&gt; and &lt;code&gt;typescript-is&lt;/code&gt; are fallen in the most union type cases. Also, they&#39;re even showing a huge different from &lt;code&gt;typescript-json&lt;/code&gt;, in the time benchmark that does not care whether the validation is exact or not.&lt;/p&gt; &#xA;&lt;p&gt;The extreme different is shown in the &#34;ultimate union&#34; type, when validating &lt;a href=&#34;https://github.com/samchon/typescript-json/raw/master/src/schemas/IJsonSchema.ts&#34;&gt;JSON schema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13158709/197246323-d4b319bc-38ee-492a-97b1-62b1981c082b.png&#34; alt=&#34;Super-fast runtime validator&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Measured on AMD-5800H&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Fastest JSON String Converter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export function stringify&amp;lt;T&amp;gt;(input: T): string; // do not validate type (danger)&#xA;export function assertStringify&amp;lt;T&amp;gt;(input: T): string; // throws TypeGuardError&#xA;export function isStringify&amp;lt;T&amp;gt;(input: T): string | null; // null when wrong type&#xA;&#xA;export function createStringify&amp;lt;T&amp;gt;(): (input: T) =&amp;gt; string;&#xA;export function createAssertStringify&amp;lt;T&amp;gt;(): (input: T) =&amp;gt; string;&#xA;export function createIsStringify&amp;lt;T&amp;gt;(): (input: T) =&amp;gt; string | null;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Super-fast JSON string conversion function.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;TSON.stringify()&lt;/code&gt; function instead of the native &lt;code&gt;JSON.stringify()&lt;/code&gt;, the JSON conversion time would be 5x times faster. Also, you can perform such super-fast JSON string conversion very easily, by only one line: &lt;code&gt;TSON.stringify&amp;lt;T&amp;gt;(input)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to validate the input type at the same time, you can choose &lt;code&gt;TSON.isStringify&amp;lt;T&amp;gt;(input)&lt;/code&gt; or &lt;code&gt;TSON.assertStringify&amp;lt;T&amp;gt;(input)&lt;/code&gt; functions instead. Those function calls &lt;code&gt;TSON.is()&lt;/code&gt; or &lt;code&gt;TSON.assertType()&lt;/code&gt; function before converting to the JSON string. Of course, its conversion speed would be reduced, but it would be much safer than the native &lt;code&gt;JSON.stringify()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Comparing performance, &lt;code&gt;typescript-json&lt;/code&gt; is about 5x times faster than the native &lt;code&gt;JSON.stringify()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13158709/197731958-f20157b2-2e31-4e24-a27f-3ae9a8e565bb.png&#34; alt=&#34;JSON conversion speed on each CPU&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Measured on Intel AMD-5800H&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;JSON Schema Generation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export function application&amp;lt;&#xA;    Types extends unknown[],&#xA;    Purpose extends &#34;swagger&#34; | &#34;ajv&#34; = &#34;swagger&#34;,&#xA;    Prefix extends string = Purpose extends &#34;swagger&#34;&#xA;        ? &#34;#/components/schemas&#34;&#xA;        : &#34;components#/schemas&#34;,&#xA;&amp;gt;(): IJsonApplication;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can enhance JSON schema more by using &lt;a href=&#34;https://raw.githubusercontent.com/samchon/typescript-json/master/#comment-tags&#34;&gt;&lt;strong&gt;Comment Tags&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript-json&lt;/code&gt; even supports JSON schema application generation.&lt;/p&gt; &#xA;&lt;p&gt;When you need to share your TypeScript types to other language, this &lt;code&gt;application()&lt;/code&gt; function would be useful. It generates JSON schema definition by analyzing your &lt;code&gt;Types&lt;/code&gt;. Therefore, with &lt;code&gt;typescript-json&lt;/code&gt; and its &lt;code&gt;application()&lt;/code&gt; function, you don&#39;t need to write JSON schema definition manually.&lt;/p&gt; &#xA;&lt;p&gt;By the way, the reason why you&#39;re using this &lt;code&gt;application()&lt;/code&gt; is for generating a swagger documents, I recommend you to use my another library &lt;a href=&#34;https://github.com/samchon/nestia&#34;&gt;nestia&lt;/a&gt;. It will automate the swagger documents generation, by analyzing your entire backend server code.&lt;/p&gt; &#xA;&lt;h3&gt;Comment Tags&lt;/h3&gt; &#xA;&lt;p&gt;You can enhance &lt;a href=&#34;https://raw.githubusercontent.com/samchon/typescript-json/master/#runtime-validators&#34;&gt;Runtime Validators&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/samchon/typescript-json/master/#json-schema-generation&#34;&gt;JSON Schema Generator&lt;/a&gt; by writing comment tags.&lt;/p&gt; &#xA;&lt;p&gt;Below table shows list of supported comment tags. You can utilize those tags by writing in comments like below example structure &lt;code&gt;TagExample&lt;/code&gt;. Look at them and utilize those comment tags to make your TypeScript program to be safer and more convenient.&lt;/p&gt; &#xA;&lt;p&gt;Also, don&#39;t worry about taking a mistake on using those comment tags. In that case, compile error would be occured. By the compile level error detection, &lt;code&gt;typescript-json&lt;/code&gt; is much stronger than any other runtime validator libraries using decorator functions, which can&#39;t catch any mistake on the compilation level.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag Kind&lt;/th&gt; &#xA;   &lt;th&gt;Target Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@type {&#34;int&#34;|&#34;uint&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@range (number, number]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@minimum {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@maximum {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@exclusiveMinimum {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@exclusiveMaximum {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@multipleOf {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@step {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@length {number} | [number, number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@minLength {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@maxLength {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@format {&#34;email&#34;|&#34;uuid&#34;|&#34;url&#34;|&#34;ipv4&#34;|&#34;ipv6&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@pattern {string}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@items {number} | [number, number)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@minItems {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@maxItems {number}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export interface TagExample {&#xA;    /* -----------------------------------------------------------&#xA;        ARRAYS&#xA;    ----------------------------------------------------------- */&#xA;    /**&#xA;     * You can limit array length like below.&#xA;     * &#xA;     * @minItems 3&#xA;     * @maxItems 10&#xA;     * &#xA;     * Also, you can use `@items` tag instead.&#xA;     * &#xA;     * @items (5, 10] --&amp;gt; 5 &amp;lt; length &amp;lt;= 10&#xA;     * @items [7      --&amp;gt; 7 &amp;lt;= length&#xA;     * @items 12)     --&amp;gt; length &amp;lt; 12&#xA;     * &#xA;     * Furthermore, you can use additional tags for each item.&#xA;     * &#xA;     * @type uint&#xA;     * @format uuid&#xA;     */&#xA;    array: Array&amp;lt;string|number&amp;gt;;&#xA;&#xA;    /**&#xA;     * If two-dimensional array comes, length limit would work for &#xA;     * both 1st and 2nd level arraies. Also using additional tags &#xA;     * for each item (string) would still work.&#xA;     * &#xA;     * @items (5, 10)&#xA;     * @format url&#xA;     */&#xA;    matrix: string[][];&#xA;&#xA;    /* -----------------------------------------------------------&#xA;        NUMBERS&#xA;    ----------------------------------------------------------- */&#xA;    /**&#xA;     * Type of number.&#xA;     * &#xA;     * It must be one of integer or unsigned integer.&#xA;     * &#xA;     * @type int&#xA;     * @type uint&#xA;     */&#xA;    type: number;&#xA;&#xA;    /**&#xA;     * You can limit range of numeric value like below.&#xA;     * &#xA;     * @minimum 5&#xA;     * @maximum 10&#xA;     * &#xA;     * Also, you can use `@range` tag instead.&#xA;     * &#xA;     * @range (5, 10] --&amp;gt; 5 &amp;lt; x &amp;lt;= 10&#xA;     * @range [7      --&amp;gt; 7 &amp;lt;= x&#xA;     * @range 12)     --&amp;gt; x &amp;lt; 12&#xA;     */&#xA;    range: number;&#xA;&#xA;    /**&#xA;     * Step tag requires minmum or exclusiveMinimum tag.&#xA;     * &#xA;     * 3, 13, 23, 33, ...&#xA;     * &#xA;     * @step 10&#xA;     * @exclusiveMinimum 3&#xA;     * @range [3&#xA;     */&#xA;    step: number;&#xA;&#xA;    /**&#xA;     * Value must be multiple of the given number.&#xA;     * &#xA;     * -5, 0, 5, 10, 15, ...&#xA;     * &#xA;     * @multipleOf 5&#xA;     */&#xA;    multipleOf: number;&#xA;&#xA;    /* -----------------------------------------------------------&#xA;        STRINGS&#xA;    ----------------------------------------------------------- */&#xA;    /**&#xA;     * You can limit string length like below.&#xA;     * &#xA;     * @minLength 3&#xA;     * @maxLength 10&#xA;     * &#xA;     * Also, you can use `@length` tag instead.&#xA;     * &#xA;     * @length 10      --&amp;gt; length = 10&#xA;     * @length [3, 7]  --&amp;gt; 3 &amp;lt;= length &amp;amp;&amp;amp; length &amp;lt;= 7&#xA;     * @length (5, 10) --&amp;gt; 5 &amp;lt; length &amp;amp;&amp;amp; length &amp;lt; 10&#xA;     * @length [4      --&amp;gt; 4 &amp;lt; length&#xA;     * @length 7)      --&amp;gt; length &amp;lt; 7&#xA;     */&#xA;    length: string;&#xA;&#xA;    /**&#xA;     * Mobile number composed by only numbers.&#xA;     * &#xA;     * Note that, `typescript-json` does not support flag of regex,&#xA;     * because JSON schema definition does not suppor it either.&#xA;     * Therefore, write regex pattern without `/` characters and flag.&#xA;     * &#xA;     * @pattern ^0[0-9]{7,16} &#xA;     *     -&amp;gt; RegExp(/[0-9]{7,16}/).test(&#34;01012345678&#34;)&#xA;     */&#xA;    mobile: string;&#xA;&#xA;    /**&#xA;     * E-mail address.&#xA;     * &#xA;     * @format email&#xA;     */&#xA;    email: string;&#xA;&#xA;    /**&#xA;     * UUID value.&#xA;     * &#xA;     * @format uuid&#xA;     */&#xA;    uuid: string;&#xA;&#xA;    /**&#xA;     * URL address.&#xA;     * &#xA;     * @format url&#xA;     */&#xA;    url: string;&#xA;&#xA;    /**&#xA;     * IPv4 address.&#xA;     * &#xA;     * @format ipv4&#xA;     */&#xA;    ipv4: string;&#xA;&#xA;    /**&#xA;     * IPv6 address.&#xA;     * &#xA;     * @format ipv6&#xA;     */&#xA;    ipv6: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Nestia&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/samchon/nestia&#34;&gt;https://github.com/samchon/nestia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automatic &lt;code&gt;SDK&lt;/code&gt; and &lt;code&gt;Swagger&lt;/code&gt; generator for &lt;code&gt;NestJS&lt;/code&gt;, evolved than ever.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nestia&lt;/code&gt; is an evolved &lt;code&gt;SDK&lt;/code&gt; and &lt;code&gt;Swagger&lt;/code&gt; generator, which analyzes your &lt;code&gt;NestJS&lt;/code&gt; server code in the compilation level. With &lt;code&gt;nestia&lt;/code&gt; and compilation level analyzer, you don&#39;t need to write any swagger or class-validator decorators.&lt;/p&gt; &#xA;&lt;p&gt;Reading below table and example code, feel how the &#34;compilation level&#34; makes &lt;code&gt;nestia&lt;/code&gt; stronger.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Components&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;nestia&lt;/code&gt;::SDK&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;nestia&lt;/code&gt;::swagger&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;@nestjs/swagger&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pure DTO interface&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Description comments&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Simple structure&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generic type&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Union type&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;▲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intersection type&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;▲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Conditional type&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;▲&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Auto completion&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Type hints&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5x faster &lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ensure type safety&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// IMPORT SDK LIBRARY GENERATED BY NESTIA&#xA;import api from &#34;@samchon/shopping-api&#34;;&#xA;import { IPage } from &#34;@samchon/shopping-api/lib/structures/IPage&#34;;&#xA;import { ISale } from &#34;@samchon/shopping-api/lib/structures/ISale&#34;;&#xA;import { ISaleArticleComment } from &#34;@samchon/shopping-api/lib/structures/ISaleArticleComment&#34;;&#xA;import { ISaleQuestion } from &#34;@samchon/shopping-api/lib/structures/ISaleQuestion&#34;;&#xA;&#xA;export async function trace_sale_question_and_comment&#xA;    (connection: api.IConnection): Promise&amp;lt;void&amp;gt;&#xA;{&#xA;    // LIST UP SALE SUMMARIES&#xA;    const index: IPage&amp;lt;ISale.ISummary&amp;gt; = await api.functional.shoppings.sales.index&#xA;    (&#xA;        connection,&#xA;        &#34;general&#34;,&#xA;        { limit: 100, page: 1 }&#xA;    );&#xA;&#xA;    // PICK A SALE&#xA;    const sale: ISale = await api.functional.shoppings.sales.at&#xA;    (&#xA;        connection, &#xA;        index.data[0].id&#xA;    );&#xA;    console.log(&#34;sale&#34;, sale);&#xA;&#xA;    // WRITE A QUESTION&#xA;    const question: ISaleQuestion = await api.functional.shoppings.sales.questions.store&#xA;    (&#xA;        connection,&#xA;        &#34;general&#34;,&#xA;        sale.id,&#xA;        {&#xA;            title: &#34;How to use this product?&#34;,&#xA;            body: &#34;The description is not fully enough. Can you introduce me more?&#34;,&#xA;            files: []&#xA;        }&#xA;    );&#xA;    console.log(&#34;question&#34;, question);&#xA;&#xA;    // WRITE A COMMENT&#xA;    const comment: ISaleArticleComment = await api.functional.shoppings.sales.comments.store&#xA;    (&#xA;        connection,&#xA;        &#34;general&#34;,&#xA;        sale.id,&#xA;        question.id,&#xA;        {&#xA;            body: &#34;p.s) Can you send me a detailed catalogue?&#34;,&#xA;            anonymous: false&#xA;        }&#xA;    );&#xA;    console.log(&#34;comment&#34;, comment);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nestia-Helper&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/samchon/nestia-helper&#34;&gt;https://github.com/samchon/nestia-helper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Helper library of &lt;code&gt;NestJS&lt;/code&gt;, using this &lt;code&gt;typescript-json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nestia-helper&lt;/code&gt; is a helper library of &lt;code&gt;NestJS&lt;/code&gt;, which boosts up the &lt;code&gt;JSON.stringify()&lt;/code&gt; speed 5x times faster about the API responses, automatically. Also, &lt;code&gt;nestia-helper&lt;/code&gt; supports automatic valiation of request body, too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import helper from &#34;nestia-helper&#34;;&#xA;import * as nest from &#34;@nestjs/common&#34;;&#xA;&#xA;@nest.Controller(&#34;bbs/articles&#34;)&#xA;export class BbsArticlesController&#xA;{&#xA;    // automatic TSON.stringify() for response body&#xA;    @helper.TypedRoute.Get()&#xA;    public store(&#xA;        // automatic TSON.assertType() for request body&#xA;        @helper.TypedBody() input: IBbsArticle.IStore&#xA;    ): Promise&amp;lt;IBbsArticle&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>agoraxyz/guild.xyz</title>
    <updated>2022-10-28T01:40:34Z</updated>
    <id>tag:github.com,2022-10-28:/agoraxyz/guild.xyz</id>
    <link href="https://github.com/agoraxyz/guild.xyz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for token-curated communities.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;guild.xyz interface&lt;/h1&gt; &#xA;&lt;p&gt;Open source interface for Guild.xyz -- a tool for token-curated communities, powered by Agora.xyz.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://guild.xyz&#34;&gt;guild.xyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docs: &lt;a href=&#34;https://docs.guild.xyz/&#34;&gt;docs.guild.xyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/guildxyz&#34;&gt;@Guildxyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:contact@agora.space&#34;&gt;contact@agora.space&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/guildxyz&#34;&gt;Guild.xyz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;For steps on local deployment, development, and code contribution, please see &lt;a href=&#34;https://raw.githubusercontent.com/agoraxyz/guild.xyz/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next.js&lt;/li&gt; &#xA; &lt;li&gt;Chakra UI&lt;/li&gt; &#xA; &lt;li&gt;State management: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SWR for server and blockchain state (fetching and caching)&lt;/li&gt; &#xA;   &lt;li&gt;React Hook Form for form state&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Web3 stuff: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ethers.js&lt;/li&gt; &#xA;   &lt;li&gt;web3-react for connection management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>umijs/dumi</title>
    <updated>2022-10-28T01:40:34Z</updated>
    <id>tag:github.com,2022-10-28:/umijs/dumi</id>
    <link href="https://github.com/umijs/dumi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📖 Documentation Generator of React Component&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dumi&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.org/package/dumi&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/dumi/next&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/dumi&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/dumi&#34; alt=&#34;NPM downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The development version for dumi 2, if you are looking for dumi 1, please switch to the &lt;a href=&#34;https://github.com/umijs/dumi/tree/1.x&#34;&gt;1.x branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm run dev&#xA;$ npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>