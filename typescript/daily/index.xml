<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-10T01:48:33Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DanielXMoore/Civet</title>
    <updated>2023-01-10T01:48:33Z</updated>
    <id>tag:github.com,2023-01-10:/DanielXMoore/Civet</id>
    <link href="https://github.com/DanielXMoore/Civet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The modern way to write TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Civet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DanielXMoore/Civet/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/DanielXMoore/Civet/build.yml?branch=master&amp;amp;logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@danielx/civet&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@danielx/civet.svg?style=for-the-badge&#34; alt=&#34;NPM Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@danielx/civet&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@danielx/civet.svg?style=for-the-badge&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/xkrW9GebBc&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/933472021310996512?style=for-the-badge&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/civet&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/civet?style=for-the-badge&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The modern way to write TypeScript.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://civet.dev/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://civet-web.vercel.app/&#34;&gt;Online Civet Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=DanielX.civet&#34;&gt;Civet VSCode Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/xkrW9GebBc&#34;&gt;Discord Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plugins for &lt;a href=&#34;https://github.com/lorefnon/vite-plugin-civet&#34;&gt;Vite&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/DanielXMoore/Civet/master/source/esbuild-plugin.civet&#34;&gt;esbuild&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/DanielXMoore/Civet/master/source/esm.civet&#34;&gt;ESM module resolution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Starter templates for &lt;a href=&#34;https://github.com/orenelbaum/solid-civet-template&#34;&gt;Solid&lt;/a&gt; and &lt;a href=&#34;https://github.com/orenelbaum/solid-start-civet-template&#34;&gt;Solid Start&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart Guide&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install&#xA;npm install -g @danielx/civet&#xA;# Run Civet code directly in a REPL&#xA;civet&#xA;# Transpile typed Civet code into TypeScript in a REPL&#xA;civet -c&#xA;# Compile Civet source file to TypeScript&#xA;civet &amp;lt; source.civet &amp;gt; output.ts&#xA;# Execute a simple .civet script (no imports)&#xA;civet source.civet ...args...&#xA;# Execute a .civet source file in node using ts-node&#xA;node --loader ts-node/esm --loader @danielx/civet/esm source.civet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/18894/184558519-b675a903-7490-43ba-883e-0d8addacd4b9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code Sample&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;ts, {CompilerOptions} from typescript&#xA;&#xA;DefaultCompilerOptions : CompilerOptions :=&#xA;  allowNonTsExtensions: true&#xA;  allowJs: true&#xA;  target: ts.ScriptTarget.Latest&#xA;  moduleResolution: ts.ModuleResolutionKind.NodeJs&#xA;  module: ts.ModuleKind.CommonJS&#xA;  allowSyntheticDefaultImports: true&#xA;  experimentalDecorators: true&#xA;&#xA;fileCache : Record&amp;lt;string, any&amp;gt; := {}&#xA;&#xA;createCompilerHost := (options: CompilerOptions, moduleSearchLocations : string[]) -&amp;gt;&#xA;  fileExists := (fileName: string) : boolean -&amp;gt;&#xA;    fileCache[fileName]?&#xA;&#xA;  readFile := (fileName: string) -&amp;gt;&#xA;    fileCache[fileName]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Things Kept from CoffeeScript&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is&lt;/code&gt; → &lt;code&gt;===&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;or&lt;/code&gt;, &lt;code&gt;or=&lt;/code&gt; → &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;and=&lt;/code&gt; → &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a %% b&lt;/code&gt; → &lt;code&gt;(a % b + b) % b&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;loop&lt;/code&gt; → &lt;code&gt;while(true)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unless exp&lt;/code&gt; → &lt;code&gt;if(!exp)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;until condition&lt;/code&gt; → &lt;code&gt;while(!condition)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Object literal syntax &lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;x =&#xA;  a: 1&#xA;  b: 2&#xA;  c:&#xA;    x: &#34;pretty&#34;&#xA;    y: &#34;cool&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional semi-colons&lt;/li&gt; &#xA; &lt;li&gt;Indentation based block syntax&lt;/li&gt; &#xA; &lt;li&gt;OptionalChain shorthand for index and function application: &lt;code&gt;a?[b]&lt;/code&gt; → &lt;code&gt;a?.[b]&lt;/code&gt;, &lt;code&gt;a?(b)&lt;/code&gt; → &lt;code&gt;a?.(b)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;?=&lt;/code&gt; null-coalescing assignment shorthand&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; shorthand: &lt;code&gt;@&lt;/code&gt; → &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;@id&lt;/code&gt; → &lt;code&gt;this.id&lt;/code&gt;, &lt;code&gt;{@id} → {id: this.id}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prototype shorthand: &lt;code&gt;X::&lt;/code&gt; → &lt;code&gt;X.prototype&lt;/code&gt;, &lt;code&gt;X::a&lt;/code&gt; → &lt;code&gt;X.prototype.a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Class static shorthand &lt;code&gt;@&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chained comparisons: &lt;code&gt;a &amp;lt; b &amp;lt; c&lt;/code&gt; → &lt;code&gt;a &amp;lt; b &amp;amp;&amp;amp; b &amp;lt; c&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postfix &lt;code&gt;if/unless/while/until/for&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Block Strings &lt;code&gt;&#34;&#34;&#34;&lt;/code&gt; / &lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;#{exp}&lt;/code&gt; interpolation in &lt;code&gt;&#34;&#34;&#34;&lt;/code&gt; strings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;when&lt;/code&gt; inside &lt;code&gt;switch&lt;/code&gt; automatically breaks&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;code&gt;,&lt;/code&gt; separated &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;when&lt;/code&gt; expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;else&lt;/code&gt; → &lt;code&gt;default&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Range literals &lt;code&gt;[0...10]&lt;/code&gt;, &lt;code&gt;[a..b]&lt;/code&gt;, &lt;code&gt;[x - 2 .. x + 2]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Array slices &lt;code&gt;list[0...2]&lt;/code&gt; → &lt;code&gt;list.slice(0, 2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slice assignment &lt;code&gt;numbers[3..6] = [-3, -4, -5, -6]&lt;/code&gt; → &lt;code&gt;numbers.splice(3, 4, ...[-3, -4, -5, -6])&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implicit returns&lt;/li&gt; &#xA; &lt;li&gt;Late assignment &lt;code&gt;x + y = z&lt;/code&gt; → &lt;code&gt;x + (y = z)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Braceless inline objects &lt;code&gt;x = coolStory: true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simplified number method calls &lt;code&gt;1.toFixed()&lt;/code&gt; → &lt;code&gt;1..toFixed()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;switch&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt;/&lt;code&gt;loop&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt;/&lt;code&gt;throw&lt;/code&gt; expressions&lt;/li&gt; &#xA; &lt;li&gt;Destructuring object assignment doesn&#39;t require being wrapped in parens at the statement level &lt;code&gt;{a, b} = c&lt;/code&gt; → &lt;code&gt;({a, b} = c)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prefix or postfix rest/splats &lt;code&gt;[...a]&lt;/code&gt;, &lt;code&gt;x = [a...]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RestProperty in any position &lt;code&gt;{a, ...b, c} = d&lt;/code&gt; → &lt;code&gt;{a, c, ...b} = d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RestElement/RestParameter in any position &lt;code&gt;(first, ...midle, last) -&amp;gt;&lt;/code&gt; → &lt;code&gt;function(first, ...middle) { let [last] = middle.splice(-1)}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;///&lt;/code&gt; Heregexp &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With some &lt;a href=&#34;https://raw.githubusercontent.com/DanielXMoore/Civet/master/#things-changed-from-coffeescript&#34;&gt;changes&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JSX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Things Removed from CoffeeScript&lt;/h2&gt; &#xA;&lt;p&gt;Most of these can be enabled by adding a &lt;a href=&#34;https://raw.githubusercontent.com/DanielXMoore/Civet/master/#coffeescript-compatibility&#34;&gt;&lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; directive prologue&lt;/a&gt; to the top of your file. The goal is to provide a very high level of compatibility with existing CoffeeScript code while offering a fine grained migration path to modern Civet.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implicit &lt;code&gt;var&lt;/code&gt; declarations (use &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet autoVar&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on/yes/off/no&lt;/code&gt; (use &lt;code&gt;true/false&lt;/code&gt;, &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeBooleans&#34;&lt;/code&gt; to add them back)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;not&lt;/code&gt; (use &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeNot&#34;&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;not instanceof&lt;/code&gt; (use &lt;code&gt;!(a instanceof b)&lt;/code&gt;, &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeNot&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;not of&lt;/code&gt; use (&lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeNot&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;NOTE: CoffeeScript &lt;code&gt;not&lt;/code&gt; precedence is dubious. &lt;code&gt;not a &amp;lt; b&lt;/code&gt; should be equivalent to &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt; but it is in fact &lt;code&gt;!a &amp;lt; b&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;do&lt;/code&gt; keyword (replaced with JS &lt;code&gt;do&lt;/code&gt;, invoke using existing &lt;code&gt;(-&amp;gt; ...)()&lt;/code&gt; syntax, &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeDo&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for from&lt;/code&gt; (use JS &lt;code&gt;for of&lt;/code&gt;, &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeForLoops&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for own of&lt;/code&gt; (use JS &lt;code&gt;for in&lt;/code&gt; and check manually, switch to &lt;code&gt;Map#keys/values/entries&lt;/code&gt;, or use &lt;code&gt;Object.create(null)&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeForLoops&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for ... when &amp;lt;condition&amp;gt;&lt;/code&gt; (use &lt;code&gt;continue if exp&lt;/code&gt; inside loop, &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeForLoops&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a ? b&lt;/code&gt; (use &lt;code&gt;a ?? b&lt;/code&gt;, though it doesn&#39;t check for undeclared variables; &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeBinaryExistential&#34;&lt;/code&gt; enables &lt;code&gt;a ? b&lt;/code&gt; at the cost of losing JS ternary operator)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a of b&lt;/code&gt; (use &lt;code&gt;a in b&lt;/code&gt; as in JS, or &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt;, or &lt;code&gt;&#34;civet coffeeOf&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Backtick embedded JS (replaced by template literals)&lt;/li&gt; &#xA; &lt;li&gt;Will add later &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Conditional assignment &lt;code&gt;a?[x] = 3&lt;/code&gt; → &lt;code&gt;a ? a[x] = 3 : undefined&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Multiple slice assignment &lt;code&gt;otherNumbers[0...] = numbers[3..6] = [-3, -4, -5, -6]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Things Changed from CoffeeScript&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt; → &lt;code&gt;==&lt;/code&gt; rather than &lt;code&gt;===&lt;/code&gt; (unless you specify &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet coffeeEq&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!=&lt;/code&gt; → &lt;code&gt;!=&lt;/code&gt; rather than &lt;code&gt;!==&lt;/code&gt; (unless you specify &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet coffeeEq&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is not&lt;/code&gt; → &lt;code&gt;!==&lt;/code&gt; (unless you specify &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet coffeeNot&#34;&lt;/code&gt;), instead of &lt;code&gt;isnt&lt;/code&gt; (unless you specify &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet coffeeIsnt&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for in&lt;/code&gt; and &lt;code&gt;for of&lt;/code&gt; are no longer swapped and become their JS equivalents (unless you specify &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet CoffeeOf&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a is in b&lt;/code&gt; → &lt;code&gt;b.indexOf(a) &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;a is not in b&lt;/code&gt; → &lt;code&gt;b.indexOf(a) &amp;lt; 0&lt;/code&gt; instead of &lt;code&gt;a in b&lt;/code&gt; and &lt;code&gt;a not in b&lt;/code&gt;; &lt;code&gt;a in b&lt;/code&gt; remains &lt;code&gt;a in b&lt;/code&gt; as in JS, and &lt;code&gt;a not in b&lt;/code&gt; → &lt;code&gt;!(a in b)&lt;/code&gt; (unless you specify &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet coffeeOf&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x?.y&lt;/code&gt; now compiles to &lt;code&gt;x?.y&lt;/code&gt; rather than the &lt;code&gt;if typeof x !== &#39;undefined&#39; &amp;amp;&amp;amp; x !== null&lt;/code&gt; if check&lt;/li&gt; &#xA; &lt;li&gt;Existential &lt;code&gt;x?&lt;/code&gt; → &lt;code&gt;(x != null)&lt;/code&gt; no longer checks for undeclared variables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x?()&lt;/code&gt; → &lt;code&gt;x?.()&lt;/code&gt; instead of &lt;code&gt;if (typeof x === &#39;function&#39;) { x() }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Functions don&#39;t implicitly return the last value if there&#39;s a semicolon at the end: &lt;code&gt;-&amp;gt; x&lt;/code&gt; returns &lt;code&gt;x&lt;/code&gt; but &lt;code&gt;-&amp;gt; x;&lt;/code&gt; does not&lt;/li&gt; &#xA; &lt;li&gt;Backtick embedded JS has been replaced with JS template literals.&lt;/li&gt; &#xA; &lt;li&gt;No longer allowing multiple postfix &lt;code&gt;if/unless&lt;/code&gt; on the same line (use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;and&lt;/code&gt; to combine conditions).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{}&lt;/code&gt; interpolation in &lt;code&gt;&#34;&#34;&lt;/code&gt; strings only when &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet coffeeInterpolation&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Expanded chained comparisons to work on more operators &lt;code&gt;a in b instanceof C&lt;/code&gt; → &lt;code&gt;a in b &amp;amp;&amp;amp; b instanceof C&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postfix iteration/conditionals always wrap the statement &lt;a href=&#34;https://github.com/jashkenas/coffeescript/issues/5431&#34;&gt;#5431&lt;/a&gt;: &lt;code&gt;try x() if y&lt;/code&gt; → &lt;code&gt;if (y) try x()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Civet tries to keep the transpiled output verbatim as much as possible. In Coffee &lt;code&gt;(x)&lt;/code&gt; → &lt;code&gt;x;&lt;/code&gt; but in Civet &lt;code&gt;(x)&lt;/code&gt; → &lt;code&gt;(x)&lt;/code&gt;. Spacing and comments are also preserved as much as possible.&lt;/li&gt; &#xA; &lt;li&gt;Heregex / re.X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stay closer to the &lt;a href=&#34;https://docs.python.org/3/library/re.html#re.X&#34;&gt;Python spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Allows both kinds of substitutions &lt;code&gt;#{..}&lt;/code&gt;, &lt;code&gt;${..}&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Also allows both kinds of single line comments &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Keeps non-newline whitespace inside of character classes.&lt;/li&gt; &#xA;   &lt;li&gt;Doesn&#39;t require escaping &lt;code&gt;#&lt;/code&gt; after space inside of character classes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;#&lt;/code&gt; is always the start of a comment outside of character classes regardless of leading space (CoffeeScript treats &lt;code&gt;\s+#&lt;/code&gt; as comment starts inside and outside of character classes).&lt;/li&gt; &#xA;   &lt;li&gt;Might later add a compat flag to get more CoffeeScript compatibility.&lt;/li&gt; &#xA;   &lt;li&gt;Might also later add a compat flag to only use ES interpolations and comments inside Heregexes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Things Added that CoffeeScript didn&#39;t&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TypeScript Compatibility &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto-rewrite &lt;code&gt;.[mc]ts&lt;/code&gt; → &lt;code&gt;.[mc]js&lt;/code&gt; in imports (workaround for: &lt;a href=&#34;https://github.com/microsoft/TypeScript/issues/37582&#34;&gt;https://github.com/microsoft/TypeScript/issues/37582&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Function annotations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;interface&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;TypeParameters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;!&lt;/code&gt; non-null assertions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:=&lt;/code&gt; readonly class field initializer &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  class A&#xA;    x := 3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  class A {&#xA;    readonly x = 3&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JS Compatibility &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;JS Comment Syntax &lt;code&gt;//&lt;/code&gt; and &lt;code&gt;/* */&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;function&lt;/code&gt; keyword&lt;/li&gt; &#xA;   &lt;li&gt;Braced Blocks (as an alternative to indentation)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;f?.(x)&lt;/code&gt; function application and &lt;code&gt;a?.[x]&lt;/code&gt; index OptionalChain longhand&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;a ? b : c&lt;/code&gt; ConditionalExpression&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;case&lt;/code&gt; statement&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;do&lt;/code&gt;, &lt;code&gt;do { ... } until condition&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Method definitions &lt;code&gt;foo(args) ...&lt;/code&gt; in objects/classes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;get&lt;/code&gt;/&lt;code&gt;set&lt;/code&gt; method definitions&lt;/li&gt; &#xA;   &lt;li&gt;Private identifiers &lt;code&gt;#id&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Convenience for ES6+ Features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Const assignment shorthand: &lt;code&gt;a := b&lt;/code&gt; → &lt;code&gt;const a = b&lt;/code&gt;, &lt;code&gt;{a, b} := c&lt;/code&gt; → &lt;code&gt;const {a, b} = c&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Let assignment shorthand (experimental): &lt;code&gt;a .= b&lt;/code&gt; or &lt;code&gt;a ::= b&lt;/code&gt; → &lt;code&gt;let a = b&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Typed versions of above: &lt;code&gt;a: number .= 5&lt;/code&gt; → &lt;code&gt;let a: number = 5&lt;/code&gt; (but note that &lt;code&gt;a: number = 5&lt;/code&gt; is the object literal &lt;code&gt;{a: (number = 5)}&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@#id&lt;/code&gt; → &lt;code&gt;this.#id&lt;/code&gt; shorthand for private identifiers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;import&lt;/code&gt; shorthand: &lt;code&gt;x from ./x&lt;/code&gt; → &lt;code&gt;import x from &#34;./x&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic &lt;code&gt;import&lt;/code&gt; shorthand: &lt;code&gt;import &#39;./x&#39;&lt;/code&gt; not at top level (e.g. &lt;code&gt;await import &#39;./x&#39;&lt;/code&gt; or inside a function) → &lt;code&gt;import(&#39;./x&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;export&lt;/code&gt; shorthand: &lt;code&gt;export x, y&lt;/code&gt; → &lt;code&gt;export {x, y}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Triple backtick Template Strings remove leading indentation for clarity&lt;/li&gt; &#xA;   &lt;li&gt;Class constructor shorthand &lt;code&gt;@( ... )&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ClassStaticBlock &lt;code&gt;@ { ... }&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; as &lt;code&gt;extends&lt;/code&gt; shorthand&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Short function block syntax like &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Symbol.html#method-i-to_proc&#34;&gt;Ruby symbol to proc&lt;/a&gt;, &lt;a href=&#34;https://crystal-lang.org/reference/1.6/syntax_and_semantics/blocks_and_procs.html#short-one-parameter-syntax&#34;&gt;Crystal&lt;/a&gt;, &lt;a href=&#34;https://elm-lang.org/docs/records#access&#34;&gt;Elm record access&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access: &lt;code&gt;x.map &amp;amp;.name&lt;/code&gt; → &lt;code&gt;x.map(a =&amp;gt; a.name)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Nested access + slices: &lt;code&gt;x.map &amp;amp;.profile?.name[0...3]&lt;/code&gt; → &lt;code&gt;x.map(a =&amp;gt; a.profile?.name.slice(0, 3))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Function call: &lt;code&gt;x.map &amp;amp;.callback a, b&lt;/code&gt; → &lt;code&gt;x.map($ =&amp;gt; $.callback(a, b))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Unary operators: &lt;code&gt;x.map !!&amp;amp;&lt;/code&gt; → &lt;code&gt;x.map($ =&amp;gt; !!$)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Binary operators: &lt;code&gt;x.map &amp;amp;+1&lt;/code&gt; → &lt;code&gt;x.map($ =&amp;gt; $+1)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pipe operator (based on &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/symbol-and-operator-reference/#function-symbols-and-operators&#34;&gt;F# pipes&lt;/a&gt;, &lt;a href=&#34;https://docs.hhvm.com/hack/expressions-and-operators/pipe&#34;&gt;Hack pipes&lt;/a&gt; and the &lt;a href=&#34;https://github.com/tc39/proposal-pipeline-operator&#34;&gt;TC39 proposal&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;data |&amp;gt; Object.keys |&amp;gt; console.log&lt;/code&gt; equivalent to &lt;code&gt;console.log(Object.keys(data))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use single-argument arrow functions or &lt;code&gt;&amp;amp;&lt;/code&gt; shorthand to specify how to use left-hand side&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;|&amp;gt; await&lt;/code&gt;, &lt;code&gt;|&amp;gt; yield&lt;/code&gt;, and &lt;code&gt;|&amp;gt; return&lt;/code&gt; (at end) for wrapping left-hand side with that operation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Flagging shorthand based on &lt;a href=&#34;https://livescript.net/#literals-objects&#34;&gt;from LiveScript&lt;/a&gt;: &lt;code&gt;{+debug, -live, !verbose}&lt;/code&gt; → &lt;code&gt;{debug: true, live: false, verbose: false}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSX enhancements (inspired by &lt;a href=&#34;https://github.com/solidjs-community/solid-dsl/discussions&#34;&gt;solid-dsl discussions&lt;/a&gt;): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Indentation: instead of explicitly closing &lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt;s or &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;s, you can indent the children and Civet will close your tags for you&lt;/li&gt; &#xA;   &lt;li&gt;Multiple adjacent elements and/or fragments get automatically combined into a fragment.&lt;/li&gt; &#xA;   &lt;li&gt;Arrow function children do not need to be wrapped in braces (assuming they are not preceded by text); this is unambiguous because &lt;code&gt;&amp;gt;&lt;/code&gt; isn&#39;t valid JSX text. For example, &lt;code&gt;&amp;lt;For&amp;gt; (item) =&amp;gt; ...&lt;/code&gt; (where function body can be indented).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;#foo&lt;/code&gt; shorthand for &lt;code&gt;id=&#34;foo&#34;&lt;/code&gt;; also &lt;code&gt;#&#34;foo bar&#34;&lt;/code&gt;, &lt;code&gt;#`foo ${bar}`&lt;/code&gt;, &lt;code&gt;#{expr}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.foo&lt;/code&gt; shorthand for &lt;code&gt;class=&#34;foo&#34;&lt;/code&gt; (but must be at least one space after tag name); also &lt;code&gt;.foo.bar&lt;/code&gt;, &lt;code&gt;.&#34;foo bar&#34;&lt;/code&gt;, &lt;code&gt;.`foo ${bar}`&lt;/code&gt;, &lt;code&gt;.{expr}&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#34;civet react&#34;&lt;/code&gt; flag uses &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;+foo&lt;/code&gt; shorthand for &lt;code&gt;foo={true}&lt;/code&gt;, &lt;code&gt;-foo&lt;/code&gt;/&lt;code&gt;!foo&lt;/code&gt; shorthand for &lt;code&gt;foo={false}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Any braced object literal can be used as an attribute: &lt;code&gt;{foo}&lt;/code&gt; → &lt;code&gt;foo={foo}&lt;/code&gt;, &lt;code&gt;{foo: bar}&lt;/code&gt; → &lt;code&gt;foo={bar}&lt;/code&gt;, &lt;code&gt;{...foo}&lt;/code&gt; remains as is; methods and getters/setters work too.&lt;/li&gt; &#xA;   &lt;li&gt;Attribute &lt;code&gt;...foo&lt;/code&gt; shorthand for &lt;code&gt;{...foo}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Attribute values without whitespace or suitably wrapped (parenthesized expressions, strings and template strings, regular expressions, array literals, braced object literals) do not need braces: &lt;code&gt;foo=bar&lt;/code&gt; → &lt;code&gt;foo={bar}&lt;/code&gt;, &lt;code&gt;count=count()&lt;/code&gt; → &lt;code&gt;count={count()}&lt;/code&gt;, &lt;code&gt;sum=x+1&lt;/code&gt; → &lt;code&gt;sum={x+1}&lt;/code&gt;, &lt;code&gt;list=[1, 2, 3]&lt;/code&gt; → &lt;code&gt;list={[1, 2, 3]}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Attributes can use computed property names: &lt;code&gt;[expr]={value}&lt;/code&gt; → &lt;code&gt;{...{[expr]: value}}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;civet solid&#34;&lt;/code&gt; flag adds correct types for JSX elements and fragments. Use &lt;code&gt;&#34;civet solid client&#34;&lt;/code&gt; (default) for client-only code, &lt;code&gt;&#34;civet solid server&#34;&lt;/code&gt; for server-only code (SSR only), or &lt;code&gt;&#34;civet solid client server&#34;&lt;/code&gt; for isomorphic code that runs on client and server (SSR + hydration).&lt;/li&gt; &#xA;   &lt;li&gt;XML comments: &lt;code&gt;&amp;lt;!-- ... --&amp;gt;&lt;/code&gt; → &lt;code&gt;{/* ... */}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CoffeeScript improvements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Postfix loop &lt;code&gt;run() loop&lt;/code&gt; → &lt;code&gt;while(true) run()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Character range literals &lt;code&gt;[&#34;a&#34;..&#34;z&#34;]&lt;/code&gt;, &lt;code&gt;[&#39;f&#39;..&#39;a&#39;]&lt;/code&gt;, &lt;code&gt;[&#39;0&#39;..&#39;9&#39;]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Shebang line is kept unmodified in output &lt;pre&gt;&lt;code class=&#34;language-civet&#34;&gt;#!./node_modules/.bin/ts-node&#xA;console.log &#34;hi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Things Changed from ES6&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implicit returns, even for multi-statement functions (avoid by specifying a &lt;code&gt;void&lt;/code&gt; return type, adding a trailing &lt;code&gt;;&lt;/code&gt; or explicit &lt;code&gt;return&lt;/code&gt;, or via the directive &lt;code&gt;&#34;civet -implicitReturns&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Disallow no parens on single argument arrow function. &lt;code&gt;x =&amp;gt; ...&lt;/code&gt; must become &lt;code&gt;(x) =&amp;gt; ...&lt;/code&gt; The reasoning is &lt;code&gt;x -&amp;gt; ...&lt;/code&gt; =&amp;gt; &lt;code&gt;x(function() ...)&lt;/code&gt; in CoffeeScript and having &lt;code&gt;-&amp;gt;&lt;/code&gt; and &lt;code&gt;=&amp;gt;&lt;/code&gt; behave more differently than they already do is bad. Passing an anonymous function to an application without parens is also convenient.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for(i of x) ...&lt;/code&gt; defaults to const declaration → &lt;code&gt;for(const i of x) ...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Disallow comma operator in conditionals and many other places. &lt;code&gt;if x, y&lt;/code&gt; is not allowed. But &lt;code&gt;for i = 0, l = a.length; i &amp;lt; l; i++, i *= 2&lt;/code&gt; is allowed.&lt;/li&gt; &#xA; &lt;li&gt;Comma operator in &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;when&lt;/code&gt; instead becomes multiple conditions.&lt;/li&gt; &#xA; &lt;li&gt;Numbers can&#39;t end with a dot (otherwise would be ambiguous with CoffeeScript slices &lt;code&gt;y[0..x]&lt;/code&gt;). This also implies that you can&#39;t access properties of numbers with &lt;code&gt;1..toString()&lt;/code&gt; use &lt;code&gt;1.toString()&lt;/code&gt; instead. When exponent follows a dot it is treated as a property access since an exponent could be a valid property &lt;code&gt;1.e10&lt;/code&gt; → &lt;code&gt;1..e10&lt;/code&gt;. The workaround is to add a trailing zero &lt;code&gt;1.0e10&lt;/code&gt; or remove the dot before the exponent &lt;code&gt;1e10&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Additional reserved words &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Experimental decorator syntax is &lt;code&gt;@@&lt;/code&gt; instead of &lt;code&gt;@&lt;/code&gt; because &lt;code&gt;@&lt;/code&gt; is premium real estate and &lt;code&gt;@id&lt;/code&gt; → &lt;code&gt;this.id&lt;/code&gt;, and &lt;code&gt;@&lt;/code&gt; is also static fields/methods, etc. &lt;pre&gt;&lt;code&gt;@@classDecorator&#xA;class X&#xA;  @@methodDecorator&#xA;  method() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;when&lt;/code&gt; inside switch automatically breaks and adds block scope.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;else&lt;/code&gt; inside switch adds block scope.&lt;/li&gt; &#xA; &lt;li&gt;No whitespace between unary operators and operands. Mandatory whitespace between condition and ternary &lt;code&gt;?&lt;/code&gt; ex. &lt;code&gt;x ? a : b&lt;/code&gt; since &lt;code&gt;x?&lt;/code&gt; is the unary existential operator.&lt;/li&gt; &#xA; &lt;li&gt;No labels (yet...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CoffeeScript Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Civet provides a compatibility prologue directive that aims to be 97+% compatible with existing CoffeeScript2 code (still a work in progress).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;   &lt;th&gt;What it enables&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoVar&lt;/td&gt; &#xA;   &lt;td&gt;declare implicit vars based on assignment to undeclared identifiers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeBooleans&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeComment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;# single line comments&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeDo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;do -&amp;gt;&lt;/code&gt;, disables ES6 do/while&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeEq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;==&lt;/code&gt; → &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt; → &lt;code&gt;!==&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeForLoops&lt;/td&gt; &#xA;   &lt;td&gt;for in, of, from loops behave like they do in CoffeeScript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeInterpolation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;a string with #{myVar}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeIsnt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;isnt&lt;/code&gt; → &lt;code&gt;!==&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeNot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;not&lt;/code&gt; → &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;a not instanceof b&lt;/code&gt; → &lt;code&gt;!(a instanceof b)&lt;/code&gt;, &lt;code&gt;a not of b&lt;/code&gt; → &lt;code&gt;!(a in b)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;coffeeOf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;a of b&lt;/code&gt; → &lt;code&gt;a in b&lt;/code&gt;, &lt;code&gt;a in b&lt;/code&gt; → &lt;code&gt;b.indexOf(a) &amp;gt;= 0&lt;/code&gt;, &lt;code&gt;a not in b&lt;/code&gt; → &lt;code&gt;b.indexOf(a) &amp;lt; 0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can use these with &lt;code&gt;&#34;civet coffeeCompat&#34;&lt;/code&gt; to opt in to all or use them bit by bit with &lt;code&gt;&#34;civet coffeeComment coffeeEq coffeeInterpolation&#34;&lt;/code&gt;. Another possibility is to slowly remove them to provide a way to migrate files a little at a time &lt;code&gt;&#34;civet coffeeCompat -coffeeBooleans -coffeeComment -coffeeEq&#34;&lt;/code&gt;. Both camel case and hyphens work when specifying options &lt;code&gt;&#34;civet coffee-compat&#34;&lt;/code&gt;. More options will be added over time until 97+% compatibility is achieved.&lt;/p&gt; &#xA;&lt;h2&gt;ECMAScript Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;You can also specify &lt;code&gt;&#34;civet&#34;&lt;/code&gt; prologue directives to increase compatibility with ECMAScript/TypeScript:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;   &lt;th&gt;What it enables&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-implicit-returns&lt;/td&gt; &#xA;   &lt;td&gt;turn off implicit return of last value in functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Other Options&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;&#34;civet&#34;&lt;/code&gt; prologue directive can also specify the following options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;   &lt;th&gt;What it enables&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tab=NNN&lt;/td&gt; &#xA;   &lt;td&gt;treat tab like NNN spaces (default=1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;&#34;civet tab=2&#34;&lt;/code&gt; or &lt;code&gt;&#34;civet tab=4&#34;&lt;/code&gt; lets you mix tabs and spaces in a file and be treated like they&#39;d render in VSCode with &lt;code&gt;editor.tabSize&lt;/code&gt; set accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Using Civet in your Node.js Environment&lt;/h2&gt; &#xA;&lt;p&gt;You have now been convinced that Civet is right for your current/next project. Here is how to set up your environment to get productive right away and have a Good Time℠.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;Code coverage with &lt;a href=&#34;https://github.com/bcoe/c8&#34;&gt;c8&lt;/a&gt; &#34;just works&#34; thanks to their source map integration and Civet&#39;s source maps.&lt;/p&gt; &#xA;&lt;p&gt;Currently Civet&#39;s ESM loader depends on &lt;a href=&#34;https://www.npmjs.com/package/ts-node&#34;&gt;ts-node&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;c8 + Mocha&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;scripts&#34;: {&#xA;    &#34;test&#34;: &#34;c8 mocha&#34;,&#xA;    ...&#xA;  },&#xA;  &#34;c8&#34;: {&#xA;    &#34;extension&#34;: [&#xA;      &#34;.civet&#34;&#xA;    ]&#xA;  },&#xA;  &#34;mocha&#34;: {&#xA;    &#34;extension&#34;: [&#xA;      &#34;civet&#34;&#xA;    ],&#xA;    &#34;loader&#34;: [&#xA;      &#34;ts-node/esm&#34;,&#xA;      &#34;@danielx/civet/esm.mjs&#34;&#xA;    ],&#xA;    ...&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-node&lt;/code&gt; must be configured with &lt;code&gt;transpileOnly&lt;/code&gt; (it can&#39;t resolve alternative extensions). Also I think &lt;code&gt;module&lt;/code&gt; needs to be at least &lt;code&gt;ES2020&lt;/code&gt; for the Civet ESM loader to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  ...&#xA;  &#34;ts-node&#34;: {&#xA;    &#34;transpileOnly&#34;: true,&#xA;    &#34;compilerOptions&#34;: {&#xA;      &#34;module&#34;: &#34;ES2020&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t care for code coverage you can skip c8 (but it is so easy why not keep it?).&lt;/p&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.ts&lt;/code&gt; extensions if you want to mix and match! Even &lt;code&gt;.coffee&lt;/code&gt; will work if you require &lt;code&gt;coffeescript/register&lt;/code&gt; or add a loader for it.&lt;/p&gt; &#xA;&lt;p&gt;Execute the tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 4: Enjoy!&lt;/p&gt; &#xA;&lt;h3&gt;Developing&lt;/h3&gt; &#xA;&lt;p&gt;Use the alpha version of &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=DanielX.civet&#34;&gt;Civet Language Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The language server provides syntax highlighting, completions, hover documentation, symbols outline, red squigglies, and go to definition.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Q?&lt;/em&gt; Why can&#39;t I just use the built-in VSCode TypeScript LSP?&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A:&lt;/em&gt; VSCode&#39;s built in TypeScript LSP can&#39;t resolve non &lt;code&gt;.ts/.js&lt;/code&gt;, not even with plugins. Maybe one day they&#39;ll allow for plugins that let you adjust the resolver and insert a transpilation step but until then a separate language server is necessary.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Q?&lt;/em&gt; Sometimes the file outline disappears and the red squigglies are all in the wrong place and maybe a notification pops up about some kind of LSP error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A:&lt;/em&gt; I&#39;m sorry that happened to you but the Civet Language Server is still alpha and improving rapidly. Please let me know exactly what happened and I&#39;ll try to do better next time.&lt;/p&gt; &#xA;&lt;p&gt;It may happen when there is a syntax error in your Civet file. You can check and see if it compiles using the CLI tool in the meantime.&lt;/p&gt; &#xA;&lt;p&gt;Please do submit bug reports / feature requests.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;I strongly recommend using &lt;a href=&#34;https://esbuild.github.io/&#34;&gt;esbuild&lt;/a&gt; for building / packaging your Civet project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import esbuild from &#39;esbuild&#39;&#xA;import civetPlugin from &#39;@danielx/civet/esbuild-plugin&#39;&#xA;&#xA;esbuild.build({&#xA;  ...,&#xA;  plugins: [&#xA;    civetPlugin&#xA;  ]&#xA;}).catch(() =&amp;gt; process.exit(1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s super fast and works great!&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Civet is a &lt;strong&gt;large language that feels small&lt;/strong&gt;. Civet is large because it is mostly a &lt;strong&gt;superset of TypeScript&lt;/strong&gt;, an already large language. Civet feels small because of the coherent design aesthetic: related features look and behave similarly, so when seeing a new feature you can have a good idea what it does, and your existing knowledge of JavaScript and other languages leads you in the right direction.&lt;/p&gt; &#xA;&lt;p&gt;Civet works with &lt;strong&gt;existing tools&lt;/strong&gt;. We&#39;re not trying to replace the TypeScript type checker; we want to amplify its power. We&#39;re not trying to change ES semantics; we want to present them in a coherent and expressive way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Less syntax&lt;/strong&gt; is preferred.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Context matters&lt;/strong&gt;. The same tokens can mean different things in different contexts. This shouldn&#39;t be arbitrary but based on pragmatic concerns. Things should be consistent where possible, especially conceptually.&lt;/p&gt; &#xA;&lt;p&gt;Civet builds on top of &lt;strong&gt;history&lt;/strong&gt;. We&#39;ve taken inspiration from languages like CoffeeScript, Elm, LiveScript, Flow, Haskell, Perl, Python, Ruby, Crystal, Bash, and others.&lt;/p&gt; &#xA;&lt;p&gt;Civet is &lt;strong&gt;pragmatic&lt;/strong&gt;. Civet design is informed by 25+ years of JavaScript development. Frontend frameworks have come and gone but they all addressed issues that were important for their time. We focus heavily on addressing concerns that real developers feel every day. A key criteria for evaluating features is &#34;how does it work in practice?&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Civet &lt;strong&gt;evolves&lt;/strong&gt;. As the official JS and TS specifications evolve into the future, Civet also evolves favoring &lt;strong&gt;compatibility&lt;/strong&gt;. This may lead us to difficult choices where the future spec has evolved differently than we anticipated (pipe operators, do expressions, pattern matching). In those cases, Civet will adapt to match the latest spec while providing configuration options to allow migration bit by bit while keeping existing code working.&lt;/p&gt; &#xA;&lt;p&gt;Civet is &lt;strong&gt;configurable&lt;/strong&gt;. There is no single &#34;right way&#34; for everyone at all times. Some of us have older CoffeeScript codebases that would benefit from added types. Others have massive TypeScript applications that could benefit from new language features and shorthand syntax. Civet provides a way to get the benefits bit by bit without a complete rewrite. This same configurability lets us experiment with language features to gain experience and improve them before locking them in. It also allows us to adapt to a changing future.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zsviczian/obsidian-excalidraw-plugin</title>
    <updated>2023-01-10T01:48:33Z</updated>
    <id>tag:github.com,2023-01-10:/zsviczian/obsidian-excalidraw-plugin</id>
    <link href="https://github.com/zsviczian/obsidian-excalidraw-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A plugin to edit and view Excalidraw drawings in Obsidian&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Excalidraw&lt;/h1&gt; &#xA;&lt;p&gt;The Obsidian-Excalidraw plugin integrates &lt;a href=&#34;https://excalidraw.com/&#34;&gt;Excalidraw&lt;/a&gt;, a feature rich sketching tool, into Obsidian. You can store and edit Excalidraw files in your vault, you can embed drawings into your documents, and you can link to documents and other drawings to/and from Excalidraw. For a showcase of Excalidraw features, please read my blog post &lt;a href=&#34;https://www.zsolt.blog/2021/03/showcasing-excalidraw.html&#34;&gt;here&lt;/a&gt; and/or watch the videos below.&lt;/p&gt; &#xA;&lt;h2&gt;Video Walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/o0exK-xFP3k&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/156931370-aa4d88de-c4a8-46cc-aeb2-dc09aa0bea39.jpg&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;10 Part (slightly outdated) Video Walkthrough&lt;/summary&gt; &#xA; &lt;a href=&#34;https://youtu.be/sY4FoflGaiM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160304-7f211180-e17c-11eb-8363-c52723de1ffd.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;1 Getting Started&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/Iy_oVTq12Gw&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160312-8a743d00-e17c-11eb-9fa2-490ef4cbd59e.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;2 Basic shapes and features&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/QOL1KF7-kdc&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160323-96f89580-e17c-11eb-9bce-8eb1067a51bb.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;3 Grouping elements&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/aSgcbfspvfo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160332-9f50d080-e17c-11eb-98e9-fec60fe147d9.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;4 The stencil-library&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/MaJ5jJwBRWs&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160341-a546b180-e17c-11eb-9de8-d87fdc844c9c.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;5 Embedding&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/MXzeCOEExNo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160346-aa0b6580-e17c-11eb-930b-4024807040d1.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;6 Links&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/R0IAg0s-wQE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160354-b2fc3700-e17c-11eb-81af-9e71e461f6dd.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;7 Markdown&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/ibdS7ykwpW4&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160360-b8f21800-e17c-11eb-8bd8-79d4e3f6e92d.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;8 Templates&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/VRZVujfVab0&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160367-bdb6cc00-e17c-11eb-92f1-6f59faea85fd.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;9 Excalidraw Automate&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/D1iBYo1_jjc&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/125160374-c3141680-e17c-11eb-8cc2-dfaffd903d15.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;10 Miscellaneous&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Embedding stuff into Excalidraw&lt;/summary&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/watch?v=_c_0zpBJ4Xc&amp;amp;&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/138607067-ccb62f92-48a4-4880-ac6e-68c1bf86ac2c.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Image Elements&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/r08wk-58DPk&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/143732412-1c65227e-4381-406d-847a-b001ab3506ca.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;LaTex Demo&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/tsecSfnTMow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/143732440-90bfa029-8615-462e-ada3-c903d71a82c9.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Markdown embeds&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/K6qZkTz8GHs&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/143783906-15cee494-c6d5-4495-a2ca-74634e4e7355.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Markdown embeds advanced features&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/Etskjw7a5zo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/156931461-0979b821-315a-41dd-86f1-31d169b7c127.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Link to Elements, Vertical text alignment, Markdown Styling&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;The Script Engine Store - Excalidraw Automation&lt;/summary&gt; &#xA; &lt;a href=&#34;https://youtu.be/hePJcObHIso&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/145684531-8d9c2992-59ac-4ebc-804a-4cce1777ded2.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Introducing the Script Engine&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/lzYdOQ6z8F0&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/147889174-6c306d0d-2d29-46cc-a53f-3f0013cf14de.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Script Enginge Store&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Working with colors&lt;/summary&gt; &#xA; &lt;a href=&#34;https://youtu.be/6PLGHBH9VZ4&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/194773147-5418a0ab-6be5-4eb0-a8e4-d6af21b1b483.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Colors - Excalidraw Basics (Custom)&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/epYNx2FSf2w&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/194773211-9e871be7-0795-4dc7-947e-c6c275e690d0.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Excalidraw color palettes (Custom)&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/Amhlv6r9WvM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/194773268-400cfb1b-6bde-45e0-9e4b-91bbaa461cf0.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;&#34;Artistic&#34; Color Gradients&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/r9oB1SlK1GU&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/194773527-ef35c8b9-1a6d-4415-9c7e-b667fb17535d.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Simple rules for beautiful sketches&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/7gJDwNgQ6NU&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/195988535-a133a9b9-d094-45ba-ba64-c994b9a1e0ef.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;ColorMaster Scripting&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Links and block references&lt;/summary&gt; &#xA; &lt;a href=&#34;https://youtu.be/qiKuqMcNWgU&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/171635214-30533c45-94fa-436e-83a9-b2ec99f190e2.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;6 strategies for linking your visual thoughts v4&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/yZQoJg2RCKI&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/185791706-3d9983ab-7cb1-4b27-a016-30c039d84e34.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Block reference parts of images&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/Etskjw7a5zo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/156931461-0979b821-315a-41dd-86f1-31d169b7c127.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Link to Elements, Vertical text alignment, Markdown Styling&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/2Y8OhkGiTHg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/152585752-7eb0371f-0bab-40f6-a194-3b48e5811735.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;How to guide for the Excalidraw-native hyperlinks&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Powertools&lt;/summary&gt; &#xA; &lt;a href=&#34;https://youtu.be/NOuddK6xrr8&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/147283367-e5689385-ea51-4983-81a3-04d810d39f62.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Sticky Notes (word wrapping)&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/eKFmrSQhFA4&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/149659524-2a4e0a24-40c9-4e66-a6b1-c92f3b88ecd5.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Fourt Font&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/vlC1-iBvIfo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/199207784-8bbe14e0-7d10-47d7-971d-20dce8dbd659.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;SVG import&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/7gu4ETx7zro&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/202916770-28f2fa64-1ba2-4b40-a7fe-d721b42634f7.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;OCR&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/U2LkBRBk4LY&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/159369910-6371f08d-b5fa-454d-9c6c-948f7e7a7d26.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Bind/unbind text from container, Frontmatter tags to customize export&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/uZz5MgzWXiM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/211054371-8872e01a-77d6-4afc-a0c2-86a55410a8d3.png&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Custom pen support&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Quality of life improvements&lt;/summary&gt; &#xA; &lt;a href=&#34;https://youtu.be/qbPIAZguJeo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/151705333-54e9ffd2-0bd7-4d02-b99e-0bd4e4708d4d.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Mobile Support&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/2v9TZmQNO8c&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/153676009-6f86b2d7-c248-49a2-b802-be21c6999e4f.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Tray-mode and Customizable Color Palette&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/xHPGWR3m0c8&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/154821232-a404b6cf-72fb-4ce4-9d53-619132dce491.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Compressed JSON and improved save/sync support&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/gMIKXyhS-dM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/156931428-b2269fd9-87bd-43ab-8558-5572f40dff93.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;The Obsidian Tools Panel&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/4N6efq1DtH0&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/158008902-12c6a851-237e-4edd-a631-d48e81c904b2.jpg&#34; width=&#34;100&#34; style=&#34;vertical-align: middle;&#34;&gt;&amp;nbsp;&amp;nbsp;Eraser, left-handed mode, improved filename configuration&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The plugin integrates Excalidraw seamlessly into Obsidian including Command Palette actions, File Explorer features, Option Menu commands, and the Ribbon Button.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;CTRL/CMD+Click&lt;/kbd&gt; on the ribbon button, or in the file explorer to create / open drawings in a new pane.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Settings will allow you to customize Excalidraw to your needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default folder for new drawings and define custom filename pattern for new drawings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Templates&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Template for new drawings. The template will restore stroke properties. This means you can set up defaults in your template for stroke color, stroke width, opacity, font family, font size, fill style, stroke style, etc. This also applies to ExcalidrawAutomate. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Via the template you can customize the color palette used by Excalidraw. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Switch to Markdown view.&lt;/li&gt; &#xA;     &lt;li&gt;Scroll down to the bottom of the file and find &lt;code&gt;&#34;AppState&#34;: {&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Find &lt;code&gt;&#34;customColorPalette&#34;: {&lt;/code&gt; at the end of the AppState section.&lt;/li&gt; &#xA;     &lt;li&gt;You may specify the 3 palettes used in Excalidraw by adding any or all of the following 3 variables: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;&#34;canvasBackground&#34;:[], &#34;elementBackground&#34;:[], &#34;elementStroke&#34;: []&lt;/code&gt;.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Add a comma separated list of valid HTML colors (e.g. &lt;code&gt;#FF0000&lt;/code&gt; for red) in the array for each of the variables.&lt;/li&gt; &#xA;     &lt;li&gt;See my videos above for further help.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Export&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If portability is important to you:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto-export SVG and/or PNG files including keep-in-sync feature so you can embed SVG/PNG into your documents instead of embedding excalidraw files.&lt;/li&gt; &#xA;   &lt;li&gt;You can override export settings for an individual file by adding the &lt;code&gt;excalidraw-autoexport&lt;/code&gt; frontmatter key. Valid values for this key are &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;both&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt; and &lt;code&gt;svg&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify the default width of embedded drawings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compatibility features to auto-export and keep in sync markdown excalidraw files and legacy &lt;code&gt;.excalidraw&lt;/code&gt; files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Experimental feature to add custom TAG to file explorer to mark drawing files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable / disable autosave.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Embedding your drawings into markdown documents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can customize the size and position of the embedded images using the &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;![[image.excalidraw|100]]&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;![[image.excalidraw|100x100]]&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;![[image.excalidraw|100|left]]&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;![[image.excalidraw|right-wrap]]&lt;/code&gt;, formatting options.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;![[&amp;lt;filename.excalidraw&amp;gt;|&amp;lt;width&amp;gt;x&amp;lt;height&amp;gt;|&amp;lt;alignment&amp;gt;]]&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;You can add your custom &lt;a href=&#34;https://www.scaler.com/topics/align-image-in-html/&#34;&gt;alignment via CSS&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Any text that appears in &lt;code&gt;&amp;lt;alignment&amp;gt;&lt;/code&gt; will be added to the rendered SVG element style and to the wrapper DIV element.&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/raw/master/styles.css&#34;&gt;styles.css&lt;/a&gt; for more insight.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Excalidraw drawings do not display in Obsidian Publish. If you want to use Excalidraw in your published documents, you can configure in plugin settings, under &lt;code&gt;Embed &amp;amp; Export&lt;/code&gt;, to automatically insert a PNG or SVG version of the drawing in your document when creating a new file. See &lt;code&gt;type of file to insert into document&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Under &lt;code&gt;Export settings&lt;/code&gt; you can also configure to automatically export a dark and light version of the image, in case your published site supports dark and light mode.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hyperlinks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports hyperlinks e.g. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;https://zsolt.blog&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;[Obsidian](https://obsidian.md)&lt;/code&gt;, and&lt;/li&gt; &#xA;   &lt;li&gt;internal links e.g. &lt;code&gt;[[My file in vault|Alias]]&lt;/code&gt; in drawing text.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Links will update when files are moved or renamed, if you have the Obsidian setting Files &amp;amp; Links/Automatically Update Internal Links enabled.&lt;/li&gt; &#xA; &lt;li&gt;Links in drawings will show up in backlinks of documents&lt;/li&gt; &#xA; &lt;li&gt;Transclusions are supported &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;![[myfile#^blockref]]&lt;/code&gt; will convert in the drawing into the transcluded text of the block&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;![[myfile#section]]&lt;/code&gt; also works, this will transclude the section&lt;/li&gt; &#xA;   &lt;li&gt;you can also specify word wrapping for transcluded text by adding the max character count in curly brackets right after the transclusion e.g. &lt;code&gt;![[myfile#^blockref]]{40}&lt;/code&gt; will wrap text at 40 characters.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For convenience you can also use the command palette to insert links into drawings&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;CTRL/CMD + hover&lt;/kbd&gt; to bring up the Obsidian quick preview for the link. (On Mac it is &lt;kbd&gt;CTRL+CMD+hover&lt;/kbd&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;CTRL/CMD + CLICK&lt;/kbd&gt; a text element to open it as a link.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;CTRL/CMD + ALT + CLICK&lt;/kbd&gt; to create the file (if it does not yet exist) and open it&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;CTRL/CMD + SHIFT + CLICK&lt;/kbd&gt; to open the file in a new pane&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;CTRL/CMD + ALT + SHIFT + CLICK&lt;/kbd&gt; to create the file (if it does not yet exist) and open it in a new pane&lt;/li&gt; &#xA; &lt;li&gt;Using the block reference you can also reference &amp;amp; transclude text that appears on drawings, in other documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LaTeX&lt;/h3&gt; &#xA;&lt;p&gt;Insert LaTeX formulas using the Command Palette action &#34;Insert LaTeX formula&#34;. You can edit formulas either in Markdown view, or by &lt;kbd&gt;CTRL/CMD + Click&lt;/kbd&gt; on the formula.&lt;/p&gt; &#xA;&lt;h3&gt;Drag &amp;amp; Drop support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can drag files from the Obsidian file explorer and they will become links to those files in Excalidraw.&lt;/li&gt; &#xA; &lt;li&gt;Dragging image files (PNG, SVG, JPG, ICO, GIF, WEBP, Excalidraw) from Obsidian&#39;s file explorer while pressing the &lt;kbd&gt;CTRL&lt;/kbd&gt; (&lt;kbd&gt;SHIFT&lt;/kbd&gt; on Mac) button will embed the image into your drawing. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If in addition to &lt;kbd&gt;CTRL&lt;/kbd&gt; or &lt;kbd&gt;SHIFT&lt;/kbd&gt; you also hold down &lt;kbd&gt;ALT&lt;/kbd&gt;, the image will be inserted at 100% of its size.&lt;/li&gt; &#xA;   &lt;li&gt;Note: this is a very niche feature with a very particular behavior that I built primarily for myself&lt;/li&gt; &#xA;   &lt;li&gt;(even more so than other features in Excalidraw Obsidian - also built primarily for myself 😉).&lt;/li&gt; &#xA;   &lt;li&gt;This will reset your embedded image to 100% size every time you open the Excalidraw drawing, or in case you have embedded an Excalidraw drawing on your canvas inserted using this function, every time you update the embedded drawing, it will be scaled back to 100% size.&lt;/li&gt; &#xA;   &lt;li&gt;This means that even if you resize the image on the drawing, it will reset to 100% the next time you open the file or you modify the original embedded object. This feature is useful when you decompose a drawing into separate Excalidraw files, but when combined onto a single canvas you want the individual pieces to maintain their actual sizes. I use this feature to construct Book-on-a-Page summaries from atomic drawings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can drag and drop text from Markdown views onto Excalidraw.&lt;/li&gt; &#xA; &lt;li&gt;You can drag and drop web addresses from your browser and they will become links.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Image support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On iOS and Android you can add images from your camera by pressing the add image button in Excalidraw.&lt;/li&gt; &#xA; &lt;li&gt;You can copy/paste images into your drawing. Images will be saved in your vault.&lt;/li&gt; &#xA; &lt;li&gt;You can drag and drop images as explained above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Block referencing parts of images&lt;/h3&gt; &#xA;&lt;p&gt;For more details see this &lt;a href=&#34;https://youtu.be/yZQoJg2RCKI&#34;&gt;video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When referencing an element on the canvas in a link pointing to an Excalidraw file using &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the elementId or the section header (i.e. a Text Element containing the &lt;code&gt;# &amp;lt;Section title&amp;gt;&lt;/code&gt;) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;e.g. &lt;code&gt;[[file#^elementID]]&lt;/code&gt;,&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;you can add the &lt;code&gt;group=&lt;/code&gt; prefix, &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;e.g. &lt;code&gt;[[file#^group=elementID]]&lt;/code&gt; or&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;the &lt;code&gt;area=&lt;/code&gt; prefix, &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;e.g. &lt;code&gt;[[file#area=Section heading]]&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;If the &lt;code&gt;group=&lt;/code&gt; prefix is found Excalidraw will select the group of elements in the same group as the element referenced by the elementID (block reference) or the section heading.&lt;/li&gt; &#xA;   &lt;li&gt;If the &lt;code&gt;area=&lt;/code&gt; prefix is found Excalidraw will insert a cutout of the image around the referenced element.&lt;/li&gt; &#xA;   &lt;li&gt;Note that the &lt;code&gt;area=&lt;/code&gt; selector is not supported when embedding Excalidraw as PNG into your markdown documents.&lt;/li&gt; &#xA;   &lt;li&gt;Referencing the elementID of a text element without the &lt;code&gt;group=&lt;/code&gt; or &lt;code&gt;area=&lt;/code&gt; prefix will transclude the element as plain text. Referencing a non-Text Element (e.g. rectangle, ellipse, etc.) without the &lt;code&gt;group=&lt;/code&gt; or &lt;code&gt;area=&lt;/code&gt; prefix will result in an Obsidian error since these elementIds are not present in the Excalidraw markdown file as block references.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Markdown&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since 1.2.0 Drawing files are stored in Markdown files &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can add tags to drawings&lt;/li&gt; &#xA;   &lt;li&gt;You can add metadata to the YAML front matter of drawings&lt;/li&gt; &#xA;   &lt;li&gt;Anything you add between the frontmatter and the &lt;code&gt;# Text Elements&lt;/code&gt; heading will be ignored by Excalidraw, i.e. you can add whatever you like here, it will be preserved as part of the document.&lt;/li&gt; &#xA;   &lt;li&gt;Excalidraw documents now show in graph view.&lt;/li&gt; &#xA;   &lt;li&gt;The following front matter keys will customize how the drawing is displayed - overriding general settings: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-link-prefix: &#34;📍&#34;&lt;/code&gt; preview prefix for internal links&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-url-prefix: &#34;🌐&#34;&lt;/code&gt; preview prefix for external links&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-link-brackets: true|false&lt;/code&gt; whether or not to display brackets around links in preview&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-default-mode: view|zen&lt;/code&gt; Open this document in view mode or zen mode by defult. Default view mode is excellent for presentation slides.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Frontmatter tags to customize image export at a file level &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/issues/519&#34;&gt;519&lt;/a&gt;. If these keys are present they will override the default excalidraw embed and export settings. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-export-transparent: true&lt;/code&gt;: true == Transparent / false == with background.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-export-dark&lt;/code&gt;: true == Dark mode / false == light mode.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-export-padding&lt;/code&gt;: Specify the export padding for the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;excalidraw-export-pngscale&lt;/code&gt;: This only affects export to PNG. Specify the export scale for the image. The typical range is between 0.5 and 5, but you can experiment with other values as well.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Embed complete markdown files into your drawings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag from the desired file from the Obsidian file explorer and hold down &lt;kbd&gt;CTRL/CMD&lt;/kbd&gt; while dropping the file onto the canvas.&lt;/li&gt; &#xA; &lt;li&gt;Use the command palette action: &lt;code&gt;Insert markdown file from vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use custom woff, woff2 or TTF font to display the document, you can set the default font to use under Excalidraw Settings.&lt;/li&gt; &#xA; &lt;li&gt;You can set a custom css for rendering the snapshot image of your markdown document. Only operating system standard fonts are supported as the font-family ( &lt;a href=&#34;https://docs.microsoft.com/en-us/typography/fonts/windows_10_font_list&#34;&gt;Win10&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/fonts/system-fonts/&#34;&gt;Mac &amp;amp; iOS&lt;/a&gt; ), plus you can set one additional custom font using the setting explained above. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(for a demonstration watch this &lt;a href=&#34;https://youtu.be/K6qZkTz8GHs&#34;&gt;video&lt;/a&gt; and check out this&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/discussions/281&#34;&gt;sample css&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;To help with styling you can observe the SVG snapshot of the markdown document created by Excalidraw. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Open Obsidian Developer Console (&lt;kbd&gt;CTRL+Shift+i&lt;/kbd&gt;) and&lt;/li&gt; &#xA;     &lt;li&gt;execute the following command: &lt;code&gt;ExcalidrawAutomate.mostRecentMarkdownSVG&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can control appearance of the embedded markdown file on a file by file bases by adding the following front matter keys to your markdown document: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;excalidraw-font: Virgil|Cascadia|font_file_name.extension&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;excalidraw-font-color: css-color-name|#HEXcolor|any-other-html-standard-format&lt;/code&gt;, &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;you can find css color names &lt;a href=&#34;https://www.w3schools.com/colors/colors_names.asp&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;excalidraw-border-color: css-color-name|#HEXcolor|any-other-html-standard-format&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;excalidraw-css: &#34;css-filename|css snippet&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Switch to markdown view or use &lt;kbd&gt;CTRL/CMD+ALT/OPT&lt;/kbd&gt; click on the image to edit properties of the embed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;[[filename#^blockref|WIDTHxMAXHEIGHT]]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Font, Custom Pen, OCR support, SVG import&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In plugin settings you can add a custom 4th font. For more details see this &lt;a href=&#34;https://youtu.be/eKFmrSQhFA4&#34;&gt;video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The plugin includes OCR support using Taskbone OCR. For more details see this &lt;a href=&#34;https://youtu.be/7gu4ETx7zro&#34;&gt;video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can convert SVG files into Excalidraw drawings (with some limitation). For more details see this &lt;a href=&#34;https://youtu.be/vlC1-iBvIfo&#34;&gt;video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can define custom freedraw pens. See documentation &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/raw/master/ea-scripts/Alternative%20Pens.md&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://youtu.be/uZz5MgzWXiM&#34;&gt;video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Left-handed mode&lt;/li&gt; &#xA; &lt;li&gt;Includes full &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/chhoumann/quickadd&#34;&gt;QuickAdd&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://silentvoid13.github.io/Templater/&#34;&gt;Templater&lt;/a&gt; and&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://blacksmithgu.github.io/obsidian-dataview/docs/api/intro/&#34;&gt;Dataview&lt;/a&gt; support through ExcalidrawAutomate.&lt;/li&gt; &#xA;   &lt;li&gt;Check out the &lt;a href=&#34;https://zsviczian.github.io/obsidian-excalidraw-plugin/&#34;&gt;detailed help + examples&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;I also have a &lt;a href=&#34;https://www.youtube.com/playlist?list=PL6mqgtMZ4NP1IR4nXxSlMA4PA5E-qpyHZ&#34;&gt;YouTube ExcalidrawAutomate Playlist&lt;/a&gt; with lots of examples.&lt;/li&gt; &#xA;   &lt;li&gt;Since 1.5.0 you can easily execute ExcalidrawAutomate macros and assign command palette shortcuts to them, using the ScriptEngine. You will find an intro video and a growing library of ready to install scripts &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/tree/master/ea-scripts&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;REQUIRES AN OBSIDIAN SYNC SUBSCRIPTION: Full drawing file history and synchronization between devices&lt;/li&gt; &#xA; &lt;li&gt;Multilanguage support: if you&#39;d like to help out by translating the plugin, please get in contact with me.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Feedback, questions, ideas, problems&lt;/h2&gt; &#xA;&lt;p&gt;Join the conversation about the Excalidraw plugin on &lt;a href=&#34;https://forum.obsidian.md/t/excalidraw-full-featured-sketching-plugin-in-obsidian&#34;&gt;forum.obsidian.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please head over to &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/issues&#34;&gt;GitHub&lt;/a&gt; to report a bug or request an enhancement.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Say Thank You&lt;/h2&gt; &#xA;&lt;p&gt;If you are enjoying Excalidraw then please support my work and enthusiasm by buying me a coffee on &lt;a href=&#34;https://ko-fi.com/zsolt&#34;&gt;https://ko-fi/zsolt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please also help spread the word by sharing about the Obsidian Excalidraw Plugin on Twitter, Reddit, or any other social media platform you regularly use.&lt;/p&gt; &#xA;&lt;p&gt;You can find me on Twitter &lt;a href=&#34;https://twitter.com/zsviczian&#34;&gt;@zsviczian&lt;/a&gt;, and on my blog &lt;a href=&#34;https://zsolt.blog&#34;&gt;zsolt.blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/zsolt&#34;&gt;&lt;img style=&#34;float:left&#34; src=&#34;https://user-images.githubusercontent.com/14358394/115450238-f39e8100-a21b-11eb-89d0-fa4b82cdbce8.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Friends of Excalidraw&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoy Excalidraw, consider giving &lt;a href=&#34;https://github.com/zsviczian/excalibrain&#34;&gt;ExcaliBrain&lt;/a&gt; a try (also available via Obsidian Community Plugins).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/gOkniMkDPyM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14358394/169708346-9e41289d-9536-43ec-8f70-2d2ad2d369d6.png&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>panaverse/learn-nextjs</title>
    <updated>2023-01-10T01:48:33Z</updated>
    <id>tag:github.com,2023-01-10:/panaverse/learn-nextjs</id>
    <link href="https://github.com/panaverse/learn-nextjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn Modern Full Stack Web Development using Typescript, Next.js, tRPC, Prisma, Strapi, and Chakra UI.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn Modern Web Development using Next.js 13 in Baby Steps&lt;/h1&gt; &#xA;&lt;p&gt;Next.js Conf Keynote Announcing Version 13 :&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NiknNI_0J48&#34; title=&#34;Keynote Next.js 13&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panaverse/learn-nextjs/main/next13.png&#34; width=&#34;75%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HlXLVb3QCvQ&#34;&gt;The Future of the Web: From Cloud to Edge&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://beta.nextjs.org/docs/getting-started&#34;&gt;Next.js 13 Beta Docs&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The stack used in this learning repo, it is a mixture of &lt;a href=&#34;https://jamstack.org/&#34;&gt;Jamstack&lt;/a&gt; and &lt;a href=&#34;https://create.t3.gg/&#34;&gt;T3&lt;/a&gt; Stacks: &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;, &lt;a href=&#34;https://nextjs.org/blog/next-13&#34;&gt;Next.js 13&lt;/a&gt;, &lt;a href=&#34;https://chakra-ui.com/&#34;&gt;Chakra UI&lt;/a&gt;, &lt;a href=&#34;https://trpc.io/&#34;&gt;tRPC&lt;/a&gt;, &lt;a href=&#34;https://www.prisma.io/&#34;&gt;Prisma&lt;/a&gt;, &lt;a href=&#34;https://strapi.io/&#34;&gt;Strapi&lt;/a&gt;, &lt;a href=&#34;https://www.cockroachlabs.com/blog/announcing-cockroachdb-serverless/&#34;&gt;CockroachDB serverless&lt;/a&gt; (SQL), and &lt;a href=&#34;https://www.mongodb.com/atlas/database&#34;&gt;MongoDB Atlas&lt;/a&gt; (NoSQL).&lt;/p&gt; &#xA;&lt;p&gt;This repo is part of the &lt;a href=&#34;https://www.panaverse.co/&#34;&gt;Certified Web 3.0 and Metaverse Developer Training Program&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before start learning from this repo, &lt;a href=&#34;https://github.com/panacloud-modern-global-apps/learn-typescript&#34;&gt;learn TypeScript&lt;/a&gt; and by doing these &lt;a href=&#34;https://github.com/panacloud-modern-global-apps/chakra-nextjs-projects&#34;&gt;TypeScript Node.js Projects&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After completing this repo you should move to these specialized Web 3 learning repos:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panacloud-modern-global-apps/dapps-nextjs&#34;&gt;Next Dapps Learning Repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panacloud-modern-global-apps/defi-dapps-solidity-smart-contracts&#34;&gt;Smart Contract Development Repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn Chakra UI by doing Projects:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panacloud-modern-global-apps/chakra-nextjs-projects&#34;&gt;Chakra UI Next Projects Repo&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>