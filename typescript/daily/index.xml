<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-28T01:44:12Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>andrewnguonly/Lumos</title>
    <updated>2024-01-28T01:44:12Z</updated>
    <id>tag:github.com,2024-01-28:/andrewnguonly/Lumos</id>
    <link href="https://github.com/andrewnguonly/Lumos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A RAG LLM co-pilot for browsing the web, powered by local LLMs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lumos&lt;/h1&gt; &#xA;&lt;p&gt;A RAG LLM co-pilot for browsing the web, powered by local LLMs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/andrewnguonly/Lumos/main/lumos_screenshot_2.png&#34; alt=&#34;Screenshot of Lumos&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Chrome extension is powered by &lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt;. Inference is done on your local machine without any &lt;em&gt;external&lt;/em&gt; server support. However, due to security constraints in the Chrome extension platform, the app does rely on &lt;em&gt;local&lt;/em&gt; server support to run the LLM. This app is inspired by the &lt;a href=&#34;https://github.com/mlc-ai/web-llm/tree/main/examples/chrome-extension&#34;&gt;Chrome extension example&lt;/a&gt; provided by the &lt;a href=&#34;https://webllm.mlc.ai/&#34;&gt;Web LLM project&lt;/a&gt; and the &lt;a href=&#34;https://js.langchain.com/docs/use_cases/question_answering/local_retrieval_qa&#34;&gt;local LLM examples&lt;/a&gt; provided by &lt;a href=&#34;https://github.com/langchain-ai/langchainjs&#34;&gt;LangChain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama (Home)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;Ollama (GitHub)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Lumos. Nox. Lumos. Nox.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ollama Server&lt;/h2&gt; &#xA;&lt;p&gt;A local Ollama server is needed for the embedding database and LLM inference. Download and install Ollama and the CLI &lt;a href=&#34;https://ollama.ai/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pull Model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;llama2&lt;/code&gt; model is required. The implementation of Lumos is &lt;a href=&#34;https://github.com/andrewnguonly/Lumos/raw/main/src/scripts/background.ts#L12&#34;&gt;hardcoded&lt;/a&gt; to use &lt;code&gt;llama2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ollama pull llama2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change models, pull the desired model and update the hardcoded model value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ollama pull mistral&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update &lt;code&gt;src/scripts/background.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const OLLAMA_MODEL = &#34;mistral&#34;; // change model name here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Server&lt;/h3&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OLLAMA_ORIGINS=chrome-extension://* ollama serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Terminal output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2023/11/19 20:55:16 images.go:799: total blobs: 6&#xA;2023/11/19 20:55:16 images.go:806: total unused blobs removed: 0&#xA;2023/11/19 20:55:16 routes.go:777: Listening on 127.0.0.1:11434 (version 0.1.10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The environment variable &lt;code&gt;OLLAMA_ORIGINS&lt;/code&gt; must be set to &lt;code&gt;chrome-extension://*&lt;/code&gt; to allow requests originating from the Chrome extension.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;The Ollama server can also be &lt;a href=&#34;https://hub.docker.com/r/ollama/ollama&#34;&gt;run in a Docker container&lt;/a&gt;. The container should have the &lt;code&gt;OLLAMA_ORIGINS&lt;/code&gt; environment variable set to &lt;code&gt;chrome-extension://*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;docker run&lt;/code&gt; with the &lt;code&gt;-e&lt;/code&gt; flag to set the &lt;code&gt;OLLAMA_ORIGINS&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -e OLLAMA_ORIGINS=&#34;chrome-extension://*&#34; -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update the host and port as needed (&lt;code&gt;src/scripts/background.ts&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const OLLAMA_BASE_URL = &#34;http://0.0.0.0:11434&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Chrome Extension&lt;/h2&gt; &#xA;&lt;p&gt;In the project directory, you can run:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;br&gt; See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/running-tests&#34;&gt;running tests&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Builds the app for production to the &lt;code&gt;dist&lt;/code&gt; folder.&lt;br&gt; It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt; &#xA;&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt; Your app is ready to be deployed!&lt;/p&gt; &#xA;&lt;p&gt;See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/deployment&#34;&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Load Unpacked Extension (Install)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/getstarted/development-basics/#load-unpacked&#34;&gt;https://developer.chrome.com/docs/extensions/mv3/getstarted/development-basics/#load-unpacked&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom Content Parser&lt;/h2&gt; &#xA;&lt;p&gt;Lumos&#39;s default content parser will extract all text content between a page&#39;s &lt;code&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag. To customize the content parser, add an entry to the file &lt;code&gt;contentConfig.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export const contentConfig: ContentConfig = {&#xA;  // each domain can have its own content parser&#xA;  &#34;domain.com&#34;: {&#xA;    // number of characters to chunk page content into for indexing into RAG vectorstore&#xA;    chunkSize: 500, &#xA;    // number of characters to overlap in chunks for indexing into RAG vectorstore&#xA;    chunkOverlap: 100,&#xA;    // document.querySelector() queries to perform to retrieve page content&#xA;    selectors: [&#xA;      &#34;body&#34;,&#xA;    ],&#xA;    // document.querySelectorAll() queries to perform to retrieve page content&#xA;    selectorsAll: [&#xA;      &#34;comment&#34;,&#xA;    ],&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See documentation for &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector&#34;&gt;&lt;code&gt;querySelector()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll&#34;&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/a&gt; to confirm all querying capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Summarize long threads on issue tracking sites, forums, and social media sites.&lt;/li&gt; &#xA; &lt;li&gt;Summarize news articles.&lt;/li&gt; &#xA; &lt;li&gt;Ask questions about reviews on business and product pages.&lt;/li&gt; &#xA; &lt;li&gt;Ask questions about long, technical documentation.&lt;/li&gt; &#xA; &lt;li&gt;... what else?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@andrewnguonly/local-llm-in-the-browser-powered-by-ollama-236817f335da&#34;&gt;Local LLM in the Browser Powered by Ollama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@andrewnguonly/local-llm-in-the-browser-powered-by-ollama-part-2-6eb10caf39a1&#34;&gt;Local LLM in the Browser Powered by Ollama (Part 2)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ollama/ollama-js</title>
    <updated>2024-01-28T01:44:12Z</updated>
    <id>tag:github.com,2024-01-28:/ollama/ollama-js</id>
    <link href="https://github.com/ollama/ollama-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ollama JavaScript library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ollama JavaScript Library&lt;/h1&gt; &#xA;&lt;p&gt;The Ollama JavaScript library provides the easiest way to integrate your JavaScript project with &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;Ollama&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i ollama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import ollama from &#39;ollama&#39;&#xA;&#xA;const response = await ollama.chat({&#xA;  model: &#39;llama2&#39;,&#xA;  messages: [{ role: &#39;user&#39;, content: &#39;Why is the sky blue?&#39; }],&#xA;})&#xA;console.log(response.message.content)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Streaming responses&lt;/h2&gt; &#xA;&lt;p&gt;Response streaming can be enabled by setting &lt;code&gt;stream: true&lt;/code&gt;, modifying function calls to return an &lt;code&gt;AsyncGenerator&lt;/code&gt; where each part is an object in the stream.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import ollama from &#39;ollama&#39;&#xA;&#xA;const message = { role: &#39;user&#39;, content: &#39;Why is the sky blue?&#39; }&#xA;const response = await ollama.chat({ model: &#39;llama2&#39;, messages: [message], stream: true })&#xA;for await (const part of response) {&#xA;  process.stdout.write(part.message.content)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import ollama from &#39;ollama&#39;&#xA;&#xA;const modelfile = `&#xA;FROM llama2&#xA;SYSTEM &#34;You are mario from super mario bros.&#34;&#xA;`&#xA;await ollama.create({ model: &#39;example&#39;, modelfile: modelfile })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The Ollama JavaScript library&#39;s API is designed around the &lt;a href=&#34;https://github.com/jmorganca/ollama/raw/main/docs/api.md&#34;&gt;Ollama REST API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;chat&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.chat(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing chat parameters.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to use for the chat.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;messages&lt;/code&gt; &lt;code&gt;&amp;lt;Message[]&amp;gt;&lt;/code&gt;: Array of message objects representing the chat history. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;role&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: The role of the message sender (&#39;user&#39;, &#39;system&#39;, or &#39;assistant&#39;).&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;content&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: The content of the message.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;images&lt;/code&gt; &lt;code&gt;&amp;lt;Uint8Array[] | string[]&amp;gt;&lt;/code&gt;: (Optional) Images to be included in the message, either as Uint8Array or base64 encoded strings.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;format&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Set the expected format of the response (&lt;code&gt;json&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;options&lt;/code&gt; &lt;code&gt;&amp;lt;Options&amp;gt;&lt;/code&gt;: (Optional) Options to configure the runtime.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stream&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) When true an &lt;code&gt;AsyncGenerator&lt;/code&gt; is returned.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Returns: &lt;code&gt;&amp;lt;ChatResponse&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;generate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.generate(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing generate parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to use for the chat.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prompt&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: The prompt to send to the model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;system&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Override the model system prompt.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;template&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Override the model template.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;raw&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) Bypass the prompt template and pass the prompt directly to the model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;images&lt;/code&gt; &lt;code&gt;&amp;lt;Uint8Array[] | string[]&amp;gt;&lt;/code&gt;: (Optional) Images to be included, either as Uint8Array or base64 encoded strings.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;format&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Set the expected format of the response (&lt;code&gt;json&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;options&lt;/code&gt; &lt;code&gt;&amp;lt;Options&amp;gt;&lt;/code&gt;: (Optional) Options to configure the runtime.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stream&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) When true an &lt;code&gt;AsyncGenerator&lt;/code&gt; is returned.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;GenerateResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;pull&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.pull(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing pull parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to pull.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;insecure&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) Pull from servers whose identity cannot be verified.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;username&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Username of the user pulling the model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;password&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Password of the user pulling the model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stream&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) When true an &lt;code&gt;AsyncGenerator&lt;/code&gt; is returned.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;push&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.push(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing push parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to push.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;insecure&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) Push to servers whose identity cannot be verified.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;username&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Username of the user pushing the model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;password&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Password of the user pushing the model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stream&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) When true an &lt;code&gt;AsyncGenerator&lt;/code&gt; is returned.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;create&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.create(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing create parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to create.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) The path to the Modelfile of the model to create.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;modelfile&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) The content of the Modelfile to create.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stream&lt;/code&gt; &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;: (Optional) When true an &lt;code&gt;AsyncGenerator&lt;/code&gt; is returned.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;delete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.delete(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing delete parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to delete.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;StatusResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;copy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.copy(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing copy parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;source&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to copy from.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;destination&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to copy to.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;StatusResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;list&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.list()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;ListResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;show&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.show(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing show parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model to show.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;system&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Override the model system prompt returned.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;template&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) Override the model template returned.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;options&lt;/code&gt; &lt;code&gt;&amp;lt;Options&amp;gt;&lt;/code&gt;: (Optional) Options to configure the runtime.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;ShowResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;embeddings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ollama.embeddings(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;request&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: The request object containing embedding parameters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; The name of the model used to generate the embeddings.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prompt&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: The prompt used to generate the embedding.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;options&lt;/code&gt; &lt;code&gt;&amp;lt;Options&amp;gt;&lt;/code&gt;: (Optional) Options to configure the runtime.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;&amp;lt;EmbeddingsResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom client&lt;/h2&gt; &#xA;&lt;p&gt;A custom client can be created with the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;host&lt;/code&gt; &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;: (Optional) The Ollama host address. Default: &lt;code&gt;&#34;http://127.0.0.1:11434&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch&lt;/code&gt; &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt;: (Optional) The fetch library used to make requests to the Ollama host.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Ollama } from &#39;ollama&#39;&#xA;&#xA;const ollama = new Ollama({ host: &#39;http://localhost:11434&#39; })&#xA;const response = await ollama.chat({&#xA;  model: &#39;llama2&#39;,&#xA;  messages: [{ role: &#39;user&#39;, content: &#39;Why is the sky blue?&#39; }],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build the project files run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>typescript-language-server/typescript-language-server</title>
    <updated>2024-01-28T01:44:12Z</updated>
    <id>tag:github.com,2024-01-28:/typescript-language-server/typescript-language-server</id>
    <link href="https://github.com/typescript-language-server/typescript-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript &amp; JavaScript Language Server&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://discord.gg/AC7Vs6hwFa&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/873659987413573634?style=flat-square&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/typescript-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/typescript-language-server.svg?style=flat-square&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/typescript-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/typescript-language-server/latest.svg?style=flat-square&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TypeScript Language Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/language-server-protocol&#34;&gt;Language Server Protocol&lt;/a&gt; implementation for TypeScript wrapping &lt;code&gt;tsserver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Based on concepts and ideas from &lt;a href=&#34;https://github.com/prabirshrestha/typescript-language-server&#34;&gt;https://github.com/prabirshrestha/typescript-language-server&lt;/a&gt; and originally maintained by &lt;a href=&#34;https://typefox.io&#34;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Maintained by a &lt;a href=&#34;https://github.com/typescript-language-server/typescript-language-server/graphs/contributors&#34;&gt;community of contributors&lt;/a&gt; like you.&lt;/p&gt; &#xA;&lt;!-- MarkdownTOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#running-the-language-server&#34;&gt;Running the language server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#cli-options&#34;&gt;CLI Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#code-actions-on-save&#34;&gt;Code actions on save&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#workspace-commands-workspaceexecutecommand&#34;&gt;Workspace commands (&lt;code&gt;workspace/executeCommand&lt;/code&gt;)&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#go-to-source-definition&#34;&gt;Go to Source Definition&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#apply-workspace-edits&#34;&gt;Apply Workspace Edits&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#apply-code-action&#34;&gt;Apply Code Action&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#apply-refactoring&#34;&gt;Apply Refactoring&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#organize-imports&#34;&gt;Organize Imports&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#rename-file&#34;&gt;Rename File&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#configure-plugin&#34;&gt;Configure plugin&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#code-lenses-textdocumentcodelens&#34;&gt;Code Lenses (&lt;code&gt;textDocument/codeLens&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#inlay-hints-textdocumentinlayhint&#34;&gt;Inlay hints (&lt;code&gt;textDocument/inlayHint&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#typescript-version-notification&#34;&gt;TypeScript Version Notification&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#dev&#34;&gt;Dev&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/#publishing&#34;&gt;Publishing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /MarkdownTOC --&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g typescript-language-server typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the language server&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;typescript-language-server --stdio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Usage: typescript-language-server [options]&#xA;&#xA;&#xA;  Options:&#xA;&#xA;    -V, --version                          output the version number&#xA;    --stdio                                use stdio (required option)&#xA;    --log-level &amp;lt;log-level&amp;gt;                A number indicating the log level (4 = log, 3 = info, 2 = warn, 1 = error). Defaults to `3`.&#xA;    -h, --help                             output usage information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/docs/configuration.md&#34;&gt;configuration documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Code actions on save&lt;/h3&gt; &#xA;&lt;p&gt;Server announces support for the following code action kinds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;source.fixAll.ts&lt;/code&gt; - despite the name, fixes a couple of specific issues: unreachable code, await in non-async functions, incorrectly implemented interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source.removeUnused.ts&lt;/code&gt; - removes declared but unused variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source.addMissingImports.ts&lt;/code&gt; - adds imports for used but not imported symbols&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source.removeUnusedImports.ts&lt;/code&gt; - removes unused imports&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source.sortImports.ts&lt;/code&gt; - sorts imports&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source.organizeImports.ts&lt;/code&gt; - organizes and removes unused imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This allows editors that support running code actions on save to automatically run fixes associated with those kinds.&lt;/p&gt; &#xA;&lt;p&gt;Those code actions, if they apply in the current code, should also be presented in the list of &#34;Source Actions&#34; if the editor exposes those.&lt;/p&gt; &#xA;&lt;p&gt;The user can enable it with a setting similar to (can vary per-editor):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;codeActionsOnSave&#34;: {&#xA;    &#34;source.organizeImports.ts&#34;: true,&#xA;    // or just&#xA;    &#34;source.organizeImports&#34;: true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Workspace commands (&lt;code&gt;workspace/executeCommand&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_executeCommand&#34;&gt;LSP specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most of the time, you&#39;ll execute commands with arguments retrieved from another request like &lt;code&gt;textDocument/codeAction&lt;/code&gt;. There are some use cases for calling them manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp&lt;/code&gt; refers to the language server protocol types, &lt;code&gt;tsp&lt;/code&gt; refers to the typescript server protocol types.&lt;/p&gt; &#xA;&lt;h4&gt;Go to Source Definition&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;    command: `_typescript.goToSourceDefinition`&#xA;    arguments: [&#xA;        lsp.DocumentUri,  // String URI of the document&#xA;        lsp.Position,     // Line and character position (zero-based)&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;lsp.Location[] | null&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(This command is supported from Typescript 4.7.)&lt;/p&gt; &#xA;&lt;h4&gt;Apply Workspace Edits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;    command: `_typescript.applyWorkspaceEdit`&#xA;    arguments: [lsp.WorkspaceEdit]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;lsp.ApplyWorkspaceEditResult&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Apply Code Action&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;    command: `_typescript.applyCodeAction`&#xA;    arguments: [&#xA;        tsp.CodeAction,  // TypeScript Code Action object&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;void&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Apply Refactoring&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;    command: `_typescript.applyRefactoring`&#xA;    arguments: [&#xA;        tsp.GetEditsForRefactorRequestArgs,&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;void&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Organize Imports&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;    command: `_typescript.organizeImports`&#xA;    arguments: [&#xA;        // The &#34;skipDestructiveCodeActions&#34; argument is supported from Typescript 4.4+&#xA;        [string] | [string, { skipDestructiveCodeActions?: boolean }],&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;void&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rename File&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;    command: `_typescript.applyRenameFile`&#xA;    arguments: [&#xA;        { sourceUri: string; targetUri: string; },&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;void&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Configure plugin&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;    command: `_typescript.configurePlugin`&#xA;    arguments: [pluginName: string, configuration: any]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;void&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Lenses (&lt;code&gt;textDocument/codeLens&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Code lenses can be enabled using the &lt;code&gt;implementationsCodeLens&lt;/code&gt; and &lt;code&gt;referencesCodeLens&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/typescript-language-server/typescript-language-server/master/docs/configuration.md/#workspacedidchangeconfiguration&#34;&gt;workspace configuration options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Code lenses provide a count of &lt;strong&gt;references&lt;/strong&gt; and/or &lt;strong&gt;implemenations&lt;/strong&gt; for symbols in the document. For clients that support it it&#39;s also possible to click on those to navigate to the relevant locations in the the project. Do note that clicking those trigger a &lt;code&gt;editor.action.showReferences&lt;/code&gt; command which is something that client needs to have explicit support for. Many do by default but some don&#39;t. An example command will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;command: {&#xA;    title: &#39;1 reference&#39;,&#xA;    command: &#39;editor.action.showReferences&#39;,&#xA;    arguments: [&#xA;        &#39;file://project/foo.ts&#39;,    // URI&#xA;        { line: 1, character: 1 },  // Position&#xA;        [                           // A list of Location objects.&#xA;            {&#xA;                uri: &#39;file://project/bar.ts&#39;,&#xA;                range: {&#xA;                    start: {&#xA;                        line: 7,&#xA;                        character: 24,&#xA;                    },&#xA;                    end: {&#xA;                        line: 7,&#xA;                        character: 28,&#xA;                    },&#xA;                },&#xA;            },&#xA;        ],&#xA;    ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inlay hints (&lt;code&gt;textDocument/inlayHint&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;For the request to return any results, some or all of the following options need to be enabled through &lt;code&gt;preferences&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export interface InlayHintsOptions extends UserPreferences {&#xA;    includeInlayParameterNameHints: &#39;none&#39; | &#39;literals&#39; | &#39;all&#39;;&#xA;    includeInlayParameterNameHintsWhenArgumentMatchesName: boolean;&#xA;    includeInlayFunctionParameterTypeHints: boolean;&#xA;    includeInlayVariableTypeHints: boolean;&#xA;    includeInlayVariableTypeHintsWhenTypeMatchesName: boolean;&#xA;    includeInlayPropertyDeclarationTypeHints: boolean;&#xA;    includeInlayFunctionLikeReturnTypeHints: boolean;&#xA;    includeInlayEnumMemberValueHints: boolean;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TypeScript Version Notification&lt;/h3&gt; &#xA;&lt;p&gt;Right after initializing, the server sends a custom &lt;code&gt;$/typescriptVersion&lt;/code&gt; notification that carries information about the version of TypeScript that is utilized by the server. The editor can then display that information in the UI.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;$/typescriptVersion&lt;/code&gt; notification params include two properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt; - a semantic version (for example &lt;code&gt;4.8.4&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source&lt;/code&gt; - a string specifying whether used TypeScript version comes from the local workspace (&lt;code&gt;workspace&lt;/code&gt;), is explicitly specified through a &lt;code&gt;initializationOptions.tsserver.path&lt;/code&gt; setting (&lt;code&gt;user-setting&lt;/code&gt;) or was bundled with the server (&lt;code&gt;bundled&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dev&lt;/h3&gt; &#xA;&lt;p&gt;Build and rebuild on change.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn test&lt;/code&gt; - run all tests in watch mode for developing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn test:commit&lt;/code&gt; - run all tests once&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default only console logs of level &lt;code&gt;warning&lt;/code&gt; and higher are printed to the console. You can override the &lt;code&gt;CONSOLE_LOG_LEVEL&lt;/code&gt; level in &lt;code&gt;package.json&lt;/code&gt; to either &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; to log other levels.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing&lt;/h3&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://github.com/google-github-actions/release-please-action&#34;&gt;https://github.com/google-github-actions/release-please-action&lt;/a&gt; Github action to automatically release new version on merging a release PR.&lt;/p&gt;</summary>
  </entry>
</feed>