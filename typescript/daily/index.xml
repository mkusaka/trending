<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-03T01:37:10Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aidenybai/react-scan</title>
    <updated>2024-12-03T01:37:10Z</updated>
    <id>tag:github.com,2024-12-03:/aidenybai/react-scan</id>
    <link href="https://github.com/aidenybai/react-scan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scan for React performance issues and eliminate slow renders in your app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/aidenybai/react-scan/raw/main/.github/assets/logo.svg?sanitize=true&#34; width=&#34;30&#34; height=&#34;30&#34; align=&#34;center&#34;&gt; React Scan&lt;/h1&gt; &#xA;&lt;p&gt;React Scan automatically detects performance issues in your React app.&lt;/p&gt; &#xA;&lt;p&gt;Previously, tools like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react.dev/reference/react/Profiler&#34;&gt;&lt;code&gt;&amp;lt;Profiler /&amp;gt;&lt;/code&gt;&lt;/a&gt; required lots of manual changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/welldone-software/why-did-you-render&#34;&gt;Why Did You Render?&lt;/a&gt; lacked simple visual cues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://legacy.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html&#34;&gt;React Devtools&lt;/a&gt; didn&#39;t have a simple, portable, and programmatic API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;React Scan attempts to solve these problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It requires no code changes – just drop it in&lt;/li&gt; &#xA; &lt;li&gt;It highlights exactly the components you need to optimize&lt;/li&gt; &#xA; &lt;li&gt;Use it via script tag, npm, CLI, you name it!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Trusted by engineering teams at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://airbnb.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aidenybai/react-scan/refs/heads/main/.github/assets/airbnb-logo.png&#34; height=&#34;30&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://polaris.shopify.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aidenybai/react-scan/refs/heads/main/.github/assets/shopify-logo.png&#34; height=&#34;30&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.faire.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aidenybai/react-scan/refs/heads/main/.github/assets/faire-logo.svg?sanitize=true&#34; height=&#34;20&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://perplexity.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aidenybai/react-scan/refs/heads/main/.github/assets/perplexity-logo.png&#34; height=&#34;30&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://react-scan.million.dev&#34;&gt;&lt;strong&gt;Try it out! →&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aidenybai/react-scan/refs/heads/main/.github/assets/demo.gif?token=GHSAT0AAAAAAB4IOFACRC6P6E45TB2FPYFCZZV2AYA&#34; alt=&#34;React Scan in action&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Looking for a more advanced version? Check out &lt;a href=&#34;https://million.dev&#34;&gt;Million Lint&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Looking for &lt;a href=&#34;https://github.com/aidenybai/react-scan/pull/23&#34;&gt;React Native&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The fastest way to get started is via CLI. This will spin up an isolated browser instance which you can interact or use React Scan with.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx react-scan@latest http://localhost:3000&#xA;# you can technically scan ANY website on the web:&#xA;# npx react-scan@latest https://react.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add it to your existing dev process as well. Here&#39;s an example for Next.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;dev&#34;: &#34;next dev&#34;,&#xA;    &#34;scan&#34;: &#34;next dev &amp;amp; npx react-scan@latest localhost:3000&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use a separate browser and you have access to your local codebase, then add this script to your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- import this BEFORE any scripts --&amp;gt;&#xA;&amp;lt;script src=&#34;https://unpkg.com/react-scan/dist/auto.global.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Next.js (pages)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Add the script tag to your &lt;code&gt;pages/_document.tsx&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Html, Head, Main, NextScript } from &#39;next/document&#39;;&#xA;&#xA;export default function Document() {&#xA;  return (&#xA;    &amp;lt;Html lang=&#34;en&#34;&amp;gt;&#xA;      &amp;lt;Head&amp;gt;&#xA;        &amp;lt;script src=&#34;https://unpkg.com/react-scan/dist/auto.global.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;        {/* rest of your scripts go under */}&#xA;      &amp;lt;/Head&amp;gt;&#xA;      &amp;lt;body&amp;gt;&#xA;        &amp;lt;Main /&amp;gt;&#xA;        &amp;lt;NextScript /&amp;gt;&#xA;      &amp;lt;/body&amp;gt;&#xA;    &amp;lt;/Html&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Next.js (app)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Add the script tag to your &lt;code&gt;app/layout.tsx&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default function RootLayout({&#xA;  children,&#xA;}: {&#xA;  children: React.ReactNode&#xA;}) {&#xA;  return (&#xA;    &amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;      &amp;lt;head&amp;gt;&#xA;        &amp;lt;script src=&#34;https://unpkg.com/react-scan/dist/auto.global.js&#34; async /&amp;gt;&#xA;        {/* rest of your scripts go under */}&#xA;      &amp;lt;/head&amp;gt;&#xA;      &amp;lt;body&amp;gt;{children}&amp;lt;/body&amp;gt;&#xA;    &amp;lt;/html&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Vite / Create React App&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Add the script tag to your &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;script src=&#34;https://unpkg.com/react-scan/dist/auto.global.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;    &amp;lt;!-- rest of your scripts go under --&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;!-- ... --&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;p&gt;If you need a programmatic API to debug further, install via NPM instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install react-scan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in your app, import this &lt;strong&gt;BEFORE&lt;/strong&gt; &lt;code&gt;react&lt;/code&gt;. This must run in a client context (e.g. not in a server component):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { scan } from &#39;react-scan&#39;; // import this BEFORE react&#xA;import React from &#39;react&#39;;&#xA;&#xA;if (typeof window !== &#39;undefined&#39;) {&#xA;  scan({&#xA;    enabled: true,&#xA;    log: true, // logs render info to console (default: false)&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;Options&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;export interface Options {&#xA;  /**&#xA;   * Enable/disable scanning&#xA;   *&#xA;   * Please use the recommended way:&#xA;   * enabled: process.env.NODE_ENV === &#39;development&#39;,&#xA;   *&#xA;   * @default true&#xA;   */&#xA;  enabled?: boolean;&#xA;  /**&#xA;   * Include children of a component applied with withScan&#xA;   *&#xA;   * @default true&#xA;   */&#xA;  includeChildren?: boolean;&#xA;&#xA;  /**&#xA;   * Enable/disable geiger sound&#xA;   *&#xA;   * @default true&#xA;   */&#xA;  playSound?: boolean;&#xA;&#xA;  /**&#xA;   * Log renders to the console&#xA;   *&#xA;   * @default false&#xA;   */&#xA;  log?: boolean;&#xA;&#xA;  /**&#xA;   * Show toolbar bar&#xA;   *&#xA;   * @default true&#xA;   */&#xA;  showToolbar?: boolean;&#xA;&#xA;  /**&#xA;   * Render count threshold, only show&#xA;   * when a component renders more than this&#xA;   *&#xA;   * @default 0&#xA;   */&#xA;  renderCountThreshold?: number;&#xA;&#xA;  /**&#xA;   * Clear aggregated fibers after this time in milliseconds&#xA;   *&#xA;   * @default 5000&#xA;   */&#xA;  resetCountTimeout?: number;&#xA;&#xA;  /**&#xA;   * Maximum number of renders for red indicator&#xA;   *&#xA;   * @default 20&#xA;   */&#xA;  maxRenders?: number;&#xA;&#xA;  /**&#xA;   * Report data to getReport()&#xA;   *&#xA;   * @default false&#xA;   */&#xA;  report?: boolean;&#xA;&#xA;  /**&#xA;   * Always show labels&#xA;   *&#xA;   * @default false&#xA;   */&#xA;  alwaysShowLabels?: boolean;&#xA;&#xA;  /**&#xA;   * Animation speed&#xA;   *&#xA;   * @default &#34;fast&#34;&#xA;   */&#xA;  animationSpeed?: &#39;slow&#39; | &#39;fast&#39; | &#39;off&#39;;&#xA;&#xA;  onCommitStart?: () =&amp;gt; void;&#xA;  onRender?: (fiber: Fiber, render: Render) =&amp;gt; void;&#xA;  onCommitFinish?: () =&amp;gt; void;&#xA;  onPaintStart?: (outlines: PendingOutline[]) =&amp;gt; void;&#xA;  onPaintFinish?: (outlines: PendingOutline[]) =&amp;gt; void;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scan(options: Options)&lt;/code&gt;: Imperative API to start scanning&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;useScan(options: Options)&lt;/code&gt;: Hook API to start scanning&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;withScan(Component, options: Options)&lt;/code&gt;: Whitelist a specific component, do not scan other components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getReport()&lt;/code&gt;: Get a report of all the renders&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setOptions(options: Options): void&lt;/code&gt;: Set options at runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getOptions()&lt;/code&gt;: Get the current options&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onRender(Component, onRender: (fiber: Fiber, render: Render) =&amp;gt; void)&lt;/code&gt;: Hook into a specific component&#39;s renders&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRenderInfo(Component)&lt;/code&gt;: Get the render info for a specific component&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why React Scan?&lt;/h2&gt; &#xA;&lt;p&gt;React can be tricky to optimize.&lt;/p&gt; &#xA;&lt;p&gt;The issue is that component props are compared by reference, not value. This is intentional – this way rendering can be cheap to run.&lt;/p&gt; &#xA;&lt;p&gt;However, this makes it easy to accidentally cause unnecessary renders, making the app slow. Even in production apps, with hundreds of engineers, can&#39;t fully optimize their apps (see &lt;a href=&#34;https://github.com/aidenybai/react-scan/raw/main/.github/assets/github.mp4&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://github.com/aidenybai/react-scan/raw/main/.github/assets/twitter.mp4&#34;&gt;Twitter&lt;/a&gt;, and &lt;a href=&#34;https://github.com/aidenybai/react-scan/raw/main/.github/assets/instagram.mp4&#34;&gt;Instagram&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This often comes down to props that update in reference, like callbacks or object values. For example, the &lt;code&gt;onClick&lt;/code&gt; function and &lt;code&gt;style&lt;/code&gt; object are re-created on every render, causing &lt;code&gt;ExpensiveComponent&lt;/code&gt; to slow down the app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ExpensiveComponent onClick={() =&amp;gt; alert(&#39;hi&#39;)} style={{ color: &#39;purple&#39; }} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;React Scan helps you identify these issues by automatically detecting and highlighting renders that cause performance issues. Now, instead of guessing, you can see exactly which components you need to fix.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Want to automatically fix these issues? Check out &lt;a href=&#34;https://million.dev&#34;&gt;Million Lint&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why this instead of React Devtools?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;React Devtools aims to be a general purpose tool for React. However, I deal with React performance issues every day, and React Devtools doesn&#39;t fix my problems well. There&#39;s a lot of noise (no obvious distinction between unnecessary and necessary renders), and there&#39;s no programmatic API. If it sounds like you have the same problems, then React Scan may be a better choice.&lt;/p&gt; &#xA;&lt;p&gt;Also, some personal complaints about React Devtools&#39; highlight feature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React Devtools &#34;batches&#34; paints, so if a component renders too fast, it will lag behind and only show 1 every second or so&lt;/li&gt; &#xA; &lt;li&gt;When you scroll/resize the boxes don&#39;t update position&lt;/li&gt; &#xA; &lt;li&gt;No count of how many renders there are&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t know what the bad/slow renders are without inspecting&lt;/li&gt; &#xA; &lt;li&gt;The menu is hidden away so it&#39;s annoying to turn on/off, user experience should be specifically tuned for debugging performance, instead of hidden behind a profiler/component tree&lt;/li&gt; &#xA; &lt;li&gt;No programmatic API&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s stuck in a chrome extension, I want to run it anywhere on the web&lt;/li&gt; &#xA; &lt;li&gt;It looks subjectively ugly (lines look fuzzy, feels sluggish)&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m more ambitious with react-scan (see our roadmap)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: React Native wen?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Soon :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Chrome Extension wen?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Soon :)&lt;/p&gt; &#xA;&lt;h2&gt;Resources &amp;amp; Contributing Back&lt;/h2&gt; &#xA;&lt;p&gt;Want to try it out? Check the &lt;a href=&#34;https://react-scan.million.dev&#34;&gt;our demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Looking to contribute back? Check the &lt;a href=&#34;https://github.com/aidenybai/react-scan/raw/main/.github/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; out.&lt;/p&gt; &#xA;&lt;p&gt;Want to talk to the community? Hop in our &lt;a href=&#34;https://discord.gg/X9yFbcV2rF&#34;&gt;Discord&lt;/a&gt; and share your ideas and what you&#39;ve build with React Scan.&lt;/p&gt; &#xA;&lt;p&gt;Find a bug? Head over to our &lt;a href=&#34;https://github.com/aidenybai/react-scan/issues&#34;&gt;issue tracker&lt;/a&gt; and we&#39;ll do our best to help. We love pull requests, too!&lt;/p&gt; &#xA;&lt;p&gt;We expect all contributors to abide by the terms of our &lt;a href=&#34;https://github.com/aidenybai/react-scan/raw/main/.github/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aidenybai/react-scan/raw/main/.github/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;→ Start contributing on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Scan only for unnecessary renders (&#34;unstable&#34; props)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Scan API (&lt;code&gt;withScan&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cleanup config options&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chrome extension (h/t &lt;a href=&#34;https://github.com/biw&#34;&gt;@biw&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mode to highlight long tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add context updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Expose primitives / internals for advanced use cases&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More explicit options override API (start log at certain area, stop log, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Don&#39;t show label if no reconciliation occurred (&#34;client renders&#34; in DevTools)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &#34;global&#34; counter using &lt;code&gt;sessionStorage&lt;/code&gt;, aggregate count stats instead of immediate replacement&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Give a general report of the app&#39;s performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Select areas of the screen to scan&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Report should include all renders&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; heatmap decay (stacked renders will be more intense)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Investigate components (UI allowlist)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Offscreen canvas on worker thread&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; UI for turning on/off options&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; “PageSpeed insights” for React&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; React Native support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cleanup API reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Name / explain the actual problem, docs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Simple FPS counter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/lahmatiy/react-render-tracker/raw/229ad0e9c28853615300724d5dc86c140f250f60/src/publisher/react-integration/utils/getInternalReactConstants.ts#L28&#34;&gt;Runtime version guarding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; React as peer dependency (lock version to range)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a funny mascot, like the &lt;a href=&#34;https://www.youtube.com/shorts/FwOZdX7bDKI?app=desktop&#34;&gt;&#34;Stop I&#39;m Changing&#34; dude&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;React Scan takes inspiration from the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react.dev/learn/react-developer-tools&#34;&gt;React Devtools&lt;/a&gt; for the initial idea of &lt;a href=&#34;https://medium.com/dev-proto/highlight-react-components-updates-1b2832f2ce48&#34;&gt;highlighting renders&lt;/a&gt;. We chose to diverge from this to provide a &lt;a href=&#34;https://x.com/aidenybai/status/1857122670929969551&#34;&gt;better developer experience&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://million.dev&#34;&gt;Million Lint&lt;/a&gt; for scanning and linting approaches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/welldone-software/why-did-you-render&#34;&gt;Why Did You Render?&lt;/a&gt; for the concept of hijacking internals to detect unnecessary renders caused by &#34;unstable&#34; props&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;React Scan is &lt;a href=&#34;https://raw.githubusercontent.com/aidenybai/react-scan/main/LICENSE&#34;&gt;MIT-licensed&lt;/a&gt; open-source software by Aiden Bai, &lt;a href=&#34;https://million.dev&#34;&gt;Million Software, Inc.&lt;/a&gt;, and &lt;a href=&#34;https://github.com/aidenybai/react-scan/graphs/contributors&#34;&gt;contributors&lt;/a&gt;:&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Koenkk/zigbee2mqtt.io</title>
    <updated>2024-12-03T01:37:10Z</updated>
    <id>tag:github.com,2024-12-03:/Koenkk/zigbee2mqtt.io</id>
    <link href="https://github.com/Koenkk/zigbee2mqtt.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📘 Zigbee2mqtt documentation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zigbee2MQTT.io&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Koenkk/zigbee2mqtt.io/actions/workflows/build-deploy.yml&#34;&gt;&lt;img src=&#34;https://github.com/Koenkk/zigbee2mqtt.io/actions/workflows/build-deploy.yml/badge.svg?sanitize=true&#34; alt=&#34;Build ⚙ and Deploy 🚀 &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://zigbee2mqtt.io&#34;&gt;Zigbee2MQTT&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;p&gt;It is based on &lt;a href=&#34;https://v2.vuepress.vuejs.org/&#34;&gt;VuePress v2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Directory-Structure:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docgen&lt;/code&gt;: Some scripts to test and generate the Device-Pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: The current documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs/.vuepress&lt;/code&gt;: Some VuePress enhancements like Stylesheets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;public&lt;/code&gt;: Static assets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;supported-devices-component&lt;/code&gt;: Vue.js component rendering the devices-overview page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;navbar.ts&lt;/code&gt;: Configuration for the top navigation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sidebar.ts&lt;/code&gt;: Configuration for the sidebars by individual sections (like &lt;em&gt;Guide&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vuepress.config.ts&lt;/code&gt;: The &lt;a href=&#34;https://v2.vuepress.vuejs.org/reference/config.html&#34;&gt;VuePress config file&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docgen&lt;/h2&gt; &#xA;&lt;p&gt;The docgen-scripts helps to generate and update the individual device-pages (&lt;code&gt;/docs/devices/*.md&lt;/code&gt;). &lt;a href=&#34;https://github.com/Koenkk/zigbee-herdsman-converters&#34;&gt;zigbee-herdsman-converters&lt;/a&gt; exposes a list with supported devices which is used for generation. It also updates the Devices-List used by the &lt;em&gt;Supported-Devices&lt;/em&gt; overview page.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;## Notes&lt;/code&gt; section of each page is written by hand and does not come from &lt;code&gt;zigbee-herdsman-converters&lt;/code&gt;. This section gets preserved and can be edited.&lt;/p&gt; &#xA;&lt;p&gt;Docgen is written in Typescript, so you need a recent version of Node.js and NPM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install dependencies&#xA;npm ci&#xA;&#xA;# Run docgen&#xA;npm run docgen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docgen Tests&lt;/h3&gt; &#xA;&lt;p&gt;Docgen includes some scripts to help testing the page.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;check-device-images&lt;/code&gt;: Checks for missing device images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check-links&lt;/code&gt;: Checks for broken internal links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;: &lt;code&gt;check-links&lt;/code&gt; iterates over the generated VuePress files, so you have to build the page first!&lt;/p&gt; &#xA;&lt;h2&gt;VuePress&lt;/h2&gt; &#xA;&lt;p&gt;Use Node.js 18 for building VuePress (other versions are not officially supported).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Switch to node 18 (for nvm or nvm-compatible tool users)&#xA;nvm use&#xA;&#xA;# Install dependencies&#xA;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run vuepress build&#xA;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build-artifact gets written to &lt;code&gt;dist&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run vuepress in dev mode with hot-reloading&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;dev&lt;/code&gt;-Mode &lt;strong&gt;excludes&lt;/strong&gt; the huge amount device-pages which slows down the build process drastically. If you are interested in the device-pages you could include them by using the &lt;code&gt;npm run dev:devices&lt;/code&gt; npm-run script.&lt;/p&gt; &#xA;&lt;h4&gt;Include specific device&lt;/h4&gt; &#xA;&lt;p&gt;When running in &lt;code&gt;dev&lt;/code&gt;-Mode, you can also specify a device (but this device only) which you would like to include in the build process. Useful when working on improving notes of just one device.&lt;br&gt; &lt;code&gt;INCLUDE_DEVICE&lt;/code&gt; variable should be supplied with device&#39;s filename (see &lt;a href=&#34;https://raw.githubusercontent.com/Koenkk/zigbee2mqtt.io/master/docs/devices/&#34;&gt;&lt;code&gt;/docs/devices&lt;/code&gt;&lt;/a&gt; folder), without the &lt;code&gt;.md.&lt;/code&gt; extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run vuepress in dev mode with specific device included&#xA;npx cross-env INCLUDE_DEVICE=&amp;lt;DEVICE_FILE_NAME&amp;gt; npm run dev&#xA;&#xA;# Example for TS011F_plug_1&#xA;npx cross-env INCLUDE_DEVICE=TS011F_plug_1 npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Change development port&lt;/h4&gt; &#xA;&lt;p&gt;You can change development server port when the default one (8080) is taken on your system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run vuepress in dev mode on specified port&#xA;npx cross-env DEV_PORT=&amp;lt;PORT_NUMBER&amp;gt; npm run dev&#xA;&#xA;# Example for port no 15080&#xA;npx cross-env DEV_PORT=15080 npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;You can also just use a docker-image include Node.js.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -v $PWD:/app -u $UID -ti node:18-slim bash&#xA;node@87e1438ef553:/$ cd /app&#xA;node@87e1438ef553:/app$ npm ci&#xA;node@87e1438ef553:/app$ npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>