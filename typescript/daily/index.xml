<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-07T01:41:05Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maybe-finance/maybe-archive</title>
    <updated>2024-02-07T01:41:05Z</updated>
    <id>tag:github.com,2024-02-07:/maybe-finance/maybe-archive</id>
    <link href="https://github.com/maybe-finance/maybe-archive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;🚨 NOTE: This codebase is no longer being maintained. The repo we&#39;re actively working on is located at &lt;a href=&#34;https://github.com/maybe-finance/maybe&#34;&gt;maybe-finance/maybe&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/maybe-finance/maybe/assets/35243/79d97b31-7fad-4031-9e83-5005bc1d7fd0&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Maybe: Open-source personal finance app&lt;/h1&gt; &#xA;&lt;p&gt;&lt;b&gt;Get involved: &lt;a href=&#34;https://link.maybe.co/discord&#34;&gt;Discord&lt;/a&gt; • &lt;a href=&#34;https://maybe.co&#34;&gt;Website&lt;/a&gt; • &lt;a href=&#34;https://github.com/maybe-finance/maybe/issues&#34;&gt;Issues&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backstory&lt;/h2&gt; &#xA;&lt;p&gt;We spent the better part of 2021/2022 building a personal finance + wealth management app called, Maybe. Very full-featured, including an &#34;Ask an Advisor&#34; feature which connected users with an actual CFP/CFA to help them with their finances (all included in your subscription).&lt;/p&gt; &#xA;&lt;p&gt;The business end of things didn&#39;t work out, and so we shut things down mid-2023.&lt;/p&gt; &#xA;&lt;p&gt;We spent the better part of $1,000,000 building the app (employees + contractors, data providers/services, infrastructure, etc.).&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re now reviving the product as a fully open-source project. The goal is to let you run the app yourself, for free, and use it to manage your own finances and eventually offer a hosted version of the app for a small monthly fee.&lt;/p&gt; &#xA;&lt;h2&gt;End goal&lt;/h2&gt; &#xA;&lt;p&gt;Ultimately we want to rebuild this so that you can self-host, but we also have plans to offer a hosted version for a fee. That means some decisions will be made that don&#39;t explicitly make sense for self-hosted but &lt;em&gt;do&lt;/em&gt; support the goal of us offering a for-pay hosted version.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;As a personal finance + wealth management app, Maybe has a lot of features. Here&#39;s a brief overview of some of the main ones...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Net worth tracking&lt;/li&gt; &#xA; &lt;li&gt;Financial account syncing&lt;/li&gt; &#xA; &lt;li&gt;Investment benchmarking&lt;/li&gt; &#xA; &lt;li&gt;Investment portfolio allocation&lt;/li&gt; &#xA; &lt;li&gt;Debt insights&lt;/li&gt; &#xA; &lt;li&gt;Retirement forecasting + planning&lt;/li&gt; &#xA; &lt;li&gt;Investment return simulation&lt;/li&gt; &#xA; &lt;li&gt;Manual account/investment tracking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And dozens upon dozens of smaller features.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;This is the current state of building the app. We&#39;re actively working to make this process much more streamlined!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;You&#39;ll need Docker installed to run the app locally.&lt;/em&gt; &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt; is an easy way to get started.&lt;/p&gt; &#xA;&lt;p&gt;First, copy the &lt;code&gt;.env.example&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, create a new secret using &lt;code&gt;openssl rand -base64 32&lt;/code&gt; and populate &lt;code&gt;NEXTAUTH_SECRET&lt;/code&gt; in your &lt;code&gt;.env&lt;/code&gt; file with it.&lt;/p&gt; &#xA;&lt;p&gt;To enable transactional emails, you&#39;ll need to create a &lt;a href=&#34;https://postmarkapp.com/&#34;&gt;Postmark&lt;/a&gt; account and add your API key to your &lt;code&gt;.env&lt;/code&gt; file (&lt;code&gt;NX_EMAIL_PROVIDER_API_TOKEN&lt;/code&gt;) and set &lt;code&gt;NX_EMAIL_PROVIDER&lt;/code&gt; to &lt;code&gt;postmark&lt;/code&gt;. You can also set the from and reply-to email addresses (&lt;code&gt;NX_EMAIL_FROM_ADDRESS&lt;/code&gt; and &lt;code&gt;NX_EMAIL_REPLY_TO_ADDRESS&lt;/code&gt;). If you want to run the app without email, you can set &lt;code&gt;NX_EMAIL_PROVIDER_API_TOKEN&lt;/code&gt; to a dummy value or leave &lt;code&gt;NX_EMAIL_PROVIDER&lt;/code&gt; blank. We also support SMTP for sending emails, see information about configuring environment variables in the &lt;code&gt;.env.example&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Maybe uses &lt;a href=&#34;https://teller.io/&#34;&gt;Teller&lt;/a&gt; for connecting financial accounts. To get started with Teller, you&#39;ll need to create an account. Once you&#39;ve created an account:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add your Teller application id to your &lt;code&gt;.env&lt;/code&gt; file (&lt;code&gt;NEXT_PUBLIC_TELLER_APP_ID&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Download your authentication certificates from Teller, create a &lt;code&gt;certs&lt;/code&gt; folder in the root of the project, and place your certs in that directory. You should have both a &lt;code&gt;certificate.pem&lt;/code&gt; and &lt;code&gt;private_key.pem&lt;/code&gt;. &lt;strong&gt;NEVER&lt;/strong&gt; check these files into source control, the &lt;code&gt;.gitignore&lt;/code&gt; file will prevent the &lt;code&gt;certs/&lt;/code&gt; directory from being added, but please double-check.&lt;/li&gt; &#xA; &lt;li&gt;Set your &lt;code&gt;NEXT_PUBLIC_TELLER_ENV&lt;/code&gt; and &lt;code&gt;NX_TELLER_ENV&lt;/code&gt; to your desired environment. The default is &lt;code&gt;sandbox&lt;/code&gt; which allows for testing with mock data. The login credentials for the sandbox environment are &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;. To connect to real financial accounts, you&#39;ll need to use the &lt;code&gt;development&lt;/code&gt; environment.&lt;/li&gt; &#xA; &lt;li&gt;Webhooks are not implemented yet, but you can populate the &lt;code&gt;NX_TELLER_SIGNING_SECRET&lt;/code&gt; with the value from your Teller account.&lt;/li&gt; &#xA; &lt;li&gt;We highly recommend checking out the &lt;a href=&#34;https://teller.io/docs&#34;&gt;Teller docs&lt;/a&gt; for more info.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then run the following pnpm commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm install&#xA;pnpm run dev:services:all&#xA;pnpm prisma:migrate:dev&#xA;pnpm prisma:seed&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set Up Ngrok&lt;/h2&gt; &#xA;&lt;p&gt;External data providers require HTTPS/SSL webhook URLs for sending data.&lt;/p&gt; &#xA;&lt;p&gt;To test this locally/during development, you will need to setup &lt;code&gt;ngrok&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a free account&lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://dashboard.ngrok.com/get-started/your-authtoken&#34;&gt;this page&lt;/a&gt; to access your auth token&lt;/li&gt; &#xA; &lt;li&gt;Paste it into your &lt;code&gt;.env&lt;/code&gt; file: &lt;code&gt;NGROK_AUTH_TOKEN=your_auth_token&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should claim your free static domain to avoid needing to change the URL each time you start/stop the server.&lt;/p&gt; &#xA;&lt;p&gt;To do so:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit the &lt;a href=&#34;https://dashboard.ngrok.com/cloud-edge/domains&#34;&gt;domains&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;Click on Create Domain&lt;/li&gt; &#xA; &lt;li&gt;Copy the domain and paste it into your &lt;code&gt;.env&lt;/code&gt; file: &lt;code&gt;NGROK_DOMAIN=your_domain&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it! As long as you run the project locally using &lt;code&gt;docker&lt;/code&gt; with &lt;code&gt;pnpm dev:services:all&lt;/code&gt; you&#39;ll be good to go.&lt;/p&gt; &#xA;&lt;h2&gt;External data&lt;/h2&gt; &#xA;&lt;p&gt;To pull market data in (for investments), you&#39;ll need a Polygon.io API key. You can get one for free &lt;a href=&#34;https://polygon.io/&#34;&gt;here&lt;/a&gt; and then add it to your &lt;code&gt;.env&lt;/code&gt; file (&lt;code&gt;NX_POLYGON_API_KEY&lt;/code&gt;). &lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re using the free &#34;basic&#34; plan, you&#39;ll need to manually sync stock tickers using the dev tools in the app the first time you run it. It will then be re-synced automatically every 24 hours. If you&#39;re using a paid tier, be sure to update your &lt;code&gt;.env&lt;/code&gt; file with the correct tier (&lt;code&gt;NX_POLYGON_API_TIER&lt;/code&gt;) and tickers and pricing will be synced automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next.js&lt;/li&gt; &#xA; &lt;li&gt;Tailwind&lt;/li&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA; &lt;li&gt;Express&lt;/li&gt; &#xA; &lt;li&gt;Postgres (w/ Timescale)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The original app was built by &lt;a href=&#34;https://twitter.com/zg_dev&#34;&gt;Zach Gollwitzer&lt;/a&gt;, &lt;a href=&#34;https://www.narciero.com/&#34;&gt;Nick Arciero&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/actualTimWilson&#34;&gt;Tim Wilson&lt;/a&gt;, with design work by &lt;a href=&#34;https://twitter.com/justinmfarrugia&#34;&gt;Justin Farrugia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; license&lt;/h2&gt; &#xA;&lt;p&gt;Maybe is distributed under an &lt;a href=&#34;https://github.com/maybe-finance/maybe-archive/raw/main/LICENSE&#34;&gt;AGPLv3 license&lt;/a&gt;. &#34;Maybe&#34; is a trademark of Maybe Finance, Inc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>framesjs/frames.js</title>
    <updated>2024-02-07T01:41:05Z</updated>
    <id>tag:github.com,2024-02-07:/framesjs/frames.js</id>
    <link href="https://github.com/framesjs/frames.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fastest way to make a Farcaster Frame&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;frames.js&lt;/h1&gt; &#xA;&lt;p&gt;frames.js is a TypeScript library and framework for writing and testing Farcaster Frames.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://framesjs.org&#34;&gt;&lt;img width=&#34;1000&#34; title=&#34;Frames.js&#34; src=&#34;https://framesjs.org/og.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚡️ Local frames debugger&lt;/li&gt; &#xA; &lt;li&gt;🥳 Write Frames using React&lt;/li&gt; &#xA; &lt;li&gt;🔋 Batteries included framework&lt;/li&gt; &#xA; &lt;li&gt;🌴 Tree-shakeable &amp;amp; Lightweight&lt;/li&gt; &#xA; &lt;li&gt;🚀 Library with all the functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://framesjs.org&#34;&gt;Look at our documentation&lt;/a&gt; to learn more about frames.js.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install frames.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add frames.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h2&gt;Start with frames.js in Next.js in two copy-pastes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// ./app/page.tsx&#xA;&#xA;import {&#xA;  FrameContainer,&#xA;  FrameImage,&#xA;  FrameButton,&#xA;  useFramesReducer,&#xA;  getPreviousFrame,&#xA;  validateActionSignature,&#xA;  FrameInput,&#xA;} from &#34;frames.js/next/server&#34;;&#xA;&#xA;const reducer = (state, action) =&amp;gt; ({ count: state.count + 1 });&#xA;&#xA;export default async function Home(props) {&#xA;  const previousFrame = getPreviousFrame(props.searchParams);&#xA;  await validateActionSignature(previousFrame.postBody);&#xA;  const [state, dispatch] = useFramesReducer(&#xA;    reducer,&#xA;    { count: 0 },&#xA;    previousFrame&#xA;  );&#xA;&#xA;  return (&#xA;    &amp;lt;FrameContainer&#xA;      postUrl=&#34;/frames&#34;&#xA;      state={state}&#xA;      previousFrame={previousFrame}&#xA;    &amp;gt;&#xA;      &amp;lt;FrameImage src=&#34;https://picsum.photos/seed/frames.js/1146/600&#34; /&amp;gt;&#xA;      &amp;lt;FrameButton onClick={dispatch}&amp;gt;{state.count}&amp;lt;/FrameButton&amp;gt;&#xA;    &amp;lt;/FrameContainer&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// ./app/frames/route.ts&#xA;&#xA;export { POST } from &#34;frames.js/next/server&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatively, &lt;a href=&#34;https://github.com/framesjs/frames.js/tree/main/examples/framesjs-starter&#34;&gt;Fork our boilerplate&lt;/a&gt; that includes local debugging&lt;/h2&gt; &#xA;&lt;h2&gt;Local fully interactive Debugger &amp;amp; Frame validation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/framesjs/frames.js/main/debugging.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or use the &lt;a href=&#34;https://debugger.framesjs.org/debug&#34;&gt;hosted Frames debugger&lt;/a&gt;. Running locally has the benefits of it working with localhost.&lt;/p&gt; &#xA;&lt;h2&gt;Prefer to not use JSX?&lt;/h2&gt; &#xA;&lt;h3&gt;Use frames.js in Next.js using helper functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// page that renders a frame&#xA;// ./app/page.tsx&#xA;&#xA;import { Frame, getFrameFlattened } from &#34;frames.js&#34;;&#xA;import type { Metadata } from &#34;next&#34;;&#xA;&#xA;// Declare the frame&#xA;const initialFrame: Frame = {&#xA;  image: &#34;https://picsum.photos/seed/frames.js/1146/600&#34;,&#xA;  version: &#34;vNext&#34;,&#xA;  buttons: [&#xA;    {&#xA;      label: &#34;Random image&#34;,&#xA;    },&#xA;  ],&#xA;  postUrl: `${process.env.NEXT_PUBLIC_HOST}/frames`,&#xA;};&#xA;&#xA;// Export Next.js metadata&#xA;export const metadata: Metadata = {&#xA;  title: &#34;Random Image Frame&#34;,&#xA;  description: &#34;This is an example of a simple frame using frames.js&#34;,&#xA;  openGraph: {&#xA;    images: [&#xA;      {&#xA;        url: &#34;https://picsum.photos/seed/frames.js/600&#34;,&#xA;      },&#xA;    ],&#xA;  },&#xA;  other: getFrameFlattened(initialFrame),&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// handle frame actions&#xA;// ./app/frames/route.ts&#xA;&#xA;import { getFrameHtml, validateFrameMessage } from &#34;frames.js&#34;;&#xA;import { NextRequest } from &#34;next/server&#34;;&#xA;&#xA;export async function POST(request: NextRequest) {&#xA;  const body = await request.json();&#xA;&#xA;  // Parse and validate the frame message&#xA;  const { isValid, message } = await validateFrameMessage(body);&#xA;  if (!isValid || !message) {&#xA;    return new Response(&#34;Invalid message&#34;, { status: 400 });&#xA;  }&#xA;&#xA;  const randomInt = Math.floor(Math.random() * 100);&#xA;  const imageUrlBase = `https://picsum.photos/seed/${randomInt}`;&#xA;&#xA;  // Use the frame message to build the frame&#xA;  const frame = {&#xA;    version: &#34;vNext&#34;,&#xA;    image: `${imageUrlBase}/1146/600`,&#xA;    buttons: [&#xA;      {&#xA;        label: `Next (pressed by ${message.data.fid})`,&#xA;      },&#xA;    ],&#xA;    ogImage: `${imageUrlBase}/600`,&#xA;    postUrl: `${process.env.NEXT_PUBLIC_HOST}/frames`,&#xA;  };&#xA;&#xA;  // Return the frame as HTML&#xA;  const html = getFrameHtml(frame);&#xA;&#xA;  return new Response(html, {&#xA;    headers: {&#xA;      &#34;Content-Type&#34;: &#34;text/html&#34;,&#xA;    },&#xA;    status: 200,&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under an MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/framesjs/frames.js/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Check out the following places for more Frames-related content:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://warpcast.com/frames-dev&#34;&gt;/frames-dev&lt;/a&gt; channel on Farcaster to ask questions&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://warpcast.com/frames&#34;&gt;Frames.js&lt;/a&gt; &amp;amp; team (&lt;a href=&#34;https://warpcast.com/df&#34;&gt;@df&lt;/a&gt; and &lt;a href=&#34;https://warpcast.com/stephancill&#34;&gt;@stephancill&lt;/a&gt;) on Farcaster for updates&lt;/li&gt; &#xA; &lt;li&gt;Star &lt;a href=&#34;https://github.com/framesjs/frames.js&#34;&gt;frames.js&lt;/a&gt; on GitHub to show your support and keep track of updates&lt;/li&gt; &#xA; &lt;li&gt;Browse the &lt;a href=&#34;https://github.com/davidfurlong/awesome-frames&#34;&gt;awesome-frames&lt;/a&gt; list of awesome Frames projects and resources&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>panva/jose</title>
    <updated>2024-02-07T01:41:05Z</updated>
    <id>tag:github.com,2024-02-07:/panva/jose</id>
    <link href="https://github.com/panva/jose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JWA, JWS, JWE, JWT, JWK, JWKS for Node.js, Browser, Cloudflare Workers, Deno, Bun, and other Web-interoperable runtimes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jose&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;jose&lt;/code&gt; is JavaScript module for JSON Object Signing and Encryption, providing support for JSON Web Tokens (JWT), JSON Web Signature (JWS), JSON Web Encryption (JWE), JSON Web Key (JWK), JSON Web Key Set (JWKS), and more. The module is designed to work across various Web-interoperable runtimes including Node.js, browsers, Cloudflare Workers, Deno, Bun, and others.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/sponsors/panva&#34;&gt;💗 Help the project&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support from the community to continue maintaining and improving this module is welcome. If you find the module useful, please consider supporting the project by &lt;a href=&#34;https://github.com/sponsors/panva&#34;&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies: 0&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;jose&lt;/code&gt; has no dependencies and it exports tree-shakeable ESM. CJS is also supported.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;jose&lt;/code&gt; is distributed via &lt;a href=&#34;https://www.npmjs.com/package/jose&#34;&gt;npmjs.com&lt;/a&gt;, &lt;a href=&#34;https://deno.land/x/jose&#34;&gt;deno.land/x&lt;/a&gt;, &lt;a href=&#34;https://cdnjs.com/libraries/jose&#34;&gt;cdnjs.com&lt;/a&gt;, &lt;a href=&#34;https://www.jsdelivr.com/package/npm/jose&#34;&gt;jsdelivr.com&lt;/a&gt;, and &lt;a href=&#34;https://github.com/panva/jose&#34;&gt;github.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;example&lt;/code&gt;&lt;/strong&gt; ESM import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import * as jose from &#39;jose&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;example&lt;/code&gt;&lt;/strong&gt; CJS require&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const jose = require(&#39;jose&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON Web Tokens (JWT)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;jose&lt;/code&gt; module supports JSON Web Tokens (JWT) and provides functionality for signing and verifying tokens, as well as their JWT Claims Set validation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwt_verify.jwtVerify.md&#34;&gt;JWT Claims Set Validation &amp;amp; Signature Verification&lt;/a&gt; using the &lt;code&gt;jwtVerify&lt;/code&gt; function &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwks_remote.createRemoteJWKSet.md&#34;&gt;Using a remote JSON Web Key Set (JWKS)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwks_local.createLocalJWKSet.md&#34;&gt;Using a local JSON Web Key Set (JWKS)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jwt_sign.SignJWT.md&#34;&gt;Signing&lt;/a&gt; using the &lt;code&gt;SignJWT&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;Utility functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/util_decode_protected_header.decodeProtectedHeader.md&#34;&gt;Decoding Token&#39;s Protected Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/util_decode_jwt.decodeJwt.md&#34;&gt;Decoding JWT Claims Set&lt;/a&gt; prior to its validation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Encrypted JSON Web Tokens&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;jose&lt;/code&gt; module supports encrypted JSON Web Tokens and provides functionality for encrypting and decrypting tokens, as well as their JWT Claims Set validation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwt_decrypt.jwtDecrypt.md&#34;&gt;Decryption &amp;amp; JWT Claims Set Validation&lt;/a&gt; using the &lt;code&gt;jwtDecrypt&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jwt_encrypt.EncryptJWT.md&#34;&gt;Encryption&lt;/a&gt; using the &lt;code&gt;EncryptJWT&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;Utility functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/util_decode_protected_header.decodeProtectedHeader.md&#34;&gt;Decoding Token&#39;s Protected Header&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key Utilities&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;jose&lt;/code&gt; module supports importing, exporting, and generating keys and secrets in various formats, including PEM formats like SPKI, X.509 certificate, and PKCS #8, as well as JSON Web Key (JWK).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key Import Functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_import.importJWK.md&#34;&gt;JWK Import&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_import.importSPKI.md&#34;&gt;Public Key Import (SPKI)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_import.importX509.md&#34;&gt;Public Key Import (X.509 Certificate)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_import.importPKCS8.md&#34;&gt;Private Key Import (PKCS #8)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Key and Secret Generation Functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_generate_key_pair.generateKeyPair.md&#34;&gt;Asymmetric Key Pair Generation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_generate_secret.generateSecret.md&#34;&gt;Symmetric Secret Generation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Key Export Functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_export.exportJWK.md&#34;&gt;JWK Export&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_export.exportPKCS8.md&#34;&gt;Private Key Export&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/key_export.exportSPKI.md&#34;&gt;Public Key Export&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JSON Web Signature (JWS)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;jose&lt;/code&gt; module supports signing and verification of JWS messages with arbitrary payloads in Compact, Flattened JSON, and General JSON serialization syntaxes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Signing - &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jws_compact_sign.CompactSign.md&#34;&gt;Compact&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jws_flattened_sign.FlattenedSign.md&#34;&gt;Flattened JSON&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jws_general_sign.GeneralSign.md&#34;&gt;General JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Verification - &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jws_compact_verify.compactVerify.md&#34;&gt;Compact&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jws_flattened_verify.flattenedVerify.md&#34;&gt;Flattened JSON&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jws_general_verify.generalVerify.md&#34;&gt;General JSON&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwks_remote.createRemoteJWKSet.md&#34;&gt;Using a remote JSON Web Key Set (JWKS)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwks_local.createLocalJWKSet.md&#34;&gt;Using a local JSON Web Key Set (JWKS)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Utility functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/util_decode_protected_header.decodeProtectedHeader.md&#34;&gt;Decoding Token&#39;s Protected Header&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JSON Web Encryption (JWE)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;jose&lt;/code&gt; module supports encryption and decryption of JWE messages with arbitrary plaintext in Compact, Flattened JSON, and General JSON serialization syntaxes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encryption - &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jwe_compact_encrypt.CompactEncrypt.md&#34;&gt;Compact&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jwe_flattened_encrypt.FlattenedEncrypt.md&#34;&gt;Flattened JSON&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jwe_general_encrypt.GeneralEncrypt.md&#34;&gt;General JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Decryption - &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwe_compact_decrypt.compactDecrypt.md&#34;&gt;Compact&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwe_flattened_decrypt.flattenedDecrypt.md&#34;&gt;Flattened JSON&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwe_general_decrypt.generalDecrypt.md&#34;&gt;General JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Utility functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/util_decode_protected_header.decodeProtectedHeader.md&#34;&gt;Decoding Token&#39;s Protected Header&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;The following are additional features and utilities provided by the &lt;code&gt;jose&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwk_thumbprint.calculateJwkThumbprint.md&#34;&gt;Calculating JWK Thumbprint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwk_thumbprint.calculateJwkThumbprintUri.md&#34;&gt;Calculating JWK Thumbprint URI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/functions/jwk_embedded.EmbeddedJWK.md&#34;&gt;Verification using a JWK Embedded in a JWS Header&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/classes/jwt_unsecured.UnsecuredJWT.md&#34;&gt;Unsecured JWT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/panva/jose/main/docs/modules/util_errors.md&#34;&gt;JOSE Errors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implemented specifications&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;jose&lt;/code&gt; module implements the following specifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSON Web Signature (JWS) - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7515&#34;&gt;RFC7515&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON Web Encryption (JWE) - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7516&#34;&gt;RFC7516&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON Web Key (JWK) - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7517&#34;&gt;RFC7517&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON Web Algorithms (JWA) - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7518&#34;&gt;RFC7518&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON Web Token (JWT) - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7519&#34;&gt;RFC7519&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON Web Key Thumbprint - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7638&#34;&gt;RFC7638&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON Web Key Thumbprint URI - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc9278&#34;&gt;RFC9278&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JWS Unencoded Payload Option - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7797&#34;&gt;RFC7797&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CFRG Elliptic Curve ECDH and Signatures - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc8037&#34;&gt;RFC8037&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;secp256k1 EC Key curve support - &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc8812&#34;&gt;RFC8812&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The algorithm implementations have been tested using test vectors from their respective specifications as well as &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7520&#34;&gt;RFC7520&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Runtimes&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;jose&lt;/code&gt; module is compatible with JavaScript runtimes that support the utilized Web API globals and standard built-in objects or are Node.js.&lt;/p&gt; &#xA;&lt;p&gt;The following runtimes are supported &lt;em&gt;(this is not an exhaustive list)&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panva/jose/issues/471&#34;&gt;Bun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panva/jose/issues/263&#34;&gt;Browsers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panva/jose/issues/265&#34;&gt;Cloudflare Workers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panva/jose/issues/266&#34;&gt;Deno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panva/jose/issues/264&#34;&gt;Electron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panva/jose/issues/262&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panva/jose/issues/301&#34;&gt;Vercel&#39;s Edge Runtime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that certain algorithms may not be available depending on the runtime used. You can find a list of available algorithms for each runtime in the specific issue links provided above.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Security Fixes 🔑&lt;/th&gt; &#xA;   &lt;th&gt;Other Bug Fixes 🐞&lt;/th&gt; &#xA;   &lt;th&gt;New Features ⭐&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/panva/jose/tree/v5.x&#34;&gt;v5.x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/panva/jose/tree/v4.x&#34;&gt;v4.x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/panva/jose/tree/v2.x&#34;&gt;v2.x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>