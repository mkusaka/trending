<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-24T01:46:10Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Dogtiti/AutoGPT-Next-Web</title>
    <updated>2023-04-24T01:46:10Z</updated>
    <id>tag:github.com,2023-04-24:/Dogtiti/AutoGPT-Next-Web</id>
    <link href="https://github.com/Dogtiti/AutoGPT-Next-Web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü§ñ Assemble, configure, and deploy autonomous AI Agents in your browser.‰∏ÄÈîÆÂÖçË¥πÈÉ®ÁΩ≤‰Ω†ÁöÑÁßÅ‰∫∫AutoGPT ÁΩëÈ°µÂ∫îÁî®&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;AutoGPT-Next-Web&lt;/h1&gt; &#xA; &lt;p&gt;English / &lt;a href=&#34;https://raw.githubusercontent.com/Dogtiti/AutoGPT-Next-Web/main/README_CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;One-Click to deploy well-designed AutoGPT-Next-Web web UI on Vercel.&lt;/p&gt; &#xA; &lt;p&gt;‰∏ÄÈîÆÂÖçË¥πÈÉ®ÁΩ≤‰Ω†ÁöÑÁßÅ‰∫∫ AutoGPT-Next-Web ÁΩëÈ°µÂ∫îÁî®„ÄÇ&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://auto-agentgpt.com/&#34;&gt;Demo&lt;/a&gt; / &lt;a href=&#34;https://github.com/Dogtiti/AutoGPT-Next-Web/issues&#34;&gt;Issues&lt;/a&gt; / &lt;a href=&#34;https://discord.gg/Xnsbhg6Uvd&#34;&gt;Join Discord&lt;/a&gt; / &lt;a href=&#34;https://www.buymeacoffee.com/elricliu&#34;&gt;Buy Me a Coffee&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://auto-agentgpt.com/&#34;&gt;ÊºîÁ§∫&lt;/a&gt; / &lt;a href=&#34;https://github.com/Dogtiti/AutoGPT-Next-Web/issues&#34;&gt;ÂèçÈ¶à&lt;/a&gt; / &lt;a href=&#34;https://user-images.githubusercontent.com/38354472/232797111-d34a81b0-2739-4251-82b6-6093dc0eb0b6.png&#34;&gt;QQ Áæ§&lt;/a&gt; / &lt;a href=&#34;https://user-images.githubusercontent.com/38354472/232797309-9348f3a6-1dd7-422a-ad01-935247b1970e.png&#34;&gt;ÂæÆ‰ø°&lt;/a&gt; / &lt;a href=&#34;https://user-images.githubusercontent.com/38354472/232797482-c42222ff-74f9-4519-ba6f-752288dbe262.png&#34;&gt;Áü•ËØÜÊòüÁêÉ&lt;/a&gt; / &lt;a href=&#34;https://user-images.githubusercontent.com/38354472/232796654-c749602b-c1d4-402b-8c31-e7c013b7a42d.png&#34;&gt;ÊâìËµèÂºÄÂèëËÄÖ&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FDogtiti%2FAutoGPT-Next-Web&amp;amp;env=NEXTAUTH_URL&amp;amp;env=NEXTAUTH_SECRET&amp;amp;env=OPENAI_API_KEY&amp;amp;env=DATABASE_URL&amp;amp;project-name=autogpt-next-web&amp;amp;repository-name=AutoGPT-Next-Web&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dogtiti/AutoGPT-Next-Web/main/public/cover-en.png&#34; alt=&#34;cover&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Discuss with us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38354472/232792153-683125c9-33bf-492f-ac6b-fbaab8c7b46e.png&#34; alt=&#34;cover&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Free one-click deployment with Vercel in 1 minute&lt;/li&gt; &#xA; &lt;li&gt;UI designed to match AgentGPT, responsive design, and support for dark mode&lt;/li&gt; &#xA; &lt;li&gt;Extremely fast first screen loading speed&lt;/li&gt; &#xA; &lt;li&gt;Have your own domain? Even better, after binding, you can quickly access it anywhere without barriers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Setup&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to run AutoGPT-Next-Web locally is by using docker. A convenient setup script is provided to help you get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./setup.sh --docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local Development Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to develop AutoGPT-Next-Web locally, the easiest way is to use the provided setup script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./setup.sh --local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Setup&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You will need &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Nodejs +18 (LTS recommended)&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dogtiti/AutoGPT-Next-Web/fork&#34;&gt;Click here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:YOU_USER/AutoGPT-Next-Web.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd AutoGPT-Next-Web&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create a &lt;strong&gt;.env&lt;/strong&gt; file with the following content:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The environment variables must match the following &lt;a href=&#34;https://github.com/Dogtiti/AutoGPT-Next-Web/raw/main/src/env/schema.mjs&#34;&gt;schema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Deployment Environment:&#xA;NODE_ENV=development&#xA;&#xA;# Next Auth config:&#xA;# Generate a secret with `openssl rand -base64 32` or visit https://generate-secret.vercel.app/&#xA;NEXTAUTH_SECRET=changeme&#xA;NEXTAUTH_URL=http://localhost:3000&#xA;DATABASE_URL=file:./db.sqlite&#xA;&#xA;# Your open api key&#xA;OPENAI_API_KEY=changeme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Modify prisma schema to use sqlite:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./prisma/useSqlite.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This only needs to be done if you wish to use sqlite.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Ready, now run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create database migrations&#xA;npx prisma db push&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>quadratichq/quadratic</title>
    <updated>2023-04-24T01:46:10Z</updated>
    <id>tag:github.com,2023-04-24:/quadratichq/quadratic</id>
    <link href="https://github.com/quadratichq/quadratic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quadratic | Data Science Spreadsheet with Python &amp; SQL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/quadratichq/quadratic/actions/workflows/test-e2e.yml/badge.svg?sanitize=true&#34; alt=&#34;E2E Tests&#34;&gt; &lt;img src=&#34;https://github.com/quadratichq/quadratic/actions/workflows/test-python.yml/badge.svg?sanitize=true&#34; alt=&#34;Python Tests&#34;&gt; &lt;img src=&#34;https://github.com/quadratichq/quadratic/actions/workflows/test-unit.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/QuadraticHQ&#34; alt=&#34;Twitter Follow&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3479421/162037216-2fea1620-2310-4cfa-96fb-31299195e3a9.png&#34; alt=&#34;quadraticlogo4 1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3479421/162039117-02f85f2c-e382-4ed8-ac39-64efab17a144.svg?sanitize=true&#34; alt=&#34;quardatic icon small&#34;&gt; &lt;strong&gt;&lt;em&gt;The Data Science Spreadsheet&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Infinite data grid with Python, JavaScript, and SQL built-in. Data Connectors to pull in your data.&lt;/p&gt; &#xA;&lt;p&gt;Take your data and do something useful with it as quickly and easily as possible!&lt;/p&gt; &#xA;&lt;img width=&#34;1552&#34; alt=&#34;Screenshot 2023-02-24 at 2 57 36 PM&#34; src=&#34;https://user-images.githubusercontent.com/3479421/221301059-921ad96a-878e-4082-b3b9-e55a54185c5d.png&#34;&gt; &#xA;&lt;h2&gt;Online Demo&lt;/h2&gt; &#xA;&lt;p&gt;We have a hosted version of the &lt;code&gt;main&lt;/code&gt; branch available online.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Try it out! --&amp;gt; &lt;a href=&#34;https://app.quadratichq.com&#34;&gt;https://app.quadratichq.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join the conversation on our Discord channel -&amp;gt; &lt;a href=&#34;https://discord.gg/quadratic&#34;&gt;https://discord.gg/quadratic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read the documentation -&amp;gt; &lt;a href=&#34;https://docs.quadratichq.com&#34;&gt;https://docs.quadratichq.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is Quadratic?&lt;/h1&gt; &#xA;&lt;p&gt;Quadratic is a Web-based spreadsheet application that runs in the browser and as a native app (via Electron).&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to build a spreadsheet that enables you to pull your data from its source (SaaS, Database, CSV, API, etc) and then work with that data using the most popular data science tools today (Python, Pandas, SQL, JS, Excel Formulas, etc).&lt;/p&gt; &#xA;&lt;p&gt;Quadratic has no environment to configure. The grid runs entirely in the browser with no backend service. This makes our grids completely portable and very easy to share.&lt;/p&gt; &#xA;&lt;h2&gt;What can I do with Quadratic?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build dashboards&lt;/li&gt; &#xA; &lt;li&gt;Create internal tools in minutes&lt;/li&gt; &#xA; &lt;li&gt;Quickly mix data from different sources&lt;/li&gt; &#xA; &lt;li&gt;Explore your data for new insights&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h3&gt;Run Quadratic Locally&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install npm, &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;rustup&lt;/a&gt;, and &lt;a href=&#34;https://rustwasm.github.io/wasm-pack/installer/&#34;&gt;wasm-pack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rustup target add wasm32-unknown-unknown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the Rust/WASM &lt;code&gt;npm run build:wasm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Run Web &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run Electron &lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development Progress and Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Quadratic is in ALPHA. For now, we do not recommend relying on Quadratic.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WebGL Grid (pinch and zoom grid)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Open and Save files locally&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Python, Pandas Support (WASM)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Excel Formula Support (in progress)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cell Formatting (issue &lt;a href=&#34;https://github.com/quadratichq/quadratic/issues/44&#34;&gt;#44&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Undo / Redo (issue &lt;a href=&#34;https://github.com/quadratichq/quadratic/issues/42&#34;&gt;#42&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multiplayer Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Charts and Graphs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SQL Database Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; AI Auto Complete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Feature request or bug report?&lt;/strong&gt; Submit a &lt;a href=&#34;https://github.com/quadratichq/quadratic/issues/new/choose/&#34;&gt;Github Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to contribute?&lt;/strong&gt; Read our &lt;a href=&#34;https://raw.githubusercontent.com/quadratichq/quadratic/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Want to learn more about how Quadratic works? Read the &lt;a href=&#34;https://raw.githubusercontent.com/quadratichq/quadratic/main/docs/how_quadratic_works.md&#34;&gt;How Quadratic Works&lt;/a&gt; doc.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;There are more example files are in the application file menu. File &amp;gt; Open sample&lt;/p&gt; &#xA;&lt;p&gt;You can download them and then open them in Quadratic via File &amp;gt; Open Grid&lt;/p&gt; &#xA;&lt;h2&gt;Quadratic is Hiring&lt;/h2&gt; &#xA;&lt;p&gt;Check out our open roles -&amp;gt; &lt;a href=&#34;https://careers.quadratichq.com&#34;&gt;careers.quadratichq.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>partykit/partykit</title>
    <updated>2023-04-24T01:46:10Z</updated>
    <id>tag:github.com,2023-04-24:/partykit/partykit</id>
    <link href="https://github.com/partykit/partykit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Everything&#39;s better with friends.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;(All commits get published to npm with a &lt;code&gt;beta&lt;/code&gt; tag, so use that when calling &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;npx&lt;/code&gt;. Example: &lt;code&gt;npm install partykit@beta y-partykit@beta&lt;/code&gt;. Join us at our discord &lt;a href=&#34;https://discord.gg/vx4BmTfd&#34;&gt;https://discord.gg/vx4BmTfd&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;partykit&lt;/h2&gt; &#xA;&lt;p&gt;Everything&#39;s better with friends.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;partykit&lt;/code&gt; is a software development kit for building realtime collaborative applications. You can use it with your existing web applications, or build new ones from scratch.&lt;/p&gt; &#xA;&lt;p&gt;You can create a server with very little code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// server.ts&#xA;&#xA;export default {&#xA;  onConnect(websocket, room) {&#xA;    // called whenever a user join a room&#xA;    websocket.send(&#34;hello from room: &#34; + room.id);&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;npx partykit dev server.ts&lt;/code&gt; to start the server for local development. You can later deploy it to the cloud with &lt;code&gt;npx partykit deploy server.ts --name my-party&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, in your application, you can connect to this server with a simple client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// PartySocket is a small abstraction over&#xA;// WebSocket that adds reconnection logic, etc.&#xA;import PartySocket from &#34;partysocket&#34;;&#xA;&#xA;const socket = new PartySocket({&#xA;  // for local development&#xA;  host: &#34;localhost:1999&#34;,&#xA;  // for production&#xA;  // host: &#34;my-party.username.partykit.dev&#34;,&#xA;  room: &#34;my-room&#34;,&#xA;});&#xA;&#xA;socket.on(&#34;message&#34;, (message) =&amp;gt; {&#xA;  console.log(message); // &#34;hello from room: my-room&#34;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, you can add realtime collaboration to your existing web application with very little code. It runs alongside your existing application, and you can use it to build realtime features like collaborative text editors, multiplayer games, and more.&lt;/p&gt; &#xA;&lt;h3&gt;y-partykit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://yjs.dev&#34;&gt;Yjs&lt;/a&gt; is a library of data structures for building collaborative applications. &lt;code&gt;y-partykit&lt;/code&gt; is a library that makes it easy to host backends for &lt;a href=&#34;https://yjs.dev&#34;&gt;Yjs&lt;/a&gt; on partykit. You can create a yjs backend with as little code as this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// server.ts&#xA;import { onConnect } from &#34;y-partykit&#34;;&#xA;&#xA;export default { onConnect };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can use the provider to connect to this server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import YPartyKitProvider from &#34;y-partykit/provider&#34;;&#xA;&#xA;const provider = new YPartyKitProvider(&#34;localhost:1999&#34;, &#34;my-room&#34;, doc);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Have a look at &lt;a href=&#34;https://docs.yjs.dev/ecosystem/editor-bindings&#34;&gt;the official documentation&lt;/a&gt;, their examples should just work with y-partykit (replacing &lt;code&gt;y-websocket&lt;/code&gt; with &lt;code&gt;y-partykit/provider&lt;/code&gt; like above)&lt;/p&gt; &#xA;&lt;h3&gt;party.io&lt;/h3&gt; &#xA;&lt;p&gt;(NB: THIS DOES NOT EXIST YET)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;party.io&lt;/code&gt; is a library heavily influenced by &lt;a href=&#34;https://socket.io&#34;&gt;socket.io&lt;/a&gt;. It&#39;s an abstraction over &lt;code&gt;partysocket&lt;/code&gt; that makes it easy to build realtime applications. You might use it on the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import Party from &#34;party.io&#34;;&#xA;&#xA;const io = new Party({&#xA;  // for local development&#xA;  host: &#34;localhost:1999&#34;,&#xA;  // for production&#xA;  // host: &#34;my-party.username.partykit.dev&#34;,&#xA;});&#xA;&#xA;const socket = io.join(&#34;my-room&#34;);&#xA;&#xA;socket.emit(&#34;hello&#34;, &#34;world&#34;); // named events&#xA;&#xA;socket.emit(&#34;hello&#34;, { nested: { object: &#34;world&#34; } }, [&#34;some&#34;, &#34;array&#34;]); // nested objects and arrays&#xA;&#xA;socket.emit(&#34;hello&#34;, [1, 2, 3], (...args) =&amp;gt; {&#xA;  // callbacks&#xA;});&#xA;&#xA;socket.on(&#34;hello&#34;, (arg1, arg2, callback) =&amp;gt; {&#xA;  // subscribe to events&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And on the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { onConnect } from &#34;party.io&#34;;&#xA;&#xA;export default {&#xA;  onConnect(ws, room) {&#xA;    onConnect(ws, room, (socket) =&amp;gt; {&#xA;      socket.on(&#34;hello&#34;, (arg1, arg2, callback) =&amp;gt; {&#xA;        // subscribe to events&#xA;      });&#xA;&#xA;      socket.emit(&#34;hello&#34;, &#34;world&#34;); // named events&#xA;      // ...and so on&#xA;    });&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>