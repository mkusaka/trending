<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:34:48Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>github-early-access/generate-build-provenance</title>
    <updated>2024-05-05T01:34:48Z</updated>
    <id>tag:github.com,2024-05-05:/github-early-access/generate-build-provenance</id>
    <link href="https://github.com/github-early-access/generate-build-provenance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Publish a signed build provenance from your GitHub Actions workflow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;generate-build-provenance&lt;/h1&gt; &#xA;&lt;p&gt;GitHub Action to create, sign and upload a build provenance attestation for artifacts built as part of a workflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This action has been deprecated in favor of &lt;a href=&#34;https://github.com/actions/attest-build-provenance&#34;&gt;&lt;code&gt;actions/attest-build-provenance&lt;/code&gt;&lt;/a&gt;. All users are encouraged to move to the new action -- this repository will not receive further updates and may be removed at some point.&lt;/p&gt; &#xA;&lt;p&gt;The inputs to the &lt;code&gt;attest-build-provenance&lt;/code&gt; action are identical to &lt;code&gt;generate-build-provenance&lt;/code&gt;, so migrating to the new version is as simple as updating the &lt;code&gt;uses:&lt;/code&gt; value in your workflows to reference the new name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;github-early-access/generate-build-provenance@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;actions/attest-build-provenance@v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attestations generated with the new action use a newer version of the Sigstore &lt;a href=&#34;https://github.com/sigstore/protobuf-specs/raw/main/protos/sigstore_bundle.proto&#34;&gt;bundle format&lt;/a&gt; (v0.3.1 vs v0.2.1) and require version &lt;a href=&#34;https://github.com/cli/cli/releases/tag/v2.49.0&#34;&gt;2.49.0&lt;/a&gt; or later of the &lt;code&gt;gh&lt;/code&gt; CLI to verify.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Within the GitHub Actions workflow which builds some artifact you would like to attest,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure that the following permissions are set:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;permissions:&#xA;  id-token: write&#xA;  attestations: write&#xA;  contents: read # optional, usually required&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;id-token&lt;/code&gt; permission gives the action the ability to mint the OIDC token necessary to request a Sigstore signing certificate. The &lt;code&gt;attestations&lt;/code&gt; permission is necessary to persist the attestation.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The set of required permissions will be refined in a future release.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After your artifact build step, add the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: github-early-access/generate-build-provenance@main&#xA;  with:&#xA;    subject-path: &#39;${{ github.workspace }}/PATH_TO_FILE&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;subject-path&lt;/code&gt; parameter should identity the artifact for which you want to generate an attestation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;What is being attested?&lt;/h3&gt; &#xA;&lt;p&gt;The generated attestation is a &lt;a href=&#34;https://slsa.dev/spec/v1.0/provenance&#34;&gt;SLSA provenance&lt;/a&gt; document which captures non-falsifiable information about the GitHub Actions run in which the subject artifact was created:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;_type&#34;: &#34;https://in-toto.io/Statement/v1&#34;,&#xA;  &#34;subject&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;some-app&#34;,&#xA;      &#34;digest&#34;: {&#xA;        &#34;sha256&#34;: &#34;7d070f6b64d9bcc530fe99cc21eaaa4b3c364e0b2d367d7735671fa202a03b32&#34;&#xA;      }&#xA;    }&#xA;  ],&#xA;  &#34;predicateType&#34;: &#34;https://slsa.dev/provenance/v1&#34;,&#xA;  &#34;predicate&#34;: {&#xA;    &#34;buildDefinition&#34;: {&#xA;      &#34;buildType&#34;: &#34;https://slsa-framework.github.io/github-actions-buildtypes/workflow/v1&#34;,&#xA;      &#34;externalParameters&#34;: {&#xA;        &#34;workflow&#34;: {&#xA;          &#34;ref&#34;: &#34;refs/heads/main&#34;,&#xA;          &#34;repository&#34;: &#34;https://github.com/user/app&#34;,&#xA;          &#34;path&#34;: &#34;.github/workflows/build.yml&#34;&#xA;        }&#xA;      },&#xA;      &#34;internalParameters&#34;: {&#xA;        &#34;github&#34;: {&#xA;          &#34;event_name&#34;: &#34;push&#34;,&#xA;          &#34;repository_id&#34;: &#34;706279790&#34;,&#xA;          &#34;repository_owner_id&#34;: &#34;19792534&#34;&#xA;        }&#xA;      },&#xA;      &#34;resolvedDependencies&#34;: [&#xA;        {&#xA;          &#34;uri&#34;: &#34;git+https://github.com/user/app@refs/heads/main&#34;,&#xA;          &#34;digest&#34;: {&#xA;            &#34;gitCommit&#34;: &#34;c607ef44660b66df4d10b0dd6b01f56ec98f293f&#34;&#xA;          }&#xA;        }&#xA;      ]&#xA;    },&#xA;    &#34;runDetails&#34;: {&#xA;      &#34;builder&#34;: {&#xA;        &#34;id&#34;: &#34;https://github.com/actions/runner/github-hosted&#34;&#xA;      },&#xA;      &#34;metadata&#34;: {&#xA;        &#34;invocationId&#34;: &#34;https://github.com/user/app/actions/runs/1880241037/attempts/1&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The provenance statement is signed with a short-lived, &lt;a href=&#34;https://www.sigstore.dev/&#34;&gt;Sigstore&lt;/a&gt;-issued certificate.&lt;/p&gt; &#xA;&lt;p&gt;If the repository initiating the GitHub Actions workflow is public, the public instance of Sigstore will be used to generate the attestation signature. If the repository is private, it will use the GitHub private Sigstore instance.&lt;/p&gt; &#xA;&lt;h3&gt;Where does the attestation go?&lt;/h3&gt; &#xA;&lt;p&gt;On the actions summary page for a repository you&#39;ll see an &#34;Attestations&#34; link which will take you to a list of all the attestations generated by workflows in that repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/github-early-access/generate-build-provenance/main/.github/attestations.png&#34; alt=&#34;Actions summary view&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How are attestations verified?&lt;/h3&gt; &#xA;&lt;p&gt;Attestations can be verified using the &lt;a href=&#34;https://github.com/github-early-access/gh-attestation&#34;&gt;gh-attestation&lt;/a&gt; extension for the &lt;a href=&#34;https://cli.github.com/&#34;&gt;GitHub CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/github-early-access/generate-build-provenance/main/action.yml&#34;&gt;action.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Inputs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;subject-path&lt;/code&gt; - Path to the artifact for which the provenance will be generated.&lt;/p&gt; &lt;p&gt;Must specify exactly one of &lt;code&gt;subject-path&lt;/code&gt; or &lt;code&gt;subject-digest&lt;/code&gt;. Wildcards can be used to identify more than one artifact.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;subject-digest&lt;/code&gt; - Digest of the subject for which the provenance will be generated.&lt;/p&gt; &lt;p&gt;Only SHA-256 digests are accepted and the supplied value must be in the form &#34;sha256:&amp;lt;hex-encoded-digest&amp;gt;&#34;. Must specify exactly one of &lt;code&gt;subject-path&lt;/code&gt; or &lt;code&gt;subject-digest&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;subject-name&lt;/code&gt; - Subject name as it should appear in the provenance statement.&lt;/p&gt; &lt;p&gt;Required when the subject is identified by the &lt;code&gt;subject-digest&lt;/code&gt; parameter. When attesting container images, the name should be the fully qualified image name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;push-to-registry&lt;/code&gt; - If true, the signed attestation is pushed to the container registry identified by the &lt;code&gt;subject-name&lt;/code&gt;. Default: &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;github-token&lt;/code&gt; - Token used to make authenticated requests to the GitHub API. Default: &lt;code&gt;${{ github.token }}&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The supplied token must have the permissions necessary to write attestations to the repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Outputs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bundle&lt;/code&gt; - The JSON-serialized &lt;a href=&#34;https://github.com/sigstore/protobuf-specs/raw/main/protos/sigstore_bundle.proto&#34;&gt;Sigstore bundle&lt;/a&gt; containing the attestation and related verification material.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample Workflows&lt;/h2&gt; &#xA;&lt;h3&gt;Identify Artifact by Path&lt;/h3&gt; &#xA;&lt;p&gt;For the basic use case, simply add the &lt;code&gt;generate-build-provenance&lt;/code&gt; action to your workflow and supply the path to the artifact for which you want to generate build provenance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build-with-provenance&#xA;&#xA;on:&#xA;  workflow_dispatch:&#xA;&#xA;jobs:&#xA;  build:&#xA;    permissions:&#xA;      id-token: write&#xA;      attestations: write&#xA;      contents: read&#xA;&#xA;    steps:&#xA;      - name: Checkout&#xA;        uses: actions/checkout@v4&#xA;      - name: Build artifact&#xA;        run: make some-app&#xA;      - name: Attest artifact&#xA;        uses: github-early-access/generate-build-provenance@main&#xA;        with:&#xA;          subject-path: &#39;${{ github.workspace }}/some-app&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Identify Artifacts by Wildcard&lt;/h3&gt; &#xA;&lt;p&gt;If you are generating multiple artifacts, you can generate build provenance for each artifact by using a wildcard in the &lt;code&gt;subject-path&lt;/code&gt; input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build-wildcard-with-provenance&#xA;&#xA;on:&#xA;  workflow_dispatch:&#xA;&#xA;jobs:&#xA;  build:&#xA;    permissions:&#xA;      id-token: write&#xA;      attestations: write&#xA;      contents: read&#xA;&#xA;    steps:&#xA;      - name: Checkout&#xA;        uses: actions/checkout@v4&#xA;      - name: Set up Go&#xA;        uses: actions/setup-go@v4&#xA;      - name: Run GoReleaser&#xA;        uses: goreleaser/goreleaser-action@v5&#xA;        with:&#xA;          distribution: goreleaser&#xA;          version: latest&#xA;          args: release --clean&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;      - name: Attest artifact&#xA;        uses: github-early-access/generate-build-provenance@main&#xA;        with:&#xA;          subject-path: &#39;dist/**/my-bin-*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For supported wildcards along with behavior and documentation, see &lt;a href=&#34;https://github.com/actions/toolkit/tree/main/packages/glob#patterns&#34;&gt;@actions/glob&lt;/a&gt; which is used internally to search for files.&lt;/p&gt; &#xA;&lt;h3&gt;Container Image&lt;/h3&gt; &#xA;&lt;p&gt;When working with container images you may not have a &lt;code&gt;subject-path&lt;/code&gt; value you can supply. In this case you can invoke the action with the &lt;code&gt;subject-name&lt;/code&gt; and &lt;code&gt;subject-digest&lt;/code&gt; inputs.&lt;/p&gt; &#xA;&lt;p&gt;If you want to publish the attestation to the container registry with the &lt;code&gt;push-to-registry&lt;/code&gt; option, it is important that the &lt;code&gt;subject-name&lt;/code&gt; specify the fully-qualified image name (e.g. &#34;ghcr.io/user/app&#34; or &#34;acme.azurecr.io/user/app&#34;). Do NOT include a tag as part of the image name -- the specific image being attested is identified by the supplied digest.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: When pushing to Docker Hub, please use &#34;index.docker.io&#34; as the registry portion of the image name.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build-image-with-provenance&#xA;&#xA;on:&#xA;  push:&#xA;    branches: [main]&#xA;&#xA;jobs:&#xA;  build:&#xA;    runs-on: ubuntu-latest&#xA;    permissions:&#xA;      id-token: write&#xA;      packages: write&#xA;      attestations: write&#xA;      contents: read&#xA;    env:&#xA;      REGISTRY: ghcr.io&#xA;      IMAGE_NAME: ${{ github.repository }}&#xA;&#xA;    steps:&#xA;      - name: Checkout&#xA;        uses: actions/checkout@v4&#xA;      - name: Login to GitHub Container Registry&#xA;        uses: docker/login-action@v3&#xA;        with:&#xA;          registry: ${{ env.REGISTRY }}&#xA;          username: ${{ github.actor }}&#xA;          password: ${{ secrets.GITHUB_TOKEN }}&#xA;      - name: Build and push image&#xA;        id: push&#xA;        uses: docker/build-push-action@v5.0.0&#xA;        with:&#xA;          context: .&#xA;          push: true&#xA;          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest&#xA;      - name: Attest image&#xA;        uses: github-early-access/generate-build-provenance@main&#xA;        with:&#xA;          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}&#xA;          subject-digest: ${{ steps.push.outputs.digest }}&#xA;          push-to-registry: true&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tailwindlabs/tailwindcss</title>
    <updated>2024-05-05T01:34:48Z</updated>
    <id>tag:github.com,2024-05-05:/tailwindlabs/tailwindcss</id>
    <link href="https://github.com/tailwindlabs/tailwindcss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A utility-first CSS framework for rapid UI development.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tailwindcss.com&#34; target=&#34;_blank&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-dark.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg&#34;&gt; &#xA;   &lt;img alt=&#34;Tailwind CSS&#34; src=&#34;https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg?sanitize=true&#34; width=&#34;350&#34; height=&#34;70&#34; style=&#34;max-width: 100%;&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A utility-first CSS framework for rapidly building custom user interfaces. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/tailwindlabs/tailwindcss/ci.yml?branch=next&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/tailwindcss&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/tailwindcss.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/tailwindcss.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/tailwindcss.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For full documentation, visit &lt;a href=&#34;https://tailwindcss.com&#34;&gt;tailwindcss.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;For help, discussion about best practices, or any other conversation that would benefit from being searchable:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/discussions&#34;&gt;Discuss Tailwind CSS on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For chatting with others using the framework:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/7NF8GNe&#34;&gt;Join the Tailwind CSS Discord Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing to Tailwind CSS, please read our &lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/raw/next/.github/CONTRIBUTING.md&#34;&gt;contributing docs&lt;/a&gt; &lt;strong&gt;before submitting a pull request&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lmstudio-ai/lms</title>
    <updated>2024-05-05T01:34:48Z</updated>
    <id>tag:github.com,2024-05-05:/lmstudio-ai/lms</id>
    <link href="https://github.com/lmstudio-ai/lms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LM Studio in your terminal&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://files.lmstudio.ai/lms-dark.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://files.lmstudio.ai/lms-light.png&#34;&gt; &#xA;  &lt;img alt=&#34;lmstudio cli logo&#34; src=&#34;https://files.lmstudio.ai/lms-light.png&#34; width=&#34;180&#34;&gt; &#xA; &lt;/picture&gt; &lt;br&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&#xA; &lt;bold&gt;&#xA;  &lt;code&gt;lms&lt;/code&gt; - Command Line Tool for &#xA;  &lt;a href=&#34;https://lmstudio.ai/&#34;&gt;LM Studio&lt;/a&gt;&#xA; &lt;/bold&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Built with &#xA; &lt;bold&gt;&#xA;  &lt;code&gt;&lt;a href=&#34;https://github.com/lmstudio-ai/lmstudio.js&#34;&gt;lmstudio.js&lt;/a&gt;&lt;/code&gt;&#xA; &lt;/bold&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;lms&lt;/code&gt; ships with &lt;a href=&#34;https://lmstudio.ai/&#34;&gt;LM Studio&lt;/a&gt; 0.2.22 and newer.&lt;/p&gt; &#xA;&lt;p&gt;To set it up, run the built-in &lt;code&gt;bootstrap&lt;/code&gt; command like so:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmd /c %USERPROFILE%/.cache/lm-studio/bin/lms.exe bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux/macOS&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;~/.cache/lm-studio/bin/lms bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To check if the bootstrapping was successful, run the following in a &lt;strong&gt;👉 new terminal window 👈&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;lms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;lms --help&lt;/code&gt; to see a list of all available subcommands.&lt;/p&gt; &#xA;&lt;p&gt;For details about each subcommand, run &lt;code&gt;lms &amp;lt;subcommand&amp;gt; --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are some frequently used commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lms status&lt;/code&gt; - To check the status of LM Studio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms server start&lt;/code&gt; - To start the local API server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms server stop&lt;/code&gt; - To stop the local API server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms ls&lt;/code&gt; - To list all downloaded models. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lms ls --detailed&lt;/code&gt; - To list all downloaded models with detailed information.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lms ls --json&lt;/code&gt; - To list all downloaded models in machine-readable JSON format.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms ps&lt;/code&gt; - To list all loaded models available for inferencing. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lms ps --json&lt;/code&gt; - To list all loaded models available for inferencing in machine-readable JSON format.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms load --gpu max&lt;/code&gt; - To load a model with maximum GPU acceleration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lms load &amp;lt;model path&amp;gt; --gpu max -y&lt;/code&gt; - To load a model with maximum GPU acceleration without confirmation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms unload &amp;lt;model identifier&amp;gt;&lt;/code&gt; - To unload a model &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lms unload --all&lt;/code&gt; - To unload all models&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms create&lt;/code&gt; - To create a new project with LM Studio SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lms log stream&lt;/code&gt; - To stream logs from LM Studio&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>