<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-22T01:39:31Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>synchronicity-labs/translation-starter</title>
    <updated>2024-02-22T01:39:31Z</updated>
    <id>tag:github.com,2024-02-22:/synchronicity-labs/translation-starter</id>
    <link href="https://github.com/synchronicity-labs/translation-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;babelfish by &lt;a href=&#34;https://synclabs.so&#34;&gt;sync.&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This repo lets you deploy an app that can translate any video into any language with perfect lip-sync using AI &lt;strong&gt;&amp;lt;15 mins&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsynchronicity-labs%2Ftranslation-starter&amp;amp;env=SYNC_LABS_API_KEY,GLADIA_API_KEY,ELEVEN_LABS_API_KEY&amp;amp;envDescription=API%20Keys%20and%20other%20environement%20variables%20required%20for%20this%20app%20to%20function%20correctly.&amp;amp;envLink=https%3A%2F%2Fgithub.com%2Fsynchronicity-labs%2Ftranslation-starter%231-initiate-deployment&amp;amp;project-name=translation-starter&amp;amp;repository-name=translation-starter&amp;amp;integration-ids=oac_VqOgBHqhEoFTPzGkPd7L0iH6,oac_H9biZULoTuJYFO32xkUydDmT&amp;amp;external-id=https%3A%2F%2Fgithub.com%2Fsynchronicity-labs%2Ftranslation-starter%2Ftree%2Fmain&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#babelfish-by-sync&#34;&gt;babelfish by sync.&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#tldr&#34;&gt;tldr&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#how-its-built&#34;&gt;How its built&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#high-level-diagram&#34;&gt;High Level Diagram&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#what-its-built-with&#34;&gt;What its built with&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#live-demo&#34;&gt;Live demo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#deploying-the-production-ready-app&#34;&gt;Deploying the production-ready app&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#1-initiate-deployment&#34;&gt;1. Initiate Deployment&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#2-configure-auth&#34;&gt;2. Configure Auth&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#3-configure-storage&#34;&gt;3. Configure Storage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#4-optional-configure-stripe&#34;&gt;4. (Optional) Configure Stripe&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#5-optional-set-up-oauth-with-github&#34;&gt;5. (Optional) Set up OAuth with Github&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#6-optional-create-aws-lambda-function-for-uploading-youtube-urls&#34;&gt;6. (Optional) Create AWS Lambda function for uploading Youtube URLs&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#running-the-nextjs-app-locally&#34;&gt;Running the NextJS app locally&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#1-clone-your-github-repository-to-your-local-machine-and-make-sure-to-use-node-version-1910-or-above&#34;&gt;1. Clone your GitHub repository to your local machine and make sure to use Node version 19.1.0 or above.&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#2-set-up-local-environment-variables&#34;&gt;2. Set up local environment variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#4-test-webhooks-using-the-stripe-cli-optional&#34;&gt;4. Test webhooks using the &lt;code&gt;Stripe CLI&lt;/code&gt; (optional)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#5-install-dependencies-and-run-the-project&#34;&gt;5. Install dependencies and run the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#how-to-contribute&#34;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#additional-resources&#34;&gt;Additional Resources&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/#common-problems&#34;&gt;Common Problems&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;tldr&lt;/h2&gt; &#xA;&lt;p&gt;launch your own video translation app w/ this repo. in &amp;lt;15 mins you can integrate video translation, voice cloning, and lip-syncing into your business / workflows.&lt;/p&gt; &#xA;&lt;h2&gt;How its built&lt;/h2&gt; &#xA;&lt;h3&gt;High Level Diagram&lt;/h3&gt; &#xA;&lt;!-- TODO: @Noah -- put in a high level diagram of the customer flow using Figjam (in Figma) --&gt; &#xA;&lt;h3&gt;What its built with&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://synclabs.so&#34;&gt;Sync Labs&lt;/a&gt; for perfectly synchronized lip movements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gladia.io/&#34;&gt;Gladia&lt;/a&gt; for transcribing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elevenlabs.io/&#34;&gt;Eleven Labs&lt;/a&gt; for voice cloning and speech synthesis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt; for web app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt; for deployment&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.io&#34;&gt;Supabase&lt;/a&gt; for db, auth and storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.inngest.com/&#34;&gt;Inngest&lt;/a&gt; for servless queues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com&#34;&gt;Stripe&lt;/a&gt; for billing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://translation-starter-khaki.vercel.app/&#34;&gt;Live demo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can access the live demo by clicking the image below, &lt;a href=&#34;https://translation-starter-khaki.vercel.app/&#34;&gt;or by clicking here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://translate.synclabs.so/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/public/demo.png&#34; alt=&#34;Screenshot of demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploying the production-ready app&lt;/h2&gt; &#xA;&lt;p&gt;To successfully deploy the template to production, execute the following steps in order:&lt;/p&gt; &#xA;&lt;h3&gt;1. Initiate Deployment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsynchronicity-labs%2Ftranslation-starter&amp;amp;env=SYNC_LABS_API_KEY,GLADIA_API_KEY,ELEVEN_LABS_API_KEY&amp;amp;envDescription=API%20Keys%20and%20other%20environement%20variables%20required%20for%20this%20app%20to%20function%20correctly.&amp;amp;envLink=https%3A%2F%2Fgithub.com%2Fsynchronicity-labs%2Ftranslation-starter%231-initiate-deployment&amp;amp;project-name=translation-starter&amp;amp;repository-name=translation-starter&amp;amp;integration-ids=oac_VqOgBHqhEoFTPzGkPd7L0iH6,oac_H9biZULoTuJYFO32xkUydDmT&amp;amp;external-id=https%3A%2F%2Fgithub.com%2Fsynchronicity-labs%2Ftranslation-starter%2Ftree%2Fmain&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clicking the Deploy button will open up a browser tab with instructions on generating a new GitHub repository from this template, creating a corrseponding project in Supabase for &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;storage&lt;/code&gt; and setting up Inngest for serverless queues. Below are the steps you&#39;ll walk through:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create Git Repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Under &lt;code&gt;Git Scope&lt;/code&gt; select the account you&#39;d like to deploy the repo to.&lt;/li&gt; &#xA;   &lt;li&gt;Under &lt;code&gt;Repository Name&lt;/code&gt; give your new repo a name.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Integrations&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://vercel.com/integrations/supabase&#34;&gt;Supabase Vercel Deploy Integration&lt;/a&gt; handles configuration of environment variables and initiates the &lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/supabase/migrations/20230530034630_init.sql&#34;&gt;SQL migrations&lt;/a&gt; to construct your database schema. You can view the resulting tables in your project&#39;s &lt;a href=&#34;https://app.supabase.com/project/_/editor&#34;&gt;Table editor&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Click &lt;code&gt;Add&lt;/code&gt; in the Supabase integration and fill out the form that pops up.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://vercel.com/integrations/inngest&#34;&gt;Inngest Vercel Integration&lt;/a&gt; handles configuration of environment variables related to Inngest.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Click &lt;code&gt;Add&lt;/code&gt; in the Inngest integration and fill out the form that pops up.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure Project&lt;/p&gt; &lt;p&gt;Enter the environment variables required for this project. Below are links to documentation on how to obtain an API key for each of the required services to ensure full functionality.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.synclabs.so/authentication&#34;&gt;Sync Labs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.gladia.io/reference/overview#getting-your-api-key&#34;&gt;Gladia&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://elevenlabs.io/docs/api-reference/authentication&#34;&gt;Eleven Labs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2. Configure Auth&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to configure your Supabase project&#39;s site URL and Vercel&#39;s &lt;code&gt;NEXT_PUBLIC_SITE_URL&lt;/code&gt; and &lt;code&gt;NEXT_PUBLIC_TRANSLATION_API&lt;/code&gt; environment variable to secure and streamline authentication.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In your Supabase project, navigate to &lt;code&gt;Authentication&lt;/code&gt; &amp;gt; &lt;a href=&#34;https://app.supabase.com/project/_/auth/url-configuration&#34;&gt;URL configuration&lt;/a&gt; and enter your production URL (for example, &lt;a href=&#34;https://your-deployment-url.vercel.app&#34;&gt;https://your-deployment-url.vercel.app&lt;/a&gt;) as the site URL.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Vercel, under your project&#39;s deployment settings, create two new Production environment variables called &lt;code&gt;NEXT_PUBLIC_SITE_URL&lt;/code&gt; and &lt;code&gt;NEXT_PUBLIC_TRANSLATION_API&lt;/code&gt; and set both to your production URL. Make sure you uncheck the options for preview and development environments to maintain the correct operation for preview branches and local development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3. Configure Storage&lt;/h3&gt; &#xA;&lt;p&gt;After that, you&#39;ll need to create a new storage bucket within your Supabase project to store video and audio files.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In your Supabase project, navigate to &lt;code&gt;Storage&lt;/code&gt; and click the &lt;code&gt;New bucket&lt;/code&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter &lt;code&gt;translation&lt;/code&gt; as the name for your new bucket and toggle &lt;code&gt;Public bucket&lt;/code&gt; to on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Still in the &lt;code&gt;Storage&lt;/code&gt; section of your Supabase project, click &lt;code&gt;Policies&lt;/code&gt; and add the below policy:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Within the section called &lt;code&gt;translation&lt;/code&gt; (the name of your bucket) click &lt;code&gt;New policy&lt;/code&gt; then &lt;code&gt;For full costumization&lt;/code&gt; and fill it in as shown below:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://translation-phi.vercel.app/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/public/supabase-translation-bucket-policy.png&#34; alt=&#34;Screenshot of translation storage bucket policy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within the section called &lt;code&gt;Other policies under storage.objects&lt;/code&gt; add the following three policies:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://translation-phi.vercel.app/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/public/supabase-storage-insert-policy.png&#34; alt=&#34;Screenshot of storage bucket insert policy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://translation-phi.vercel.app/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/public/supabase-storage-select-policy.png&#34; alt=&#34;Screenshot of storage bucket select policy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://translation-phi.vercel.app/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/public/supabase-storage-update-policy.png&#34; alt=&#34;Screenshot of storage bucket update policy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. (Optional) Configure Stripe&lt;/h3&gt; &#xA;&lt;p&gt;Next, you&#39;ll need to configure &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt; in order to handle test payments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/docs/setup/stripe.md&#34;&gt;Click here to view the instructions.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5. (Optional) Set up OAuth with Github&lt;/h3&gt; &#xA;&lt;p&gt;In order to allow users to sign up via Github, you&#39;ll need to setup OAuth with Github&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/docs/setup/oauth-with-github.md&#34;&gt;Click here to view the instructions.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6. (Optional) Create AWS Lambda function for uploading Youtube URLs&lt;/h3&gt; &#xA;&lt;p&gt;Finally, you&#39;ll need to create a Lambda function for uploading Youtube videos to Supabase Storage&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/synchronicity-labs/translation-starter/main/docs/setup/youtube-to-supabase.md&#34;&gt;Click here to view the instructions.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running the NextJS app locally&lt;/h2&gt; &#xA;&lt;p&gt;When you innevitably want to make changes to the app, you&#39;ll need to run it locally.&lt;/p&gt; &#xA;&lt;p&gt;You can deploy a second Supabase project so that you have an environment to use for local development, but this tutorial will assume you&#39;re using the Supabase project that you deployed in the top section.&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone your GitHub repository to your local machine and make sure to use Node version 19.1.0 or above.&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository however you prefer.&lt;/p&gt; &#xA;&lt;h3&gt;2. Set up local environment variables&lt;/h3&gt; &#xA;&lt;p&gt;You can initialize a &lt;code&gt;.env.local&lt;/code&gt; file by running:&lt;/p&gt; &#xA;&lt;!-- TODO @Noah: confirm this example file contains all the required variables (EMPTY) --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.local.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Test webhooks using the &lt;code&gt;Stripe CLI&lt;/code&gt; (optional)&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re setting up the app to include payments, you must run the Stripe CLI to simulate the webhook events.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://stripe.com/docs/stripe-cli&#34;&gt;Stripe CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/stripe-cli#login-account&#34;&gt;Link&lt;/a&gt; your Stripe account.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In a seperate terminal, run the below command to initiate local webhook forwarding&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stripe listen --forward-to=localhost:3000/api/webhooks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Running this Stripe command will print a webhook secret (&lt;code&gt;whsec_***&lt;/code&gt;), to the console.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; -- Set &lt;code&gt;STRIPE_WEBHOOK_SECRET&lt;/code&gt; to this value in your &lt;code&gt;.env.local&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;5. Install dependencies and run the project&lt;/h3&gt; &#xA;&lt;p&gt;In a separate terminal, navigate to your project&#39;s root directory and run the following commands to install dependencies and start the dev server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your web browser and visit &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view your application.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How to Contribute&lt;/h3&gt; &#xA;&lt;p&gt;We embrace the collaborative spirit of the open-source community.&lt;/p&gt; &#xA;&lt;p&gt;To suggest enhancements or submit changes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch from &lt;code&gt;dev&lt;/code&gt; for your changes.&lt;/li&gt; &#xA; &lt;li&gt;Commit your updates and push to your fork.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request back to the &lt;code&gt;dev&lt;/code&gt; branch of the original repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Your contributions are highly appreciated!&lt;/p&gt; &#xA;&lt;h3&gt;Additional Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sync Labs &lt;a href=&#34;https://syncbetatesters.slack.com/ssb/redirect#/shared-invite/email&#34;&gt;Slack Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sync Labs &lt;a href=&#34;https://docs.synclabs.so/&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Translation AI is released under the &lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Common Problems&lt;/h3&gt; &#xA;&lt;p&gt;If you run into &lt;strong&gt;any issues&lt;/strong&gt;, please contact us in the &lt;code&gt;#translation-app&lt;/code&gt; channel in our Slack (click here to quickly join the channel).&lt;/p&gt; &#xA;&lt;p&gt;You can also submit an issue to this repo.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rocketseat-education/react-na-pratica-01</title>
    <updated>2024-02-22T01:39:31Z</updated>
    <id>tag:github.com,2024-02-22:/rocketseat-education/react-na-pratica-01</id>
    <link href="https://github.com/rocketseat-education/react-na-pratica-01" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>formkit/tempo</title>
    <updated>2024-02-22T01:39:31Z</updated>
    <id>tag:github.com,2024-02-22:/formkit/tempo</id>
    <link href="https://github.com/formkit/tempo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📆 Parse, format, manipulate, and internationalize dates and times in JavaScript and TypeScript.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/formkit/tempo/main/docs/public/tempo.png&#34; alt=&#34;TEMPO&#34; width=&#34;500&#34; height=&#34;195&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/formkit/tempo/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/formkit/tempo/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Vitest&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/sponsors/formkit&#34; alt=&#34;GitHub Sponsors&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/%40formkit%2Ftempo&#34; alt=&#34;NPM Version&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tempo&amp;nbsp;—&amp;nbsp;The easiest way to work with dates in JavaScript (and TypeScript)&lt;/h1&gt; &#xA;&lt;p&gt;Tempo is a new library in a proud tradition of JavaScript date and time libraries. Inspired by the likes of moment.js, day.js, and date-fns Tempo is built from the ground up to be as small and easy to use as possible.&lt;/p&gt; &#xA;&lt;p&gt;Tempo is best thought of as a collection of utilities for working with &lt;code&gt;Date&lt;/code&gt; objects — an important distinction from other libraries that provide custom date primitives. Under the hood, Tempo mines JavaScript&#39;s &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; to extract complex data like timezones offsets and locale aware date formats giving you a simple API to format, parse, and manipulates dates.&lt;/p&gt; &#xA;&lt;a href=&#34;https://tempo.formkit.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/formkit/tempo/main/docs/public/read-the-docs.png&#34; alt=&#34;Read the docs&#34; width=&#34;200&#34; height=&#34;43&#34;&gt; &lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Created by the &lt;a href=&#34;https://formkit.com&#34;&gt;FormKit team&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>