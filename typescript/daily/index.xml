<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-14T01:38:18Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>motiondivision/motion</title>
    <updated>2024-11-14T01:38:18Z</updated>
    <id>tag:github.com,2024-11-14:/motiondivision/motion</id>
    <link href="https://github.com/motiondivision/motion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source, production-ready animation and gesture library for React&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100&#34; height=&#34;100&#34; alt=&#34;Motion logo&#34; src=&#34;https://user-images.githubusercontent.com/7850794/164965523-3eced4c4-6020-467e-acde-f11b7900ad62.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Motion&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; An open source motion library for JavaScript and React. &lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Motion is the only animation library with first-class APIs for both JavaScript and React.&lt;/p&gt; &#xA;&lt;p&gt;It also sports a unique hybrid engine, with all the power of JavaScript animations combined with the performance of native browser APIs.&lt;/p&gt; &#xA;&lt;h2&gt;üèéÔ∏è Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;motion&lt;/code&gt; with via your package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install motion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JavaScript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { animate } from &#34;motion&#34;&#xA;&#xA;animate(&#34;#box&#34;, { x: 100 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the full &lt;a href=&#34;https://motion.dev/docs/quick-start&#34;&gt;JavaScript docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;React&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { motion } from &#34;motion/react&#34;&#xA;&#xA;function Component() {&#xA;    return &amp;lt;motion.div animate={{ x: 100 }} /&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the full &lt;a href=&#34;https://motion.dev/docs/react-quick-start&#34;&gt;React docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üíé Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Want to contribute to Motion? Our &lt;a href=&#34;https://github.com/framer/motion/raw/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; has you covered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë©üèª‚Äç‚öñÔ∏è License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Motion is MIT licensed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Motion is sustainable thanks to the kind support of its sponsors.&lt;/p&gt; &#xA;&lt;h3&gt;Partners&lt;/h3&gt; &#xA;&lt;p&gt;Motion powers Framer animations, the web builder for creative pros. Design and ship your dream site. Zero code, maximum speed. &lt;br&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.framer.com?utm_source=motion-readme&#34;&gt; &lt;img alt=&#34;Framer&#34; src=&#34;https://github.com/user-attachments/assets/b0bc15ec-4c74-4b3c-8624-85fa7c7e78e9&#34; width=&#34;300px&#34; height=&#34;200px&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Platinum&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tailwindcss.com&#34;&gt;&lt;img alt=&#34;Tailwind&#34; src=&#34;https://github.com/user-attachments/assets/c0496f09-b8ee-4bc4-85ab-83a071bbbdec&#34; width=&#34;300px&#34; height=&#34;200px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://emilkowal.ski&#34;&gt;&lt;img alt=&#34;Emil Kowalski&#34; src=&#34;https://github.com/user-attachments/assets/29f56b1a-37fb-4695-a6a6-151f6c24864f&#34; width=&#34;300px&#34; height=&#34;200px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linear.app&#34;&gt;&lt;img alt=&#34;Linear&#34; src=&#34;https://github.com/user-attachments/assets/a93710bb-d8ed-40e3-b0fb-1c5b3e2b16bb&#34; width=&#34;300px&#34; height=&#34;200px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Silver&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.frontend.fyi/?utm_source=motion&#34;&gt;&lt;img alt=&#34;Frontend.fyi&#34; src=&#34;https://github.com/user-attachments/assets/07d23aa5-69db-44a0-849d-90177e6fc817&#34; width=&#34;150px&#34; height=&#34;100px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.frontend.fyi/?utm_source=motion&#34;&gt;&lt;img alt=&#34;Statamic&#34; src=&#34;https://github.com/user-attachments/assets/5d28f090-bdd9-4b31-b134-fb2b94ca636f&#34; width=&#34;150px&#34; height=&#34;100px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Personal&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/nusualabuga&#34;&gt;Nusu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sinja.io&#34;&gt;OlegWock&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bubkoo/html-to-image</title>
    <updated>2024-11-14T01:38:18Z</updated>
    <id>tag:github.com,2024-11-14:/bubkoo/html-to-image</id>
    <link href="https://github.com/bubkoo/html-to-image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚úÇÔ∏è Generates an image from a DOM node using HTML5 canvas and SVG.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;html-to-image&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;‚úÇÔ∏è Generates an image from a DOM node using HTML5 canvas and SVG.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Fork from &lt;a href=&#34;https://github.com/tsayen/dom-to-image&#34; rel=&#34;nofollow&#34;&gt;dom-to-image&lt;/a&gt; with more maintainable code and some new features.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/bubkoo/html-to-image/actions/workflows/ci.yml&#34;&gt;&lt;img alt=&#34;build&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/bubkoo/html-to-image/ci.yml?branch=master&amp;amp;logo=github&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/bubkoo/html-to-image&#34;&gt;&lt;img alt=&#34;coverage&#34; src=&#34;https://img.shields.io/codecov/c/gh/bubkoo/html-to-image?logo=codecov&amp;amp;style=for-the-badge&amp;amp;token=BWweeU2uNX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/html-to-image&#34; rel=&#34;nofollow&#34;&gt;&lt;img alt=&#34;NPM Package&#34; src=&#34;https://img.shields.io/npm/v/html-to-image.svg?logo=npm&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/html-to-image&#34; rel=&#34;nofollow&#34;&gt;&lt;img alt=&#34;NPM Downloads&#34; src=&#34;http://img.shields.io/npm/dm/html-to-image.svg?logo=npm&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/bubkoo/html-to-image?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;&lt;img alt=&#34;Language&#34; src=&#34;https://img.shields.io/badge/language-TypeScript-blue.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bubkoo/html-to-image/pulls&#34;&gt;&lt;img alt=&#34;PRs Welcome&#34; src=&#34;https://img.shields.io/badge/PRs-Welcome-brightgreen.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install --save html-to-image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/* ES6 */&#xA;import * as htmlToImage from &#39;html-to-image&#39;;&#xA;import { toPng, toJpeg, toBlob, toPixelData, toSvg } from &#39;html-to-image&#39;;&#xA;&#xA;/* ES5 */&#xA;var htmlToImage = require(&#39;html-to-image&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the top level functions accept DOM node and rendering options, and return a promise fulfilled with corresponding dataURL:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/#toPng&#34;&gt;toPng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/#toSvg&#34;&gt;toSvg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/#toJpeg&#34;&gt;toJpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/#toBlob&#34;&gt;toBlob&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/#toCanvas&#34;&gt;toCanvas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/#toPixelData&#34;&gt;toPixelData&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Go with the following examples.&lt;/p&gt; &#xA;&lt;h4&gt;toPng&lt;/h4&gt; &#xA;&lt;p&gt;Get a PNG image base64-encoded data URL and display it right away:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var node = document.getElementById(&#39;my-node&#39;);&#xA;&#xA;htmlToImage.toPng(node)&#xA;  .then(function (dataUrl) {&#xA;    var img = new Image();&#xA;    img.src = dataUrl;&#xA;    document.body.appendChild(img);&#xA;  })&#xA;  .catch(function (error) {&#xA;    console.error(&#39;oops, something went wrong!&#39;, error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get a PNG image base64-encoded data URL and download it (using &lt;a href=&#34;https://github.com/rndme/download&#34;&gt;download&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;htmlToImage.toPng(document.getElementById(&#39;my-node&#39;))&#xA;  .then(function (dataUrl) {&#xA;    download(dataUrl, &#39;my-node.png&#39;);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;toSvg&lt;/h4&gt; &#xA;&lt;p&gt;Get an SVG data URL, but filter out all the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function filter (node) {&#xA;  return (node.tagName !== &#39;i&#39;);&#xA;}&#xA;&#xA;htmlToImage.toSvg(document.getElementById(&#39;my-node&#39;), { filter: filter })&#xA;  .then(function (dataUrl) {&#xA;    /* do something */&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;toJpeg&lt;/h4&gt; &#xA;&lt;p&gt;Save and download a compressed JPEG image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;htmlToImage.toJpeg(document.getElementById(&#39;my-node&#39;), { quality: 0.95 })&#xA;  .then(function (dataUrl) {&#xA;    var link = document.createElement(&#39;a&#39;);&#xA;    link.download = &#39;my-image-name.jpeg&#39;;&#xA;    link.href = dataUrl;&#xA;    link.click();&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;toBlob&lt;/h4&gt; &#xA;&lt;p&gt;Get a PNG image blob and download it (using &lt;a href=&#34;https://github.com/eligrey/FileSaver.js&#34;&gt;FileSaver&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;htmlToImage.toBlob(document.getElementById(&#39;my-node&#39;))&#xA;  .then(function (blob) {&#xA;    if (window.saveAs) {&#xA;      window.saveAs(blob, &#39;my-node.png&#39;);&#xA;    } else {&#xA;     FileSaver.saveAs(blob, &#39;my-node.png&#39;);&#xA;   }&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;toCanvas&lt;/h4&gt; &#xA;&lt;p&gt;Get a HTMLCanvasElement, and display it right away:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;htmlToImage.toCanvas(document.getElementById(&#39;my-node&#39;))&#xA;  .then(function (canvas) {&#xA;    document.body.appendChild(canvas);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;toPixelData&lt;/h4&gt; &#xA;&lt;p&gt;Get the raw pixel data as a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&#34;&gt;Uint8Array&lt;/a&gt; with every 4 array elements representing the RGBA data of a pixel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var node = document.getElementById(&#39;my-node&#39;);&#xA;&#xA;htmlToImage.toPixelData(node)&#xA;  .then(function (pixels) {&#xA;    for (var y = 0; y &amp;lt; node.scrollHeight; ++y) {&#xA;      for (var x = 0; x &amp;lt; node.scrollWidth; ++x) {&#xA;        pixelAtXYOffset = (4 * y * node.scrollHeight) + (4 * x);&#xA;        /* pixelAtXY is a Uint8Array[4] containing RGBA values of the pixel at (x, y) in the range 0..255 */&#xA;        pixelAtXY = pixels.slice(pixelAtXYOffset, pixelAtXYOffset + 4);&#xA;      }&#xA;    }&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;React&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import React, { useCallback, useRef } from &#39;react&#39;;&#xA;import { toPng } from &#39;html-to-image&#39;;&#xA;&#xA;const App: React.FC = () =&amp;gt; {&#xA;  const ref = useRef&amp;lt;HTMLDivElement&amp;gt;(null)&#xA;&#xA;  const onButtonClick = useCallback(() =&amp;gt; {&#xA;    if (ref.current === null) {&#xA;      return&#xA;    }&#xA;&#xA;    toPng(ref.current, { cacheBust: true, })&#xA;      .then((dataUrl) =&amp;gt; {&#xA;        const link = document.createElement(&#39;a&#39;)&#xA;        link.download = &#39;my-image-name.png&#39;&#xA;        link.href = dataUrl&#xA;        link.click()&#xA;      })&#xA;      .catch((err) =&amp;gt; {&#xA;        console.log(err)&#xA;      })&#xA;  }, [ref])&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;div ref={ref}&amp;gt;&#xA;      {/* DOM nodes you want to convert to PNG */}&#xA;      &amp;lt;/div&amp;gt;&#xA;      &amp;lt;button onClick={onButtonClick}&amp;gt;Click me&amp;lt;/button&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;h3&gt;filter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;(domNode: HTMLElement) =&amp;gt; boolean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A function taking DOM node as argument. Should return true if passed node should be included in the output. Excluding node means excluding it&#39;s children as well.&lt;/p&gt; &#xA;&lt;p&gt;You can add filter to every image function. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const filter = (node: HTMLElement) =&amp;gt; {&#xA;  const exclusionClasses = [&#39;remove-me&#39;, &#39;secret-div&#39;];&#xA;  return !exclusionClasses.some((classname) =&amp;gt; node.classList?.contains(classname));&#xA;}&#xA;&#xA;htmlToImage.toJpeg(node, { quality: 0.95, filter: filter});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;htmlToImage.toPng(node, {filter:filter})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Not called on the root node.&lt;/p&gt; &#xA;&lt;h3&gt;backgroundColor&lt;/h3&gt; &#xA;&lt;p&gt;A string value for the background color, any valid CSS color value.&lt;/p&gt; &#xA;&lt;h3&gt;width, height&lt;/h3&gt; &#xA;&lt;p&gt;Width and height in pixels to be applied to node before rendering.&lt;/p&gt; &#xA;&lt;h3&gt;canvasWidth, canvasHeight&lt;/h3&gt; &#xA;&lt;p&gt;Allows to scale the canva&#39;s size including the elements inside to a given width and height (in pixels).&lt;/p&gt; &#xA;&lt;h3&gt;style&lt;/h3&gt; &#xA;&lt;p&gt;An object whose properties to be copied to node&#39;s style before rendering. You might want to check &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference&#34;&gt;this reference&lt;/a&gt; for JavaScript names of CSS properties.&lt;/p&gt; &#xA;&lt;h3&gt;quality&lt;/h3&gt; &#xA;&lt;p&gt;A number between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; indicating image quality (e.g. &lt;code&gt;0.92&lt;/code&gt; =&amp;gt; &lt;code&gt;92%&lt;/code&gt;) of the JPEG image.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;1.0&lt;/code&gt; (&lt;code&gt;100%&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;cacheBust&lt;/h3&gt; &#xA;&lt;p&gt;Set to true to append the current time as a query string to URL requests to enable cache busting.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;includeQueryParams&lt;/h3&gt; &#xA;&lt;p&gt;Set false to use all URL as cache key. If the value has falsy value, it will exclude query params from the provided URL.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;imagePlaceholder&lt;/h3&gt; &#xA;&lt;p&gt;A data URL for a placeholder image that will be used when fetching an image fails.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to an empty string and will render empty areas for failed images.&lt;/p&gt; &#xA;&lt;h3&gt;pixelRatio&lt;/h3&gt; &#xA;&lt;p&gt;The pixel ratio of the captured image. Default use the actual pixel ratio of the device. Set &lt;code&gt;1&lt;/code&gt; to use as initial-scale &lt;code&gt;1&lt;/code&gt; for the image.&lt;/p&gt; &#xA;&lt;h3&gt;preferredFontFormat&lt;/h3&gt; &#xA;&lt;p&gt;The format required for font embedding. This is a useful optimisation when a webfont provider specifies several different formats for fonts in the CSS, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@font-face {&#xA;  name: &#39;proxima-nova&#39;;&#xA;  src: url(&#34;...&#34;) format(&#34;woff2&#34;), url(&#34;...&#34;) format(&#34;woff&#34;), url(&#34;...&#34;) format(&#34;opentype&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of embedding each format, all formats other than the one specified will be discarded. If this option is not specified then all formats will be downloaded and embedded.&lt;/p&gt; &#xA;&lt;h3&gt;fontEmbedCSS&lt;/h3&gt; &#xA;&lt;p&gt;When supplied, the library will skip the process of parsing and embedding webfont URLs in CSS, instead using this value. This is useful when combined with &lt;code&gt;getFontEmbedCSS()&lt;/code&gt; to only perform the embedding process a single time across multiple calls to library functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const fontEmbedCss = await htmlToImage.getFontEmbedCSS(element1);&#xA;html2Image.toSVG(element1, { fontEmbedCss });&#xA;html2Image.toSVG(element2, { fontEmbedCss });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;skipAutoScale&lt;/h3&gt; &#xA;&lt;p&gt;When supplied, the library will skip the process of scaling extra large doms into the canvas object. You may experience loss of parts of the image if set to &lt;code&gt;true&lt;/code&gt; and you are exporting a very large image.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;type&lt;/h3&gt; &#xA;&lt;p&gt;A string indicating the image format. The default type is image/png; that type is also used if the given type isn&#39;t supported. When supplied, the toCanvas function will return a blob matching the given image type and quality.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;image/png&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Browsers&lt;/h2&gt; &#xA;&lt;p&gt;Only standard lib is currently used, but make sure your browser supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SVG &lt;code&gt;&amp;lt;foreignObject&amp;gt;&lt;/code&gt; tag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s tested on latest Chrome, Firefox and Safari (49, 45 and 16 respectively at the time of writing), with Chrome performing significantly better on big DOM trees, possibly due to it&#39;s more performant SVG support, and the fact that it supports &lt;code&gt;CSSStyleDeclaration.cssText&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Internet Explorer is not (and will not be) supported, as it does not support SVG &lt;code&gt;&amp;lt;foreignObject&amp;gt;&lt;/code&gt; tag.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;There might some day exist (or maybe already exists?) a simple and standard way of exporting parts of the HTML to image (and then this script can only serve as an evidence of all the hoops I had to jump through in order to get such obvious thing done) but I haven&#39;t found one so far.&lt;/p&gt; &#xA;&lt;p&gt;This library uses a feature of SVG that allows having arbitrary HTML content inside of the &lt;code&gt;&amp;lt;foreignObject&amp;gt;&lt;/code&gt; tag. So, in order to render that DOM node for you, following steps are taken:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the original DOM node recursively&lt;/li&gt; &#xA; &lt;li&gt;Compute the style for the node and each sub-node and copy it to corresponding clone &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;and don&#39;t forget to recreate pseudo-elements, as they are not cloned in any way, of course&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Embed web fonts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;find all the &lt;code&gt;@font-face&lt;/code&gt; declarations that might represent web fonts&lt;/li&gt; &#xA;   &lt;li&gt;parse file URLs, download corresponding files&lt;/li&gt; &#xA;   &lt;li&gt;base64-encode and inline content as dataURLs&lt;/li&gt; &#xA;   &lt;li&gt;concatenate all the processed CSS rules and put them into one &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element, then attach it to the clone&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Embed images &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;embed image URLs in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements&lt;/li&gt; &#xA;   &lt;li&gt;inline images used in &lt;code&gt;background&lt;/code&gt; CSS property, in a fashion similar to fonts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Serialize the cloned node to XML&lt;/li&gt; &#xA; &lt;li&gt;Wrap XML into the &lt;code&gt;&amp;lt;foreignObject&amp;gt;&lt;/code&gt; tag, then into the SVG, then make it a data URL&lt;/li&gt; &#xA; &lt;li&gt;Optionally, to get PNG content or raw pixel data as a Uint8Array, create an Image element with the SVG as a source, and render it on an off-screen canvas, that you have also created, then read the content from the canvas&lt;/li&gt; &#xA; &lt;li&gt;Done!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to watch out for&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the DOM node you want to render includes a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element with something drawn on it, it should be handled fine, unless the canvas is &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image&#34;&gt;tainted&lt;/a&gt; - in this case rendering will rather not succeed.&lt;/li&gt; &#xA; &lt;li&gt;Rendering will failed on huge DOM due to the dataURI &lt;a href=&#34;https://stackoverflow.com/questions/695151/data-protocol-url-size-limitations/41755526#41755526&#34;&gt;limit varies&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please let us know how can we help. Do check out &lt;a href=&#34;https://github.com/bubkoo/html-to-image/issues&#34;&gt;issues&lt;/a&gt; for bug reports or suggestions first.&lt;/p&gt; &#xA;&lt;p&gt;To become a contributor, please follow our &lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/bubkoo/html-to-image/graphs/contributors&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/CONTRIBUTORS.svg?sanitize=true&#34; alt=&#34;Contributors&#34; width=&#34;740&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The scripts and documentation in this project are released under the &lt;a href=&#34;https://raw.githubusercontent.com/bubkoo/html-to-image/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>posva/pinia-colada</title>
    <updated>2024-11-14T01:38:18Z</updated>
    <id>tag:github.com,2024-11-14:/posva/pinia-colada</id>
    <link href="https://github.com/posva/pinia-colada" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üçπ The smart data fetching layer for Pinia&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;240&#34; src=&#34;https://github.com/posva/pinia-colada/assets/664177/02011637-f94d-4a35-854a-02f7aed86a3c&#34; alt=&#34;Pinia Colada logo&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://npmjs.com/package/@pinia/colada&#34;&gt; &lt;img src=&#34;https://badgen.net/npm/v/@pinia/colada/latest&#34; alt=&#34;npm package&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/posva/pinia-colada/actions/workflows/test.yml&#34;&gt; &lt;img src=&#34;https://github.com/posva/pinia-colada/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/posva/pinia-colada&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/posva/pinia-colada/branch/main/graph/badge.svg?token=OZc0DBze2R&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Pinia Colada&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The missing data fetching library for &lt;a href=&#34;https://pinia.vuejs.org&#34;&gt;Pinia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Pinia Colada makes data fetching in Vue applications a breeze. It&#39;s built on top of &lt;a href=&#34;https://pinia.vuejs.org&#34;&gt;Pinia&lt;/a&gt; and takes away all of the complexity and boilerplate that comes with fetching data. It&#39;s fully typed and tree-shakeable, and it&#39;s built with the same principles as Pinia and Vue: It&#39;s approachable, flexible, powerful and can be progressively adopted.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] This is a feature-complete version of the exercises from &lt;a href=&#34;https://masteringpinia.com/?utm=pinia-colada-readme&#34;&gt;Mastering Pinia&lt;/a&gt;. If you would like to learn how it started and become an expert in Vue state management, check it out!&lt;/p&gt; &#xA; &lt;a href=&#34;https://masteringpinia.com/?utm=pinia-colada-readme&#34;&gt; &lt;img src=&#34;https://github.com/posva/pinia-colada/assets/664177/2f7081a5-90fe-467a-b021-7e709f71603e&#34; width=&#34;200&#34; alt=&#34;Mastering Pinia banner&#34;&gt; &lt;/a&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ö°Ô∏è &lt;strong&gt;Automatic caching&lt;/strong&gt;: Smart client-side caching with request deduplication&lt;/li&gt; &#xA; &lt;li&gt;üóÑÔ∏è &lt;strong&gt;Async State&lt;/strong&gt;: Handle any async state&lt;/li&gt; &#xA; &lt;li&gt;üîå &lt;strong&gt;Plugins&lt;/strong&gt;: Powerful plugin system&lt;/li&gt; &#xA; &lt;li&gt;‚ú® &lt;strong&gt;Optimistic Updates&lt;/strong&gt;: Optimistic updates with ease&lt;/li&gt; &#xA; &lt;li&gt;üí° &lt;strong&gt;Sensible defaults&lt;/strong&gt;: Sane defaults with full customization&lt;/li&gt; &#xA; &lt;li&gt;üß© &lt;strong&gt;Out-of-the box plugins&lt;/strong&gt;: A set of composable functions to handle data fetching&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;Typescript Support&lt;/strong&gt;: Fully typed with Typescript &#xA;  &lt;!-- - üì° **Network Status**: Handle network status and offline support --&gt; &#xA;  &lt;!-- - üõ† **Devtools**: Integration with the Vue devtools --&gt; &lt;/li&gt; &#xA; &lt;li&gt;üí® &lt;strong&gt;Small Bundle Size&lt;/strong&gt;: A baseline of ~2kb and fully tree-shakeable&lt;/li&gt; &#xA; &lt;li&gt;üì¶ &lt;strong&gt;Zero Dependencies&lt;/strong&gt;: No dependencies other than Pinia&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è &lt;strong&gt;SSR&lt;/strong&gt;: Out of the box server-side rendering support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Pinia Colada is always trying to improve and evolve. Feedback regarding new and existing options and features is very welcome! Contribution to documentation, issues, and pull requests are highly appreciated.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install pinia @pinia/colada&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the plugins for the features you need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createPinia } from &#39;pinia&#39;&#xA;import { PiniaColada } from &#39;@pinia/colada&#39;&#xA;&#xA;app.use(createPinia())&#xA;// install after pinia&#xA;app.use(PiniaColada, {&#xA;  // optional options&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The core of Pinia Colada is the &lt;code&gt;useQuery&lt;/code&gt; and &lt;code&gt;useMutation&lt;/code&gt; functions. They are used to read data and write it respectively. Here&#39;s a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script lang=&#34;ts&#34; setup&amp;gt;&#xA;import { useRoute } from &#39;vue-router&#39;&#xA;import { useMutation, useQuery, useQueryCache } from &#39;@pinia/colada&#39;&#xA;import { patchContact, getContactById } from &#39;~/api/contacts&#39;&#xA;&#xA;const route = useRoute()&#xA;const queryCache = useQueryCache()&#xA;&#xA;const { data: contact, isPending } = useQuery({&#xA;  // unique key for the query in the cache&#xA;  key: () =&amp;gt; [&#39;contacts&#39;, route.params.id],&#xA;  query: () =&amp;gt; getContactById(route.params.id),&#xA;})&#xA;&#xA;const { mutate: updateContact, isLoading } = useMutation({&#xA;  mutation: patchContact,&#xA;  async onSettled({ id }) {&#xA;    // invalidate the query to refetch the data of the query above&#xA;    await queryCache.invalidateQueries({ key: [&#39;contacts&#39;, id], exact: true })&#xA;  },&#xA;})&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;section&amp;gt;&#xA;    &amp;lt;p v-if=&#34;isPending&#34;&amp;gt;&#xA;      Loading...&#xA;    &amp;lt;/p&amp;gt;&#xA;    &amp;lt;ContactCard&#xA;      v-else&#xA;      :key=&#34;contact.id&#34;&#xA;      :contact=&#34;contact&#34;&#xA;      :is-updating=&#34;isLoading&#34;&#xA;      @update:contact=&#34;updateContact&#34;&#xA;    /&amp;gt;&#xA;  &amp;lt;/section&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about the core concepts and how to use them in the &lt;a href=&#34;https://pinia-colada.esm.dev&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>