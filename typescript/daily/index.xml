<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T01:56:40Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vueschool/vuejs-forge-boilerplate</title>
    <updated>2022-07-10T01:56:40Z</updated>
    <id>tag:github.com,2022-07-10:/vueschool/vuejs-forge-boilerplate</id>
    <link href="https://github.com/vueschool/vuejs-forge-boilerplate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Boilerplate Code for the Vue.js Forge Conference&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vue-forge-boilerplate&lt;/h1&gt; &#xA;&lt;p&gt;This template should help get you started developing with Vue 3 in Vite.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended IDE Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; + &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Vue.volar&#34;&gt;Volar&lt;/a&gt; (and disable Vetur) + &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin&#34;&gt;TypeScript Vue Plugin (Volar)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Type Support for &lt;code&gt;.vue&lt;/code&gt; Imports in TS&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript cannot handle type information for &lt;code&gt;.vue&lt;/code&gt; imports by default, so we replace the &lt;code&gt;tsc&lt;/code&gt; CLI with &lt;code&gt;vue-tsc&lt;/code&gt; for type checking. In editors, we need &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin&#34;&gt;TypeScript Vue Plugin (Volar)&lt;/a&gt; to make the TypeScript language service aware of &lt;code&gt;.vue&lt;/code&gt; types.&lt;/p&gt; &#xA;&lt;p&gt;If the standalone TypeScript plugin doesn&#39;t feel fast enough to you, Volar has also implemented a &lt;a href=&#34;https://github.com/johnsoncodehk/volar/discussions/471#discussioncomment-1361669&#34;&gt;Take Over Mode&lt;/a&gt; that is more performant. You can enable it by the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Disable the built-in TypeScript Extension &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;Extensions: Show Built-in Extensions&lt;/code&gt; from VSCode&#39;s command palette&lt;/li&gt; &#xA;   &lt;li&gt;Find &lt;code&gt;TypeScript and JavaScript Language Features&lt;/code&gt;, right click and select &lt;code&gt;Disable (Workspace)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Reload the VSCode window by running &lt;code&gt;Developer: Reload Window&lt;/code&gt; from the command palette.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Customize configuration&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://vitejs.dev/config/&#34;&gt;Vite Configuration Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile and Hot-Reload for Development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Type-Check, Compile and Minify for Production&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Unit Tests with &lt;a href=&#34;https://vitest.dev/&#34;&gt;Vitest&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run test:unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run End-to-End Tests with &lt;a href=&#34;https://www.cypress.io/&#34;&gt;Cypress&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;npm run test:e2e # or `npm run test:e2e:ci` for headless testing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lint with &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run lint&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>BuilderIO/qwik</title>
    <updated>2022-07-10T01:56:40Z</updated>
    <id>tag:github.com,2022-07-10:/BuilderIO/qwik</id>
    <link href="https://github.com/BuilderIO/qwik" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The HTML-first framework. Initialize apps of any size with &lt; 1kb JS&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Qwik Logo&#34; width=&#34;400&#34; src=&#34;https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F667ab6c2283d4c4d878fb9083aacc10f&#34;&gt; &lt;/p&gt; &#xA;&lt;a href=&#34;https://youtu.be/0dC11DMR3fU?t=154&#34;&gt; &lt;img width=&#34;1229&#34; alt=&#34;WWC22 - Qwik + Partytown: How to remove 99% of JavaScript from main thread&#34; src=&#34;https://user-images.githubusercontent.com/111951/175145272-0df06434-7488-4e0e-933b-61358d4bd42b.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;The HTML-first framework&lt;/h1&gt; &#xA;&lt;p&gt;Qwik offers the fastest possible page load times - regardless of the complexity of your website. Qwik is so fast because it allows fully interactive sites to load with almost no JavaScript and &lt;a href=&#34;https://github.com/BuilderIO/qwik/raw/main/packages/docs/src/pages/docs/concepts/resumable.mdx&#34;&gt;pickup from where the server left off&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As users interact with the site, only the necesary parts of the site load on-demand. This &lt;a href=&#34;https://github.com/BuilderIO/qwik/raw/main/packages/docs/src/pages/docs/concepts/progressive.mdx&#34;&gt;precision lazy-loading&lt;/a&gt; is what makes Qwik so quick.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Try out our starter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm init qwik@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand the difference between &lt;a href=&#34;https://github.com/BuilderIO/qwik/raw/main/packages/docs/src/pages/docs/concepts/resumable.mdx&#34;&gt;resumable and replayable&lt;/a&gt; applications.&lt;/li&gt; &#xA; &lt;li&gt;Learn about Qwik&#39;s high level &lt;a href=&#34;https://github.com/BuilderIO/qwik/raw/main/packages/docs/src/pages/docs/think-qwik.mdx&#34;&gt;mental model&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qwik.builder.io&#34;&gt;Official Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blog Posts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/mhevery/html-first-javascript-last-the-secret-to-web-speed-4ic9&#34;&gt;HTML-first, JavaScript last: the secret to web speed!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/mhevery/a-first-look-at-qwik-the-html-first-framework-af&#34;&gt;A first look at Qwik - the HTML first framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/mhevery/death-by-closure-and-how-qwik-solves-it-44jj&#34;&gt;Death by Closure (and how Qwik solves it)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/mhevery/qwik-the-answer-to-optimal-fine-grained-lazy-loading-2hdp&#34;&gt;Qwik: the answer to optimal fine-grained lazy loading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/BuilderIO/qwik/raw/main/CONTRIBUTING.md&#34;&gt;Contributing.md&lt;/a&gt; for more information on how to build Qwik from the source and contribute!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ping us at &lt;a href=&#34;https://twitter.com/QwikDev&#34;&gt;@QwikDev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://qwik.builder.io/chat&#34;&gt;Discord&lt;/a&gt; community.&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://calendar.google.com/calendar/u/0?cid=Y180ZG91YjR2NTZ1cW43YmgzbW1oZGJ2M3R2c0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t&#34;&gt;weekly office hours&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Made with ❤️ by &lt;a target=&#34;_blank&#34; href=&#34;https://www.builder.io/&#34;&gt;Builder.io&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>palantir/blueprint</title>
    <updated>2022-07-10T01:56:40Z</updated>
    <id>tag:github.com,2022-07-10:/palantir/blueprint</id>
    <link href="https://github.com/palantir/blueprint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A React-based UI toolkit for the web&lt;/p&gt;&lt;hr&gt;&lt;img height=&#34;204&#34; src=&#34;https://cloud.githubusercontent.com/assets/464822/20228152/d3f36dc2-a804-11e6-80ff-51ada2d13ea7.png&#34;&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;http://blueprintjs.com/&#34;&gt;Blueprint&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/palantir/workflows/blueprint&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/palantir/blueprint/tree/develop.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Blueprint is a React-based UI toolkit for the web.&lt;/p&gt; &#xA;&lt;p&gt;It is optimized for building complex, data-dense web interfaces for &lt;em&gt;desktop applications&lt;/em&gt; which run in modern browsers and IE11. This is not a mobile-first UI toolkit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@palantir/scaling-product-design-with-blueprint-25492827bb4a&#34;&gt;&lt;strong&gt;Read the introductory blog post ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://blueprintjs.com/docs&#34;&gt;&lt;strong&gt;View the full documentation ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/blueprint-sandbox-et9xy&#34;&gt;&lt;strong&gt;Try it out on CodeSandbox ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/palantir/blueprint/wiki/Frequently-Asked-Questions&#34;&gt;&lt;strong&gt;Read frequently asked questions (FAQ) on the wiki ▸&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Blueprint&#39;s change log and migration guides for major versions live on the repo&#39;s &lt;a href=&#34;https://github.com/palantir/blueprint/wiki/3.x-Changelog&#34;&gt;Github wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains multiple projects in the &lt;code&gt;packages/&lt;/code&gt; directory that fall into 3 categories:&lt;/p&gt; &#xA;&lt;h3&gt;Libraries&lt;/h3&gt; &#xA;&lt;p&gt;These are the component libraries we publish to NPM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/core.svg?label=@blueprintjs/core&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Core styles &amp;amp; components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/datetime&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/datetime.svg?label=@blueprintjs/datetime&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Components for interacting with dates and times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/icons&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/icons.svg?label=@blueprintjs/icons&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Components for generating and displaying icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/popover2&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/popover2.svg?label=@blueprintjs/popover2&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Popover2 and Tooltip2 components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/select&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/select.svg?label=@blueprintjs/select&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Components for selecting items from a list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/table&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/table.svg?label=@blueprintjs/table&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Scalable interactive table component.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/timezone&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/timezone.svg?label=@blueprintjs/timezone&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Components for picking timezones.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Applications&lt;/h3&gt; &#xA;&lt;p&gt;These are hosted on GitHub Pages as static web applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docs-app&lt;/code&gt; – Documentation site at blueprintjs.com/docs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;landing-app&lt;/code&gt; – Landing page at blueprintjs.com&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are used as development playground environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;table-dev-app&lt;/code&gt; – demo page that supports manual testing of all table features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build tooling&lt;/h3&gt; &#xA;&lt;p&gt;These packages define development dependencies and contain build configuration. They adhere to the standard NPM package layout, which allows us to keep clear API boundaries for build configuration and isolate groups of &lt;code&gt;devDependencies&lt;/code&gt;. They are published to NPM in order to allow other Blueprint-related projects to use this infrastructure outside this monorepo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/docs-theme&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/docs-theme.svg?label=@blueprintjs/docs-theme&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – Documentation theme for &lt;a href=&#34;https://github.com/palantir/documentalist&#34;&gt;Documentalist&lt;/a&gt; data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/eslint-config&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/eslint-config.svg?label=@blueprintjs/eslint-config&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – ESLint configuration used in this repo and recommended for Blueprint-related projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/eslint-plugin&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/eslint-plugin.svg?label=@blueprintjs/eslint-plugin&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – implementations for custom ESLint rules which enforce best practices for Blueprint usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/karma-build-scripts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/karma-build-scripts.svg?label=@blueprintjs/karma-build-scripts&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/node-build-scripts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/node-build-scripts.svg?label=@blueprintjs/node-build-scripts&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – various utility scripts for linting, working with CSS variables, and building icons&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/stylelint-plugin&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/stylelint-plugin.svg?label=@blueprintjs/stylelint-plugin&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – implementations for custom stylelint rules which enforce best practices for Blueprint usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/test-commons&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/test-commons.svg?label=@blueprintjs/test-commons&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – various utility functions used in Blueprint test suites&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/tslint-config&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/tslint-config.svg?label=@blueprintjs/tslint-config&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; – TSLint configuration used in this repo and recommended for Blueprint-related projects (should be installed by &lt;code&gt;@blueprintjs/eslint-config&lt;/code&gt;, not directly)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@blueprintjs/webpack-build-scripts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@blueprintjs/webpack-build-scripts.svg?label=@blueprintjs/webpack-build-scripts&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Looking for places to contribute to the codebase? First read the &lt;a href=&#34;https://github.com/palantir/blueprint/raw/develop/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;, then &lt;a href=&#34;https://github.com/palantir/blueprint/labels/help%20wanted&#34;&gt;check out the &#34;help wanted&#34; label&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lerna.js.org/&#34;&gt;Lerna&lt;/a&gt; manages inter-package dependencies in this monorepo. Builds are orchestrated via &lt;code&gt;lerna run&lt;/code&gt; and NPM scripts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;: Node.js v12+, Yarn v1.22+&lt;/p&gt; &#xA;&lt;h3&gt;One-time setup&lt;/h3&gt; &#xA;&lt;p&gt;After cloning this repo, run:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt; to install all dependencies.&lt;/li&gt; &#xA; &lt;li&gt;If running on Windows: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm install -g windows-build-tools&lt;/code&gt; to install build tools globally&lt;/li&gt; &#xA;   &lt;li&gt;Ensure &lt;code&gt;bash&lt;/code&gt; is your configured script-shell by running:&lt;br&gt; &lt;code&gt;npm config set script-shell &#34;C:\\Program Files\\git\\bin\\bash.exe&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn verify&lt;/code&gt; to ensure you have all the build tooling working properly.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Incorporating upstream changes&lt;/h3&gt; &#xA;&lt;p&gt;If you were previously in a working state and have just pulled new code from &lt;code&gt;develop&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If there were package dependency changes, run &lt;code&gt;yarn&lt;/code&gt; at the root. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This command is very quick if there are no new things to install.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn compile&lt;/code&gt; to get the latest built versions of the library packages in this repo. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This command is quicker than &lt;code&gt;yarn verify&lt;/code&gt; since it doesn&#39;t build the application packages (&lt;code&gt;docs-app&lt;/code&gt;, &lt;code&gt;landing-app&lt;/code&gt;, etc.) or run tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Developing libraries&lt;/h3&gt; &#xA;&lt;p&gt;There are a few ways to run development scripts, here they are listed from simplest to more advanced usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn dev&lt;/code&gt; from the root directory to watch changes across all packages and run the docs application with webpack-dev-server.&lt;/li&gt; &#xA; &lt;li&gt;Alternately, most libraries have a corresponding dev script to run the docs app and watch changes to just that package: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn dev:core&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn dev:docs&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn dev:datetime&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn dev:popover2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn dev:select&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn dev:table&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lastly, if you want to control exaclty which dev scripts are run and view the console output in the cleanest way, we recommend opening separate terminal windows or splits and running local package dev tasks in each one. This is the recommended workflow for frequent contributors and advanced developers. For example, to test changes in the core + icons packages, you would run the following in separate terminals: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd packages/core &amp;amp;&amp;amp; yarn dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd packages/icons &amp;amp;&amp;amp; yarn dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd packages/docs-app &amp;amp;&amp;amp; yarn dev&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Updating documentation&lt;/h3&gt; &#xA;&lt;p&gt;Much of Blueprint&#39;s documentation lives inside source code as JSDoc comments in &lt;code&gt;.tsx&lt;/code&gt; files and KSS markup in &lt;code&gt;.scss&lt;/code&gt; files. This documentation is extracted and converted into static JSON data using &lt;a href=&#34;https://github.com/palantir/documentalist/&#34;&gt;documentalist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are updating documentation sources (&lt;em&gt;not&lt;/em&gt; the docs UI code which lives in &lt;code&gt;packages/docs-app&lt;/code&gt; or the docs theme in &lt;code&gt;packages/docs-theme&lt;/code&gt;), you&#39;ll need to run &lt;code&gt;yarn compile&lt;/code&gt; from &lt;code&gt;packages/docs-data&lt;/code&gt; to see changes reflected in the application. For simplicity, an alias script &lt;code&gt;yarn docs-data&lt;/code&gt; exists in the root to minimize directory hopping.&lt;/p&gt; &#xA;&lt;h3&gt;Updating icons&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/palantir/blueprint/develop/#one-time-setup&#34;&gt;One-time setup&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/palantir/blueprint/develop/#incorporating-upstream-changes&#34;&gt;Incorporating upstream changes&lt;/a&gt; steps should produce the generated source code in this repo used to build the icons documentation. This is sufficient for most development workflows.&lt;/p&gt; &#xA;&lt;p&gt;If you are updating icons or adding new ones, you&#39;ll need to run &lt;code&gt;yarn compile&lt;/code&gt; in &lt;code&gt;packages/icons&lt;/code&gt; to see those changes reflected before running any of the dev scripts.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is made available under the Apache 2.0 License.&lt;/p&gt;</summary>
  </entry>
</feed>