<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-08T01:45:16Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>denoland/saaskit</title>
    <updated>2023-04-08T01:45:16Z</updated>
    <id>tag:github.com,2023-04-08:/denoland/saaskit</id>
    <link href="https://github.com/denoland/saaskit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern SaaS template built on Fresh.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deno SaaSKit&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Warning: this project is in beta. Design, workflows and user accounts are subject to change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deno.com/saaskit&#34;&gt;Deno SaaSKit&lt;/a&gt; is an open-sourced, highly performant template for building your SaaS quickly and easily. This template ships with these foundational features that every SaaS needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User accounts&lt;/li&gt; &#xA; &lt;li&gt;User creation flows&lt;/li&gt; &#xA; &lt;li&gt;Landing page&lt;/li&gt; &#xA; &lt;li&gt;Pricing section&lt;/li&gt; &#xA; &lt;li&gt;Sign-in and session management&lt;/li&gt; &#xA; &lt;li&gt;Billing integration via Stripe&lt;/li&gt; &#xA; &lt;li&gt;Gated API endpoints&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Deno SaaSKit is built on &lt;a href=&#34;https://fresh.deno.dev&#34;&gt;Fresh&lt;/a&gt; and &lt;a href=&#34;https://deno.land&#34;&gt;Deno&lt;/a&gt;, which means you get these awesome technical features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native TypeScript support&lt;/li&gt; &#xA; &lt;li&gt;No build step&lt;/li&gt; &#xA; &lt;li&gt;Server-side rendering and islands architecture&lt;/li&gt; &#xA; &lt;li&gt;Built-in robust tooling, such as a &lt;a href=&#34;https://deno.land/manual/tools/formatter&#34;&gt;formatter&lt;/a&gt;, &lt;a href=&#34;https://deno.land/manual/tools/linter&#34;&gt;linter&lt;/a&gt;, and &lt;a href=&#34;https://deno.land/manual/basics/testing&#34;&gt;test runner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;npm specifiers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;https://discord.gg/deno&#34;&gt;our Discord&lt;/a&gt; to ask questions, learn how to contribute, and meet other developers using Deno SaaSKit.&lt;/p&gt; &#xA;&lt;p&gt;Have feedback? Let us know in &lt;a href=&#34;https://github.com/denoland/saaskit/issues&#34;&gt;the issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Want to know where Deno SaaSKit is headed? Check out &lt;a href=&#34;https://github.com/orgs/denoland/projects/35&#34;&gt;our public roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read more about Deno SaaSkit from &lt;a href=&#34;https://deno.com/blog/announcing-deno-saaskit&#34;&gt;our announcement blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;View the &lt;a href=&#34;https://saaskit.deno.dev/&#34;&gt;Deno SaaSKit demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Getting started with Deno SaaSKit is straightforward.&lt;/p&gt; &#xA;&lt;h3&gt;Create &lt;code&gt;.env&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;p&gt;You can copy the &lt;code&gt;.example.env&lt;/code&gt; into &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .example.env .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only variables you need are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_ANON_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_URL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_SERVICE_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STRIPE_SECRET_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STRIPE_WEBHOOK_SECRET&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Continue below to learn where to grab these keys.&lt;/p&gt; &#xA;&lt;h3&gt;Setup Supabase&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://supabase.com&#34;&gt;Supabase&lt;/a&gt; for handling authentication strategies, as well as data storage for the product itself, which is a simple To-Do list app.&lt;/p&gt; &#xA;&lt;p&gt;You can get started with Supabase in local development mode using the &lt;a href=&#34;https://supabase.com/docs/guides/cli&#34;&gt;Supabase CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx supabase start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once ready, you can create a Supabase account and then &lt;a href=&#34;https://app.supabase.com/projects&#34;&gt;create a new Supabase project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once your project is created, you can grab your &lt;code&gt;SUPABASE_URL&lt;/code&gt; and &lt;code&gt;SUPABASE_ANON_KEY&lt;/code&gt; from &lt;a href=&#34;https://app.supabase.com/project/_/settings/api&#34;&gt;Settings &amp;gt; API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create a &lt;code&gt;todos&lt;/code&gt; table&lt;/h3&gt; &#xA;&lt;p&gt;Deno SaaSKit defaults to a simple To-Do list app to illustrate how authenticated API routes can be created. Of course, you can choose to build whatever app you&#39;d like.&lt;/p&gt; &#xA;&lt;p&gt;But to get this Deno SaaSKit template to work, we&#39;ll create a &lt;code&gt;todos&lt;/code&gt; table in the &lt;a href=&#34;http://localhost:54323/project/default/editor&#34;&gt;Supabase Dashboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Databases&lt;/code&gt; &amp;gt; &lt;code&gt;Tables&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;New Table&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the name as &lt;code&gt;todos&lt;/code&gt; and check &lt;code&gt;Enable Row Level Security (RLS)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure the following columns:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Primary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid_generate_v4()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;user_id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;auth.uid()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We want the &lt;code&gt;user_id&lt;/code&gt; column to link back to our Supabase Auth users, this is what allows us to write security policies to restrict access to the data based on the authenticated user. To set up this reference, click the link symbol next to the &lt;code&gt;user_id&lt;/code&gt; column name, select schema &lt;code&gt;auth&lt;/code&gt;, table &lt;code&gt;users&lt;/code&gt;, and column &lt;code&gt;id&lt;/code&gt;. Now the &lt;code&gt;user_id&lt;/code&gt; will link back to a user object in Supabase Auth.&lt;/p&gt; &#xA;&lt;p&gt;You can also keep the column &lt;code&gt;created_at&lt;/code&gt; if you&#39;d like.&lt;/p&gt; &#xA;&lt;p&gt;Hit save and then your table should be created.&lt;/p&gt; &#xA;&lt;h3&gt;Create a &lt;code&gt;customers&lt;/code&gt; table&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Database&lt;/code&gt; &amp;gt; &lt;code&gt;Tables&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;New Table&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the name as &lt;code&gt;customers&lt;/code&gt; and check &lt;code&gt;Enable Row Level Security (RLS)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure the following columns:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Primary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;user_id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;auth.uid()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stripe_customer_id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;is_subscribed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click the link symbol next to the &lt;code&gt;user_id&lt;/code&gt; column name, select schema &lt;code&gt;auth&lt;/code&gt;, table &lt;code&gt;users&lt;/code&gt;, and column &lt;code&gt;id&lt;/code&gt;. Now the &lt;code&gt;user_id&lt;/code&gt; will link back to a user object in Supabase Auth.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automate Stripe subscription updates via Supabase&lt;/h3&gt; &#xA;&lt;p&gt;In Stripe, register a webhook endpoint by following &lt;a href=&#34;https://stripe.com/docs/development/dashboard/register-webhook&#34;&gt;this guide&lt;/a&gt; with the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Endpoint URL = &lt;code&gt;https://&amp;lt;SITE HOSTNAME&amp;gt;/api/subscription&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Listen to &lt;code&gt;Events on your account&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select events to listen to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;customer.subscription.created&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;customer.subscription.deleted&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup authentication&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://supabase.com/docs/guides/auth/overview&#34;&gt;Supabase Auth&lt;/a&gt; makes it simple to authenticate and authorize users through a variety of authentication strategies.&lt;/p&gt; &#xA;&lt;p&gt;Deno SaaSKit currently supports email, but we plan to add more strategies going forward.&lt;/p&gt; &#xA;&lt;p&gt;To setup Supabase Auth:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Authentication&lt;/code&gt; &amp;gt; &lt;code&gt;Providers&lt;/code&gt; &amp;gt; &lt;code&gt;Email&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Disable &lt;code&gt;Confirm email&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Back on the left-hand bar, under &lt;code&gt;Configuration&lt;/code&gt;, click on &lt;code&gt;Policies&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;New Policy&lt;/code&gt; on the &lt;code&gt;customers&lt;/code&gt; table pane and then &lt;code&gt;Create a policy from scratch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the policy name as &lt;code&gt;Enable all operations for users based on user_id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;Allowed operation&lt;/code&gt;, select &lt;code&gt;All&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;Target Roles&lt;/code&gt; select &lt;code&gt;authenticated&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the &lt;code&gt;USING expression&lt;/code&gt; as &lt;code&gt;(auth.uid() = user_id)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the &lt;code&gt;WITH CHECK expression&lt;/code&gt; as &lt;code&gt;(auth.uid() = user_id)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Review&lt;/code&gt; then &lt;code&gt;Save policy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Repeat for the &lt;code&gt;todos&lt;/code&gt; table pane&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These steps enable using email with Supabase Auth and provide a simple authentication strategy restricting each user to only create, read, update, and delete their own data.&lt;/p&gt; &#xA;&lt;h3&gt;Setup Stripe&lt;/h3&gt; &#xA;&lt;p&gt;Currently, Deno SaaSKit uses &lt;a href=&#34;https://stripe.com&#34;&gt;Stripe&lt;/a&gt; for subscription billing. In the future, we are open to adding other payment processors.&lt;/p&gt; &#xA;&lt;p&gt;To set up Stripe:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Stripe account&lt;/li&gt; &#xA; &lt;li&gt;Since upgrading to a paid tier will take you directly to Stripe&#39;s domain, we recommend &lt;a href=&#34;https://dashboard.stripe.com/settings/branding&#34;&gt;setting up your branding on Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure &lt;a href=&#34;https://dashboard.stripe.com/test/settings/billing/portal&#34;&gt;the Customer Portal settings&lt;/a&gt;. This is what your users will see when they add a credit card and upgrade.&lt;/li&gt; &#xA; &lt;li&gt;Toggle on &#34;Allow customers to update their payment methods&#34;&lt;/li&gt; &#xA; &lt;li&gt;Toggle on &#34;Allow customers to update subscriptions&#34;&lt;/li&gt; &#xA; &lt;li&gt;Toggle on &#34;Allow customers to cancel subscriptions&#34;&lt;/li&gt; &#xA; &lt;li&gt;Add relevant &lt;a href=&#34;https://dashboard.stripe.com/test/products&#34;&gt;products and prices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up the required business information and links &lt;a href=&#34;https://dashboard.stripe.com/settings&#34;&gt;in your settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grab the &lt;code&gt;STRIPE_SECRET_KEY&lt;/code&gt;, which is the secret key located at &lt;a href=&#34;https://dashboard.stripe.com/test/apikeys&#34;&gt;Developers &amp;gt; API Keys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have all of this setup, you should be able to run Deno SaaSKit locally.&lt;/p&gt; &#xA;&lt;h3&gt;Running locally&lt;/h3&gt; &#xA;&lt;p&gt;You can start the project by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deno task start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running navigate to &lt;code&gt;localhost:8000&lt;/code&gt; in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing Deno SaaSKit&lt;/h2&gt; &#xA;&lt;p&gt;This is a template to help you get started. Here is how you can tweak and update for your SaaS.&lt;/p&gt; &#xA;&lt;h3&gt;Update &lt;code&gt;constants.ts&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to update &lt;code&gt;constants.ts&lt;/code&gt; with information that is relevant to your SaaS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export const SITE_NAME = &#34;Your SaaS&#34;;&#xA;export const SITE_DESCRIPTION = &#34;Some details about your SaaS.&#34;;&#xA;export const AUTHENTICATED_REDIRECT_PATH = &#34;/dashboard&#34;;&#xA;export const STRIPE_PREMIUM_PLAN_PRICE_ID = &#34;price_1MPiEkD6QJts4RaYcp1SevPe&#34;;&#xA;export const FREE_PLAN_TODOS_LIMIT = 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Stripe premium plan price id is the &#34;API ID&#34; of your Stripe product. If you do not set it to your own premium plan price id, Stripe will not be able to find the set product plan when it tries to upgrade the subscription from the account&#39;s subscription settings. So make sure you set &lt;code&gt;STRIPE_PREMIUM_PLAN_PRICE_ID&lt;/code&gt; to the value found on the &lt;a href=&#34;https://dashboard.stripe.com/test/products&#34;&gt;products page&lt;/a&gt; on Stripe using the &lt;code&gt;API-ID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Landing Page&lt;/h3&gt; &#xA;&lt;p&gt;The main landing page can be found at &lt;code&gt;/routes/index.tsx&lt;/code&gt; and is composed of TSX components.&lt;/p&gt; &#xA;&lt;h3&gt;Login and Logout&lt;/h3&gt; &#xA;&lt;p&gt;All of the authentication logic is handled by Supabase Auth. All of the logic can be found in these locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/routes/api/*&lt;/code&gt;: All login and logout API functionalities are located here&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/routes/signup.tsx&lt;/code&gt;, &lt;code&gt;/routes/login/index.tsx&lt;/code&gt;, &lt;code&gt;/routes/logout.ts&lt;/code&gt;: The pages that visitors see when signing up or logging in (logout.ts redirects the user to &lt;code&gt;/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/utils/supabase.ts&lt;/code&gt;: A wrapper function around Supabase client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;This template comes with a simple To-Do checklist app. All of the logic for that can be found:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/routes/dashboard/api/todo.ts&lt;/code&gt;: the API route to handle creating and deleting a &#34;todo&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/routes/dashboard/todos.tsx&lt;/code&gt;: the actual To Dos page&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/islands/TodoList.tsx&lt;/code&gt;: an island that offers interactivity when creating and deleting &#34;todo&#34;s, as well as with various helper functions for interfacing with &lt;code&gt;/dashboard/api/todo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/utils/todos.ts&lt;/code&gt;: a set of helper functions to provide CRUD operations with Supabase&#39;s database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Billing&lt;/h3&gt; &#xA;&lt;p&gt;Billing is currently managed via Stripe. Here are locations where you can update Stripe logic:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/utils/stripe.ts&lt;/code&gt;: This helper function exports a Stripe client using the &lt;code&gt;STRIPE_SECRET_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/routes/dashboard/manage-subscription.ts&lt;/code&gt;: This API endpoint redirects the user to their subscription page on Stripe&#39;s domain via Stripe&#39;s client&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/routes/dashboard/upgrade-subscription.ts&lt;/code&gt;: This API endpoint redirects the user to a page that shows an upgraded subscription tier based on &lt;code&gt;STRIPE_PREMIUM_PLAN_PRICE_ID&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Blog&lt;/h3&gt; &#xA;&lt;p&gt;SaaSKit also provides a markdown-based blog. There are three main directories to manage the blog. First, in &lt;code&gt;routes/blog&lt;/code&gt; you will find the routes needed to serve the &lt;code&gt;/blog&lt;/code&gt; page and the routes to your posts. These will be available at &lt;code&gt;/blog/&amp;lt;slug&amp;gt;&lt;/code&gt;. The name of the slug will be taken from the file name. Speaking of posts and their filenames. These are located in &lt;code&gt;data/posts&lt;/code&gt;. To add a new blog post, simply create a new markdown file in this directory. The following front matter attributes are supported out of the box&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;title (required)&lt;/li&gt; &#xA; &lt;li&gt;published_at (optional) in &lt;code&gt;YYYY-MM-DD&lt;/code&gt; format&lt;/li&gt; &#xA; &lt;li&gt;summary (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The third important file/directory is located in &lt;code&gt;utils/posts.ts&lt;/code&gt;. There you will find the functions used to retrieve the data to create the post pages. The SaaSKit blog uses the styles provided by &lt;a href=&#34;https://deno.land/x/gfm@0.2.1&#34;&gt;gfm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The blog is based on the instructions in the blog post &lt;a href=&#34;https://deno.com/blog/build-a-blog-with-fresh&#34;&gt;Building a Blog with Fresh&lt;/a&gt;. For more information about how the blog works, see the reference post.&lt;/p&gt; &#xA;&lt;h3&gt;OAuth&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up the OAuth application for your given provider by following one of &lt;a href=&#34;https://supabase.com/docs/guides/auth#providers&#34;&gt;these guides&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/docs/guides/auth#configure-third-party-providers&#34;&gt;Configure your third-party provider&lt;/a&gt; in Supabase.&lt;/li&gt; &#xA; &lt;li&gt;Insert your &lt;code&gt;OAuthLoginButton&lt;/code&gt; component in your login or signup page &lt;a href=&#34;https://raw.githubusercontent.com/denoland/saaskit/main/routes/login.tsx&#34;&gt;as follows&lt;/a&gt;, which has been done for GitHub. Note: you may need to create the provider icon, which can be done in &lt;a href=&#34;https://raw.githubusercontent.com/denoland/saaskit/main/components/Icons.tsx&#34;&gt;components/Icons.tsx&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Theme Customization&lt;/h3&gt; &#xA;&lt;p&gt;You can customize theme options such as spacing, color, etc. By default, Deno SaaSKit comes with &lt;code&gt;primary&lt;/code&gt; and &lt;code&gt;secondary&lt;/code&gt; colors predefined within &lt;code&gt;twind.config.ts&lt;/code&gt;. Change these values to match your desired color scheme.&lt;/p&gt; &#xA;&lt;h2&gt;Hosting&lt;/h2&gt; &#xA;&lt;p&gt;You can deploy your Deno SaaSKit project to any VPS or Deno Deploy.&lt;/p&gt; &#xA;&lt;h3&gt;Deno Deploy&lt;/h3&gt; &#xA;&lt;p&gt;TODO.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;When submitting a pull request, please:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://deno.land/manual/references/contributing/style_guide&#34;&gt;Deno Style Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Include tests for any added functionality.&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;code&gt;deno task test&lt;/code&gt; passes successfully.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building a Modern SaaS Stack&lt;/h2&gt; &#xA;&lt;p&gt;Along with this template, we are creating a series of How To guides to show how to build a modern SaaS stack using Deno SaaSKit and Fresh. This series will cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to setup login logout in Fresh&lt;/li&gt; &#xA; &lt;li&gt;How to setup user accounts with Supabase in Fresh&lt;/li&gt; &#xA; &lt;li&gt;How to setup Stripe subscriptions in Fresh&lt;/li&gt; &#xA; &lt;li&gt;How to create authenticated API routes in Fresh&lt;/li&gt; &#xA; &lt;li&gt;How to deploy Deno SaaSKit to any Virtual Private Server with Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more! We&#39;ll update all relevant links to point to written and video tutorials when they&#39;re released.&lt;/p&gt; &#xA;&lt;p&gt;If you have a specific topic that you&#39;d like us to cover, please let us know in &lt;a href=&#34;https://discord.gg/deno&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About Fresh and Deno&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deno.land&#34;&gt;Deno&lt;/a&gt; is the easiest, and most secure JavaScript/TypeScript runtime. It comes with a &lt;a href=&#34;https://deno.land/manual/tools&#34;&gt;robust toolchain&lt;/a&gt; and native TypeScript support so you can skip configuration and dive right into coding.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fresh.deno.dev&#34;&gt;Fresh&lt;/a&gt; is a next-gen web framework built for speed, reliability, and simplicity. Fresh uses server-side rendering, islands, and progressive enhancement, and sends zero JavaScript to the client by default.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nomic-ai/gpt4all-ts</title>
    <updated>2023-04-08T01:45:16Z</updated>
    <id>tag:github.com,2023-04-08:/nomic-ai/gpt4all-ts</id>
    <link href="https://github.com/nomic-ai/gpt4all-ts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;gpt4all and llama typescript bindings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gpt4all-ts 🌐🚀📚&lt;/h1&gt; &#xA;&lt;p&gt;gpt4all-ts is a TypeScript library that provides an interface to interact with GPT4All, which was originally implemented in Python using the &lt;a href=&#34;https://github.com/nomic-ai/nomic/raw/main/nomic/gpt4all/gpt4all.py&#34;&gt;nomic SDK&lt;/a&gt;. This library aims to extend and bring the amazing capabilities of GPT4All to the TypeScript ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;gpt4all-ts is inspired by and built upon the GPT4All project, which offers code, data, and demos based on the LLaMa large language model with around 800k GPT-3.5-Turbo Generations 😲. You can find the GPT4All Readme &lt;a href=&#34;https://github.com/nomic-ai/gpt4all#readme&#34;&gt;here&lt;/a&gt; to learn more about the project.&lt;/p&gt; &#xA;&lt;p&gt;🙏 We would like to express our gratitude to the &lt;a href=&#34;https://github.com/nomic-ai/gpt4all#readme&#34;&gt;GPT4All&lt;/a&gt; team for their efforts and support in making it possible to bring this library to life.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started 🏁&lt;/h2&gt; &#xA;&lt;p&gt;To install and start using gpt4all-ts, follow the steps below:&lt;/p&gt; &#xA;&lt;h3&gt;1. Install the package&lt;/h3&gt; &#xA;&lt;p&gt;Use your preferred package manager to install gpt4all-ts as a dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install gpt4all&#xA;# or&#xA;yarn add gpt4all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Import the GPT4All class&lt;/h3&gt; &#xA;&lt;p&gt;In your TypeScript (or JavaScript) project, import the &lt;code&gt;GPT4All&lt;/code&gt; class from the &lt;code&gt;gpt4all-ts&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { GPT4All } from &#39;gpt4all&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Instantiate and use the GPT4All class&lt;/h3&gt; &#xA;&lt;p&gt;Create an instance of the &lt;code&gt;GPT4All&lt;/code&gt; class and follow the example in the &lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/gpt4all-ts/main/#example-usage-&#34;&gt;Example Usage&lt;/a&gt; section to interact with the model.&lt;/p&gt; &#xA;&lt;p&gt;Happy coding! 💻🎉&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage 🌟&lt;/h2&gt; &#xA;&lt;p&gt;Below is an example of how to use the &lt;code&gt;GPT4All&lt;/code&gt; class in TypeScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { GPT4All } from &#39;gpt4all&#39;;&#xA;&#xA;const main = async () =&amp;gt; {&#xA;    // Instantiate GPT4All with default or custom settings&#xA;    const gpt4all = new GPT4All(&#39;gpt4all-lora-unfiltered-quantized&#39;, true); // Default is &#39;gpt4all-lora-quantized&#39; model&#xA;  &#xA;    // Initialize and download missing files&#xA;    await gpt4all.init();&#xA;&#xA;    // Open the connection with the model&#xA;    await gpt4all.open();&#xA;    // Generate a response using a prompt&#xA;    const prompt = &#39;Tell me about how Open Access to AI is going to help humanity.&#39;;&#xA;    const response = await gpt4all.prompt(prompt);&#xA;    console.log(`Prompt: ${prompt}`);&#xA;    console.log(`Response: ${response}`);&#xA;  &#xA;    const prompt2 = &#39;Explain to a five year old why AI is nothing to be afraid of.&#39;;&#xA;    const response2 = await gpt4all.prompt(prompt2);&#xA;    console.log(`Prompt: ${prompt2}`);&#xA;    console.log(`Response: ${response2}`);&#xA;  &#xA;    // Close the connection when you&#39;re done&#xA;    gpt4all.close();&#xA;}&#xA;  &#xA;main().catch(console.error);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the library, simply import the &lt;code&gt;GPT4All&lt;/code&gt; class from the &lt;code&gt;gpt4all-ts&lt;/code&gt; package. Create an instance of the &lt;code&gt;GPT4All&lt;/code&gt; class and optionally provide the desired model and other settings.&lt;/p&gt; &#xA;&lt;p&gt;After the gpt4all instance is created, you can open the connection using the &lt;code&gt;open()&lt;/code&gt; method. To generate a response, pass your input prompt to the &lt;code&gt;prompt()&lt;/code&gt; method. Finally, remember to close the connection using the &lt;code&gt;close()&lt;/code&gt; method once you&#39;re done interacting with the model.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s some output from the GPT4All model which you can look forward to:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Prompt:&lt;/strong&gt; Tell me about how Open Access to AI is going to help humanity.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; Open access to AI has already helped in numerous ways, such as improving medical diagnosis and treatment options through machine learning algorithms that analyze patient data more efficiently than humans can alone. It&#39;s also helping with the development of autonomous vehicles by using deep neural networks for image recognition and object detection tasks. Open Access is expected to play a crucial role in solving complex problems like climate change, drug discovery or even creating new jobs through AI-enabled automation technologies such as robotics process automation (RPA).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Prompt:&lt;/strong&gt; Explain to a five year old why AI is nothing to be afraid of.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; Artificial Intelligence, also known as AI or machine learning, are systems that can learn and improve themselves through data analysis without being explicitly programmed for each task they perform. They have the ability to understand complex patterns in large datasets which makes them useful tools across various industries such as healthcare, transportation, finance etc.&lt;/p&gt; &#xA; &lt;p&gt;AI is not something we should be afraid of because it has been designed with our best interests at heart and can help us make better decisions based on data analysis rather than gut feelings or personal preferences. AI systems are also becoming more transparent to users so that they understand how the system works, which helps build trust between them and their machines.&lt;/p&gt; &#xA; &lt;p&gt;AI is here to stay as it has already been adopted by many industries for its benefits in terms of cost savings, efficiency gains etc., but we need not be afraid or suspicious about this technology because AI can also benefit us if used properly with the right intentions behind it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Citation 📝&lt;/h2&gt; &#xA;&lt;p&gt;If you utilize this repository, the original GPT4All project, or its data in a downstream project, please consider citing it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{gpt4all,&#xA;  author = {Yuvanesh Anand and Zach Nussbaum and Brandon Duderstadt and Benjamin Schmidt and Andriy Mulyar},&#xA;  title = {GPT4All: Training an Assistant-style Chatbot with Large Scale Data Distillation from GPT-3.5-Turbo},&#xA;  year = {2023},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  howpublished = {\url{https://github.com/nomic-ai/gpt4all}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any questions or need help, feel free to join the &lt;a href=&#34;https://discord.com/invite/3qGUpKjY&#34;&gt;Discord&lt;/a&gt; channel and ask for assistance at the &lt;strong&gt;#gpt4all-help&lt;/strong&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;About the Author 🧑‍💻&lt;/h2&gt; &#xA;&lt;p&gt;gpt4all-ts was created by Conner Swann, founder of Intuitive Systems. Conner is a passionate developer and advocate for democratizing AI models, believing that access to powerful machine learning tools should be available to everyone 🌍. In the words of the modern sage, &#34;When the AI tide rises, all boats should float&#34; 🚣.&lt;/p&gt; &#xA;&lt;p&gt;You can find Conner on Twitter, sharing insights and occasional shenanigans 🎭 at &lt;a href=&#34;https://twitter.com/YourBuddyConner&#34;&gt;@YourBuddyConner&lt;/a&gt;. While he definitely enjoys being on the bandwagon for advancing AI 🤖, he remains humbly committed to exploring and delivering state-of-the-art technology for everyone&#39;s benefit.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unjs/magicast</title>
    <updated>2023-04-08T01:45:16Z</updated>
    <id>tag:github.com,2023-04-08:/unjs/magicast</id>
    <link href="https://github.com/unjs/magicast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧀 Programmatically modify JavaScript and TypeScript source codes with a simplified, elegant and familiar syntax powered by recast and babel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🧀 Magicast&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.com/package/magicast&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/magicast?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/magicast&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/magicast?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/result?p=magicast&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/magicast?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;bundle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/unjs/magicast&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/unjs/magicast/main?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unjs/magicast/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/unjs/magicast.svg?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdocs.io/package/magicast&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/jsDocs.io-reference-18181B?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;JSDocs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Programmatically modify JavaScript and TypeScript source codes with a simplified, elegant and familiar syntax. Built on top of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;AST&lt;/a&gt; parsed by &lt;a href=&#34;https://github.com/benjamn/recast&#34;&gt;recast&lt;/a&gt; and &lt;a href=&#34;https://babeljs.io/&#34;&gt;babel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;❯ 🧙🏼 &lt;strong&gt;Magical&lt;/strong&gt; modify a JS/TS file and write back magically just like JSON!&lt;br&gt; ❯ 🔀 &lt;strong&gt;Exports/Import&lt;/strong&gt; manipulate module&#39;s imports and exports at ease&lt;br&gt; ❯ 💼 &lt;strong&gt;Function Arguments&lt;/strong&gt; easily manipulate arguments passed to a function call, like &lt;code&gt;defineConfig()&lt;/code&gt;&lt;br&gt; ❯ 🎨 &lt;strong&gt;Smart Formatting&lt;/strong&gt; preseves the formatting style (quotes, tabs, etc.) from the original code&lt;br&gt; ❯ 🧑‍💻 &lt;strong&gt;Readable&lt;/strong&gt; get rid of the complexity of AST manipulation and make your code super readable&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install npm package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# using yarn&#xA;yarn add --dev magicast&#xA;&#xA;# using npm&#xA;npm install -D magicast&#xA;&#xA;# using pnpm&#xA;pnpm add -D magicast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ESM / Bundler&#xA;import { parseModule, generateCode, builders, createNode } from &#34;magicast&#34;;&#xA;&#xA;// CommonJS&#xA;const { parseModule, generateCode, builders, createNode } = require(&#34;magicast&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Modify a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default {&#xA;  foo: [&#34;a&#34;],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code to modify and append &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;foo&lt;/code&gt; prop of defaultExport:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { loadFile, writeFile } from &#34;magicast&#34;;&#xA;&#xA;const mod = await loadFile(&#34;config.js&#34;);&#xA;&#xA;mod.exports.default.foo.push(&#34;b&#34;);&#xA;&#xA;await writeFile(mod);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Updated &lt;code&gt;config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default {&#xA;  foo: [&#34;a&#34;, &#34;b&#34;],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Directly use AST utils:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { parseModule, generateCode } from &#34;magicast&#34;;&#xA;&#xA;// Parse to AST&#xA;const mod = parseModule(`export default { }`);&#xA;&#xA;// Ensure foo is an array&#xA;mod.exports.default.foo ||= [];&#xA;// Add a new array member&#xA;mod.exports.default.foo.push(&#34;b&#34;);&#xA;mod.exports.default.foo.unshift(&#34;a&#34;);&#xA;&#xA;// Generate code&#xA;const { code, map } = generateCode(mod);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generated code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default {&#xA;  foo: [&#34;a&#34;, &#34;b&#34;],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Get the AST directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { parseModule, generateCode } from &#34;magicast&#34;;&#xA;&#xA;const mod = parseModule(`export default { }`);&#xA;&#xA;const ast = mod.exports.default.$ast&#xA;// do something with ast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Function parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { parseModule, generateCode } from &#34;magicast&#34;;&#xA;&#xA;const mod = parseModule(`export default defineConfig({ foo: &#39;bar&#39; })`);&#xA;&#xA;// Support for both bare object export and `defineConfig` wrapper&#xA;const options = mod.exports.default.$type === &#39;function-call&#39;&#xA;  ? mod.exports.default.$args[0]&#xA;  : mod.exports.default;&#xA;&#xA;console.log(options.foo) // bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Create a function call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { parseModule, generateCode, builders } from &#34;magicast&#34;;&#xA;&#xA;const mod = parseModule(`export default {}`);&#xA;&#xA;const options = mod.exports.default.list = builders.functionCall(&#39;create&#39;, [1, 2, 3])&#xA;&#xA;console.log(mod.generateCode()) // export default { list: create([1, 2, 3]) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;High Level Helpers&lt;/h2&gt; &#xA;&lt;p&gt;We also experiments to provide a few high level helpers to make common tasks easier. You could import them from &lt;code&gt;magicast/helpers&lt;/code&gt;. They might be move to a separate package in the future.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { &#xA;  deepMergeObject,&#xA;  addNuxtModule,&#xA;  addVitePlugin,&#xA;  // ...&#xA;} from &#34;magicast/helpers&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend to check out the &lt;a href=&#34;https://raw.githubusercontent.com/unjs/magicast/main/src/helpers&#34;&gt;source code&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/unjs/magicast/main/test/helpers&#34;&gt;test cases&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Install latest LTS version of &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;a href=&#34;https://github.com/nodejs/corepack&#34;&gt;Corepack&lt;/a&gt; using &lt;code&gt;corepack enable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies using &lt;code&gt;pnpm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run interactive tests using &lt;code&gt;pnpm dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Made with 💛&lt;/p&gt; &#xA;&lt;p&gt;Published under &lt;a href=&#34;https://raw.githubusercontent.com/unjs/magicast/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- Badges --&gt;</summary>
  </entry>
</feed>