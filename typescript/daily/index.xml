<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-20T01:36:50Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raydium-io/raydium-sdk</title>
    <updated>2024-03-20T01:36:50Z</updated>
    <id>tag:github.com,2024-03-20:/raydium-io/raydium-sdk</id>
    <link href="https://github.com/raydium-io/raydium-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An SDK for building applications on top of Raydium.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Raydium SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@raydium-io/raydium-sdk&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@raydium-io/raydium-sdk.svg?style=flat&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An SDK for building applications on top of Raydium.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Yarn&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn add @raydium-io/raydium-sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install @raydium-io/raydium-sdk --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hosting JSON files&lt;/h2&gt; &#xA;&lt;h3&gt;Tokens List&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solana format: &lt;a href=&#34;https://api.raydium.io/v2/sdk/token/solana.mainnet.json&#34;&gt;https://api.raydium.io/v2/sdk/token/solana.mainnet.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Raydium format: &lt;a href=&#34;https://api.raydium.io/v2/sdk/token/raydium.mainnet.json&#34;&gt;https://api.raydium.io/v2/sdk/token/raydium.mainnet.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Token Icons&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/icons/{mint}.png&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Liquidity Pools List&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Includes all pubkeys that build transaction need&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.raydium.io/v2/sdk/liquidity/mainnet.json&#34;&gt;https://api.raydium.io/v2/sdk/liquidity/mainnet.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example of parse pool info&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Connection, PublicKey } from &#34;@solana/web3.js&#34;;&#xA;import { TOKEN_PROGRAM_ID } from &#34;@solana/spl-token&#34;;&#xA;import {&#xA;  TokenAccount,&#xA;  SPL_ACCOUNT_LAYOUT,&#xA;  LIQUIDITY_STATE_LAYOUT_V4,&#xA;} from &#34;@raydium-io/raydium-sdk&#34;;&#xA;import { OpenOrders } from &#34;@project-serum/serum&#34;;&#xA;import BN from &#34;bn.js&#34;;&#xA;&#xA;async function getTokenAccounts(connection: Connection, owner: PublicKey) {&#xA;  const tokenResp = await connection.getTokenAccountsByOwner(owner, {&#xA;    programId: TOKEN_PROGRAM_ID,&#xA;  });&#xA;&#xA;  const accounts: TokenAccount[] = [];&#xA;  for (const { pubkey, account } of tokenResp.value) {&#xA;    accounts.push({&#xA;      pubkey,&#xA;      accountInfo: SPL_ACCOUNT_LAYOUT.decode(account.data),&#xA;    });&#xA;  }&#xA;&#xA;  return accounts;&#xA;}&#xA;&#xA;// raydium pool id can get from api: https://api.raydium.io/v2/sdk/liquidity/mainnet.json&#xA;const SOL_USDC_POOL_ID = &#34;58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2&#34;;&#xA;const OPENBOOK_PROGRAM_ID = new PublicKey(&#xA;  &#34;srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX&#34;&#xA;);&#xA;&#xA;export async function parsePoolInfo() {&#xA;  const connection = new Connection({mainnet rpc node}, &#34;confirmed&#34;);&#xA;  const owner = new PublicKey(&#34;VnxDzsZ7chE88e9rB6UKztCt2HUwrkgCTx8WieWf5mM&#34;);&#xA;&#xA;  const tokenAccounts = await getTokenAccounts(connection, owner);&#xA;&#xA;  // example to get pool info&#xA;  const info = await connection.getAccountInfo(new PublicKey(SOL_USDC_POOL_ID));&#xA;  if (!info) return;&#xA;&#xA;  const poolState = LIQUIDITY_STATE_LAYOUT_V4.decode(info.data);&#xA;  const openOrders = await OpenOrders.load(&#xA;    connection,&#xA;    poolState.openOrders,&#xA;    OPENBOOK_PROGRAM_ID // OPENBOOK_PROGRAM_ID(marketProgramId) of each pool can get from api: https://api.raydium.io/v2/sdk/liquidity/mainnet.json&#xA;  );&#xA;&#xA;  const baseDecimal = 10 ** poolState.baseDecimal.toNumber(); // e.g. 10 ^ 6&#xA;  const quoteDecimal = 10 ** poolState.quoteDecimal.toNumber();&#xA;&#xA;  const baseTokenAmount = await connection.getTokenAccountBalance(&#xA;    poolState.baseVault&#xA;  );&#xA;  const quoteTokenAmount = await connection.getTokenAccountBalance(&#xA;    poolState.quoteVault&#xA;  );&#xA;&#xA;  const basePnl = poolState.baseNeedTakePnl.toNumber() / baseDecimal;&#xA;  const quotePnl = poolState.quoteNeedTakePnl.toNumber() / quoteDecimal;&#xA;&#xA;  const openOrdersBaseTokenTotal =&#xA;    openOrders.baseTokenTotal.toNumber() / baseDecimal;&#xA;  const openOrdersQuoteTokenTotal =&#xA;    openOrders.quoteTokenTotal.toNumber() / quoteDecimal;&#xA;&#xA;  const base =&#xA;    (baseTokenAmount.value?.uiAmount || 0) + openOrdersBaseTokenTotal - basePnl;&#xA;  const quote =&#xA;    (quoteTokenAmount.value?.uiAmount || 0) +&#xA;    openOrdersQuoteTokenTotal -&#xA;    quotePnl;&#xA;&#xA;  const denominator = new BN(10).pow(poolState.baseDecimal);&#xA;&#xA;  const addedLpAccount = tokenAccounts.find((a) =&amp;gt;&#xA;    a.accountInfo.mint.equals(poolState.lpMint)&#xA;  );&#xA;&#xA;  console.log(&#xA;    &#34;SOL_USDC pool info:&#34;,&#xA;    &#34;pool total base &#34; + base,&#xA;    &#34;pool total quote &#34; + quote,&#xA;&#xA;    &#34;base vault balance &#34; + baseTokenAmount.value.uiAmount,&#xA;    &#34;quote vault balance &#34; + quoteTokenAmount.value.uiAmount,&#xA;&#xA;    &#34;base tokens in openorders &#34; + openOrdersBaseTokenTotal,&#xA;    &#34;quote tokens in openorders  &#34; + openOrdersQuoteTokenTotal,&#xA;&#xA;    &#34;base token decimals &#34; + poolState.baseDecimal.toNumber(),&#xA;    &#34;quote token decimals &#34; + poolState.quoteDecimal.toNumber(),&#xA;    &#34;total lp &#34; + poolState.lpReserve.div(denominator).toString(),&#xA;&#xA;    &#34;addedLpAmount &#34; +&#xA;      (addedLpAccount?.accountInfo.amount.toNumber() || 0) / baseDecimal&#xA;  );&#xA;}&#xA;&#xA;parsePoolInfo();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Farm/Staking Pools List&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Includes all pubkeys that build transaction need&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.raydium.io/v2/sdk/farm/mainnet.json&#34;&gt;https://api.raydium.io/v2/sdk/farm/mainnet.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example of parse farm info&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Connection, PublicKey } from &#34;@solana/web3.js&#34;;&#xA;import { Farm } from &#34;@raydium-io/raydium-sdk&#34;;&#xA;import {&#xA;  JsonPairItemInfo,&#xA;  FarmPoolsJsonFile,&#xA;  FarmPoolJsonInfo,&#xA;  TokenInfo,&#xA;} from &#34;./types&#34;;&#xA;import axios from &#34;axios&#34;;&#xA;import Decimal from &#34;decimal.js&#34;;&#xA;&#xA;// raydium farm id can get from api: https://api.raydium.io/v2/sdk/farm-v2/mainnet.json&#xA;const SOL_USDC_FARM_ID = &#34;GUzaohfNuFbBqQTnPgPSNciv3aUvriXYjQduRE3ZkqFw&#34;;&#xA;&#xA;export async function demoFarm() {&#xA;  const connection = new Connection({mainnet rpc node}, &#34;confirmed&#34;);&#xA;  const owner = new PublicKey(&#34;VnxDzsZ7chE88e9rB6UKztCt2HUwrkgCTx8WieWf5mM&#34;);&#xA;&#xA;  console.log(&#34;fetching farms&#34;);&#xA;  const { data: farmData } = await axios.get&amp;lt;FarmPoolsJsonFile&amp;gt;(&#xA;    &#34;https://api.raydium.io/v2/sdk/farm-v2/mainnet.json&#34;&#xA;  );&#xA;&#xA;  console.log(&#34;fetching pairs&#34;);&#xA;  const { data: pairData } = await axios.get&amp;lt;JsonPairItemInfo[]&amp;gt;(&#xA;    &#34;https://api.raydium.io/v2/main/pairs&#34;&#xA;  );&#xA;&#xA;  const pairApr = Object.fromEntries(&#xA;    pairData.map((i) =&amp;gt; [&#xA;      i.ammId,&#xA;      { apr30d: i.apr30d, apr7d: i.apr7d, apr24h: i.apr24h },&#xA;    ])&#xA;  );&#xA;&#xA;  console.log(&#34;fetching liquidity&#34;);&#xA;  const { data: liquidityData } = await axios.get&amp;lt;{&#xA;    official: any[];&#xA;    unOfficial: any[];&#xA;  }&amp;gt;(&#34;https://api.raydium.io/v2/sdk/liquidity/mainnet.json&#34;);&#xA;&#xA;  const allLiquidity = [...liquidityData.official, ...liquidityData.unOfficial];&#xA;&#xA;  console.log(&#34;fetching token data&#34;);&#xA;  const { data: tokenData } = await axios.get&amp;lt;{&#xA;    official: TokenInfo[];&#xA;    unOfficial: TokenInfo[];&#xA;  }&amp;gt;(&#34;https://api.raydium.io/v2/sdk/token/raydium.mainnet.json&#34;);&#xA;&#xA;  const allToken: Map&amp;lt;string, TokenInfo&amp;gt; = [&#xA;    ...tokenData.official,&#xA;    ...tokenData.unOfficial,&#xA;  ].reduce((acc, cur) =&amp;gt; {&#xA;    acc.set(cur.mint, cur);&#xA;    return acc;&#xA;  }, new Map());&#xA;&#xA;  console.log(&#34;fetching token prices&#34;);&#xA;  const { data: tokenPrices } = await axios.get&amp;lt;{ [key: string]: number }&amp;gt;(&#xA;    &#34;https://api.raydium.io/v2/main/price&#34;&#xA;  );&#xA;&#xA;  console.log(&#34;fetching chain time&#34;);&#xA;  const { data: chainTimeData } = await axios.get&amp;lt;{&#xA;    chainTime: number;&#xA;    offset: number;&#xA;  }&amp;gt;(&#34;https://api.raydium.io/v2/sdk/token/raydium.mainnet.json&#34;);&#xA;&#xA;  const currentBlockChainDate =&#xA;    chainTimeData.chainTime * 1000 + chainTimeData.offset * 1000;&#xA;&#xA;  const allFarms: FarmPoolJsonInfo[] = Object.keys(farmData).reduce(&#xA;    // @ts-ignore&#xA;    (acc, cur) =&amp;gt; [...acc.concat(farmData[cur])],&#xA;    []&#xA;  );&#xA;&#xA;  const farmInfo = allFarms.find((farm) =&amp;gt; farm.id === SOL_USDC_FARM_ID)!;&#xA;  const pairInfo = pairData.find((p) =&amp;gt; p.lpMint === farmInfo.lpMint)!;&#xA;  const liquidityInfo = allLiquidity.find((p) =&amp;gt; p.lpMint === farmInfo.lpMint)!;&#xA;&#xA;  const farmInfoWithKeys = {&#xA;    ...farmInfo,&#xA;    id: new PublicKey(farmInfo.id),&#xA;    programId: new PublicKey(farmInfo.programId),&#xA;    baseMint: new PublicKey(farmInfo.baseMint),&#xA;    quoteMint: new PublicKey(farmInfo.quoteMint),&#xA;    lpMint: new PublicKey(farmInfo.lpMint),&#xA;    authority: new PublicKey(farmInfo.authority),&#xA;    lpVault: new PublicKey(farmInfo.lpVault),&#xA;    rewardInfos: farmInfo.rewardInfos.map((r) =&amp;gt; ({&#xA;      ...r,&#xA;      rewardMint: new PublicKey(r.rewardMint),&#xA;      rewardVault: new PublicKey(r.rewardVault),&#xA;    })),&#xA;  };&#xA;&#xA;  console.log(&#34;decode farm data&#34;);&#xA;  const parsedFarmInfo = (&#xA;    await Farm.fetchMultipleInfoAndUpdate({&#xA;      connection,&#xA;      pools: [farmInfoWithKeys],&#xA;      owner,&#xA;      config: { commitment: &#34;confirmed&#34; },&#xA;    })&#xA;  )[SOL_USDC_FARM_ID];&#xA;&#xA;  const tvl = new Decimal(parsedFarmInfo.lpVault.amount.toString())&#xA;    .div(10 ** liquidityInfo.lpDecimals)&#xA;    .mul(pairInfo.lpPrice || 0);&#xA;&#xA;  const samples = await connection.getRecentPerformanceSamples(4);&#xA;  const slotList = samples.map((item) =&amp;gt; item.numSlots);&#xA;  const blockSlotCountForSecond =&#xA;    slotList.reduce((a, b) =&amp;gt; a + b, 0) / slotList.length / 60;&#xA;&#xA;  const rewardsApr = parsedFarmInfo.state.rewardInfos.map((r: any, idx) =&amp;gt; {&#xA;    if (farmInfo.version === 6) {&#xA;      const { rewardPerSecond, rewardOpenTime, rewardEndTime, rewardMint } = r;&#xA;      const isRewardBeforeStart =&#xA;        rewardOpenTime.toNumber() * 1000 &amp;lt; currentBlockChainDate;&#xA;      const isRewardAfterEnd =&#xA;        rewardEndTime.toNumber() * 1000 &amp;gt; currentBlockChainDate;&#xA;      if (isRewardBeforeStart || isRewardAfterEnd) return 0;&#xA;&#xA;      if (!rewardMint) return 0;&#xA;      const rewardPrice = tokenPrices[rewardMint.toString()] || 0;&#xA;      if (!rewardPrice) return 0;&#xA;      const rewardToken = allToken.get(rewardMint.toString())!;&#xA;      if (!rewardToken) return 0;&#xA;&#xA;      const reward = new Decimal(rewardPerSecond.toString())&#xA;        .div(10 ** rewardToken.decimals)&#xA;        .mul(60 * 60 * 24 * 365)&#xA;        .mul(rewardPrice);&#xA;&#xA;      const tvl = new Decimal(parsedFarmInfo.lpVault.amount.toString())&#xA;        .div(10 ** liquidityInfo.lpDecimals)&#xA;        .mul(pairInfo.lpPrice || 0);&#xA;&#xA;      const apr = reward.div(tvl);&#xA;&#xA;      return apr.toNumber();&#xA;    }&#xA;&#xA;    const rewardMint = farmInfo.rewardInfos[idx].rewardMint;&#xA;    const rewardPrice = tokenPrices[rewardMint] || 0;&#xA;    const rewardToken = allToken.get(rewardMint)!;&#xA;    const reward = new Decimal(r.perSlotReward.toString())&#xA;      .div(10 ** rewardToken.decimals)&#xA;      .mul(blockSlotCountForSecond * 60 * 60 * 24 * 365)&#xA;      .mul(rewardPrice);&#xA;&#xA;    const apr = reward.div(tvl);&#xA;&#xA;    return apr.toNumber();&#xA;  });&#xA;&#xA;  const totalApr24h = new Decimal(rewardsApr.reduce((acc, cur) =&amp;gt; acc + cur, 0))&#xA;    .mul(100)&#xA;    .add(pairApr[liquidityInfo.id].apr24h);&#xA;&#xA;  const userDeposited = new Decimal(&#xA;    parsedFarmInfo.ledger?.deposited.toString() || 0&#xA;  ).div(10 ** liquidityInfo.lpDecimals);&#xA;&#xA;  console.log({&#xA;    userDeposited: userDeposited.toString(),&#xA;    tvl: tvl.toString(),&#xA;    totalApr24h: totalApr24h.toString(),&#xA;    rewards: rewardsApr&#xA;      .filter((apr) =&amp;gt; apr &amp;gt; 0)&#xA;      .map((apr, idx) =&amp;gt; ({&#xA;        apr: apr * 100 + &#34;%&#34;,&#xA;        rewardToken: allToken.get(&#xA;          farmInfo.rewardInfos[idx].rewardMint ||&#xA;            // @ts-ignore&#xA;            parsedFarmInfo.state.rewardInfos[idx].rewardMint.toString()&#xA;        )!.symbol,&#xA;      })),&#xA;  });&#xA;}&#xA;&#xA;demoFarm();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;types&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export interface JsonPairItemInfo {&#xA;  ammId: string;&#xA;  apr24h: number;&#xA;  apr7d: number;&#xA;  apr30d: number;&#xA;  fee7d: number;&#xA;  fee7dQuote: number;&#xA;  fee24h: number;&#xA;  fee24hQuote: number;&#xA;  fee30d: number;&#xA;  fee30dQuote: number;&#xA;  liquidity: number;&#xA;  lpMint: string;&#xA;  lpPrice: number | null;&#xA;  market: string;&#xA;  name: string;&#xA;  official: boolean;&#xA;  price: number;&#xA;  tokenAmountCoin: number;&#xA;  tokenAmountLp: number;&#xA;  tokenAmountPc: number;&#xA;  volume7d: number;&#xA;  volume7dQuote: number;&#xA;  volume24h: number;&#xA;  volume24hQuote: number;&#xA;  volume30d: number;&#xA;  volume30dQuote: number;&#xA;}&#xA;&#xA;export interface APIRewardInfo {&#xA;  rewardMint: string;&#xA;  rewardVault: string;&#xA;  rewardOpenTime: number;&#xA;  rewardEndTime: number;&#xA;  rewardPerSecond: string | number;&#xA;  rewardSender?: string;&#xA;  rewardType: &#34;Standard SPL&#34; | &#34;Option tokens&#34;;&#xA;}&#xA;&#xA;export interface FarmPoolJsonInfo {&#xA;  id: string;&#xA;  lpMint: string;&#xA;  lpVault: string;&#xA;&#xA;  baseMint: string;&#xA;  quoteMint: string;&#xA;  name: string;&#xA;&#xA;  version: number;&#xA;  programId: string;&#xA;&#xA;  authority: string;&#xA;  creator?: string;&#xA;  rewardInfos: APIRewardInfo[];&#xA;  upcoming: boolean;&#xA;&#xA;  rewardPeriodMin?: number; // v6 &#39;7-90 days&#39;s     7 * 24 * 60 * 60 seconds&#xA;  rewardPeriodMax?: number; // v6 &#39;7-90 days&#39;s     90 * 24 * 60 * 60 seconds&#xA;  rewardPeriodExtend?: number; // v6 &#39;end before 72h&#39;s    72 * 60 * 60 seconds&#xA;&#xA;  local: boolean; // only if it is in localstorage(create just by user)&#xA;  category: &#34;stake&#34; | &#34;raydium&#34; | &#34;fusion&#34; | &#34;ecosystem&#34;; // add by UI for unify the interface&#xA;}&#xA;&#xA;export type FarmPoolsJsonFile = {&#xA;  name: string;&#xA;  version: unknown;&#xA;  stake: Omit&amp;lt;FarmPoolJsonInfo, &#34;category&#34;&amp;gt;[];&#xA;  raydium: Omit&amp;lt;FarmPoolJsonInfo, &#34;category&#34;&amp;gt;[];&#xA;  fusion: Omit&amp;lt;FarmPoolJsonInfo, &#34;category&#34;&amp;gt;[];&#xA;  ecosystem: Omit&amp;lt;FarmPoolJsonInfo, &#34;category&#34;&amp;gt;[];&#xA;};&#xA;&#xA;export interface TokenInfo {&#xA;  symbol: string;&#xA;  name: string;&#xA;  mint: string;&#xA;  decimals: number;&#xA;  extensions: {&#xA;    coingeckoId?: string;&#xA;  };&#xA;  icon: string;&#xA;  hasFreeze: number;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Program IDs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Mainnet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMM / Liquidity&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Farm / Staking&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Farm / Staking&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMM Route&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Serum&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Marshmallow&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Full layout type inference&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raydium-io/raydium-sdk/master/snapshots/marshmallow/1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/raydium-io/raydium-sdk/master/snapshots/marshmallow/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn install &amp;amp;&amp;amp; yarn install-peers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ethers-io/ethers.js/tree/master/packages/bignumber&#34;&gt;https://github.com/ethers-io/ethers.js/tree/master/packages/bignumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pancakeswap/pancake-swap-sdk&#34;&gt;https://github.com/pancakeswap/pancake-swap-sdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/project-serum/serum-ts&#34;&gt;https://github.com/project-serum/serum-ts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/advanced/lifecycle-scripts&#34;&gt;https://yarnpkg.com/advanced/lifecycle-scripts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>anza-xyz/wallet-adapter</title>
    <updated>2024-03-20T01:36:50Z</updated>
    <id>tag:github.com,2024-03-20:/anza-xyz/wallet-adapter</id>
    <link href="https://github.com/anza-xyz/wallet-adapter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modular TypeScript wallet adapters and components for Solana applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wallet Adapter&lt;/h1&gt; &#xA;&lt;p&gt;Modular TypeScript wallet adapters and components for Solana applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://anza-xyz.github.io/wallet-adapter/example&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://anza-xyz.github.io/wallet-adapter/&#34;&gt;TypeScript Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anza-xyz/wallet-adapter/raw/master/APP.md&#34;&gt;For Solana Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anza-xyz/wallet-adapter/raw/master/WALLET.md&#34;&gt;For Solana Wallets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anza-xyz/wallet-adapter/raw/master/PACKAGES.md&#34;&gt;Packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anza-xyz/wallet-adapter/raw/master/FAQ.md&#34;&gt;FAQ (Frequently Asked Questions)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anza-xyz/wallet-adapter/raw/master/BUILD.md&#34;&gt;Build from Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/anza-xyz/wallet-adapter/master/wallets.png&#34; alt=&#34;Wallets&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>goenning/google-indexing-script</title>
    <updated>2024-03-20T01:36:50Z</updated>
    <id>tag:github.com,2024-03-20:/goenning/google-indexing-script</id>
    <link href="https://github.com/goenning/google-indexing-script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Script to get your site indexed on Google in less than 48 hours&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Indexing Script&lt;/h1&gt; &#xA;&lt;p&gt;Use this script to get your entire site indexed on Google in less than 48 hours. No tricks, no hacks, just a simple script and a Google API.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about the motivation behind it and how it works in this blog post &lt;a href=&#34;https://seogets.com/blog/google-indexing-script&#34;&gt;https://seogets.com/blog/google-indexing-script&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Indexing != Ranking. This will not help your page rank on Google, it&#39;ll just let Google know about the existence of your pages.&lt;/li&gt; &#xA;  &lt;li&gt;This script uses &lt;a href=&#34;https://developers.google.com/search/apis/indexing-api/v3/quickstart&#34;&gt;Google Indexing API&lt;/a&gt;. We do not recommend using this script on spam/low-quality content.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An account on &lt;a href=&#34;https://search.google.com/search-console/about&#34;&gt;Google Search Console&lt;/a&gt; with the verified sites you want to index&lt;/li&gt; &#xA; &lt;li&gt;An account on &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;Google Cloud&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow this &lt;a href=&#34;https://developers.google.com/search/apis/indexing-api/v3/prereqs&#34;&gt;guide&lt;/a&gt; from Google. By the end of it, you should have a project on Google Cloud with the Indexing API enabled, a service account with the &lt;code&gt;Owner&lt;/code&gt; permission on your sites.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you enable both &lt;a href=&#34;https://console.cloud.google.com/apis/api/searchconsole.googleapis.com&#34;&gt;&lt;code&gt;Google Search Console API&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://console.cloud.google.com/apis/api/indexing.googleapis.com&#34;&gt;&lt;code&gt;Web Search Indexing API&lt;/code&gt;&lt;/a&gt; on your &lt;a href=&#34;https://console.cloud.google.com/apis/dashboard&#34;&gt;Google Project ➤ API Services ➤ Enabled API &amp;amp; Services&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goenning/google-indexing-script/issues/2&#34;&gt;Download the JSON&lt;/a&gt; file with the credentials of your service account and save it in the same folder as the script. The file should be named &lt;code&gt;service_account.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using CLI&lt;/h3&gt; &#xA;&lt;p&gt;Install the cli globally on your machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g google-indexing-script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the repository&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository to your machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/goenning/google-indexing-script.git&#xA;cd google-indexing-script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install and build the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run build&#xA;npm i -g .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Ensure you are using an up-to-date Node.js version, with a preference for v20 or later. Check your current version with &lt;code&gt;node -v&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;With &lt;code&gt;service_account.json&lt;/code&gt; &lt;i&gt;(recommended)&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Create a &lt;code&gt;.gis&lt;/code&gt; directory in your home folder and move the &lt;code&gt;service_account.json&lt;/code&gt; file there.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/.gis&#xA;mv service_account.json ~/.gis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Run the script with the domain or url you want to index.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gis &amp;lt;domain or url&amp;gt;&#xA;# example&#xA;gis seogets.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Here are some other ways to run the script:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# custom path to service_account.json&#xA;gis seogets.com --path /path/to/service_account.json&#xA;# long version command&#xA;google-indexing-script seogets.com&#xA;# cloned repository&#xA;npm run index seogets.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With environment variables&lt;/summary&gt; &#xA; &lt;p&gt;Open &lt;code&gt;service_account.json&lt;/code&gt; and copy the &lt;code&gt;client_email&lt;/code&gt; and &lt;code&gt;private_key&lt;/code&gt; values.&lt;/p&gt; &#xA; &lt;p&gt;Run the script with the domain or url you want to index.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GIS_CLIENT_EMAIL=your-client-email GIS_PRIVATE_KEY=your-private-key gis seogets.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With arguments &lt;i&gt;(not recommended)&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Open &lt;code&gt;service_account.json&lt;/code&gt; and copy the &lt;code&gt;client_email&lt;/code&gt; and &lt;code&gt;private_key&lt;/code&gt; values.&lt;/p&gt; &#xA; &lt;p&gt;Once you have the values, run the script with the domain or url you want to index, the client email and the private key.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gis seogets.com --client-email your-client-email --private-key your-private-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;As a npm module&lt;/summary&gt; &#xA; &lt;p&gt;You can also use the script as a &lt;a href=&#34;https://www.npmjs.com/package/google-indexing-script&#34;&gt;npm module&lt;/a&gt; in your own project.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i google-indexing-script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { index } from &#39;google-indexing-script&#39;&#xA;import serviceAccount from &#39;./service_account.json&#39;&#xA;&#xA;index(&#39;seogets.com&#39;, {&#xA;  client_email: serviceAccount.client_email,&#xA;  private_key: serviceAccount.private_key&#xA;})&#xA;  .then(console.log)&#xA;  .catch(console.error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Read the &lt;a href=&#34;https://paka.dev/npm/google-indexing-script&#34;&gt;API documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Here&#39;s an example of what you should expect:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/goenning/google-indexing-script/main/output.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Your site must have 1 or more sitemaps submitted to Google Search Console. Otherwise, the script will not be able to find the pages to index.&lt;/li&gt; &#xA;  &lt;li&gt;You can run the script as many times as you want. It will only index the pages that are not already indexed.&lt;/li&gt; &#xA;  &lt;li&gt;Sites with a large number of pages might take a while to index, be patient.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;h2&gt;💖 Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;This project is sponsored by &lt;a href=&#34;https://seogets.com&#34;&gt;SEO Gets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://seogets.com/og.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>