<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-11T01:37:07Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leerob/next-saas-starter</title>
    <updated>2024-12-11T01:37:07Z</updated>
    <id>tag:github.com,2024-12-11:/leerob/next-saas-starter</id>
    <link href="https://github.com/leerob/next-saas-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get started quickly with Next.js, Postgres, Stripe, and shadcn/ui.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Next.js SaaS Starter&lt;/h1&gt; &#xA;&lt;p&gt;This is a starter template for building a SaaS application using &lt;strong&gt;Next.js&lt;/strong&gt; with support for authentication, Stripe integration for payments, and a dashboard for logged-in users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo: &lt;a href=&#34;https://next-saas-start.vercel.app/&#34;&gt;https://next-saas-start.vercel.app/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why did I make this?&lt;/summary&gt; &#xA; &lt;p&gt;In 2020, I made a course called &#34;React 2025&#34; which showed how to build a SaaS application with Next.js, Stripe, and other tools.&lt;/p&gt; &#xA; &lt;p&gt;Well, it&#39;s almost 2025 and React 19 has brought so many amazing new features I didn&#39;t predict! This repo is a demonstration of the latest React and Next.js patterns. These patterns can drastically simplify some common tasks in building your SaaS, like building forms, talking to your database, and more.&lt;/p&gt; &#xA; &lt;p&gt;For example, React now has built in hooks like &lt;code&gt;useActionState&lt;/code&gt; to handle inline form errors and pending states. React Server Actions can replace a lot of boilerplate code needed to call an API Route from the client-side. And finally, the React &lt;code&gt;use&lt;/code&gt; hook combined with Next.js makes it incredibly easy to build a powerful &lt;code&gt;useUser()&lt;/code&gt; hook.&lt;/p&gt; &#xA; &lt;p&gt;We&#39;re able to fetch the user from our Postgres database in the root layout, but &lt;em&gt;not&lt;/em&gt; await the &lt;code&gt;Promise&lt;/code&gt;. Instead, we forward the &lt;code&gt;Promise&lt;/code&gt; to a React context provider, where we can &#34;unwrap&#34; it and awaited the streamed in data. This means we can have the best of both worlds: easy code to fetch data from our database (e.g. &lt;code&gt;getUser()&lt;/code&gt;) and a React hook we can use in Client Components (e.g. &lt;code&gt;useUser()&lt;/code&gt;).&lt;/p&gt; &#xA; &lt;p&gt;Fun fact: the majority of the UI for this application was built with &lt;a href=&#34;https://v0.dev&#34;&gt;v0&lt;/a&gt; ðŸ¤¯ &lt;a href=&#34;https://x.com/leeerob/status/1835777934361084316&#34;&gt;More details here&lt;/a&gt; if you want to learn about this repo.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marketing landing page (&lt;code&gt;/&lt;/code&gt;) with animated Terminal element&lt;/li&gt; &#xA; &lt;li&gt;Pricing page (&lt;code&gt;/pricing&lt;/code&gt;) which connects to Stripe Checkout&lt;/li&gt; &#xA; &lt;li&gt;Dashboard pages with CRUD operations on users/teams&lt;/li&gt; &#xA; &lt;li&gt;Basic RBAC with Owner and Member roles&lt;/li&gt; &#xA; &lt;li&gt;Subscription management with Stripe Customer Portal&lt;/li&gt; &#xA; &lt;li&gt;Email/password authentication with JWTs stored to cookies&lt;/li&gt; &#xA; &lt;li&gt;Global middleware to protect logged-in routes&lt;/li&gt; &#xA; &lt;li&gt;Local middleware to protect Server Actions or validate Zod schemas&lt;/li&gt; &#xA; &lt;li&gt;Activity logging system for any user events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tech Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;Postgres&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ORM&lt;/strong&gt;: &lt;a href=&#34;https://orm.drizzle.team/&#34;&gt;Drizzle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payments&lt;/strong&gt;: &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UI Library&lt;/strong&gt;: &lt;a href=&#34;https://ui.shadcn.com/&#34;&gt;shadcn/ui&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/leerob/next-saas-starter&#xA;cd next-saas-starter&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;Use the included setup script to create your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm db:setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the database migrations and seed the database with a default user and team:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm db:migrate&#xA;pnpm db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the following user and team:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User: &lt;code&gt;test@test.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;admin123&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can, of course, create new users as well through &lt;code&gt;/sign-up&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, run the Next.js development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to see the app in action.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, you can listen for Stripe webhooks locally through their CLI to handle subscription change events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stripe listen --forward-to localhost:3000/api/stripe/webhook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing Payments&lt;/h2&gt; &#xA;&lt;p&gt;To test Stripe payments, use the following test card details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Card Number: &lt;code&gt;4242 4242 4242 4242&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Expiration: Any future date&lt;/li&gt; &#xA; &lt;li&gt;CVC: Any 3-digit number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Going to Production&lt;/h2&gt; &#xA;&lt;p&gt;When you&#39;re ready to deploy your SaaS application to production, follow these steps:&lt;/p&gt; &#xA;&lt;h3&gt;Set up a production Stripe webhook&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the Stripe Dashboard and create a new webhook for your production environment.&lt;/li&gt; &#xA; &lt;li&gt;Set the endpoint URL to your production API route (e.g., &lt;code&gt;https://yourdomain.com/api/stripe/webhook&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Select the events you want to listen for (e.g., &lt;code&gt;checkout.session.completed&lt;/code&gt;, &lt;code&gt;customer.subscription.updated&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Deploy to Vercel&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Push your code to a GitHub repository.&lt;/li&gt; &#xA; &lt;li&gt;Connect your repository to Vercel and deploy it.&lt;/li&gt; &#xA; &lt;li&gt;Follow the Vercel deployment process, which will guide you through setting up your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Add environment variables&lt;/h3&gt; &#xA;&lt;p&gt;In your Vercel project settings (or during deployment), add all the necessary environment variables. Make sure to update the values for the production environment, including:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;BASE_URL&lt;/code&gt;: Set this to your production domain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STRIPE_SECRET_KEY&lt;/code&gt;: Use your Stripe secret key for the production environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STRIPE_WEBHOOK_SECRET&lt;/code&gt;: Use the webhook secret from the production webhook you created in step 1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POSTGRES_URL&lt;/code&gt;: Set this to your production database URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTH_SECRET&lt;/code&gt;: Set this to a random string. &lt;code&gt;openssl rand -base64 32&lt;/code&gt; will generate one.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other Templates&lt;/h2&gt; &#xA;&lt;p&gt;While this template is intentionally minimal and to be used as a learning resource, there are other paid versions in the community which are more full-featured:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://achromatic.dev&#34;&gt;https://achromatic.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shipfa.st&#34;&gt;https://shipfa.st&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://makerkit.dev&#34;&gt;https://makerkit.dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>primefaces/primeng</title>
    <updated>2024-12-11T01:37:07Z</updated>
    <id>tag:github.com,2024-12-11:/primefaces/primeng</id>
    <link href="https://github.com/primefaces/primeng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Most Complete Angular UI Component Library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/primeng&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/primeng.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/primeng&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/primeng.svg?sanitize=true&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/primefaces/primeng/actions/workflows/node.js.yml&#34;&gt;&lt;img src=&#34;https://github.com/primefaces/primeng/workflows/NodeJS%20CI/badge.svg?sanitize=true&#34; alt=&#34;Actions CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/gzKFYnpmCY&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/557940238991753223.svg?color=7289da&amp;amp;label=chat&amp;amp;logo=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/orgs/primefaces/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions-search?query=org%3Aprimefaces&amp;amp;logo=github&amp;amp;label=Prime%20Discussions&amp;amp;link=https%3A%2F%2Fgithub.com%2Forgs%2Fprimefaces%2Fdiscussions&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://primeng.org&#34;&gt;&lt;img src=&#34;https://www.primefaces.org/static/social/primeng-preview.jpg&#34; alt=&#34;PrimeNG Hero&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Website&lt;/h3&gt; &#xA;&lt;p&gt;PrimeNG is a rich set of open source UI Components for Angular. Visit the &lt;a href=&#34;https://primeng.org/&#34;&gt;PrimeNG website&lt;/a&gt; for interactive demos, comprehensive documentation and additional resources.&lt;/p&gt;</summary>
  </entry>
</feed>