<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-22T01:42:55Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pastelsky/tsdocs</title>
    <updated>2023-12-22T01:42:55Z</updated>
    <id>tag:github.com,2023-12-22:/pastelsky/tsdocs</id>
    <link href="https://github.com/pastelsky/tsdocs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Browse type documentation for JS libraries&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tsdocs.dev&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pastelsky/tsdocs/main/public/android-chrome-512x512.png&#34; width=&#34;256&#34; height=&#34;256&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tsdocs.dev&#34;&gt;TSDocs.dev&lt;/a&gt; is a service that lets you browse type reference documentation for Javascript packages.&lt;/p&gt; &#xA;&lt;p&gt;It works even with packages that aren&#39;t written in Typescript (sourced from DefinitelyTyped) or when packages re-export types from other packages.&lt;/p&gt; &#xA;&lt;p&gt;Its depends heavily on a customized version of &lt;a href=&#34;https://github.com/TypeStrong/typedoc&#34;&gt;typedoc&lt;/a&gt; for generating API docs documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Writing good documentation for your library&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tsdocs.dev&lt;/code&gt; extracts documentation from the type definitions that ships with libraries. In case a type definition is unavailable, it searches &lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped&#34;&gt;DefinitelyTyped&lt;/a&gt; for the closest equivalent.&lt;/p&gt; &#xA;&lt;p&gt;For an example, see documentation for d3 ‚Äî &lt;a href=&#34;https://tsdocs.dev/docs/d3/7.8.5/classes/FormatSpecifier.html&#34;&gt;https://tsdocs.dev/docs/d3/7.8.5/classes/FormatSpecifier.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Internally tsdocs.dev uses a customized version of typedoc to parse and render documentation, which works on docstrings and markdown &lt;a href=&#34;https://typedoc.org/guides/doccomments/&#34;&gt;https://typedoc.org/guides/doccomments/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure that you have &lt;a href=&#34;https://redis.io/docs/install/install-redis/&#34;&gt;redis installed&lt;/a&gt; and running locally&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>unjs/h3</title>
    <updated>2023-12-22T01:42:55Z</updated>
    <id>tag:github.com,2023-12-22:/unjs/h3</id>
    <link href="https://github.com/unjs/h3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö°Ô∏è Minimal H(TTP) framework built for high performance and portability&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;H3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.com/package/h3&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/h3?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/h3&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/h3?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/result?p=h3&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/h3?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;bundle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/unjs/h3&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/unjs/h3/main?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unjs/h3/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/unjs/h3.svg?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdocs.io/package/h3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/jsDocs.io-reference-18181B?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;JSDocs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;H3 (pronounced as /e…™t ÉŒ∏riÀê/, like h-3) is a minimal h(ttp) framework built for high performance and portability.&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;a href=&#34;https://stackblitz.com/github/unjs/h3/tree/main/playground&#34;&gt;Online Playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;a href=&#34;https://stackblitz.com/github/unjs/h3/tree/main/examples&#34;&gt;Online Examples Playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;‚úîÔ∏è &amp;nbsp;&lt;strong&gt;Portable:&lt;/strong&gt; Works perfectly in Serverless, Workers, and Node.js&lt;/p&gt; &#xA;&lt;p&gt;‚úîÔ∏è &amp;nbsp;&lt;strong&gt;Minimal:&lt;/strong&gt; Small and tree-shakable&lt;/p&gt; &#xA;&lt;p&gt;‚úîÔ∏è &amp;nbsp;&lt;strong&gt;Modern:&lt;/strong&gt; Native promise support&lt;/p&gt; &#xA;&lt;p&gt;‚úîÔ∏è &amp;nbsp;&lt;strong&gt;Extendable:&lt;/strong&gt; Ships with a set of composable utilities but can be extended&lt;/p&gt; &#xA;&lt;p&gt;‚úîÔ∏è &amp;nbsp;&lt;strong&gt;Router:&lt;/strong&gt; Super fast route matching using &lt;a href=&#34;https://github.com/unjs/radix3&#34;&gt;unjs/radix3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚úîÔ∏è &amp;nbsp;&lt;strong&gt;Compatible:&lt;/strong&gt; Compatibility layer with node/connect/express middleware&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using npm&#xA;npm install h3&#xA;&#xA;# Using yarn&#xA;yarn add h3&#xA;&#xA;# Using pnpm&#xA;pnpm add h3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Nightly Releases&lt;/summary&gt; &#xA; &lt;p&gt;If you are directly using &lt;code&gt;h3&lt;/code&gt; as a dependency:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;dependencies&#34;: {&#xA;    &#34;h3&#34;: &#34;npm:h3-nightly@latest&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are using a framework (&lt;a href=&#34;https://nuxt.com/&#34;&gt;Nuxt&lt;/a&gt; or &lt;a href=&#34;https://nitro.unjs.io/&#34;&gt;Nitro&lt;/a&gt;) that is using &lt;code&gt;h3&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;p&gt;pnpm and yarn:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;resolutions&#34;: {&#xA;    &#34;h3&#34;: &#34;npm:h3-nightly@latest&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;npm:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;overrides&#34;: {&#xA;    &#34;h3&#34;: &#34;npm:h3-nightly@latest&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure to recreate lockfile and &lt;code&gt;node_modules&lt;/code&gt; after reinstall to avoid hoisting issues.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createServer } from &#34;node:http&#34;;&#xA;import { createApp, eventHandler, toNodeListener } from &#34;h3&#34;;&#xA;&#xA;const app = createApp();&#xA;app.use(&#xA;  &#34;/&#34;,&#xA;  eventHandler(() =&amp;gt; &#34;Hello world!&#34;),&#xA;);&#xA;&#xA;createServer(toNodeListener(app)).listen(process.env.PORT || 3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using &lt;a href=&#34;https://github.com/unjs/listhen&#34;&gt;listhen&lt;/a&gt; for an elegant listener:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createApp, eventHandler, toNodeListener } from &#34;h3&#34;;&#xA;import { listen } from &#34;listhen&#34;;&#xA;&#xA;const app = createApp();&#xA;app.use(&#xA;  &#34;/&#34;,&#xA;  eventHandler(() =&amp;gt; &#34;Hello world!&#34;),&#xA;);&#xA;&#xA;listen(toNodeListener(app));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Router&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; instance created by &lt;code&gt;h3&lt;/code&gt; uses a middleware stack (see &lt;a href=&#34;https://raw.githubusercontent.com/unjs/h3/main/src/app.ts&#34;&gt;how it works&lt;/a&gt;) with the ability to match route prefix and apply matched middleware.&lt;/p&gt; &#xA;&lt;p&gt;To opt-in using a more advanced and convenient routing system, we can create a router instance and register it to app instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createApp, eventHandler, createRouter } from &#34;h3&#34;;&#xA;&#xA;const app = createApp();&#xA;&#xA;const router = createRouter()&#xA;  .get(&#xA;    &#34;/&#34;,&#xA;    eventHandler(() =&amp;gt; &#34;Hello World!&#34;),&#xA;  )&#xA;  .get(&#xA;    &#34;/hello/:name&#34;,&#xA;    eventHandler((event) =&amp;gt; `Hello ${event.context.params.name}!`),&#xA;  );&#xA;&#xA;app.use(router);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; We can register the same route more than once with different methods.&lt;/p&gt; &#xA;&lt;p&gt;Routes are internally stored in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_tree&#34;&gt;Radix Tree&lt;/a&gt; and matched using &lt;a href=&#34;https://github.com/unjs/radix3&#34;&gt;unjs/radix3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For using nested routers, see &lt;a href=&#34;https://raw.githubusercontent.com/unjs/h3/main/examples/nested-router.ts&#34;&gt;this example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More app usage examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Handle can directly return object or Promise&amp;lt;object&amp;gt; for JSON response&#xA;app.use(&#xA;  &#34;/api&#34;,&#xA;  eventHandler((event) =&amp;gt; ({ url: event.node.req.url })),&#xA;);&#xA;&#xA;// We can have better matching other than quick prefix match&#xA;app.use(&#xA;  &#34;/odd&#34;,&#xA;  eventHandler(() =&amp;gt; &#34;Is odd!&#34;),&#xA;  { match: (url) =&amp;gt; url.substr(1) % 2 },&#xA;);&#xA;&#xA;// Handle can directly return string for HTML response&#xA;app.use(eventHandler(() =&amp;gt; &#34;&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;&#34;));&#xA;&#xA;// We can chain calls to .use()&#xA;app&#xA;  .use(&#xA;    &#34;/1&#34;,&#xA;    eventHandler(() =&amp;gt; &#34;&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;&#34;),&#xA;  )&#xA;  .use(&#xA;    &#34;/2&#34;,&#xA;    eventHandler(() =&amp;gt; &#34;&amp;lt;h1&amp;gt;Goodbye!&amp;lt;/h1&amp;gt;&#34;),&#xA;  );&#xA;&#xA;// We can proxy requests and rewrite cookie&#39;s domain and path&#xA;app.use(&#xA;  &#34;/api&#34;,&#xA;  eventHandler((event) =&amp;gt;&#xA;    proxyRequest(event, &#34;https://example.com&#34;, {&#xA;      // f.e. keep one domain unchanged, rewrite one domain and remove other domains&#xA;      cookieDomainRewrite: {&#xA;        &#34;example.com&#34;: &#34;example.com&#34;,&#xA;        &#34;example.com&#34;: &#34;somecompany.co.uk&#34;,&#xA;        &#34;*&#34;: &#34;&#34;,&#xA;      },&#xA;      cookiePathRewrite: {&#xA;        &#34;/&#34;: &#34;/api&#34;,&#xA;      },&#xA;    }),&#xA;  ),&#xA;);&#xA;&#xA;// Legacy middleware with 3rd argument are automatically promisified&#xA;app.use(&#xA;  fromNodeMiddleware((req, res, next) =&amp;gt; {&#xA;    req.setHeader(&#34;x-foo&#34;, &#34;bar&#34;);&#xA;    next();&#xA;  }),&#xA;);&#xA;&#xA;// Lazy loaded routes using { lazy: true }&#xA;app.use(&#34;/big&#34;, () =&amp;gt; import(&#34;./big-handler&#34;), { lazy: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;p&gt;H3 has a concept of composable utilities that accept &lt;code&gt;event&lt;/code&gt; (from &lt;code&gt;eventHandler((event) =&amp;gt; {})&lt;/code&gt;) as their first argument. This has several performance benefits over injecting them to &lt;code&gt;event&lt;/code&gt; or &lt;code&gt;app&lt;/code&gt; instances in global middleware commonly used in Node.js frameworks, such as Express. This concept means only required code is evaluated and bundled, and the rest of the utilities can be tree-shaken when not used.&lt;/p&gt; &#xA;&lt;p&gt;üëâ You can check list of exported built-in utils from &lt;a href=&#34;https://www.jsdocs.io/package/h3#package-functions&#34;&gt;JSDocs Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Body&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;readRawBody(event, encoding?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;readBody(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;readValidatedBody(event, validate)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;readMultipartFormData(event)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Request&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;getQuery(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getValidatedQuery(event, validate)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRouterParams(event, { decode? })&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRouterParam(event, name, { decode? })&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getValidatedRouterParams(event, validate, { decode? })&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getMethod(event, default?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isMethod(event, expected, allowHead?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assertMethod(event, expected, allowHead?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRequestHeaders(event, headers)&lt;/code&gt; (alias: &lt;code&gt;getHeaders&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRequestHeader(event, name)&lt;/code&gt; (alias: &lt;code&gt;getHeader&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRequestURL(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRequestHost(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRequestProtocol(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRequestPath(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getRequestIP(event, { xForwardedFor: boolean })&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Response&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;send(event, data, type?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sendNoContent(event, code = 204)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setResponseStatus(event, status)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getResponseStatus(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getResponseStatusText(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getResponseHeaders(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getResponseHeader(event, name)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setResponseHeaders(event, headers)&lt;/code&gt; (alias: &lt;code&gt;setHeaders&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setResponseHeader(event, name, value)&lt;/code&gt; (alias: &lt;code&gt;setHeader&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appendResponseHeaders(event, headers)&lt;/code&gt; (alias: &lt;code&gt;appendHeaders&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appendResponseHeader(event, name, value)&lt;/code&gt; (alias: &lt;code&gt;appendHeader&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;defaultContentType(event, type)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sendRedirect(event, location, code=302)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isStream(data)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sendStream(event, data)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;writeEarlyHints(event, links, callback)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sanitize&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sanitizeStatusMessage(statusMessage)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sanitizeStatusCode(statusCode, default = 200)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Error&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sendError(event, error, debug?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createError({ statusCode, statusMessage, data? })&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Route&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;useBase(base, handler)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Proxy&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sendProxy(event, { target, ...options })&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxyRequest(event, { target, ...options })&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetchWithEvent(event, req, init, { fetch? }?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getProxyRequestHeaders(event)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cookie&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;parseCookies(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getCookie(event, name)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setCookie(event, name, value, opts?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deleteCookie(event, name, opts?)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;splitCookiesString(cookiesString)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Session&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;useSession(event, config = { password, maxAge?, name?, cookie?, seal?, crypto? })&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getSession(event, config)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;updateSession(event, config, update)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sealSession(event, config)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unsealSession(event, config, sealed)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clearSession(event, config)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cache&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;handleCacheHeaders(event, opts)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;handleCors(options)&lt;/code&gt; (see &lt;a href=&#34;https://github.com/NozomuIkuta/h3-cors&#34;&gt;h3-cors&lt;/a&gt; for more detail about options)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isPreflightRequest(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isCorsOriginAllowed(event)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appendCorsHeaders(event, options)&lt;/code&gt; (see &lt;a href=&#34;https://github.com/NozomuIkuta/h3-cors&#34;&gt;h3-cors&lt;/a&gt; for more detail about options)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appendCorsPreflightHeaders(event, options)&lt;/code&gt; (see &lt;a href=&#34;https://github.com/NozomuIkuta/h3-cors&#34;&gt;h3-cors&lt;/a&gt; for more detail about options)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Packages&lt;/h2&gt; &#xA;&lt;p&gt;You can use more H3 event utilities made by the community.&lt;/p&gt; &#xA;&lt;p&gt;Please check their READMEs for more details.&lt;/p&gt; &#xA;&lt;p&gt;PRs are welcome to add your packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinmarrec/h3-typebox&#34;&gt;h3-typebox&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;validateBody(event, schema)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;validateQuery(event, schema)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wobsoriano/h3-zod&#34;&gt;h3-zod&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;useValidatedBody(event, schema)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useValidatedQuery(event, schema)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intevel/h3-valibot&#34;&gt;h3-valibot&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;useValidateBody(event, schema)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useValidateParams(event, schema)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CodeDredd/h3-compression&#34;&gt;h3-compression&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;useGZipCompression(event, response)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useDeflateCompression(event, response)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useBrotliCompression(event, response)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useCompression(event, response)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useGZipCompressionStream(event, response)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useDeflateCompressionStream(event, response)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useCompressionStream(event, response)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intlify/h3&#34;&gt;@intlify/h3&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;defineI18nMiddleware(options)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useTranslation(event)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getHeaderLocale(event, options)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getHeaderLocales(event, options)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getCookieLocale(event, options)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;setCookieLocale(event, options)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getPathLocale(event, options)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getQueryLocale(event, options)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;!-- Badges --&gt;</summary>
  </entry>
</feed>