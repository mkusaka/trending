<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-03T01:35:03Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ishaan1013/sandbox</title>
    <updated>2024-06-03T01:35:03Z</updated>
    <id>tag:github.com,2024-06-03:/ishaan1013/sandbox</id>
    <link href="https://github.com/ishaan1013/sandbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cloud-based code editing environment with an AI copilot and real-time collaboration.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sandbox ðŸ“¦ðŸª„&lt;/h1&gt; &#xA;&lt;img width=&#34;1799&#34; alt=&#34;Screenshot 2024-05-31 at 8 33 56â€¯AM&#34; src=&#34;https://github.com/ishaan1013/sandbox/assets/69771365/3f73d7c0-f82a-4997-b01e-eaa043e95113&#34;&gt; &#xA;&lt;p&gt;Sandbox is an open-source cloud-based code editing environment with custom AI code autocompletion and real-time collaboration.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://x.com/ishaandey_/status/1796338262002573526&#34;&gt;Twitter thread&lt;/a&gt; with the demo video!&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;h3&gt;Frontend&lt;/h3&gt; &#xA;&lt;p&gt;Install dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd frontend&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the required environment variables in &lt;code&gt;.env&lt;/code&gt; (example file provided in &lt;code&gt;.env.example&lt;/code&gt;). You will need to make an account on &lt;a href=&#34;https://clerk.com/&#34;&gt;Clerk&lt;/a&gt; and &lt;a href=&#34;https://liveblocks.io/&#34;&gt;Liveblocks&lt;/a&gt; to get API keys.&lt;/p&gt; &#xA;&lt;p&gt;Then, run in development mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;p&gt;The backend consists of a primary Express and Socket.io server, and 3 Cloudflare Workers microservices for the D1 database, R2 storage, and Workers AI. The D1 database also contains a &lt;a href=&#34;https://developers.cloudflare.com/workers/runtime-apis/bindings/service-bindings/&#34;&gt;service binding&lt;/a&gt; to the R2 storage worker.&lt;/p&gt; &#xA;&lt;h4&gt;Socket.io server&lt;/h4&gt; &#xA;&lt;p&gt;Install dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd backend/server&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the required environment variables in &lt;code&gt;.env&lt;/code&gt; (example file provided in &lt;code&gt;.env.example&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Project files will be stored in the &lt;code&gt;projects/&amp;lt;project-id&amp;gt;&lt;/code&gt; directory. The middleware contains basic authorization logic for connecting to the server.&lt;/p&gt; &#xA;&lt;p&gt;Run in development mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directory is dockerized, so feel free to deploy a container on any platform of your choice! I chose not to deploy this project for public access due to costs &amp;amp; safety, but deploying your own for personal use should be no problem.&lt;/p&gt; &#xA;&lt;h4&gt;Cloudflare Workers (Database, Storage, AI)&lt;/h4&gt; &#xA;&lt;p&gt;Directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/backend/database&lt;/code&gt;: D1 database&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/backend/storage&lt;/code&gt;: R2 storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/backend/ai&lt;/code&gt;: Workers AI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd backend/database&#xA;npm install&#xA;&#xA;cd ../storage&#xA;npm install&#xA;&#xA;cd ../ai&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://developers.cloudflare.com/workers/&#34;&gt;documentation&lt;/a&gt; to learn more about workers.&lt;/p&gt; &#xA;&lt;p&gt;For each directory, add the required environment variables in &lt;code&gt;wrangler.toml&lt;/code&gt; (example file provided in &lt;code&gt;wrangler.example.toml&lt;/code&gt;). For the AI worker, you can define any value you want for the &lt;code&gt;CF_AI_KEY&lt;/code&gt; -- set this in other &lt;code&gt;.env&lt;/code&gt; files to authorize access.&lt;/p&gt; &#xA;&lt;p&gt;Run in development mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy to Cloudflare with &lt;a href=&#34;https://developers.cloudflare.com/workers/wrangler/install-and-update/&#34;&gt;Wrangler&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx wrangler deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for your interest in contributing! Review this section before submitting your first pull request. If you need any help, feel free to reach out to &lt;a href=&#34;https://x.com/ishaandey_&#34;&gt;@ishaandey_&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please prioritize existing issues, but feel free to contribute new issues if you have ideas for a feature or bug that you think would be useful.&lt;/p&gt; &#xA;&lt;h3&gt;Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;frontend/&#xA;â”œâ”€â”€ app&#xA;â”œâ”€â”€ assets&#xA;â”œâ”€â”€ components&#xA;â””â”€â”€ lib&#xA;backend/&#xA;â”œâ”€â”€ server&#xA;â”œâ”€â”€ database/&#xA;â”‚   â”œâ”€â”€ src&#xA;â”‚   â””â”€â”€ drizzle&#xA;â”œâ”€â”€ storage&#xA;â””â”€â”€ ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;frontend&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Next.js application for the frontend.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;backend/server&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Express websocket server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;backend/database&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API for interfacing with the D1 database (SQLite).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;backend/storage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API for interfacing with R2 storage. Service-bound to &lt;code&gt;/backend/database&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;backend/ai&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API for making requests to Workers AI .&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;h4&gt;Fork this repo&lt;/h4&gt; &#xA;&lt;p&gt;You can fork this repo by clicking the fork button in the top right corner of this page.&lt;/p&gt; &#xA;&lt;h4&gt;Clone repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/&amp;lt;your-username&amp;gt;/sandbox.git&#xA;cd sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a new branch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-new-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commit convention&lt;/h3&gt; &#xA;&lt;p&gt;Before you create a Pull Request, please check that you use the &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;Conventional Commits format&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It should be in the form &lt;code&gt;category(scope or module): message&lt;/code&gt; in your commit message from the following categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;feat / feature&lt;/code&gt;: all changes that introduce completely new code or new features&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fix&lt;/code&gt;: changes that fix a bug (ideally you will additionally reference an issue if present)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;refactor&lt;/code&gt;: any code related change that is not a fix nor a feature&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docs&lt;/code&gt;: changing existing or creating new documentation (i.e. README, docs for usage of a lib or cli usage)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;chore&lt;/code&gt;: all changes to the repository that do not fit into any of the above categories&lt;/p&gt; &lt;p&gt;e.g. &lt;code&gt;feat(editor): improve tab switching speed&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;h3&gt;Frontend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ui.shadcn.com/&#34;&gt;Shadcn UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clerk.com/&#34;&gt;Clerk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/monaco-editor/&#34;&gt;Monaco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://liveblocks.io/&#34;&gt;Liveblocks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/workers/&#34;&gt;Cloudflare Workers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/d1/&#34;&gt;D1 database&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/r2/&#34;&gt;R2 storage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/workers-ai/&#34;&gt;Workers AI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://expressjs.com/&#34;&gt;Express&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://socket.io/&#34;&gt;Socket.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://orm.drizzle.team/&#34;&gt;Drizzle ORM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Nutlope/turboseek</title>
    <updated>2024-06-03T01:35:03Z</updated>
    <id>tag:github.com,2024-06-03:/Nutlope/turboseek</id>
    <link href="https://github.com/Nutlope/turboseek" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI search engine inspired by Perplexity&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://www.turboseek.io&#34;&gt; &lt;img alt=&#34;Turbo Seek&#34; src=&#34;https://raw.githubusercontent.com/Nutlope/turboseek/main/public/og-image.png&#34;&gt; &lt;h1 align=&#34;center&#34;&gt;TurboSeek&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p align=&#34;center&#34;&gt; An open source AI search engine. Powered by Together.ai. &lt;/p&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next.js app router with Tailwind&lt;/li&gt; &#xA; &lt;li&gt;Together AI for LLM inference&lt;/li&gt; &#xA; &lt;li&gt;Mixtral 8x7B &amp;amp; Llama-3 for the LLMs&lt;/li&gt; &#xA; &lt;li&gt;Bing for the search API&lt;/li&gt; &#xA; &lt;li&gt;Helicone for observability&lt;/li&gt; &#xA; &lt;li&gt;Plausible for website analytics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Take in a user&#39;s question&lt;/li&gt; &#xA; &lt;li&gt;Make a request to the bing search API to look up the top 6 results and show them&lt;/li&gt; &#xA; &lt;li&gt;Scrape text from the 6 links bing sent back and store it as context&lt;/li&gt; &#xA; &lt;li&gt;Make a request to Mixtral-8x7B with the user&#39;s question + context &amp;amp; stream it back to the user&lt;/li&gt; &#xA; &lt;li&gt;Make another request to Llama-3-8B to come up with 3 related questions the user can follow up with&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Cloning &amp;amp; running&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork or clone the repo&lt;/li&gt; &#xA; &lt;li&gt;Create an account at &lt;a href=&#34;https://dub.sh/together-ai&#34;&gt;Together AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create an account with Azure to get a &lt;a href=&#34;https://www.microsoft.com/en-us/bing/apis/bing-web-search-api&#34;&gt;Bing search API key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create an account at &lt;a href=&#34;https://www.helicone.ai/&#34;&gt;Helicone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; (use the &lt;code&gt;.example.env&lt;/code&gt; for reference) and replace the API keys&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run dev&lt;/code&gt; to install dependencies and run locally&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Future tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try to parse the sources in a more effecient way to make the app faster overall: Try Serper API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Have the AI tool ignore video links like Youtube cause can&#39;t scrape them fast&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make sure the answer correctly cites all the sources in the text &amp;amp; number the citations in the UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add sharability to allow folks to share answers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Automatically scroll when an answer is happening, especially for mobile&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fix hard refresh in the header and footer by migrating answers to a new page&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add upstash redis for caching results &amp;amp; rate limiting users&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add in more advanced RAG techniques like keyword search &amp;amp; question rephrasing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add authentication with Clerk if it gets popular along with postgres/prisma to save user sessions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perplexity&lt;/li&gt; &#xA; &lt;li&gt;You.com&lt;/li&gt; &#xA; &lt;li&gt;Lepton search&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>OcularEngineering/ocular</title>
    <updated>2024-06-03T01:35:03Z</updated>
    <id>tag:github.com,2024-06-03:/OcularEngineering/ocular</id>
    <link href="https://github.com/OcularEngineering/ocular" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI Powered Search and Chat for Orgs - Think ChatGpt meets Google Search but powered by your data.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Ocular AI &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.useocular.com/&#34;&gt;Website&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Building Blocks for Search Platforms. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://useocular.com&#34;&gt;Ocular&lt;/a&gt; is a set of modules and tools that allow you to build rich, reliable, and performant Generative AI-Powered Search Platforms without the need to reinvent Search Architecture.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re help to you build you spin up customized internal search in days not months.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/OcularEngineering/ocular/main/img/search.gif&#34; width=&#34;100%&#34; alt=&#34;Dashboard&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;** Google Like Search Interface - Find what you need.&lt;/li&gt; &#xA; &lt;li&gt;** App MarketPlace - Connect to all of your favorite Apps.&lt;/li&gt; &#xA; &lt;li&gt;** Custom Connectors - Build your own connectors to propeitary data sources.&lt;/li&gt; &#xA; &lt;li&gt;** Customizable Modular Infrastructure - Bring your own custom LLM&#39;s, Vector DB and more into Ocular.&lt;/li&gt; &#xA; &lt;li&gt;** Governance Engine - Role Based Access Control, Audit Logs etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open-source vs Paid&lt;/h2&gt; &#xA;&lt;p&gt;Repo is under &lt;a href=&#34;https://github.com/OcularEngineering/ocular/raw/main/LICENSE&#34;&gt;Elastic License 2.0 (ELv2)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in managed Ocular Cloud of self-hosted Enterprise Offering &lt;a href=&#34;https://calendly.com/louis-murerwa&#34;&gt;book a meeting with us&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h2&gt;Running Ocular in Docker&lt;/h2&gt; &#xA;&lt;p&gt;To run Ocular locally, you&#39;ll need to setup Docker in addition to Ocular.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequsites&lt;/h3&gt; &#xA;&lt;p&gt;First, make sure you have the Docker installed on your device. You can download and install it from &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the Ocular directory.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/OcularEngineering/ocular.git &amp;amp;&amp;amp; cd ocular&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the home directory, open &lt;code&gt;env.local&lt;/code&gt; add the required OPEN AI env variables&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;u&gt;Required Keys&lt;/u&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Open AI Keys - To run Ocular &lt;strong&gt;an LLM provider must be setup in the backend&lt;/strong&gt; . By default Open AI is the LLM Provider for Ocular so please add the Open AI keys in &lt;code&gt;env.local&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Support for other LLM providers is coming soon!&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;u&gt;Optional Keys&lt;/u&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Apps (Gmail|GoogleDrive|Asana|GitHub etc) - To Index Documents from Apps the Api keys have to be set up in the &lt;code&gt;env.local&lt;/code&gt; for that specific app. Please read our docs on how to set up each app.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Docker.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose -f docker-compose.local.yml up --build --force-recreate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This command initializes the containers specified in the &lt;code&gt;docker-compose.local.yml&lt;/code&gt; file. It might take a few moments to complete, depending on your computer and internet connection.&lt;/p&gt; &#xA;&lt;p&gt;Once the &lt;code&gt;docker compose&lt;/code&gt; process completes, you should have your local version of Ocular up and running within Docker containers. You can access it at &lt;code&gt;http://localhost:3001/create-account&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Remember to keep the Docker application open as long as you&#39;re working with your local Ocular instance.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love contributions. Check out our guide to see how to &lt;a href=&#34;https://github.com/OcularEngineering/ocular/raw/main/CONTRIBUTING.md&#34;&gt;get started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Not sure where to get started? You can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://join.slack.com/t/ocular-ai/shared_invite/zt-2g7ka0j1c-Tx~Q46MjplNma2Sk2Ruplw&#34;&gt;Slack&lt;/a&gt;, and ask us any questions there.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#OcularEngineering/ocular&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=OcularEngineering/ocular&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>