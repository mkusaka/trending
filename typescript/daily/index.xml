<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-05T01:37:16Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevenpetryk/mafs</title>
    <updated>2023-01-05T01:37:16Z</updated>
    <id>tag:github.com,2023-01-05:/stevenpetryk/mafs</id>
    <link href="https://github.com/stevenpetryk/mafs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React components for interactive math&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mafs&lt;/h1&gt; &#xA;&lt;p&gt;Mafs is a set of opinionated React components for creating math visualizations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mafs.dev&#34;&gt;Visit the docs ‚Üí&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Development is done inside of the Next.js documentation site, which directly imports Mafs components from &lt;code&gt;src/&lt;/code&gt;. To start the development server, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm install&#xA;pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Mafs uses visual regression testing to ensure consistency between updates. This means that it takes literal screenshots of components as rendered by the browser, and compares them to a known &#34;correct&#34; screenshot.&lt;/p&gt; &#xA;&lt;p&gt;Currently, these tests are limited to static screenshots‚Äîthe SVG output of Mafs is rendered to a string and plopped onto a Puppeteer page. This means that interactive things and animations don&#39;t work yet.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iway1/react-ts-form</title>
    <updated>2023-01-05T01:37:16Z</updated>
    <id>tag:github.com,2023-01-05:/iway1/react-ts-form</id>
    <link href="https://github.com/iway1/react-ts-form" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12774588/210178528-2eb928f9-fbad-414b-9f69-a57550d05363.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Build maintainable, typesafe forms faster üèÉüí®&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/12774588/210157220-e287cfdf-c26f-4169-a944-ac147cb4b058.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;@ts-react/form&lt;/b&gt; handles the boilerplate involved when building forms using &lt;b&gt;zod&lt;/b&gt; and &lt;b&gt;react-hook-form&lt;/b&gt; without&amp;nbsp;sacrificing&amp;nbsp;customizability. &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://codecov.io/github/iway1/react-ts-form&#34;&gt;&lt;img src=&#34;https://codecov.io/github/iway1/react-ts-form/branch/main/graph/badge.svg?token=U4UFRGI3HF&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/isaac_ts_way&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/isaac_ts_way.svg?style=social&amp;amp;label=Follow%20%40isaac_ts_way&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü•π Automatically generate typesafe forms with &lt;code&gt;zod&lt;/code&gt; schemas&lt;/li&gt; &#xA; &lt;li&gt;üìé Eliminate repetitive jsx and zod/rhf boilerplate&lt;/li&gt; &#xA; &lt;li&gt;üéÆ Full control of components via &lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#typesafe-props&#34;&gt;typesafe props&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ü§Ø Headless UI that can render any react component&lt;/li&gt; &#xA; &lt;li&gt;‚ù§Ô∏è &lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#qol&#34;&gt;Quality Of Life / Productivity&lt;/a&gt; features not feasible in vanilla &lt;code&gt;zod&lt;/code&gt; and &lt;code&gt;react-hook-form&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ü§åüèª Very tiny utility library (~3kb gzipped)&lt;/li&gt; &#xA; &lt;li&gt;üëÄ Great test coverage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/API.md&#34;&gt;API Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/field-examples.md&#34;&gt;Input Field Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;code&gt;&#34;strict&#34;: true&lt;/code&gt; in your tsconfig.json compilerOptions and make sure you set your editors &lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#typescript-versions&#34;&gt;typescript version to v4.9&lt;/a&gt; (or intellisense won&#39;t be as reliable).&lt;/p&gt; &#xA;&lt;p&gt;Install package and dependencies with your preferred package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add @ts-react/form&#xA;&#xA;# required peer dependencies&#xA;yarn add zod react-hook-form @hookform/resolvers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a zod-to-component mapping to map zod schemas to your components then create your form with &lt;code&gt;createTsForm&lt;/code&gt; (typically once per project):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// create the mapping&#xA;const mapping = [&#xA;  [z.string(), TextField],&#xA;  [z.boolean(), CheckBoxField],&#xA;  [z.number(), NumberField],&#xA;] as const; // üëà `as const` is necessary&#xA;&#xA;// A typesafe React component&#xA;const MyForm = createTsForm(mapping);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now just create form schemas with zod and pass them to your form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const SignUpSchema = z.object({&#xA;  email: z.string().email(&#34;Enter a real email please.&#34;), // renders TextField&#xA;  password: z.string(),&#xA;  address: z.string(),&#xA;  favoriteColor: z.enum([&#34;blue&#34;, &#34;red&#34;, &#34;purple&#34;]), // renders DropDownSelect and passed the enum values&#xA;  isOver18: z.boolean(), // renders CheckBoxField&#xA;});&#xA;&#xA;function MyPage() {&#xA;  function onSubmit(data: z.infer&amp;lt;typeof SignUpSchema&amp;gt;) {&#xA;    // gets typesafe data when form is submitted&#xA;  }&#xA;&#xA;  return (&#xA;    &amp;lt;MyForm&#xA;      schema={SignUpSchema}&#xA;      onSubmit={onSubmit}&#xA;      renderAfter={() =&amp;gt; &amp;lt;button type=&#34;submit&#34;&amp;gt;Submit&amp;lt;/button&amp;gt;}&#xA;      // optional typesafe props forwarded to your components&#xA;      props={{&#xA;        email: {&#xA;          className: &#34;mt-2&#34;,&#xA;        },&#xA;      }}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Adding a new field to your form just means adding an additional property to the schema.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended but not required that you create a custom &lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#customizing-form-components&#34;&gt;form component&lt;/a&gt; to handle repetitive stuff (like rendering the submit button).&lt;/p&gt; &#xA;&lt;h2&gt;Creating Input Components&lt;/h2&gt; &#xA;&lt;p&gt;Form components can be any react component. The &lt;code&gt;useTsController()&lt;/code&gt; hook allows you to build your components with the form state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function TextField() {&#xA;  const { field, error } = useTsController&amp;lt;string&amp;gt;();&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;input&#xA;        value={field.value ? field.value : &#34;&#34;} // conditional to prevent &#34;uncontrolled to controlled&#34; react warning&#xA;        onChange={(e) =&amp;gt; {&#xA;          field.onChange(e.target.value);&#xA;        }}&#xA;      /&amp;gt;&#xA;      {error?.errorMessage &amp;amp;&amp;amp; &amp;lt;span&amp;gt;{error?.errorMessage}&amp;lt;/span&amp;gt;}&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;@ts-react/form&lt;/code&gt; will magically connecting your component to the appropriate field with this hook. You can also receive the control and name as props, if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function TextField({ control, name }: { control: Control&amp;lt;any&amp;gt;; name: string }) {&#xA;  const { field, fieldState } = useController({ name, control });&#xA;  //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This approach is less typesafe than &lt;code&gt;useTsController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want the control, name, or other &lt;code&gt;@ts-react/form&lt;/code&gt; data to be passed to props with a different name check out &lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#prop-forwarding&#34;&gt;prop forwarding&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#installation&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#creating-input-components&#34;&gt;Creating Input Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#typesafe-props&#34;&gt;TypeSafe Props&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#dealing-with-collisions&#34;&gt;Dealing With Collisions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#handling-optionals&#34;&gt;Handling Optionals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#accessing-useform-state&#34;&gt;Accessing useForm State&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#complex-field-types&#34;&gt;Complex Field Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#adding-non-input-components-into-your-form&#34;&gt;Rendering Non Input Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#customizing-form-components&#34;&gt;Customizing Form Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#default-values&#34;&gt;Default Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#prop-forwarding&#34;&gt;Prop Forwarding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#manual-form-submission&#34;&gt;Manual Form Submission&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#react-native-usage&#34;&gt;React Native Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#qol&#34;&gt;‚ù§Ô∏è Quality of Life / Productivity ‚ù§Ô∏è&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;TypeSafe Props&lt;/h2&gt; &#xA;&lt;p&gt;Based on your component mapping, &lt;code&gt;@ts-react/form&lt;/code&gt; knows which field should receive which props:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const mapping = [&#xA;  [z.string(), TextField] as const,&#xA;  [z.boolean(), CheckBoxField] as const,&#xA;] as const;&#xA;&#xA;//...&#xA;const Schema = z.object({&#xA;  name: z.string(),&#xA;  password: z.string(),&#xA;  over18: z.boolean(),&#xA;})&#xA;//...&#xA;&amp;lt;MyForm&#xA;  props={{&#xA;    name: {&#xA;      // TextField props&#xA;    },&#xA;    over18: {&#xA;      // CheckBoxField props&#xA;    }&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;@ts-react/form&lt;/code&gt; is also aware of which props are required, so it will make sure you always pass required props to your components:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;85%&#34; src=&#34;https://user-images.githubusercontent.com/12774588/210124307-c456ec95-ed9e-47fe-b6f5-a4e7327aab85.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Here we get an error because &lt;code&gt;&amp;lt;Component/&amp;gt;&lt;/code&gt; requires the prop &lt;code&gt;required&lt;/code&gt;, and we didn&#39;t pass it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;return (&#xA;  &amp;lt;Form&#xA;    schema={FormSchema}&#xA;    onSubmit={() =&amp;gt; {}}&#xA;    props={{&#xA;      field: {&#xA;        required: &#34;Fixed!&#34;,&#xA;      },&#xA;    }}&#xA;  /&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fixed! We get all the same typesafety of writing out the full jsx.&lt;/p&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;You can handle errors with the &lt;code&gt;fieldState&lt;/code&gt; returned from &lt;code&gt;useTsController&lt;/code&gt; just like in &lt;code&gt;react-hook-form&lt;/code&gt;, but &lt;code&gt;@ts-react/form&lt;/code&gt; also returns an &lt;code&gt;errors&lt;/code&gt; object that&#39;s more accurately typed than &lt;code&gt;react-hook-forms&lt;/code&gt;&#39;s that should be used any time you are using an &lt;a href=&#34;https://raw.githubusercontent.com/iway1/react-ts-form/main/#complex-field-types&#34;&gt;object schema&lt;/a&gt; to render one of your fields.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const { error } = useTsController&amp;lt;string&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dealing with collisions&lt;/h2&gt; &#xA;&lt;p&gt;Some times you want multiple types of for the same zod schema type. You can deal with collisions using &lt;code&gt;createUniqueFieldSchema&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const MyUniqueFieldSchema = createUniqueFieldSchema(&#xA;  z.string(),&#xA;  &#34;aUniqueId&#34; // You need to pass a string ID, it can be anything but has to be set explicitly and be unique.&#xA;);&#xA;&#xA;const mapping = [&#xA;  [z.string(), NormalTextField] as const,&#xA;  [MyUniqueFieldSchema, UltraTextField] as const,&#xA;] as const;&#xA;&#xA;const MyFormSchema = z.object({&#xA;  mapsToNormal: z.string(), // renders as a NormalTextField component&#xA;  mapsToUnique: MyUniqueTextFieldSchema, // renders as a UltraTextField component.&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handling Optionals&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;@ts-react/form&lt;/code&gt; will match optionals to their non optional zod schemas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const mapping = [[z.string(), TextField]] as const;&#xA;&#xA;const FormSchema = z.object({&#xA;  optionalEmail: z.string().email().optional(), // renders to TextField&#xA;  nullishZipCode: z.string().min(5, &#34;5 chars please&#34;).nullish(), // renders to TextField&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your zod-component-mapping should not include any optionals. If you want a reusable optional schema, you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const mapping = [[z.string(), TextField]] as const;&#xA;&#xA;export const OptionalTextField = z.string().optional();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing useForm state&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you need to work with the form directly (such as to reset the form from the parent). In these cases, just pass the &lt;code&gt;react-hook-form&lt;/code&gt; &lt;code&gt;useForm()&lt;/code&gt; result to your form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function MyPage() {&#xA;  // Need to type the useForm call accordingly&#xA;  const form = useForm&amp;lt;z.infer&amp;lt;typeof FormSchema&amp;gt;&amp;gt;();&#xA;  const { reset } = form;&#xA;  return (&#xA;    &amp;lt;Form&#xA;      form={form}&#xA;      schema={FormSchema}&#xA;      // ...&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Complex field types&lt;/h2&gt; &#xA;&lt;p&gt;You can use most any zod schema and have it map to an appropriate component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function AddressEntryField() {&#xA;  const {field: {onChange, value}, error} = useTsController&amp;lt;z.infer&amp;lt;typeof AddressSchema&amp;gt;&amp;gt;();&#xA;  const street = value?.street;&#xA;  const zipCode = value?.zipCode;&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;input&#xA;        value={street}&#xA;        onChange={(e)=&amp;gt;{&#xA;          onChange({&#xA;            ...value,&#xA;            street: e.target.value,&#xA;          })&#xA;        })&#xA;      /&amp;gt;&#xA;      {error?.street &amp;amp;&amp;amp; &amp;lt;span&amp;gt;{error.street.errorMessage}&amp;lt;/span&amp;gt;}&#xA;      &amp;lt;input&#xA;        value={zipCode}&#xA;        onChange={(e)=&amp;gt;{&#xA;          onChange({&#xA;            ...value,&#xA;            zipCode: e.target.value&#xA;          })&#xA;        }}&#xA;      /&amp;gt;&#xA;      {error?.zipCode &amp;amp;&amp;amp; &amp;lt;span&amp;gt;{error.zipCode.errorMessage}&amp;lt;/span&amp;gt;}&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;const AddressSchema = z.object({&#xA;  street: z.string(),&#xA;  zipCode: z.string(),&#xA;});&#xA;&#xA;const mapping = [&#xA;  [z.string, TextField] as const,&#xA;  [AddressSchema, AddressEntryField] as const,&#xA;] as const;&#xA;&#xA;const FormSchema = z.object({&#xA;  name: z.string(),&#xA;  address: AddressSchema, // renders as AddressInputComponent&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;This allows you to build stuff like this when your designer decides to go crazy: &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/12774588/210149773-e680c127-9865-4ea1-9b82-1b7e2244c0ef.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Adding non input components into your form&lt;/h2&gt; &#xA;&lt;p&gt;Some times you need to render components in between your fields (maybe a form section header). In those cases there are some extra props that you can pass to your fields &lt;code&gt;beforeElement&lt;/code&gt; or &lt;code&gt;afterElement&lt;/code&gt; which will render a &lt;code&gt;ReactNode&lt;/code&gt; before or after the field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;MyForm&#xA;  schema={z.object({&#xA;    field: z.string(),&#xA;  })}&#xA;  props={{&#xA;    field: {&#xA;      beforeElement: &amp;lt;span&amp;gt;Renders Before The Input&amp;lt;/span&amp;gt;,&#xA;      afterElement: &amp;lt;span&amp;gt;Renders After The Input&amp;lt;/span&amp;gt;,&#xA;    },&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing form components&lt;/h2&gt; &#xA;&lt;p&gt;By default your form is just rendered with a &lt;code&gt;&#34;form&#34;&lt;/code&gt; tag. You can pass props to it via &lt;code&gt;formProps&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;MyForm&#xA;  formProps={{&#xA;    ariaLabel: &#34;label&#34;,&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also provide a custom form component as the second parameter to createTsForm options if you want, it will get passed an &lt;code&gt;onSubmit&lt;/code&gt; function, and it should also render its children some where:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const mapping = [&#xA;  //...&#xA;] as const&#xA;&#xA;function MyCustomFormComponent({&#xA;  children,&#xA;  onSubmit,&#xA;  aThirdProp,&#xA;}:{&#xA;  children: ReactNode,&#xA;  onSubmit: ()=&amp;gt;void,&#xA;  aThirdProp: string,&#xA;}) {&#xA;  return (&#xA;    &amp;lt;form onSubmit={onSubmit}&amp;gt;&#xA;      &amp;lt;img src={&#34;https://picsum.photos/200&#34;} className=&#34;w-4 h-4&#34;&amp;gt;&#xA;      {/* children is you form field components */}&#xA;      {children}&#xA;      &amp;lt;button type=&#34;submit&#34;&amp;gt;submit&amp;lt;/button&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;  )&#xA;}&#xA;// MyCustomFormComponent is now being used as the container instead of the default &#34;form&#34; tag.&#xA;const MyForm = createTsForm(mapping, {FormComponent: MyCustomFormComponent});&#xA;&#xA;&amp;lt;MyForm&#xA;  formProps={{&#xA;    // formProps is typesafe to your form component&#39;s props (and will be required if there is&#xA;    // required prop).&#xA;    aThirdProp: &#34;prop&#34;&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Form Submission&lt;/h2&gt; &#xA;&lt;p&gt;The default form component as well as a custom form component (if used) will automatically be passed the onSubmit function. Normally, you&#39;ll want to pass a button to the &lt;code&gt;renderAfter&lt;/code&gt; or &lt;code&gt;renderBefore&lt;/code&gt; prop of the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;MyForm renderAfter={() =&amp;gt; &amp;lt;button type=&#34;submit&#34;&amp;gt;Submit&amp;lt;/button&amp;gt;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For React Native, or for other reasons, you will need to call &lt;code&gt;submit&lt;/code&gt; explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;MyForm&#xA;  renderAfter={({ submit }) =&amp;gt; (&#xA;    &amp;lt;TouchableOpacity onPress={submit}&amp;gt;&#xA;      &amp;lt;Text&amp;gt;Submit&amp;lt;/Text&amp;gt;&#xA;    &amp;lt;/TouchableOpacity&amp;gt;&#xA;  )}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;React Native Usage&lt;/h2&gt; &#xA;&lt;p&gt;For now React Native will require you to provide your own custom form component. The simplest way to do it would be like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const FormContainer = ({ children }: { children: ReactNode }) =&amp;gt; (&#xA;  &amp;lt;View&amp;gt;{children}&amp;lt;/View&amp;gt;&#xA;);&#xA;&#xA;const mapping = [&#xA;  //...&#xA;] as const;&#xA;&#xA;const MyForm = createTsForm(mapping, { FormComponent: FormContainer });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default values&lt;/h2&gt; &#xA;&lt;p&gt;You can provide typesafe default values like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const Schema = z.object({&#xA;  string: z.string(),&#xA;  num: z.number()&#xA;})&#xA;//...&#xA;&amp;lt;MyForm&#xA;  schema={Schema}&#xA;  defaultValues={{&#xA;    string: &#39;default&#39;,&#xA;    num: 5&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prop Forwarding&lt;/h2&gt; &#xA;&lt;p&gt;Prop forwarding is an advanced feature that allows you to control which props &lt;code&gt;@ts-react/form&lt;/code&gt; forward to your components as well as the name.&lt;/p&gt; &#xA;&lt;p&gt;You probably don&#39;t need to use this especially when building a project from scratch, but it can allow more customization. This can be useful for integrating with existing components, or for creating a selection of components that can be used both with and without &lt;code&gt;@ts-react/form&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, if I wanted the react hook form control to be forwarded to a prop named &lt;code&gt;floob&lt;/code&gt; I would do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const propsMap = [&#xA;  [&#34;control&#34;, &#34;floob&#34;] as const,&#xA;  [&#34;name&#34;, &#34;name&#34;] as const,&#xA;] as const;&#xA;&#xA;function TextField({ floob, name }: { floob: Control&amp;lt;any&amp;gt;; name: string }) {&#xA;  const { field, fieldState } = useController({ name, control: floob });&#xA;}&#xA;&#xA;const componentMap = [[z.string(), TextField] as const] as const;&#xA;&#xA;const MyForm = createTsForm(componentMap, {&#xA;  propsMap: propsMap,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Props that are included in the props map will no longer be passable via the &lt;code&gt;props&lt;/code&gt; prop of the form. So if you don&#39;t want to forward any props to your components (and prefer just using hooks), you can pass an empty array. &lt;em&gt;Any data that&#39;s not included in the props map will no longer be passed to your components&lt;/em&gt;&lt;/p&gt; &#xA;&lt;a name=&#34;qol&#34;&gt;&lt;/a&gt; &#xA;&lt;h2&gt;‚ù§Ô∏è Quality of Life / Productivity ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;These allow you to build forms even faster by connecting zod schemas directly to react state. These features are opt-in, it&#39;s possible to do the things in this section via props but these approaches may be faster / easier.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Labels / Placeholders&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;@ts-react/form&lt;/code&gt; provides a way to quickly add labels / placeholders via &lt;code&gt;zod&lt;/code&gt;&#39;s &lt;code&gt;.describe()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const FormSchema = z.object({&#xA;  // label=&#34;Field One&#34;, placeholder=&#34;Please enter field one....&#34;&#xA;  fieldOne: z.string().describe(&#34;Field One // Please enter field one...&#34;),&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;//&lt;/code&gt; syntax separates the label and placeholder. &lt;code&gt;@ts-react/form&lt;/code&gt; will make these available via the &lt;code&gt;useDescription()&lt;/code&gt; hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function TextField() {&#xA;  const { label, placeholder } = useDescription();&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;label&amp;gt;{label}&amp;lt;/label&amp;gt;&#xA;      &amp;lt;input placeholder={placeholder} /&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is just a quicker way to pass labels / placeholders, but it also allows you to reuse placeholder / labels easily across forms:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const MyTextFieldWithLabel = z.string().describe(&#34;label&#34;);&#xA;&#xA;const FormSchemaOne = z.object({&#xA;  field: MyTextFieldWithLabel,&#xA;});&#xA;&#xA;const FormSchemaTwo = z.object({&#xA;  field: MyTextFieldWithLabel,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer, you can just pass label and placeholder as normal props via &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript versions&lt;/h2&gt; &#xA;&lt;p&gt;Older versions of typescript have worse intellisense and may not show an error in your editor. Make sure your editors typescript version is set to v4.9 plus. The easiest approach is to upgrade your typescript globally if you haven&#39;t recently:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo npm -g upgrade typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, in VSCode you can do (Command + Shift + P) and search for &#34;Select Typescript Version&#34; to change your editors Typescript Version:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12774588/210178740-edafa8d1-5a69-4e36-8852-c0a01f36c35d.png&#34; alt=&#34;Screenshot 2023-01-01 at 10 55 11 AM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that you can still compile with older versions of typescript and the type checking will work.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doesn&#39;t support class components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@ts-react/form&lt;/code&gt; allows you to pass props to your components and render elements in between your components, which is good for almost all form designs out there. Some designs may not be easily achievable. For example, if you need a container around multiple sections of your form, this library doesn&#39;t allow splitting child components into containers at the moment. (Though if it&#39;s a common-enough use case and you&#39;d like to see it added, open an issue!)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>morethanmin/morethan-log</title>
    <updated>2023-01-05T01:37:16Z</updated>
    <id>tag:github.com,2023-01-05:/morethanmin/morethan-log</id>
    <link href="https://github.com/morethanmin/morethan-log" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Static Blog and Resume using Notion Database&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;morethan-log&lt;/h1&gt; &#xA;&lt;img width=&#34;1715&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/72514247/209824600-ca9c8acc-6d2d-4041-9931-43e34b8a9a5f.png&#34;&gt; &#xA;&lt;p&gt;Static Blog and Resume using Notion and Next.js, deployed on Vercel.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo Blog: &lt;a href=&#34;https://morethan-log.vercel.app&#34;&gt;https://morethan-log.vercel.app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Demo Resume: &lt;a href=&#34;https://morethan-log.vercel.app/resume&#34;&gt;https://morethan-log.vercel.app/resume&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;üìí Writing posts using notion&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No need to commit to write a post&lt;/li&gt; &#xA; &lt;li&gt;Posts made on Notion are immediately posted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;üìÑ Use as a page such as resume&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Writing pages as well as posts using Notion&lt;/li&gt; &#xA; &lt;li&gt;resume, portfolio, ... and much more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;üëÄ SEO friendly&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamically generate OG IMAGEs (thumbnails!) for posts. (&lt;a href=&#34;https://github.com/morethanmin/og-image-korean&#34;&gt;og-image-korean&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dynamically create a sitemap for posts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ü§ñ Various plugin support through CONFIG&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can set your own profile information&lt;/li&gt; &#xA; &lt;li&gt;GA, utterances can be easily applied&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Star this repo&lt;/li&gt; &#xA; &lt;li&gt;Duplicate &lt;a href=&#34;https://quasar-season-ed5.notion.site/12c38b5f459d4eb9a759f92fba6cea36?v=2e7962408e3842b2a1a801bf3546edda&#34;&gt;this Notion template&lt;/a&gt;, and share it to the public&lt;/li&gt; &#xA; &lt;li&gt;Customize &lt;code&gt;morethan-log.config.js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deploy on Vercel, set following environment variables &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NOTION_PAGE_ID (Required): The ID of the Notion page you previously shared to the web, usually has 32 digits after your workspace address. (ex. quasar-season-ed5.notion.site/&lt;code&gt;[NOTION_PAGE_ID]&lt;/code&gt;?v=[VERSION_ID])&lt;/li&gt; &#xA;   &lt;li&gt; &lt;img width=&#34;465&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/72514247/206605805-c2552dc7-cb7b-414e-adbd-3bccdf0d47e8.png&#34;&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This projects is based on &lt;a href=&#34;https://github.com/craigary/nobelium&#34;&gt;nobelium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>