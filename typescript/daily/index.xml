<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-03T01:50:53Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>withastro/starlight</title>
    <updated>2023-07-03T01:50:53Z</updated>
    <id>tag:github.com,2023-07-03:/withastro/starlight</id>
    <link href="https://github.com/withastro/starlight" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒŸ Build beautiful, high-performance documentation websites with Astro&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/withastro/starlight/assets/357379/494fcd83-42aa-4891-87e0-87402fa0b6f3&#34; alt=&#34;&#34; align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; Starlight&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; This tool is an early release and very much still work in progress!&lt;br&gt; &lt;a href=&#34;https://github.com/withastro/starlight/issues/new/choose&#34;&gt;Open an issue on GitHub&lt;/a&gt; if you find something thatâ€™s not working.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Starlight is a documentation website framework for &lt;a href=&#34;https://astro.build/&#34;&gt;Astro&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starlight.astro.build/&#34;&gt;Read the Starlight docs&lt;/a&gt; (theyâ€™re built with Starlight!)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Join us as a Starlight contributor! These links will help you get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/withastro/starlight/raw/main/CONTRIBUTING.md&#34;&gt;Contributor Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/withastro/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/withastro/.github/raw/main/COMMUNITY_GUIDE.md&#34;&gt;Community Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2023â€“present &lt;a href=&#34;https://github.com/withastro/starlight/graphs/contributors&#34;&gt;Starlight contributors&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mdn/yari</title>
    <updated>2023-07-03T01:50:53Z</updated>
    <id>tag:github.com,2023-07-03:/mdn/yari</id>
    <link href="https://github.com/mdn/yari" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The platform code behind MDN Web Docs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Yari&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mdn/yari/workflows/Testing%20Yari/badge.svg?sanitize=true&#34; alt=&#34;Testing&#34;&gt; &lt;img src=&#34;https://github.com/mdn/yari/workflows/Prod%20Build/badge.svg?sanitize=true&#34; alt=&#34;Prod Build&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Development on &lt;code&gt;yari&lt;/code&gt; involves updating the machinery that renders MDN content or improving the structure and styling of the MDN UI (e.g. the styling of the header). If you are more interested in contributing to the MDN content, you should check out the &lt;a href=&#34;https://github.com/mdn/content&#34;&gt;content&lt;/a&gt; repo README instead.&lt;/p&gt; &#xA;&lt;p&gt;Before you can start working with Yari, you need to:&lt;/p&gt; &#xA;&lt;!-- Peterbe, Feb 2021: There appears to be a bug in Prettier for .md files&#xA;    that forces in a second (extra) whitespace after the `1.` here.&#xA;    That breaks `markdownlint` *and* `prettier --check`. Annoying.&#xA;    So for now let&#39;s make an exception. --&gt; &#xA;&lt;!-- markdownlint-disable list-marker-space --&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;, and &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install&#34;&gt;Yarn 1&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.github.com/en/github/getting-started-with-github/fork-a-repo&#34;&gt;Fork&lt;/a&gt; the MDN &lt;a href=&#34;https://github.com/mdn/content&#34;&gt;content&lt;/a&gt; and &lt;a href=&#34;https://github.com/mdn/yari&#34;&gt;yari&lt;/a&gt; repositories using the Fork button on GitHub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the forked repositories to your computer using the following commands (replace &lt;code&gt;[your account]&lt;/code&gt; with the account you forked the repositories to):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/[your_account]/content.git&#xA;git clone https://github.com/[your_account]/yari.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- markdownlint-enable list-marker-space --&gt; &#xA;&lt;p&gt;To run Yari locally, you&#39;ll first need to install its dependencies and build the app locally. Do this like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd yari&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now copy the &lt;code&gt;.env-dist&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env-dist .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you followed the instructions above and cloned the &lt;code&gt;content&lt;/code&gt; repo as a sibling of your &lt;code&gt;yari&lt;/code&gt; repo, the &lt;code&gt;CONTENT_ROOT&lt;/code&gt; environment variable is already set and Yari will be able to find the content it needs to render.&lt;/p&gt; &#xA;&lt;p&gt;At this point, you can get started. Run the following lines to compile required files, start the Yari web server running, and open it in your browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn dev&#xA;open http://localhost:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer you can use &lt;code&gt;yarn start&lt;/code&gt;, which will re-use any previously compiled files; this is &#34;riskier&#34; but faster. &lt;code&gt;yarn dev&lt;/code&gt; always ensures that everything is up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;yarn start&lt;/code&gt; command also starts a server with slightly different behavior â€” it doesn&#39;t automatically reload when its source code files change, so use with caution.&lt;/p&gt; &#xA;&lt;p&gt;See also our &lt;a href=&#34;https://raw.githubusercontent.com/mdn/yari/main/docs/REVIEWING.md&#34;&gt;reviewing guide&lt;/a&gt; for information on how to review Yari changes.&lt;/p&gt; &#xA;&lt;h3&gt;Pull request requirements&lt;/h3&gt; &#xA;&lt;p&gt;Firstly, thank you for your interest in contributing to Yari! We do have a few requirements when it comes to pull requests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please make use of a &lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&#34;&gt;feature branch workflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We prefer if you use the &lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;conventional commits format&lt;/a&gt; when making pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Lastly, we require that all commits are signed. Please see the documentation &lt;a href=&#34;https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification&#34;&gt;about signed commits&lt;/a&gt; and &lt;a href=&#34;https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits&#34;&gt;how to sign yours&lt;/a&gt; on GitHub.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Thank you for your understanding! We look forward to your contributions.&lt;/p&gt; &#xA;&lt;h3&gt;How to stay up-to-date&lt;/h3&gt; &#xA;&lt;p&gt;Periodically, the code and the content changes. Make sure you stay up-to-date with something along the following lines (replace &lt;code&gt;yari-origin&lt;/code&gt; with whatever you called &lt;a href=&#34;https://git-scm.com/docs/git-remote&#34;&gt;the remote location&lt;/a&gt; of the original yari repo):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull yari-origin main&#xA;yarn&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you embark on making a change, do it on a new branch, for example &lt;code&gt;git checkout -b my-new-branch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All source code is &lt;a href=&#34;https://www.mozilla.org/en-US/MPL/2.0/&#34;&gt;MPL-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For content, see its &lt;a href=&#34;https://github.com/mdn/content/raw/main/LICENSE.md&#34;&gt;license&lt;/a&gt; in the &lt;a href=&#34;https://github.com/mdn/content&#34;&gt;mdn/content repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Yari does a number of things, the most important of which is to render and serve the MDN content found in the &lt;a href=&#34;https://github.com/mdn/content&#34;&gt;content repo&lt;/a&gt;. Each document is stored as an &lt;code&gt;index.md&lt;/code&gt; (recommended) or &lt;code&gt;index.html&lt;/code&gt; file that contains metadata presented as YAML &lt;a href=&#34;https://github.com/mdn/content#fundamental-concepts&#34;&gt;front-matter&lt;/a&gt; followed by the document source.&lt;/p&gt; &#xA;&lt;p&gt;The builder converts these &#34;source files&#34; into &#34;build files&#34; using a CLI tool that iterates over the files, builds the HTML, and lastly packages it up with the front-end code, ready to be served as static files.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;yarn start&lt;/code&gt; command encapsulates the front-end dev server (on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;) and the &lt;code&gt;server&lt;/code&gt; (on &lt;a href=&#34;http://localhost:5042&#34;&gt;http://localhost:5042&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;All the sub-commands of &lt;code&gt;yarn start&lt;/code&gt; can be broken down and run individually if you want to work more rapidly.&lt;/p&gt; &#xA;&lt;h3&gt;Setting up &lt;code&gt;$EDITOR&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you configure an environment variable called &lt;code&gt;EDITOR&lt;/code&gt;, either on your system as a whole or in the root &lt;code&gt;.env&lt;/code&gt; file, it can be used in the development server to link to sources which, when clicked, open in your preferred editor/IDE. For example, in the root of the repo you could run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#39;EDITOR=code&#39; &amp;gt;&amp;gt; .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now clicking certain links will open files directly in the currently open VS Code IDE (replace &lt;code&gt;code&lt;/code&gt; in the above command with a different text editor name if needed, e.g. &lt;code&gt;atom&lt;/code&gt; or whatever). To test it, view any document on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and click the &#34;Open in your editor&#34; button.&lt;/p&gt; &#xA;&lt;h3&gt;How the server works&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;server&lt;/code&gt; has two main jobs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simulate serving the site (e.g. from a server, S3 or a CDN).&lt;/li&gt; &#xA; &lt;li&gt;Trigger builds of documents that haven&#39;t been built, by URL.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;All JavaScript and TypeScript code needs to be formatted with &lt;code&gt;prettier&lt;/code&gt; and it&#39;s easy to test this with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn prettier-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And conveniently, if you&#39;re not even interested in what the flaws were, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn prettier-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you ran &lt;code&gt;yarn&lt;/code&gt; for the first time (&lt;code&gt;yarn&lt;/code&gt; is an alias for &lt;code&gt;yarn install&lt;/code&gt;) it automatically sets up a &lt;code&gt;git&lt;/code&gt; pre-commit hook that uses &lt;code&gt;lint-staged&lt;/code&gt; â€” a wrapper for &lt;code&gt;prettier&lt;/code&gt; that checks only the files in the git commit.&lt;/p&gt; &#xA;&lt;p&gt;If you have doubts about formatting, submit your pull request anyway. If you have formatting flaws, the &lt;a href=&#34;https://github.com/features/actions&#34;&gt;pull request checks&lt;/a&gt; should catch it.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading Packages&lt;/h3&gt; &#xA;&lt;p&gt;We maintain the dependencies using &lt;code&gt;Dependabot&lt;/code&gt; in GitHub but if you want to manually upgrade them you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn upgrade-interactive --latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sharing your dev environment with &lt;code&gt;ngrok&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ngrok.com/&#34;&gt;&lt;code&gt;ngrok&lt;/code&gt;&lt;/a&gt; allows you to start an HTTP proxy server from the web into your Yari server. This can be useful for testing your current build using external tools like BrowserStack, WebPageTest, or Google Translate, or to simply show a friend what you&#39;re up to. Obviously it&#39;ll never be faster than your uplink Internet connection but it should be fairly feature-complete.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dashboard.ngrok.com/signup&#34;&gt;Create in account on Ngrok.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ngrok.com/download&#34;&gt;Download the executable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start your Yari server with &lt;code&gt;yarn start&lt;/code&gt; in one terminal&lt;/li&gt; &#xA; &lt;li&gt;Start the &lt;code&gt;ngrok&lt;/code&gt; executable with: &lt;code&gt;/path/to/your/ngrok http 5042&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will display something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Session Status                online&#xA;Account                       (Plan: Free)&#xA;Version                       2.3.35&#xA;Region                        United States (us)&#xA;Web Interface                 http://127.0.0.1:4040&#xA;Forwarding                    http://920ba2108da8.ngrok.io -&amp;gt; http://localhost:5042&#xA;Forwarding                    https://920ba2108da8.ngrok.io -&amp;gt; http://localhost:5042&#xA;&#xA;Connections                   ttl     opn     rt1     rt5     p50     p90&#xA;                              0       0       0.00    0.00    0.00    0.00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, take that &#34;Forwarding&#34; URL (&lt;code&gt;https://920ba2108da8.ngrok.io&lt;/code&gt; in this example) and share it.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;server&lt;/code&gt; builds content automatically (on-the-fly) when you&#39;re viewing pages, but you can pre-emptively build all the content in advance if desired. One potential advantage is that you can get a more complete list of all possible &#34;flaws&#34; across all documents before you even visit them.&lt;/p&gt; &#xA;&lt;p&gt;The most fundamental CLI command is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What gets built&lt;/h3&gt; &#xA;&lt;p&gt;Every &lt;code&gt;index.html&lt;/code&gt; becomes two files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index.html&lt;/code&gt; â€” a fully formed and complete HTML file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;index.json&lt;/code&gt; â€” the state information React needs to build the page in the client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flaw checks&lt;/h3&gt; &#xA;&lt;p&gt;When building you can enable specific &#34;flaw checks&#34; and their level of handling. Some flaws are &#34;cosmetic&#34; and some are more severe but they should never block a full build.&lt;/p&gt; &#xA;&lt;p&gt;More information about how to set flaws can be found in &lt;code&gt;docs/envvars.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Essentially, the default is to &lt;em&gt;warn&lt;/em&gt; about any flaw and you can see those flaws when using &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. For completed builds, all flaws are ignored. This makes the build faster and there&#39;s also no good place to display the flaws in a production-grade build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In the future&lt;/strong&gt;, we might make the default flaw level &lt;code&gt;error&lt;/code&gt; instead. That means that any new edits to (or creation of) any document will break in continuous integration if there&#39;s a single flaw and the onus will be on you to fix it.&lt;/p&gt; &#xA;&lt;h2&gt;Icons and logos&lt;/h2&gt; &#xA;&lt;p&gt;The various formats and sizes of the favicon are generated from the file &lt;code&gt;mdn-web-docs.svg&lt;/code&gt; in the repository root. This file is then converted to favicons using &lt;a href=&#34;https://realfavicongenerator.net/&#34;&gt;realfavicongenerator.net&lt;/a&gt;. To generate new favicons, edit or replace the &lt;code&gt;mdn-web-docs.svg&lt;/code&gt; file and then re-upload that to realfavicongenerator.net.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you want to talk to us, ask questions, and find out more, join the discussion on the &lt;a href=&#34;https://chat.mozilla.org/#/room/#mdn:mozilla.org&#34;&gt;MDN Web Docs chat room&lt;/a&gt; on &lt;a href=&#34;https://wiki.mozilla.org/Matrix&#34;&gt;Matrix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Some common issues and how to resolve them.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Error: ENOSPC: System limit for number of file watchers reached&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There are two options to resolve this.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Disable the watcher via &lt;a href=&#34;https://raw.githubusercontent.com/mdn/yari/main/docs/envvars.md#react_app_no_watcher&#34;&gt;&lt;code&gt;REACT_APP_NO_WATCHER&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;echo REACT_APP_NO_WATCHER=true &amp;gt;&amp;gt; .env&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Increase &lt;code&gt;max_user_watches&lt;/code&gt;:&lt;br&gt; See &lt;a href=&#34;https://github.com/guard/listen#increasing-the-amount-of-inotify-watchers&#34;&gt;https://github.com/guard/listen#increasing-the-amount-of-inotify-watchers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;code&gt;Error: Cannot find module &#39;levenary&#39;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We can&#39;t know for sure what&#39;s causing this error but speculate a bug in how &lt;code&gt;yarn&lt;/code&gt; fails to resolve if certain &lt;code&gt;@babel&lt;/code&gt; helper libs should install its own sub-dependencies. A sure way to solve it is to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -fr node_modules&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;Error: listen EADDRINUSE: address already in use :::5042&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The default server port &lt;code&gt;:5042&lt;/code&gt; might be in use by another process. To resolve this, you can pick any unused port (e.g., 6000) and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo SERVER_PORT=6000 &amp;gt;&amp;gt; .env&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>