<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-19T01:41:42Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>adrianhajdin/ai_saas_app</title>
    <updated>2024-02-19T01:41:42Z</updated>
    <id>tag:github.com,2024-02-19:/adrianhajdin/ai_saas_app</id>
    <link href="https://github.com/adrianhajdin/ai_saas_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build a REAL Software-as-a-Service app with AI features and payments &amp; credits system that you might even turn into a side income or business idea using Next.js 14, Clerk, MongoDB, Cloudinary AI, and Stripe.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/Ahwoks_dawU?feature=shared&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/daf9e91b-6342-4e9a-9361-8dc2bd01ce64&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Next_JS-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=nextdotjs&amp;amp;color=000000&#34; alt=&#34;nextdotjs&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-TypeScript-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=typescript&amp;amp;color=3178C6&#34; alt=&#34;typescript&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Stripe-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=stripe&amp;amp;color=008CDD&#34; alt=&#34;stripe&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-MongoDB-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=mongodb&amp;amp;color=47A248&#34; alt=&#34;mongodb&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Tailwind_CSS-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=tailwindcss&amp;amp;color=06B6D4&#34; alt=&#34;tailwindcss&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;An AI SaaS Platform&lt;/h3&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;   Build this project step by step with our detailed tutorial on &#xA;  &lt;a href=&#34;https://www.youtube.com/@javascriptmastery/videos&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;JavaScript Mastery&lt;/b&gt;&lt;/a&gt; YouTube. Join the JSM family! &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;📋 &lt;a name=&#34;table&#34;&gt;Table of Contents&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🤖 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/ai_saas_app/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/ai_saas_app/main/#tech-stack&#34;&gt;Tech Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔋 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/ai_saas_app/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🤸 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/ai_saas_app/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🕸️ &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/ai_saas_app/main/#snippets&#34;&gt;Snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔗 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/ai_saas_app/main/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/ai_saas_app/main/#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🚨 Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the code corresponding to an in-depth tutorial available on our YouTube channel, &lt;a href=&#34;https://www.youtube.com/@javascriptmastery/videos&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;JavaScript Mastery&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer visual learning, this is the perfect resource for you. Follow our tutorial to learn how to build projects like these step-by-step in a beginner-friendly manner!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/Ahwoks_dawU?feature=shared&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/1736fca5-a031-4854-8c09-bc110e3bc16d&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;introduction&#34;&gt;🤖 Introduction&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Build an AI image SaaS platform that excels in image processing capabilities, integrates a secure payment infrastructure, offers advanced image search functionalities, and supports multiple AI features, including image restoration, recoloring, object removal, generative filling, and background removal. This project can be a guide for your next AI image tool and a boost to your portfolio.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re getting started and need assistance or face any bugs, join our active Discord community with over 27k+ members. It&#39;s a place where people help each other out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/n6EdbFJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/618f4872-1e10-42da-8213-1d69e486d02e&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;tech-stack&#34;&gt;⚙️ Tech Stack&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next.js&lt;/li&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;MongoDB&lt;/li&gt; &#xA; &lt;li&gt;Clerk&lt;/li&gt; &#xA; &lt;li&gt;Cloudinary&lt;/li&gt; &#xA; &lt;li&gt;Stripe&lt;/li&gt; &#xA; &lt;li&gt;Shadcn&lt;/li&gt; &#xA; &lt;li&gt;TailwindCSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;features&#34;&gt;🔋 Features&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Authentication and Authorization&lt;/strong&gt;: Secure user access with registration, login, and route protection.&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Community Image Showcase&lt;/strong&gt;: Explore user transformations with easy navigation using pagination&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Advanced Image Search&lt;/strong&gt;: Find images by content or objects present inside the image quickly and accurately&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Image Restoration&lt;/strong&gt;: Revive old or damaged images effortlessly&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Image Recoloring&lt;/strong&gt;: Customize images by replacing objects with desired colors easily&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Image Generative Fill&lt;/strong&gt;: Fill in missing areas of images seamlessly&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Object Removal&lt;/strong&gt;: Clean up images by removing unwanted objects with precision&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Background Removal&lt;/strong&gt;: Extract objects from backgrounds with ease&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Download Transformed Images&lt;/strong&gt;: Save and share AI-transformed images conveniently&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Transformed Image Details&lt;/strong&gt;: View details of transformations for each image&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Transformation Management&lt;/strong&gt;: Control over deletion and updates of transformations&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Credits System&lt;/strong&gt;: Earn or purchase credits for image transformations&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Profile Page&lt;/strong&gt;: Access transformed images and credit information personally&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Credits Purchase&lt;/strong&gt;: Securely buy credits via Stripe for uninterrupted use&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Responsive UI/UX&lt;/strong&gt;: A seamless experience across devices with a user-friendly interface&lt;/p&gt; &#xA;&lt;p&gt;and many more, including code architecture and reusability&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;quick-start&#34;&gt;🤸 Quick Start&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps to set up the project locally on your machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have the following installed on your machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; (Node Package Manager)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cloning the Repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/adrianhajdin/imaginify.git&#xA;cd imaginify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the project dependencies using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Set Up Environment Variables&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a new file named &lt;code&gt;.env.local&lt;/code&gt; in the root of your project and add the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;#NEXT&#xA;NEXT_PUBLIC_SERVER_URL=&#xA;&#xA;#MONGODB&#xA;MONGODB_URL=&#xA;&#xA;#CLERK&#xA;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=&#xA;CLERK_SECRET_KEY=&#xA;WEBHOOK_SECRET=&#xA;&#xA;NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in&#xA;NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up&#xA;NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/&#xA;NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/&#xA;&#xA;#CLOUDINARY&#xA;NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=&#xA;CLOUDINARY_API_KEY=&#xA;CLOUDINARY_API_SECRET=&#xA;&#xA;#STRIPE&#xA;STRIPE_SECRET_KEY=&#xA;STRIPE_WEBHOOK_SECRET=&#xA;NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace the placeholder values with your actual respective account credentials. You can obtain these credentials by signing up on the &lt;a href=&#34;https://clerk.com/&#34;&gt;Clerk&lt;/a&gt;, &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;, &lt;a href=&#34;https://cloudinary.com/&#34;&gt;Cloudinary&lt;/a&gt; and &lt;a href=&#34;https://stripe.com&#34;&gt;Stripe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Running the Project&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to view the project.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;snippets&#34;&gt;🕸️ Snippets&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;tailwind.config.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;/** @type {import(&#39;tailwindcss&#39;).Config} */&#xA;module.exports = {&#xA;  darkMode: [&#34;class&#34;],&#xA;  content: [&#xA;    &#34;./pages/**/*.{ts,tsx}&#34;,&#xA;    &#34;./components/**/*.{ts,tsx}&#34;,&#xA;    &#34;./app/**/*.{ts,tsx}&#34;,&#xA;    &#34;./src/**/*.{ts,tsx}&#34;,&#xA;  ],&#xA;  prefix: &#34;&#34;,&#xA;  theme: {&#xA;    container: {&#xA;      center: true,&#xA;      padding: &#34;2rem&#34;,&#xA;      screens: {&#xA;        &#34;2xl&#34;: &#34;1400px&#34;,&#xA;      },&#xA;    },&#xA;    extend: {&#xA;      colors: {&#xA;        border: &#34;hsl(var(--border))&#34;,&#xA;        input: &#34;hsl(var(--input))&#34;,&#xA;        ring: &#34;hsl(var(--ring))&#34;,&#xA;        background: &#34;hsl(var(--background))&#34;,&#xA;        foreground: &#34;hsl(var(--foreground))&#34;,&#xA;        purple: {&#xA;          100: &#34;#F4F7FE&#34;,&#xA;          200: &#34;#BCB6FF&#34;,&#xA;          400: &#34;#868CFF&#34;,&#xA;          500: &#34;#7857FF&#34;,&#xA;          600: &#34;#4318FF&#34;,&#xA;        },&#xA;        dark: {&#xA;          400: &#34;#7986AC&#34;,&#xA;          500: &#34;#606C80&#34;,&#xA;          600: &#34;#2B3674&#34;,&#xA;          700: &#34;#384262&#34;,&#xA;        },&#xA;        primary: {&#xA;          DEFAULT: &#34;hsl(var(--primary))&#34;,&#xA;          foreground: &#34;hsl(var(--primary-foreground))&#34;,&#xA;        },&#xA;        secondary: {&#xA;          DEFAULT: &#34;hsl(var(--secondary))&#34;,&#xA;          foreground: &#34;hsl(var(--secondary-foreground))&#34;,&#xA;        },&#xA;        destructive: {&#xA;          DEFAULT: &#34;hsl(var(--destructive))&#34;,&#xA;          foreground: &#34;hsl(var(--destructive-foreground))&#34;,&#xA;        },&#xA;        muted: {&#xA;          DEFAULT: &#34;hsl(var(--muted))&#34;,&#xA;          foreground: &#34;hsl(var(--muted-foreground))&#34;,&#xA;        },&#xA;        accent: {&#xA;          DEFAULT: &#34;hsl(var(--accent))&#34;,&#xA;          foreground: &#34;hsl(var(--accent-foreground))&#34;,&#xA;        },&#xA;        popover: {&#xA;          DEFAULT: &#34;hsl(var(--popover))&#34;,&#xA;          foreground: &#34;hsl(var(--popover-foreground))&#34;,&#xA;        },&#xA;        card: {&#xA;          DEFAULT: &#34;hsl(var(--card))&#34;,&#xA;          foreground: &#34;hsl(var(--card-foreground))&#34;,&#xA;        },&#xA;      },&#xA;      fontFamily: {&#xA;        IBMPlex: [&#34;var(--font-ibm-plex)&#34;],&#xA;      },&#xA;      backgroundImage: {&#xA;        &#34;purple-gradient&#34;: &#34;url(&#39;/assets/images/gradient-bg.svg&#39;)&#34;,&#xA;        banner: &#34;url(&#39;/assets/images/banner-bg.png&#39;)&#34;,&#xA;      },&#xA;      borderRadius: {&#xA;        lg: &#34;var(--radius)&#34;,&#xA;        md: &#34;calc(var(--radius) - 2px)&#34;,&#xA;        sm: &#34;calc(var(--radius) - 4px)&#34;,&#xA;      },&#xA;      keyframes: {&#xA;        &#34;accordion-down&#34;: {&#xA;          from: { height: &#34;0&#34; },&#xA;          to: { height: &#34;var(--radix-accordion-content-height)&#34; },&#xA;        },&#xA;        &#34;accordion-up&#34;: {&#xA;          from: { height: &#34;var(--radix-accordion-content-height)&#34; },&#xA;          to: { height: &#34;0&#34; },&#xA;        },&#xA;      },&#xA;      animation: {&#xA;        &#34;accordion-down&#34;: &#34;accordion-down 0.2s ease-out&#34;,&#xA;        &#34;accordion-up&#34;: &#34;accordion-up 0.2s ease-out&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  plugins: [require(&#34;tailwindcss-animate&#34;)],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;globals.css&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@tailwind base;&#xA;@tailwind components;&#xA;@tailwind utilities;&#xA;&#xA;@layer base {&#xA;  :root {&#xA;    --background: 0 0% 100%;&#xA;    --foreground: 222.2 84% 4.9%;&#xA;&#xA;    --card: 0 0% 100%;&#xA;    --card-foreground: 222.2 84% 4.9%;&#xA;&#xA;    --popover: 0 0% 100%;&#xA;    --popover-foreground: 222.2 84% 4.9%;&#xA;&#xA;    --primary: 222.2 47.4% 11.2%;&#xA;    --primary-foreground: 210 40% 98%;&#xA;&#xA;    --secondary: 210 40% 96.1%;&#xA;    --secondary-foreground: 222.2 47.4% 11.2%;&#xA;&#xA;    --muted: 210 40% 96.1%;&#xA;    --muted-foreground: 215.4 16.3% 46.9%;&#xA;&#xA;    --accent: 210 40% 96.1%;&#xA;    --accent-foreground: 222.2 47.4% 11.2%;&#xA;&#xA;    --destructive: 0 84.2% 60.2%;&#xA;    --destructive-foreground: 210 40% 98%;&#xA;&#xA;    --border: 214.3 31.8% 91.4%;&#xA;    --input: 214.3 31.8% 91.4%;&#xA;    --ring: 222.2 84% 4.9%;&#xA;&#xA;    --radius: 0.5rem;&#xA;  }&#xA;&#xA;  .dark {&#xA;    --background: 222.2 84% 4.9%;&#xA;    --foreground: 210 40% 98%;&#xA;&#xA;    --card: 222.2 84% 4.9%;&#xA;    --card-foreground: 210 40% 98%;&#xA;&#xA;    --popover: 222.2 84% 4.9%;&#xA;    --popover-foreground: 210 40% 98%;&#xA;&#xA;    --primary: 210 40% 98%;&#xA;    --primary-foreground: 222.2 47.4% 11.2%;&#xA;&#xA;    --secondary: 217.2 32.6% 17.5%;&#xA;    --secondary-foreground: 210 40% 98%;&#xA;&#xA;    --muted: 217.2 32.6% 17.5%;&#xA;    --muted-foreground: 215 20.2% 65.1%;&#xA;&#xA;    --accent: 217.2 32.6% 17.5%;&#xA;    --accent-foreground: 210 40% 98%;&#xA;&#xA;    --destructive: 0 62.8% 30.6%;&#xA;    --destructive-foreground: 210 40% 98%;&#xA;&#xA;    --border: 217.2 32.6% 17.5%;&#xA;    --input: 217.2 32.6% 17.5%;&#xA;    --ring: 212.7 26.8% 83.9%;&#xA;  }&#xA;}&#xA;&#xA;@layer base {&#xA;  * {&#xA;    @apply border-border;&#xA;  }&#xA;  body {&#xA;    @apply bg-background text-foreground;&#xA;  }&#xA;}&#xA;&#xA;.auth {&#xA;  @apply flex-center min-h-screen w-full bg-purple-100&#xA;}&#xA;&#xA;.root {&#xA;  @apply flex min-h-screen w-full flex-col bg-white lg:flex-row;&#xA;}&#xA;&#xA;.root-container {&#xA;  @apply mt-16 flex-1 overflow-auto py-8 lg:mt-0 lg:max-h-screen lg:py-10&#xA;}&#xA;&#xA;/* ========================================== TAILWIND STYLES */&#xA;@layer utilities {&#xA;  /* ===== UTILITIES */&#xA;  .wrapper {&#xA;    @apply max-w-5xl mx-auto px-5 md:px-10 w-full text-dark-400 p-16-regular;&#xA;  }&#xA;&#xA;  .gradient-text {&#xA;    @apply bg-purple-gradient bg-cover bg-clip-text text-transparent;&#xA;  }&#xA;&#xA;  /* ===== ALIGNMENTS */&#xA;  .flex-center {&#xA;    @apply flex justify-center items-center;&#xA;  }&#xA;&#xA;  .flex-between {&#xA;    @apply flex justify-between items-center;&#xA;  }&#xA;&#xA;  /* ===== TYPOGRAPHY */&#xA;  /* 44 */&#xA;  .h1-semibold {&#xA;    @apply text-[36px] font-semibold sm:text-[44px] leading-[120%] sm:leading-[56px];&#xA;  }&#xA;&#xA;  /* 36 */&#xA;  .h2-bold {&#xA;    @apply text-[30px] font-bold md:text-[36px] leading-[110%];&#xA;  }&#xA;&#xA;  /* 30 */&#xA;  .h3-bold {&#xA;    @apply font-bold text-[30px] leading-[140%];&#xA;  }&#xA;&#xA;  /* 24 */&#xA;  .p-24-bold {&#xA;    @apply font-bold text-[24px] leading-[120%];&#xA;  }&#xA;&#xA;  /* 20 */&#xA;  .p-20-semibold {&#xA;    @apply font-semibold text-[20px] leading-[140%];&#xA;  }&#xA;&#xA;  .p-20-regular {&#xA;    @apply font-normal text-[20px] leading-[140%];&#xA;  }&#xA;&#xA;  /* 18 */&#xA;  .p-18-semibold {&#xA;    @apply font-semibold text-[18px] leading-[140%];&#xA;  }&#xA;&#xA;  /* 16 */&#xA;  .p-16-semibold {&#xA;    @apply font-semibold text-[16px] leading-[140%];&#xA;  }&#xA;&#xA;  .p-16-medium {&#xA;    @apply font-medium text-[16px] leading-[140%];&#xA;  }&#xA;&#xA;  .p-16-regular {&#xA;    @apply font-normal text-[16px] leading-[140%];&#xA;  }&#xA;&#xA;  /* 14 */&#xA;  .p-14-medium {&#xA;    @apply font-medium text-[14px] leading-[120%];&#xA;  }&#xA;&#xA;  /* 10 */&#xA;  .p-10-medium {&#xA;    @apply font-medium text-[10px] leading-[140%];&#xA;  }&#xA;&#xA;  /* =====  SHADCN OVERRIDES */&#xA;  .button {&#xA;    @apply py-4 px-6 flex-center gap-3 rounded-full p-16-semibold focus-visible:ring-offset-0 focus-visible:ring-transparent !important;&#xA;  }&#xA;&#xA;  .dropdown-content {&#xA;    @apply shadow-lg rounded-md overflow-hidden p-0;&#xA;  }&#xA;&#xA;  .dropdown-item {&#xA;    @apply p-16-semibold text-dark-700 cursor-pointer transition-all px-4 py-3 rounded-none outline-none hover:border-none focus-visible:ring-transparent hover:text-white hover:bg-purple-gradient hover:bg-cover focus-visible:ring-offset-0 focus-visible:outline-none !important;&#xA;  }&#xA;&#xA;  .input-field {&#xA;    @apply rounded-[16px] border-2 border-purple-200/20 shadow-sm shadow-purple-200/15 text-dark-600 disabled:opacity-100 p-16-semibold h-[50px] md:h-[54px] focus-visible:ring-offset-0 px-4 py-3 focus-visible:ring-transparent !important;&#xA;  }&#xA;&#xA;  .search-field {&#xA;    @apply border-0 bg-transparent text-dark-600 w-full placeholder:text-dark-400 h-[50px] p-16-medium focus-visible:ring-offset-0 p-3 focus-visible:ring-transparent !important;&#xA;  }&#xA;&#xA;  .submit-button {&#xA;    @apply bg-purple-gradient bg-cover rounded-full py-4 px-6 p-16-semibold h-[50px] w-full md:h-[54px];&#xA;  }&#xA;&#xA;  .select-field {&#xA;    @apply w-full border-2 border-purple-200/20 shadow-sm shadow-purple-200/15 rounded-[16px] h-[50px] md:h-[54px] text-dark-600 p-16-semibold disabled:opacity-100 placeholder:text-dark-400/50 px-4 py-3 focus:ring-offset-0 focus-visible:ring-transparent focus:ring-transparent focus-visible:ring-0 focus-visible:outline-none !important;&#xA;  }&#xA;&#xA;  .select-trigger {&#xA;    @apply flex items-center  gap-2 py-5 capitalize focus-visible:outline-none;&#xA;  }&#xA;&#xA;  .select-item {&#xA;    @apply py-3 cursor-pointer hover:bg-purple-100;&#xA;  }&#xA;&#xA;  .IconButton {&#xA;    @apply focus-visible:ring-transparent focus:ring-offset-0 focus-visible:ring-offset-0 focus-visible:outline-none focus-visible:border-none !important;&#xA;  }&#xA;&#xA;  .sheet-content button {&#xA;    @apply focus:ring-0 focus-visible:ring-transparent focus:ring-offset-0 focus-visible:ring-offset-0 focus-visible:outline-none focus-visible:border-none !important;&#xA;  }&#xA;&#xA;  .success-toast {&#xA;    @apply bg-green-100 text-green-900;&#xA;  }&#xA;&#xA;  .error-toast {&#xA;    @apply bg-red-100 text-red-900;&#xA;  }&#xA;&#xA;  /* Home Page */&#xA;  .home {&#xA;    @apply sm:flex-center hidden h-72 flex-col gap-4 rounded-[20px] border bg-banner bg-cover bg-no-repeat p-10 shadow-inner;&#xA;  }&#xA;&#xA;  .home-heading {&#xA;    @apply h1-semibold max-w-[500px] flex-wrap text-center text-white shadow-sm;&#xA;  }&#xA;&#xA;  /* Credits Page */&#xA;  .credits-list {&#xA;    @apply mt-11 grid grid-cols-1 gap-5 sm:grid-cols-2 md:gap-9 xl:grid-cols-3;&#xA;  }&#xA;&#xA;  .credits-item {&#xA;    @apply w-full rounded-[16px] border-2 border-purple-200/20 bg-white p-8 shadow-xl shadow-purple-200/20 lg:max-w-none;&#xA;  }&#xA;&#xA;  .credits-btn {&#xA;    @apply w-full rounded-full bg-purple-100 bg-cover text-purple-500 hover:text-purple-500;&#xA;  }&#xA;&#xA;  /* Profile Page */&#xA;  .profile {&#xA;    @apply mt-5 flex flex-col gap-5 sm:flex-row md:mt-8 md:gap-10;&#xA;  }&#xA;&#xA;  .profile-balance {&#xA;    @apply w-full rounded-[16px] border-2 border-purple-200/20 bg-white p-5 shadow-lg shadow-purple-200/10 md:px-6 md:py-8;&#xA;  }&#xA;&#xA;  .profile-image-manipulation {&#xA;    @apply w-full rounded-[16px] border-2 border-purple-200/20 bg-white p-5 shadow-lg shadow-purple-200/10 md:px-6 md:py-8;&#xA;  }&#xA;&#xA;  /* Transformation Details */&#xA;  .transformation-grid {&#xA;    @apply grid h-fit min-h-[200px] grid-cols-1 gap-5 py-8 md:grid-cols-2;&#xA;  }&#xA;&#xA;  .transformation-original_image {&#xA;    @apply h-fit min-h-72 w-full rounded-[10px] border border-dashed bg-purple-100/20 object-cover p-2;&#xA;  }&#xA;&#xA;  /* Collection Component */&#xA;  .collection-heading {&#xA;    @apply md:flex-between mb-6 flex flex-col gap-5 md:flex-row;&#xA;  }&#xA;&#xA;  .collection-list {&#xA;    @apply grid grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-3;&#xA;  }&#xA;&#xA;  .collection-empty {&#xA;    @apply flex-center h-60 w-full rounded-[10px] border border-dark-400/10 bg-white/20;&#xA;  }&#xA;&#xA;  .collection-btn {&#xA;    @apply button w-32 bg-purple-gradient bg-cover text-white;&#xA;  }&#xA;&#xA;  .collection-card {&#xA;    @apply flex flex-1 cursor-pointer flex-col gap-5 rounded-[16px] border-2 border-purple-200/15 bg-white p-4 shadow-xl shadow-purple-200/10 transition-all hover:shadow-purple-200/20;&#xA;  }&#xA;&#xA;  /* MediaUploader Component */&#xA;  .media-uploader_cldImage {&#xA;    @apply h-fit min-h-72 w-full rounded-[10px] border border-dashed bg-purple-100/20 object-cover p-2;&#xA;  }&#xA;&#xA;  .media-uploader_cta {&#xA;    @apply flex-center flex h-72 cursor-pointer flex-col gap-5 rounded-[16px] border border-dashed bg-purple-100/20 shadow-inner;&#xA;  }&#xA;&#xA;  .media-uploader_cta-image {&#xA;    @apply rounded-[16px] bg-white  p-5 shadow-sm shadow-purple-200/50;&#xA;  }&#xA;&#xA;  /* Navbar Component */&#xA;  .header {&#xA;    @apply flex-between fixed h-16 w-full border-b-4 border-purple-100 bg-white p-5 lg:hidden;&#xA;  }&#xA;&#xA;  .header-nav_elements {&#xA;    @apply mt-8 flex w-full flex-col items-start gap-5;&#xA;  }&#xA;&#xA;  /* Search Component */&#xA;  .search {&#xA;    @apply flex w-full rounded-[16px] border-2 border-purple-200/20 bg-white px-4 shadow-sm shadow-purple-200/15 md:max-w-96;&#xA;  }&#xA;&#xA;  /* Sidebar Component */&#xA;  .sidebar {&#xA;    @apply hidden h-screen w-72 bg-white p-5 shadow-md shadow-purple-200/50 lg:flex;&#xA;  }&#xA;&#xA;  .sidebar-logo {&#xA;    @apply flex items-center gap-2 md:py-2;&#xA;  }&#xA;&#xA;  .sidebar-nav {&#xA;    @apply h-full flex-col justify-between md:flex md:gap-4;&#xA;  }&#xA;&#xA;  .sidebar-nav_elements {&#xA;    @apply hidden w-full flex-col items-start gap-2 md:flex;&#xA;  }&#xA;&#xA;  .sidebar-nav_element {&#xA;    @apply flex-center p-16-semibold w-full whitespace-nowrap rounded-full bg-cover  transition-all hover:bg-purple-100 hover:shadow-inner;&#xA;  }&#xA;&#xA;  .sidebar-link {&#xA;    @apply p-16-semibold flex size-full gap-4 p-4;&#xA;  }&#xA;&#xA;  /* TransformationForm Component */&#xA;  .prompt-field {&#xA;    @apply flex flex-col gap-5 lg:flex-row lg:gap-10;&#xA;  }&#xA;&#xA;  .media-uploader-field {&#xA;    @apply grid h-fit min-h-[200px] grid-cols-1 gap-5 py-4 md:grid-cols-2;&#xA;  }&#xA;&#xA;  /* TransformedImage Component */&#xA;  .download-btn {&#xA;    @apply p-14-medium mt-2 flex items-center gap-2 px-2;&#xA;  }&#xA;&#xA;  .transformed-image {&#xA;    @apply h-fit min-h-72 w-full rounded-[10px] border border-dashed bg-purple-100/20 object-cover p-2;&#xA;  }&#xA;&#xA;  .transforming-loader {&#xA;    @apply flex-center absolute left-[50%] top-[50%] size-full -translate-x-1/2 -translate-y-1/2 flex-col gap-2 rounded-[10px] border bg-dark-700/90;&#xA;  }&#xA;&#xA;  .transformed-placeholder {&#xA;    @apply flex-center p-14-medium h-full min-h-72 flex-col gap-5 rounded-[16px] border border-dashed bg-purple-100/20 shadow-inner;&#xA;  }&#xA;}&#xA;&#xA;/* =====  CLERK OVERRIDES */&#xA;.cl-userButtonBox {&#xA;  display: flex;&#xA;  flex-flow: row-reverse;&#xA;  gap: 12px;&#xA;}&#xA;&#xA;.cl-userButtonOuterIdentifier {&#xA;  font-size: 16px;&#xA;  font-weight: 600;&#xA;  color: #384262;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;constants/index.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;export const navLinks = [&#xA;  {&#xA;    label: &#34;Home&#34;,&#xA;    route: &#34;/&#34;,&#xA;    icon: &#34;/assets/icons/home.svg&#34;,&#xA;  },&#xA;  {&#xA;    label: &#34;Image Restore&#34;,&#xA;    route: &#34;/transformations/add/restore&#34;,&#xA;    icon: &#34;/assets/icons/image.svg&#34;,&#xA;  },&#xA;  {&#xA;    label: &#34;Generative Fill&#34;,&#xA;    route: &#34;/transformations/add/fill&#34;,&#xA;    icon: &#34;/assets/icons/stars.svg&#34;,&#xA;  },&#xA;  {&#xA;    label: &#34;Object Remove&#34;,&#xA;    route: &#34;/transformations/add/remove&#34;,&#xA;    icon: &#34;/assets/icons/scan.svg&#34;,&#xA;  },&#xA;  {&#xA;    label: &#34;Object Recolor&#34;,&#xA;    route: &#34;/transformations/add/recolor&#34;,&#xA;    icon: &#34;/assets/icons/filter.svg&#34;,&#xA;  },&#xA;  {&#xA;    label: &#34;Background Remove&#34;,&#xA;    route: &#34;/transformations/add/removeBackground&#34;,&#xA;    icon: &#34;/assets/icons/camera.svg&#34;,&#xA;  },&#xA;  {&#xA;    label: &#34;Profile&#34;,&#xA;    route: &#34;/profile&#34;,&#xA;    icon: &#34;/assets/icons/profile.svg&#34;,&#xA;  },&#xA;  {&#xA;    label: &#34;Buy Credits&#34;,&#xA;    route: &#34;/credits&#34;,&#xA;    icon: &#34;/assets/icons/bag.svg&#34;,&#xA;  },&#xA;];&#xA;&#xA;export const plans = [&#xA;  {&#xA;    _id: 1,&#xA;    name: &#34;Free&#34;,&#xA;    icon: &#34;/assets/icons/free-plan.svg&#34;,&#xA;    price: 0,&#xA;    credits: 20,&#xA;    inclusions: [&#xA;      {&#xA;        label: &#34;20 Free Credits&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Basic Access to Services&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Priority Customer Support&#34;,&#xA;        isIncluded: false,&#xA;      },&#xA;      {&#xA;        label: &#34;Priority Updates&#34;,&#xA;        isIncluded: false,&#xA;      },&#xA;    ],&#xA;  },&#xA;  {&#xA;    _id: 2,&#xA;    name: &#34;Pro Package&#34;,&#xA;    icon: &#34;/assets/icons/free-plan.svg&#34;,&#xA;    price: 40,&#xA;    credits: 120,&#xA;    inclusions: [&#xA;      {&#xA;        label: &#34;120 Credits&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Full Access to Services&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Priority Customer Support&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Priority Updates&#34;,&#xA;        isIncluded: false,&#xA;      },&#xA;    ],&#xA;  },&#xA;  {&#xA;    _id: 3,&#xA;    name: &#34;Premium Package&#34;,&#xA;    icon: &#34;/assets/icons/free-plan.svg&#34;,&#xA;    price: 199,&#xA;    credits: 2000,&#xA;    inclusions: [&#xA;      {&#xA;        label: &#34;2000 Credits&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Full Access to Services&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Priority Customer Support&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;      {&#xA;        label: &#34;Priority Updates&#34;,&#xA;        isIncluded: true,&#xA;      },&#xA;    ],&#xA;  },&#xA;];&#xA;&#xA;export const transformationTypes = {&#xA;  restore: {&#xA;    type: &#34;restore&#34;,&#xA;    title: &#34;Restore Image&#34;,&#xA;    subTitle: &#34;Refine images by removing noise and imperfections&#34;,&#xA;    config: { restore: true },&#xA;    icon: &#34;image.svg&#34;,&#xA;  },&#xA;  removeBackground: {&#xA;    type: &#34;removeBackground&#34;,&#xA;    title: &#34;Background Remove&#34;,&#xA;    subTitle: &#34;Removes the background of the image using AI&#34;,&#xA;    config: { removeBackground: true },&#xA;    icon: &#34;camera.svg&#34;,&#xA;  },&#xA;  fill: {&#xA;    type: &#34;fill&#34;,&#xA;    title: &#34;Generative Fill&#34;,&#xA;    subTitle: &#34;Enhance an image&#39;s dimensions using AI outpainting&#34;,&#xA;    config: { fillBackground: true },&#xA;    icon: &#34;stars.svg&#34;,&#xA;  },&#xA;  remove: {&#xA;    type: &#34;remove&#34;,&#xA;    title: &#34;Object Remove&#34;,&#xA;    subTitle: &#34;Identify and eliminate objects from images&#34;,&#xA;    config: {&#xA;      remove: { prompt: &#34;&#34;, removeShadow: true, multiple: true },&#xA;    },&#xA;    icon: &#34;scan.svg&#34;,&#xA;  },&#xA;  recolor: {&#xA;    type: &#34;recolor&#34;,&#xA;    title: &#34;Object Recolor&#34;,&#xA;    subTitle: &#34;Identify and recolor objects from the image&#34;,&#xA;    config: {&#xA;      recolor: { prompt: &#34;&#34;, to: &#34;&#34;, multiple: true },&#xA;    },&#xA;    icon: &#34;filter.svg&#34;,&#xA;  },&#xA;};&#xA;&#xA;export const aspectRatioOptions = {&#xA;  &#34;1:1&#34;: {&#xA;    aspectRatio: &#34;1:1&#34;,&#xA;    label: &#34;Square (1:1)&#34;,&#xA;    width: 1000,&#xA;    height: 1000,&#xA;  },&#xA;  &#34;3:4&#34;: {&#xA;    aspectRatio: &#34;3:4&#34;,&#xA;    label: &#34;Standard Portrait (3:4)&#34;,&#xA;    width: 1000,&#xA;    height: 1334,&#xA;  },&#xA;  &#34;9:16&#34;: {&#xA;    aspectRatio: &#34;9:16&#34;,&#xA;    label: &#34;Phone Portrait (9:16)&#34;,&#xA;    width: 1000,&#xA;    height: 1778,&#xA;  },&#xA;};&#xA;&#xA;export const defaultValues = {&#xA;  title: &#34;&#34;,&#xA;  aspectRatio: &#34;&#34;,&#xA;  color: &#34;&#34;,&#xA;  prompt: &#34;&#34;,&#xA;  publicId: &#34;&#34;,&#xA;};&#xA;&#xA;export const creditFee = -1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;user.model.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Schema, model, models } from &#34;mongoose&#34;;&#xA;&#xA;const UserSchema = new Schema({&#xA;  clerkId: {&#xA;    type: String,&#xA;    required: true,&#xA;    unique: true,&#xA;  },&#xA;  email: {&#xA;    type: String,&#xA;    required: true,&#xA;    unique: true,&#xA;  },&#xA;  username: {&#xA;    type: String,&#xA;    required: true,&#xA;    unique: true,&#xA;  },&#xA;  photo: {&#xA;    type: String,&#xA;    required: true,&#xA;  },&#xA;  firstName: {&#xA;    type: String,&#xA;  },&#xA;  lastName: {&#xA;    type: String,&#xA;  },&#xA;  planId: {&#xA;    type: Number,&#xA;    default: 1,&#xA;  },&#xA;  creditBalance: {&#xA;    type: Number,&#xA;    default: 10,&#xA;  },&#xA;});&#xA;&#xA;const User = models?.User || model(&#34;User&#34;, UserSchema);&#xA;&#xA;export default User;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;transaction.model.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Schema, model, models } from &#34;mongoose&#34;;&#xA;&#xA;const TransactionSchema = new Schema({&#xA;  createdAt: {&#xA;    type: Date,&#xA;    default: Date.now,&#xA;  },&#xA;  stripeId: {&#xA;    type: String,&#xA;    required: true,&#xA;    unique: true,&#xA;  },&#xA;  amount: {&#xA;    type: Number,&#xA;    required: true,&#xA;  },&#xA;  plan: {&#xA;    type: String,&#xA;  },&#xA;  credits: {&#xA;    type: Number,&#xA;  },&#xA;  buyer: {&#xA;    type: Schema.Types.ObjectId,&#xA;    ref: &#34;User&#34;,&#xA;  },&#xA;});&#xA;&#xA;const Transaction = models?.Transaction || model(&#34;Transaction&#34;, TransactionSchema);&#xA;&#xA;export default Transaction;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;InsufficientCreditsModal.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import Image from &#34;next/image&#34;;&#xA;import { useRouter } from &#34;next/navigation&#34;;&#xA;&#xA;import {&#xA;  AlertDialog,&#xA;  AlertDialogAction,&#xA;  AlertDialogCancel,&#xA;  AlertDialogContent,&#xA;  AlertDialogDescription,&#xA;  AlertDialogFooter,&#xA;  AlertDialogHeader,&#xA;  AlertDialogTitle,&#xA;} from &#34;@/components/ui/alert-dialog&#34;;&#xA;&#xA;export const InsufficientCreditsModal = () =&amp;gt; {&#xA;  const router = useRouter();&#xA;&#xA;  return (&#xA;    &amp;lt;AlertDialog defaultOpen&amp;gt;&#xA;      &amp;lt;AlertDialogContent&amp;gt;&#xA;        &amp;lt;AlertDialogHeader&amp;gt;&#xA;          &amp;lt;div className=&#34;flex-between&#34;&amp;gt;&#xA;            &amp;lt;p className=&#34;p-16-semibold text-dark-400&#34;&amp;gt;Insufficient Credits&amp;lt;/p&amp;gt;&#xA;            &amp;lt;AlertDialogCancel&#xA;              className=&#34;border-0 p-0 hover:bg-transparent&#34;&#xA;              onClick={() =&amp;gt; router.push(&#34;/profile&#34;)}&#xA;            &amp;gt;&#xA;              &amp;lt;Image&#xA;                src=&#34;/assets/icons/close.svg&#34;&#xA;                alt=&#34;credit coins&#34;&#xA;                width={24}&#xA;                height={24}&#xA;                className=&#34;cursor-pointer&#34;&#xA;              /&amp;gt;&#xA;            &amp;lt;/AlertDialogCancel&amp;gt;&#xA;          &amp;lt;/div&amp;gt;&#xA;&#xA;          &amp;lt;Image&#xA;            src=&#34;/assets/images/stacked-coins.png&#34;&#xA;            alt=&#34;credit coins&#34;&#xA;            width={462}&#xA;            height={122}&#xA;          /&amp;gt;&#xA;&#xA;          &amp;lt;AlertDialogTitle className=&#34;p-24-bold text-dark-600&#34;&amp;gt;&#xA;            Oops.... Looks like you&amp;amp;#39;ve run out of free credits!&#xA;          &amp;lt;/AlertDialogTitle&amp;gt;&#xA;&#xA;          &amp;lt;AlertDialogDescription className=&#34;p-16-regular py-3&#34;&amp;gt;&#xA;            No worries, though - you can keep enjoying our services by grabbing&#xA;            more credits.&#xA;          &amp;lt;/AlertDialogDescription&amp;gt;&#xA;        &amp;lt;/AlertDialogHeader&amp;gt;&#xA;        &amp;lt;AlertDialogFooter&amp;gt;&#xA;          &amp;lt;AlertDialogCancel&#xA;            className=&#34;button w-full bg-purple-100 text-dark-400&#34;&#xA;            onClick={() =&amp;gt; router.push(&#34;/profile&#34;)}&#xA;          &amp;gt;&#xA;            No, Cancel&#xA;          &amp;lt;/AlertDialogCancel&amp;gt;&#xA;          &amp;lt;AlertDialogAction&#xA;            className=&#34;button w-full bg-purple-gradient  bg-cover&#34;&#xA;            onClick={() =&amp;gt; router.push(&#34;/credits&#34;)}&#xA;          &amp;gt;&#xA;            Yes, Proceed&#xA;          &amp;lt;/AlertDialogAction&amp;gt;&#xA;        &amp;lt;/AlertDialogFooter&amp;gt;&#xA;      &amp;lt;/AlertDialogContent&amp;gt;&#xA;    &amp;lt;/AlertDialog&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;user.action.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use server&#34;;&#xA;&#xA;import { revalidatePath } from &#34;next/cache&#34;;&#xA;&#xA;import User from &#34;../database/models/user.model&#34;;&#xA;import { connectToDatabase } from &#34;../database/mongoose&#34;;&#xA;import { handleError } from &#34;../utils&#34;;&#xA;&#xA;// CREATE&#xA;export async function createUser(user: CreateUserParams) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const newUser = await User.create(user);&#xA;&#xA;    return JSON.parse(JSON.stringify(newUser));&#xA;  } catch (error) {&#xA;    handleError(error);&#xA;  }&#xA;}&#xA;&#xA;// READ&#xA;export async function getUserById(userId: string) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const user = await User.findOne({ clerkId: userId });&#xA;&#xA;    if (!user) throw new Error(&#34;User not found&#34;);&#xA;&#xA;    return JSON.parse(JSON.stringify(user));&#xA;  } catch (error) {&#xA;    handleError(error);&#xA;  }&#xA;}&#xA;&#xA;// UPDATE&#xA;export async function updateUser(clerkId: string, user: UpdateUserParams) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const updatedUser = await User.findOneAndUpdate({ clerkId }, user, {&#xA;      new: true,&#xA;    });&#xA;&#xA;    if (!updatedUser) throw new Error(&#34;User update failed&#34;);&#xA;    &#xA;    return JSON.parse(JSON.stringify(updatedUser));&#xA;  } catch (error) {&#xA;    handleError(error);&#xA;  }&#xA;}&#xA;&#xA;// DELETE&#xA;export async function deleteUser(clerkId: string) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    // Find user to delete&#xA;    const userToDelete = await User.findOne({ clerkId });&#xA;&#xA;    if (!userToDelete) {&#xA;      throw new Error(&#34;User not found&#34;);&#xA;    }&#xA;&#xA;    // Delete user&#xA;    const deletedUser = await User.findByIdAndDelete(userToDelete._id);&#xA;    revalidatePath(&#34;/&#34;);&#xA;&#xA;    return deletedUser ? JSON.parse(JSON.stringify(deletedUser)) : null;&#xA;  } catch (error) {&#xA;    handleError(error);&#xA;  }&#xA;}&#xA;&#xA;// USE CREDITS&#xA;export async function updateCredits(userId: string, creditFee: number) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const updatedUserCredits = await User.findOneAndUpdate(&#xA;      { _id: userId },&#xA;      { $inc: { creditBalance: creditFee }},&#xA;      { new: true }&#xA;    )&#xA;&#xA;    if(!updatedUserCredits) throw new Error(&#34;User credits update failed&#34;);&#xA;&#xA;    return JSON.parse(JSON.stringify(updatedUserCredits));&#xA;  } catch (error) {&#xA;    handleError(error);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;utils.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;/* eslint-disable prefer-const */&#xA;/* eslint-disable no-prototype-builtins */&#xA;import { type ClassValue, clsx } from &#34;clsx&#34;;&#xA;import qs from &#34;qs&#34;;&#xA;import { twMerge } from &#34;tailwind-merge&#34;;&#xA;&#xA;import { aspectRatioOptions } from &#34;@/constants&#34;;&#xA;&#xA;export function cn(...inputs: ClassValue[]) {&#xA;  return twMerge(clsx(inputs));&#xA;}&#xA;&#xA;// ERROR HANDLER&#xA;export const handleError = (error: unknown) =&amp;gt; {&#xA;  if (error instanceof Error) {&#xA;    // This is a native JavaScript error (e.g., TypeError, RangeError)&#xA;    console.error(error.message);&#xA;    throw new Error(`Error: ${error.message}`);&#xA;  } else if (typeof error === &#34;string&#34;) {&#xA;    // This is a string error message&#xA;    console.error(error);&#xA;    throw new Error(`Error: ${error}`);&#xA;  } else {&#xA;    // This is an unknown type of error&#xA;    console.error(error);&#xA;    throw new Error(`Unknown error: ${JSON.stringify(error)}`);&#xA;  }&#xA;};&#xA;&#xA;// PLACEHOLDER LOADER - while image is transforming&#xA;const shimmer = (w: number, h: number) =&amp;gt; `&#xA;&amp;lt;svg width=&#34;${w}&#34; height=&#34;${h}&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34;&amp;gt;&#xA;  &amp;lt;defs&amp;gt;&#xA;    &amp;lt;linearGradient id=&#34;g&#34;&amp;gt;&#xA;      &amp;lt;stop stop-color=&#34;#7986AC&#34; offset=&#34;20%&#34; /&amp;gt;&#xA;      &amp;lt;stop stop-color=&#34;#68769e&#34; offset=&#34;50%&#34; /&amp;gt;&#xA;      &amp;lt;stop stop-color=&#34;#7986AC&#34; offset=&#34;70%&#34; /&amp;gt;&#xA;    &amp;lt;/linearGradient&amp;gt;&#xA;  &amp;lt;/defs&amp;gt;&#xA;  &amp;lt;rect width=&#34;${w}&#34; height=&#34;${h}&#34; fill=&#34;#7986AC&#34; /&amp;gt;&#xA;  &amp;lt;rect id=&#34;r&#34; width=&#34;${w}&#34; height=&#34;${h}&#34; fill=&#34;url(#g)&#34; /&amp;gt;&#xA;  &amp;lt;animate xlink:href=&#34;#r&#34; attributeName=&#34;x&#34; from=&#34;-${w}&#34; to=&#34;${w}&#34; dur=&#34;1s&#34; repeatCount=&#34;indefinite&#34;  /&amp;gt;&#xA;&amp;lt;/svg&amp;gt;`;&#xA;&#xA;const toBase64 = (str: string) =&amp;gt;&#xA;  typeof window === &#34;undefined&#34;&#xA;    ? Buffer.from(str).toString(&#34;base64&#34;)&#xA;    : window.btoa(str);&#xA;&#xA;export const dataUrl = `data:image/svg+xml;base64,${toBase64(&#xA;  shimmer(1000, 1000)&#xA;)}`;&#xA;// ==== End&#xA;&#xA;// FORM URL QUERY&#xA;export const formUrlQuery = ({&#xA;  searchParams,&#xA;  key,&#xA;  value,&#xA;}: FormUrlQueryParams) =&amp;gt; {&#xA;  const params = { ...qs.parse(searchParams.toString()), [key]: value };&#xA;&#xA;  return `${window.location.pathname}?${qs.stringify(params, {&#xA;    skipNulls: true,&#xA;  })}`;&#xA;};&#xA;&#xA;// REMOVE KEY FROM QUERY&#xA;export function removeKeysFromQuery({&#xA;  searchParams,&#xA;  keysToRemove,&#xA;}: RemoveUrlQueryParams) {&#xA;  const currentUrl = qs.parse(searchParams);&#xA;&#xA;  keysToRemove.forEach((key) =&amp;gt; {&#xA;    delete currentUrl[key];&#xA;  });&#xA;&#xA;  // Remove null or undefined values&#xA;  Object.keys(currentUrl).forEach(&#xA;    (key) =&amp;gt; currentUrl[key] == null &amp;amp;&amp;amp; delete currentUrl[key]&#xA;  );&#xA;&#xA;  return `${window.location.pathname}?${qs.stringify(currentUrl)}`;&#xA;}&#xA;&#xA;// DEBOUNCE&#xA;export const debounce = (func: (...args: any[]) =&amp;gt; void, delay: number) =&amp;gt; {&#xA;  let timeoutId: NodeJS.Timeout | null;&#xA;  return (...args: any[]) =&amp;gt; {&#xA;    if (timeoutId) clearTimeout(timeoutId);&#xA;    timeoutId = setTimeout(() =&amp;gt; func.apply(null, args), delay);&#xA;  };&#xA;};&#xA;&#xA;// GE IMAGE SIZE&#xA;export type AspectRatioKey = keyof typeof aspectRatioOptions;&#xA;export const getImageSize = (&#xA;  type: string,&#xA;  image: any,&#xA;  dimension: &#34;width&#34; | &#34;height&#34;&#xA;): number =&amp;gt; {&#xA;  if (type === &#34;fill&#34;) {&#xA;    return (&#xA;      aspectRatioOptions[image.aspectRatio as AspectRatioKey]?.[dimension] ||&#xA;      1000&#xA;    );&#xA;  }&#xA;  return image?.[dimension] || 1000;&#xA;};&#xA;&#xA;// DOWNLOAD IMAGE&#xA;export const download = (url: string, filename: string) =&amp;gt; {&#xA;  if (!url) {&#xA;    throw new Error(&#34;Resource URL not provided! You need to provide one&#34;);&#xA;  }&#xA;&#xA;  fetch(url)&#xA;    .then((response) =&amp;gt; response.blob())&#xA;    .then((blob) =&amp;gt; {&#xA;      const blobURL = URL.createObjectURL(blob);&#xA;      const a = document.createElement(&#34;a&#34;);&#xA;      a.href = blobURL;&#xA;&#xA;      if (filename &amp;amp;&amp;amp; filename.length)&#xA;        a.download = `${filename.replace(&#34; &#34;, &#34;_&#34;)}.png`;&#xA;      document.body.appendChild(a);&#xA;      a.click();&#xA;    })&#xA;    .catch((error) =&amp;gt; console.log({ error }));&#xA;};&#xA;&#xA;// DEEP MERGE OBJECTS&#xA;export const deepMergeObjects = (obj1: any, obj2: any) =&amp;gt; {&#xA;  if(obj2 === null || obj2 === undefined) {&#xA;    return obj1;&#xA;  }&#xA;&#xA;  let output = { ...obj2 };&#xA;&#xA;  for (let key in obj1) {&#xA;    if (obj1.hasOwnProperty(key)) {&#xA;      if (&#xA;        obj1[key] &amp;amp;&amp;amp;&#xA;        typeof obj1[key] === &#34;object&#34; &amp;amp;&amp;amp;&#xA;        obj2[key] &amp;amp;&amp;amp;&#xA;        typeof obj2[key] === &#34;object&#34;&#xA;      ) {&#xA;        output[key] = deepMergeObjects(obj1[key], obj2[key]);&#xA;      } else {&#xA;        output[key] = obj1[key];&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  return output;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;types/index.d.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;/* eslint-disable no-unused-vars */&#xA;&#xA;// ====== USER PARAMS&#xA;declare type CreateUserParams = {&#xA;  clerkId: string;&#xA;  email: string;&#xA;  username: string;&#xA;  firstName: string;&#xA;  lastName: string;&#xA;  photo: string;&#xA;};&#xA;&#xA;declare type UpdateUserParams = {&#xA;  firstName: string;&#xA;  lastName: string;&#xA;  username: string;&#xA;  photo: string;&#xA;};&#xA;&#xA;// ====== IMAGE PARAMS&#xA;declare type AddImageParams = {&#xA;  image: {&#xA;    title: string;&#xA;    publicId: string;&#xA;    transformationType: string;&#xA;    width: number;&#xA;    height: number;&#xA;    config: any;&#xA;    secureURL: string;&#xA;    transformationURL: string;&#xA;    aspectRatio: string | undefined;&#xA;    prompt: string | undefined;&#xA;    color: string | undefined;&#xA;  };&#xA;  userId: string;&#xA;  path: string;&#xA;};&#xA;&#xA;declare type UpdateImageParams = {&#xA;  image: {&#xA;    _id: string;&#xA;    title: string;&#xA;    publicId: string;&#xA;    transformationType: string;&#xA;    width: number;&#xA;    height: number;&#xA;    config: any;&#xA;    secureURL: string;&#xA;    transformationURL: string;&#xA;    aspectRatio: string | undefined;&#xA;    prompt: string | undefined;&#xA;    color: string | undefined;&#xA;  };&#xA;  userId: string;&#xA;  path: string;&#xA;};&#xA;&#xA;declare type Transformations = {&#xA;  restore?: boolean;&#xA;  fillBackground?: boolean;&#xA;  remove?: {&#xA;    prompt: string;&#xA;    removeShadow?: boolean;&#xA;    multiple?: boolean;&#xA;  };&#xA;  recolor?: {&#xA;    prompt?: string;&#xA;    to: string;&#xA;    multiple?: boolean;&#xA;  };&#xA;  removeBackground?: boolean;&#xA;};&#xA;&#xA;// ====== TRANSACTION PARAMS&#xA;declare type CheckoutTransactionParams = {&#xA;  plan: string;&#xA;  credits: number;&#xA;  amount: number;&#xA;  buyerId: string;&#xA;};&#xA;&#xA;declare type CreateTransactionParams = {&#xA;  stripeId: string;&#xA;  amount: number;&#xA;  credits: number;&#xA;  plan: string;&#xA;  buyerId: string;&#xA;  createdAt: Date;&#xA;};&#xA;&#xA;declare type TransformationTypeKey =&#xA;  | &#34;restore&#34;&#xA;  | &#34;fill&#34;&#xA;  | &#34;remove&#34;&#xA;  | &#34;recolor&#34;&#xA;  | &#34;removeBackground&#34;;&#xA;&#xA;// ====== URL QUERY PARAMS&#xA;declare type FormUrlQueryParams = {&#xA;  searchParams: string;&#xA;  key: string;&#xA;  value: string | number | null;&#xA;};&#xA;&#xA;declare type UrlQueryParams = {&#xA;  params: string;&#xA;  key: string;&#xA;  value: string | null;&#xA;};&#xA;&#xA;declare type RemoveUrlQueryParams = {&#xA;  searchParams: string;&#xA;  keysToRemove: string[];&#xA;};&#xA;&#xA;declare type SearchParamProps = {&#xA;  params: { id: string; type: TransformationTypeKey };&#xA;  searchParams: { [key: string]: string | string[] | undefined };&#xA;};&#xA;&#xA;declare type TransformationFormProps = {&#xA;  action: &#34;Add&#34; | &#34;Update&#34;;&#xA;  userId: string;&#xA;  type: TransformationTypeKey;&#xA;  creditBalance: number;&#xA;  data?: IImage | null;&#xA;  config?: Transformations | null;&#xA;};&#xA;&#xA;declare type TransformedImageProps = {&#xA;  image: any;&#xA;  type: string;&#xA;  title: string;&#xA;  transformationConfig: Transformations | null;&#xA;  isTransforming: boolean;&#xA;  hasDownload?: boolean;&#xA;  setIsTransforming?: React.Dispatch&amp;lt;React.SetStateAction&amp;lt;boolean&amp;gt;&amp;gt;;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;api/webhooks/clerk/route.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;/* eslint-disable camelcase */&#xA;import { clerkClient } from &#34;@clerk/nextjs&#34;;&#xA;import { WebhookEvent } from &#34;@clerk/nextjs/server&#34;;&#xA;import { headers } from &#34;next/headers&#34;;&#xA;import { NextResponse } from &#34;next/server&#34;;&#xA;import { Webhook } from &#34;svix&#34;;&#xA;&#xA;import { createUser, deleteUser, updateUser } from &#34;@/lib/actions/user.actions&#34;;&#xA;&#xA;export async function POST(req: Request) {&#xA;  // You can find this in the Clerk Dashboard -&amp;gt; Webhooks -&amp;gt; choose the webhook&#xA;  const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET;&#xA;&#xA;  if (!WEBHOOK_SECRET) {&#xA;    throw new Error(&#xA;      &#34;Please add WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local&#34;&#xA;    );&#xA;  }&#xA;&#xA;  // Get the headers&#xA;  const headerPayload = headers();&#xA;  const svix_id = headerPayload.get(&#34;svix-id&#34;);&#xA;  const svix_timestamp = headerPayload.get(&#34;svix-timestamp&#34;);&#xA;  const svix_signature = headerPayload.get(&#34;svix-signature&#34;);&#xA;&#xA;  // If there are no headers, error out&#xA;  if (!svix_id || !svix_timestamp || !svix_signature) {&#xA;    return new Response(&#34;Error occured -- no svix headers&#34;, {&#xA;      status: 400,&#xA;    });&#xA;  }&#xA;&#xA;  // Get the body&#xA;  const payload = await req.json();&#xA;  const body = JSON.stringify(payload);&#xA;&#xA;  // Create a new Svix instance with your secret.&#xA;  const wh = new Webhook(WEBHOOK_SECRET);&#xA;&#xA;  let evt: WebhookEvent;&#xA;&#xA;  // Verify the payload with the headers&#xA;  try {&#xA;    evt = wh.verify(body, {&#xA;      &#34;svix-id&#34;: svix_id,&#xA;      &#34;svix-timestamp&#34;: svix_timestamp,&#xA;      &#34;svix-signature&#34;: svix_signature,&#xA;    }) as WebhookEvent;&#xA;  } catch (err) {&#xA;    console.error(&#34;Error verifying webhook:&#34;, err);&#xA;    return new Response(&#34;Error occured&#34;, {&#xA;      status: 400,&#xA;    });&#xA;  }&#xA;&#xA;  // Get the ID and type&#xA;  const { id } = evt.data;&#xA;  const eventType = evt.type;&#xA;&#xA;  // CREATE&#xA;  if (eventType === &#34;user.created&#34;) {&#xA;    const { id, email_addresses, image_url, first_name, last_name, username } = evt.data;&#xA;&#xA;    const user = {&#xA;      clerkId: id,&#xA;      email: email_addresses[0].email_address,&#xA;      username: username!,&#xA;      firstName: first_name,&#xA;      lastName: last_name,&#xA;      photo: image_url,&#xA;    };&#xA;&#xA;    const newUser = await createUser(user);&#xA;&#xA;    // Set public metadata&#xA;    if (newUser) {&#xA;      await clerkClient.users.updateUserMetadata(id, {&#xA;        publicMetadata: {&#xA;          userId: newUser._id,&#xA;        },&#xA;      });&#xA;    }&#xA;&#xA;    return NextResponse.json({ message: &#34;OK&#34;, user: newUser });&#xA;  }&#xA;&#xA;  // UPDATE&#xA;  if (eventType === &#34;user.updated&#34;) {&#xA;    const { id, image_url, first_name, last_name, username } = evt.data;&#xA;&#xA;    const user = {&#xA;      firstName: first_name,&#xA;      lastName: last_name,&#xA;      username: username!,&#xA;      photo: image_url,&#xA;    };&#xA;&#xA;    const updatedUser = await updateUser(id, user);&#xA;&#xA;    return NextResponse.json({ message: &#34;OK&#34;, user: updatedUser });&#xA;  }&#xA;&#xA;  // DELETE&#xA;  if (eventType === &#34;user.deleted&#34;) {&#xA;    const { id } = evt.data;&#xA;&#xA;    const deletedUser = await deleteUser(id!);&#xA;&#xA;    return NextResponse.json({ message: &#34;OK&#34;, user: deletedUser });&#xA;  }&#xA;&#xA;  console.log(`Webhook with and ID of ${id} and type of ${eventType}`);&#xA;  console.log(&#34;Webhook body:&#34;, body);&#xA;&#xA;  return new Response(&#34;&#34;, { status: 200 });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;components/shared/CustomField.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import React from &#34;react&#34;;&#xA;import { Control } from &#34;react-hook-form&#34;;&#xA;import { z } from &#34;zod&#34;;&#xA;&#xA;import {&#xA;  FormField,&#xA;  FormItem,&#xA;  FormControl,&#xA;  FormMessage,&#xA;  FormLabel,&#xA;} from &#34;../ui/form&#34;;&#xA;&#xA;import { formSchema } from &#34;./TransformationForm&#34;;&#xA;&#xA;type CustomFieldProps = {&#xA;  control: Control&amp;lt;z.infer&amp;lt;typeof formSchema&amp;gt;&amp;gt; | undefined;&#xA;  render: (props: { field: any }) =&amp;gt; React.ReactNode;&#xA;  name: keyof z.infer&amp;lt;typeof formSchema&amp;gt;;&#xA;  formLabel?: string;&#xA;  className?: string;&#xA;};&#xA;&#xA;export const CustomField = ({&#xA;  control,&#xA;  render,&#xA;  name,&#xA;  formLabel,&#xA;  className,&#xA;}: CustomFieldProps) =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;FormField&#xA;      control={control}&#xA;      name={name}&#xA;      render={({ field }) =&amp;gt; (&#xA;        &amp;lt;FormItem className={className}&amp;gt;&#xA;          {formLabel &amp;amp;&amp;amp; &amp;lt;FormLabel&amp;gt;{formLabel}&amp;lt;/FormLabel&amp;gt;}&#xA;          &amp;lt;FormControl&amp;gt;{render({ field })}&amp;lt;/FormControl&amp;gt;&#xA;          &amp;lt;FormMessage /&amp;gt;&#xA;        &amp;lt;/FormItem&amp;gt;&#xA;      )}&#xA;    /&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;components/shared/Collection.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import Image from &#34;next/image&#34;;&#xA;import Link from &#34;next/link&#34;;&#xA;import { useSearchParams, useRouter } from &#34;next/navigation&#34;;&#xA;import { CldImage } from &#34;next-cloudinary&#34;;&#xA;&#xA;import {&#xA;  Pagination,&#xA;  PaginationContent,&#xA;  PaginationNext,&#xA;  PaginationPrevious,&#xA;} from &#34;@/components/ui/pagination&#34;;&#xA;import { transformationTypes } from &#34;@/constants&#34;;&#xA;import { IImage } from &#34;@/lib/database/models/image.model&#34;;&#xA;import { formUrlQuery } from &#34;@/lib/utils&#34;;&#xA;&#xA;import { Button } from &#34;../ui/button&#34;;&#xA;&#xA;import { Search } from &#34;./Search&#34;;&#xA;&#xA;export const Collection = ({&#xA;  hasSearch = false,&#xA;  images,&#xA;  totalPages = 1,&#xA;  page,&#xA;}: {&#xA;  images: IImage[];&#xA;  totalPages?: number;&#xA;  page: number;&#xA;  hasSearch?: boolean;&#xA;}) =&amp;gt; {&#xA;  const router = useRouter();&#xA;  const searchParams = useSearchParams();&#xA;&#xA;  // PAGINATION HANDLER&#xA;  const onPageChange = (action: string) =&amp;gt; {&#xA;    const pageValue = action === &#34;next&#34; ? Number(page) + 1 : Number(page) - 1;&#xA;&#xA;    const newUrl = formUrlQuery({&#xA;      searchParams: searchParams.toString(),&#xA;      key: &#34;page&#34;,&#xA;      value: pageValue,&#xA;    });&#xA;&#xA;    router.push(newUrl, { scroll: false });&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;div className=&#34;collection-heading&#34;&amp;gt;&#xA;        &amp;lt;h2 className=&#34;h2-bold text-dark-600&#34;&amp;gt;Recent Edits&amp;lt;/h2&amp;gt;&#xA;        {hasSearch &amp;amp;&amp;amp; &amp;lt;Search /&amp;gt;}&#xA;      &amp;lt;/div&amp;gt;&#xA;&#xA;      {images.length &amp;gt; 0 ? (&#xA;        &amp;lt;ul className=&#34;collection-list&#34;&amp;gt;&#xA;          {images.map((image) =&amp;gt; (&#xA;            &amp;lt;Card image={image} key={image._id} /&amp;gt;&#xA;          ))}&#xA;        &amp;lt;/ul&amp;gt;&#xA;      ) : (&#xA;        &amp;lt;div className=&#34;collection-empty&#34;&amp;gt;&#xA;          &amp;lt;p className=&#34;p-20-semibold&#34;&amp;gt;Empty List&amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      )}&#xA;&#xA;      {totalPages &amp;gt; 1 &amp;amp;&amp;amp; (&#xA;        &amp;lt;Pagination className=&#34;mt-10&#34;&amp;gt;&#xA;          &amp;lt;PaginationContent className=&#34;flex w-full&#34;&amp;gt;&#xA;            &amp;lt;Button&#xA;              disabled={Number(page) &amp;lt;= 1}&#xA;              className=&#34;collection-btn&#34;&#xA;              onClick={() =&amp;gt; onPageChange(&#34;prev&#34;)}&#xA;            &amp;gt;&#xA;              &amp;lt;PaginationPrevious className=&#34;hover:bg-transparent hover:text-white&#34; /&amp;gt;&#xA;            &amp;lt;/Button&amp;gt;&#xA;&#xA;            &amp;lt;p className=&#34;flex-center p-16-medium w-fit flex-1&#34;&amp;gt;&#xA;              {page} / {totalPages}&#xA;            &amp;lt;/p&amp;gt;&#xA;&#xA;            &amp;lt;Button&#xA;              className=&#34;button w-32 bg-purple-gradient bg-cover text-white&#34;&#xA;              onClick={() =&amp;gt; onPageChange(&#34;next&#34;)}&#xA;              disabled={Number(page) &amp;gt;= totalPages}&#xA;            &amp;gt;&#xA;              &amp;lt;PaginationNext className=&#34;hover:bg-transparent hover:text-white&#34; /&amp;gt;&#xA;            &amp;lt;/Button&amp;gt;&#xA;          &amp;lt;/PaginationContent&amp;gt;&#xA;        &amp;lt;/Pagination&amp;gt;&#xA;      )}&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;const Card = ({ image }: { image: IImage }) =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;li&amp;gt;&#xA;      &amp;lt;Link href={`/transformations/${image._id}`} className=&#34;collection-card&#34;&amp;gt;&#xA;        &amp;lt;CldImage&#xA;          src={image.publicId}&#xA;          alt={image.title}&#xA;          width={image.width}&#xA;          height={image.height}&#xA;          {...image.config}&#xA;          loading=&#34;lazy&#34;&#xA;          className=&#34;h-52 w-full rounded-[10px] object-cover&#34;&#xA;          sizes=&#34;(max-width: 767px) 100vw, (max-width: 1279px) 50vw, 33vw&#34;&#xA;        /&amp;gt;&#xA;        &amp;lt;div className=&#34;flex-between&#34;&amp;gt;&#xA;          &amp;lt;p className=&#34;p-20-semibold mr-3 line-clamp-1 text-dark-600&#34;&amp;gt;&#xA;            {image.title}&#xA;          &amp;lt;/p&amp;gt;&#xA;          &amp;lt;Image&#xA;            src={`/assets/icons/${&#xA;              transformationTypes[&#xA;                image.transformationType as TransformationTypeKey&#xA;              ].icon&#xA;            }`}&#xA;            alt={image.title}&#xA;            width={24}&#xA;            height={24}&#xA;          /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/Link&amp;gt;&#xA;    &amp;lt;/li&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;components/shared/Search.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import Image from &#34;next/image&#34;;&#xA;import { useRouter, useSearchParams } from &#34;next/navigation&#34;;&#xA;import { useEffect, useState } from &#34;react&#34;;&#xA;&#xA;import { Input } from &#34;@/components/ui/input&#34;;&#xA;import { formUrlQuery, removeKeysFromQuery } from &#34;@/lib/utils&#34;;&#xA;&#xA;export const Search = () =&amp;gt; {&#xA;  const router = useRouter();&#xA;  const searchParams = useSearchParams();&#xA;  const [query, setQuery] = useState(&#34;&#34;);&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    const delayDebounceFn = setTimeout(() =&amp;gt; {&#xA;      if (query) {&#xA;        const newUrl = formUrlQuery({&#xA;          searchParams: searchParams.toString(),&#xA;          key: &#34;query&#34;,&#xA;          value: query,&#xA;        });&#xA;&#xA;        router.push(newUrl, { scroll: false });&#xA;      } else {&#xA;        const newUrl = removeKeysFromQuery({&#xA;          searchParams: searchParams.toString(),&#xA;          keysToRemove: [&#34;query&#34;],&#xA;        });&#xA;&#xA;        router.push(newUrl, { scroll: false });&#xA;      }&#xA;    }, 300);&#xA;&#xA;    return () =&amp;gt; clearTimeout(delayDebounceFn);&#xA;  }, [router, searchParams, query]);&#xA;&#xA;  return (&#xA;    &amp;lt;div className=&#34;search&#34;&amp;gt;&#xA;      &amp;lt;Image&#xA;        src=&#34;/assets/icons/search.svg&#34;&#xA;        alt=&#34;search&#34;&#xA;        width={24}&#xA;        height={24}&#xA;      /&amp;gt;&#xA;&#xA;      &amp;lt;Input&#xA;        className=&#34;search-field&#34;&#xA;        placeholder=&#34;Search&#34;&#xA;        onChange={(e) =&amp;gt; setQuery(e.target.value)}&#xA;      /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;image.actions.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use server&#34;;&#xA;&#xA;import { revalidatePath } from &#34;next/cache&#34;;&#xA;import { connectToDatabase } from &#34;../database/mongoose&#34;;&#xA;import { handleError } from &#34;../utils&#34;;&#xA;import User from &#34;../database/models/user.model&#34;;&#xA;import Image from &#34;../database/models/image.model&#34;;&#xA;import { redirect } from &#34;next/navigation&#34;;&#xA;&#xA;import { v2 as cloudinary } from &#39;cloudinary&#39;&#xA;&#xA;const populateUser = (query: any) =&amp;gt; query.populate({&#xA;  path: &#39;author&#39;,&#xA;  model: User,&#xA;  select: &#39;_id firstName lastName clerkId&#39;&#xA;})&#xA;&#xA;// ADD IMAGE&#xA;export async function addImage({ image, userId, path }: AddImageParams) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const author = await User.findById(userId);&#xA;&#xA;    if (!author) {&#xA;      throw new Error(&#34;User not found&#34;);&#xA;    }&#xA;&#xA;    const newImage = await Image.create({&#xA;      ...image,&#xA;      author: author._id,&#xA;    })&#xA;&#xA;    revalidatePath(path);&#xA;&#xA;    return JSON.parse(JSON.stringify(newImage));&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// UPDATE IMAGE&#xA;export async function updateImage({ image, userId, path }: UpdateImageParams) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const imageToUpdate = await Image.findById(image._id);&#xA;&#xA;    if (!imageToUpdate || imageToUpdate.author.toHexString() !== userId) {&#xA;      throw new Error(&#34;Unauthorized or image not found&#34;);&#xA;    }&#xA;&#xA;    const updatedImage = await Image.findByIdAndUpdate(&#xA;      imageToUpdate._id,&#xA;      image,&#xA;      { new: true }&#xA;    )&#xA;&#xA;    revalidatePath(path);&#xA;&#xA;    return JSON.parse(JSON.stringify(updatedImage));&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// DELETE IMAGE&#xA;export async function deleteImage(imageId: string) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    await Image.findByIdAndDelete(imageId);&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  } finally{&#xA;    redirect(&#39;/&#39;)&#xA;  }&#xA;}&#xA;&#xA;// GET IMAGE&#xA;export async function getImageById(imageId: string) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const image = await populateUser(Image.findById(imageId));&#xA;&#xA;    if(!image) throw new Error(&#34;Image not found&#34;);&#xA;&#xA;    return JSON.parse(JSON.stringify(image));&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// GET IMAGES&#xA;export async function getAllImages({ limit = 9, page = 1, searchQuery = &#39;&#39; }: {&#xA;  limit?: number;&#xA;  page: number;&#xA;  searchQuery?: string;&#xA;}) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    cloudinary.config({&#xA;      cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,&#xA;      api_key: process.env.CLOUDINARY_API_KEY,&#xA;      api_secret: process.env.CLOUDINARY_API_SECRET,&#xA;      secure: true,&#xA;    })&#xA;&#xA;    let expression = &#39;folder=imaginify&#39;;&#xA;&#xA;    if (searchQuery) {&#xA;      expression += ` AND ${searchQuery}`&#xA;    }&#xA;&#xA;    const { resources } = await cloudinary.search&#xA;      .expression(expression)&#xA;      .execute();&#xA;&#xA;    const resourceIds = resources.map((resource: any) =&amp;gt; resource.public_id);&#xA;&#xA;    let query = {};&#xA;&#xA;    if(searchQuery) {&#xA;      query = {&#xA;        publicId: {&#xA;          $in: resourceIds&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    const skipAmount = (Number(page) -1) * limit;&#xA;&#xA;    const images = await populateUser(Image.find(query))&#xA;      .sort({ updatedAt: -1 })&#xA;      .skip(skipAmount)&#xA;      .limit(limit);&#xA;    &#xA;    const totalImages = await Image.find(query).countDocuments();&#xA;    const savedImages = await Image.find().countDocuments();&#xA;&#xA;    return {&#xA;      data: JSON.parse(JSON.stringify(images)),&#xA;      totalPage: Math.ceil(totalImages / limit),&#xA;      savedImages,&#xA;    }&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// GET IMAGES BY USER&#xA;export async function getUserImages({&#xA;  limit = 9,&#xA;  page = 1,&#xA;  userId,&#xA;}: {&#xA;  limit?: number;&#xA;  page: number;&#xA;  userId: string;&#xA;}) {&#xA;  try {&#xA;    await connectToDatabase();&#xA;&#xA;    const skipAmount = (Number(page) - 1) * limit;&#xA;&#xA;    const images = await populateUser(Image.find({ author: userId }))&#xA;      .sort({ updatedAt: -1 })&#xA;      .skip(skipAmount)&#xA;      .limit(limit);&#xA;&#xA;    const totalImages = await Image.find({ author: userId }).countDocuments();&#xA;&#xA;    return {&#xA;      data: JSON.parse(JSON.stringify(images)),&#xA;      totalPages: Math.ceil(totalImages / limit),&#xA;    };&#xA;  } catch (error) {&#xA;    handleError(error);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;transformations/[id]/page.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { auth } from &#34;@clerk/nextjs&#34;;&#xA;import Image from &#34;next/image&#34;;&#xA;import Link from &#34;next/link&#34;;&#xA;&#xA;import Header from &#34;@/components/shared/Header&#34;;&#xA;import TransformedImage from &#34;@/components/shared/TransformedImage&#34;;&#xA;import { Button } from &#34;@/components/ui/button&#34;;&#xA;import { getImageById } from &#34;@/lib/actions/image.actions&#34;;&#xA;import { getImageSize } from &#34;@/lib/utils&#34;;&#xA;import { DeleteConfirmation } from &#34;@/components/shared/DeleteConfirmation&#34;;&#xA;&#xA;const ImageDetails = async ({ params: { id } }: SearchParamProps) =&amp;gt; {&#xA;  const { userId } = auth();&#xA;&#xA;  const image = await getImageById(id);&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;Header title={image.title} /&amp;gt;&#xA;&#xA;      &amp;lt;section className=&#34;mt-5 flex flex-wrap gap-4&#34;&amp;gt;&#xA;        &amp;lt;div className=&#34;p-14-medium md:p-16-medium flex gap-2&#34;&amp;gt;&#xA;          &amp;lt;p className=&#34;text-dark-600&#34;&amp;gt;Transformation:&amp;lt;/p&amp;gt;&#xA;          &amp;lt;p className=&#34; capitalize text-purple-400&#34;&amp;gt;&#xA;            {image.transformationType}&#xA;          &amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        {image.prompt &amp;amp;&amp;amp; (&#xA;          &amp;lt;&amp;gt;&#xA;            &amp;lt;p className=&#34;hidden text-dark-400/50 md:block&#34;&amp;gt;&amp;amp;#x25CF;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;div className=&#34;p-14-medium md:p-16-medium flex gap-2 &#34;&amp;gt;&#xA;              &amp;lt;p className=&#34;text-dark-600&#34;&amp;gt;Prompt:&amp;lt;/p&amp;gt;&#xA;              &amp;lt;p className=&#34; capitalize text-purple-400&#34;&amp;gt;{image.prompt}&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;          &amp;lt;/&amp;gt;&#xA;        )}&#xA;&#xA;        {image.color &amp;amp;&amp;amp; (&#xA;          &amp;lt;&amp;gt;&#xA;            &amp;lt;p className=&#34;hidden text-dark-400/50 md:block&#34;&amp;gt;&amp;amp;#x25CF;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;div className=&#34;p-14-medium md:p-16-medium flex gap-2&#34;&amp;gt;&#xA;              &amp;lt;p className=&#34;text-dark-600&#34;&amp;gt;Color:&amp;lt;/p&amp;gt;&#xA;              &amp;lt;p className=&#34; capitalize text-purple-400&#34;&amp;gt;{image.color}&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;          &amp;lt;/&amp;gt;&#xA;        )}&#xA;&#xA;        {image.aspectRatio &amp;amp;&amp;amp; (&#xA;          &amp;lt;&amp;gt;&#xA;            &amp;lt;p className=&#34;hidden text-dark-400/50 md:block&#34;&amp;gt;&amp;amp;#x25CF;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;div className=&#34;p-14-medium md:p-16-medium flex gap-2&#34;&amp;gt;&#xA;              &amp;lt;p className=&#34;text-dark-600&#34;&amp;gt;Aspect Ratio:&amp;lt;/p&amp;gt;&#xA;              &amp;lt;p className=&#34; capitalize text-purple-400&#34;&amp;gt;{image.aspectRatio}&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;          &amp;lt;/&amp;gt;&#xA;        )}&#xA;      &amp;lt;/section&amp;gt;&#xA;&#xA;      &amp;lt;section className=&#34;mt-10 border-t border-dark-400/15&#34;&amp;gt;&#xA;        &amp;lt;div className=&#34;transformation-grid&#34;&amp;gt;&#xA;          {/* MEDIA UPLOADER */}&#xA;          &amp;lt;div className=&#34;flex flex-col gap-4&#34;&amp;gt;&#xA;            &amp;lt;h3 className=&#34;h3-bold text-dark-600&#34;&amp;gt;Original&amp;lt;/h3&amp;gt;&#xA;&#xA;            &amp;lt;Image&#xA;              width={getImageSize(image.transformationType, image, &#34;width&#34;)}&#xA;              height={getImageSize(image.transformationType, image, &#34;height&#34;)}&#xA;              src={image.secureURL}&#xA;              alt=&#34;image&#34;&#xA;              className=&#34;transformation-original_image&#34;&#xA;            /&amp;gt;&#xA;          &amp;lt;/div&amp;gt;&#xA;&#xA;          {/* TRANSFORMED IMAGE */}&#xA;          &amp;lt;TransformedImage&#xA;            image={image}&#xA;            type={image.transformationType}&#xA;            title={image.title}&#xA;            isTransforming={false}&#xA;            transformationConfig={image.config}&#xA;            hasDownload={true}&#xA;          /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        {userId === image.author.clerkId &amp;amp;&amp;amp; (&#xA;          &amp;lt;div className=&#34;mt-4 space-y-4&#34;&amp;gt;&#xA;            &amp;lt;Button asChild type=&#34;button&#34; className=&#34;submit-button capitalize&#34;&amp;gt;&#xA;              &amp;lt;Link href={`/transformations/${image._id}/update`}&amp;gt;&#xA;                Update Image&#xA;              &amp;lt;/Link&amp;gt;&#xA;            &amp;lt;/Button&amp;gt;&#xA;&#xA;            &amp;lt;DeleteConfirmation imageId={image._id} /&amp;gt;&#xA;          &amp;lt;/div&amp;gt;&#xA;        )}&#xA;      &amp;lt;/section&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default ImageDetails;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;transformations/[id]/update/page.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { auth } from &#34;@clerk/nextjs&#34;;&#xA;import { redirect } from &#34;next/navigation&#34;;&#xA;&#xA;import Header from &#34;@/components/shared/Header&#34;;&#xA;import TransformationForm from &#34;@/components/shared/TransformationForm&#34;;&#xA;import { transformationTypes } from &#34;@/constants&#34;;&#xA;import { getUserById } from &#34;@/lib/actions/user.actions&#34;;&#xA;import { getImageById } from &#34;@/lib/actions/image.actions&#34;;&#xA;&#xA;const Page = async ({ params: { id } }: SearchParamProps) =&amp;gt; {&#xA;  const { userId } = auth();&#xA;&#xA;  if (!userId) redirect(&#34;/sign-in&#34;);&#xA;&#xA;  const user = await getUserById(userId);&#xA;  const image = await getImageById(id);&#xA;&#xA;  const transformation =&#xA;    transformationTypes[image.transformationType as TransformationTypeKey];&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;Header title={transformation.title} subtitle={transformation.subTitle} /&amp;gt;&#xA;&#xA;      &amp;lt;section className=&#34;mt-10&#34;&amp;gt;&#xA;        &amp;lt;TransformationForm&#xA;          action=&#34;Update&#34;&#xA;          userId={user._id}&#xA;          type={image.transformationType as TransformationTypeKey}&#xA;          creditBalance={user.creditBalance}&#xA;          config={image.config}&#xA;          data={image}&#xA;        /&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default Page;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;components/shared/DeleteConfirmation.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import { useTransition } from &#34;react&#34;;&#xA;&#xA;import {&#xA;  AlertDialog,&#xA;  AlertDialogAction,&#xA;  AlertDialogCancel,&#xA;  AlertDialogContent,&#xA;  AlertDialogDescription,&#xA;  AlertDialogFooter,&#xA;  AlertDialogHeader,&#xA;  AlertDialogTitle,&#xA;  AlertDialogTrigger,&#xA;} from &#34;@/components/ui/alert-dialog&#34;;&#xA;import { deleteImage } from &#34;@/lib/actions/image.actions&#34;;&#xA;&#xA;import { Button } from &#34;../ui/button&#34;;&#xA;&#xA;export const DeleteConfirmation = ({ imageId }: { imageId: string }) =&amp;gt; {&#xA;  const [isPending, startTransition] = useTransition();&#xA;&#xA;  return (&#xA;    &amp;lt;AlertDialog&amp;gt;&#xA;      &amp;lt;AlertDialogTrigger asChild className=&#34;w-full rounded-full&#34;&amp;gt;&#xA;        &amp;lt;Button&#xA;          type=&#34;button&#34;&#xA;          className=&#34;button h-[44px] w-full md:h-[54px]&#34;&#xA;          variant=&#34;destructive&#34;&#xA;        &amp;gt;&#xA;          Delete Image&#xA;        &amp;lt;/Button&amp;gt;&#xA;      &amp;lt;/AlertDialogTrigger&amp;gt;&#xA;&#xA;      &amp;lt;AlertDialogContent className=&#34;flex flex-col gap-10&#34;&amp;gt;&#xA;        &amp;lt;AlertDialogHeader&amp;gt;&#xA;          &amp;lt;AlertDialogTitle&amp;gt;&#xA;            Are you sure you want to delete this image?&#xA;          &amp;lt;/AlertDialogTitle&amp;gt;&#xA;          &amp;lt;AlertDialogDescription className=&#34;p-16-regular&#34;&amp;gt;&#xA;            This will permanently delete this image&#xA;          &amp;lt;/AlertDialogDescription&amp;gt;&#xA;        &amp;lt;/AlertDialogHeader&amp;gt;&#xA;&#xA;        &amp;lt;AlertDialogFooter&amp;gt;&#xA;          &amp;lt;AlertDialogCancel&amp;gt;Cancel&amp;lt;/AlertDialogCancel&amp;gt;&#xA;          &amp;lt;AlertDialogAction&#xA;            className=&#34;border bg-red-500 text-white hover:bg-red-600&#34;&#xA;            onClick={() =&amp;gt;&#xA;              startTransition(async () =&amp;gt; {&#xA;                await deleteImage(imageId);&#xA;              })&#xA;            }&#xA;          &amp;gt;&#xA;            {isPending ? &#34;Deleting...&#34; : &#34;Delete&#34;}&#xA;          &amp;lt;/AlertDialogAction&amp;gt;&#xA;        &amp;lt;/AlertDialogFooter&amp;gt;&#xA;      &amp;lt;/AlertDialogContent&amp;gt;&#xA;    &amp;lt;/AlertDialog&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;api/webhooks/stripe/route.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;/* eslint-disable camelcase */&#xA;import { createTransaction } from &#34;@/lib/actions/transaction.action&#34;;&#xA;import { NextResponse } from &#34;next/server&#34;;&#xA;import stripe from &#34;stripe&#34;;&#xA;&#xA;export async function POST(request: Request) {&#xA;  const body = await request.text();&#xA;&#xA;  const sig = request.headers.get(&#34;stripe-signature&#34;) as string;&#xA;  const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET!;&#xA;&#xA;  let event;&#xA;&#xA;  try {&#xA;    event = stripe.webhooks.constructEvent(body, sig, endpointSecret);&#xA;  } catch (err) {&#xA;    return NextResponse.json({ message: &#34;Webhook error&#34;, error: err });&#xA;  }&#xA;&#xA;  // Get the ID and type&#xA;  const eventType = event.type;&#xA;&#xA;  // CREATE&#xA;  if (eventType === &#34;checkout.session.completed&#34;) {&#xA;    const { id, amount_total, metadata } = event.data.object;&#xA;&#xA;    const transaction = {&#xA;      stripeId: id,&#xA;      amount: amount_total ? amount_total / 100 : 0,&#xA;      plan: metadata?.plan || &#34;&#34;,&#xA;      credits: Number(metadata?.credits) || 0,&#xA;      buyerId: metadata?.buyerId || &#34;&#34;,&#xA;      createdAt: new Date(),&#xA;    };&#xA;&#xA;    const newTransaction = await createTransaction(transaction);&#xA;    &#xA;    return NextResponse.json({ message: &#34;OK&#34;, transaction: newTransaction });&#xA;  }&#xA;&#xA;  return new Response(&#34;&#34;, { status: 200 });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;credits/page.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { SignedIn, auth } from &#34;@clerk/nextjs&#34;;&#xA;import Image from &#34;next/image&#34;;&#xA;import { redirect } from &#34;next/navigation&#34;;&#xA;&#xA;import Header from &#34;@/components/shared/Header&#34;;&#xA;import { Button } from &#34;@/components/ui/button&#34;;&#xA;import { plans } from &#34;@/constants&#34;;&#xA;import { getUserById } from &#34;@/lib/actions/user.actions&#34;;&#xA;import Checkout from &#34;@/components/shared/Checkout&#34;;&#xA;&#xA;const Credits = async () =&amp;gt; {&#xA;  const { userId } = auth();&#xA;&#xA;  if (!userId) redirect(&#34;/sign-in&#34;);&#xA;&#xA;  const user = await getUserById(userId);&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;Header&#xA;        title=&#34;Buy Credits&#34;&#xA;        subtitle=&#34;Choose a credit package that suits your needs!&#34;&#xA;      /&amp;gt;&#xA;&#xA;      &amp;lt;section&amp;gt;&#xA;        &amp;lt;ul className=&#34;credits-list&#34;&amp;gt;&#xA;          {plans.map((plan) =&amp;gt; (&#xA;            &amp;lt;li key={plan.name} className=&#34;credits-item&#34;&amp;gt;&#xA;              &amp;lt;div className=&#34;flex-center flex-col gap-3&#34;&amp;gt;&#xA;                &amp;lt;Image src={plan.icon} alt=&#34;check&#34; width={50} height={50} /&amp;gt;&#xA;                &amp;lt;p className=&#34;p-20-semibold mt-2 text-purple-500&#34;&amp;gt;&#xA;                  {plan.name}&#xA;                &amp;lt;/p&amp;gt;&#xA;                &amp;lt;p className=&#34;h1-semibold text-dark-600&#34;&amp;gt;${plan.price}&amp;lt;/p&amp;gt;&#xA;                &amp;lt;p className=&#34;p-16-regular&#34;&amp;gt;{plan.credits} Credits&amp;lt;/p&amp;gt;&#xA;              &amp;lt;/div&amp;gt;&#xA;&#xA;              {/* Inclusions */}&#xA;              &amp;lt;ul className=&#34;flex flex-col gap-5 py-9&#34;&amp;gt;&#xA;                {plan.inclusions.map((inclusion) =&amp;gt; (&#xA;                  &amp;lt;li&#xA;                    key={plan.name + inclusion.label}&#xA;                    className=&#34;flex items-center gap-4&#34;&#xA;                  &amp;gt;&#xA;                    &amp;lt;Image&#xA;                      src={`/assets/icons/${&#xA;                        inclusion.isIncluded ? &#34;check.svg&#34; : &#34;cross.svg&#34;&#xA;                      }`}&#xA;                      alt=&#34;check&#34;&#xA;                      width={24}&#xA;                      height={24}&#xA;                    /&amp;gt;&#xA;                    &amp;lt;p className=&#34;p-16-regular&#34;&amp;gt;{inclusion.label}&amp;lt;/p&amp;gt;&#xA;                  &amp;lt;/li&amp;gt;&#xA;                ))}&#xA;              &amp;lt;/ul&amp;gt;&#xA;&#xA;              {plan.name === &#34;Free&#34; ? (&#xA;                &amp;lt;Button variant=&#34;outline&#34; className=&#34;credits-btn&#34;&amp;gt;&#xA;                  Free Consumable&#xA;                &amp;lt;/Button&amp;gt;&#xA;              ) : (&#xA;                &amp;lt;SignedIn&amp;gt;&#xA;                  &amp;lt;Checkout&#xA;                    plan={plan.name}&#xA;                    amount={plan.price}&#xA;                    credits={plan.credits}&#xA;                    buyerId={user._id}&#xA;                  /&amp;gt;&#xA;                &amp;lt;/SignedIn&amp;gt;&#xA;              )}&#xA;            &amp;lt;/li&amp;gt;&#xA;          ))}&#xA;        &amp;lt;/ul&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default Credits;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;components/shared/Checkout.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import { loadStripe } from &#34;@stripe/stripe-js&#34;;&#xA;import { useEffect } from &#34;react&#34;;&#xA;&#xA;import { useToast } from &#34;@/components/ui/use-toast&#34;;&#xA;import { checkoutCredits } from &#34;@/lib/actions/transaction.action&#34;;&#xA;&#xA;import { Button } from &#34;../ui/button&#34;;&#xA;&#xA;const Checkout = ({&#xA;  plan,&#xA;  amount,&#xA;  credits,&#xA;  buyerId,&#xA;}: {&#xA;  plan: string;&#xA;  amount: number;&#xA;  credits: number;&#xA;  buyerId: string;&#xA;}) =&amp;gt; {&#xA;  const { toast } = useToast();&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);&#xA;  }, []);&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    // Check to see if this is a redirect back from Checkout&#xA;    const query = new URLSearchParams(window.location.search);&#xA;    if (query.get(&#34;success&#34;)) {&#xA;      toast({&#xA;        title: &#34;Order placed!&#34;,&#xA;        description: &#34;You will receive an email confirmation&#34;,&#xA;        duration: 5000,&#xA;        className: &#34;success-toast&#34;,&#xA;      });&#xA;    }&#xA;&#xA;    if (query.get(&#34;canceled&#34;)) {&#xA;      toast({&#xA;        title: &#34;Order canceled!&#34;,&#xA;        description: &#34;Continue to shop around and checkout when you&#39;re ready&#34;,&#xA;        duration: 5000,&#xA;        className: &#34;error-toast&#34;,&#xA;      });&#xA;    }&#xA;  }, []);&#xA;&#xA;  const onCheckout = async () =&amp;gt; {&#xA;    const transaction = {&#xA;      plan,&#xA;      amount,&#xA;      credits,&#xA;      buyerId,&#xA;    };&#xA;&#xA;    await checkoutCredits(transaction);&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;form action={onCheckout} method=&#34;POST&#34;&amp;gt;&#xA;      &amp;lt;section&amp;gt;&#xA;        &amp;lt;Button&#xA;          type=&#34;submit&#34;&#xA;          role=&#34;link&#34;&#xA;          className=&#34;w-full rounded-full bg-purple-gradient bg-cover&#34;&#xA;        &amp;gt;&#xA;          Buy Credit&#xA;        &amp;lt;/Button&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default Checkout;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;profile/page.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { auth } from &#34;@clerk/nextjs&#34;;&#xA;import Image from &#34;next/image&#34;;&#xA;import { redirect } from &#34;next/navigation&#34;;&#xA;&#xA;import { Collection } from &#34;@/components/shared/Collection&#34;;&#xA;import Header from &#34;@/components/shared/Header&#34;;&#xA;import { getUserImages } from &#34;@/lib/actions/image.actions&#34;;&#xA;import { getUserById } from &#34;@/lib/actions/user.actions&#34;;&#xA;&#xA;const Profile = async ({ searchParams }: SearchParamProps) =&amp;gt; {&#xA;  const page = Number(searchParams?.page) || 1;&#xA;  const { userId } = auth();&#xA;&#xA;  if (!userId) redirect(&#34;/sign-in&#34;);&#xA;&#xA;  const user = await getUserById(userId);&#xA;  const images = await getUserImages({ page, userId: user._id });&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;Header title=&#34;Profile&#34; /&amp;gt;&#xA;&#xA;      &amp;lt;section className=&#34;profile&#34;&amp;gt;&#xA;        &amp;lt;div className=&#34;profile-balance&#34;&amp;gt;&#xA;          &amp;lt;p className=&#34;p-14-medium md:p-16-medium&#34;&amp;gt;CREDITS AVAILABLE&amp;lt;/p&amp;gt;&#xA;          &amp;lt;div className=&#34;mt-4 flex items-center gap-4&#34;&amp;gt;&#xA;            &amp;lt;Image&#xA;              src=&#34;/assets/icons/coins.svg&#34;&#xA;              alt=&#34;coins&#34;&#xA;              width={50}&#xA;              height={50}&#xA;              className=&#34;size-9 md:size-12&#34;&#xA;            /&amp;gt;&#xA;            &amp;lt;h2 className=&#34;h2-bold text-dark-600&#34;&amp;gt;{user.creditBalance}&amp;lt;/h2&amp;gt;&#xA;          &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;div className=&#34;profile-image-manipulation&#34;&amp;gt;&#xA;          &amp;lt;p className=&#34;p-14-medium md:p-16-medium&#34;&amp;gt;IMAGE MANIPULATION DONE&amp;lt;/p&amp;gt;&#xA;          &amp;lt;div className=&#34;mt-4 flex items-center gap-4&#34;&amp;gt;&#xA;            &amp;lt;Image&#xA;              src=&#34;/assets/icons/photo.svg&#34;&#xA;              alt=&#34;coins&#34;&#xA;              width={50}&#xA;              height={50}&#xA;              className=&#34;size-9 md:size-12&#34;&#xA;            /&amp;gt;&#xA;            &amp;lt;h2 className=&#34;h2-bold text-dark-600&#34;&amp;gt;{images?.data.length}&amp;lt;/h2&amp;gt;&#xA;          &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;&#xA;      &amp;lt;section className=&#34;mt-8 md:mt-14&#34;&amp;gt;&#xA;        &amp;lt;Collection&#xA;          images={images?.data}&#xA;          totalPages={images?.totalPages}&#xA;          page={page}&#xA;        /&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default Profile;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;links&#34;&gt;🔗 Links&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Public Assets used in the project can be found &lt;a href=&#34;https://drive.google.com/file/d/1uv1zyCjbYBQE9qnwh2snwO0NBgoop5gz/view?usp=sharing&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;more&#34;&gt;🚀 More&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advance your skills with Next.js 14 Pro Course&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enjoyed creating this project? Dive deeper into our PRO courses for a richer learning adventure. They&#39;re packed with detailed explanations, cool features, and exercises to boost your skills. Give it a go!&lt;/p&gt; &#xA;&lt;a href=&#34;https://jsmastery.pro/next14&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/557837ce-f612-4530-ab24-189e75133c71&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accelerate your professional journey with the Expert Training program&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;And if you&#39;re hungry for more than just a course and want to understand how we learn and tackle tech challenges, hop into our personalized masterclass. We cover best practices, different web skills, and offer mentorship to boost your confidence. Let&#39;s learn and grow together!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.jsmastery.pro/masterclass&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/fed352ad-f27b-400d-9b8f-c7fe628acb84&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;&lt;/h1&gt;</summary>
  </entry>
</feed>