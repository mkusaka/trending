<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-14T01:50:00Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gita/Bhagavad-Gita-AI</title>
    <updated>2023-02-14T01:50:00Z</updated>
    <id>tag:github.com,2023-02-14:/gita/Bhagavad-Gita-AI</id>
    <link href="https://github.com/gita/Bhagavad-Gita-AI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT for Bhagavad Gita i.e. GitaGPT. Now, we can talk to Krishna in our everyday lives.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gita GPT - Talk to Krishna with Bhagavad Gita AI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/32533774/218021917-c578b980-4e5e-4f2e-82f1-b048bd7f8bdc.jpeg&#34; alt=&#34;bhagavad-gita-ai&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bhagavadgita.ai&#34;&gt;Gita GPT&lt;/a&gt; is a state-of-the-art AI-powered chatbot that uses the power of artificial intelligence to bring the teachings of Lord Krishna to your everyday life. With GitaGPT, you can have a conversation with Lord Krishna in a conversational manner, receiving personalised answers to your questions and gaining divine guidance in your life.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conversational interaction with Lord Krishna using ChatGPT&lt;/li&gt; &#xA; &lt;li&gt;Personalised content tailored to your specific needs&lt;/li&gt; &#xA; &lt;li&gt;Pool of knowledge and wisdom from the Bhagavad Gita&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-understand answers to your questions about faith, life, and well-being&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;ChatGita uses advanced AI technology to provide you with answers to your questions based on the teachings of the Bhagavad Gita. Simply ask a question related to your faith or life and receive a response in a conversational format. The conversations are recorded in a fixed context to provide you with a better understanding of the teachings of Lord Krishna.&lt;/p&gt; &#xA;&lt;h2&gt;Why Gita GPT?&lt;/h2&gt; &#xA;&lt;p&gt;Gita GPT offers an unparalleled experience for those seeking to connect with the divine and gain a deeper understanding of the teachings of the Bhagavad Gita. With its user-friendly interface, personalised content, and advanced AI technology, GitaGPT provides you with the spiritual guidance and comfort you need in your life.&lt;/p&gt; &#xA;&lt;h2&gt;Try ChatGita for yourself&lt;/h2&gt; &#xA;&lt;p&gt;Bhagavad Gita AI has already become viral, with thousands of people using it to answer their everyday queries. Test its accuracy for yourself and see if it can help you gain a deeper understanding of the teachings of Lord Krishna.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Gita GPT and encourage you to submit pull requests with any improvements you make. Whether you&#39;re fixing a bug or adding a new feature, your contributions will help make GitaGPT the best it can be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Here are just a few ways you can get involved:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üé® Are you a designer? Help us create beautiful and user-friendly interfaces for our websites and apps.&lt;/li&gt; &#xA; &lt;li&gt;üíª Are you a developer? Help us build innovative and cutting-edge software applications.&lt;/li&gt; &#xA; &lt;li&gt;üìù Are you a writer? Contribute articles, blog posts, or even create video content that can help spread the teachings of Sanatana Dharma.&lt;/li&gt; &#xA; &lt;li&gt;üì± Are you a social media expert? Help us reach out to more people and spread the word about our work.&lt;/li&gt; &#xA; &lt;li&gt;üîç Are you an SEO expert? Help us make sure our content is easily accessible and ranks high on search engines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So what are you waiting for?&lt;/p&gt; &#xA;&lt;p&gt;üöÄ Let&#39;s make a difference together! üôå&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/vedvyas/shared_invite/zt-1o5himgxu-1e905aI7FM_8QsxbtiyVNA&#34;&gt;Join our Slack to connect with like-minded individuals and get involved.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;First, run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;# or&#xA;yarn dev&#xA;# or&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt; &#xA;&lt;p&gt;You can start editing the page by modifying &lt;code&gt;pages/index.tsx&lt;/code&gt;. The page auto-updates as you edit the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nextjs.org/docs/api-routes/introduction&#34;&gt;API routes&lt;/a&gt; can be accessed on &lt;a href=&#34;http://localhost:3000/api/hello&#34;&gt;http://localhost:3000/api/hello&lt;/a&gt;. This endpoint can be edited in &lt;code&gt;pages/api/hello.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;pages/api&lt;/code&gt; directory is mapped to &lt;code&gt;/api/*&lt;/code&gt;. Files in this directory are treated as &lt;a href=&#34;https://nextjs.org/docs/api-routes/introduction&#34;&gt;API routes&lt;/a&gt; instead of React pages.&lt;/p&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://nextjs.org/docs/basic-features/font-optimization&#34;&gt;&lt;code&gt;next/font&lt;/code&gt;&lt;/a&gt; to automatically optimize and load Inter, a custom Google Font.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Bhagavad Gita AI is open source and licensed under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nbd-wtf/nostr-tools</title>
    <updated>2023-02-14T01:50:00Z</updated>
    <id>tag:github.com,2023-02-14:/nbd-wtf/nostr-tools</id>
    <link href="https://github.com/nbd-wtf/nostr-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for developing Nostr clients.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nostr-tools&lt;/h1&gt; &#xA;&lt;p&gt;Tools for developing &lt;a href=&#34;https://github.com/fiatjaf/nostr&#34;&gt;Nostr&lt;/a&gt; clients.&lt;/p&gt; &#xA;&lt;p&gt;Only depends on &lt;em&gt;@scure&lt;/em&gt; and &lt;em&gt;@noble&lt;/em&gt; packages.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Generating a private key and a public key&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {generatePrivateKey, getPublicKey} from &#39;nostr-tools&#39;&#xA;&#xA;let sk = generatePrivateKey() // `sk` is a hex string&#xA;let pk = getPublicKey(sk) // `pk` is a hex string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating, signing and verifying events&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {&#xA;  validateEvent,&#xA;  verifySignature,&#xA;  signEvent,&#xA;  getEventHash,&#xA;  getPublicKey&#xA;} from &#39;nostr-tools&#39;&#xA;&#xA;let event = {&#xA;  kind: 1,&#xA;  created_at: Math.floor(Date.now() / 1000),&#xA;  tags: [],&#xA;  content: &#39;hello&#39;,&#xA;  pubkey: getPublicKey(privateKey)&#xA;}&#xA;&#xA;event.id = getEventHash(event)&#xA;event.sig = signEvent(event, privateKey)&#xA;&#xA;let ok = validateEvent(event)&#xA;let veryOk = verifySignature(event)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interacting with a relay&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {&#xA;  relayInit,&#xA;  generatePrivateKey,&#xA;  getPublicKey,&#xA;  getEventHash,&#xA;  signEvent&#xA;} from &#39;nostr-tools&#39;&#xA;&#xA;const relay = relayInit(&#39;wss://relay.example.com&#39;)&#xA;await relay.connect()&#xA;&#xA;relay.on(&#39;connect&#39;, () =&amp;gt; {&#xA;  console.log(`connected to ${relay.url}`)&#xA;})&#xA;relay.on(&#39;error&#39;, () =&amp;gt; {&#xA;  console.log(`failed to connect to ${relay.url}`)&#xA;})&#xA;&#xA;// let&#39;s query for an event that exists&#xA;let sub = relay.sub([&#xA;  {&#xA;    ids: [&#39;d7dd5eb3ab747e16f8d0212d53032ea2a7cadef53837e5a6c66d42849fcb9027&#39;]&#xA;  }&#xA;])&#xA;sub.on(&#39;event&#39;, event =&amp;gt; {&#xA;  console.log(&#39;we got the event we wanted:&#39;, event)&#xA;})&#xA;sub.on(&#39;eose&#39;, () =&amp;gt; {&#xA;  sub.unsub()&#xA;})&#xA;&#xA;// let&#39;s publish a new event while simultaneously monitoring the relay for it&#xA;let sk = generatePrivateKey()&#xA;let pk = getPublicKey(sk)&#xA;&#xA;let sub = relay.sub([&#xA;  {&#xA;    kinds: [1],&#xA;    authors: [pk]&#xA;  }&#xA;])&#xA;&#xA;sub.on(&#39;event&#39;, event =&amp;gt; {&#xA;  console.log(&#39;got event:&#39;, event)&#xA;})&#xA;&#xA;let event = {&#xA;  kind: 1,&#xA;  pubkey: pk,&#xA;  created_at: Math.floor(Date.now() / 1000),&#xA;  tags: [],&#xA;  content: &#39;hello world&#39;&#xA;}&#xA;event.id = getEventHash(event)&#xA;event.sig = signEvent(event, sk)&#xA;&#xA;let pub = relay.publish(event)&#xA;pub.on(&#39;ok&#39;, () =&amp;gt; {&#xA;  console.log(`${relay.url} has accepted our event`)&#xA;})&#xA;pub.on(&#39;seen&#39;, () =&amp;gt; {&#xA;  console.log(`we saw the event on ${relay.url}`)&#xA;})&#xA;pub.on(&#39;failed&#39;, reason =&amp;gt; {&#xA;  console.log(`failed to publish to ${relay.url}: ${reason}`)&#xA;})&#xA;&#xA;let events = await relay.list([{kinds: [0, 1]}])&#xA;let event = await relay.get({&#xA;  ids: [&#39;44e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245&#39;]&#xA;})&#xA;&#xA;await relay.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this on Node.js you first must install &lt;code&gt;websocket-polyfill&lt;/code&gt; and import it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;websocket-polyfill&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interacting with multiple relays&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {SimplePool} from &#39;nostr-tools&#39;&#xA;&#xA;const pool = new SimplePool()&#xA;&#xA;let relays = [&#39;wss://relay.example.com&#39;, &#39;wss://relay.example2.com&#39;]&#xA;&#xA;let relay = await pool.ensureRelay(&#39;wss://relay.example3.com&#39;)&#xA;&#xA;let subs = pool.sub([...relays, relay], {&#xA;  authors: [&#39;32e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245&#39;]&#xA;})&#xA;&#xA;subs.forEach(sub =&amp;gt;&#xA;  sub.on(&#39;event&#39;, event =&amp;gt; {&#xA;    // this will only be called once the first time the event is received&#xA;    // ...&#xA;  })&#xA;)&#xA;&#xA;let pubs = pool.publish(relays, newEvent)&#xA;pubs.forEach(pub =&amp;gt;&#xA;  pub.on(&#39;ok&#39;, () =&amp;gt; {&#xA;    // ...&#xA;  })&#xA;)&#xA;&#xA;let events = await pool.list(relays, [{kinds: [0, 1]}])&#xA;let event = await pool.get(relays, {&#xA;  ids: [&#39;44e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245&#39;]&#xA;})&#xA;&#xA;let relaysForEvent = pool.seenOn(&#xA;  &#39;44e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245&#39;&#xA;)&#xA;// relaysForEvent will be an array of URLs from relays a given event was seen on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying profile data from a NIP-05 address&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {nip05} from &#39;nostr-tools&#39;&#xA;&#xA;let profile = await nip05.queryProfile(&#39;jb55.com&#39;)&#xA;console.log(profile.pubkey)&#xA;// prints: 32e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245&#xA;console.log(profile.relays)&#xA;// prints: [wss://relay.damus.io]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this on Node.js you first must install &lt;code&gt;node-fetch@2&lt;/code&gt; and call something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;nip05.useFetchImplementation(require(&#39;node-fetch&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encoding and decoding NIP-19 codes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {nip19, generatePrivateKey, getPublicKey} from &#39;nostr-tools&#39;&#xA;&#xA;let sk = generatePrivateKey()&#xA;let nsec = nip19.nsecEncode(sk)&#xA;let {type, data} = nip19.decode(nsec)&#xA;assert(type === &#39;nsec&#39;)&#xA;assert(data === sk)&#xA;&#xA;let pk = getPublicKey(generatePrivateKey())&#xA;let npub = nip19.npubEncode(pk)&#xA;let {type, data} = nip19.decode(npub)&#xA;assert(type === &#39;npub&#39;)&#xA;assert(data === pk)&#xA;&#xA;let pk = getPublicKey(generatePrivateKey())&#xA;let relays = [&#xA;  &#39;wss://relay.nostr.example.mydomain.example.com&#39;,&#xA;  &#39;wss://nostr.banana.com&#39;&#xA;]&#xA;let nprofile = nip19.nprofileEncode({pubkey: pk, relays})&#xA;let {type, data} = nip19.decode(nprofile)&#xA;assert(type === &#39;nprofile&#39;)&#xA;assert(data.pubkey === pk)&#xA;assert(data.relays.length === 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encrypting and decrypting direct messages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {nip04, getPublicKey, generatePrivateKey} from &#39;nostr-tools&#39;&#xA;&#xA;// sender&#xA;let sk1 = generatePrivateKey()&#xA;let pk1 = getPublicKey(sk1)&#xA;&#xA;// receiver&#xA;let sk2 = generatePrivateKey()&#xA;let pk2 = getPublicKey(sk2)&#xA;&#xA;// on the sender side&#xA;let message = &#39;hello&#39;&#xA;let ciphertext = await nip04.encrypt(sk1, pk2, message)&#xA;&#xA;let event = {&#xA;  kind: 4,&#xA;  pubkey: pk1,&#xA;  tags: [[&#39;p&#39;, pk2]],&#xA;  content: ciphertext,&#xA;  ...otherProperties&#xA;}&#xA;&#xA;sendEvent(event)&#xA;&#xA;// on the receiver side&#xA;sub.on(&#39;event&#39;, event =&amp;gt; {&#xA;  let sender = event.tags.find(([k, v]) =&amp;gt; k === &#39;p&#39; &amp;amp;&amp;amp; v &amp;amp;&amp;amp; v !== &#39;&#39;)[1]&#xA;  pk1 === sender&#xA;  let plaintext = await nip04.decrypt(sk2, pk1, event.content)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Performing and checking for delegation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {nip26, getPublicKey, generatePrivateKey} from &#39;nostr-tools&#39;&#xA;&#xA;// delegator&#xA;let sk1 = generatePrivateKey()&#xA;let pk1 = getPublicKey(sk1)&#xA;&#xA;// delegatee&#xA;let sk2 = generatePrivateKey()&#xA;let pk2 = getPublicKey(sk2)&#xA;&#xA;// generate delegation&#xA;let delegation = nip26.createDelegation(sk1, {&#xA;  pubkey: pk2,&#xA;  kind: 1,&#xA;  since: Math.round(Date.now() / 1000),&#xA;  until: Math.round(Date.now() / 1000) + 60 * 60 * 24 * 30 /* 30 days */&#xA;})&#xA;&#xA;// the delegatee uses the delegation when building an event&#xA;let event = {&#xA;  pubkey: pk2,&#xA;  kind: 1,&#xA;  created_at: Math.round(Date.now() / 1000),&#xA;  content: &#39;hello from a delegated key&#39;,&#xA;  tags: [[&#39;delegation&#39;, delegation.from, delegation.cond, delegation.sig]]&#xA;}&#xA;&#xA;// finally any receiver of this event can check for the presence of a valid delegation tag&#xA;let delegator = nip26.getDelegator(event)&#xA;assert(delegator === pk1) // will be null if there is no delegation tag or if it is invalid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please consult the tests or &lt;a href=&#34;https://github.com/fiatjaf/nostr-tools&#34;&gt;the source code&lt;/a&gt; for more information that isn&#39;t available here.&lt;/p&gt; &#xA;&lt;h3&gt;Using from the browser (if you don&#39;t want to use a bundler)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/nostr-tools/lib/nostr.bundle.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  window.NostrTools.generatePrivateKey(&#39;...&#39;) // and so on&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plumbing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://just.systems/&#34;&gt;&lt;code&gt;just&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;just -l&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Public domain.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jupyterlab/jupyterlab-desktop</title>
    <updated>2023-02-14T01:50:00Z</updated>
    <id>tag:github.com,2023-02-14:/jupyterlab/jupyterlab-desktop</id>
    <link href="https://github.com/jupyterlab/jupyterlab-desktop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JupyterLab desktop application, based on Electron.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JupyterLab Desktop&lt;/h1&gt; &#xA;&lt;p&gt;JupyterLab Desktop is the cross-platform desktop application for &lt;a href=&#34;https://github.com/jupyterlab/jupyterlab&#34;&gt;JupyterLab&lt;/a&gt;. It is the quickest and easiest way to get started with Jupyter notebooks on your personal computer, with the flexibility for advanced use cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/media/jupyterlab-desktop.png&#34; alt=&#34;JupyterLab Desktop&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you have an existing JupyterLab Desktop installation, please uninstall it first by following the &lt;a href=&#34;https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/user-guide.md#uninstalling-jupyterlab-desktop&#34;&gt;uninstall instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jupyterlab/jupyterlab-desktop/releases/latest/download/JupyterLab-Setup-Debian.deb&#34;&gt;Debian, Ubuntu Linux Installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jupyterlab/jupyterlab-desktop/releases/latest/download/JupyterLab-Setup-Fedora.rpm&#34;&gt;Red Hat, Fedora, SUSE Linux Installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jupyterlab/jupyterlab-desktop/releases/latest/download/JupyterLab-Setup-macOS.dmg&#34;&gt;macOS Installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jupyterlab/jupyterlab-desktop/releases/latest/download/JupyterLab-Setup-Windows.exe&#34;&gt;Windows Installer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, JupyterLab Desktop can be installed on Windows via winget: &lt;code&gt;winget install jupyterlab&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please check out the &lt;a href=&#34;https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/user-guide.md#Customizing-the-Bundled-Python-Environment&#34;&gt;Python Environment Customization Guide&lt;/a&gt; if you plan to customize the Python environment to add new packages.&lt;/p&gt; &#xA;&lt;h2&gt;Launching JupyterLab Desktop&lt;/h2&gt; &#xA;&lt;p&gt;JupyterLab Desktop can be launched from the GUI of your operating system by clicking the application&#39;s icon or by using &lt;code&gt;jlab&lt;/code&gt; command from the command line. Double clicking &lt;code&gt;.ipynb&lt;/code&gt; files is also supported and it will launch JupyterLab Desktop and load the notebook file.&lt;/p&gt; &#xA;&lt;p&gt;JupyterLab Desktop sets File Browser&#39;s root directory based on the launch method.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If launched from the application icon on GUI or by using &lt;code&gt;jlab&lt;/code&gt; command without any arguments, then the default working directory is set as the root directory. The default working directory is user home directory but it can be customized from the Settings dialog.&lt;/li&gt; &#xA; &lt;li&gt;If launched by double clicking &lt;code&gt;.ipynb&lt;/code&gt; file or &lt;code&gt;jlab&lt;/code&gt; command with a file path as the argument, then file&#39;s parent directory is set as the root directory. Similarly, if a file is opened using the &lt;code&gt;Open...&lt;/code&gt; or &lt;code&gt;Open File...&lt;/code&gt; links in the Start section or by using drag &amp;amp; drop, then file&#39;s parent directory is set as the root directory.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;jlab&lt;/code&gt; command is used with a directory path as the argument or with the &lt;code&gt;--working-dir&lt;/code&gt; argument then the directory in the argument is set as the root directory. Similarly, if a folder is opened using the &lt;code&gt;Open Folder...&lt;/code&gt; link in the Start section or by using drag &amp;amp; drop, then the opened directory is set as the root directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sessions and Projects&lt;/h2&gt; &#xA;&lt;p&gt;Sessions represent local project launches and connections to existing JupyterLab servers. Each JupyterLab UI window in the app is associated with a separate session and sessions can be restored with the same configuration later on.&lt;/p&gt; &#xA;&lt;p&gt;Each launch of JupyterLab in a different working directory is a separate project and projects can have their own configuration such as Python environment and UI layout.&lt;/p&gt; &#xA;&lt;h3&gt;Session start options&lt;/h3&gt; &#xA;&lt;p&gt;You can start a new session by using the links at the Start section of the Welcome Page.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/media/start-session.png&#34; alt=&#34;Start session&#34; width=&#34;220&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;New notebook...&lt;/code&gt; creates a new notebook in the default working directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;New session...&lt;/code&gt; launches a new JupyterLab session in the default working directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Open...&lt;/code&gt; starts a new JupyterLab session in the selected working directory. If files are chosen, selected files&#39; parent directory becomes the working directory and selected files are opened in the session. On Windows and Linux &lt;code&gt;Open Folder...&lt;/code&gt; and &lt;code&gt;Open Files...&lt;/code&gt; options are presented as separate items.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Connect...&lt;/code&gt; creates a session by connecting to an existing JupyterLab server running locally or remotely. Locally running JupyterLab servers are automatically detected and listed in the Connect dialog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Similarly, CLI launches of the application, dropping files and folders, and double clicking to open files create new sessions as well.&lt;/p&gt; &#xA;&lt;p&gt;Previously opened sessions are stored as part of application data and they are listed on Welcome Page. Clicking an item in the &lt;code&gt;Recent sessions&lt;/code&gt; list restores the selected session.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/media/recent-sessions.png&#34; alt=&#34;Start session&#34; width=&#34;300&#34;&gt; &#xA;&lt;h3&gt;jlab command-line launch examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open directories using relative or absolute path &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;jlab .&lt;/code&gt; launch in current directory&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;jlab ../notebooks&lt;/code&gt; launch with relative path&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;jlab /Users/username/notebooks&lt;/code&gt; launch with absolute path&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open notebooks and other files using relative or absolute path &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;jlab /Users/username/notebooks/test.ipynb&lt;/code&gt; launch notebook with absolute path&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;jlab ../notebooks/test.ipynb&lt;/code&gt; launch notebook with relative path&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;jlab ../test.py&lt;/code&gt; launch python file with relative path&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open with a custom Python environment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;jlab --python-path /Users/username/custom_env/bin/python ../notebooks/test.ipynb&lt;/code&gt; launch notebook with custom Python environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For additional CLI options run &lt;code&gt;jlab --help&lt;/code&gt; in command line.&lt;/p&gt; &#xA;&lt;h3&gt;JupyterLab Extension support&lt;/h3&gt; &#xA;&lt;p&gt;JupyterLab Desktop currently supports user-friendly &lt;a href=&#34;https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html#overview-of-extensions&#34;&gt;prebuilt&lt;/a&gt; extensions. Source extensions which require rebuilding are not supported.&lt;/p&gt; &#xA;&lt;h3&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/user-guide.md&#34;&gt;user guide&lt;/a&gt; for configuration options&lt;/h3&gt; &#xA;&lt;h3&gt;For contributing, see &lt;a href=&#34;https://raw.githubusercontent.com/jupyterlab/jupyterlab-desktop/master/dev.md&#34;&gt;developer documentation&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
</feed>