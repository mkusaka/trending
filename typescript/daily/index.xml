<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-07T01:33:13Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abi/secret-llama</title>
    <updated>2024-05-07T01:33:13Z</updated>
    <id>tag:github.com,2024-05-07:/abi/secret-llama</id>
    <link href="https://github.com/abi/secret-llama" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully private LLM chatbot that runs entirely with a browser with no server needed. Supports Mistral and LLama 3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Secret Llama&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/abi/secret-llama/assets/23818/0bf43a95-4fe5-4c53-87bc-b558e5c4968f&#34; alt=&#34;secret llama&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Entirely-in-browser, fully private LLM chatbot supporting Llama 3, Mistral and other open source models.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully private = No conversation data ever leaves your computer&lt;/li&gt; &#xA; &lt;li&gt;Runs in the browser = No server needed and no install needed!&lt;/li&gt; &#xA; &lt;li&gt;Works offline&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-use interface on par with ChatGPT, but for open source LLMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Big thanks to the inference engine provided by &lt;a href=&#34;https://github.com/mlc-ai/web-llm&#34;&gt;webllm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join us on Discord&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/nDjadD9U&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/nDjadD9U&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To run this, you need a modern browser with support for WebGPU. According to &lt;a href=&#34;https://caniuse.com/?search=WebGPU&#34;&gt;caniuse&lt;/a&gt;, WebGPU is supported on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Google Chrome&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Edge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s also available in Firefox, but it needs to be enabled manually through the dom.webgpu.enabled flag. Safari on MacOS also has experimental support for WebGPU which can be enabled through the WebGPU experimental feature.&lt;/p&gt; &#xA;&lt;p&gt;In addition to WebGPU support, various models might have specific RAM requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Try it out&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://secretllama.com&#34;&gt;try it here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To compile the React code yourself, download the repo and then, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn&#xA;yarn build-and-preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re looking to make changes, run the development environment with live reload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported models&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Model Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TinyLlama-1.1B-Chat-v0.4-q4f32_1-1k&lt;/td&gt; &#xA;   &lt;td&gt;600MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama-3-8B-Instruct-q4f16_1 ‚≠ê&lt;/td&gt; &#xA;   &lt;td&gt;4.3GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Phi1.5-q4f16_1-1k&lt;/td&gt; &#xA;   &lt;td&gt;1.2GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mistral-7B-Instruct-v0.2-q4f16_1 ‚≠ê&lt;/td&gt; &#xA;   &lt;td&gt;4GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Looking for contributors&lt;/h2&gt; &#xA;&lt;p&gt;We would love contributions to improve the interface, support more models, speed up initial model loading time and fix bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Other Projects by Author&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/abi/screenshot-to-code&#34;&gt;screenshot to code&lt;/a&gt; and &lt;a href=&#34;https://picoapps.xyz&#34;&gt;Pico - AI-powered app builder&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dev-xo/remix-saas</title>
    <updated>2024-05-07T01:33:13Z</updated>
    <id>tag:github.com,2024-05-07:/dev-xo/remix-saas</id>
    <link href="https://github.com/dev-xo/remix-saas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Lightweight, Production-Ready Remix Stack for your next SaaS Application.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; üõçÔ∏è Remix SaaS &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; A Lightweight, Feature-Rich, and Production-Ready Remix Stack for your next SaaS application. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://remix-saas.fly.dev&#34;&gt;Live Demo&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/dev-xo/remix-saas/tree/main/docs&#34;&gt;Documentation&lt;/a&gt; ¬∑ &lt;a href=&#34;https://twitter.com/DanielKanem&#34;&gt;Twitter&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-remix-saas@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://remix-saas.fly.dev&#34;&gt;Live Demo&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://remix-saas.fly.dev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dev-xo/dev-xo/main/remix-saas/intro.png&#34; alt=&#34;Remix SaaS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve created a simple demo that displays all template-provided features. Psst! Give the site a few seconds to load! &lt;em&gt;(It&#39;s running on a free tier!)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Remix SaaS is an Open Source Template that shares common bits of code with: &lt;a href=&#34;https://github.com/remix-run/indie-stack&#34;&gt;Indie Stack&lt;/a&gt;, &lt;a href=&#34;https://github.com/epicweb-dev/epic-stack&#34;&gt;Epic Stack&lt;/a&gt;, &lt;a href=&#34;https://github.com/rphlmr/supa-stripe-stack&#34;&gt;Supa Stripe Stack&lt;/a&gt;, and some other amazing Open Source Remix resources. Check them out, please!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Please, read the &lt;a href=&#34;https://github.com/dev-xo/remix-saas/tree/main/docs#remix-saas-documentation&#34;&gt;Getting Started Documentation&lt;/a&gt; to successfully initialize your &lt;strong&gt;Remix SaaS&lt;/strong&gt; Template.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you found &lt;strong&gt;Remix SaaS&lt;/strong&gt; helpful, consider supporting it with a ‚≠ê &lt;a href=&#34;https://github.com/dev-xo/remix-saas&#34;&gt;Star&lt;/a&gt;. It helps the repository grow and provides the required motivation to continue maintaining the project. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/mw10013&#34;&gt;@mw10013&lt;/a&gt; who has been part of the Remix SaaS development.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adrianhajdin/banking</title>
    <updated>2024-05-07T01:33:13Z</updated>
    <id>tag:github.com,2024-05-07:/adrianhajdin/banking</id>
    <link href="https://github.com/adrianhajdin/banking" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Horizon is a modern banking platform for everyone.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/PuOVqP_cjkE?feature=shared&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/adrianhajdin/banking/assets/151519281/3c03519c-7ebd-4539-b598-49e63d1770b4&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Next_JS-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=nextdotjs&amp;amp;color=000000&#34; alt=&#34;nextdotjs&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-TypeScript-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=typescript&amp;amp;color=3178C6&#34; alt=&#34;typescript&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Tailwind_CSS-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=tailwindcss&amp;amp;color=06B6D4&#34; alt=&#34;tailwindcss&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Appwrite-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=appwrite&amp;amp;color=FD366E&#34; alt=&#34;appwrite&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;A Fintech Bank Application&lt;/h3&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;   Build this project step by step with our detailed tutorial on &#xA;  &lt;a href=&#34;https://www.youtube.com/@javascriptmastery/videos&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;JavaScript Mastery&lt;/b&gt;&lt;/a&gt; YouTube. Join the JSM family! &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üìã &lt;a name=&#34;table&#34;&gt;Table of Contents&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ü§ñ &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/banking/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/banking/main/#tech-stack&#34;&gt;Tech Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîã &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/banking/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ü§∏ &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/banking/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üï∏Ô∏è &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/banking/main/#snippets&#34;&gt;Code Snippets to Copy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîó &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/banking/main/#links&#34;&gt;Assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üöÄ &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/banking/main/#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üö® Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the code corresponding to an in-depth tutorial available on our YouTube channel, &lt;a href=&#34;https://www.youtube.com/@javascriptmastery/videos&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;JavaScript Mastery&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer visual learning, this is the perfect resource for you. Follow our tutorial to learn how to build projects like these step-by-step in a beginner-friendly manner!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/PuOVqP_cjkE?feature=shared&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/1736fca5-a031-4854-8c09-bc110e3bc16d&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;introduction&#34;&gt;ü§ñ Introduction&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Built with Next.js, Horizon is a financial SaaS platform that connects to multiple bank accounts, displays transactions in real-time, allows users to transfer money to other platform users, and manages their finances altogether.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re getting started and need assistance or face any bugs, join our active Discord community with over &lt;strong&gt;34k+&lt;/strong&gt; members. It&#39;s a place where people help each other out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/n6EdbFJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/618f4872-1e10-42da-8213-1d69e486d02e&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;tech-stack&#34;&gt;‚öôÔ∏è Tech Stack&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next.js&lt;/li&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Appwrite&lt;/li&gt; &#xA; &lt;li&gt;Plaid&lt;/li&gt; &#xA; &lt;li&gt;Dwolla&lt;/li&gt; &#xA; &lt;li&gt;React Hook Form&lt;/li&gt; &#xA; &lt;li&gt;Zod&lt;/li&gt; &#xA; &lt;li&gt;TailwindCSS&lt;/li&gt; &#xA; &lt;li&gt;Chart.js&lt;/li&gt; &#xA; &lt;li&gt;ShadCN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;features&#34;&gt;üîã Features&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;Authentication&lt;/strong&gt;: An ultra-secure SSR authentication with proper validations and authorization&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;Connect Banks&lt;/strong&gt;: Integrates with Plaid for multiple bank account linking&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;Home Page&lt;/strong&gt;: Shows general overview of user account with total balance from all connected banks, recent transactions, money spent on different categories, etc&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;My Banks&lt;/strong&gt;: Check the complete list of all connected banks with respective balances, account details&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;Transaction History&lt;/strong&gt;: Includes pagination and filtering options for viewing transaction history of different banks&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;Real-time Updates&lt;/strong&gt;: Reflects changes across all relevant pages upon connecting new bank accounts.&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;Funds Transfer&lt;/strong&gt;: Allows users to transfer funds using Dwolla to other accounts with required fields and recipient bank ID.&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;Responsiveness&lt;/strong&gt;: Ensures the application adapts seamlessly to various screen sizes and devices, providing a consistent user experience across desktop, tablet, and mobile platforms.&lt;/p&gt; &#xA;&lt;p&gt;and many more, including code architecture and reusability.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;quick-start&#34;&gt;ü§∏ Quick Start&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps to set up the project locally on your machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have the following installed on your machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; (Node Package Manager)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cloning the Repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/adrianhajdin/banking.git&#xA;cd banking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the project dependencies using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Set Up Environment Variables&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a new file named &lt;code&gt;.env&lt;/code&gt; in the root of your project and add the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;#NEXT&#xA;NEXT_PUBLIC_SITE_URL=&#xA;&#xA;#APPWRITE&#xA;NEXT_PUBLIC_APPWRITE_ENDPOINT=https://cloud.appwrite.io/v1&#xA;NEXT_PUBLIC_APPWRITE_PROJECT=&#xA;APPWRITE_DATABASE_ID=&#xA;APPWRITE_USER_COLLECTION_ID=&#xA;APPWRITE_BANK_COLLECTION_ID=&#xA;APPWRITE_TRANSACTION_COLLECTION_ID=&#xA;APPWRITE_SECRET=&#xA;&#xA;#PLAID&#xA;PLAID_CLIENT_ID=&#xA;PLAID_SECRET=&#xA;PLAID_ENV=&#xA;PLAID_PRODUCTS=&#xA;PLAID_COUNTRY_CODES=&#xA;&#xA;#DWOLLA&#xA;DWOLLA_KEY=&#xA;DWOLLA_SECRET=&#xA;DWOLLA_BASE_URL=https://api-sandbox.dwolla.com&#xA;DWOLLA_ENV=sandbox&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace the placeholder values with your actual respective account credentials. You can obtain these credentials by signing up on the &lt;a href=&#34;https://appwrite.io/?utm_source=youtube&amp;amp;utm_content=reactnative&amp;amp;ref=JSmastery&#34;&gt;Appwrite&lt;/a&gt;, &lt;a href=&#34;https://plaid.com/&#34;&gt;Plaid&lt;/a&gt; and &lt;a href=&#34;https://www.dwolla.com/&#34;&gt;Dwolla&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Running the Project&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to view the project.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;snippets&#34;&gt;üï∏Ô∏è Snippets&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;.env.example&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;#NEXT&#xA;NEXT_PUBLIC_SITE_URL=&#xA;&#xA;#APPWRITE&#xA;NEXT_PUBLIC_APPWRITE_ENDPOINT=https://cloud.appwrite.io/v1&#xA;NEXT_PUBLIC_APPWRITE_PROJECT=&#xA;APPWRITE_DATABASE_ID=&#xA;APPWRITE_USER_COLLECTION_ID=&#xA;APPWRITE_BANK_COLLECTION_ID=&#xA;APPWRITE_TRANSACTION_COLLECTION_ID=&#xA;APPWRITE_SECRET=&#xA;&#xA;#PLAID&#xA;PLAID_CLIENT_ID=&#xA;PLAID_SECRET=&#xA;PLAID_ENV=sandbox&#xA;PLAID_PRODUCTS=auth,transactions,identity&#xA;PLAID_COUNTRY_CODES=US,CA&#xA;&#xA;#DWOLLA&#xA;DWOLLA_KEY=&#xA;DWOLLA_SECRET=&#xA;DWOLLA_BASE_URL=https://api-sandbox.dwolla.com&#xA;DWOLLA_ENV=sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;exchangePublicToken&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// This function exchanges a public token for an access token and item ID&#xA;export const exchangePublicToken = async ({&#xA;  publicToken,&#xA;  user,&#xA;}: exchangePublicTokenProps) =&amp;gt; {&#xA;  try {&#xA;    // Exchange public token for access token and item ID&#xA;    const response = await plaidClient.itemPublicTokenExchange({&#xA;      public_token: publicToken,&#xA;    });&#xA;&#xA;    const accessToken = response.data.access_token;&#xA;    const itemId = response.data.item_id;&#xA;&#xA;    // Get account information from Plaid using the access token&#xA;    const accountsResponse = await plaidClient.accountsGet({&#xA;      access_token: accessToken,&#xA;    });&#xA;&#xA;    const accountData = accountsResponse.data.accounts[0];&#xA;&#xA;    // Create a processor token for Dwolla using the access token and account ID&#xA;    const request: ProcessorTokenCreateRequest = {&#xA;      access_token: accessToken,&#xA;      account_id: accountData.account_id,&#xA;      processor: &#34;dwolla&#34; as ProcessorTokenCreateRequestProcessorEnum,&#xA;    };&#xA;&#xA;    const processorTokenResponse =&#xA;      await plaidClient.processorTokenCreate(request);&#xA;    const processorToken = processorTokenResponse.data.processor_token;&#xA;&#xA;    // Create a funding source URL for the account using the Dwolla customer ID, processor token, and bank name&#xA;    const fundingSourceUrl = await addFundingSource({&#xA;      dwollaCustomerId: user.dwollaCustomerId,&#xA;      processorToken,&#xA;      bankName: accountData.name,&#xA;    });&#xA;&#xA;    // If the funding source URL is not created, throw an error&#xA;    if (!fundingSourceUrl) throw Error;&#xA;&#xA;    // Create a bank account using the user ID, item ID, account ID, access token, funding source URL, and sharable ID&#xA;    await createBankAccount({&#xA;      userId: user.$id,&#xA;      bankId: itemId,&#xA;      accountId: accountData.account_id,&#xA;      accessToken,&#xA;      fundingSourceUrl,&#xA;      sharableId: encryptId(accountData.account_id),&#xA;    });&#xA;&#xA;    // Revalidate the path to reflect the changes&#xA;    revalidatePath(&#34;/&#34;);&#xA;&#xA;    // Return a success message&#xA;    return parseStringify({&#xA;      publicTokenExchange: &#34;complete&#34;,&#xA;    });&#xA;  } catch (error) {&#xA;    // Log any errors that occur during the process&#xA;    console.error(&#34;An error occurred while creating exchanging token:&#34;, error);&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;user.actions.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use server&#34;;&#xA;&#xA;import { revalidatePath } from &#34;next/cache&#34;;&#xA;import { cookies } from &#34;next/headers&#34;;&#xA;import { ID, Query } from &#34;node-appwrite&#34;;&#xA;import {&#xA;  CountryCode,&#xA;  ProcessorTokenCreateRequest,&#xA;  ProcessorTokenCreateRequestProcessorEnum,&#xA;  Products,&#xA;} from &#34;plaid&#34;;&#xA;&#xA;import { plaidClient } from &#34;@/lib/plaid.config&#34;;&#xA;import {&#xA;  parseStringify,&#xA;  extractCustomerIdFromUrl,&#xA;  encryptId,&#xA;} from &#34;@/lib/utils&#34;;&#xA;&#xA;import { createAdminClient, createSessionClient } from &#34;../appwrite.config&#34;;&#xA;&#xA;import { addFundingSource, createDwollaCustomer } from &#34;./dwolla.actions&#34;;&#xA;&#xA;const {&#xA;  APPWRITE_DATABASE_ID: DATABASE_ID,&#xA;  APPWRITE_USER_COLLECTION_ID: USER_COLLECTION_ID,&#xA;  APPWRITE_BANK_COLLECTION_ID: BANK_COLLECTION_ID,&#xA;} = process.env;&#xA;&#xA;export const signUp = async ({ password, ...userData }: SignUpParams) =&amp;gt; {&#xA;  let newUserAccount;&#xA;&#xA;  try {&#xA;    // create appwrite user&#xA;    const { database, account } = await createAdminClient();&#xA;    newUserAccount = await account.create(&#xA;      ID.unique(),&#xA;      userData.email,&#xA;      password,&#xA;      `${userData.firstName} ${userData.lastName}`&#xA;    );&#xA;&#xA;    if (!newUserAccount) throw new Error(&#34;Error creating user&#34;);&#xA;&#xA;    // create dwolla customer&#xA;    const dwollaCustomerUrl = await createDwollaCustomer({&#xA;      ...userData,&#xA;      type: &#34;personal&#34;,&#xA;    });&#xA;&#xA;    if (!dwollaCustomerUrl) throw new Error(&#34;Error creating dwolla customer&#34;);&#xA;    const dwollaCustomerId = extractCustomerIdFromUrl(dwollaCustomerUrl);&#xA;&#xA;    const newUser = await database.createDocument(&#xA;      DATABASE_ID!,&#xA;      USER_COLLECTION_ID!,&#xA;      ID.unique(),&#xA;      {&#xA;        ...userData,&#xA;        userId: newUserAccount.$id,&#xA;        dwollaCustomerUrl,&#xA;        dwollaCustomerId,&#xA;      }&#xA;    );&#xA;&#xA;    const session = await account.createEmailPasswordSession(&#xA;      userData.email,&#xA;      password&#xA;    );&#xA;&#xA;    cookies().set(&#34;appwrite-session&#34;, session.secret, {&#xA;      path: &#34;/&#34;,&#xA;      httpOnly: true,&#xA;      sameSite: &#34;strict&#34;,&#xA;      secure: true,&#xA;    });&#xA;&#xA;    return parseStringify(newUser);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;&#xA;    // check if account has been created, if so, delete it&#xA;    if (newUserAccount?.$id) {&#xA;      const { user } = await createAdminClient();&#xA;      await user.delete(newUserAccount?.$id);&#xA;    }&#xA;&#xA;    return null;&#xA;  }&#xA;};&#xA;&#xA;export const signIn = async ({ email, password }: signInProps) =&amp;gt; {&#xA;  try {&#xA;    const { account } = await createAdminClient();&#xA;    const session = await account.createEmailPasswordSession(email, password);&#xA;&#xA;    cookies().set(&#34;appwrite-session&#34;, session.secret, {&#xA;      path: &#34;/&#34;,&#xA;      httpOnly: true,&#xA;      sameSite: &#34;strict&#34;,&#xA;      secure: true,&#xA;    });&#xA;&#xA;    const user = await getUserInfo({ userId: session.userId });&#xA;&#xA;    return parseStringify(user);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;    return null;&#xA;  }&#xA;};&#xA;&#xA;export const getLoggedInUser = async () =&amp;gt; {&#xA;  try {&#xA;    const { account } = await createSessionClient();&#xA;    const result = await account.get();&#xA;&#xA;    const user = await getUserInfo({ userId: result.$id });&#xA;&#xA;    return parseStringify(user);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;    return null;&#xA;  }&#xA;};&#xA;&#xA;// CREATE PLAID LINK TOKEN&#xA;export const createLinkToken = async (user: User) =&amp;gt; {&#xA;  try {&#xA;    const tokeParams = {&#xA;      user: {&#xA;        client_user_id: user.$id,&#xA;      },&#xA;      client_name: user.firstName + user.lastName,&#xA;      products: [&#34;auth&#34;] as Products[],&#xA;      language: &#34;en&#34;,&#xA;      country_codes: [&#34;US&#34;] as CountryCode[],&#xA;    };&#xA;&#xA;    const response = await plaidClient.linkTokenCreate(tokeParams);&#xA;&#xA;    return parseStringify({ linkToken: response.data.link_token });&#xA;  } catch (error) {&#xA;    console.error(&#xA;      &#34;An error occurred while creating a new Horizon user:&#34;,&#xA;      error&#xA;    );&#xA;  }&#xA;};&#xA;&#xA;// EXCHANGE PLAID PUBLIC TOKEN&#xA;// This function exchanges a public token for an access token and item ID&#xA;export const exchangePublicToken = async ({&#xA;  publicToken,&#xA;  user,&#xA;}: exchangePublicTokenProps) =&amp;gt; {&#xA;  try {&#xA;    // Exchange public token for access token and item ID&#xA;    const response = await plaidClient.itemPublicTokenExchange({&#xA;      public_token: publicToken,&#xA;    });&#xA;&#xA;    const accessToken = response.data.access_token;&#xA;    const itemId = response.data.item_id;&#xA;&#xA;    // Get account information from Plaid using the access token&#xA;    const accountsResponse = await plaidClient.accountsGet({&#xA;      access_token: accessToken,&#xA;    });&#xA;&#xA;    const accountData = accountsResponse.data.accounts[0];&#xA;&#xA;    // Create a processor token for Dwolla using the access token and account ID&#xA;    const request: ProcessorTokenCreateRequest = {&#xA;      access_token: accessToken,&#xA;      account_id: accountData.account_id,&#xA;      processor: &#34;dwolla&#34; as ProcessorTokenCreateRequestProcessorEnum,&#xA;    };&#xA;&#xA;    const processorTokenResponse =&#xA;      await plaidClient.processorTokenCreate(request);&#xA;    const processorToken = processorTokenResponse.data.processor_token;&#xA;&#xA;    // Create a funding source URL for the account using the Dwolla customer ID, processor token, and bank name&#xA;    const fundingSourceUrl = await addFundingSource({&#xA;      dwollaCustomerId: user.dwollaCustomerId,&#xA;      processorToken,&#xA;      bankName: accountData.name,&#xA;    });&#xA;&#xA;    // If the funding source URL is not created, throw an error&#xA;    if (!fundingSourceUrl) throw Error;&#xA;&#xA;    // Create a bank account using the user ID, item ID, account ID, access token, funding source URL, and sharable ID&#xA;    await createBankAccount({&#xA;      userId: user.$id,&#xA;      bankId: itemId,&#xA;      accountId: accountData.account_id,&#xA;      accessToken,&#xA;      fundingSourceUrl,&#xA;      sharableId: encryptId(accountData.account_id),&#xA;    });&#xA;&#xA;    // Revalidate the path to reflect the changes&#xA;    revalidatePath(&#34;/&#34;);&#xA;&#xA;    // Return a success message&#xA;    return parseStringify({&#xA;      publicTokenExchange: &#34;complete&#34;,&#xA;    });&#xA;  } catch (error) {&#xA;    // Log any errors that occur during the process&#xA;    console.error(&#34;An error occurred while creating exchanging token:&#34;, error);&#xA;  }&#xA;};&#xA;&#xA;export const getUserInfo = async ({ userId }: getUserInfoProps) =&amp;gt; {&#xA;  try {&#xA;    const { database } = await createAdminClient();&#xA;&#xA;    const user = await database.listDocuments(&#xA;      DATABASE_ID!,&#xA;      USER_COLLECTION_ID!,&#xA;      [Query.equal(&#34;userId&#34;, [userId])]&#xA;    );&#xA;&#xA;    if (user.total !== 1) return null;&#xA;&#xA;    return parseStringify(user.documents[0]);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;    return null;&#xA;  }&#xA;};&#xA;&#xA;export const createBankAccount = async ({&#xA;  accessToken,&#xA;  userId,&#xA;  accountId,&#xA;  bankId,&#xA;  fundingSourceUrl,&#xA;  sharableId,&#xA;}: createBankAccountProps) =&amp;gt; {&#xA;  try {&#xA;    const { database } = await createAdminClient();&#xA;&#xA;    const bankAccount = await database.createDocument(&#xA;      DATABASE_ID!,&#xA;      BANK_COLLECTION_ID!,&#xA;      ID.unique(),&#xA;      {&#xA;        accessToken,&#xA;        userId,&#xA;        accountId,&#xA;        bankId,&#xA;        fundingSourceUrl,&#xA;        sharableId,&#xA;      }&#xA;    );&#xA;&#xA;    return parseStringify(bankAccount);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;    return null;&#xA;  }&#xA;};&#xA;&#xA;// get user bank accounts&#xA;export const getBanks = async ({ userId }: getBanksProps) =&amp;gt; {&#xA;  try {&#xA;    const { database } = await createAdminClient();&#xA;&#xA;    const banks = await database.listDocuments(&#xA;      DATABASE_ID!,&#xA;      BANK_COLLECTION_ID!,&#xA;      [Query.equal(&#34;userId&#34;, [userId])]&#xA;    );&#xA;&#xA;    return parseStringify(banks.documents);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;    return null;&#xA;  }&#xA;};&#xA;&#xA;// get specific bank from bank collection by document id&#xA;export const getBank = async ({ documentId }: getBankProps) =&amp;gt; {&#xA;  try {&#xA;    const { database } = await createAdminClient();&#xA;&#xA;    const bank = await database.listDocuments(&#xA;      DATABASE_ID!,&#xA;      BANK_COLLECTION_ID!,&#xA;      [Query.equal(&#34;$id&#34;, [documentId])]&#xA;    );&#xA;&#xA;    if (bank.total !== 1) return null;&#xA;&#xA;    return parseStringify(bank.documents[0]);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;    return null;&#xA;  }&#xA;};&#xA;&#xA;// get specific bank from bank collection by account id&#xA;export const getBankByAccountId = async ({&#xA;  accountId,&#xA;}: getBankByAccountIdProps) =&amp;gt; {&#xA;  try {&#xA;    const { database } = await createAdminClient();&#xA;&#xA;    const bank = await database.listDocuments(&#xA;      DATABASE_ID!,&#xA;      BANK_COLLECTION_ID!,&#xA;      [Query.equal(&#34;accountId&#34;, [accountId])]&#xA;    );&#xA;&#xA;    if (bank.total !== 1) return null;&#xA;&#xA;    return parseStringify(bank.documents[0]);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error&#34;, error);&#xA;    return null;&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;dwolla.actions.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use server&#34;;&#xA;&#xA;import { Client } from &#34;dwolla-v2&#34;;&#xA;&#xA;const getEnvironment = (): &#34;production&#34; | &#34;sandbox&#34; =&amp;gt; {&#xA;  const environment = process.env.DWOLLA_ENV as string;&#xA;&#xA;  switch (environment) {&#xA;    case &#34;sandbox&#34;:&#xA;      return &#34;sandbox&#34;;&#xA;    case &#34;production&#34;:&#xA;      return &#34;production&#34;;&#xA;    default:&#xA;      throw new Error(&#xA;        &#34;Dwolla environment should either be set to `sandbox` or `production`&#34;&#xA;      );&#xA;  }&#xA;};&#xA;&#xA;const dwollaClient = new Client({&#xA;  environment: getEnvironment(),&#xA;  key: process.env.DWOLLA_KEY as string,&#xA;  secret: process.env.DWOLLA_SECRET as string,&#xA;});&#xA;&#xA;// Create a Dwolla Funding Source using a Plaid Processor Token&#xA;export const createFundingSource = async (&#xA;  options: CreateFundingSourceOptions&#xA;) =&amp;gt; {&#xA;  try {&#xA;    return await dwollaClient&#xA;      .post(`customers/${options.customerId}/funding-sources`, {&#xA;        name: options.fundingSourceName,&#xA;        plaidToken: options.plaidToken,&#xA;      })&#xA;      .then((res) =&amp;gt; res.headers.get(&#34;location&#34;));&#xA;  } catch (err) {&#xA;    console.error(&#34;Creating a Funding Source Failed: &#34;, err);&#xA;  }&#xA;};&#xA;&#xA;export const createOnDemandAuthorization = async () =&amp;gt; {&#xA;  try {&#xA;    const onDemandAuthorization = await dwollaClient.post(&#xA;      &#34;on-demand-authorizations&#34;&#xA;    );&#xA;    const authLink = onDemandAuthorization.body._links;&#xA;    return authLink;&#xA;  } catch (err) {&#xA;    console.error(&#34;Creating an On Demand Authorization Failed: &#34;, err);&#xA;  }&#xA;};&#xA;&#xA;export const createDwollaCustomer = async (&#xA;  newCustomer: NewDwollaCustomerParams&#xA;) =&amp;gt; {&#xA;  try {&#xA;    return await dwollaClient&#xA;      .post(&#34;customers&#34;, newCustomer)&#xA;      .then((res) =&amp;gt; res.headers.get(&#34;location&#34;));&#xA;  } catch (err) {&#xA;    console.error(&#34;Creating a Dwolla Customer Failed: &#34;, err);&#xA;  }&#xA;};&#xA;&#xA;export const createTransfer = async ({&#xA;  sourceFundingSourceUrl,&#xA;  destinationFundingSourceUrl,&#xA;  amount,&#xA;}: TransferParams) =&amp;gt; {&#xA;  try {&#xA;    const requestBody = {&#xA;      _links: {&#xA;        source: {&#xA;          href: sourceFundingSourceUrl,&#xA;        },&#xA;        destination: {&#xA;          href: destinationFundingSourceUrl,&#xA;        },&#xA;      },&#xA;      amount: {&#xA;        currency: &#34;USD&#34;,&#xA;        value: amount,&#xA;      },&#xA;    };&#xA;    return await dwollaClient&#xA;      .post(&#34;transfers&#34;, requestBody)&#xA;      .then((res) =&amp;gt; res.headers.get(&#34;location&#34;));&#xA;  } catch (err) {&#xA;    console.error(&#34;Transfer fund failed: &#34;, err);&#xA;  }&#xA;};&#xA;&#xA;export const addFundingSource = async ({&#xA;  dwollaCustomerId,&#xA;  processorToken,&#xA;  bankName,&#xA;}: AddFundingSourceParams) =&amp;gt; {&#xA;  try {&#xA;    // create dwolla auth link&#xA;    const dwollaAuthLinks = await createOnDemandAuthorization();&#xA;&#xA;    // add funding source to the dwolla customer &amp;amp; get the funding source url&#xA;    const fundingSourceOptions = {&#xA;      customerId: dwollaCustomerId,&#xA;      fundingSourceName: bankName,&#xA;      plaidToken: processorToken,&#xA;      _links: dwollaAuthLinks,&#xA;    };&#xA;    return await createFundingSource(fundingSourceOptions);&#xA;  } catch (err) {&#xA;    console.error(&#34;Transfer fund failed: &#34;, err);&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;bank.actions.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use server&#34;;&#xA;&#xA;import {&#xA;  ACHClass,&#xA;  CountryCode,&#xA;  TransferAuthorizationCreateRequest,&#xA;  TransferCreateRequest,&#xA;  TransferNetwork,&#xA;  TransferType,&#xA;} from &#34;plaid&#34;;&#xA;&#xA;import { plaidClient } from &#34;../plaid.config&#34;;&#xA;import { parseStringify } from &#34;../utils&#34;;&#xA;&#xA;import { getTransactionsByBankId } from &#34;./transaction.actions&#34;;&#xA;import { getBanks, getBank } from &#34;./user.actions&#34;;&#xA;&#xA;// Get multiple bank accounts&#xA;export const getAccounts = async ({ userId }: getAccountsProps) =&amp;gt; {&#xA;  try {&#xA;    // get banks from db&#xA;    const banks = await getBanks({ userId });&#xA;&#xA;    const accounts = await Promise.all(&#xA;      banks?.map(async (bank: Bank) =&amp;gt; {&#xA;        // get each account info from plaid&#xA;        const accountsResponse = await plaidClient.accountsGet({&#xA;          access_token: bank.accessToken,&#xA;        });&#xA;        const accountData = accountsResponse.data.accounts[0];&#xA;&#xA;        // get institution info from plaid&#xA;        const institution = await getInstitution({&#xA;          institutionId: accountsResponse.data.item.institution_id!,&#xA;        });&#xA;&#xA;        const account = {&#xA;          id: accountData.account_id,&#xA;          availableBalance: accountData.balances.available!,&#xA;          currentBalance: accountData.balances.current!,&#xA;          institutionId: institution.institution_id,&#xA;          name: accountData.name,&#xA;          officialName: accountData.official_name,&#xA;          mask: accountData.mask!,&#xA;          type: accountData.type as string,&#xA;          subtype: accountData.subtype! as string,&#xA;          appwriteItemId: bank.$id,&#xA;          sharableId: bank.sharableId,&#xA;        };&#xA;&#xA;        return account;&#xA;      })&#xA;    );&#xA;&#xA;    const totalBanks = accounts.length;&#xA;    const totalCurrentBalance = accounts.reduce((total, account) =&amp;gt; {&#xA;      return total + account.currentBalance;&#xA;    }, 0);&#xA;&#xA;    return parseStringify({ data: accounts, totalBanks, totalCurrentBalance });&#xA;  } catch (error) {&#xA;    console.error(&#34;An error occurred while getting the accounts:&#34;, error);&#xA;  }&#xA;};&#xA;&#xA;// Get one bank account&#xA;export const getAccount = async ({ appwriteItemId }: getAccountProps) =&amp;gt; {&#xA;  try {&#xA;    // get bank from db&#xA;    const bank = await getBank({ documentId: appwriteItemId });&#xA;&#xA;    // get account info from plaid&#xA;    const accountsResponse = await plaidClient.accountsGet({&#xA;      access_token: bank.accessToken,&#xA;    });&#xA;    const accountData = accountsResponse.data.accounts[0];&#xA;&#xA;    // get transfer transactions from appwrite&#xA;    const transferTransactionsData = await getTransactionsByBankId({&#xA;      bankId: bank.$id,&#xA;    });&#xA;&#xA;    const transferTransactions = transferTransactionsData.documents.map(&#xA;      (transferData: Transaction) =&amp;gt; ({&#xA;        id: transferData.$id,&#xA;        name: transferData.name!,&#xA;        amount: transferData.amount!,&#xA;        date: transferData.$createdAt,&#xA;        paymentChannel: transferData.channel,&#xA;        category: transferData.category,&#xA;        type: transferData.senderBankId === bank.$id ? &#34;debit&#34; : &#34;credit&#34;,&#xA;      })&#xA;    );&#xA;&#xA;    // get institution info from plaid&#xA;    const institution = await getInstitution({&#xA;      institutionId: accountsResponse.data.item.institution_id!,&#xA;    });&#xA;&#xA;    const transactions = await getTransactions({&#xA;      accessToken: bank?.accessToken,&#xA;    });&#xA;&#xA;    const account = {&#xA;      id: accountData.account_id,&#xA;      availableBalance: accountData.balances.available!,&#xA;      currentBalance: accountData.balances.current!,&#xA;      institutionId: institution.institution_id,&#xA;      name: accountData.name,&#xA;      officialName: accountData.official_name,&#xA;      mask: accountData.mask!,&#xA;      type: accountData.type as string,&#xA;      subtype: accountData.subtype! as string,&#xA;      appwriteItemId: bank.$id,&#xA;    };&#xA;&#xA;    // sort transactions by date such that the most recent transaction is first&#xA;    const allTransactions = [...transactions, ...transferTransactions].sort(&#xA;      (a, b) =&amp;gt; new Date(b.date).getTime() - new Date(a.date).getTime()&#xA;    );&#xA;&#xA;    return parseStringify({&#xA;      data: account,&#xA;      transactions: allTransactions,&#xA;    });&#xA;  } catch (error) {&#xA;    console.error(&#34;An error occurred while getting the account:&#34;, error);&#xA;  }&#xA;};&#xA;&#xA;// Get bank info&#xA;export const getInstitution = async ({&#xA;  institutionId,&#xA;}: getInstitutionProps) =&amp;gt; {&#xA;  try {&#xA;    const institutionResponse = await plaidClient.institutionsGetById({&#xA;      institution_id: institutionId,&#xA;      country_codes: [&#34;US&#34;] as CountryCode[],&#xA;    });&#xA;&#xA;    const intitution = institutionResponse.data.institution;&#xA;&#xA;    return parseStringify(intitution);&#xA;  } catch (error) {&#xA;    console.error(&#34;An error occurred while getting the accounts:&#34;, error);&#xA;  }&#xA;};&#xA;&#xA;// Get transactions&#xA;export const getTransactions = async ({&#xA;  accessToken,&#xA;}: getTransactionsProps) =&amp;gt; {&#xA;  let hasMore = true;&#xA;  let transactions: any = [];&#xA;&#xA;  try {&#xA;    // Iterate through each page of new transaction updates for item&#xA;    while (hasMore) {&#xA;      const response = await plaidClient.transactionsSync({&#xA;        access_token: accessToken,&#xA;      });&#xA;&#xA;      const data = response.data;&#xA;&#xA;      transactions = response.data.added.map((transaction) =&amp;gt; ({&#xA;        id: transaction.transaction_id,&#xA;        name: transaction.name,&#xA;        paymentChannel: transaction.payment_channel,&#xA;        type: transaction.payment_channel,&#xA;        accountId: transaction.account_id,&#xA;        amount: transaction.amount,&#xA;        pending: transaction.pending,&#xA;        category: transaction.category ? transaction.category[0] : &#34;&#34;,&#xA;        date: transaction.date,&#xA;        image: transaction.logo_url,&#xA;      }));&#xA;&#xA;      hasMore = data.has_more;&#xA;    }&#xA;&#xA;    return parseStringify(transactions);&#xA;  } catch (error) {&#xA;    console.error(&#34;An error occurred while getting the accounts:&#34;, error);&#xA;  }&#xA;};&#xA;&#xA;// Create Transfer&#xA;export const createTransfer = async () =&amp;gt; {&#xA;  const transferAuthRequest: TransferAuthorizationCreateRequest = {&#xA;    access_token: &#34;access-sandbox-cddd20c1-5ba8-4193-89f9-3a0b91034c25&#34;,&#xA;    account_id: &#34;Zl8GWV1jqdTgjoKnxQn1HBxxVBanm5FxZpnQk&#34;,&#xA;    funding_account_id: &#34;442d857f-fe69-4de2-a550-0c19dc4af467&#34;,&#xA;    type: &#34;credit&#34; as TransferType,&#xA;    network: &#34;ach&#34; as TransferNetwork,&#xA;    amount: &#34;10.00&#34;,&#xA;    ach_class: &#34;ppd&#34; as ACHClass,&#xA;    user: {&#xA;      legal_name: &#34;Anne Charleston&#34;,&#xA;    },&#xA;  };&#xA;  try {&#xA;    const transferAuthResponse =&#xA;      await plaidClient.transferAuthorizationCreate(transferAuthRequest);&#xA;    const authorizationId = transferAuthResponse.data.authorization.id;&#xA;&#xA;    const transferCreateRequest: TransferCreateRequest = {&#xA;      access_token: &#34;access-sandbox-cddd20c1-5ba8-4193-89f9-3a0b91034c25&#34;,&#xA;      account_id: &#34;Zl8GWV1jqdTgjoKnxQn1HBxxVBanm5FxZpnQk&#34;,&#xA;      description: &#34;payment&#34;,&#xA;      authorization_id: authorizationId,&#xA;    };&#xA;&#xA;    const responseCreateResponse = await plaidClient.transferCreate(&#xA;      transferCreateRequest&#xA;    );&#xA;&#xA;    const transfer = responseCreateResponse.data.transfer;&#xA;    return parseStringify(transfer);&#xA;  } catch (error) {&#xA;    console.error(&#xA;      &#34;An error occurred while creating transfer authorization:&#34;,&#xA;      error&#xA;    );&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;BankTabItem.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import { useSearchParams, useRouter } from &#34;next/navigation&#34;;&#xA;&#xA;import { cn, formUrlQuery } from &#34;@/lib/utils&#34;;&#xA;&#xA;export const BankTabItem = ({ account, appwriteItemId }: BankTabItemProps) =&amp;gt; {&#xA;  const searchParams = useSearchParams();&#xA;  const router = useRouter();&#xA;  const isActive = appwriteItemId === account?.appwriteItemId;&#xA;&#xA;  const handleBankChange = () =&amp;gt; {&#xA;    const newUrl = formUrlQuery({&#xA;      params: searchParams.toString(),&#xA;      key: &#34;id&#34;,&#xA;      value: account?.appwriteItemId,&#xA;    });&#xA;    router.push(newUrl, { scroll: false });&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;div&#xA;      onClick={handleBankChange}&#xA;      className={cn(`banktab-item`, {&#xA;        &#34; border-blue-600&#34;: isActive,&#xA;      })}&#xA;    &amp;gt;&#xA;      &amp;lt;p&#xA;        className={cn(`text-16 line-clamp-1 flex-1 font-medium text-gray-500`, {&#xA;          &#34; text-blue-600&#34;: isActive,&#xA;        })}&#xA;      &amp;gt;&#xA;        {account.name}&#xA;      &amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;BankInfo.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import Image from &#34;next/image&#34;;&#xA;import { useSearchParams, useRouter } from &#34;next/navigation&#34;;&#xA;&#xA;import {&#xA;  cn,&#xA;  formUrlQuery,&#xA;  formatAmount,&#xA;  getAccountTypeColors,&#xA;} from &#34;@/lib/utils&#34;;&#xA;&#xA;const BankInfo = ({ account, appwriteItemId, type }: BankInfoProps) =&amp;gt; {&#xA;  const router = useRouter();&#xA;  const searchParams = useSearchParams();&#xA;&#xA;  const isActive = appwriteItemId === account?.appwriteItemId;&#xA;&#xA;  const handleBankChange = () =&amp;gt; {&#xA;    const newUrl = formUrlQuery({&#xA;      params: searchParams.toString(),&#xA;      key: &#34;id&#34;,&#xA;      value: account?.appwriteItemId,&#xA;    });&#xA;    router.push(newUrl, { scroll: false });&#xA;  };&#xA;&#xA;  const colors = getAccountTypeColors(account?.type as AccountTypes);&#xA;&#xA;  return (&#xA;    &amp;lt;div&#xA;      onClick={handleBankChange}&#xA;      className={cn(`bank-info ${colors.bg}`, {&#xA;        &#34;shadow-sm border-blue-700&#34;: type === &#34;card&#34; &amp;amp;&amp;amp; isActive,&#xA;        &#34;rounded-xl&#34;: type === &#34;card&#34;,&#xA;        &#34;hover:shadow-sm cursor-pointer&#34;: type === &#34;card&#34;,&#xA;      })}&#xA;    &amp;gt;&#xA;      &amp;lt;figure&#xA;        className={`flex-center h-fit rounded-full bg-blue-100 ${colors.lightBg}`}&#xA;      &amp;gt;&#xA;        &amp;lt;Image&#xA;          src=&#34;/icons/connect-bank.svg&#34;&#xA;          width={20}&#xA;          height={20}&#xA;          alt={account.subtype}&#xA;          className=&#34;m-2 min-w-5&#34;&#xA;        /&amp;gt;&#xA;      &amp;lt;/figure&amp;gt;&#xA;      &amp;lt;div className=&#34;flex w-full flex-1 flex-col justify-center gap-1&#34;&amp;gt;&#xA;        &amp;lt;div className=&#34;bank-info_content&#34;&amp;gt;&#xA;          &amp;lt;h2&#xA;            className={`text-16 line-clamp-1 flex-1 font-bold text-blue-900 ${colors.title}`}&#xA;          &amp;gt;&#xA;            {account.name}&#xA;          &amp;lt;/h2&amp;gt;&#xA;          {type === &#34;full&#34; &amp;amp;&amp;amp; (&#xA;            &amp;lt;p&#xA;              className={`text-12 rounded-full px-3 py-1 font-medium text-blue-700 ${colors.subText} ${colors.lightBg}`}&#xA;            &amp;gt;&#xA;              {account.subtype}&#xA;            &amp;lt;/p&amp;gt;&#xA;          )}&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;p className={`text-16 font-medium text-blue-700 ${colors.subText}`}&amp;gt;&#xA;          {formatAmount(account.currentBalance)}&#xA;        &amp;lt;/p&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default BankInfo;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;Copy.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;import { useState } from &#34;react&#34;;&#xA;&#xA;import { Button } from &#34;./ui/button&#34;;&#xA;&#xA;const Copy = ({ title }: { title: string }) =&amp;gt; {&#xA;  const [hasCopied, setHasCopied] = useState(false);&#xA;&#xA;  const copyToClipboard = () =&amp;gt; {&#xA;    navigator.clipboard.writeText(title);&#xA;    setHasCopied(true);&#xA;&#xA;    setTimeout(() =&amp;gt; {&#xA;      setHasCopied(false);&#xA;    }, 2000);&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;Button&#xA;      data-state=&#34;closed&#34;&#xA;      className=&#34;mt-3 flex max-w-[320px] gap-4&#34;&#xA;      variant=&#34;secondary&#34;&#xA;      onClick={copyToClipboard}&#xA;    &amp;gt;&#xA;      &amp;lt;p className=&#34;line-clamp-1 w-full max-w-full text-xs font-medium text-black-2&#34;&amp;gt;&#xA;        {title}&#xA;      &amp;lt;/p&amp;gt;&#xA;&#xA;      {!hasCopied ? (&#xA;        &amp;lt;svg&#xA;          xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;          width=&#34;24&#34;&#xA;          height=&#34;24&#34;&#xA;          viewBox=&#34;0 0 24 24&#34;&#xA;          fill=&#34;none&#34;&#xA;          stroke=&#34;currentColor&#34;&#xA;          stroke-width=&#34;2&#34;&#xA;          stroke-linecap=&#34;round&#34;&#xA;          stroke-linejoin=&#34;round&#34;&#xA;          className=&#34;mr-2 size-4&#34;&#xA;        &amp;gt;&#xA;          &amp;lt;rect width=&#34;14&#34; height=&#34;14&#34; x=&#34;8&#34; y=&#34;8&#34; rx=&#34;2&#34; ry=&#34;2&#34;&amp;gt;&amp;lt;/rect&amp;gt;&#xA;          &amp;lt;path d=&#34;M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2&#34;&amp;gt;&amp;lt;/path&amp;gt;&#xA;        &amp;lt;/svg&amp;gt;&#xA;      ) : (&#xA;        &amp;lt;svg&#xA;          xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;          width=&#34;24&#34;&#xA;          height=&#34;24&#34;&#xA;          viewBox=&#34;0 0 24 24&#34;&#xA;          fill=&#34;none&#34;&#xA;          stroke=&#34;currentColor&#34;&#xA;          stroke-width=&#34;2&#34;&#xA;          stroke-linecap=&#34;round&#34;&#xA;          stroke-linejoin=&#34;round&#34;&#xA;          className=&#34;mr-2 size-4&#34;&#xA;        &amp;gt;&#xA;          &amp;lt;polyline points=&#34;20 6 9 17 4 12&#34;&amp;gt;&amp;lt;/polyline&amp;gt;&#xA;        &amp;lt;/svg&amp;gt;&#xA;      )}&#xA;    &amp;lt;/Button&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default Copy;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;PaymentTransferForm.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import { zodResolver } from &#34;@hookform/resolvers/zod&#34;;&#xA;import { Loader2 } from &#34;lucide-react&#34;;&#xA;import { useRouter } from &#34;next/navigation&#34;;&#xA;import { useState } from &#34;react&#34;;&#xA;import { useForm } from &#34;react-hook-form&#34;;&#xA;import * as z from &#34;zod&#34;;&#xA;&#xA;import { createTransfer } from &#34;@/lib/actions/dwolla.actions&#34;;&#xA;import { createTransaction } from &#34;@/lib/actions/transaction.actions&#34;;&#xA;import { getBank, getBankByAccountId } from &#34;@/lib/actions/user.actions&#34;;&#xA;import { decryptId } from &#34;@/lib/utils&#34;;&#xA;&#xA;import { BankDropdown } from &#34;./bank/BankDropdown&#34;;&#xA;import { Button } from &#34;./ui/button&#34;;&#xA;import {&#xA;  Form,&#xA;  FormControl,&#xA;  FormDescription,&#xA;  FormField,&#xA;  FormItem,&#xA;  FormLabel,&#xA;  FormMessage,&#xA;} from &#34;./ui/form&#34;;&#xA;import { Input } from &#34;./ui/input&#34;;&#xA;import { Textarea } from &#34;./ui/textarea&#34;;&#xA;&#xA;const formSchema = z.object({&#xA;  email: z.string().email(&#34;Invalid email address&#34;),&#xA;  name: z.string().min(4, &#34;Transfer note is too short&#34;),&#xA;  amount: z.string().min(4, &#34;Amount is too short&#34;),&#xA;  senderBank: z.string().min(4, &#34;Please select a valid bank account&#34;),&#xA;  sharableId: z.string().min(8, &#34;Please select a valid sharable Id&#34;),&#xA;});&#xA;&#xA;const PaymentTransferForm = ({ accounts }: PaymentTransferFormProps) =&amp;gt; {&#xA;  const router = useRouter();&#xA;  const [isLoading, setIsLoading] = useState(false);&#xA;&#xA;  const form = useForm&amp;lt;z.infer&amp;lt;typeof formSchema&amp;gt;&amp;gt;({&#xA;    resolver: zodResolver(formSchema),&#xA;    defaultValues: {&#xA;      name: &#34;&#34;,&#xA;      email: &#34;&#34;,&#xA;      amount: &#34;&#34;,&#xA;      senderBank: &#34;&#34;,&#xA;      sharableId: &#34;&#34;,&#xA;    },&#xA;  });&#xA;&#xA;  const submit = async (data: z.infer&amp;lt;typeof formSchema&amp;gt;) =&amp;gt; {&#xA;    setIsLoading(true);&#xA;&#xA;    try {&#xA;      const receiverAccountId = decryptId(data.sharableId);&#xA;      const receiverBank = await getBankByAccountId({&#xA;        accountId: receiverAccountId,&#xA;      });&#xA;      const senderBank = await getBank({ documentId: data.senderBank });&#xA;&#xA;      const transferParams = {&#xA;        sourceFundingSourceUrl: senderBank.fundingSourceUrl,&#xA;        destinationFundingSourceUrl: receiverBank.fundingSourceUrl,&#xA;        amount: data.amount,&#xA;      };&#xA;      // create transfer&#xA;      const transfer = await createTransfer(transferParams);&#xA;&#xA;      // create transfer transaction&#xA;      if (transfer) {&#xA;        const transaction = {&#xA;          name: data.name,&#xA;          amount: data.amount,&#xA;          senderId: senderBank.userId.$id,&#xA;          senderBankId: senderBank.$id,&#xA;          receiverId: receiverBank.userId.$id,&#xA;          receiverBankId: receiverBank.$id,&#xA;          email: data.email,&#xA;        };&#xA;&#xA;        const newTransaction = await createTransaction(transaction);&#xA;&#xA;        if (newTransaction) {&#xA;          form.reset();&#xA;          router.push(&#34;/&#34;);&#xA;        }&#xA;      }&#xA;    } catch (error) {&#xA;      console.error(&#34;Submitting create transfer request failed: &#34;, error);&#xA;    }&#xA;&#xA;    setIsLoading(false);&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;Form {...form}&amp;gt;&#xA;      &amp;lt;form onSubmit={form.handleSubmit(submit)} className=&#34;flex flex-col&#34;&amp;gt;&#xA;        &amp;lt;FormField&#xA;          control={form.control}&#xA;          name=&#34;senderBank&#34;&#xA;          render={() =&amp;gt; (&#xA;            &amp;lt;FormItem className=&#34;border-t border-gray-200&#34;&amp;gt;&#xA;              &amp;lt;div className=&#34;payment-transfer_form-item pb-6 pt-5&#34;&amp;gt;&#xA;                &amp;lt;div className=&#34;payment-transfer_form-content&#34;&amp;gt;&#xA;                  &amp;lt;FormLabel className=&#34;text-14 font-medium text-gray-700&#34;&amp;gt;&#xA;                    Select Source Bank&#xA;                  &amp;lt;/FormLabel&amp;gt;&#xA;                  &amp;lt;FormDescription className=&#34;text-12 font-normal text-gray-600&#34;&amp;gt;&#xA;                    Select the bank account you want to transfer funds from&#xA;                  &amp;lt;/FormDescription&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;                &amp;lt;div className=&#34;flex w-full flex-col&#34;&amp;gt;&#xA;                  &amp;lt;FormControl&amp;gt;&#xA;                    &amp;lt;BankDropdown&#xA;                      accounts={accounts}&#xA;                      setValue={form.setValue}&#xA;                      otherStyles=&#34;!w-full&#34;&#xA;                    /&amp;gt;&#xA;                  &amp;lt;/FormControl&amp;gt;&#xA;                  &amp;lt;FormMessage className=&#34;text-12 text-red-500&#34; /&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;              &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/FormItem&amp;gt;&#xA;          )}&#xA;        /&amp;gt;&#xA;&#xA;        &amp;lt;FormField&#xA;          control={form.control}&#xA;          name=&#34;name&#34;&#xA;          render={({ field }) =&amp;gt; (&#xA;            &amp;lt;FormItem className=&#34;border-t border-gray-200&#34;&amp;gt;&#xA;              &amp;lt;div className=&#34;payment-transfer_form-item pb-6 pt-5&#34;&amp;gt;&#xA;                &amp;lt;div className=&#34;payment-transfer_form-content&#34;&amp;gt;&#xA;                  &amp;lt;FormLabel className=&#34;text-14 font-medium text-gray-700&#34;&amp;gt;&#xA;                    Transfer Note (Optional)&#xA;                  &amp;lt;/FormLabel&amp;gt;&#xA;                  &amp;lt;FormDescription className=&#34;text-12 font-normal text-gray-600&#34;&amp;gt;&#xA;                    Please provide any additional information or instructions&#xA;                    related to the transfer&#xA;                  &amp;lt;/FormDescription&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;                &amp;lt;div className=&#34;flex w-full flex-col&#34;&amp;gt;&#xA;                  &amp;lt;FormControl&amp;gt;&#xA;                    &amp;lt;Textarea&#xA;                      placeholder=&#34;Write a short note here&#34;&#xA;                      className=&#34;input-class&#34;&#xA;                      {...field}&#xA;                    /&amp;gt;&#xA;                  &amp;lt;/FormControl&amp;gt;&#xA;                  &amp;lt;FormMessage className=&#34;text-12 text-red-500&#34; /&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;              &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/FormItem&amp;gt;&#xA;          )}&#xA;        /&amp;gt;&#xA;&#xA;        &amp;lt;div className=&#34;payment-transfer_form-details&#34;&amp;gt;&#xA;          &amp;lt;h2 className=&#34;text-18 font-semibold text-gray-900&#34;&amp;gt;&#xA;            Bank account details&#xA;          &amp;lt;/h2&amp;gt;&#xA;          &amp;lt;p className=&#34;text-16 font-normal text-gray-600&#34;&amp;gt;&#xA;            Enter the bank account details of the recipient&#xA;          &amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;FormField&#xA;          control={form.control}&#xA;          name=&#34;email&#34;&#xA;          render={({ field }) =&amp;gt; (&#xA;            &amp;lt;FormItem className=&#34;border-t border-gray-200&#34;&amp;gt;&#xA;              &amp;lt;div className=&#34;payment-transfer_form-item py-5&#34;&amp;gt;&#xA;                &amp;lt;FormLabel className=&#34;text-14 w-full max-w-[280px] font-medium text-gray-700&#34;&amp;gt;&#xA;                  Recipient&amp;amp;apos;s Email Address&#xA;                &amp;lt;/FormLabel&amp;gt;&#xA;                &amp;lt;div className=&#34;flex w-full flex-col&#34;&amp;gt;&#xA;                  &amp;lt;FormControl&amp;gt;&#xA;                    &amp;lt;Input&#xA;                      placeholder=&#34;ex: johndoe@gmail.com&#34;&#xA;                      className=&#34;input-class&#34;&#xA;                      {...field}&#xA;                    /&amp;gt;&#xA;                  &amp;lt;/FormControl&amp;gt;&#xA;                  &amp;lt;FormMessage className=&#34;text-12 text-red-500&#34; /&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;              &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/FormItem&amp;gt;&#xA;          )}&#xA;        /&amp;gt;&#xA;&#xA;        &amp;lt;FormField&#xA;          control={form.control}&#xA;          name=&#34;sharableId&#34;&#xA;          render={({ field }) =&amp;gt; (&#xA;            &amp;lt;FormItem className=&#34;border-t border-gray-200&#34;&amp;gt;&#xA;              &amp;lt;div className=&#34;payment-transfer_form-item pb-5 pt-6&#34;&amp;gt;&#xA;                &amp;lt;FormLabel className=&#34;text-14 w-full max-w-[280px] font-medium text-gray-700&#34;&amp;gt;&#xA;                  Receiver&amp;amp;apos;s Plaid Sharable Id&#xA;                &amp;lt;/FormLabel&amp;gt;&#xA;                &amp;lt;div className=&#34;flex w-full flex-col&#34;&amp;gt;&#xA;                  &amp;lt;FormControl&amp;gt;&#xA;                    &amp;lt;Input&#xA;                      placeholder=&#34;Enter the public account number&#34;&#xA;                      className=&#34;input-class&#34;&#xA;                      {...field}&#xA;                    /&amp;gt;&#xA;                  &amp;lt;/FormControl&amp;gt;&#xA;                  &amp;lt;FormMessage className=&#34;text-12 text-red-500&#34; /&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;              &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/FormItem&amp;gt;&#xA;          )}&#xA;        /&amp;gt;&#xA;&#xA;        &amp;lt;FormField&#xA;          control={form.control}&#xA;          name=&#34;amount&#34;&#xA;          render={({ field }) =&amp;gt; (&#xA;            &amp;lt;FormItem className=&#34;border-y border-gray-200&#34;&amp;gt;&#xA;              &amp;lt;div className=&#34;payment-transfer_form-item py-5&#34;&amp;gt;&#xA;                &amp;lt;FormLabel className=&#34;text-14 w-full max-w-[280px] font-medium text-gray-700&#34;&amp;gt;&#xA;                  Amount&#xA;                &amp;lt;/FormLabel&amp;gt;&#xA;                &amp;lt;div className=&#34;flex w-full flex-col&#34;&amp;gt;&#xA;                  &amp;lt;FormControl&amp;gt;&#xA;                    &amp;lt;Input&#xA;                      placeholder=&#34;ex: 5.00&#34;&#xA;                      className=&#34;input-class&#34;&#xA;                      {...field}&#xA;                    /&amp;gt;&#xA;                  &amp;lt;/FormControl&amp;gt;&#xA;                  &amp;lt;FormMessage className=&#34;text-12 text-red-500&#34; /&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;              &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/FormItem&amp;gt;&#xA;          )}&#xA;        /&amp;gt;&#xA;&#xA;        &amp;lt;div className=&#34;payment-transfer_btn-box&#34;&amp;gt;&#xA;          &amp;lt;Button type=&#34;submit&#34; className=&#34;payment-transfer_btn&#34;&amp;gt;&#xA;            {isLoading ? (&#xA;              &amp;lt;&amp;gt;&#xA;                &amp;lt;Loader2 size={20} className=&#34;animate-spin&#34; /&amp;gt; &amp;amp;nbsp; Sending...&#xA;              &amp;lt;/&amp;gt;&#xA;            ) : (&#xA;              &#34;Transfer Funds&#34;&#xA;            )}&#xA;          &amp;lt;/Button&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/form&amp;gt;&#xA;    &amp;lt;/Form&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default PaymentTransferForm;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;Missing from the video (top right on the transaction list page) BankDropdown.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import Image from &#34;next/image&#34;;&#xA;import { useSearchParams, useRouter } from &#34;next/navigation&#34;;&#xA;import { useState } from &#34;react&#34;;&#xA;&#xA;import {&#xA;  Select,&#xA;  SelectContent,&#xA;  SelectGroup,&#xA;  SelectItem,&#xA;  SelectLabel,&#xA;  SelectTrigger,&#xA;} from &#34;@/components/ui/select&#34;;&#xA;import { formUrlQuery, formatAmount } from &#34;@/lib/utils&#34;;&#xA;&#xA;export const BankDropdown = ({&#xA;  accounts = [],&#xA;  setValue,&#xA;  otherStyles,&#xA;}: BankDropdownProps) =&amp;gt; {&#xA;  const searchParams = useSearchParams();&#xA;  const router = useRouter();&#xA;  const [selected, setSeclected] = useState(accounts[0]);&#xA;&#xA;  const handleBankChange = (id: string) =&amp;gt; {&#xA;    const account = accounts.find((account) =&amp;gt; account.appwriteItemId === id)!;&#xA;&#xA;    setSeclected(account);&#xA;    const newUrl = formUrlQuery({&#xA;      params: searchParams.toString(),&#xA;      key: &#34;id&#34;,&#xA;      value: id,&#xA;    });&#xA;    router.push(newUrl, { scroll: false });&#xA;&#xA;    if (setValue) {&#xA;      setValue(&#34;senderBank&#34;, id);&#xA;    }&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;Select&#xA;      defaultValue={selected.id}&#xA;      onValueChange={(value) =&amp;gt; handleBankChange(value)}&#xA;    &amp;gt;&#xA;      &amp;lt;SelectTrigger&#xA;        className={`flex w-full gap-3 md:w-[300px] ${otherStyles}`}&#xA;      &amp;gt;&#xA;        &amp;lt;Image&#xA;          src=&#34;icons/credit-card.svg&#34;&#xA;          width={20}&#xA;          height={20}&#xA;          alt=&#34;account&#34;&#xA;        /&amp;gt;&#xA;        &amp;lt;p className=&#34;line-clamp-1 w-full text-left&#34;&amp;gt;{selected.name}&amp;lt;/p&amp;gt;&#xA;      &amp;lt;/SelectTrigger&amp;gt;&#xA;      &amp;lt;SelectContent&#xA;        className={`w-full md:w-[300px] ${otherStyles}`}&#xA;        align=&#34;end&#34;&#xA;      &amp;gt;&#xA;        &amp;lt;SelectGroup&amp;gt;&#xA;          &amp;lt;SelectLabel className=&#34;py-2 font-normal text-gray-500&#34;&amp;gt;&#xA;            Select a bank to display&#xA;          &amp;lt;/SelectLabel&amp;gt;&#xA;          {accounts.map((account: Account) =&amp;gt; (&#xA;            &amp;lt;SelectItem&#xA;              key={account.id}&#xA;              value={account.appwriteItemId}&#xA;              className=&#34;cursor-pointer border-t&#34;&#xA;            &amp;gt;&#xA;              &amp;lt;div className=&#34;flex flex-col &#34;&amp;gt;&#xA;                &amp;lt;p className=&#34;text-16 font-medium&#34;&amp;gt;{account.name}&amp;lt;/p&amp;gt;&#xA;                &amp;lt;p className=&#34;text-14 font-medium text-blue-600&#34;&amp;gt;&#xA;                  {formatAmount(account.currentBalance)}&#xA;                &amp;lt;/p&amp;gt;&#xA;              &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/SelectItem&amp;gt;&#xA;          ))}&#xA;        &amp;lt;/SelectGroup&amp;gt;&#xA;      &amp;lt;/SelectContent&amp;gt;&#xA;    &amp;lt;/Select&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;Pagination.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use client&#34;;&#xA;&#xA;import Image from &#34;next/image&#34;;&#xA;import { useRouter, useSearchParams } from &#34;next/navigation&#34;;&#xA;&#xA;import { Button } from &#34;@/components/ui/button&#34;;&#xA;import { formUrlQuery } from &#34;@/lib/utils&#34;;&#xA;&#xA;export const Pagination = ({ page, totalPages }: PaginationProps) =&amp;gt; {&#xA;  const router = useRouter();&#xA;  const searchParams = useSearchParams()!;&#xA;&#xA;  const handleNavigation = (type: &#34;prev&#34; | &#34;next&#34;) =&amp;gt; {&#xA;    const pageNumber = type === &#34;prev&#34; ? page - 1 : page + 1;&#xA;&#xA;    const newUrl = formUrlQuery({&#xA;      params: searchParams.toString(),&#xA;      key: &#34;page&#34;,&#xA;      value: pageNumber.toString(),&#xA;    });&#xA;&#xA;    router.push(newUrl, { scroll: false });&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;div className=&#34;flex justify-between gap-3&#34;&amp;gt;&#xA;      &amp;lt;Button&#xA;        size=&#34;lg&#34;&#xA;        variant=&#34;ghost&#34;&#xA;        className=&#34;p-0 hover:bg-transparent&#34;&#xA;        onClick={() =&amp;gt; handleNavigation(&#34;prev&#34;)}&#xA;        disabled={Number(page) &amp;lt;= 1}&#xA;      &amp;gt;&#xA;        &amp;lt;Image&#xA;          src=&#34;/icons/arrow-left.svg&#34;&#xA;          alt=&#34;arrow&#34;&#xA;          width={20}&#xA;          height={20}&#xA;          className=&#34;mr-2&#34;&#xA;        /&amp;gt;&#xA;        Prev&#xA;      &amp;lt;/Button&amp;gt;&#xA;      &amp;lt;p className=&#34;text-14 flex items-center px-2&#34;&amp;gt;&#xA;        {page} / {totalPages}&#xA;      &amp;lt;/p&amp;gt;&#xA;      &amp;lt;Button&#xA;        size=&#34;lg&#34;&#xA;        variant=&#34;ghost&#34;&#xA;        className=&#34;p-0 hover:bg-transparent&#34;&#xA;        onClick={() =&amp;gt; handleNavigation(&#34;next&#34;)}&#xA;        disabled={Number(page) &amp;gt;= totalPages}&#xA;      &amp;gt;&#xA;        Next&#xA;        &amp;lt;Image&#xA;          src=&#34;/icons/arrow-left.svg&#34;&#xA;          alt=&#34;arrow&#34;&#xA;          width={20}&#xA;          height={20}&#xA;          className=&#34;ml-2 -scale-x-100&#34;&#xA;        /&amp;gt;&#xA;      &amp;lt;/Button&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;Category.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import Image from &#34;next/image&#34;;&#xA;&#xA;import { topCategoryStyles } from &#34;@/constants&#34;;&#xA;import { cn } from &#34;@/lib/utils&#34;;&#xA;&#xA;import { Progress } from &#34;./ui/progress&#34;;&#xA;&#xA;export const Category = ({ category }: CategoryProps) =&amp;gt; {&#xA;  const {&#xA;    bg,&#xA;    circleBg,&#xA;    text: { main, count },&#xA;    progress: { bg: progressBg, indicator },&#xA;    icon,&#xA;  } = topCategoryStyles[category.name as keyof typeof topCategoryStyles] ||&#xA;  topCategoryStyles.default;&#xA;&#xA;  return (&#xA;    &amp;lt;div className={cn(&#34;gap-[18px] flex p-4 rounded-xl&#34;, bg)}&amp;gt;&#xA;      &amp;lt;figure className={cn(&#34;flex-center size-10 rounded-full&#34;, circleBg)}&amp;gt;&#xA;        &amp;lt;Image src={icon} width={20} height={20} alt={category.name} /&amp;gt;&#xA;      &amp;lt;/figure&amp;gt;&#xA;      &amp;lt;div className=&#34;flex w-full flex-1 flex-col gap-2&#34;&amp;gt;&#xA;        &amp;lt;div className=&#34;text-14 flex justify-between&#34;&amp;gt;&#xA;          &amp;lt;h2 className={cn(&#34;font-medium&#34;, main)}&amp;gt;{category.name}&amp;lt;/h2&amp;gt;&#xA;          &amp;lt;h3 className={cn(&#34;font-normal&#34;, count)}&amp;gt;{category.count}&amp;lt;/h3&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;Progress&#xA;          value={(category.count / category.totalCount) * 100}&#xA;          className={cn(&#34;h-2 w-full&#34;, progressBg)}&#xA;          indicatorClassName={cn(&#34;h-2 w-full&#34;, indicator)}&#xA;        /&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;links&#34;&gt;üîó Links&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Assets used in the project can be found &lt;a href=&#34;https://drive.google.com/file/d/1TVhdnD97LajGsyaiNa6sDs-ap-z1oerA/view?usp=sharing&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;more&#34;&gt;üöÄ More&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advance your skills with Next.js 14 Pro Course&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enjoyed creating this project? Dive deeper into our PRO courses for a richer learning adventure. They&#39;re packed with detailed explanations, cool features, and exercises to boost your skills. Give it a go!&lt;/p&gt; &#xA;&lt;a href=&#34;https://jsmastery.pro/next14&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/557837ce-f612-4530-ab24-189e75133c71&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accelerate your professional journey with the Expert Training program&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;And if you&#39;re hungry for more than just a course and want to understand how we learn and tackle tech challenges, hop into our personalized masterclass. We cover best practices, different web skills, and offer mentorship to boost your confidence. Let&#39;s learn and grow together!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.jsmastery.pro/masterclass&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/fed352ad-f27b-400d-9b8f-c7fe628acb84&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;&lt;/h1&gt;</summary>
  </entry>
</feed>