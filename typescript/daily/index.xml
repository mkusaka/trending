<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-02T01:46:32Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mqttjs/MQTT.js</title>
    <updated>2023-08-02T01:46:32Z</updated>
    <id>tag:github.com,2023-08-02:/mqttjs/MQTT.js</id>
    <link href="https://github.com/mqttjs/MQTT.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The MQTT client for Node.js and the browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/137ee0e3940c1f01049a30248c70f24dc6e6f829/MQTT.js.png&#34; alt=&#34;mqtt.js&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mqttjs/MQTT.js/workflows/MQTT.js%20CI/badge.svg?sanitize=true&#34; alt=&#34;Github Test Status&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/mqttjs/MQTT.js&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mqttjs/MQTT.js/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mqttjs/MQTT.js/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg?sanitize=true&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mqttjs/MQTT.js/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/mqtt&#34;&gt;&lt;img src=&#34;https://img.shields.io/node/v/mqtt.svg?sanitize=true&#34; alt=&#34;node&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/mqtt.svg?logo=npm&#34; alt=&#34;npm&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/mqtt.svg?sanitize=true&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MQTT.js is a client library for the &lt;a href=&#34;http://mqtt.org/&#34;&gt;MQTT&lt;/a&gt; protocol, written in JavaScript for node.js and the browser.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#notes&#34;&gt;Upgrade notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#install&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#example&#34;&gt;Import Styles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#cli&#34;&gt;Command Line Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#browser&#34;&gt;Browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#qos&#34;&gt;About QoS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#weapp-alipay&#34;&gt;Weapp and Ali support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#sponsor&#34;&gt;Sponsor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MQTT.js is an OPEN Open Source Project, see the &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#contributing&#34;&gt;Contributing&lt;/a&gt; section to find out what this means.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/feross/standard&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/feross/standard/master/badge.svg?sanitize=true&#34; alt=&#34;JavaScript Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;notes&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important notes for existing users&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;v5.0.0&lt;/strong&gt; (07/2023)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Removes support for all end of life node versions (v12 and v14), and now supports node v18 and v20.&lt;/li&gt; &#xA; &lt;li&gt;Completely rewritten in Typescript 🚀.&lt;/li&gt; &#xA; &lt;li&gt;When creating &lt;code&gt;MqttClient&lt;/code&gt; instance &lt;code&gt;new&lt;/code&gt; is now required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;v4.0.0&lt;/strong&gt; (Released 04/2020) removes support for all end of life node versions, and now supports node v12 and v14. It also adds improvements to debug logging, along with some feature additions.&lt;/p&gt; &#xA;&lt;p&gt;As a &lt;strong&gt;breaking change&lt;/strong&gt;, by default a error handler is built into the MQTT.js client, so if any errors are emitted and the user has not created an event handler on the client for errors, the client will not break as a result of unhandled errors. Additionally, typical TLS errors like &lt;code&gt;ECONNREFUSED&lt;/code&gt;, &lt;code&gt;ECONNRESET&lt;/code&gt; have been added to a list of TLS errors that will be emitted from the MQTT.js client, and so can be handled as connection errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;v3.0.0&lt;/strong&gt; adds support for MQTT 5, support for node v10.x, and many fixes to improve reliability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; MQTT v5 support is experimental as it has not been implemented by brokers yet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;v2.0.0&lt;/strong&gt; removes support for node v0.8, v0.10 and v0.12, and it is 3x faster in sending packets. It also removes all the deprecated functionality in v1.0.0, mainly &lt;code&gt;mqtt.createConnection&lt;/code&gt; and &lt;code&gt;mqtt.Server&lt;/code&gt;. From v2.0.0, subscriptions are restored upon reconnection if &lt;code&gt;clean: true&lt;/code&gt;. v1.x.x is now in &lt;em&gt;LTS&lt;/em&gt;, and it will keep being supported as long as there are v0.8, v0.10 and v0.12 users.&lt;/p&gt; &#xA;&lt;p&gt;As a &lt;strong&gt;breaking change&lt;/strong&gt;, the &lt;code&gt;encoding&lt;/code&gt; option in the old client is removed, and now everything is UTF-8 with the exception of the &lt;code&gt;password&lt;/code&gt; in the CONNECT message and &lt;code&gt;payload&lt;/code&gt; in the PUBLISH message, which are &lt;code&gt;Buffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another &lt;strong&gt;breaking change&lt;/strong&gt; is that MQTT.js now defaults to MQTT v3.1.1, so to support old brokers, please read the &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#client&#34;&gt;client options doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;v1.0.0&lt;/strong&gt; improves the overall architecture of the project, which is now split into three components: MQTT.js keeps the Client, &lt;a href=&#34;http://npm.im/mqtt-connection&#34;&gt;mqtt-connection&lt;/a&gt; includes the barebone Connection code for server-side usage, and &lt;a href=&#34;http://npm.im/mqtt-packet&#34;&gt;mqtt-packet&lt;/a&gt; includes the protocol parser and generator. The new Client improves performance by a 30% factor, embeds Websocket support (&lt;a href=&#34;http://npm.im/mows&#34;&gt;MOWS&lt;/a&gt; is now deprecated), and it has a better support for QoS 1 and 2. The previous API is still supported but deprecated, as such, it is not documented in this README.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;install&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install mqtt --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;For the sake of simplicity, let&#39;s put the subscriber and the publisher in the same file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const mqtt = require(&#34;mqtt&#34;);&#xA;const client = mqtt.connect(&#34;mqtt://test.mosquitto.org&#34;);&#xA;&#xA;client.on(&#34;connect&#34;, () =&amp;gt; {&#xA;  client.subscribe(&#34;presence&#34;, (err) =&amp;gt; {&#xA;    if (!err) {&#xA;      client.publish(&#34;presence&#34;, &#34;Hello mqtt&#34;);&#xA;    }&#xA;  });&#xA;});&#xA;&#xA;client.on(&#34;message&#34;, (topic, message) =&amp;gt; {&#xA;  // message is Buffer&#xA;  console.log(message.toString());&#xA;  client.end();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Hello mqtt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run your own MQTT broker, you can use &lt;a href=&#34;http://mosquitto.org&#34;&gt;Mosquitto&lt;/a&gt; or &lt;a href=&#34;https://github.com/moscajs/aedes-cli&#34;&gt;Aedes-cli&lt;/a&gt;, and launch it.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a test instance: test.mosquitto.org.&lt;/p&gt; &#xA;&lt;p&gt;If you do not want to install a separate broker, you can try using the &lt;a href=&#34;https://github.com/moscajs/aedes&#34;&gt;Aedes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;import_styles&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Import styles&lt;/h2&gt; &#xA;&lt;h3&gt;CommonJS (Require)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const mqtt = require(&#34;mqtt&#34;)  // require mqtt&#xA;const client = mqtt.connect(&#34;test.mosquitto.org&#34;)  // create a client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ES6 Modules (Import)&lt;/h3&gt; &#xA;&lt;h4&gt;Aliased wildcard import&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import * as mqtt from &#34;mqtt&#34;; // import everything inside the mqtt module and give it the namespace &#34;mqtt&#34;&#xA;let client = mqtt.connect(&#34;mqtt://test.mosquitto.org&#34;); // create a client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Importing individual components&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { connect } from &#34;mqtt&#34;; // import connect from mqtt&#xA;let client = connect(&#34;mqtt://test.mosquitto.org&#34;); // create a client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;cli&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Tools&lt;/h2&gt; &#xA;&lt;p&gt;MQTT.js bundles a command to interact with a broker. In order to have it available on your path, you should install MQTT.js globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install mqtt -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, on one terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mqtt sub -t &#39;hello&#39; -h &#39;test.mosquitto.org&#39; -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On another&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mqtt pub -t &#39;hello&#39; -h &#39;test.mosquitto.org&#39; -m &#39;from MQTT.js&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;mqtt help &amp;lt;command&amp;gt;&lt;/code&gt; for the command help.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;debug&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debug Logs&lt;/h2&gt; &#xA;&lt;p&gt;MQTT.js uses the &lt;a href=&#34;https://www.npmjs.com/package/debug#cmd&#34;&gt;debug&lt;/a&gt; package for debugging purposes. To enable debug logs, add the following environment variable on runtime :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps&#34;&gt;# (example using PowerShell, the VS Code default)&#xA;$env:DEBUG=&#39;mqttjs*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reconnecting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Reconnection&lt;/h2&gt; &#xA;&lt;p&gt;An important part of any websocket connection is what to do when a connection drops off and the client needs to reconnect. MQTT has built-in reconnection support that can be configured to behave in ways that suit the application.&lt;/p&gt; &#xA;&lt;h4&gt;Refresh Authentication Options / Signed Urls with &lt;code&gt;transformWsUrl&lt;/code&gt; (Websocket Only)&lt;/h4&gt; &#xA;&lt;p&gt;When an mqtt connection drops and needs to reconnect, it&#39;s common to require that any authentication associated with the connection is kept current with the underlying auth mechanism. For instance some applications may pass an auth token with connection options on the initial connection, while other cloud services may require a url be signed with each connection.&lt;/p&gt; &#xA;&lt;p&gt;By the time the reconnect happens in the application lifecycle, the original auth data may have expired.&lt;/p&gt; &#xA;&lt;p&gt;To address this we can use a hook called &lt;code&gt;transformWsUrl&lt;/code&gt; to manipulate either of the connection url or the client options at the time of a reconnect.&lt;/p&gt; &#xA;&lt;p&gt;Example (update clientId &amp;amp; username on each reconnect):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    const transformWsUrl = (url, options, client) =&amp;gt; {&#xA;      client.options.username = `token=${this.get_current_auth_token()}`;&#xA;      client.options.clientId = `${this.get_updated_clientId()}`;&#xA;&#xA;      return `${this.get_signed_cloud_url(url)}`;&#xA;    }&#xA;&#xA;    const connection = await mqtt.connectAsync(&amp;lt;wss url&amp;gt;, {&#xA;      ...,&#xA;      transformWsUrl: transformUrl,&#xA;    });&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now every time a new WebSocket connection is opened (hopefully not too often), we will get a fresh signed url or fresh auth token data.&lt;/p&gt; &#xA;&lt;p&gt;Note: Currently this hook does &lt;em&gt;not&lt;/em&gt; support promises, meaning that in order to use the latest auth token, you must have some outside mechanism running that handles application-level authentication refreshing so that the websocket connection can simply grab the latest valid token or signed url.&lt;/p&gt; &#xA;&lt;h4&gt;Enabling Reconnection with &lt;code&gt;reconnectPeriod&lt;/code&gt; option&lt;/h4&gt; &#xA;&lt;p&gt;To ensure that the mqtt client automatically tries to reconnect when the connection is dropped, you must set the client option &lt;code&gt;reconnectPeriod&lt;/code&gt; to a value greater than 0. A value of 0 will disable reconnection and then terminate the final connection when it drops.&lt;/p&gt; &#xA;&lt;p&gt;The default value is 1000 ms which means it will try to reconnect 1 second after losing the connection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;topicalias&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Topic Alias Management&lt;/h2&gt; &#xA;&lt;h3&gt;Enabling automatic Topic Alias using&lt;/h3&gt; &#xA;&lt;p&gt;If the client sets the option &lt;code&gt;autoUseTopicAlias:true&lt;/code&gt; then MQTT.js uses existing topic alias automatically.&lt;/p&gt; &#xA;&lt;p&gt;example scenario:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. PUBLISH topic:&#39;t1&#39;, ta:1                   (register)&#xA;2. PUBLISH topic:&#39;t1&#39;       -&amp;gt; topic:&#39;&#39;, ta:1 (auto use existing map entry)&#xA;3. PUBLISH topic:&#39;t2&#39;, ta:1                   (register overwrite)&#xA;4. PUBLISH topic:&#39;t2&#39;       -&amp;gt; topic:&#39;&#39;, ta:1 (auto use existing map entry based on the receent map)&#xA;5. PUBLISH topic:&#39;t1&#39;                         (t1 is no longer mapped to ta:1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User doesn&#39;t need to manage which topic is mapped to which topic alias. If the user want to register topic alias, then publish topic with topic alias. If the user want to use topic alias, then publish topic without topic alias. If there is a mapped topic alias then added it as a property and update the topic to empty string.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling automatic Topic Alias assign&lt;/h3&gt; &#xA;&lt;p&gt;If the client sets the option &lt;code&gt;autoAssignTopicAlias:true&lt;/code&gt; then MQTT.js uses existing topic alias automatically. If no topic alias exists, then assign a new vacant topic alias automatically. If topic alias is fully used, then LRU(Least Recently Used) topic-alias entry is overwritten.&lt;/p&gt; &#xA;&lt;p&gt;example scenario:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;The broker returns CONNACK (TopicAliasMaximum:3)&#xA;1. PUBLISH topic:&#39;t1&#39; -&amp;gt; &#39;t1&#39;, ta:1 (auto assign t1:1 and register)&#xA;2. PUBLISH topic:&#39;t1&#39; -&amp;gt; &#39;&#39;  , ta:1 (auto use existing map entry)&#xA;3. PUBLISH topic:&#39;t2&#39; -&amp;gt; &#39;t2&#39;, ta:2 (auto assign t1:2 and register. 2 was vacant)&#xA;4. PUBLISH topic:&#39;t3&#39; -&amp;gt; &#39;t3&#39;, ta:3 (auto assign t1:3 and register. 3 was vacant)&#xA;5. PUBLISH topic:&#39;t4&#39; -&amp;gt; &#39;t4&#39;, ta:1 (LRU entry is overwritten)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also user can manually register topic-alias pair using PUBLISH topic:&#39;some&#39;, ta:X. It works well with automatic topic alias assign.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;api&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#connect&#34;&gt;&lt;code&gt;mqtt.connect()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#connect-async&#34;&gt;&lt;code&gt;mqtt.connectAsync()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#client&#34;&gt;&lt;code&gt;mqtt.Client()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#client-connect&#34;&gt;&lt;code&gt;mqtt.Client#connect()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#publish&#34;&gt;&lt;code&gt;mqtt.Client#publish()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#publish-async&#34;&gt;&lt;code&gt;mqtt.Client#publishAsync()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#subscribe&#34;&gt;&lt;code&gt;mqtt.Client#subscribe()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#subscribe-async&#34;&gt;&lt;code&gt;mqtt.Client#subscribeAsync()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#unsubscribe&#34;&gt;&lt;code&gt;mqtt.Client#unsubscribe()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#unsubscribe-async&#34;&gt;&lt;code&gt;mqtt.Client#unsubscribeAsync()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#end&#34;&gt;&lt;code&gt;mqtt.Client#end()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#end-async&#34;&gt;&lt;code&gt;mqtt.Client#endAsync()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#removeOutgoingMessage&#34;&gt;&lt;code&gt;mqtt.Client#removeOutgoingMessage()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#reconnect&#34;&gt;&lt;code&gt;mqtt.Client#reconnect()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#handleMessage&#34;&gt;&lt;code&gt;mqtt.Client#handleMessage()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#connected&#34;&gt;&lt;code&gt;mqtt.Client#connected&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#reconnecting&#34;&gt;&lt;code&gt;mqtt.Client#reconnecting&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#getLastMessageId&#34;&gt;&lt;code&gt;mqtt.Client#getLastMessageId()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#store&#34;&gt;&lt;code&gt;mqtt.Store()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#put&#34;&gt;&lt;code&gt;mqtt.Store#put()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#del&#34;&gt;&lt;code&gt;mqtt.Store#del()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#createStream&#34;&gt;&lt;code&gt;mqtt.Store#createStream()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#close&#34;&gt;&lt;code&gt;mqtt.Store#close()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;connect&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.connect([url], options)&lt;/h3&gt; &#xA;&lt;p&gt;Connects to the broker specified by the given url and options and returns a &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#client&#34;&gt;Client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The URL can be on the following protocols: &#39;mqtt&#39;, &#39;mqtts&#39;, &#39;tcp&#39;, &#39;tls&#39;, &#39;ws&#39;, &#39;wss&#39;, &#39;wxs&#39;, &#39;alis&#39;. The URL can also be an object as returned by &lt;a href=&#34;http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost&#34;&gt;&lt;code&gt;URL.parse()&lt;/code&gt;&lt;/a&gt;, in that case the two objects are merged, i.e. you can pass a single object with both the URL and the connect options.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify a &lt;code&gt;servers&lt;/code&gt; options with content: &lt;code&gt;[{ host: &#39;localhost&#39;, port: 1883 }, ... ]&lt;/code&gt;, in that case that array is iterated at every connect.&lt;/p&gt; &#xA;&lt;p&gt;For all MQTT-related options, see the &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#client&#34;&gt;Client&lt;/a&gt; constructor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;connect-async&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;connectAsync([url], options)&lt;/h3&gt; &#xA;&lt;p&gt;Async &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#connect&#34;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;. Returns a &lt;code&gt;Promise&lt;/code&gt; that resolves to a &lt;code&gt;mqtt.Client&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;client&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client(streamBuilder, options)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Client&lt;/code&gt; class wraps a client connection to an MQTT broker over an arbitrary transport method (TCP, TLS, WebSocket, ecc).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Client&lt;/code&gt; automatically handles the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regular server pings&lt;/li&gt; &#xA; &lt;li&gt;QoS flow&lt;/li&gt; &#xA; &lt;li&gt;Automatic reconnections&lt;/li&gt; &#xA; &lt;li&gt;Start publishing before being connected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The arguments are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;streamBuilder&lt;/code&gt; is a function that returns a subclass of the &lt;code&gt;Stream&lt;/code&gt; class that supports the &lt;code&gt;connect&lt;/code&gt; event. Typically a &lt;code&gt;net.Socket&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; is the client connection options (see: the &lt;a href=&#34;https://github.com/mcollina/mqtt-packet#connect&#34;&gt;connect packet&lt;/a&gt;). Defaults: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;wsOptions&lt;/code&gt;: is the WebSocket connection options. Default is &lt;code&gt;{}&lt;/code&gt;. It&#39;s specific for WebSockets. For possible options have a look at: &lt;a href=&#34;https://github.com/websockets/ws/raw/master/doc/ws.md&#34;&gt;https://github.com/websockets/ws/blob/master/doc/ws.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;keepalive&lt;/code&gt;: &lt;code&gt;60&lt;/code&gt; seconds, set to &lt;code&gt;0&lt;/code&gt; to disable&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;reschedulePings&lt;/code&gt;: reschedule ping messages after sending packets (default &lt;code&gt;true&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;clientId&lt;/code&gt;: &lt;code&gt;&#39;mqttjs_&#39; + Math.random().toString(16).substr(2, 8)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;protocolId&lt;/code&gt;: &lt;code&gt;&#39;MQTT&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;protocolVersion&lt;/code&gt;: &lt;code&gt;4&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;, set to false to receive QoS 1 and 2 messages while offline&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;reconnectPeriod&lt;/code&gt;: &lt;code&gt;1000&lt;/code&gt; milliseconds, interval between two reconnections. Disable auto reconnect by setting to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;connectTimeout&lt;/code&gt;: &lt;code&gt;30 * 1000&lt;/code&gt; milliseconds, time to wait before a CONNACK is received&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;username&lt;/code&gt;: the username required by your broker, if any&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;password&lt;/code&gt;: the password required by your broker, if any&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;incomingStore&lt;/code&gt;: a &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#store&#34;&gt;Store&lt;/a&gt; for the incoming packets&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;outgoingStore&lt;/code&gt;: a &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#store&#34;&gt;Store&lt;/a&gt; for the outgoing packets&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;queueQoSZero&lt;/code&gt;: if connection is broken, queue outgoing QoS zero messages (default &lt;code&gt;true&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;customHandleAcks&lt;/code&gt;: MQTT 5 feature of custom handling puback and pubrec packets. Its callback:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  customHandleAcks: function(topic, message, packet, done) {/*some logic with calling done(error, reasonCode)*/}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;autoUseTopicAlias&lt;/code&gt;: enabling automatic Topic Alias using functionality&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;autoAssignTopicAlias&lt;/code&gt;: enabling automatic Topic Alias assign functionality&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;properties&lt;/code&gt;: properties MQTT 5.0. &lt;code&gt;object&lt;/code&gt; that supports the following properties:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sessionExpiryInterval&lt;/code&gt;: representing the Session Expiry Interval in seconds &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;receiveMaximum&lt;/code&gt;: representing the Receive Maximum value &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;maximumPacketSize&lt;/code&gt;: representing the Maximum Packet Size the Client is willing to accept &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;topicAliasMaximum&lt;/code&gt;: representing the Topic Alias Maximum value indicates the highest value that the Client will accept as a Topic Alias sent by the Server &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;requestResponseInformation&lt;/code&gt;: The Client uses this value to request the Server to return Response Information in the CONNACK &lt;code&gt;boolean&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;requestProblemInformation&lt;/code&gt;: The Client uses this value to indicate whether the Reason String or User Properties are sent in the case of failures &lt;code&gt;boolean&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;userProperties&lt;/code&gt;: The User Property is allowed to appear multiple times to represent multiple name, value pairs &lt;code&gt;object&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;authenticationMethod&lt;/code&gt;: the name of the authentication method used for extended authentication &lt;code&gt;string&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;authenticationData&lt;/code&gt;: Binary Data containing authentication data &lt;code&gt;binary&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;authPacket&lt;/code&gt;: settings for auth packet &lt;code&gt;object&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;will&lt;/code&gt;: a message that will sent by the broker automatically when the client disconnect badly. The format is:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;topic&lt;/code&gt;: the topic to publish&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;payload&lt;/code&gt;: the message to publish&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;qos&lt;/code&gt;: the QoS&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;retain&lt;/code&gt;: the retain flag&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;properties&lt;/code&gt;: properties of will by MQTT 5.0: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;willDelayInterval&lt;/code&gt;: representing the Will Delay Interval in seconds &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;payloadFormatIndicator&lt;/code&gt;: Will Message is UTF-8 Encoded Character Data or not &lt;code&gt;boolean&lt;/code&gt;,&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;messageExpiryInterval&lt;/code&gt;: value is the lifetime of the Will Message in seconds and is sent as the Publication Expiry Interval when the Server publishes the Will Message &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;contentType&lt;/code&gt;: describing the content of the Will Message &lt;code&gt;string&lt;/code&gt;,&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;responseTopic&lt;/code&gt;: String which is used as the Topic Name for a response message &lt;code&gt;string&lt;/code&gt;,&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;correlationData&lt;/code&gt;: The Correlation Data is used by the sender of the Request Message to identify which request the Response Message is for when it is received &lt;code&gt;binary&lt;/code&gt;,&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;userProperties&lt;/code&gt;: The User Property is allowed to appear multiple times to represent multiple name, value pairs &lt;code&gt;object&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;transformWsUrl&lt;/code&gt; : optional &lt;code&gt;(url, options, client) =&amp;gt; url&lt;/code&gt; function For ws/wss protocols only. Can be used to implement signing urls which upon reconnect can have become expired.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;resubscribe&lt;/code&gt; : if connection is broken and reconnects, subscribed topics are automatically subscribed again (default &lt;code&gt;true&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;messageIdProvider&lt;/code&gt;: custom messageId provider. when &lt;code&gt;new UniqueMessageIdProvider()&lt;/code&gt; is set, then non conflict messageId is provided.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;log&lt;/code&gt;: custom log function. Default uses &lt;a href=&#34;https://www.npmjs.com/package/debug&#34;&gt;debug&lt;/a&gt; package.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;manualConnect&lt;/code&gt;: prevents the constructor to call &lt;code&gt;connect&lt;/code&gt;. In this case after the &lt;code&gt;mqtt.connect&lt;/code&gt; is called you should call &lt;code&gt;client.connect&lt;/code&gt; manually.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case mqtts (mqtt over tls) is required, the &lt;code&gt;options&lt;/code&gt; object is passed through to &lt;a href=&#34;http://nodejs.org/api/tls.html#tls_tls_connect_options_callback&#34;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;. If you are using a &lt;strong&gt;self-signed certificate&lt;/strong&gt;, pass the &lt;code&gt;rejectUnauthorized: false&lt;/code&gt; option. Beware that you are exposing yourself to man in the middle attacks, so it is a configuration that is not recommended for production environments.&lt;/p&gt; &#xA;&lt;p&gt;If you are connecting to a broker that supports only MQTT 3.1 (not 3.1.1 compliant), you should pass these additional options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  protocolId: &#39;MQIsdp&#39;,&#xA;  protocolVersion: 3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is confirmed on RabbitMQ 3.2.4, and on Mosquitto &amp;lt; 1.3. Mosquitto version 1.3 and 1.4 works fine without those.&lt;/p&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;connect&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function (connack) {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted on successful (re)connection (i.e. connack rc=0).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;connack&lt;/code&gt; received connack packet. When &lt;code&gt;clean&lt;/code&gt; connection option is &lt;code&gt;false&lt;/code&gt; and server has a previous session for &lt;code&gt;clientId&lt;/code&gt; connection option, then &lt;code&gt;connack.sessionPresent&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;. When that is the case, you may rely on stored session and prefer not to send subscribe commands for the client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;reconnect&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function () {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted when a reconnect starts.&lt;/p&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;close&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function () {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted after a disconnection.&lt;/p&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;disconnect&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function (packet) {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted after receiving disconnect packet from broker. MQTT 5.0 feature.&lt;/p&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;offline&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function () {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted when the client goes offline.&lt;/p&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;error&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function (error) {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted when the client cannot connect (i.e. connack rc != 0) or when a parsing error occurs.&lt;/p&gt; &#xA;&lt;p&gt;The following TLS errors will be emitted as an &lt;code&gt;error&lt;/code&gt; event:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ECONNREFUSED&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ECONNRESET&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EADDRINUSE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ENOTFOUND&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;end&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function () {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted when &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#end&#34;&gt;&lt;code&gt;mqtt.Client#end()&lt;/code&gt;&lt;/a&gt; is called. If a callback was passed to &lt;code&gt;mqtt.Client#end()&lt;/code&gt;, this event is emitted once the callback returns.&lt;/p&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;message&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function (topic, message, packet) {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted when the client receives a publish packet&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;topic&lt;/code&gt; topic of the received packet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;message&lt;/code&gt; payload of the received packet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packet&lt;/code&gt; received packet, as defined in &lt;a href=&#34;https://github.com/mcollina/mqtt-packet#publish&#34;&gt;mqtt-packet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;packetsend&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function (packet) {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted when the client sends any packet. This includes .published() packets as well as packets used by MQTT for managing subscriptions and connections&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packet&lt;/code&gt; received packet, as defined in &lt;a href=&#34;https://github.com/mcollina/mqtt-packet&#34;&gt;mqtt-packet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Event &lt;code&gt;&#39;packetreceive&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;function (packet) {}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emitted when the client receives any packet. This includes packets from subscribed topics as well as packets used by MQTT for managing subscriptions and connections&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packet&lt;/code&gt; received packet, as defined in &lt;a href=&#34;https://github.com/mcollina/mqtt-packet&#34;&gt;mqtt-packet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;client-connect&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#connect()&lt;/h3&gt; &#xA;&lt;p&gt;By default client connects when constructor is called. To prevent this you can set &lt;code&gt;manualConnect&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; and call &lt;code&gt;client.connect()&lt;/code&gt; manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;publish&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#publish(topic, message, [options], [callback])&lt;/h3&gt; &#xA;&lt;p&gt;Publish a message to a topic&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;topic&lt;/code&gt; is the topic to publish to, &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;message&lt;/code&gt; is the message to publish, &lt;code&gt;Buffer&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; is the options to publish with, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;qos&lt;/code&gt; QoS level, &lt;code&gt;Number&lt;/code&gt;, default &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;retain&lt;/code&gt; retain flag, &lt;code&gt;Boolean&lt;/code&gt;, default &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dup&lt;/code&gt; mark as duplicate flag, &lt;code&gt;Boolean&lt;/code&gt;, default &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;properties&lt;/code&gt;: MQTT 5.0 properties &lt;code&gt;object&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;payloadFormatIndicator&lt;/code&gt;: Payload is UTF-8 Encoded Character Data or not &lt;code&gt;boolean&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;messageExpiryInterval&lt;/code&gt;: the lifetime of the Application Message in seconds &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;topicAlias&lt;/code&gt;: value that is used to identify the Topic instead of using the Topic Name &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;responseTopic&lt;/code&gt;: String which is used as the Topic Name for a response message &lt;code&gt;string&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;correlationData&lt;/code&gt;: used by the sender of the Request Message to identify which request the Response Message is for when it is received &lt;code&gt;binary&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;userProperties&lt;/code&gt;: The User Property is allowed to appear multiple times to represent multiple name, value pairs &lt;code&gt;object&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;subscriptionIdentifier&lt;/code&gt;: representing the identifier of the subscription &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;contentType&lt;/code&gt;: String describing the content of the Application Message &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cbStorePut&lt;/code&gt; - &lt;code&gt;function ()&lt;/code&gt;, fired when message is put into &lt;code&gt;outgoingStore&lt;/code&gt; if QoS is &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;callback&lt;/code&gt; - &lt;code&gt;function (err)&lt;/code&gt;, fired when the QoS handling completes, or at the next tick if QoS 0. An error occurs if client is disconnecting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;publish-async&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#publishAsync(topic, message, [options])&lt;/h3&gt; &#xA;&lt;p&gt;Async &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#publish&#34;&gt;&lt;code&gt;publish&lt;/code&gt;&lt;/a&gt;. Returns a &lt;code&gt;Promise&amp;lt;void&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;subscribe&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#subscribe(topic/topic array/topic object, [options], [callback])&lt;/h3&gt; &#xA;&lt;p&gt;Subscribe to a topic or topics&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;topic&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt; topic to subscribe to or an &lt;code&gt;Array&lt;/code&gt; of topics to subscribe to. It can also be an object, it has as object keys the topic name and as value the QoS, like &lt;code&gt;{&#39;test1&#39;: {qos: 0}, &#39;test2&#39;: {qos: 1}}&lt;/code&gt;. MQTT &lt;code&gt;topic&lt;/code&gt; wildcard characters are supported (&lt;code&gt;+&lt;/code&gt; - for single level and &lt;code&gt;#&lt;/code&gt; - for multi level)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; is the options to subscribe with, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;qos&lt;/code&gt; QoS subscription level, default 0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nl&lt;/code&gt; No Local MQTT 5.0 flag (If the value is true, Application Messages MUST NOT be forwarded to a connection with a ClientID equal to the ClientID of the publishing connection)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rap&lt;/code&gt; Retain as Published MQTT 5.0 flag (If true, Application Messages forwarded using this subscription keep the RETAIN flag they were published with. If false, Application Messages forwarded using this subscription have the RETAIN flag set to 0.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rh&lt;/code&gt; Retain Handling MQTT 5.0 (This option specifies whether retained messages are sent when the subscription is established.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;properties&lt;/code&gt;: &lt;code&gt;object&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;subscriptionIdentifier&lt;/code&gt;: representing the identifier of the subscription &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;userProperties&lt;/code&gt;: The User Property is allowed to appear multiple times to represent multiple name, value pairs &lt;code&gt;object&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;callback&lt;/code&gt; - &lt;code&gt;function (err, granted)&lt;/code&gt; callback fired on suback where: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;err&lt;/code&gt; a subscription error or an error that occurs when client is disconnecting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;granted&lt;/code&gt; is an array of &lt;code&gt;{topic, qos}&lt;/code&gt; where: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;topic&lt;/code&gt; is a subscribed to topic&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;qos&lt;/code&gt; is the granted QoS level on it&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;subscribe-async&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#subscribeAsync(topic/topic array/topic object, [options])&lt;/h3&gt; &#xA;&lt;p&gt;Async &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#subscribe&#34;&gt;&lt;code&gt;subscribe&lt;/code&gt;&lt;/a&gt;. Returns a &lt;code&gt;Promise&amp;lt;granted[]&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;unsubscribe&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#unsubscribe(topic/topic array, [options], [callback])&lt;/h3&gt; &#xA;&lt;p&gt;Unsubscribe from a topic or topics&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;topic&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt; topic or an array of topics to unsubscribe from&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt;: options of unsubscribe. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;properties&lt;/code&gt;: &lt;code&gt;object&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;userProperties&lt;/code&gt;: The User Property is allowed to appear multiple times to represent multiple name, value pairs &lt;code&gt;object&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;callback&lt;/code&gt; - &lt;code&gt;function (err)&lt;/code&gt;, fired on unsuback. An error occurs if client is disconnecting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;unsubscribe-async&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#unsubscribeAsync(topic/topic array, [options])&lt;/h3&gt; &#xA;&lt;p&gt;Async &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#unsubscribe&#34;&gt;&lt;code&gt;unsubscribe&lt;/code&gt;&lt;/a&gt;. Returns a &lt;code&gt;Promise&amp;lt;void&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;end&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#end([force], [options], [callback])&lt;/h3&gt; &#xA;&lt;p&gt;Close the client, accepts the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;force&lt;/code&gt;: passing it to true will close the client right away, without waiting for the in-flight messages to be acked. This parameter is optional.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt;: options of disconnect. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;reasonCode&lt;/code&gt;: Disconnect Reason Code &lt;code&gt;number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;properties&lt;/code&gt;: &lt;code&gt;object&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sessionExpiryInterval&lt;/code&gt;: representing the Session Expiry Interval in seconds &lt;code&gt;number&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;reasonString&lt;/code&gt;: representing the reason for the disconnect &lt;code&gt;string&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;userProperties&lt;/code&gt;: The User Property is allowed to appear multiple times to represent multiple name, value pairs &lt;code&gt;object&lt;/code&gt;,&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;serverReference&lt;/code&gt;: String which can be used by the Client to identify another Server to use &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;callback&lt;/code&gt;: will be called when the client is closed. This parameter is optional.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;end-async&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#endAsync([force], [options])&lt;/h3&gt; &#xA;&lt;p&gt;Async &lt;a href=&#34;https://raw.githubusercontent.com/mqttjs/MQTT.js/main/#end&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;. Returns a &lt;code&gt;Promise&amp;lt;void&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;removeOutgoingMessage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#removeOutgoingMessage(mId)&lt;/h3&gt; &#xA;&lt;p&gt;Remove a message from the outgoingStore. The outgoing callback will be called with Error(&#39;Message removed&#39;) if the message is removed.&lt;/p&gt; &#xA;&lt;p&gt;After this function is called, the messageId is released and becomes reusable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mId&lt;/code&gt;: The messageId of the message in the outgoingStore.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reconnect&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#reconnect()&lt;/h3&gt; &#xA;&lt;p&gt;Connect again using the same options as connect()&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;handleMessage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#handleMessage(packet, callback)&lt;/h3&gt; &#xA;&lt;p&gt;Handle messages with backpressure support, one at a time. Override at will, but &lt;strong&gt;always call &lt;code&gt;callback&lt;/code&gt;&lt;/strong&gt;, or the client will hang.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;connected&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#connected&lt;/h3&gt; &#xA;&lt;p&gt;Boolean : set to &lt;code&gt;true&lt;/code&gt; if the client is connected. &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getLastMessageId&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#getLastMessageId()&lt;/h3&gt; &#xA;&lt;p&gt;Number : get last message id. This is for sent messages only.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reconnecting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Client#reconnecting&lt;/h3&gt; &#xA;&lt;p&gt;Boolean : set to &lt;code&gt;true&lt;/code&gt; if the client is trying to reconnect to the server. &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Store(options)&lt;/h3&gt; &#xA;&lt;p&gt;In-memory implementation of the message store.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; is the store options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;clean&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;, clean inflight messages when close is called (default &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other implementations of &lt;code&gt;mqtt.Store&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robertsLando/mqtt-jsonl-store&#34;&gt;mqtt-jsonl-store&lt;/a&gt; which uses &lt;a href=&#34;https://github.com/AlCalzone/jsonl-db&#34;&gt;jsonl-db&lt;/a&gt; to store inflight data, it works only on Node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://npm.im/mqtt-level-store&#34;&gt;mqtt-level-store&lt;/a&gt; which uses &lt;a href=&#34;http://npm.im/level-browserify&#34;&gt;Level-browserify&lt;/a&gt; to store the inflight data, making it usable both in Node and the Browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/behrad/mqtt-nedb-store&#34;&gt;mqtt-nedb-store&lt;/a&gt; which uses &lt;a href=&#34;https://www.npmjs.com/package/nedb&#34;&gt;nedb&lt;/a&gt; to store the inflight data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://npm.im/mqtt-localforage-store&#34;&gt;mqtt-localforage-store&lt;/a&gt; which uses &lt;a href=&#34;http://npm.im/localforage&#34;&gt;localForage&lt;/a&gt; to store the inflight data, making it usable in the Browser without browserify.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;put&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Store#put(packet, callback)&lt;/h3&gt; &#xA;&lt;p&gt;Adds a packet to the store, a packet is anything that has a &lt;code&gt;messageId&lt;/code&gt; property. The callback is called when the packet has been stored.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;createStream&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Store#createStream()&lt;/h3&gt; &#xA;&lt;p&gt;Creates a stream with all the packets in the store.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;del&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Store#del(packet, cb)&lt;/h3&gt; &#xA;&lt;p&gt;Removes a packet from the store, a packet is anything that has a &lt;code&gt;messageId&lt;/code&gt; property. The callback is called when the packet has been removed.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;close&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mqtt.Store#close(cb)&lt;/h3&gt; &#xA;&lt;p&gt;Closes the Store.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;browser&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Browser&lt;/h2&gt; &#xA;&lt;p&gt;MQTT.js is bundled using &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt;. You can find the browser build in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import mqtt from &#39;mqtt/dist/mqtt.min&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;cdn&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Via CDN&lt;/h3&gt; &#xA;&lt;p&gt;The MQTT.js bundle is available through &lt;a href=&#34;http://unpkg.com&#34;&gt;http://unpkg.com&lt;/a&gt;, specifically at &lt;a href=&#34;https://unpkg.com/mqtt/dist/mqtt.min.js&#34;&gt;https://unpkg.com/mqtt/dist/mqtt.min.js&lt;/a&gt;. See &lt;a href=&#34;http://unpkg.com&#34;&gt;http://unpkg.com&lt;/a&gt; for the full documentation on version ranges.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Be sure to only use this bundle with &lt;code&gt;ws&lt;/code&gt; or &lt;code&gt;wss&lt;/code&gt; URLs in the browser. Others URL types will likey fail&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;webpack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Webpack&lt;/h3&gt; &#xA;&lt;p&gt;If you are using webpack simply import MQTT.js as you would any other module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import mqtt from &#39;mqtt&#39;&#xA;&#xA;const client = mqtt.connect(&#39;ws://test.mosquitto.org:8080&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get errors when building your app with webpack v5, it&#39;s because starting from v5, webpack doesn&#39;t polyfill Node.js core modules anymore. You can fix this by adding the following to your webpack config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const NodePolyfillPlugin = require(&#34;node-polyfill-webpack-plugin&#34;)&#xA;&#xA;module.exports = {&#xA;    // Other rules...&#xA;    plugins: [&#xA;        new NodePolyfillPlugin()&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise just add the missing polyfills manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#xA;module.exports = {&#xA;  // Other rules...&#xA;  resolve: {&#xA;    fallback: {&#xA;      &#34;buffer&#34;: require.resolve(&#34;buffer/&#34;),&#xA;      &#34;stream&#34;: require.resolve(&#34;stream-browserify&#34;),&#xA;      &#34;process&#34;: require.resolve(&#34;process/browser&#34;),&#xA;      &#34;path&#34;: require.resolve(&#34;path-browserify&#34;),&#xA;      &#34;fs&#34;: false&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;vite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Vite&lt;/h3&gt; &#xA;&lt;p&gt;If you are using vite simply import MQTT.js as you would any other module. In order to use MQTT.js with vite, you need to add the following to your vite config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// other imports&#xA;import { NodeGlobalsPolyfillPlugin } from &#39;@esbuild-plugins/node-globals-polyfill&#39;&#xA;import { NodeModulesPolyfillPlugin } from &#34;@esbuild-plugins/node-modules-polyfill&#34;;&#xA;import nodePolyfills from &#34;rollup-plugin-polyfill-node&#34;;&#xA;&#xA;&#xA;export default defineConfig({&#xA;  // Other rules...&#xA;  resolve: {&#xA;    alias: {&#xA;      util: &#34;util/&#34;,&#xA;    }&#xA;  },&#xA;  optimizeDeps: {&#xA;        esbuildOptions: {&#xA;            // Node.js global to browser globalThis&#xA;            define: {&#xA;                global: &#39;globalThis&#39;&#xA;            },&#xA;            // Enable esbuild polyfill plugins&#xA;            plugins: [&#xA;              NodeGlobalsPolyfillPlugin({&#xA;                buffer: true,&#xA;                process: true,&#xA;              }),&#xA;              NodeModulesPolyfillPlugin(),&#xA;            ],&#xA;        }&#xA;    },&#xA;    build: {&#xA;      rollupOptions: {&#xA;        // Enable rollup polyfills plugin&#xA;        // used during production bundling&#xA;        plugins: [nodePolyfills()],&#xA;      },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires you to install some plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -D @esbuild-plugins/node-globals-polyfill @esbuild-plugins/node-modules-polyfill rollup-plugin-polyfill-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;qos&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About QoS&lt;/h2&gt; &#xA;&lt;p&gt;Here is how QoS works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QoS 0 : received &lt;strong&gt;at most once&lt;/strong&gt; : The packet is sent, and that&#39;s it. There is no validation about whether it has been received.&lt;/li&gt; &#xA; &lt;li&gt;QoS 1 : received &lt;strong&gt;at least once&lt;/strong&gt; : The packet is sent and stored as long as the client has not received a confirmation from the server. MQTT ensures that it &lt;em&gt;will&lt;/em&gt; be received, but there can be duplicates.&lt;/li&gt; &#xA; &lt;li&gt;QoS 2 : received &lt;strong&gt;exactly once&lt;/strong&gt; : Same as QoS 1 but there is no duplicates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;About data consumption, obviously, QoS 2 &amp;gt; QoS 1 &amp;gt; QoS 0, if that&#39;s a concern to you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;typescript&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage with TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;Starting from v5 this project is written in TypeScript and the type definitions are included in the package.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { connect } from &#34;mqtt&#34;&#xA;const client = connect(&#39;mqtt://test.mosquitto.org&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;weapp-alipay&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WeChat and Ali Mini Program support&lt;/h2&gt; &#xA;&lt;h3&gt;WeChat Mini Program&lt;/h3&gt; &#xA;&lt;p&gt;Supports &lt;a href=&#34;https://mp.weixin.qq.com/&#34;&gt;WeChat Mini Program&lt;/a&gt;. Use the &lt;code&gt;wxs&lt;/code&gt; protocol. See &lt;a href=&#34;https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html&#34;&gt;the WeChat docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const mqtt = require(&#34;mqtt&#34;);&#xA;const client = mqtt.connect(&#34;wxs://test.mosquitto.org&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ali Mini Program&lt;/h3&gt; &#xA;&lt;p&gt;Supports &lt;a href=&#34;https://open.alipay.com/channel/miniIndex.htm&#34;&gt;Ali Mini Program&lt;/a&gt;. Use the &lt;code&gt;alis&lt;/code&gt; protocol. See &lt;a href=&#34;https://docs.alipay.com/mini/developer/getting-started&#34;&gt;the Alipay docs&lt;/a&gt;. &lt;a name=&#34;example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const mqtt = require(&#34;mqtt&#34;);&#xA;const client = mqtt.connect(&#34;alis://test.mosquitto.org&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;MQTT.js is an &lt;strong&gt;OPEN Open Source Project&lt;/strong&gt;. This means that:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/mqttjs/MQTT.js/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;MQTT.js is only possible due to the excellent work of the following contributors:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;GitHub&lt;/th&gt; &#xA;   &lt;th&gt;Twitter&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adam Rudd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/adamvr&#34;&gt;GitHub/adamvr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://twitter.com/adam_vr&#34;&gt;Twitter/@adam_vr&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matteo Collina&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mcollina&#34;&gt;GitHub/mcollina&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://twitter.com/matteocollina&#34;&gt;Twitter/@matteocollina&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Maxime Agor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/4rzael&#34;&gt;GitHub/4rzael&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://twitter.com/4rzael&#34;&gt;Twitter/@4rzael&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Siarhei Buntsevich&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scarry1992&#34;&gt;GitHub/scarry1992&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Daniel Lando&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/robertsLando&#34;&gt;GitHub/robertsLando&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to support MQTT.js, please consider sponsoring the author and active maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/mcollina&#34;&gt;Matteo Collina&lt;/a&gt;: author of MQTT.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/robertsLando&#34;&gt;Daniel Lando&lt;/a&gt;: active maintainer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lio-mengxiang/mx-design</title>
    <updated>2023-08-02T01:46:32Z</updated>
    <id>tag:github.com,2023-08-02:/lio-mengxiang/mx-design</id>
    <link href="https://github.com/lio-mengxiang/mx-design" rel="alternate"></link>
    <summary type="html">&lt;p&gt;最好的react ui组件库教程代码 (The code for the best react component library series tutorial)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; style=&#34;margin-bottom: 24px&#34;&gt; &#xA; &lt;img alt=&#34;Mx Design Logo&#34; width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/lio-mengxiang/mx-design/main/assets/logo.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; mx-design want to create the best tutorial project on github about how to build a react component library. The tutorial includes project building tutorials, frontend tooling related to the project building tutorials , building react components tutorials, and finally builds a library that can be used in a production environment.Meanwhile, I will try to ensure code quality, high performance, and high scalability &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lio-mengxiang/mx-design/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/lio-mengxiang/mx-design/main/README.zh.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;start project&lt;/h2&gt; &#xA;&lt;p&gt;Install npm packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;start the component preview page&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm start:site&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;introduction&lt;/h2&gt; &#xA;&lt;p&gt;At present, I am only working on it by myself, and I have many tasks in my work, so the workload is a little heavy. I am constantly adding new components and writing tutorials. Please understand the problem of fewer components in the early stage (expected to be completed in 2023).&lt;/p&gt; &#xA;&lt;p&gt;All components and configuration files have tutorials in Chinese and English.&lt;/p&gt; &#xA;&lt;p&gt;Here are all the tutorials. Follow along with the code in this library.&lt;/p&gt; &#xA;&lt;p&gt;thanks to star...&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial Directory (Iterating...)&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>samchon/nestia</title>
    <updated>2023-08-02T01:46:32Z</updated>
    <id>tag:github.com,2023-08-02:/samchon/nestia</id>
    <link href="https://github.com/samchon/nestia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make NestJS much faster and easier&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nestia&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nestia.io/logo.png&#34; alt=&#34;Nestia Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/samchon/nestia/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@nestia/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@nestia/core.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/nestia&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/nestia.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/samchon/nestia/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://github.com/samchon/nestia/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nestia.io/docs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/guide-documents-forestgreen&#34; alt=&#34;Guide Documents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nestia is a set of helper libraries for NestJS, supporting below features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@nestia/core&lt;/code&gt;: super-fast decorators&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@nestia/sdk&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swagger generator evolved than ever&lt;/li&gt; &#xA;   &lt;li&gt;SDK library generator for clients&lt;/li&gt; &#xA;   &lt;li&gt;Mockup Simulator for client applications&lt;/li&gt; &#xA;   &lt;li&gt;Automatic E2E test functions generator&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@nestia/migrate&lt;/code&gt;: migration from Swagger to NestJS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nestia&lt;/code&gt;: just CLI (command line interface) tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Only one line&lt;/strong&gt; required, with pure TypeScript type&lt;/li&gt; &#xA;  &lt;li&gt;Enhance performance &lt;strong&gt;30x&lt;/strong&gt; up &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Runtime validator is &lt;strong&gt;20,000x faster&lt;/strong&gt; than &lt;code&gt;class-validator&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;JSON serialization is &lt;strong&gt;200x faster&lt;/strong&gt; than &lt;code&gt;class-transformer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Software Development Kit &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;SDK is a collection of &lt;code&gt;fetch&lt;/code&gt; functions with type definitions like &lt;a href=&#34;https://trpc.io/&#34;&gt;tRPC&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Mockup simulator means embedded backend simulator in SDK &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;similar with &lt;a href=&#34;https://mswjs.io/&#34;&gt;msw&lt;/a&gt;, but fully automated&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13158709/215004990-368c589d-7101-404e-b81b-fbc936382f05.gif&#34; alt=&#34;nestia-sdk-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Left is NestJS server code, and right is client (frontend) code utilizing SDK&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sponsors and Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for your support.&lt;/p&gt; &#xA;&lt;p&gt;Your donation would encourage &lt;code&gt;nestia&lt;/code&gt; development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/nestia&#34;&gt;&lt;img src=&#34;https://opencollective.com/nestia/backers.svg?avatarHeight=75&amp;amp;width=600&#34; alt=&#34;Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Guide Documents&lt;/h2&gt; &#xA;&lt;p&gt;Check out the document in the &lt;a href=&#34;https://nestia.io/docs/&#34;&gt;website&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;🏠 Home&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/setup/&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/pure&#34;&gt;Pure TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📖 Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core Library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/core/TypedRoute/&#34;&gt;TypedRoute&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/core/TypedBody/&#34;&gt;TypedBody&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/core/TypedParam/&#34;&gt;TypedParam&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/core/TypedRoute/&#34;&gt;TypedQuery&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generators &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/sdk/swagger/&#34;&gt;Swagger Documents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/sdk/sdk/&#34;&gt;SDK Library&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/sdk/e2e/&#34;&gt;E2E Functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/sdk/simulator/&#34;&gt;Mockup Simulator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nestia.io/docs/migrate/&#34;&gt;Swagger to NestJS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🔗 Appendix&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samchon/nestia/tree/master/benchmark/results/11th%20Gen%20Intel(R)%20Core(TM)%20i5-1135G7%20%40%202.40GHz&#34;&gt;⇲ Benchmark Result&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/samchon/series/22751&#34;&gt;⇲ &lt;code&gt;dev.to&lt;/code&gt; Articles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>