<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:39:40Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rocketseat-education/ignite-lab-design-system</title>
    <updated>2022-10-16T01:39:40Z</updated>
    <id>tag:github.com,2022-10-16:/rocketseat-education/ignite-lab-design-system</id>
    <link href="https://github.com/rocketseat-education/ignite-lab-design-system" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Projeto desenvolvido durante o Ignite Lab 03&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>amotile/stable-diffusion-studio</title>
    <updated>2022-10-16T01:39:40Z</updated>
    <id>tag:github.com,2022-10-16:/amotile/stable-diffusion-studio</id>
    <link href="https://github.com/amotile/stable-diffusion-studio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An animation focused workflow frontend for Stable Diffusion&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;An animation focused workflow frontend for Stable Diffusion&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses AUTOMATIC1111 as the backend with some custom scripts.&lt;/li&gt; &#xA; &lt;li&gt;Still a prototype, many improvements probably needed and many bugs to find.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6pKGsgN2I0U&#34;&gt;Video example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to run&lt;/h1&gt; &#xA;&lt;h2&gt;Using the binary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Place the custom scripts from here the release (the .py files) into your &lt;code&gt;&amp;lt;AUTOMATIC1111&amp;gt;/scripts&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Run the executable (e.g. .exe file)&lt;/li&gt; &#xA; &lt;li&gt;In your browser go to &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hosted by backend&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install and run my SD backend: &lt;a href=&#34;https://github.com/amotile/stable-diffusion-backend&#34;&gt;https://github.com/amotile/stable-diffusion-backend&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt; as the image generator&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;copy the contents of the &lt;code&gt;/build&lt;/code&gt; folder to the &lt;code&gt;&amp;lt;amotile_backend&amp;gt;/frontend&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;In your browser go to &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development version&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install and run the backend like above&lt;/li&gt; &#xA; &lt;li&gt;in project root run:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In your browser go to &lt;code&gt;http://localhost:5533&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;UI Tips&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can remove keyframes by moving them up or down far enough&lt;/li&gt; &#xA; &lt;li&gt;If you hold shift when moving a keyframe you move the whole column or keyframes&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>actions/github-script</title>
    <updated>2022-10-16T01:39:40Z</updated>
    <id>tag:github.com,2022-10-16:/actions/github-script</id>
    <link href="https://github.com/actions/github-script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Write workflows scripting the GitHub API in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;actions/github-script&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/actions/github-script/actions?query=workflow%3AIntegration+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/actions/github-script/workflows/Integration/badge.svg?event=push&amp;amp;branch=main&#34; alt=&#34;.github/workflows/integration.yml&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/actions/github-script/actions?query=workflow%3ACI+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/actions/github-script/workflows/CI/badge.svg?event=push&amp;amp;branch=main&#34; alt=&#34;.github/workflows/ci.yml&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/actions/github-script/actions?query=workflow%3ALicensed+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/actions/github-script/workflows/Licensed/badge.svg?event=push&amp;amp;branch=main&#34; alt=&#34;.github/workflows/licensed.yml&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This action makes it easy to quickly write a script in your workflow that uses the GitHub API and the workflow run context.&lt;/p&gt; &#xA;&lt;p&gt;To use this action, provide an input named &lt;code&gt;script&lt;/code&gt; that contains the body of an asynchronous function call. The following arguments will be provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;github&lt;/code&gt; A pre-authenticated &lt;a href=&#34;https://octokit.github.io/rest.js&#34;&gt;octokit/rest.js&lt;/a&gt; client with pagination plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;context&lt;/code&gt; An object containing the &lt;a href=&#34;https://github.com/actions/toolkit/raw/main/packages/github/src/context.ts&#34;&gt;context of the workflow run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;core&lt;/code&gt; A reference to the &lt;a href=&#34;https://github.com/actions/toolkit/tree/main/packages/core&#34;&gt;@actions/core&lt;/a&gt; package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;glob&lt;/code&gt; A reference to the &lt;a href=&#34;https://github.com/actions/toolkit/tree/main/packages/glob&#34;&gt;@actions/glob&lt;/a&gt; package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io&lt;/code&gt; A reference to the &lt;a href=&#34;https://github.com/actions/toolkit/tree/main/packages/io&#34;&gt;@actions/io&lt;/a&gt; package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exec&lt;/code&gt; A reference to the &lt;a href=&#34;https://github.com/actions/toolkit/tree/main/packages/exec&#34;&gt;@actions/exec&lt;/a&gt; package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&lt;/code&gt; A proxy wrapper around the normal Node.js &lt;code&gt;require&lt;/code&gt; to enable requiring relative paths (relative to the current working directory) and requiring npm packages installed in the current working directory. If for some reason you need the non-wrapped &lt;code&gt;require&lt;/code&gt;, there is an escape hatch available: &lt;code&gt;__original_require__&lt;/code&gt; is the original value of &lt;code&gt;require&lt;/code&gt; without our wrapping applied.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;script&lt;/code&gt; is just a function body, these values will already be defined, so you don&#39;t have to import them (see examples below).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://octokit.github.io/rest.js/&#34;&gt;octokit/rest.js&lt;/a&gt; for the API client documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Breaking Changes&lt;/h2&gt; &#xA;&lt;h3&gt;Breaking changes in V6&lt;/h3&gt; &#xA;&lt;p&gt;Version 6 of this action updated the runtime to Node 16 - &lt;a href=&#34;https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#example-using-nodejs-v16&#34;&gt;https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#example-using-nodejs-v16&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All scripts are now run with Node 16 instead of Node 12 and are affected by any breaking changes between Node 12 and 16.&lt;/p&gt; &#xA;&lt;h3&gt;Breaking changes in V5&lt;/h3&gt; &#xA;&lt;p&gt;Version 5 of this action includes the version 5 of &lt;code&gt;@actions/github&lt;/code&gt; and &lt;code&gt;@octokit/plugin-rest-endpoint-methods&lt;/code&gt;. As part of this update, the Octokit context available via &lt;code&gt;github&lt;/code&gt; no longer has REST methods directly. These methods are available via &lt;code&gt;github.rest.*&lt;/code&gt; - &lt;a href=&#34;https://github.com/octokit/plugin-rest-endpoint-methods.js/releases/tag/v5.0.0&#34;&gt;https://github.com/octokit/plugin-rest-endpoint-methods.js/releases/tag/v5.0.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;github.issues.createComment&lt;/code&gt; in V4 becomes &lt;code&gt;github.rest.issues.createComment&lt;/code&gt; in V5&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;github.request&lt;/code&gt;, &lt;code&gt;github.paginate&lt;/code&gt;, and &lt;code&gt;github.graphql&lt;/code&gt; are unchanged.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/actions/github-script/main/docs/development.md&#34;&gt;development.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reading step results&lt;/h2&gt; &#xA;&lt;p&gt;The return value of the script will be in the step&#39;s outputs under the &#34;result&#34; key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: actions/github-script@v6&#xA;  id: set-result&#xA;  with:&#xA;    script: return &#34;Hello!&#34;&#xA;    result-encoding: string&#xA;- name: Get result&#xA;  run: echo &#34;${{steps.set-result.outputs.result}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/actions/github-script/main/#result-encoding&#34;&gt;&#34;Result encoding&#34;&lt;/a&gt; for details on how the encoding of these outputs can be changed.&lt;/p&gt; &#xA;&lt;h2&gt;Result encoding&lt;/h2&gt; &#xA;&lt;p&gt;By default, the JSON-encoded return value of the function is set as the &#34;result&#34; in the output of a github-script step. For some workflows, string encoding is preferred. This option can be set using the &lt;code&gt;result-encoding&lt;/code&gt; input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: actions/github-script@v6&#xA;  id: my-script&#xA;  with:&#xA;    result-encoding: string&#xA;    script: return &#34;I will be string (not JSON) encoded!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Retries&lt;/h2&gt; &#xA;&lt;p&gt;By default, requests made with the &lt;code&gt;github&lt;/code&gt; instance will not be retried. You can configure this with the &lt;code&gt;retries&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: actions/github-script@v6&#xA;  id: my-script&#xA;  with:&#xA;    result-encoding: string&#xA;    retries: 3&#xA;    script: |&#xA;      github.rest.issues.get({&#xA;        issue_number: context.issue.number,&#xA;        owner: context.repo.owner,&#xA;        repo: context.repo.repo,&#xA;      })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, request failures from &lt;code&gt;github.rest.issues.get()&lt;/code&gt; will be retried up to 3 times.&lt;/p&gt; &#xA;&lt;p&gt;You can also configure which status codes should be exempt from retries via the &lt;code&gt;retry-exempt-status-codes&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: actions/github-script@v6&#xA;  id: my-script&#xA;  with:&#xA;    result-encoding: string&#xA;    retries: 3&#xA;    retry-exempt-status-codes: 400,401&#xA;    script: |&#xA;      github.rest.issues.get({&#xA;        issue_number: context.issue.number,&#xA;        owner: context.repo.owner,&#xA;        repo: context.repo.repo,&#xA;      })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the following status codes will not be retried: &lt;code&gt;400, 401, 403, 404, 422&lt;/code&gt; &lt;a href=&#34;https://github.com/octokit/plugin-retry.js/raw/9a2443746c350b3beedec35cf26e197ea318a261/src/index.ts#L14&#34;&gt;(source)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These retries are implemented using the &lt;a href=&#34;https://github.com/octokit/plugin-retry.js&#34;&gt;octokit/plugin-retry.js&lt;/a&gt; plugin. The retries use &lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_backoff&#34;&gt;exponential backoff&lt;/a&gt; to space out retries. (&lt;a href=&#34;https://github.com/octokit/plugin-retry.js/raw/9a2443746c350b3beedec35cf26e197ea318a261/src/error-request.ts#L13&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;github-token&lt;/code&gt; is optional in this action, and the input is there in case you need to use a non-default token.&lt;/p&gt; &#xA;&lt;p&gt;By default, github-script will use the token provided to your workflow.&lt;/p&gt; &#xA;&lt;h3&gt;Print the available attributes of context&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: View context attributes&#xA;  uses: actions/github-script@v6&#xA;  with:&#xA;    script: console.log(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comment on an issue&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  issues:&#xA;    types: [opened]&#xA;&#xA;jobs:&#xA;  comment:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            github.rest.issues.createComment({&#xA;              issue_number: context.issue.number,&#xA;              owner: context.repo.owner,&#xA;              repo: context.repo.repo,&#xA;              body: &#39;👋 Thanks for reporting!&#39;&#xA;            })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Apply a label to an issue&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  issues:&#xA;    types: [opened]&#xA;&#xA;jobs:&#xA;  apply-label:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            github.rest.issues.addLabels({&#xA;              issue_number: context.issue.number,&#xA;              owner: context.repo.owner,&#xA;              repo: context.repo.repo,&#xA;              labels: [&#39;Triage&#39;]&#xA;            })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Welcome a first-time contributor&lt;/h3&gt; &#xA;&lt;p&gt;You can format text in comments using the same &lt;a href=&#34;https://docs.github.com/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax&#34;&gt;Markdown syntax&lt;/a&gt; as the GitHub web interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: pull_request_target&#xA;&#xA;jobs:&#xA;  welcome:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            // Get a list of all issues created by the PR opener&#xA;            // See: https://octokit.github.io/rest.js/#pagination&#xA;            const creator = context.payload.sender.login&#xA;            const opts = github.rest.issues.listForRepo.endpoint.merge({&#xA;              ...context.issue,&#xA;              creator,&#xA;              state: &#39;all&#39;&#xA;            })&#xA;            const issues = await github.paginate(opts)&#xA;&#xA;            for (const issue of issues) {&#xA;              if (issue.number === context.issue.number) {&#xA;                continue&#xA;              }&#xA;&#xA;              if (issue.pull_request) {&#xA;                return // Creator is already a contributor.&#xA;              }&#xA;            }&#xA;&#xA;            await github.rest.issues.createComment({&#xA;              issue_number: context.issue.number,&#xA;              owner: context.repo.owner,&#xA;              repo: context.repo.repo,&#xA;              body: `**Welcome**, new contributor!&#xA;&#xA;                Please make sure you&#39;re read our [contributing guide](CONTRIBUTING.md) and we look forward to reviewing your Pull request shortly ✨`&#xA;            })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download data from a URL&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;github&lt;/code&gt; object to access the Octokit API. For instance, &lt;code&gt;github.request&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: pull_request&#xA;&#xA;jobs:&#xA;  diff:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            const diff_url = context.payload.pull_request.diff_url&#xA;            const result = await github.request(diff_url)&#xA;            console.log(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(Note that this particular example only works for a public URL, where the diff URL is publicly accessible. Getting the diff for a private URL requires using the API.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will print the full diff object in the screen; &lt;code&gt;result.data&lt;/code&gt; will contain the actual diff text.&lt;/p&gt; &#xA;&lt;h3&gt;Run custom GraphQL queries&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;github.graphql&lt;/code&gt; object to run custom GraphQL queries against the GitHub API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  list-issues:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            const query = `query($owner:String!, $name:String!, $label:String!) {&#xA;              repository(owner:$owner, name:$name){&#xA;                issues(first:100, labels: [$label]) {&#xA;                  nodes {&#xA;                    id&#xA;                  }&#xA;                }&#xA;              }&#xA;            }`;&#xA;            const variables = {&#xA;              owner: context.repo.owner,&#xA;              name: context.repo.repo,&#xA;              label: &#39;wontfix&#39;&#xA;            }&#xA;            const result = await github.graphql(query, variables)&#xA;            console.log(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run a separate file&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to inline your entire script that you want to run, you can use a separate JavaScript module in your repository like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: push&#xA;&#xA;jobs:&#xA;  echo-input:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v2&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            const script = require(&#39;./path/to/script.js&#39;)&#xA;            console.log(script({github, context}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then export a function from your module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = ({github, context}) =&amp;gt; {&#xA;  return context.payload.client_payload.value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that because you can&#39;t &lt;code&gt;require&lt;/code&gt; things like the GitHub context or Actions Toolkit libraries, you&#39;ll want to pass them as arguments to your external function.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you&#39;ll want to use the &lt;a href=&#34;https://github.com/actions/checkout&#34;&gt;checkout action&lt;/a&gt; to make sure your script file is available.&lt;/p&gt; &#xA;&lt;h3&gt;Run a separate file with an async function&lt;/h3&gt; &#xA;&lt;p&gt;You can also use async functions in this manner, as long as you &lt;code&gt;await&lt;/code&gt; it in the inline script.&lt;/p&gt; &#xA;&lt;p&gt;In your workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: push&#xA;&#xA;jobs:&#xA;  echo-input:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v2&#xA;      - uses: actions/github-script@v6&#xA;        env:&#xA;          SHA: &#39;${{env.parentSHA}}&#39;&#xA;        with:&#xA;          script: |&#xA;            const script = require(&#39;./path/to/script.js&#39;)&#xA;            await script({github, context, core})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then export an async function from your module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = async ({github, context, core}) =&amp;gt; {&#xA;  const {SHA} = process.env&#xA;  const commit = await github.rest.repos.getCommit({&#xA;    owner: context.repo.owner,&#xA;    repo: context.repo.repo,&#xA;    ref: `${SHA}`&#xA;  })&#xA;  core.exportVariable(&#39;author&#39;, commit.data.commit.author.email)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use npm packages&lt;/h3&gt; &#xA;&lt;p&gt;Like importing your own files above, you can also use installed modules. Note that this is achieved with a wrapper on top &lt;code&gt;require&lt;/code&gt;, so if you&#39;re trying to require a module inside your own file, you might need to import it externally or pass the &lt;code&gt;require&lt;/code&gt; wrapper to your file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: push&#xA;&#xA;jobs:&#xA;  echo-input:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v2&#xA;      - uses: actions/setup-node@v2&#xA;        with:&#xA;          node-version: 14&#xA;      - run: npm ci&#xA;      # or one-off:&#xA;      - run: npm install execa&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            const execa = require(&#39;execa&#39;)&#xA;&#xA;            const { stdout } = await execa(&#39;echo&#39;, [&#39;hello&#39;, &#39;world&#39;])&#xA;&#xA;            console.log(stdout)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use ESM &lt;code&gt;import&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To import an ESM file, you&#39;ll need to reference your script by an absolute path and ensure you have a &lt;code&gt;package.json&lt;/code&gt; file with &lt;code&gt;&#34;type&#34;: &#34;module&#34;&lt;/code&gt; specified.&lt;/p&gt; &#xA;&lt;p&gt;For a script in your repository &lt;code&gt;src/print-stuff.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default function printStuff() {&#xA;  console.log(&#39;stuff&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: push&#xA;&#xA;jobs:&#xA;  print-stuff:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v2&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          script: |&#xA;            const { default: printStuff } = await import(&#39;${{ github.workspace }}/src/print-stuff.js&#39;)&#xA;&#xA;            await printStuff()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use env as input&lt;/h3&gt; &#xA;&lt;p&gt;You can set env vars to use them in your script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: push&#xA;&#xA;jobs:&#xA;  echo-input:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/github-script@v6&#xA;        env:&#xA;          FIRST_NAME: Mona&#xA;          LAST_NAME: Octocat&#xA;        with:&#xA;          script: |&#xA;            const { FIRST_NAME, LAST_NAME } = process.env&#xA;&#xA;            console.log(`Hello ${FIRST_NAME} ${LAST_NAME}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a separate GitHub token&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; used by default is scoped to the current repository, see &lt;a href=&#34;https://docs.github.com/actions/reference/authentication-in-a-workflow&#34;&gt;Authentication in a workflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need access to a different repository or an API that the &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; doesn&#39;t have permissions to, you can provide your own &lt;a href=&#34;https://help.github.com/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line&#34;&gt;PAT&lt;/a&gt; as a secret using the &lt;code&gt;github-token&lt;/code&gt; input.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.github.com/actions/reference/encrypted-secrets&#34;&gt;Learn more about creating and using encrypted secrets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  issues:&#xA;    types: [opened]&#xA;&#xA;jobs:&#xA;  apply-label:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/github-script@v6&#xA;        with:&#xA;          github-token: ${{ secrets.MY_PAT }}&#xA;          script: |&#xA;            github.rest.issues.addLabels({&#xA;              issue_number: context.issue.number,&#xA;              owner: context.repo.owner,&#xA;              repo: context.repo.repo,&#xA;              labels: [&#39;Triage&#39;]&#xA;            })&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>