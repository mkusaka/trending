<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-02T01:36:07Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>modelcontextprotocol/typescript-sdk</title>
    <updated>2025-01-02T01:36:07Z</updated>
    <id>tag:github.com,2025-01-02:/modelcontextprotocol/typescript-sdk</id>
    <link href="https://github.com/modelcontextprotocol/typescript-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Typescript SDK for Model Context Protocol servers and clients&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP TypeScript SDK &lt;img src=&#34;https://img.shields.io/npm/v/%40modelcontextprotocol%2Fsdk&#34; alt=&#34;NPM Version&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;TypeScript implementation of the &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP), providing both client and server capabilities for integrating with LLM surfaces.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Model Context Protocol allows applications to provide context for LLMs in a standardized way, separating the concerns of providing context from the actual LLM interaction. This TypeScript SDK implements the full MCP specification, making it easy to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build MCP clients that can connect to any MCP server&lt;/li&gt; &#xA; &lt;li&gt;Create MCP servers that expose resources, prompts and tools&lt;/li&gt; &#xA; &lt;li&gt;Use standard transports like stdio and SSE&lt;/li&gt; &#xA; &lt;li&gt;Handle all MCP protocol messages and lifecycle events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @modelcontextprotocol/sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Creating a Client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Client } from &#34;@modelcontextprotocol/sdk/client/index.js&#34;;&#xA;import { StdioClientTransport } from &#34;@modelcontextprotocol/sdk/client/stdio.js&#34;;&#xA;&#xA;const transport = new StdioClientTransport({&#xA;  command: &#34;path/to/server&#34;,&#xA;});&#xA;&#xA;const client = new Client({&#xA;  name: &#34;example-client&#34;,&#xA;  version: &#34;1.0.0&#34;,&#xA;}, {&#xA;  capabilities: {}&#xA;});&#xA;&#xA;await client.connect(transport);&#xA;&#xA;// List available resources&#xA;const resources = await client.request(&#xA;  { method: &#34;resources/list&#34; },&#xA;  ListResourcesResultSchema&#xA;);&#xA;&#xA;// Read a specific resource&#xA;const resourceContent = await client.request(&#xA;  {&#xA;    method: &#34;resources/read&#34;,&#xA;    params: {&#xA;      uri: &#34;file:///example.txt&#34;&#xA;    }&#xA;  },&#xA;  ReadResourceResultSchema&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Server } from &#34;@modelcontextprotocol/sdk/server/index.js&#34;;&#xA;import { StdioServerTransport } from &#34;@modelcontextprotocol/sdk/server/stdio.js&#34;;&#xA;&#xA;const server = new Server({&#xA;  name: &#34;example-server&#34;,&#xA;  version: &#34;1.0.0&#34;,&#xA;}, {&#xA;  capabilities: {&#xA;    resources: {}&#xA;  }&#xA;});&#xA;&#xA;server.setRequestHandler(ListResourcesRequestSchema, async () =&amp;gt; {&#xA;  return {&#xA;    resources: [&#xA;      {&#xA;        uri: &#34;file:///example.txt&#34;,&#xA;        name: &#34;Example Resource&#34;,&#xA;      },&#xA;    ],&#xA;  };&#xA;});&#xA;&#xA;server.setRequestHandler(ReadResourceRequestSchema, async (request) =&amp;gt; {&#xA;  if (request.params.uri === &#34;file:///example.txt&#34;) {&#xA;    return {&#xA;      contents: [&#xA;        {&#xA;          uri: &#34;file:///example.txt&#34;,&#xA;          mimeType: &#34;text/plain&#34;,&#xA;          text: &#34;This is the content of the example resource.&#34;,&#xA;        },&#xA;      ],&#xA;    };&#xA;  } else {&#xA;    throw new Error(&#34;Resource not found&#34;);&#xA;  }&#xA;});&#xA;&#xA;const transport = new StdioServerTransport();&#xA;await server.connect(transport);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spec.modelcontextprotocol.io&#34;&gt;MCP Specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/modelcontextprotocol/servers&#34;&gt;Example Servers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Issues and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/modelcontextprotocol/typescript-sdk&#34;&gt;https://github.com/modelcontextprotocol/typescript-sdk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT Licenseâ€”see the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/typescript-sdk/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>