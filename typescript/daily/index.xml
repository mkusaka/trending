<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-08T01:47:54Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/brotli</title>
    <updated>2023-07-08T01:47:54Z</updated>
    <id>tag:github.com,2023-07-08:/google/brotli</id>
    <link href="https://github.com/google/brotli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Brotli compression format&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://brotli.org/brotli.svg?sanitize=true&#34; alt=&#34;Brotli&#34; width=&#34;64&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SECURITY NOTE&lt;/h1&gt; &#xA;&lt;p&gt;Please consider updating brotli to version 1.0.9 (latest).&lt;/p&gt; &#xA;&lt;p&gt;Version 1.0.9 contains a fix to &#34;integer overflow&#34; problem. This happens when &#34;one-shot&#34; decoding API is used (or input chunk for streaming API is not limited), input size (chunk size) is larger than 2GiB, and input contains uncompressed blocks. After the overflow happens, &lt;code&gt;memcpy&lt;/code&gt; is invoked with a gigantic &lt;code&gt;num&lt;/code&gt; value, that will likely cause the crash.&lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression.&lt;/p&gt; &#xA;&lt;p&gt;The specification of the Brotli Compressed Data Format is defined in &lt;a href=&#34;https://tools.ietf.org/html/rfc7932&#34;&gt;RFC 7932&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Brotli is open-sourced under the MIT License, see the LICENSE file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; brotli is a &#34;stream&#34; format; it does not contain meta-information, like checksums or uncompresssed data length. It is possible to modify &#34;raw&#34; ranges of the compressed stream and the decoder will not notice that.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Brotli mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/brotli&#34;&gt;https://groups.google.com/forum/#!forum/brotli&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/brotli/actions/workflows/build_test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Build Status&#34;&gt; &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/index.html#brotli&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/brotli.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build instructions&lt;/h3&gt; &#xA;&lt;h4&gt;Vcpkg&lt;/h4&gt; &#xA;&lt;p&gt;You can download and install brotli using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install brotli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The brotli port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h4&gt;Autotools-style CMake&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nemequ/configure-cmake&#34;&gt;configure-cmake&lt;/a&gt; is an autotools-style configure script for CMake-based projects (not supported on Windows).&lt;/p&gt; &#xA;&lt;p&gt;The basic commands to build, test and install brotli are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir out &amp;amp;&amp;amp; cd out&#xA;$ ../configure-cmake&#xA;$ make&#xA;$ make test&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, debug binaries are built. To generate &#34;release&#34; &lt;code&gt;Makefile&lt;/code&gt; specify &lt;code&gt;--disable-debug&lt;/code&gt; option to &lt;code&gt;configure-cmake&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Bazel&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://www.bazel.build/&#34;&gt;Bazel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;CMake&lt;/h4&gt; &#xA;&lt;p&gt;The basic commands to build and install brotli are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir out &amp;amp;&amp;amp; cd out&#xA;$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed ..&#xA;$ cmake --build . --config Release --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use other &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; configuration.&lt;/p&gt; &#xA;&lt;h4&gt;Premake5&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://premake.github.io/&#34;&gt;Premake5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;p&gt;To install the latest release of the Python module, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install brotli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the tip-of-the-tree version, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install --upgrade git+https://github.com/google/brotli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/google/brotli/master/python/README.md&#34;&gt;Python readme&lt;/a&gt; for more details on installing from source, development, and testing.&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quixdb.github.io/squash-benchmark/&#34;&gt;Squash Compression Benchmark&lt;/a&gt; / &lt;a href=&#34;https://quixdb.github.io/squash-benchmark/unstable/&#34;&gt;Unstable Squash Compression Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mattmahoney.net/dc/text.html&#34;&gt;Large Text Compression Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/powturbo/home/benchmark&#34;&gt;Lzturbo Benchmark&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related projects&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Brotli authors take no responsibility for the third party projects mentioned in this section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Independent &lt;a href=&#34;https://github.com/madler/brotli&#34;&gt;decoder&lt;/a&gt; implementation by Mark Adler, based entirely on format specification.&lt;/p&gt; &#xA;&lt;p&gt;JavaScript port of brotli &lt;a href=&#34;https://github.com/devongovett/brotli.js&#34;&gt;decoder&lt;/a&gt;. Could be used directly via &lt;code&gt;npm install brotli&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hand ported &lt;a href=&#34;https://github.com/dominikhlbg/BrotliHaxe&#34;&gt;decoder / encoder&lt;/a&gt; in haxe by Dominik Homberger. Output source code: JavaScript, PHP, Python, Java and C#&lt;/p&gt; &#xA;&lt;p&gt;7Zip &lt;a href=&#34;https://github.com/mcmilk/7-Zip-Zstd&#34;&gt;plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dart &lt;a href=&#34;https://github.com/thosakwe/brotli&#34;&gt;native bindings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dart compression framework with &lt;a href=&#34;https://pub.dev/documentation/es_compression/latest/brotli/brotli-library.html&#34;&gt;fast FFI-based Brotli implementation&lt;/a&gt; with ready-to-use prebuilt binaries for Win/Linux/Mac&lt;/p&gt;</summary>
  </entry>
</feed>