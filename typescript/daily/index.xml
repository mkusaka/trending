<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-21T01:41:07Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>justin-schroeder/arrow-js</title>
    <updated>2022-11-21T01:41:07Z</updated>
    <id>tag:github.com,2022-11-21:/justin-schroeder/arrow-js</id>
    <link href="https://github.com/justin-schroeder/arrow-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reactivity without the framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ArrowJS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/justin-schroeder/arrow-js/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;test badge&#34;&gt; &lt;img src=&#34;https://img.badgesize.io/https://cdn.jsdelivr.net/npm/@arrow-js/core@latest/dist/index.min.mjs.svg?compression=brotli&#34; alt=&#34;size badge&#34;&gt; &lt;a href=&#34;https://badge.fury.io/js/@arrow-js%2Fcore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/@arrow-js%2Fcore.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arrow-js.com&#34;&gt;Read the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The smallest (probably) reactive JavaScript library.&lt;/li&gt; &#xA; &lt;li&gt;Static by default, reactive by choice.&lt;/li&gt; &#xA; &lt;li&gt;No Virtual DOM&lt;/li&gt; &#xA; &lt;li&gt;Ultra fast.&lt;/li&gt; &#xA; &lt;li&gt;Zero dependencies.&lt;/li&gt; &#xA; &lt;li&gt;No build tools required (or even suggested).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experimental&lt;/h2&gt; &#xA;&lt;p&gt;This is an experimental package. Please &lt;a href=&#34;https://www.arrow-js.com&#34;&gt;read the docs&lt;/a&gt; and consider starring the package to signal you are interested in further development.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>farcasterxyz/hub</title>
    <updated>2022-11-21T01:41:07Z</updated>
    <id>tag:github.com,2022-11-21:/farcasterxyz/hub</id>
    <link href="https://github.com/farcasterxyz/hub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Farcaster Hub&lt;/h1&gt; &#xA;&lt;p&gt;A Hub is a server that stores and replicates Farcaster Messages.&lt;/p&gt; &#xA;&lt;p&gt;Users generate messages and upload them to Hub, which propagates them to other Hubs on the network. Hubs come together to form a causally consistent peer-to-peer network for storing data generated by Farcaster users. Read the &lt;a href=&#34;https://github.com/farcasterxyz/protocol&#34;&gt;protocol docs&lt;/a&gt; for a high-level overview of how Farcaster works.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;First, ensure that the following are installed globally on your machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;Node.js 18+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/lang/en/docs/install&#34;&gt;Yarn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn install&lt;/code&gt; to install dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn test&lt;/code&gt; to ensure that the test suite runs correctly&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn identity create&lt;/code&gt; to create a network identity for your Hub&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn start&lt;/code&gt; to boot up the Hub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will start an instance of the Hub that you can send messages to. Hubs do not (yet) peer automatically, this will be added closer to the v2 release in Q4 2022.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;A Hub is a single-process daemon that receives data from clients, other hubs and farcaster contracts. It has three main components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Storage Engine&lt;/a&gt; - accepts valid messages, merges them into a consistent state, and persists state to disk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;P2P Engine&lt;/a&gt; - gossips with other hubs to send and receive the latest messages on the network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Sync Engine&lt;/a&gt; - brings two hubs into sync when gossip messages between them fail to deliver.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR&#xA;subgraph Hub&#xA;&#xA;    subgraph Networking&#xA;        P2PEngine(P2PEngine) --&amp;gt; LibP2P(LibP2P)&#xA;        SyncEngine(SyncEngine) --&amp;gt; RPC(RPC Client)&#xA;    end&#xA;&#xA;    subgraph Storage&#xA;        StorageEngine(Storage Engine) --&amp;gt; Sets&#xA;        Sets(CRDT Sets) &amp;lt;--&amp;gt; DB[(Rocks&amp;lt;br/&amp;gt;DB)]&#xA;    end&#xA;&#xA;end&#xA;Node[ETH Node] -.-&amp;gt; |RPC| Hub&#xA;Clients[FC Clients] &amp;amp; Clients &amp;amp; Clients -.-&amp;gt; |RPC| Hub&#xA;Hub &amp;lt;-.-&amp;gt; |RPC + Gossip|Hubs[FC Hubs] &amp;amp; Hubs &amp;amp; Hubs&#xA;Storage &amp;lt;--&amp;gt; Networking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Storage Engine&lt;/h3&gt; &#xA;&lt;p&gt;The Storage Engine validates the signature and schema of every received message. It computes the set of valid signers for a user by tracking Farcaster contract events and uses this to verify each message.&lt;/p&gt; &#xA;&lt;p&gt;Verified messages are merged into a Set, a data structure that represents the current state of the user&#39;s data on the network. A Set uses CRDT&#39;s to ensure that merging a message is commutative, associative and idempotent. This means that two Hubs that receive a set of messages in any order will always end up in the same state.&lt;/p&gt; &#xA;&lt;p&gt;A successful state change triggers an event that is sent to the sync and p2p engines. The new state is persisted to disk via &lt;a href=&#34;https://github.com/facebook/rocksdb&#34;&gt;RocksDB&lt;/a&gt; so that the Hub can restore state if it goes down. The state can also be restored from an external store which makes starting new Hubs faster.&lt;/p&gt; &#xA;&lt;h3&gt;Sync Engine&lt;/h3&gt; &#xA;&lt;p&gt;The Sync Engine uses a &lt;a href=&#34;https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/&#34;&gt;Merkle Patricia Trie&lt;/a&gt; to track the set of known messages. When two Hubs communicate, the Sync Engine compares both tries to download new messages.&lt;/p&gt; &#xA;&lt;p&gt;When the Storage Engine persists a message, a &lt;code&gt;timestamp hash&lt;/code&gt; key is generated by combining the message&#39;s timestamp and hash. Such keys are unique and result in a trie that is chronologically ordered from left to right. Since messages arrive roughly chronologically, most insertions happen on the right-hand side of the tree, which makes diffing trees much faster.&lt;/p&gt; &#xA;&lt;p&gt;The diff between two tries is computed by determining the most chronologically recent branch on one Trie. For Hub A this would be &lt;code&gt;2022 -&amp;gt; Mar -&amp;gt; 11&lt;/code&gt; as highlighted in orange in the diagram below. The exclusion set is calculated which is the set of hashes for the highest nodes outside the recent branch. For Hub A this would be &lt;code&gt;[hash(2021), hash(Feb), hash(10)]&lt;/code&gt; highlighted in blue in the diagram below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD&#xA;    HubA(Hub A Root):::edge --&amp;gt; NodeA(2021):::excl &amp;amp; NodeB(2022)&#xA;    NodeB:::edge --&amp;gt; NodeB2(Feb):::excl&#xA;    NodeB2 --&amp;gt; NodeB2-1(1):::clear&#xA;    NodeB2 --&amp;gt;  NodeB2-2(2):::clear&#xA;    NodeB --&amp;gt; NodeB3(Mar):::edge&#xA;    NodeB3 --&amp;gt; NodeB3-1(10):::excl&#xA;    NodeB3 --&amp;gt; NodeB3-2(11):::edge&#xA;&#xA;&#xA;    HubB(Hub B Root):::edge --&amp;gt; NodeD(2021):::excl &amp;amp; NodeE(2022)&#xA;    NodeE:::edge --&amp;gt; NodeE2(Feb):::excl&#xA;    NodeE2 --&amp;gt; NodeE2-1(1):::clear&#xA;    NodeE2 --&amp;gt; NodeE2-2(2):::clear&#xA;    NodeE --&amp;gt; NodeE3(Mar):::edge&#xA;    NodeE3 --&amp;gt; NodeE3-1(10):::excl&#xA;    NodeE3 --&amp;gt; NodeE3-2(11):::edge&#xA;    NodeE3 --&amp;gt; NodeE3-3(12):::excl&#xA;    NodeE3 --&amp;gt; NodeE3-4(13):::excl&#xA;&#xA;    classDef edge fill:#ffcaaf;&#xA;    classDef excl fill:#c6e2e9;&#xA;    classDef clear fill:#ffffff;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hub A&#39;s Sync Engine sends the recent branch to B and asks for its exclusion set. Since Hub B has more recent messages, the exclusion set would be a&lt;code&gt;[hash(2021), hash(Feb), hash(10 + 12 + 13)]&lt;/code&gt;. By comparing exclusion sets the Sync Engine can determine that state diverges only in March 2022. A more traditional diffing algorithm can be used to walk the March trie to find the missing keys and request them from Hub B.&lt;/p&gt; &#xA;&lt;h3&gt;P2P Engine&lt;/h3&gt; &#xA;&lt;p&gt;The P2P Engine is responsible for gossiping messages to and from other Hubs on the Farcaster network. It uses &lt;a href=&#34;https://github.com/libp2p/libp2p&#34;&gt;LibP2P&lt;/a&gt;for the networking stack and is bootstrapped with a list of trusted peers.&lt;/p&gt; &#xA;&lt;p&gt;A Gossip message contains the most recent message discovered by the Hub along with the Hub&#39;s state expressed as the root of the merkle trie. The recipient can update its own state with the message and check if the merkle trie&#39;s match. If they do not, the Hubs have a different set of messages and will call their sync engines to execute a full sync.&lt;/p&gt; &#xA;&lt;h3&gt;Run-Loop&lt;/h3&gt; &#xA;&lt;p&gt;When a Hub boots up for the first time, it goes through the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and load a trusted snapshot of network state into the database (if available)&lt;/li&gt; &#xA; &lt;li&gt;Peer with other Hubs and start listening for Gossip Messages&lt;/li&gt; &#xA; &lt;li&gt;Start an RPC Client to get messages from Farcaster client applications.&lt;/li&gt; &#xA; &lt;li&gt;Connect to an ETH node and get events from &lt;a href=&#34;https://github.com/farcasterxyz/contracts&#34;&gt;Farcaster contracts&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a client sends a hub a new message over RPC:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Storage Engine writes the message to the database and fires an event.&lt;/li&gt; &#xA; &lt;li&gt;The Sync Engine adds the message id into its merkle trie and recalculates the root.&lt;/li&gt; &#xA; &lt;li&gt;The P2P Engine gossips the new message and the merkle trie root to its peers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a Hub receives gossip via P2P:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Storage Engine stores the message from the gossip, if it is new.&lt;/li&gt; &#xA; &lt;li&gt;The Sync engine updates its merkle trie root, and then compares it against the gossip&#39;s merkle trie root.&lt;/li&gt; &#xA; &lt;li&gt;If the roots do not match, the other Hub may have new messages&lt;/li&gt; &#xA; &lt;li&gt;The Sync engine fetches new messages and sends them to the Storage engine to be persisted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If an ETH node sends a new contract event via RPC:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Storage engine receives the message and updates internal state accordingly&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/wireit</title>
    <updated>2022-11-21T01:41:07Z</updated>
    <id>tag:github.com,2022-11-21:/google/wireit</id>
    <link href="https://github.com/google/wireit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wireit upgrades your npm scripts to make them smarter and more efficient.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/google/wireit/main/wireit.svg?sanitize=true&#34; height=&#34;125&#34; alt=&#34;wireit&#34;&gt; &#xA; &lt;p&gt;&lt;em&gt;Wireit upgrades your npm scripts to make them smarter and more efficient.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/wireit&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/wireit.svg?logo=npm&#34; alt=&#34;Published on npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/wireit/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/google/wireit/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🙂 Use the &lt;code&gt;npm run&lt;/code&gt; commands you already know&lt;/li&gt; &#xA; &lt;li&gt;⛓️ Automatically run dependencies between npm scripts in parallel&lt;/li&gt; &#xA; &lt;li&gt;👀 Watch any script and continuously re-run on changes&lt;/li&gt; &#xA; &lt;li&gt;🥬 Skip scripts that are already fresh&lt;/li&gt; &#xA; &lt;li&gt;♻️ Cache output locally and remotely on GitHub Actions for free&lt;/li&gt; &#xA; &lt;li&gt;🛠️ Works with single packages, npm workspaces, and other monorepos&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#vscode-extension&#34;&gt;VSCode Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#dependencies&#34;&gt;Dependencies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#vanilla-scripts&#34;&gt;Vanilla scripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cross-package-dependencies&#34;&gt;Cross-package dependencies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#parallelism&#34;&gt;Parallelism&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#extra-arguments&#34;&gt;Extra arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#input-and-output-files&#34;&gt;Input and output files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#incremental-build&#34;&gt;Incremental build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#caching&#34;&gt;Caching&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#local-caching&#34;&gt;Local caching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#github-actions-caching&#34;&gt;GitHub Actions caching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cleaning-output&#34;&gt;Cleaning output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#watch-mode&#34;&gt;Watch mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#services&#34;&gt;Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#execution-cascade&#34;&gt;Execution cascade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#failures-and-errors&#34;&gt;Failures and errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#package-locks&#34;&gt;Package locks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#recipes&#34;&gt;Recipes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#eslint&#34;&gt;ESLint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#reference&#34;&gt;Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#dependency-syntax&#34;&gt;Dependency syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#glob-patterns&#34;&gt;Glob patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#fingerprint&#34;&gt;Fingerprint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#related-tools&#34;&gt;Related tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i -D wireit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Wireit works &lt;em&gt;with&lt;/em&gt; &lt;code&gt;npm run&lt;/code&gt;, it doesn&#39;t replace it. To configure an NPM script for Wireit, move the command into a new &lt;code&gt;wireit&lt;/code&gt; section of your &lt;code&gt;package.json&lt;/code&gt;, and replace the original script with the &lt;code&gt;wireit&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Before&lt;/th&gt; &#xA;   &lt;th&gt;After&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre lang=&#34;json&#34;&gt;&#xA;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;tsc&#34;&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre lang=&#34;json&#34;&gt;&#xA;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;build&#34;: {&#xA;      &#34;command&#34;: &#34;tsc&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Now when you run &lt;code&gt;npm run build&lt;/code&gt;, Wireit upgrades the script to be smarter and more efficient. Wireit works with &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;yarn&lt;/a&gt; (both 1.X &#34;&lt;a href=&#34;https://classic.yarnpkg.com/&#34;&gt;Classic&lt;/a&gt;&#34; and its successor &#34;Berry&#34;) and &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt;, too.&lt;/p&gt; &#xA;&lt;p&gt;You should also add &lt;code&gt;.wireit&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; file. Wireit uses the &lt;code&gt;.wireit&lt;/code&gt; directory to store caches and other data for your scripts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo .wireit &amp;gt;&amp;gt; .gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VSCode Extension&lt;/h2&gt; &#xA;&lt;p&gt;If you use VSCode, consider installing the &lt;code&gt;google.wireit&lt;/code&gt; extension. It adds documentation on hover, autocomplete, can diagnose a number of common mistakes, and even suggest a refactoring to convert an npm script to use wireit.&lt;/p&gt; &#xA;&lt;p&gt;Install it &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=google.wireit&#34;&gt;from the marketplace&lt;/a&gt; or on the command line like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;code --install-extension google.wireit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;To declare a dependency between two scripts, edit the &lt;code&gt;wireit.&amp;lt;script&amp;gt;.dependencies&lt;/code&gt; list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;wireit&#34;,&#xA;    &#34;bundle&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;build&#34;: {&#xA;      &#34;command&#34;: &#34;tsc&#34;&#xA;    },&#xA;    &#34;bundle&#34;: {&#xA;      &#34;command&#34;: &#34;rollup -c&#34;,&#xA;      &#34;dependencies&#34;: [&#34;build&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now when you run &lt;code&gt;npm run bundle&lt;/code&gt;, the &lt;code&gt;build&lt;/code&gt; script will automatically run first.&lt;/p&gt; &#xA;&lt;h3&gt;Vanilla scripts&lt;/h3&gt; &#xA;&lt;p&gt;The scripts you depend on don&#39;t need to be configured for Wireit, they can be vanilla &lt;code&gt;npm&lt;/code&gt; scripts. This lets you only use Wireit for some of your scripts, or to upgrade incrementally. Scripts that haven&#39;t been configured for Wireit are always safe to use as dependencies; they just won&#39;t be fully optimized.&lt;/p&gt; &#xA;&lt;h3&gt;Cross-package dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Dependencies can refer to scripts in other npm packages by using a relative path with the syntax &lt;code&gt;&amp;lt;relative-path&amp;gt;:&amp;lt;script-name&amp;gt;&lt;/code&gt;. All cross-package dependencies should start with a &lt;code&gt;&#34;.&#34;&lt;/code&gt;. Cross-package dependencies work well for npm workspaces, as well as in other kinds of monorepos.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;build&#34;: {&#xA;      &#34;command&#34;: &#34;tsc&#34;,&#xA;      &#34;dependencies&#34;: [&#34;../other-package:build&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parallelism&lt;/h2&gt; &#xA;&lt;p&gt;Wireit will run scripts in parallel whenever it is safe to do so according to the dependency graph.&lt;/p&gt; &#xA;&lt;p&gt;For example, in this diagram, the &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; scripts will run in parallel, while the &lt;code&gt;A&lt;/code&gt; script won&#39;t start until both &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; finish.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD&#xA;  A--&amp;gt;B;&#xA;  A--&amp;gt;C;&#xA;  subgraph parallel&#xA;    B;&#xA;    C;&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Wireit will run up to 2 scripts in parallel for every logical CPU core detected on your system. To change this default, set the &lt;code&gt;WIREIT_PARALLEL&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#environment-variables&#34;&gt;environment variable&lt;/a&gt; to a positive integer, or &lt;code&gt;infinity&lt;/code&gt; to run without a limit. You may want to lower this number if you experience resource starvation in large builds. For example, to run only one script at a time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export WIREIT_PARALLEL=1&#xA;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If two or more seperate &lt;code&gt;npm run&lt;/code&gt; commands are run for the same Wireit script simultaneously, then only one instance will be allowed to run at a time, while the others wait their turn. This prevents coordination problems that can result in incorrect output files being produced. If &lt;code&gt;output&lt;/code&gt; is set to an empty array, then this restriction is removed.&lt;/p&gt; &#xA;&lt;h2&gt;Extra arguments&lt;/h2&gt; &#xA;&lt;p&gt;As with plain npm scripts, you can pass extra arguments to a Wireit script by placing a &lt;code&gt;--&lt;/code&gt; double-dash argument in front of them. Any arguments after a &lt;code&gt;--&lt;/code&gt; are sent to the underlying command, instead of being interpreted as arguments to npm or Wireit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build -- --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Input and output files&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;files&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; properties of &lt;code&gt;wireit.&amp;lt;script&amp;gt;&lt;/code&gt; tell Wireit what your script&#39;s input and output files are, respectively. They should be arrays of &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#glob-patterns&#34;&gt;glob patterns&lt;/a&gt;, where paths are interpreted relative to the package directory. They can be set on some, all, or none of your scripts.&lt;/p&gt; &#xA;&lt;p&gt;Setting these properties allow you to use more features of Wireit:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Requires&lt;br&gt;&lt;code&gt;files&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Requires&lt;br&gt;&lt;code&gt;output&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#dependencies&#34;&gt;&lt;strong&gt;Dependency graph&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#watch-mode&#34;&gt;&lt;strong&gt;Watch mode&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cleaning-output&#34;&gt;&lt;strong&gt;Clean build&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;☑️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#incremental-build&#34;&gt;&lt;strong&gt;Incremental build&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;☑️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#caching&#34;&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;☑️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example configuration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;wireit&#34;,&#xA;    &#34;bundle&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;build&#34;: {&#xA;      &#34;command&#34;: &#34;tsc&#34;,&#xA;      &#34;files&#34;: [&#34;src/**/*.ts&#34;, &#34;tsconfig.json&#34;],&#xA;      &#34;output&#34;: [&#34;lib/**&#34;]&#xA;    },&#xA;    &#34;bundle&#34;: {&#xA;      &#34;command&#34;: &#34;rollup -c&#34;,&#xA;      &#34;dependencies&#34;: [&#34;build&#34;],&#xA;      &#34;files&#34;: [&#34;rollup.config.json&#34;],&#xA;      &#34;output&#34;: [&#34;dist/bundle.js&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Default excluded paths&lt;/h4&gt; &#xA;&lt;p&gt;By default, the following folders are excluded from the &lt;code&gt;files&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; arrays:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.git/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.hg/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.svn/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.wireit/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CVS/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node_modules/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the highly unusual case that you need to reference a file in one of those folders, set &lt;code&gt;allowUsuallyExcludedPaths: true&lt;/code&gt; to remove all default excludes.&lt;/p&gt; &#xA;&lt;h2&gt;Incremental build&lt;/h2&gt; &#xA;&lt;p&gt;Wireit can automatically skip execution of a script if nothing has changed that would cause it to produce different output since the last time it ran. This is called &lt;em&gt;incremental build&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable incremental build, configure the input and output files for each script by specifying &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#glob-patterns&#34;&gt;glob patterns&lt;/a&gt; in the &lt;code&gt;wireit.&amp;lt;script&amp;gt;.files&lt;/code&gt; and &lt;code&gt;wireit.&amp;lt;script&amp;gt;.output&lt;/code&gt; arrays.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ If a script doesn&#39;t have a &lt;code&gt;files&lt;/code&gt; or &lt;code&gt;output&lt;/code&gt; list defined at all, then it will &lt;em&gt;always&lt;/em&gt; run, because Wireit doesn&#39;t know which files to check for changes. To tell Wireit it is safe to skip execution of a script that definitely has no input and/or files, set &lt;code&gt;files&lt;/code&gt; and/or &lt;code&gt;output&lt;/code&gt; to an empty array (&lt;code&gt;files: [], output: []&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Caching&lt;/h2&gt; &#xA;&lt;p&gt;If a script has previously succeeded with the same configuration and input files, then Wireit can copy the output from a cache, instead of running the command. This can significantly improve build and test time.&lt;/p&gt; &#xA;&lt;p&gt;To enable caching for a script, ensure you have defined both the &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#input-and-output-files&#34;&gt;&lt;code&gt;files&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt;&lt;/a&gt; arrays.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ If a script doesn&#39;t produce any output files, it can still be cached by setting &lt;code&gt;output&lt;/code&gt; to an empty array (&lt;code&gt;&#34;output&#34;: []&lt;/code&gt;). Empty output is common for tests, and is useful because it allows you to skip running tests if they previously passed with the exact same inputs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Local caching&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;em&gt;local&lt;/em&gt; mode, Wireit caches &lt;code&gt;output&lt;/code&gt; files to the &lt;code&gt;.wireit&lt;/code&gt; folder inside each of your packages.&lt;/p&gt; &#xA;&lt;p&gt;Local caching is enabled by default, unless the &lt;a href=&#34;https://docs.github.com/en/enterprise-cloud@latest/actions/learn-github-actions/environment-variables#default-environment-variables&#34;&gt;&lt;code&gt;CI=true&lt;/code&gt;&lt;/a&gt; environment variable is detected. To force local caching, set &lt;code&gt;WIREIT_CACHE=local&lt;/code&gt;. To disable local caching, set &lt;code&gt;WIREIT_CACHE=none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Wireit does not currently limit the size of local caches. To free up this space, use &lt;code&gt;rm -rf .wireit/*/cache&lt;/code&gt;. Automatic cache size limits will be added in an upcoming release, tracked at &lt;a href=&#34;https://github.com/google/wireit/issues/71&#34;&gt;wireit#71&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;GitHub Actions caching&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;em&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/em&gt; mode, Wireit caches &lt;code&gt;output&lt;/code&gt; files to the &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows&#34;&gt;GitHub Actions cache&lt;/a&gt; service. This service is available whenever running in GitHub Actions, and is free for all GitHub users.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ GitHub Actions cache entries are automatically deleted after 7 days, or if total usage exceeds 10 GB (the least recently used cache entry is deleted first). See the &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy&#34;&gt;GitHub Actions documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To enable caching on GitHub Actions, add the following &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses&#34;&gt;&lt;code&gt;uses&lt;/code&gt;&lt;/a&gt; clause to your workflow. It can appear anywhere before the first &lt;code&gt;npm run&lt;/code&gt; or &lt;code&gt;npm test&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: google/wireit@setup-github-actions-caching/v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example workflow&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# File: .github/workflows/tests.yml&#xA;&#xA;name: Tests&#xA;on: [push, pull_request]&#xA;jobs:&#xA;  tests:&#xA;    os: ubuntu-20.04&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;      - uses: actions/setup-node@v3&#xA;        with:&#xA;          node-version: 16&#xA;          cache: true&#xA;&#xA;      # Set up GitHub Actions caching for Wireit.&#xA;      - uses: google/wireit@setup-github-actions-caching/v1&#xA;&#xA;      # Install npm dependencies.&#xA;      - run: npm ci&#xA;&#xA;      # Run tests. Wireit will automatically use&#xA;      # the GitHub Actions cache whenever possible.&#xA;      - run: npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cleaning output&lt;/h2&gt; &#xA;&lt;p&gt;Wireit can automatically delete output files from previous runs before executing a script. This is helpful for ensuring that every build is clean and free from outdated files created in previous runs from source files that have since been removed.&lt;/p&gt; &#xA;&lt;p&gt;Cleaning is enabled by default as long as the &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#input-and-output-files&#34;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; array is defined. To change this behavior, set the &lt;code&gt;wireit.&amp;lt;script&amp;gt;.clean&lt;/code&gt; property to one of these values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean before every run (the default).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;if-file-deleted&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean only if an input file has been deleted since the last run.&lt;br&gt;&lt;br&gt;Use this option for tools that have incremental build support, but do not clean up outdated output when a source file has been deleted, such as &lt;code&gt;tsc --build&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#typescript&#34;&gt;TypeScript&lt;/a&gt; for more on this example.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do not clean.&lt;br&gt;&lt;br&gt;Only use this option if you are certain that the script command itself already takes care of removing outdated files from previous runs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Watch mode&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;em&gt;watch&lt;/em&gt; mode, Wireit monitors all &lt;code&gt;files&lt;/code&gt; of a script, and all &lt;code&gt;files&lt;/code&gt; of its transitive dependencies, and when there is a change, it re-runs only the affected scripts. To enable watch mode, ensure that the &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#input-and-output-files&#34;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; array is defined, and add the &lt;code&gt;--watch&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run &amp;lt;script&amp;gt; --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The benefit of Wireit&#39;s watch mode over built-in watch modes are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wireit watches the entire dependency graph, so a single watch command replaces many built-in ones.&lt;/li&gt; &#xA; &lt;li&gt;It prevents problems that can occur when running many separate watch commands simultaneously, such as build steps being triggered before all preceding steps have finished.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;p&gt;By default, Wireit assumes that your scripts will eventually exit by themselves. This is well suited for build and test scripts, but not for long-running processes like servers. To tell Wireit that a process is long-running and not expected to exit by itself, set &lt;code&gt;&#34;service&#34;: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;start&#34;: &#34;wireit&#34;,&#xA;    &#34;build:server&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;start&#34;: {&#xA;      &#34;command&#34;: &#34;node my-server.js&#34;,&#xA;      &#34;service&#34;: true,&#xA;      &#34;files&#34;: [&#34;my-server.js&#34;],&#xA;      &#34;dependencies&#34;: [&#xA;        &#34;build:server&#34;,&#xA;        {&#xA;          &#34;script&#34;: &#34;../assets:build&#34;,&#xA;          &#34;cascade&#34;: false&#xA;        }&#xA;      ]&#xA;    },&#xA;    &#34;build:server&#34;: {&#xA;      ...&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Service lifetime&lt;/h3&gt; &#xA;&lt;p&gt;If a service is run &lt;em&gt;directly&lt;/em&gt; (e.g. &lt;code&gt;npm run serve&lt;/code&gt;), then it will stay running until the user kills Wireit (e.g. &lt;code&gt;Ctrl-C&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If a service is a &lt;em&gt;dependency&lt;/em&gt; of one or more other scripts, then it will start up before any depending script runs, and will shut down after all depending scripts finish.&lt;/p&gt; &#xA;&lt;h3&gt;Service readiness&lt;/h3&gt; &#xA;&lt;p&gt;By default, a service is considered &lt;em&gt;ready&lt;/em&gt; as soon as its process spawns, allowing any scripts that depend on that service to start.&lt;/p&gt; &#xA;&lt;p&gt;However, often times a service needs to perform certain actions before it is safe for dependents to interact with it, such as starting a server and listening on a network interface.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;service.readyWhen.lineMatches&lt;/code&gt; to tell Wireit to monitor the &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; of the service and defer readiness until a line is printed that matches the given regular expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;command&#34;: &#34;node my-server.js&#34;,&#xA;  &#34;service&#34;: {&#xA;    &#34;readyWhen&#34;: {&#xA;      &#34;lineMatches&#34;: &#34;Server listening on port \\d+&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Service restarts&lt;/h3&gt; &#xA;&lt;p&gt;In watch mode, a service will be restarted whenever one of its input files or dependencies change, except for dependencies with &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#execution-cascade&#34;&gt;&lt;code&gt;cascade&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Service output&lt;/h3&gt; &#xA;&lt;p&gt;Services cannot have &lt;code&gt;output&lt;/code&gt; files, because there is no way for Wireit to know when a service has finished writing its output.&lt;/p&gt; &#xA;&lt;p&gt;If you have a service that produces output, you should define a &lt;em&gt;non-service&lt;/em&gt; script that depends on it, and which exits when the service&#39;s output is complete.&lt;/p&gt; &#xA;&lt;h2&gt;Execution cascade&lt;/h2&gt; &#xA;&lt;p&gt;By default, a script always needs to run (or restart in the case of &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#services&#34;&gt;&lt;code&gt;services&lt;/code&gt;&lt;/a&gt;) if any of its dependencies needed to run, &lt;em&gt;regardless of whether the dependency produced new or relevant output&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This automatic &lt;em&gt;cascade&lt;/em&gt; of script execution is the default behavior because it ensures that any &lt;em&gt;possible&lt;/em&gt; output produced by a dependent script propagates to all other scripts that might depend on it. In other words, Wireit does not assume that the &lt;code&gt;files&lt;/code&gt; array completely describes the inputs to a script with dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling cascade&lt;/h3&gt; &#xA;&lt;p&gt;This execution cascade behavior can be disabled by expanding a dependency into an object, and setting the &lt;code&gt;cascade&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; What really happens under the hood is that the &lt;code&gt;cascade&lt;/code&gt; property simply controls whether the &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#fingerprint&#34;&gt;fingerprint&lt;/a&gt; of a script &lt;em&gt;includes the fingerprints of its dependencies&lt;/em&gt;, which in turn determines whether a script needs to run or restart.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;dependencies&#34;: [&#xA;    {&#xA;      &#34;script&#34;: &#34;foo&#34;,&#xA;      &#34;cascade&#34;: false&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reasons to disable cascade&lt;/h3&gt; &#xA;&lt;p&gt;There are two main reasons you might want to set &lt;code&gt;cascade&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Your script only consumes a subset of a dependency&#39;s output.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For example, &lt;code&gt;tsc&lt;/code&gt; produces both &lt;code&gt;.js&lt;/code&gt; files and &lt;code&gt;.d.ts&lt;/code&gt; files, but only the &lt;code&gt;.js&lt;/code&gt; files might be consumed by &lt;code&gt;rollup&lt;/code&gt;. There is no need to re-bundle when a typings-only changed occured.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; In addition to setting &lt;code&gt;cascade&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, the subset of output that &lt;em&gt;does&lt;/em&gt; matter (&lt;code&gt;lib/**/*.js&lt;/code&gt;) has been added to the &lt;code&gt;files&lt;/code&gt; array.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;wireit&#34;,&#xA;    &#34;bundle&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;build&#34;: {&#xA;      &#34;command&#34;: &#34;tsc&#34;,&#xA;      &#34;files&#34;: [&#34;src/**/*.ts&#34;, &#34;tsconfig.json&#34;],&#xA;      &#34;output&#34;: [&#34;lib/**&#34;]&#xA;    },&#xA;    &#34;bundle&#34;: {&#xA;      &#34;command&#34;: &#34;rollup -c&#34;,&#xA;      &#34;dependencies&#34;: [&#xA;        {&#xA;          &#34;script&#34;: &#34;build&#34;,&#xA;          &#34;cascade&#34;: false&#xA;        }&#xA;      ],&#xA;      &#34;files&#34;: [&#34;rollup.config.json&#34;, &#34;lib/**/*.js&#34;],&#xA;      &#34;output&#34;: [&#34;dist/bundle.js&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Your server doesn&#39;t need to restart for certain changes.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For example, a web server depends on some static assets, but the server reads those assets from disk dynamically on each request. In &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#watch-mode&#34;&gt;&lt;code&gt;watch&lt;/code&gt;&lt;/a&gt; mode, there is no need to restart the server when the assets change.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;build:server&lt;/code&gt; dependency uses the default &lt;code&gt;cascade&lt;/code&gt; behavior (&lt;code&gt;true&lt;/code&gt;), because changing the implementation of the server itself &lt;em&gt;does&lt;/em&gt; require the server to be restarted.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;start&#34;: &#34;wireit&#34;,&#xA;    &#34;build:server&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;start&#34;: {&#xA;      &#34;command&#34;: &#34;node lib/server.js&#34;,&#xA;      &#34;service&#34;: true,&#xA;      &#34;dependencies&#34;: [&#xA;        &#34;build:server&#34;,&#xA;        {&#xA;          &#34;script&#34;: &#34;../assets:build&#34;,&#xA;          &#34;cascade&#34;: false&#xA;        }&#xA;      ],&#xA;      &#34;files&#34;: [&#34;lib/**/*.js&#34;]&#xA;    },&#xA;    &#34;build:server&#34;: {&#xA;      &#34;command&#34;: &#34;tsc&#34;,&#xA;      &#34;files&#34;: [&#34;src/**/*.ts&#34;, &#34;tsconfig.json&#34;],&#xA;      &#34;output&#34;: [&#34;lib/**&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Failures and errors&lt;/h2&gt; &#xA;&lt;p&gt;By default, when a script fails (meaning it returned with a non-zero exit code), all scripts that are already running are allowed to finish, but new scripts are not started.&lt;/p&gt; &#xA;&lt;p&gt;In some situations a different behavior may be better suited. There are 2 additional modes, which you can set with the &lt;code&gt;WIREIT_FAILURES&lt;/code&gt; environment variable. Note that Wireit always ultimately exits with a non-zero exit code if there was a failure, regardless of the mode.&lt;/p&gt; &#xA;&lt;h3&gt;Continue&lt;/h3&gt; &#xA;&lt;p&gt;When a failure occurs in &lt;code&gt;continue&lt;/code&gt; mode, running scripts continue, and new scripts are started as long as the failure did not affect their dependencies. This mode is useful if you want a complete picture of which scripts are succeeding and which are failing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WIREIT_FAILURES=continue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Kill&lt;/h3&gt; &#xA;&lt;p&gt;When a failure occurs in &lt;code&gt;kill&lt;/code&gt; mode, running scripts are immediately killed, and new scripts are not started. This mode is useful if you want to be notified as soon as possible about any failures.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WIREIT_FAILURES=kill&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Package locks&lt;/h2&gt; &#xA;&lt;p&gt;By default, Wireit automatically treats &lt;a href=&#34;https://docs.npmjs.com/cli/v8/configuring-npm/package-lock-json&#34;&gt;&lt;code&gt;package-lock.json&lt;/code&gt;&lt;/a&gt; files in the package directory, plus all parent directories, as input files. This is useful because installing or upgrading your dependencies can affect the behavior of your scripts, so it&#39;s important to re-run them whenever your dependencies change.&lt;/p&gt; &#xA;&lt;p&gt;If you are using an alternative package manager instead of npm, then your package lock files might be named something else. Some examples are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yarn: &lt;a href=&#34;https://yarnpkg.com/configuration/yarnrc#lockfileFilename&#34;&gt;&lt;code&gt;yarn.lock&lt;/code&gt;&lt;/a&gt; (configurable)&lt;/li&gt; &#xA; &lt;li&gt;pnpm: &lt;a href=&#34;https://pnpm.io/git#lockfiles&#34;&gt;&lt;code&gt;pnpm-lock.yaml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change the name of the package lock files Wireit should look for, specify it in the &lt;code&gt;wireit.&amp;lt;script&amp;gt;.packageLocks&lt;/code&gt; array. Wireit will look for the given filenames in the script&#39;s directory, as well as in all of its parent directories. You can specify multiple filenames here, if needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;build&#34;: {&#xA;      &#34;command&#34;: &#34;tsc&#34;,&#xA;      &#34;files&#34;: [&#34;src/**/*.ts&#34;, &#34;tsconfig.json&#34;],&#xA;      &#34;output&#34;: [&#34;lib/**&#34;],&#xA;      &#34;packageLocks&#34;: [&#34;yarn.lock&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re sure that a script isn&#39;t affected by dependencies at all, you can turn off this behavior entirely to improve your cache hit rate by setting &lt;code&gt;wireit.&amp;lt;script&amp;gt;.packageLocks&lt;/code&gt; to &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Recipes&lt;/h2&gt; &#xA;&lt;p&gt;This section contains advice about integrating specific build tools with Wireit.&lt;/p&gt; &#xA;&lt;h3&gt;TypeScript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;ts&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;ts&#34;: {&#xA;      &#34;command&#34;: &#34;tsc --build --pretty&#34;,&#xA;      &#34;clean&#34;: &#34;if-file-deleted&#34;,&#xA;      &#34;files&#34;: [&#34;src/**/*.ts&#34;, &#34;tsconfig.json&#34;],&#xA;      &#34;output&#34;: [&#34;lib/**&#34;, &#34;.tsbuildinfo&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#incremental&#34;&gt;&lt;code&gt;&#34;incremental&#34;: true&lt;/code&gt;&lt;/a&gt; and use &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/project-references.html#build-mode-for-typescript&#34;&gt;&lt;code&gt;--build&lt;/code&gt;&lt;/a&gt; to enable incremental compilation, which significantly improves performance.&lt;/li&gt; &#xA; &lt;li&gt;Include &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#tsBuildInfoFile&#34;&gt;&lt;code&gt;.tsbuildinfo&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;output&lt;/code&gt; so that it is reset on clean builds. Otherwise &lt;code&gt;tsc&lt;/code&gt; will get out of sync and produce incorrect output.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cleaning-output&#34;&gt;&lt;code&gt;&#34;clean&#34;: &#34;if-file-deleted&#34;&lt;/code&gt;&lt;/a&gt; so that you get fast incremental compilation when sources are changed/added, but also stale outputs are cleaned up when a source is deleted (&lt;code&gt;tsc&lt;/code&gt; does not clean up stale outputs by itself).&lt;/li&gt; &#xA; &lt;li&gt;Include &lt;code&gt;tsconfig.json&lt;/code&gt; in &lt;code&gt;files&lt;/code&gt; so that changing your configuration re-runs &lt;code&gt;tsc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#pretty&#34;&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/a&gt; to get colorful output despite not being attached to a TTY.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ESLint&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;lint&#34;: &#34;wireit&#34;&#xA;  },&#xA;  &#34;wireit&#34;: {&#xA;    &#34;lint&#34;: {&#xA;      &#34;command&#34;: &#34;eslint --color --cache --cache-location .eslintcache .&#34;,&#xA;      &#34;files&#34;: [&#34;src/**/*.ts&#34;, &#34;.eslintignore&#34;, &#34;.eslintrc.cjs&#34;],&#xA;      &#34;output&#34;: []&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://eslint.org/docs/user-guide/command-line-interface#caching&#34;&gt;&lt;code&gt;--cache&lt;/code&gt;&lt;/a&gt; so that &lt;code&gt;eslint&lt;/code&gt; only lints the files that were added or changed since the last run, which significantly improves performance.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://eslint.org/docs/user-guide/command-line-interface#--color---no-color&#34;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; to get colorful output despite not being attached to a TTY.&lt;/li&gt; &#xA; &lt;li&gt;Include config and ignore files in &lt;code&gt;files&lt;/code&gt; so that changing your configuration re-runs &lt;code&gt;eslint&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The following properties can be set inside &lt;code&gt;wireit.&amp;lt;script&amp;gt;&lt;/code&gt; objects in &lt;code&gt;package.json&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The shell command to run.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dependencies&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string[] | object[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#dependencies&#34;&gt;Scripts that must run before this one&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dependencies[i].script&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#dependencies&#34;&gt;The name of the script, when the dependency is an object.&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dependencies[i].cascade&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#execution-cascade&#34;&gt;Whether this dependency always causes this script to re-execute&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Input file &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#glob-patterns&#34;&gt;glob patterns&lt;/a&gt;, used to determine the &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#fingerprint&#34;&gt;fingerprint&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Output file &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#glob-patterns&#34;&gt;glob patterns&lt;/a&gt;, used for &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#caching&#34;&gt;caching&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cleaning-output&#34;&gt;cleaning&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean | &#34;if-file-deleted&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cleaning-output&#34;&gt;Delete output files before running&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;service&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cleaning-output&#34;&gt;Whether this script is long-running, e.g. a server&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;packageLocks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&#39;package-lock.json&#39;]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#package-locks&#34;&gt;Names of package lock files&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Dependency syntax&lt;/h3&gt; &#xA;&lt;p&gt;The following syntaxes can be used in the &lt;code&gt;wireit.&amp;lt;script&amp;gt;.dependencies&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Script named &lt;code&gt;&#34;foo&#34;&lt;/code&gt; in the same package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;../foo:bar&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Script named &lt;code&gt;&#34;bar&#34;&lt;/code&gt; in the package found at &lt;code&gt;../foo&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#cross-package-dependencies&#34;&gt;details&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;The following environment variables affect the behavior of Wireit:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WIREIT_FAILURES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#failures-and-errors&#34;&gt;How to handle script failures&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Options:&lt;br&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#failures-and-errors&#34;&gt;&lt;code&gt;no-new&lt;/code&gt;&lt;/a&gt; (default): Allow running scripts to finish, but don&#39;t start new ones.&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#continue&#34;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt;: Allow running scripts to continue, and start new ones unless any of their dependencies failed.&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#kill&#34;&gt;&lt;code&gt;kill&lt;/code&gt;&lt;/a&gt;: Immediately kill running scripts, and don&#39;t start new ones.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WIREIT_PARALLEL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#parallelism&#34;&gt;Maximum number of scripts to run at one time&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Defaults to 2×logical CPU cores.&lt;br&gt;&lt;br&gt;Must be a positive integer or &lt;code&gt;infinity&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WIREIT_CACHE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#caching&#34;&gt;Caching mode&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Defaults to &lt;code&gt;local&lt;/code&gt; unless &lt;code&gt;CI&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, in which case defaults to &lt;code&gt;none&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Automatically set to &lt;code&gt;github&lt;/code&gt; by the &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#github-actions-caching&#34;&gt;&lt;code&gt;google/wireit@setup-github-actions-caching/v1&lt;/code&gt;&lt;/a&gt; action.&lt;br&gt;&lt;br&gt;Options:&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#local-caching&#34;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt;: Cache to local disk.&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#github-actions-caching&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;: Cache to GitHub Actions.&lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;none&lt;/code&gt;: Disable caching.&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Affects the default value of &lt;code&gt;WIREIT_CACHE&lt;/code&gt;.&lt;br&gt;&lt;br&gt;Automatically set to &lt;code&gt;true&lt;/code&gt; by &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables&#34;&gt;GitHub Actions&lt;/a&gt; and most other CI (continuous integration) services.&lt;br&gt;&lt;br&gt;Must be exactly &lt;code&gt;true&lt;/code&gt;. If unset or any other value, interpreted as &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Glob patterns&lt;/h3&gt; &#xA;&lt;p&gt;The following glob syntaxes are supported in the &lt;code&gt;files&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; arrays:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The file named &lt;code&gt;foo&lt;/code&gt;, or if &lt;code&gt;foo&lt;/code&gt; is a directory, all recursive children of &lt;code&gt;foo&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;foo/*.js&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All files directly in the &lt;code&gt;foo/&lt;/code&gt; directory which end in &lt;code&gt;.js&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;foo/**/*.js&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All files in the &lt;code&gt;foo/&lt;/code&gt; directory, and all recursive subdirectories, which end in &lt;code&gt;.js&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;foo.{html,js}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Files named &lt;code&gt;foo.html&lt;/code&gt; or &lt;code&gt;foo.js&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!foo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exclude the file or directory &lt;code&gt;foo&lt;/code&gt; from previous matches.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Also note these details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Paths should always use &lt;code&gt;/&lt;/code&gt; (forward-slash) delimiters, even on Windows.&lt;/li&gt; &#xA; &lt;li&gt;Paths are interpreted relative to the current package even if there is a leading &lt;code&gt;/&lt;/code&gt; (e.g. &lt;code&gt;/foo&lt;/code&gt; is the same as &lt;code&gt;foo&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Whenever a directory is matched, all recursive children of that directory are included.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;files&lt;/code&gt; are allowed to reach outside of the current package using e.g. &lt;code&gt;../foo&lt;/code&gt;. &lt;code&gt;output&lt;/code&gt; files cannot reference files outside of the current package.&lt;/li&gt; &#xA; &lt;li&gt;Symlinks in input &lt;code&gt;files&lt;/code&gt; are followed, so that they are identified by their content.&lt;/li&gt; &#xA; &lt;li&gt;Symlinks in &lt;code&gt;output&lt;/code&gt; files are cached as symlinks, so that restoring from cache doesn&#39;t create unnecessary copies.&lt;/li&gt; &#xA; &lt;li&gt;The order of &lt;code&gt;!exclude&lt;/code&gt; patterns is significant.&lt;/li&gt; &#xA; &lt;li&gt;Hidden/dot files are matched by &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Patterns are case-sensitive (if supported by the filesystem).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fingerprint&lt;/h3&gt; &#xA;&lt;p&gt;The following inputs determine the &lt;em&gt;fingerprint&lt;/em&gt; for a script. This value is used to determine whether a script can be skipped for &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#incremental-build&#34;&gt;incremental build&lt;/a&gt;, and whether its output can be &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#caching&#34;&gt;restored from cache&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;command&lt;/code&gt; setting.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#extra-arguments&#34;&gt;extra arguments&lt;/a&gt; set on the command-line.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;clean&lt;/code&gt; setting.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;output&lt;/code&gt; glob patterns.&lt;/li&gt; &#xA; &lt;li&gt;The SHA256 content hashes of all files matching &lt;code&gt;files&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The SHA256 content hashes of all files matching &lt;code&gt;packageLocks&lt;/code&gt; in the current package and all parent directories.&lt;/li&gt; &#xA; &lt;li&gt;The system platform (e.g. &lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;win32&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The system CPU architecture (e.g. &lt;code&gt;x64&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The system Node version (e.g. &lt;code&gt;16.7.0&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The fingerprint of all transitive dependencies, unless &lt;code&gt;cascade&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/#github-actions-caching&#34;&gt;GitHub Actions caching&lt;/a&gt;, the following input also affects the fingerprint:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;ImageOS&lt;/code&gt; environment variable (e.g. &lt;code&gt;ubuntu20&lt;/code&gt;, &lt;code&gt;macos11&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Wireit is supported on Linux, macOS, and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Wireit is supported on Node Current (19), LTS (18), and Maintenance (16 and 14). See &lt;a href=&#34;https://nodejs.org/en/about/releases/&#34;&gt;Node releases&lt;/a&gt; for the schedule.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Wireit will no longer work with Node 14 when it reaches end-of-life on 2023-04-30. We recommend upgrading to Node 18 as soon as possible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Wireit is supported on the npm versions that ship with the latest versions of the above supported Node versions (6 and 8), Yarn Classic (1), Yarn Berry (3), and pnpm (7).&lt;/p&gt; &#xA;&lt;h2&gt;Related tools&lt;/h2&gt; &#xA;&lt;p&gt;Wireit shares a number of features with these other great tools, and we highly recommend you check them out too:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nx.dev/&#34;&gt;Nx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://turborepo.org/&#34;&gt;Turborepo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chompbuild.com/&#34;&gt;Chomp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazel.build/&#34;&gt;Bazel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some things you might especially like about Wireit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Feels like npm&lt;/strong&gt;. When you use Wireit, you&#39;ll continue typing the same npm commands you already use, like &lt;code&gt;npm run build&lt;/code&gt; and &lt;code&gt;npm test&lt;/code&gt;. There are no new command-line tools to learn, and there&#39;s only one way to run each script. Your script config stays in your &lt;code&gt;package.json&lt;/code&gt;, too. Wireit is designed to be the minimal addition to npm needed to get script dependencies and incremental build.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Caching with GitHub Actions&lt;/strong&gt;. Wireit supports caching build artifacts and test results directly through GitHub Actions, without any extra third-party services. Just add a single &lt;code&gt;uses:&lt;/code&gt; line to your workflows.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Watch any script&lt;/strong&gt;. Want to automatically re-run your build and tests whenever you make a change? Type &lt;code&gt;npm test --watch&lt;/code&gt;. Any script you&#39;ve configured using Wireit can be watched by typing &lt;code&gt;--watch&lt;/code&gt; after it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Great for single packages and monorepos&lt;/strong&gt;. Wireit has no opinion about how your packages are arranged. It works great with single packages, because you can link together scripts within the same package. It also works great with any kind of monorepo, because you can link together scripts across different packages using relative paths.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Complements npm workspaces&lt;/strong&gt;. We think Wireit could be the missing tool that unlocks the potential for &lt;a href=&#34;https://docs.npmjs.com/cli/v8/using-npm/workspaces&#34;&gt;npm workspaces&lt;/a&gt; to become the best way to set up monorepos. To use Wireit with npm workspaces, you&#39;ll just use standard npm workspace commands like &lt;code&gt;npm run build -ws&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Adopt incrementally&lt;/strong&gt;. Wireit scripts can depend on plain npm scripts, so they can be freely mixed. This means you can use Wireit only for the parts of your build that need it most, or you can try it out on a script-by-script basis without changing too much at the same time.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/wireit/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>