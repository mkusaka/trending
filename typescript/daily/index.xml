<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:39:50Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NoteProtocol/NoteWallet</title>
    <updated>2024-02-25T01:39:50Z</updated>
    <id>tag:github.com,2024-02-25:/NoteProtocol/NoteWallet</id>
    <link href="https://github.com/NoteProtocol/NoteWallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Command Line Wallet to Send/Receive BTC and NOTE Tokens&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NOTE Wallet (Community Version)&lt;/h1&gt; &#xA;&lt;p&gt;The wallet is a simple CLI tool to manage Bitcoin and NOTE crypto assets.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;install nodejs and npm or yarn or pnpm, first.&lt;/p&gt; &#xA;&lt;p&gt;then install the dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;rename &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;, and fill in the required information.&lt;/p&gt; &#xA;&lt;p&gt;Setup your wallet WALLET_MNEMONIC in &lt;code&gt;.env&lt;/code&gt;, if you keep empty, the tool will generate a new one. backup your mnemonic, it&#39;s your only chance to recover your wallet.&lt;/p&gt; &#xA;&lt;h2&gt;Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show Balance&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;balance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Charge some satoshis to &lt;code&gt;mainAddress&lt;/code&gt;, then check the balance of &lt;code&gt;mainAddress&lt;/code&gt; with &#39;balance&#39; command.&lt;/p&gt; &#xA;&lt;h2&gt;Show Token List and Balance&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;tokenlist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mint NOTE Token&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;mintnote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Send tokens to tokenAddress of others&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sendtoken [token address] [tick] [amount]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;a donate example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sendtoken bc1p6ule9mj6u9tqzuq5zk9kn3sqlg788kzkpj63ff6j8jm26mvy8evsmqhz4n NOTE 1000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;amount is with decimal point, 1 NOTE = 100,000,000 sats. the example amount 1,000,000 sats = 0.01 NOTE.&lt;/p&gt; &#xA;&lt;h2&gt;Check Token Balance&lt;/h2&gt; &#xA;&lt;p&gt;Wait some minutes for the transaction to be confirmed, then check the balance of N20 Tokens with &#39;balance&#39; and &#39;tokenlist&#39; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;balance&#xA;&#xA;tokenlist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Send BTC Satoshis to others&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;send [other address] [satoshis]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>michalzalobny/webgl-3d-engine</title>
    <updated>2024-02-25T01:39:50Z</updated>
    <id>tag:github.com,2024-02-25:/michalzalobny/webgl-3d-engine</id>
    <link href="https://github.com/michalzalobny/webgl-3d-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebGL2 3D Engine built from scratch.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebGL2 3D Engine built from scratch&lt;/h1&gt; &#xA;&lt;p&gt;The goal is to build a custom 3D engine without any libraries - just using WebGL2 API and what I have learnt while creating a &lt;a href=&#34;https://github.com/michalzalobny/3d-renderer-in-c&#34;&gt;3D renderer in C&lt;/a&gt;. Guided by &lt;a href=&#34;https://webgl2fundamentals.org/&#34;&gt;WebGL2 Fundamentals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m using here Right-Handed Coordinate System (positive Z axis points out of the screen). I&#39;m also using column-major matrices layout - so I will be using post-multiplication -&amp;gt; &lt;code&gt;M * v&lt;/code&gt; to transform a vector &lt;code&gt;v&lt;/code&gt; by a matrix &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Lighthouse Performance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application without any WebGL2 context scores 4x 100% on lighthouse, with 0ms of Total Blocking Time, 0.8s First and Largest Contentful Paint. Speed index is 0.8s.&lt;/li&gt; &#xA; &lt;li&gt;After adding the WebGL2 context, the Total Blocking Time increases to 40ms.&lt;/li&gt; &#xA; &lt;li&gt;After adding 4 textures to load into GPU and a model to parse, the Total Blocking Time increases to 60ms. The rest of the metrics are the same.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>14790897/paper-ai</title>
    <updated>2024-02-25T01:39:50Z</updated>
    <id>tag:github.com,2024-02-25:/14790897/paper-ai</id>
    <link href="https://github.com/14790897/paper-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;搜索真实文献并生成引用真实文献的AI论文&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/14790897/paper-ai/main/README_en.md&#34;&gt;English Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://paperai.life&#34;&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/14790897/paper-ai/main/public/android-chrome-192x192.png&#34; alt=&#34;the fastest way to create a paper with real references&#34;&gt; &#xA; &lt;/div&gt; &lt;h1 align=&#34;center&#34;&gt;paper-ai&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 使用真实文献最快速完成论文的方法 &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.paperai.life/&#34; style=&#34;font-size: 20px;&#34;&gt;&lt;strong&gt;文档网站(教程比较详细,推荐在这里观看)&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;#功能&#34;&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;#演示&#34;&gt;&lt;strong&gt;演示&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;#部署到Vercel&#34;&gt;&lt;strong&gt;部署到 Vercel&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;#克隆并在本地运行&#34;&gt;&lt;strong&gt;克隆并在本地运行&lt;/strong&gt;&lt;/a&gt; · &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;h3&gt;利用人工智能撰写论文&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;人工智能书写功能&lt;/strong&gt;： 点击 &#34;AI 写作 &#34;进行正常对话互动。人工智能将根据您的输入提供写作建议或回答问题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;寻找文献功能&lt;/strong&gt;： 点击 &#34;寻找文献&#34;，根据输入的关键词在 Semantic Scholar 或 arxiv 或 PubMed 中搜索论文。系统将把信息整合到您的论文中。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;编辑和修改&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在编辑器中直接编辑和修改人工智能生成的内容。&lt;/li&gt; &#xA; &lt;li&gt;使用提供的工具调整文本样式和布局。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;演示&lt;/h2&gt; &#xA;&lt;p&gt;您可以在 &lt;a href=&#34;https://paperai.life&#34;&gt;paperai.life&lt;/a&gt; 查看完整的工作演示。&lt;/p&gt; &#xA;&lt;h2&gt;部署到 Vercel&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https://github.com/14790897/paper-ai&amp;amp;project-name=paper-ai&amp;amp;repository-name=paper-ai&amp;amp;demo-title=paper-ai&amp;amp;demo-description=This%20starter%20configures%20Supabase%20Auth%20to%20use%20cookies%2C%20making%20the%20user&#39;s%20session%20available%20throughout%20the%20entire%20Next.js%20app%20-%20Client%20Components%2C%20Server%20Components%2C%20Route%20Handlers%2C%20Server%20Actions%20and%20Middleware.&amp;amp;demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&amp;amp;external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&amp;amp;demo-image=https%3A%2F%2Fpaperai.life%2Fopengraph-image.png&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;上述操作还会将 repo 克隆到 GitHub。&lt;/p&gt; &#xA;&lt;p&gt;如果只想在本地开发，而不想部署到 Vercel，&lt;a href=&#34;https://raw.githubusercontent.com/14790897/paper-ai/main/#clone-and-run-locally&#34;&gt;请按以下步骤操作&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;镜像运行&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;拉取镜像&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull 14790897/paperai:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;运行镜像&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -d -p 3000:3000 \&#xA;  -e NEXT_PUBLIC_AI_URL=自定义AI模型地址\&#xA;  -e NEXT_PUBLIC_OPENAI_API_KEY=自定义API KEY \&#xA;  14790897/paperai:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;环境变量说明&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;NEXT_PUBLIC_OPENAI_API_KEY 设置 key，只要在设置界面（右上角齿轮）对应的位置留空就会使用预定的变量&lt;/li&gt; &#xA; &lt;li&gt;NEXT_PUBLIC_AI_URL 设置上游 url，只要在设置界面（右上角齿轮）对应的位置留空就会使用预定的变量&lt;/li&gt; &#xA; &lt;li&gt;NEXT_PUBLIC_SEMANTIC_API_KEY 设置 semantic scholar 的 key，可以增加请求量&lt;/li&gt; &#xA; &lt;li&gt;NEXT_PUBLIC_PUBMED_API_KEY 设置 pubmed 的 key，可以增加请求量&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;克隆并在本地运行&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 克隆版本库&#xA;git clone https://github.com/14790897/paper-ai.git&#xA;&#xA;# 进入项目目录&#xA;cd paper-ai&#xA;&#xA;# 安装依赖项&#xA;npm install&#xA;&#xA;# 运行项目&#xA;npm run dev&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;参考文档&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;semantic scholar api: &lt;a href=&#34;https://api.semanticscholar.org/api-docs/#tag/Paper-Data/operation/get_graph_paper_relevance_search&#34;&gt;https://api.semanticscholar.org/api-docs/#tag/Paper-Data/operation/get_graph_paper_relevance_search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;pubmed api: &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/books/NBK25500/&#34;&gt;https://www.ncbi.nlm.nih.gov/books/NBK25500/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;许可证&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>