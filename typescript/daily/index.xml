<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-05T01:36:53Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>electron-userland/electron-builder</title>
    <updated>2024-08-05T01:36:53Z</updated>
    <id>tag:github.com,2024-08-05:/electron-userland/electron-builder</id>
    <link href="https://github.com/electron-userland/electron-builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A complete solution to package and build a ready for distribution Electron app with ‚Äúauto update‚Äù support out of the box&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;electron-builder &lt;a href=&#34;https://www.npmjs.com/package/electron-builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/electron-builder.svg?label=latest&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://yarn.pm/electron-builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/electron-builder.svg?sanitize=true&#34; alt=&#34;downloads per month&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.electron.build/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-donorbox-brightgreen.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A complete solution to package and build a ready for distribution &lt;a href=&#34;https://electronjs.org&#34;&gt;Electron&lt;/a&gt;, &lt;a href=&#34;https://proton-native.js.org/&#34;&gt;Proton Native&lt;/a&gt; app for macOS, Windows and Linux with ‚Äúauto update‚Äù support out of the box. &lt;img alt=&#34;shipit&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/shipit.png?v8&#34;&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Always looking for community contributions! üëÄ Setting up a &lt;a href=&#34;https://github.com/electron-userland/electron-builder/raw/master/CONTRIBUTING.md&#34;&gt;dev environment&lt;/a&gt; is easy to do ü™©&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We condemn Russia‚Äôs military aggression against Ukraine. We stand with the people of Ukraine.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://workflowy.com&#34;&gt; &#xA;     &lt;div&gt; &#xA;      &lt;img src=&#34;https://workflowy.com/media/i/icon-28x28.png&#34; alt=&#34;WorkFlowy&#34; title=&#34;WorkFlowy&#34; height=&#34;50&#34; align=&#34;middle&#34;&gt; &#xA;     &lt;/div&gt; Notes, Tasks, Projects.&lt;br&gt;All in a Single Place. &lt;/a&gt; &lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;a href=&#34;https://tidepool.org&#34;&gt; &#xA;     &lt;div&gt; &#xA;      &lt;img src=&#34;https://www.electron.build/sponsor-logos/Tidepool_Logo_Light.svg?sanitize=true&#34; alt=&#34;Tidepool&#34; title=&#34;Tidepool&#34; height=&#34;75&#34; align=&#34;middle&#34;&gt; &#xA;     &lt;/div&gt; Your gateway to understanding your diabetes data &lt;/a&gt; &lt;br&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;a href=&#34;https://keygen.sh/?via=electron-builder&#34;&gt; &#xA;     &lt;div&gt; &#xA;      &lt;img src=&#34;https://keygen.sh/images/logo-pill.png&#34; alt=&#34;Keygen&#34; title=&#34;Keygen&#34; height=&#34;75&#34; align=&#34;middle&#34;&gt; &#xA;     &lt;/div&gt; An open, source-available software licensing and distribution API &lt;/a&gt; &lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;a href=&#34;https://www.todesktop.com/electron?utm_source=electron-builder&#34;&gt; &#xA;     &lt;div&gt; &#xA;      &lt;img src=&#34;https://www.todesktop.com/new-logo/todesktop-logo.png&#34; alt=&#34;ToDesktop&#34; title=&#34;ToDesktop&#34; height=&#34;75&#34; align=&#34;middle&#34;&gt; &#xA;     &lt;/div&gt; ToDesktop: An all-in-one platform for building and releasing Electron apps &lt;/a&gt; &lt;br&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;a href=&#34;https://www.dashcam.io/?ref=electron_builder&#34;&gt; &#xA;     &lt;div&gt; &#xA;      &lt;img src=&#34;https://user-images.githubusercontent.com/318295/226675216-ab6aad0c-526c-4a45-a0a8-3906ac614b8b.png&#34; alt=&#34;Dashcam&#34; title=&#34;Dashcam&#34; height=&#34;75&#34; align=&#34;middle&#34;&gt; &#xA;     &lt;/div&gt; Dashcam: Capture the steps to reproduce any bug with video crash reports for Electron. &lt;/a&gt; &lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the full documentation on &lt;a href=&#34;https://www.electron.build&#34;&gt;electron.build&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NPM packages management: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://electron.atom.io/docs/tutorial/using-native-node-modules/&#34;&gt;Native application dependencies&lt;/a&gt; compilation (including &lt;a href=&#34;http://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; support).&lt;/li&gt; &#xA;   &lt;li&gt;Development dependencies are never included. You don&#39;t need to ignore them explicitly.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.electron.build/tutorials/two-package-structure&#34;&gt;Two package.json structure&lt;/a&gt; is supported, but you are not forced to use it even if you have native production dependencies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.electron.build/code-signing&#34;&gt;Code Signing&lt;/a&gt; on a CI server or development machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.electron.build/auto-update&#34;&gt;Auto Update&lt;/a&gt; ready application packaging.&lt;/li&gt; &#xA; &lt;li&gt;Numerous target formats: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All platforms: &lt;code&gt;7z&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;tar.xz&lt;/code&gt;, &lt;code&gt;tar.7z&lt;/code&gt;, &lt;code&gt;tar.lz&lt;/code&gt;, &lt;code&gt;tar.gz&lt;/code&gt;, &lt;code&gt;tar.bz2&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt; (unpacked directory).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.electron.build/configuration/mac&#34;&gt;macOS&lt;/a&gt;: &lt;code&gt;dmg&lt;/code&gt;, &lt;code&gt;pkg&lt;/code&gt;, &lt;code&gt;mas&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.electron.build/configuration/linux&#34;&gt;Linux&lt;/a&gt;: &lt;a href=&#34;http://appimage.org&#34;&gt;AppImage&lt;/a&gt;, &lt;a href=&#34;http://snapcraft.io&#34;&gt;snap&lt;/a&gt;, debian package (&lt;code&gt;deb&lt;/code&gt;), &lt;code&gt;rpm&lt;/code&gt;, &lt;code&gt;freebsd&lt;/code&gt;, &lt;code&gt;pacman&lt;/code&gt;, &lt;code&gt;p5p&lt;/code&gt;, &lt;code&gt;apk&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.electron.build/configuration/win&#34;&gt;Windows&lt;/a&gt;: &lt;code&gt;nsis&lt;/code&gt; (Installer), &lt;code&gt;nsis-web&lt;/code&gt; (Web installer), &lt;code&gt;portable&lt;/code&gt; (portable app without installation), AppX (Windows Store), MSI, Squirrel.Windows.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.electron.build/configuration/publish&#34;&gt;Publishing artifacts&lt;/a&gt; to GitHub Releases, Amazon S3, DigitalOcean Spaces and Bintray.&lt;/li&gt; &#xA; &lt;li&gt;Advanced building: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pack in a distributable format &lt;a href=&#34;https://www.electron.build/#pack-only-in-a-distributable-format&#34;&gt;already packaged app&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Separate &lt;a href=&#34;https://github.com/electron-userland/electron-builder/issues/1102#issuecomment-271845854&#34;&gt;build steps&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Build and publish in parallel, using hard links on CI server to reduce IO and disk space usage.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/electron/electron-compile&#34;&gt;electron-compile&lt;/a&gt; support (compile for release-time on the fly on build).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.electron.build/multi-platform-build#docker&#34;&gt;Docker&lt;/a&gt; images to build Electron app for Linux or Windows on any platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.electron.build/configuration/configuration/#proton-native&#34;&gt;Proton Native&lt;/a&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;Downloads all required tools files on demand automatically (e.g. to code sign windows application, to make AppX), no need to setup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Question&lt;/th&gt; &#xA;   &lt;th&gt;Answer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚ÄúI want to configure electron-builder‚Äù&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://electron.build/configuration/configuration&#34;&gt;See options&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚ÄúI found a bug or I have a question‚Äù&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/electron-userland/electron-builder/issues/new&#34;&gt;Open an issue&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚ÄúI want to support development‚Äù&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.electron.build/donate&#34;&gt;Donate&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; is &lt;a href=&#34;https://github.com/electron-userland/electron-builder/issues/1147#issuecomment-276284477&#34;&gt;strongly&lt;/a&gt; recommended instead of npm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn add electron-builder --dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Note for PNPM&lt;/h3&gt; &#xA;&lt;p&gt;In order to use with &lt;code&gt;pnpm&lt;/code&gt;, you&#39;ll need to adjust your &lt;code&gt;.npmrc&lt;/code&gt; to use any one the following approaches in order for your dependencies to be bundled correctly (ref: &lt;a href=&#34;https://github.com/electron-userland/electron-builder/issues/6289#issuecomment-1042620422&#34;&gt;#6389&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node-linker=hoisted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;public-hoist-pattern=*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;shamefully-hoist=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Setting shamefully-hoist to true is the same as setting public-hoist-pattern to *.&lt;/p&gt; &#xA;&lt;h3&gt;Note for Yarn 3&lt;/h3&gt; &#xA;&lt;p&gt;Yarn 3 use PnP by default, but electron-builder still need node-modules(ref: &lt;a href=&#34;https://github.com/yarnpkg/berry/issues/4804#issuecomment-1234407305&#34;&gt;yarnpkg/berry#4804&lt;/a&gt;). Add configuration in the &lt;code&gt;.yarnrc.yaml&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nodeLinker: &#34;node-modules&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will declare to use node-modules instead of PnP.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Setup Guide&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/electron-userland/electron-webpack-quick-start&#34;&gt;electron-webpack-quick-start&lt;/a&gt; is a recommended way to create a new Electron application. See &lt;a href=&#34;https://www.electron.build/#boilerplates&#34;&gt;Boilerplates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify the standard fields in the application &lt;code&gt;package.json&lt;/code&gt; ‚Äî &lt;a href=&#34;https://electron.build/configuration/configuration#Metadata-name&#34;&gt;name&lt;/a&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt; and &lt;a href=&#34;https://docs.npmjs.com/files/package.json#people-fields-author-contributors&#34;&gt;author&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify the &lt;a href=&#34;https://electron.build/configuration/configuration#build&#34;&gt;build&lt;/a&gt; configuration in the &lt;code&gt;package.json&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;build&#34;: {&#xA;  &#34;appId&#34;: &#34;your.id&#34;,&#xA;  &#34;mac&#34;: {&#xA;    &#34;category&#34;: &#34;your.app.category.type&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&#34;https://www.electron.build/configuration/configuration&#34;&gt;all options&lt;/a&gt;. Option &lt;a href=&#34;https://www.electron.build/configuration/contents#files&#34;&gt;files&lt;/a&gt; to indicate which files should be packed in the final application, including the entry file, maybe required. You can also use separate configuration files, such as &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;ts&lt;/code&gt;, &lt;code&gt;yml&lt;/code&gt;, and &lt;code&gt;json&lt;/code&gt;/&lt;code&gt;json5&lt;/code&gt;. See &lt;a href=&#34;https://www.npmjs.com/package/read-config-file&#34;&gt;read-config-file&lt;/a&gt; for supported extensions. &lt;a href=&#34;https://www.electron.build/api/programmatic-usage&#34;&gt;JS Example for programmatic API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;a href=&#34;https://www.electron.build/icons&#34;&gt;icons&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;a href=&#34;https://docs.npmjs.com/cli/run-script&#34;&gt;scripts&lt;/a&gt; key to the development &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;  &#34;app:dir&#34;: &#34;electron-builder --dir&#34;,&#xA;  &#34;app:dist&#34;: &#34;electron-builder&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you can run &lt;code&gt;yarn app:dist&lt;/code&gt; (to package in a distributable format (e.g. dmg, windows installer, deb package)) or &lt;code&gt;yarn app:dir&lt;/code&gt; (only generates the package directory without really packaging it. This is useful for testing purposes).&lt;/p&gt; &lt;p&gt;To ensure your native dependencies are always matched electron version, simply add script &lt;code&gt;&#34;postinstall&#34;: &#34;electron-builder install-app-deps&#34;&lt;/code&gt; to your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have native addons of your own that are part of the application (not as a dependency), set &lt;a href=&#34;https://www.electron.build/configuration/configuration#Configuration-nodeGypRebuild&#34;&gt;nodeGypRebuild&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please note that everything is packaged into an asar archive &lt;a href=&#34;https://electron.build/configuration/configuration#Configuration-asar&#34;&gt;by default&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For an app that will be shipped to production, you should sign your application. See &lt;a href=&#34;https://www.electron.build/code-signing#where-to-buy-code-signing-certificate&#34;&gt;Where to buy code signing certificates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;We do this open source work in our free time. If you&#39;d like us to invest more time on it, please &lt;a href=&#34;https://www.electron.build/donate&#34;&gt;donate&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>keldaanCommunity/pokemonAutoChess</title>
    <updated>2024-08-05T01:36:53Z</updated>
    <id>tag:github.com,2024-08-05:/keldaanCommunity/pokemonAutoChess</id>
    <link href="https://github.com/keldaanCommunity/pokemonAutoChess" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pokemon Auto Chess Game. Made by fans for fans. Open source, non profit. All rights to the Pokemon Company.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pokemon Auto Chess&lt;/h1&gt; &#xA;&lt;p&gt;Non profit game. For fans, by fans.&lt;/p&gt; &#xA;&lt;h2&gt;All rights to the Pokemon Company. Pokemon Auto Chess can stop at any time, whenever The Pokemon Company wants.&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://inlang.com/editor/github.com/keldaanCommunity/pokemonAutoChess?ref=badge&#34;&gt;&lt;img src=&#34;https://inlang.com/badge?url=github.com/keldaanCommunity/pokemonAutoChess&#34; alt=&#34;translation badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://discord.gg/6JMS7tr&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/737230355039387749.svg?style=for-the-badge&amp;amp;colorB=7581dc&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Play: &lt;a href=&#34;https://pokemon-auto-chess.com/&#34;&gt;https://pokemon-auto-chess.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support: &lt;a href=&#34;https://en.tipeee.com/pokemon-auto-chess&#34;&gt;https://en.tipeee.com/pokemon-auto-chess&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.com/invite/6JMS7tr&#34;&gt;https://discord.com/invite/6JMS7tr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/keldaanCommunity/pokemonAutoChess&#34;&gt;https://github.com/keldaanCommunity/pokemonAutoChess&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en&#34;&gt;Node LTS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install project dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and pack all the game assets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run assetpack&#xA;npm run download-music&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Main libs used&lt;/p&gt; &#xA;&lt;p&gt;Pokemon Auto Chess use mongoDB to store its data and Firebase for authentication. Those 2 dependencies requires credentials to use. Credentials will be stored in a &lt;code&gt;.env&lt;/code&gt; at the root of the repository.&lt;/p&gt; &#xA;&lt;h3&gt;MongoDB&lt;/h3&gt; &#xA;&lt;p&gt;You can either setup using the cloud based &lt;a href=&#34;https://www.mongodb.com/atlas/database&#34;&gt;MongoDB Atlas&lt;/a&gt; or using the &lt;a href=&#34;https://www.mongodb.com/try/download/community&#34;&gt;local installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to play against bots, you will need to load bots data into your newly created database.&lt;/p&gt; &#xA;&lt;p&gt;In both cases, create a database named &lt;code&gt;dev&lt;/code&gt; with an empty collection named &lt;code&gt;botV2&lt;/code&gt;. Then retrieve de URI connection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A cloud uri will look like smth &lt;code&gt;mongodb+srv://admin:&amp;lt;password&amp;gt;@&amp;lt;cluster&amp;gt;.mongodb.net/dev?retryWrites=true&amp;amp;w=majority&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The local uri will look smth like &lt;code&gt;mongodb://localhost:27017/dev&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In MongoDB Compass, import bots data (&lt;code&gt;./db-commmands/botv2.json&lt;/code&gt;) in the &lt;code&gt;botV2&lt;/code&gt; empty collection.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;.env&lt;/code&gt; at the root repository, add the mongoDB URI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MONGO_URI=mongodb://localhost:27017/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Firebase&lt;/h3&gt; &#xA;&lt;p&gt;Pokemon Auto Chess use the Firebase authentication module to connect to the game.&lt;/p&gt; &#xA;&lt;p&gt;First create an account and a firebase project at &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;https://console.firebase.google.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Inside the firebase project, create a web app called for example &lt;code&gt;pokemon-auto-chess-test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add your newly created firebase config in &lt;code&gt;.env&lt;/code&gt;. All those credentials should be available in the &#34;Configure SDK&#34; section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FIREBASE_API_KEY=&amp;lt;firebase_api_key&amp;gt;&#xA;FIREBASE_AUTH_DOMAIN=&amp;lt;firebase_auth_domain&amp;gt;&#xA;FIREBASE_PROJECT_ID=&amp;lt;firebase_project_id&amp;gt;&#xA;FIREBASE_STORAGE_BUCKET=&amp;lt;firebase_storage_bucket&amp;gt;&#xA;FIREBASE_MESSAGING_SENDER_ID=&amp;lt;firebase_messaging_sender_id&amp;gt;&#xA;FIREBASE_APP_ID=&amp;lt;firebase_app_id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then setup the authentication module. In sign in methods, only choose mail/password and anonymous.&lt;/p&gt; &#xA;&lt;p&gt;You need to generate a SDK Admin Firebase private key for the server to be able to connect as administrator of the firebase project.&lt;/p&gt; &#xA;&lt;p&gt;This option is available in parameters project / service account&lt;/p&gt; &#xA;&lt;p&gt;The private key is a json that contain those informations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;&amp;lt;type&amp;gt;&#34;,&#xA;  &#34;project_id&#34;: &#34;&amp;lt;project_id&amp;gt;&#34;,&#xA;  &#34;private_key_id&#34;: &#34;&amp;lt;private_key_id&amp;gt;&#34;,&#xA;  &#34;private_key&#34;: &#34;&amp;lt;private_key&amp;gt;&#34;,&#xA;  &#34;client_email&#34;: &#34;&amp;lt;client_email&amp;gt;&#34;,&#xA;  &#34;client_id&#34;: &#34;&amp;lt;client_id&amp;gt;&#34;,&#xA;  &#34;auth_uri&#34;: &#34;&amp;lt;auth_uri&amp;gt;&#34;,&#xA;  &#34;token_uri&#34;: &#34;&amp;lt;token_uri&amp;gt;&#34;,&#xA;  &#34;auth_provider_x509_cert_url&#34;: &#34;&amp;lt;auth_provider_x509_cert_url&amp;gt;&#34;,&#xA;  &#34;client_x509_cert_url&#34;: &#34;&amp;lt;client_x509_cert_url&amp;gt;&#34;,&#xA;  &#34;universe_domain&#34;: &#34;&amp;lt;universe_domain&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add those informations to the &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FIREBASE_CLIENT_EMAIL=&amp;lt;client_email&amp;gt;&#xA;FIREBASE_PRIVATE_KEY=&amp;lt;private_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you are done for the configuration part.&lt;/p&gt; &#xA;&lt;p&gt;To start the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Game runs locally on port &lt;a href=&#34;http://localhost:9000/&#34;&gt;http://localhost:9000/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Administration rights&lt;/h3&gt; &#xA;&lt;p&gt;You might want to have full access rights on your local version. To do so, you can set your role to &lt;code&gt;ADMIN&lt;/code&gt; by editing your player rights in the &lt;code&gt;usermetadatas&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;h1&gt;Extensions&lt;/h1&gt; &#xA;&lt;p&gt;With VS Code, use Biome for formatting and linting and Inlang for translations management.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assets are automatically packed from &lt;code&gt;public/src/assets&lt;/code&gt; to &lt;code&gt;public/dist/client/assets&lt;/code&gt; with assetpack: &lt;code&gt;npm run assetpack&lt;/code&gt; ; You will need to run assetpack everytime you change the assets&lt;/li&gt; &#xA; &lt;li&gt;The game use precomputed data stored in &lt;code&gt;app/models/precomputed&lt;/code&gt; folder ; You will need to run &lt;code&gt;npm run precompute&lt;/code&gt; everytime you change pokemon or synergy data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Internationalisation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In VSCode, use the inlang (i18n) extension&lt;/li&gt; &#xA; &lt;li&gt;Bind the Inlang: Extract Message on a keyboard touch, for example (¬≤)&lt;/li&gt; &#xA; &lt;li&gt;Select the string you want to translate. Press ¬≤, a prompt will ask the id you want for this string. It&#39;ll add the corresponding entry in the english translation file.&lt;/li&gt; &#xA; &lt;li&gt;Once you are finished, you can run npm run translate to machine translate the missing translations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that we only support the english language. Other languages are managed by the community.&lt;/p&gt;</summary>
  </entry>
</feed>