<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-09T01:41:12Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yeemachine/kalidokit</title>
    <updated>2022-09-09T01:41:12Z</updated>
    <id>tag:github.com,2022-09-09:/yeemachine/kalidokit</id>
    <link href="https://github.com/yeemachine/kalidokit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blendshape and kinematics calculator for Mediapipe/Tensorflow.js Face, Eyes, Pose, and Finger tracking models.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/yeemachine/kalidokit/raw/main/docs/kalidokit-logo.png?raw=true&#34; alt=&#34;Kalidokit Template&#34; width=&#34;200ps&#34; style=&#34;margin-bottom:10px&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/kalidokit&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/kalidokit&#34; alt=&#34;NPM Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/kalidokit&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/min/kalidokit&#34; alt=&#34;NPM Bundle Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdelivr.com/package/npm/kalidokit&#34;&gt;&lt;img src=&#34;https://img.shields.io/jsdelivr/npm/hw/kalidokit&#34; alt=&#34;jsDelivr hits (npm)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmtrends.com/kalidokit&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/kalidokit&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kalidoface.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?down_color=lightgrey&amp;amp;down_message=offline&amp;amp;up_color=brightgreen&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Fkalidoface.com&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/XMqdfzVZ2E&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/869435838746984468/widget.png?style=shield&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Face, Pose, and Hand Tracking Calculator&lt;/h2&gt; &#xA;&lt;p&gt;Kalidokit is a blendshape and kinematics solver for Mediapipe/Tensorflow.js face, eyes, pose, and hand tracking models, compatible with &lt;a href=&#34;https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection&#34;&gt;Facemesh&lt;/a&gt;, &lt;a href=&#34;https://github.com/tensorflow/tfjs-models/tree/master/pose-detection&#34;&gt;Blazepose&lt;/a&gt;, &lt;a href=&#34;https://google.github.io/mediapipe/solutions/hands.html&#34;&gt;Handpose&lt;/a&gt;, and &lt;a href=&#34;https://google.github.io/mediapipe/solutions/holistic.html&#34;&gt;Holistic&lt;/a&gt;. It takes predicted 3D landmarks and calculates simple euler rotations and blendshape face values.&lt;/p&gt; &#xA;&lt;p&gt;As the core to Vtuber web apps, &lt;a href=&#34;https://kalidoface.com&#34;&gt;Kalidoface&lt;/a&gt; and &lt;a href=&#34;https://3d.kalidoface.com&#34;&gt;Kalidoface 3D&lt;/a&gt;, KalidoKit is designed specifically for rigging 3D VRM models and Live2D avatars!&lt;/p&gt; &#xA;&lt;p&gt;NOTE: This is a JS library meant for developers using Mediapipe pretrained models and not a complete app by itself. Please visit &lt;a href=&#34;https://kalidoface.com&#34;&gt;Kalidoface&lt;/a&gt; for the full vtuber experience ðŸ˜‰!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/kalidokit&#34;&gt;&lt;img src=&#34;https://github.com/yeemachine/kalidokit/raw/main/docs/kalidokit_glitch.gif?raw=true&#34; alt=&#34;Kalidokit Template&#34; width=&#34;48%&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://glitch.com/edit/#!/kalidokit-live2d&#34;&gt;&lt;img src=&#34;https://github.com/yeemachine/kalidokit/raw/main/docs/kalidokit-live2d_glitch.gif?raw=true&#34; alt=&#34;Kalidokit Template&#34; width=&#34;48%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/B0B75DIY1&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;Via NPM&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install kalidokit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import * as Kalidokit from &#34;kalidokit&#34;;&#xA;&#xA;// or only import the class you need&#xA;&#xA;import { Face, Pose, Hand } from &#34;kalidokit&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via CDN&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/kalidokit@1.1/dist/kalidokit.umd.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;p&gt;Kalidokit is composed of 3 classes for Face, Pose, and Hand calculations. They accept landmark outputs from models like Facemesh, Blazepose, Handpose, and Holistic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Accepts an array(468 or 478 with iris tracking) of vectors&#xA;Kalidokit.Face.solve(facelandmarkArray, {&#xA;    runtime: &#34;tfjs&#34;, // `mediapipe` or `tfjs`&#xA;    video: HTMLVideoElement,&#xA;    imageSize: { height: 0, width: 0 },&#xA;    smoothBlink: false, // smooth left and right eye blink delays&#xA;    blinkSettings: [0.25, 0.75], // adjust upper and lower bound blink sensitivity&#xA;});&#xA;&#xA;// Accepts arrays(33) of Pose keypoints and 3D Pose keypoints&#xA;Kalidokit.Pose.solve(poseWorld3DArray, poseLandmarkArray, {&#xA;    runtime: &#34;tfjs&#34;, // `mediapipe` or `tfjs`&#xA;    video: HTMLVideoElement,&#xA;    imageSize: { height: 0, width: 0 },&#xA;    enableLegs: true,&#xA;});&#xA;&#xA;// Accepts array(21) of hand landmark vectors; specify &#39;Right&#39; or &#39;Left&#39; side&#xA;Kalidokit.Hand.solve(handLandmarkArray, &#34;Right&#34;);&#xA;&#xA;// Using exported classes directly&#xA;Face.solve(facelandmarkArray);&#xA;Pose.solve(poseWorld3DArray, poseLandmarkArray);&#xA;Hand.solve(handLandmarkArray, &#34;Right&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional Utils&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Stabilizes left/right blink delays + wink by providing blenshapes and head rotation&#xA;Kalidokit.Face.stabilizeBlink(&#xA;    { r: 0, l: 1 }, // left and right eye blendshape values&#xA;    headRotationY, // head rotation in radians&#xA;    {&#xA;        noWink = false, // disables winking&#xA;        maxRot = 0.5 // max head rotation in radians before interpolating obscured eyes&#xA;    });&#xA;&#xA;// The internal vector math class&#xA;Kalidokit.Vector();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VRM and Live2D Sample Code&lt;/h2&gt; &#xA;&lt;p&gt;Quick-start your Vtuber app with these simple remixable examples.&lt;/p&gt; &#xA;&lt;h3&gt;VRM Glitch Template&lt;/h3&gt; &#xA;&lt;p&gt;Face, full-body, and hand tracking in under 350 lines of javascript. This demo uses Mediapipe Holistic for body tracking, Three.js + Three-VRM for rendering models, and KalidoKit for the kinematic calculations. This &lt;a href=&#34;https://glitch.com/edit/#!/kalidokit&#34;&gt;demo&lt;/a&gt; uses a minimal amount of easing to smooth animations, but feel free to make it your own! VRM model from &lt;a href=&#34;https://hub.vroid.com/en/characters/6617701103638326208/models/8892157442595230149&#34;&gt;Vroid Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/kalidokit&#34;&gt;&lt;img alt=&#34;Remix on Glitch&#34; src=&#34;https://cdn.gomix.com/f3620a78-0ad3-4f81-a271-c8a4faa20f86%2Fremix-button.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Live2D Glitch Template&lt;/h3&gt; &#xA;&lt;p&gt;This demo uses Mediapipe FaceMesh for face tracking, Pixi.js + pixi-live2d-display for rendering models, and KalidoKit for the kinematic calculations. This &lt;a href=&#34;https://glitch.com/edit/#!/kalidokit-live2d&#34;&gt;demo&lt;/a&gt; uses an official sample Live2D model, &lt;a href=&#34;https://www.live2d.com/en/download/sample-data/&#34;&gt;Hiyori&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/kalidokit-live2d&#34;&gt;&lt;img alt=&#34;Remix on Glitch&#34; src=&#34;https://cdn.gomix.com/f3620a78-0ad3-4f81-a271-c8a4faa20f86%2Fremix-button.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Local VRM and Live2D Examples&lt;/h3&gt; &#xA;&lt;p&gt;Interested in contributing? If you clone this project, the &lt;code&gt;docs&lt;/code&gt; folder includes both VRM and Live2D KalidoKit templates. Run the &lt;code&gt;test&lt;/code&gt; script to build the library and start up the dev server. The VRM demo will be hosted on &lt;code&gt;localhost:3000&lt;/code&gt; and Live2D on &lt;code&gt;localhost:3000/live2d/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;npm run test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/yeemachine/kalidokit/raw/main/docs/kalidokit-pipeline.png?raw=true&#34; alt=&#34;Kalidokit Template&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;The implementation may vary depending on what pose and face detection model you choose to use, but the principle is still the same. This example uses Mediapipe Holistic which concisely combines them together.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import * as Kalidokit from &#39;kalidokit&#39;&#xA;import &#39;@mediapipe/holistic/holistic&#39;;&#xA;import &#39;@mediapipe/camera_utils/camera_utils&#39;;&#xA;&#xA;let holistic = new Holistic({locateFile: (file) =&amp;gt; {&#xA;    return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@0.4.1633559476/${file}`;&#xA;}});&#xA;&#xA;holistic.onResults(results=&amp;gt;{&#xA;    // do something with prediction results&#xA;    // landmark names may change depending on TFJS/Mediapipe model version&#xA;    let facelm = results.faceLandmarks;&#xA;    let poselm = results.poseLandmarks;&#xA;    let poselm3D = results.ea;&#xA;    let rightHandlm = results.rightHandLandmarks;&#xA;    let leftHandlm = results.leftHandLandmarks;&#xA;&#xA;    let faceRig = Kalidokit.Face.solve(facelm,{runtime:&#39;mediapipe&#39;,video:HTMLVideoElement})&#xA;    let poseRig = Kalidokit.Pose.solve(poselm3d,poselm,{runtime:&#39;mediapipe&#39;,video:HTMLVideoElement})&#xA;    let rightHandRig = Kalidokit.Hand.solve(rightHandlm,&#34;Right&#34;)&#xA;    let leftHandRig = Kalidokit.Hand.solve(leftHandlm,&#34;Left&#34;)&#xA;&#xA;    };&#xA;});&#xA;&#xA;// use Mediapipe&#39;s webcam utils to send video to holistic every frame&#xA;const camera = new Camera(HTMLVideoElement, {&#xA;  onFrame: async () =&amp;gt; {&#xA;    await holistic.send({image: HTMLVideoElement});&#xA;  },&#xA;  width: 640,&#xA;  height: 480&#xA;});&#xA;camera.start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Slight differences with Mediapipe and Tensorflow.js&lt;/h2&gt; &#xA;&lt;p&gt;Due to slight differences in the results from Mediapipe and Tensorflow.js, it is recommended to specify which runtime version you are using as well as the video input/image size as a reference.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Kalidokit.Pose.solve(poselm3D,poselm,{&#xA;    runtime:&#39;tfjs&#39;, // default is &#39;mediapipe&#39;&#xA;    video: HTMLVideoElement,// specify an html video or manually set image size&#xA;    imageSize:{&#xA;        width: 640,&#xA;        height: 480,&#xA;    };&#xA;})&#xA;&#xA;Kalidokit.Face.solve(facelm,{&#xA;    runtime:&#39;mediapipe&#39;, // default is &#39;tfjs&#39;&#xA;    video: HTMLVideoElement,// specify an html video or manually set image size&#xA;    imageSize:{&#xA;        width: 640,&#xA;        height: 480,&#xA;    };&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Outputs&lt;/h2&gt; &#xA;&lt;p&gt;Below are the expected results from KalidoKit solvers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Kalidokit.Face.solve()&#xA;// Head rotations in radians&#xA;// Degrees and normalized rotations also available&#xA;{&#xA;    eye: {l: 1,r: 1},&#xA;    mouth: {&#xA;        x: 0,&#xA;        y: 0,&#xA;        shape: {A:0, E:0, I:0, O:0, U:0}&#xA;    },&#xA;    head: {&#xA;        x: 0,&#xA;        y: 0,&#xA;        z: 0,&#xA;        width: 0.3,&#xA;        height: 0.6,&#xA;        position: {x: 0.5, y: 0.5, z: 0}&#xA;    },&#xA;    brow: 0,&#xA;    pupil: {x: 0, y: 0}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Kalidokit.Pose.solve()&#xA;// Joint rotations in radians, leg calculators are a WIP&#xA;{&#xA;    RightUpperArm: {x: 0, y: 0, z: -1.25},&#xA;    LeftUpperArm: {x: 0, y: 0, z: 1.25},&#xA;    RightLowerArm: {x: 0, y: 0, z: 0},&#xA;    LeftLowerArm: {x: 0, y: 0, z: 0},&#xA;    LeftUpperLeg: {x: 0, y: 0, z: 0},&#xA;    RightUpperLeg: {x: 0, y: 0, z: 0},&#xA;    RightLowerLeg: {x: 0, y: 0, z: 0},&#xA;    LeftLowerLeg: {x: 0, y: 0, z: 0},&#xA;    LeftHand: {x: 0, y: 0, z: 0},&#xA;    RightHand: {x: 0, y: 0, z: 0},&#xA;    Spine: {x: 0, y: 0, z: 0},&#xA;    Hips: {&#xA;        worldPosition: {x: 0, y: 0, z: 0},&#xA;        position: {x: 0, y: 0, z: 0},&#xA;        rotation: {x: 0, y: 0, z: 0},&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Kalidokit.Hand.solve()&#xA;// Joint rotations in radians&#xA;// only wrist and thumb have 3 degrees of freedom&#xA;// all other finger joints move in the Z axis only&#xA;{&#xA;    RightWrist: {x: -0.13, y: -0.07, z: -1.04},&#xA;    RightRingProximal: {x: 0, y: 0, z: -0.13},&#xA;    RightRingIntermediate: {x: 0, y: 0, z: -0.4},&#xA;    RightRingDistal: {x: 0, y: 0, z: -0.04},&#xA;    RightIndexProximal: {x: 0, y: 0, z: -0.24},&#xA;    RightIndexIntermediate: {x: 0, y: 0, z: -0.25},&#xA;    RightIndexDistal: {x: 0, y: 0, z: -0.06},&#xA;    RightMiddleProximal: {x: 0, y: 0, z: -0.09},&#xA;    RightMiddleIntermediate: {x: 0, y: 0, z: -0.44},&#xA;    RightMiddleDistal: {x: 0, y: 0, z: -0.06},&#xA;    RightThumbProximal: {x: -0.23, y: -0.33, z: -0.12},&#xA;    RightThumbIntermediate: {x: -0.2, y: -0.19, z: -0.01},&#xA;    RightThumbDistal: {x: -0.2, y: 0.002, z: 0.15},&#xA;    RightLittleProximal: {x: 0, y: 0, z: -0.09},&#xA;    RightLittleIntermediate: {x: 0, y: 0, z: -0.22},&#xA;    RightLittleDistal: {x: 0, y: 0, z: -0.1}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Showcase + Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to share a creative use of KalidoKit, please reach out or send a pull request! Feel free to also use our Twitter hashtag, &lt;a href=&#34;https://twitter.com/search?q=%23kalidokit&#34;&gt;#kalidokit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Kalidoface/KalidoKit also now has a &lt;a href=&#34;https://discord.gg/XMqdfzVZ2E&#34;&gt;Discord server&lt;/a&gt;! Come and join us!&lt;/p&gt; &#xA;&lt;p&gt;The current library is a work in progress and contributions to improve it are very welcome! Some plans include: better facial blendshapes, full leg tracking, and improved efficiency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kalidoface.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yeemachine/kalidoface-live2d-models/main/promo/TW-Promo-short.gif&#34; alt=&#34;Kalidoface virtual webcam&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://3d.kalidoface.com&#34;&gt;&lt;img src=&#34;https://cdn.glitch.me/29e07830-2317-4b15-a044-135e73c7f840%2Fkalidoface-pose-dance.gif?v=1633453098775&#34; alt=&#34;Kalidoface Pose Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>preactjs/signals</title>
    <updated>2022-09-09T01:41:12Z</updated>
    <id>tag:github.com,2022-09-09:/preactjs/signals</id>
    <link href="https://github.com/preactjs/signals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Signals&lt;/h1&gt; &#xA;&lt;p&gt;Signals is a performant state management library with two primary goals:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make it as easy as possible to write business logic for small up to complex apps. No matter how complex your logic is, your app updates should stay fast without you needing to think about it. Signals automatically optimize state updates behind the scenes to trigger the fewest updates necessary. They are lazy by default and automatically skip signals that no one listens to.&lt;/li&gt; &#xA; &lt;li&gt;Integrate into frameworks as if they were native built-in primitives. You don&#39;t need any selectors, wrapper functions, or anything else. Signals can be accessed directly and your component will automatically re-render when the signal&#39;s value changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://preactjs.com/blog/introducing-signals/&#34;&gt;announcement post&lt;/a&gt; to learn more about which problems signals solves and how it came to be.&lt;/p&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Just the core library&#xA;npm install @preact/signals-core&#xA;# If you&#39;re using Preact&#xA;npm install @preact/signals&#xA;# If you&#39;re using React&#xA;npm install @preact/signals-react&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#guide--api&#34;&gt;Guide / API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#signalinitialvalue&#34;&gt;&lt;code&gt;signal(initialValue)&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#signalpeek&#34;&gt;&lt;code&gt;signal.peek()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#computedfn&#34;&gt;&lt;code&gt;computed(fn)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#effectfn&#34;&gt;&lt;code&gt;effect(fn)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#batchfn&#34;&gt;&lt;code&gt;batch(fn)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/packages/preact/README.md#preact-integration&#34;&gt;Preact Integration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/packages/preact/README.md#hooks&#34;&gt;Hooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/packages/preact/README.md#rendering-optimizations&#34;&gt;Rendering optimizations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/packages/preact/README.md#attribute-optimization-experimental&#34;&gt;Attribute optimization (experimental)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/packages/react/README.md#react-integration&#34;&gt;React Integration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/packages/react/README.md#hooks&#34;&gt;Hooks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Guide / API&lt;/h2&gt; &#xA;&lt;p&gt;The signals library exposes four functions which are the building blocks to model any business logic you can think of.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;signal(initialValue)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;signal&lt;/code&gt; function creates a new signal. A signal is a container for a value that can change over time. You can read a signal&#39;s value or subscribe to value updates by accessing its &lt;code&gt;.value&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { signal } from &#34;@preact/signals-core&#34;;&#xA;&#xA;const counter = signal(0);&#xA;&#xA;// Read value from signal, logs: 0&#xA;console.log(counter.value);&#xA;&#xA;// Write to a signal&#xA;counter.value = 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Writing to a signal is done by setting its &lt;code&gt;.value&lt;/code&gt; property. Changing a signal&#39;s value synchronously updates every &lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#computed&#34;&gt;computed&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#effect&#34;&gt;effect&lt;/a&gt; that depends on that signal, ensuring your app state is always consistent.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;signal.peek()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In the rare instance that you have an effect that should write to another signal based on the previous value, but you &lt;em&gt;don&#39;t&lt;/em&gt; want the effect to be subscribed to that signal, you can read a signals&#39;s previous value via &lt;code&gt;signal.peek()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const counter = signal(0);&#xA;const effectCount = signal(0);&#xA;&#xA;effect(() =&amp;gt; {&#xA;&#x9;console.log(counter.value);&#xA;&#xA;&#x9;// Whenever this effect is triggered, increase `effectCount`.&#xA;&#x9;// But we don&#39;t want this signal to react to `effectCount`&#xA;&#x9;effectCount.value = effectCount.peek() + 1;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you should only use &lt;code&gt;signal.peek()&lt;/code&gt; if you really need it. Reading a signal&#39;s value via &lt;code&gt;signal.value&lt;/code&gt; is the preferred way in most scenarios.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;computed(fn)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Data is often derived from other pieces of existing data. The &lt;code&gt;computed&lt;/code&gt; function lets you combine the values of multiple signals into a new signal that can be reacted to, or even used by additional computeds. When the signals accessed from within a computed callback change, the computed callback is re-executed and its new return value becomes the computed signal&#39;s value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { signal, computed } from &#34;@preact/signals-core&#34;;&#xA;&#xA;const name = signal(&#34;Jane&#34;);&#xA;const surname = signal(&#34;Doe&#34;);&#xA;&#xA;const fullName = computed(() =&amp;gt; name.value + &#34; &#34; + surname.value);&#xA;&#xA;// Logs: &#34;Jane Doe&#34;&#xA;console.log(fullName.value);&#xA;&#xA;// Updates flow through computed, but only if someone&#xA;// subscribes to it. More on that later.&#xA;name.value = &#34;John&#34;;&#xA;// Logs: &#34;John Doe&#34;&#xA;console.log(fullName.value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any signal that is accessed inside the &lt;code&gt;computed&lt;/code&gt;&#39;s callback function will be automatically subscribed to and tracked as a dependency of the computed signal.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;effect(fn)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;effect&lt;/code&gt; function is the last piece that makes everything reactive. When you access a signal inside its callback function, that signal and every dependency of said signal will be activated and subscribed to. In that regard it is very similar to &lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/#computedfn&#34;&gt;&lt;code&gt;computed(fn)&lt;/code&gt;&lt;/a&gt;. By default all updates are lazy, so nothing will update until you access a signal inside &lt;code&gt;effect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { signal, computed, effect } from &#34;@preact/signals-core&#34;;&#xA;&#xA;const name = signal(&#34;Jane&#34;);&#xA;const surname = signal(&#34;Doe&#34;);&#xA;const fullName = computed(() =&amp;gt; name.value + &#34; &#34; + surname.value);&#xA;&#xA;// Logs: &#34;Jane Doe&#34;&#xA;effect(() =&amp;gt; console.log(fullName.value));&#xA;&#xA;// Updating one of its dependencies will automatically trigger&#xA;// the effect above, and will print &#34;John Doe&#34; to the console.&#xA;name.value = &#34;John&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can destroy an effect and unsubscribe from all signals it was subscribed to, by calling the returned function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { signal, effect } from &#34;@preact/signals-core&#34;;&#xA;&#xA;const name = signal(&#34;Jane&#34;);&#xA;const surname = signal(&#34;Doe&#34;);&#xA;const fullName = computed(() =&amp;gt; name.value + &#34; &#34; + surname.value);&#xA;&#xA;// Logs: &#34;Jane Doe&#34;&#xA;const dispose = effect(() =&amp;gt; console.log(fullName.value));&#xA;&#xA;// Destroy effect and subscriptions&#xA;dispose();&#xA;&#xA;// Update does nothing, because no one is subscribed anymore.&#xA;// Even the computed `fullName` signal won&#39;t change, because it knows&#xA;// that no one listens to it.&#xA;surname.value = &#34;Doe 2&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;batch(fn)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;batch&lt;/code&gt; function allows you to combine multiple signal writes into one single update that is triggered at the end when the callback completes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { signal, computed, effect, batch } from &#34;@preact/signals-core&#34;;&#xA;&#xA;const name = signal(&#34;Jane&#34;);&#xA;const surname = signal(&#34;Doe&#34;);&#xA;const fullName = computed(() =&amp;gt; name.value + &#34; &#34; + surname.value);&#xA;&#xA;// Logs: &#34;Jane Doe&#34;&#xA;effect(() =&amp;gt; console.log(fullName.value));&#xA;&#xA;// Combines both signal writes into one update. Once the callback&#xA;// returns the `effect` will trigger and we&#39;ll log &#34;Foo Bar&#34;&#xA;batch(() =&amp;gt; {&#xA;&#x9;name.value = &#34;Foo&#34;;&#xA;&#x9;surname.value = &#34;Bar&#34;;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you access a signal that you wrote to earlier inside the callback, or access a computed signal that was invalidated by another signal, we&#39;ll only update the necessary dependencies to get the current value for the signal you read from. All other invalidated signals will update at the end of the callback function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { signal, computed, effect, batch } from &#34;@preact/signals-core&#34;;&#xA;&#xA;const counter = signal(0);&#xA;const double = computed(() =&amp;gt; counter.value * 2);&#xA;const tripple = computed(() =&amp;gt; counter.value * 3);&#xA;&#xA;effect(() =&amp;gt; console.log(double.value, tripple.value));&#xA;&#xA;batch(() =&amp;gt; {&#xA;&#x9;counter.value = 1;&#xA;&#x9;// Logs: 2, despite being inside batch, but `tripple`&#xA;&#x9;// will only update once the callback is complete&#xA;&#x9;console.log(double.value);&#xA;});&#xA;// Now we reached the end of the batch and call the effect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Batches can be nested and updates will be flushed when the outermost batch call completes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { signal, computed, effect, batch } from &#34;@preact/signals-core&#34;;&#xA;&#xA;const counter = signal(0);&#xA;effect(() =&amp;gt; console.log(counter.value));&#xA;&#xA;batch(() =&amp;gt; {&#xA;&#x9;batch(() =&amp;gt; {&#xA;&#x9;&#x9;// Signal is invalidated, but update is not flushed because&#xA;&#x9;&#x9;// we&#39;re still inside another batch&#xA;&#x9;&#x9;counter.value = 1;&#xA;&#x9;});&#xA;&#xA;&#x9;// Still not updated...&#xA;});&#xA;// Now the callback completed and we&#39;ll trigger the effect.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MIT&lt;/code&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/preactjs/signals/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vuepress/vuepress-next</title>
    <updated>2022-09-09T01:41:12Z</updated>
    <id>tag:github.com,2022-09-09:/vuepress/vuepress-next</id>
    <link href="https://github.com/vuepress/vuepress-next" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repo for VuePress 2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vuepress-next&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vuepress/vuepress-next/actions?query=workflow%3Acheck&#34;&gt;&lt;img src=&#34;https://github.com/vuepress/vuepress-next/workflows/check/badge.svg?sanitize=true&#34; alt=&#34;github check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vuepress/vuepress-next/actions?query=workflow%3Adocs&#34;&gt;&lt;img src=&#34;https://github.com/vuepress/vuepress-next/workflows/docs/badge.svg?sanitize=true&#34; alt=&#34;github docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/vuepress&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/vuepress/next&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/vuepress/vuepress-next?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/vuepress/vuepress-next/badge.svg?branch=main&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vuepress/vuepress-next/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/vuepress/vuepress-next&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ptFjefy6H5&#34;&gt;&lt;img src=&#34;https://badgen.net/discord/online-members/ptFjefy6H5?icon=discord&amp;amp;label=discord&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status: Beta&lt;/h2&gt; &#xA;&lt;p&gt;For users from VuePress v1, please check out the &lt;a href=&#34;https://v2.vuepress.vuejs.org/guide/migration.html&#34;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For users who want to follow our progress or contribute to this project, please check out the &lt;a href=&#34;https://github.com/vuepress/vuepress-next/discussions/68&#34;&gt;roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://v2.vuepress.vuejs.org&#34;&gt;https://v2.vuepress.vuejs.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/vuepress/vuepress-next/raw/main/docs/contributing.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vuepress/vuepress-next/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>