<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-07T01:41:41Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>subsquid-quests/double-chain-squid</title>
    <updated>2023-10-07T01:41:41Z</updated>
    <id>tag:github.com,2023-10-07:/subsquid-quests/double-chain-squid</id>
    <link href="https://github.com/subsquid-quests/double-chain-squid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The first multichain squid for the network launch quests&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;img src=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; alt=&#34;Subsquid Logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;&lt;img src=&#34;https://docs.rs/leptos/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://subsquid.io&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/subsquid-network/&#34;&gt;Subsquid Network FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deploy a double processor squid&lt;/h1&gt; &#xA;&lt;p&gt;This is a quest to run a squid with two processors. Here is how to run it:&lt;/p&gt; &#xA;&lt;h3&gt;I. Install dependencies: Node.js, Docker, Git.&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Windows&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Enable &lt;a href=&#34;https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v&#34;&gt;Hyper-V&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/desktop/install/windows-install/&#34;&gt;Docker for Windows&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install NodeJS LTS using the &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;official installer&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;In all installs it is OK to leave all the options at their default values. You will need a terminal to complete this tutorial - &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL&lt;/a&gt; bash is the preferred option.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Mac&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/desktop/install/mac-install/&#34;&gt;Docker for Mac&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install Git using the &lt;a href=&#34;https://sourceforge.net/projects/git-osx-installer/&#34;&gt;installer&lt;/a&gt; or by &lt;a href=&#34;https://git-scm.com/download/mac&#34;&gt;other means&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install NodeJS LTS using the &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;official installer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;We recommend configuring NodeJS to install global packages to a folder owned by an unprivileged account. Create the folder by running&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then configure NodeJS to use it&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make sure that the folder &lt;code&gt;~/global-node-packages/bin&lt;/code&gt; is in &lt;code&gt;PATH&lt;/code&gt;. That allows running globally installed NodeJS executables from any terminal. Here is a one-liner that detects your shell and takes care of setting &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;CURSHELL=`ps -hp $$ | awk &#39;{print $5}&#39;`; case `basename $CURSHELL` in &#39;bash&#39;) DEST=&#34;$HOME/.bash_profile&#34;;; &#39;zsh&#39;) DEST=&#34;$HOME/.zshenv&#34;;; esac; echo &#39;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; &#34;$DEST&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternatively you can add the following line to &lt;code&gt;~/.zshenv&lt;/code&gt; (if you are using zsh) or &lt;code&gt;~/.bash_profile&lt;/code&gt; (if you are using bash) manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Re-open the terminal to apply the changes.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Linux&lt;/summary&gt; &#xA; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/package-manager&#34;&gt;NodeJS (v16 or newer)&lt;/a&gt;, Git and Docker using your distro&#39;s package manager.&lt;/p&gt; &#xA; &lt;p&gt;We recommend configuring NodeJS to install global packages to a folder owned by an unprivileged account. Create the folder by running&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then configure NodeJS to use it&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make sure that any executables globally installed by NodeJS are in &lt;code&gt;PATH&lt;/code&gt;. That allows running them from any terminal. Open the &lt;code&gt;~/.bashrc&lt;/code&gt; file in a text editor and add the following line at the end:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Re-open the terminal to apply the changes.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;II. Install Subsquid CLI&lt;/h3&gt; &#xA;&lt;p&gt;Open a terminal and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --global @subsquid/cli@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds the &lt;a href=&#34;https://raw.githubusercontent.com/subsquid-quests/double-chain-squid/master/squid-cli&#34;&gt;&lt;code&gt;sqd&lt;/code&gt; command&lt;/a&gt;. Verify that the installation was successful by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A healthy response should look similar to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@subsquid/cli/2.5.0 linux-x64 node-v20.5.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;III. Run the squid&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a terminal and run the following commands to create the squid and enter its folder:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd init my-double-proc-squid -t https://github.com/subsquid-quests/double-chain-squid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd my-double-proc-squid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can replace &lt;code&gt;my-double-proc-squid&lt;/code&gt; with any name you choose for your squid. If a squid with that name already exists in &lt;a href=&#34;https://docs.subsquid.io/deploy-squid/&#34;&gt;Aquarium&lt;/a&gt;, the first command will throw an error; if that happens simply think of another name and repeat the commands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Press &#34;Get Key&#34; button in the quest card to obtain the &lt;code&gt;doubleProc.key&lt;/code&gt; key file. Save it to the &lt;code&gt;./query-gateway/keys&lt;/code&gt; subfolder of the squid folder. The file will be used by the query gateway container.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The template squid uses a PostgreSQL database and a query gateway. Start Docker containers that run these with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wait for about a minute before proceeding to the next step.&lt;/p&gt; &lt;p&gt;If you get an error message about &lt;code&gt;unknown shorthand flag: &#39;d&#39; in -d&lt;/code&gt;, that means that you&#39;re using an old version of &lt;code&gt;docker&lt;/code&gt; that does not support the &lt;code&gt;compose&lt;/code&gt; command yet. Update Docker or edit the &lt;code&gt;commands.json&lt;/code&gt; file as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;         &#34;up&#34;: {&#xA;         &#34;deps&#34;: [&#34;check-key&#34;],&#xA;         &#34;description&#34;: &#34;Start a PG database&#34;,&#xA;-        &#34;cmd&#34;: [&#34;docker&#34;, &#34;compose&#34;, &#34;up&#34;, &#34;-d&#34;]&#xA;+        &#34;cmd&#34;: [&#34;docker-compose&#34;, &#34;up&#34;, &#34;-d&#34;]&#xA;       },&#xA;       &#34;down&#34;: {&#xA;         &#34;description&#34;: &#34;Drop a PG database&#34;,&#xA;-        &#34;cmd&#34;: [&#34;docker&#34;, &#34;compose&#34;, &#34;down&#34;]&#xA;+        &#34;cmd&#34;: [&#34;docker-compose&#34;, &#34;down&#34;]&#xA;       },&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepare the squid for running by installing dependencies, building the source code and creating all the necessary database tables:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;sqd build&#xA;sqd migration:apply&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start your squid with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd run .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command should output lines like these:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[api] 22:00:36 WARN  sqd:graphql-server enabling dumb in-memory cache (size: 100mb, ttl: 1000ms, max-age: 1000ms)&#xA;[api] 22:00:36 INFO  sqd:graphql-server listening on port 4350&#xA;[eth-processor] 22:00:36 INFO  sqd:processor processing blocks from 16000000&#xA;[eth-processor] 22:00:36 INFO  sqd:processor using archive data source&#xA;[eth-processor] 22:00:36 INFO  sqd:processor prometheus metrics are served at port 40163&#xA;[bsc-processor] 22:00:36 INFO  sqd:processor processing blocks from 28000000&#xA;[bsc-processor] 22:00:36 INFO  sqd:processor using archive data source&#xA;[bsc-processor] 22:00:36 INFO  sqd:processor prometheus metrics are served at port 39533&#xA;[bsc-processor] 22:00:39 INFO  sqd:processor 28004339 / 32107455, rate: 1537 blocks/sec, mapping: 603 blocks/sec, 1157 items/sec, eta: 45m&#xA;[eth-processor] 22:00:40 INFO  sqd:processor 16005819 / 18226899, rate: 1686 blocks/sec, mapping: 644 blocks/sec, 1224 items/sec, eta: 22m&#xA;[bsc-processor] 22:00:44 INFO  sqd:processor 28011319 / 32107455, rate: 1503 blocks/sec, mapping: 648 blocks/sec, 1250 items/sec, eta: 46m&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The squid should sync in 25-30 minutes. When it&#39;s done, stop it with Ctrl-C, then stop and remove the auxiliary containers with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Quest Info&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Skill Level&lt;/th&gt; &#xA;   &lt;th&gt;Time required (minutes)&lt;/th&gt; &#xA;   &lt;th&gt;Max Participants&lt;/th&gt; &#xA;   &lt;th&gt;Reward&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Squid Deployment&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{green}{\textsf{Simple}}$&lt;/td&gt; &#xA;   &lt;td&gt;~40&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{red}{\textsf{750tSQD}}$&lt;/td&gt; &#xA;   &lt;td&gt;open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Acceptance critera&lt;/h1&gt; &#xA;&lt;p&gt;Sync this squid using the key from the quest card. The syncing progress is tracked by the amount of data the squid has retrieved from &lt;a href=&#34;https://docs.subsquid.io/subsquid-network&#34;&gt;Subsquid Network&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;About this squid&lt;/h1&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;squid&lt;/a&gt; captures USDC Transfer events on ETH and BSC, stores them in the same database and serves the data over a common GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;The Ethereum data ingester (&#34;processor&#34;) is located in &lt;code&gt;src/eth&lt;/code&gt; and similarly the Binance Chain processor can be found in &lt;code&gt;src/bsc&lt;/code&gt;. The scripts file &lt;code&gt;commands.json&lt;/code&gt; was updated with the commands &lt;code&gt;process:eth&lt;/code&gt; and &lt;code&gt;process:bsc&lt;/code&gt; that run the processors. GraphQL server runs as a separate process started by &lt;code&gt;sqd serve&lt;/code&gt;. You can also use &lt;code&gt;sqd run&lt;/code&gt; to run all the services at once.&lt;/p&gt; &#xA;&lt;p&gt;The squid uses &lt;a href=&#34;https://docs.subsquid.io/subsquid-network&#34;&gt;Subsquid Network&lt;/a&gt; as its primary data source.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Pondorasti/emojis</title>
    <updated>2023-10-07T01:41:41Z</updated>
    <id>tag:github.com,2023-10-07:/Pondorasti/emojis</id>
    <link href="https://github.com/Pondorasti/emojis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn your ideas into emojis in seconds. Generate your favorite Slack emojis with just one click.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://emojis.alexandru.so/&#34;&gt; &lt;h1 align=&#34;center&#34;&gt;emojis&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Turn your ideas into emojis in seconds. Generate your favorite Slack emojis with just one click. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/pondorasti&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/pondorasti?style=flat&amp;amp;logo=x&amp;amp;color=0bf&amp;amp;logoColor=fff&#34; alt=&#34;Alexandru Ţurcanu&#39;s X follower count&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/pondorasti/emojis&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/pondorasti/emojis?label=pondorasti%2Femojis&#34; alt=&#34;pondorasti/emojis repo star count&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Pondorasti/emojis/main/#tech-stack&#34;&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/Pondorasti/emojis/main/#tech-stack&#34;&gt;&lt;strong&gt;Deploy Your Own&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/Pondorasti/emojis/main/#author&#34;&gt;&lt;strong&gt;Author&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/Pondorasti/emojis/main/#credits&#34;&gt;&lt;strong&gt;Credits&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;a href=&#34;https://emojis.alexandru.so/&#34;&gt; &lt;img alt=&#34;grid of ai generated emojis including pepe-soldier, goldendoodle, minecraft-tree, and pusheen-dog &#34; src=&#34;https://raw.githubusercontent.com/Pondorasti/emojis/main/public/_static/readme.png&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Tech Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt; - AI provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.sh/&#34;&gt;Bun&lt;/a&gt; - package manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://planetscale.com/&#34;&gt;PlanetScale&lt;/a&gt; - database&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.prisma.io/&#34;&gt;Prisma&lt;/a&gt; - ORM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/docs/app&#34;&gt;Next.js&lt;/a&gt; - app router, server actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com/storage/blob&#34;&gt;Vercel Blob&lt;/a&gt; - storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt; - hosting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deploy Your Own&lt;/h2&gt; &#xA;&lt;p&gt;You can deploy this template to Vercel with the button below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dub.sh/emojis-deploy&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up &lt;a href=&#34;https://replicate.com&#34;&gt;Replicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up &lt;a href=&#34;https://planetscale.com/&#34;&gt;PlanetScale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up &lt;a href=&#34;https://vercel.com/docs/storage/vercel-blob/quickstart&#34;&gt;Vercel Blob&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexandru Ţurcanu (&lt;a href=&#34;https://x.com/pondorasti&#34;&gt;@pondorasti&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://replicate.com/fofr/sdxl-emoji&#34;&gt;sdxl-emoji&lt;/a&gt; - fine tuned SDXL based on Apple&#39;s emojis by &lt;a href=&#34;https://twitter.com/fofrAI&#34;&gt;@fofrAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://replicate.com/fofr/prompt-classifier&#34;&gt;prompt-classifier&lt;/a&gt; - fine tuned llama-13b for determining toxicity by &lt;a href=&#34;https://twitter.com/fofrAI&#34;&gt;@fofrAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://replicate.com/cjwbw/rembg&#34;&gt;rembg&lt;/a&gt; - remove images background model by &lt;a href=&#34;https://github.com/chenxwh&#34;&gt;@chenxwh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spirals.vercel.app/&#34;&gt;Spirals&lt;/a&gt; - starter template and code examples by &lt;a href=&#34;https://twitter.com/steventey&#34;&gt;@steventey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cbh123/emoji&#34;&gt;EmojiGen&lt;/a&gt; - original emoji generator by &lt;a href=&#34;https://twitter.com/charliebholtz&#34;&gt;@charliebholtz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>subsquid-quests/quad-chain-squid</title>
    <updated>2023-10-07T01:41:41Z</updated>
    <id>tag:github.com,2023-10-07:/subsquid-quests/quad-chain-squid</id>
    <link href="https://github.com/subsquid-quests/quad-chain-squid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Squid indexing four chains for the network launch quests&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;img src=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; alt=&#34;Subsquid Logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;&lt;img src=&#34;https://docs.rs/leptos/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://subsquid.io&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/subsquid-network/&#34;&gt;Subsquid Network FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deploy a quad processor squid&lt;/h1&gt; &#xA;&lt;p&gt;This is a quest to run a squid with four processors. Here is how to run it:&lt;/p&gt; &#xA;&lt;h3&gt;I. Install dependencies: Node.js, Docker, Git.&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Windows&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Enable &lt;a href=&#34;https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v&#34;&gt;Hyper-V&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/desktop/install/windows-install/&#34;&gt;Docker for Windows&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install NodeJS LTS using the &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;official installer&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;In all installs it is OK to leave all the options at their default values. You will need a terminal to complete this tutorial - &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL&lt;/a&gt; bash is the preferred option.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Mac&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/desktop/install/mac-install/&#34;&gt;Docker for Mac&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install Git using the &lt;a href=&#34;https://sourceforge.net/projects/git-osx-installer/&#34;&gt;installer&lt;/a&gt; or by &lt;a href=&#34;https://git-scm.com/download/mac&#34;&gt;other means&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install NodeJS LTS using the &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;official installer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;We recommend configuring NodeJS to install global packages to a folder owned by an unprivileged account. Create the folder by running&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then configure NodeJS to use it&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make sure that the folder &lt;code&gt;~/global-node-packages/bin&lt;/code&gt; is in &lt;code&gt;PATH&lt;/code&gt;. That allows running globally installed NodeJS executables from any terminal. Here is a one-liner that detects your shell and takes care of setting &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;CURSHELL=`ps -hp $$ | awk &#39;{print $5}&#39;`; case `basename $CURSHELL` in &#39;bash&#39;) DEST=&#34;$HOME/.bash_profile&#34;;; &#39;zsh&#39;) DEST=&#34;$HOME/.zshenv&#34;;; esac; echo &#39;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; &#34;$DEST&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternatively you can add the following line to &lt;code&gt;~/.zshenv&lt;/code&gt; (if you are using zsh) or &lt;code&gt;~/.bash_profile&lt;/code&gt; (if you are using bash) manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Re-open the terminal to apply the changes.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Linux&lt;/summary&gt; &#xA; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/package-manager&#34;&gt;NodeJS (v16 or newer)&lt;/a&gt;, Git and Docker using your distro&#39;s package manager.&lt;/p&gt; &#xA; &lt;p&gt;We recommend configuring NodeJS to install global packages to a folder owned by an unprivileged account. Create the folder by running&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then configure NodeJS to use it&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make sure that any executables globally installed by NodeJS are in &lt;code&gt;PATH&lt;/code&gt;. That allows running them from any terminal. Open the &lt;code&gt;~/.bashrc&lt;/code&gt; file in a text editor and add the following line at the end:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Re-open the terminal to apply the changes.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;II. Install Subsquid CLI&lt;/h3&gt; &#xA;&lt;p&gt;Open a terminal and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --global @subsquid/cli@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds the &lt;a href=&#34;https://raw.githubusercontent.com/subsquid-quests/quad-chain-squid/master/squid-cli&#34;&gt;&lt;code&gt;sqd&lt;/code&gt; command&lt;/a&gt;. Verify that the installation was successful by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A healthy response should look similar to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@subsquid/cli/2.5.0 linux-x64 node-v20.5.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;III. Run the squid&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a terminal and run the following commands to create the squid and enter its folder:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd init my-quad-proc-squid -t https://github.com/subsquid-quests/quad-chain-squid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd my-quad-proc-squid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can replace &lt;code&gt;my-quad-proc-squid&lt;/code&gt; with any name you choose for your squid. If a squid with that name already exists in &lt;a href=&#34;https://docs.subsquid.io/deploy-squid/&#34;&gt;Aquarium&lt;/a&gt;, the first command will throw an error; if that happens simply think of another name and repeat the commands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Press &#34;Get Key&#34; button in the quest card to obtain the &lt;code&gt;quadProc.key&lt;/code&gt; key file. Save it to the &lt;code&gt;./query-gateway/keys&lt;/code&gt; subfolder of the squid folder. The file will be used by the query gateway container.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The template squid uses a PostgreSQL database and a query gateway. Start Docker containers that run these with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wait for about a minute before proceeding to the next step.&lt;/p&gt; &lt;p&gt;If you get an error message about &lt;code&gt;unknown shorthand flag: &#39;d&#39; in -d&lt;/code&gt;, that means that you&#39;re using an old version of &lt;code&gt;docker&lt;/code&gt; that does not support the &lt;code&gt;compose&lt;/code&gt; command yet. Update Docker or edit the &lt;code&gt;commands.json&lt;/code&gt; file as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;         &#34;up&#34;: {&#xA;         &#34;deps&#34;: [&#34;check-key&#34;],&#xA;         &#34;description&#34;: &#34;Start a PG database&#34;,&#xA;-        &#34;cmd&#34;: [&#34;docker&#34;, &#34;compose&#34;, &#34;up&#34;, &#34;-d&#34;]&#xA;+        &#34;cmd&#34;: [&#34;docker-compose&#34;, &#34;up&#34;, &#34;-d&#34;]&#xA;       },&#xA;       &#34;down&#34;: {&#xA;         &#34;description&#34;: &#34;Drop a PG database&#34;,&#xA;-        &#34;cmd&#34;: [&#34;docker&#34;, &#34;compose&#34;, &#34;down&#34;]&#xA;+        &#34;cmd&#34;: [&#34;docker-compose&#34;, &#34;down&#34;]&#xA;       },&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepare the squid for running by installing dependencies, building the source code and creating all the necessary database tables:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;sqd build&#xA;sqd migration:apply&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start your squid with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd run .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command should output lines like these:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[eth-processor] 04:41:33 INFO  sqd:processor processing blocks from 16000000&#xA;[moonbeam-processor] 04:41:33 INFO  sqd:processor processing blocks from 3000000&#xA;[bsc-processor] 04:41:33 INFO  sqd:processor processing blocks from 28000000&#xA;[base-processor] 04:41:33 INFO  sqd:processor processing blocks from 3800000&#xA;[eth-processor] 04:41:33 INFO  sqd:processor using archive data source&#xA;[eth-processor] 04:41:33 INFO  sqd:processor prometheus metrics are served at port 38397&#xA;[moonbeam-processor] 04:41:33 INFO  sqd:processor using archive data source&#xA;[moonbeam-processor] 04:41:33 INFO  sqd:processor prometheus metrics are served at port 38899&#xA;[base-processor] 04:41:33 INFO  sqd:processor using archive data source&#xA;[base-processor] 04:41:33 INFO  sqd:processor prometheus metrics are served at port 42565&#xA;[bsc-processor] 04:41:33 INFO  sqd:processor using archive data source&#xA;[bsc-processor] 04:41:33 INFO  sqd:processor prometheus metrics are served at port 33067&#xA;[api] 04:41:34 WARN  sqd:graphql-server enabling dumb in-memory cache (size: 100mb, ttl: 1000ms, max-age: 1000ms)&#xA;[api] 04:41:34 INFO  sqd:graphql-server listening on port 4350&#xA;[eth-processor] 04:41:36 INFO  sqd:processor 16007919 / 18250052, rate: 2572 blocks/sec, mapping: 752 blocks/sec, 1449 items/sec, eta: 15m&#xA;[eth-processor] 04:41:41 INFO  sqd:processor 16011899 / 18250052, rate: 2712 blocks/sec, mapping: 696 blocks/sec, 1345 items/sec, eta: 14m&#xA;[bsc-processor] 04:42:42 INFO  sqd:processor 28004339 / 32201121, rate: 64 blocks/sec, mapping: 543 blocks/sec, 1041 items/sec, eta: 18h 19m&#xA;[moonbeam-processor] 04:42:44 INFO  sqd:processor 3099480 / 4541860, rate: 1412 blocks/sec, mapping: 897 blocks/sec, 2726 items/sec, eta: 18m&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The squid should sync in 30-35 minutes. When it&#39;s done, stop it with Ctrl-C, then stop and remove the auxiliary containers with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Quest Info&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Skill Level&lt;/th&gt; &#xA;   &lt;th&gt;Time required (minutes)&lt;/th&gt; &#xA;   &lt;th&gt;Max Participants&lt;/th&gt; &#xA;   &lt;th&gt;Reward&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Squid Deployment&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{green}{\textsf{Simple}}$&lt;/td&gt; &#xA;   &lt;td&gt;~40&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{red}{\textsf{750tSQD}}$&lt;/td&gt; &#xA;   &lt;td&gt;open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Acceptance critera&lt;/h1&gt; &#xA;&lt;p&gt;Sync this squid using the key from the quest card. The syncing progress is tracked by the amount of data the squid has retrieved from &lt;a href=&#34;https://docs.subsquid.io/subsquid-network&#34;&gt;Subsquid Network&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;About this squid&lt;/h1&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;squid&lt;/a&gt; captures USDC Transfer events on ETH, BSC, Base and Moonbeam, stores them in the same database and serves the data over a common GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;Data ingester (&#34;processor&#34;) code for each network is located at the corresponding &lt;code&gt;src/&lt;/code&gt; subdirectory: &lt;code&gt;src/eth&lt;/code&gt;, &lt;code&gt;src/bsc&lt;/code&gt;, &lt;code&gt;src/base&lt;/code&gt; and&lt;code&gt;src/moonbeam&lt;/code&gt;. The scripts file &lt;code&gt;commands.json&lt;/code&gt; contains commands for running each processor (&lt;code&gt;process:eth&lt;/code&gt;, &lt;code&gt;process:bsc&lt;/code&gt;, &lt;code&gt;process:base&lt;/code&gt; and &lt;code&gt;process:moonbeam&lt;/code&gt; correspondingly). GraphQL server runs as a separate process started by &lt;code&gt;sqd serve&lt;/code&gt;. You can also use &lt;code&gt;sqd run&lt;/code&gt; to run all the services at once.&lt;/p&gt; &#xA;&lt;p&gt;The squid uses &lt;a href=&#34;https://docs.subsquid.io/subsquid-network&#34;&gt;Subsquid Network&lt;/a&gt; as its primary data source.&lt;/p&gt;</summary>
  </entry>
</feed>