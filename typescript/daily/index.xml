<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-23T01:39:44Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>idosal/mcp-ui</title>
    <updated>2025-08-23T01:39:44Z</updated>
    <id>tag:github.com,2025-08-23:/idosal/mcp-ui</id>
    <link href="https://github.com/idosal/mcp-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SDK for UI over MCP. Create next-gen UI experiences!&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;📦 Model Context Protocol UI SDK&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;250&#34; alt=&#34;image&#34; src=&#34;https://github.com/user-attachments/assets/65b9698f-990f-4846-9b2d-88de91d53d4d&#34; /&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@mcp-ui/server&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@mcp-ui/server?label=server&amp;amp;color=green&#34; alt=&#34;Server Version&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@mcp-ui/client&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@mcp-ui/client?label=client&amp;amp;color=blue&#34; alt=&#34;Client Version&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/mcp_ui_server&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/mcp_ui_server&#34; alt=&#34;Ruby Server SDK Version&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/CEAG4KW7ZH&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1401195140436983879?logo=discord&amp;amp;label=discord&#34; alt=&#34;Discord&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://gitmcp.io/idosal/mcp-ui&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://gitmcp.io/badge/idosal/mcp-ui&#34; alt=&#34;MCP Documentation&#34; /&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-whats-mcp-ui&#34;&gt;What&#39;s mcp-ui?&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-core-concepts&#34;&gt;Core Concepts&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-getting-started&#34;&gt;Getting Started&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-walkthrough&#34;&gt;Walkthrough&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-examples&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-security&#34;&gt;Security&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-roadmap&#34;&gt;Roadmap&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-contributing&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/#-license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;mcp-ui&lt;/code&gt;&lt;/strong&gt; brings interactive web components to the &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP). Deliver rich, dynamic UI resources directly from your MCP server to be rendered by the client. Take AI interaction to the next level!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;This project is an experimental community playground for MCP UI ideas. Expect rapid iteration and enhancements!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://github.com/user-attachments/assets/7180c822-2dd9-4f38-9d3e-b67679509483&#34;&gt;&lt;/video&gt; &lt;/p&gt; &#xA;&lt;h2&gt;💡 What&#39;s &lt;code&gt;mcp-ui&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mcp-ui&lt;/code&gt; is a collection of SDKs comprising:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;@mcp-ui/server&lt;/code&gt; (TypeScript)&lt;/strong&gt;: Utilities to generate UI resources (&lt;code&gt;UIResource&lt;/code&gt;) on your MCP server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;@mcp-ui/client&lt;/code&gt; (TypeScript)&lt;/strong&gt;: UI components (e.g., &lt;code&gt;&amp;lt;UIResourceRenderer /&amp;gt;&lt;/code&gt;) to render the UI resources and handle their events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;mcp_ui_server&lt;/code&gt; (Ruby)&lt;/strong&gt;: Utilities to generate UI resources on your MCP server in a Ruby environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Together, they let you define reusable UI snippets on the server side, seamlessly and securely render them in the client, and react to their actions in the MCP host environment.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Core Concepts&lt;/h2&gt; &#xA;&lt;p&gt;In essence, by using &lt;code&gt;mcp-ui&lt;/code&gt; SDKs, servers and hosts can agree on contracts that enable them to create and render interactive UI snippets (as a path to a standardized UI approach in MCP).&lt;/p&gt; &#xA;&lt;h3&gt;UI Resource&lt;/h3&gt; &#xA;&lt;p&gt;The primary payload returned from the server to the client is the &lt;code&gt;UIResource&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface UIResource {&#xA;  type: &#39;resource&#39;;&#xA;  resource: {&#xA;    uri: string;       // e.g., ui://component/id&#xA;    mimeType: &#39;text/html&#39; | &#39;text/uri-list&#39; | &#39;application/vnd.mcp-ui.remote-dom&#39;; // text/html for HTML content, text/uri-list for URL content, application/vnd.mcp-ui.remote-dom for remote-dom content (Javascript)&#xA;    text?: string;      // Inline HTML, external URL, or remote-dom script&#xA;    blob?: string;      // Base64-encoded HTML, URL, or remote-dom script&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/strong&gt;: Unique identifier for caching and routing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ui://…&lt;/code&gt; — UI resources (rendering method determined by mimeType)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;mimeType&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;text/html&lt;/code&gt; for HTML content (iframe srcDoc), &lt;code&gt;text/uri-list&lt;/code&gt; for URL content (iframe src), &lt;code&gt;application/vnd.mcp-ui.remote-dom&lt;/code&gt; for remote-dom content (Javascript) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;MCP-UI requires a single URL&lt;/strong&gt;: While &lt;code&gt;text/uri-list&lt;/code&gt; format supports multiple URLs, MCP-UI uses only the first valid &lt;code&gt;http/s&lt;/code&gt; URL and warns if additional URLs are found&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;text&lt;/code&gt; vs. &lt;code&gt;blob&lt;/code&gt;&lt;/strong&gt;: Choose &lt;code&gt;text&lt;/code&gt; for simple strings; use &lt;code&gt;blob&lt;/code&gt; for larger or encoded content.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resource Renderer&lt;/h3&gt; &#xA;&lt;p&gt;The UI Resource is rendered in the &lt;code&gt;&amp;lt;UIResourceRenderer /&amp;gt;&lt;/code&gt; component. It automatically detects the resource type and renders the appropriate component.&lt;/p&gt; &#xA;&lt;p&gt;It is available as a React component and as a Web Component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;React Component&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It accepts the following props:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;resource&lt;/code&gt;&lt;/strong&gt;: The resource object from an MCP Tool response. It must include &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;mimeType&lt;/code&gt;, and content (&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;blob&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;onUIAction&lt;/code&gt;&lt;/strong&gt;: Optional callback for handling UI actions from the resource: &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;{ type: &#39;tool&#39;, payload: { toolName: string, params: Record&amp;lt;string, unknown&amp;gt; }, messageId?: string } |&#xA;{ type: &#39;intent&#39;, payload: { intent: string, params: Record&amp;lt;string, unknown&amp;gt; }, messageId?: string } |&#xA;{ type: &#39;prompt&#39;, payload: { prompt: string }, messageId?: string } |&#xA;{ type: &#39;notify&#39;, payload: { message: string }, messageId?: string } |&#xA;{ type: &#39;link&#39;, payload: { url: string }, messageId?: string }&#xA;&lt;/code&gt;&lt;/pre&gt; When actions include a &lt;code&gt;messageId&lt;/code&gt;, the iframe automatically receives response messages for asynchronous handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;supportedContentTypes&lt;/code&gt;&lt;/strong&gt;: Optional array to restrict which content types are allowed (&lt;code&gt;[&#39;rawHtml&#39;, &#39;externalUrl&#39;, &#39;remoteDom&#39;]&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;htmlProps&lt;/code&gt;&lt;/strong&gt;: Optional props for the internal &lt;code&gt;&amp;lt;HTMLResourceRenderer&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;style&lt;/code&gt;&lt;/strong&gt;: Optional custom styles for the iframe&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;iframeProps&lt;/code&gt;&lt;/strong&gt;: Optional props passed to the iframe element&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;iframeRenderData&lt;/code&gt;&lt;/strong&gt;: Optional &lt;code&gt;Record&amp;lt;string, unknown&amp;gt;&lt;/code&gt; to pass data to the iframe upon rendering. This enables advanced use cases where the parent application needs to provide initial state or configuration to the sandboxed iframe content.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;autoResizeIframe&lt;/code&gt;&lt;/strong&gt;: Optional &lt;code&gt;boolean | { width?: boolean; height?: boolean }&lt;/code&gt; to automatically resize the iframe to the size of the content.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;remoteDomProps&lt;/code&gt;&lt;/strong&gt;: Optional props for the internal &lt;code&gt;&amp;lt;RemoteDOMResourceRenderer&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;library&lt;/code&gt;&lt;/strong&gt;: Optional component library for Remote DOM resources (defaults to &lt;code&gt;basicComponentLibrary&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;remoteElements&lt;/code&gt;&lt;/strong&gt;: remote element definitions for Remote DOM resources.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Web Component&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Web Component is available as &lt;code&gt;&amp;lt;ui-resource-renderer&amp;gt;&lt;/code&gt;. It accepts the same props as the React component, but they must be passed as strings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ui-resource-renderer&#xA;  resource=&#39;{ &#34;mimeType&#34;: &#34;text/html&#34;, &#34;text&#34;: &#34;&amp;lt;h2&amp;gt;Hello from the Web Component!&amp;lt;/h2&amp;gt;&#34; }&#39;&#xA;&amp;gt;&amp;lt;/ui-resource-renderer&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;onUIAction&lt;/code&gt; prop can be handled by attaching an event listener to the component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const renderer = document.querySelector(&#39;ui-resource-renderer&#39;);&#xA;renderer.addEventListener(&#39;onUIAction&#39;, (event) =&amp;gt; {&#xA;  console.log(&#39;Action:&#39;, event.detail);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Web Component is available in the &lt;code&gt;@mcp-ui/client&lt;/code&gt; package at &lt;code&gt;dist/ui-resource-renderer.wc.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Resource Types&lt;/h3&gt; &#xA;&lt;h4&gt;HTML (&lt;code&gt;text/html&lt;/code&gt; and &lt;code&gt;text/uri-list&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Rendered using the internal &lt;code&gt;&amp;lt;HTMLResourceRenderer /&amp;gt;&lt;/code&gt; component, which displays content inside an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;. This is suitable for self-contained HTML or embedding external apps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;mimeType&lt;/code&gt;&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;text/html&lt;/code&gt;: Renders inline HTML content.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;text/uri-list&lt;/code&gt;: Renders an external URL. MCP-UI uses the first valid &lt;code&gt;http/s&lt;/code&gt; URL.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Remote DOM (&lt;code&gt;application/vnd.mcp-ui.remote-dom&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Rendered using the internal &lt;code&gt;&amp;lt;RemoteDOMResourceRenderer /&amp;gt;&lt;/code&gt; component, which utilizes Shopify&#39;s &lt;a href=&#34;https://github.com/Shopify/remote-dom&#34;&gt;&lt;code&gt;remote-dom&lt;/code&gt;&lt;/a&gt;. The server responds with a script that describes the UI and events. On the host, the script is securely rendered in a sandboxed iframe, and the UI changes are communicated to the host in JSON, where they&#39;re rendered using the host&#39;s component library. This is more flexible than iframes and allows for UIs that match the host&#39;s look-and-feel.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;mimeType&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;application/vnd.mcp-ui.remote-dom+javascript; framework={react | webcomponents}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UI Action&lt;/h3&gt; &#xA;&lt;p&gt;UI snippets must be able to interact with the agent. In &lt;code&gt;mcp-ui&lt;/code&gt;, this is done by hooking into events sent from the UI snippet and reacting to them in the host (see &lt;code&gt;onUIAction&lt;/code&gt; prop). For example, an HTML may trigger a tool call when a button is clicked by sending an event which will be caught handled by the client.&lt;/p&gt; &#xA;&lt;h2&gt;🏗️ Installation&lt;/h2&gt; &#xA;&lt;h3&gt;TypeScript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# using npm&#xA;npm install @mcp-ui/server @mcp-ui/client&#xA;&#xA;# or pnpm&#xA;pnpm add @mcp-ui/server @mcp-ui/client&#xA;&#xA;# or yarn&#xA;yarn add @mcp-ui/server @mcp-ui/client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ruby&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install mcp_ui_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://gitmcp.io/idosal/mcp-ui&#34;&gt;GitMCP&lt;/a&gt; to give your IDE access to &lt;code&gt;mcp-ui&lt;/code&gt;&#39;s latest documentation!&lt;/p&gt; &#xA;&lt;h3&gt;TypeScript&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server-side&lt;/strong&gt;: Build your UI resources&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createUIResource } from &#39;@mcp-ui/server&#39;;&#xA;import {&#xA; createRemoteComponent,&#xA; createRemoteDocument,&#xA; createRemoteText,&#xA;} from &#39;@remote-dom/core&#39;;&#xA;&#xA;// Inline HTML&#xA;const htmlResource = createUIResource({&#xA;  uri: &#39;ui://greeting/1&#39;,&#xA;  content: { type: &#39;rawHtml&#39;, htmlString: &#39;&amp;lt;p&amp;gt;Hello, MCP UI!&amp;lt;/p&amp;gt;&#39; },&#xA;  encoding: &#39;text&#39;,&#xA;});&#xA;&#xA;// External URL&#xA;const externalUrlResource = createUIResource({&#xA;  uri: &#39;ui://greeting/1&#39;,&#xA;  content: { type: &#39;externalUrl&#39;, iframeUrl: &#39;https://example.com&#39; },&#xA;  encoding: &#39;text&#39;,&#xA;});&#xA;&#xA;// remote-dom&#xA;const remoteDomResource = createUIResource({&#xA;  uri: &#39;ui://remote-component/action-button&#39;,&#xA;  content: {&#xA;    type: &#39;remoteDom&#39;,&#xA;    script: `&#xA;     const button = document.createElement(&#39;ui-button&#39;);&#xA;     button.setAttribute(&#39;label&#39;, &#39;Click me for a tool call!&#39;);&#xA;     button.addEventListener(&#39;press&#39;, () =&amp;gt; {&#xA;       window.parent.postMessage({ type: &#39;tool&#39;, payload: { toolName: &#39;uiInteraction&#39;, params: { action: &#39;button-click&#39;, from: &#39;remote-dom&#39; } } }, &#39;*&#39;);&#xA;     });&#xA;     root.appendChild(button);&#xA;     `,&#xA;    framework: &#39;react&#39;, // or &#39;webcomponents&#39;&#xA;  },&#xA;  encoding: &#39;text&#39;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client-side&lt;/strong&gt;: Render in your MCP host&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import React from &#39;react&#39;;&#xA;import { UIResourceRenderer } from &#39;@mcp-ui/client&#39;;&#xA;&#xA;function App({ mcpResource }) {&#xA;  if (&#xA;    mcpResource.type === &#39;resource&#39; &amp;amp;&amp;amp;&#xA;    mcpResource.resource.uri?.startsWith(&#39;ui://&#39;)&#xA;  ) {&#xA;    return (&#xA;      &amp;lt;UIResourceRenderer&#xA;        resource={mcpResource.resource}&#xA;        onUIAction={(result) =&amp;gt; {&#xA;          console.log(&#39;Action:&#39;, result);&#xA;        }}&#xA;      /&amp;gt;&#xA;    );&#xA;  }&#xA;  return &amp;lt;p&amp;gt;Unsupported resource&amp;lt;/p&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Ruby&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Server-side&lt;/strong&gt;: Build your UI resources&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;mcp_ui_server&#39;&#xA;&#xA;# Inline HTML&#xA;html_resource = McpUiServer.create_ui_resource(&#xA;  uri: &#39;ui://greeting/1&#39;,&#xA;  content: { type: :raw_html, htmlString: &#39;&amp;lt;p&amp;gt;Hello, from Ruby!&amp;lt;/p&amp;gt;&#39; },&#xA;  encoding: :text&#xA;)&#xA;&#xA;# External URL&#xA;external_url_resource = McpUiServer.create_ui_resource(&#xA;  uri: &#39;ui://greeting/2&#39;,&#xA;  content: { type: :external_url, iframeUrl: &#39;https://example.com&#39; },&#xA;  encoding: :text&#xA;)&#xA;&#xA;# remote-dom&#xA;remote_dom_resource = McpUiServer.create_ui_resource(&#xA;  uri: &#39;ui://remote-component/action-button&#39;,&#xA;  content: {&#xA;    type: :remote_dom,&#xA;    script: &#34;&#xA;     const button = document.createElement(&#39;ui-button&#39;);&#xA;     button.setAttribute(&#39;label&#39;, &#39;Click me from Ruby!&#39;);&#xA;     button.addEventListener(&#39;press&#39;, () =&amp;gt; {&#xA;       window.parent.postMessage({ type: &#39;tool&#39;, payload: { toolName: &#39;uiInteraction&#39;, params: { action: &#39;button-click&#39;, from: &#39;ruby-remote-dom&#39; } } }, &#39;*&#39;);&#xA;     });&#xA;     root.appendChild(button);&#xA;     &#34;,&#xA;    framework: :react,&#xA;  },&#xA;  encoding: :text&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚶 Walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;For a detailed, simple, step-by-step guide on how to integrate &lt;code&gt;mcp-ui&lt;/code&gt; into your own server, check out the full server walkthroughs on the &lt;a href=&#34;https://mcpui.dev&#34;&gt;mcp-ui documentation site&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://mcpui.dev/guide/server/typescript/walkthrough&#34;&gt;TypeScript Server Walkthrough&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://mcpui.dev/guide/server/ruby/walkthrough&#34;&gt;Ruby Server Walkthrough&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These guides will show you how to add a &lt;code&gt;mcp-ui&lt;/code&gt; endpoint to an existing server, create tools that return UI resources, and test your setup with the &lt;code&gt;ui-inspector&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;🌍 Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Client Examples&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/idosal/ui-inspector&#34;&gt;ui-inspector&lt;/a&gt; - inspect local &lt;code&gt;mcp-ui&lt;/code&gt;-enabled servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/idosal/scira-mcp-ui-chat&#34;&gt;MCP-UI Chat&lt;/a&gt; - interactive chat built with the &lt;code&gt;mcp-ui&lt;/code&gt; client. Check out the &lt;a href=&#34;https://scira-mcp-chat-git-main-idosals-projects.vercel.app/&#34;&gt;hosted version&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;MCP-UI RemoteDOM Playground (&lt;code&gt;examples/remote-dom-demo&lt;/code&gt;) - local demo app to test RemoteDOM resources (intended for hosts)&lt;/li&gt; &#xA; &lt;li&gt;MCP-UI Web Component Demo (&lt;code&gt;examples/wc-demo&lt;/code&gt;) - local demo app to test the Web Component&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Server Examples&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: A &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/examples/server&#34;&gt;full-featured server&lt;/a&gt; that is deployed to a hosted environment for easy testing. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/examples/typescript-server-demo&#34;&gt;&lt;code&gt;typescript-server-demo&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: A simple Typescript server that demonstrates how to generate UI resources.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;server&lt;/strong&gt;: A &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/examples/server&#34;&gt;full-featured Typescript server&lt;/a&gt; that is deployed to a hosted Cloudflare environment for easy testing. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;HTTP Streaming&lt;/strong&gt;: &lt;code&gt;https://remote-mcp-server-authless.idosalomon.workers.dev/mcp&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;SSE&lt;/strong&gt;: &lt;code&gt;https://remote-mcp-server-authless.idosalomon.workers.dev/sse&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: A barebones &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/examples/ruby-server-demo&#34;&gt;demo server&lt;/a&gt; that shows how to use &lt;code&gt;mcp_ui_server&lt;/code&gt; and &lt;code&gt;mcp&lt;/code&gt; gems together.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Drop those URLs into any MCP-compatible host to see &lt;code&gt;mcp-ui&lt;/code&gt; in action. For a supported local inspector, see the &lt;a href=&#34;https://github.com/idosal/ui-inspector&#34;&gt;ui-inspector&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🔒 Security&lt;/h2&gt; &#xA;&lt;p&gt;Host and user security is one of &lt;code&gt;mcp-ui&lt;/code&gt;&#39;s primary concerns. In all content types, the remote code is executed in a sandboxed iframe.&lt;/p&gt; &#xA;&lt;h2&gt;🛣️ Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Add online playground&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Expand UI Action API (beyond tool calls)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Support Web Components&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Support Remote-DOM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Add component libraries (in progress)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Add SDKs for additional programming languages (in progress; Ruby available)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Support additional frontend frameworks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Add declarative UI content type&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Support generative UI?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Team&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mcp-ui&lt;/code&gt; is a project by &lt;a href=&#34;https://x.com/idosal1&#34;&gt;Ido Salomon&lt;/a&gt;, in collaboration with &lt;a href=&#34;https://x.com/liadyosef&#34;&gt;Liad Yosef&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions, ideas, and bug reports are welcome! See the &lt;a href=&#34;https://github.com/idosal/mcp-ui/raw/main/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0 © &lt;a href=&#34;https://raw.githubusercontent.com/idosal/mcp-ui/main/LICENSE&#34;&gt;The MCP-UI Authors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is provided &#34;as is&#34;, without warranty of any kind. The &lt;code&gt;mcp-ui&lt;/code&gt; authors and contributors shall not be held liable for any damages, losses, or issues arising from the use of this software. Use at your own risk.&lt;/p&gt;</summary>
  </entry>
</feed>