<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-23T01:41:38Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>willianrod/ODeck</title>
    <updated>2023-08-23T01:41:38Z</updated>
    <id>tag:github.com,2023-08-23:/willianrod/ODeck</id>
    <link href="https://github.com/willianrod/ODeck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A free and open-source alternative to StreamDeck&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6539258/154814361-066e5010-40a8-4820-a706-ed9803a319a1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  ‚ö†Ô∏è THIS SOFTWARE IS STILL IN ALPHA AND MAY CONTAIN BUGS ‚ö†Ô∏è &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;For Users&lt;/h1&gt; &#xA;&lt;p&gt;ODeck is a free and open source alternative to StreamDeck made with React, React Native, Electron, Socket.IO and some other tecnologies. It allows you to easily control some features of your computer with the power of a tap on your smartphone.&lt;/p&gt; &#xA;&lt;p&gt;It tends to be a cheaper alternative to StreamDeck because you can use your current smartphone or clean the dust from an older device from the bottom of your drawer and give another pourpose of life to this device.&lt;/p&gt; &#xA;&lt;h2&gt;Suported OS&lt;/h2&gt; &#xA;&lt;p&gt;Currently ODeck is not yet supported on all platforms, but it should be in the near future. See the listing of the current OS suported.&lt;/p&gt; &#xA;&lt;h3&gt;Deck&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Admin Dashboard&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open an URL&lt;/li&gt; &#xA; &lt;li&gt;Emit a combination of keys to invoke hotkeys&lt;/li&gt; &#xA; &lt;li&gt;Run an EXE file&lt;/li&gt; &#xA; &lt;li&gt;Media keys to interact with media playing on your system&lt;/li&gt; &#xA; &lt;li&gt;Create multiple pages&lt;/li&gt; &#xA; &lt;li&gt;Play any sound when pressing a button&lt;/li&gt; &#xA; &lt;li&gt;Navigate between pages&lt;/li&gt; &#xA; &lt;li&gt;Pair app with QR Code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upcoming features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OBS integration&lt;/li&gt; &#xA; &lt;li&gt;Image upload input&lt;/li&gt; &#xA; &lt;li&gt;Prevent broken layout with custom key amount&lt;/li&gt; &#xA; &lt;li&gt;Twitch integration&lt;/li&gt; &#xA; &lt;li&gt;Add Linux and mac support for Admin Dashboard&lt;/li&gt; &#xA; &lt;li&gt;Add iOS support for the ODeck App&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deck preview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/willianrod/ODeck/assets/6539258/9c58dbb1-38f6-4602-b211-aecbfc8e4dff&#34;&gt;https://github.com/willianrod/ODeck/assets/6539258/9c58dbb1-38f6-4602-b211-aecbfc8e4dff&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Admin dashboard preview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/willianrod/ODeck/assets/6539258/51710202-d665-4f8c-bd7c-17c470e8e29b&#34;&gt;https://github.com/willianrod/ODeck/assets/6539258/51710202-d665-4f8c-bd7c-17c470e8e29b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;h3&gt;Deck&lt;/h3&gt; &#xA;&lt;h4&gt;Navigate&lt;/h4&gt; &#xA;&lt;p&gt;This action allows you to navigate between the deck pages&lt;/p&gt; &#xA;&lt;h4&gt;Go Back&lt;/h4&gt; &#xA;&lt;p&gt;This action allows you to go to the previows page shown&lt;/p&gt; &#xA;&lt;h3&gt;System&lt;/h3&gt; &#xA;&lt;h4&gt;Run executable&lt;/h4&gt; &#xA;&lt;p&gt;This action when pressed, opens an especified EXE file. To use it, you must put the complete path of the desired .exe file direct into the &#34;Path&#34; input. (In the near future there will be a button where you will navigate to find your desired file)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6539258/154814786-f08d6a64-04b2-4bfc-833f-6d68076fdf55.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Hotkey&lt;/h4&gt; &#xA;&lt;p&gt;With this action you will be able to invoke any hotkeys in your machine. It simulate the press of multiple keys in your machine, just like a normal keyboard but with just on touch of your finger.&lt;/p&gt; &#xA;&lt;p&gt;By now you need to check this documentation here to see all available keys you can use (&lt;a href=&#34;http://robotjs.io/docs/syntax#keyboard&#34;&gt;http://robotjs.io/docs/syntax#keyboard&lt;/a&gt;). The most common keys is listed bellow.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shift&lt;/li&gt; &#xA; &lt;li&gt;control&lt;/li&gt; &#xA; &lt;li&gt;alt&lt;/li&gt; &#xA; &lt;li&gt;tab&lt;/li&gt; &#xA; &lt;li&gt;right_shift&lt;/li&gt; &#xA; &lt;li&gt;space&lt;/li&gt; &#xA; &lt;li&gt;Numbers and letters are represented by their own values. (a-z,0-9)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, if you want to simulate the press of this combination of keys (CTRL + ALT + SHIFT + 1) you will need to replace the key with their value shown on the documentation and separete them with a comma.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;control,shift,alt,1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6539258/154814990-24aa87ed-6bb4-4cd1-8836-c7ade215749b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Obs: In the near future will be an input to record all keys your key pressed and use this recored keys as value.&lt;/p&gt; &#xA;&lt;h3&gt;Media&lt;/h3&gt; &#xA;&lt;p&gt;This sections is self explanatory. When pressed, it will invoke the button action.&lt;/p&gt; &#xA;&lt;h1&gt;For Contributors&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repo and install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/willianrod/ODeck.git ODeck&#xA;cd ODeck&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting Development&lt;/h2&gt; &#xA;&lt;p&gt;Start the app in the &lt;code&gt;dev&lt;/code&gt; environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packaging for Production&lt;/h2&gt; &#xA;&lt;p&gt;To package apps for the local platform:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WillianRod&#34;&gt;Willian Rodrigues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Credits to &lt;a href=&#34;https://github.com/electron-react-boilerplate/electron-react-boilerplate&#34;&gt;electron-react-boilerplate&lt;/a&gt; for making an awesome template for creating electron based React application.&lt;/p&gt; &#xA;&lt;p&gt;MIT ¬© &lt;a href=&#34;https://github.com/WillianRod/ODeck&#34;&gt;ODeck&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jackyzha0/quartz</title>
    <updated>2023-08-23T01:41:38Z</updated>
    <id>tag:github.com,2023-08-23:/jackyzha0/quartz</id>
    <link href="https://github.com/jackyzha0/quartz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üå± a fast, batteries-included static-site generator that transforms Markdown content into fully functional websites&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quartz v4&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚Äú[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.‚Äù ‚Äî Richard Hamming&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Quartz is a set of tools that helps you publish your &lt;a href=&#34;https://jzhao.xyz/posts/networked-thought&#34;&gt;digital garden&lt;/a&gt; and notes as a website for free. Quartz v4 features a from-the-ground rewrite focusing on end-user extensibility and ease-of-use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are looking for Quartz v3, you can find it on the &lt;a href=&#34;https://github.com/jackyzha0/quartz/tree/hugo&#34;&gt;&lt;code&gt;hugo&lt;/code&gt; branch&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üîó Read the documentation and get started: &lt;a href=&#34;https://quartz.jzhao.xyz/&#34;&gt;https://quartz.jzhao.xyz/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/cRFFHYye7t&#34;&gt;Join the Discord Community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/jackyzha0&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/jackyzha0/jackyzha0/sponsorkit/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/chat-ui</title>
    <updated>2023-08-23T01:41:38Z</updated>
    <id>tag:github.com,2023-08-23:/huggingface/chat-ui</id>
    <link href="https://github.com/huggingface/chat-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source codebase powering the HuggingChat app&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: chat-ui emoji: üî• colorFrom: purple colorTo: purple sdk: docker pinned: false license: apache-2.0 base_path: /chat app_port: 3000&lt;/h2&gt; &#xA;&lt;h1&gt;Chat UI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/documentation-images/raw/f038917dd40d711a72d654ab1abfc03ae9f177e6/chat-ui-repo-thumbnail.svg?sanitize=true&#34; alt=&#34;Chat UI repository thumbnail&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A chat interface using open source models, eg OpenAssistant or Llama. It is a SvelteKit app and it powers the &lt;a href=&#34;https://huggingface.co/chat&#34;&gt;HuggingChat app on hf.co/chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#no-setup-deploy&#34;&gt;No Setup Deploy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#launch&#34;&gt;Launch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#extra-parameters&#34;&gt;Extra parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#deploying-to-a-hf-space&#34;&gt;Deploying to a HF Space&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&amp;nbsp;No Setup Deploy&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to configure, setup, and launch your own Chat UI yourself, you can use this option as a fast deploy alternative.&lt;/p&gt; &#xA;&lt;p&gt;You can deploy your own customized Chat UI instance with any supported LLM of your choice with only a few clicks to Hugging Face Spaces thanks to the Chat UI Spaces Docker template. Get started &lt;a href=&#34;https://huggingface.co/new-space?template=huggingchat/chat-ui-template&#34;&gt;here&lt;/a&gt;. If you&#39;d like to deploy a model with gated access or a model in a private repository, you can simply provide &lt;code&gt;HUGGING_FACE_HUB_TOKEN&lt;/code&gt; in &lt;a href=&#34;https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables&#34;&gt;Space secrets&lt;/a&gt;. You need to set its value to an access token you can get from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read the full tutorial &lt;a href=&#34;https://huggingface.co/docs/hub/spaces-sdks-docker-chatui#chatui-on-spaces&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The default config for Chat UI is stored in the &lt;code&gt;.env&lt;/code&gt; file. You will need to override some values to get Chat UI to run locally. This is done in &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Start by creating a &lt;code&gt;.env.local&lt;/code&gt; file in the root of the repository. The bare minimum config you need to get Chat UI to run locally is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MONGODB_URL=&amp;lt;the URL to your mongoDB instance&amp;gt;&#xA;HF_ACCESS_TOKEN=&amp;lt;your access token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;The chat history is stored in a MongoDB instance, and having a DB instance available is needed for Chat UI to work.&lt;/p&gt; &#xA;&lt;p&gt;You can use a local MongoDB instance. The easiest way is to spin one up using docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 27017:27017 --name mongo-chatui mongo:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In which case the url of your DB will be &lt;code&gt;MONGODB_URL=mongodb://localhost:27017&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use a &lt;a href=&#34;https://www.mongodb.com/pricing&#34;&gt;free MongoDB Atlas&lt;/a&gt; instance for this, Chat UI should fit comfortably within their free tier. After which you can set the &lt;code&gt;MONGODB_URL&lt;/code&gt; variable in &lt;code&gt;.env.local&lt;/code&gt; to match your instance.&lt;/p&gt; &#xA;&lt;h3&gt;Hugging Face Access Token&lt;/h3&gt; &#xA;&lt;p&gt;You will need a Hugging Face access token to run Chat UI locally, if you use a remote inference endpoint. You can get one from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;your Hugging Face profile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Launch&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;re done with the &lt;code&gt;.env.local&lt;/code&gt; file you can run Chat UI locally with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extra parameters&lt;/h2&gt; &#xA;&lt;h3&gt;OpenID connect&lt;/h3&gt; &#xA;&lt;p&gt;The login feature is disabled by default and users are attributed a unique ID based on their browser. But if you want to use OpenID to authenticate your users, you can add the following to your &lt;code&gt;.env.local&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENID_PROVIDER_URL=&amp;lt;your OIDC issuer&amp;gt;&#xA;OPENID_CLIENT_ID=&amp;lt;your OIDC client ID&amp;gt;&#xA;OPENID_CLIENT_SECRET=&amp;lt;your OIDC client secret&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These variables will enable the openID sign-in modal for users.&lt;/p&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;You can use a few environment variables to customize the look and feel of chat-ui. These are by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PUBLIC_APP_NAME=ChatUI&#xA;PUBLIC_APP_ASSETS=chatui&#xA;PUBLIC_APP_COLOR=blue&#xA;PUBLIC_APP_DATA_SHARING=&#xA;PUBLIC_APP_DISCLAIMER=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_NAME&lt;/code&gt; The name used as a title throughout the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_ASSETS&lt;/code&gt; Is used to find logos &amp;amp; favicons in &lt;code&gt;static/$PUBLIC_APP_ASSETS&lt;/code&gt;, current options are &lt;code&gt;chatui&lt;/code&gt; and &lt;code&gt;huggingchat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_COLOR&lt;/code&gt; Can be any of the &lt;a href=&#34;https://tailwindcss.com/docs/customizing-colors#default-color-palette&#34;&gt;tailwind colors&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_DATA_SHARING&lt;/code&gt; Can be set to 1 to add a toggle in the user settings that lets your users opt-in to data sharing with models creator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_DISCLAIMER&lt;/code&gt; If set to 1, we show a disclaimer about generated outputs on login.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Web Search&lt;/h3&gt; &#xA;&lt;p&gt;You can enable the web search by adding either &lt;code&gt;SERPER_API_KEY&lt;/code&gt; (&lt;a href=&#34;https://serper.dev/&#34;&gt;serper.dev&lt;/a&gt;) or &lt;code&gt;SERPAPI_KEY&lt;/code&gt; (&lt;a href=&#34;https://serpapi.com/&#34;&gt;serpapi.com&lt;/a&gt;) to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom models&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the parameters passed to the model or even use a new model by updating the &lt;code&gt;MODELS&lt;/code&gt; variable in your &lt;code&gt;.env.local&lt;/code&gt;. The default one can be found in &lt;code&gt;.env&lt;/code&gt; and looks like this :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;MODELS=`[&#xA;  {&#xA;    &#34;name&#34;: &#34;OpenAssistant/oasst-sft-4-pythia-12b-epoch-3.5&#34;,&#xA;    &#34;datasetName&#34;: &#34;OpenAssistant/oasst1&#34;,&#xA;    &#34;description&#34;: &#34;A good alternative to ChatGPT&#34;,&#xA;    &#34;websiteUrl&#34;: &#34;https://open-assistant.io&#34;,&#xA;    &#34;userMessageToken&#34;: &#34;&amp;lt;|prompter|&amp;gt;&#34;, # This does not need to be a token, can be any string&#xA;    &#34;assistantMessageToken&#34;: &#34;&amp;lt;|assistant|&amp;gt;&#34;, # This does not need to be a token, can be any string&#xA;    &#34;userMessageEndToken&#34;: &#34;&amp;lt;|endoftext|&amp;gt;&#34;, # Applies only to user messages. Can be any string.&#xA;    &#34;assistantMessageEndToken&#34;: &#34;&amp;lt;|endoftext|&amp;gt;&#34;, # Applies only to assistant messages. Can be any string.&#xA;    &#34;preprompt&#34;: &#34;Below are a series of dialogues between various people and an AI assistant. The AI tries to be helpful, polite, honest, sophisticated, emotionally aware, and humble-but-knowledgeable. The assistant is happy to help with almost anything, and will do its best to understand exactly what is needed. It also tries to avoid giving false or misleading information, and it caveats when it isn&#39;t entirely sure about the right answer. That said, the assistant is practical and really does its best, and doesn&#39;t let caution get too much in the way of being useful.\n-----\n&#34;,&#xA;    &#34;promptExamples&#34;: [&#xA;      {&#xA;        &#34;title&#34;: &#34;Write an email from bullet list&#34;,&#xA;        &#34;prompt&#34;: &#34;As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)&#34;&#xA;      }, {&#xA;        &#34;title&#34;: &#34;Code a snake game&#34;,&#xA;        &#34;prompt&#34;: &#34;Code a basic snake game in python, give explanations for each step.&#34;&#xA;      }, {&#xA;        &#34;title&#34;: &#34;Assist in a task&#34;,&#xA;        &#34;prompt&#34;: &#34;How do I make a delicious lemon cheesecake?&#34;&#xA;      }&#xA;    ],&#xA;    &#34;parameters&#34;: {&#xA;      &#34;temperature&#34;: 0.9,&#xA;      &#34;top_p&#34;: 0.95,&#xA;      &#34;repetition_penalty&#34;: 1.2,&#xA;      &#34;top_k&#34;: 50,&#xA;      &#34;truncate&#34;: 1000,&#xA;      &#34;max_new_tokens&#34;: 1024,&#xA;      &#34;stop&#34;: [&#34;&amp;lt;|endoftext|&amp;gt;&#34;]  # This does not need to be tokens, can be any list of strings&#xA;    }&#xA;  }&#xA;]`&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change things like the parameters, or customize the preprompt to better suit your needs. You can also add more models by adding more objects to the array, with different preprompts for example.&lt;/p&gt; &#xA;&lt;h4&gt;Custom prompt templates:&lt;/h4&gt; &#xA;&lt;p&gt;By default the prompt is constructed using &lt;code&gt;userMessageToken&lt;/code&gt;, &lt;code&gt;assistantMessageToken&lt;/code&gt;, &lt;code&gt;userMessageEndToken&lt;/code&gt;, &lt;code&gt;assistantMessageEndToken&lt;/code&gt;, &lt;code&gt;preprompt&lt;/code&gt; parameters and a series of default templates.&lt;/p&gt; &#xA;&lt;p&gt;However, these templates can be modified by setting the &lt;code&gt;chatPromptTemplate&lt;/code&gt;, &lt;code&gt;webSearchSummaryPromptTemplate&lt;/code&gt;, and &lt;code&gt;webSearchQueryPromptTemplate&lt;/code&gt; parameters. Note that if WebSearch is not enabled, only &lt;code&gt;chatPromptTemplate&lt;/code&gt; needs to be set. The template language is &lt;a href=&#34;https://handlebarsjs.com&#34;&gt;https://handlebarsjs.com&lt;/a&gt;. The templates have access to the model&#39;s prompt parameters (&lt;code&gt;preprompt&lt;/code&gt;, etc.). However, if the templates are specified it is recommended to inline the prompt parameters, as using the references (&lt;code&gt;{{preprompt}}&lt;/code&gt;) is deprecated.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;System&amp;gt;You are an AI, called ChatAI.&amp;lt;/System&amp;gt;&#xA;{{#each messages}}&#xA;  {{#ifUser}}&amp;lt;User&amp;gt;{{content}}&amp;lt;/User&amp;gt;{{/ifUser}}&#xA;  {{#ifAssistant}}&amp;lt;Assistant&amp;gt;{{content}}&amp;lt;/Assistant&amp;gt;{{/ifAssistant}}&#xA;{{/each}}&#xA;&amp;lt;Assistant&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;chatPromptTemplate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When quering the model for a chat response, the &lt;code&gt;chatPromptTemplate&lt;/code&gt; template is used. &lt;code&gt;messages&lt;/code&gt; is an array of chat messages, it has the format &lt;code&gt;[{ content: string }, ...]&lt;/code&gt;. To idenify if a message is a user message or an assistant message the &lt;code&gt;ifUser&lt;/code&gt; and &lt;code&gt;ifAssistant&lt;/code&gt; block helpers can be used.&lt;/p&gt; &#xA;&lt;p&gt;The following is the default &lt;code&gt;chatPromptTemplate&lt;/code&gt;, although newlines and indentiation have been added for readability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{preprompt}}&#xA;{{#each messages}}&#xA;  {{#ifUser}}{{@root.userMessageToken}}{{content}}{{@root.userMessageEndToken}}{{/ifUser}}&#xA;  {{#ifAssistant}}{{@root.assistantMessageToken}}{{content}}{{@root.assistantMessageEndToken}}{{/ifAssistant}}&#xA;{{/each}}&#xA;{{assistantMessageToken}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;webSearchQueryPromptTemplate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When performing a websearch, the search query is constructed using the &lt;code&gt;webSearchQueryPromptTemplate&lt;/code&gt; template. It is recommended that that the prompt instructs the chat model to only return a few keywords.&lt;/p&gt; &#xA;&lt;p&gt;The following is the default &lt;code&gt;webSearchQueryPromptTemplate&lt;/code&gt;. Note that not all models supports consecutive user-messages which this template uses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{userMessageToken}}&#xA;  The following messages were written by a user, trying to answer a question.&#xA;{{userMessageEndToken}}&#xA;{{#each messages}}&#xA;  {{#ifUser}}{{@root.userMessageToken}}{{content}}{{@root.userMessageEndToken}}{{/ifUser}}&#xA;{{/each}}&#xA;{{userMessageToken}}&#xA;  What plain-text english sentence would you input into Google to answer the last question? Answer with a short (10 words max) simple sentence.&#xA;{{userMessageEndToken}}&#xA;{{assistantMessageToken}}Query:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;webSearchSummaryPromptTemplate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The search-engine response (&lt;code&gt;answer&lt;/code&gt;) is summarized using the following prompt template. However, when &lt;code&gt;HF_ACCESS_TOKEN&lt;/code&gt; is provided, a dedicated summary model is used instead. Additionally, the model&#39;s &lt;code&gt;query&lt;/code&gt; response to &lt;code&gt;webSearchQueryPromptTemplate&lt;/code&gt; is also available to this template.&lt;/p&gt; &#xA;&lt;p&gt;The following is the default &lt;code&gt;webSearchSummaryPromptTemplate&lt;/code&gt;. Note that not all models supports consecutive user-messages which this template uses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{userMessageToken}}{{answer}}{{userMessageEndToken}}&#xA;{{userMessageToken}}&#xA;  The text above should be summarized to best answer the query: {{query}}.&#xA;{{userMessageEndToken}}&#xA;{{assistantMessageToken}}Summary:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running your own models using a custom endpoint&lt;/h4&gt; &#xA;&lt;p&gt;If you want to, instead of hitting models on the Hugging Face Inference API, you can run your own models locally.&lt;/p&gt; &#xA;&lt;p&gt;A good option is to hit a &lt;a href=&#34;https://github.com/huggingface/text-generation-inference&#34;&gt;text-generation-inference&lt;/a&gt; endpoint. This is what is done in the official &lt;a href=&#34;https://huggingface.co/new-space?template=huggingchat/chat-ui-template&#34;&gt;Chat UI Spaces Docker template&lt;/a&gt; for instance: both this app and a text-generation-inference server run inside the same container.&lt;/p&gt; &#xA;&lt;p&gt;To do this, you can add your own endpoints to the &lt;code&gt;MODELS&lt;/code&gt; variable in &lt;code&gt;.env.local&lt;/code&gt;, by adding an &lt;code&gt;&#34;endpoints&#34;&lt;/code&gt; key for each model in &lt;code&gt;MODELS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;{&#xA;// rest of the model config here&#xA;&#34;endpoints&#34;: [{&#34;url&#34;: &#34;https://HOST:PORT&#34;}]&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;endpoints&lt;/code&gt; is left unspecified, ChatUI will look for the model on the hosted Hugging Face inference API using the model name.&lt;/p&gt; &#xA;&lt;h3&gt;Custom endpoint authorization&lt;/h3&gt; &#xA;&lt;h4&gt;Basic and Bearer&lt;/h4&gt; &#xA;&lt;p&gt;Custom endpoints may require authorization, depending on how you configure them. Authentication will usually be set either with &lt;code&gt;Basic&lt;/code&gt; or &lt;code&gt;Bearer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;Basic&lt;/code&gt; we will need to generate a base64 encoding of the username and password.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;echo -n &#34;USER:PASS&#34; | base64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;VVNFUjpQQVNT&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For &lt;code&gt;Bearer&lt;/code&gt; you can use a token, which can be grabbed from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then add the generated information and the &lt;code&gt;authorization&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&#34;endpoints&#34;: [&#xA;{&#xA;&#34;url&#34;: &#34;https://HOST:PORT&#34;,&#xA;&#34;authorization&#34;: &#34;Basic VVNFUjpQQVNT&#34;,&#xA;}&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Amazon SageMaker&lt;/h3&gt; &#xA;&lt;p&gt;You can also specify your Amazon SageMaker instance as an endpoint for chat-ui. The config goes like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;endpoints&#34;: [&#xA;    {&#xA;      &#34;host&#34; : &#34;sagemaker&#34;,&#xA;      &#34;url&#34;: &#34;&#34;, // your aws sagemaker url here&#xA;      &#34;accessKey&#34;: &#34;&#34;,&#xA;      &#34;secretKey&#34; : &#34;&#34;,&#xA;      &#34;sessionToken&#34;: &#34;&#34;, // optional&#xA;      &#34;weight&#34;: 1&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get the &lt;code&gt;accessKey&lt;/code&gt; and &lt;code&gt;secretKey&lt;/code&gt; from your AWS user, under programmatic access.&lt;/p&gt; &#xA;&lt;h4&gt;Client Certificate Authentication (mTLS)&lt;/h4&gt; &#xA;&lt;p&gt;Custom endpoints may require client certificate authentication, depending on how you configure them. To enable mTLS between Chat UI and your custom endpoint, you will need to set the &lt;code&gt;USE_CLIENT_CERTIFICATE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, and add the &lt;code&gt;CERT_PATH&lt;/code&gt; and &lt;code&gt;KEY_PATH&lt;/code&gt; parameters to your &lt;code&gt;.env.local&lt;/code&gt;. These parameters should point to the location of the certificate and key files on your local machine. The certificate and key files should be in PEM format. The key file can be encrypted with a passphrase, in which case you will also need to add the &lt;code&gt;CLIENT_KEY_PASSWORD&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a certificate signed by a private CA, you will also need to add the &lt;code&gt;CA_PATH&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;. This parameter should point to the location of the CA certificate file on your local machine.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a self-signed certificate, e.g. for testing or development purposes, you can set the &lt;code&gt;REJECT_UNAUTHORIZED&lt;/code&gt; parameter to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;.env.local&lt;/code&gt;. This will disable certificate validation, and allow Chat UI to connect to your custom endpoint.&lt;/p&gt; &#xA;&lt;h4&gt;Models hosted on multiple custom endpoints&lt;/h4&gt; &#xA;&lt;p&gt;If the model being hosted will be available on multiple servers/instances add the &lt;code&gt;weight&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;. The &lt;code&gt;weight&lt;/code&gt; will be used to determine the probability of requesting a particular endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&#34;endpoints&#34;: [&#xA;{&#xA;&#34;url&#34;: &#34;https://HOST:PORT&#34;,&#xA;&#34;weight&#34;: 1&#xA;}&#xA;{&#xA;&#34;url&#34;: &#34;https://HOST:PORT&#34;,&#xA;&#34;weight&#34;: 2&#xA;}&#xA;...&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploying to a HF Space&lt;/h2&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;DOTENV_LOCAL&lt;/code&gt; secret to your HF space with the content of your .env.local, and they will be picked up automatically when you run.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To create a production version of your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can preview the production build with &lt;code&gt;npm run preview&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To deploy your app, you may need to install an &lt;a href=&#34;https://kit.svelte.dev/docs/adapters&#34;&gt;adapter&lt;/a&gt; for your target environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>