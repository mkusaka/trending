<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-29T01:47:10Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sourcegraph/cody</title>
    <updated>2023-07-29T01:47:10Z</updated>
    <id>tag:github.com,2023-07-29:/sourcegraph/cody</id>
    <link href="https://github.com/sourcegraph/cody" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code AI with codebase context&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;img src=&#34;https://storage.googleapis.com/sourcegraph-assets/cody/20230417/logomark-default.svg?sanitize=true&#34; width=&#34;26&#34;&gt; Cody&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;Code AI with codebase context&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&#34;an AI pair programmer that actually knows about your entire codebase&#39;s APIs, impls, and idioms&#34;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.sourcegraph.com/cody&#34;&gt;Docs&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://cody.dev&#34;&gt;cody.dev&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sourcegraph.cody-ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/vscode-marketplace/v/sourcegraph.cody-ai.svg?label=vscode%20ext&#34; alt=&#34;vscode extension&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sourcegraph/cody/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/sourcegraph/cody/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/sourcegraph&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/sourcegraph.svg?label=Follow%20%40sourcegraph&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/s2qDtYGnAE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/s2qDtYGnAE?style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sourcegraph.cody-ai&#34;&gt;‚≠ê &lt;strong&gt;Install Cody from the VS Code Marketplace&lt;/strong&gt;&lt;/a&gt;, then check out the &lt;a href=&#34;https://raw.githubusercontent.com/sourcegraph/cody/main/#demos&#34;&gt;demos&lt;/a&gt; to see what you can do.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;‚Äî or ‚Äî&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build and run VS Code extension locally: &lt;code&gt;pnpm install &amp;amp;&amp;amp; cd vscode &amp;amp;&amp;amp; pnpm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://cody.dev&#34;&gt;all supported editors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Cody?&lt;/h2&gt; &#xA;&lt;p&gt;Cody is a code AI tool that autocompletes, writes, fixes, and refactors code (and answers code questions), with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Codebase context:&lt;/strong&gt; Cody fetches relevant code context from across your entire codebase to write better code that uses more of your codebase&#39;s APIs, impls, and idioms, with less hallucination.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor features:&lt;/strong&gt; Popular extensions for &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sourcegraph.cody-ai&#34;&gt;VS Code&lt;/a&gt; and &lt;a href=&#34;https://plugins.jetbrains.com/plugin/9682-cody-ai-by-sourcegraph&#34;&gt;JetBrains&lt;/a&gt; (and WIP support for Neovim and Emacs). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Autocomplete:&lt;/strong&gt; with better suggestions based on your entire codebase, not just a few recently opened files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Inline chat:&lt;/strong&gt; refactor code based on natural language input, ask questions about code snippets, etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Recipes:&lt;/strong&gt; explain code, generate unit test, generate docstring, and many more (contribute your own!)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Codebase-wide chat:&lt;/strong&gt; ask questions about your entire codebase&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swappable LLMs:&lt;/strong&gt; Support for Anthropic Claude and OpenAI GPT-4/3.5, highly experimental support for self-hosted LLMs, and more soon. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Free LLM usage included&lt;/strong&gt; (currently Anthropic Claude/OpenAI GPT-4) for individual devs on both personal and work code, subject to reasonable per-user rate limits (&lt;a href=&#34;https://raw.githubusercontent.com/sourcegraph/cody/main/#usage&#34;&gt;more info&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://cody.dev&#34;&gt;cody.dev&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Autocomplete&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;img src=&#34;https://storage.googleapis.com/sourcegraph-assets/website/Product%20Animations/GIFS/cody-completions-may2023-optim-sm2.gif&#34; width=&#34;400&#34;&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inline chat&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;img src=&#34;https://storage.googleapis.com/sourcegraph-assets/website/Product%20Animations/GIFS/cody_inline_June23-sm.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cody.dev&#34;&gt;More demos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All code in this repository is open source (Apache 2).&lt;/p&gt; &#xA;&lt;p&gt;Quickstart: &lt;code&gt;pnpm install &amp;amp;&amp;amp; cd vscode &amp;amp;&amp;amp; pnpm run dev&lt;/code&gt; to run a local build of the Cody VS Code extension.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sourcegraph/cody/main/doc/dev/index.md&#34;&gt;development docs&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Feedback&lt;/h3&gt; &#xA;&lt;p&gt;Cody is often magical and sometimes frustratingly wrong. Cody&#39;s goal is to be powerful &lt;em&gt;and&lt;/em&gt; accurate. You can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the &lt;kbd&gt;üëç&lt;/kbd&gt;/&lt;kbd&gt;üëé&lt;/kbd&gt; buttons in the chat sidebar to give feedback.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcegraph/cody/issues&#34;&gt;File an issue&lt;/a&gt; (or submit a PR!) when you see problems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcegraph/cody/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/s2qDtYGnAE&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Individual usage&lt;/h3&gt; &#xA;&lt;p&gt;Individual usage of Cody currently requires a (free) &lt;a href=&#34;https://sourcegraph.com&#34;&gt;Sourcegraph.com&lt;/a&gt; account because we need to prevent abuse of the free Anthropic/OpenAI LLM usage. We&#39;re working on supporting more swappable LLM options (including using your own Anthropic/OpenAI account or a self-hosted LLM) to make it possible to use Cody without any required third-party dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Codying at work&lt;/h3&gt; &#xA;&lt;p&gt;You can use your free individual account when Codying on your work code. If that doesn&#39;t meet your needs (because you need higher rate limits, a dedicated/single-tenant instance, scalable embeddings, audit logs, etc.), &lt;a href=&#34;https://forms.gle/SBPfmihdyEvUPEc86&#34;&gt;fill out the &#34;Cody at work&#34; form&lt;/a&gt; and we&#39;ll help.&lt;/p&gt; &#xA;&lt;h3&gt;Existing Sourcegraph customers&lt;/h3&gt; &#xA;&lt;p&gt;The Cody editor extensions work with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sourcegraph Cloud&lt;/li&gt; &#xA; &lt;li&gt;Sourcegraph Enterprise Server (self-hosted) instances on version 5.1 or later&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tomalaforge/angular-challenges</title>
    <updated>2023-07-29T01:47:10Z</updated>
    <id>tag:github.com,2023-07-29:/tomalaforge/angular-challenges</id>
    <link href="https://github.com/tomalaforge/angular-challenges" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/logo/angular-challenge.png&#34; height=&#34;150px&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;font-weight:bold&#34;&gt;Collection of Angular challenges&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;This project has been created with two purposes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first purpose is to assist you in becoming better at Angular and its ecosystem. üí™&lt;/li&gt; &#xA; &lt;li&gt;The second purpose is to share best practices and different implementations of the same problem to gain diverse perspectives. üìñ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sharing knowledge can benefit everyone.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, if you are struggling with a concept, please open an issue. I will attempt to create a challenge based on that idea.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to propose a challenge, this project is open source, so feel free to share your ideas. They are more than welcome.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Learning by reading is good but learning by doing is better.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Challenges&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Click the following badges to join your next challenge.&lt;/p&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Easy--green&#34; alt=&#34;Easy challenge&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Intermediate--orange&#34; alt=&#34;Easy challenge&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Advanced--red&#34; alt=&#34;Easy challenge&#34;&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Angular--gray?logo=angular&#34; alt=&#34;Angular&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/projection/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/1-Projection-red&#34; alt=&#34;Projection&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/ngfor-enhancement/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/3-Directive enhancement-orange&#34; alt=&#34;Directive enhancement&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/context-outlet-type/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/4-ContextOutlet Typed-red&#34; alt=&#34;Directive enhancement&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/crud/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/5-CRUD-green&#34; alt=&#34;crud application&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/permissions/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/6-permissions-orange&#34; alt=&#34;permissions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/pipe-easy/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/8-simple pure pipe-green&#34; alt=&#34;pipe easy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/pipe-intermediate/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/9-wrapFn pipe-orange&#34; alt=&#34;wrapFn pipe&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/pipe-hard/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/10-utilities pipe-red&#34; alt=&#34;utilities pipe&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/scroll-cd/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/12-change detection -- scroll-orange&#34; alt=&#34;change detection with scroll event&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/styling/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/13-styling-orange&#34; alt=&#34;styling&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/di/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/16-di-red&#34; alt=&#34;di&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/anchor-scrolling/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/21-anchor--scrolling-green&#34; alt=&#34;anchor-scrolling&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/router-input/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/22-router--input-green&#34; alt=&#34;router-input&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/interop-rxjs-signal/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/30-interop rxjs signal-red&#34; alt=&#34;interop signal rxjs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/module-to-standalone/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/31-module to standalone-green&#34; alt=&#34;module to standalone&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/bug-cd/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/32-bug CD-orange&#34; alt=&#34;bug CD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Typescript--gray?logo=typescript&#34; alt=&#34;Typescript&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/overload/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/15-overload function-orange&#34; alt=&#34;Overload function&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/RxJs--gray?logo=reactivex&#34; alt=&#34;RxJs&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/rxjs-pipe-bug/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/11-BUG: chaining operators-orange&#34; alt=&#34;Bug rxjs chaining operators&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/rxjs-race-condition/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/14-race condition-green&#34; alt=&#34;Rxjs race condition&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- &lt;a href=&#34;./apps/declarative-to-reactive/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/13-declarative to reactive-green&#34; alt=&#34;Declarative to reactive programming&#34;/&gt;&lt;/a&gt; --&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/NgRx--gray?logo=reactivex&#34; alt=&#34;NgRx&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/ngrx-1/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/2-Effect vs Selector-orange&#34; alt=&#34;Effect vs Selector&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/ngrx-notification/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/7-Power of Effects-red&#34; alt=&#34;power of Effects&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Testing--gray?logo=cypress&#34; alt=&#34;testing&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/testing-router-outlet/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/17-Router Testing-orange&#34; alt=&#34;router outlet Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/testing-nested/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/18-Nested Comp Testing-orange&#34; alt=&#34;nested component Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/testing-input-output/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/19-Input Output Testing-orange&#34; alt=&#34;input output Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/testing-modal/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/20-Modal Testing-orange&#34; alt=&#34;modal Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/testing-harness/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/23-Harness Testing-green&#34; alt=&#34;harness Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/create-harness/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/24-Create Harness-orange&#34; alt=&#34;Create harness&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/testing-checkbox/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/28-Checkbox Testing-green&#34; alt=&#34;Test a simple checkbox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/apps/testing-todos-list/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/29-Real application Testing-red&#34; alt=&#34;Test a real application&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Nx--gray?logo=nx&#34; alt=&#34;nx&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/libs/custom-plugin/src/generators/custom-library/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/25-Extends Nx Library generator-red&#34; alt=&#34;extends lib generator&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/libs/custom-plugin/src/generators/feature-component/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/26-Component generator-orange&#34; alt=&#34;Custom component generator&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tomalaforge/angular-challenges/main/tools/eslint-rules/rules/forbidden-enum.README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/27-Forbid enum Rule-green&#34; alt=&#34;Forbid enum rules&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://medium.com/@thomas.laforge&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/30832608?s‚Ä¶00&amp;amp;u=6f0ad9676792f29fd7fe6e113df06213d384a813&amp;amp;v=4&#34; width=&#34;100px;&#34; alt=&#34;Thomas Laforge&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Thomas Laforge&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;32 üß©&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;Contributions of any kind are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fabian-hiller/valibot</title>
    <updated>2023-07-29T01:47:10Z</updated>
    <id>tag:github.com,2023-07-29:/fabian-hiller/valibot</id>
    <link href="https://github.com/fabian-hiller/valibot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The modular and type safe schema library for validating structural data ü§ñ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/fabian-hiller/valibot/raw/main/valibot.jpg?raw=true&#34; alt=&#34;Valibot Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üèÉ Get started&lt;/h2&gt; &#xA;&lt;p&gt;Hey üëã I&#39;m Valibot and I&#39;m here to help you validate your data using schemas. It doesn&#39;t matter if you&#39;re dealing with incoming data on a server or validating a form directly in your browser. My modular design allows your bundler to remove everything that is not needed. This reduces the bundle size and improves performance. Since I&#39;m fully implemented in TypeScript, you can enjoy maximum type safety with me. If you want to learn more about my benefits and differences from other solutions, I recommend you to read my &lt;a href=&#34;https://www.builder.io/blog/introducing-valibot&#34;&gt;official announcement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are an author of a library or framework and want to integrate me with an adapter, you can call me Vali.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;‚ú® Highlights&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully type safe with static type inference&lt;/li&gt; &#xA; &lt;li&gt;Small bundle size starting at less than 300 bytes&lt;/li&gt; &#xA; &lt;li&gt;Validate everything from strings to complex objects&lt;/li&gt; &#xA; &lt;li&gt;Open source and fully tested with 100 % coverage&lt;/li&gt; &#xA; &lt;li&gt;Many transformation and valdiation helpers included&lt;/li&gt; &#xA; &lt;li&gt;Well structured source code without dependencies&lt;/li&gt; &#xA; &lt;li&gt;Minimal, readable and well thought out API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üî© Installation&lt;/h3&gt; &#xA;&lt;p&gt;Add me to your project with a single command via your favorite package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install valibot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üôå Credits&lt;/h3&gt; &#xA;&lt;p&gt;My friend &lt;a href=&#34;https://github.com/fabian-hiller&#34;&gt;Fabian&lt;/a&gt; created me as part of his bachelor thesis at &lt;a href=&#34;https://www.hdm-stuttgart.de/en/&#34;&gt;Stuttgart Media University&lt;/a&gt;, supervised by Walter Kriha, &lt;a href=&#34;https://github.com/mhevery&#34;&gt;Mi≈°ko Hevery&lt;/a&gt; and &lt;a href=&#34;https://github.com/ryansolid&#34;&gt;Ryan Carniato&lt;/a&gt;. My role models also include &lt;a href=&#34;https://github.com/colinhacks&#34;&gt;Colin McDonnell&lt;/a&gt;, who had a big influence on my API design with &lt;a href=&#34;https://github.com/colinhacks/zod&#34;&gt;Zod&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üóù License&lt;/h3&gt; &#xA;&lt;p&gt;I am completely free and licensed under the &lt;a href=&#34;https://github.com/fabian-hiller/valibot/raw/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;. But if you like, you can feed me with a star on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;üß± Main concepts&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s not waste time and validate the first data together. ü§ñ&lt;/p&gt; &#xA;&lt;h3&gt;üé® Create a schema&lt;/h3&gt; &#xA;&lt;p&gt;You can create schemas for almost all data types and objects that TypeScript comes with. From primitive values like &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; to complex objects like &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; as well as special types like &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; are all supported.&lt;/p&gt; &#xA;&lt;h4&gt;üìÑ String schema&lt;/h4&gt; &#xA;&lt;p&gt;To create a string schema, use the &lt;code&gt;string&lt;/code&gt; function. For almost all schema functions, you can pass a validation and transformation pipeline in the form of an array as the last optional argument to perform more detailed validations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { email, endsWith, string, toTrimmed } from &#39;valibot&#39;;&#xA;&#xA;const EmailSchema = string([toTrimmed(), email(), endsWith(&#39;@example.com&#39;)]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To further customize the schema, as well as the validation functions, you can usually pass an individual error message as a string as the first optional argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { email, endsWith, string, toTrimmed } from &#39;valibot&#39;;&#xA;&#xA;const EmailSchema = string(&#39;Value is not a string.&#39;, [&#xA;  toTrimmed(),&#xA;  email(&#39;The email is badly formatted.&#39;),&#xA;  endsWith(&#39;@example.com&#39;, &#39;Only example emails are allowed.&#39;),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tip: Use the auto-complete feature of your editor to import the individual functions automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;üìÇ Object schema&lt;/h4&gt; &#xA;&lt;p&gt;For object schemas you use the &lt;code&gt;object&lt;/code&gt; function. As first argument you define the structure of your object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { email, minLength, object, string } from &#39;valibot&#39;;&#xA;&#xA;const LoginSchema = object({&#xA;  email: string([email()]),&#xA;  password: string([minLength(8)]),&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using various functions, you can make the values of your object optional or merge two objects together, just like with types in TypeScript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {&#xA;  email,&#xA;  enumType,&#xA;  merge,&#xA;  minLength,&#xA;  object,&#xA;  partial,&#xA;  string,&#xA;  url,&#xA;} from &#39;valibot&#39;;&#xA;&#xA;const LoginSchema = object({&#xA;  email: string([email()]),&#xA;  password: string([minLength(8)]),&#xA;});&#xA;&#xA;const AccountSchema = merge([&#xA;  LoginSchema,&#xA;  partial(&#xA;    object({&#xA;      username: string([minLength(3)]),&#xA;      imageUrl: string([url()]),&#xA;      theme: enumType([&#39;light&#39;, &#39;dark&#39;]),&#xA;    })&#xA;  ),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;üß© More schemas&lt;/h4&gt; &#xA;&lt;p&gt;My code is well structured and fully commented. Until the &lt;a href=&#34;https://valibot.dev/&#34;&gt;official documentation&lt;/a&gt; is complete, you can just click through the GitHub repository to create other schemas.&lt;/p&gt; &#xA;&lt;h3&gt;üïµÔ∏è Infer types&lt;/h3&gt; &#xA;&lt;p&gt;To make your day even easier, you can extract the input and output type of a schema. The input and output will only be different if you use &lt;code&gt;transform&lt;/code&gt; to transform the data after validation. In most cases, only the output will be of interest to you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { type Output, email, minLength, object, string } from &#39;valibot&#39;;&#xA;&#xA;const LoginSchema = object({&#xA;  email: string([email()]),&#xA;  password: string([minLength(8)]),&#xA;});&#xA;&#xA;type LoginData = Output&amp;lt;typeof LoginSchema&amp;gt;; // { email: string; password: string }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üèÅ Parse data&lt;/h3&gt; &#xA;&lt;p&gt;To check if unknown data matches your schema, use the &lt;code&gt;parse&lt;/code&gt; method. Alternatively, I also support asynchronous validation with &lt;code&gt;parseAsync&lt;/code&gt; and if you don&#39;t want errors to be thrown, you can use &lt;code&gt;safeParse&lt;/code&gt; or &lt;code&gt;safeParseAsync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { email, endsWith, parse, string } from &#39;valibot&#39;;&#xA;&#xA;const EmailSchema = string([email(), endsWith(&#39;@example.com&#39;)]);&#xA;&#xA;parse(EmailSchema, null); // throws error&#xA;parse(EmailSchema, &#39;foo&#39;); // throws error&#xA;&#xA;parse(EmailSchema, &#39;jane@example.com&#39;); // returns &#39;jane@example.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è What&#39;s next?&lt;/h2&gt; &#xA;&lt;p&gt;With the release of v0.1, early adopters and content creators can try me out and evaluate me. Until v1 I reserve the right to make major changes to the API. Please create &lt;a href=&#34;https://github.com/fabian-hiller/valibot/issues/new&#34;&gt;issues&lt;/a&gt; and PRs if you encounter problems or have ideas for improvements.&lt;/p&gt; &#xA;&lt;p&gt;As part of this project, I will also be releasing detailed &lt;a href=&#34;https://valibot.dev/&#34;&gt;documentation&lt;/a&gt; over the next few weeks, which will be expanded and improved piece by piece.&lt;/p&gt;</summary>
  </entry>
</feed>