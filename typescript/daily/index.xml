<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-22T01:42:46Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jyjblrd/Mocap-Drones</title>
    <updated>2023-11-22T01:42:46Z</updated>
    <id>tag:github.com,2023-11-22:/jyjblrd/Mocap-Drones</id>
    <link href="https://github.com/jyjblrd/Mocap-Drones" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low cost motion capture system for room scale tracking&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mocap Drones&lt;/h1&gt; &#xA;&lt;h3&gt;A general purpose motion capture system built from the ground up, used to autonomously fly multiple drones indoors&lt;/h3&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Install the pseyepy python library: &lt;a href=&#34;https://github.com/bensondaled/pseyepy&#34;&gt;https://github.com/bensondaled/pseyepy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project requires the sfm (structure from motion) OpenCV module, which requires you to compile OpenCV from source. This is a bit of a pain, but these links should help you get started: &lt;a href=&#34;https://docs.opencv.org/4.x/db/db8/tutorial_sfm_installation.html&#34;&gt;SFM dependencies&lt;/a&gt; &lt;a href=&#34;https://github.com/opencv/opencv_contrib/raw/master/README.md&#34;&gt;OpenCV module installation guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cv.sfm&lt;/code&gt; is only used 3 times in the codebase for the following functions: &lt;code&gt;fundamentalFromProjections&lt;/code&gt;, &lt;code&gt;essentialFromFundamental&lt;/code&gt;, &lt;code&gt;motionFromEssential&lt;/code&gt;. So really, those functions should just be reimplemented in Python so the sfm module isn&#39;t needed. &lt;a href=&#34;https://github.com/jyjblrd/Mocap-Drones/issues/4&#34;&gt;Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Runing the code&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;yarn run install&lt;/code&gt; to install node dependencies&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;yarn run dev&lt;/code&gt; to start the webserver. You will be given a url view the frontend interface.&lt;/p&gt; &#xA;&lt;p&gt;In another terminal window, run &lt;code&gt;python3 api/index.py&lt;/code&gt; to start the backend server. This is what receives the camera streams and does motion capture computations.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for this project is admittedly pretty lacking, if anyone would like to put type definitions in the Python code that would be amazing and probably go a long way to helping the readability of the code. Feel free to also use the &lt;a href=&#34;https://github.com/jyjblrd/Mocap-Drones/discussions&#34;&gt;discussion&lt;/a&gt; tab to ask questions.&lt;/p&gt; &#xA;&lt;p&gt;My blog post has some more information about the drones &amp;amp; camera: &lt;a href=&#34;https://joshuabird.com/blog/post/mocap-drones&#34;&gt;joshuabird.com/blog/post/mocap-drones&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;YouTube Video&lt;/h2&gt; &#xA;&lt;p&gt;Watch this for information about the project &amp;amp; a demo! &lt;a href=&#34;https://youtu.be/0ql20JKrscQ?si=jkxyOe-iCG7fa5th&#34;&gt;https://youtu.be/0ql20JKrscQ?si=jkxyOe-iCG7fa5th&lt;/a&gt; &lt;img src=&#34;https://github.com/jyjblrd/Mocap-Drones/raw/main/images/thumbnail.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Architectural Diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jyjblrd/Mocap-Drones/raw/main/images/architecture.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thewh1teagle/mobslide</title>
    <updated>2023-11-22T01:42:46Z</updated>
    <id>tag:github.com,2023-11-22:/thewh1teagle/mobslide</id>
    <link href="https://github.com/thewh1teagle/mobslide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/thewh1teagle/mobslide/assets/61390950/1286d350-36e9-4c78-b2ef-800aa8f23865&#34; width=&#34;130px&#34; height=&#34;130px&#34;&gt; &#xA;&lt;h1&gt;mobslide&lt;/h1&gt; &#xA;&lt;p&gt;Turn your smartphone into presentation remote controller&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://github.com/thewh1teagle/mobslide/assets/61390950/64db10d7-ca7e-45cc-a64b-71ce3fad3fb3&#34; width=&#34;400px&#34; height=&#34;280px&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/thewh1teagle/mobslide/assets/61390950/571228a3-8b4a-4270-a5de-0fd71adebf72&#34; width=&#34;400px&#34; height=&#34;280px&#34;&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simply Download &lt;code&gt;mobslide&lt;/code&gt; from &lt;a href=&#34;https://github.com/thewh1teagle/mobslide/releases&#34;&gt;releases&lt;/a&gt; on your PC and start it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Supported plaforms&lt;/h1&gt; &#xA;&lt;p&gt;Works on MacOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Tauri for linux doesn&#39;t support webrtc so currently Linux isn&#39;t supported&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Scan the QR code with your smartphone and open the link.&lt;/p&gt; &#xA;&lt;h1&gt;Keys&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;+&lt;/code&gt; Volume up&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-&lt;/code&gt; Volume down&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Arrow Up&lt;/code&gt; Next&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Arrow Down&lt;/code&gt; Previous&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Arrow Up Long Press&lt;/code&gt; Start presentation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Arrow Down Long Press&lt;/code&gt; Stop presentation&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scan the QR code. No installation required&lt;/li&gt; &#xA; &lt;li&gt;Lightweight app &lt;code&gt;~2.5M&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Minimal and effective design&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/current&#34;&gt;Node&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;To run in development,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;in both desktop and web folders execute &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;execute &lt;code&gt;cargo tauri dev&lt;/code&gt; in desktop folder&lt;/li&gt; &#xA; &lt;li&gt;execute &lt;code&gt;npm run dev&lt;/code&gt; in web folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A desktop app will open, and for the &#34;phone client&#34; a local server will run on localhost:5173&lt;/p&gt; &#xA;&lt;p&gt;In case you want to try in your phone execute in web folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run dev -- --host 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;To build for the current platform, execute &lt;code&gt;cargo tauri build&lt;/code&gt;. On Windows, this will build both NSIS and MSI installers. Both function identically and are located under &lt;code&gt;src-tauri/target/release/bundle/&amp;lt;msi or nsis&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;When developing you can see logging messages by setting ENV variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export RUST_LOG=trace&#xA;cargo tauri dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For forther exploring, you can even try setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RUST_BACKTRACE=1&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jordansinger/build-it-figma-ai</title>
    <updated>2023-11-22T01:42:46Z</updated>
    <id>tag:github.com,2023-11-22:/jordansinger/build-it-figma-ai</id>
    <link href="https://github.com/jordansinger/build-it-figma-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Build it button&lt;/h1&gt; &#xA;&lt;img width=&#34;1150&#34; alt=&#34;Screenshot 2023-11-17 at 2 38 14 PM&#34; src=&#34;https://github.com/jordansinger/build-it-figma-ai/assets/110813/885bc2a1-cd34-41c7-b36b-ed1d5783e453&#34;&gt; &#xA;&lt;p&gt;Draw and sketch UI in Figma and FigJam with this widget. Inspired by &lt;a href=&#34;https://github.com/SawyerHood/draw-a-ui&#34;&gt;SawyerHood/draw-a-ui&lt;/a&gt; and &lt;a href=&#34;https://github.com/tldraw/draw-a-ui&#34;&gt;tldraw/draw-a-ui&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to replace &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; with your API key.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Below are the steps to get your widget running. You can also find instructions at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.figma.com/widget-docs/setup-guide/&#34;&gt;https://www.figma.com/widget-docs/setup-guide/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This widget template uses TypeScript and NPM, two standard tools in creating JavaScript applications.&lt;/p&gt; &#xA;&lt;p&gt;First, download Node.js which comes with NPM. This will allow you to install TypeScript and other libraries. You can find the download link here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, install TypeScript, esbuild and the latest type definitions by running:&lt;/p&gt; &#xA;&lt;p&gt;npm install&lt;/p&gt; &#xA;&lt;p&gt;If you are familiar with JavaScript, TypeScript will look very familiar. In fact, valid JavaScript code is already valid Typescript code.&lt;/p&gt; &#xA;&lt;p&gt;TypeScript adds type annotations to variables. This allows code editors such as Visual Studio Code to provide information about the Figma API while you are writing code, as well as help catch bugs you previously didn&#39;t notice.&lt;/p&gt; &#xA;&lt;p&gt;For more information, visit &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;https://www.typescriptlang.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using TypeScript requires a compiler to convert TypeScript (widget-src/code.tsx) into JavaScript (dist/code.js) for the browser to run. We use esbuild to do this for us.&lt;/p&gt; &#xA;&lt;p&gt;We recommend writing TypeScript code using Visual Studio code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download Visual Studio Code if you haven&#39;t already: &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open this directory in Visual Studio Code.&lt;/li&gt; &#xA; &lt;li&gt;Compile TypeScript to JavaScript: Run the &#34;Terminal &amp;gt; Run Build Task...&#34; menu item, then select &#34;npm: watch&#34;. You will have to do this again every time you reopen Visual Studio Code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it! Visual Studio Code will regenerate the JavaScript file every time you save.&lt;/p&gt;</summary>
  </entry>
</feed>