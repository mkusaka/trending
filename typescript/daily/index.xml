<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-10T01:39:47Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maotoumao/MusicFree</title>
    <updated>2022-11-10T01:39:47Z</updated>
    <id>tag:github.com,2022-11-10:/maotoumao/MusicFree</id>
    <link href="https://github.com/maotoumao/MusicFree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;插件化、定制化、无广告的免费音乐播放器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MusicFree&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;一个插件化、定制化、无广告的免费音乐播放器，目前只支持Android和Harmony OS。&lt;/p&gt; &#xA;&lt;p&gt;如果需要了解后续进展可以关注&lt;del&gt;b站账号：&lt;a href=&#34;https://space.bilibili.com/12866223&#34;&gt;不想睡觉猫头猫&lt;/a&gt;&lt;/del&gt;(不到一天就被吞了！还是进群吧，下边视频的公众号也行)；如果有问题可以在issue区或者qq群：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=igip9n4T&#34;&gt;252994941&lt;/a&gt;反馈。 1群满了 去2群吧：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=3SRFG8qC&#34;&gt;817438799&lt;/a&gt;~&lt;/p&gt; &#xA;&lt;p&gt;简介视频放在了公众号里：&lt;a href=&#34;https://mp.weixin.qq.com/s/sH_2vRm7EyBGgWggkJmsdg&#34;&gt;简介视频&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;插件化：本软件仅仅是一个播放器，本身&lt;strong&gt;并不集成&lt;/strong&gt;任何平台的任何音源，所有的搜索、播放、歌单导入等功能全部基于&lt;strong&gt;插件&lt;/strong&gt;。这也就意味着，&lt;strong&gt;只要可以在互联网上搜索到的音源，只要有对应的插件，你都可以使用本软件进行搜索、播放等功能&lt;/strong&gt;。关于插件的详细说明请看插件一节。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;插件支持的功能：搜索（音乐、专辑、作者）、播放、查看专辑、查看作者详细信息、导入单曲、导入歌单、获取歌词等。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;定制化、无广告：本软件提供了浅色、深色模式；支持自定义背景；本软件基于GPL协议开源，&lt;del&gt;一个star做交易&lt;/del&gt; 将会保持免费。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;隐私：所有的数据都存储在本地，本软件不会收集你的任何个人信息。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;歌词关联：你可以把两首歌的歌词关联起来，比如将歌曲A的歌词关联到歌曲B，关联后A、B两首歌都将显示歌曲B的歌词。你也可以关联多首歌的歌词，如A-&amp;gt;B-&amp;gt;C，这样A、B、C三首歌都将显示C的歌词。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;插件&lt;/h2&gt; &#xA;&lt;h3&gt;插件简介&lt;/h3&gt; &#xA;&lt;p&gt;插件本质上是一个满足插件协议的js函数。插件中定义了搜索（音乐、专辑、作者）、播放、查看专辑、作者详细信息、导入歌单、获取歌词等基本函数，插件的开发者只需要关心输入输出逻辑，至于分页、缓存等全都交给MusicFree控制即可。本软件通过插件来完成播放器的所有功能，这样解耦的设计也可以使得本软件可以专注于做一个功能完善的播放器，我直呼小而美。&lt;/p&gt; &#xA;&lt;p&gt;插件开发文档可以参考 &lt;a href=&#34;http://blog.upup.fun/2022/09/15/%E5%BC%80%E5%8F%91MusicFree%E6%8F%92%E4%BB%B6/&#34;&gt;这里&lt;/a&gt; (写的很简略....真的有人需要的时候再详细写吧..)&lt;/p&gt; &#xA;&lt;p&gt;需要注意的是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;如果你是使用第三方下载的插件，那么请自行鉴别插件的安全性（基本上看下没有奇怪的网络请求什么的就好了；自己写的最安全，&lt;em&gt;不要安装来路不明的东西&lt;/em&gt;），防止恶意代码破坏。因为第三方恶意插件导致的可能的损失与本软件无关。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;插件使用过程中可能会产生某些和本软件无关的版权数据，插件产生的任何数据与本软件无关，请使用者自行删除数据。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;插件使用&lt;/h3&gt; &#xA;&lt;p&gt;下载app之后，只需要在侧边栏设置-插件设置中安装插件即可。支持安装本地插件和从网络安装插件（支持解析.js文件和.json描述文件；已经写了几个示意的插件：&lt;a href=&#34;https://github.com/maotoumao/MusicFreePlugins&#34;&gt;指路这个仓库&lt;/a&gt;，不过可能功能还不是很完善）； 你可以直接点击从网络安装插件，然后输入&lt;a href=&#34;https://gitee.com/maotoumao/MusicFreePlugins/raw/master/plugins.json&#34;&gt;https://gitee.com/maotoumao/MusicFreePlugins/raw/master/plugins.json&lt;/a&gt; ，点击确认即可安装。&lt;/p&gt; &#xA;&lt;p&gt;图文版详细使用说明可以参考这里：&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzkxOTM5MDI4MA==&amp;amp;mid=2247483875&amp;amp;idx=1&amp;amp;sn=aedf8bb909540634d927de7fd2b4b8b1&amp;amp;chksm=c1a390c4f6d419d233908bb781d418c6b9fd2ca82e9e93291e7c93b8ead3c50ca5ae39668212#rd&#34;&gt;MusicFree插件使用指南&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;下载地址&lt;/h2&gt; &#xA;&lt;p&gt;请转到发布页查看：&lt;a href=&#34;https://github.com/maotoumao/MusicFree/releases&#34;&gt;指路&lt;/a&gt; (如果打不开可以把github换成gitee)&lt;/p&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;p&gt;使用时遇到的常见问题可以看这里：&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzkxOTM5MDI4MA==&amp;amp;mid=2247483937&amp;amp;idx=1&amp;amp;sn=486c735b1fb78acc75f8f4acdcb9e253&amp;amp;chksm=c1a39306f6d41a101a6f8d3adefcd980092ce94140119bb3cc0eb3aa8c6ae22fe1b97899be21#rd&#34;&gt;MusicFree使用Q&amp;amp;A&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WIP&lt;/h2&gt; &#xA;&lt;p&gt;当前开发进度以及问题&amp;amp;需求列表可以看这里： &lt;a href=&#34;https://docs.qq.com/sheet/DT3djQm1ReWJya2Vo?tab=BB08J2&#34;&gt;MusicFree建议&amp;amp;bug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ChangeLog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;2022.10.30 v0.0.1-alpha.7&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;新增功能：历史记录一键清空&lt;/li&gt; &#xA; &lt;li&gt;新增功能：歌手页、本地歌单页支持批量编辑&lt;/li&gt; &#xA; &lt;li&gt;修复移动网络下无法播放本地音乐的问题&lt;/li&gt; &#xA; &lt;li&gt;样式优化&amp;amp;修复：toast提示显示异常、侧边栏样式优化、歌单内序号显示不全、【关于】页无法滑动&lt;/li&gt; &#xA; &lt;li&gt;之前使用的拖拽排序组件在列表较大时有很严重的性能问题，会导致卡顿甚至白屏，因此批量编辑页暂时去掉了拖拽排序，后续会重新加上&lt;/li&gt; &#xA; &lt;li&gt;插件：网易云插件支持导入201首以上的歌单，可以去侧边栏更新，插件新增酷狗源，可以去对应github仓库查看。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;2022.10.22 v0.0.1-alpha.6&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;重要!! v0.0.1-alpha.5以前的版本无法通过app正常更新，请在gitee/github发布页下载最新版本(v0.0.1-alpha.6)，或QQ群自取；&lt;/li&gt; &#xA; &lt;li&gt;导入本地音乐时，如果未识别本地音乐文件，则会使用文件名作为音乐名；&lt;/li&gt; &#xA; &lt;li&gt;自建歌单、专辑详情页增加批量选择功能，可点击右上角查看(歌曲较多时可能有点卡，后续优化)；使用方式：选中歌曲可进行下一首播放/加入歌单/下载/删除，长按拖动进行排序；删除/排序后点击保存按钮方可生效&lt;/li&gt; &#xA; &lt;li&gt;调整歌单内歌曲编号字体大小；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;2022.10.16 v0.0.1-alpha.5&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;新增功能：导入本地音乐文件&lt;/li&gt; &#xA; &lt;li&gt;从网络源安装的插件可在插件页直接更新&lt;/li&gt; &#xA; &lt;li&gt;调整下载逻辑&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;2022.10.06 v0.0.1-alpha.4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;修复专辑详情页没有loading的问题&lt;/li&gt; &#xA; &lt;li&gt;为插件新增Cookie管理器&lt;/li&gt; &#xA; &lt;li&gt;优化播放页的显示&lt;/li&gt; &#xA; &lt;li&gt;新增一键卸载全部插件的功能&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;2022.10.04 v0.0.1-alpha.3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;修复设置页无法滚动的问题&lt;/li&gt; &#xA; &lt;li&gt;修复播放结束时可能暂停的问题&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;2022.10.03 v0.0.1-alpha.2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;插件协议更新，需要重新安装插件&lt;/li&gt; &#xA; &lt;li&gt;支持批量导入插件&lt;/li&gt; &#xA; &lt;li&gt;新增清空播放列表功能&lt;/li&gt; &#xA; &lt;li&gt;优化搜索结果面板和播放专辑逻辑&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;2022.10.02&lt;/code&gt; 测试版本出现啦！撒花&lt;/p&gt; &#xA;&lt;h2&gt;支持这个项目&lt;/h2&gt; &#xA;&lt;p&gt;如果你喜欢这个项目，或者希望我可以持续维护下去，你可以通过以下任何一种方式支持我;)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Star这个项目，分享给你身边的人；&lt;/li&gt; &#xA; &lt;li&gt;关注b站&lt;a href=&#34;https://space.bilibili.com/12866223&#34;&gt;不想睡觉猫头猫&lt;/a&gt;或公众号获取最新信息；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/src/assets/imgs/wechat_channel.jpg&#34; alt=&#34;微信公众号&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;感谢以下小伙伴的推荐，很意外也很惊喜 ~~~&lt;/p&gt; &#xA;&lt;p&gt;来自&lt;strong&gt;果核剥壳&lt;/strong&gt;的安利~ &lt;a href=&#34;https://mp.weixin.qq.com/s/F6hMbLv_a-Ty0fPA_0P0Rg&#34;&gt;https://mp.weixin.qq.com/s/F6hMbLv_a-Ty0fPA_0P0Rg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;来自&lt;strong&gt;小棉袄&lt;/strong&gt;的安利~ &lt;a href=&#34;https://mp.weixin.qq.com/s/Fqe3o7vcTw0KDKoB-gsQfg&#34;&gt;https://mp.weixin.qq.com/s/Fqe3o7vcTw0KDKoB-gsQfg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;本项目仅供学习参考使用，使用请遵从GPL3.0协议；请在符合法律法规的情况下合理使用本项目。&lt;/p&gt; &#xA;&lt;h2&gt;应用截图&lt;/h2&gt; &#xA;&lt;h4&gt;主界面&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/main.jpg&#34; alt=&#34;主界面&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;侧边栏&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;基础设置 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/basic-setting.jpg&#34; alt=&#34;基础设置&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;插件设置 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/plugin-setting.jpg&#34; alt=&#34;插件设置&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;主题设置 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/theme-setting.jpg&#34; alt=&#34;主题设置&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;音乐相关&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;歌单页 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/song-sheet.jpg&#34; alt=&#34;歌单页&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;歌单内检索 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/search-in-sheet.jpg&#34; alt=&#34;歌单内检索&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;播放页 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/song-cover.jpg&#34; alt=&#34;播放页&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;歌词页 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/song-lrc.jpg&#34; alt=&#34;歌词页&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;播放列表页 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/play-list.jpg&#34; alt=&#34;播放列表页&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;搜索相关&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;搜索单曲 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/search.jpg&#34; alt=&#34;搜索单曲&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;搜索专辑 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/search-album.jpg&#34; alt=&#34;搜索专辑&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;专辑信息 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/album-detail.jpg&#34; alt=&#34;专辑信息&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;搜索作者 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/search-artist.jpg&#34; alt=&#34;搜索作者&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;作者信息 &lt;img src=&#34;https://raw.githubusercontent.com/maotoumao/MusicFree/master/.imgs/artist-detail.jpg&#34; alt=&#34;专辑信息&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LinusBorg/vue-mixable</title>
    <updated>2022-11-10T01:39:47Z</updated>
    <id>tag:github.com,2022-11-10:/LinusBorg/vue-mixable</id>
    <link href="https://github.com/LinusBorg/vue-mixable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn Vue Mixins into Composables with a simple wrapper function&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vue-mixable&#34; alt=&#34;current npm version&#34;&gt; &lt;img src=&#34;https://badgen.net/bundlephobia/minzip/vue-mixable&#34; alt=&#34;npm bundle size (min+gzip)&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/vue-mixable&#34; alt=&#34;npm downloads per month&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/npm/l/vue-mixable&#34; alt=&#34;NPM&#34;&gt; &lt;img src=&#34;https://badgen.net/github/checks/linusborg/vue-mixable&#34; alt=&#34;CI checks&#34;&gt; &lt;img src=&#34;https://badgen.net/npm/types/vue-mixable&#34; alt=&#34;types included&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🌪 &lt;code&gt;vue-mixable&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Convert mixins into composables to reuse them in Composition API&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;helpful during Options API -&amp;gt; Composition API migrations / in mixed code-bases&lt;/li&gt; &#xA; &lt;li&gt;simple API - one function call is all you need&lt;/li&gt; &#xA; &lt;li&gt;TS Support (with small caveats)&lt;/li&gt; &#xA; &lt;li&gt;small footprint: &lt;img src=&#34;https://badgen.net/bundlephobia/minzip/vue-mixable&#34; alt=&#34;npm bundle size (min+zip)&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Intro&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// given an existing mixin such as this:&#xA;export const messageMixin  = {&#xA;    data() {&#xA;        return {&#xA;            msg: &#39;Hello World&#39;&#xA;        }&#xA;    },&#xA;    computed: {&#xA;        loudMsg() {&#xA;            return this.capitalize(this.msg) + &#39;!!!1eleven!&#39;&#xA;        }&#xA;    },&#xA;    methods: {&#xA;        capitalize(value) { return value.toUpperCase() }&#xA;    } &#xA;}&#xA;&#xA;// we can create a composable from it with a single function call&#xA;import { createComposableFromMixin } from &#39;vue-mixable&#39;&#xA;export const useMessage = createComposableFromMixin(messageMixin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This composable can then be used in &lt;code&gt;setup()&lt;/code&gt;/ &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script setup&amp;gt;&#xA;const {&#xA;    msg, // ref&#xA;    loudMsg, // computed() ref&#xA;    capitalize // function&#xA;} = useMessage()&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;This library is primarily useful for developers trying to migrate a Options-API codebase using Mixins for code sharing to Composition API using composables for code sharing.&lt;/p&gt; &#xA;&lt;p&gt;One of the challenges in such a migration is that one often cannot rewrite a mixin into a composable and replace all of that mixin&#39;s usage instances in the app at once, epsecially when mixins depend on one another, which is often the case in larger code-bases.&lt;/p&gt; &#xA;&lt;p&gt;This is where &lt;code&gt;vue-mixable&lt;/code&gt; can help: The team can keep all their mixins for the time of the migration, but convert each of them into composables with one line of code. You get have your cake, and eat it to, in a way.&lt;/p&gt; &#xA;&lt;p&gt;Then they can migrate individual components from the mixin to the composable at their own pace, and once the migration is done, they can rewrite the mixin into a proper standalone composable and finally remove the mixin from your codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install vue-mixable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Supported APIs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;vue-mixable&lt;/code&gt; provides full support for mixins that use the following Options APIs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;computed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;methods&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;provide&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;props&lt;/code&gt; (see Note in the next section)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;emits&lt;/code&gt; (see Note in the next section)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Options with no direct support (currently):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;inheritAttrs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;components&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;directives&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use any of the above options, you would have to set them manually in any component that uses the generated composable instead of the original mixin.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;props&lt;/code&gt; &amp;amp; &lt;code&gt;emits&lt;/code&gt; options&lt;/h3&gt; &#xA;&lt;p&gt;Mixins can contain props definitions. Composables cannot, as they are functions invoked during component initialization (in &lt;code&gt;setup()&lt;/code&gt;, at which point props must have been defined already.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vue-mixable&lt;/code&gt; solves with in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const mixin = {&#xA;    props: [&#39;modelValue&#39;, &#39;age&#39;, &#39;street&#39;, &#39;city&#39;],&#xA;    emits: [&#39;modelValue:update&#39;, &#39;certified&#39;]&#xA;    // ...and other mixin content, i.e.:&#xA;    data: () =&amp;gt; ({&#xA;        //...&#xA;    })&#xA;}&#xA;&#xA;export const usePerson = createComposableFromMixin(mixin)&#xA;// props and emits options will be available &#xA;// as properties on the composable function(!)&#xA;usePerson.props // =&amp;gt; [&#39;modelValue&#39;, &#39;age&#39;, &#39;street&#39;, &#39;city&#39;]&#xA;usePerson.emits // =&amp;gt; [&#39;modelValue:update&#39;, &#39;certified&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { usePerson } from &#39;...&#39;&#xA;&#xA;export default defineComponent({&#xA;    props: [&#39;firstname&#39;, &#39;lastname&#39;, ...usePerson.props],&#xA;    emits: usePerson.emits,&#xA;    setup(props, { emit }) {&#xA;        const person = usePerson()&#xA;&#xA;        return {&#xA;&#xA;        }&#xA;    }&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shape of the composable&#39;s return value&lt;/h3&gt; &#xA;&lt;p&gt;The shape of the return value is essentially a flattened version of the mixins &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt; properties, with &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;computed&lt;/code&gt; being &lt;code&gt;ref()&lt;/code&gt;&#39;s. All other supported properties (lifecylces, &lt;code&gt;watch&lt;/code&gt;) have nothing to expose externally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const mixin = {&#xA;    data: () =&amp;gt;({&#xA;        a: &#39;A&#39;,&#xA;        b: &#39;B&#39;,&#xA;    }),&#xA;    computed: {&#xA;        c() { return this.A },&#xA;        d() { return this.B }&#xA;    },&#xA;    methods: {&#xA;        e() {&#xA;            return callSomething(this.a, this.c)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;const useComposable = createComposableFromMixin(mixin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;would be turned into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#xA;const {&#xA;    a, // ref(&#39;A&#39;)&#xA;    b, // ref(&#39;B&#39;)&#xA;    c, // computed ref &#xA;    d, // computed ref&#xA;    e, // normal function&#xA;} = useComposable()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Feature Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Mixins that implicitly depend on properties/APIs from other mixins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Nested Mixins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Exclude specific properties from composables return value (essentially making some mixin properties private in the composable).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Out of scope / not planned&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; mixins with implicit circular dependencies on one another.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;this.$watch()&lt;/code&gt; in created&lt;/h3&gt; &#xA;&lt;p&gt;creating a watcher imperatively in &lt;code&gt;created&lt;/code&gt; will likely not work as expected, because in the created composable, that hooks is run before &lt;code&gt;setup()&lt;/code&gt; returns, so any data properties declared in the mixin/composable will be missing on &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Possible workarounds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the normal &lt;code&gt;watch:&lt;/code&gt;option&lt;/li&gt; &#xA; &lt;li&gt;create the watcher in &lt;code&gt;beforeMount&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Typescript Support&lt;/h2&gt; &#xA;&lt;p&gt;Typescript support is still considered unstable as we plan on improving the types, possibly introduction breaking changes to the types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Type inference to work, each mixin object &lt;em&gt;must&lt;/em&gt; have a &lt;code&gt;props&lt;/code&gt; key. If your mixin does not include any props, set it to an empty object.&lt;/li&gt; &#xA; &lt;li&gt;props always need to be defined in object style. array style is currently not supported and will break type inference.&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;emits&lt;/code&gt; option cannot be provided in its array form, it must take the more verbose object form.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const mixin = defineMixin({&#xA;    props: {} // needed for proper tyep inference for now,&#xA;    emits: {&#xA;        &#39;update:modelValue&#39;: (v?: any) =&amp;gt; true, // this validator can be a NOOP returning `true`&#xA;    },&#xA;    data: () =&amp;gt; ({&#xA;        // ...&#xA;    })&#xA;})&#xA;&#xA;const composable = createCopmposableFromMixin(mixin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;defineMixin()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function does not do anything at runtime, it&#39;s just providing tpe inferrence for your mixins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const mixin = {&#xA;    data: () =&amp;gt; ({&#xA;        msg: &#39;Hello World&#39;,&#xA;    }),&#xA;    methods: {&#xA;        test() {&#xA;            this.msg // not inferreed correctly&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// better:&#xA;import { defineMixin } from &#39;vue-mixable&#39;&#xA;const mixin = defineMixin({&#xA;    props: {}, // needed, see caveat explained further up.&#xA;    data: () =&amp;gt; ({&#xA;        msg: &#39;Hello World&#39;,&#xA;    }),&#xA;    methods: {&#xA;        test() {&#xA;            this.msg // properly inferred.&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;createComposableFromMixin()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function will offer full type inference for any mixin passed to it.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Compile and Minify for Production, create Type Declarations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Unit Tests with &lt;a href=&#34;https://vitest.dev/&#34;&gt;Vitest&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm test:unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lint with &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm lint&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mswjs/msw</title>
    <updated>2022-11-10T01:39:47Z</updated>
    <id>tag:github.com,2022-11-10:/mswjs/msw</id>
    <link href="https://github.com/mswjs/msw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seamless REST/GraphQL API mocking library for browser and Node.js.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/msw-logo.svg?sanitize=true&#34; width=&#34;100&#34; alt=&#34;Mock Service Worker logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Mock Service Worker&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Mock Service Worker (MSW) is a seamless REST/GraphQL API mocking library for browser and Node.js.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/msw&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/msw.svg?style=for-the-badge&amp;amp;label=Latest&amp;amp;color=black&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/msw&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/msw?style=for-the-badge&amp;amp;color=black&#34; alt=&#34;Downloads per month&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kcd.im/discord&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-online-green?style=for-the-badge&amp;amp;color=black&#34; alt=&#34;Discord server&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Seamless&lt;/strong&gt;. A dedicated layer of requests interception at your disposal. Keep your application&#39;s code and tests unaware of whether something is mocked or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deviation-free&lt;/strong&gt;. Request the same production resources and test the actual behavior of your app. Augment an existing API, or design it as you go when there is none.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Familiar &amp;amp; Powerful&lt;/strong&gt;. Use &lt;a href=&#34;https://github.com/expressjs/express&#34;&gt;Express&lt;/a&gt;-like routing syntax to capture requests. Use parameters, wildcards, and regular expressions to match requests, and respond with necessary status codes, headers, cookies, delays, or completely custom resolvers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;&lt;em&gt;I found MSW and was thrilled that not only could I still see the mocked responses in my DevTools, but that the mocks didn&#39;t have to be written in a Service Worker and could instead live alongside the rest of my app. This made it silly easy to adopt. The fact that I can use it for testing as well makes MSW a huge productivity booster.&lt;/em&gt;&#34;&lt;/p&gt; &#xA; &lt;p&gt;– &lt;a href=&#34;https://twitter.com/kentcdodds&#34;&gt;Kent C. Dodds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This README will give you a brief overview on the library but there&#39;s no better place to start with Mock Service Worker than its official documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/getting-started/install&#34;&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/recipes&#34;&gt;Recipes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the list of &lt;a href=&#34;https://github.com/mswjs/examples&#34;&gt;&lt;strong&gt;Usage examples&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Browser&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/getting-started/integrate/browser&#34;&gt;Learn more about using MSW in a browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/api/setup-worker&#34;&gt;&lt;code&gt;setupWorker&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;In-browser usage is what sets Mock Service Worker apart from other tools. Utilizing the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&#34;&gt;Service Worker API&lt;/a&gt;, which can intercept requests for the purpose of caching, Mock Service Worker responds to captured requests with your mock definition on the network level. This way your application knows nothing about the mocking.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Take a look at this quick presentation on how Mock Service Worker functions in a browser:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/HcQCqboatZk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/msw-video-thumbnail.jpg&#34; alt=&#34;What is Mock Service Worker?&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How is it different?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This library intercepts requests on the network level, which means &lt;em&gt;after&lt;/em&gt; they have been performed and &#34;left&#34; your application. As a result, the entirety of your code runs, giving you more confidence when mocking;&lt;/li&gt; &#xA; &lt;li&gt;Imagine your application as a box. Every API mocking library out there opens your box and removes the part that does the request, placing a blackbox in its stead. Mock Service Worker leaves your box intact, 1-1 as it is in production. Instead, MSW lives in a separate box next to yours;&lt;/li&gt; &#xA; &lt;li&gt;No more stubbing of &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;axios&lt;/code&gt;, &lt;code&gt;react-query&lt;/code&gt;, you-name-it;&lt;/li&gt; &#xA; &lt;li&gt;You can reuse the same mock definition for the unit, integration, and E2E testing. Did we mention local development and debugging? Yep. All running against the same network description without the need for adapters of bloated configurations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// src/mocks.js&#xA;// 1. Import the library.&#xA;import { setupWorker, rest } from &#39;msw&#39;&#xA;&#xA;// 2. Describe network behavior with request handlers.&#xA;const worker = setupWorker(&#xA;  rest.get(&#39;https://github.com/octocat&#39;, (req, res, ctx) =&amp;gt; {&#xA;    return res(&#xA;      ctx.delay(1500),&#xA;      ctx.status(202, &#39;Mocked status&#39;),&#xA;      ctx.json({&#xA;        message: &#39;Mocked response JSON body&#39;,&#xA;      }),&#xA;    )&#xA;  }),&#xA;)&#xA;&#xA;// 3. Start request interception by starting the Service Worker.&#xA;worker.start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;GET https://github.com/octocat&lt;/code&gt; request in your application will result into a mocked response that you can inspect in your browser&#39;s &#34;Network&#34; tab:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mswjs/msw/raw/main/media/msw-quick-look-network.png?raw=true&#34; alt=&#34;Chrome DevTools Network screenshot with the request mocked&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Did you know that although Service Worker runs in a separate thread, your mock definition executes entirely on the client? This way you can use the same languages, like TypeScript, third-party libraries, and internal logic to create the mocks you need.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Node.js&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/getting-started/integrate/node&#34;&gt;Learn more about using MSW in Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/api/setup-server&#34;&gt;&lt;code&gt;setupServer&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s no such thing as Service Workers in Node.js. Instead, MSW implements a &lt;a href=&#34;https://github.com/mswjs/interceptors&#34;&gt;low-level interception algorithm&lt;/a&gt; that can utilize the very same request handlers you have for the browser. This blends the boundary between environments, allowing you to focus on your network behaviors.&lt;/p&gt; &#xA;&lt;h3&gt;How is it different?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does not stub &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;axios&lt;/code&gt;, etc. As a result, your tests know &lt;em&gt;nothing&lt;/em&gt; about mocking;&lt;/li&gt; &#xA; &lt;li&gt;You can reuse the same request handlers for local development and debugging, as well as for testing. Truly a single source of truth for your network behavior across all environments and all tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage example&lt;/h3&gt; &#xA;&lt;p&gt;Take a look at the example of an integration test in Jest that uses &lt;a href=&#34;https://github.com/testing-library/react-testing-library&#34;&gt;React Testing Library&lt;/a&gt; and Mock Service Worker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// test/Dashboard.test.js&#xA;&#xA;import React from &#39;react&#39;&#xA;import { rest } from &#39;msw&#39;&#xA;import { setupServer } from &#39;msw/node&#39;&#xA;import { render, screen, waitFor } from &#39;@testing-library/react&#39;&#xA;import Dashboard from &#39;../src/components/Dashboard&#39;&#xA;&#xA;const server = setupServer(&#xA;  // Describe network behavior with request handlers.&#xA;  // Tip: move the handlers into their own module and&#xA;  // import it across your browser and Node.js setups!&#xA;  rest.get(&#39;/posts&#39;, (req, res, ctx) =&amp;gt; {&#xA;    return res(&#xA;      ctx.json([&#xA;        {&#xA;          id: &#39;f8dd058f-9006-4174-8d49-e3086bc39c21&#39;,&#xA;          title: `Avoid Nesting When You&#39;re Testing`,&#xA;        },&#xA;        {&#xA;          id: &#39;8ac96078-6434-4959-80ed-cc834e7fef61&#39;,&#xA;          title: `How I Built A Modern Website In 2021`,&#xA;        },&#xA;      ]),&#xA;    )&#xA;  }),&#xA;)&#xA;&#xA;// Enable request interception.&#xA;beforeAll(() =&amp;gt; server.listen())&#xA;&#xA;// Reset handlers so that each test could alter them&#xA;// without affecting other, unrelated tests.&#xA;afterEach(() =&amp;gt; server.resetHandlers())&#xA;&#xA;// Don&#39;t forget to clean up afterwards.&#xA;afterAll(() =&amp;gt; server.close())&#xA;&#xA;it(&#39;displays the list of recent posts&#39;, async () =&amp;gt; {&#xA;  render(&amp;lt;Dashboard /&amp;gt;)&#xA;&#xA;  // 🕗 Wait for the posts request to be finished.&#xA;  await waitFor(() =&amp;gt; {&#xA;    expect(&#xA;      screen.getByLabelText(&#39;Fetching latest posts...&#39;),&#xA;    ).not.toBeInTheDocument()&#xA;  })&#xA;&#xA;  // ✅ Assert that the correct posts have loaded.&#xA;  expect(&#xA;    screen.getByRole(&#39;link&#39;, { name: /Avoid Nesting When You&#39;re Testing/ }),&#xA;  ).toBeVisible()&#xA;&#xA;  expect(&#xA;    screen.getByRole(&#39;link&#39;, { name: /How I Built A Modern Website In 2021/ }),&#xA;  ).toBeVisible()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Don&#39;t get overwhelmed! We&#39;ve prepared a step-by-step &lt;a href=&#34;https://mswjs.io/docs/getting-started/install&#34;&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt; tutorial that you can follow to learn how to integrate Mock Service Worker into your project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Despite the API being called &lt;code&gt;setupServer&lt;/code&gt;, there are no actual servers involved! The name was chosen for familiarity, and the API was designed to resemble operating with an actual server.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Mock Service Worker is trusted by hundreds of thousands of engineers around the globe. It&#39;s used by companies like Google, Microsoft, Spotify, Amazon, and countless others. Despite that, this library remains a hobby project maintained in spare time and has no opportunity to financially support even a single full-time contributor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can change that!&lt;/strong&gt; Consider &lt;a href=&#34;https://github.com/sponsors/mswjs&#34;&gt;sponsoring the effort&lt;/a&gt; behind one of the most innovative approaches around API mocking. Raise a topic of open source sponsorships with your boss and colleagues. Let&#39;s build sustainable open source together!&lt;/p&gt; &#xA;&lt;h3&gt;Golden Sponsors&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become our first golden sponsor and get featured right here, enjoying other perks like issue prioritization and a personal consulting session with us.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Learn more on our &lt;a href=&#34;https://github.com/sponsors/mswjs&#34;&gt;GitHub Sponsors profile&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://www.github.com/&#34; target=&#34;_blank&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;media/sponsors/github-light.svg&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/sponsors/github.svg?sanitize=true&#34; alt=&#34;GitHub&#34; width=&#34;75&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Silver Sponsors&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become our &lt;em&gt;silver sponsor&lt;/em&gt; and get your profile image and link featured right here.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Learn more on our &lt;a href=&#34;https://github.com/sponsors/mswjs&#34;&gt;GitHub Sponsors profile&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://www.chromatic.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/sponsors/chromatic.svg?sanitize=true&#34; alt=&#34;Chromatic&#34; width=&#34;75&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Bronze Sponsors&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become our first &lt;em&gt;bronze sponsor&lt;/em&gt; and get your profile image and link featured in this section.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Learn more on our &lt;a href=&#34;https://github.com/sponsors/mswjs&#34;&gt;GitHub Sponsors profile&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Awards &amp;amp; Mentions&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve been extremely humbled to receive awards and mentions from the community for all the innovation and reach Mock Service Worker brings to the JavaScript ecosystem.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr valign=&#34;middle&#34;&gt; &#xA;   &lt;td width=&#34;124&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/tech-radar.png&#34; width=&#34;124&#34; alt=&#34;Technology Radar&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;h4&gt;Solution Worth Pursuing&lt;/h4&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.thoughtworks.com/radar/languages-and-frameworks/mock-service-worker&#34;&gt;Technology Radar&lt;/a&gt; (2020–2021)&lt;/em&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;124&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/os-awards.png&#34; width=&#34;124&#34; alt=&#34;Open Source Awards 2020&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;h4&gt;The Most Exciting Use of Technology&lt;/h4&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://osawards.com/javascript/2020&#34;&gt;Open Source Awards&lt;/a&gt; (2020)&lt;/em&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
</feed>