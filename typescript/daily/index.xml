<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-05T01:43:30Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>faker-js/faker</title>
    <updated>2022-09-05T01:43:30Z</updated>
    <id>tag:github.com,2022-09-05:/faker-js/faker</id>
    <link href="https://github.com/faker-js/faker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate massive amounts of fake data in the browser and node.js&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/faker-js/faker/main/docs/public/logo.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &#xA; &lt;h1&gt;Faker&lt;/h1&gt; &#xA; &lt;p&gt;Generate massive amounts of fake (but realistic) data for testing and development.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@faker-js/faker&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/@faker-js/faker&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@faker-js/faker&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/dm/@faker-js/faker&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/faker-js/faker/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/faker-js/faker/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/faker-js/faker&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/faker-js/faker/branch/main/graph/badge.svg?token=N61U168G08&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chat.fakerjs.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-blue?style=flat&amp;amp;logo=discord&#34; alt=&#34;Chat on Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/fakerjs#section-contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/backers/fakerjs&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/fakerjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/fakerjs?label=sponsors&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;⚡️ Try it Online&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fakerjs.dev/new&#34;&gt;&lt;img src=&#34;https://developer.stackblitz.com/img/open_in_stackblitz.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fakerjs.dev/guide/&#34;&gt;API Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💌 Addresses - Generate valid looking Addresses, Zip Codes, Street Names, States, and Countries!&lt;/li&gt; &#xA; &lt;li&gt;⏰ Time-based Data - Past, present, future, recent, soon... whenever!&lt;/li&gt; &#xA; &lt;li&gt;🌏 Localization - Set a locale to generate realistic looking Names, Addresses, and Phone Numbers.&lt;/li&gt; &#xA; &lt;li&gt;💸 Finance - Create stubbed out Account Details, Transactions, and Crypto Addresses.&lt;/li&gt; &#xA; &lt;li&gt;👠 Products - Generate Prices, Product Names, Adjectives, and Descriptions.&lt;/li&gt; &#xA; &lt;li&gt;👾 Hacker Jargon - “Try to reboot the SQL bus, maybe it will bypass the virtual application!”&lt;/li&gt; &#xA; &lt;li&gt;🧍 Names - Generate virtual humans with a complete online and offline identity.&lt;/li&gt; &#xA; &lt;li&gt;🔢 Numbers - Of course, we can also generate random numbers and strings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Faker tries to generate realistic data and not obvious fake data. The generated names, addresses, emails, phone numbers, and/or other data might be coincidentally valid information. Please do not send any of your messages/calls to them from your test setup.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;📦 Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --save-dev @faker-js/faker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🪄 Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { faker } from &#39;@faker-js/faker&#39;;&#xA;// import { faker } from &#39;@faker-js/faker/locale/de&#39;;&#xA;&#xA;export const USERS: User[] = [];&#xA;&#xA;export function createRandomUser(): User {&#xA;  return {&#xA;    userId: faker.datatype.uuid(),&#xA;    username: faker.internet.userName(),&#xA;    email: faker.internet.email(),&#xA;    avatar: faker.image.avatar(),&#xA;    password: faker.internet.password(),&#xA;    birthdate: faker.date.birthdate(),&#xA;    registeredAt: faker.date.past(),&#xA;  };&#xA;}&#xA;&#xA;Array.from({ length: 10 }).forEach(() =&amp;gt; {&#xA;  USERS.push(createRandomUser());&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💎 Modules&lt;/h2&gt; &#xA;&lt;p&gt;An in-depth overview of the API methods is available in the &lt;a href=&#34;https://fakerjs.dev/guide/&#34;&gt;documentation&lt;/a&gt;.&lt;br&gt; The API covers the following modules:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Output&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Address&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.address.city()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lake Raoulfort&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Animal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.animal.cat()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Norwegian Forest Cat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.color.rgb()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;#cdfcdc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Commerce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.commerce.product()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Polo t-shirt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Company&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.company.companyName()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Zboncak and Sons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.database.engine()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MyISAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Datatype&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.datatype.uuid()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7b16dd12-935e-4acc-8381-b1e457bf0176&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.date.past()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sat Oct 20 2018 04:19:38 GMT-0700 (Pacific Daylight Time)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.finance.amount()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;¥23400 (After setting locale)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Git&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.git.commitMessage()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;feat: add products list page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hacker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.hacker.phrase()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Try to reboot the SQL bus, maybe it will bypass the virtual application!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Helpers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.helpers.arrayElement([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.image.cats()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://loremflickr.com/640/480/cats&#34;&gt;https://loremflickr.com/640/480/cats&lt;/a&gt; &lt;img src=&#34;https://loremflickr.com/640/480/cats&#34; height=&#34;100&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Internet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.internet.domainName()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;muddy-neuropathologist.net&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lorem&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.lorem.paragraph()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Porro nulla id vero perspiciatis nulla nihil. ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Music&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.music.genre()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;R&amp;amp;B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.name.firstName()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cameron&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Phone&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.phone.phoneNumber()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;+1 291-299-0192&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Random&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.random.locale()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fr_CA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Science&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.science.unit()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;{ name: &#39;meter&#39;, symbol: &#39;m&#39; }&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;System&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.system.directoryPath()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/root&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vehicle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.vehicle.vehicle()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lamborghini Camry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Word&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;faker.word.adjective()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;adorable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Templates&lt;/h3&gt; &#xA;&lt;p&gt;Faker contains a generator method &lt;code&gt;faker.helpers.fake&lt;/code&gt; for combining faker API methods using a mustache string format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;console.log(&#xA;  faker.helpers.fake(&#xA;    &#39;Hello {{name.prefix}} {{name.lastName}}, how are you today?&#39;&#xA;  )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🌏 Localization&lt;/h2&gt; &#xA;&lt;p&gt;Faker has support for multiple locales.&lt;/p&gt; &#xA;&lt;p&gt;The default language locale is set to English.&lt;/p&gt; &#xA;&lt;p&gt;Setting a new locale is simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// sets locale to de&#xA;faker.locale = &#39;de&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See our documentation for a list of &lt;a href=&#34;https://fakerjs.dev/api/localization.html#localization&#34;&gt;provided languages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please note that not every locale provides data for every module. In out pre-made locales, we fallback to english in such a case as this is the most complete and most common used language.&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Setting a randomness seed&lt;/h2&gt; &#xA;&lt;p&gt;If you want consistent results, you can set your own seed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;faker.seed(123);&#xA;&#xA;const firstRandom = faker.datatype.number();&#xA;&#xA;// Setting the seed again resets the sequence.&#xA;faker.seed(123);&#xA;&#xA;const secondRandom = faker.datatype.number();&#xA;&#xA;console.log(firstRandom === secondRandom);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤝 Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Faker is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome backers&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencollective.com/fakerjs/organizations.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencollective.com/fakerjs/individuals.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure to read the &lt;a href=&#34;https://github.com/faker-js/faker/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;📘 Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed to Faker!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/faker-js/faker/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/fakerjs/contributors.svg?width=800&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://fakerjs.dev&#34;&gt;fakerjs.dev&lt;/a&gt; website is kindly hosted by the Netlify Team. Also the search functionality is powered by &lt;a href=&#34;https://www.algolia.com&#34;&gt;algolia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📝 Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&#34;https://github.com/faker-js/faker/raw/main/CHANGELOG.md&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📜 What happened to the original faker.js?&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://fakerjs.dev/update.html&#34;&gt;team update&lt;/a&gt; (January 14th, 2022).&lt;/p&gt; &#xA;&lt;h2&gt;🔑 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/faker-js/faker/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/azure-pipelines-tasks</title>
    <updated>2022-09-05T01:43:30Z</updated>
    <id>tag:github.com,2022-09-05:/microsoft/azure-pipelines-tasks</id>
    <link href="https://github.com/microsoft/azure-pipelines-tasks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tasks for Azure Pipelines&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure Pipelines Tasks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/azure-pipelines-tasks/master/taskbanner.png&#34; alt=&#34;Tasks&#34; title=&#34;Tasks&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repo contains the tasks that are provided out-of-the-box with Azure Pipelines and Team Foundation Server.&lt;/p&gt; &#xA;&lt;p&gt;This provides open examples on how we write tasks which will help you write other tasks which can be uploaded to your account or server. See &lt;strong&gt;Writing Tasks&lt;/strong&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Build &amp;amp; Test&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/azure-pipelines-tasks/master/docs/res/win_med.png&#34; alt=&#34;Win&#34;&gt; &lt;strong&gt;Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/mseng/PipelineTools/_build/latest?definitionId=7634&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mseng/PipelineTools/_apis/build/status/azure-pipelines-tasks.ci-windows&#34; alt=&#34;Build &amp;amp; Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/azure-pipelines-tasks/master/docs/res/apple_med.png&#34; alt=&#34;macOS&#34;&gt; &lt;strong&gt;macOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/mseng/PipelineTools/_build/latest?definitionId=7635&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mseng/PipelineTools/_apis/build/status/azure-pipelines-tasks.ci-macos&#34; alt=&#34;Build &amp;amp; Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/azure-pipelines-tasks/master/docs/res/linux_med.png&#34; alt=&#34;Linux&#34;&gt; &lt;strong&gt;Linux&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/mseng/PipelineTools/_build/latest?definitionId=7636&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mseng/PipelineTools/_apis/build/status/azure-pipelines-tasks.ci-linux&#34; alt=&#34;Build &amp;amp; Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to Use Tasks&lt;/h2&gt; &#xA;&lt;p&gt;See the documentation for &lt;a href=&#34;https://aka.ms/tfbuild&#34;&gt;Continuous integration and deployment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Writing Tasks&lt;/h2&gt; &#xA;&lt;p&gt;If you need custom functionality in your build/release, it is usually simpler to use the existing script running tasks such as the PowerShell or Bash tasks. Writing a new task may be appropriate if you need deeper integration or reusability in many build definitions&lt;/p&gt; &#xA;&lt;p&gt;Tasks are simply tool runners. They know how to run MSBuild, VSTest, etc... in a first class way and handle return codes, how to treat std/err out, and how to write timeline records based on expected output. They also get access to credentials to write back to TFS/Azure Pipelines.&lt;/p&gt; &#xA;&lt;p&gt;For uploading custom tasks to Azure Pipelines use the &lt;a href=&#34;https://github.com/Microsoft/tfs-cli&#34;&gt;TFS Cross Platform Command Line utility&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tasks can also be deployed with an Azure DevOps extension. See &lt;a href=&#34;https://docs.microsoft.com/en-us/vsts/extend/develop/add-build-task&#34;&gt;this tutorial&lt;/a&gt; for how to write a custom task and package it inside an extension.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/azure-pipelines-tasks/master/docs/contribute.md&#34;&gt;contributions and suggestions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;We accept issue reports both here (file a GitHub issue) and in &lt;a href=&#34;https://developercommunity.visualstudio.com/spaces/21/index.html&#34;&gt;Developer Community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Do you think there might be a security issue? Have you been phished or identified a security vulnerability? Please don&#39;t report it here - let us know by sending an email to &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>discord/react-dnd-accessible-backend</title>
    <updated>2022-09-05T01:43:30Z</updated>
    <id>tag:github.com,2022-09-05:/discord/react-dnd-accessible-backend</id>
    <link href="https://github.com/discord/react-dnd-accessible-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An add-on backend for `react-dnd` that provides support for keyboards and screenreaders by default.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-dnd-accessible-backend&lt;/h1&gt; &#xA;&lt;p&gt;An add-on backend for &lt;a href=&#34;https://react-dnd.github.io/react-dnd/about&#34;&gt;&lt;code&gt;react-dnd&lt;/code&gt;&lt;/a&gt; that provides support for keyboards and screenreaders by default. Keep writing the same drag and drop code while enabling more users to interact with your app.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;react-dnd&lt;/code&gt; (and the system of packages it manages) does not directly support drag and drop other than using a mouse (or a finger on mobile devices). It encapsulates the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API&#34;&gt;HTML5 Drag and Drop API&lt;/a&gt;, which &lt;em&gt;could&lt;/em&gt; support other input devices, but most browser implementations today only support pointers. &lt;code&gt;react-dnd&lt;/code&gt; also does not provide any way of notifying screenreaders that drag and drop operations are happening. Again, the HTML5 API makes this &lt;em&gt;possible&lt;/em&gt;, but it is not supported in any meaningful way.&lt;/p&gt; &#xA;&lt;p&gt;Other drag and drop implementations out there &lt;em&gt;do&lt;/em&gt; support these features, such as &lt;a href=&#34;https://github.com/atlassian/react-beautiful-dnd&#34;&gt;&lt;code&gt;react-beautiful-dnd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://dndkit.com/&#34;&gt;&lt;code&gt;dndkit&lt;/code&gt;&lt;/a&gt;, and they do it well. However, &lt;code&gt;react-dnd&lt;/code&gt; remains by far the most popular drag and drop library for React applications and is likely stay in that position for a while as migrating between them is not easy, and the limitations of other systems keep many complex applications from moving at all.&lt;/p&gt; &#xA;&lt;p&gt;This package brings support for both alternative input devices like keyboards (or anything that can trigger keyboard events in the browser) as well as announcements for screenreaders to &lt;code&gt;react-dnd&lt;/code&gt; natively, without changing any of the public API that developers are used to or limiting of the structural flexibility it is known for.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package is available on npm as &lt;code&gt;react-dnd-accessible-backend&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install react-dnd-accessible-backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;react-dnd-accessible-backend&lt;/code&gt; is not a &lt;em&gt;replacement&lt;/em&gt; backend for &lt;code&gt;react-dnd&lt;/code&gt;, but rather an &lt;em&gt;additional&lt;/em&gt; one. This means you will most likely need to compose backends together to get all of the functionality you would like (mouse dragging, keyboards, pointer dragging on mobile, etc).&lt;/p&gt; &#xA;&lt;p&gt;One of the easiest ways to do this is with &lt;a href=&#34;https://www.npmjs.com/package/react-dnd-multi-backend&#34;&gt;&lt;code&gt;react-dnd-multi-backend&lt;/code&gt;&lt;/a&gt; and it&#39;s Transition system. Using that library, just add another backend entry and create a Transition for the keyboard trigger, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import KeyboardBackend, { isKeyboardDragTrigger } from &#34;react-dnd-accessible-backend&#34;;&#xA;import { HTML5Backend } from &#34;react-dnd-html5-backend&#34;;&#xA;import { DndProvider, createTransition } from &#34;react-dnd-multi-backend&#34;;&#xA;&#xA;const KeyboardTransition = createTransition(&#34;keydown&#34;, (event) =&amp;gt; {&#xA;  if (!isKeyboardDragTrigger(event as KeyboardEvent)) return false;&#xA;  event.preventDefault();&#xA;  return true;&#xA;});&#xA;&#xA;const DND_OPTIONS = {&#xA;  backends: [&#xA;    {&#xA;      id: &#34;html5&#34;,&#xA;      backend: HTML5Backend,&#xA;      transition: MouseTransition,&#xA;    },&#xA;    {&#xA;      id: &#34;keyboard&#34;,&#xA;      backend: KeyboardBackend,&#xA;      context: { window, document },&#xA;      preview: true,&#xA;      transition: KeyboardTransition,&#xA;    },&#xA;  ],&#xA;};&#xA;&#xA;function App() {&#xA;  return &amp;lt;DndProvider options={DND_OPTIONS}&amp;gt;...&amp;lt;/DndProvider&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all it takes to get started! There are a few &lt;a href=&#34;https://raw.githubusercontent.com/discord/react-dnd-accessible-backend/main/#considerations&#34;&gt;considerations&lt;/a&gt; you&#39;ll want to keep in mind to ensure a really good experience for your users, but everything else should be automatic.&lt;/p&gt; &#xA;&lt;p&gt;At the moment, the keybinds used for drag and drop are hard-coded as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ctrl+d&lt;/code&gt; (&lt;code&gt;command+d&lt;/code&gt; on macOS) to pick up a draggable item&lt;/li&gt; &#xA; &lt;li&gt;up and down arrow keys to move between drop targets&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Enter&lt;/code&gt; or &lt;code&gt;Spacebar&lt;/code&gt; to drop the dragged item on a drop target&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Escape&lt;/code&gt; while dragging to cancel the drag operation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;react-dnd-accessible-backend&lt;/code&gt; provides a few options for customizing styles and behavior for use in your app. If you&#39;re using &lt;code&gt;react-dnd-multi-backend&lt;/code&gt;, these can get passed in as an &lt;code&gt;options&lt;/code&gt; field on the backend configuration object, or otherwise as the third argment when calling the backend directly as a factory function (like &lt;code&gt;KeyboardBackend(manager, context, options)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These options are:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;getAnnouncementMessages?: () =&amp;gt; AnnouncementMessages&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function is called any time a drag and drop action is performed by the keyboard backend and is useful for providing translations or more descriptive messages for screenreader users as they interact with draggable items.&lt;/p&gt; &#xA;&lt;p&gt;If this option is not provided, a &lt;a href=&#34;https://github.com/discord/react-dnd-accessible-backend/raw/main/src/util/AnnouncementMessages.tsx#L16-L37&#34;&gt;default set of messages in English&lt;/a&gt; will be used. Providing a separate function requires that you specify a replacement for &lt;em&gt;all&lt;/em&gt; messages that can be announced. These (currently) are &lt;code&gt;pickedUpItem&lt;/code&gt;, &lt;code&gt;droppedItem&lt;/code&gt;, &lt;code&gt;hoveredTarget&lt;/code&gt; and &lt;code&gt;canceledDrag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each message getter is defined as a function that takes in an &lt;code&gt;itemId&lt;/code&gt; and the HTML &lt;code&gt;node&lt;/code&gt; that is relevant to the operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// A very naive example of how to provide custom announcement messages.&#xA;function getCustomAnnouncementMessages() {&#xA;  return {&#xA;    pickedUpItem: (itemId: string, node: HTMLElement | null) =&amp;gt; `Picked up ${itemId}`,&#xA;    droppedItem: (itemId: string, node: HTMLElement | null) =&amp;gt; `Dropped ${itemId}`,&#xA;    hoveredTarget: (itemId: string, node: HTMLElement | null) =&amp;gt; `Hoevered over ${itemId}`,&#xA;    canceledDrag: (itemId: string, node: HTMLElement | null) =&amp;gt; &#34;Drag cancelled&#34;&#xA;  };&#xA;}&#xA;&#xA;{&#xA;  options: {&#xA;    getAnnouncementMessages: getCustomAnnouncementMessages,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;isDragTrigger?: (event: KeyboardEvent, isFirstEvent: boolean) =&amp;gt; boolean&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function is used to determine if a keyboard event that occurs on a draggable element should trigger the start of a drag operation. Overriding this option lets you customize the keybind used to start dragging or perform other checks before the drag is allowed to start.&lt;/p&gt; &#xA;&lt;p&gt;If this option is not provided, it will default to using the &lt;code&gt;isKeyboardDragTrigger&lt;/code&gt; that is exported as part of this package, which triggers when &lt;code&gt;ctrl/command+d&lt;/code&gt; is pressed.&lt;/p&gt; &#xA;&lt;p&gt;Ths &lt;code&gt;isFirstEvent&lt;/code&gt; parameter indicates whether this is the first event the backend is receiving after being setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;{&#xA;  options: {&#xA;    // This will start a drag whenever the users presses&#xA;    // `m` while focused on a draggable element.&#xA;    isDragTrigger: (event) =&amp;gt; event.key === &#34;m&#34;&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In most cases when &lt;code&gt;react-dnd-multi-backend&lt;/code&gt;, you&#39;ll want to use the same trigger function in this option for the trigger in &lt;code&gt;createTransition&lt;/code&gt;. Otherwise the backend may not be set up when you expect to start a drag. This is also where the &lt;code&gt;isFirstEvent&lt;/code&gt; property can come in handy, since &lt;code&gt;react-dnd-multi-backend&lt;/code&gt; will sometimes fire cloned events that don&#39;t have keyboard properties on them. See the comment in &lt;a href=&#34;https://github.com/discord/react-dnd-accessible-backend/raw/6b7413eed66630b5e8e00864c9a282124a9e484e/src/util/isKeyboardDragTrigger.tsx#L5-L10&#34;&gt;&lt;code&gt;isKeyboardDragTrigger&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;announcerClassName&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Screenreader announcements are performed by injecting an element into the DOM with an &lt;code&gt;aria-live&lt;/code&gt; attribute that gets picked up by the screenreader. By default, this element is visually hidden and kept out of the way, but if you wish to style it in some other way, you can provide a custom class name with this option. The examples page in this repository does this to show the messages on the page for testing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;{&#xA;  options: {&#xA;    announcerClassName: styles.dndAnnouncer,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;previewerClassName&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Similar to the &lt;code&gt;announcerClassName&lt;/code&gt; this option provides a custom class name to use for the drag previewer, which is a container that gets populated by a clone of the currently-dragged element and positions itself in the appropriate place on screen for the currently-hovered drop target.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;{&#xA;  options: {&#xA;    previewerClassName: styles.dndDragPreview,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is important that this div does &lt;em&gt;not&lt;/em&gt; have any styles that affect its spatial positioning on screen, as this is controlled internally by the backend. What it &lt;em&gt;can&lt;/em&gt; be used for are things like adding a drop shadow or highlight to the drag preview, changing opacities, borders, scaling, and other stylistic options.&lt;/p&gt; &#xA;&lt;h2&gt;Considerations&lt;/h2&gt; &#xA;&lt;h3&gt;Ensuring accessible labels&lt;/h3&gt; &#xA;&lt;p&gt;The default announcement messages will look at a few properties to try and create the most relevant label possible for the user. At the highest priority, if you specify a &lt;code&gt;data-dnd-name&lt;/code&gt; attribute on the target element (either the drag source or the drop target, depending on the operation), that will be used directly. Next, it will look for an &lt;code&gt;aria-label&lt;/code&gt; on the same element, and finally it will fall back to using the &lt;code&gt;innerText&lt;/code&gt; of the element itself.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// This would read out &#34;Picked up Example A&#34; when it is picked up for dragging&#xA;&amp;lt;div ref={drag} data-dnd-name=&#34;Example A&#34; aria-label=&#34;some aria label&#34; /&amp;gt;&#xA;// This would read out &#34;Over Target B&#34; when the user drags an item over it with the keyboard backend&#xA;&amp;lt;dif ref={drop} aria-label=&#34;Target B&#34; /&amp;gt;&#xA;// This would read out &#34;Dropped an element with text inside&#34; when it is dropped on a target&#xA;&amp;lt;div ref={drag}&amp;gt;an element with text inside&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While this &lt;em&gt;should&lt;/em&gt; ensure that any item a user picks up or drops has &lt;em&gt;some&lt;/em&gt; kind of label on it, falling back to the inner text should be a last resort, and ideally you should add an &lt;code&gt;aria-label&lt;/code&gt; or at least a &lt;code&gt;data-dnd-name&lt;/code&gt; to provide a more succinct, helpful label for screenreader users.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;Sort on &#34;hover&#34;&lt;/h3&gt; &#xA;&lt;p&gt;A common pattern with &lt;code&gt;react-dnd&lt;/code&gt; is to perform sorting operations in the &lt;code&gt;hover&lt;/code&gt; callback on drop targets. In fact this is how most of the &lt;a href=&#34;https://codesandbox.io/s/github/react-dnd/react-dnd/tree/gh-pages/examples_hooks_ts/04-sortable/simple&#34;&gt;react-dnd sorting examples&lt;/a&gt; operate.&lt;/p&gt; &#xA;&lt;p&gt;However, this pattern poses a problem for trying to drag and drop with a keyboard, because the user doesn&#39;t have the same granularity of control in movement. In the example linked above, sorting happens based on whether the user&#39;s mouse is dragging over the upper or lower half of the drop target. A keyboard user wouldn&#39;t be able to choose between those positions, so they effectively miss out on some sorting options, or in some cases the sorting won&#39;t happen at all since by default the drag operations go over the exact center of the drop target.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, sorting on hover means that a user &#34;browsing&#34; through drop targets will inadvertently be reorganizing their lists without ever actually dropping an item. If a user picks up an item, drags it up a few places, then decides to cancel the drag, the item will have moved those spaces anyway because the move happened on hover rather than when the item was actually dropped.&lt;/p&gt; &#xA;&lt;p&gt;The best way to avoid this issue is to just avoid sorting in the &lt;code&gt;hover&lt;/code&gt; callback and use drag placeholders and other indicators to show where an element will drop. This may involve some refactoring and rethinking designs, but the end result will be more accessible (and often more performant!) for everyone.&lt;/p&gt; &#xA;&lt;h1&gt;Thanks to&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmissey/react-dnd-keyboard-backend&#34;&gt;&lt;code&gt;react-dnd-keyboard-backend&lt;/code&gt;&lt;/a&gt; as an inspiration and proof-of-concept for keyboard-based backends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LouisBrunner/dnd-multi-backend/tree/main/packages/react-dnd-multi-backend&#34;&gt;&lt;code&gt;react-dnd-multi-backend&lt;/code&gt;&lt;/a&gt; for making it possible to compose backends together.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atlassian/react-beautiful-dnd&#34;&gt;&lt;code&gt;react-beautiful-dnd&lt;/code&gt;&lt;/a&gt; as a guiding example of what a good keyboard-based dnd interface could feel like.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>