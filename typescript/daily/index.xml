<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-20T01:40:25Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cloudflare/mcp-server-cloudflare</title>
    <updated>2025-03-20T01:40:25Z</updated>
    <id>tag:github.com,2025-03-20:/cloudflare/mcp-server-cloudflare</id>
    <link href="https://github.com/cloudflare/mcp-server-cloudflare" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cloudflare MCP Server&lt;/h1&gt; &#xA;&lt;p&gt;Model Context Protocol (MCP) is a &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;new, standardized protocol&lt;/a&gt; for managing context between large language models (LLMs) and external systems. In this repository, we provide an installer as well as an MCP Server for &lt;a href=&#34;https://api.cloudflare.com&#34;&gt;Cloudflare&#39;s API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This lets you use Claude Desktop, or any MCP Client, to use natural language to accomplish things on your Cloudflare account, e.g.:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Please deploy me a new Worker with an example durable object.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Can you tell me about the data in my D1 database named &#39;...&#39;?&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Can you copy all the entries from my KV namespace &#39;...&#39; into my R2 bucket &#39;...&#39;?&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/watch?v=vGajZpl_9yA&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/vGajZpl_9yA/maxresdefault.jpg&#34; alt=&#34;Demonstrating the newly-released MCP server to explore Cloudflare properties, like Workers, KV, and D1.&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;npx @cloudflare/mcp-server-cloudflare init&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The MCP server will automatically run &lt;code&gt;npx wrangler login&lt;/code&gt; if you&#39;re not already authenticated with Cloudflare. You&#39;ll be prompted to complete the authentication process in your browser if needed.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/163bed75-ec0c-478a-94b2-179969a90923&#34; alt=&#34;Example console output&#34; width=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Restart Claude Desktop, you should see a small ðŸ”¨ icon that shows the following tools available for use:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/a24275b1-1c6f-4754-96ef-dd7b9f0f5903&#34; alt=&#34;Example tool icon&#34; height=&#34;160&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/4fb8badb-6800-4a3f-a530-a344b3584bec&#34; alt=&#34;Example tool list&#34; height=&#34;160&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Paid Features&lt;/h2&gt; &#xA;&lt;p&gt;Some features in this MCP server require a paid Cloudflare Workers plan:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Observability and Analytics&lt;/strong&gt;: The &lt;code&gt;analytics_get&lt;/code&gt; tool and related analytics features require a paid Workers plan to access these metrics&lt;/li&gt; &#xA; &lt;li&gt;Other premium Cloudflare features like advanced D1 database capabilities and higher usage limits also require appropriate paid plans&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ensure your Cloudflare account has the necessary subscription level for the features you intend to use.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;KV Store Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_kvs&lt;/code&gt;: List all KV namespaces in your account&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kv_get&lt;/code&gt;: Get a value from a KV namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kv_put&lt;/code&gt;: Store a value in a KV namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kv_list&lt;/code&gt;: List keys in a KV namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kv_delete&lt;/code&gt;: Delete a key from a KV namespace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;R2 Storage Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;r2_list_buckets&lt;/code&gt;: List all R2 buckets in your account&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r2_create_bucket&lt;/code&gt;: Create a new R2 bucket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r2_delete_bucket&lt;/code&gt;: Delete an R2 bucket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r2_list_objects&lt;/code&gt;: List objects in an R2 bucket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r2_get_object&lt;/code&gt;: Get an object from an R2 bucket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r2_put_object&lt;/code&gt;: Put an object into an R2 bucket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r2_delete_object&lt;/code&gt;: Delete an object from an R2 bucket&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;D1 Database Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;d1_list_databases&lt;/code&gt;: List all D1 databases in your account&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d1_create_database&lt;/code&gt;: Create a new D1 database&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d1_delete_database&lt;/code&gt;: Delete a D1 database&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d1_query&lt;/code&gt;: Execute a SQL query against a D1 database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Workers Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;worker_list&lt;/code&gt;: List all Workers in your account&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;worker_get&lt;/code&gt;: Get a Worker&#39;s script content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;worker_put&lt;/code&gt;: Create or update a Worker script&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;worker_delete&lt;/code&gt;: Delete a Worker script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Durable Objects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;durable_objects_list&lt;/code&gt;: List all Durable Objects namespaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;durable_objects_create&lt;/code&gt;: Create a new Durable Objects namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;durable_objects_delete&lt;/code&gt;: Delete a Durable Objects namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;durable_objects_list_instances&lt;/code&gt;: List all instances for a specific Durable Objects namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;durable_objects_get_instance&lt;/code&gt;: Get details about a specific Durable Objects instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;durable_objects_delete_instance&lt;/code&gt;: Delete a specific Durable Objects instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Queues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;queues_list&lt;/code&gt;: List all Queues in your account&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queues_create&lt;/code&gt;: Create a new Queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queues_delete&lt;/code&gt;: Delete a Queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queues_get&lt;/code&gt;: Get details about a specific Queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queues_send_message&lt;/code&gt;: Send a message to a Queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queues_get_messages&lt;/code&gt;: Get messages from a Queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queues_update_consumer&lt;/code&gt;: Update a Queue consumer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Workers AI&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;workers_ai_list_models&lt;/code&gt;: List available AI models&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workers_ai_get_model&lt;/code&gt;: Get details about a specific AI model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workers_ai_run_inference&lt;/code&gt;: Run inference using Workers AI&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workers_ai_list_tasks&lt;/code&gt;: List AI tasks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Workflows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;workflows_list&lt;/code&gt;: List all Workflows in your account&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflows_create&lt;/code&gt;: Create a new Workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflows_delete&lt;/code&gt;: Delete a Workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflows_get&lt;/code&gt;: Get details about a specific Workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflows_update&lt;/code&gt;: Update a Workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflows_execute&lt;/code&gt;: Execute a Workflow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Templates&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;templates_list&lt;/code&gt;: List available Worker templates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;templates_get&lt;/code&gt;: Get details about a specific template&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;templates_create_from_template&lt;/code&gt;: Create a new Worker from a template&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Workers for Platforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;w4p_list_dispatchers&lt;/code&gt;: List all Workers for Platforms dispatchers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w4p_create_dispatcher&lt;/code&gt;: Create a new dispatcher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w4p_delete_dispatcher&lt;/code&gt;: Delete a dispatcher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w4p_get_dispatcher&lt;/code&gt;: Get details about a specific dispatcher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w4p_update_dispatcher&lt;/code&gt;: Update a dispatcher configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Service Bindings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bindings_list&lt;/code&gt;: List all service bindings for a Worker&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bindings_create&lt;/code&gt;: Create a new service binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bindings_update&lt;/code&gt;: Update a service binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bindings_delete&lt;/code&gt;: Delete a service binding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;URL Routing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;routing_list_routes&lt;/code&gt;: List all routes for a Worker&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;routing_create_route&lt;/code&gt;: Create a new route&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;routing_update_route&lt;/code&gt;: Update a route&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;routing_delete_route&lt;/code&gt;: Delete a route&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cron Triggers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cron_list&lt;/code&gt;: List all cron triggers for a Worker&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cron_create&lt;/code&gt;: Create a new cron trigger&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cron_update&lt;/code&gt;: Update a cron trigger&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cron_delete&lt;/code&gt;: Delete a cron trigger&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Zones &amp;amp; Domains&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;zones_list&lt;/code&gt;: List all zones in your account&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zones_create&lt;/code&gt;: Create a new zone&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zones_delete&lt;/code&gt;: Delete a zone&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zones_get&lt;/code&gt;: Get details about a specific zone&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zones_check_activation&lt;/code&gt;: Check zone activation status&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Secrets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;secrets_list&lt;/code&gt;: List all secrets for a Worker&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secrets_put&lt;/code&gt;: Create or update a secret&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secrets_delete&lt;/code&gt;: Delete a secret&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;versions_list&lt;/code&gt;: List all versions of a Worker&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;versions_get&lt;/code&gt;: Get details about a specific version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;versions_rollback&lt;/code&gt;: Rollback to a previous version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wrangler Config&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;wrangler_get_config&lt;/code&gt;: Get the current Wrangler configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wrangler_update_config&lt;/code&gt;: Update Wrangler configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Analytics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;analytics_get&lt;/code&gt;: Retrieve analytics data for your domain &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Includes metrics like requests, bandwidth, threats, and page views&lt;/li&gt; &#xA;   &lt;li&gt;Supports date range filtering&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;In the current project folder, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm install&#xA;pnpm build:watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in a second terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node dist/index.js init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will link Claude Desktop against your locally-installed version for you to test. If you&#39;re not already authenticated with Wrangler, the server will automatically prompt you to complete the authentication process in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The project uses Vitest as the testing framework with MSW (Mock Service Worker) for API mocking.&lt;/p&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;To run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests with coverage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test:coverage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a specific test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test -- tests/tools/queues.test.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests in watch mode (useful during development):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test:watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test Structure&lt;/h3&gt; &#xA;&lt;p&gt;The test suite is organized as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/tools/&lt;/code&gt;: Contains tests for each Cloudflare API tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/mocks/&lt;/code&gt;: Contains mock data and request handlers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/utils/&lt;/code&gt;: Contains test helper functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/setup.ts&lt;/code&gt;: Global test setup configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each tool test file follows a consistent pattern of testing both successful operations and error handling scenarios.&lt;/p&gt; &#xA;&lt;h2&gt;Usage outside of Claude&lt;/h2&gt; &#xA;&lt;p&gt;To run the server locally, run &lt;code&gt;node dist/index run &amp;lt;account-id&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using an alternative MCP Client, or testing things locally, emit the &lt;code&gt;tools/list&lt;/code&gt; command to get an up-to-date list of all available tools. Then you can call these directly using the &lt;code&gt;tools/call&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Workers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List workers&#xA;worker_list()&#xA;&#xA;// Get worker code&#xA;worker_get({ name: &#34;my-worker&#34; })&#xA;&#xA;// Update worker&#xA;worker_put({&#xA;  name: &#34;my-worker&#34;,&#xA;  script: &#34;export default { async fetch(request, env, ctx) { ... }}&#34;,&#xA;  bindings: [&#xA;    {&#xA;      type: &#34;kv_namespace&#34;,&#xA;      name: &#34;MY_KV&#34;,&#xA;      namespace_id: &#34;abcd1234&#34;&#xA;    },&#xA;    {&#xA;      type: &#34;r2_bucket&#34;,&#xA;      name: &#34;MY_BUCKET&#34;,&#xA;      bucket_name: &#34;my-files&#34;&#xA;    }&#xA;  ],&#xA;  compatibility_date: &#34;2024-01-01&#34;,&#xA;  compatibility_flags: [&#34;nodejs_compat&#34;]&#xA;})&#xA;&#xA;// Delete worker&#xA;worker_delete({ name: &#34;my-worker&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;KV Store&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List KV namespaces&#xA;get_kvs()&#xA;&#xA;// Get value&#xA;kv_get({&#xA;    namespaceId: &#34;your_namespace_id&#34;,&#xA;    key: &#34;myKey&#34;&#xA;})&#xA;&#xA;// Store value&#xA;kv_put({&#xA;    namespaceId: &#34;your_namespace_id&#34;,&#xA;    key: &#34;myKey&#34;,&#xA;    value: &#34;myValue&#34;,&#xA;    expirationTtl: 3600 // optional, in seconds&#xA;})&#xA;&#xA;// List keys&#xA;kv_list({&#xA;    namespaceId: &#34;your_namespace_id&#34;,&#xA;    prefix: &#34;app_&#34;, // optional&#xA;    limit: 10 // optional&#xA;})&#xA;&#xA;// Delete key&#xA;kv_delete({&#xA;    namespaceId: &#34;your_namespace_id&#34;,&#xA;    key: &#34;myKey&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;R2 Storage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List buckets&#xA;r2_list_buckets()&#xA;&#xA;// Create bucket&#xA;r2_create_bucket({ name: &#34;my-bucket&#34; })&#xA;&#xA;// Delete bucket&#xA;r2_delete_bucket({ name: &#34;my-bucket&#34; })&#xA;&#xA;// List objects in bucket&#xA;r2_list_objects({ &#xA;    bucket: &#34;my-bucket&#34;,&#xA;    prefix: &#34;folder/&#34;, // optional&#xA;    delimiter: &#34;/&#34;, // optional&#xA;    limit: 1000 // optional&#xA;})&#xA;&#xA;// Get object&#xA;r2_get_object({&#xA;    bucket: &#34;my-bucket&#34;,&#xA;    key: &#34;folder/file.txt&#34;&#xA;})&#xA;&#xA;// Put object&#xA;r2_put_object({&#xA;    bucket: &#34;my-bucket&#34;,&#xA;    key: &#34;folder/file.txt&#34;,&#xA;    content: &#34;Hello, World!&#34;,&#xA;    contentType: &#34;text/plain&#34; // optional&#xA;})&#xA;&#xA;// Delete object&#xA;r2_delete_object({&#xA;    bucket: &#34;my-bucket&#34;,&#xA;    key: &#34;folder/file.txt&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D1 Database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List databases&#xA;d1_list_databases()&#xA;&#xA;// Create database&#xA;d1_create_database({ name: &#34;my-database&#34; })&#xA;&#xA;// Delete database&#xA;d1_delete_database({ databaseId: &#34;your_database_id&#34; })&#xA;&#xA;// Execute a single query&#xA;d1_query({&#xA;    databaseId: &#34;your_database_id&#34;,&#xA;    query: &#34;SELECT * FROM users WHERE age &amp;gt; ?&#34;,&#xA;    params: [&#34;25&#34;] // optional&#xA;})&#xA;&#xA;// Create a table&#xA;d1_query({&#xA;    databaseId: &#34;your_database_id&#34;,&#xA;    query: `&#xA;        CREATE TABLE users (&#xA;            id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;            name TEXT NOT NULL,&#xA;            email TEXT UNIQUE,&#xA;            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#xA;        )&#xA;    `&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Analytics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Get today&#39;s analytics&#xA;analytics_get({&#xA;    zoneId: &#34;your_zone_id&#34;,&#xA;    since: &#34;2024-11-26T00:00:00Z&#34;,&#xA;    until: &#34;2024-11-26T23:59:59Z&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Durable Objects&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List Durable Objects namespaces&#xA;durable_objects_list()&#xA;&#xA;// Create a new Durable Objects namespace&#xA;durable_objects_create({&#xA;    name: &#34;my-durable-object&#34;,&#xA;    script_name: &#34;my-worker&#34;,&#xA;    class_name: &#34;MyDurableObjectClass&#34;&#xA;})&#xA;&#xA;// Delete a Durable Objects namespace&#xA;durable_objects_delete({&#xA;    id: &#34;your_namespace_id&#34;&#xA;})&#xA;&#xA;// List instances for a namespace&#xA;durable_objects_list_instances({&#xA;    namespaceId: &#34;your_namespace_id&#34;,&#xA;    limit: 100 // optional&#xA;})&#xA;&#xA;// Get details about a specific instance&#xA;durable_objects_get_instance({&#xA;    namespaceId: &#34;your_namespace_id&#34;,&#xA;    instanceId: &#34;your_instance_id&#34;&#xA;})&#xA;&#xA;// Delete a specific instance&#xA;durable_objects_delete_instance({&#xA;    namespaceId: &#34;your_namespace_id&#34;,&#xA;    instanceId: &#34;your_instance_id&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queues&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all queues&#xA;queues_list()&#xA;&#xA;// Create a new queue&#xA;queues_create({&#xA;    name: &#34;my-queue&#34;,&#xA;    settings: {&#xA;        delivery_delay: 0,&#xA;        dead_letter_queue: &#34;dead-letter-queue&#34; // optional&#xA;    }&#xA;})&#xA;&#xA;// Delete a queue&#xA;queues_delete({&#xA;    name: &#34;my-queue&#34;&#xA;})&#xA;&#xA;// Get queue details&#xA;queues_get({&#xA;    name: &#34;my-queue&#34;&#xA;})&#xA;&#xA;// Send a message to a queue&#xA;queues_send_message({&#xA;    queue: &#34;my-queue&#34;,&#xA;    messages: [&#xA;        { body: JSON.stringify({ key: &#34;value&#34; }) }&#xA;    ]&#xA;})&#xA;&#xA;// Get messages from a queue&#xA;queues_get_messages({&#xA;    queue: &#34;my-queue&#34;,&#xA;    batchSize: 10, // optional&#xA;    visibilityTimeout: 30 // optional, in seconds&#xA;})&#xA;&#xA;// Update a queue consumer&#xA;queues_update_consumer({&#xA;    queue: &#34;my-queue&#34;,&#xA;    consumer: &#34;my-consumer&#34;,&#xA;    settings: {&#xA;        dead_letter_queue: &#34;dead-letter-queue&#34;,&#xA;        batch_size: 10,&#xA;        max_retries: 3&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Workers AI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List available AI models&#xA;workers_ai_list_models()&#xA;&#xA;// Get details about a specific model&#xA;workers_ai_get_model({&#xA;    model: &#34;@cf/meta/llama-2-7b-chat-int8&#34;&#xA;})&#xA;&#xA;// Run inference using Workers AI&#xA;workers_ai_run_inference({&#xA;    model: &#34;@cf/meta/llama-2-7b-chat-int8&#34;,&#xA;    input: {&#xA;        messages: [&#xA;            { role: &#34;system&#34;, content: &#34;You are a helpful assistant.&#34; },&#xA;            { role: &#34;user&#34;, content: &#34;Hello, who are you?&#34; }&#xA;        ]&#xA;    },&#xA;    options: {&#xA;        temperature: 0.7,&#xA;        max_tokens: 100&#xA;    }&#xA;})&#xA;&#xA;// List AI tasks&#xA;workers_ai_list_tasks()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Workflows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all workflows&#xA;workflows_list()&#xA;&#xA;// Create a new workflow&#xA;workflows_create({&#xA;    name: &#34;my-workflow&#34;,&#xA;    content: &#34;// Workflow script content here&#34;&#xA;})&#xA;&#xA;// Delete a workflow&#xA;workflows_delete({&#xA;    name: &#34;my-workflow&#34;&#xA;})&#xA;&#xA;// Get workflow details&#xA;workflows_get({&#xA;    name: &#34;my-workflow&#34;&#xA;})&#xA;&#xA;// Update a workflow&#xA;workflows_update({&#xA;    name: &#34;my-workflow&#34;,&#xA;    content: &#34;// Updated workflow script content&#34;&#xA;})&#xA;&#xA;// Execute a workflow&#xA;workflows_execute({&#xA;    name: &#34;my-workflow&#34;,&#xA;    input: { key: &#34;value&#34; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Templates&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List available templates&#xA;templates_list()&#xA;&#xA;// Get details about a specific template&#xA;templates_get({&#xA;    template: &#34;worker-typescript&#34;&#xA;})&#xA;&#xA;// Create a worker from a template&#xA;templates_create_from_template({&#xA;    name: &#34;my-new-worker&#34;,&#xA;    template: &#34;worker-typescript&#34;,&#xA;    options: {&#xA;        // Template-specific options&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Workers for Platforms&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List dispatchers&#xA;w4p_list_dispatchers()&#xA;&#xA;// Create a new dispatcher&#xA;w4p_create_dispatcher({&#xA;    name: &#34;my-dispatcher&#34;,&#xA;    script: &#34;// Dispatcher script content&#34;&#xA;})&#xA;&#xA;// Delete a dispatcher&#xA;w4p_delete_dispatcher({&#xA;    name: &#34;my-dispatcher&#34;&#xA;})&#xA;&#xA;// Get dispatcher details&#xA;w4p_get_dispatcher({&#xA;    name: &#34;my-dispatcher&#34;&#xA;})&#xA;&#xA;// Update dispatcher&#xA;w4p_update_dispatcher({&#xA;    name: &#34;my-dispatcher&#34;,&#xA;    script: &#34;// Updated dispatcher script content&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Service Bindings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all service bindings for a worker&#xA;bindings_list({&#xA;    workerName: &#34;my-worker&#34;&#xA;})&#xA;&#xA;// Create a new service binding&#xA;bindings_create({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    bindingName: &#34;MY_SERVICE&#34;,&#xA;    serviceEnvironment: &#34;production&#34;,&#xA;    serviceName: &#34;target-worker&#34;&#xA;})&#xA;&#xA;// Update a service binding&#xA;bindings_update({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    bindingName: &#34;MY_SERVICE&#34;,&#xA;    serviceEnvironment: &#34;staging&#34;,&#xA;    serviceName: &#34;target-worker&#34;&#xA;})&#xA;&#xA;// Delete a service binding&#xA;bindings_delete({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    bindingName: &#34;MY_SERVICE&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;URL Routing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all routes for a worker&#xA;routing_list_routes({&#xA;    workerName: &#34;my-worker&#34;&#xA;})&#xA;&#xA;// Create a new route&#xA;routing_create_route({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    pattern: &#34;example.com/*&#34;,&#xA;    zoneId: &#34;your_zone_id&#34;&#xA;})&#xA;&#xA;// Update a route&#xA;routing_update_route({&#xA;    routeId: &#34;your_route_id&#34;,&#xA;    pattern: &#34;api.example.com/*&#34;,&#xA;    zoneId: &#34;your_zone_id&#34;&#xA;})&#xA;&#xA;// Delete a route&#xA;routing_delete_route({&#xA;    routeId: &#34;your_route_id&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cron Triggers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all cron triggers for a worker&#xA;cron_list({&#xA;    workerName: &#34;my-worker&#34;&#xA;})&#xA;&#xA;// Create a new cron trigger&#xA;cron_create({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    schedule: &#34;*/5 * * * *&#34;,&#xA;    timezone: &#34;UTC&#34; // optional&#xA;})&#xA;&#xA;// Update a cron trigger&#xA;cron_update({&#xA;    triggerId: &#34;your_trigger_id&#34;,&#xA;    schedule: &#34;0 */2 * * *&#34;,&#xA;    timezone: &#34;America/New_York&#34;&#xA;})&#xA;&#xA;// Delete a cron trigger&#xA;cron_delete({&#xA;    triggerId: &#34;your_trigger_id&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zones &amp;amp; Domains&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all zones&#xA;zones_list()&#xA;&#xA;// Create a new zone&#xA;zones_create({&#xA;    name: &#34;example.com&#34;,&#xA;    account: {&#xA;        id: &#34;your_account_id&#34;&#xA;    }&#xA;})&#xA;&#xA;// Get zone details&#xA;zones_get({&#xA;    zoneId: &#34;your_zone_id&#34;&#xA;})&#xA;&#xA;// Delete a zone&#xA;zones_delete({&#xA;    zoneId: &#34;your_zone_id&#34;&#xA;})&#xA;&#xA;// Check zone activation status&#xA;zones_check_activation({&#xA;    zoneId: &#34;your_zone_id&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Secrets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all secrets for a worker&#xA;secrets_list({&#xA;    workerName: &#34;my-worker&#34;&#xA;})&#xA;&#xA;// Create or update a secret&#xA;secrets_put({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    secretName: &#34;API_KEY&#34;,&#xA;    secretValue: &#34;your-secret-api-key&#34;&#xA;})&#xA;&#xA;// Delete a secret&#xA;secrets_delete({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    secretName: &#34;API_KEY&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Version Management&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// List all versions of a worker&#xA;versions_list({&#xA;    workerName: &#34;my-worker&#34;&#xA;})&#xA;&#xA;// Get details about a specific version&#xA;versions_get({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    versionId: &#34;your_version_id&#34;&#xA;})&#xA;&#xA;// Rollback to a previous version&#xA;versions_rollback({&#xA;    workerName: &#34;my-worker&#34;,&#xA;    versionId: &#34;your_version_id&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wrangler Config&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Get current wrangler configuration&#xA;wrangler_get_config()&#xA;&#xA;// Update wrangler configuration&#xA;wrangler_update_config({&#xA;    config: {&#xA;        name: &#34;my-worker&#34;,&#xA;        main: &#34;src/index.ts&#34;,&#xA;        compatibility_date: &#34;2024-03-11&#34;,&#xA;        workers_dev: true&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt;</summary>
  </entry>
</feed>