<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-31T01:40:23Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>workadventure/workadventure</title>
    <updated>2025-07-31T01:40:23Z</updated>
    <id>tag:github.com,2025-07-31:/workadventure/workadventure</id>
    <link href="https://github.com/workadventure/workadventure" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collaborative web application (virtual office) presented as a 16-bit RPG video game&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/thecodingmachine/workadventure/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://discord.gg/G6Xh9ZM9aR&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/821338762134290432?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://awesome.re/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/workadventure/workadventure/develop/README-MAP.png&#34; alt=&#34;WorkAdventure office image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WorkAdventure&lt;/h1&gt; &#xA;&lt;p&gt;WorkAdventure is a platform that allows you to design &lt;strong&gt;fully customizable collaborative virtual worlds&lt;/strong&gt; (metaverse).&lt;/p&gt; &#xA;&lt;p&gt;With your own avatar, you can &lt;strong&gt;interact spontaneously&lt;/strong&gt; with your colleagues, clients, partners (using a &lt;strong&gt;video-chat system&lt;/strong&gt;, triggered when you approach someone). Imagine &lt;strong&gt;all types of immersive experiences&lt;/strong&gt; (recruitments, onboarding, trainings, digital workplace, internal/external events) on desktop, mobile or tablet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The little plus? The platform is &lt;strong&gt;GDPR&lt;/strong&gt; and &lt;strong&gt;open source&lt;/strong&gt;!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See more features for your &lt;a href=&#34;https://workadventu.re/virtual-offices/virtual-meetings/?utm_source=github&#34;&gt;virtual office&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pricing for our &lt;a href=&#34;https://workadventu.re/pricing/?utm_source=github&#34;&gt;SaaS version&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.staging.workadventu.re/@/tcm/workadventure/wa-village/?utm_source=github&#34;&gt;&lt;img src=&#34;https://workadventu.re/wp-content/uploads/2024/02/Button-Live-Demo.png&#34; alt=&#34;Workadventure live demo example&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://workadventu.re/?utm_source=github&#34;&gt;&lt;img src=&#34;https://workadventu.re/wp-content/uploads/2024/02/Button-Website.png&#34; alt=&#34;Workadventure Website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h6&gt;Support our team!&lt;/h6&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/G6Xh9ZM9aR&#34;&gt;&lt;img src=&#34;https://workadventu.re/wp-content/uploads/2024/02/Icon-Discord.png&#34; alt=&#34;Discord Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Workadventure_&#34;&gt;&lt;img src=&#34;https://workadventu.re/wp-content/uploads/2024/02/Icon-X.png&#34; alt=&#34;X Social Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/workadventu-re/&#34;&gt;&lt;img src=&#34;https://workadventu.re/wp-content/uploads/2024/02/Icon-LinkedIn.png&#34; alt=&#34;LinkedIn Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats.vercel.app/api?username=%7Busername%7D&amp;amp;theme=transparent&#34; alt=&#34;Stats repo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community resources&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Want to build your own map, check out our &lt;strong&gt;&lt;a href=&#34;https://docs.workadventu.re/map-building/&#34;&gt;map building documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out resources developed by the WorkAdventure community at &lt;strong&gt;&lt;a href=&#34;https://github.com/workadventure/awesome-workadventure&#34;&gt;awesome-workadventure&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setting up a production environment&lt;/h2&gt; &#xA;&lt;p&gt;We support 2 ways to set up a production environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using Docker Compose&lt;/li&gt; &#xA; &lt;li&gt;or using a Helm chart for Kubernetes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/workadventure/workadventure/develop/docs/others/self-hosting/install.md&#34;&gt;Setting up a production environment&lt;/a&gt; guide for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] WorkAdventure also provides a &lt;a href=&#34;https://workadventu.re/?utm_source=github&#34;&gt;hosted version&lt;/a&gt; of the application. Using the hosted version is the easiest way to get started and helps us to keep the project alive.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up a development environment&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] These installation instructions are for local development only. They will not work on remote servers as local environments do not have HTTPS certificates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install Docker and clone this repository.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] If you are using Windows, make sure the End-Of-Line character is not modified by the cloning process by setting the &lt;code&gt;core.autocrlf&lt;/code&gt; setting to false: &lt;code&gt;git config --global core.autocrlf false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.template .env&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The environment will start.&lt;/p&gt; &#xA;&lt;p&gt;You should now be able to browse to &lt;a href=&#34;http://play.workadventure.localhost/&#34;&gt;http://play.workadventure.localhost/&lt;/a&gt; and see the application. You can view the Traefik dashboard at &lt;a href=&#34;http://traefik.workadventure.localhost&#34;&gt;http://traefik.workadventure.localhost&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: on some OSes, you will need to add this line to your &lt;code&gt;/etc/hosts&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;/etc/hosts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;127.0.0.1 oidc.workadventure.localhost redis.workadventure.localhost play.workadventure.localhost traefik.workadventure.localhost matrix.workadventure.localhost extra.workadventure.localhost icon.workadventure.localhost map-storage.workadventure.localhost uploader.workadventure.localhost maps.workadventure.localhost api.workadventure.localhost front.workadventure.localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also start WorkAdventure + a test OpenID connect server using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Test user is &#34;User1&#34; and his password is &#34;pwd&#34;)&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/workadventure/workadventure/develop/docs/others/troubleshooting.md&#34;&gt;troubleshooting guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bytebase/dbhub</title>
    <updated>2025-07-31T01:40:23Z</updated>
    <id>tag:github.com,2025-07-31:/bytebase/dbhub</id>
    <link href="https://github.com/bytebase/dbhub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal database MCP server connecting to MySQL, PostgreSQL, SQL Server, MariaDB.&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; Brought to you by &lt;a href=&#34;https://www.bytebase.com/&#34;&gt;Bytebase&lt;/a&gt;, open-source database DevSecOps platform.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dbhub.ai/&#34; target=&#34;_blank&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/bytebase/dbhub/main/resources/images/logo-full.webp&#34; width=&#34;50%&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cursor.com/install-mcp?name=dbhub&amp;amp;config=eyJjb21tYW5kIjoibnB4IEBieXRlYmFzZS9kYmh1YiIsImVudiI6eyJUUkFOU1BPUlQiOiJzdGRpbyIsIkRTTiI6InBvc3RncmVzOi8vdXNlcjpwYXNzd29yZEBsb2NhbGhvc3Q6NTQzMi9kYm5hbWU%2Fc3NsbW9kZT1kaXNhYmxlIiwiUkVBRE9OTFkiOiJ0cnVlIn19&#34;&gt;&lt;img src=&#34;https://cursor.com/deeplink/mcp-install-dark.svg?sanitize=true&#34; alt=&#34;Add dbhub MCP server to Cursor&#34; height=&#34;32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/BjEkZpsJzn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20-Hang%20out%20on%20Discord-5865F2?style=for-the-badge&amp;amp;logo=discord&amp;amp;labelColor=EEEEEE&#34; alt=&#34;Join our Discord&#34; height=&#34;32&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;DBHub is a universal database gateway implementing the Model Context Protocol (MCP) server interface. This gateway allows MCP-compatible clients to connect to and explore different databases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; +------------------+    +--------------+    +------------------+&#xA; |                  |    |              |    |                  |&#xA; |                  |    |              |    |                  |&#xA; |  Claude Desktop  +---&amp;gt;+              +---&amp;gt;+    PostgreSQL    |&#xA; |                  |    |              |    |                  |&#xA; |  Claude Code     +---&amp;gt;+              +---&amp;gt;+    SQL Server    |&#xA; |                  |    |              |    |                  |&#xA; |  Cursor          +---&amp;gt;+    DBHub     +---&amp;gt;+    SQLite        |&#xA; |                  |    |              |    |                  |&#xA; |  Other Clients   +---&amp;gt;+              +---&amp;gt;+    MySQL         |&#xA; |                  |    |              |    |                  |&#xA; |                  |    |              +---&amp;gt;+    MariaDB       |&#xA; |                  |    |              |    |                  |&#xA; |                  |    |              |    |                  |&#xA; +------------------+    +--------------+    +------------------+&#xA;      MCP Clients           MCP Server             Databases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo HTTP Endpoint&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.dbhub.ai/message&#34;&gt;https://demo.dbhub.ai/message&lt;/a&gt; connects a &lt;a href=&#34;https://github.com/bytebase/employee-sample-database&#34;&gt;sample employee database&lt;/a&gt;. You can point Cursor or MCP Inspector to it to see it in action.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/dbhub/main/resources/images/mcp-inspector.webp&#34; alt=&#34;mcp-inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Matrix&lt;/h2&gt; &#xA;&lt;h3&gt;Database Resources&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Resource Name&lt;/th&gt; &#xA;   &lt;th&gt;URI Format&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PostgreSQL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MySQL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MariaDB&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;SQL Server&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;SQLite&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schemas&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;db://schemas&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tables_in_schema&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;db://schemas/{schemaName}/tables&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;table_structure_in_schema&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;db://schemas/{schemaName}/tables/{tableName}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;indexes_in_table&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;db://schemas/{schemaName}/tables/{tableName}/indexes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;procedures_in_schema&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;db://schemas/{schemaName}/procedures&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;procedure_details_in_schema&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;db://schemas/{schemaName}/procedures/{procedureName}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Database Tools&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Command Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PostgreSQL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MySQL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MariaDB&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;SQL Server&lt;/th&gt; &#xA;   &lt;th&gt;SQLite&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Execute SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;execute_sql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute single or multiple SQL statements (separated by semicolons)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Prompt Capabilities&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prompt&lt;/th&gt; &#xA;   &lt;th&gt;Command Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PostgreSQL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MySQL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MariaDB&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;SQL Server&lt;/th&gt; &#xA;   &lt;th&gt;SQLite&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generate SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;generate_sql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Explain DB Elements&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;explain_db&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# PostgreSQL example&#xA;docker run --rm --init \&#xA;   --name dbhub \&#xA;   --publish 8080:8080 \&#xA;   bytebase/dbhub \&#xA;   --transport http \&#xA;   --port 8080 \&#xA;   --dsn &#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Demo mode with sqlite sample employee database&#xA;docker run --rm --init \&#xA;   --name dbhub \&#xA;   --publish 8080:8080 \&#xA;   bytebase/dbhub \&#xA;   --transport http \&#xA;   --port 8080 \&#xA;   --demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NPM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# PostgreSQL example&#xA;npx @bytebase/dbhub --transport http --port 8080 --dsn &#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;&#xA;# Demo mode with sqlite sample employee database&#xA;npx @bytebase/dbhub --transport http --port 8080 --demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Demo mode with sample employee database&#xA;npx @bytebase/dbhub --transport http --port 8080 --demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The demo mode includes a bundled SQLite sample &#34;employee&#34; database with tables for employees, departments, salaries, and more.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Claude Desktop&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/dbhub/main/resources/images/claude-desktop.webp&#34; alt=&#34;claude-desktop&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Claude Desktop only supports &lt;code&gt;stdio&lt;/code&gt; transport &lt;a href=&#34;https://github.com/orgs/modelcontextprotocol/discussions/16&#34;&gt;https://github.com/orgs/modelcontextprotocol/discussions/16&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// claude_desktop_config.json&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;dbhub-postgres-docker&#34;: {&#xA;      &#34;command&#34;: &#34;docker&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;-i&#34;,&#xA;        &#34;--rm&#34;,&#xA;        &#34;bytebase/dbhub&#34;,&#xA;        &#34;--transport&#34;,&#xA;        &#34;stdio&#34;,&#xA;        &#34;--dsn&#34;,&#xA;        // Use host.docker.internal as the host if connecting to the local db&#xA;        &#34;postgres://user:password@host.docker.internal:5432/dbname?sslmode=disable&#34;&#xA;      ]&#xA;    },&#xA;    &#34;dbhub-postgres-npx&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;-y&#34;,&#xA;        &#34;@bytebase/dbhub&#34;,&#xA;        &#34;--transport&#34;,&#xA;        &#34;stdio&#34;,&#xA;        &#34;--dsn&#34;,&#xA;        &#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;      ]&#xA;    },&#xA;    &#34;dbhub-demo&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;-y&#34;, &#34;@bytebase/dbhub&#34;, &#34;--transport&#34;, &#34;stdio&#34;, &#34;--demo&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Claude Code&lt;/h3&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://docs.anthropic.com/en/docs/claude-code/mcp&#34;&gt;https://docs.anthropic.com/en/docs/claude-code/mcp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cursor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cursor.com/install-mcp?name=dbhub&amp;amp;config=eyJjb21tYW5kIjoibnB4IEBieXRlYmFzZS9kYmh1YiIsImVudiI6eyJUUkFOU1BPUlQiOiJzdGRpbyIsIkRTTiI6InBvc3RncmVzOi8vdXNlcjpwYXNzd29yZEBsb2NhbGhvc3Q6NTQzMi9kYm5hbWU%2Fc3NsbW9kZT1kaXNhYmxlIiwiUkVBRE9OTFkiOiJ0cnVlIn19&#34;&gt;&lt;img src=&#34;https://cursor.com/deeplink/mcp-install-dark.svg?sanitize=true&#34; alt=&#34;Install MCP Server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/dbhub/main/resources/images/cursor.webp&#34; alt=&#34;cursor&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cursor supports both &lt;code&gt;stdio&lt;/code&gt; and &lt;code&gt;http&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://docs.cursor.com/context/model-context-protocol&#34;&gt;Cursor MCP guide&lt;/a&gt; and make sure to use &lt;a href=&#34;https://docs.cursor.com/chat/agent&#34;&gt;Agent&lt;/a&gt; mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Read-only Mode&lt;/h3&gt; &#xA;&lt;p&gt;You can run DBHub in read-only mode, which restricts SQL query execution to read-only operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Enable read-only mode&#xA;npx @bytebase/dbhub --readonly --dsn &#34;postgres://user:password@localhost:5432/dbname&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In read-only mode, only &lt;a href=&#34;https://github.com/bytebase/dbhub/raw/main/src/utils/allowed-keywords.ts&#34;&gt;readonly SQL operations&lt;/a&gt; are allowed.&lt;/p&gt; &#xA;&lt;p&gt;This provides an additional layer of security when connecting to production databases.&lt;/p&gt; &#xA;&lt;h3&gt;SSL Connections&lt;/h3&gt; &#xA;&lt;p&gt;You can specify the SSL mode using the &lt;code&gt;sslmode&lt;/code&gt; parameter in your DSN string:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;sslmode=disable&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;sslmode=require&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default SSL Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Certificate verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Certificate verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MariaDB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Certificate verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL Server&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Certificate verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A (file-based)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;SSL Mode Options:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sslmode=disable&lt;/code&gt;: All SSL/TLS encryption is turned off. Data is transmitted in plaintext.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sslmode=require&lt;/code&gt;: Connection is encrypted, but the server&#39;s certificate is not verified. This provides protection against packet sniffing but not against man-in-the-middle attacks. You may use this for trusted self-signed CA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Without specifying &lt;code&gt;sslmode&lt;/code&gt;, most databases default to certificate verification, which provides the highest level of security.&lt;/p&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Disable SSL&#xA;postgres://user:password@localhost:5432/dbname?sslmode=disable&#xA;&#xA;# Require SSL without certificate verification&#xA;postgres://user:password@localhost:5432/dbname?sslmode=require&#xA;&#xA;# Standard SSL with certificate verification (default)&#xA;postgres://user:password@localhost:5432/dbname&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSH Tunnel Support&lt;/h3&gt; &#xA;&lt;p&gt;DBHub supports connecting to databases through SSH tunnels, enabling secure access to databases in private networks or behind firewalls.&lt;/p&gt; &#xA;&lt;h4&gt;Using SSH Config File (Recommended)&lt;/h4&gt; &#xA;&lt;p&gt;DBHub can read SSH connection settings from your &lt;code&gt;~/.ssh/config&lt;/code&gt; file. Simply use the host alias from your SSH config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# If you have this in ~/.ssh/config:&#xA;# Host mybastion&#xA;#   HostName bastion.example.com&#xA;#   User ubuntu&#xA;#   IdentityFile ~/.ssh/id_rsa&#xA;&#xA;npx @bytebase/dbhub \&#xA;  --dsn &#34;postgres://dbuser:dbpass@database.internal:5432/mydb&#34; \&#xA;  --ssh-host mybastion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DBHub will automatically use the settings from your SSH config, including hostname, user, port, and identity file. If no identity file is specified in the config, DBHub will try common default locations (&lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;, &lt;code&gt;~/.ssh/id_ed25519&lt;/code&gt;, etc.).&lt;/p&gt; &#xA;&lt;h4&gt;SSH with Password Authentication&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @bytebase/dbhub \&#xA;  --dsn &#34;postgres://dbuser:dbpass@database.internal:5432/mydb&#34; \&#xA;  --ssh-host bastion.example.com \&#xA;  --ssh-user ubuntu \&#xA;  --ssh-password mypassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SSH with Private Key Authentication&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @bytebase/dbhub \&#xA;  --dsn &#34;postgres://dbuser:dbpass@database.internal:5432/mydb&#34; \&#xA;  --ssh-host bastion.example.com \&#xA;  --ssh-user ubuntu \&#xA;  --ssh-key ~/.ssh/id_rsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SSH with Private Key and Passphrase&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @bytebase/dbhub \&#xA;  --dsn &#34;postgres://dbuser:dbpass@database.internal:5432/mydb&#34; \&#xA;  --ssh-host bastion.example.com \&#xA;  --ssh-port 2222 \&#xA;  --ssh-user ubuntu \&#xA;  --ssh-key ~/.ssh/id_rsa \&#xA;  --ssh-passphrase mykeypassphrase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Environment Variables&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SSH_HOST=bastion.example.com&#xA;export SSH_USER=ubuntu&#xA;export SSH_KEY=~/.ssh/id_rsa&#xA;npx @bytebase/dbhub --dsn &#34;postgres://dbuser:dbpass@database.internal:5432/mydb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When using SSH tunnels, the database host in your DSN should be the hostname/IP as seen from the SSH server (bastion host), not from your local machine.&lt;/p&gt; &#xA;&lt;h3&gt;Configure your database connection&lt;/h3&gt; &#xA;&lt;p&gt;You can use DBHub in demo mode with a sample employee database for testing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @bytebase/dbhub  --demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] If your user/password contains special characters, you need to escape them first. (e.g. &lt;code&gt;pass#word&lt;/code&gt; should be escaped as &lt;code&gt;pass%23word&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For real databases, a Database Source Name (DSN) is required. You can provide this in several ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Command line argument&lt;/strong&gt; (highest priority):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @bytebase/dbhub  --dsn &#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Environment variable&lt;/strong&gt; (second priority):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export DSN=&#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;npx @bytebase/dbhub&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Environment file&lt;/strong&gt; (third priority):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For development: Create &lt;code&gt;.env.local&lt;/code&gt; with your DSN&lt;/li&gt; &#xA;   &lt;li&gt;For production: Create &lt;code&gt;.env&lt;/code&gt; with your DSN&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;DSN=postgres://user:password@localhost:5432/dbname?sslmode=disable&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] When running in Docker, use &lt;code&gt;host.docker.internal&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt; to connect to databases running on your host machine. For example: &lt;code&gt;mysql://user:password@host.docker.internal:3306/dbname&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DBHub supports the following database connection string formats:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th&gt;DSN Format&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mysql://[user]:[password]@[host]:[port]/[database]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mysql://user:password@localhost:3306/dbname?sslmode=disable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MariaDB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mariadb://[user]:[password]@[host]:[port]/[database]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mariadb://user:password@localhost:3306/dbname?sslmode=disable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;postgres://[user]:[password]@[host]:[port]/[database]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;postgres://user:password@localhost:5432/dbname?sslmode=disable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL Server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlserver://[user]:[password]@[host]:[port]/[database]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlserver://user:password@localhost:1433/dbname?sslmode=disable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlite:///[path/to/file]&lt;/code&gt; or &lt;code&gt;sqlite:///:memory:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlite:///path/to/database.db&lt;/code&gt;, &lt;code&gt;sqlite:C:/Users/YourName/data/database.db (windows)&lt;/code&gt; or &lt;code&gt;sqlite:///:memory:&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;SQL Server&lt;/h4&gt; &#xA;&lt;p&gt;Extra query parameters:&lt;/p&gt; &#xA;&lt;h4&gt;authentication&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;authentication=azure-active-directory-access-token&lt;/code&gt;. Only applicable when running from Azure. See &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/developer/javascript/sdk/authentication/credential-chains#use-defaultazurecredential-for-flexibility&#34;&gt;DefaultAzureCredential&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Transport&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;stdio&lt;/strong&gt; (default) - for direct integration with tools like Claude Desktop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @bytebase/dbhub --transport stdio --dsn &#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;http&lt;/strong&gt; - for browser and network clients:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @bytebase/dbhub --transport http --port 5678 --dsn &#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Command line options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Environment Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dsn&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DSN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Database connection string&lt;/td&gt; &#xA;   &lt;td&gt;Required if not in demo mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;transport&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TRANSPORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Transport mode: &lt;code&gt;stdio&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;port&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HTTP server port (only applicable when using &lt;code&gt;--transport=http&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;8080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;readonly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;READONLY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Restrict SQL execution to read-only operations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;demo&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Run in demo mode with sample employee database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ssh-host&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSH_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSH server hostname for tunnel connection&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ssh-port&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSH_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSH server port&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;22&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ssh-user&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSH_USER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSH username&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ssh-password&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSH_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSH password (for password authentication)&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ssh-key&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSH_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to SSH private key file&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ssh-passphrase&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSH_PASSPHRASE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Passphrase for SSH private key&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The demo mode uses an in-memory SQLite database loaded with the &lt;a href=&#34;https://github.com/bytebase/dbhub/tree/main/resources/employee-sqlite&#34;&gt;sample employee database&lt;/a&gt; that includes tables for employees, departments, titles, salaries, department employees, and department managers. The sample database includes SQL scripts for table creation, data loading, and testing.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run in development mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build for production:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm build&#xA;pnpm start --transport stdio --dsn &#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;The project uses Vitest for comprehensive unit and integration testing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;: &lt;code&gt;pnpm test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run tests in watch mode&lt;/strong&gt;: &lt;code&gt;pnpm test:watch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run integration tests&lt;/strong&gt;: &lt;code&gt;pnpm test:integration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integration Tests&lt;/h4&gt; &#xA;&lt;p&gt;DBHub includes comprehensive integration tests for all supported database connectors using &lt;a href=&#34;https://testcontainers.com/&#34;&gt;Testcontainers&lt;/a&gt;. These tests run against real database instances in Docker containers, ensuring full compatibility and feature coverage.&lt;/p&gt; &#xA;&lt;h5&gt;Prerequisites&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;: Ensure Docker is installed and running on your machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker Resources&lt;/strong&gt;: Allocate sufficient memory (recommended: 4GB+) for multiple database containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network Access&lt;/strong&gt;: Ability to pull Docker images from registries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Running Integration Tests&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This command runs all integration tests in parallel, which may take 5-15 minutes depending on your system resources and network speed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run all database integration tests&#xA;pnpm test:integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run only PostgreSQL integration tests&#xA;pnpm test src/connectors/__tests__/postgres.integration.test.ts&#xA;# Run only MySQL integration tests&#xA;pnpm test src/connectors/__tests__/mysql.integration.test.ts&#xA;# Run only MariaDB integration tests&#xA;pnpm test src/connectors/__tests__/mariadb.integration.test.ts&#xA;# Run only SQL Server integration tests&#xA;pnpm test src/connectors/__tests__/sqlserver.integration.test.ts&#xA;# Run only SQLite integration tests&#xA;pnpm test src/connectors/__tests__/sqlite.integration.test.ts&#xA;# Run JSON RPC integration tests&#xA;pnpm test src/__tests__/json-rpc-integration.test.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All integration tests follow these patterns:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Lifecycle&lt;/strong&gt;: Start database container → Connect → Setup test data → Run tests → Cleanup&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shared Test Utilities&lt;/strong&gt;: Common test patterns implemented in &lt;code&gt;IntegrationTestBase&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database-Specific Features&lt;/strong&gt;: Each database includes tests for unique features and capabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: Comprehensive testing of connection errors, invalid SQL, and edge cases&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Troubleshooting Integration Tests&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;Container Startup Issues:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Check Docker is running&#xA;docker ps&#xA;&#xA;# Check available memory&#xA;docker system df&#xA;&#xA;# Pull images manually if needed&#xA;docker pull postgres:15-alpine&#xA;docker pull mysql:8.0&#xA;docker pull mariadb:10.11&#xA;docker pull mcr.microsoft.com/mssql/server:2019-latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQL Server Timeout Issues:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQL Server containers require significant startup time (3-5 minutes)&lt;/li&gt; &#xA; &lt;li&gt;Ensure Docker has sufficient memory allocated (4GB+ recommended)&lt;/li&gt; &#xA; &lt;li&gt;Consider running SQL Server tests separately if experiencing timeouts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Network/Resource Issues:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run tests with verbose output&#xA;pnpm test:integration --reporter=verbose&#xA;&#xA;# Run single database test to isolate issues&#xA;pnpm test:integration -- --testNamePattern=&#34;PostgreSQL&#34;&#xA;&#xA;# Check Docker container logs if tests fail&#xA;docker logs &amp;lt;container_id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pre-commit Hooks (for Developers)&lt;/h4&gt; &#xA;&lt;p&gt;The project includes pre-commit hooks to run tests automatically before each commit:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;After cloning the repository, set up the pre-commit hooks:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/setup-husky.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This ensures the test suite runs automatically whenever you create a commit, preventing commits that would break tests.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Debug with &lt;a href=&#34;https://github.com/modelcontextprotocol/inspector&#34;&gt;MCP Inspector&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;stdio&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# PostgreSQL example&#xA;TRANSPORT=stdio DSN=&#34;postgres://user:password@localhost:5432/dbname?sslmode=disable&#34; npx @modelcontextprotocol/inspector node /path/to/dbhub/dist/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HTTP&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start DBHub with HTTP transport&#xA;pnpm dev --transport=http --port=8080&#xA;&#xA;# Start the MCP Inspector in another terminal&#xA;npx @modelcontextprotocol/inspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to the DBHub server &lt;code&gt;/message&lt;/code&gt; endpoint&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/bytebase/dbhub/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=bytebase/dbhub&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#bytebase/dbhub&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=bytebase/dbhub&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>