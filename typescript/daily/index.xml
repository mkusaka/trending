<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-07T01:38:46Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sidestream-tech/sidebase</title>
    <updated>2022-09-07T01:38:46Z</updated>
    <id>tag:github.com,2022-09-07:/sidestream-tech/sidebase</id>
    <link href="https://github.com/sidestream-tech/sidebase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Production-tested Nuxt 3 starter with a well-working, opinionated configuration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/.github/sidebase.png&#34; alt=&#34;sidebase&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;sidebase&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With &lt;strong&gt;sidebase&lt;/strong&gt; every new project feel like a fun side-project while scaling to production.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;sidebase is a modern, best-practice, batteries-included fullstack-app starter based on Nuxt 3 and TypeScript.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/sidestream-tech/sidebase my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go into the &lt;code&gt;app/&lt;/code&gt; directory &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd my-app/app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the dependencies &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start developing (with database, backend, API, ... running) at &lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üéí &lt;strong&gt;Fullstack&lt;/strong&gt;: Develop frontend and backend in a single TypeScript code base &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fullstack &lt;a href=&#34;https://vuejs.org/&#34;&gt;&lt;code&gt;Vue 3&lt;/code&gt;&lt;/a&gt; + &lt;a href=&#34;https://v3.nuxtjs.org/&#34;&gt;&lt;code&gt;Nuxt 3 RC.9&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Data base models, migrations, queries and easy DB-switching via &lt;a href=&#34;https://typeorm.io/&#34;&gt;&lt;code&gt;TypeORM&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Frontend- and Backend data-transformation via &lt;a href=&#34;https://www.npmjs.com/package/@sidestream-tech/nuxt-sidebase-parse&#34;&gt;&lt;code&gt;nuxt-sidebase-parse&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/colinhacks/zod&#34;&gt;&lt;code&gt;zod&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;In-memory development SQL-database via &lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Linting via &lt;a href=&#34;https://eslint.org/&#34;&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Test management, Test UI, component snapshotting via &lt;a href=&#34;https://vitest.dev/&#34;&gt;&lt;code&gt;vitest&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Component tests via &lt;a href=&#34;https://testing-library.com/&#34;&gt;&lt;code&gt;test-library/vue&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;API tests via &lt;a href=&#34;https://github.com/visionmedia/supertest&#34;&gt;&lt;code&gt;supertest&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Code coverage via &lt;a href=&#34;https://github.com/bcoe/c8&#34;&gt;&lt;code&gt;c8&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Component stories via &lt;a href=&#34;https://histoire.dev/&#34;&gt;&lt;code&gt;histoire&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;CSS utiltities via &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;&lt;code&gt;TailwindCSS&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;CSS components via &lt;a href=&#34;https://antdv.com/components/overview&#34;&gt;&lt;code&gt;Ant Design Vue&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;Type checking in script and template via &lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;&lt;code&gt;Volar / vue-tsc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üèéÔ∏è &lt;strong&gt;Fast to code&lt;/strong&gt;: Database, example tests, example components and example pages are all there for you to fill out&lt;/li&gt; &#xA; &lt;li&gt;üêõ &lt;strong&gt;Fewer bugs&lt;/strong&gt;: Strong data-validation using &lt;code&gt;zod&lt;/code&gt; to validate all transferred data, fully typed API-routes, strict DB models via &lt;code&gt;TypeORM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;üòä &lt;strong&gt;Easy to use&lt;/strong&gt;: Designed to follow best practices and to be ready-to-go for development, without additional dev-dependencies like &lt;code&gt;docker&lt;/code&gt; that make it hard to get started&lt;/li&gt; &#xA; &lt;li&gt;üöÄ &lt;strong&gt;Ready for launch&lt;/strong&gt;: Github Actions CI, Dockerfile, easy switch to most popular SQL-databases are all there, out of the box (&lt;a href=&#34;https://github.com/sidestream-tech/sidebase/issues/new/choose&#34;&gt;get in touch if you&#39;re missing something&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Have fun&lt;/strong&gt;, as &lt;a href=&#34;https://github.com/Atinux&#34;&gt;Atinux, CEO of Nuxt&lt;/a&gt; said:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Beautiful work on Sidebase!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To facilitate this &lt;code&gt;sidebase&lt;/code&gt; bootstraps a nuxt 3 project that permits developing a backend and a frontend using just Nuxt 3 with overarching TypeScript support. We want to show the world how enjoyable end-to-end typescript programming can be, displacing the myth that JS/TS-backends are no good. This starter solves a lot fo the &#34;real-world&#34; problems that occur after you start using Nuxt or any other framework: How to write backend tests? How to write component tests? How to calculate test coverage? How to integrate a database? How to build a docker image? ...?&lt;/p&gt; &#xA;&lt;p&gt;If you have any problems with this project (e.g., setting it up on your PC) &lt;a href=&#34;https://github.com/sidestream-tech/sidebase/issues/new/choose&#34;&gt;open an issue&lt;/a&gt; and we&#39;ll figure it out together with you üéâ&lt;/p&gt; &#xA;&lt;h2&gt;Commands and Further Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run story&lt;/code&gt; for isolated component development using &lt;code&gt;histoire&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/app/components/example/ShowCase.story.vue&#34;&gt;&lt;code&gt;ShowCase.story.vue&lt;/code&gt;&lt;/a&gt; as example)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test&lt;/code&gt; for testing (see &lt;a href=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/app/components/example/ShowCase.test.ts&#34;&gt;&lt;code&gt;ShowCase.test.ts&lt;/code&gt;&lt;/a&gt; as example) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test -- -u&lt;/code&gt; to update the component snapshots&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test -- -t &#34;test describe text&#34;&lt;/code&gt; to run a specific test&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test:ui&lt;/code&gt; to start the &lt;a href=&#34;https://vitest.dev/guide/ui.html&#34;&gt;vitest UI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run lint&lt;/code&gt; for linting using &lt;code&gt;eslint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt; for bundling using &lt;code&gt;vite&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have a look at the more detailed &lt;a href=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/app/README.md&#34;&gt;readme of the fullstack app&lt;/a&gt; to see a broader, more in-depth explanation and documentation of commands.&lt;/p&gt; &#xA;&lt;h3&gt;Guides&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://www.npmjs.com/package/@sidestream-tech/nuxt-sidebase-parse&#34;&gt;&lt;code&gt;nuxt-sidestream-parse&lt;/code&gt;&lt;/a&gt; to validate and deserialize data from the &lt;code&gt;server&lt;/code&gt; in the &lt;code&gt;frontend&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Define a zod-schema for the response of your endpoint, &lt;a href=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/app/server/schemas/healthz.ts&#34;&gt;like so&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// file: ~/server/schemas/healthz.ts&#xA;import { z } from &#39;@sidestream-tech/nuxt-sidebase-parse&#39;&#xA;import { transformStringToDate } from &#39;./helpers&#39;&#xA;&#xA;export const responseSchemaHealthCheck = z.object({&#xA;    status: z.literal(&#39;healthy&#39;),&#xA;    time: z.string().transform(transformStringToDate),&#xA;    nuxtAppVersion: z.string(),&#xA;})&#xA;&#xA;export type ResponseHealthcheck = z.infer&amp;lt;typeof responseSchemaHealthCheck&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Define an endpoint that returns complex data (e.g.: date-objects), &lt;a href=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/app/server/api/healthz.get.ts&#34;&gt;like so&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// file: ~/server/api/healthz.get.ts&#xA;import { defineEventHandler } from &#39;h3&#39;&#xA;import type { ResponseHealthcheck } from &#39;~/server/schemas/healthz&#39;&#xA;&#xA;const startupTime = new Date()&#xA;export default defineEventHandler((): ResponseHealthcheck =&amp;gt; {&#xA;    return {&#xA;        status: &#39;healthy&#39;,&#xA;        time: new Date(),&#xA;        nuxtAppVersion: process.env.NUXT_APP_VERSION || &#39;unknown&#39;,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Call it from the frontend, get free data validation, derserialization (e.g.: string-date is transformed to &lt;code&gt;Date&lt;/code&gt; object) and typing, &lt;a href=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/app/pages/index.vue&#34;&gt;like so&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// file: ~/pages/index.vue&#xA;import { makeParser } from &#39;@sidestream-tech/nuxt-sidebase-parse&#39;&#xA;import { responseSchemaHealthCheck } from &#39;~/server/schemas/healthz&#39;&#xA;&#xA;const transform = makeParser(responseSchemaHealthCheck)&#xA;const { data, refresh, error } = await useFetch(&#39;/api/healthz&#39;, { transform })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;That&#39;s it! &lt;code&gt;data&lt;/code&gt; will be fully typed AND all data inside will be de-serialized, so &lt;code&gt;time&lt;/code&gt; will be a &lt;code&gt;Date&lt;/code&gt;-object, and not a string, that you first need to deserialize&lt;/li&gt; &#xA;   &lt;li&gt;If an &lt;code&gt;error&lt;/code&gt; is thrown, it&#39;s done using nuxt &lt;a href=&#34;https://v3.nuxtjs.org/api/utils/create-error/&#34;&gt;&lt;code&gt;createError&lt;/code&gt;&lt;/a&gt;, so it works well in frontend and on the server. &lt;code&gt;data&lt;/code&gt; will be null in that case. You can find zod-details about your error in &lt;code&gt;error.data&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://www.npmjs.com/package/@sidestream-tech/nuxt-sidebase-parse&#34;&gt;&lt;code&gt;nuxt-sidestream-parse&lt;/code&gt;&lt;/a&gt; to validate data that the user has passed to your API endpoint: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parse user data like this: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { defineEventHandler } from &#39;h3&#39;&#xA;import type { CompatibilityEvent } from &#39;h3&#39;&#xA;import { parseBodyAs, z } from &#39;@sidestream-tech/nuxt-sidebase-parse&#39;&#xA;&#xA;export default defineEventHandler(async (event: CompatibilityEvent) =&amp;gt; {&#xA;    // Parse the payload using the update schema. The parsing is important to avoid bad, incorrect or malicious data coming in&#xA;    const payload = await parseBodyAs(event, z.object({&#xA;        requestId: z.string().uuid(),&#xA;        pleaseDoubleThisNumber: z.number()&#xA;    }))&#xA;&#xA;    return {&#xA;        requestId: payload.requestId,&#xA;        doubledNumber: 2 * payload.pleaseDoubleThisNumber&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Other helpers like &lt;code&gt;parseQueryAs&lt;/code&gt;, &lt;code&gt;parseCookiesAs&lt;/code&gt;, &lt;code&gt;parseParamsAs&lt;/code&gt;, ... are defined in &lt;code&gt;@sidestream-tech/nuxt-sidebase-parse&lt;/code&gt;. See a bigger &lt;a href=&#34;https://raw.githubusercontent.com/sidestream-tech/sidebase/main/app/server/api/example/%5Bid%5D.patch.ts&#34;&gt;example here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>hediet/vscode-drawio</title>
    <updated>2022-09-07T01:38:46Z</updated>
    <id>tag:github.com,2022-09-07:/hediet/vscode-drawio</id>
    <link href="https://github.com/hediet/vscode-drawio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This unofficial extension integrates Draw.io (also known as diagrams.net) into VS Code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Draw.io VS Code Integration&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/hediet&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;label=Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&amp;amp;color&amp;amp;link=%3Curl%3E&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ZP5F38L4C88UY&amp;amp;source=url&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;label=Donate&amp;amp;message=%E2%9D%A4&amp;amp;logo=Paypal&amp;amp;color&amp;amp;link=%3Curl%3E&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=hediet_dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/hediet_dev.svg?style=social&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This unofficial extension integrates &lt;a href=&#34;https://app.diagrams.net/&#34;&gt;Draw.io&lt;/a&gt; (also known as &lt;a href=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/diagrams.net&#34;&gt;diagrams.net&lt;/a&gt;) into VS Code.&lt;br&gt; Mentioned in the official diagrams.net &lt;a href=&#34;https://www.diagrams.net/blog/embed-diagrams-vscode&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;.drawio&lt;/code&gt;, &lt;code&gt;.dio&lt;/code&gt;, &lt;code&gt;.drawio.svg&lt;/code&gt; or &lt;code&gt;.drawio.png&lt;/code&gt; files in the Draw.io editor. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To create a new diagram, simply create an empty &lt;code&gt;*.drawio&lt;/code&gt;, &lt;code&gt;*.drawio.svg&lt;/code&gt; or &lt;code&gt;*.drawio.png&lt;/code&gt; file and open it.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.drawio.svg&lt;/code&gt; are valid &lt;code&gt;.svg&lt;/code&gt; files that can be embedded in Github readme files! No export needed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.drawio.png&lt;/code&gt; are valid &lt;code&gt;.png&lt;/code&gt; files! No export needed. You should use &lt;code&gt;.svg&lt;/code&gt; though whenever possible - they look much better!&lt;/li&gt; &#xA;   &lt;li&gt;To convert between different formats, use the &lt;code&gt;Draw.io: Convert To...&lt;/code&gt; command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Uses an offline version of Draw.io by default.&lt;/li&gt; &#xA; &lt;li&gt;Multiple Draw.io themes are available.&lt;/li&gt; &#xA; &lt;li&gt;Use Liveshare to collaboratively edit a diagram with others.&lt;/li&gt; &#xA; &lt;li&gt;Nodes/edges can be linked with code spans.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Like it so far? You might also like my &lt;a href=&#34;https://github.com/hediet/chrome-ext-github-monaco&#34;&gt;open source&lt;/a&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/monaco-markdown-editor-fo/mmpbdjdnmhgkpligeniippcgfmkgkpnf&#34;&gt;Chrome extension that enhances the Github markdown editor&lt;/a&gt;!&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Editing .drawio.svg/.drawio.png Files&lt;/h2&gt; &#xA;&lt;p&gt;You can directly edit and save &lt;code&gt;.drawio.svg&lt;/code&gt; and &lt;code&gt;.drawio.png&lt;/code&gt; files. These files are perfectly valid svg/png-images that contain an embedded Draw.io diagram. Whenever you edit such a file, the svg/png part of that file is kept up to date.&lt;/p&gt; &#xA;&lt;p&gt;The logo of this extension is such a &lt;code&gt;.drawio.png&lt;/code&gt; file that has been created with the extension itself!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/drawio-png.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If diffs are important for you, you should prefer &lt;code&gt;.drawio&lt;/code&gt; and avoid &lt;code&gt;.drawio.png&lt;/code&gt; diagrams.&lt;/p&gt; &#xA;&lt;h2&gt;Collaboratively Edit Or Present Diagrams&lt;/h2&gt; &#xA;&lt;p&gt;With version 1.0 of this extension, extensive support for &lt;a href=&#34;https://visualstudio.microsoft.com/de/services/live-share/&#34;&gt;VS Code Liveshare&lt;/a&gt; has been added. You can now edit or present your Draw.io diagrams remotely, while seeing each participant&#39;s cursor and selection! This can be used for discussing, reviewing or brainstorming diagrams. With Draw.io&#39;s freehand drawing tool and integrated LaTeX support, this extension becomes an advanced whiteboard solution that can be used for remote code interviews!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/liveshare-demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Internally, this extension synchronizes Draw.io diagrams with text documents. These text documents are shared by Liveshare. As Liveshare has no understanding of the text, modification conflicts might occur on simultaneous modifications.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code Link Feature&lt;/h2&gt; &#xA;&lt;p&gt;In the status bar, you can enable or disable the code link feature. If it is enabled and you double click on a node whose label starts with &lt;code&gt;#&lt;/code&gt;, you will perform a workspace search for a symbol matching the rest of the label.&lt;/p&gt; &#xA;&lt;p&gt;If you have a node labeled &lt;code&gt;#MyClass&lt;/code&gt; and a class of name &lt;code&gt;MyClass&lt;/code&gt;, you will jump to its source if you double click the node!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note that you have to open at least one file of the project that contains the symbol.&lt;/strong&gt; Otherwise, VS Code will not consider this project when searching for symbols. This file itself does not have to contain the symbol though.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to my latest github sponsors, this feature is open source and freely available now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP&lt;/em&gt;: If you open the draw.io editor to the right side (i.e. the second editor column) and navigate to a symbol, the diagram will stay visible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/demo-code-link.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Available Draw.io Themes&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;!-- Please use HTML syntax here so that it works for Github and mkdocs --&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;p&gt;Theme &#34;atlas&#34;&lt;/p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/theme-atlas.png&#34; alt=&#34;atlas&#34; width=&#34;800&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;p&gt;Theme &#34;Kennedy&#34;&lt;/p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/theme-Kennedy.png&#34; alt=&#34;Kennedy&#34; width=&#34;800&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;p&gt;Theme &#34;min&#34;&lt;/p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/theme-min.png&#34; alt=&#34;min&#34; width=&#34;800&#34; &lt; li&gt; &lt;/li&gt;&#xA;  &lt;li&gt;&lt;p&gt;Theme &#34;dark&#34;&lt;/p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/theme-dark.png&#34; alt=&#34;dark&#34; width=&#34;800&#34;&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Associate &lt;code&gt;.svg&lt;/code&gt; Files With The Draw.io Editor&lt;/h2&gt; &#xA;&lt;p&gt;By default, this extension only handles &lt;code&gt;*.drawio.svg&lt;/code&gt; files. Add this to your VS Code &lt;code&gt;settings.json&lt;/code&gt; file if you want to associate it with &lt;code&gt;.svg&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;workbench.editorAssociations&#34;: {&#xA;    &#34;*.svg&#34;: &#34;hediet.vscode-drawio-text&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You won&#39;t be able to edit arbitrary SVG files though - only those that have been created with Draw.io or this extension!&lt;/p&gt; &#xA;&lt;h2&gt;Editing the Diagram and its XML Side by Side&lt;/h2&gt; &#xA;&lt;p&gt;You can open the same &lt;code&gt;*.drawio&lt;/code&gt; file with the Draw.io editor and as xml file. They are synchronized, so you can switch between them as you like it. This is super practical if you want to use find/replace to rename text or other features of VS Code to speed up your diagram creation/edit process. Use the &lt;code&gt;View: Reopen Editor With...&lt;/code&gt; command to toggle between the text or the Draw.io editor. You can open multiple editors for the same file. This does not make much sense for SVG files though, as the draw.io diagram is stored in its metadata.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hediet/vscode-drawio/master/docs/drawio-xml.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Henning Dieterichs, &lt;a href=&#34;https://github.com/hediet&#34;&gt;hediet&lt;/a&gt; on Github (Main Contributor / Author)&lt;/li&gt; &#xA; &lt;li&gt;Vincent Rouill√©, &lt;a href=&#34;https://github.com/Speedy37&#34;&gt;Speedy37&lt;/a&gt; on Github&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See Also / Similar Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.diagrams.net/&#34;&gt;Draw.io&lt;/a&gt; - This extension relies on the giant work of Draw.io. Their embedding feature enables this extension! This extension bundles a recent version of Draw.io.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eightHundreds/vscode-drawio&#34;&gt;vscode-drawio&lt;/a&gt; by eightHundreds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Cool Extensions&lt;/h2&gt; &#xA;&lt;p&gt;If you like this extension, you might like &lt;a href=&#34;https://marketplace.visualstudio.com/search?term=henning%20dieterichs&amp;amp;target=VSCode&#34;&gt;my other extensions&lt;/a&gt; too:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=hediet.debug-visualizer&#34;&gt;Debug Visualizer&lt;/a&gt;&lt;/strong&gt;: An extension for visualizing data structures while debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=hediet.realtime-debugging&#34;&gt;Real-Time Debugging&lt;/a&gt;&lt;/strong&gt;: This extension visualizes how your code is being executed.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>konvajs/konva</title>
    <updated>2022-09-07T01:38:46Z</updated>
    <id>tag:github.com,2022-09-07:/konvajs/konva</id>
    <link href="https://github.com/konvajs/konva" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Konva.js is an HTML5 Canvas JavaScript framework that extends the 2d context by enabling canvas interactivity for desktop and mobile applications.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://konvajs.org/android-chrome-192x192.png&#34; alt=&#34;Konva logo&#34; height=&#34;180&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Konva&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/konva&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/all/badge.svg?label=financial+contributors&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/js/konva&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/konva.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/konvajs/konva/actions/workflows/test-browser.ym&#34;&gt;&lt;img src=&#34;https://github.com/konvajs/konva/actions/workflows/test-browser.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/konvajs/konva/actions/workflows/test-node.ym&#34;&gt;&lt;img src=&#34;https://github.com/konvajs/konva/actions/workflows/test-node.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://cdnjs.com/libraries/konva&#34;&gt;&lt;img src=&#34;https://img.shields.io/cdnjs/v/konva.svg?sanitize=true&#34; alt=&#34;CDNJS version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Konva is an HTML5 Canvas JavaScript framework that enables high performance animations, transitions, node nesting, layering, filtering, caching, event handling for desktop and mobile applications, and much more.&lt;/p&gt; &#xA;&lt;p&gt;You can draw things onto the stage, add event listeners to them, move them, scale them, and rotate them independently from other shapes to support high performance animations, even if your application uses thousands of shapes. Served hot with a side of awesomeness.&lt;/p&gt; &#xA;&lt;p&gt;This repository began as a GitHub fork of &lt;a href=&#34;https://github.com/ericdrowell/KineticJS&#34;&gt;ericdrowell/KineticJS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visit:&lt;/strong&gt; The &lt;a href=&#34;http://konvajs.org/&#34;&gt;Home Page&lt;/a&gt; and follow on &lt;a href=&#34;https://twitter.com/lavrton&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Discover:&lt;/strong&gt; &lt;a href=&#34;http://konvajs.org/docs&#34;&gt;Tutorials&lt;/a&gt;, &lt;a href=&#34;http://konvajs.org/api&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Help:&lt;/strong&gt; &lt;a href=&#34;http://stackoverflow.com/questions/tagged/konvajs&#34;&gt;StackOverflow&lt;/a&gt;, &lt;a href=&#34;https://discord.gg/8FqZwVT&#34;&gt;Discord Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Quick Look&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/konva@8/konva.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;div id=&#34;container&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  var stage = new Konva.Stage({&#xA;    container: &#39;container&#39;,&#xA;    width: window.innerWidth,&#xA;    height: window.innerHeight,&#xA;  });&#xA;&#xA;  // add canvas element&#xA;  var layer = new Konva.Layer();&#xA;  stage.add(layer);&#xA;&#xA;  // create shape&#xA;  var box = new Konva.Rect({&#xA;    x: 50,&#xA;    y: 50,&#xA;    width: 100,&#xA;    height: 50,&#xA;    fill: &#39;#00D2FF&#39;,&#xA;    stroke: &#39;black&#39;,&#xA;    strokeWidth: 4,&#xA;    draggable: true,&#xA;  });&#xA;  layer.add(box);&#xA;&#xA;  // add cursor styling&#xA;  box.on(&#39;mouseover&#39;, function () {&#xA;    document.body.style.cursor = &#39;pointer&#39;;&#xA;  });&#xA;  box.on(&#39;mouseout&#39;, function () {&#xA;    document.body.style.cursor = &#39;default&#39;;&#xA;  });&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Browsers support&lt;/h1&gt; &#xA;&lt;p&gt;Konva works in all modern mobile and desktop browsers. A browser need to be capable to run javascript code from ES2015 spec. For older browsers you may need polyfills for missing functions.&lt;/p&gt; &#xA;&lt;p&gt;At the current moment &lt;code&gt;Konva&lt;/code&gt; doesn&#39;t work in IE11 directly. To make it work you just need to provide some polyfills such as &lt;code&gt;Array.prototype.find&lt;/code&gt;, &lt;code&gt;String.prototype.trimLeft&lt;/code&gt;, &lt;code&gt;String.prototype.trimRight&lt;/code&gt;, &lt;code&gt;Array.from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Loading and installing Konva&lt;/h1&gt; &#xA;&lt;p&gt;Konva supports UMD loading. So you can use all possible variants to load the framework into your project:&lt;/p&gt; &#xA;&lt;h3&gt;Load Konva via classical &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag from CDN:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/konva@8/konva.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install with npm:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install konva --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// The modern way (e.g. an ES6-style import for webpack, parcel)&#xA;import Konva from &#39;konva&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Typescript usage&lt;/h4&gt; &#xA;&lt;p&gt;Add DOM definitions into your &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;lib&#34;: [&#xA;        &#34;es6&#34;,&#xA;        &#34;dom&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3 Minimal bundle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import Konva from &#39;konva/lib/Core&#39;;&#xA;// Now you have a Konva object with Stage, Layer, FastLayer, Group, Shape and some additional utils function.&#xA;// Also core currently already have support for drag&amp;amp;drop and animations.&#xA;// BUT there are no shapes (rect, circle, etc), no filters.&#xA;&#xA;// but you can simply add anything you need:&#xA;import { Rect } from &#39;konva/lib/shapes/Rect&#39;;&#xA;// importing a shape will automatically inject it into Konva object&#xA;&#xA;var rect1 = new Rect();&#xA;// or:&#xA;var shape = new Konva.Rect();&#xA;&#xA;// for filters you can use this:&#xA;import { Blur } from &#39;konva/lib/filters/Blur&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4 NodeJS env&lt;/h3&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;konva&lt;/code&gt; in nodejs environment you also need to install &lt;code&gt;canvas&lt;/code&gt; package manually. Konva will use it for 2d canvas API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install konva canvas&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use the same Konva API and all Konva demos will work just fine. You just don&#39;t need to use &lt;code&gt;container&lt;/code&gt; attribute in your stage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Konva from &#39;konva&#39;;&#xA;&#xA;const stage = new Konva.Stage({&#xA;  width: 500,&#xA;  height: 500,&#xA;});&#xA;// then all regular Konva code will work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CommonJS modules&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;Konva&lt;/code&gt; is delivered as ES modules. Some environments may automatically take CommonJS version of &lt;code&gt;Konva&lt;/code&gt;. If it doesn&#39;t work for you, try to use &lt;code&gt;cmj&lt;/code&gt; version explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Konva = require(&#39;konva/cmj&#39;).default;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Backers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/99720652?s=200&amp;amp;v=4&#34; alt=&#34;https://simpleshow.com&#34; title=&#34;https://simpleshow.com&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/80046841?s=200&amp;amp;v=4&#34; alt=&#34;https://www.notably.ai/&#34; title=&#34;https://www.notably.ai/&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.myposter.de/&#34;&gt;myposter GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://queue.gg/&#34;&gt;queue.gg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Change log&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/konvajs/konva/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Konva Framework&lt;/h2&gt; &#xA;&lt;p&gt;To make a full build run &lt;code&gt;npm run build&lt;/code&gt;. The command will compile all typescript files, combine then into one bundle and run minifier.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Konva uses Mocha for testing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you need run test only one time run &lt;code&gt;npm run test&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;While developing it is easy to use &lt;code&gt;npm start&lt;/code&gt;. Just run it and go to &lt;a href=&#34;http://localhost:8080/test/runner.html&#34;&gt;http://localhost:8080/test/runner.html&lt;/a&gt;. The watcher will rebuild the bundle on any change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Konva is covered with hundreds of tests and well over a thousand assertions. Konva uses TDD (test driven development) which means that every new feature or bug fix is accompanied with at least one new test.&lt;/p&gt; &#xA;&lt;h2&gt;Generate documentation&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;npx gulp api&lt;/code&gt; which will build the documentation files and place them in the &lt;code&gt;api&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h1&gt;Pull Requests&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;d be happy to review any pull requests that may better the Konva project, in particular if you have a bug fix, enhancement, or a new shape (see &lt;code&gt;src/shapes&lt;/code&gt; for examples). Before doing so, please first make sure that all of the tests pass (&lt;code&gt;gulp lint test&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://opencollective.com/konva/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Individuals&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/konva&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Organizations&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/konva/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/konva/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/konva/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/konva/organization/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>