<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-18T01:36:48Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Flux159/mcp-server-kubernetes</title>
    <updated>2025-05-18T01:36:48Z</updated>
    <id>tag:github.com,2025-05-18:/Flux159/mcp-server-kubernetes</id>
    <link href="https://github.com/Flux159/mcp-server-kubernetes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP Server for kubernetes management commands&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Server Kubernetes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yourusername/mcp-server-kubernetes/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Flux159/mcp-server-kubernetes/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yourusername/mcp-server-kubernetes&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/Flux159/mcp-server-kubernetes&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bun.sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/runtime-bun-orange&#34; alt=&#34;Bun&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kubernetes.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kubernetes-%23326ce5.svg?style=flat&amp;amp;logo=kubernetes&amp;amp;logoColor=white&#34; alt=&#34;Kubernetes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.docker.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docker-%230db7ed.svg?style=flat&amp;amp;logo=docker&amp;amp;logoColor=white&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flux159/mcp-server-kubernetes/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Flux159/mcp-server-kubernetes&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flux159/mcp-server-kubernetes/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Flux159/mcp-server-kubernetes&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flux159/mcp-server-kubernetes/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Flux159/mcp-server-kubernetes/commits/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/Flux159/mcp-server-kubernetes&#34; alt=&#34;Last Commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://smithery.ai/protocol/mcp-server-kubernetes&#34;&gt;&lt;img src=&#34;https://smithery.ai/badge/mcp-server-kubernetes&#34; alt=&#34;smithery badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MCP Server that can connect to a Kubernetes cluster and manage it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/f25f8f4e-4d04-479b-9ae0-5dac452dd2ed&#34;&gt;https://github.com/user-attachments/assets/f25f8f4e-4d04-479b-9ae0-5dac452dd2ed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://glama.ai/mcp/servers/w71ieamqrt&#34;&gt;&lt;img width=&#34;380&#34; height=&#34;200&#34; src=&#34;https://glama.ai/mcp/servers/w71ieamqrt/badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage with Claude Desktop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;kubernetes&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;mcp-server-kubernetes&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will automatically connect to your current kubectl context. Make sure you have:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;kubectl installed and in your PATH&lt;/li&gt; &#xA; &lt;li&gt;A valid kubeconfig file with contexts configured&lt;/li&gt; &#xA; &lt;li&gt;Access to a Kubernetes cluster configured for kubectl (e.g. minikube, Rancher Desktop, GKE, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Helm v3 installed and in your PATH (no Tiller required). Optional if you don&#39;t plan to use Helm.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can verify your connection by asking Claude to list your pods or create a test deployment.&lt;/p&gt; &#xA;&lt;p&gt;If you have errors open up a standard terminal and run &lt;code&gt;kubectl get pods&lt;/code&gt; to see if you can connect to your cluster without credentials issues.&lt;/p&gt; &#xA;&lt;h2&gt;Usage with mcp-chat&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Flux159/mcp-chat&#34;&gt;mcp-chat&lt;/a&gt; is a CLI chat client for MCP servers. You can use it to interact with the Kubernetes server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx mcp-chat --server &#34;npx mcp-server-kubernetes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, pass it your existing Claude Desktop configuration file from above (Linux should pass the correct path to config):&lt;/p&gt; &#xA;&lt;p&gt;Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx mcp-chat --config &#34;~/Library/Application Support/Claude/claude_desktop_config.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx mcp-chat --config &#34;%APPDATA%\Claude\claude_desktop_config.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Connect to a Kubernetes cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List all pods, services, deployments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List, Describe nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create, describe, delete a pod&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List all namespaces, create a namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create custom pod &amp;amp; deployment configs, update deployment replicas&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create, describe, delete, update a service&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create, get, update, delete a ConfigMap&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get logs from a pod for debugging (supports pods, deployments, jobs, and label selectors)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support Helm v3 for installing charts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install charts with custom values&lt;/li&gt; &#xA;   &lt;li&gt;Uninstall releases&lt;/li&gt; &#xA;   &lt;li&gt;Upgrade existing releases&lt;/li&gt; &#xA;   &lt;li&gt;Support for namespaces&lt;/li&gt; &#xA;   &lt;li&gt;Support for version specification&lt;/li&gt; &#xA;   &lt;li&gt;Support for custom repositories&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; kubectl explain and kubectl api-resources support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get Kubernetes events from the cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Port forward to a pod or service&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create, list, and decribe cronjobs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Non-destructive mode for read and create/update-only access to clusters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;p&gt;Make sure that you have &lt;a href=&#34;https://bun.sh/docs/installation&#34;&gt;bun installed&lt;/a&gt;. Clone the repo &amp;amp; install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Flux159/mcp-server-kubernetes.git&#xA;cd mcp-server-kubernetes&#xA;bun install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development Workflow&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the server in development mode (watches for file changes):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run unit tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Build the project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Local Testing with &lt;a href=&#34;https://github.com/modelcontextprotocol/inspector&#34;&gt;Inspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/inspector node dist/index.js&#xA;# Follow further instructions on terminal for Inspector link&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Local testing with Claude Desktop&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mcp-server-kubernetes&#34;: {&#xA;      &#34;command&#34;: &#34;node&#34;,&#xA;      &#34;args&#34;: [&#34;/path/to/your/mcp-server-kubernetes/dist/index.js&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Local testing with &lt;a href=&#34;https://github.com/Flux159/mcp-chat&#34;&gt;mcp-chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Flux159/mcp-server-kubernetes/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Additional Advanced Features&lt;/h3&gt; &#xA;&lt;p&gt;For more advanced information like using SSE transport, Non-destructive mode with &lt;code&gt;ALLOW_ONLY_NON_DESTRUCTIVE_TOOLS&lt;/code&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/Flux159/mcp-server-kubernetes/main/ADVANCED_README.md&#34;&gt;ADVANCED_README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;See this &lt;a href=&#34;https://deepwiki.com/Flux159/mcp-server-kubernetes&#34;&gt;DeepWiki link&lt;/a&gt; for a more indepth architecture overview created by Devin.&lt;/p&gt; &#xA;&lt;p&gt;This section describes the high-level architecture of the MCP Kubernetes server.&lt;/p&gt; &#xA;&lt;h3&gt;Request Flow&lt;/h3&gt; &#xA;&lt;p&gt;The sequence diagram below illustrates how requests flow through the system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;    participant Client&#xA;    participant Transport as StdioTransport&#xA;    participant Server as MCP Server&#xA;    participant Handler as Request Handler&#xA;    participant K8sManager as KubernetesManager&#xA;    participant K8s as Kubernetes API&#xA;&#xA;    Client-&amp;gt;&amp;gt;Transport: Send Request via STDIO&#xA;    Transport-&amp;gt;&amp;gt;Server: Forward Request&#xA;&#xA;    alt Tools Request&#xA;        Server-&amp;gt;&amp;gt;Handler: Route to tools handler&#xA;        Handler-&amp;gt;&amp;gt;K8sManager: Execute tool operation&#xA;        K8sManager-&amp;gt;&amp;gt;K8s: Make API call&#xA;        K8s--&amp;gt;&amp;gt;K8sManager: Return result&#xA;        K8sManager--&amp;gt;&amp;gt;Handler: Process response&#xA;        Handler--&amp;gt;&amp;gt;Server: Return tool result&#xA;    else Resource Request&#xA;        Server-&amp;gt;&amp;gt;Handler: Route to resource handler&#xA;        Handler-&amp;gt;&amp;gt;K8sManager: Get resource data&#xA;        K8sManager-&amp;gt;&amp;gt;K8s: Query API&#xA;        K8s--&amp;gt;&amp;gt;K8sManager: Return data&#xA;        K8sManager--&amp;gt;&amp;gt;Handler: Format response&#xA;        Handler--&amp;gt;&amp;gt;Server: Return resource data&#xA;    end&#xA;&#xA;    Server--&amp;gt;&amp;gt;Transport: Send Response&#xA;    Transport--&amp;gt;&amp;gt;Client: Return Final Response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Publishing new release&lt;/h2&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://github.com/Flux159/mcp-server-kubernetes/releases&#34;&gt;releases page&lt;/a&gt;, click on &#34;Draft New Release&#34;, click &#34;Choose a tag&#34; and create a new tag by typing out a new version number using &#34;v{major}.{minor}.{patch}&#34; semver format. Then, write a release title &#34;Release v{major}.{minor}.{patch}&#34; and description / changelog if necessary and click &#34;Publish Release&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This will create a new tag which will trigger a new release build via the cd.yml workflow. Once successful, the new release will be published to &lt;a href=&#34;https://www.npmjs.com/package/mcp-server-kubernetes&#34;&gt;npm&lt;/a&gt;. Note that there is no need to update the package.json version manually, as the workflow will automatically update the version number in the package.json file &amp;amp; push a commit to main.&lt;/p&gt; &#xA;&lt;h2&gt;Not planned&lt;/h2&gt; &#xA;&lt;p&gt;Authentication / adding clusters to kubectx.&lt;/p&gt;</summary>
  </entry>
</feed>