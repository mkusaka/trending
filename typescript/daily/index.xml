<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-07T01:48:28Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ddiu8081/chatgpt-demo</title>
    <updated>2023-03-07T01:48:28Z</updated>
    <id>tag:github.com,2023-03-07:/ddiu8081/chatgpt-demo</id>
    <link href="https://github.com/ddiu8081/chatgpt-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A demo repo based on OpenAI API (gpt-3.5-turbo)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT-API Demo&lt;/h1&gt; &#xA;&lt;p&gt;A demo repo based on &lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;OpenAI GPT-3.5 Turbo API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run Locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &amp;amp; Install dependencies&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;First, you need &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; installed.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a copy of &lt;code&gt;.env.example&lt;/code&gt;, then rename it to &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API key&lt;/a&gt; to &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=sk-xxx...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Deploy With Vercel&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fddiu8081%2Fchatgpt-demo&amp;amp;env=OPENAI_API_KEY&amp;amp;envDescription=OpenAI%20API%20Key&amp;amp;envLink=https%3A%2F%2Fplatform.openai.com%2Faccount%2Fapi-keys&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creative Forked Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ourongxing/chatgpt-vercel&#34;&gt;ourongxing/chatgpt-vercel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mckaywrigley/wait-but-why-gpt</title>
    <updated>2023-03-07T01:48:28Z</updated>
    <id>tag:github.com,2023-03-07:/mckaywrigley/wait-but-why-gpt</id>
    <link href="https://github.com/mckaywrigley/wait-but-why-gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI search &amp; chat for all Wait But Why posts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wait But Why GPT&lt;/h1&gt; &#xA;&lt;p&gt;AI-powered search and chat for Tim Urban&#39;s blog &#34;Wait But Why.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://waitbutwhy.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mckaywrigley/wait-but-why-gpt/main/public/wbw.png&#34; alt=&#34;Wait But Why GPT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dataset&lt;/h2&gt; &#xA;&lt;p&gt;The dataset is a CSV file containing all text &amp;amp; embeddings used.&lt;/p&gt; &#xA;&lt;p&gt;Download it &lt;a href=&#34;https://drive.google.com/file/d/1qgNZYOwkqk30PtPBBAyz-u7DBhzin8us/view?usp=sharing&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I recommend getting familiar with fetching, cleaning, and storing data as outlined in the scraping and embedding scripts below, but feel free to skip those steps and just use the dataset.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Wait But Why GPT provides 2 things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A search interface.&lt;/li&gt; &#xA; &lt;li&gt;A chat interface.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;Search was created with &lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings&#34;&gt;OpenAI Embeddings&lt;/a&gt; (&lt;code&gt;text-embedding-ada-002&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;First, we loop over the essays and generate embeddings for each chunk of text.&lt;/p&gt; &#xA;&lt;p&gt;Then in the app we take the user&#39;s search query, generate an embedding, and use the result to find the most similar passages from the book.&lt;/p&gt; &#xA;&lt;p&gt;The comparison is done using cosine similarity across our database of vectors.&lt;/p&gt; &#xA;&lt;p&gt;Our database is a Postgres database with the &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;pgvector&lt;/a&gt; extension hosted on &lt;a href=&#34;https://supabase.com/&#34;&gt;Supabase&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Results are ranked by similarity score and returned to the user.&lt;/p&gt; &#xA;&lt;h3&gt;Chat&lt;/h3&gt; &#xA;&lt;p&gt;Chat builds on top of search. It uses search results to create a prompt that is fed into GPT-3.5-turbo.&lt;/p&gt; &#xA;&lt;p&gt;This allows for a chat-like experience where the user can ask questions about the book and get answers.&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a quick overview of how to run it locally.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up OpenAI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You&#39;ll need an OpenAI API key to generate embeddings.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set up Supabase and create a database&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: You don&#39;t have to use Supabase. Use whatever method you prefer to store your data. But I like Supabase and think it&#39;s easy to use.&lt;/p&gt; &#xA;&lt;p&gt;There is a schema.sql file in the root of the repo that you can use to set up the database.&lt;/p&gt; &#xA;&lt;p&gt;Run that in the SQL editor in Supabase as directed.&lt;/p&gt; &#xA;&lt;p&gt;I recommend turning on Row Level Security and setting up a service role to use with the app.&lt;/p&gt; &#xA;&lt;h3&gt;Repo Setup&lt;/h3&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone repo&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mckaywrigley/wait-but-why-gpt.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Set up environment variables&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Create a .env.local file in the root of the repo with the following variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=&#xA;&#xA;NEXT_PUBLIC_SUPABASE_URL=&#xA;SUPABASE_SERVICE_ROLE_KEY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dataset&lt;/h3&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Run scraping script&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run scrape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This scrapes all of the posts from the Wait But Why website and saves them to a json file.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run embedding script&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run embed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This reads the json file, generates embeddings for each chunk of text, and saves the results to your database.&lt;/p&gt; &#xA;&lt;p&gt;There is a 100ms delay between each request to avoid rate limiting.&lt;/p&gt; &#xA;&lt;p&gt;This process will take 20-30 minutes.&lt;/p&gt; &#xA;&lt;h3&gt;App&lt;/h3&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Run app&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/waitbutwhy&#34;&gt;Tim Urban&lt;/a&gt; for his writing.&lt;/p&gt; &#xA;&lt;p&gt;I don&#39;t think you could find a more fun blog on the internet.&lt;/p&gt; &#xA;&lt;p&gt;And go buy his new &lt;a href=&#34;https://www.amazon.com/Whats-Our-Problem-Self-Help-Societies-ebook/dp/B0BTJCTR58/ref=sr_1_1?crid=3HVMHUY8BNF7I&amp;amp;keywords=tim+urban&amp;amp;qid=1677871628&amp;amp;sprefix=tim+urban%2Caps%2C133&amp;amp;sr=8-1&#34;&gt;book&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, feel free to reach out to me on &lt;a href=&#34;https://twitter.com/mckaywrigley&#34;&gt;Twitter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;I sacrificed composability for simplicity in the app.&lt;/p&gt; &#xA;&lt;p&gt;Yes, you can make things more modular and reusable.&lt;/p&gt; &#xA;&lt;p&gt;But I kept pretty much everything in the homepage component for the sake of simplicity.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>formulahendry/chatgpt-teams-bot</title>
    <updated>2023-03-07T01:48:28Z</updated>
    <id>tag:github.com,2023-03-07:/formulahendry/chatgpt-teams-bot</id>
    <link href="https://github.com/formulahendry/chatgpt-teams-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A ChatGPT Teams Bot app to let you chat with ChatGPT in Microsoft Teams&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT Teams Bot app&lt;/h1&gt; &#xA;&lt;p&gt;This is a ChatGPT Teams Bot app which uses latest &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; model optimized for chat. &lt;code&gt;Turbo&lt;/code&gt; is the same model family that powers ChatGPT.&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/formulahendry/chatgpt-teams-bot/main/bot/README.md&#34;&gt;this guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;You could also try the &lt;a href=&#34;https://github.com/formulahendry/openai-teams-bot&#34;&gt;OpenAI Teams Bot app&lt;/a&gt; which uses GPT-3 model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/formulahendry/chatgpt-teams-bot/main/bot/images/chatgpt-chat-with-context.png&#34; alt=&#34;ChatGPT&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>