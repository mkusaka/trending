<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-30T01:40:34Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hotwired/stimulus</title>
    <updated>2022-11-30T01:40:34Z</updated>
    <id>tag:github.com,2022-11-30:/hotwired/stimulus</id>
    <link href="https://github.com/hotwired/stimulus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modest JavaScript framework for the HTML you already have&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hotwired/stimulus/main/assets/logo.svg?sanitize=true&#34; width=&#34;24&#34; height=&#34;24&#34; alt=&#34;Stimulus&#34;&gt; Stimulus&lt;/h1&gt; &#xA;&lt;h3&gt;A modest JavaScript framework for the HTML you already have&lt;/h3&gt; &#xA;&lt;p&gt;Stimulus is a JavaScript framework with modest ambitions. It doesn&#39;t seek to take over your entire front-end‚Äîin fact, it&#39;s not concerned with rendering HTML at all. Instead, it&#39;s designed to augment your HTML with just enough behavior to make it shine. Stimulus pairs beautifully with &lt;a href=&#34;https://turbo.hotwired.dev&#34;&gt;Turbo&lt;/a&gt; to provide a complete solution for fast, compelling applications with a minimal amount of effort.&lt;/p&gt; &#xA;&lt;p&gt;How does it work? Sprinkle your HTML with controller, target, and action attributes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div data-controller=&#34;hello&#34;&amp;gt;&#xA;  &amp;lt;input data-hello-target=&#34;name&#34; type=&#34;text&#34;&amp;gt;&#xA;&#xA;  &amp;lt;button data-action=&#34;click-&amp;gt;hello#greet&#34;&amp;gt;Greet&amp;lt;/button&amp;gt;&#xA;&#xA;  &amp;lt;span data-hello-target=&#34;output&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then write a compatible controller. Stimulus brings it to life automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// hello_controller.js&#xA;import { Controller } from &#34;@hotwired/stimulus&#34;&#xA;&#xA;export default class extends Controller {&#xA;  static targets = [ &#34;name&#34;, &#34;output&#34; ]&#xA;&#xA;  greet() {&#xA;    this.outputTarget.textContent =&#xA;      `Hello, ${this.nameTarget.value}!`&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stimulus continuously watches the page, kicking in as soon as attributes appear or disappear. It works with any update to the DOM, regardless of whether it comes from a full page load, a &lt;a href=&#34;https://turbo.hotwired.dev&#34;&gt;Turbo&lt;/a&gt; page change, or an Ajax request. Stimulus manages the whole lifecycle.&lt;/p&gt; &#xA;&lt;p&gt;You can write your first controller in five minutes by following along in the &lt;a href=&#34;https://stimulus.hotwired.dev/handbook/introduction&#34;&gt;Stimulus Handbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about why we created this new framework in &lt;a href=&#34;https://stimulus.hotwired.dev/handbook/origin&#34;&gt;The Origin of Stimulus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Stimulus&lt;/h2&gt; &#xA;&lt;p&gt;You can use Stimulus with any asset packaging systems. And if you prefer no build step at all, just drop a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag on the page and get right down to business.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://stimulus.hotwired.dev/handbook/installing&#34;&gt;Installation Guide&lt;/a&gt; for detailed instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;Looking for the docs? Once you&#39;ve read through the Handbook, consult the &lt;a href=&#34;https://stimulus.hotwired.dev/reference/controllers&#34;&gt;Stimulus Reference&lt;/a&gt; for API details.&lt;/p&gt; &#xA;&lt;p&gt;Have a question about Stimulus? Connect with other Stimulus developers on the &lt;a href=&#34;https://discuss.hotwired.dev/&#34;&gt;Hotwire Discourse&lt;/a&gt; community forum.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Back&lt;/h2&gt; &#xA;&lt;p&gt;Find a bug? Head over to our &lt;a href=&#34;https://github.com/hotwired/stimulus/issues&#34;&gt;issue tracker&lt;/a&gt; and we&#39;ll do our best to help. We love pull requests, too!&lt;/p&gt; &#xA;&lt;p&gt;We expect all Stimulus contributors to abide by the terms of our &lt;a href=&#34;https://raw.githubusercontent.com/hotwired/stimulus/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the project locally&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn start&lt;/code&gt; - to run the local dev server with examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn test&lt;/code&gt; - to run the unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn lint&lt;/code&gt; - to run the linter with ESLint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn format&lt;/code&gt; - to format changes with Prettier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Stimulus is &lt;a href=&#34;https://raw.githubusercontent.com/hotwired/stimulus/main/LICENSE.md&#34;&gt;MIT-licensed&lt;/a&gt; open-source software from &lt;a href=&#34;https://basecamp.com/&#34;&gt;Basecamp&lt;/a&gt;, the creators of &lt;a href=&#34;http://rubyonrails.org&#34;&gt;Ruby on Rails&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Continuous integration VMs generously provided by &lt;a href=&#34;https://opensource.saucelabs.com/&#34;&gt;Sauce Labs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;¬© 2021 Basecamp, LLC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ben-rogerson/twin.macro</title>
    <updated>2022-11-30T01:40:34Z</updated>
    <id>tag:github.com,2022-11-30:/ben-rogerson/twin.macro</id>
    <link href="https://github.com/ben-rogerson/twin.macro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü¶π‚Äç‚ôÇÔ∏è Twin blends the magic of Tailwind with the flexibility of css-in-js (emotion, styled-components, stitches and goober) at build time.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ben-rogerson/twin.macro#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ben-rogerson/twin.macro/master/.github/logo-light.svg?sanitize=true&#34; alt=&#34;Twin examples&#34; width=&#34;199&#34; height=&#34;70&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ben-rogerson/twin.macro#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ben-rogerson/twin.macro/master/.github/logo-dark.svg?sanitize=true&#34; alt=&#34;Twin examples&#34; width=&#34;199&#34; height=&#34;70&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The &lt;em&gt;magic&lt;/em&gt; of Tailwind with the &lt;em&gt;flexibility&lt;/em&gt; of css-in-js.&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.npmjs.com/package/twin.macro&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/twin.macro.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/twin.macro&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/twin.macro.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Xj6x9z7&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/705884695400939552?label=discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; üåü New: Twin v3 now includes full Tailwind plugin support and more&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/releases&#34;&gt;Release notes ‚Üí&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://stackblitz.com/github/ben-rogerson/twin.examples/tree/master/webpack-emotion-typescript?file=src/App.tsx&#34;&gt; &lt;img alt=&#34;Open in StackBlitz&#34; src=&#34;https://developer.stackblitz.com/img/open_in_stackblitz_small.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Style jsx elements using Tailwind classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;twin.macro&#39;&#xA;&#xA;const Input = () =&amp;gt; &amp;lt;input tw=&#34;border hover:border-black&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nest Twin‚Äôs &lt;code&gt;tw&lt;/code&gt; import within a css prop to add conditional styles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import tw from &#39;twin.macro&#39;&#xA;&#xA;const Input = ({ hasHover }) =&amp;gt; (&#xA;  &amp;lt;input css={[tw`border`, hasHover &amp;amp;&amp;amp; tw`hover:border-black`]} /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or mix sass styles with the css import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import tw, { css } from &#39;twin.macro&#39;&#xA;&#xA;const hoverStyles = css`&#xA;  &amp;amp;:hover {&#xA;    border-color: black;&#xA;    ${tw`text-black`}&#xA;  }&#xA;`&#xA;const Input = ({ hasHover }) =&amp;gt; (&#xA;  &amp;lt;input css={[tw`border`, hasHover &amp;amp;&amp;amp; hoverStyles]} /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Styled Components&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the tw import to create and style new components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import tw from &#39;twin.macro&#39;&#xA;&#xA;const Input = tw.input`border hover:border-black`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And clone and style existing components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const PurpleInput = tw(Input)`border-purple-500`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch to the styled import to add conditional styling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import tw, { styled } from &#39;twin.macro&#39;&#xA;&#xA;const StyledInput = styled.input(({ hasBorder }) =&amp;gt; [&#xA;  `color: black;`,&#xA;  hasBorder &amp;amp;&amp;amp; tw`border-purple-500`,&#xA;])&#xA;const Input = () =&amp;gt; &amp;lt;StyledInput hasBorder /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use backticks to mix with sass styles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import tw, { styled } from &#39;twin.macro&#39;&#xA;&#xA;const StyledInput = styled.input`&#xA;  color: black;&#xA;  ${({ hasBorder }) =&amp;gt; hasBorder &amp;amp;&amp;amp; tw`border-purple-500`}&#xA;`&#xA;const Input = () =&amp;gt; &amp;lt;StyledInput hasBorder /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;When babel runs over your javascript or typescript files at compile time, twin grabs your classes and converts them into css objects. These css objects are then passed into your chosen css-in-js library without the need for an extra client-side bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import tw from &#39;twin.macro&#39;&#xA;&#xA;tw`text-sm md:text-lg`&#xA;&#xA;// ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì&#xA;&#xA;{&#xA;  fontSize: &#39;0.875rem&#39;,&#xA;  &#39;@media (min-width: 768px)&#39;: {&#xA;    fontSize: &#39;1.125rem&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;üëå Simple imports&lt;/strong&gt; - Twin collapses imports from common styling libraries into a single import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import styled from &#39;@emotion/styled&#39;&#xA;- import css from &#39;@emotion/react&#39;&#xA;+ import { styled, css } from &#39;twin.macro&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;üêπ Adds no size to your build&lt;/strong&gt; - Twin converts the classes you‚Äôve used into css objects using Babel and then compiles away, leaving no runtime code&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üç± Apply variants to multiple classes at once with variant groups&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;twin.macro&#39;&#xA;&#xA;const interactionStyles = () =&amp;gt; (&#xA;  &amp;lt;div tw=&#34;hover:(text-black underline) focus:(text-blue-500 underline)&#34; /&amp;gt;&#xA;)&#xA;&#xA;const mediaStyles = () =&amp;gt; &amp;lt;div tw=&#34;sm:(w-4 mt-3) lg:(w-8 mt-6)&#34; /&amp;gt;&#xA;&#xA;const pseudoElementStyles = () =&amp;gt; &amp;lt;div tw=&#34;before:(block w-10 h-10 bg-black)&#34; /&amp;gt;&#xA;&#xA;const stackedVariants = () =&amp;gt; &amp;lt;div tw=&#34;sm:hover:(bg-black text-white)&#34; /&amp;gt;&#xA;&#xA;const groupsInGroups = () =&amp;gt; &amp;lt;div tw=&#34;sm:(bg-black hover:(bg-white w-10))&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;üõé Helpful suggestions for mistypings&lt;/strong&gt; - Twin chimes in with class and variant values from your Tailwind config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚úï ml-1.25 was not found&#xA;&#xA;Try one of these classes:&#xA;&#xA;- ml-1.5 &amp;gt; 0.375rem&#xA;- ml-1 &amp;gt; 0.25rem&#xA;- ml-10 &amp;gt; 2.5rem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;üñåÔ∏è Use the theme import to add values from your tailwind config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { css, theme } from &#39;twin.macro&#39;&#xA;&#xA;const Input = () =&amp;gt; &amp;lt;input css={css({ color: theme`colors.purple.500` })} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more examples &lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/pull/106&#34;&gt;using the theme import ‚Üí&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üí° Works with the official tailwind vscode plugin&lt;/strong&gt; - Avoid having to look up your classes with auto-completions straight from your Tailwind config - &lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/discussions/227&#34;&gt;setup instructions ‚Üí&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üí• Add !important to any class with a trailing or leading bang!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;div tw=&#34;hidden!&#34; /&amp;gt; || &amp;lt;div tw=&#34;!hidden&#34; /&amp;gt;&#xA;// ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì&#xA;&amp;lt;div css={{ &#34;display&#34;: &#34;none !important&#34; }} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add !important to multiple classes with bracket groups:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;div tw=&#34;(hidden ml-auto)!&#34; /&amp;gt;&#xA;// ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì&#xA;&amp;lt;div css={{ &#34;display&#34;: &#34;none !important&#34;, &#34;marginLeft&#34;: &#34;auto !important&#34; }} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;Twin works with many modern stacks - take a look at these examples to get started:&lt;/p&gt; &#xA;&lt;h3&gt;App build tools and libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parcel&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/react-styled-components&#34;&gt;styled-components&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/react-emotion&#34;&gt;emotion&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/react-emotion-typescript&#34;&gt;emotion (ts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Webpack&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/webpack-styled-components-typescript&#34;&gt;styled-components (ts)&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/webpack-emotion-typescript&#34;&gt;emotion (ts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preact&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/preact-styled-components&#34;&gt;styled-components&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/preact-emotion&#34;&gt;emotion&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/preact-goober&#34;&gt;goober&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create React App&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/cra-styled-components&#34;&gt;styled-components&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/cra-emotion&#34;&gt;emotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vite&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/vite-styled-components-typescript&#34;&gt;styled-components (ts)&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/vite-emotion-typescript&#34;&gt;emotion (ts)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced frameworks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gatsby&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/gatsby-styled-components&#34;&gt;styled-components&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/gatsby-emotion&#34;&gt;emotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/next-styled-components&#34;&gt;styled-components&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/next-styled-components-typescript&#34;&gt;styled-components (ts)&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/next-emotion&#34;&gt;emotion&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/next-emotion-typescript&#34;&gt;emotion (ts)&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/next-stitches-typescript&#34;&gt;stitches (ts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Blitz.js&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/blitz-emotion-typescript&#34;&gt;emotion (ts)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Component libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Storybook&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/storybook-styled-components-typescript&#34;&gt;styled-components (ts)&lt;/a&gt; / &lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/storybook-emotion&#34;&gt;emotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yarn/npm workspaces + Next.js + shared ui components&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/component-library-styled-components&#34;&gt;styled-components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Yarn workspaces + Rollup&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/component-library-emotion&#34;&gt;emotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.examples/tree/master/headlessui-typescript&#34;&gt;&lt;strong&gt;HeadlessUI&lt;/strong&gt; (ts)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Xj6x9z7&#34;&gt;Drop into our Discord server&lt;/a&gt; for announcements, help and styling chat.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Xj6x9z7&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/705884695400939552?label=discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üî• &lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/raw/master/docs/prop-styling-guide.md&#34;&gt;Docs: The prop styling guide&lt;/a&gt; - A must-read guide to level up on prop styling&lt;/li&gt; &#xA; &lt;li&gt;üî• &lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/raw/master/docs/styled-component-guide.md&#34;&gt;Docs: The styled component guide&lt;/a&gt; - A must-read guide on getting productive with styled components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/raw/master/docs/options.md&#34;&gt;Docs: Options&lt;/a&gt; - Learn about the features you can tweak via the twin config&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-rogerson/babel-plugin-twin&#34;&gt;Plugin: babel-plugin-twin&lt;/a&gt; - Use the tw and css props without adding an import&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/raw/master/docs/advanced-theming.md&#34;&gt;Example: Advanced theming&lt;/a&gt; - Add custom theming the right way using css variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/ben-rogerson/b4b406dffcc18ae02f8a6c8c97bb58a8&#34;&gt;Example: React + Tailwind breakpoint syncing&lt;/a&gt; - Sync your tailwind.config.js breakpoints with react&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/ben-rogerson/c6b62508e63b3e3146350f685df2ddc9&#34;&gt;Helpers: Twin VSCode snippets&lt;/a&gt; - For devs who want to type less&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-rogerson/twin.macro/discussions/227&#34;&gt;Plugins: VSCode plugins&lt;/a&gt; - VScode plugins that work with twin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mxstbr.com/thoughts/tailwind&#34;&gt;Article: &#34;Why I Love Tailwind&#34; by Max Stoiber&lt;/a&gt; - Max (inventor of styled-components) shares his thoughts on twin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;p&gt;This project stemmed from &lt;a href=&#34;https://github.com/bradlc/babel-plugin-tailwind-components&#34;&gt;babel-plugin-tailwind-components&lt;/a&gt; so a big shout out goes to &lt;a href=&#34;https://github.com/bradlc&#34;&gt;Brad Cornes&lt;/a&gt; for the amazing work he produced. Styling with tailwind.macro has been such a pleasure.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>labs42io/clean-code-typescript</title>
    <updated>2022-11-30T01:40:34Z</updated>
    <id>tag:github.com,2022-11-30:/labs42io/clean-code-typescript</id>
    <link href="https://github.com/labs42io/clean-code-typescript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Code concepts adapted for TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-typescript &lt;a href=&#34;https://twitter.com/intent/tweet?text=Clean%20Code%20Typescript&amp;amp;url=https://github.com/labs42io/clean-code-typescript&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Clean Code concepts adapted for TypeScript.&lt;br&gt; Inspired from &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;clean-code-javascript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#classes&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#solid&#34;&gt;SOLID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.osnews.com/images/comics/wtfm.jpg&#34; alt=&#34;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for TypeScript. This is not a style guide. It&#39;s a guide to producing &lt;a href=&#34;https://github.com/ryanmcdermott/3rs-of-software-architecture&#34;&gt;readable, reusable, and refactorable&lt;/a&gt; software in TypeScript.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the TypeScript code that you and your team produce.&lt;/p&gt; &#xA;&lt;p&gt;One more thing: knowing these won&#39;t immediately make you a better software developer, and working with them for many years doesn&#39;t mean you won&#39;t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don&#39;t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful variable names&lt;/h3&gt; &#xA;&lt;p&gt;Distinguish names in such a way that the reader knows what the differences offer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function between&amp;lt;T&amp;gt;(a1: T, a2: T, a3: T): boolean {&#xA;  return a2 &amp;lt;= a1 &amp;amp;&amp;amp; a1 &amp;lt;= a3;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function between&amp;lt;T&amp;gt;(value: T, left: T, right: T): boolean {&#xA;  return left &amp;lt;= value &amp;amp;&amp;amp; value &amp;lt;= right;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;If you can‚Äôt pronounce it, you can‚Äôt discuss it without sounding like an idiot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type DtaRcrd102 = {&#xA;  genymdhms: Date;&#xA;  modymdhms: Date;&#xA;  pszqint: number;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Customer = {&#xA;  generationTimestamp: Date;&#xA;  modificationTimestamp: Date;&#xA;  recordId: number;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function getUserInfo(): User;&#xA;function getUserDetails(): User;&#xA;function getUserData(): User;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function getUser(): User;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write must be readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&#34;https://typescript-eslint.io/&#34;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// What the heck is 86400000 for?&#xA;setTimeout(restart, 86400000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Declare them as capitalized named constants.&#xA;const MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1000; // 86400000&#xA;&#xA;setTimeout(restart, MILLISECONDS_PER_DAY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;declare const users: Map&amp;lt;string, User&amp;gt;;&#xA;&#xA;for (const keyValue of users) {&#xA;  // iterate through users map&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;declare const users: Map&amp;lt;string, User&amp;gt;;&#xA;&#xA;for (const [id, user] of users) {&#xA;  // iterate through users map&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Explicit is better than implicit.&lt;br&gt; &lt;em&gt;Clarity is king.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const u = getUser();&#xA;const s = getSubscription();&#xA;const t = charge(u, s);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const user = getUser();&#xA;const subscription = getSubscription();&#xA;const transaction = charge(user, subscription);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/type/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Car = {&#xA;  carMake: string;&#xA;  carModel: string;&#xA;  carColor: string;&#xA;}&#xA;&#xA;function print(car: Car): void {&#xA;  console.log(`${car.carMake} ${car.carModel} (${car.carColor})`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Car = {&#xA;  make: string;&#xA;  model: string;&#xA;  color: string;&#xA;}&#xA;&#xA;function print(car: Car): void {&#xA;  console.log(`${car.make} ${car.model} (${car.color})`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;Default arguments are often cleaner than short circuiting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function loadPages(count?: number) {&#xA;  const loadCount = count !== undefined ? count : 10;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function loadPages(count: number = 10) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use enum to document the intent&lt;/h3&gt; &#xA;&lt;p&gt;Enums can help you document the intent of the code. For example when we are concerned about values being different rather than the exact value of those.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const GENRE = {&#xA;  ROMANTIC: &#39;romantic&#39;,&#xA;  DRAMA: &#39;drama&#39;,&#xA;  COMEDY: &#39;comedy&#39;,&#xA;  DOCUMENTARY: &#39;documentary&#39;,&#xA;}&#xA;&#xA;projector.configureFilm(GENRE.COMEDY);&#xA;&#xA;class Projector {&#xA;  // declaration of Projector&#xA;  configureFilm(genre) {&#xA;    switch (genre) {&#xA;      case GENRE.ROMANTIC:&#xA;        // some logic to be executed &#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;enum GENRE {&#xA;  ROMANTIC,&#xA;  DRAMA,&#xA;  COMEDY,&#xA;  DOCUMENTARY,&#xA;}&#xA;&#xA;projector.configureFilm(GENRE.COMEDY);&#xA;&#xA;class Projector {&#xA;  // declaration of Projector&#xA;  configureFilm(genre) {&#xA;    switch (genre) {&#xA;      case GENRE.ROMANTIC:&#xA;        // some logic to be executed &#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the number of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;Consider using object literals if you are finding yourself needing a lot of arguments.&lt;/p&gt; &#xA;&lt;p&gt;To make it obvious what properties the function expects, you can use the &lt;a href=&#34;https://basarat.gitbook.io/typescript/future-javascript/destructuring&#34;&gt;destructuring&lt;/a&gt; syntax. This has a few advantages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;When someone looks at the function signature, it&#39;s immediately clear what properties are being used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It can be used to simulate named parameters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TypeScript warns you about unused properties, which would be impossible without destructuring.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function createMenu(title: string, body: string, buttonText: string, cancellable: boolean) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu(&#39;Foo&#39;, &#39;Bar&#39;, &#39;Baz&#39;, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function createMenu(options: { title: string, body: string, buttonText: string, cancellable: boolean }) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({&#xA;  title: &#39;Foo&#39;,&#xA;  body: &#39;Bar&#39;,&#xA;  buttonText: &#39;Baz&#39;,&#xA;  cancellable: true&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can further improve readability by using &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases&#34;&gt;type aliases&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;type MenuOptions = { title: string, body: string, buttonText: string, cancellable: boolean };&#xA;&#xA;function createMenu(options: MenuOptions) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({&#xA;  title: &#39;Foo&#39;,&#xA;  body: &#39;Bar&#39;,&#xA;  buttonText: &#39;Baz&#39;,&#xA;  cancellable: true&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should do one thing&lt;/h3&gt; &#xA;&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function emailActiveClients(clients: Client[]) {&#xA;  clients.forEach((client) =&amp;gt; {&#xA;    const clientRecord = database.lookup(client);&#xA;    if (clientRecord.isActive()) {&#xA;      email(client);&#xA;    }&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function emailActiveClients(clients: Client[]) {&#xA;  clients.filter(isActiveClient).forEach(email);&#xA;}&#xA;&#xA;function isActiveClient(client: Client) {&#xA;  const clientRecord = database.lookup(client);&#xA;  return clientRecord.isActive();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function addToDate(date: Date, month: number): Date {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;&#xA;// It&#39;s hard to tell from the function name what is added&#xA;addToDate(date, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function addMonthToDate(date: Date, month: number): Date {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;addMonthToDate(date, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function parseCode(code: string) {&#xA;  const REGEXES = [ /* ... */ ];&#xA;  const statements = code.split(&#39; &#39;);&#xA;  const tokens = [];&#xA;&#xA;  REGEXES.forEach((regex) =&amp;gt; {&#xA;    statements.forEach((statement) =&amp;gt; {&#xA;      // ...&#xA;    });&#xA;  });&#xA;&#xA;  const ast = [];&#xA;  tokens.forEach((token) =&amp;gt; {&#xA;    // lex...&#xA;  });&#xA;&#xA;  ast.forEach((node) =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const REGEXES = [ /* ... */ ];&#xA;&#xA;function parseCode(code: string) {&#xA;  const tokens = tokenize(code);&#xA;  const syntaxTree = parse(tokens);&#xA;&#xA;  syntaxTree.forEach((node) =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&#xA;function tokenize(code: string): Token[] {&#xA;  const statements = code.split(&#39; &#39;);&#xA;  const tokens: Token[] = [];&#xA;&#xA;  REGEXES.forEach((regex) =&amp;gt; {&#xA;    statements.forEach((statement) =&amp;gt; {&#xA;      tokens.push( /* ... */ );&#xA;    });&#xA;  });&#xA;&#xA;  return tokens;&#xA;}&#xA;&#xA;function parse(tokens: Token[]): SyntaxTree {&#xA;  const syntaxTree: SyntaxTree[] = [];&#xA;  tokens.forEach((token) =&amp;gt; {&#xA;    syntaxTree.push( /* ... */ );&#xA;  });&#xA;&#xA;  return syntaxTree;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove duplicate code&lt;/h3&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the &lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#solid&#34;&gt;SOLID&lt;/a&gt; principles. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise, you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function showDeveloperList(developers: Developer[]) {&#xA;  developers.forEach((developer) =&amp;gt; {&#xA;    const expectedSalary = developer.calculateExpectedSalary();&#xA;    const experience = developer.getExperience();&#xA;    const githubLink = developer.getGithubLink();&#xA;&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      githubLink&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&#xA;function showManagerList(managers: Manager[]) {&#xA;  managers.forEach((manager) =&amp;gt; {&#xA;    const expectedSalary = manager.calculateExpectedSalary();&#xA;    const experience = manager.getExperience();&#xA;    const portfolio = manager.getMBAProjects();&#xA;&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      portfolio&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Developer {&#xA;  // ...&#xA;  getExtraDetails() {&#xA;    return {&#xA;      githubLink: this.githubLink,&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;class Manager {&#xA;  // ...&#xA;  getExtraDetails() {&#xA;    return {&#xA;      portfolio: this.portfolio,&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;function showEmployeeList(employee: (Developer | Manager)[]) {&#xA;  employee.forEach((employee) =&amp;gt; {&#xA;    const expectedSalary = employee.calculateExpectedSalary();&#xA;    const experience = employee.getExperience();&#xA;    const extra = employee.getExtraDetails();&#xA;&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      extra,&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also consider adding a union type, or common parent class if it suits your abstraction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Developer {&#xA;  // ...&#xA;}&#xA;&#xA;class Manager {&#xA;  // ...&#xA;}&#xA;&#xA;type Employee = Developer | Manager&#xA;&#xA;function showEmployeeList(employee: Employee[]) {&#xA;  // ...&#xA;  });&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be critical about code duplication. Sometimes there is a tradeoff between duplicated code and increased complexity by introducing unnecessary abstraction. When two implementations from two different modules look similar but live in different domains, duplication might be acceptable and preferred over extracting the common code. The extracted common code, in this case, introduces an indirect dependency between the two modules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Set default objects with Object.assign or destructuring&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };&#xA;&#xA;function createMenu(config: MenuConfig) {&#xA;  config.title = config.title || &#39;Foo&#39;;&#xA;  config.body = config.body || &#39;Bar&#39;;&#xA;  config.buttonText = config.buttonText || &#39;Baz&#39;;&#xA;  config.cancellable = config.cancellable !== undefined ? config.cancellable : true;&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({ body: &#39;Bar&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };&#xA;&#xA;function createMenu(config: MenuConfig) {&#xA;  const menuConfig = Object.assign({&#xA;    title: &#39;Foo&#39;,&#xA;    body: &#39;Bar&#39;,&#xA;    buttonText: &#39;Baz&#39;,&#xA;    cancellable: true&#xA;  }, config);&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({ body: &#39;Bar&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you could use the spread operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function createMenu(config: MenuConfig) {&#xA;  const menuConfig = {&#xA;    title: &#39;Foo&#39;,&#xA;    body: &#39;Bar&#39;,&#xA;    buttonText: &#39;Baz&#39;,&#xA;    cancellable: true,&#xA;    ...config,&#xA;  };&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The spread operator and &lt;code&gt;Object.assign()&lt;/code&gt; are very similar. The main difference is that spreading defines new properties, while &lt;code&gt;Object.assign()&lt;/code&gt; sets them. More detailed, the difference is explained in &lt;a href=&#34;https://stackoverflow.com/questions/32925460/object-spread-vs-object-assign&#34;&gt;this&lt;/a&gt; thread.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use destructuring with default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };&#xA;&#xA;function createMenu({ title = &#39;Foo&#39;, body = &#39;Bar&#39;, buttonText = &#39;Baz&#39;, cancellable = true }: MenuConfig) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({ body: &#39;Bar&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid any side effects and unexpected behavior by passing in explicitly the &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; value, you can tell the TypeScript compiler to not allow it. See &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks&#34;&gt;&lt;code&gt;--strictNullChecks&lt;/code&gt;&lt;/a&gt; option in TypeScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function createFile(name: string, temp: boolean) {&#xA;  if (temp) {&#xA;    fs.create(`./temp/${name}`);&#xA;  } else {&#xA;    fs.create(name);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function createTempFile(name: string) {&#xA;  createFile(`./temp/${name}`);&#xA;}&#xA;&#xA;function createFile(name: string) {&#xA;  fs.create(name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Global variable referenced by following function.&#xA;let name = &#39;Robert C. Martin&#39;;&#xA;&#xA;function toBase64() {&#xA;  name = btoa(name);&#xA;}&#xA;&#xA;toBase64();&#xA;// If we had another function that used this name, now it&#39;d be a Base64 value&#xA;&#xA;console.log(name); // expected to print &#39;Robert C. Martin&#39; but instead &#39;Um9iZXJ0IEMuIE1hcnRpbg==&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const name = &#39;Robert C. Martin&#39;;&#xA;&#xA;function toBase64(text: string): string {&#xA;  return btoa(text);&#xA;}&#xA;&#xA;const encodedName = toBase64(name);&#xA;console.log(name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;Browsers and Node.js process only JavaScript, therefore any TypeScript code has to be compiled before running or debugging. In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it&#39;s important to handle them carefully when they&#39;re passed as parameters to a function. A JavaScript function can change an object&#39;s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Suppose there&#39;s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let&#39;s imagine a bad situation:&lt;/p&gt; &#xA;&lt;p&gt;The user clicks the &#34;Purchase&#34; button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an &#34;Add to Cart&#34; button on an item they don&#39;t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; &#xA;&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn&#39;t be affected by the changes.&lt;/p&gt; &#xA;&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects! (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;pure function&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn&#39;t a big issue in practice because there are &lt;a href=&#34;https://github.com/immutable-js/immutable-js&#34;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function addItemToCart(cart: CartItem[], item: Item): void {&#xA;  cart.push({ item, date: Date.now() });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function addItemToCart(cart: CartItem[], item: Item): CartItem[] {&#xA;  return [...cart, { item, date: Date.now() }];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; &#xA;&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to extend JavaScript&#39;s native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;declare global {&#xA;  interface Array&amp;lt;T&amp;gt; {&#xA;    diff(other: T[]): Array&amp;lt;T&amp;gt;;&#xA;  }&#xA;}&#xA;&#xA;if (!Array.prototype.diff) {&#xA;  Array.prototype.diff = function &amp;lt;T&amp;gt;(other: T[]): T[] {&#xA;    const hash = new Set(other);&#xA;    return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class MyArray&amp;lt;T&amp;gt; extends Array&amp;lt;T&amp;gt; {&#xA;  diff(other: T[]): T[] {&#xA;    const hash = new Set(other);&#xA;    return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; &#xA;&lt;p&gt;Favor this style of programming when you can.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const contributions = [&#xA;  {&#xA;    name: &#39;Uncle Bobby&#39;,&#xA;    linesOfCode: 500&#xA;  }, {&#xA;    name: &#39;Suzie Q&#39;,&#xA;    linesOfCode: 1500&#xA;  }, {&#xA;    name: &#39;Jimmy Gosling&#39;,&#xA;    linesOfCode: 150&#xA;  }, {&#xA;    name: &#39;Gracie Hopper&#39;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;let totalOutput = 0;&#xA;&#xA;for (let i = 0; i &amp;lt; contributions.length; i++) {&#xA;  totalOutput += contributions[i].linesOfCode;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const contributions = [&#xA;  {&#xA;    name: &#39;Uncle Bobby&#39;,&#xA;    linesOfCode: 500&#xA;  }, {&#xA;    name: &#39;Suzie Q&#39;,&#xA;    linesOfCode: 1500&#xA;  }, {&#xA;    name: &#39;Jimmy Gosling&#39;,&#xA;    linesOfCode: 150&#xA;  }, {&#xA;    name: &#39;Gracie Hopper&#39;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;const totalOutput = contributions&#xA;  .reduce((totalLines, output) =&amp;gt; totalLines + output.linesOfCode, 0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;if (subscription.isTrial || account.balance &amp;gt; 0) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function canActivateService(subscription: Subscription, account: Account) {&#xA;  return subscription.isTrial || account.balance &amp;gt; 0;&#xA;}&#xA;&#xA;if (canActivateService(subscription, account)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function isEmailNotUsed(email: string): boolean {&#xA;  // ...&#xA;}&#xA;&#xA;if (isEmailNotUsed(email)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function isEmailUsed(email: string): boolean {&#xA;  // ...&#xA;}&#xA;&#xA;if (!isEmailUsed(email)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Airplane {&#xA;  private type: string;&#xA;  // ...&#xA;&#xA;  getCruisingAltitude() {&#xA;    switch (this.type) {&#xA;      case &#39;777&#39;:&#xA;        return this.getMaxAltitude() - this.getPassengerCount();&#xA;      case &#39;Air Force One&#39;:&#xA;        return this.getMaxAltitude();&#xA;      case &#39;Cessna&#39;:&#xA;        return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;      default:&#xA;        throw new Error(&#39;Unknown airplane type.&#39;);&#xA;    }&#xA;  }&#xA;&#xA;  private getMaxAltitude(): number {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;abstract class Airplane {&#xA;  protected getMaxAltitude(): number {&#xA;    // shared logic with subclasses ...&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class Boeing777 extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getPassengerCount();&#xA;  }&#xA;}&#xA;&#xA;class AirForceOne extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude();&#xA;  }&#xA;}&#xA;&#xA;class Cessna extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type checking&lt;/h3&gt; &#xA;&lt;p&gt;TypeScript is a strict syntactical superset of JavaScript and adds optional static type checking to the language. Always prefer to specify types of variables, parameters and return values to leverage the full power of TypeScript features. It makes refactoring more easier.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function travelToTexas(vehicle: Bicycle | Car) {&#xA;  if (vehicle instanceof Bicycle) {&#xA;    vehicle.pedal(currentLocation, new Location(&#39;texas&#39;));&#xA;  } else if (vehicle instanceof Car) {&#xA;    vehicle.drive(currentLocation, new Location(&#39;texas&#39;));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Vehicle = Bicycle | Car;&#xA;&#xA;function travelToTexas(vehicle: Vehicle) {&#xA;  vehicle.move(currentLocation, new Location(&#39;texas&#39;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t over-optimize&lt;/h3&gt; &#xA;&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. There are good &lt;a href=&#34;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&#34;&gt;resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// On old browsers, each iteration with uncached `list.length` would be costly&#xA;// because of `list.length` recomputation. In modern browsers, this is optimized.&#xA;for (let i = 0, len = list.length; i &amp;lt; len; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;for (let i = 0; i &amp;lt; list.length; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function oldRequestModule(url: string) {&#xA;  // ...&#xA;}&#xA;&#xA;function requestModule(url: string) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = requestModule;&#xA;inventoryTracker(&#39;apples&#39;, req, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function requestModule(url: string) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = requestModule;&#xA;inventoryTracker(&#39;apples&#39;, req, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use iterators and generators&lt;/h3&gt; &#xA;&lt;p&gt;Use generators and iterables when working with collections of data used like a stream.&lt;br&gt; There are some good reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decouples the callee from the generator implementation in a sense that callee decides how many items to access&lt;/li&gt; &#xA; &lt;li&gt;lazy execution, items are streamed on-demand&lt;/li&gt; &#xA; &lt;li&gt;built-in support for iterating items using the &lt;code&gt;for-of&lt;/code&gt; syntax&lt;/li&gt; &#xA; &lt;li&gt;iterables allow implementing optimized iterator patterns&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function fibonacci(n: number): number[] {&#xA;  if (n === 1) return [0];&#xA;  if (n === 2) return [0, 1];&#xA;&#xA;  const items: number[] = [0, 1];&#xA;  while (items.length &amp;lt; n) {&#xA;    items.push(items[items.length - 2] + items[items.length - 1]);&#xA;  }&#xA;&#xA;  return items;&#xA;}&#xA;&#xA;function print(n: number) {&#xA;  fibonacci(n).forEach(fib =&amp;gt; console.log(fib));&#xA;}&#xA;&#xA;// Print first 10 Fibonacci numbers.&#xA;print(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Generates an infinite stream of Fibonacci numbers.&#xA;// The generator doesn&#39;t keep the array of all numbers.&#xA;function* fibonacci(): IterableIterator&amp;lt;number&amp;gt; {&#xA;  let [a, b] = [0, 1];&#xA;&#xA;  while (true) {&#xA;    yield a;&#xA;    [a, b] = [b, a + b];&#xA;  }&#xA;}&#xA;&#xA;function print(n: number) {&#xA;  let i = 0;&#xA;  for (const fib of fibonacci()) {&#xA;    if (i++ === n) break;  &#xA;    console.log(fib);&#xA;  }  &#xA;}&#xA;&#xA;// Print first 10 Fibonacci numbers.&#xA;print(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are libraries that allow working with iterables in a similar way as with native arrays, by chaining methods like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt; etc. See &lt;a href=&#34;https://www.npmjs.com/package/itiriri&#34;&gt;itiriri&lt;/a&gt; for an example of advanced manipulation with iterables (or &lt;a href=&#34;https://www.npmjs.com/package/itiriri-async&#34;&gt;itiriri-async&lt;/a&gt; for manipulation of async iterables).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import itiriri from &#39;itiriri&#39;;&#xA;&#xA;function* fibonacci(): IterableIterator&amp;lt;number&amp;gt; {&#xA;  let [a, b] = [0, 1];&#xA; &#xA;  while (true) {&#xA;    yield a;&#xA;    [a, b] = [b, a + b];&#xA;  }&#xA;}&#xA;&#xA;itiriri(fibonacci())&#xA;  .take(10)&#xA;  .forEach(fib =&amp;gt; console.log(fib));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Objects and Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Use getters and setters&lt;/h3&gt; &#xA;&lt;p&gt;TypeScript supports getter/setter syntax. Using getters and setters to access data from objects that encapsulate behavior could be better than simply looking for a property on an object. &#34;Why?&#34; you might ask. Well, here&#39;s a list of reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA; &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA; &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA; &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type BankAccount = {&#xA;  balance: number;&#xA;  // ...&#xA;}&#xA;&#xA;const value = 100;&#xA;const account: BankAccount = {&#xA;  balance: 0,&#xA;  // ...&#xA;};&#xA;&#xA;if (value &amp;lt; 0) {&#xA;  throw new Error(&#39;Cannot set negative balance.&#39;);&#xA;}&#xA;&#xA;account.balance = value;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class BankAccount {&#xA;  private accountBalance: number = 0;&#xA;&#xA;  get balance(): number {&#xA;    return this.accountBalance;&#xA;  }&#xA;&#xA;  set balance(value: number) {&#xA;    if (value &amp;lt; 0) {&#xA;      throw new Error(&#39;Cannot set negative balance.&#39;);&#xA;    }&#xA;&#xA;    this.accountBalance = value;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;// Now `BankAccount` encapsulates the validation logic.&#xA;// If one day the specifications change, and we need extra validation rule,&#xA;// we would have to alter only the `setter` implementation,&#xA;// leaving all dependent code unchanged.&#xA;const account = new BankAccount();&#xA;account.balance = 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make objects have private/protected members&lt;/h3&gt; &#xA;&lt;p&gt;TypeScript supports &lt;code&gt;public&lt;/code&gt; &lt;em&gt;(default)&lt;/em&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; accessors on class members.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Circle {&#xA;  radius: number;&#xA;  &#xA;  constructor(radius: number) {&#xA;    this.radius = radius;&#xA;  }&#xA;&#xA;  perimeter() {&#xA;    return 2 * Math.PI * this.radius;&#xA;  }&#xA;&#xA;  surface() {&#xA;    return Math.PI * this.radius * this.radius;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Circle {&#xA;  constructor(private readonly radius: number) {&#xA;  }&#xA;&#xA;  perimeter() {&#xA;    return 2 * Math.PI * this.radius;&#xA;  }&#xA;&#xA;  surface() {&#xA;    return Math.PI * this.radius * this.radius;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer immutability&lt;/h3&gt; &#xA;&lt;p&gt;TypeScript&#39;s type system allows you to mark individual properties on an interface/class as &lt;em&gt;readonly&lt;/em&gt;. This allows you to work in a functional way (an unexpected mutation is bad).&lt;br&gt; For more advanced scenarios there is a built-in type &lt;code&gt;Readonly&lt;/code&gt; that takes a type &lt;code&gt;T&lt;/code&gt; and marks all of its properties as readonly using mapped types (see &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types&#34;&gt;mapped types&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface Config {&#xA;  host: string;&#xA;  port: string;&#xA;  db: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface Config {&#xA;  readonly host: string;&#xA;  readonly port: string;&#xA;  readonly db: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For arrays, you can create a read-only array by using &lt;code&gt;ReadonlyArray&amp;lt;T&amp;gt;&lt;/code&gt;. It doesn&#39;t allow changes such as &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;fill()&lt;/code&gt;, but can use features such as &lt;code&gt;concat()&lt;/code&gt; and &lt;code&gt;slice()&lt;/code&gt; that do not change the array&#39;s value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const array: number[] = [ 1, 3, 5 ];&#xA;array = []; // error&#xA;array.push(100); // array will be updated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const array: ReadonlyArray&amp;lt;number&amp;gt; = [ 1, 3, 5 ];&#xA;array = []; // error&#xA;array.push(100); // error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Declaring read-only arguments in &lt;a href=&#34;https://github.com/microsoft/TypeScript/wiki/What&#39;s-new-in-TypeScript#improvements-for-readonlyarray-and-readonly-tuples&#34;&gt;TypeScript 3.4 is a bit easier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function hoge(args: readonly string[]) {&#xA;  args.push(1); // error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prefer &lt;a href=&#34;https://github.com/microsoft/TypeScript/wiki/What&#39;s-new-in-TypeScript#const-assertions&#34;&gt;const assertions&lt;/a&gt; for literal values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const config = {&#xA;  hello: &#39;world&#39;&#xA;};&#xA;config.hello = &#39;world&#39;; // value is changed&#xA;&#xA;const array  = [ 1, 3, 5 ];&#xA;array[0] = 10; // value is changed&#xA;&#xA;// writable objects is returned&#xA;function readonlyData(value: number) {&#xA;  return { value };&#xA;}&#xA;&#xA;const result = readonlyData(100);&#xA;result.value = 200; // value is changed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// read-only object&#xA;const config = {&#xA;  hello: &#39;world&#39;&#xA;} as const;&#xA;config.hello = &#39;world&#39;; // error&#xA;&#xA;// read-only array&#xA;const array  = [ 1, 3, 5 ] as const;&#xA;array[0] = 10; // error&#xA;&#xA;// You can return read-only objects&#xA;function readonlyData(value: number) {&#xA;  return { value } as const;&#xA;}&#xA;&#xA;const result = readonlyData(100);&#xA;result.value = 200; // error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;type vs. interface&lt;/h3&gt; &#xA;&lt;p&gt;Use type when you might need a union or intersection. Use an interface when you want &lt;code&gt;extends&lt;/code&gt; or &lt;code&gt;implements&lt;/code&gt;. There is no strict rule, however, use the one that works for you.&lt;br&gt; For a more detailed explanation refer to this &lt;a href=&#34;https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543&#34;&gt;answer&lt;/a&gt; about the differences between &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; in TypeScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface EmailConfig {&#xA;  // ...&#xA;}&#xA;&#xA;interface DbConfig {&#xA;  // ...&#xA;}&#xA;&#xA;interface Config {&#xA;  // ...&#xA;}&#xA;&#xA;//...&#xA;&#xA;type Shape = {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;type EmailConfig = {&#xA;  // ...&#xA;}&#xA;&#xA;type DbConfig = {&#xA;  // ...&#xA;}&#xA;&#xA;type Config  = EmailConfig | DbConfig;&#xA;&#xA;// ...&#xA;&#xA;interface Shape {&#xA;  // ...&#xA;}&#xA;&#xA;class Circle implements Shape {&#xA;  // ...&#xA;}&#xA;&#xA;class Square implements Shape {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Classes&lt;/h2&gt; &#xA;&lt;h3&gt;Classes should be small&lt;/h3&gt; &#xA;&lt;p&gt;The class&#39; size is measured by its responsibility. Following the &lt;em&gt;Single Responsibility principle&lt;/em&gt; a class should be small.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Dashboard {&#xA;  getLanguage(): string { /* ... */ }&#xA;  setLanguage(language: string): void { /* ... */ }&#xA;  showProgress(): void { /* ... */ }&#xA;  hideProgress(): void { /* ... */ }&#xA;  isDirty(): boolean { /* ... */ }&#xA;  disable(): void { /* ... */ }&#xA;  enable(): void { /* ... */ }&#xA;  addSubscription(subscription: Subscription): void { /* ... */ }&#xA;  removeSubscription(subscription: Subscription): void { /* ... */ }&#xA;  addUser(user: User): void { /* ... */ }&#xA;  removeUser(user: User): void { /* ... */ }&#xA;  goToHomePage(): void { /* ... */ }&#xA;  updateProfile(details: UserDetails): void { /* ... */ }&#xA;  getVersion(): string { /* ... */ }&#xA;  // ...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Dashboard {&#xA;  disable(): void { /* ... */ }&#xA;  enable(): void { /* ... */ }&#xA;  getVersion(): string { /* ... */ }&#xA;}&#xA;&#xA;// split the responsibilities by moving the remaining methods to other classes&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;High cohesion and low coupling&lt;/h3&gt; &#xA;&lt;p&gt;Cohesion defines the degree to which class members are related to each other. Ideally, all fields within a class should be used by each method. We then say that the class is &lt;em&gt;maximally cohesive&lt;/em&gt;. In practice, this, however, is not always possible, nor even advisable. You should however prefer cohesion to be high.&lt;/p&gt; &#xA;&lt;p&gt;Coupling refers to how related or dependent are two classes toward each other. Classes are said to be low coupled if changes in one of them don&#39;t affect the other one.&lt;/p&gt; &#xA;&lt;p&gt;Good software design has &lt;strong&gt;high cohesion&lt;/strong&gt; and &lt;strong&gt;low coupling&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class UserManager {&#xA;  // Bad: each private variable is used by one or another group of methods.&#xA;  // It makes clear evidence that the class is holding more than a single responsibility.&#xA;  // If I need only to create the service to get the transactions for a user,&#xA;  // I&#39;m still forced to pass and instance of `emailSender`.&#xA;  constructor(&#xA;    private readonly db: Database,&#xA;    private readonly emailSender: EmailSender) {&#xA;  }&#xA;&#xA;  async getUser(id: number): Promise&amp;lt;User&amp;gt; {&#xA;    return await db.users.findOne({ id });&#xA;  }&#xA;&#xA;  async getTransactions(userId: number): Promise&amp;lt;Transaction[]&amp;gt; {&#xA;    return await db.transactions.find({ userId });&#xA;  }&#xA;&#xA;  async sendGreeting(): Promise&amp;lt;void&amp;gt; {&#xA;    await emailSender.send(&#39;Welcome!&#39;);&#xA;  }&#xA;&#xA;  async sendNotification(text: string): Promise&amp;lt;void&amp;gt; {&#xA;    await emailSender.send(text);&#xA;  }&#xA;&#xA;  async sendNewsletter(): Promise&amp;lt;void&amp;gt; {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class UserService {&#xA;  constructor(private readonly db: Database) {&#xA;  }&#xA;&#xA;  async getUser(id: number): Promise&amp;lt;User&amp;gt; {&#xA;    return await this.db.users.findOne({ id });&#xA;  }&#xA;&#xA;  async getTransactions(userId: number): Promise&amp;lt;Transaction[]&amp;gt; {&#xA;    return await this.db.transactions.find({ userId });&#xA;  }&#xA;}&#xA;&#xA;class UserNotifier {&#xA;  constructor(private readonly emailSender: EmailSender) {&#xA;  }&#xA;&#xA;  async sendGreeting(): Promise&amp;lt;void&amp;gt; {&#xA;    await this.emailSender.send(&#39;Welcome!&#39;);&#xA;  }&#xA;&#xA;  async sendNotification(text: string): Promise&amp;lt;void&amp;gt; {&#xA;    await this.emailSender.send(text);&#xA;  }&#xA;&#xA;  async sendNewsletter(): Promise&amp;lt;void&amp;gt; {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;Design Patterns&lt;/a&gt; by the Gang of Four, you should &lt;em&gt;prefer composition over inheritance&lt;/em&gt; where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Employee {&#xA;  constructor(&#xA;    private readonly name: string,&#xA;    private readonly email: string) {&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data. EmployeeTaxData is not a type of Employee&#xA;class EmployeeTaxData extends Employee {&#xA;  constructor(&#xA;    name: string,&#xA;    email: string,&#xA;    private readonly ssn: string,&#xA;    private readonly salary: number) {&#xA;    super(name, email);&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Employee {&#xA;  private taxData: EmployeeTaxData;&#xA;&#xA;  constructor(&#xA;    private readonly name: string,&#xA;    private readonly email: string) {&#xA;  }&#xA;&#xA;  setTaxData(ssn: string, salary: number): Employee {&#xA;    this.taxData = new EmployeeTaxData(ssn, salary);&#xA;    return this;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class EmployeeTaxData {&#xA;  constructor(&#xA;    public readonly ssn: string,&#xA;    public readonly salary: number) {&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use method chaining&lt;/h3&gt; &#xA;&lt;p&gt;This pattern is very useful and commonly used in many libraries. It allows your code to be expressive, and less verbose. For that reason, use method chaining and take a look at how clean your code will be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class QueryBuilder {&#xA;  private collection: string;&#xA;  private pageNumber: number = 1;&#xA;  private itemsPerPage: number = 100;&#xA;  private orderByFields: string[] = [];&#xA;&#xA;  from(collection: string): void {&#xA;    this.collection = collection;&#xA;  }&#xA;&#xA;  page(number: number, itemsPerPage: number = 100): void {&#xA;    this.pageNumber = number;&#xA;    this.itemsPerPage = itemsPerPage;&#xA;  }&#xA;&#xA;  orderBy(...fields: string[]): void {&#xA;    this.orderByFields = fields;&#xA;  }&#xA;&#xA;  build(): Query {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;// ...&#xA;&#xA;const queryBuilder = new QueryBuilder();&#xA;queryBuilder.from(&#39;users&#39;);&#xA;queryBuilder.page(1, 100);&#xA;queryBuilder.orderBy(&#39;firstName&#39;, &#39;lastName&#39;);&#xA;&#xA;const query = queryBuilder.build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class QueryBuilder {&#xA;  private collection: string;&#xA;  private pageNumber: number = 1;&#xA;  private itemsPerPage: number = 100;&#xA;  private orderByFields: string[] = [];&#xA;&#xA;  from(collection: string): this {&#xA;    this.collection = collection;&#xA;    return this;&#xA;  }&#xA;&#xA;  page(number: number, itemsPerPage: number = 100): this {&#xA;    this.pageNumber = number;&#xA;    this.itemsPerPage = itemsPerPage;&#xA;    return this;&#xA;  }&#xA;&#xA;  orderBy(...fields: string[]): this {&#xA;    this.orderByFields = fields;&#xA;    return this;&#xA;  }&#xA;&#xA;  build(): Query {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;// ...&#xA;&#xA;const query = new QueryBuilder()&#xA;  .from(&#39;users&#39;)&#xA;  .page(1, 100)&#xA;  .orderBy(&#39;firstName&#39;, &#39;lastName&#39;)&#xA;  .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SOLID&lt;/h2&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of time you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class UserSettings {&#xA;  constructor(private readonly user: User) {&#xA;  }&#xA;&#xA;  changeSettings(settings: UserSettings) {&#xA;    if (this.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class UserAuth {&#xA;  constructor(private readonly user: User) {&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;&#xA;class UserSettings {&#xA;  private readonly auth: UserAuth;&#xA;&#xA;  constructor(private readonly user: User) {&#xA;    this.auth = new UserAuth(user);&#xA;  }&#xA;&#xA;  changeSettings(settings: UserSettings) {&#xA;    if (this.auth.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(private readonly adapter: Adapter) {&#xA;  }&#xA;&#xA;  async fetch&amp;lt;T&amp;gt;(url: string): Promise&amp;lt;T&amp;gt; {&#xA;    if (this.adapter instanceof AjaxAdapter) {&#xA;      const response = await makeAjaxCall&amp;lt;T&amp;gt;(url);&#xA;      // transform response and return&#xA;    } else if (this.adapter instanceof NodeAdapter) {&#xA;      const response = await makeHttpCall&amp;lt;T&amp;gt;(url);&#xA;      // transform response and return&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;function makeAjaxCall&amp;lt;T&amp;gt;(url: string): Promise&amp;lt;T&amp;gt; {&#xA;  // request and return promise&#xA;}&#xA;&#xA;function makeHttpCall&amp;lt;T&amp;gt;(url: string): Promise&amp;lt;T&amp;gt; {&#xA;  // request and return promise&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;abstract class Adapter {&#xA;  abstract async request&amp;lt;T&amp;gt;(url: string): Promise&amp;lt;T&amp;gt;;&#xA;&#xA;  // code shared to subclasses ...&#xA;}&#xA;&#xA;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;  }&#xA;&#xA;  async request&amp;lt;T&amp;gt;(url: string): Promise&amp;lt;T&amp;gt;{&#xA;    // request and return promise&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;  }&#xA;&#xA;  async request&amp;lt;T&amp;gt;(url: string): Promise&amp;lt;T&amp;gt;{&#xA;    // request and return promise&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(private readonly adapter: Adapter) {&#xA;  }&#xA;&#xA;  async fetch&amp;lt;T&amp;gt;(url: string): Promise&amp;lt;T&amp;gt; {&#xA;    const response = await this.adapter.request&amp;lt;T&amp;gt;(url);&#xA;    // transform response and return&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the parent class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Rectangle {&#xA;  constructor(&#xA;    protected width: number = 0,&#xA;    protected height: number = 0) {&#xA;&#xA;  }&#xA;&#xA;  setColor(color: string): this {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area: number) {&#xA;    // ...&#xA;  }&#xA;&#xA;  setWidth(width: number): this {&#xA;    this.width = width;&#xA;    return this;&#xA;  }&#xA;&#xA;  setHeight(height: number): this {&#xA;    this.height = height;&#xA;    return this;&#xA;  }&#xA;&#xA;  getArea(): number {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Rectangle {&#xA;  setWidth(width: number): this {&#xA;    this.width = width;&#xA;    this.height = width;&#xA;    return this;&#xA;  }&#xA;&#xA;  setHeight(height: number): this {&#xA;    this.width = height;&#xA;    this.height = height;&#xA;    return this;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeRectangles(rectangles: Rectangle[]) {&#xA;  rectangles.forEach((rectangle) =&amp;gt; {&#xA;    const area = rectangle&#xA;      .setWidth(4)&#xA;      .setHeight(5)&#xA;      .getArea(); // BAD: Returns 25 for Square. Should be 20.&#xA;    rectangle.render(area);&#xA;  });&#xA;}&#xA;&#xA;const rectangles = [new Rectangle(), new Rectangle(), new Square()];&#xA;renderLargeRectangles(rectangles);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;abstract class Shape {&#xA;  setColor(color: string): this {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area: number) {&#xA;    // ...&#xA;  }&#xA;&#xA;  abstract getArea(): number;&#xA;}&#xA;&#xA;class Rectangle extends Shape {&#xA;  constructor(&#xA;    private readonly width = 0,&#xA;    private readonly height = 0) {&#xA;    super();&#xA;  }&#xA;&#xA;  getArea(): number {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Shape {&#xA;  constructor(private readonly length: number) {&#xA;    super();&#xA;  }&#xA;&#xA;  getArea(): number {&#xA;    return this.length * this.length;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeShapes(shapes: Shape[]) {&#xA;  shapes.forEach((shape) =&amp;gt; {&#xA;    const area = shape.getArea();&#xA;    shape.render(area);&#xA;  });&#xA;}&#xA;&#xA;const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];&#xA;renderLargeShapes(shapes);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34;. This principle is very much related to the Single Responsibility Principle. What it really means is that you should always design your abstractions in a way that the clients that are using the exposed methods do not get the whole pie instead. That also include imposing the clients with the burden of implementing methods that they don‚Äôt actually need.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface SmartPrinter {&#xA;  print();&#xA;  fax();&#xA;  scan();&#xA;}&#xA;&#xA;class AllInOnePrinter implements SmartPrinter {&#xA;  print() {&#xA;    // ...&#xA;  }  &#xA;  &#xA;  fax() {&#xA;    // ...&#xA;  }&#xA;&#xA;  scan() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class EconomicPrinter implements SmartPrinter {&#xA;  print() {&#xA;    // ...&#xA;  }  &#xA;  &#xA;  fax() {&#xA;    throw new Error(&#39;Fax not supported.&#39;);&#xA;  }&#xA;&#xA;  scan() {&#xA;    throw new Error(&#39;Scan not supported.&#39;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface Printer {&#xA;  print();&#xA;}&#xA;&#xA;interface Fax {&#xA;  fax();&#xA;}&#xA;&#xA;interface Scanner {&#xA;  scan();&#xA;}&#xA;&#xA;class AllInOnePrinter implements Printer, Fax, Scanner {&#xA;  print() {&#xA;    // ...&#xA;  }  &#xA;  &#xA;  fax() {&#xA;    // ...&#xA;  }&#xA;&#xA;  scan() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class EconomicPrinter implements Printer {&#xA;  print() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with Angular, you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;DIP is usually achieved by a using an inversion of control (IoC) container. An example of a powerful IoC container for TypeScript is &lt;a href=&#34;https://www.npmjs.com/package/inversify&#34;&gt;InversifyJs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { readFile as readFileCb } from &#39;fs&#39;;&#xA;import { promisify } from &#39;util&#39;;&#xA;&#xA;const readFile = promisify(readFileCb);&#xA;&#xA;type ReportData = {&#xA;  // ..&#xA;}&#xA;&#xA;class XmlFormatter {&#xA;  parse&amp;lt;T&amp;gt;(content: string): T {&#xA;    // Converts an XML string to an object T&#xA;  }&#xA;}&#xA;&#xA;class ReportReader {&#xA;&#xA;  // BAD: We have created a dependency on a specific request implementation.&#xA;  // We should just have ReportReader depend on a parse method: `parse`&#xA;  private readonly formatter = new XmlFormatter();&#xA;&#xA;  async read(path: string): Promise&amp;lt;ReportData&amp;gt; {&#xA;    const text = await readFile(path, &#39;UTF8&#39;);&#xA;    return this.formatter.parse&amp;lt;ReportData&amp;gt;(text);&#xA;  }&#xA;}&#xA;&#xA;// ...&#xA;const reader = new ReportReader();&#xA;const report = await reader.read(&#39;report.xml&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { readFile as readFileCb } from &#39;fs&#39;;&#xA;import { promisify } from &#39;util&#39;;&#xA;&#xA;const readFile = promisify(readFileCb);&#xA;&#xA;type ReportData = {&#xA;  // ..&#xA;}&#xA;&#xA;interface Formatter {&#xA;  parse&amp;lt;T&amp;gt;(content: string): T;&#xA;}&#xA;&#xA;class XmlFormatter implements Formatter {&#xA;  parse&amp;lt;T&amp;gt;(content: string): T {&#xA;    // Converts an XML string to an object T&#xA;  }&#xA;}&#xA;&#xA;&#xA;class JsonFormatter implements Formatter {&#xA;  parse&amp;lt;T&amp;gt;(content: string): T {&#xA;    // Converts a JSON string to an object T&#xA;  }&#xA;}&#xA;&#xA;class ReportReader {&#xA;  constructor(private readonly formatter: Formatter) {&#xA;  }&#xA;&#xA;  async read(path: string): Promise&amp;lt;ReportData&amp;gt; {&#xA;    const text = await readFile(path, &#39;UTF8&#39;);&#xA;    return this.formatter.parse&amp;lt;ReportData&amp;gt;(text);&#xA;  }&#xA;}&#xA;&#xA;// ...&#xA;const reader = new ReportReader(new XmlFormatter());&#xA;const report = await reader.read(&#39;report.xml&#39;);&#xA;&#xA;// or if we had to read a json report&#xA;const reader = new ReportReader(new JsonFormatter());&#xA;const report = await reader.read(&#39;report.json&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a good &lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;coverage tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no excuse to not write tests. There are &lt;a href=&#34;http://jstherightway.org/#testing-tools&#34;&gt;plenty of good JS test frameworks&lt;/a&gt; with typings support for TypeScript, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; &#xA;&lt;h3&gt;The three laws of TDD&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You are not allowed to write any production code unless it is to make a failing unit test pass.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You are not allowed to write any more of a unit test than is sufficient to fail, and; compilation failures are failures.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You are not allowed to write any more production code than is sufficient to pass the one failing unit test.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;F.I.R.S.T. rules&lt;/h3&gt; &#xA;&lt;p&gt;Clean tests should follow the rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt; tests should be fast because we want to run them frequently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Independent&lt;/strong&gt; tests should not depend on each other. They should provide same output whether run independently or all together in any order.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Repeatable&lt;/strong&gt; tests should be repeatable in any environment and there should be no excuse for why they fail.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Self-Validating&lt;/strong&gt; a test should answer with either &lt;em&gt;Passed&lt;/em&gt; or &lt;em&gt;Failed&lt;/em&gt;. You don&#39;t need to compare log files to answer if a test passed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Timely&lt;/strong&gt; unit tests should be written before the production code. If you write tests after the production code, you might find writing tests too hard.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Single concept per test&lt;/h3&gt; &#xA;&lt;p&gt;Tests should also follow the &lt;em&gt;Single Responsibility Principle&lt;/em&gt;. Make only one assert per unit test.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { assert } from &#39;chai&#39;;&#xA;&#xA;describe(&#39;AwesomeDate&#39;, () =&amp;gt; {&#xA;  it(&#39;handles date boundaries&#39;, () =&amp;gt; {&#xA;    let date: AwesomeDate;&#xA;&#xA;    date = new AwesomeDate(&#39;1/1/2015&#39;);&#xA;    assert.equal(&#39;1/31/2015&#39;, date.addDays(30));&#xA;&#xA;    date = new AwesomeDate(&#39;2/1/2016&#39;);&#xA;    assert.equal(&#39;2/29/2016&#39;, date.addDays(28));&#xA;&#xA;    date = new AwesomeDate(&#39;2/1/2015&#39;);&#xA;    assert.equal(&#39;3/1/2015&#39;, date.addDays(28));&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { assert } from &#39;chai&#39;;&#xA;&#xA;describe(&#39;AwesomeDate&#39;, () =&amp;gt; {&#xA;  it(&#39;handles 30-day months&#39;, () =&amp;gt; {&#xA;    const date = new AwesomeDate(&#39;1/1/2015&#39;);&#xA;    assert.equal(&#39;1/31/2015&#39;, date.addDays(30));&#xA;  });&#xA;&#xA;  it(&#39;handles leap year&#39;, () =&amp;gt; {&#xA;    const date = new AwesomeDate(&#39;2/1/2016&#39;);&#xA;    assert.equal(&#39;2/29/2016&#39;, date.addDays(28));&#xA;  });&#xA;&#xA;  it(&#39;handles non-leap year&#39;, () =&amp;gt; {&#xA;    const date = new AwesomeDate(&#39;2/1/2015&#39;);&#xA;    assert.equal(&#39;3/1/2015&#39;, date.addDays(28));&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The name of the test should reveal its intention&lt;/h3&gt; &#xA;&lt;p&gt;When a test fails, its name is the first indication of what may have gone wrong.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;describe(&#39;Calendar&#39;, () =&amp;gt; {&#xA;  it(&#39;2/29/2020&#39;, () =&amp;gt; {&#xA;    // ...&#xA;  });&#xA;&#xA;  it(&#39;throws&#39;, () =&amp;gt; {&#xA;    // ...&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;describe(&#39;Calendar&#39;, () =&amp;gt; {&#xA;  it(&#39;should handle leap year&#39;, () =&amp;gt; {&#xA;    // ...&#xA;  });&#xA;&#xA;  it(&#39;should throw when format is invalid&#39;, () =&amp;gt; {&#xA;    // ...&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Concurrency&lt;/h2&gt; &#xA;&lt;h3&gt;Prefer promises vs callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Callbacks aren&#39;t clean, and they cause excessive amounts of nesting &lt;em&gt;(the callback hell)&lt;/em&gt;.&lt;br&gt; There are utilities that transform existing functions using the callback style to a version that returns promises (for Node.js see &lt;a href=&#34;https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original&#34;&gt;&lt;code&gt;util.promisify&lt;/code&gt;&lt;/a&gt;, for general purpose see &lt;a href=&#34;https://www.npmjs.com/package/pify&#34;&gt;pify&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com/package/es6-promisify&#34;&gt;es6-promisify&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { get } from &#39;request&#39;;&#xA;import { writeFile } from &#39;fs&#39;;&#xA;&#xA;function downloadPage(url: string, saveTo: string, callback: (error: Error, content?: string) =&amp;gt; void) {&#xA;  get(url, (error, response) =&amp;gt; {&#xA;    if (error) {&#xA;      callback(error);&#xA;    } else {&#xA;      writeFile(saveTo, response.body, (error) =&amp;gt; {&#xA;        if (error) {&#xA;          callback(error);&#xA;        } else {&#xA;          callback(null, response.body);&#xA;        }&#xA;      });&#xA;    }&#xA;  });&#xA;}&#xA;&#xA;downloadPage(&#39;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#39;, &#39;article.html&#39;, (error, content) =&amp;gt; {&#xA;  if (error) {&#xA;    console.error(error);&#xA;  } else {&#xA;    console.log(content);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { get } from &#39;request&#39;;&#xA;import { writeFile } from &#39;fs&#39;;&#xA;import { promisify } from &#39;util&#39;;&#xA;&#xA;const write = promisify(writeFile);&#xA;&#xA;function downloadPage(url: string, saveTo: string): Promise&amp;lt;string&amp;gt; {&#xA;  return get(url)&#xA;    .then(response =&amp;gt; write(saveTo, response));&#xA;}&#xA;&#xA;downloadPage(&#39;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#39;, &#39;article.html&#39;)&#xA;  .then(content =&amp;gt; console.log(content))&#xA;  .catch(error =&amp;gt; console.error(error));  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Promises supports a few helper methods that help make code more concise:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.resolve(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert a value into a resolved promise.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.reject(error)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert an error into a rejected promise.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.all(promises)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a new promise which is fulfilled with an array of fulfillment values for the passed promises or rejects with the reason of the first promise that rejects.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Promise.race(promises)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a new promise which is fulfilled/rejected with the result/error of the first settled promise from the array of passed promises.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;Promise.all&lt;/code&gt; is especially useful when there is a need to run tasks in parallel. &lt;code&gt;Promise.race&lt;/code&gt; makes it easier to implement things like timeouts for promises.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax you can write code that is far cleaner and more understandable than chained promises. Within a function prefixed with &lt;code&gt;async&lt;/code&gt; keyword, you have a way to tell the JavaScript runtime to pause the execution of code on the &lt;code&gt;await&lt;/code&gt; keyword (when used on a promise).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { get } from &#39;request&#39;;&#xA;import { writeFile } from &#39;fs&#39;;&#xA;import { promisify } from &#39;util&#39;;&#xA;&#xA;const write = util.promisify(writeFile);&#xA;&#xA;function downloadPage(url: string, saveTo: string): Promise&amp;lt;string&amp;gt; {&#xA;  return get(url).then(response =&amp;gt; write(saveTo, response));&#xA;}&#xA;&#xA;downloadPage(&#39;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#39;, &#39;article.html&#39;)&#xA;  .then(content =&amp;gt; console.log(content))&#xA;  .catch(error =&amp;gt; console.error(error));  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { get } from &#39;request&#39;;&#xA;import { writeFile } from &#39;fs&#39;;&#xA;import { promisify } from &#39;util&#39;;&#xA;&#xA;const write = promisify(writeFile);&#xA;&#xA;async function downloadPage(url: string): Promise&amp;lt;string&amp;gt; {&#xA;  const response = await get(url);&#xA;  return response;&#xA;}&#xA;&#xA;// somewhere in an async function&#xA;try {&#xA;  const content = await downloadPage(&#39;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#39;);&#xA;  await write(&#39;article.html&#39;, content);&#xA;  console.log(content);&#xA;} catch (error) {&#xA;  console.error(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; &#xA;&lt;h3&gt;Always use Error for throwing or rejecting&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript as well as TypeScript allow you to &lt;code&gt;throw&lt;/code&gt; any object. A Promise can also be rejected with any reason object.&lt;br&gt; It is advisable to use the &lt;code&gt;throw&lt;/code&gt; syntax with an &lt;code&gt;Error&lt;/code&gt; type. This is because your error might be caught in higher level code with a &lt;code&gt;catch&lt;/code&gt; syntax. It would be very confusing to catch a string message there and would make &lt;a href=&#34;https://basarat.gitbook.io/typescript/type-system/exceptions#always-use-error&#34;&gt;debugging more painful&lt;/a&gt;.&lt;br&gt; For the same reason you should reject promises with &lt;code&gt;Error&lt;/code&gt; types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function calculateTotal(items: Item[]): number {&#xA;  throw &#39;Not implemented.&#39;;&#xA;}&#xA;&#xA;function get(): Promise&amp;lt;Item[]&amp;gt; {&#xA;  return Promise.reject(&#39;Not implemented.&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function calculateTotal(items: Item[]): number {&#xA;  throw new Error(&#39;Not implemented.&#39;);&#xA;}&#xA;&#xA;function get(): Promise&amp;lt;Item[]&amp;gt; {&#xA;  return Promise.reject(new Error(&#39;Not implemented.&#39;));&#xA;}&#xA;&#xA;// or equivalent to:&#xA;&#xA;async function get(): Promise&amp;lt;Item[]&amp;gt; {&#xA;  throw new Error(&#39;Not implemented.&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The benefit of using &lt;code&gt;Error&lt;/code&gt; types is that it is supported by the syntax &lt;code&gt;try/catch/finally&lt;/code&gt; and implicitly all errors have the &lt;code&gt;stack&lt;/code&gt; property which is very powerful for debugging.&lt;br&gt; There are also other alternatives, not to use the &lt;code&gt;throw&lt;/code&gt; syntax and instead always return custom error objects. TypeScript makes this even easier. Consider the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Result&amp;lt;R&amp;gt; = { isError: false, value: R };&#xA;type Failure&amp;lt;E&amp;gt; = { isError: true, error: E };&#xA;type Failable&amp;lt;R, E&amp;gt; = Result&amp;lt;R&amp;gt; | Failure&amp;lt;E&amp;gt;;&#xA;&#xA;function calculateTotal(items: Item[]): Failable&amp;lt;number, &#39;empty&#39;&amp;gt; {&#xA;  if (items.length === 0) {&#xA;    return { isError: true, error: &#39;empty&#39; };&#xA;  }&#xA;&#xA;  // ...&#xA;  return { isError: false, value: 42 };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the detailed explanation of this idea refer to the &lt;a href=&#34;https://medium.com/@dhruvrajvanshi/making-exceptions-type-safe-in-typescript-c4d200ee78e9&#34;&gt;original post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t ignore caught errors&lt;/h3&gt; &#xA;&lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn&#39;t much better as often it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  console.log(error);&#xA;}&#xA;&#xA;// or even worse&#xA;&#xA;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  // ignore error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { logger } from &#39;./logging&#39;&#xA;&#xA;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  logger.log(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t ignore rejected promises&lt;/h3&gt; &#xA;&lt;p&gt;For the same reason you shouldn&#39;t ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;getUser()&#xA;  .then((user: User) =&amp;gt; {&#xA;    return sendEmail(user.email, &#39;Welcome!&#39;);&#xA;  })&#xA;  .catch((error) =&amp;gt; {&#xA;    console.log(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { logger } from &#39;./logging&#39;&#xA;&#xA;getUser()&#xA;  .then((user: User) =&amp;gt; {&#xA;    return sendEmail(user.email, &#39;Welcome!&#39;);&#xA;  })&#xA;  .catch((error) =&amp;gt; {&#xA;    logger.log(error);&#xA;  });&#xA;&#xA;// or using the async/await syntax:&#xA;&#xA;try {&#xA;  const user = await getUser();&#xA;  await sendEmail(user.email, &#39;Welcome!&#39;);&#xA;} catch (error) {&#xA;  logger.log(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is &lt;em&gt;DO NOT ARGUE&lt;/em&gt; over formatting. There are tons of tools to automate this. Use one! It&#39;s a waste of time and money for engineers to argue over formatting. The general rule to follow is &lt;em&gt;keep consistent formatting rules&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For TypeScript there is a powerful tool called &lt;a href=&#34;https://typescript-eslint.io/&#34;&gt;ESLint&lt;/a&gt;. It&#39;s a static analysis tool that can help you improve dramatically the readability and maintainability of your code. There are ready to use ESLint configurations that you can reference in your projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-config-airbnb-typescript&#34;&gt;ESLint Config Airbnb&lt;/a&gt; - Airbnb style guide&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-base-style-config&#34;&gt;ESLint Base Style Config&lt;/a&gt; - a Set of Essential ESLint rules for JS, TS and React&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-config-prettier&#34;&gt;ESLint + Prettier&lt;/a&gt; - lint rules for &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;Prettier&lt;/a&gt; code formatter&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer also to this great &lt;a href=&#34;https://basarat.gitbook.io/typescript/styleguide&#34;&gt;TypeScript StyleGuide and Coding Conventions&lt;/a&gt; source.&lt;/p&gt; &#xA;&lt;h3&gt;Migrating from TSLint to ESLint&lt;/h3&gt; &#xA;&lt;p&gt;If you are looking for help in migrating from TSLint to ESLint, you can check out this project: &lt;a href=&#34;https://github.com/typescript-eslint/tslint-to-eslint-config&#34;&gt;https://github.com/typescript-eslint/tslint-to-eslint-config&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; &#xA;&lt;p&gt;Capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just &lt;em&gt;be consistent&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const daysInMonth = 30;&#xA;&#xA;const songs = [&#39;Back In Black&#39;, &#39;Stairway to Heaven&#39;, &#39;Hey Jude&#39;];&#xA;const Artists = [&#39;ACDC&#39;, &#39;Led Zeppelin&#39;, &#39;The Beatles&#39;];&#xA;&#xA;function eraseDatabase() {}&#xA;function restore_database() {}&#xA;&#xA;type animal = { /* ... */ }&#xA;type Container = { /* ... */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const DAYS_IN_MONTH = 30;&#xA;&#xA;const SONGS = [&#39;Back In Black&#39;, &#39;Stairway to Heaven&#39;, &#39;Hey Jude&#39;];&#xA;const ARTISTS = [&#39;ACDC&#39;, &#39;Led Zeppelin&#39;, &#39;The Beatles&#39;];&#xA;&#xA;const discography = getArtistDiscography(&#39;ACDC&#39;);&#xA;const beatlesSongs = SONGS.filter((song) =&amp;gt; isBeatlesSong(song));&#xA;&#xA;function eraseDatabase() {}&#xA;function restoreDatabase() {}&#xA;&#xA;type Animal = { /* ... */ }&#xA;type Container = { /* ... */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prefer using &lt;code&gt;PascalCase&lt;/code&gt; for class, interface, type and namespace names.&lt;br&gt; Prefer using &lt;code&gt;camelCase&lt;/code&gt; for variables, functions and class members. Prefer using capitalized &lt;code&gt;SNAKE_CASE&lt;/code&gt; for constants.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; &#xA;&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class PerformanceReview {&#xA;  constructor(private readonly employee: Employee) {&#xA;  }&#xA;&#xA;  private lookupPeers() {&#xA;    return db.lookup(this.employee.id, &#39;peers&#39;);&#xA;  }&#xA;&#xA;  private lookupManager() {&#xA;    return db.lookup(this.employee, &#39;manager&#39;);&#xA;  }&#xA;&#xA;  private getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  review() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;&#xA;    // ...&#xA;  }&#xA;&#xA;  private getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  private getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.review();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class PerformanceReview {&#xA;  constructor(private readonly employee: Employee) {&#xA;  }&#xA;&#xA;  review() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;&#xA;    // ...&#xA;  }&#xA;&#xA;  private getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  private lookupPeers() {&#xA;    return db.lookup(this.employee.id, &#39;peers&#39;);&#xA;  }&#xA;&#xA;  private getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  private lookupManager() {&#xA;    return db.lookup(this.employee, &#39;manager&#39;);&#xA;  }&#xA;&#xA;  private getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.review();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Organize imports&lt;/h3&gt; &#xA;&lt;p&gt;With clean and easy to read import statements you can quickly see the dependencies of current code. Make sure you apply following good practices for &lt;code&gt;import&lt;/code&gt; statements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import statements should be alphabetized and grouped.&lt;/li&gt; &#xA; &lt;li&gt;Unused imports should be removed.&lt;/li&gt; &#xA; &lt;li&gt;Named imports must be alphabetized (i.e. &lt;code&gt;import {A, B, C} from &#39;foo&#39;;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Import sources must be alphabetized within groups, i.e.: &lt;code&gt;import * as foo from &#39;a&#39;; import * as bar from &#39;b&#39;;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prefer using &lt;code&gt;import type&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt; when importing only types from a file to avoid dependency cycles, as these imports are erased at runtime&lt;/li&gt; &#xA; &lt;li&gt;Groups of imports are delineated by blank lines.&lt;/li&gt; &#xA; &lt;li&gt;Groups must respect following order: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Polyfills (i.e. &lt;code&gt;import &#39;reflect-metadata&#39;;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Node builtin modules (i.e. &lt;code&gt;import fs from &#39;fs&#39;;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;external modules (i.e. &lt;code&gt;import { query } from &#39;itiriri&#39;;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;internal modules (i.e &lt;code&gt;import { UserService } from &#39;src/services/userService&#39;;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;modules from a parent directory (i.e. &lt;code&gt;import foo from &#39;../foo&#39;; import qux from &#39;../../foo/qux&#39;;&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;modules from the same or a sibling&#39;s directory (i.e. &lt;code&gt;import bar from &#39;./bar&#39;; import baz from &#39;./bar/baz&#39;;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { TypeDefinition } from &#39;../types/typeDefinition&#39;;&#xA;import { AttributeTypes } from &#39;../model/attribute&#39;;&#xA;import { Customer, Credentials } from &#39;../model/types&#39;;&#xA;import { ApiCredentials, Adapters } from &#39;./common/api/authorization&#39;;&#xA;import fs from &#39;fs&#39;;&#xA;import { ConfigPlugin } from &#39;./plugins/config/configPlugin&#39;;&#xA;import { BindingScopeEnum, Container } from &#39;inversify&#39;;&#xA;import &#39;reflect-metadata&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#39;reflect-metadata&#39;;&#xA;&#xA;import fs from &#39;fs&#39;;&#xA;import { BindingScopeEnum, Container } from &#39;inversify&#39;;&#xA;&#xA;import { AttributeTypes } from &#39;../model/attribute&#39;;&#xA;import { TypeDefinition } from &#39;../types/typeDefinition&#39;;&#xA;import type { Customer, Credentials } from &#39;../model/types&#39;;&#xA;&#xA;import { ApiCredentials, Adapters } from &#39;./common/api/authorization&#39;;&#xA;import { ConfigPlugin } from &#39;./plugins/config/configPlugin&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use typescript aliases&lt;/h3&gt; &#xA;&lt;p&gt;Create prettier imports by defining the paths and baseUrl properties in the compilerOptions section in the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will avoid long relative paths when doing imports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { UserService } from &#39;../../../services/UserService&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { UserService } from &#39;@services/UserService&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// tsconfig.json&#xA;...&#xA;  &#34;compilerOptions&#34;: {&#xA;    ...&#xA;    &#34;baseUrl&#34;: &#34;src&#34;,&#xA;    &#34;paths&#34;: {&#xA;      &#34;@services&#34;: [&#34;services/*&#34;]&#xA;    }&#xA;    ...&#xA;  }&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comments&lt;/h2&gt; &#xA;&lt;p&gt;The use of a comments is an indication of failure to express without them. Code should be the only source of truth.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Don‚Äôt comment bad code‚Äîrewrite it.&lt;br&gt; ‚Äî &lt;em&gt;Brian W. Kernighan and P. J. Plaugher&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Prefer self explanatory code instead of comments&lt;/h3&gt; &#xA;&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Check if subscription is active.&#xA;if (subscription.endDate &amp;gt; Date.now) {  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const isSubscriptionActive = subscription.endDate &amp;gt; Date.now;&#xA;if (isSubscriptionActive) { /* ... */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t leave commented out code in your codebase&lt;/h3&gt; &#xA;&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type User = {&#xA;  name: string;&#xA;  email: string;&#xA;  // age: number;&#xA;  // jobPosition: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type User = {&#xA;  name: string;&#xA;  email: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t have journal comments&lt;/h3&gt; &#xA;&lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;/**&#xA; * 2016-12-20: Removed monads, didn&#39;t understand them (RM)&#xA; * 2016-10-01: Improved using special monads (JP)&#xA; * 2016-02-03: Added type-checking (LI)&#xA; * 2015-03-14: Implemented combine (JR)&#xA; */&#xA;function combine(a: number, b: number): number {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function combine(a: number, b: number): number {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid positional markers&lt;/h3&gt; &#xA;&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;br&gt; Most IDE support code folding feature that allows you to collapse/expand blocks of code (see Visual Studio Code &lt;a href=&#34;https://code.visualstudio.com/updates/v1_17#_folding-regions&#34;&gt;folding regions&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;////////////////////////////////////////////////////////////////////////////////&#xA;// Client class&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;class Client {&#xA;  id: number;&#xA;  name: string;&#xA;  address: Address;&#xA;  contact: Contact;&#xA;&#xA;  ////////////////////////////////////////////////////////////////////////////////&#xA;  // public methods&#xA;  ////////////////////////////////////////////////////////////////////////////////&#xA;  public describe(): string {&#xA;    // ...&#xA;  }&#xA;&#xA;  ////////////////////////////////////////////////////////////////////////////////&#xA;  // private methods&#xA;  ////////////////////////////////////////////////////////////////////////////////&#xA;  private describeAddress(): string {&#xA;    // ...&#xA;  }&#xA;&#xA;  private describeContact(): string {&#xA;    // ...&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class Client {&#xA;  id: number;&#xA;  name: string;&#xA;  address: Address;&#xA;  contact: Contact;&#xA;&#xA;  public describe(): string {&#xA;    // ...&#xA;  }&#xA;&#xA;  private describeAddress(): string {&#xA;    // ...&#xA;  }&#xA;&#xA;  private describeContact(): string {&#xA;    // ...&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;TODO comments&lt;/h3&gt; &#xA;&lt;p&gt;When you find yourself that you need to leave notes in the code for some later improvements, do that using &lt;code&gt;// TODO&lt;/code&gt; comments. Most IDE have special support for those kinds of comments so that you can quickly go over the entire list of todos.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind however that a &lt;em&gt;TODO&lt;/em&gt; comment is not an excuse for bad code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function getActiveSubscriptions(): Promise&amp;lt;Subscription[]&amp;gt; {&#xA;  // ensure `dueDate` is indexed.&#xA;  return db.subscriptions.find({ dueDate: { $lte: new Date() } });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function getActiveSubscriptions(): Promise&amp;lt;Subscription[]&amp;gt; {&#xA;  // TODO: ensure `dueDate` is indexed.&#xA;  return db.subscriptions.find({ dueDate: { $lte: new Date() } });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&#34; alt=&#34;br&#34;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/vitorfreitas/clean-code-typescript&#34;&gt;vitorfreitas/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&#34; alt=&#34;cn&#34;&gt; &lt;strong&gt;Chinese&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/beginor/clean-code-typescript&#34;&gt;beginor/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pipiliang/clean-code-typescript&#34;&gt;pipiliang/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&#34; alt=&#34;fr&#34;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&#34;https://github.com/ralflorent/clean-code-typescript&#34;&gt;ralflorent/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&#34; alt=&#34;de&#34;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mheob/clean-code-typescript&#34;&gt;mheob/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&#34; alt=&#34;ja&#34;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/MSakamaki/clean-code-typescript&#34;&gt;MSakamaki/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&#34; alt=&#34;ko&#34;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&#34;https://github.com/738/clean-code-typescript&#34;&gt;738/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&#34; alt=&#34;ru&#34;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Real001/clean-code-typescript&#34;&gt;Real001/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&#34; alt=&#34;es&#34;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/JoseDeFreitas/clean-code-typescript&#34;&gt;JoseDeFreitas/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&#34; alt=&#34;tr&#34;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/ozanhonamlioglu/clean-code-typescript&#34;&gt;ozanhonamlioglu/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&#34; alt=&#34;vi&#34;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/hoangsetup/clean-code-typescript&#34;&gt;hoangsetup/clean-code-typescript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;References will be added once translations are completed.&lt;br&gt; Check this &lt;a href=&#34;https://github.com/labs42io/clean-code-typescript/issues/15&#34;&gt;discussion&lt;/a&gt; for more details and progress. You can make an indispensable contribution to &lt;em&gt;Clean Code&lt;/em&gt; community by translating this to your language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/labs42io/clean-code-typescript/main/#table-of-contents&#34;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>