<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-29T01:48:13Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>clerkinc/t3-turbo-and-clerk</title>
    <updated>2023-01-29T01:48:13Z</updated>
    <id>tag:github.com,2023-01-29:/clerkinc/t3-turbo-and-clerk</id>
    <link href="https://github.com/clerkinc/t3-turbo-and-clerk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A t3 Turbo starter with Clerk as the auth provider.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/perkinsjr/t3-turbo-and-clerk/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/perkinsjr/t3-turbo-and-clerk/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Create T3 Turbo with Clerk Authentication&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This takes the original create-t3-turbo and adds Clerk authentication allowing you to have one auth package for both Expo and Next.js. You will notice there is no longer an auth package as it is not requried.&lt;/p&gt; &#xA;&lt;h2&gt;Clerk Dashboard Setup&lt;/h2&gt; &#xA;&lt;p&gt;For this template to work you need to enable Discord as an OAuth provider. You can find the social options under &lt;code&gt;User &amp;amp; Authentication / Social Providers&lt;/code&gt; in the &lt;a href=&#34;https://dashboard.clerk.dev&#34;&gt;Clerk Dashboard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you change any setting here outside of adding Discord, you may need to update your Expo code to handle any requirements you change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It uses &lt;a href=&#34;https://turborepo.org/&#34;&gt;Turborepo&lt;/a&gt; and contains:&lt;/p&gt; &#xA;&lt;h2&gt;Code Layout&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.github&#xA;  └─ workflows&#xA;        └─ CI with pnpm cache setup&#xA;.vscode&#xA;  └─ Recommended extensions and settings for VSCode users&#xA;apps&#xA;  ├─ expo&#xA;  |   ├─ Expo SDK 46&#xA;  |   ├─ React Native using React 18&#xA;  |   ├─ Tailwind using Nativewind&#xA;  |   └─ Typesafe API calls using tRPC&#xA;  └─ next.js&#xA;      ├─ Next.js 13&#xA;      ├─ React 18&#xA;      ├─ TailwindCSS&#xA;      └─ E2E Typesafe API Server &amp;amp; Client&#xA;packages&#xA; ├─ api&#xA; |   └─ tRPC v10 router definition&#xA; └─ db&#xA;     └─ typesafe db-calls using Prisma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To get it running, follow the steps below:&lt;/p&gt; &#xA;&lt;h3&gt;Setup dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;# Install dependencies&#xA;pnpm i&#xA;&#xA;# In packages/db/prisma update schema.prisma provider to use sqlite&#xA;# or use your own database provider&#xA;- provider = &#34;postgresql&#34;&#xA;+ provider = &#34;sqlite&#34;&#xA;&#xA;# Configure environment variables.&#xA;# There is an `.env.example` in the root directory you can use for reference&#xA;cp .env.example .env&#xA;&#xA;# Push the Prisma schema to your database&#xA;pnpm db-push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Expo app&lt;/h3&gt; &#xA;&lt;p&gt;Expo doesn&#39;t use the .env for the publishable key, so you will need to go to &lt;code&gt;apps/expo/app.config.ts&lt;/code&gt; and add it there.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const CLERK_PUBLISHABLE_KEY = &#34;your-clerk-publishable-key&#34;;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Expo &lt;code&gt;dev&lt;/code&gt;-script&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to use a physical phone with Expo Go, just run &lt;code&gt;pnpm dev&lt;/code&gt; and scan the QR-code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Use iOS Simulator&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have XCode and XCommand Line Tools installed &lt;a href=&#34;https://docs.expo.dev/workflow/ios-simulator/&#34;&gt;as shown on expo docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change the &lt;code&gt;dev&lt;/code&gt; script at &lt;code&gt;apps/expo/package.json&lt;/code&gt; to open the iOS simulator.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+  &#34;dev&#34;: &#34;expo start --ios&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm dev&lt;/code&gt; at the project root folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;For Android&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Android Studio tools &lt;a href=&#34;https://docs.expo.dev/workflow/android-studio-emulator/&#34;&gt;as shown on expo docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change the &lt;code&gt;dev&lt;/code&gt; script at &lt;code&gt;apps/expo/package.json&lt;/code&gt; to open the Android emulator.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+  &#34;dev&#34;: &#34;expo start --android&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm dev&lt;/code&gt; at the project root folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Next.js&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;We do not recommend deploying a SQLite database on serverless environments since the data wouldn&#39;t be persisted. I provisioned a quick Postgresql database on &lt;a href=&#34;https://railway.app&#34;&gt;Railway&lt;/a&gt;, but you can of course use any other database provider. Make sure the prisma schema is updated to use the correct database.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Deploy to Vercel&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s deploy the Next.js application to &lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt;. If you have ever deployed a Turborepo app there, the steps are quite straightforward. You can also read the &lt;a href=&#34;https://vercel.com/docs/concepts/monorepos/turborepo&#34;&gt;official Turborepo guide&lt;/a&gt; on deploying to Vercel.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new project on Vercel, select the &lt;code&gt;apps/nextjs&lt;/code&gt; folder as the root directory and apply the following build settings:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;927&#34; alt=&#34;Vercel deployment settings&#34; src=&#34;https://user-images.githubusercontent.com/11340449/201974887-b6403a32-5570-4ce6-b146-c486c0dbd244.png&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The install command filters out the expo package and saves a few second (and cache size) of dependency installation. The build command makes us build the application using Turbo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your &lt;code&gt;DATABASE_URL&lt;/code&gt;,&lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; environment variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Done! Your app should successfully deploy. Assign your domain and use that instead of &lt;code&gt;localhost&lt;/code&gt; for the &lt;code&gt;url&lt;/code&gt; in the Expo app so that your Expo app can communicate with your backend when you are not in development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Expo&lt;/h3&gt; &#xA;&lt;p&gt;Deploying your Expo application works slightly differently compared to Next.js on the web. Instead of &#34;deploying&#34; your app online, you need to submit production builds of your app to the app stores, like &lt;a href=&#34;https://www.apple.com/app-store/&#34;&gt;Apple App Store&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/apps&#34;&gt;Google Play&lt;/a&gt;. You can read the full &lt;a href=&#34;https://docs.expo.dev/distribution/introduction/&#34;&gt;Distributing your app&lt;/a&gt;, including best practices, in the Expo docs.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Let&#39;s start by setting up &lt;a href=&#34;https://docs.expo.dev/build/introduction/&#34;&gt;EAS Build&lt;/a&gt;, which is short for Expo Application Services. The build service helps you create builds of your app, without requiring a full native development setup. The commands below are a summary of &lt;a href=&#34;https://docs.expo.dev/build/setup/&#34;&gt;Creating your first build&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// Install the EAS CLI&#xA;$ pnpm add -g eas-cli&#xA;&#xA;// Log in with your Expo account&#xA;$ eas login&#xA;&#xA;// Configure your Expo app&#xA;$ cd apps/expo&#xA;$ eas build:configure&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the initial setup, you can create your first build. You can build for Android and iOS platforms and use different &lt;a href=&#34;https://docs.expo.dev/build-reference/eas-json/&#34;&gt;&lt;strong&gt;eas.json&lt;/strong&gt; build profiles&lt;/a&gt; to create production builds or development, or test builds. Let&#39;s make a production build for iOS.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ eas build --platform ios --profile production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If you don&#39;t specify the &lt;code&gt;--profile&lt;/code&gt; flag, EAS uses the &lt;code&gt;production&lt;/code&gt; profile by default.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now that you have your first production build, you can submit this to the stores. &lt;a href=&#34;https://docs.expo.dev/submit/introduction/&#34;&gt;EAS Submit&lt;/a&gt; can help you send the build to the stores.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ eas submit --platform ios --latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You can also combine build and submit in a single command, using &lt;code&gt;eas build ... --auto-submit&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before you can get your app in the hands of your users, you&#39;ll have to provide additional information to the app stores. This includes screenshots, app information, privacy policies, etc. &lt;em&gt;While still in preview&lt;/em&gt;, &lt;a href=&#34;https://docs.expo.dev/eas/metadata/&#34;&gt;EAS Metadata&lt;/a&gt; can help you with most of this information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once everything is approved, your users can finally enjoy your app. Let&#39;s say you spotted a small typo; you&#39;ll have to create a new build, submit it to the stores, and wait for approval before you can resolve this issue. In these cases, you can use EAS Update to quickly send a small bugfix to your users without going through this long process. Let&#39;s start by setting up EAS Update.&lt;/p&gt; &lt;p&gt;The steps below summarize the &lt;a href=&#34;https://docs.expo.dev/eas-update/getting-started/#configure-your-project&#34;&gt;Getting started with EAS Update&lt;/a&gt; guide.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// Add the `expo-updates` library to your Expo app&#xA;$ cd apps/expo&#xA;$ pnpm expo install expo-updates&#xA;&#xA;// Configure EAS Update&#xA;$ eas update:configure&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before we can send out updates to your app, you have to create a new build and submit it to the app stores. For every change that includes native APIs, you have to rebuild the app and submit the update to the app stores. See steps 2 and 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now that everything is ready for updates, let&#39;s create a new update for &lt;code&gt;production&lt;/code&gt; builds. With the &lt;code&gt;--auto&lt;/code&gt; flag, EAS Update uses your current git branch name and commit message for this update. See &lt;a href=&#34;https://docs.expo.dev/eas-update/how-eas-update-works/#publishing-an-update&#34;&gt;How EAS Update works&lt;/a&gt; for more information.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd apps/expo&#xA;$ eas update --auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Your OTA (Over The Air) updates must always follow the app store&#39;s rules. You can&#39;t change your app&#39;s primary functionality without getting app store approval. But this is a fast way to update your app for minor changes and bug fixes.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Done! Now that you have created your production build, submitted it to the stores, and installed EAS Update, you are ready for anything!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;The stack originates from &lt;a href=&#34;https://github.com/t3-oss/create-t3-app&#34;&gt;create-t3-app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://jumr.dev/blog/t3-turbo&#34;&gt;blog post&lt;/a&gt; where I wrote how to migrate a T3 app into this.&lt;/p&gt;</summary>
  </entry>
</feed>