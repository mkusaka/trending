<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-05T01:39:33Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>modelcontextprotocol/inspector</title>
    <updated>2025-06-05T01:39:33Z</updated>
    <id>tag:github.com,2025-06-05:/modelcontextprotocol/inspector</id>
    <link href="https://github.com/modelcontextprotocol/inspector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visual testing tool for MCP servers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Inspector&lt;/h1&gt; &#xA;&lt;p&gt;The MCP inspector is a developer tool for testing and debugging MCP servers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelcontextprotocol/inspector/main/mcp-inspector.png&#34; alt=&#34;MCP Inspector Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Architecture Overview&lt;/h2&gt; &#xA;&lt;p&gt;The MCP Inspector consists of two main components that work together:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MCP Inspector Client (MCPI)&lt;/strong&gt;: A React-based web UI that provides an interactive interface for testing and debugging MCP servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MCP Proxy (MCPP)&lt;/strong&gt;: A Node.js server that acts as a protocol bridge, connecting the web UI to MCP servers via various transport methods (stdio, SSE, streamable-http)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the proxy is not a network proxy for intercepting traffic. Instead, it functions as both an MCP client (connecting to your MCP server) and an HTTP server (serving the web UI), enabling browser-based interaction with MCP servers that use different transport protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Inspector&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js: ^22.7.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Start (UI mode)&lt;/h3&gt; &#xA;&lt;p&gt;To get up and running right away with the UI, just execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/inspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will start up and the UI will be accessible at &lt;code&gt;http://localhost:6274&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From an MCP server repository&lt;/h3&gt; &#xA;&lt;p&gt;To inspect an MCP server implementation, there&#39;s no need to clone this repo. Instead, use &lt;code&gt;npx&lt;/code&gt;. For example, if your server is built at &lt;code&gt;build/index.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/inspector node build/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass both arguments and environment variables to your MCP server. Arguments are passed directly to your server, while environment variables can be set using the &lt;code&gt;-e&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Pass arguments only&#xA;npx @modelcontextprotocol/inspector node build/index.js arg1 arg2&#xA;&#xA;# Pass environment variables only&#xA;npx @modelcontextprotocol/inspector -e key=value -e key2=$VALUE2 node build/index.js&#xA;&#xA;# Pass both environment variables and arguments&#xA;npx @modelcontextprotocol/inspector -e key=value -e key2=$VALUE2 node build/index.js arg1 arg2&#xA;&#xA;# Use -- to separate inspector flags from server arguments&#xA;npx @modelcontextprotocol/inspector -e key=$VALUE -- node build/index.js -e server-flag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inspector runs both an MCP Inspector (MCPI) client UI (default port 6274) and an MCP Proxy (MCPP) server (default port 6277). Open the MCPI client UI in your browser to use the inspector. (These ports are derived from the T9 dialpad mapping of MCPI and MCPP respectively, as a mnemonic). You can customize the ports if needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CLIENT_PORT=8080 SERVER_PORT=9000 npx @modelcontextprotocol/inspector node build/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on ways to use the inspector, see the &lt;a href=&#34;https://modelcontextprotocol.io/docs/tools/inspector&#34;&gt;Inspector section of the MCP docs site&lt;/a&gt;. For help with debugging, see the &lt;a href=&#34;https://modelcontextprotocol.io/docs/tools/debugging&#34;&gt;Debugging guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Servers File Export&lt;/h3&gt; &#xA;&lt;p&gt;The MCP Inspector provides convenient buttons to export server launch configurations for use in clients such as Cursor, Claude Code, or the Inspector&#39;s CLI. The file is usually called &lt;code&gt;mcp.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server Entry&lt;/strong&gt; - Copies a single server configuration entry to your clipboard. This can be added to your &lt;code&gt;mcp.json&lt;/code&gt; file inside the &lt;code&gt;mcpServers&lt;/code&gt; object with your preferred server name.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;STDIO transport example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;command&#34;: &#34;node&#34;,&#xA;  &#34;args&#34;: [&#34;build/index.js&#34;, &#34;--debug&#34;],&#xA;  &#34;env&#34;: {&#xA;    &#34;API_KEY&#34;: &#34;your-api-key&#34;,&#xA;    &#34;DEBUG&#34;: &#34;true&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;SSE transport example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;sse&#34;,&#xA;  &#34;url&#34;: &#34;http://localhost:3000/events&#34;,&#xA;  &#34;note&#34;: &#34;For SSE connections, add this URL directly in Client&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Servers File&lt;/strong&gt; - Copies a complete MCP configuration file structure to your clipboard, with your current server configuration added as &lt;code&gt;default-server&lt;/code&gt;. This can be saved directly as &lt;code&gt;mcp.json&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;STDIO transport example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;default-server&#34;: {&#xA;      &#34;command&#34;: &#34;node&#34;,&#xA;      &#34;args&#34;: [&#34;build/index.js&#34;, &#34;--debug&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;API_KEY&#34;: &#34;your-api-key&#34;,&#xA;        &#34;DEBUG&#34;: &#34;true&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;SSE transport example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;default-server&#34;: {&#xA;      &#34;type&#34;: &#34;sse&#34;,&#xA;      &#34;url&#34;: &#34;http://localhost:3000/events&#34;,&#xA;      &#34;note&#34;: &#34;For SSE connections, add this URL directly in Client&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These buttons appear in the Inspector UI after you&#39;ve configured your server settings, making it easy to save and reuse your configurations.&lt;/p&gt; &#xA;&lt;p&gt;For SSE transport connections, the Inspector provides similar functionality for both buttons. The &#34;Server Entry&#34; button copies the SSE URL configuration that can be added to your existing configuration file, while the &#34;Servers File&#34; button creates a complete configuration file containing the SSE URL for direct use in clients.&lt;/p&gt; &#xA;&lt;p&gt;You can paste the Server Entry into your existing &lt;code&gt;mcp.json&lt;/code&gt; file under your chosen server name, or use the complete Servers File payload to create a new configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;The inspector supports bearer token authentication for SSE connections. Enter your token in the UI when connecting to an MCP server, and it will be sent in the Authorization header. You can override the header name using the input field in the sidebar.&lt;/p&gt; &#xA;&lt;h3&gt;Security Considerations&lt;/h3&gt; &#xA;&lt;p&gt;The MCP Inspector includes a proxy server that can run and communicate with local MCP processes. The proxy server should not be exposed to untrusted networks as it has permissions to spawn local processes and can connect to any specified MCP server.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The MCP Inspector supports the following configuration settings. To change them, click on the &lt;code&gt;Configuration&lt;/code&gt; button in the MCP Inspector UI:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_SERVER_REQUEST_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Timeout for requests to the MCP server (ms)&lt;/td&gt; &#xA;   &lt;td&gt;10000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REQUEST_TIMEOUT_RESET_ON_PROGRESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reset timeout on progress notifications&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REQUEST_MAX_TOTAL_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum total timeout for requests sent to the MCP server (ms) (Use with progress notifications)&lt;/td&gt; &#xA;   &lt;td&gt;60000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_PROXY_FULL_ADDRESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set this if you are running the MCP Inspector Proxy on a non-default address. Example: &lt;a href=&#34;http://10.1.1.22:5577&#34;&gt;http://10.1.1.22:5577&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_AUTO_OPEN_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable automatic browser opening when inspector starts. Only as environment var, not configurable in browser.&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These settings can be adjusted in real-time through the UI and will persist across sessions.&lt;/p&gt; &#xA;&lt;p&gt;The inspector also supports configuration files to store settings for different MCP servers. This is useful when working with multiple servers or complex configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/inspector --config path/to/config.json --server everything&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example server configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;everything&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;@modelcontextprotocol/server-everything&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;hello&#34;: &#34;Hello MCP!&#34;&#xA;      }&#xA;    },&#xA;    &#34;my-server&#34;: {&#xA;      &#34;command&#34;: &#34;node&#34;,&#xA;      &#34;args&#34;: [&#34;build/index.js&#34;, &#34;arg1&#34;, &#34;arg2&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;key&#34;: &#34;value&#34;,&#xA;        &#34;key2&#34;: &#34;value2&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; You can easily generate this configuration format using the &lt;strong&gt;Server Entry&lt;/strong&gt; and &lt;strong&gt;Servers File&lt;/strong&gt; buttons in the Inspector UI, as described in the Servers File Export section above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also set the initial &lt;code&gt;transport&lt;/code&gt; type, &lt;code&gt;serverUrl&lt;/code&gt;, &lt;code&gt;serverCommand&lt;/code&gt;, and &lt;code&gt;serverArgs&lt;/code&gt; via query params, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:6274/?transport=sse&amp;amp;serverUrl=http://localhost:8787/sse&#xA;http://localhost:6274/?transport=streamable-http&amp;amp;serverUrl=http://localhost:8787/mcp&#xA;http://localhost:6274/?transport=stdio&amp;amp;serverCommand=npx&amp;amp;serverArgs=arg1%20arg2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set initial config settings via query params, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:6274/?MCP_SERVER_REQUEST_TIMEOUT=10000&amp;amp;MCP_REQUEST_TIMEOUT_RESET_ON_PROGRESS=false&amp;amp;MCP_PROXY_FULL_ADDRESS=http://10.1.1.22:5577&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if both the query param and the corresponding localStorage item are set, the query param will take precedence.&lt;/p&gt; &#xA;&lt;h3&gt;From this repository&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re working on the inspector itself:&lt;/p&gt; &#xA;&lt;p&gt;Development mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note for Windows users:&lt;/strong&gt; On Windows, use the following command instead:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev:windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Production mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI Mode&lt;/h3&gt; &#xA;&lt;p&gt;CLI mode enables programmatic interaction with MCP servers from the command line, ideal for scripting, automation, and integration with coding assistants. This creates an efficient feedback loop for MCP server development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/inspector --cli node build/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CLI mode supports most operations across tools, resources, and prompts. A few examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Basic usage&#xA;npx @modelcontextprotocol/inspector --cli node build/index.js&#xA;&#xA;# With config file&#xA;npx @modelcontextprotocol/inspector --cli --config path/to/config.json --server myserver&#xA;&#xA;# List available tools&#xA;npx @modelcontextprotocol/inspector --cli node build/index.js --method tools/list&#xA;&#xA;# Call a specific tool&#xA;npx @modelcontextprotocol/inspector --cli node build/index.js --method tools/call --tool-name mytool --tool-arg key=value --tool-arg another=value2&#xA;&#xA;# List available resources&#xA;npx @modelcontextprotocol/inspector --cli node build/index.js --method resources/list&#xA;&#xA;# List available prompts&#xA;npx @modelcontextprotocol/inspector --cli node build/index.js --method prompts/list&#xA;&#xA;# Connect to a remote MCP server&#xA;npx @modelcontextprotocol/inspector --cli https://my-mcp-server.example.com&#xA;&#xA;# Call a tool on a remote server&#xA;npx @modelcontextprotocol/inspector --cli https://my-mcp-server.example.com --method tools/call --tool-name remotetool --tool-arg param=value&#xA;&#xA;# List resources from a remote server&#xA;npx @modelcontextprotocol/inspector --cli https://my-mcp-server.example.com --method resources/list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UI Mode vs CLI Mode: When to Use Each&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Use Case&lt;/th&gt; &#xA;   &lt;th&gt;UI Mode&lt;/th&gt; &#xA;   &lt;th&gt;CLI Mode&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Server Development&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Visual interface for interactive testing and debugging during development&lt;/td&gt; &#xA;   &lt;td&gt;Scriptable commands for quick testing and continuous integration; creates feedback loops with AI coding assistants like Cursor for rapid development&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Resource Exploration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interactive browser with hierarchical navigation and JSON visualization&lt;/td&gt; &#xA;   &lt;td&gt;Programmatic listing and reading for automation and scripting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Tool Testing&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Form-based parameter input with real-time response visualization&lt;/td&gt; &#xA;   &lt;td&gt;Command-line tool execution with JSON output for scripting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Prompt Engineering&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interactive sampling with streaming responses and visual comparison&lt;/td&gt; &#xA;   &lt;td&gt;Batch processing of prompts with machine-readable output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Request history, visualized errors, and real-time notifications&lt;/td&gt; &#xA;   &lt;td&gt;Direct JSON output for log analysis and integration with other tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Automation&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Ideal for CI/CD pipelines, batch processing, and integration with coding assistants&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Learning MCP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rich visual interface helps new users understand server capabilities&lt;/td&gt; &#xA;   &lt;td&gt;Simplified commands for focused learning of specific endpoints&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License—see the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/inspector/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>