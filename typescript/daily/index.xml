<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-16T01:37:10Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>f5/unovis</title>
    <updated>2022-12-16T01:37:10Z</updated>
    <id>tag:github.com,2022-12-16:/f5/unovis</id>
    <link href="https://github.com/f5/unovis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modular data visualization framework for React, Angular, Svelte, and vanilla TypeScript or JavaScript&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/755708/205744216-5e9efd10-794b-4ce1-9aca-580c34fad193.mp4&#34;&gt;https://user-images.githubusercontent.com/755708/205744216-5e9efd10-794b-4ce1-9aca-580c34fad193.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🟨 &lt;strong&gt;Unovis&lt;/strong&gt; is a modular data visualization framework for React, Angular, Svelte, and vanilla TypeScript or JavaScript:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📈 🗺 It has charts, maps, network graphs, and more!&lt;/li&gt; &#xA; &lt;li&gt;🌳 Tree-shakable and supports individual component imports to reduce your bundle size;&lt;/li&gt; &#xA; &lt;li&gt;🎨 Highly customizable, thanks to the CSS-variables support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn more about &lt;em&gt;Unovis&lt;/em&gt; on &lt;a href=&#34;https://unovis.dev&#34;&gt;unovis.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;You can install the core of the library &lt;code&gt;@unovis/ts&lt;/code&gt; and framework-specific packages (if you use React, Angular, or Svelte) from NPM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -P @unovis/ts @unovis/&amp;lt;react|angular|svelte&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can import components and create your first chart! Here&#39;s how to build a simple line chart uising Unovis and React:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import React, { useCallback } from &#39;react&#39;&#xA;import { VisXYContainer, VisLine, VisAxis } from &#39;@unovis/react&#39;&#xA;&#xA;type DataRecord = { x: number; y: number }&#xA;const data: DataRecord[] = [&#xA;  { x: 0, y: 0 },&#xA;  { x: 1, y: 2 },&#xA;  { x: 2, y: 1 },&#xA;]&#xA;&#xA;export function BasicLineChart (): JSX.Element {&#xA;  return (&#xA;    &amp;lt;VisXYContainer data={data}&amp;gt;&#xA;      &amp;lt;VisLine&amp;lt;DataRecord&amp;gt;&#xA;        x={useCallback(d =&amp;gt; d.x, [])}&#xA;        y={useCallback(d =&amp;gt; d.y, [])}&#xA;      &amp;gt;&amp;lt;/VisLine&amp;gt;&#xA;      &amp;lt;VisAxis type=&#34;x&#34;&amp;gt;&amp;lt;/VisAxis&amp;gt;&#xA;      &amp;lt;VisAxis type=&#34;y&#34;&amp;gt;&amp;lt;/VisAxis&amp;gt;&#xA;    &amp;lt;/VisXYContainer&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looking for Angular, Svelte, or TypeScript examples? Check out the &lt;a href=&#34;https://unovis.dev/docs/quick-start&#34;&gt;Quick Start&lt;/a&gt; page on our website.&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unovis.dev/gallery&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/f5/unovis/main/examples.png&#34; alt=&#34;Unovis Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📖 &lt;em&gt;Unovis&lt;/em&gt; has an extensive &lt;a href=&#34;https://unovis.dev/docs/intro&#34;&gt;documentation&lt;/a&gt; with code snippets for React, Angular, Svelte and TypeScript.&lt;/p&gt; &#xA;&lt;p&gt;🖼 Also there&#39;s a growing &lt;a href=&#34;https://unovis.dev/gallery&#34;&gt;gallery&lt;/a&gt; of examples, from where you can copy the code over to your project or try it live on StackBlitz.&lt;/p&gt; &#xA;&lt;h2&gt;Repository structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/ts&lt;/code&gt; Core TypeScript package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/angular&lt;/code&gt; Angular components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/react&lt;/code&gt; React components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/svelte&lt;/code&gt; Svelte components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/website&lt;/code&gt; Website, docs and examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. For more information, please read &lt;a href=&#34;https://raw.githubusercontent.com/f5/unovis/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rokotyan&#34;&gt;&lt;img alt=&#34;Nikita Rokotyan&#34; src=&#34;https://avatars.githubusercontent.com/u/755708&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/reb-dev&#34;&gt;&lt;img alt=&#34;Rebecca Bol&#34; src=&#34;https://avatars.githubusercontent.com/u/52078477&#34; width=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stukova&#34;&gt;&lt;img alt=&#34;Olga Stukova&#34; src=&#34;https://avatars.githubusercontent.com/u/8654114&#34; width=&#34;40&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sumitkumar25&#34;&gt;&lt;img alt=&#34;Sumit Kumar&#34; src=&#34;https://avatars.githubusercontent.com/u/5867393&#34; width=&#34;40&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gmfun&#34;&gt;&lt;img alt=&#34;Gaurav Mukherjee&#34; src=&#34;https://avatars.githubusercontent.com/u/6323787&#34; width=&#34;40&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/beverlyckh&#34;&gt;&lt;img alt=&#34;Beverly Ackah&#34; src=&#34;https://avatars.githubusercontent.com/u/32556434&#34; width=&#34;40&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/DimamoN&#34;&gt;&lt;img alt=&#34;Dmitriy Gutman&#34; src=&#34;https://avatars.githubusercontent.com/u/14595706&#34; width=&#34;40&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Unovis&lt;/em&gt; is licensed under Apache-2.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alexta69/metube</title>
    <updated>2022-12-16T01:37:10Z</updated>
    <id>tag:github.com,2022-12-16:/alexta69/metube</id>
    <link href="https://github.com/alexta69/metube" rel="alternate"></link>
    <summary type="html">&lt;p&gt;youtube-dl web UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MeTube&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alexta69/metube/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/alexta69/metube.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Web GUI for youtube-dl (using the &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;yt-dlp&lt;/a&gt; fork) with playlist support. Allows you to download videos from YouTube and dozens of other sites (&lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/raw/master/supportedsites.md&#34;&gt;https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alexta69/metube/raw/master/screenshot.gif&#34; alt=&#34;screenshot1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run using Docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 8081:8081 -v /path/to/downloads:/downloads alexta69/metube&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run using docker-compose&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;3&#34;&#xA;services:&#xA;  metube:&#xA;    image: alexta69/metube&#xA;    container_name: metube&#xA;    restart: unless-stopped&#xA;    ports:&#xA;      - &#34;8081:8081&#34;&#xA;    volumes:&#xA;      - /path/to/downloads:/downloads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration via environment variables&lt;/h2&gt; &#xA;&lt;p&gt;Certain values can be set via environment variables, using the &lt;code&gt;-e&lt;/code&gt; parameter on the docker command line, or the &lt;code&gt;environment:&lt;/code&gt; section in docker-compose.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;UID&lt;/strong&gt;: user under which MeTube will run. Defaults to &lt;code&gt;1000&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GID&lt;/strong&gt;: group under which MeTube will run. Defaults to &lt;code&gt;1000&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UMASK&lt;/strong&gt;: umask value used by MeTube. Defaults to &lt;code&gt;022&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DOWNLOAD_DIR&lt;/strong&gt;: path to where the downloads will be saved. Defaults to &lt;code&gt;/downloads&lt;/code&gt; in the docker image, and &lt;code&gt;.&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AUDIO_DOWNLOAD_DIR&lt;/strong&gt;: path to where audio-only downloads will be saved, if you wish to separate them from the video downloads. Defaults to the value of &lt;code&gt;DOWNLOAD_DIR&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CUSTOM_DIRS&lt;/strong&gt;: whether to enable downloading videos into custom directories within the &lt;strong&gt;DOWNLOAD_DIR&lt;/strong&gt; (or &lt;strong&gt;AUDIO_DOWNLOAD_DIR&lt;/strong&gt;). When enabled, a drop-down appears next to the Add button to specify the download directory. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CREATE_CUSTOM_DIRS&lt;/strong&gt;: whether to support automatically creating directories within the &lt;strong&gt;DOWNLOAD_DIR&lt;/strong&gt; (or &lt;strong&gt;AUDIO_DOWNLOAD_DIR&lt;/strong&gt;) if they do not exist. When enabled, the download directory selector becomes supports free-text input, and the specified directory will be created recursively. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;STATE_DIR&lt;/strong&gt;: path to where the queue persistence files will be saved. Defaults to &lt;code&gt;/downloads/.metube&lt;/code&gt; in the docker image, and &lt;code&gt;.&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;URL_PREFIX&lt;/strong&gt;: base path for the web server (for use when hosting behind a reverse proxy). Defaults to &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OUTPUT_TEMPLATE&lt;/strong&gt;: the template for the filenames of the downloaded videos, formatted according to &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/raw/master/README.md#output-template&#34;&gt;this spec&lt;/a&gt;. Defaults to &lt;code&gt;%(title)s.%(ext)s&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OUTPUT_TEMPLATE_CHAPTER&lt;/strong&gt;: the template for the filenames of the downloaded videos, when split into chapters via postprocessors. Defaults to &lt;code&gt;%(title)s - %(section_number)s %(section_title)s.%(ext)s&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;YTDL_OPTIONS&lt;/strong&gt;: Additional options to pass to youtube-dl, in JSON format. &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/raw/master/yt_dlp/YoutubeDL.py#L183&#34;&gt;See available options here&lt;/a&gt;. They roughly correspond to command-line options, though some do not have exact equivalents here, for example &lt;code&gt;--recode-video&lt;/code&gt; has to be specified via &lt;code&gt;postprocessors&lt;/code&gt;. Also note that dashes are replaced with underscores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following example value for &lt;code&gt;YTDL_OPTIONS&lt;/code&gt; embeds English subtitles and chapter markers (for videos that have them), and also changes the permissions on the downloaded video:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;writesubtitles&#34;: true, &#34;subtitleslangs&#34;: [&#34;en&#34;, &#34;-live_chat&#34;], &#34;postprocessors&#34;: [{&#34;key&#34;: &#34;Exec&#34;, &#34;exec_cmd&#34;: &#34;chmod 0664&#34;, &#34;when&#34;: &#34;after_move&#34;}, {&#34;key&#34;: &#34;FFmpegEmbedSubtitle&#34;, &#34;already_have_subtitle&#34;: false}, {&#34;key&#34;: &#34;FFmpegMetadata&#34;, &#34;add_chapters&#34;: true}]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using browser cookies&lt;/h2&gt; &#xA;&lt;p&gt;In case you need to use your browser&#39;s cookies with MeTube, for example to download restricted or private videos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the following to your docker-compose.yml:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    volumes:&#xA;      - /path/to/cookies:/cookies&#xA;    environment:&#xA;      - YTDL_OPTIONS={&#34;cookiefile&#34;:&#34;/cookies/cookies.txt&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install in your browser an extension to extract cookies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/export-cookies-txt/&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/get-cookiestxt/bgaddhkoddajcdgocldbbfleckgcbcid&#34;&gt;Chrome&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Extract the cookies you need with the extension and rename the file &lt;code&gt;cookies.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Drop the file in the folder you configured in the docker-compose.yml above&lt;/li&gt; &#xA; &lt;li&gt;Restart the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Browser extensions&lt;/h2&gt; &#xA;&lt;p&gt;Browser extensions allow right-clicking videos and sending them directly to MeTube. Please note that if you&#39;re on an HTTPS page, your MeTube instance must be behind an HTTPS reverse proxy (see below) for the extensions to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chrome:&lt;/strong&gt; contributed by &lt;a href=&#34;https://github.com/rpsl&#34;&gt;Rpsl&lt;/a&gt;. You can install it from &lt;a href=&#34;https://chrome.google.com/webstore/detail/metube-downloader/fbmkmdnlhacefjljljlbhkodfmfkijdh&#34;&gt;Google Chrome Webstore&lt;/a&gt; or use developer mode and install &lt;a href=&#34;https://github.com/Rpsl/metube-browser-extension&#34;&gt;from sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Firefox:&lt;/strong&gt; contributed by &lt;a href=&#34;https://github.com/nanocortex&#34;&gt;nanocortex&lt;/a&gt;. You can install it from &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/metube-downloader&#34;&gt;Firefox Addons&lt;/a&gt; or get sources from &lt;a href=&#34;https://github.com/nanocortex/metube-firefox-addon&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bookmarklet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kushfest&#34;&gt;kushfest&lt;/a&gt; has created a Chrome bookmarklet for sending the currently open webpage to MeTube. Please note that if you&#39;re on an HTTPS page, your MeTube instance must be behind an HTTPS reverse proxy (see below) for the bookmarklet to work.&lt;/p&gt; &#xA;&lt;p&gt;GitHub doesn&#39;t allow embedding JavaScript as a link, so the bookmarklet has to be created manually by copying the following code to a new bookmark you create on your bookmarks bar. Change the hostname in the URL below to point to your MeTube instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;javascript:!function(){xhr=new XMLHttpRequest();xhr.open(&#34;POST&#34;,&#34;https://metube.domain.com/add&#34;);xhr.send(JSON.stringify({&#34;url&#34;:document.location.href,&#34;quality&#34;:&#34;best&#34;}));xhr.onload=function(){if(xhr.status==200){alert(&#34;Sent to metube!&#34;)}else{alert(&#34;Send to metube failed. Check the javascript console for clues.&#34;)}}}();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shoonya75&#34;&gt;shoonya75&lt;/a&gt; has contributed a Firefox version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;javascript:(function(){xhr=new XMLHttpRequest();xhr.open(&#34;POST&#34;,&#34;https://metube.domain.com/add&#34;);xhr.send(JSON.stringify({&#34;url&#34;:document.location.href,&#34;quality&#34;:&#34;best&#34;}));xhr.onload=function(){if(xhr.status==200){alert(&#34;Sent to metube!&#34;)}else{alert(&#34;Send to metube failed. Check the javascript console for clues.&#34;)}}})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above bookmarklets use &lt;code&gt;alert()&lt;/code&gt; as a success/failure notification. The following will show a toast message instead:&lt;/p&gt; &#xA;&lt;p&gt;Chrome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;javascript:!function(){function notify(msg) {var sc = document.scrollingElement.scrollTop; var text = document.createElement(&#39;span&#39;);text.innerHTML=msg;var ts = text.style;ts.all = &#39;revert&#39;;ts.color = &#39;#000&#39;;ts.fontFamily = &#39;Verdana, sans-serif&#39;;ts.fontSize = &#39;15px&#39;;ts.backgroundColor = &#39;white&#39;;ts.padding = &#39;15px&#39;;ts.border = &#39;1px solid gainsboro&#39;;ts.boxShadow = &#39;3px 3px 10px&#39;;ts.zIndex = &#39;100&#39;;document.body.appendChild(text);ts.position = &#39;absolute&#39;; ts.top = 50 + sc + &#39;px&#39;; ts.left = (window.innerWidth / 2)-(text.offsetWidth / 2) + &#39;px&#39;; setTimeout(function () { text.style.visibility = &#34;hidden&#34;; }, 1500);}xhr=new XMLHttpRequest();xhr.open(&#34;POST&#34;,&#34;https://metube.domain.com/add&#34;);xhr.send(JSON.stringify({&#34;url&#34;:document.location.href,&#34;quality&#34;:&#34;best&#34;}));xhr.onload=function() { if(xhr.status==200){notify(&#34;Sent to metube!&#34;)}else {notify(&#34;Send to metube failed. Check the javascript console for clues.&#34;)}}}();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Firefox:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;javascript:(function(){function notify(msg) {var sc = document.scrollingElement.scrollTop; var text = document.createElement(&#39;span&#39;);text.innerHTML=msg;var ts = text.style;ts.all = &#39;revert&#39;;ts.color = &#39;#000&#39;;ts.fontFamily = &#39;Verdana, sans-serif&#39;;ts.fontSize = &#39;15px&#39;;ts.backgroundColor = &#39;white&#39;;ts.padding = &#39;15px&#39;;ts.border = &#39;1px solid gainsboro&#39;;ts.boxShadow = &#39;3px 3px 10px&#39;;ts.zIndex = &#39;100&#39;;document.body.appendChild(text);ts.position = &#39;absolute&#39;; ts.top = 50 + sc + &#39;px&#39;; ts.left = (window.innerWidth / 2)-(text.offsetWidth / 2) + &#39;px&#39;; setTimeout(function () { text.style.visibility = &#34;hidden&#34;; }, 1500);}xhr=new XMLHttpRequest();xhr.open(&#34;POST&#34;,&#34;https://metube.domain.com/add&#34;);xhr.send(JSON.stringify({&#34;url&#34;:document.location.href,&#34;quality&#34;:&#34;best&#34;}));xhr.onload=function() { if(xhr.status==200){notify(&#34;Sent to metube!&#34;)}else {notify(&#34;Send to metube failed. Check the javascript console for clues.&#34;)}}})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running behind a reverse proxy&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s advisable to run MeTube behind a reverse proxy, if authentication and/or HTTPS support are required.&lt;/p&gt; &#xA;&lt;p&gt;When running behind a reverse proxy which remaps the URL (i.e. serves MeTube under a subdirectory and not under root), don&#39;t forget to set the URL_PREFIX environment variable to the correct value.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using the &lt;a href=&#34;https://docs.linuxserver.io/general/swag&#34;&gt;linuxserver/swag&lt;/a&gt; image for your reverse proxying needs (which I can heartily recommend), it already includes ready snippets for proxying MeTube both in &lt;a href=&#34;https://github.com/linuxserver/reverse-proxy-confs/raw/master/metube.subfolder.conf.sample&#34;&gt;subfolder&lt;/a&gt; and &lt;a href=&#34;https://github.com/linuxserver/reverse-proxy-confs/raw/master/metube.subdomain.conf.sample&#34;&gt;subdomain&lt;/a&gt; modes under the &lt;code&gt;nginx/proxy-confs&lt;/code&gt; directory in the configuration volume. It also includes Authelia which can be used for authentication.&lt;/p&gt; &#xA;&lt;h3&gt;NGINX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;location /metube/ {&#xA;        proxy_pass http://metube:8081;&#xA;        proxy_http_version 1.1;&#xA;        proxy_set_header Upgrade $http_upgrade;&#xA;        proxy_set_header Connection &#34;upgrade&#34;;&#xA;        proxy_set_header Host $host;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: the extra &lt;code&gt;proxy_set_header&lt;/code&gt; directives are there to make WebSocket work.&lt;/p&gt; &#xA;&lt;h3&gt;Apache&lt;/h3&gt; &#xA;&lt;p&gt;Contributed by &lt;a href=&#34;https://github.com/PIE-yt&#34;&gt;PIE-yt&lt;/a&gt;. Source &lt;a href=&#34;https://gist.github.com/PIE-yt/29e7116588379032427f5bd446b2cac4&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;# For putting in your Apache sites site.conf&#xA;# Serves MeTube under a /metube/ subdir (http://yourdomain.com/metube/)&#xA;&amp;lt;Location /metube/&amp;gt;&#xA;    ProxyPass http://localhost:8081/ retry=0 timeout=30&#xA;    ProxyPassReverse http://localhost:8081/&#xA;&amp;lt;/Location&amp;gt;&#xA;&#xA;&amp;lt;Location /metube/socket.io&amp;gt;&#xA;    RewriteEngine On&#xA;    RewriteCond %{QUERY_STRING} transport=websocket    [NC]&#xA;    RewriteRule /(.*) ws://localhost:8081/socket.io/$1 [P,L]&#xA;    ProxyPass http://localhost:8081/socket.io retry=0 timeout=30&#xA;    ProxyPassReverse http://localhost:8081/socket.io&#xA;&amp;lt;/Location&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caddy&lt;/h3&gt; &#xA;&lt;p&gt;The following example Caddyfile gets a reverse proxy going behind &lt;a href=&#34;https://caddyserver.com&#34;&gt;caddy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-caddyfile&#34;&gt;example.com {&#xA;  route /metube/* {&#xA;    uri strip_prefix metube&#xA;    reverse_proxy metube:8081&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating yt-dlp&lt;/h2&gt; &#xA;&lt;p&gt;The engine which powers the actual video downloads in MeTube is &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;yt-dlp&lt;/a&gt;. Since video sites regularly change their layouts, frequent updates of yt-dlp are required to keep up.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s an automatic nightly build of MeTube which looks for a new version of yt-dlp, and if one exists, the build pulls it and publishes an updated docker image. Therefore, in order to keep up with the changes, it&#39;s recommended that you update your MeTube container regularly with the latest image.&lt;/p&gt; &#xA;&lt;p&gt;I recommend installing and setting up &lt;a href=&#34;https://github.com/containrrr/watchtower&#34;&gt;watchtower&lt;/a&gt; for this purpose.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting and submitting issues&lt;/h2&gt; &#xA;&lt;p&gt;Before asking a question or submitting an issue for MeTube, please remember that MeTube is only a UI for &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;yt-dlp&lt;/a&gt;. Any issues you might be experiencing with authentication to video websites, postprocessing, permissions, other &lt;code&gt;YTDL_OPTIONS&lt;/code&gt; configurations which seem not to work, or anything else that concerns the workings of the underlying yt-dlp library, need not be opened on the MeTube project. In order to debug and troubleshoot them, it&#39;s advised to try using the yt-dlp binary directly first, bypassing the UI, and once that is working, importing the options that worked for you into &lt;code&gt;YTDL_OPTIONS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to test with the yt-dlp command directly, you can either download it and run it locally, or for a better simulation of its actual conditions, you can run it within the MeTube container itself. Assuming your MeTube container is called &lt;code&gt;metube&lt;/code&gt;, run the following on your Docker host to get a shell inside the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -ti metube sh&#xA;cd /downloads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once there, you can use the yt-dlp command freely.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running locally&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have node.js and Python 3.8 installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd metube/ui&#xA;# install Angular and build the UI&#xA;npm install&#xA;node_modules/.bin/ng build&#xA;# install python dependencies&#xA;cd ..&#xA;pip3 install pipenv&#xA;pipenv install&#xA;# run&#xA;pipenv run python3 app/main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A Docker image can be built locally (it will build the UI too):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t metube .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The above works on Windows and macOS as well as Linux.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re running the server in VSCode, your downloads will go to your user&#39;s Downloads folder (this is configured via the environment in .vscode/launch.json).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xushengfeng/eSearch</title>
    <updated>2022-12-16T01:37:10Z</updated>
    <id>tag:github.com,2022-12-16:/xushengfeng/eSearch</id>
    <link href="https://github.com/xushengfeng/eSearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;截屏 离线OCR 搜索翻译 以图搜图 贴图 录屏 滚动截屏 Screenshot OCR search translate search for picture paste the picture on the screen screen recorder&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eSearch&lt;/h1&gt; &#xA;&lt;p&gt;(中文 | &lt;a href=&#34;https://raw.githubusercontent.com/xushengfeng/eSearch/master/README_en.md&#34;&gt;English&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://esearch.vercel.app/readme/title_photo.svg?sanitize=true&#34; alt=&#34;LOGO&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xushengfeng/eSearch/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/xushengfeng/eSearch&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-Windows%20%7C%20Linux%20%7C%20macOS-lightgrey&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/xushengfeng/eSearch/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/xushengfeng/eSearch&#34; alt=&#34;release-date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xushengfeng/eSearch/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/xushengfeng/eSearch&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xushengfeng/eSearch/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/xushengfeng/eSearch/total?color=brightgreen&amp;amp;label=%E6%80%BB%E4%B8%8B%E8%BD%BD%E9%87%8F&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/e-search&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/aur-e--search-blue?logo=archlinux&#34; alt=&#34;aur&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/e-search-git&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/aur-e--search--git-blue?logo=archlinux&#34; alt=&#34;aur1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;eSearch 是&lt;a href=&#34;https://github.com/xushengfeng/Information-portal.git&#34;&gt;Information-portal&lt;/a&gt;的&lt;img alt=&#34;electron&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/electron.png?v8&#34;&gt;)重写版(顺便加了亿些功能)&lt;/p&gt; &#xA;&lt;p&gt;主要是想在 Linux 上(win 和 mac 上也能用)实现&lt;a href=&#34;https://www.smartisan.com/pr/videos/bigbang-introduction&#34;&gt;锤子大爆炸&lt;/a&gt;或&lt;a href=&#34;https://www.miui.com/zt/miui9/index.html&#34;&gt;小米传送门&lt;/a&gt;这样的&lt;strong&gt;屏幕搜索&lt;/strong&gt;功能，当然也是一款方便的&lt;strong&gt;截屏软件&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;经过数次版本迭代，eSearch 的功能愈加丰富&lt;/p&gt; &#xA;&lt;p&gt;即拥有 &lt;strong&gt;截屏+OCR+搜索+翻译+贴图+以图搜图+录屏&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://esearch.vercel.app/readme/1.webp&#34; alt=&#34;截屏界面&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;字体是&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;FiraCode&lt;/a&gt;，字体可在设置里设置&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://esearch.vercel.app/readme/2.webp&#34; alt=&#34;识别文字主页面&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;下载安装&lt;/h2&gt; &#xA;&lt;p&gt;到网站&lt;a href=&#34;https://esearch.vercel.app/#download&#34;&gt;eSearch&lt;/a&gt;下载&lt;/p&gt; &#xA;&lt;p&gt;或在右侧 releases 打开标签，选择符合你系统的包并下载安装&lt;/p&gt; &#xA;&lt;p&gt;国内可以用&lt;a href=&#34;https://ghproxy.com&#34;&gt;GitHub Proxy&lt;/a&gt;加速下载&lt;/p&gt; &#xA;&lt;p&gt;ArchLinux 可在 AUR 查找安装 &lt;code&gt;e-search&lt;/code&gt;或&lt;code&gt;e-search-git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;winget &lt;code&gt;winget install esearch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OCR 服务&lt;/h2&gt; &#xA;&lt;p&gt;本地 OCR 由&lt;a href=&#34;https://github.com/PaddlePaddle/PaddleOCR&#34;&gt;PaddleOCR&lt;/a&gt;的模型提供支持。&lt;/p&gt; &#xA;&lt;p&gt;默认启用本地 OCR 服务，若想使用在线 OCR，目前提供了百度在线 OCR，需要依据&lt;a href=&#34;https://cloud.baidu.com/doc/OCR/s/dk3iqnq51&#34;&gt;教程&lt;/a&gt;获取&lt;em&gt;API KEY&lt;/em&gt; 以及 &lt;em&gt;Secret KEY&lt;/em&gt;，截止 2022 年 1 月，百度 OCR 还是可以&lt;a href=&#34;https://cloud.baidu.com/doc/OCR/s/dk3iqnq51&#34;&gt;免费领取服务&lt;/a&gt;。将获取到的&lt;em&gt;API KEY&lt;/em&gt; 和&lt;em&gt;Secret KEY&lt;/em&gt; 以及相应的你选择的文字识别服务&lt;a href=&#34;https://cloud.baidu.com/doc/OCR/s/zk3h7xz52#%E8%AF%B7%E6%B1%82%E8%AF%B4%E6%98%8E&#34;&gt;&lt;em&gt;URL&lt;/em&gt;&lt;/a&gt; 填入软件设置，去掉离线 OCR 的勾选即可使用在线 OCR。&lt;/p&gt; &#xA;&lt;h2&gt;源码运行&amp;amp;编译&lt;/h2&gt; &#xA;&lt;p&gt;编译需要&lt;code&gt;python&lt;/code&gt; 和 &lt;code&gt;C++&lt;/code&gt;环境，Windows 下编译需要 &lt;code&gt;python&lt;/code&gt; 和&lt;code&gt;visual studio&lt;/code&gt;（安装 C++）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/xushengfeng/eSearch.git&#xA;cd eSearch&#xA;npm install&#xA;# 运行&#xA;npm run start&#xA;# 调试&#xA;npm run dev&#xA;# 编译&#xA;npm run dist&#xA;# 将在build目录产生安装包和解压的目录&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;修改已安装的程序&lt;/h3&gt; &#xA;&lt;p&gt;先按下&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;I&lt;/kbd&gt;，或在菜单栏-识图-开发者工具 打开开发者工具进行调试。修改调试知道满意后，在对源码进行修改。&lt;/p&gt; &#xA;&lt;p&gt;源码位置：[设置里提示的运行位置]&lt;/p&gt; &#xA;&lt;h2&gt;启动&lt;/h2&gt; &#xA;&lt;p&gt;在你的启动器打开 eSearch，他将出现在托盘。Gnome 用户需要安装&lt;a href=&#34;https://extensions.gnome.org/extension/615/appindicator-support/&#34;&gt;appindicator&lt;/a&gt;插件&lt;/p&gt; &#xA;&lt;p&gt;默认快捷键为 &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;(你也可以在设置里设置快捷键)&lt;/p&gt; &#xA;&lt;h3&gt;cli&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;eSearch&lt;/strong&gt;支持 cli，可以通过命令行进行简单的截屏。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;esearch (若找不到，请尝试e-search)&#xA;&#x9;-a # 自动识别&#xA;&#x9;-c # 截屏搜索&#xA;&#x9;-s # 选中搜索&#xA;&#x9;-b # 剪贴板搜索&#xA;&#x9;-q # 快速截屏&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;不建议在终端进行自动或选中搜索，否则&lt;strong&gt;eSearch&lt;/strong&gt;会执行&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;，从而导致终止终端程序&lt;/p&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;p&gt;已经勾选的功能是开发过程最新功能，但可能还没发布在最新版本&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 截屏 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 框选裁切&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 框选大小位置可调整(支持方向键或 WASD)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 框选大小栏可输入四则运算式调整&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 取色器&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 放大镜&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 画笔（自由画笔）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 几何形状（边框填充支持调节）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 高级画板设置（使用 Fabric.js 的 api）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 图像滤镜（支持局部马赛克模糊和色彩调节）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自定义框选松开后的操作&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 快速截取全屏到剪贴板或自定义的目录&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 截屏历史记录&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 窗口和控件选择（使用 OpenCV 边缘识别）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 长截屏&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 多屏幕&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 录屏 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 录制全屏&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自定义大小&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 按键提示&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 光标位置提示&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 录制栏&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 流写入&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 录音&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 录制摄像头&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自定义比特率&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 保存（可选保存为 SVG 可编辑文件）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 其他应用打开&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 复制到剪贴板&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 钉在屏幕上 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 滚轮缩放&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 恢复默认大小位置&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 透明度&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 鼠标穿透&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 二维码识别&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OCR 识别 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 离线 OCR（&lt;a href=&#34;https://github.com/xushengfeng/eSearch-OCR&#34;&gt;eSearch-OCR&lt;/a&gt;）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自定义离线 OCR 模型和字典&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 其他在线 OCR&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 在线公式识别&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持自己申请秘钥&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 表格识别&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 以图搜图&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 托盘&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 划词句来搜索&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 识别展示 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自动搜索翻译&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 搜索&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 翻译&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自定义搜索翻译引擎&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自定义搜索翻译引擎（POST 模式，可用 Api）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 软件自带浏览器打开&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 跟随关闭、失焦关闭&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 系统浏览器打开&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 链接识别&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 历史记录&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自动删除换行（用于自动排版）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 查找替换（支持正则匹配）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 其他编辑器编辑（支持自动重载）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 行号&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 拼写检查&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Wayland 桌面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/28475549/155870834-34ffa59f-9eac-4eea-9d82-135681d7dfa9.mp4&#34;&gt;https://user-images.githubusercontent.com/28475549/155870834-34ffa59f-9eac-4eea-9d82-135681d7dfa9.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;截屏，自由调整框选大小（视频约 2.6MB）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/28475549/155870857-99c7d6d0-a90b-4558-872a-85f2603225d6.mp4&#34;&gt;https://user-images.githubusercontent.com/28475549/155870857-99c7d6d0-a90b-4558-872a-85f2603225d6.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;取色器（视频约 1MB）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/28475549/155870867-fb0d31f0-2e06-431c-9ae9-ee3af5a5c08e.mp4&#34;&gt;https://user-images.githubusercontent.com/28475549/155870867-fb0d31f0-2e06-431c-9ae9-ee3af5a5c08e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ding 在屏幕上，透明度调节、归位以及鼠标操作（视频约 1.8MB）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://esearch.vercel.app/readme/3.webp&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;绘图界面&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/28475549/155870881-9b2fc1b3-77de-4a99-8076-ed49b7b5c4c0.mp4&#34;&gt;https://user-images.githubusercontent.com/28475549/155870881-9b2fc1b3-77de-4a99-8076-ed49b7b5c4c0.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;主页面搜索和其他应用编辑（视频约 1.6MB）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://esearch.vercel.app/readme/4.webp&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;主页面查找替换（支持正则）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;国际化&lt;/h2&gt; &#xA;&lt;p&gt;大多数按钮使用图标，简少了不必要的翻译&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 简体中文&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 繁体中文&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 世界语&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 西班牙语&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 阿拉伯语&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 英语&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 法语&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 俄语&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;测试&lt;/h2&gt; &#xA;&lt;p&gt;在 ArchLinux,KDE plasma,Xorg 下测试通过&lt;/p&gt; &#xA;&lt;p&gt;Windows10 和 Windows11 测试通过&lt;/p&gt; &#xA;&lt;p&gt;macOS Catalina 测试通过&lt;/p&gt; &#xA;&lt;h2&gt;开发原因&lt;/h2&gt; &#xA;&lt;p&gt;我在用 Windows 时一直用这个好用的截屏软件：&lt;a href=&#34;https://zh.snipaste.com/&#34;&gt;Snipaste - 截图 + 贴图&lt;/a&gt;，但我现在切换到 Linux，Snipaste 不支持，所以我选择了&lt;a href=&#34;https://flameshot.org/&#34;&gt;Flameshot&lt;/a&gt;，很可惜它没有直观的取色器。&lt;/p&gt; &#xA;&lt;p&gt;促使我开发 eSearch 的另一个契机是我很享受在手机上使用&lt;a href=&#34;https://www.smartisan.com/pr/videos/bigbang-introduction&#34;&gt;锤子大爆炸&lt;/a&gt;或&lt;a href=&#34;https://www.miui.com/zt/miui9/index.html&#34;&gt;小米传送门&lt;/a&gt;这样的即时信息搜索工具，但我没有找到电脑上类似的代替品。&lt;/p&gt; &#xA;&lt;p&gt;所以我干脆自己开发一个“截屏+OCR+搜索+贴图”的软件。最开始用 python+pyqt 开发出&lt;a href=&#34;https://github.com/xushengfeng/Information-portal.git&#34;&gt;Information-portal&lt;/a&gt;，但因为我不熟悉 pyqt，所以我转战&lt;img alt=&#34;electron&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/electron.png?v8&#34;&gt;)，开发出本软件。😄&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xushengfeng/eSearch/master/LICENSE&#34;&gt;GPL-3.0&lt;/a&gt; © xushengfeng&lt;/p&gt;</summary>
  </entry>
</feed>