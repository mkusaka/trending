<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-07T01:47:36Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aws/graph-explorer</title>
    <updated>2023-01-07T01:47:36Z</updated>
    <id>tag:github.com,2023-01-07:/aws/graph-explorer</id>
    <link href="https://github.com/aws/graph-explorer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Graph Explorer&lt;/h1&gt; &#xA;&lt;p&gt;The Graph Explorer project provides a React-based web application that enables users to visualize both property graph and RDF data and explore connections between data without having to write graph queries. You can connect to a graph database that supports either the &lt;a href=&#34;https://www.w3.org/TR/sparql11-overview/&#34;&gt;W3C RDF/SPARQL&lt;/a&gt; open standard or the open source &lt;a href=&#34;https://tinkerpop.apache.org/&#34;&gt;Apache TinkerPop Gremlin Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get started, you can deploy Graph Explorer on a local machine using &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt;, or in the cloud using &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon EC2&lt;/a&gt; or a container service like &lt;a href=&#34;https://aws.amazon.com/ecs/&#34;&gt;Amazon ECS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/images/LPGIMDb.png&#34; alt=&#34;A sample image of property graph created by Graph Explorer&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/images/RDFEPL.png&#34; alt=&#34;A sample image of RDF graph created by Graph Explorer&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This project contains the code needed to create a Docker image of the Graph Explorer. The image will create the Graph Explorer application to communicate through port &lt;code&gt;5173&lt;/code&gt; and a proxy server through port &lt;code&gt;8182&lt;/code&gt;. The proxy server will be created automatically, but will only be necessary if you are connecting to Neptune. Gremlin-Server and BlazeGraph can be connected to directly. Additionally, the image will create a self-signed certificate that can be optionally used.&lt;/p&gt; &#xA;&lt;p&gt;There are many ways to deploy the Graph Explorer application. The following instructions detail how to deploy graph-explorer onto an Amazon EC2 instance and use it as a proxy server with SSH tunneling to connect to Amazon Neptune. Note that this README is not an official recommendation on network setups as there are many ways to connect to Amazon Neptune from outside of the VPC, such as setting up a load balancer or VPC peering.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provision an Amazon EC2 instance that will be used to host the application and connect to Neptune as a proxy server. For more details, see instructions &lt;a href=&#34;https://github.com/aws/graph-notebook/tree/main/additional-databases/neptune&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ensure the Amazon EC2 instance can send and receive on ports &lt;code&gt;22&lt;/code&gt; (SSH), &lt;code&gt;8182&lt;/code&gt; (Neptune), and &lt;code&gt;5173&lt;/code&gt; (graph-explorer).&lt;/li&gt; &#xA; &lt;li&gt;Open an SSH client and connect to the EC2 instance.&lt;/li&gt; &#xA; &lt;li&gt;Download and install the necessary command line tools such as &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps to install Graph Explorer:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To download the source project, run &lt;code&gt;git clone https://github.com/aws/graph-explorer/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To build the image, run &lt;code&gt;docker build --build-arg host={hostname-or-ip-address} -t graph-explorer .&lt;/code&gt; from the root directory.&lt;/li&gt; &#xA; &lt;li&gt;To run the image in a container, run &lt;code&gt;docker run -dit -p 5173:5173 -p 8182:8182 --name {container_name} graph-explorer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Now, open a browser and type in the public URL of your EC2 instance on port &lt;code&gt;5173&lt;/code&gt; (e.g., &lt;code&gt;https://ec2-1-2-3-4.us-east-1.compute.amazonaws.com:5173&lt;/code&gt;). You will receive a warning as the SSL certificate used is self-signed.&lt;/li&gt; &#xA; &lt;li&gt;Since the application is set to use HTTPS by default and contains a self-signed certificate, you will need to add the Graph Explorer certificates to the trusted certificates directory and manually trust them. See &lt;a href=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/#https-connections&#34;&gt;HTTPS Connections&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;After completing the trusted certification step and refreshing the browser, you should now see the Connections UI. See below description on Connections UI to configure your first connection to Amazon Neptune.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;em&gt;Connections UI:&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can create and manage connections to graph databases using this feature. Connections is accessible as the first screen after deploying the application, when you click &lt;code&gt;Open Connections&lt;/code&gt; on the top-right. Click &lt;code&gt;+&lt;/code&gt; on the top-right to add a new connection. You can also edit and delete connections.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add a new connection:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Enter a name for your connection (e.g., &lt;code&gt;MyNeptuneCluster&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Graph Type:&lt;/strong&gt; Choose a graph data model that corresponds to your graph database.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Public Endpoint:&lt;/strong&gt; Provide the publicly accessible endpoint URL for a graph database, e.g., Gremlin Server. If connecting to Amazon Neptune, then provide a proxy endpoint URL that is accessible from outside the VPC, e.g., EC2.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Public or proxy endpoint:&lt;/strong&gt; Provide the publicly accessible endpoint URL for a graph database, e.g., Gremlin Server. If connecting to Amazon Neptune, then provide a proxy endpoint URL that is accessible from outside the VPC, e.g., EC2. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; For connecting to Amazon Neptune, ensure that both the proxy endpoint and the graph connection URL begin with &lt;code&gt;https://&lt;/code&gt; and end with &lt;code&gt;:8182&lt;/code&gt;. Ensure that you don&#39;t end the URLs with &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Using proxy server:&lt;/strong&gt; Check this box if using a proxy endpoint.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Graph connection URL:&lt;/strong&gt; Provide the endpoint for the graph database&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;AWS IAM Auth Enabled:&lt;/strong&gt; Check this box if connecting to Amazon Neptune using IAM Auth and SigV4 signed requests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;AWS Region:&lt;/strong&gt; Specify the AWS region where the Neptune cluster is hosted (e.g., us-east-1)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Available Connections:&lt;/strong&gt; Once a connection is created, this section will appear as a left-hand pane. When you create more than one connection to a graph database, you can only connect to and visualize from one graph database endpoint at a time. To select the active database, toggle the “Active” switch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connection Details:&lt;/strong&gt; Once a connection is created, this section will appear as a right-hand information pane for a selected connection. It shows details such as the connection name, graph data model type, endpoint and a summary of the graph data, such as the count of nodes, edges, and a list of node types.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Last Synchronization:&lt;/strong&gt; When a connection is created, Graph Explorer will perform a scan of the graph to provide summary data. To re-synchronize after data has changed on your graph, select a connection, and then click the “refresh” button next to “Last Synchronization” text.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Explorer UI:&lt;/strong&gt; Under a listed node type, you can click on the ‘&amp;gt;’ arrow to get to the “Data Explorer” view. This allows you to see a sample list of nodes under this type and choose one or more nodes to “Send to Explorer” for getting started quickly if you are new to the data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;em&gt;Graph Explorer UI:&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can search, browse, expand, customize views of your graph data using Graph Explorer, which is the main UI of this application. Once you create a connection, you can click “Open Graph Explorer” on the top-right to navigate here. There are several key features on this UI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Top Bar UI:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Search bar:&lt;/strong&gt; If a user wants to start without using the Data Explorer, they can go directly to the search bar and use the search to visualize a starting node in the graph.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Toggles:&lt;/strong&gt; You can toggle to show/hide the Graph View and/or Table View for screen real-estate management.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Open Connections:&lt;/strong&gt; This takes the user back to Connections UI.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Graph View UI:&lt;/strong&gt; The graph visualization canvas that you can interact with. Double-click to expand the first-order neighbors of a node.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Layout drop-down &amp;amp; reset:&lt;/strong&gt; You can display graph data using standard graph layouts in the Graph View. You can use the circular arrow to reset the physics of a layout.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Screenshot:&lt;/strong&gt; Download a picture of the current window in Graph View.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Zoom In/Out &amp;amp; Clear:&lt;/strong&gt; To help users quickly zoom in/out or clear the whole canvas in the Graph View.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Legend (i):&lt;/strong&gt; This displays an informational list of icons, colors, and display names available.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Right-hand Pane UI:&lt;/strong&gt; There are 5-6 functions in the collapsible right-hand pane of Graph Explorer:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Details View&lt;/strong&gt; shows details about a selected node/edge such as properties etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Entities Filter&lt;/strong&gt; is used to control the display of nodes and edges that are already expanded in the Graph View; click to hide or show nodes/edges.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Expand&lt;/strong&gt; is used when expanding will result in 10+ neighbors and control the meaningful expansion. You will need to select a number as the limit to expand to. You can also add text filters for expansion.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Node Styling&lt;/strong&gt; of node display options (e.g., color, icon, the property to use for the displayed name).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Edge Styling&lt;/strong&gt; of edge display options (e.g., color, icon, the property to use for the displayed name).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Namespaces (RDF only):&lt;/strong&gt; This RDF-specific configuration feature allows you to shorten the display of Resource URIs within the app based on auto-generated prefixes, commonly-used prefix libraries, or custom prefixes set by the user. Order of priority is set to Custom &amp;gt; Common &amp;gt; Auto-generated.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Table View UI:&lt;/strong&gt; This collapsible view shows a row-column display of the data in the Graph View. You can use filters in the Table to show/hide elements in the Graph View, and you can export the table view into a CSV or JSON file. The following columns are available for filtering on property graphs (RDF graphs in parentheses):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Node ID (Resource URI)&lt;/li&gt; &#xA;   &lt;li&gt;Node Type (Class)&lt;/li&gt; &#xA;   &lt;li&gt;Edge Type (Predicate)&lt;/li&gt; &#xA;   &lt;li&gt;Source ID (Source URI)&lt;/li&gt; &#xA;   &lt;li&gt;Source Type (Source Class)&lt;/li&gt; &#xA;   &lt;li&gt;Target ID (Target URI)&lt;/li&gt; &#xA;   &lt;li&gt;Target Type (Target Class)&lt;/li&gt; &#xA;   &lt;li&gt;Display Name - Set in the Node/Edge Styling panes&lt;/li&gt; &#xA;   &lt;li&gt;Display Description - Set in the Node/Edge Styling panes&lt;/li&gt; &#xA;   &lt;li&gt;Total Neighbors - Enter an integer to be used as the &amp;gt;= limit&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Additional Table View UI Features&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visibility - manually show or hide nodes or edges&lt;/li&gt; &#xA;   &lt;li&gt;All Nodes / All Edges (or All Resources / All Predicates) dropdown - allows you to display a list of either nodes or edges and control display/filter on them&lt;/li&gt; &#xA;   &lt;li&gt;Download - You can download the current Table View as a CSV or JSON file with additional customization options&lt;/li&gt; &#xA;   &lt;li&gt;Default columns - You can set which columns you want to display&lt;/li&gt; &#xA;   &lt;li&gt;Paging of rows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connections&lt;/h2&gt; &#xA;&lt;p&gt;The Graph Explorer supports visualizing both &lt;strong&gt;property graphs&lt;/strong&gt; and &lt;strong&gt;RDF graphs&lt;/strong&gt;. You can connect to Amazon Neptune or you can also connect to open graph databases that implement an Apache TinkerPop Gremlin Server endpoint or the SPARQL 1.1 protocol, such as Blazegraph. For additional details on connecting to different graph databases, see &lt;a href=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/additionaldocs/connections.md&#34;&gt;Connections&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;For development guidance, see &lt;a href=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/additionaldocs/development.md&#34;&gt;Development&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;You can use the Graph Explorer to connect to a publicly accessible graph database endpoint, or connect to a proxy endpoint that redirects to a private graph database endpoint.&lt;/p&gt; &#xA;&lt;p&gt;Graph Explorer supports the HTTPS protocol by default and provides a self-signed certificate as part of the Docker image. You can choose to use HTTP instead by changing the &lt;a href=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/additionaldocs/development.md#environment-variables&#34;&gt;environment variable default settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;HTTPS Connections&lt;/h3&gt; &#xA;&lt;p&gt;If either of the Graph Explorer or the proxy-server are served over an HTTPS connection (which it is by default), you will have to bypass the warning message from the browser due to the included certificate being a self-signed certificate. You can bypass by manually ignoring them from the browser or downloading the correct certificate and configuring them to be trusted. Alternatively, you can provide your own certificate. The following instructions can be used as an example to bypass the warnings for Chrome, but note that different browsers and operating systems will have slightly different steps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the certificate directly from the browser. For example, if using Google Chrome, click the “Not Secure” section on the left of the URL bar and select “Certificate is not valid” to show the certificate. Then click Details tab and click Export at the bottom.&lt;/li&gt; &#xA; &lt;li&gt;Once you have the certificate, you will need to trust it on your machine. For MacOS, you can open the Keychain Access app. Select System under System Keychains. Then go to File &amp;gt; Import Items... and import the certificate you downloaded in the previous step.&lt;/li&gt; &#xA; &lt;li&gt;Once imported, select the certificate and right-click to select &#34;Get Info&#34;. Expand the Trust section, and change the value of &#34;When using this certificate&#34; to &#34;Always Trust&#34;.&lt;/li&gt; &#xA; &lt;li&gt;You should now refresh the browser and see that you can proceed to open the application. For Chrome, the application will remain “Not Secure” due to the fact that this is a self-signed certificate. If you have trouble accessing Graph Explorer after completing the previous step and reloading the browser, consider running a docker restart command and refreshing the browser again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: To get rid of the “Not Secure” warning, see &lt;a href=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/additionaldocs/development.md#using-self-signed-certificates-on-chrome&#34;&gt;Using self-signed certificates on Chrome&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Authentication for Amazon Neptune connections is enabled using the &lt;a href=&#34;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html&#34;&gt;SigV4 signing protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use AWS IAM authentication, you must run requests through a proxy endpoint, such as an EC2 instance, where credentials are resolved and where requests are signed.&lt;/p&gt; &#xA;&lt;p&gt;To set up a connection in Graph Explorer UI with AWS IAM auth enabled on Neptune, check Using Proxy-Server, then check AWS IAM Auth Enabled and type in the AWS Region where the Neptune cluster is hosted (e.g., us-east-1).&lt;/p&gt; &#xA;&lt;p&gt;For further information on how AWS credentials are resolved in Graph Explorer, refer to this &lt;a href=&#34;https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CredentialProviderChain.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aws/graph-explorer/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache-2.0 License.&lt;/p&gt;</summary>
  </entry>
</feed>