<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-02T01:38:25Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>actions/starter-workflows</title>
    <updated>2022-11-02T01:38:25Z</updated>
    <id>tag:github.com,2022-11-02:/actions/starter-workflows</id>
    <link href="https://github.com/actions/starter-workflows" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Accelerating new GitHub Actions workflows&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/44036562?s=100&amp;amp;v=4&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Starter Workflows&lt;/h2&gt; &#xA;&lt;p&gt;These are the workflow files for helping people get started with GitHub Actions. They&#39;re presented whenever you start to create a new GitHub Actions workflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you want to get started with GitHub Actions, you can use these starter workflows by clicking the &#34;Actions&#34; tab in the repository where you want to create a workflow.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://d3vv6lp55qjaqc.cloudfront.net/items/353A3p3Y2x3c2t2N0c01/Image%202019-08-27%20at%203.25.07%20PM.png&#34; max-width=&#34;75%&#34;&gt; &#xA;&lt;h3&gt;Directory structure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/starter-workflows/main/ci&#34;&gt;ci&lt;/a&gt;: solutions for Continuous Integration workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/starter-workflows/main/deployments&#34;&gt;deployments&lt;/a&gt;: solutions for Deployment workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/starter-workflows/main/automation&#34;&gt;automation&lt;/a&gt;: solutions for automating workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/starter-workflows/main/code-scanning&#34;&gt;code-scanning&lt;/a&gt;: solutions for &lt;a href=&#34;https://github.com/features/security&#34;&gt;Code Scanning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/starter-workflows/main/pages&#34;&gt;pages&lt;/a&gt;: solutions for Pages workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/starter-workflows/main/icons&#34;&gt;icons&lt;/a&gt;: svg icons for the relevant template&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each workflow must be written in YAML and have a &lt;code&gt;.yml&lt;/code&gt; extension. They also need a corresponding &lt;code&gt;.properties.json&lt;/code&gt; file that contains extra metadata about the workflow (this is displayed in the GitHub.com UI).&lt;/p&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;ci/django.yml&lt;/code&gt; and &lt;code&gt;ci/properties/django.properties.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Valid properties&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: the name shown in onboarding. This property is unique within the repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: the description shown in onboarding&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iconName&lt;/code&gt;: the icon name in the relevant folder, for example, &lt;code&gt;django&lt;/code&gt; should have an icon &lt;code&gt;icons/django.svg&lt;/code&gt;. Only SVG is supported at this time. Another option is to use &lt;a href=&#34;https://primer.style/octicons/&#34;&gt;octicon&lt;/a&gt;. The format to use an octicon is &lt;code&gt;octicon &amp;lt;&amp;lt;icon name&amp;gt;&amp;gt;&lt;/code&gt;. Example: &lt;code&gt;octicon person&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;creator&lt;/code&gt;: creator of the template shown in onboarding. All the workflow templates from an author will have the same &lt;code&gt;creator&lt;/code&gt; field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;categories&lt;/code&gt;: the categories that it will be shown under. Choose at least one category from the list &lt;a href=&#34;https://raw.githubusercontent.com/actions/starter-workflows/main/#categories&#34;&gt;here&lt;/a&gt;. Further, choose the categories from the list of languages available &lt;a href=&#34;https://github.com/github/linguist/raw/master/lib/linguist/languages.yml&#34;&gt;here&lt;/a&gt;. When a user views the available templates, those templates that match the same language will feature more prominently.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Categories&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;continuous-integration&lt;/li&gt; &#xA; &lt;li&gt;deployment&lt;/li&gt; &#xA; &lt;li&gt;testing&lt;/li&gt; &#xA; &lt;li&gt;code-quality&lt;/li&gt; &#xA; &lt;li&gt;code-review&lt;/li&gt; &#xA; &lt;li&gt;dependency-management&lt;/li&gt; &#xA; &lt;li&gt;monitoring&lt;/li&gt; &#xA; &lt;li&gt;Automation&lt;/li&gt; &#xA; &lt;li&gt;utilities&lt;/li&gt; &#xA; &lt;li&gt;Pages&lt;/li&gt; &#xA; &lt;li&gt;Hugo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;p&gt;These variables can be placed in the starter workflow and will be substituted as detailed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$default-branch&lt;/code&gt;: will substitute the branch from the repository, for example &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$protected-branches&lt;/code&gt;: will substitute any protected branches from the repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$cron-daily&lt;/code&gt;: will substitute a valid but random time within the day&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MomenSherif/react-oauth</title>
    <updated>2022-11-02T01:38:25Z</updated>
    <id>tag:github.com,2022-11-02:/MomenSherif/react-oauth</id>
    <link href="https://github.com/MomenSherif/react-oauth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google OAuth2 using the new Google Identity Services SDK for React 🚀&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React OAuth2 | Google&lt;/h1&gt; &#xA;&lt;p&gt;Google OAuth2 using the new &lt;a href=&#34;https://developers.google.com/identity/gsi/web&#34;&gt;&lt;strong&gt;Google Identity Services SDK&lt;/strong&gt;&lt;/a&gt; for React &lt;a href=&#34;https://www.npmjs.com/package/@react-oauth/google&#34;&gt;@react-oauth/google&lt;/a&gt;🚀&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install @react-oauth/google@latest&#xA;&#xA;# or&#xA;&#xA;$ yarn add @react-oauth/google@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://react-oauth.vercel.app/&#34;&gt;https://react-oauth.vercel.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Seamless sign-in and sign-up flows&lt;/h2&gt; &#xA;&lt;h3&gt;Sign In With Google&lt;/h3&gt; &#xA;&lt;p&gt;Add a personalized and customizable sign-up or sign-in button to your website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developers.google.com/identity/gsi/web/images/personalized-button-single_480.png&#34; alt=&#34;personalized button&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;One-tap sign-up&lt;/h3&gt; &#xA;&lt;p&gt;Sign up new users with just one tap, without interrupting them with a sign-up screen. Users get a secure, token-based, passwordless account on your site, protected by their Google Account.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developers.google.com/identity/gsi/web/images/one-tap-sign-in_480.png&#34; alt=&#34;One-tap sign-up&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Automatic sign-in&lt;/h3&gt; &#xA;&lt;p&gt;Sign users in automatically when they return to your site on any device or browser, even after their session expires.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developers.google.com/identity/gsi/web/images/auto-sign-in_480.png&#34; alt=&#34;Automatic sign-in&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;User authorization for Google APIs (with custom button)&lt;/h2&gt; &#xA;&lt;p&gt;OAuth 2.0 implicit and authorization code flows for web apps&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The Google Identity Services JavaScript library helps you to quickly and safely obtain access tokens necessary to call Google APIs. Your web application, complete either the OAuth 2.0 implicit flow, or to initiate the authorization code flow which then finishes on your backend platform.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get your &lt;a href=&#34;https://console.cloud.google.com/apis/dashboard&#34;&gt;&lt;strong&gt;Google API client ID&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Key Point: Add both &lt;code&gt;http://localhost&lt;/code&gt; and &lt;code&gt;http://localhost:&amp;lt;port_number&amp;gt;&lt;/code&gt; to the Authorized JavaScript origins box for local tests or development.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure your OAuth &lt;a href=&#34;https://console.cloud.google.com/apis/credentials/consent&#34;&gt;&lt;strong&gt;Consent Screen&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wrap your application with &lt;code&gt;GoogleOAuthProvider&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { GoogleOAuthProvider } from &#39;@react-oauth/google&#39;;&#xA;&#xA;&amp;lt;GoogleOAuthProvider clientId=&#34;&amp;lt;your_client_id&amp;gt;&#34;&amp;gt;...&amp;lt;/GoogleOAuthProvider&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sign In With Google&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { GoogleLogin } from &#39;@react-oauth/google&#39;;&#xA;&#xA;&amp;lt;GoogleLogin&#xA;  onSuccess={credentialResponse =&amp;gt; {&#xA;    console.log(credentialResponse);&#xA;  }}&#xA;  onError={() =&amp;gt; {&#xA;    console.log(&#39;Login Failed&#39;);&#xA;  }}&#xA;/&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;One-tap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { useGoogleOneTapLogin } from &#39;@react-oauth/google&#39;;&#xA;&#xA;useGoogleOneTapLogin({&#xA;  onSuccess: credentialResponse =&amp;gt; {&#xA;    console.log(credentialResponse);&#xA;  },&#xA;  onError: () =&amp;gt; {&#xA;    console.log(&#39;Login Failed&#39;);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { GoogleLogin } from &#39;@react-oauth/google&#39;;&#xA;&#xA;&amp;lt;GoogleLogin&#xA;  onSuccess={credentialResponse =&amp;gt; {&#xA;    console.log(credentialResponse);&#xA;  }}&#xA;  onError={() =&amp;gt; {&#xA;    console.log(&#39;Login Failed&#39;);&#xA;  }}&#xA;  useOneTap&#xA;/&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using one tap login, when logging user out consider &lt;a href=&#34;https://developers.google.com/identity/gsi/web/guides/automatic-sign-in-sign-out#sign-out&#34;&gt;this issue&lt;/a&gt; may happen, to prevent it call &lt;code&gt;googleLogout&lt;/code&gt; when logging user out from your application.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { googleLogout } from &#39;@react-oauth/google&#39;;&#xA;&#xA;googleLogout();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatic sign-in&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;auto_select&lt;/code&gt; prop &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&#xA;&amp;lt;GoogleLogin&#xA;    ...&#xA;    auto_select&#xA;/&amp;gt;&#xA;&#xA;useGoogleOneTapLogin({&#xA;    ...&#xA;    auto_select&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom login button (implicit &amp;amp; authorization code flow)&lt;/h3&gt; &#xA;&lt;h4&gt;Implicit flow&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { useGoogleLogin } from &#39;@react-oauth/google&#39;;&#xA;&#xA;const login = useGoogleLogin({&#xA;  onSuccess: tokenResponse =&amp;gt; console.log(tokenResponse),&#xA;});&#xA;&#xA;&amp;lt;MyCustomButton onClick={() =&amp;gt; login()}&amp;gt;&#xA;  Sign in with Google 🚀{&#39; &#39;}&#xA;&amp;lt;/MyCustomButton&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Authorization code flow&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires backend to exchange code with access and refresh token.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { useGoogleLogin } from &#39;@react-oauth/google&#39;;&#xA;&#xA;const login = useGoogleLogin({&#xA;  onSuccess: codeResponse =&amp;gt; console.log(codeResponse),&#xA;  flow: &#39;auth-code&#39;,&#xA;});&#xA;&#xA;&amp;lt;MyCustomButton onClick={() =&amp;gt; login()}&amp;gt;&#xA;  Sign in with Google 🚀{&#39; &#39;}&#xA;&amp;lt;/MyCustomButton&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Checks if the user granted all the specified scope or scopes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { hasGrantedAllScopesGoogle } from &#39;@react-oauth/google&#39;;&#xA;&#xA;const hasAccess = hasGrantedAllScopesGoogle(&#xA;  tokenResponse,&#xA;  &#39;google-scope-1&#39;,&#xA;  &#39;google-scope-2&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Checks if the user granted any of the specified scope or scopes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { hasGrantedAnyScopeGoogle } from &#39;@react-oauth/google&#39;;&#xA;&#xA;const hasAccess = hasGrantedAnyScopeGoogle(&#xA;  tokenResponse,&#xA;  &#39;google-scope-1&#39;,&#xA;  &#39;google-scope-2&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;GoogleOAuthProvider&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;clientId&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://console.cloud.google.com/apis/dashboard&#34;&gt;&lt;strong&gt;Google API client ID&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;onScriptLoadSuccess&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires on load gsi script success&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;onScriptLoadError&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires on load gsi script failure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;GoogleLogin&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;onSuccess&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(response: CredentialResponse) =&amp;gt; void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires with credential response after successfully login&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;onError&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires after login failure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;standard&lt;/code&gt; | &lt;code&gt;icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Button type &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#type&#34;&gt;type&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;theme&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;outline&lt;/code&gt; | &lt;code&gt;filled_blue&lt;/code&gt; | &lt;code&gt;filled_black&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Button &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#theme&#34;&gt;theme&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;size&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;large&lt;/code&gt; | &lt;code&gt;medium&lt;/code&gt; | &lt;code&gt;small&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Button &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#size&#34;&gt;size&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;signin_with&lt;/code&gt; | &lt;code&gt;signup_with&lt;/code&gt; | &lt;code&gt;continue_with&lt;/code&gt; | &lt;code&gt;signin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Button &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#text&#34;&gt;text&lt;/a&gt;. For example, &#34;Sign in with Google&#34;, &#34;Sign up with Google&#34; or &#34;Sign in&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;shape&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rectangular&lt;/code&gt; | &lt;code&gt;pill&lt;/code&gt; | &lt;code&gt;circle&lt;/code&gt; | &lt;code&gt;square&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Button &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#shape&#34;&gt;shape&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;logo_alignment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left&lt;/code&gt; | &lt;code&gt;center&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#logo_alignment&#34;&gt;logo alignment&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;width&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;button &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#width&#34;&gt;width&lt;/a&gt;, in pixels&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;locale&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set, then the button &lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference#locale&#34;&gt;language&lt;/a&gt; is rendered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;useOneTap&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Activate One-tap sign-up or not&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;promptMomentNotification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(notification: PromptMomentNotification) =&amp;gt; void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference&#34;&gt;PromptMomentNotification&lt;/a&gt; methods and description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cancel_on_tap_outside&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Controls whether to cancel the prompt if the user clicks outside of the prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;auto_select&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables automatic selection on Google One Tap&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ux_mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;popup&lt;/code&gt; | &lt;code&gt;redirect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Sign In With Google button UX flow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;login_uri&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL of your login endpoint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;native_login_uri&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL of your password credential handler endpoint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;native_callback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(response: { id: string; password: string }) =&amp;gt; void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The JavaScript password credential handler function name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prompt_parent_id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The DOM ID of the One Tap prompt container element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;nonce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A random string for ID tokens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;context&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;signin&lt;/code&gt; | &lt;code&gt;signup&lt;/code&gt; | &lt;code&gt;use&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The title and words in the One Tap prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;state_cookie_domain&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If you need to call One Tap in the parent domain and its subdomains, pass the parent domain to this attribute so that a single shared cookie is used&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;allowed_parent_origin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; | &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The origins that are allowed to embed the intermediate iframe. One Tap will run in the intermediate iframe mode if this attribute presents&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;intermediate_iframe_close_callback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Overrides the default intermediate iframe behavior when users manually close One Tap&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;itp_support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables upgraded One Tap UX on ITP browsers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hosted_domain&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If your application knows the Workspace domain the user belongs to, use this to provide a hint to Google. For more information, see the &lt;a href=&#34;https://developers.google.com/identity/protocols/oauth2/openid-connect#authenticationuriparameters&#34;&gt;hd&lt;/a&gt; field in the OpenID Connect docs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;useGoogleLogin (Both implicit &amp;amp; authorization code flow)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;flow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;implicit&lt;/code&gt; | &lt;code&gt;auth-code&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/identity/oauth2/web/guides/how-user-authz-works&#34;&gt;Two flows&lt;/a&gt;, implicit and authorization code are discussed. Both return an access token suitable for use with Google APIs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;onSuccess&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(response: TokenResponse|CodeResponse) =&amp;gt; void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires with response (&lt;a href=&#34;https://developers.google.com/identity/oauth2/web/reference/js-reference#TokenResponse&#34;&gt;token&lt;/a&gt; | &lt;a href=&#34;https://developers.google.com/identity/oauth2/web/reference/js-reference#CodeResponse&#34;&gt;code&lt;/a&gt;) based on flow selected after successfully login&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;onError&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(errorResponse: {error: string; error_description?: string,error_uri?: string}) =&amp;gt; void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires after login failure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scope&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A space-delimited list of scopes that are approved by the user&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enable_serial_consent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;defaults to true. If set to false, &lt;a href=&#34;https://developers.googleblog.com/2018/10/more-granular-google-account.html&#34;&gt;more granular Google Account permissions&lt;/a&gt; will be disabled for clients created before 2019. No effect for newer clients, since more granular permissions is always enabled for them.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If your application knows which user should authorize the request, it can use this property to provide a hint to Google. The email address for the target user. For more information, see the &lt;a href=&#34;https://developers.google.com/identity/protocols/oauth2/openid-connect#authenticationuriparameters&#34;&gt;login_hint&lt;/a&gt; field in the OpenID Connect docs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hosted_domain&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If your application knows the Workspace domain the user belongs to, use this to provide a hint to Google. For more information, see the &lt;a href=&#34;https://developers.google.com/identity/protocols/oauth2/openid-connect#authenticationuriparameters&#34;&gt;hd&lt;/a&gt; field in the OpenID Connect docs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;useGoogleLogin (Extra implicit flow props)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prompt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;&#39;&lt;/code&gt; | &lt;code&gt;none&lt;/code&gt; | &lt;code&gt;consent&lt;/code&gt; | &lt;code&gt;select_account&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &#39;select_account&#39;. A space-delimited, case-sensitive list of prompts to present the user&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;state&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not recommended. Specifies any string value that your application uses to maintain state between your authorization request and the authorization server&#39;s response&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;useGoogleLogin (Extra authorization code flow props)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ux_mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;popup&lt;/code&gt; | &lt;code&gt;redirect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The UX mode to use for the authorization flow. By default, it will open the consent flow in a popup. Valid values are popup and redirect&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;redirect_uri&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Required for redirect UX. Determines where the API server redirects the user after the user completes the authorization flow The value must exactly match one of the authorized redirect URIs for the OAuth 2.0 client which you configured in the API Console and must conform to our &lt;a href=&#34;https://developers.google.com/identity/protocols/oauth2/web-server#uri-validation&#34;&gt;Redirect URI validation&lt;/a&gt; rules. The property will be ignored by the popup UX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;state&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Recommended for redirect UX. Specifies any string value that your application uses to maintain state between your authorization request and the authorization server&#39;s response&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;select_account&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;defaults to &#39;false&#39;. Boolean value to prompt the user to select an account&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;useGoogleOneTapLogin&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;onSuccess&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(response: CredentialResponse) =&amp;gt; void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires with credential response after successfully login&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;onError&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback fires after login failure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;promptMomentNotification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(notification: PromptMomentNotification) =&amp;gt; void&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/identity/gsi/web/reference/js-reference&#34;&gt;PromptMomentNotification&lt;/a&gt; methods and description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cancel_on_tap_outside&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Controls whether to cancel the prompt if the user clicks outside of the prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hosted_domain&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If your application knows the Workspace domain the user belongs to, use this to provide a hint to Google. For more information, see the &lt;a href=&#34;https://developers.google.com/identity/protocols/oauth2/openid-connect#authenticationuriparameters&#34;&gt;hd&lt;/a&gt; field in the OpenID Connect docs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>hellof2e/quark-design</title>
    <updated>2022-11-02T01:38:25Z</updated>
    <id>tag:github.com,2022-11-02:/hellof2e/quark-design</id>
    <link href="https://github.com/hellof2e/quark-design" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next generation Frontend component library, it can be used in any framework or no framework at the same time.(下一代前端组件库，它可以同时在任意框架或无框架中使用。)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://quark-design.hellobike.com/&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://user-images.githubusercontent.com/14307551/197440754-08db4379-eb0f-4808-890d-690355e6e8d2.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Quark Design&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;An enterprise-class UI design language and cross-framework UI library, Based on web components.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;del&gt;Wechat(微信交流/沟通群)，欢迎提意见或建议，有机会获取周边礼品🎁～, 若群已满请加右侧微信拉你入群&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;微信群已满员，请添加下面管理员拉你入群谢谢～&lt;/p&gt; &#xA;&lt;div style=&#34;display:flex;&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/14307551/198974064-8d02f3af-3cef-4f89-8744-bb860dd56121.png&#34; width=&#34;230&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/hellof2e/quark-design/main/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The emergence of the technical framework has improved the development experience and page performance, but the continuous iterative update of the technical framework has brought many challenges to the maintenance of the project, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual components cannot be used across technical frameworks (React, Vue, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Once the technical framework is upgraded, visual components often have to be upgraded iteratively&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Therefore, we developed this UI framework to isolate it from the technology framework (no technology stack), so that visual components can avoid falling into the vicious circle of technology stack iteration and iteration.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support Vue, React, Angular, JQ and no framework project&lt;/li&gt; &#xA; &lt;li&gt;40+ High quality components&lt;/li&gt; &#xA; &lt;li&gt;Support Tree Shaking&lt;/li&gt; &#xA; &lt;li&gt;90%+ Unit test coverage&lt;/li&gt; &#xA; &lt;li&gt;Written in TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Support TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Support Custom Theme&lt;/li&gt; &#xA; &lt;li&gt;Support i18n, built-in 20+ languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component Library&lt;/th&gt; &#xA;   &lt;th&gt;CDN&lt;/th&gt; &#xA;   &lt;th&gt;Import on demand&lt;/th&gt; &#xA;   &lt;th&gt;Build tools&lt;/th&gt; &#xA;   &lt;th&gt;Typescript&lt;/th&gt; &#xA;   &lt;th&gt;open source time&lt;/th&gt; &#xA;   &lt;th&gt;Support technology stack/framework&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Quark&lt;/td&gt; &#xA;   &lt;td&gt;80.1kb&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;Rollup&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;2022&lt;/td&gt; &#xA;   &lt;td&gt;Vue/React/Angular/JQ/Svelte/no framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vant&lt;/td&gt; &#xA;   &lt;td&gt;183kb&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;Vite(Vant-cli)&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;2017&lt;/td&gt; &#xA;   &lt;td&gt;Vue only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nutui&lt;/td&gt; &#xA;   &lt;td&gt;275.5kb&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;Vite&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;2018&lt;/td&gt; &#xA;   &lt;td&gt;Vue only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TDesign Mobile&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;Gulp&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;2021&lt;/td&gt; &#xA;   &lt;td&gt;React only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Antd Mobile&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;Gulp&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;2016&lt;/td&gt; &#xA;   &lt;td&gt;React only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;npm&lt;/code&gt; to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install for Vue/React/Angular/No framework project&#xA;npm i quarkd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#  install for React project&#xA;npm i @quarkd/quark-react --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Vue.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// 1. Import the components you need&#xA;import &#34;quarkd/lib/button&#34;&#xA;&#xA;// 2. Use it&#xA;&amp;lt;quark-button type=&#34;primary&#34;&amp;gt;Button&amp;lt;/quark-button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;React.x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// 1. Import the components you need&#xA;import { Button } from &#39;@quarkd/quark-react&#39;;&#xA;&#xA;// 2. Use it&#xA;const App = () =&amp;gt; (&#xA;  &amp;lt;&amp;gt;&#xA;    &amp;lt;Button type=&#34;primary&#34;&amp;gt;Button&amp;lt;/Button&amp;gt;&#xA;  &amp;lt;/&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Angular&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// 1. Import the components you need&#xA;import &#34;quarkd/lib/button&#34;&#xA;&#xA;// 2. Use it&#xA;@Component({&#xA;  template: `&amp;lt;quark-button loading=&#34;{{loading}}&#34;&#34; (click)=&#34;handleClick()&#34;&amp;gt;&#xA;    Button&#xA;  &amp;lt;/quark-button&amp;gt;`&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No framework project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;  &amp;lt;quark-button loading=&#34;false&#34; id=&#34;btn&#34;&amp;gt;Button&amp;lt;/quark-button&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&#xA;&amp;lt;script src=&#34;./node_modules/quarkd/lib/button/index.js&#34; /&amp;gt; // or cdn&#xA;&amp;lt;script&amp;gt;&#xA;  window.addEventListener(function() {&#xA;    const el = document.getElementById(&#39;btn&#39;)&#xA;    el.loading = true&#xA;    setTimeout(() =&amp;gt; { el.loading = true }, 2000);&#xA;  })&#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom theme&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://quark-design.hellobike.com/#/zh-CN/guide/theme&#34;&gt;custom theme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Internationalization&lt;/h2&gt; &#xA;&lt;p&gt;Dozens of languages supported in, see &lt;a href=&#34;https://quark-design.hellobike.com/#/en-US/guide/internationalization&#34;&gt;Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;p&gt;Modern browsers and Internet Explorer 11 (with &lt;a href=&#34;https://www.webcomponents.org/polyfills&#34;&gt;polyfills&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guide&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure to read the &lt;a href=&#34;https://github.com/hellof2e/quark-design/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Special Note&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since the components provided by &lt;code&gt;quarkd&lt;/code&gt; are all native custom elements (analogous to div), the events dispatched by the components need to be received using addEventListener.&lt;/li&gt; &#xA; &lt;li&gt;The Vue stack uses &lt;code&gt;@xx&lt;/code&gt; to receive natively dispatched events, so there is no need to use addEventListener to receive them.&lt;/li&gt; &#xA; &lt;li&gt;For the React technology stack, in order to avoid developers manually addingEventLisener to receive events, we rely on &lt;code&gt;quarkd&lt;/code&gt; at the bottom and Reactify (Reactize) the upper layer! Therefore the React project recommends using &lt;code&gt;@quarkd/quark-react&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pay attention&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unknown custom element in Vue project:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- vue2: --&amp;gt;&#xA;Unknown custom element: &amp;lt;quark-icon&amp;gt; - did you register the component correctly? For recursive components, make sure to provide the &#34;name&#34; option.&#xA;&amp;lt;!-- vue3 --&amp;gt;&#xA;[Vue warn]: Failed to resolve component: quark-icon &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is because the syntax part of Vue components refers to custom elements. In order to avoid conflicts with Vue components, custom elements need to be ignored! Please inject the following code into the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// VUE2.x&#xA;Vue.config.ignoredElements = [/^quark-/]&#xA;&#xA;// VUE3.x&#xA;// https://v3.cn.vuejs.org/guide/migration/global-api.html#config-productiontip-%E7%A7%BB%E9%99%A4&#xA;const app = createApp({})&#xA;app.config.compilerOptions.isCustomElement = tag =&amp;gt; tag.startsWith(&#39;quark-&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using vite, modify vite.config.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import vue from &#39;@vitejs/plugin-vue&#39;&#xA;&#xA;export default {&#xA;  plugins: [&#xA;    vue({&#xA;      template: {&#xA;        compilerOptions: {&#xA;          isCustomElement: tag =&amp;gt; tag.startsWith(&#39;quark-&#39;)&#xA;        }&#xA;      }&#xA;    })&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;!-- readme: collaborators,contributors -start --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/xxxsf&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/14307551?v=4&#34; width=&#34;100;&#34; alt=&#34;xxxsf&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Xsf&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/yuhaiyang1&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/23181320?v=4&#34; width=&#34;100;&#34; alt=&#34;yuhaiyang1&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Yhy&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/sanqi-med&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/18179784?v=4&#34; width=&#34;100;&#34; alt=&#34;sanqi-med&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Sanqi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/zhuokuang&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/58252152?v=4&#34; width=&#34;100;&#34; alt=&#34;zhuokuang&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Zhuokuang&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/amadeus711&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/46394163?v=4&#34; width=&#34;100;&#34; alt=&#34;amadeus711&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;XieZongChen&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Er1c0&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/8493372?v=4&#34; width=&#34;100;&#34; alt=&#34;Er1c0&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Er1c0&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/gaoxiaoduan&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/69953511?v=4&#34; width=&#34;100;&#34; alt=&#34;gaoxiaoduan&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Coderduan&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/hbf2e&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/114655901?v=4&#34; width=&#34;100;&#34; alt=&#34;hbf2e&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Hbf2e&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/houhoz&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/19684376?v=4&#34; width=&#34;100;&#34; alt=&#34;houhoz&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Hyzhao&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/novaalone&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/18064759?v=4&#34; width=&#34;100;&#34; alt=&#34;novaalone&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Novaalone&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/olivewind&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/17901361?v=4&#34; width=&#34;100;&#34; alt=&#34;olivewind&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Olivewind&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- readme: collaborators,contributors -end --&gt;</summary>
  </entry>
</feed>