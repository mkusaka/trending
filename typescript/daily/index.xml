<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T01:47:23Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glacambre/firenvim</title>
    <updated>2023-01-08T01:47:23Z</updated>
    <id>tag:github.com,2023-01-08:/glacambre/firenvim</id>
    <link href="https://github.com/glacambre/firenvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embed Neovim in Chrome, Firefox &amp; others.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Firenvim &lt;a href=&#34;https://github.com/glacambre/firenvim/actions?workflow=Test&#34;&gt;&lt;img src=&#34;https://github.com/glacambre/firenvim/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/glacambre/firenvim/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/glacambre/firenvim.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/glacambre/firenvim/actions?workflow=Vint&#34;&gt;&lt;img src=&#34;https://github.com/glacambre/firenvim/workflows/Vint/badge.svg?sanitize=true&#34; alt=&#34;Vint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/glacambre/firenvim/actions?workflow=Luacheck&#34;&gt;&lt;img src=&#34;https://github.com/glacambre/firenvim/workflows/Luacheck/badge.svg?sanitize=true&#34; alt=&#34;Luacheck&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.element.io/#/room/#firenvim:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/firenvim:matrix.org&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/glacambre/firenvim/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/wiki-open-brightgreen&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Turn your browser¹ into a Neovim client (demos: &lt;a href=&#34;https://www.youtube.com/watch?v=suvh0yFfIB8&#34;&gt;justinmk 🇺🇸&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=dNQJONKnJrg&#34;&gt;Sean Feng 🇨🇳&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;¹ &lt;sub&gt;Firefox and Chrome are specifically supported. Other Chromium based browsers such as Brave, Vivaldi, and Opera should also work but are not specifically tested.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/glacambre/firenvim/master/firenvim.gif&#34; alt=&#34;Firenvim demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Just click on any textarea and it will be immediately replaced by an instance of Firenvim. To set the content of the now hidden textarea to the content of the Neovim instance, simply &lt;code&gt;:w&lt;/code&gt;. If you want to close the Firenvim overlay and return to the textarea, use &lt;code&gt;:q&lt;/code&gt;. If you selected an element where you expected the Firenvim frame to appear and it didn&#39;t, try pressing &lt;code&gt;&amp;lt;C-e&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Before installing anything please read &lt;a href=&#34;https://raw.githubusercontent.com/glacambre/firenvim/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; and make sure you&#39;re okay with everything mentioned. In the event you think of a way to compromise Firenvim, please send me an email (you can find my address in my commits).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you are using &lt;a href=&#34;https://neovim.io&#34;&gt;Neovim&lt;/a&gt; 0.6.0 or later. This plugin will not work with vanilla &lt;a href=&#34;https://www.vim.org&#34;&gt;VIM&lt;/a&gt; or &lt;a href=&#34;https://github.com/qvacua/vimr&#34;&gt;Vimr&lt;/a&gt;. Also make sure that your browser hasn&#39;t been installed with Snap or Flatpak - these prevent Firenvim from starting Neovim.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Firenvim as a VIM plugin as you would any other, then run the built-in post-install script.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;glacambre/firenvim&#39;, { &#39;do&#39;: { _ -&amp;gt; firenvim#install(0) } }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;glacambre/firenvim&#39;, { &#39;hook_post_update&#39;: { _ -&amp;gt; firenvim#install(0) } })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;glacambre/firenvim&#39;,&#xA;    run = function() vim.fn[&#39;firenvim#install&#39;](0) end &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/k-takata/minpac&#34;&gt;minpac&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call minpac#add(&#39;glacambre/firenvim&#39;, { &#39;type&#39;: &#39;opt&#39;, &#39;do&#39;: &#39;packadd firenvim | call firenvim#install(0)&#39;})&#xA;if exists(&#39;g:started_by_firenvim&#39;)&#xA;  packadd firenvim&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;pathogen&lt;/a&gt;, &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;vundle&lt;/a&gt;, others&lt;/p&gt; &lt;p&gt;Install the plugin as you usually would, then run this shell command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvim --headless &#34;+call firenvim#install(0) | q&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, install the Firenvim addon for your browser from &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/firenvim/&#34;&gt;Mozilla&#39;s store&lt;/a&gt; or &lt;a href=&#34;https://chrome.google.com/webstore/detail/firenvim/egpjdkipkomnmjhjmdamaniclmdlobbo&#34;&gt;Google&#39;s&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you would rather build and install Firenvim from source, check &lt;a href=&#34;https://raw.githubusercontent.com/glacambre/firenvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Other browsers&lt;/h4&gt; &#xA;&lt;p&gt;Other browsers aren&#39;t supported for now. Opera, Vivaldi and other Chromium-based browsers should however work just like in Chromium and have similar install steps. Brave and Edge might work, Safari doesn&#39;t (it doesn&#39;t support Webextensions).&lt;/p&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;Firenvim currently requires the following permissions for the following reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.mozilla.org/en-US/kb/permission-request-messages-firefox-extensions?as=u&amp;amp;utm_source=inproduct#w_access-your-data-for-all-websites&#34;&gt;Access your data for all websites&lt;/a&gt;: this is necessary in order to be able to append elements (= the neovim iframe) to the DOM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.mozilla.org/en-US/kb/permission-request-messages-firefox-extensions?as=u#w_exchange-messages-with-programs-other-than-firefox&#34;&gt;Exchange messages with programs other than Firefox&lt;/a&gt;: this is necessary in order to be able to start neovim instances.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring Firenvim&lt;/h2&gt; &#xA;&lt;h3&gt;Manually triggering Firenvim&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the keybinding to manually trigger Firenvim (&lt;code&gt;&amp;lt;C-e&amp;gt;&lt;/code&gt; by default) in &lt;a href=&#34;https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox&#34;&gt;the shortcuts menu in &lt;code&gt;about://addons&lt;/code&gt;&lt;/a&gt; on Firefox, or in &lt;code&gt;chrome://extensions/shortcuts&lt;/code&gt; on Chrome.&lt;/p&gt; &#xA;&lt;h3&gt;Temporarily disabling Firenvim in a tab&lt;/h3&gt; &#xA;&lt;p&gt;Temporarily disabling (and re-enabling) Firenvim in a tab can be done either by clicking on the Firenvim button next to the urlbar or by configuring a browser shortcut (see the previous section to find out how browser shortcuts can be configured).&lt;/p&gt; &#xA;&lt;h3&gt;Building a Firenvim-specific config&lt;/h3&gt; &#xA;&lt;p&gt;When it starts Neovim, Firenvim sets the variable &lt;code&gt;g:started_by_firenvim&lt;/code&gt; which you can check to run different code in your init.vim. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;if exists(&#39;g:started_by_firenvim&#39;)&#xA;  set laststatus=0&#xA;else&#xA;  set laststatus=2&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can detect when Firenvim connects to Neovim by using the &lt;code&gt;UIEnter&lt;/code&gt; autocmd event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;function! OnUIEnter(event) abort&#xA;  if &#39;Firenvim&#39; ==# get(get(nvim_get_chan_info(a:event.chan), &#39;client&#39;, {}), &#39;name&#39;, &#39;&#39;)&#xA;    set laststatus=0&#xA;  endif&#xA;endfunction&#xA;autocmd UIEnter * call OnUIEnter(deepcopy(v:event))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, you can detect when Firenvim disconnects from a Neovim instance with the &lt;code&gt;UILeave&lt;/code&gt; autocommand.&lt;/p&gt; &#xA;&lt;h3&gt;Using different settings depending on the page/element being edited&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use different settings depending on the textarea you&#39;re currently editing, you can use autocommands to do that too. All buffers are named like this: &lt;code&gt;domainname_page_selector.txt&lt;/code&gt; (see the &lt;a href=&#34;https://raw.githubusercontent.com/glacambre/firenvim/master/src/utils/utils.ts&#34;&gt;toFileName function&lt;/a&gt;). For example, this will set file type to markdown for all GitHub buffers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au BufEnter github.com_*.txt set filetype=markdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Understanding Firenvim&#39;s configuration object&lt;/h3&gt; &#xA;&lt;p&gt;You can configure everything else about Firenvim by creating a dictionary named &lt;code&gt;g:firenvim_config&lt;/code&gt; in your init.vim and setting the keys &#34;globalSettings&#34; and &#34;localSettings&#34;. In the dictionary &lt;code&gt;g:firenvim_config[&#34;localSettings&#34;]&lt;/code&gt; you can map Javascript patterns that match against the full URL to settings that are used for all URLs matched by that pattern. When multiple patterns match a URL, the pattern with the highest &#34;priority&#34; value is used. Here is an example (the settings and their possible values will be explained in the next subsections):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:firenvim_config = { &#xA;    \ &#39;globalSettings&#39;: {&#xA;        \ &#39;alt&#39;: &#39;all&#39;,&#xA;    \  },&#xA;    \ &#39;localSettings&#39;: {&#xA;        \ &#39;.*&#39;: {&#xA;            \ &#39;cmdline&#39;: &#39;neovim&#39;,&#xA;            \ &#39;content&#39;: &#39;text&#39;,&#xA;            \ &#39;priority&#39;: 0,&#xA;            \ &#39;selector&#39;: &#39;textarea&#39;,&#xA;            \ &#39;takeover&#39;: &#39;always&#39;,&#xA;        \ },&#xA;    \ }&#xA;\ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this configuration, &lt;code&gt;takeover&lt;/code&gt; will be set to &lt;code&gt;always&lt;/code&gt; on all websites. If we wanted to override this value on british websites, we could add the following lines to our init.vim. Notice how the priority of this new regex is higher than that of the &lt;code&gt;.*&lt;/code&gt; regex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fc = g:firenvim_config[&#39;localSettings&#39;]&#xA;let fc[&#39;https?://[^/]+\.co\.uk/&#39;] = { &#39;takeover&#39;: &#39;never&#39;, &#39;priority&#39;: 1 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From now on, localSettings examples will use the &lt;code&gt;let fc[...] = ...&lt;/code&gt; shorthand, assuming that you have defined a &lt;code&gt;g:firenvim_config&lt;/code&gt; object and that you have a line like &lt;code&gt;let fc = g:firenvim_config[&#39;localSettings&#39;]&lt;/code&gt; in your config.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring what elements Firenvim should appear on&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;selector&lt;/code&gt; attribute of a localSetting controls what elements Firenvim automatically takes over. Here&#39;s the default value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fc[&#39;.*&#39;] = { &#39;selector&#39;: &#39;textarea:not([readonly]), div[role=&#34;textbox&#34;]&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use Firenvim with rich text editors (e.g. Gmail, Outlook, Slack…) as a general rule, you might want to restrict Firenvim to simple textareas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fc[&#39;.*&#39;] = { &#39;selector&#39;: &#39;textarea&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;selector&lt;/code&gt; is just a CSS selector, you have access to all of CSS&#39;s pseudo selectors, including &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&#34;&gt;&lt;code&gt;:not()&lt;/code&gt;&lt;/a&gt;, which allows you to exclude elements that have certain attributes, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fc[&#39;.*&#39;] = { &#39;selector&#39;: &#39;textarea:not([class=xxx])&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Firenvim to not always take over elements&lt;/h3&gt; &#xA;&lt;p&gt;Firenvim has a setting named &lt;code&gt;takeover&lt;/code&gt; that can be set to &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, &lt;code&gt;nonempty&lt;/code&gt; or &lt;code&gt;once&lt;/code&gt;. When set to &lt;code&gt;always&lt;/code&gt;, Firenvim will always take over elements for you. When set to &lt;code&gt;empty&lt;/code&gt;, Firenvim will only take over empty elements. When set to &lt;code&gt;never&lt;/code&gt;, Firenvim will never automatically appear, thus forcing you to use a keyboard shortcut in order to make the Firenvim frame appear. When set to &lt;code&gt;nonempty&lt;/code&gt;, Firenvim will only take over elements that aren&#39;t empty. When set to &lt;code&gt;once&lt;/code&gt;, Firenvim will take over elements the first time you select them, which means that after &lt;code&gt;:q&lt;/code&gt;&#39;ing Firenvim, you&#39;ll have to use the keyboard shortcut to make it appear again. Here&#39;s how to use the &lt;code&gt;takeover&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fc[&#39;.*&#39;] = { &#39;takeover&#39;: &#39;always&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Choosing a command line&lt;/h3&gt; &#xA;&lt;p&gt;You can chose between neovim&#39;s built-in command line, firenvim&#39;s command line and no command line at all by setting the localSetting named &lt;code&gt;cmdline&lt;/code&gt; to either &lt;code&gt;neovim&lt;/code&gt;, &lt;code&gt;firenvim&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fc[&#39;.*&#39;] = { &#39;cmdline&#39; : &#39;firenvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Choosing &lt;code&gt;none&lt;/code&gt; does not make sense unless you have alternative way to display the command line such as &lt;a href=&#34;https://github.com/folke/noice.nvim&#34;&gt;noice.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Editing HTML directly&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;content&lt;/code&gt; localSetting controls how Firenvim should read the content of an element. Setting it to &lt;code&gt;html&lt;/code&gt; will make Firenvim fetch the content of elements as HTML, &lt;code&gt;text&lt;/code&gt; will make it use plaintext. The default value is &lt;code&gt;text&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fc[&#39;.*&#39;] = { &#39;content&#39; : &#39;html&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Special characters on MacOS&lt;/h3&gt; &#xA;&lt;p&gt;On MacOS, the default keyboard layouts emit special characters when the alt (i.e. option) key is held down. From the perspective of the browser, these special characters replace the underlying &#34;main&#34; character of a keystroke event while retaining the modifier. For example, in the standard US layout the key chord alt-o is received in the browser as alt-ø rather than alt-o. Further, certain alt-chords represent &#34;dead keys&#34;, which apply a diacritic to the next character entered. Pressing alt-e followed by a produces the single character &#34;á&#34; while alt-u followed by a produces &#34;ä&#34;. To produce this behavior, diacritic-mapped strokes like alt-e and alt-u are themselves mapped to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Dead_key&#34;&gt;&#34;Dead key&#34; character&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These behaviors complicate the support of special character and alt/meta (A- or M-) vim mappings on MacOS in two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;There is no way to generate unmodified special character key events. For example, since the only way to generate the character &#34;ø&#34; via the keyboard is by holding down alt, any key event with the &#34;ø&#34; character will also have an alt modifier. If we forward this directly to Vim, it will be received as &lt;code&gt;&amp;lt;M-ø&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is no way to generate alt-modified plain alphanumeric characters. For example, an &lt;code&gt;&amp;lt;M-o&amp;gt;&lt;/code&gt; mapping won&#39;t work because pressing alt-o generates &lt;code&gt;&amp;lt;M-ø&amp;gt;&lt;/code&gt; rather than &lt;code&gt;&amp;lt;M-o&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Terminal and standalone GUI applications can solve these problems by changing the interpretation of the alt key at the application level. &lt;code&gt;Terminal.app&lt;/code&gt; and &lt;code&gt;iTerm2&lt;/code&gt;, for instance, both provide a &#34;use Option as Meta key&#34; preference that converts incoming alt-chords at the application level. Firenvim, however, is a browser extension that operates off of browser keystroke events rather than application-level events. At present, we are unsure how to implement this &#34;use option as meta&#34; functionality at the browser event level (help here is welcome!). However, there are some workarounds.&lt;/p&gt; &#xA;&lt;p&gt;For problem (1), Firenvim will by default drop the alt key on MacOS for any special character, defined here as non-alphanumeric (not matching &lt;code&gt;/[a-zA-Z0-9]/&lt;/code&gt;). This means alt-o will be forwarded to NeoVim as &#34;ø&#34; rather than &#34;M-ø&#34;. Note that this behavior can be changed by setting the &lt;code&gt;alt&lt;/code&gt; setting of the &lt;code&gt;globalSettings&lt;/code&gt; configuration to &lt;code&gt;all&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;h3&gt;Making Firenvim ignore keys&lt;/h3&gt; &#xA;&lt;p&gt;You can make Firenvim ignore key presses (thus letting the browser handle them) by setting key-value pairs in &lt;code&gt;globalSettings.ignoreKeys&lt;/code&gt;. The key needs to be the neovim mode the key press should be ignored in and the value should be an array containing the textual representation of the key press you want ignored. If you want to ignore a key press in all modes, you can use &lt;code&gt;all&lt;/code&gt; as mode key.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to make Firenvim ignore &lt;code&gt;&amp;lt;C-1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-2&amp;gt;&lt;/code&gt; in normal mode and &lt;code&gt;&amp;lt;C--&amp;gt;&lt;/code&gt; in all modes to let your browser handle them, you should define ignoreKeys like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:firenvim_config = {&#xA;    \ &#39;globalSettings&#39;: {&#xA;        \ &#39;ignoreKeys&#39;: {&#xA;            \ &#39;all&#39;: [&#39;&amp;lt;C--&amp;gt;&#39;],&#xA;            \ &#39;normal&#39;: [&#39;&amp;lt;C-1&amp;gt;&#39;, &#39;&amp;lt;C-2&amp;gt;&#39;]&#xA;        \ }&#xA;    \ }&#xA;\ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mode names are defined in &lt;a href=&#34;https://github.com/neovim/neovim/raw/master/src/nvim/cursor_shape.c&#34;&gt;Neovim&#39;s cursor_shape.c&lt;/a&gt;. Note that if the key press contains multiple modifiers, Shift needs to be first, Alt second, Control third and OS/Meta last (e.g. &lt;code&gt;Ctrl+Alt+Shift+1&lt;/code&gt; needs to be &lt;code&gt;&amp;lt;SAC-1&amp;gt;&lt;/code&gt;). If your keyboard layout requires you to press shift in order to press numbers, shift should be present in the key representation (e.g. on french azerty keyboards, &lt;code&gt;&amp;lt;C-1&amp;gt;&lt;/code&gt; should actually be &lt;code&gt;&amp;lt;SC-1&amp;gt;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Interacting with the page&lt;/h3&gt; &#xA;&lt;p&gt;You can execute javascript in the page by using &lt;code&gt;firenvim#eval_js&lt;/code&gt;. The code has to be a valid javascript expression (NOT a statement). You can provide the name of a function that should be executed with the result of the expression. Note that some pages prevent evaluating JavaScript with their &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&#34;&gt;CSP&lt;/a&gt; and this can&#39;t be worked around. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call firenvim#eval_js(&#39;alert(&#34;Hello World!&#34;)&#39;, &#39;MyFunction&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can move focus from the editor back to the page or the input field by calling &lt;code&gt;firenvim#focus_page&lt;/code&gt; or &lt;code&gt;firenvim#focus_input&lt;/code&gt;. Here&#39;s an example that does exactly this if you press &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; twice while in normal mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;Esc&amp;gt;&amp;lt;Esc&amp;gt; :call firenvim#focus_page()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a function named &lt;code&gt;firenvim#hide_frame()&lt;/code&gt; which will temporarily hide the Firenvim frame. You will then be able to bring the neovim frame back either by unfocusing and refocusing the textarea or by using the &lt;a href=&#34;https://github.com/glacambre/firenvim#manually-triggering-firenvim&#34;&gt;keybinding to manually trigger Firenvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;C-z&amp;gt; :call firenvim#hide_frame()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A function named &lt;code&gt;firenvim#press_keys()&lt;/code&gt; will allow you to send key events to the underlying input field by taking a list of vim-like keys (e.g. &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;…) as argument. Note that this only &#34;triggers&#34; an event, it does not add text to the input field. For example if you&#39;d like firenvim to send &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to the webpage when you press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; in the editor, you can use the following mapping which is useful with chat apps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au BufEnter riot.im_* inoremap &amp;lt;CR&amp;gt; &amp;lt;Esc&amp;gt;:w&amp;lt;CR&amp;gt;:call firenvim#press_keys(&#34;&amp;lt;LT&amp;gt;CR&amp;gt;&#34;)&amp;lt;CR&amp;gt;ggdGa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that our goal is to make the mapping type &lt;code&gt;firenvim#press_keys(&#34;&amp;lt;CR&amp;gt;&#34;)&lt;/code&gt; in vim&#39;s command prompt and then execute it. Since we want the keys &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to be typed and not &lt;kbd&gt;Enter&lt;/kbd&gt; to be pressed, we can&#39;t use &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; because it would be interpreted by &lt;code&gt;inoremap&lt;/code&gt;. Hence we use &lt;code&gt;&amp;lt;LT&amp;gt;CR&amp;gt;&lt;/code&gt; in order to type the keys &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;. Similarly, if you want to type the keys &lt;code&gt;&amp;lt;C-CR&amp;gt;&lt;/code&gt; you&#39;d use &lt;code&gt;&amp;lt;LT&amp;gt;C-CR&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Known Issues: some websites do not react to &lt;code&gt;firenvim#press_keys&lt;/code&gt; (e.g. Slack).&lt;/p&gt; &#xA;&lt;h3&gt;Automatically syncing changes to the page&lt;/h3&gt; &#xA;&lt;p&gt;Since Firenvim simply uses the BufWrite event in order to detect when it needs to write neovim&#39;s buffers to the page, Firenvim can be made to automatically synchronize all changes like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au TextChanged * ++nested write&#xA;au TextChangedI * ++nested write&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on how large the edited buffer is, this could be a little slow. This more sophisticated approach will throttle writes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:timer_started = v:false&#xA;function! My_Write(timer) abort&#xA;&#x9;let g:timer_started = v:false&#xA;&#x9;write&#xA;endfunction&#xA;&#xA;function! Delay_My_Write() abort&#xA;&#x9;if g:timer_started&#xA;&#x9;&#x9;return&#xA;&#x9;end&#xA;&#x9;let g:timer_started = v:true&#xA;&#x9;call timer_start(10000, &#39;My_Write&#39;)&#xA;endfunction&#xA;&#xA;au TextChanged * ++nested call Delay_My_Write()&#xA;au TextChangedI * ++nested call Delay_My_Write()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring message timeout&lt;/h3&gt; &#xA;&lt;p&gt;Due to space constraints, the external command line covers part of the buffer. This can be a problem as sometimes neovim will send a message that tells Firenvim to draw the command line, and then never send the message to tell Firenvim to stop displaying it. In order to work around this problem, a &#34;cmdlineTimeout&#34; configuration option has been implemented, which makes Firenvim hide the external command line after the cursor has moved and some amount of milliseconds have passed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:firenvim_config = {&#xA;    \ &#39;globalSettings&#39;: {&#xA;        \ &#39;cmdlineTimeout&#39;: 3000,&#xA;    \ }&#xA;\ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring the filename&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to configure the name of the file used by Firenvim with the &lt;code&gt;filename&lt;/code&gt; localSetting. This setting is a format string where each element in curly braces will be replaced with a value and where the maximum length can be specified with a percentage. Possible format elements are &lt;code&gt;hostname&lt;/code&gt; (= the domain name of the website), &lt;code&gt;pathname&lt;/code&gt; (= the path of the page), &lt;code&gt;selector&lt;/code&gt; (= the CSS selector of the text area), &lt;code&gt;timestamp&lt;/code&gt; (= the current date) and &lt;code&gt;extension&lt;/code&gt; (the language extension when using Firenvim on a code editor or &lt;code&gt;txt&lt;/code&gt; otherwise). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:firenvim_config = {&#xA;    \ &#39;localSettings&#39;: {&#xA;        \ &#39;.*&#39;: {,&#xA;            \ &#39;filename&#39;: &#39;/tmp/{hostname}_{pathname%10}.{extension}&#39;,&#xA;    \ }&#xA;\ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will result in Firenvim using &lt;code&gt;/tmp/github.com_issues-new.txt&lt;/code&gt; on Github&#39;s new issue page. The default value of this setting is &lt;code&gt;{hostname%32}_{pathname%32}_{selector%32}_{timestamp%32}.{extension}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Drawbacks&lt;/h2&gt; &#xA;&lt;p&gt;Some keybindings, such as &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; are not overridable through usual means. This means that you have to tell your browser to let Firenvim override them by using &lt;a href=&#34;https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox&#34;&gt;the shortcuts menu in &lt;code&gt;about://addons&lt;/code&gt;&lt;/a&gt; on Firefox and &lt;code&gt;chrome://extensions/shortcuts&lt;/code&gt; in Chrome.&lt;/p&gt; &#xA;&lt;p&gt;When it is possible to do so, if you press one of these keyboard shortcuts while not in a Firenvim frame, Firenvim will attempt to emulate the expected behavior of the shortcut. For example, pressing &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; in a Firenvim frame will tell neovim you pressed &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;, but outside of it it will tell the browser to close the current tab.&lt;/p&gt; &#xA;&lt;p&gt;Controlling whether Firenvim should attempt to emulate the browser&#39;s default behavior can be done with global settings. The following snippet will tell Firenvim to simulate &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;&#39;s default behavior while never simulating &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;&#39;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:firenvim_config = {&#xA;    \ &#39;globalSettings&#39;: {&#xA;        \ &#39;&amp;lt;C-w&amp;gt;&#39;: &#39;noop&#39;,&#xA;        \ &#39;&amp;lt;C-n&amp;gt;&#39;: &#39;default&#39;,&#xA;    \ }&#xA;\ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that on Firefox on Linux some keyboard shortcuts might not be overridable. I circumvent this issue by running a &lt;a href=&#34;https://github.com/glacambre/firefox-patches&#34;&gt;patched&lt;/a&gt; version of Firefox (note: once Firefox is patched, you won&#39;t need to setup webextension keyboard shortcuts).&lt;/p&gt; &#xA;&lt;h2&gt;You might also like&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tridactyl/tridactyl&#34;&gt;Tridactyl&lt;/a&gt;, provides vim-like keybindings to use Firefox. Also lets you edit input fields and text areas in your favourite editor with its &lt;code&gt;:editor&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GhostText/GhostText&#34;&gt;GhostText&lt;/a&gt;, lets you edit text areas in your editor with a single click. Requires installing a plugin in your editor too. Features live updates!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jlebon/textern&#34;&gt;Textern&lt;/a&gt;, a Firefox addon that lets you edit text areas in your editor without requiring you to install a plugin in your editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asamuzaK/withExEditor&#34;&gt;withExEditor&lt;/a&gt;, same thing as Textern, except you can also edit/view a page&#39;s source with your editor.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>blacksmithgu/datacore</title>
    <updated>2023-01-08T01:47:23Z</updated>
    <id>tag:github.com,2023-01-08:/blacksmithgu/datacore</id>
    <link href="https://github.com/blacksmithgu/datacore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Work-in-progress successor to Dataview with a focus on UX and speed.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Datacore&lt;/h1&gt; &#xA;&lt;p&gt;Datacore is a work-in-progress re-imagining of &lt;a href=&#34;https://github.com/blacksmithgu/obsidian-dataview.git&#34;&gt;Dataview&lt;/a&gt; with a focus on 2-10x better query and rendering performance, as well as fully interactible views. First working builds are expected to be published by the end of January 2023.&lt;/p&gt; &#xA;&lt;h3&gt;Differences from Dataview&lt;/h3&gt; &#xA;&lt;p&gt;Datacore is fundamentally the same thing as dataview - an index over Markdown files that supports live-updating views and metadata. However, Datacore focuses on substantial index changes for performance, as well as a new sleek UI which completely replaces traditional Dataview queries. Datacore supports all query operations that Dataview does, with some extra functionality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;New Javascript API&lt;/strong&gt;: Javascript-based views are now React-based and support internal state, flickerless updates on index changes, and a new query API which is much more performant than &lt;code&gt;dv.pages().where(...)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WYSIWYG Views&lt;/strong&gt;: Datacore queries now use a responsive table view and can be manipulated with a table editor much more akin to what you would see in places like Notion and Airtable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functioning Embeds&lt;/strong&gt;: Markdown page, image, and video embeds now work in all views, and a new special view type which is just a list of embeds has been added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Live Editing&lt;/strong&gt;: Values inside of table views can now be edited; task views include more nuanced rendering of metadata like due date and more operations for manipulating tasks directly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Section / Block Queries&lt;/strong&gt;: Datacore indexes all files (including attachments, PDFs, and images), and supports queries at section and block level granularity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Current Progress&lt;/h3&gt; &#xA;&lt;p&gt;The repo has just been created and some initial framework setup; expect to see early releases available in Obsidian in late January 2023!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>book-searcher-org/book-searcher</title>
    <updated>2023-01-08T01:47:23Z</updated>
    <id>tag:github.com,2023-01-08:/book-searcher-org/book-searcher</id>
    <link href="https://github.com/book-searcher-org/book-searcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create and search books index, create your private library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Book Searcher&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/book-searcher-org/book-searcher&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/book-searcher-org/book-searcher&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/book-searcher-org/book-searcher&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/book-searcher-org/book-searcher&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/book-searcher-org/book-searcher&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create and search books index, create your private library.&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t save and provide files, we provide books searching.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;We currently offer both Desktop and Command-line versions.&lt;/p&gt; &#xA;&lt;h3&gt;Desktop&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Download the pre-compiled desktop installer from &lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/releases&#34;&gt;Release&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can compile by yourself. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/#build-desktop-version&#34;&gt;Build from source&lt;/a&gt; section for instructions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: Book-Searcher-desktop_version_x64.msi&lt;/li&gt; &#xA; &lt;li&gt;macOS: Book-Searcher-desktop_version_x64.dmg&lt;/li&gt; &#xA; &lt;li&gt;Linux: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deb: Book-Searcher-desktop_version_amd64.deb&lt;/li&gt; &#xA;   &lt;li&gt;AppImage: Book-Searcher-desktop_version_amd64.AppImage&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Prepare the &lt;code&gt;index&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/#prepare-the-index&#34;&gt;Prepare the index&lt;/a&gt; section for instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Run book-searcher-desktop&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specify the &lt;code&gt;index&lt;/code&gt; folder path in the settings menu.&lt;/p&gt; &#xA;&lt;h3&gt;Cli&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Download the pre-compiled binary from &lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/releases&#34;&gt;Release&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can compile by yourself. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/#build-cli-version&#34;&gt;Build from source&lt;/a&gt; section for instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Prepare the &lt;code&gt;index&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/#prepare-the-index&#34;&gt;Prepare the index&lt;/a&gt; section for instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Run &lt;code&gt;book-searcher run&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will listen to &lt;code&gt;127.0.0.1:7070&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Access &lt;a href=&#34;http://127.0.0.1:7070/&#34;&gt;http://127.0.0.1:7070/&lt;/a&gt; to use webui, or you can use the &lt;a href=&#34;https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/#original-search-api&#34;&gt;original search api&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy with Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir book-searcher &amp;amp;&amp;amp; cd book-searcher&#xA;// Prepare the index&#xA;wget https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/docker-compose.yml&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now &lt;code&gt;book-searcher&lt;/code&gt; it will listen to &lt;code&gt;0.0.0.0:7070&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Original Search Api&lt;/h3&gt; &#xA;&lt;p&gt;You can search by the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;title&lt;/li&gt; &#xA; &lt;li&gt;author&lt;/li&gt; &#xA; &lt;li&gt;publisher&lt;/li&gt; &#xA; &lt;li&gt;extension&lt;/li&gt; &#xA; &lt;li&gt;language&lt;/li&gt; &#xA; &lt;li&gt;isbn&lt;/li&gt; &#xA; &lt;li&gt;id&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=余华&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=title:机器学习 extension:azw3 publisher:清华&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=id:18557063&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=isbn:9787302423287&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;h3&gt;Build Cli version&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Build frontend&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make frontend_preinstall frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Build &lt;code&gt;book-searcher&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TARGET=release make&#xA;&#xA;# move the compiled binary to the project root directory&#xA;mv target/release/book-searcher .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build Desktop version&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Install frontend dependences&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make frontend_preinstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Build &lt;code&gt;book-searcher-desktop&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo tauri build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prepare the &lt;code&gt;index&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Prepare the raw data&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prepare the raw books metadata and save the &lt;code&gt;csv&lt;/code&gt; files to the project root directory.&lt;/p&gt; &#xA;&lt;p&gt;The raw data is used to generate the &lt;code&gt;index&lt;/code&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/#raw-data&#34;&gt;Raw data&lt;/a&gt; section for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Create &lt;code&gt;index&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may need to &lt;code&gt;rm -rf index&lt;/code&gt; first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;book-searcher index -f *.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The finally folder structure should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;book_searcher_dir&#xA;├── index&#xA;│&amp;nbsp;&amp;nbsp; ├── some index files...&#xA;│&amp;nbsp;&amp;nbsp; └── meta.json&#xA;└── book-searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raw data&lt;/h2&gt; &#xA;&lt;p&gt;This raw data is used to generate &lt;code&gt;index&lt;/code&gt;, should be a &lt;code&gt;csv&lt;/code&gt; file with the following fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;id, title, author, publisher, extension, filesize, language, year, pages, isbn, ipfs_cid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;book-searcher&lt;/strong&gt; © &lt;a href=&#34;https://github.com/book-searcher-org/book-searcher/graphs/contributors&#34;&gt;The Book Searcher Authors&lt;/a&gt;, Released under the &lt;a href=&#34;https://raw.githubusercontent.com/book-searcher-org/book-searcher/master/LICENSE&#34;&gt;BSD-3-Clause&lt;/a&gt; License.&lt;/p&gt;</summary>
  </entry>
</feed>