<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-25T01:40:46Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vvo/iron-session</title>
    <updated>2022-10-25T01:40:46Z</updated>
    <id>tag:github.com,2022-10-25:/vvo/iron-session</id>
    <link href="https://github.com/vvo/iron-session" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üõ† Next.js stateless session utility using signed and encrypted cookies to store data. Also works with Express, and Node.js HTTP servers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iron-session &lt;a href=&#34;https://github.com/vvo/iron-session/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/vvo/iron-session?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vvo/iron-session/actions&#34;&gt;&lt;img src=&#34;https://github.com/vvo/iron-session/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/iron-session&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/iron-session&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://npm-stat.com/charts.html?package=iron-session&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/next-iron-session.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;‚≠êÔ∏è Featured in the &lt;a href=&#34;https://nextjs.org/docs/authentication&#34;&gt;Next.js documentation&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;üõ† Node.js stateless session utility using signed and encrypted cookies to store data. Works with Next.js, Express, and Node.js HTTP servers.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The session data is stored in encrypted cookies (&#34;seals&#34;). And only your server can decode the session data. There are no session ids, making iron sessions &#34;stateless&#34; from the server point of view.&lt;/p&gt; &#xA;&lt;p&gt;This strategy of storing session data is the same technique used by &lt;strong&gt;frameworks like &lt;a href=&#34;https://guides.rubyonrails.org/security.html#session-storage&#34;&gt;Ruby On Rails&lt;/a&gt;&lt;/strong&gt; (their default strategy).&lt;/p&gt; &#xA;&lt;p&gt;The underlying cryptography library is &lt;a href=&#34;https://hapi.dev/module/iron&#34;&gt;iron&lt;/a&gt; which was &lt;a href=&#34;https://hueniversedotcom.wordpress.com/2015/09/19/auth-to-see-the-wizard-or-i-wrote-an-oauth-replacement/&#34;&gt;created by the lead developer of OAuth 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Online demo: &lt;a href=&#34;https://iron-session-example.vercel.app/&#34;&gt;https://iron-session-example.vercel.app&lt;/a&gt; üëÄ&lt;/b&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Table of contents:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#nextjs-usage&#34;&gt;Next.js usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#nextjs-middlewares-usage&#34;&gt;Next.js middlewares usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#advanced-usage&#34;&gt;Advanced usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#coding-best-practices&#34;&gt;Coding best practices&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#session-wrappers&#34;&gt;Session wrappers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#typing-session-data-with-typescript&#34;&gt;Typing session data with TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#express&#34;&gt;Express&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#koa&#34;&gt;Koa&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#handle-password-rotationupdate-the-password&#34;&gt;Handle password rotation/update the password&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#magic-links&#34;&gt;Magic links&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#impersonation-login-as-someone-else&#34;&gt;Impersonation, login as someone else&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#session-cookies&#34;&gt;Session cookies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#firebase-usage&#34;&gt;Firebase usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#ironoptions&#34;&gt;ironOptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#nextjs-withironsessionapiroutehandler-ironoptions--req-nextapirequest-res-nextapiresponse--ironoptions--promiseironoptions&#34;&gt;Next.js: withIronSessionApiRoute(handler, ironOptions | (req: NextApiRequest, res: NextApiResponse) =&amp;gt; IronOptions | Promise&amp;lt;IronOptions&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#nextjs-withironsessionssrhandler-ironoptions--req-incomingmessage-res-serverresponse--ironoptions--promiseironoptions&#34;&gt;Next.js: withIronSessionSsr(handler, ironOptions | (req: IncomingMessage, res: ServerResponse) =&amp;gt; IronOptions | Promise&amp;lt;IronOptions&amp;gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#express-ironsessionironoptions&#34;&gt;Express: ironSession(ironOptions)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#sessionsave&#34;&gt;session.save()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#sessiondestroy&#34;&gt;session.destroy()&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#why-use-pure-cookies-for-sessions&#34;&gt;Why use pure cookies for sessions?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#what-are-the-drawbacks&#34;&gt;What are the drawbacks?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#how-is-this-different-from-jwt&#34;&gt;How is this different from JWT?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#project-status&#34;&gt;Project status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install iron-session&#xA;yarn add iron-session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Next.js usage&lt;/h2&gt; &#xA;&lt;p&gt;You can find full featured examples (Next.js, Express) in the &lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/examples&#34;&gt;examples folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The password is a private key you must pass at runtime and builtime (for getServerSideProps), it has to be at least 32 characters long. You can use &lt;a href=&#34;https://1password.com/password-generator/&#34;&gt;https://1password.com/password-generator/&lt;/a&gt; to generate strong passwords.&lt;/p&gt; &#xA;&lt;p&gt;Session duration is 14 days by default, check the API docs for more info.&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è Always store passwords in encrypted environment variables on your platform. Vercel does this automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Login API Route:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/login.ts&#xA;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(&#xA;  async function loginRoute(req, res) {&#xA;    // get user from database then:&#xA;    req.session.user = {&#xA;      id: 230,&#xA;      admin: true,&#xA;    };&#xA;    await req.session.save();&#xA;    res.send({ ok: true });&#xA;  },&#xA;  {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;    cookieOptions: {&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;User API Route:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/user.ts&#xA;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(&#xA;  function userRoute(req, res) {&#xA;    res.send({ user: req.session.user });&#xA;  },&#xA;  {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;    cookieOptions: {&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Logout Route:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/logout.ts&#xA;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(&#xA;  function logoutRoute(req, res, session) {&#xA;    req.session.destroy();&#xA;    res.send({ ok: true });&#xA;  },&#xA;  {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;    cookieOptions: {&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;getServerSideProps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/admin.tsx&#xA;&#xA;import { withIronSessionSsr } from &#34;iron-session/next&#34;;&#xA;&#xA;export const getServerSideProps = withIronSessionSsr(&#xA;  async function getServerSideProps({ req }) {&#xA;    const user = req.session.user;&#xA;&#xA;    if (user.admin !== true) {&#xA;      return {&#xA;        notFound: true,&#xA;      };&#xA;    }&#xA;&#xA;    return {&#xA;      props: {&#xA;        user: req.session.user,&#xA;      },&#xA;    };&#xA;  },&#xA;  {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;    cookieOptions: {&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: We encourage you to create a &lt;code&gt;withSession&lt;/code&gt; utility so you do not have to repeat the password and cookie name in every route. You can see how to do that &lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/examples/next.js-typescript/lib/session.ts&#34;&gt;in the example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Next.js middlewares usage&lt;/h2&gt; &#xA;&lt;p&gt;As of version 6.2.0, this library is compatible with &lt;a href=&#34;https://nextjs.org/docs/advanced-features/middleware&#34;&gt;Next.js middlewares&lt;/a&gt; locally and when deployed on Vercel.&lt;/p&gt; &#xA;&lt;p&gt;Since there&#39;s no pre-available &lt;code&gt;res&lt;/code&gt; object in Next.js&#39;s middlewares, you need to use iron-session this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// /middleware.ts&#xA;import { NextResponse } from &#34;next/server&#34;;&#xA;import type { NextRequest } from &#34;next/server&#34;;&#xA;import { getIronSession } from &#34;iron-session/edge&#34;;&#xA;&#xA;export const middleware = async (req: NextRequest) =&amp;gt; {&#xA;  const res = NextResponse.next();&#xA;  const session = await getIronSession(req, res, {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;    cookieOptions: {&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  });&#xA;&#xA;  // do anything with session here:&#xA;  const { user } = session;&#xA;&#xA;  // like mutate user:&#xA;  // user.something = someOtherThing;&#xA;  // or:&#xA;  // session.user = someoneElse;&#xA;&#xA;  // uncomment next line to commit changes:&#xA;  // await session.save();&#xA;  // or maybe you want to destroy session:&#xA;  // await session.destroy();&#xA;&#xA;  console.log(&#34;from middleware&#34;, { user });&#xA;&#xA;  // demo:&#xA;  if (user?.admin !== &#34;true&#34;) {&#xA;    // unauthorized to see pages inside admin/&#xA;    return NextResponse.redirect(new URL(&#39;/unauthorized&#39;, req.url)) // redirect to /unauthorized page&#xA;  }&#xA;&#xA;  return res;&#xA;};&#xA;&#xA;export const config = {&#xA;  matcher: &#34;/admin&#34;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: There&#39;s a good probability that you can also use iron-session in the context of &lt;a href=&#34;https://workers.cloudflare.com/&#34;&gt;Cloudflare Workers&lt;/a&gt;, try it and let us know.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Huge thanks to &lt;a href=&#34;https://github.com/brc-dd&#34;&gt;Divyansh Singh&lt;/a&gt; who ported &lt;a href=&#34;https://github.com/hapijs/iron&#34;&gt;hapijs/iron&lt;/a&gt; to the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API&#34;&gt;Web Crypto API&lt;/a&gt; and implemented the required changes in iron-session.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;h3&gt;Coding best practices&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s an example Login API route that is easier to read because of less nesting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/login.ts&#xA;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;import { ironOptions } from &#34;lib/config&#34;;&#xA;&#xA;export default withIronSessionApiRoute(loginRoute, ironOptions);&#xA;&#xA;async function loginRoute(req, res) {&#xA;  // get user from database then:&#xA;  req.session.user = {&#xA;    id: 230,&#xA;    admin: true,&#xA;  };&#xA;  await req.session.save();&#xA;  res.send({ ok: true });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// lib/config.ts&#xA;&#xA;export const ironOptions = {&#xA;  cookieName: &#34;myapp_cookiename&#34;,&#xA;  password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;  cookieOptions: {&#xA;    secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Session wrappers&lt;/h3&gt; &#xA;&lt;p&gt;If you do not want to pass down the password and cookie name in every API route file or page then you can create wrappers like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;JavaScript:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// lib/withSession.js&#xA;&#xA;import { withIronSessionApiRoute, withIronSessionSsr } from &#34;iron-session/next&#34;;&#xA;&#xA;const sessionOptions = {&#xA;  password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  cookieName: &#34;myapp_cookiename&#34;,&#xA;  // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;  cookieOptions: {&#xA;    secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;  },&#xA;};&#xA;&#xA;export function withSessionRoute(handler) {&#xA;  return withIronSessionApiRoute(handler, sessionOptions);&#xA;}&#xA;&#xA;export function withSessionSsr(handler) {&#xA;  return withIronSessionSsr(handler, sessionOptions);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;TypeScript:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// lib/withSession.ts&#xA;&#xA;import { withIronSessionApiRoute, withIronSessionSsr } from &#34;iron-session/next&#34;;&#xA;import {&#xA;  GetServerSidePropsContext,&#xA;  GetServerSidePropsResult,&#xA;  NextApiHandler,&#xA;} from &#34;next&#34;;&#xA;&#xA;const sessionOptions = {&#xA;  password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  cookieName: &#34;myapp_cookiename&#34;,&#xA;  // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;  cookieOptions: {&#xA;    secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;  },&#xA;};&#xA;&#xA;export function withSessionRoute(handler: NextApiHandler) {&#xA;  return withIronSessionApiRoute(handler, sessionOptions);&#xA;}&#xA;&#xA;// Theses types are compatible with InferGetStaticPropsType https://nextjs.org/docs/basic-features/data-fetching#typescript-use-getstaticprops&#xA;export function withSessionSsr&amp;lt;&#xA;  P extends { [key: string]: unknown } = { [key: string]: unknown },&#xA;&amp;gt;(&#xA;  handler: (&#xA;    context: GetServerSidePropsContext,&#xA;  ) =&amp;gt; GetServerSidePropsResult&amp;lt;P&amp;gt; | Promise&amp;lt;GetServerSidePropsResult&amp;lt;P&amp;gt;&amp;gt;,&#xA;) {&#xA;  return withIronSessionSsr(handler, sessionOptions);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage in API Routes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/login.ts&#xA;&#xA;import { withSessionRoute } from &#34;lib/withSession&#34;;&#xA;&#xA;export default withSessionRoute(loginRoute);&#xA;&#xA;async function loginRoute(req, res) {&#xA;  // get user from database then:&#xA;  req.session.user = {&#xA;    id: 230,&#xA;    admin: true,&#xA;  };&#xA;  await req.session.save();&#xA;  res.send(&#34;Logged in&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage in getServerSideProps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/admin.tsx&#xA;&#xA;import { withSessionSsr } from &#34;lib/withSession&#34;;&#xA;&#xA;export const getServerSideProps = withSessionSsr(&#xA;  async function getServerSideProps({ req }) {&#xA;    const user = req.session.user;&#xA;&#xA;    if (user.admin !== true) {&#xA;      return {&#xA;        notFound: true,&#xA;      };&#xA;    }&#xA;&#xA;    return {&#xA;      props: {&#xA;        user: req.session.user,&#xA;      },&#xA;    };&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Typing session data with TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;req.session&lt;/code&gt; is automatically populated with the right types so .save() and .destroy() can be called on it.&lt;/p&gt; &#xA;&lt;p&gt;But you might want to go further and type your session data also. So you can get autocompletion on &lt;code&gt;session.user&lt;/code&gt; for example. To do so, use &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation&#34;&gt;module augmentation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// You may need the next line in some situations&#xA;// import * as IronSession from &#34;iron-session&#34;;&#xA;&#xA;declare module &#34;iron-session&#34; {&#xA;  interface IronSessionData {&#xA;    user?: {&#xA;      id: number;&#xA;      admin?: boolean;&#xA;    };&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can put this code anywhere in your project, as long as it is in a file that will be required at some point. For example it could be inside your &lt;code&gt;lib/withSession.ts&lt;/code&gt; wrapper or inside an &lt;a href=&#34;https://nextjs.org/docs/basic-features/typescript&#34;&gt;&lt;code&gt;additional.d.ts&lt;/code&gt;&lt;/a&gt; if you&#39;re using Next.js.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve taken this technique from &lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/express-session&#34;&gt;express-session types&lt;/a&gt;. If you have any comment on&lt;/p&gt; &#xA;&lt;h3&gt;Express&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/examples/express&#34;&gt;examples/express&lt;/a&gt; for an example of how to use this with Express.&lt;/p&gt; &#xA;&lt;h3&gt;Koa&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/examples/koa&#34;&gt;examples/koa&lt;/a&gt; for an example of how to use this with Koa.&lt;/p&gt; &#xA;&lt;h3&gt;Handle password rotation/update the password&lt;/h3&gt; &#xA;&lt;p&gt;When you want to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rotate passwords for better security every two (or more, or less) weeks&lt;/li&gt; &#xA; &lt;li&gt;change the password you previously used because it leaked somewhere (üò±)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then you can use multiple passwords:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Week 1&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;withIronSessionApiRoute(handler, {&#xA;  password: {&#xA;    1: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Week 2&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;withIronSessionApiRoute(handler, {&#xA;  password: {&#xA;    2: &#34;another_password_at_least_32_characters_long&#34;,&#xA;    1: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The password used to encrypt session data (to &lt;code&gt;seal&lt;/code&gt;) is always the highest number found in the map (2 in the example).&lt;/li&gt; &#xA; &lt;li&gt;The passwords used to decrypt session data are all passwords in the map (this is how rotation works).&lt;/li&gt; &#xA; &lt;li&gt;Even if you do not provide a list at first, you can always move to multiple passwords afterwards. The first password you&#39;ve used has a default id of 1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Magic links&lt;/h3&gt; &#xA;&lt;p&gt;Because of the stateless nature of &lt;code&gt;iron-session&lt;/code&gt;, it&#39;s very easy to implement patterns like magic links. For example, you might want to send an email to the user with a link to a page where they will be automatically logged in. Or you might want to send a Slack message to someone with a link to your application where they will be automatically logged in.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to implement that:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Send an email with a magic link to the user&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/sendEmail.ts&#xA;&#xA;import { sealData } from &#34;iron-session&#34;;&#xA;&#xA;export default async function sendEmailRoute(req, res) {&#xA;  const user = getUserFromDatabase(req.query.userId);&#xA;&#xA;  const seal = await sealData(&#xA;    {&#xA;      userId: user.id,&#xA;    },&#xA;    {&#xA;      password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    },&#xA;  );&#xA;&#xA;  await sendEmail(&#xA;    user.email,&#xA;    &#34;Magic link&#34;,&#xA;    `Hey there ${user.name}, &amp;lt;a href=&#34;https://myapp.com/api/magicLogin?seal=${seal}&#34;&amp;gt;click here to login&amp;lt;/a&amp;gt;.`,&#xA;  );&#xA;&#xA;  res.send({ ok: true });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default &lt;code&gt;ttl&lt;/code&gt; for such seals is 14 days. To specify a &lt;code&gt;ttl&lt;/code&gt;, provide it in seconds like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const fifteenMinutesInSeconds = 15 * 60;&#xA;&#xA;const seal = await sealData(&#xA;  {&#xA;    userId: user.id,&#xA;  },&#xA;  {&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    ttl: fifteenMinutesInSeconds,&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Login the user automatically and redirect:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/magicLogin.ts&#xA;&#xA;import { unsealData } from &#34;iron-session&#34;;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(magicLoginRoute, {&#xA;  cookieName: &#34;myapp_cookiename&#34;,&#xA;  password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  cookieOptions: {&#xA;    secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;  },&#xA;});&#xA;&#xA;async function magicLoginRoute(req, res) {&#xA;  const { userId } = await unsealData(req.query.seal, {&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  });&#xA;&#xA;  const user = getUserFromDatabase(userId);&#xA;&#xA;  req.session.user = {&#xA;    id: user.id,&#xA;  };&#xA;&#xA;  await req.session.save();&#xA;&#xA;  res.redirect(`/dashboard`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might want to include error handling in the API routes. For example checking if &lt;code&gt;req.session.user&lt;/code&gt; is already defined in login or handling bad seals.&lt;/p&gt; &#xA;&lt;h3&gt;Impersonation, login as someone else&lt;/h3&gt; &#xA;&lt;p&gt;You may want to impersonate your own users, to check how they see your application. This can be extremely useful. For example you could have a page that list all your users and with links you can click to impersonate them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Login as someone else:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/impersonate.ts&#xA;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(impersonateRoute, {&#xA;  cookieName: &#34;myapp_cookiename&#34;,&#xA;  password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  cookieOptions: {&#xA;    secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;  },&#xA;});&#xA;&#xA;async function impersonateRoute(req, res) {&#xA;  if (!req.session.isAdmin) {&#xA;    // let&#39;s pretend this route does not exists if user is not an admin&#xA;    return res.status(404).end();&#xA;  }&#xA;&#xA;  req.session.originalUser = req.session.originalUser || req.session.user;&#xA;  req.session.user = {&#xA;    id: req.query.userId,&#xA;  };&#xA;  await req.session.save();&#xA;  res.redirect(&#34;/dashboard&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stop impersonation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/stopImpersonate.ts&#xA;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(stopImpersonateRoute, {&#xA;  cookieName: &#34;myapp_cookiename&#34;,&#xA;  password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;  cookieOptions: {&#xA;    secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;  },&#xA;});&#xA;&#xA;async function stopImpersonateRoute(req, res) {&#xA;  if (!req.session.isAdmin) {&#xA;    // let&#39;s pretend this route does not exists if user is not an admin&#xA;    return res.status(404).end();&#xA;  }&#xA;&#xA;  req.session.user = req.session.originalUser;&#xA;  delete req.session.originalUser;&#xA;  await req.session.save();&#xA;  res.redirect(&#34;/dashboard&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Session cookies&lt;/h3&gt; &#xA;&lt;p&gt;If you want cookies to expire when the user closes the browser, pass &lt;code&gt;maxAge: undefined&lt;/code&gt; in cookie options, this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// pages/api/user.ts&#xA;&#xA;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(&#xA;  function userRoute(req, res) {&#xA;    res.send({ user: req.session.user });&#xA;  },&#xA;  {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    cookieOptions: {&#xA;      maxAge: undefined,&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Beware, modern browsers might not delete cookies at all using this technique because of &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#define_the_lifetime_of_a_cookie&#34;&gt;session restoring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Firebase usage&lt;/h3&gt; &#xA;&lt;p&gt;This library can be used with Firebase, as long as you set the cookie name to &lt;code&gt;__session&lt;/code&gt; which seems to be the only valid cookie name there.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;ironOptions&lt;/h3&gt; &#xA;&lt;p&gt;Only two options are required: &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;cookieName&lt;/code&gt;. Everything else is automatically computed and usually doesn&#39;t need to be changed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;password&lt;/code&gt;, &lt;strong&gt;required&lt;/strong&gt;: Private key used to encrypt the cookie. It has to be at least 32 characters long. Use &lt;a href=&#34;https://1password.com/password-generator/&#34;&gt;https://1password.com/password-generator/&lt;/a&gt; to generate strong passwords. &lt;code&gt;password&lt;/code&gt; can be either a &lt;code&gt;string&lt;/code&gt; or an &lt;code&gt;array&lt;/code&gt; of objects like this: &lt;code&gt;[{id: 2, password: &#34;...&#34;}, {id: 1, password: &#34;...&#34;}]&lt;/code&gt; to allow for password rotation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cookieName&lt;/code&gt;, &lt;strong&gt;required&lt;/strong&gt;: Name of the cookie to be stored&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ttl&lt;/code&gt;, &lt;em&gt;optional&lt;/em&gt;: In seconds. Default to the equivalent of 14 days. You can set this to &lt;code&gt;0&lt;/code&gt; and iron-session will compute the maximum allowed value by cookies (~70 years).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jshttp/cookie#cookieserializename-value-options&#34;&gt;&lt;code&gt;cookieOptions&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;optional&lt;/em&gt;: Any option available from &lt;a href=&#34;https://github.com/jshttp/cookie#cookieserializename-value-options&#34;&gt;jshttp/cookie#serialize&lt;/a&gt;. Default to:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  httpOnly: true,&#xA;  secure: true, // true when using https, false otherwise&#xA;  sameSite: &#34;lax&#34;, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite#lax&#xA;  // The next line makes sure browser will expire cookies before seals are considered expired by the server. It also allows for clock difference of 60 seconds maximum between servers and clients.&#xA;  maxAge: (ttl === 0 ? 2147483647 : ttl) - 60,&#xA;  path: &#34;/&#34;,&#xA;  // other options:&#xA;  // domain, if you want the cookie to be valid for the whole domain and subdomains, use domain: example.com&#xA;  // encode, there should be no need to use this option, encoding is done by iron-session already&#xA;  // expires, there should be no need to use this option, maxAge takes precedence&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Next.js: withIronSessionApiRoute(handler, ironOptions | (req: NextApiRequest, res: NextApiResponse) =&amp;gt; IronOptions | Promise&amp;lt;IronOptions&amp;gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Wraps a &lt;a href=&#34;https://nextjs.org/docs/api-routes/dynamic-api-routes&#34;&gt;Next.js API Route&lt;/a&gt; and adds a &lt;code&gt;session&lt;/code&gt; object to the request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { withIronSessionApiRoute } from &#34;iron-session/next&#34;;&#xA;&#xA;export default withIronSessionApiRoute(&#xA;  function userRoute(req, res) {&#xA;    res.send({ user: req.session.user });&#xA;  },&#xA;  {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;    cookieOptions: {&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  },&#xA;);&#xA;&#xA;// You can also pass an async or sync function which takes request and response object and return IronSessionOptions&#xA;export default withIronSessionApiRoute(&#xA;  function userRoute(req, res) {&#xA;    res.send({ user: req.session.user });&#xA;  },&#xA;  (req, res) =&amp;gt; {&#xA;    // Infer max cookie from request&#xA;    const maxCookieAge = getMaxCookieAge(req);&#xA;    return {&#xA;      cookieName: &#34;myapp_cookiename&#34;,&#xA;      password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;      // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;      cookieOptions: {&#xA;        // setMaxCookie age here.&#xA;        maxCookieAge,&#xA;        secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;      },&#xA;    };&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Next.js: withIronSessionSsr(handler, ironOptions | (req: IncomingMessage, res: ServerResponse) =&amp;gt; IronOptions | Promise&amp;lt;IronOptions&amp;gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Wraps a &lt;a href=&#34;https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering&#34;&gt;Next.js getServerSideProps&lt;/a&gt; and adds a &lt;code&gt;session&lt;/code&gt; object to the request of the context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { withIronSessionSsr } from &#34;iron-session/next&#34;;&#xA;&#xA;export const getServerSideProps = withIronSessionSsr(&#xA;  async function getServerSideProps({ req }) {&#xA;    return {&#xA;      props: {&#xA;        user: req.session.user,&#xA;      },&#xA;    };&#xA;  },&#xA;  {&#xA;    cookieName: &#34;myapp_cookiename&#34;,&#xA;    password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;    // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;    cookieOptions: {&#xA;      secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;    },&#xA;  },&#xA;);&#xA;&#xA;// You can also pass an async or sync function which takes request and response object and return IronSessionOptions&#xA;export const getServerSideProps = withIronSessionSsr(&#xA;  async function getServerSideProps({ req }) {&#xA;    return {&#xA;      props: {&#xA;        user: req.session.user,&#xA;      },&#xA;    };&#xA;  },&#xA;  (req, res) =&amp;gt; {&#xA;    return {&#xA;      cookieName: &#34;myapp_cookiename&#34;,&#xA;      password: &#34;complex_password_at_least_32_characters_long&#34;,&#xA;      // secure: true should be used in production (HTTPS) but can&#39;t be used in development (HTTP)&#xA;      cookieOptions: {&#xA;        secure: process.env.NODE_ENV === &#34;production&#34;,&#xA;      },&#xA;    };&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Express: ironSession(ironOptions)&lt;/h3&gt; &#xA;&lt;p&gt;Creates an express middleware that adds a &lt;code&gt;session&lt;/code&gt; object to the request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { ironSession } from &#34;iron-session/express&#34;;&#xA;&#xA;app.use(ironSession(ironOptions));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;session.save()&lt;/h3&gt; &#xA;&lt;p&gt;Saves the session and sets the cookie header to be sent once the response is sent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await req.session.save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;session.destroy()&lt;/h3&gt; &#xA;&lt;p&gt;Empties the session object and sets the cookie header to be sent once the response is sent. The browser will then remove the cookie automatically.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to call &lt;code&gt;req.session.save()&lt;/code&gt; after calling &lt;code&gt;req.session.destroy()&lt;/code&gt;. The session is saved automatically.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why use pure cookies for sessions?&lt;/h3&gt; &#xA;&lt;p&gt;This makes your sessions stateless: you do not have to store session data on your server. You do not need another server or service to store session data. This is particularly useful in serverless architectures where you&#39;re trying to reduce your backend dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;What are the drawbacks?&lt;/h3&gt; &#xA;&lt;p&gt;There are some drawbacks to this approach:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you cannot invalidate a seal when needed because there&#39;s no state stored on the server-side about them. We consider that the way the cookie is stored reduces the possibility for this eventuality to happen. Also, in most applications the first thing you do when receiving an authenticated request is to validate the user and their rights in your database, which defeats the case where someone would try to use a token while their account was deactivated/deleted. Now if someone steals a user token you should have a process in place to mitigate that: deactivate the user and force a re-login with a flag in your database for example.&lt;/li&gt; &#xA; &lt;li&gt;application not supporting cookies won&#39;t work, but you can use &lt;a href=&#34;https://github.com/vvo/iron-store/&#34;&gt;iron-store&lt;/a&gt; to implement something similar. In the future, we could allow &lt;code&gt;iron-session&lt;/code&gt; to accept &lt;a href=&#34;https://tools.ietf.org/html/rfc7617&#34;&gt;basic auth&lt;/a&gt; or bearer token methods too. Open an issue if you&#39;re interested.&lt;/li&gt; &#xA; &lt;li&gt;on most browsers, you&#39;re limited to 4,096 bytes per cookie. To give you an idea, an &lt;code&gt;iron-session&lt;/code&gt; cookie containing &lt;code&gt;{user: {id: 100}}&lt;/code&gt; is 265 bytes signed and encrypted: still plenty of available cookie space in here.&lt;/li&gt; &#xA; &lt;li&gt;performance: crypto on the server-side could be slow, if that&#39;s the case let me know. Also, cookies are sent to every request to your website, even images, so this could be an issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that you know the drawbacks, you can decide if they are an issue for your application or not. More information can also be found on the &lt;a href=&#34;https://guides.rubyonrails.org/security.html#session-storage&#34;&gt;Ruby On Rails website&lt;/a&gt; which uses the same technique.&lt;/p&gt; &#xA;&lt;h3&gt;How is this different from &lt;a href=&#34;https://jwt.io/&#34;&gt;JWT&lt;/a&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;Not so much:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JWT is a standard, it stores metadata in the JWT token themselves to ensure communication between different systems is flawless.&lt;/li&gt; &#xA; &lt;li&gt;JWT tokens are not encrypted, the payload is visible by customers if they manage to inspect the seal. You would have to use &lt;a href=&#34;https://tools.ietf.org/html/rfc7516&#34;&gt;JWE&lt;/a&gt; to achieve the same.&lt;/li&gt; &#xA; &lt;li&gt;@hapi/iron mechanism is not a standard, it&#39;s a way to sign and encrypt data into seals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on your own needs and preferences, &lt;code&gt;iron-session&lt;/code&gt; may or may not fit you.&lt;/p&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;‚úÖ Production ready and maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/hoangvvo&#34;&gt;Hoang Vo&lt;/a&gt; for advice and guidance while building this module. Hoang built &lt;a href=&#34;https://github.com/hoangvvo/next-connect&#34;&gt;next-connect&lt;/a&gt; and &lt;a href=&#34;https://github.com/hoangvvo/next-session&#34;&gt;next-session&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://hapi.dev/&#34;&gt;hapi&lt;/a&gt; team for creating &lt;a href=&#34;https://github.com/hapijs/iron&#34;&gt;iron&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/www-project-cheat-sheets/cheatsheets/Session_Management_Cheat_Sheet.html#cookies&#34;&gt;https://owasp.org/www-project-cheat-sheets/cheatsheets/Session_Management_Cheat_Sheet.html#cookies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute&#34;&gt;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://www.afterecon.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5559355?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;John Vandivier&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/vvo/iron-session/commits?author=Vandivier&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#ideas-Vandivier&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;ü§î&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#example-Vandivier&#34; title=&#34;Examples&#34;&gt;üí°&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://searchableguy.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/73341821?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;searchableguy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/vvo/iron-session/commits?author=searchableguy&#34; title=&#34;Tests&#34;&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href=&#34;https://github.com/vvo/iron-session/commits?author=searchableguy&#34; title=&#34;Documentation&#34;&gt;üìñ&lt;/a&gt; &lt;a href=&#34;https://github.com/vvo/iron-session/commits?author=searchableguy&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://brc-dd.me&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/40380293?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Divyansh Singh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/vvo/iron-session/commits?author=brc-dd&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt; &lt;a href=&#34;https://github.com/vvo/iron-session/commits?author=brc-dd&#34; title=&#34;Documentation&#34;&gt;üìñ&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vvo/iron-session/main/#ideas-brc-dd&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;ü§î&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>refinedev/refine</title>
    <updated>2022-10-25T01:40:46Z</updated>
    <id>tag:github.com,2022-10-25:/refinedev/refine</id>
    <link href="https://github.com/refinedev/refine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your React-based CRUD applications, without constraints.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; style=&#34;margin: 30px;&#34;&gt; &#xA; &lt;a href=&#34;https://refine.dev/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/refinedev/refine/master/logo.png&#34; style=&#34;width:250px;&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;a href=&#34;https://refine.dev&#34;&gt;Home Page&lt;/a&gt; | &#xA;  &lt;a href=&#34;https://discord.gg/refine&#34;&gt;Discord&lt;/a&gt; | &#xA;  &lt;a href=&#34;https://refine.dev/examples/&#34;&gt;Examples&lt;/a&gt; | &#xA;  &lt;a href=&#34;https://refine.dev/blog/&#34;&gt;Blog&lt;/a&gt; | &#xA;  &lt;a href=&#34;https://refine.dev/docs/&#34;&gt;Documentation&lt;/a&gt; | &#xA;  &lt;a href=&#34;https://github.com/refinedev/refine/projects/1&#34;&gt;Roadmap&lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;strong&gt;Build your &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;-based CRUD applications, without constraints.&lt;/strong&gt;&#xA; &lt;br&gt;An open source, headless web application framework developed with flexibility in mind.&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/refine&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/837692625737613362.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/refine_dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/refine_dev?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/refine-3?utm_source=badge-top-post-badge&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-refine-3&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/top-post-badge.svg?post_id=362220&amp;amp;theme=light&amp;amp;period=daily&#34; alt=&#34;refine - 100% open source React framework to build web apps 3x faster | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/refinedev/awesome-refine&#34;&gt;&lt;img src=&#34;https://github.com/refinedev/awesome-refine/raw/main/images/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/pankod/refine/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/99a65a191bdd26f4601c/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/pankod/refine/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/99a65a191bdd26f4601c/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@pankod/refine-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@pankod/refine-core.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@pankod/refine-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@pankod/refine-core&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/refinedev/refine/next/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.0-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34; style=&#34;margin: 30px;&#34;&gt; &#xA; &lt;a href=&#34;https://refine.dev/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/refinedev/refine/master/documentation/static/img/refine-promo-gif-v2.gif&#34; style=&#34;width:688px;&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What is refine?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; is a React-based framework for the rapid ‚ú® development of web applications. It eliminates repetitive tasks demanded by &lt;strong&gt;CRUD&lt;/strong&gt; operations and provides industry standard solutions for critical parts like &lt;strong&gt;authentication&lt;/strong&gt;, &lt;strong&gt;access control&lt;/strong&gt;, &lt;strong&gt;routing&lt;/strong&gt;, &lt;strong&gt;networking&lt;/strong&gt;, &lt;strong&gt;state management&lt;/strong&gt;, and &lt;strong&gt;i18n&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; is &lt;em&gt;headless by design&lt;/em&gt;, thereby offering unlimited styling and customization options.&lt;/p&gt; &#xA;&lt;h2&gt;What do you mean by &#34;headless&#34; ?&lt;/h2&gt; &#xA;&lt;p&gt;Instead of being a limited set of pre-styled components, &lt;strong&gt;refine&lt;/strong&gt; is a collection of helper &lt;code&gt;hooks&lt;/code&gt;, &lt;code&gt;components&lt;/code&gt;, and &lt;code&gt;providers&lt;/code&gt;. They are all decoupled from &lt;em&gt;UI components&lt;/em&gt; and &lt;em&gt;business logic&lt;/em&gt;, so that they never keep you from customizing your &lt;em&gt;UI&lt;/em&gt; or coding your own flow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; seamlessly works with any &lt;strong&gt;custom design&lt;/strong&gt; or &lt;strong&gt;UI framework&lt;/strong&gt; that you favor. For convenience, it ships with ready-made integrations for &lt;a href=&#34;https://ant.design/&#34;&gt;Ant Design System&lt;/a&gt;, &lt;a href=&#34;https://mui.com/&#34;&gt;Material UI&lt;/a&gt;, and &lt;a href=&#34;https://mantine.dev/&#34;&gt;Mantine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt;&amp;nbsp;shines on &lt;em&gt;data-intensive&lt;/em&gt; applications like &lt;em&gt;admin panels&lt;/em&gt;, &lt;em&gt;dashboards&lt;/em&gt; and &lt;em&gt;internal tools&lt;/em&gt;. Thanks to the built-in &lt;strong&gt;SSR support&lt;/strong&gt;, &lt;strong&gt;refine&lt;/strong&gt;&amp;nbsp;can also power &lt;em&gt;customer-facing&lt;/em&gt; applications like &lt;em&gt;storefronts&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;p&gt;‚öôÔ∏è Zero-config, &lt;strong&gt;one-minute setup&lt;/strong&gt; with a &lt;strong&gt;single CLI command&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üîå Connectors for &lt;strong&gt;15+ backend services&lt;/strong&gt; including &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/simple-rest&#34;&gt;REST API&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/graphql&#34;&gt;GraphQL&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/nestjsx-crud&#34;&gt;NestJs CRUD&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/airtable&#34;&gt;Airtable&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/strapi&#34;&gt;Strapi&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/strapi-v4&#34;&gt;Strapi v4&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/strapi-graphql&#34;&gt;Strapi GraphQL&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/supabase&#34;&gt;Supabase&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/hasura&#34;&gt;Hasura&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/nhost&#34;&gt;Nhost&lt;/a&gt;, &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/appwrite&#34;&gt;Appwrite&lt;/a&gt;, &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;, &lt;a href=&#34;https://directus.io/&#34;&gt;Directus&lt;/a&gt; and &lt;a href=&#34;https://github.com/refinedev/refine/tree/master/packages/altogic&#34;&gt;Altogic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üåê &lt;strong&gt;SSR support&lt;/strong&gt; with &lt;strong&gt;Next.js&lt;/strong&gt; or &lt;strong&gt;Remix&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚öõ Perfect &lt;strong&gt;state management&lt;/strong&gt; &amp;amp; &lt;strong&gt;mutations&lt;/strong&gt; with &lt;strong&gt;React Query&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üîÄ &lt;strong&gt;Advanced routing&lt;/strong&gt; with any router library of your choice&lt;/p&gt; &#xA;&lt;p&gt;üîê Providers for seamless &lt;strong&gt;authentication&lt;/strong&gt; and &lt;strong&gt;access control&lt;/strong&gt; flows&lt;/p&gt; &#xA;&lt;p&gt;‚ö° Out-of-the-box support for &lt;strong&gt;live / real-time applications&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìÑ Easy &lt;strong&gt;audit logs&lt;/strong&gt; &amp;amp; &lt;strong&gt;document versioning&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üí¨ Support for any &lt;strong&gt;i18n&lt;/strong&gt; framework&lt;/p&gt; &#xA;&lt;p&gt;üí™ Future-proof, &lt;strong&gt;robust architecture&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Full &lt;strong&gt;test coverage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to get started with &lt;strong&gt;refine&lt;/strong&gt; is by using the &lt;a href=&#34;https://github.com/pankod/superplate&#34;&gt;superplate&lt;/a&gt; project starter tool. Run the following command to create a new &lt;strong&gt;refine&lt;/strong&gt; project configured with &lt;a href=&#34;https://ant.design/&#34;&gt;Ant Design System&lt;/a&gt; as the default UI framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx superplate-cli --preset refine-antd my-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the setup is complete, navigate to the project folder and start your project with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;strong&gt;refine&lt;/strong&gt; application will be accessible at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;: &lt;img src=&#34;https://github.com/refinedev/refine/raw/master/documentation/static/img/welcome-on-board.png?raw=true&#34; alt=&#34;Welcome on board&#34;&gt; Let&#39;s consume a public &lt;code&gt;fake REST API&lt;/code&gt; and add two resources (&lt;em&gt;posts&lt;/em&gt;, &lt;em&gt;categories&lt;/em&gt;) to our project. Replace the contents of &lt;code&gt;src/App.tsx&lt;/code&gt; with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&#xA;import { Refine, useMany } from &#34;@pankod/refine-core&#34;;&#xA;import {&#xA;    useTable,&#xA;    List,&#xA;    Table,&#xA;    DateField,&#xA;    Layout,&#xA;    ReadyPage,&#xA;    notificationProvider,&#xA;    ErrorComponent,&#xA;} from &#34;@pankod/refine-antd&#34;;&#xA;import routerProvider from &#34;@pankod/refine-react-router-v6&#34;;&#xA;import dataProvider from &#34;@pankod/refine-simple-rest&#34;;&#xA;&#xA;import &#34;@pankod/refine-antd/dist/styles.min.css&#34;;&#xA;&#xA;const App: React.FC = () =&amp;gt; {&#xA;    return (&#xA;        &amp;lt;Refine&#xA;            routerProvider={routerProvider}&#xA;            dataProvider={dataProvider(&#34;https://api.fake-rest.refine.dev&#34;)}&#xA;            resources={[{ name: &#34;posts&#34;, list: PostList }]}&#xA;            Layout={Layout}&#xA;            ReadyPage={ReadyPage}&#xA;            notificationProvider={notificationProvider}&#xA;            catchAll={&amp;lt;ErrorComponent /&amp;gt;}&#xA;        /&amp;gt;&#xA;    );&#xA;};&#xA;&#xA;export const PostList: React.FC = () =&amp;gt; {&#xA;    const { tableProps } = useTable&amp;lt;IPost&amp;gt;();&#xA;&#xA;    const categoryIds =&#xA;        tableProps?.dataSource?.map((item) =&amp;gt; item.category.id) ?? [];&#xA;&#xA;    const { data, isLoading } = useMany&amp;lt;ICategory&amp;gt;({&#xA;        resource: &#34;categories&#34;,&#xA;        ids: categoryIds,&#xA;        queryOptions: {&#xA;            enabled: categoryIds.length &amp;gt; 0,&#xA;        },&#xA;    });&#xA;&#xA;    return (&#xA;        &amp;lt;List&amp;gt;&#xA;            &amp;lt;Table&amp;lt;IPost&amp;gt; {...tableProps} rowKey=&#34;id&#34;&amp;gt;&#xA;                &amp;lt;Table.Column dataIndex=&#34;title&#34; title=&#34;title&#34; /&amp;gt;&#xA;                &amp;lt;Table.Column&#xA;                    dataIndex={[&#34;category&#34;, &#34;id&#34;]}&#xA;                    title=&#34;category&#34;&#xA;                    render={(value: number) =&amp;gt; {&#xA;                        if (isLoading) {&#xA;                            return &#34;loading...&#34;;&#xA;                        }&#xA;&#xA;                        return data?.data.find(&#xA;                            (item: ICategory) =&amp;gt; item.id === value,&#xA;                        )?.title;&#xA;                    }}&#xA;                /&amp;gt;&#xA;                &amp;lt;Table.Column&#xA;                    dataIndex=&#34;createdAt&#34;&#xA;                    title=&#34;createdAt&#34;&#xA;                    render={(value) =&amp;gt; &amp;lt;DateField format=&#34;LLL&#34; value={value} /&amp;gt;}&#xA;                /&amp;gt;&#xA;            &amp;lt;/Table&amp;gt;&#xA;        &amp;lt;/List&amp;gt;&#xA;    );&#xA;};&#xA;&#xA;export default App;&#xA;&#xA;interface IPost {&#xA;  title: string;&#xA;  createdAt: string;&#xA;  category: { id: number };&#xA;}&#xA;&#xA;interface ICategory {&#xA;  id: number;&#xA;  title: string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you should see the output as a table populated with &lt;code&gt;post&lt;/code&gt; &amp;amp; &lt;code&gt;category&lt;/code&gt; data: &lt;img src=&#34;https://github.com/refinedev/refine/raw/master/documentation/static/img/first-example-result.png?raw=true&#34; alt=&#34;First example result&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;üëâ Jump to &lt;a href=&#34;https://refine.dev/docs/ui-frameworks/antd/tutorial/&#34;&gt;Refine&amp;lt;&amp;gt;Ant Design Tutorial&lt;/a&gt; to continue your work and turn the example into a full-blown CRUD application.&lt;/p&gt; &#xA;&lt;p&gt;üëâ Check out the &lt;a href=&#34;https://refine.dev/docs/tutorials/headless-tutorial/&#34;&gt;Refine&amp;lt;&amp;gt;Tailwind Tutorial&lt;/a&gt; to learn how to use &lt;strong&gt;refine&lt;/strong&gt; in a pure &lt;em&gt;headless&lt;/em&gt; way.&lt;/p&gt; &#xA;&lt;p&gt;üëâ Visit &lt;a href=&#34;https://refine.dev/docs/getting-started/overview/&#34;&gt;Learn the Basics Page&lt;/a&gt; to get informed about the fundemental concepts.&lt;/p&gt; &#xA;&lt;p&gt;üëâ Read more on &lt;a href=&#34;https://refine.dev/docs/advanced-tutorials/&#34;&gt;Advanced Tutorials &lt;/a&gt; for different usage scenarios.&lt;/p&gt; &#xA;&lt;p&gt;üëâ See the real-life &lt;a href=&#34;https://refine.dev/demo/&#34;&gt;Finefoods Demo&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;üëâ Play with interactive &lt;a href=&#34;https://refine.dev/docs/examples/&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You can find refine&#39;s &lt;a href=&#34;https://github.com/refinedev/refine/projects/1&#34;&gt;Public Roadmap here!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/refinedev/refine/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/refinedev/refine&#34; alt=&#34;Stargazers repo roster for refinedev/refine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a bug, please file a bug report at &lt;a href=&#34;https://github.com/refinedev/refine/issues/new/choose&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are willing to fix an issue or propose a feature, all PRs with clear explanations are welcome and encouraged.&lt;/p&gt; &#xA;&lt;p&gt;If you have any doubts related to the project or want to discuss something, then join our &lt;a href=&#34;https://discord.gg/refine&#34;&gt;Discord Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT License, Copyright ¬© 2021-present Refinedev&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>panacloud-modern-global-apps/learn-typescript</title>
    <updated>2022-10-25T01:40:46Z</updated>
    <id>tag:github.com,2022-10-25:/panacloud-modern-global-apps/learn-typescript</id>
    <link href="https://github.com/panacloud-modern-global-apps/learn-typescript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learning TypeScript in Baby Steps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn TypeScript 4.9+ in Baby Steps&lt;/h1&gt; &#xA;&lt;p&gt;We will learn TypeScript by taking small incremental steps.&lt;/p&gt; &#xA;&lt;p&gt;Chapters 1-11 of &lt;a href=&#34;https://www.amazon.com/Learning-TypeScript-Development-Type-Safe-JavaScript/dp/1098110331/ref=sr_1_1&#34;&gt;Learning TypeScript: Enhance Your Web Development Skills Using Type-Safe JavaScript&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.learningtypescript.com/&#34;&gt;In Class Companion projects and articles for Learning TypeScript&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LearningTypeScript/projects&#34;&gt;Learning TypeScript Project Code in Class&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/typescript-cookbook/9781098136642/&#34;&gt;TypeScript Cookbook: Future Advanced TypeScript Book&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.to/destrodevshow/typescript-and-c-both-created-by-the-same-person-named-anders-hejlsberg-42g4&#34;&gt;TypeScript and C# both were created by the same person named Anders Hejlsberg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;TypeScript Homework Coding Projects:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panacloud-modern-global-apps/typescript-node-projects&#34;&gt;TypeScript Node.js Projects&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Learn From Matt Pocock The TypeScript Wizard&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/mattpocockuk/status/1559105611995955202&#34;&gt;Latest News: Matt Joins Vercel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.totaltypescript.com/&#34;&gt;Total TypeScript Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=p6dO9u0M7MQ&amp;amp;t=25s&#34;&gt;TypeScript Crash Course for Beginners with Matt Pocock: Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qcFmCKQDa2s&amp;amp;t=1s&#34;&gt;Learning TypeScript from Scratch with Matt Pocock: A TypeScript tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/total-typescript/beginners-typescript-tutorial&#34;&gt;Beginner TypeScript Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.totaltypescript.com/tutorials/zod&#34;&gt;Zod Tutorial: Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zod.dev/&#34;&gt;Zod Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/total-typescript/advanced-typescript-workshop&#34;&gt;Advanced TypeScript Workshop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=F7O4gA0GXqI&amp;amp;t=389s&#34;&gt;Advanced TypeScript with Matt: Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.totaltypescript.com/tips&#34;&gt;TypeScript Tips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hBk4nV7q6-w&amp;amp;t=24s&#34;&gt;TypeScript tips and Tricks with Matt: Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;TypeScript Proficiency Quiz Details and Instructions&lt;/h3&gt; &#xA;&lt;p&gt;All Web 3 and Metaverse Students who are already software developers will appear in the following Quiz remotely from home:&lt;/p&gt; &#xA;&lt;p&gt;Name: TypeScript Proficiency Quiz&lt;/p&gt; &#xA;&lt;p&gt;Date and Time: Sunday, Oct 23, 9:00 pm&lt;/p&gt; &#xA;&lt;p&gt;URL: &lt;a href=&#34;https://portal.piaic.org/&#34;&gt;https://portal.piaic.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Total MCQs: 63&lt;/p&gt; &#xA;&lt;p&gt;Total Time: 120 minutes&lt;/p&gt; &#xA;&lt;p&gt;Please complete your installation, etc. ASAP i.e. before the exam.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You will attempt your exam at your home using the Safe Exam Browser.&lt;/li&gt; &#xA; &lt;li&gt;Download &amp;amp; Install Safe Exam Browser from Portal.&lt;/li&gt; &#xA; &lt;li&gt;After Installing the safe browser, download the Config file from the PIAIC Portal.&lt;/li&gt; &#xA; &lt;li&gt;Right click on the config file and select ‚Äúopen with‚Äù then select SEB.&lt;/li&gt; &#xA; &lt;li&gt;After running the Config file, log in with PIAIC Portal Credentials&lt;/li&gt; &#xA; &lt;li&gt;Select your Quiz and enter the security key (which will be available on the portal in the exam section) &amp;amp; start the test.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have a stable internet connection before attempting the quiz.&lt;/li&gt; &#xA; &lt;li&gt;Once you have completed the quiz simply logout and close the browser, your quiz will be submitted.&lt;/li&gt; &#xA; &lt;li&gt;The Quiz can only be attempted on a Laptop or a Desktop computer running Windows or Mac only.&lt;/li&gt; &#xA; &lt;li&gt;If you miss the quiz date there will be strictly no re-scheduling&lt;/li&gt; &#xA; &lt;li&gt;Security key for the quiz will be available on Portal in exam section&lt;/li&gt; &#xA; &lt;li&gt;It is essential to note that QUIZZES WILL NOT BE RESCHEDULED FOR ANY REASON REGARDLESS OF THE CIRCUMSTANCES.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Safe Exam Browser installation and configuration Guide is available here.:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/MhYvz-50y0Y&#34;&gt;https://youtu.be/MhYvz-50y0Y&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panacloud-modern-global-apps/learn-typescript/master/safe_exam.jpeg&#34; alt=&#34;Download Safeexam Browser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: Those who are beginners in programming should not appear in this quiz now, but will appear in the quiz at the end of the quarter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panacloud-modern-global-apps/learn-typescript/master/typescript.jpeg&#34; alt=&#34;TypeScript Cheetsheet&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Learn Next.js and Node.js/Express&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panacloud-modern-global-apps/nextjs&#34;&gt;You can also learn Next.js using TypeScript from here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panacloud/learn-typed-express&#34;&gt;You can also learn Node.js/Express using TypeScript from here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>