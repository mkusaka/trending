<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-08T01:44:11Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mohammed-bahumaish/prisma-editor</title>
    <updated>2024-01-08T01:44:11Z</updated>
    <id>tag:github.com,2024-01-08:/mohammed-bahumaish/prisma-editor</id>
    <link href="https://github.com/mohammed-bahumaish/prisma-editor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prisma Editor - A powerful tool to visualize and edit Prisma Schema.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/mohammed-bahumaish/prisma-editor/raw/main/apps/web/public/images/banner.png?raw=true&#34; alt=&#34;Prisma-Editor&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👋 Welcome to Prisma Editor&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prisma Editor&lt;/strong&gt; is a powerful tool designed to visualize and edit Prisma Schema with ease.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt; and advantages include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-time visualization:&lt;/strong&gt; See your database structures in real-time as you create, modify and maintain them&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User-friendly interface:&lt;/strong&gt; Intuitive interface for easy schema editing and management&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL generation:&lt;/strong&gt; Automatically generate SQL code for your schema&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Direct schema editing:&lt;/strong&gt; Edit your schema directly from the graph&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI integration:&lt;/strong&gt; Use natural language prompts to generate boilerplate schema code with the power of OpenAI&#39;s natural language processing API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use cases&lt;/strong&gt; for Prisma Editor involve various database-related activities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily create, modify and maintain complex database structures&lt;/li&gt; &#xA; &lt;li&gt;Ensure that your databases are organized and consistent&lt;/li&gt; &#xA; &lt;li&gt;Generate boilerplate schema code using natural language prompts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With Prisma Editor, you can streamline your database management and ensure that your databases are always up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Featured in:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://trpc.io/docs/awesome-trpc#-open-source-projects-using-trpc&#34;&gt;Awesome tRPC Collection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://create.t3.gg/en/t3-collection&#34;&gt;T3 Collection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/catalinmiron/awesome-prisma&#34;&gt;Awesome Prisma&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;div style=&#34;display: flex;&#34;&gt; &#xA;   &lt;a href=&#34;https://futurepedia.io/tool/prisma-editor?utm_source=prisma-editor_embed&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt; &lt;img src=&#34;https://futurepedia.io/api/image-widget?toolId=6d9b85ac-f1ca-45c7-b4d5-5207a6cdf6ce&#34; alt=&#34;Prisma Editor | Featured on Futurepedia&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt; &lt;/a&gt; &#xA;   &lt;a href=&#34;https://www.producthunt.com/posts/prisma-editor?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-prisma-editor&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=388147&amp;amp;theme=light&#34; alt=&#34;Prisma editor - A powerful tool to visualize and edit Prisma Schema | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt; &lt;/a&gt; &#xA;  &lt;/div&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;  &#xA;&lt;h3&gt;&lt;a href=&#34;https://prisma-editor.vercel.app&#34;&gt;Try it now 🚀&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is a community project, not associated with &lt;a href=&#34;https://prisma.io&#34;&gt;Prisma&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rozbo/node-noss</title>
    <updated>2024-01-08T01:44:11Z</updated>
    <id>tag:github.com,2024-01-08:/rozbo/node-noss</id>
    <link href="https://github.com/rozbo/node-noss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;这是干嘛的？&lt;/h2&gt; &#xA;&lt;p&gt;懂的都懂。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rozbo/node-noss/main/docs/sample.jpg&#34; alt=&#34;/docs/sample.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;怎么用？&lt;/h2&gt; &#xA;&lt;p&gt;把 &lt;code&gt;.env.example&lt;/code&gt;改成&lt;code&gt;.env&lt;/code&gt;，然后里面填上你的私钥和公钥，以及你电脑的cpu个数就可以了。 本项目完全开源，私钥安全自行保证。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm install&#xA;pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;node.js 会不会很慢？&lt;/h2&gt; &#xA;&lt;p&gt;事实上不会，因为关键代码是使用的 &lt;code&gt;wasm&lt;/code&gt;，是由&lt;code&gt;c&lt;/code&gt;语言编译而来。&lt;/p&gt; &#xA;&lt;h2&gt;原理&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;仅供技术交流，普通用户看不懂也没关系&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;首先，我的看法是这个noss是非去中心化的，因为它本质上是基于nostr协议，是一个relay server，而relay server并不是去中心化的。 换言之，这个noss本质上就是可以被随意更改的。 它首先会获取eth链上最新的block，然后将这个block的hash作为自己的&lt;code&gt;seq_witness&lt;/code&gt;，在这里和eth链上关联，但这种关联是单向的。 本质上，它是在模仿一种链，即每个event都要和上一个event关联，以此实现另类的&lt;code&gt;block chain&lt;/code&gt;。但问题是，目前可能用户（韭菜）们并没有留存这个 event chain的意识，或者说官方并没有提供一个很好的途径来实现它。 目前来看，这些event目前存储在其中心化的服务器上，一旦其服务器崩溃或下线，这些数据自然会灰飞烟灭。&lt;/p&gt; &#xA;&lt;p&gt;电脑之所以嗡嗡响，并非是该项目骗算力或者挖矿的，本质上是 &lt;code&gt;nostr&lt;/code&gt;协议的&lt;code&gt;nip13&lt;/code&gt;提案，&lt;a href=&#34;https://github.com/nostr-protocol/nips/raw/master/13.md&#34;&gt;https://github.com/nostr-protocol/nips/blob/master/13.md&lt;/a&gt;， 这个&lt;code&gt;nip13&lt;/code&gt;最初的设计是用来防止发垃圾消息的。(众所周知，nostr最初是用来做区块链社交的)，它用来防止垃圾消息的思路也非常清奇，叫&lt;code&gt;Pow(Proof of Work)&lt;/code&gt;，简单点来说，就是用算力来证明自己不是一个垃圾信息制造者。。。。 我非常不理解，这有什么用，好吧，可能能给发垃圾信息的人造成更多的电力浪费吧。 这个&lt;code&gt;nip13&lt;/code&gt;本身十分简单，就是算一下event id的二进制的前面有多少个0，这个算法非常简单，基本上就是进制转换就行。但是，event_id是hash出来的，这个hash比较占用资源，如果要求的0的数量很多，就会导致需要计算很多次 event_id，这个要求0的数量就是&lt;code&gt;difficulty&lt;/code&gt;， 本例中，其固定为21。 因此，优化这个hash算法，就是提升解题速度的关键，本项目中，使用了wasm的&lt;code&gt;libsecp256k1&lt;/code&gt;用来进行hash运算。&lt;/p&gt; &#xA;&lt;p&gt;算出来验证码后(即nonce)，再对event进行最后的sig进行签名，然后就可以发送到 noscription进行 mint了。&lt;/p&gt; &#xA;&lt;h2&gt;怎么才算中奖&lt;/h2&gt; &#xA;&lt;p&gt;至于怎么才算mint成功？按照项目方文档的说法是 &lt;img src=&#34;https://raw.githubusercontent.com/rozbo/node-noss/main/docs/how.png&#34; alt=&#34;/docs/how.png&#34;&gt; 简单点来是&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;在下一个eth block出来的时候，取出所有event中seq_witness中的block hash和id为上一个eth block的event。 &lt;strong&gt;也就是说网速太慢当下一个eth 区块已经出来，而你还没有求解完成并且提交成功的话，你永远不会中奖&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;取出所有的event，按event.id 从小到大排序，注意event id和提交事件无关，event id是hash的结果。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;依次将所有的event id 进行异或（XOR）操作（上过大学学C语言应该能看明白），然后再异或上当前的block hash(对于该event来说，算是下一个区块)，然后再取余（MOD）所有的事件数量。得出一个余数，&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;用这个余数当下标，取出对应的event。该event中的pubkey就是中奖的人。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;因此，按照其说法，这就是完全的抽奖。&lt;/p&gt; &#xA;&lt;h2&gt;质疑&lt;/h2&gt; &#xA;&lt;p&gt;因为上面的一部分解释，被韭菜们骂了一天了。。。&lt;/p&gt; &#xA;&lt;p&gt;而且官方下场，也承认自己是中心化的了，但是韭菜们现在的逻辑竟然和官方站在一起了，反倒是给我取了个很搞笑的&lt;em&gt;科学家&lt;/em&gt;的称号，彷佛科学家才是他们的敌人， 这真是&lt;em&gt;民不患寡而患不均&lt;/em&gt;呀，首先我如果和韭菜是对立的，想靠这个赚钱，那还开源干嘛，关起门来自己爽多好。 事实上，我除了测试代码，根本没挖。原因我上面也说了，这个项目本身就是中心化的。&lt;/p&gt; &#xA;&lt;p&gt;但是我得澄清下，虽然是中心化的，但是这个项目也不一定是个骗局，也许只是项目方没有做好。 从技术上来讲， event chain是可以被追溯，可以防止篡改的。前期是项目方公开所有的event，并且允许韭菜们随时同步。 而且，不仅要公开所有的event chain，也要公开所有不在chain中，即没有中将的韭菜们提交event的，以供社区验算中奖结果。（按照上文提到的算法）&lt;/p&gt; &#xA;&lt;p&gt;我相信这也是他们正在努力的方向，但至少目前，他们还没有做到，而且里这一步还很远。。&lt;/p&gt; &#xA;&lt;p&gt;希望韭菜们别再骂我了，我不喜欢中心化的东西。所以不会是你们的竞争对手。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>subsquid-quests/pooltogether-v3-migration</title>
    <updated>2024-01-08T01:44:11Z</updated>
    <id>tag:github.com,2024-01-08:/subsquid-quests/pooltogether-v3-migration</id>
    <link href="https://github.com/subsquid-quests/pooltogether-v3-migration" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A quest to migrate PoolTogether Prize Pool subgraph to Subsquid&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;img src=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; alt=&#34;Subsquid Logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;&lt;img src=&#34;https://docs.rs/leptos/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://subsquid.io&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PoolTogether V3 Subgraph migration&lt;/h1&gt; &#xA;&lt;p&gt;This quest is to migrate the &lt;a href=&#34;https://github.com/pooltogether/pooltogether-subgraph-v3/raw/master/networks/mainnet.json&#34;&gt;mainnet deployment&lt;/a&gt; of the &lt;a href=&#34;https://github.com/pooltogether/pooltogether-subgraph-v3/tree/master&#34;&gt;PoolTogether Prize Pool subgraph&lt;/a&gt; to Squid SDK. The resulting squid should match the &lt;a href=&#34;https://v3.docs.pooltogether.com/resources/subgraphs&#34;&gt;GraphQL API&lt;/a&gt; of the subgraph as close as possible, by migrating &lt;code&gt;schema.graphql&lt;/code&gt;. The judges reserve the right to request improvements afther the initial review of the submission. Reach out to the &lt;a href=&#34;https://discord.com/channels/857105545135390731/1155812879770058783&#34;&gt;Discord Channel&lt;/a&gt; for any tech questions regarding this quest. Use &lt;code&gt;template&lt;/code&gt; squid as a starter.&lt;/p&gt; &#xA;&lt;h1&gt;Quest Info&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Skill Level&lt;/th&gt; &#xA;   &lt;th&gt;Time required (hours)&lt;/th&gt; &#xA;   &lt;th&gt;Reward&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Squid Deployment&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{orange}{\textsf{Medium}}$&lt;/td&gt; &#xA;   &lt;td&gt;~5&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{red}{\textsf{2250tSQD}}$&lt;/td&gt; &#xA;   &lt;td&gt;open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Acceptance critera&lt;/h1&gt; &#xA;&lt;p&gt;Ultimately, the solutions are accepted at the discretion of judges following a manual review. This sections is a rough guide that is in no way binding on our side.&lt;/p&gt; &#xA;&lt;p&gt;Some of the reasons why the solution will not be accepted include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;squid does not start&lt;/li&gt; &#xA; &lt;li&gt;squid fails to sync fully due to internal errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.subsquid.io/evm-indexing/configuration/caveats/&#34;&gt;batch handler filters&lt;/a&gt; are not set up correctly (leads to a late sync failure in &lt;a href=&#34;https://docs.subsquid.io/evm-indexing/evm-processor/#rpc-ingestion&#34;&gt;RPC-ingesting&lt;/a&gt; squids)&lt;/li&gt; &#xA; &lt;li&gt;data returned for any query is not consistent with subgraph data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may find &lt;a href=&#34;https://github.com/abernatskiy/compareGraphQL&#34;&gt;this tool&lt;/a&gt; to be useful for squid to subgraph API comparisons.&lt;/p&gt; &#xA;&lt;p&gt;It is desirable that your solution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;includes a suite of test GraphQL queries that touches every &lt;a href=&#34;https://docs.subsquid.io/store/postgres/schema-file/entities/&#34;&gt;schema entity&lt;/a&gt; and, if used, every &lt;a href=&#34;https://docs.subsquid.io/graphql-api/custom-resolvers/&#34;&gt;custom resolver&lt;/a&gt; at least once, with corresponding subgraph queries (listing in README is enough)&lt;/li&gt; &#xA; &lt;li&gt;has high code quality (readability, simplicity, comments where necessary)&lt;/li&gt; &#xA; &lt;li&gt;uses &lt;a href=&#34;https://docs.subsquid.io/basics/batch-processing/&#34;&gt;batch processing&lt;/a&gt; consistently&lt;/li&gt; &#xA; &lt;li&gt;avoids any &#34;sleeping bugs&#34;: logic errors that accidentally happen to not break the data&lt;/li&gt; &#xA; &lt;li&gt;follows the standard squid startup procedure: &lt;pre&gt;&lt;code&gt;git clone &amp;lt;repo_url&amp;gt;&#xA;cd &amp;lt;repo_url&amp;gt;&#xA;npm ci&#xA;sqd up&#xA;sqd process &amp;amp;&#xA;sqd serve&#xA;&lt;/code&gt;&lt;/pre&gt; If it does not, describe your startup procedure in the README.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please test your solutions before submitting. We do allow some corrections, but judges&#39; time is not limitless.&lt;/p&gt; &#xA;&lt;p&gt;To submit, invite the following github accounts to your private repo : &lt;a href=&#34;https://github.com/dariaag&#34;&gt;@dariaag&lt;/a&gt;, &lt;a href=&#34;https://github.com/belopash&#34;&gt;@belopash&lt;/a&gt;, &lt;a href=&#34;https://github.com/abernatskiy&#34;&gt;@abernatskiy&lt;/a&gt; and &lt;a href=&#34;https://github.com/dzhelezov&#34;&gt;@dzhelezov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Rewards&lt;/h1&gt; &#xA;&lt;p&gt;tSQD rewards will be delivered via the &lt;a href=&#34;https://app.subsquid.io/quests&#34;&gt;quests page&lt;/a&gt; of Subsquid Cloud. Make sure you use the same GitHub handle to make a submission and when linking to that page.&lt;/p&gt; &#xA;&lt;p&gt;Winners will be listed at the quest repository README. If you do not wish to be listed please tell us that in an issue in your submission repo.&lt;/p&gt; &#xA;&lt;h1&gt;Useful links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.subsquid.io/deploy-squid/quickstart/&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.subsquid.io/migrate/migrate-subgraph/&#34;&gt;TheGraph Migration guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itsjerryokolo/CryptoPunks&#34;&gt;Cryptopunks Subgraph source code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup and Common errors&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Node v16.x or newer &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;https://nodejs.org/en/download&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Docker &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;https://docs.docker.com/engine/install/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install git &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Squid CLI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g @subsquid/cli@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to run a squid:&lt;/h2&gt; &#xA;&lt;p&gt;Full startup procedure for newly developed squids:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependecies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Generate model&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd codegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Generate types&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd typegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Build the squid&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Open docker and run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Generate migrations:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd migration:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Start processing:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Start a local GraphQL server in a separate terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Types (&lt;code&gt;./src/abi&lt;/code&gt;), models (&lt;code&gt;./src/model&lt;/code&gt;) and migrations (&#39;./db&#39;) are typically kept within squid repos after they become stable. Then the startup procedure simplifies to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;sqd up&#xA;sqd process &amp;amp;&#xA;sqd serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Possible Errors:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Docker not installed&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;X db Error × query-gateway Error&#xA;Error response from daemon: Get &#34;https://registry-1.docker.jo/v2/&#34;: uri ting to 127.0.0.1:8888: dial cp 127.0.0.1:8888: connectex: No connection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Git not installed&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: Error: spawn git ENOENT&#xA;at ChildProcess._handle.onexit (node: internal/child_process: 284:19)&#xA;at onErrorNT (node: internal/child_process:477:16)&#xA;at process.processTicksAndRejections (node: internal/process/task_queues:82:21)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Dependencies not installed. Run &lt;code&gt;npm ci&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd typegen&#xA;TYPEGEN&#xA;    Error: spawn squid-evm-typegen ENOENT&#xA;    Code: ENOENT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Rate-limiting. Get a private RPC endpoint from &lt;a href=&#34;https://ethereumnodes.com&#34;&gt;any node provider&lt;/a&gt;, then change the &lt;code&gt;rpcUrl&lt;/code&gt; in &lt;code&gt;processor.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;will pause new requests for 20000ms {&#34;rpcUrl&#34;:&#34;https://rpc.ankr.com/eth&#34;,&#xA;&#34;reason&#34; : &#34;HttpError: got 429 from https://rpc.ankr.com/eth&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If necessary, &lt;a href=&#34;https://docs.subsquid.io/evm-indexing/configuration/initialization/#set-data-source&#34;&gt;rate limit your RPC queries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Best practices:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Batch saving&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;let transfers: Transfers[] = [];&#xA;...&#xA;ctx.store.save(transfers);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Using map instead of array to avoid duplicate values&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;let transfers: Map&amp;lt;string, Transfer&amp;gt; = new Map();&#xA;...&#xA;ctx.store.upsert([...transfers.values()]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Verify log addresses, not only topics.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; if (log.topics[0] === erc721.events.Transfer.topic &amp;amp;&amp;amp; log.address === CONTRACT_ADDRESS) {&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>