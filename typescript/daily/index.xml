<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-11T01:48:19Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anc95/writely</title>
    <updated>2023-03-11T01:48:19Z</updated>
    <id>tag:github.com,2023-03-11:/anc95/writely</id>
    <link href="https://github.com/anc95/writely" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ù§Ô∏è‚Äçüî• A GPT powered chrome extension improving your writing and reading. ÔΩú Âü∫‰∫é GPT ÁöÑÊµèËßàÂô®Êèí‰ª∂ÔºåÁî®‰∫éÂçèÂä©ÁºñËæëÂíåÈòÖËØª&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Writely (Beta)&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Bring the power of Notion AI to everywhere&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/anc95/writely/main/assets/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anc95/writely/main/README-CN.md&#34;&gt;‰∏≠ÊñáÊñáÊ°£&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;1.üî• Based on Open AI GPT model, brings a new intelligent writing experience.&lt;/p&gt; &#xA;&lt;p&gt;2.‚úçÔ∏è Support writing assistant on any editor webpage on the Internet, effectively improving users&#39; writing efficiency and quality.&lt;/p&gt; &#xA;&lt;p&gt;3.üìñ The product can perform query translation and assist reading, greatly reducing users&#39; reading time and improving comprehension.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/anc95/writely/releases&#34;&gt;release&lt;/a&gt; to download the Zip package and unzip it.&lt;/li&gt; &#xA; &lt;li&gt;Open the browser and go to chrome://extensions/.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the developer mode in the upper right corner is enabled.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Load Unpacked&lt;/code&gt; in the upper left corner and load the folder from step 1.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;800&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/13167934/223933464-e8518da6-86eb-4bc3-b2cd-72497cbe5c18.png&#34;&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Obtain an Open AI API Key. If you don&#39;t have one, apply for it at &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click the plugin icon and click the &lt;code&gt;Settings&lt;/code&gt; icon.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;430&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/13167934/223933756-b001d01a-899c-42e5-be14-753357a1bba5.png&#34;&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Perform configuration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;800&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/anc95/writely/main/assets/config.png&#34;&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;After sliding the word on any webpage, a &#34;W&#34; icon will appear near the mouse, click to use.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13167934/224320617-b8ba473b-6250-470c-92ac-aa206adbb5a8.gif&#34; alt=&#34;ezgif com-video-to-gif (7)&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/13167934/224236822-eb1cc963-77e5-4820-aa6d-63088989c0cf.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More demos &lt;a href=&#34;https://raw.githubusercontent.com/anc95/writely/main/DEMO.md&#34;&gt;Demos&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>gannonh/gpt3.5-turbo-pgvector</title>
    <updated>2023-03-11T01:48:19Z</updated>
    <id>tag:github.com,2023-03-11:/gannonh/gpt3.5-turbo-pgvector</id>
    <link href="https://github.com/gannonh/gpt3.5-turbo-pgvector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGTP (gpt3.5-turbo) starter app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Domain-specific ChatGTP (gpt-3.5-turbo) Starter App&lt;/h1&gt; &#xA;&lt;p&gt;‚ö†Ô∏è UPDATE: Now uses the new &#34;ChatGPT API&#34; (model gpt-3.5-turbo). More on the new API: &lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;https://platform.openai.com/docs/guides/chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use this starter app to build your own ChatGPT style app trained on specific websites that you define. Live demo: &lt;a href=&#34;https://astro-labs.app/docs&#34;&gt;https://astro-labs.app/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ChatGPT is great for casual, general-purpose question-answers but falls short when domain-specific knowledge is needed. Further, it makes up answers to fill its knowledge gaps and never cites its sources, so it can&#39;t really be trusted. This starter app uses embeddings coupled with vector search to solve this, or more specifically, to show how OpenAI&#39;s GPT-3 API can be used to create a conversational interfaces to domain-specific knowledge.&lt;/p&gt; &#xA;&lt;p&gt;Embeddings, as represented by vectors of floating-point numbers, measure the &#34;relatedness&#34; of text strings. These are super useful for ranking search results, clustering, classification, etc. Relatedness is measured by cosine similarity. If the cosine similarity between two vectors is close to 1, the vectors are highly similar and point in the same direction. In the case of text embeddings, a high cosine similarity between two embedding vectors indicates that the corresponding text strings are highly related.&lt;/p&gt; &#xA;&lt;p&gt;This starter app uses embeddings to generate a vector representation of a document, and then uses vector search to find the most similar documents to the query. The results of the vector search are then used to construct a prompt for GPT-3, which is then used to generate a response. The response is then streamed to the user. Check out the Supabase blog posts on &lt;a href=&#34;https://supabase.com/blog/openai-embeddings-postgres-vector&#34;&gt;pgvector and OpenAI embeddings&lt;/a&gt; for more background.&lt;/p&gt; &#xA;&lt;p&gt;Technologies used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nextjs (React framework) + Vercel hosting&lt;/li&gt; &#xA; &lt;li&gt;Supabase (using their pgvector implementation as the vector database)&lt;/li&gt; &#xA; &lt;li&gt;OpenAI API (for generating embeddings and GPT-3 responses)&lt;/li&gt; &#xA; &lt;li&gt;TailwindCSS (for styling)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Functional Overview&lt;/h2&gt; &#xA;&lt;p&gt;Creating and storing the embeddings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web pages are scraped, stripped to plain text and split into 1000-character documents&lt;/li&gt; &#xA; &lt;li&gt;OpenAI&#39;s embedding API is used to generate embeddings for each document using the &#34;text-embedding-ada-002&#34; model&lt;/li&gt; &#xA; &lt;li&gt;The embeddings are then stored in a Supabase postgres table using pgvector; the table has three columns: the document text, the source URL, and the embedding vectors returned from the OpenAI API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Responding to queries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A single embedding is generated from the user prompt&lt;/li&gt; &#xA; &lt;li&gt;That embedding is used to perform a similarity search against the vector database&lt;/li&gt; &#xA; &lt;li&gt;The results of the similarity search are used to construct a prompt for GPT-3&lt;/li&gt; &#xA; &lt;li&gt;The GTP-3 response is then streamed to the user.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The following set-up guide assumes at least basic familiarity developing web apps with React and Nextjs. Experience with OpenAI APIs and Supabase is helpful but not required to get things working.&lt;/p&gt; &#xA;&lt;h3&gt;Set-up Supabase&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Supabase account and project at &lt;a href=&#34;https://app.supabase.com/sign-in&#34;&gt;https://app.supabase.com/sign-in&lt;/a&gt;. NOTE: Supabase support for pgvector is relatively new (02/2023), so it&#39;s important to create a new project if your project was created before then.&lt;/li&gt; &#xA; &lt;li&gt;First we&#39;ll enable the Vector extension. In Supabase, this can be done from the web portal through &lt;code&gt;Database&lt;/code&gt; ‚Üí &lt;code&gt;Extensions&lt;/code&gt;. You can also do this in SQL by running:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;create extension vector;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next let&#39;s create a table to store our documents and their embeddings. Head over to the SQL Editor and run the following query:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table documents (&#xA;  id bigserial primary key,&#xA;  content text,&#xA;  url text,&#xA;  embedding vector (1536)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finally, we&#39;ll create a function that will be used to perform similarity searches. Head over to the SQL Editor and run the following query:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create or replace function match_documents (&#xA;  query_embedding vector(1536),&#xA;  similarity_threshold float,&#xA;  match_count int&#xA;)&#xA;returns table (&#xA;  id bigint,&#xA;  content text,&#xA;  url text,&#xA;  similarity float&#xA;)&#xA;language plpgsql&#xA;as $$&#xA;begin&#xA;  return query&#xA;  select&#xA;    documents.id,&#xA;    documents.content,&#xA;    documents.url,&#xA;    (documents.embedding &amp;lt;=&amp;gt; query_embedding) as similarity&#xA;  from documents&#xA;  where (documents.embedding &amp;lt;=&amp;gt; query_embedding) &amp;gt; similarity_threshold&#xA;  order by documents.embedding &amp;lt;=&amp;gt; query_embedding&#xA;  limit match_count;&#xA;end;&#xA;$$;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set-up local environment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clone the repo: &lt;code&gt;gh repo clone gannonh/gpt3.5-turbo-pgvector&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;unzip and open in your favorite editor (the following assumes VS Code on a Mac)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd gpt3.5-turbo-pgvector&#xA;code .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create a .env.local file in the root directory to store environment variables:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.local.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open the .env.local file and add your Supabase project URL and API key. You can find these in the Supabase web portal under &lt;code&gt;Project&lt;/code&gt; ‚Üí &lt;code&gt;API&lt;/code&gt;. The API key should be stored in the &lt;code&gt;SUPABASE_ANON_KEY&lt;/code&gt; variable and project URL should be stored under &lt;code&gt;NEXT_PUBLIC_SUPABASE_URL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add your OPENAI PI key to .env.local. You can find this in the OpenAI web portal under &lt;code&gt;API Keys&lt;/code&gt;. The API key should be stored in the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;Start the app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to view the app.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yuvalsuede/ai-component-generator</title>
    <updated>2023-03-11T01:48:19Z</updated>
    <id>tag:github.com,2023-03-11:/yuvalsuede/ai-component-generator</id>
    <link href="https://github.com/yuvalsuede/ai-component-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ai2ui.co&#34;&gt; &lt;img style=&#34;max-width: 400px;&#34; alt=&#34;logo&#34; src=&#34;https://ai2ui.co/ai-component-generator-logo.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Welcome to AI Component Generator with ChatGPT&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;License: MIT License&#34; src=&#34;https://img.shields.io/badge/License-MIT License-yellow.svg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This project generates almost any UI components with OpenAI&#39;s ChatGPT and allows you to copy the html code&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ai2ui.co&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuvalsuede/ai-component-generator/main/public/screenshot.png&#34; alt=&#34;Twitter Bio Generator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://ai2ui.co/&#34;&gt;AI2UI&lt;/a&gt; component generator&lt;/h1&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;This project uses the &lt;a href=&#34;https://openai.com/api/&#34;&gt;ChatGPT API&lt;/a&gt; and &lt;a href=&#34;https://vercel.com/features/edge-functions&#34;&gt;Vercel Edge functions&lt;/a&gt;. It constructs a prompt based on the form and user input, sends it to the chatGPT API via a Vercel Edge function, then streams the response back to the application. You can ask for any UI component, free style. Most likely it will generate the right thing for you. This can also be used as a great bootstrap for projects, I tried to make the style Material-UI styled, but you can change this behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;This project is built with &lt;code&gt;Next.js&lt;/code&gt; and &lt;code&gt;TailwindCSS&lt;/code&gt;, so you can deploy it directly to Vercel.&lt;/p&gt; &#xA;&lt;p&gt;After cloning the repo, go to &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;OpenAI&lt;/a&gt; to make an account and put your API key in a file called &lt;code&gt;.env&lt;/code&gt;(OPENAI_API_KEY) Then, run the application in the command line and it will be available at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changing ChatGPT prompts and requests&lt;/h2&gt; &#xA;&lt;p&gt;In order to change ChatGPT response you only need to give it an example of what you wish to get back (use the assistant role to generate an example of a good response)&#34;. In the example below I show it how to generate TailwindCSS and Next.js component, and later ask just to return the corresponding HTML code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;// /api/generate.ts&#xA;&#xA;const handler = async (req: Request): Promise&amp;lt;Response&amp;gt; =&amp;gt; {&#xA;    const {prompt} = (await req.json()) as {&#xA;        prompt?: string;&#xA;    };&#xA;&#xA;    if (!prompt) {&#xA;        return new Response(&#34;No prompt in the request&#34;, {status: 400});&#xA;    }&#xA;&#xA;    const payload: OpenAIStreamPayload = {&#xA;        model: &#34;gpt-3.5-turbo&#34;,&#xA;        messages: [&#xA;            {&#xA;                &#34;role&#34;: &#34;user&#34;,&#xA;                &#34;content&#34;: &#34;create next.js + tailwind css code for button 200 x 100, light purple background, generate text on it. Please create a complete next.js component&#34;&#xA;            },&#xA;            {&#xA;                &#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: `&#xA;                    import React from &#39;react&#39;;&#xA;                    const MyComponent = () =&amp;gt; {&#xA;                      return (&#xA;                        &amp;lt;div className=&#34;flex flex-col items-center justify-center h-screen&#34;&amp;gt;&#xA;                          &amp;lt;h1 className=&#34;text-3xl font-bold mb-4&#34;&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#xA;                          &amp;lt;p className=&#34;text-lg mb-4&#34;&amp;gt;Welcome to my Next.js component using Tailwind CSS&amp;lt;/p&amp;gt;&#xA;                          &amp;lt;button className=&#34;bg-purple-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-opacity-50&#34;&amp;gt;Click Me&amp;lt;/button&amp;gt;&#xA;                        &amp;lt;/div&amp;gt;&#xA;                      );&#xA;                    };&#xA;                    export default MyComponent;&#xA;                `&#xA;            },&#xA;            {&#xA;                &#34;role&#34;: &#34;user&#34;,&#xA;                &#34;content&#34;: &#34;Please create html code with inline css what create the following component, Meterial UI look and feel, return only code&#34;&#xA;            },&#xA;            {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: prompt},&#xA;        ],&#xA;    };&#xA;&#xA;    const stream = await OpenAIStream(payload);&#xA;    return new Response(stream);&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who made this project&lt;/h2&gt; &#xA;&lt;p&gt;My name is &lt;a href=&#34;https://www.linkedin.com/in/yuval-suede/&#34;&gt;Yuval&lt;/a&gt; - an entrepreneur at heart , I ‚ù§Ô∏è building end-to-end systems that not only look amazing and feel state-of-the-art, but also have real meaning and impact.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions, issues and feature requests are welcome!&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repository, Clone it on your device. That&#39;s it üéâ&lt;/li&gt; &#xA; &lt;li&gt;Finally make a pull request :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìù License&lt;/h2&gt; &#xA;&lt;p&gt;This project is &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt; licensed.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;We accept contribution with great love! Show your interest! Contribute!&lt;/p&gt;</summary>
  </entry>
</feed>