<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-09T01:43:20Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>devfullcycle/imersao16</title>
    <updated>2023-12-09T01:43:20Z</updated>
    <id>tag:github.com,2023-12-09:/devfullcycle/imersao16</id>
    <link href="https://github.com/devfullcycle/imersao16" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>CopilotKit/CopilotKit</title>
    <updated>2023-12-09T01:43:20Z</updated>
    <id>tag:github.com,2023-12-09:/CopilotKit/CopilotKit</id>
    <link href="https://github.com/CopilotKit/CopilotKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build in-app AI chatbots ü§ñ, and AI-powered Textareas ‚ú®, into react web apps.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/CopilotKit/CopilotKit/assets/746397/5890217b-524e-49c5-a89e-b8743d2acd51&#34;&gt; &#xA;  &lt;img alt=&#34;CopilotKit Logo&#34; src=&#34;https://github.com/CopilotKit/CopilotKit/assets/746397/bd5c9079-929b-4d55-bdc9-16d1c8181b71&#34; width=&#34;450px&#34; max-width=&#34;100%&#34;&gt; &#xA; &lt;/picture&gt;  &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/6dffbvGU3D&#34;&gt; &lt;img src=&#34;https://dcbadge.vercel.app/api/server/6dffbvGU3D?compact=true&amp;amp;style=flat&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/CopilotKit/CopilotKit/actions/workflows/ci.yml&#34;&gt; &lt;img src=&#34;https://github.com/CopilotKit/CopilotKit/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@copilotkit/react-core&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@copilotkit/react-core&#34; alt=&#34;NPM&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/CopilotKit/CopilotKit&#34; alt=&#34;MIT&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://www.npmjs.com/package/@copilotkit/react-core&#34;&gt; &lt;h1 align=&#34;center&#34;&gt; The Open-Source Copilot Platform &lt;/h1&gt; &lt;h3 align=&#34;center&#34;&gt; in-app chatbots, and AI-enabled Textareas. &lt;/h3&gt; &lt;/a&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://www.npmjs.com/package/@copilotkit/react-core&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;img alt=&#34;Backed by Techstars&#34; src=&#34;https://github.com/CopilotKit/CopilotKit/assets/746397/a5029e89-0986-4dfc-bbd6-61d18944ae59&#34; width=&#34;150px&#34; max-width=&#34;100%&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://docs.copilotkit.ai&#34; rel=&#34;dofollow&#34;&gt;&lt;strong&gt;Explore the docs ¬ª&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://discord.gg/6dffbvGU3D&#34;&gt;Join our Discord&lt;/a&gt; ¬∑ &lt;a href=&#34;https://copilotkit.ai?utm_medium=github&amp;amp;utm_source=github&#34;&gt;Website&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/CopilotKit/CopilotKit/issues/new?assignees=&amp;amp;labels=bug&amp;amp;projects=&amp;amp;template=bug_report.md&amp;amp;title=&#34;&gt;Report Bug&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/CopilotKit/CopilotKit/issues/new?assignees=&amp;amp;labels=feature+request&amp;amp;projects=&amp;amp;template=feature_request.md&amp;amp;title=&#34;&gt;Request Feature&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Questions? &lt;a href=&#34;https://calendly.com/atai_/copilotkit&#34; rel=&#34;dofollow&#34;&gt;&lt;strong&gt; Book a call with us ¬ª&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/CopilotKit/CopilotKit/assets/746397/1aa17608-46a5-4e2f-aad5-19c8f5c5f1bd&#34; height=&#34;220px&#34; style=&#34;border-radius: 35px;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;üåü &lt;strong&gt;&amp;lt;CopilotPortal /&amp;gt;:&lt;/strong&gt; &lt;br&gt; Build &lt;strong&gt;in-app AI chatbots&lt;/strong&gt; that can &#34;see&#34; the current app state + take action inside your app. &lt;br&gt; The AI chatbot can talk to your app frontend &amp;amp; backend, and to 3rd party services (Salesforce, Dropbox, etc.) via plugins. &lt;br&gt; AI &#34;second brain&#34; for your users, on tap.&lt;/p&gt; &#xA;&lt;p&gt;üåü &lt;strong&gt;&amp;lt;CopilotTextarea /&amp;gt;:&lt;/strong&gt; &lt;br&gt; AI-assisted text generation. Drop-in replacement for any &lt;code&gt;&amp;lt;textarea /&amp;gt;.&lt;/code&gt;&lt;br&gt; Autocompletions + AI editing + generate from scratch. Indexed on your users&#39; content.&lt;br&gt; Starting with React. Use any LLM. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Combines frontend SDKs, backend SDKs, and (optional) cloud infrastructure. Open-source ü™Å&lt;/p&gt; &#xA;&lt;h2&gt;üéØ Features Overview&lt;/h2&gt; &#xA;&lt;h3&gt;CopilotTextarea: AI-assisted text generation + editing.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ A a drop-in &lt;code&gt;&amp;lt;textarea /&amp;gt;&lt;/code&gt; replacement. Supports all &lt;code&gt;&amp;lt;textarea /&amp;gt;&lt;/code&gt; customizations.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Context-aware autocompletions ‚ú® (like in GitHub Copilot)&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ AI editing ‚ú® - &#34;list the client&#39;s top 3 pain points from the last call using @SalesforceData&#34;&lt;/li&gt; &#xA; &lt;li&gt;üü© Generate from scratch ‚ú® - automatically populate the initial content based on given context&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ App context &amp;amp; 3rd party context with &lt;code&gt;useMakeCopilotReadable&lt;/code&gt; and &lt;code&gt;useMakeCopilotDocumentReadable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Fully custsomizable prompt engineering&lt;/li&gt; &#xA; &lt;li&gt;üü© Arbitrary LLM chains.&lt;/li&gt; &#xA; &lt;li&gt;üü© Bold + italics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Copilot Chatbot: (frontend + backend) runtimes for in-app copilots.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ Index on frontend app state (via &lt;code&gt;useMakeCopilotReadable&lt;/code&gt; and &lt;code&gt;useMakeCopilotDocumentReadable&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;üü© Index on backend state&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ frontend function calling runtime (in-app actions) (via &lt;code&gt;useMakeCopilotActionable&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;üü© backend function calling runtime (auth enabled)&lt;/li&gt; &#xA; &lt;li&gt;üü© Autorun vs. &#34;sensitive&#34; functions (require user approval before execution).&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Cursor-style @document-referecing.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Bring your own model&lt;/li&gt; &#xA; &lt;li&gt;üü© 3rd party plugins&lt;/li&gt; &#xA; &lt;li&gt;üü© execute arbitrary LLM chains&lt;/li&gt; &#xA; &lt;li&gt;üü© OpenAI &lt;em&gt;assistants&lt;/em&gt; api&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Fully customize UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2-min showcase + 2-min implementation tutorial:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CopilotKit/CopilotKit/assets/746397/b0cdf38b-ec5c-4e95-8623-364bafb70907&#34;&gt;https://github.com/CopilotKit/CopilotKit/assets/746397/b0cdf38b-ec5c-4e95-8623-364bafb70907&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i @copilotkit/react-core @copilotkit/react-ui @copilotkit/react-textarea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;See quickstart in the &lt;a href=&#34;https://docs.copilotkit.ai&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;CopilotTextarea /&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A drop-in &amp;lt;textarea /&amp;gt; replacement with context-aware Copilot autocompletions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CopilotKit/CopilotKit/main/assets/CopilotTextarea.gif&#34; width=&#34;400&#34; height=&#34;400&#34; style=&#34;border-radius: 15px;&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Features&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Customizable &lt;code&gt;purpose&lt;/code&gt; prompt.&lt;/li&gt; &#xA; &lt;li&gt;Provide arbitrary context to inform autocompletions using &lt;code&gt;useMakeCopilotReadable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Works with any backend/LLM, using &lt;code&gt;ChatlikeApiEndpoint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports all &lt;code&gt;&amp;lt;textarea /&amp;gt;&lt;/code&gt; customizations&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import &#34;@copilotkit/react-textarea/styles.css&#34;; // add to the app-global css&#xA;import { CopilotTextarea } from &#34;@copilotkit/react-textarea&#34;;&#xA;import { CopilotProvider } from &#34;@copilotkit/react-core&#34;;&#xA;&#xA;// call ANYWHERE in your app to provide external context (make sure you wrap the app with a &amp;lt;CopilotProvider &amp;gt;):&#xA;// See below for more features (parent/child hierarchy, categories, etc.)&#xA;useMakeCopilotReadable(relevantInformation)&#xA;useMakeCopilotDocumentReadable(document)&#xA;&#xA;return (&#xA;  &amp;lt;CopilotProvider chatApiEndpoint=&#34;/api/copilotkit/chat&#34;&amp;gt; {/* Global state &amp;amp; copilot logic. Put this around the entire app */}&#xA;    &amp;lt;CopilotTextarea&#xA;      className=&#34;p-4 w-1/2 aspect-square font-bold text-3xl bg-slate-800 text-white rounded-lg resize-none&#34;&#xA;      placeholder=&#34;A CopilotTextarea!&#34;&#xA;      autosuggestionsConfig={{&#xA;        purposePrompt: &#34;A COOL &amp;amp; SMOOTH announcement post about CopilotTextarea. Be brief. Be clear. Be cool.&#34;,&#xA;        forwardedParams: { // additional arguments to customize autocompletions&#xA;          max_tokens: 25,&#xA;          stop: [&#34;\n&#34;, &#34;.&#34;, &#34;,&#34;],&#xA;        },&#xA;      }}&#xA;    /&amp;gt;&#xA;  &amp;lt;/CopilotProvider&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrate copilot&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import &#34;@copilotkit/react-ui/styles.css&#34;; // add to the app-global css&#xA;import { CopilotProvider } from &#34;@copilotkit/react-core&#34;;&#xA;import { CopilotSidebarUIProvider } from &#34;@copilotkit/react-ui&#34;;&#xA;&#xA;export default function App(): JSX.Element {&#xA;  return (&#xA;  &amp;lt;CopilotProvider chatApiEndpoint=&#34;/api/copilotkit/chat&#34;&amp;gt; {/* Global state &amp;amp; copilot logic. Put this around the entire app */}&#xA;      &amp;lt;CopilotSidebarUIProvider&amp;gt; {/* A built-in Copilot UI (or bring your own UI). Put around individual pages, or the entire app. */}&#xA;&#xA;        &amp;lt;YourContent /&amp;gt;&#xA;&#xA;      &amp;lt;/CopilotSidebarUIProvider&amp;gt;&#xA;    &amp;lt;/CopilotProvider&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Features&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Batteries included. Add 2 React components, and your Copilot is live.&lt;/li&gt; &#xA; &lt;li&gt;Customize the built-in &lt;code&gt;CopilotSidebarUIProvider&lt;/code&gt; UI -- or bring your own UI component.&lt;/li&gt; &#xA; &lt;li&gt;Extremely hackable. Should the need arise, you can define 1st-class extensions just as powerful as &lt;code&gt;useMakeCopilotReadable&lt;/code&gt;, &lt;code&gt;useMakeCopilotActionable&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Give the copilot read permissions&lt;/h3&gt; &#xA;&lt;h4&gt;Features&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Propagate useful information &amp;amp; granular app-state to the Copilot&lt;/li&gt; &#xA; &lt;li&gt;Easily maintain the hierarchical structure of information with &lt;code&gt;parentId&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;One call to rule them all: &lt;code&gt;useMakeCopilotReadable&lt;/code&gt; works both with the sidekick, and with CopilotTextarea. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use the &lt;code&gt;contextCategories: string[]&lt;/code&gt; param to route information to different places.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { useMakeCopilotReadable } from &#34;@copilotkit/react-core&#34;;&#xA;&#xA;&#xA;function Employee(props: EmployeeProps): JSX.Element {&#xA;  const { employeeName, workProfile, metadata } = props;&#xA;&#xA;  // propagate any information copilot&#xA;  const employeeContextId = useMakeCopilotReadable(employeeName);&#xA;&#xA;  // Pass a parentID to maintain a hiearchical structure.&#xA;  // Especially useful with child React components, list elements, etc.&#xA;  useMakeCopilotReadable(workProfile.description(), employeeContextId);&#xA;  useMakeCopilotReadable(metadata.description(), employeeContextId);&#xA;  &#xA;  return (&#xA;    // Render as usual...&#xA;  );&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Give the copilot write permissions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { useMakeCopilotActionable } from &#34;@copilotkit/react-core&#34;;&#xA;&#xA;function Department(props: DepartmentProps): JSX.Element {&#xA;  // ...&#xA;&#xA;  // Let the copilot take action on behalf of the user.&#xA;  useMakeCopilotActionable(&#xA;    {&#xA;      name: &#34;setEmployeesAsSelected&#34;,&#xA;      description: &#34;Set the given employees as &#39;selected&#39;&#34;,&#xA;      argumentAnnotations: [&#xA;        {&#xA;          name: &#34;employeeIds&#34;,&#xA;          type: &#34;array&#34;, items: { type: &#34;string&#34; }&#xA;          description: &#34;The IDs of employees to set as selected&#34;,&#xA;          required: true&#xA;        }&#xA;      ],&#xA;      implementation: async (employeeIds) =&amp;gt; setEmployeesAsSelected(employeeIds),&#xA;    },&#xA;    []&#xA;  );&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Features&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Plain typescript actions. Edit a textbox, navigate to a new page, or anythign you can think of.&lt;/li&gt; &#xA; &lt;li&gt;Specify arbitrary input types.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Near-Term Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;üìä Please vote on features via the Issues tab!&lt;/h3&gt; &#xA;&lt;h3&gt;Copilot-App Interaction&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ &lt;code&gt;useMakeCopilotReadable&lt;/code&gt;: give static information to the copilot, in sync with on-screen state&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ &lt;code&gt;useMakeCopilotActionable&lt;/code&gt;: Let the copilot take action on behalf of the user&lt;/li&gt; &#xA; &lt;li&gt;üöß &lt;code&gt;useMakeCopilotAskable&lt;/code&gt;: let the copilot ask for additional information when needed (coming soon)&lt;/li&gt; &#xA; &lt;li&gt;üöß &lt;code&gt;useEditCopilotMessage&lt;/code&gt;: edit the (unsent) typed user message to the copilot (coming soon)&lt;/li&gt; &#xA; &lt;li&gt;üöß copilot-assisted navigation: go to the best page to achieve some objective.&lt;/li&gt; &#xA; &lt;li&gt;üöß CopilotCloudKit: integrate arbitrary LLM logic / chains / RAG, using plain code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UI components&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ &lt;code&gt;&amp;lt;CopilotSidebarUIProvider&amp;gt;&lt;/code&gt;: Built in, hackable Copilot UI (optional - you can bring your own UI).&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ &lt;code&gt;&amp;lt;CopilotTextarea /&amp;gt;&lt;/code&gt;: drop-in &lt;code&gt;&amp;lt;textarea /&amp;gt;&lt;/code&gt; replacement with Copilot autocompletions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ Vercel AI SDK&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ OpenAI APIs&lt;/li&gt; &#xA; &lt;li&gt;üöß Langchain&lt;/li&gt; &#xA; &lt;li&gt;üöß Additional LLM providers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Frameworks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ React&lt;/li&gt; &#xA; &lt;li&gt;üöß Vue&lt;/li&gt; &#xA; &lt;li&gt;üöß Svelte&lt;/li&gt; &#xA; &lt;li&gt;üöß Swift (Mac + iOS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! üéâ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/6dffbvGU3D&#34;&gt;Join the Discord&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6dffbvGU3D&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/6dffbvGU3D?compact=true&amp;amp;style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![Discord](https://img.shields.io/discord/1122926057641742418.svg)](https://discord.gg/6dffbvGU3D) --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;atai &lt;code&gt;&amp;lt;at&amp;gt;&lt;/code&gt; copilotkit.ai&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>browserless/browserless</title>
    <updated>2023-12-09T01:43:20Z</updated>
    <id>tag:github.com,2023-12-09:/browserless/browserless</id>
    <link href="https://github.com/browserless/browserless" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The browserless service in Docker. Run on our cloud or bring your own.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/browserless/browserless/main/assets/logo.png&#34; alt=&#34;browserless.io logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/browserless/chrome&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/package-json/v/browserless/chrome&#34; alt=&#34;GitHub package.json version (subfolder of monorepo)&#34;&gt; &lt;img src=&#34;https://github.com/browserless/chrome/actions/workflows/docker-chromium.yml/badge.svg?sanitize=true&#34; alt=&#34;Chrome CI&#34;&gt; &lt;img src=&#34;https://github.com/browserless/chrome/actions/workflows/docker-firefox.yml/badge.svg?sanitize=true&#34; alt=&#34;Firefox CI&#34;&gt; &lt;img src=&#34;https://github.com/browserless/chrome/actions/workflows/docker-webkit.yml/badge.svg?sanitize=true&#34; alt=&#34;Webkit CI&#34;&gt; &lt;img src=&#34;https://github.com/browserless/chrome/actions/workflows/docker-multi.yml/badge.svg?sanitize=true&#34; alt=&#34;Multi CI&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/browserless/chrome/tree/v1&#34;&gt;Looking for v1.x.x of browserless? Check it out here&lt;/a&gt;. NOTE: Version 1 is the version we currently still have running on browserless&#39; hosted services.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;browserless is a web-based service that allows for remote clients to connect and execute headless work; all inside of docker. It supports new libraries like Puppeteer and Playwright, aiming to replace antiquated or in-house systems. We also bundle numerous handy REST-based APIs for doing more common actions like data collection, PDF generation and more.&lt;/p&gt; &#xA;&lt;p&gt;We also take care of other common issues such as missing system-fonts, missing external libraries, and performance improvements. We even handle edge-cases like downloading files, managing sessions, and have a full documentation site built into the project which includes Open API docs.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve been struggling to get a browser up and running docker, or scaling out your headless workloads, then browserless was built for you.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#hosting-providers&#34;&gt;Hosting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#puppeteer&#34;&gt;Puppeteer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#playwright&#34;&gt;Playwright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/browserless/chrome/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;External links&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.browserless.io/docs/start&#34;&gt;Full documentation site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chrome.browserless.io/&#34;&gt;Live Debugger (using browserless.io)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/browserless/chrome/pkgs/container/basic&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/browserless/shared_invite/enQtMzA3OTMwNjA3MzY1LTRmMWU5NjQ0MTQ2YTE2YmU3MzdjNmVlMmU4MThjM2UxODNmNzNlZjVkY2U2NjdkMzYyNTgyZTBiMmE3Nzg0MzY&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parallelism and request-queueing are built-in + configurable.&lt;/li&gt; &#xA; &lt;li&gt;Fonts and emoji&#39;s working out-of-the-box.&lt;/li&gt; &#xA; &lt;li&gt;Debug Viewer for actively viewing/debugging running sessions.&lt;/li&gt; &#xA; &lt;li&gt;An interactive puppeteer debugger, so you can see what the headless browser is doing and use its DevTools.&lt;/li&gt; &#xA; &lt;li&gt;Works with most headless libraries.&lt;/li&gt; &#xA; &lt;li&gt;Configurable session timers and health-checks to keep things running smoothly.&lt;/li&gt; &#xA; &lt;li&gt;Error tolerant: if Chrome dies it won&#39;t.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserless/browserless/main/#building-for-arm64-apple-m1-machines&#34;&gt;Support for running and development on Apple&#39;s M1 machines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;p&gt;browserless listens for both incoming websocket requests, generally issued by most libraries, as well as pre-build REST APIs to do common functions (PDF generation, images and so on). When a websocket connects to browserless it starts Chrome and proxies your request into it. Once the session is done then it closes and awaits for more connections. Some libraries use Chrome&#39;s HTTP endpoints, like &lt;code&gt;/json&lt;/code&gt; to inspect debug-able targets, which browserless also supports.&lt;/p&gt; &#xA;&lt;p&gt;You still execute the script itself which gives you total control over what library you want to choose and when to do upgrades. This also comes with the benefit of keep your code proprietary and able to run on numerous platforms. We simply take care of all the browser-aspects and offer a management layer on top of the browser.&lt;/p&gt; &#xA;&lt;h1&gt;Docker&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See more options on our &lt;a href=&#34;https://www.browserless.io/docs/docker-quickstart&#34;&gt;full documentation site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;docker run -p 3000:3000 ghcr.io/browserless/chrome&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;code&gt;http://localhost:3000/docs&lt;/code&gt; to see the documentation site.&lt;/li&gt; &#xA; &lt;li&gt;See more at our &lt;a href=&#34;https://github.com/browserless/chrome/pkgs/container/basic&#34;&gt;docker package&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Hosting Providers&lt;/h1&gt; &#xA;&lt;p&gt;We offer a first-class hosted product located &lt;a href=&#34;https://browserless.io&#34;&gt;here&lt;/a&gt;. Alternatively you can host this image on just about any major platform that offers hosting for docker. Our hosted service takes care of all the machine provisioning, notifications, dashboards and monitoring plus more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily upgrade and toggle between versions at the press of a button. No managing repositories and other code artifacts.&lt;/li&gt; &#xA; &lt;li&gt;Never need to update or pull anything from docker. There&#39;s literally zero software to install to get started.&lt;/li&gt; &#xA; &lt;li&gt;Scale your consumption up or down with different plans. We support up to thousands of concurrent sessions at a given time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re interested in using this image for commercial aspects, then please read the below section on licensing.&lt;/p&gt; &#xA;&lt;h1&gt;Puppeteer&lt;/h1&gt; &#xA;&lt;p&gt;Puppeteer allows you to specify a remote location for chrome via the &lt;code&gt;browserWSEndpoint&lt;/code&gt; option. Setting this for browserless is a single line of code change.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const browser = await puppeteer.launch();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const browser = await puppeteer.connect({ browserWSEndpoint: &#39;ws://localhost:3000&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Playwright&lt;/h1&gt; &#xA;&lt;p&gt;We support running with playwright via their remote connection method on the &lt;code&gt;chromium&lt;/code&gt; interface. Since playwright is very similar to puppeteer, even launch arguments and other things &#34;just work&#34;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const browser = await pw.chromium.launch();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const browser = await pw.chromium.connect(&#39;ws://localhost:3000/playwright/chromium&#39;);&#xA;&#xA;// OR&#xA;const browser = await pw.chromium.connectOverCDP(&#39;ws://localhost:3000&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, the rest of your code remains the same with no other changes required.&lt;/p&gt; &#xA;&lt;h1&gt;Usage with other libraries&lt;/h1&gt; &#xA;&lt;p&gt;Most libraries allow you to specify a remote instance of Chrome to interact with. They are either looking for a websocket endpoint, a host and port, or some address. Browserless supports these by default, however if you&#39;re having issues please make an issue in this project and we&#39;ll try and work with the library authors to get them integrated with browserless. Please note that in V2 we no longer support selenium or webdriver integrations.&lt;/p&gt; &#xA;&lt;p&gt;You can find a much larger list of supported libraries &lt;a href=&#34;https://www.browserless.io/docs/puppeteer-library&#34;&gt;on our documentation site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Motivations&lt;/h1&gt; &#xA;&lt;p&gt;Running Chrome on lambda or on your own is a fantastic idea but in practice is quite challenging in production. You&#39;re met with pretty tough cloud limits, possibly building Chrome yourself, and then dealing with odd invocation issues should everything else go ok. A lot of issues in various repositories are due to just challenges of getting Chrome running smoothly in AWS (see &lt;a href=&#34;https://github.com/GoogleChrome/puppeteer/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-desc&#34;&gt;here&lt;/a&gt;). You can see for yourself by going to nearly any library and sorting issues by most commented.&lt;/p&gt; &#xA;&lt;p&gt;Getting Chrome running well in docker is also a challenge as there&#39;s quiet a few packages you need in order to get Chrome running. Once that&#39;s done then there&#39;s still missing fonts, getting libraries to work with it, and having limitations on service reliability. This is also ignoring CVEs, access-controls, and scaling strategies.&lt;/p&gt; &#xA;&lt;p&gt;All of these issues prompted us to build a first-class image and workflow for interacting with Chrome in a more streamlined way. With browserless you never have to worry about fonts, extra packages, library support, security, or anything else. It just works reliably like any other modern web service. On top of that it comes with a prescribed approach on how you interact with Chrome, which is through socket connections (similar to a database or any other external appliance). What this means is that you get the ability to drive Chrome remotely without having to do updates/releases to the thing that runs Chrome since it&#39;s divorced from your application.&lt;/p&gt; &#xA;&lt;h1&gt;Licensing&lt;/h1&gt; &#xA;&lt;p&gt;SPDX-License-Identifier: SSPL-1.0 OR Browserless Commercial License.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use browserless to build commercial sites, applications, or in a continuous-integration system that&#39;s closed-source then you&#39;ll need to purchase a commercial license. This allows you to keep your software proprietary whilst still using browserless. &lt;a href=&#34;https://www.browserless.io/contact&#34;&gt;You can purchase a commercial license here&lt;/a&gt;. A commercial license grants you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Priority support on issues and features.&lt;/li&gt; &#xA; &lt;li&gt;On-premise running as well as running on public cloud providers for commercial/CI purposes for proprietary systems.&lt;/li&gt; &#xA; &lt;li&gt;Ability to modify the source (forking) for your own purposes.&lt;/li&gt; &#xA; &lt;li&gt;A new admin user-interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not only does it grant you a license to run such a critical piece of infrastructure, but you are also supporting further innovation in this space and our ability to contribute to it.&lt;/p&gt; &#xA;&lt;p&gt;If you are creating an open source application under a license compatible with the Server Side License 1.0, you may use browserless under those terms.&lt;/p&gt;</summary>
  </entry>
</feed>