<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-11T01:38:26Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>miurla/morphic</title>
    <updated>2024-04-11T01:38:26Z</updated>
    <id>tag:github.com,2024-04-11:/miurla/morphic</id>
    <link href="https://github.com/miurla/morphic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI-powered answer engine with a generative UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Morphic&lt;/h1&gt; &#xA;&lt;p&gt;An AI-powered answer engine with a generative UI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/miurla/morphic/main/public/capture-240404_blk.png&#34; alt=&#34;capture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üîç Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üß± &lt;a href=&#34;https://raw.githubusercontent.com/miurla/morphic/main/#-stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üöÄ &lt;a href=&#34;https://raw.githubusercontent.com/miurla/morphic/main/#-quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üåê &lt;a href=&#34;https://raw.githubusercontent.com/miurla/morphic/main/#-deploy&#34;&gt;Deploy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üß± Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;App framework: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Text streaming / Generative UI: &lt;a href=&#34;https://sdk.vercel.ai/docs&#34;&gt;Vercel AI SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generative Model: &lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search API: &lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Component library: &lt;a href=&#34;https://ui.shadcn.com/&#34;&gt;shadcn/ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Headless component primitives: &lt;a href=&#34;https://www.radix-ui.com/&#34;&gt;Radix UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Styling: &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;1. Fork and Clone repo&lt;/h3&gt; &#xA;&lt;p&gt;Fork the repo to your Github account, then run the following command to clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:[YOUR_GITHUB_ACCOUNT]/morphic.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd morphic&#xA;bun i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Fill out secrets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.local.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your .env.local file should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Used to set the base URL path for OpenAI API requests.The default value is https://api.openai.com/v1&#xA;OPENAI_API_BASE=&#xA;# OpenAI API key retrieved here: https://platform.openai.com/api-keys&#xA;OPENAI_API_KEY=[YOUR_OPENAI_API_KEY]&#xA;&#xA;# Tavily API Key retrieved here: https://app.tavily.com/home&#xA;TAVILY_API_KEY=[YOUR_TAVILY_API_KEY]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Run app locally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;bun dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now visit &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üåê Deploy&lt;/h2&gt; &#xA;&lt;p&gt;Host your own live version of Morphic with Vercel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fmiurla%2Fmorphic&amp;amp;env=OPENAI_API_BASE,OPENAI_API_KEY,TAVILY_API_KEY&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure-Samples/serverless-chat-langchainjs</title>
    <updated>2024-04-11T01:38:26Z</updated>
    <id>tag:github.com,2024-04-11:/Azure-Samples/serverless-chat-langchainjs</id>
    <link href="https://github.com/Azure-Samples/serverless-chat-langchainjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create your own serverless ChatGPT with Retrieval-Augmented-Generation using LangChain.js, TypeScript and Azure&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/packages/webapp/public/favicon.png&#34; alt=&#34;&#34; align=&#34;center&#34; height=&#34;64&#34;&gt; &#xA; &lt;h1&gt;Serverless ChatGPT with RAG using LangChain.js&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://codespaces.new/Azure-Samples/serverless-chat-langchainjs?hide_repo_select=true&amp;amp;ref=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Codespaces-Open-blue?style=flat-square&amp;amp;logo=github&#34; alt=&#34;Open project in GitHub Codespaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.to/azure/build-a-serverless-chatgpt-with-rag-using-langchainjs-3487&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Blog%20post-black?style=flat-square&amp;amp;logo=dev.to&#34; alt=&#34;dev.to blog post walkthrough&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Azure-Samples/serverless-chat-langchainjs/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/Azure-Samples/serverless-chat-langchainjs/build-test.yaml?style=flat-square&amp;amp;label=Build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Node.js-%3E=20-3c873a?style=flat-square&#34; alt=&#34;Node version&#34;&gt; &lt;a href=&#34;https://ollama.com/library/mistral&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Ollama-Mistral-ff7000?style=flat-square&#34; alt=&#34;Ollama + Mistral&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TypeScript-blue?style=flat-square&amp;amp;logo=typescript&amp;amp;logoColor=white&#34; alt=&#34;TypeScript&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- [![Watch how to use this sample on YouTube](https://img.shields.io/badge/YouTube-Watch-d95652.svg?style=flat-square&amp;logo=youtube)]() --&gt; &#xA; &lt;p&gt;&lt;span&gt;‚≠ê&lt;/span&gt; If you like this sample, star it on GitHub ‚Äî it helps a lot!&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#overview&#34;&gt;Overview&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#get-started&#34;&gt;Get started&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#run-the-sample&#34;&gt;Run the sample&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#resources&#34;&gt;Resources&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#faq&#34;&gt;FAQ&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/docs/images/demo.gif&#34; alt=&#34;Animation showing the chat app in action&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This sample shows how to build a serverless ChatGPT-like experience with Retrieval-Augmented Generation using &lt;a href=&#34;https://js.langchain.com/&#34;&gt;LangChain.js&lt;/a&gt; and Azure. The application is hosted on &lt;a href=&#34;https://learn.microsoft.com/azure/static-web-apps/overview&#34;&gt;Azure Static Web Apps&lt;/a&gt; and &lt;a href=&#34;https://learn.microsoft.com/azure/azure-functions/functions-overview?pivots=programming-language-javascript&#34;&gt;Azure Functions&lt;/a&gt;, with &lt;a href=&#34;https://learn.microsoft.com/azure/cosmos-db/mongodb/vcore/&#34;&gt;Azure Cosmos DB for MongoDB vCore&lt;/a&gt; as the vector database. You can use it as a starting point for building more complex AI applications.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can test this application locally without any cost using &lt;a href=&#34;https://ollama.com/&#34;&gt;Ollama&lt;/a&gt;. Follow the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#local-development&#34;&gt;Local Development&lt;/a&gt; section to get started.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Building AI applications can be complex and time-consuming, but using LangChain.js and Azure serverless technologies allows to greatly simplify the process. This application is a chatbot that uses a set of enterprise documents to generate responses to user queries.&lt;/p&gt; &#xA;&lt;p&gt;We provide sample data to make this sample ready to try, but feel free to replace it with your own. We use a fictitious company called &lt;em&gt;Contoso Real Estate&lt;/em&gt;, and the experience allows its customers to ask support questions about the usage of its products. The sample data includes a set of documents that describes its terms of service, privacy policy and a support guide.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/docs/images/architecture.drawio.png&#34; alt=&#34;Application architecture&#34; width=&#34;640px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This application is made from multiple components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A web app made with a single chat web component built with &lt;a href=&#34;https://lit.dev&#34;&gt;Lit&lt;/a&gt; and hosted on &lt;a href=&#34;https://learn.microsoft.com/azure/static-web-apps/overview&#34;&gt;Azure Static Web Apps&lt;/a&gt;. The code is located in the &lt;code&gt;packages/webapp&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A serverless API built with &lt;a href=&#34;https://learn.microsoft.com/azure/azure-functions/functions-overview?pivots=programming-language-javascript&#34;&gt;Azure Functions&lt;/a&gt; and using &lt;a href=&#34;https://js.langchain.com/&#34;&gt;LangChain.js&lt;/a&gt; to ingest the documents and generate responses to the user chat queries. The code is located in the &lt;code&gt;packages/api&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A database to store the text extracted from the documents and the vectors generated by LangChain.js, using &lt;a href=&#34;https://learn.microsoft.com/azure/cosmos-db/mongodb/vcore/&#34;&gt;Azure Cosmos DB for MongoDB vCore&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A file storage to store the source documents, using &lt;a href=&#34;https://learn.microsoft.com/azure/storage/blobs/storage-blobs-introduction&#34;&gt;Azure Blob Storage&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We use the &lt;a href=&#34;https://github.com/Azure-Samples/ai-chat-app-protocol&#34;&gt;HTTP protocol for AI chat apps&lt;/a&gt; to communicate between the web app and the API.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to get started with this project.&lt;/p&gt; &#xA;&lt;p&gt;The quickest way to use &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#use-github-codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt; that provides a preconfigured environment for you. Alternatively, you can &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#use-your-local-environment&#34;&gt;set up your local environment&lt;/a&gt; following the instructions below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If you want to run this sample entirely locally using Ollama, you have to follow the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#use-your-local-environment&#34;&gt;local environment&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Use your local environment&lt;/h3&gt; &#xA;&lt;p&gt;You need to install following tools to work on your local machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/download/&#34;&gt;Node.js LTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/azure-dev/install&#34;&gt;Azure Developer CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/powershell/powershell&#34;&gt;PowerShell 7+&lt;/a&gt; &lt;em&gt;(for Windows users only)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Important&lt;/strong&gt;: Ensure you can run &lt;code&gt;pwsh.exe&lt;/code&gt; from a PowerShell command. If this fails, you likely need to upgrade PowerShell.&lt;/li&gt; &#xA;   &lt;li&gt;Instead of Powershell, you can also use Git Bash or WSL to run the Azure Developer CLI commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then you can get the project code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure-Samples/serverless-chat-langchainjs/fork&#34;&gt;&lt;strong&gt;Fork&lt;/strong&gt;&lt;/a&gt; the project to create your own copy of this repository.&lt;/li&gt; &#xA; &lt;li&gt;On your forked repository, select the &lt;strong&gt;Code&lt;/strong&gt; button, then the &lt;strong&gt;Local&lt;/strong&gt; tab, and copy the URL of your forked repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/docs/images/clone-url.png&#34; alt=&#34;Screenshot showing how to copy the repository URL&#34; width=&#34;400px&#34;&gt; &#xA;&lt;/div&gt; 3. Open a terminal and run this command to clone the repo: `git clone &#xA;&lt;your-repo-url&gt;&#xA; ` &#xA; &lt;h3&gt;Use GitHub Codespaces&lt;/h3&gt; &#xA; &lt;p&gt;You can run this project directly in your browser by using GitHub Codespaces, which will open a web-based VS Code:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://codespaces.new/Azure-Samples/serverless-chat-langchainjs?hide_repo_select=true&amp;amp;ref=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=for-the-badge&amp;amp;label=GitHub+Codespaces&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=github&#34; alt=&#34;Open in GitHub Codespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Use a VSCode dev container&lt;/h3&gt; &#xA; &lt;p&gt;A similar option to Codespaces is VS Code Dev Containers, that will open the project in your local VS Code instance using the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Dev Containers extension&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;You will also need to have &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker&lt;/a&gt; installed on your machine to run the container.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/Azure-Samples/serverless-chat-langchainjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=for-the-badge&amp;amp;label=Dev%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Dev Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;Run the sample&lt;/h2&gt; &#xA; &lt;p&gt;There are multiple ways to run this sample: locally using Ollama or Azure OpenAI models, or by deploying it to Azure.&lt;/p&gt; &#xA; &lt;h3&gt;Run the sample locally with Ollama&lt;/h3&gt; &#xA; &lt;p&gt;If you have a machine with enough resources, you can run this sample entirely locally without using any cloud resources. To do that, you first have to install &lt;a href=&#34;https://ollama.com&#34;&gt;Ollama&lt;/a&gt; and then run the following commands to download the models on your machine:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ollama pull mistral&#xA;ollama pull all-minilm:l6-v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!NOTE] The &lt;code&gt;mistral&lt;/code&gt; model with download a few gigabytes of data, so it can take some time depending on your internet connection.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;After that you have to install the NPM dependencies:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then you can start the application by running the commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will start the web app and the API locally. Then we need to upload the PDF documents from the &lt;code&gt;/data&lt;/code&gt; folder to the API with the command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run upload:docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This only has to be done once, unless you want to add more documents.&lt;/p&gt; &#xA; &lt;p&gt;You can now open the URL &lt;code&gt;http://localhost:8000&lt;/code&gt; in your browser to start chatting with the bot.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!NOTE] While local models usually works well enough to answer the questions, sometimes they may not be able to follow perfectly the advanced formatting instructions for the citations and follow-up questions. This is expected, and a limitation of using smaller local models.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Run the sample locally with Azure OpenAI models&lt;/h3&gt; &#xA; &lt;p&gt;First you need to provision the Azure resources needed to run the sample. Follow the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/#deploy-the-sample-to-azure&#34;&gt;Deploy the sample to Azure&lt;/a&gt; section to deploy the sample to Azure, then you&#39;ll be able to run the sample locally using the deployed Azure resources.&lt;/p&gt; &#xA; &lt;p&gt;Once your deployment is complete, you should see a &lt;code&gt;.env&lt;/code&gt; file in the &lt;code&gt;packages/api&lt;/code&gt; folder. This file contains the environment variables needed to run the application using Azure resources.&lt;/p&gt; &#xA; &lt;p&gt;To run the sample, you can then use the same commands as for the Ollama setup:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will start the web app and the API locally. Open the URL &lt;code&gt;http://localhost:8000&lt;/code&gt; in your browser to start chatting with the bot.&lt;/p&gt; &#xA; &lt;p&gt;Note that the documents are uploaded automatically when deploying the sample to Azure with &lt;code&gt;azd up&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!TIP] You can switch back to using Ollama models by simply deleting the &lt;code&gt;packages/api/.env&lt;/code&gt; file and starting the application again. To regenerate the &lt;code&gt;.env&lt;/code&gt; file, you can run &lt;code&gt;azd env get-values &amp;gt; packages/api/.env&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Deploy the sample to Azure&lt;/h3&gt; &#xA; &lt;h4&gt;Azure prerequisites&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Azure account&lt;/strong&gt;. If you&#39;re new to Azure, &lt;a href=&#34;https://azure.microsoft.com/free&#34;&gt;get an Azure account for free&lt;/a&gt; to get free Azure credits to get started. If you&#39;re a student, you can also get free credits with &lt;a href=&#34;https://aka.ms/azureforstudents&#34;&gt;Azure for Students&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Azure subscription with access enabled for the Azure OpenAI service&lt;/strong&gt;. You can request access with &lt;a href=&#34;https://aka.ms/oaiapply&#34;&gt;this form&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;Deploy the sample&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Open a terminal and navigate to the root of the project.&lt;/li&gt; &#xA;  &lt;li&gt;Authenticate with Azure by running &lt;code&gt;azd auth login&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;azd up&lt;/code&gt; to deploy the application to Azure. This will provision Azure resources, deploy this sample, and build the search index based on the files found in the &lt;code&gt;./data&lt;/code&gt; folder. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;You will be prompted to select a base location for the resources. Choose a location that is closest to you.&lt;/li&gt; &#xA;    &lt;li&gt;By default, the OpenAI resource will be deployed to &lt;code&gt;eastus2&lt;/code&gt;. You can set a different location with &lt;code&gt;azd env set AZURE_OPENAI_RESOURCE_GROUP_LOCATION &amp;lt;location&amp;gt;&lt;/code&gt;. Currently only a short list of locations is accepted. That location list is based on the &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/concepts/models#standard-deployment-model-availability&#34;&gt;OpenAI model availability table&lt;/a&gt; and may become outdated as availability changes.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;The deployment process will take a few minutes. Once it&#39;s done, you&#39;ll see the URL of the web app in the terminal.&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/docs/images/azd-up.png&#34; alt=&#34;Screenshot of the azd up command result&#34; width=&#34;600px&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;You can now open the web app in your browser and start chatting with the bot.&lt;/p&gt; &#xA; &lt;h4&gt;Clean up&lt;/h4&gt; &#xA; &lt;p&gt;To clean up all the Azure resources created by this sample:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;azd down --purge&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;When asked if you are sure you want to continue, enter &lt;code&gt;y&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;The resource group and all the resources will be deleted.&lt;/p&gt; &#xA; &lt;h2&gt;Resources&lt;/h2&gt; &#xA; &lt;p&gt;Here are some resources to learn more about the technologies used in this sample:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://js.langchain.com&#34;&gt;LangChain.js documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/generative-ai-for-beginners&#34;&gt;Generative AI For Beginners&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/overview&#34;&gt;Azure OpenAI Service&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/cosmos-db/mongodb/vcore/&#34;&gt;Azure Cosmos DB for MongoDB vCore&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Azure-Samples/langchainjs-quickstart-demo&#34;&gt;Ask YouTube: LangChain.js + Azure Quickstart sample&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Azure-Samples/azure-search-openai-javascript&#34;&gt;ChatGPT + Enterprise data with Azure OpenAI and Azure AI Search&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://aka.ms/entgptsearchblog&#34;&gt;Revolutionize your Enterprise Data with ChatGPT: Next-gen Apps w/ Azure OpenAI and AI Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;You can also find &lt;a href=&#34;https://github.com/Azure-Samples/azureai-samples&#34;&gt;more Azure AI samples here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;!-- TODO: write blog post and link it here --&gt; &#xA; &lt;h2&gt;FAQ&lt;/h2&gt; &#xA; &lt;p&gt;You can find answers to frequently asked questions in the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA; &lt;p&gt;If you have any issue when running or deploying this sample, please check the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/serverless-chat-langchainjs/main/docs/troubleshooting.md&#34;&gt;troubleshooting guide&lt;/a&gt;. If you can&#39;t find a solution to your problem, please &lt;a href=&#34;https://github.com/Azure-Samples/serverless-chat-langchainjs/issues&#34;&gt;open an issue&lt;/a&gt; in this repository.&lt;/p&gt; &#xA; &lt;h2&gt;Contributing&lt;/h2&gt; &#xA; &lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA; &lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA; &lt;h2&gt;Trademarks&lt;/h2&gt; &#xA; &lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt; &#xA;&lt;/your-repo-url&gt;</summary>
  </entry>
  <entry>
    <title>originjs/vite-plugin-federation</title>
    <updated>2024-04-11T01:38:26Z</updated>
    <id>tag:github.com,2024-04-11:/originjs/vite-plugin-federation</id>
    <link href="https://github.com/originjs/vite-plugin-federation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Module Federation for vite &amp; rollup&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/originjs/vite-plugin-federation/main/README-zh.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;vite-plugin-federation&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5752&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5752/badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/originjs/vite-plugin-federation&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/originjs/vite-plugin-federation/badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/originjs/vite-plugin-federation/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@originjs/vite-plugin-federation&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/@originjs/vite-plugin-federation&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nodejs.org/en/about/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/node/v/vite.svg?sanitize=true&#34; alt=&#34;Node Compatibility&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@originjs/vite-plugin-federation&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/license/@originjs/vite-plugin-federation&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A Vite/Rollup plugin which support Module Federation. Inspired by Webpack and compatible with &lt;a href=&#34;https://webpack.js.org/concepts/module-federation/&#34;&gt;Webpack Module Federation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/originjs/vite-plugin-federation/main/README-Preview.gif&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install @originjs/vite-plugin-federation --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @originjs/vite-plugin-federation --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;Module Federation&lt;/code&gt; usually requires more than 2 projects, one as the &lt;code&gt;host side&lt;/code&gt; and one as the &lt;code&gt;remote side&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Step 1: Configure the remote side.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for a vite project, modify &lt;code&gt;vite.config.js&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// vite.config.js&#xA;import federation from &#34;@originjs/vite-plugin-federation&#34;;&#xA;export default {&#xA;    plugins: [&#xA;        federation({&#xA;            name: &#39;remote-app&#39;,&#xA;            filename: &#39;remoteEntry.js&#39;,&#xA;            // Modules to expose&#xA;            exposes: {&#xA;                &#39;./Button&#39;: &#39;./src/Button.vue&#39;,&#xA;            },&#xA;            shared: [&#39;vue&#39;]&#xA;        })&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for a rollup project, modify &lt;code&gt;rollup.config.js&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// rollup.config.js&#xA;import federation from &#39;@originjs/vite-plugin-federation&#39;&#xA;export default {&#xA;    input: &#39;src/index.js&#39;,&#xA;    plugins: [&#xA;        federation({&#xA;            name: &#39;remote-app&#39;,&#xA;            filename: &#39;remoteEntry.js&#39;,&#xA;            // Modules to expose&#xA;            exposes: {&#xA;                &#39;./Button&#39;: &#39;./src/button&#39;.&#xA;            },&#xA;            shared: [&#39;vue&#39;]&#xA;        })&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2: Configure the host side&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for a vite project, modify &lt;code&gt;vite.config.js&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// vite.config.js&#xA;import federation from &#34;@originjs/vite-plugin-federation&#34;;&#xA;export default {&#xA;    plugins: [&#xA;        federation({&#xA;            name: &#39;host-app&#39;,&#xA;            remotes: {&#xA;                remote_app: &#34;http://localhost:5001/assets/remoteEntry.js&#34;,&#xA;            },&#xA;            shared: [&#39;vue&#39;]&#xA;        })&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for a rollup project, modify &lt;code&gt;rollup.config.js&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// rollup.config.js&#xA;import federation from &#39;@originjs/vite-plugin-federation&#39;&#xA;export default {&#xA;    input: &#39;src/index.js&#39;,&#xA;    plugins: [&#xA;        federation({&#xA;            name: &#39;host-app&#39;,&#xA;            remotes: {&#xA;                remote_app: &#34;http://localhost:5001/remoteEntry.js&#34;,&#xA;            },&#xA;            shared: [&#39;vue&#39;]&#xA;        })&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3: Using remote modules on the host side&lt;/h4&gt; &#xA;&lt;p&gt;Using a Vue project as an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createApp, defineAsyncComponent } from &#34;vue&#34;;&#xA;const app = createApp(Layout);&#xA;...&#xA;const RemoteButton = defineAsyncComponent(() =&amp;gt; import(&#34;remote_app/Button&#34;));&#xA;app.component(&#34;RemoteButton&#34;, RemoteButton);&#xA;app.mount(&#34;#root&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using remote components in templates&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;    &amp;lt;div&amp;gt;&#xA;        &amp;lt;RemoteButton /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example projects&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Examples&lt;/th&gt; &#xA;   &lt;th&gt;Host&lt;/th&gt; &#xA;   &lt;th&gt;Remote&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/basic-host-remote&#34;&gt;basic-host-remote&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rollup&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rollup&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/react-in-vue&#34;&gt;react-in-vue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/simple-react-esm&#34;&gt;simple-react-esm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rollup&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rollup&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/simple-react-systemjs&#34;&gt;simple-react-systemjs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rollup&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rollup&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/simple-react-webpack&#34;&gt;simple-react-webpack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rollup&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;webpack&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue2-demo&#34;&gt;vue2-demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-advanced-demo&#34;&gt;vue3-advanced-demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&amp;nbsp;&lt;br&gt;&lt;code&gt;vue-router&lt;/code&gt;/&lt;code&gt;pinia&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;br&gt;&lt;code&gt;vue-router&lt;/code&gt;/&lt;code&gt;pinia&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-esm&#34;&gt;vue3-demo-esm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-systemjs&#34;&gt;vue3-demo-systemjs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-webpack-esm-esm&#34;&gt;vue3-demo-webpack-esm-esm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite/webpack&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite/webpack&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-webpack-esm-var&#34;&gt;vue3-demo-webpack-esm-var&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;esm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;webpack&lt;/code&gt;+&lt;code&gt;var&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-webpack-systemjs&#34;&gt;vue3-demo-webpack-systemjs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;webpack&lt;/code&gt;+&lt;code&gt;systemjs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/react-vite&#34;&gt;react-vite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt;+&lt;code&gt;react&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vite&lt;/code&gt; + &lt;code&gt;react&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Integration with Webpack&lt;/h3&gt; &#xA;&lt;p&gt;It is now possible to use Module Federation without the restrictions of &lt;code&gt;Vite&lt;/code&gt; and &lt;code&gt;Webpack&lt;/code&gt;! That is, you can choose to use the components exposed by &lt;code&gt;vite-plugin-federation&lt;/code&gt; in &lt;code&gt;Webpack&lt;/code&gt; or the components exposed by &lt;code&gt;Webpack ModuleFederationPlugin&lt;/code&gt; in &lt;code&gt;Vite&lt;/code&gt;. But you need to pay attention to the configuration in &lt;code&gt;remotes&lt;/code&gt;, for different frameworks you need to specify &lt;code&gt;remotes.from&lt;/code&gt; and &lt;code&gt;remotes.format&lt;/code&gt; to make them work better. A couple of example projects can be found here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-webpack-esm-esm&#34;&gt;vue3-demo-webpack-esm-esm&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-webpack-esm-var&#34;&gt;vue3-demo-webpack-esm-var&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-webpack-systemjs&#34;&gt;vue3-demo-webpack-systemjs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Vite&lt;/code&gt; is relatively easy to use with the &lt;code&gt;Webpack&lt;/code&gt; component, but &lt;code&gt;Webpack&lt;/code&gt; is best used with the &lt;code&gt;vite-plugin-federation&lt;/code&gt; component using the &lt;code&gt;esm&lt;/code&gt; format, as the other formats lack complete test cases for now.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is not recommended to mix &lt;code&gt;Vite&lt;/code&gt; and &lt;code&gt;Webpack&lt;/code&gt; in &lt;code&gt;React&lt;/code&gt; projects, as there is no guarantee that &lt;code&gt;Vite/Rollup&lt;/code&gt; and &lt;code&gt;Webpack&lt;/code&gt; will generate the same &lt;code&gt;chunk&lt;/code&gt; when packaging &lt;code&gt;commonjs&lt;/code&gt;, which may cause problems with &lt;code&gt;shared&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Vite Dev mode&lt;/h3&gt; &#xA;&lt;p&gt;As Vite is built on esbuild in dev development mode, we provide separate support for dev mode to take advantage of Vite&#39;s high performance development server in the case of remote module deployment.&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only the Host side supports dev mode, the Remote side requires the RemoteEntry.js package to be generated using &lt;code&gt;vite build&lt;/code&gt;. This is because Vite Dev mode is &lt;strong&gt;Bundleless&lt;/strong&gt; and you can use &lt;code&gt;vite build --watch&lt;/code&gt; to achieve a hot update effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Static import&lt;/h3&gt; &#xA;&lt;p&gt;Static import and dynamic import of components are supported, the following shows the difference between the two methods, you can see examples of dynamic import and static import in the project in &lt;code&gt;examples&lt;/code&gt;, here is a simple example.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// dynamic import&#xA;const myButton = defineAsyncComponent(() =&amp;gt; import(&#39;remote/myButton&#39;));&#xA;app.component(&#39;my-button&#39; , myButton);&#xA;// or&#xA;export default {&#xA;  name: &#39;App&#39;,&#xA;  components: {&#xA;    myButton: () =&amp;gt; import(&#39;remote/myButton&#39;),&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// static import&#xA;import myButton from &#39;remote/myButton&#39;;&#xA;app.component(&#39;my-button&#39; , myButton);&#xA;// or&#xA;export default {&#xA;  name: &#39;App&#39;,&#xA;  components: {&#xA;    myButton: myButton&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// dynamic import&#xA;const myButton = React.lazy(() =&amp;gt; import(&#39;remote/myButton&#39;))&#xA;&#xA;// static import&#xA;import myButton from &#39;remote/myButton&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Static imports may rely on the browser &lt;code&gt;Top-level await&lt;/code&gt; feature, so you will need to set build.target in the configuration file to &lt;code&gt;next&lt;/code&gt; or use the plugin &lt;a href=&#34;https://github.com/Menci/vite-plugin-top-level-await&#34;&gt;&lt;code&gt;vite-plugin-top-level-await&lt;/code&gt;&lt;/a&gt;. You can see the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#browser_&#34;&gt;browser compatibility&lt;/a&gt; of top-level await here compatibility)&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;name: string&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Required as the module name of the remote module.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;filename:string&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;As the entry file of the remote module, not required, default is &lt;code&gt;remoteEntry.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;transformFileTypes:string[]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In most cases, the file types that the plug-in needs to process do not need to be configured, because these types are set by default.[&#39;.js&#39;, &#39;.ts&#39;, &#39;.jsx&#39;, &#39;.tsx&#39;, &#39;.mjs&#39;, &#39;.cjs&#39;, &#39;.vue&#39;, &#39;.svelte&#39;],When you customize some file types and need the &lt;code&gt;vite-plugin-federation&lt;/code&gt; plugin processing, please add it to the array configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;exposes&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As the remote module, the list of components exposed to the public, required for the remote module.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;exposes: {&#xA;// &#39;externally exposed component name&#39;: &#39;externally exposed component address&#39;&#xA;    &#39;./remote-simple-button&#39;: &#39;./src/components/Button.vue&#39;, &#xA;    &#39;./remote-simple-section&#39;: &#39;./src/components/Section.vue&#39;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you need a more complex configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;exposes: {&#xA;    &#39;./remote-simple-button&#39;: {&#xA;        import: &#39;./src/components/Button.vue&#39;,&#xA;        name: &#39;customChunkName&#39;,&#xA;        dontAppendStylesToHead: true&#xA;    },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; property is the address of the module. If you need to specify a custom chunk name for the module use the &lt;code&gt;name&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;dontAppendStylesToHead&lt;/code&gt; property is used if you don&#39;t want the plugin to automatically append all styles of the exposed component to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element, which is the default behavior. It&#39;s useful if your component uses a ShadowDOM and the global styles wouldn&#39;t affect it anyway. The plugin will then expose the addresses of the CSS files in the global &lt;code&gt;window&lt;/code&gt; object, so that your exposed component can append the styles inside the ShadowDOM itself. The key under the &lt;code&gt;window&lt;/code&gt; object used for styles will be &lt;code&gt;css__{name_of_the_app}__{key_of_the_exposed_component}&lt;/code&gt;. In the above example it would be &lt;code&gt;css__App__./remote-simple-button&lt;/code&gt;, assuming that the global &lt;code&gt;name&lt;/code&gt; option (not the one under exposed component configuration) is &lt;code&gt;App&lt;/code&gt;. The value under this key is an array of strings, which contains the addresses of CSS files. In your exposed component you can iterate over this array and manually create &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements with &lt;code&gt;href&lt;/code&gt; attribute set to the elements of the array like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const styleContainer = document.createElement(&#34;div&#34;);&#xA;const hrefs = window[&#34;css__App__./remote-simple-button&#34;];&#xA;&#xA;hrefs.forEach((href: string) =&amp;gt; {&#xA;    const link = document.createElement(&#39;link&#39;)&#xA;    link.href = href&#xA;    link.rel = &#39;stylesheet&#39;&#xA;    styleContainer.appendChild(link);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;remotes&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The remote module entry file referenced as a local module&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;external:string|Promise&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;remote module address, e.g. &lt;a href=&#34;https://localhost:5011/remoteEntry.js&#34;&gt;https://localhost:5011/remoteEntry.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can simply configure it as follows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  remotes: {&#xA;    // &#39;remote module name&#39;: &#39;remote module entry file address&#39;&#xA;    &#39;remote-simple&#39;: &#39;http://localhost:5011/remoteEntry.js&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or do a slightly more complex configuration, if you need to use other fields&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;remotes: {&#xA;    remote-simple: {&#xA;        external: &#39;http://localhost:5011/remoteEntry.js&#39;,&#xA;        format: &#39;var&#39;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;externalType: &#39;url&#39;|&#39;promise&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default: &#39;url&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set the type of external. If you want to use a dynamic url address, you can set the &lt;code&gt;external&lt;/code&gt; as &lt;code&gt;promise&lt;/code&gt;, but please note that you need to set the &lt;code&gt;externalType&lt;/code&gt; as &#39;promise&#39; at the same time, and please ensure that the code of the &lt;code&gt;promise&lt;/code&gt; part is correct, otherwise the package may fail,here is a simple example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;remotes: {&#xA;      home: {&#xA;          external: `Promise.resolve(&#39;your url&#39;)`,&#xA;          externalType: &#39;promise&#39;&#xA;      },&#xA;},&#xA;    &#xA;// or from networke&#xA;remotes: {&#xA;    remote-simple: {&#xA;        external: `fetch(&#39;your url&#39;).then(response=&amp;gt;response.json()).then(data=&amp;gt;data.url)`,&#xA;        externalType: &#39;promise&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;format:&#39;esm&#39;|&#39;systemjs&#39;|&#39;var&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default:&#39;esm&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Specify the format of the remote component, this is more effective when the host and the remote use different packaging formats, for example the host uses vite + esm and the remote uses webpack + var, in which case you need to specify &lt;code&gt;type&lt;/code&gt; : &lt;code&gt;&#39;var&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;from&lt;/code&gt; : &lt;code&gt;&#39;vite&#39;|&#39;webpack&#39;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default : &#39;vite&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Specify the source of the remote component, from &lt;code&gt;vite-plugin-federation&lt;/code&gt; select &lt;code&gt;vite&lt;/code&gt;, from &lt;code&gt;webpack&lt;/code&gt; select &lt;code&gt;webpack&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Dependencies shared by local and remote modules. Local modules need to configure the dependencies of all used remote modules; remote modules need to configure the dependencies of externally provided components.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;import: boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default: true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The default is &lt;code&gt;true&lt;/code&gt;, whether to add shared to the module, only for the &lt;code&gt;remote&lt;/code&gt; side, &lt;code&gt;remote&lt;/code&gt; will reduce some of the packaging time when this configuration is turned on, because there is no need to package some of the &lt;code&gt;shared&lt;/code&gt;, but once there is no &lt;code&gt;shared&lt;/code&gt; module available on the &lt;code&gt;host&lt;/code&gt; side, it will report an error directly, because there is no fallback module available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;shareScope: string&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default: &#39;default&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default is &lt;code&gt;default&lt;/code&gt;, the shared domain name, just keep the &lt;code&gt;remote&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; sides the same&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;version: string&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Only works on &lt;code&gt;host&lt;/code&gt; side, the version of the shared module provided is &lt;code&gt;version&lt;/code&gt; of the &lt;code&gt;package.json&lt;/code&gt; file in the shared package by default, you need to configure it manually only if you can&#39;t get &lt;code&gt;version&lt;/code&gt; by this method&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;requiredVersion: string&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Only for the &lt;code&gt;remote&lt;/code&gt; side, it specifies the required version of the &lt;code&gt;host shared&lt;/code&gt; used, when the version of the &lt;code&gt;host&lt;/code&gt; side does not meet the &lt;code&gt;requiredVersion&lt;/code&gt; requirement, it will use its own &lt;code&gt;shared&lt;/code&gt; module, provided that it is not configured with &lt;code&gt;import=false&lt;/code&gt;, which is not enabled by default&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;packagePath: string&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;supportMode: only serve&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allow custom packages to be shared via packagePath (previously limited to those under node_modules), For Example You can only define similar shared&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shared :{&#xA;    packageName:{&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;packageName must be a package under node_modules, such as vue, react, etc., but you cannot define your own package. But now you can share a custom package by specifying the package path, for example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shared: {&#xA;    packageName: {&#xA;        packagePath: &#39;./src/a/index.js&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;generate : boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default: true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;generate a shared chunk file or not , if you make sure that the host side has a share that can be used, then you can set not to generate a shared file on the remote side to reduce the size of the remote&#39;s chunk file, which is only effective on the remote side, the host side will generate a shared chunk no matter what.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;shared: {&#xA;    packageName: {&#xA;        generate: false&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Add other example projects?&lt;/h2&gt; &#xA;&lt;p&gt;First of all, you need to determine whether the test is suitable for &lt;code&gt;dev&lt;/code&gt; mode or &lt;code&gt;build&amp;amp;serve&lt;/code&gt; mode, or both.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the current test will directly access &lt;code&gt;localhost:5000&lt;/code&gt; for testing, which means that the startup port of &lt;code&gt;host&lt;/code&gt; must be &lt;code&gt;5000&lt;/code&gt;, otherwise it will directly lead to test failure.&lt;/p&gt; &#xA;&lt;h3&gt;How to set the test of &lt;code&gt;dev&lt;/code&gt; mode or &lt;code&gt;build&amp;amp;serve&lt;/code&gt; mode?&lt;/h3&gt; &#xA;&lt;p&gt;According to the file name of the test file.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;vue3-demo-esm.dev&amp;amp;serve.spec.ts&lt;/code&gt; means that tests will be built in &lt;code&gt;dev&lt;/code&gt; mode and &lt;code&gt;build&amp;amp;serve&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;vue3-demo-esm.dev.spec.ts&lt;/code&gt; will only build tests in &lt;code&gt;dev&lt;/code&gt; mode, as summarized as follows&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;File Name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Only for &lt;code&gt;dev&lt;/code&gt; mode&lt;/td&gt; &#xA;   &lt;td&gt;*.dev.spec.ts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Only for &lt;code&gt;build&amp;amp;serve&lt;/code&gt; mode&lt;/td&gt; &#xA;   &lt;td&gt;*.serve.spec.ts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;build&amp;amp;serve&lt;/code&gt; mode&lt;/td&gt; &#xA;   &lt;td&gt;*.dev&amp;amp;serve.spec.ts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Testing in &lt;code&gt;Dev&lt;/code&gt; mode&lt;/h3&gt; &#xA;&lt;p&gt;Since the current plug-in only supports the &lt;code&gt;dev&lt;/code&gt; mode of &lt;code&gt;vite&lt;/code&gt; on the &lt;code&gt;host&lt;/code&gt; end, the &lt;code&gt;dev&lt;/code&gt; mode test will execute the following code on the root path of the test project in turn.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm run dev:host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm run build:remotes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm run serve:remotes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute test cases&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm run stop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This also means that there are at least four instructions in the &lt;code&gt;package.json&lt;/code&gt; file of the project in &lt;code&gt;dev&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;scripts&#34;: {&#xA;    &#34;build:remotes&#34;: &#34;pnpm --filter \&#34;./remote\&#34;  build&#34;,&#xA;    &#34;serve:remotes&#34;: &#34;pnpm --filter \&#34;./remote\&#34;  serve&#34;,&#xA;    &#34;dev:hosts&#34;: &#34;pnpm --filter \&#34;./host\&#34; dev&#34;,&#xA;    &#34;stop&#34;: &#34;kill-port --port 5000,5001&#34;&#xA;  },&#xA;  &#34;workspaces&#34;: [&#xA;    &#34;host&#34;,&#xA;    &#34;remote&#34;&#xA;  ]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing in &lt;code&gt;Build&amp;amp;Serve&lt;/code&gt; mode&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;build&amp;amp;serve&lt;/code&gt; mode will execute the following instructions in turn&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm run build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm run serve&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute test cases&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm run stop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This also means that there are at least three instructions in the &lt;code&gt;package.json&lt;/code&gt; file of the project in &lt;code&gt;build&amp;amp;serve&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;scripts&#34;: {&#xA;    &#34;build&#34;: &#34;pnpm --parallel --filter \&#34;./**\&#34; build&#34;,&#xA;    &#34;serve&#34;: &#34;pnpm --parallel --filter \&#34;./**\&#34; serve &#34;,&#xA;    &#34;stop&#34;: &#34;kill-port --port 5000,5001&#34;&#xA;  },&#xA;  &#34;workspaces&#34;: [&#xA;    &#34;host&#34;,&#xA;    &#34;remote&#34;&#xA;  ]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;ERROR: &lt;code&gt;Top-level&lt;/code&gt; await is not available in the configured target environment&lt;/h3&gt; &#xA;&lt;p&gt;The solution is to set &lt;code&gt;build.target&lt;/code&gt; to &lt;code&gt;esnext&lt;/code&gt;, which you can find at &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await&lt;/a&gt; to see the support for this feature in each browser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;build: {&#xA;    target: &#34;esnext&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; build: {&#xA;    target: [&#34;chrome89&#34;, &#34;edge89&#34;, &#34;firefox89&#34;, &#34;safari15&#34;]&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can try using the plugin &lt;a href=&#34;https://github.com/Menci/vite-plugin-top-level-await&#34;&gt;&lt;code&gt;vite-plugin-top-level-await&lt;/code&gt;&lt;/a&gt; to eliminate &lt;code&gt;top-level-await&lt;/code&gt;, as demonstrated in &lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/tree/main/packages/examples/vue3-demo-esm&#34;&gt;vue3-demo- esm&lt;/a&gt; demonstrates this usage&lt;/p&gt; &#xA;&lt;h3&gt;Is not generating chunk properly?&lt;/h3&gt; &#xA;&lt;p&gt;Please check if you have started the project in &lt;code&gt;dev&lt;/code&gt; mode with &lt;code&gt;vite&lt;/code&gt;, currently only the fully pure host side can use &lt;code&gt;dev&lt;/code&gt; mode, the &lt;code&gt;remote&lt;/code&gt; side must use &lt;code&gt;build&lt;/code&gt; mode to make the plugin take effect.&lt;/p&gt; &#xA;&lt;h3&gt;React uses federation for some questions&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to check this &lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/issues/173&#34;&gt;Issue&lt;/a&gt;, which contains most of the &lt;code&gt;React&lt;/code&gt; related issues&lt;/p&gt; &#xA;&lt;h3&gt;The remote module failed to load the share of the local module, for example&lt;code&gt;localhost/:1 Uncaught (in promise) TypeError: Failed to fetch dynamically imported module: http://your url&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Reason: Vite has auto fetch logic for &lt;code&gt;IP&lt;/code&gt; and Port when starting the service, no full fetch logic has been found in the &lt;code&gt;Plugin&lt;/code&gt;, and in some cases a fetch failure may occur.&lt;/p&gt; &#xA;&lt;p&gt;SolutionsÔºö&lt;/p&gt; &#xA;&lt;p&gt;Explicitly declaring IP, Port, &lt;code&gt;cacheDir&lt;/code&gt; in the local module ensures that our &lt;code&gt;Plugin&lt;/code&gt; can correctly fetch and pass the dependent addresses.&lt;/p&gt; &#xA;&lt;p&gt;Local module&#39;s &lt;code&gt;vite.config.ts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export default defineConfig({&#xA;  server:{&#xA;    https: &#34;http&#34;,&#xA;    host: &#34;192.168.56.1&#34;,&#xA;    port: 5100,&#xA;  },&#xA;  cacheDir: &#34;node_modules/.cacheDir&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;error TS2307: Cannot find module&lt;/h3&gt; &#xA;&lt;p&gt;Add declarations in the d.ts file, like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;declare module &#34;router-remote/*&#34;{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#originjs/vite-plugin-federation&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=originjs/vite-plugin-federation&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/originjs/vite-plugin-federation/wiki&#34;&gt;Detailed design&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>