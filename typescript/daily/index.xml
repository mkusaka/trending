<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-14T01:38:33Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>misskey-dev/misskey</title>
    <updated>2022-11-14T01:38:33Z</updated>
    <id>tag:github.com,2022-11-14:/misskey-dev/misskey</id>
    <link href="https://github.com/misskey-dev/misskey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåé An interplanetary microblogging platform üöÄ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://misskey-hub.net&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/misskey-dev/misskey/develop/assets/title_float.svg?sanitize=true&#34; alt=&#34;Misskey logo&#34; style=&#34;border-radius:50%&#34; width=&#34;400&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;strong&gt;üåé &lt;strong&gt;&lt;a href=&#34;https://misskey-hub.net/&#34;&gt;Misskey&lt;/a&gt;&lt;/strong&gt; is an open source, decentralized social media platform that&#39;s free forever! üöÄ&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;a href=&#34;https://misskey-hub.net/instances.html&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/badge/find_an-instance-acea31?logoColor=acea31&amp;amp;style=for-the-badge&amp;amp;logo=misskey&amp;amp;labelColor=363B40&#34; alt=&#34;find an instance&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://misskey-hub.net/docs/install.html&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/badge/create_an-instance-FBD53C?logoColor=FBD53C&amp;amp;style=for-the-badge&amp;amp;logo=server&amp;amp;labelColor=363B40&#34; alt=&#34;create an instance&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/misskey-dev/misskey/develop/CONTRIBUTING.md&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/badge/become_a-contributor-A371F7?logoColor=A371F7&amp;amp;style=for-the-badge&amp;amp;logo=git-merge&amp;amp;labelColor=363B40&#34; alt=&#34;become a contributor&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/Wp8gVStHW3&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/badge/join_the-community-5865F2?logoColor=5865F2&amp;amp;style=for-the-badge&amp;amp;logo=discord&amp;amp;labelColor=363B40&#34; alt=&#34;join the community&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://www.patreon.com/syuilo&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/badge/become_a-patron-F96854?logoColor=F96854&amp;amp;style=for-the-badge&amp;amp;logo=patreon&amp;amp;labelColor=363B40&#34; alt=&#34;become a patron&#34;&gt;&lt;/a&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://xn--931a.moe/&#34;&gt;&lt;img src=&#34;https://github.com/misskey-dev/misskey/raw/develop/assets/ai.png?raw=true&#34; align=&#34;right&#34; height=&#34;320px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;ActivityPub support&lt;/strong&gt;&lt;br&gt; Not on Misskey? No problem! Not only can Misskey instances talk to each other, but you can make friends with people on other networks like Mastodon and Pixelfed!&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Reactions&lt;/strong&gt;&lt;br&gt; You can add emoji reactions to any post! No longer are you bound by a like button, show everyone exactly how you feel with the tap of a button.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Drive&lt;/strong&gt;&lt;br&gt; With Misskey&#39;s built in drive, you get cloud storage right in your social media, where you can upload any files, make folders, and find media from posts you&#39;ve made!&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Rich Web UI&lt;/strong&gt;&lt;br&gt; Misskey has a rich and easy to use Web UI! It is highly customizable, from changing the layout and adding widgets to making custom themes. Furthermore, plugins can be created using AiScript, an original programming language.&lt;/li&gt; &#xA;  &lt;li&gt;And much more...&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Misskey Documentation can be found at &lt;a href=&#34;https://misskey-hub.net/&#34;&gt;Misskey Hub&lt;/a&gt;, some of the links and graphics above also lead to specific portions of it.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a class=&#34;rss3&#34; title=&#34;RSS3&#34; href=&#34;https://rss3.io/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://rss3.mypinata.cloud/ipfs/QmUG6H3Z7D5P511shn7sB4CPmpjH5uZWu4m5mWX7U3Gqbu&#34; alt=&#34;RSS3&#34; height=&#34;60&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Re-Nest/ReNest</title>
    <updated>2022-11-14T01:38:33Z</updated>
    <id>tag:github.com,2022-11-14:/Re-Nest/ReNest</id>
    <link href="https://github.com/Re-Nest/ReNest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Let SwiftUI nests in React.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ü™∫ ReNest&lt;/h1&gt; &#xA;&lt;p&gt;Let SwiftUI nests in React.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ú® Write function components like React function components with original react hooks&lt;/li&gt; &#xA; &lt;li&gt;üé® Write class components just like SwiftUI, elegant and modern&lt;/li&gt; &#xA; &lt;li&gt;‚ö°Ô∏è Partial re-render by default&lt;/li&gt; &#xA; &lt;li&gt;üåê Powerful contexts that enables passing props through multiple levels of components&lt;/li&gt; &#xA; &lt;li&gt;‚å®Ô∏è More features like Theme, Navigation; components like VStack/HStack/ZStack/Spacer; intergrating with React Native, EXPO, Taro ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install @renest/renest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ùì What brings ReNest?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;React is a great framework, and function hooks make it even more elegant. But not HTML or CSS! It&#39;s 2022! React uses jsx to replace the ugly HTML and CSS, but...... What the difference between JSX and HTML! Why can&#39;t we code modern?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That was what in my mind when I first used SwiftUI back in 2019. Though it was(and is still) just a toy and though I&#39;ve heard its idea was exactly from React, still, it&#39;s modern and elegant. So why don&#39;t we take a little bit back to React? Here comes ReNest...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Here is an example to create a list of buttons using react functional jsx/swiftui/renest&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;JSX&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const JsxButtons = ({nums}:{nums:number[]}) =&amp;gt; {&#xA;  let [toggle, setToggle] = useState(false)&#xA;  &#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      {nums.map((num: number) =&amp;gt; &#xA;        &amp;lt;button &#xA;          onClick={()=&amp;gt;{&#xA;            console.log(`This is button ${num}`)&#xA;            setToggle(prev=&amp;gt;!prev)      &#xA;          }}&#xA;        &amp;gt;&#xA;          {num}&#xA;        &amp;lt;/button&amp;gt;)}&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ReNest as function&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const RTFuncButtons = FuncView(({nums}:{nums:number[]}) =&amp;gt; {&#xA;  let [toggle, setToggle] = useState(false)&#xA;&#xA;  return (&#xA;    List(nums, (num:number) =&amp;gt;&#xA;      Button(num)&#xA;        .onClick(() =&amp;gt; {&#xA;          console.log(`This is button ${num}`)&#xA;          setToggle(prev=&amp;gt;!prev)&#xA;        })&#xA;    )&#xA;  )&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Except the way ReNest sets props, everything is the same with React functions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SwiftUI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct SwiftButtons: View {&#xA;  var nums: [Int]&#xA;  @State toggle = false&#xA;  &#xA;  var body: some View {&#xA;    List(this.nums) { num in &#xA;      Button(num) {&#xA;        print(&#34;This is button \(num)&#34;)&#xA;        this.toggle = !this.toggle&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ReNest as class&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class RTClassButtons extends View {&#xA;  @Prop nums: number[]&#xA;  @State toggle = false&#xA;  &#xA;  Body = () =&amp;gt; &#xA;    List(this.nums, (num:number) =&amp;gt;&#xA;      Button(num)&#xA;        .onClick(() =&amp;gt; {&#xA;          console.log(`This is button ${num}`)&#xA;          this.toggle = !this.toggle&#xA;        })&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Basically every prop in React and CSSProperty can be used in ReNest as &#39;dot&#39; function, and IDEs will autocomplete for you!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if there&#39;s some specific properties from third-party components, use &lt;code&gt;setProp(key, value)&lt;/code&gt;to set additional prop&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Quick Start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;try ReNest in &lt;a href=&#34;https://codesandbox.io/s/cool-boyd-1w8rr1?file=/src/App.tsx&#34;&gt;codesandbox&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// ---- src/App.tsx&#xA;import RTApp from &#39;RTApp&#39;;&#xA;function App() {&#xA;  return RTApp().asReactElement()&#xA;}&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// ---- src/RTApp.ts&#xA;import {FuncView} from &#34;@renest/renest&#34;;&#xA;import {Text, Button, VStack} from &#34;@renest/component&#34;;&#xA;import {useState} from &#34;react&#34;;&#xA;&#xA;const MyComponent = FuncView(({defaultNum}: any) =&amp;gt; {&#xA;  let [num, setNum] = useState(defaultNum)&#xA;  return (&#xA;      Button(num)&#xA;        .onClick(()=&amp;gt;{setNum(num+1)})&#xA;  )&#xA;})&#xA;&#xA;const RTApp = FuncView(() =&amp;gt;&#xA;  VStack(&#xA;      MyComponent({defaultNum: 10}),&#xA;      Text(&#34;Hello&#34;)&#xA;  )&#xA;    .alignment(&#34;center&#34;)&#xA;)&#xA;&#xA;export default RTApp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Every ReNest instance can convert to React element using &lt;code&gt;.asReactElement()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Every ReNest instance can take&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;another ReNest instance&lt;/li&gt; &#xA;   &lt;li&gt;a react element&lt;/li&gt; &#xA;   &lt;li&gt;jsx element&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;=&amp;gt; as its children, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const MySecondComponent = FuncView(() =&amp;gt;&#xA;    VStack(&#xA;        Text(&#34;This is ReNest&#34;),&#xA;        React.createElement(&#34;p&#34;, null, &#34;This is React&#34;),&#xA;        &amp;lt;p&amp;gt;This is JSX&amp;lt;/p&amp;gt;&#xA;    )     &#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;but we &lt;strong&gt;strongly&lt;/strong&gt; suggest you to use &lt;strong&gt;pure&lt;/strong&gt; ReNest for additional features, use &lt;code&gt;TagView/ElementView&lt;/code&gt; to wrap your React Components&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ñ Useful Features&lt;/h2&gt; &#xA;&lt;h3&gt;TagView&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Turn every react component into ReNest instance no matter if it&#39;s a custom react function or a html tag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const RTDiv = TagView(&#34;div&#34;)()&#xA;const RTComponent = TagView(YourReactFunction)()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the second parameter to offer some acceptable dotProp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const Button = TagView(&#34;button&#34;, [&#34;onTap&#34;])&#xA;let NewButton = Button(&#34;title&#34;).onTap(&#34;whatever value here will be saved into props when creactElement&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ElementView&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Turn a react component instance to ReNest instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const myJSX = &amp;lt;div&amp;gt;hello&amp;lt;/div&amp;gt;&#xA;const RTInstance = ElementView(myJSX)()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ConditionView&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use this view to build a dynamic controllable page &lt;strong&gt;simple and fast&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const MyCondition = FuncView(() =&amp;gt; {&#xA;    const [displayIdx, setDisplayIdx] = useState(0)&#xA;    &#xA;    return (&#xA;        VStack(&#xA;            Button(&#34;change&#34;)&#xA;                .onClick(() =&amp;gt; {&#xA;                    setDisplayIdx(prev=&amp;gt; prev==2 ? 0 : prev+1)&#xA;                }),&#xA;            ConditionView(displayIdx.value, {&#xA;                0: () =&amp;gt; Text(&#34;This is the default view&#34;),&#xA;                1: () =&amp;gt; Text(&#34;This is view 1&#34;),&#xA;                2: () =&amp;gt; Text(&#34;This is the second view&#34;)&#xA;            })&#xA;        )&#xA;    )&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Router&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using react-router 6, the &lt;code&gt;NavigationView&lt;/code&gt; in ReNest is pretty easy to use and &lt;strong&gt;supports regex path&lt;/strong&gt; (which react-router 6 doesn&#39;t).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const MyPage = FuncView(() =&amp;gt;&#xA;    VStack(&#xA;        Text(&#34;this will show whatever the route is&#34;),&#xA;        NavigationView({&#xA;          &#34;&#34;: () =&amp;gt; Text(&#34;this is home&#34;),&#xA;          &#34;what&#34;: () =&amp;gt;  Text(&#34;this is what&#34;),&#xA;          &#34;:abc+&#34;: (path: string) =&amp;gt; Text(`this matches abcccccc: ${path}`),&#xA;          &#34;:&#34;: (path: string) =&amp;gt; Text(`this matches everything else: ${path}`)&#xA;        })&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üîÜ Cool Things&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is the part where we write react like SwiftUI and get to know some &lt;strong&gt;cool&lt;/strong&gt; features!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Class Component&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A ReNest class component looks like this&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// extends View to write a class component&#xA;class Counter extends View {   &#xA;  // @Prop is a decorator, it means Counter component takes an optional prop startNum with default value 0&#xA;  // so when you use this component, call =&amp;gt; Counter() or Counter({startNum: 100})&#xA;  @Prop startNum: number = 0    &#xA;  // another two decorators: @State and @Derived&#xA;  // @State means in Body, you can use this property as a state variable in react hook&#xA;  // so { @State count = 1 } visually equals to { [count.value, count.setValue] = useState(1) }&#xA;  // @Derived takes another decorator as its argument&#xA;  // if we did&#39;t use @Derived, { @State count = this.startNum } would always equal to { @State count = 0 } because 0 is startNum&#39;s default value&#xA;  // so we use @Derived to get the updated value(set as prop from outside) in Body&#xA;  @Derived(State) count: any = () =&amp;gt; this.startNum&#xA; &#xA;  // the Body is just a clousure property, you can always do any logical things in Body to make it look like a function component and use any react hooks as you want, but that would miss the point to code elegantly&#xA;  Body = () =&amp;gt;&#xA;    VStack(&#xA;      HStack(&#xA;        Button(&#34;+&#34;)&#xA;          .onClick(() =&amp;gt; {&#xA;            this.count ++&#xA;          }),&#xA;        Button(&#34;-&#34;)&#xA;          .onClick(() =&amp;gt; {&#xA;            this.count --&#xA;          })&#xA;        )&#xA;          .spacing(&#34;20px&#34;),&#xA;      Text(this.count),&#xA;      Button(&#34;clear&#34;)&#xA;        .onClick(() =&amp;gt; {&#xA;          this.count = this.startNum&#xA;        })&#xA;    )&#xA;      .alignment(&#34;center&#34;)&#xA;}&#xA;&#xA;export default ViewWrapper&amp;lt;{startNum?: number}&amp;gt;(Counter)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;decorators&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;@Ref text = &#34;ok&#34;&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;let text = useRef(&#34;ok&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@State count = 1&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;[count.value, count.setValue] = useState(1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@Hook(useAnyHook) value = &#34;default&#34;&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;let value = useAnyHook(&#34;default&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@SHook(useMultiProps) value = [&#34;prop1&#34;, &#34;prop2&#34;]&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;let value = useMultiProps(&#34;prop1&#34;, &#34;prop2&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@Prop myProp: string&lt;/code&gt; =&amp;gt; call &lt;code&gt;MyComponent({myProp: &#34;fine&#34;})&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@DotProp myDotProp: string&lt;/code&gt; =&amp;gt; call &lt;code&gt;MyComponent().myDotProp(&#34;any value&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ContextProvider&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use ContextProvider in ReNest to manage global states simple and powerful.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;@Context&lt;/code&gt; to destructure the whole context into a specific variable&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;@Contexts&lt;/code&gt; to get the &lt;strong&gt;whole context&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {ContextProvider, ViewWrapper, View} from &#34;@renest/renest&#34;;&#xA;class ComponentA extends View {&#xA;  @Context myFirstContext: any&#xA;  &#xA;  Body = () =&amp;gt;&#xA;      Text(`Current first state value is ${this.myFirstContext}`),&#xA;}&#xA;&#xA;const ComponentAView = ViewWrapper(ComponentA)&#xA;&#xA;class MyComponentWithContext extends View {&#xA;  @State myFirstContext = 0&#xA;  &#xA;  Body = () =&amp;gt;&#xA;    ContextProvider(&#xA;      VStack(&#xA;        Button(&#34;add&#34;)&#xA;        &#x9;.onClick(() =&amp;gt; {&#xA;            this.myFirstContext&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;})&#xA;        ComponentAView()&#xA;      )&#xA;    )&#xA;      .context({myFirstContext: this.myFirstContext})&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ThemeProvider&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;ThemeProvider&lt;/code&gt; as a global state to manage any theme ralated props&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Theme in class component&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class Paper extends View {&#xA;  defaultTheme = {&#xA;    bg: &#34;#FBFCFC&#34;,&#xA;    shadow: &#34;#E1E5E4&#34;&#xA;  }&#xA;&#xA;  Body = () =&amp;gt;&#xA;    Div()&#xA;      .backgroundColor(this.theme.bg)&#xA;      .width(&#34;200px&#34;)&#xA;      .height(&#34;280px&#34;)&#xA;      .borderRadius(&#34;7px&#34;)&#xA;      .boxShadow(`2px 2px 4px 1px ${this.theme.shadow}`)&#xA;}&#xA;&#xA;export default ViewWrapper(Paper)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class Paper extends View {&#xA;  defaultThemes = {&#xA;    gray: {&#xA;      bg: &#34;#FBFCFC&#34;,&#xA;      shadow: &#34;#E1E5E4&#34;&#xA;    },&#xA;    red: {&#xA;      bg: &#34;#F1B1B1&#34;,&#xA;      shadow: &#34;#832525&#34;&#xA;    }&#xA;  }&#xA;  defaultThemeName = &#34;gray&#34;&#xA;&#xA;  Body = () =&amp;gt;&#xA;    Div()&#xA;      .backgroundColor(this.theme.bg)&#xA;      .width(&#34;200px&#34;)&#xA;      .height(&#34;280px&#34;)&#xA;      .borderRadius(&#34;7px&#34;)&#xA;      .boxShadow(`2px 2px 4px 1px ${this.theme.shadow}`)&#xA;}&#xA;&#xA;export default ViewWrapper(Paper)&#xA;&#xA;// call to use red theme&#xA;Paper()&#xA;  .themeName(&#34;red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;ThemeProvider&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class MyComponentWithContext extends View {&#xA;  // default using class name(in this case is Paper) to set different theme for different class&#xA;  // if you don&#39;t want some class to be polluted, use a themeTag() to add a appendix(in this case is Paper_another)&#xA;  // @Theme in hook equals to useTheme(themes, initialThemeName)&#xA;  // any element inside ThemeProvider can directly current &#34;myThemes&#34; by using this.themeState to change theme&#xA;  @Theme myThemes = [{&#xA;    firstTheme: {&#xA;      Paper: {&#xA;        bg: &#34;#118811&#34;,&#xA;        shadow: &#34;#AAAA00&#34;&#xA;      }&#xA;    },&#xA;    secondTheme: {&#xA;      Paper: {&#xA;        bg: &#34;#22FFAA&#34;,&#xA;        shadow: &#34;#997700&#34;&#xA;      },&#xA;      Paper_another: {&#xA;        bg: &#34;#22FFAA&#34;,&#xA;        shadow: &#34;#997700&#34;&#xA;      },&#xA;    }&#xA;  }, &#34;secondTheme&#34;]  // set initial theme as secondTheme&#xA;  &#xA;  Body = () =&amp;gt;&#xA;    ThemeProvider(&#xA;      VStack(&#xA;        Paper(),&#xA;        Paper()&#xA;          .themeTag(&#34;another&#34;)  // only have secondTheme, when themeName == firstTheme, using defeaultTheme inside Paper class&#xA;        Button(&#34;change theme&#34;)&#xA;          .onClick(() =&amp;gt; {&#xA;            // use myThemes.is(&#34;xx&#34;) to check current theme name&#xA;            // use myThemes.themeName to get current theme name&#xA;            // use myThemes.to(&#34;xx&#34;) to change theme&#xA;            if (this.myThemes.is(&#34;firstTheme&#34;)) {&#xA;              this.myThemes.to(&#34;secondTheme&#34;)&#xA;            } else {&#xA;              this.myThemes.to(&#34;firstTheme&#34;)&#xA;            }&#xA;          })&#xA;      )&#xA;    )&#xA;      .useTheme(this.myThemes)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lifecycle&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React function uses &lt;code&gt;useEffect &lt;/code&gt; to handle lifecycles, so you can still use it (remember, class&#39;s Body is &lt;strong&gt;nothing but a react function component&lt;/strong&gt;, but we don&#39;t write any logical code blocks inside Body for the sake of &lt;strong&gt;love&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;So ReNest handles lifecycles this way (and adds a strong feature: &lt;strong&gt;component wise lifecycles&lt;/strong&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class SubComponent extends View {  &#xA;  Body = () =&amp;gt;&#xA;    Text(&#34;not related to MainComponent&#39;s states&#34;)&#xA;}&#xA;&#xA;const SubComponentView = ViewWrapper(CoSubComponentmponentA)&#xA;&#xA;class MainComponent extends View {&#xA;  @State toggle: any = false&#xA;  &#xA;  Body = () =&amp;gt;&#xA;    VStack(&#xA;      Button(&#34;refresh&#34;)&#xA;        .onClick(() =&amp;gt; {&#xA;          this.toggle = !this.toggle&#xA;        })&#xA;      SubComponentView()&#xA;        .didUpdate(() =&amp;gt; {&#xA;          console.log(&#34;re-rendered as subview&#34;)  // this will not be called when click refresh button =&amp;gt; so called element-wise lifecycle&#xA;        })&#xA;    )&#xA;      .didMount(() =&amp;gt; {&#xA;        console.log(&#34;mounted&#34;)&#xA;      })&#xA;      .didUpdate(() =&amp;gt; {&#xA;        console.log(&#34;re-rendered&#34;)&#xA;      })&#xA;      .willUnmount(() =&amp;gt; {&#xA;        console.log(&#34;will unmount&#34;)&#xA;      })&#xA;      .shouldUpdate((prevProps, currProps) =&amp;gt; false)  // this equals to React.memo(xx, shouldUpdate)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only Component that defined by a &lt;code&gt;FuncView&lt;/code&gt; or &lt;code&gt;View&lt;/code&gt; can use lifecycles, tags like Div, P, ... don&#39;t have this dot function&lt;/li&gt; &#xA; &lt;li&gt;As the example above, remember the lifecycle is VStack and SubComponentView&#39;s, not MainComponent&#39;s&lt;/li&gt; &#xA; &lt;li&gt;If you want to set MainComponent&#39;s lifecycle, you can do it this way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class SubComponent extends View {  &#xA;  Body = () =&amp;gt;&#xA;    Text(&#34;not related to MainComponent&#39;s states&#34;)&#xA;}&#xA;&#xA;const SubComponentView = ViewWrapper(CoSubComponentmponentA)&#xA;&#xA;class MainComponent extends View {&#xA;  @State toggle = false&#xA;  &#xA;  Body = () =&amp;gt;&#xA;    VStack(&#xA;      Button(&#34;refresh&#34;)&#xA;        .onClick(() =&amp;gt; {&#xA;          this.toggle = !this.toggle&#xA;        })&#xA;      SubComponentView()&#xA;    )&#xA;    &#xA;  didMount: () =&amp;gt; {&#xA;    console.log(&#34;mounted&#34;)&#xA;  }&#xA;  didUpdate: () =&amp;gt; {&#xA;    console.log(&#34;re-rendered at any value&#34;)&#xA;  }&#xA;  willUnmount: () =&amp;gt; {&#xA;    console.log(&#34;will unmount&#34;)&#xA;  })&#xA;  shouldUpdate: (prevProps, currProps) =&amp;gt; false&#xA;  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@Observe&lt;/code&gt;: you can use this to observe any prop/dotProp/state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class Counter extends View {&#xA;  @State count: = 0&#xA;  @Observe $count = () =&amp;gt; {&#xA;    console.log(&#34;log this every time click refresh&#34;)&#xA;  }&#xA;  &#xA;  Body = () =&amp;gt;&#xA;      Button(&#34;refresh&#34;)&#xA;        .onClick(() =&amp;gt; {&#xA;          this.count ++&#xA;        })&#xA;&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may need some 3rd ui libraries to provide some off-the-shelf components, to use this, for example, you can simply use &lt;code&gt;TavView(tag, ...DotPropNames)&lt;/code&gt;. However, if you&#39;re using a lot, this is exhausting, now we provide a function called &lt;code&gt;Converter&lt;/code&gt;, the first prop is a Dict of tags, and the second is dotPropNames&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const {Div, Button, P, WhateverSpan} = Converter(&#xA;{&#xA;  Div: &#34;div&#34;,&#xA;  Button: &#34;button&#34;,&#xA;  P: &#34;p&#34;,&#xA;  WhateverSpan: &#34;span&#34;&#xA;}, {&#xA;  Div: [&#34;goodBye&#34;, &#34;look&#34;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now you can use it anywhere in ReNest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;let allGood = FuncView(() =&amp;gt;&#xA;  Div(&#xA;    Button(&#34;ok&#34;),&#xA;    WhateverSpan(&#34;ha&#34;)&#xA;  )&#xA;    .look(&#34;don&#39;t look at me&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suggest you to write a new file &lt;code&gt;Convert.ts&lt;/code&gt; which contains all the tag you need, and import it from elsewhere&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {Converter} from &#34;@renest/renest&#34;;&#xA;&#xA;export const {Div, Button, Span, P} = Converter(&#xA;{&#xA;    Div: &#34;div&#34;,&#xA;    Button: &#34;button&#34;,&#xA;    Span: &#34;span&#34;,&#xA;    P: &#34;p&#34;&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Find a better way to debug and throw error&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Uniswap/v3-core</title>
    <updated>2022-11-14T01:38:33Z</updated>
    <id>tag:github.com,2022-11-14:/Uniswap/v3-core</id>
    <link href="https://github.com/Uniswap/v3-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü¶Ñ ü¶Ñ ü¶Ñ Core smart contracts of Uniswap v3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Uniswap V3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/fuzz-testing.yml&#34;&gt;&lt;img src=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/fuzz-testing.yml/badge.svg?sanitize=true&#34; alt=&#34;Fuzz Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/mythx.yml&#34;&gt;&lt;img src=&#34;https://github.com/Uniswap/uniswap-v3-core/actions/workflows/mythx.yml/badge.svg?sanitize=true&#34; alt=&#34;Mythx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@uniswap/v3-core/v/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@uniswap/v3-core/latest.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the core smart contracts for the Uniswap V3 Protocol. For higher level contracts, see the &lt;a href=&#34;https://github.com/Uniswap/uniswap-v3-periphery&#34;&gt;uniswap-v3-periphery&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Bug bounty&lt;/h2&gt; &#xA;&lt;p&gt;This repository is subject to the Uniswap V3 bug bounty program, per the terms defined &lt;a href=&#34;https://raw.githubusercontent.com/Uniswap/v3-core/main/bug-bounty.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Local deployment&lt;/h2&gt; &#xA;&lt;p&gt;In order to deploy this code to a local testnet, you should install the npm package &lt;code&gt;@uniswap/v3-core&lt;/code&gt; and import the factory bytecode located at &lt;code&gt;@uniswap/v3-core/artifacts/contracts/UniswapV3Factory.sol/UniswapV3Factory.json&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {&#xA;  abi as FACTORY_ABI,&#xA;  bytecode as FACTORY_BYTECODE,&#xA;} from &#39;@uniswap/v3-core/artifacts/contracts/UniswapV3Factory.sol/UniswapV3Factory.json&#39;&#xA;&#xA;// deploy the bytecode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will ensure that you are testing against the same bytecode that is deployed to mainnet and public testnets, and all Uniswap code will correctly interoperate with your local deployment.&lt;/p&gt; &#xA;&lt;h2&gt;Using solidity interfaces&lt;/h2&gt; &#xA;&lt;p&gt;The Uniswap v3 interfaces are available for import into solidity smart contracts via the npm artifact &lt;code&gt;@uniswap/v3-core&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-solidity&#34;&gt;import &#39;@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol&#39;;&#xA;&#xA;contract MyContract {&#xA;  IUniswapV3Pool pool;&#xA;&#xA;  function doSomethingWithPool() {&#xA;    // pool.swap(...);&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;The primary license for Uniswap V3 Core is the Business Source License 1.1 (&lt;code&gt;BUSL-1.1&lt;/code&gt;), see &lt;a href=&#34;https://raw.githubusercontent.com/Uniswap/v3-core/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;. However, some files are dual licensed under &lt;code&gt;GPL-2.0-or-later&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All files in &lt;code&gt;contracts/interfaces/&lt;/code&gt; may also be licensed under &lt;code&gt;GPL-2.0-or-later&lt;/code&gt; (as indicated in their SPDX headers), see &lt;a href=&#34;https://raw.githubusercontent.com/Uniswap/v3-core/main/contracts/interfaces/LICENSE&#34;&gt;&lt;code&gt;contracts/interfaces/LICENSE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Several files in &lt;code&gt;contracts/libraries/&lt;/code&gt; may also be licensed under &lt;code&gt;GPL-2.0-or-later&lt;/code&gt; (as indicated in their SPDX headers), see &lt;a href=&#34;https://raw.githubusercontent.com/Uniswap/v3-core/main/contracts/libraries/LICENSE&#34;&gt;&lt;code&gt;contracts/libraries/LICENSE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Exceptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;contracts/libraries/FullMath.sol&lt;/code&gt; is licensed under &lt;code&gt;MIT&lt;/code&gt; (as indicated in its SPDX header), see &lt;a href=&#34;https://raw.githubusercontent.com/Uniswap/v3-core/main/contracts/libraries/LICENSE_MIT&#34;&gt;&lt;code&gt;contracts/libraries/LICENSE_MIT&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All files in &lt;code&gt;contracts/test&lt;/code&gt; remain unlicensed (as indicated in their SPDX headers).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>