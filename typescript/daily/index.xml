<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-08T01:40:43Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>punkpeye/fastmcp</title>
    <updated>2025-04-08T01:40:43Z</updated>
    <id>tag:github.com,2025-04-08:/punkpeye/fastmcp</id>
    <link href="https://github.com/punkpeye/fastmcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A TypeScript framework for building MCP servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FastMCP&lt;/h1&gt; &#xA;&lt;p&gt;A TypeScript framework for building &lt;a href=&#34;https://glama.ai/mcp&#34;&gt;MCP&lt;/a&gt; servers capable of handling client sessions.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;For a Python implementation, see &lt;a href=&#34;https://github.com/jlowin/fastmcp&#34;&gt;FastMCP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple Tool, Resource, Prompt definition&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#sessions&#34;&gt;Sessions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#returning-an-image&#34;&gt;Image content&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#errors&#34;&gt;Error handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#sse&#34;&gt;SSE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CORS (enabled by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#progress&#34;&gt;Progress notifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#typed-server-events&#34;&gt;Typed server events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#prompt-argument-auto-completion&#34;&gt;Prompt argument auto-completion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#requestsampling&#34;&gt;Sampling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Automated SSE pings&lt;/li&gt; &#xA; &lt;li&gt;Roots&lt;/li&gt; &#xA; &lt;li&gt;CLI for &lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#test-with-mcp-cli&#34;&gt;testing&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#inspect-with-mcp-inspector&#34;&gt;debugging&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;There are many real-world examples of using FastMCP in the wild. See the &lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#showcase&#34;&gt;Showcase&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { FastMCP } from &#34;fastmcp&#34;;&#xA;import { z } from &#34;zod&#34;; // Or any validation library that supports Standard Schema&#xA;&#xA;const server = new FastMCP({&#xA;  name: &#34;My Server&#34;,&#xA;  version: &#34;1.0.0&#34;,&#xA;});&#xA;&#xA;server.addTool({&#xA;  name: &#34;add&#34;,&#xA;  description: &#34;Add two numbers&#34;,&#xA;  parameters: z.object({&#xA;    a: z.number(),&#xA;    b: z.number(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return String(args.a + args.b);&#xA;  },&#xA;});&#xA;&#xA;server.start({&#xA;  transportType: &#34;stdio&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it!&lt;/em&gt; You have a working MCP server.&lt;/p&gt; &#xA;&lt;p&gt;You can test the server in terminal with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/punkpeye/fastmcp.git&#xA;cd fastmcp&#xA;&#xA;npm install&#xA;&#xA;# Test the addition server example using CLI:&#xA;npx fastmcp dev src/examples/addition.ts&#xA;# Test the addition server example using MCP Inspector:&#xA;npx fastmcp inspect src/examples/addition.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSE&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events&#34;&gt;Server-Sent Events&lt;/a&gt; (SSE) provide a mechanism for servers to send real-time updates to clients over an HTTPS connection. In the context of MCP, SSE is primarily used to enable remote MCP communication, allowing an MCP hosted on a remote machine to be accessed and relay updates over the network.&lt;/p&gt; &#xA;&lt;p&gt;You can also run the server with SSE support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.start({&#xA;  transportType: &#34;sse&#34;,&#xA;  sse: {&#xA;    endpoint: &#34;/sse&#34;,&#xA;    port: 8080,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the server and listen for SSE connections on &lt;code&gt;http://localhost:8080/sse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then use &lt;code&gt;SSEClientTransport&lt;/code&gt; to connect to the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { SSEClientTransport } from &#34;@modelcontextprotocol/sdk/client/sse.js&#34;;&#xA;&#xA;const client = new Client(&#xA;  {&#xA;    name: &#34;example-client&#34;,&#xA;    version: &#34;1.0.0&#34;,&#xA;  },&#xA;  {&#xA;    capabilities: {},&#xA;  },&#xA;);&#xA;&#xA;const transport = new SSEClientTransport(new URL(`http://localhost:8080/sse`));&#xA;&#xA;await client.connect(transport);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io/docs/concepts/tools&#34;&gt;Tools&lt;/a&gt; in MCP allow servers to expose executable functions that can be invoked by clients and used by LLMs to perform actions.&lt;/p&gt; &#xA;&lt;p&gt;FastMCP uses the &lt;a href=&#34;https://standardschema.dev&#34;&gt;Standard Schema&lt;/a&gt; specification for defining tool parameters. This allows you to use your preferred schema validation library (like Zod, ArkType, or Valibot) as long as it implements the spec.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zod Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { z } from &#34;zod&#34;;&#xA;&#xA;server.addTool({&#xA;  name: &#34;fetch-zod&#34;,&#xA;  description: &#34;Fetch the content of a url (using Zod)&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return await fetchWebpageContent(args.url);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ArkType Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { type } from &#34;arktype&#34;;&#xA;&#xA;server.addTool({&#xA;  name: &#34;fetch-arktype&#34;,&#xA;  description: &#34;Fetch the content of a url (using ArkType)&#34;,&#xA;  parameters: type({&#xA;    url: &#34;string&#34;,&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return await fetchWebpageContent(args.url);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Valibot Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Valibot requires the peer dependency @valibot/to-json-schema.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as v from &#34;valibot&#34;;&#xA;&#xA;server.addTool({&#xA;  name: &#34;fetch-valibot&#34;,&#xA;  description: &#34;Fetch the content of a url (using Valibot)&#34;,&#xA;  parameters: v.object({&#xA;    url: v.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return await fetchWebpageContent(args.url);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Returning a string&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;execute&lt;/code&gt; can return a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return &#34;Hello, world!&#34;;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latter is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return {&#xA;      content: [&#xA;        {&#xA;          type: &#34;text&#34;,&#xA;          text: &#34;Hello, world!&#34;,&#xA;        },&#xA;      ],&#xA;    };&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Returning a list&lt;/h4&gt; &#xA;&lt;p&gt;If you want to return a list of messages, you can return an object with a &lt;code&gt;content&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return {&#xA;      content: [&#xA;        { type: &#34;text&#34;, text: &#34;First message&#34; },&#xA;        { type: &#34;text&#34;, text: &#34;Second message&#34; },&#xA;      ],&#xA;    };&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Returning an image&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;imageContent&lt;/code&gt; to create a content object for an image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { imageContent } from &#34;fastmcp&#34;;&#xA;&#xA;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return imageContent({&#xA;      url: &#34;https://example.com/image.png&#34;,&#xA;    });&#xA;&#xA;    // or...&#xA;    // return imageContent({&#xA;    //   path: &#34;/path/to/image.png&#34;,&#xA;    // });&#xA;&#xA;    // or...&#xA;    // return imageContent({&#xA;    //   buffer: Buffer.from(&#34;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&#34;, &#34;base64&#34;),&#xA;    // });&#xA;&#xA;    // or...&#xA;    // return {&#xA;    //   content: [&#xA;    //     await imageContent(...)&#xA;    //   ],&#xA;    // };&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;imageContent&lt;/code&gt; function takes the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The URL of the image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The path to the image file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffer&lt;/code&gt;: The image data as a buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only one of &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, or &lt;code&gt;buffer&lt;/code&gt; must be specified.&lt;/p&gt; &#xA;&lt;p&gt;The above example is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    return {&#xA;      content: [&#xA;        {&#xA;          type: &#34;image&#34;,&#xA;          data: &#34;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&#34;,&#xA;          mimeType: &#34;image/png&#34;,&#xA;        },&#xA;      ],&#xA;    };&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging&lt;/h4&gt; &#xA;&lt;p&gt;Tools can log messages to the client using the &lt;code&gt;log&lt;/code&gt; object in the context object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args, { log }) =&amp;gt; {&#xA;    log.info(&#34;Downloading file...&#34;, {&#xA;      url,&#xA;    });&#xA;&#xA;    // ...&#xA;&#xA;    log.info(&#34;Downloaded file&#34;);&#xA;&#xA;    return &#34;done&#34;;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;log&lt;/code&gt; object has the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;debug(message: string, data?: SerializableValue)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;error(message: string, data?: SerializableValue)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;info(message: string, data?: SerializableValue)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;warn(message: string, data?: SerializableValue)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Errors&lt;/h4&gt; &#xA;&lt;p&gt;The errors that are meant to be shown to the user should be thrown as &lt;code&gt;UserError&lt;/code&gt; instances:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { UserError } from &#34;fastmcp&#34;;&#xA;&#xA;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args) =&amp;gt; {&#xA;    if (args.url.startsWith(&#34;https://example.com&#34;)) {&#xA;      throw new UserError(&#34;This URL is not allowed&#34;);&#xA;    }&#xA;&#xA;    return &#34;done&#34;;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Progress&lt;/h4&gt; &#xA;&lt;p&gt;Tools can report progress by calling &lt;code&gt;reportProgress&lt;/code&gt; in the context object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addTool({&#xA;  name: &#34;download&#34;,&#xA;  description: &#34;Download a file&#34;,&#xA;  parameters: z.object({&#xA;    url: z.string(),&#xA;  }),&#xA;  execute: async (args, { reportProgress }) =&amp;gt; {&#xA;    reportProgress({&#xA;      progress: 0,&#xA;      total: 100,&#xA;    });&#xA;&#xA;    // ...&#xA;&#xA;    reportProgress({&#xA;      progress: 100,&#xA;      total: 100,&#xA;    });&#xA;&#xA;    return &#34;done&#34;;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io/docs/concepts/resources&#34;&gt;Resources&lt;/a&gt; represent any kind of data that an MCP server wants to make available to clients. This can include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File contents&lt;/li&gt; &#xA; &lt;li&gt;Screenshots and images&lt;/li&gt; &#xA; &lt;li&gt;Log files&lt;/li&gt; &#xA; &lt;li&gt;And more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each resource is identified by a unique URI and can contain either text or binary data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.addResource({&#xA;  uri: &#34;file:///logs/app.log&#34;,&#xA;  name: &#34;Application Logs&#34;,&#xA;  mimeType: &#34;text/plain&#34;,&#xA;  async load() {&#xA;    return {&#xA;      text: await readLogFile(),&#xA;    };&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;load&lt;/code&gt; can return multiple resources. This could be used, for example, to return a list of files inside a directory when the directory is read.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;async load() {&#xA;  return [&#xA;    {&#xA;      text: &#34;First file content&#34;,&#xA;    },&#xA;    {&#xA;      text: &#34;Second file content&#34;,&#xA;    },&#xA;  ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also return binary contents in &lt;code&gt;load&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;async load() {&#xA;  return {&#xA;    blob: &#39;base64-encoded-data&#39;&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resource templates&lt;/h3&gt; &#xA;&lt;p&gt;You can also define resource templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.addResourceTemplate({&#xA;  uriTemplate: &#34;file:///logs/{name}.log&#34;,&#xA;  name: &#34;Application Logs&#34;,&#xA;  mimeType: &#34;text/plain&#34;,&#xA;  arguments: [&#xA;    {&#xA;      name: &#34;name&#34;,&#xA;      description: &#34;Name of the log&#34;,&#xA;      required: true,&#xA;    },&#xA;  ],&#xA;  async load({ name }) {&#xA;    return {&#xA;      text: `Example log content for ${name}`,&#xA;    };&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Resource template argument auto-completion&lt;/h4&gt; &#xA;&lt;p&gt;Provide &lt;code&gt;complete&lt;/code&gt; functions for resource template arguments to enable automatic completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.addResourceTemplate({&#xA;  uriTemplate: &#34;file:///logs/{name}.log&#34;,&#xA;  name: &#34;Application Logs&#34;,&#xA;  mimeType: &#34;text/plain&#34;,&#xA;  arguments: [&#xA;    {&#xA;      name: &#34;name&#34;,&#xA;      description: &#34;Name of the log&#34;,&#xA;      required: true,&#xA;      complete: async (value) =&amp;gt; {&#xA;        if (value === &#34;Example&#34;) {&#xA;          return {&#xA;            values: [&#34;Example Log&#34;],&#xA;          };&#xA;        }&#xA;&#xA;        return {&#xA;          values: [],&#xA;        };&#xA;      },&#xA;    },&#xA;  ],&#xA;  async load({ name }) {&#xA;    return {&#xA;      text: `Example log content for ${name}`,&#xA;    };&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io/docs/concepts/prompts&#34;&gt;Prompts&lt;/a&gt; enable servers to define reusable prompt templates and workflows that clients can easily surface to users and LLMs. They provide a powerful way to standardize and share common LLM interactions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.addPrompt({&#xA;  name: &#34;git-commit&#34;,&#xA;  description: &#34;Generate a Git commit message&#34;,&#xA;  arguments: [&#xA;    {&#xA;      name: &#34;changes&#34;,&#xA;      description: &#34;Git diff or description of changes&#34;,&#xA;      required: true,&#xA;    },&#xA;  ],&#xA;  load: async (args) =&amp;gt; {&#xA;    return `Generate a concise but descriptive commit message for these changes:\n\n${args.changes}`;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Prompt argument auto-completion&lt;/h4&gt; &#xA;&lt;p&gt;Prompts can provide auto-completion for their arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addPrompt({&#xA;  name: &#34;countryPoem&#34;,&#xA;  description: &#34;Writes a poem about a country&#34;,&#xA;  load: async ({ name }) =&amp;gt; {&#xA;    return `Hello, ${name}!`;&#xA;  },&#xA;  arguments: [&#xA;    {&#xA;      name: &#34;name&#34;,&#xA;      description: &#34;Name of the country&#34;,&#xA;      required: true,&#xA;      complete: async (value) =&amp;gt; {&#xA;        if (value === &#34;Germ&#34;) {&#xA;          return {&#xA;            values: [&#34;Germany&#34;],&#xA;          };&#xA;        }&#xA;&#xA;        return {&#xA;          values: [],&#xA;        };&#xA;      },&#xA;    },&#xA;  ],&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Prompt argument auto-completion using &lt;code&gt;enum&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you provide an &lt;code&gt;enum&lt;/code&gt; array for an argument, the server will automatically provide completions for the argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;server.addPrompt({&#xA;  name: &#34;countryPoem&#34;,&#xA;  description: &#34;Writes a poem about a country&#34;,&#xA;  load: async ({ name }) =&amp;gt; {&#xA;    return `Hello, ${name}!`;&#xA;  },&#xA;  arguments: [&#xA;    {&#xA;      name: &#34;name&#34;,&#xA;      description: &#34;Name of the country&#34;,&#xA;      required: true,&#xA;      enum: [&#34;Germany&#34;, &#34;France&#34;, &#34;Italy&#34;],&#xA;    },&#xA;  ],&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;FastMCP allows you to &lt;code&gt;authenticate&lt;/code&gt; clients using a custom function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { AuthError } from &#34;fastmcp&#34;;&#xA;&#xA;const server = new FastMCP({&#xA;  name: &#34;My Server&#34;,&#xA;  version: &#34;1.0.0&#34;,&#xA;  authenticate: ({request}) =&amp;gt; {&#xA;    const apiKey = request.headers[&#34;x-api-key&#34;];&#xA;&#xA;    if (apiKey !== &#39;123&#39;) {&#xA;      throw new Response(null, {&#xA;        status: 401,&#xA;        statusText: &#34;Unauthorized&#34;,&#xA;      });&#xA;    }&#xA;&#xA;    // Whatever you return here will be accessible in the `context.session` object.&#xA;    return {&#xA;      id: 1,&#xA;    }&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can access the authenticated session data in your tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.addTool({&#xA;  name: &#34;sayHello&#34;,&#xA;  execute: async (args, { session }) =&amp;gt; {&#xA;    return `Hello, ${session.id}!`;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sessions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;session&lt;/code&gt; object is an instance of &lt;code&gt;FastMCPSession&lt;/code&gt; and it describes active client sessions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.sessions;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We allocate a new server instance for each client connection to enable 1:1 communication between a client and the server.&lt;/p&gt; &#xA;&lt;h3&gt;Typed server events&lt;/h3&gt; &#xA;&lt;p&gt;You can listen to events emitted by the server using the &lt;code&gt;on&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;server.on(&#34;connect&#34;, (event) =&amp;gt; {&#xA;  console.log(&#34;Client connected:&#34;, event.session);&#xA;});&#xA;&#xA;server.on(&#34;disconnect&#34;, (event) =&amp;gt; {&#xA;  console.log(&#34;Client disconnected:&#34;, event.session);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;FastMCPSession&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;FastMCPSession&lt;/code&gt; represents a client session and provides methods to interact with the client.&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/punkpeye/fastmcp/main/#sessions&#34;&gt;Sessions&lt;/a&gt; for examples of how to obtain a &lt;code&gt;FastMCPSession&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;requestSampling&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;requestSampling&lt;/code&gt; creates a &lt;a href=&#34;https://modelcontextprotocol.io/docs/concepts/sampling&#34;&gt;sampling&lt;/a&gt; request and returns the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await session.requestSampling({&#xA;  messages: [&#xA;    {&#xA;      role: &#34;user&#34;,&#xA;      content: {&#xA;        type: &#34;text&#34;,&#xA;        text: &#34;What files are in the current directory?&#34;,&#xA;      },&#xA;    },&#xA;  ],&#xA;  systemPrompt: &#34;You are a helpful file system assistant.&#34;,&#xA;  includeContext: &#34;thisServer&#34;,&#xA;  maxTokens: 100,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;clientCapabilities&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;clientCapabilities&lt;/code&gt; property contains the client capabilities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;session.clientCapabilities;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;loggingLevel&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;loggingLevel&lt;/code&gt; property describes the logging level as set by the client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;session.loggingLevel;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;roots&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;roots&lt;/code&gt; property contains the roots as set by the client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;session.roots;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;server&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;server&lt;/code&gt; property contains an instance of MCP server that is associated with the session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;session.server;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Typed session events&lt;/h3&gt; &#xA;&lt;p&gt;You can listen to events emitted by the session using the &lt;code&gt;on&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;session.on(&#34;rootsChanged&#34;, (event) =&amp;gt; {&#xA;  console.log(&#34;Roots changed:&#34;, event.roots);&#xA;});&#xA;&#xA;session.on(&#34;error&#34;, (event) =&amp;gt; {&#xA;  console.error(&#34;Error:&#34;, event.error);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Your Server&lt;/h2&gt; &#xA;&lt;h3&gt;Test with &lt;code&gt;mcp-cli&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to test and debug your server is with &lt;code&gt;fastmcp dev&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx fastmcp dev server.js&#xA;npx fastmcp dev server.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run your server with &lt;a href=&#34;https://github.com/wong2/mcp-cli&#34;&gt;&lt;code&gt;mcp-cli&lt;/code&gt;&lt;/a&gt; for testing and debugging your MCP server in the terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Inspect with &lt;code&gt;MCP Inspector&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Another way is to use the official &lt;a href=&#34;https://modelcontextprotocol.io/docs/tools/inspector&#34;&gt;&lt;code&gt;MCP Inspector&lt;/code&gt;&lt;/a&gt; to inspect your server with a Web UI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx fastmcp inspect server.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How to use with Claude Desktop?&lt;/h3&gt; &#xA;&lt;p&gt;Follow the guide &lt;a href=&#34;https://modelcontextprotocol.io/quickstart/user&#34;&gt;https://modelcontextprotocol.io/quickstart/user&lt;/a&gt; and add the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;my-mcp-server&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;tsx&#34;,&#xA;        &#34;/PATH/TO/YOUR_PROJECT/src/index.ts&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;YOUR_ENV_VAR&#34;: &#34;value&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;ve developed a server using FastMCP, please &lt;a href=&#34;https://github.com/punkpeye/fastmcp&#34;&gt;submit a PR&lt;/a&gt; to showcase it here!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apinetwork/piapi-mcp-server&#34;&gt;apinetwork/piapi-mcp-server&lt;/a&gt; - generate media using Midjourney/Flux/Kling/LumaLabs/Udio/Chrip/Trellis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domdomegg/computer-use-mcp&#34;&gt;domdomegg/computer-use-mcp&lt;/a&gt; - controls your computer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LiterallyBlah/Dradis-MCP&#34;&gt;LiterallyBlah/Dradis-MCP&lt;/a&gt; –&amp;nbsp;manages projects and vulnerabilities in Dradis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Meeting-Baas/meeting-mcp&#34;&gt;Meeting-Baas/meeting-mcp&lt;/a&gt; - create meeting bots, search transcripts, and manage recording data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/drumnation/unsplash-smart-mcp-server&#34;&gt;drumnation/unsplash-smart-mcp-server&lt;/a&gt; –&amp;nbsp;enables AI agents to seamlessly search, recommend, and deliver professional stock photos from Unsplash&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ssmanji89/halopsa-workflows-mcp&#34;&gt;ssmanji89/halopsa-workflows-mcp&lt;/a&gt; - HaloPSA Workflows integration with AI assistants&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aiamblichus/mcp-chat-adapter&#34;&gt;aiamblichus/mcp-chat-adapter&lt;/a&gt; –&amp;nbsp;provides a clean interface for LLMs to use chat completion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FastMCP is inspired by the &lt;a href=&#34;https://github.com/jlowin/fastmcp&#34;&gt;Python implementation&lt;/a&gt; by &lt;a href=&#34;https://github.com/jlowin&#34;&gt;Jonathan Lowin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Parts of codebase were adopted from &lt;a href=&#34;https://github.com/wong2/litemcp&#34;&gt;LiteMCP&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Parts of codebase were adopted from &lt;a href=&#34;https://dev.classmethod.jp/articles/mcp-sse/&#34;&gt;Model Context protocolでSSEをやってみる&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>