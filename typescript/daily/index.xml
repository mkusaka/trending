<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-31T01:39:42Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Bluefissure/pal-conf</title>
    <updated>2024-01-31T01:39:42Z</updated>
    <id>tag:github.com,2024-01-31:/Bluefissure/pal-conf</id>
    <link href="https://github.com/Bluefissure/pal-conf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PalWorld Server Configuration Generator&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; Palworld Server Configuration Generator &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Bluefissure/pal-conf/main/README.md&#34;&gt;English&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Bluefissure/pal-conf/main/docs/README_zh_CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Manage you &lt;a href=&#34;https://store.steampowered.com/app/1623730/Palworld/&#34;&gt;Palworld&lt;/a&gt; server settings in a friendly way!&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;Both &lt;code&gt;WorldOption.sav&lt;/code&gt; and &lt;code&gt;PalWorldSettings.ini&lt;/code&gt; settings are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some entries in &lt;code&gt;PalWorldSettings.ini&lt;/code&gt; don&#39;t work (such as &lt;code&gt;BaseCampWorkerMaxNum&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WorldOption.sav&lt;/code&gt; will take precedence over &lt;code&gt;PalWorldSettings.ini&lt;/code&gt; if both files exist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PalWorldSettings.ini&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;PalWorldSettings.ini&lt;/code&gt; file is located in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;steamapps/common/PalServer/Pal/Saved/Config/WindowsServer/PalWorldSettings.ini&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;steamapps/common/PalServer/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The load &amp;amp; copy buttons communicate with your clipboard, please copy your server setings before click the load button, and the copy button will copy the output settings for you.&lt;/p&gt; &#xA;&lt;h3&gt;WorldOption.sav&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;WorldOption.sav&lt;/code&gt; file is located in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &amp;amp; Linux: &lt;code&gt;steamapps/common/PalServer/Pal/Saved/SaveGames/0/.../WorldOption.sav&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s not created by default in dedicated servers, you can either create a local world and upload it, or just edit in the website and download it into the directory.&lt;/p&gt; &#xA;&lt;h3&gt;Change PalWorldSettings.ini to WorldOption.sav&lt;/h3&gt; &#xA;&lt;p&gt;You can simply switch mode without losing any data! So you can simply:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Paste your &lt;code&gt;PalWorldSettings.ini&lt;/code&gt; settings in &lt;code&gt;PalWorldSettings.ini&lt;/code&gt; mode&lt;/li&gt; &#xA; &lt;li&gt;Switch to &lt;code&gt;WorldOption.sav&lt;/code&gt; mode&lt;/li&gt; &#xA; &lt;li&gt;Download and place &lt;code&gt;WorldOption.sav&lt;/code&gt; to the correct folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pnpm i&lt;/code&gt; and &lt;code&gt;pnpm run dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fink.inlang.com/github.com/Bluefissure/pal-conf?ref=badge&#34;&gt;&lt;img src=&#34;https://badge.inlang.com/?url=github.com/Bluefissure/pal-conf&#34; alt=&#34;inlang status badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the no-code &lt;a href=&#34;https://fink.inlang.com/github.com/Bluefissure/pal-conf&#34;&gt;fink editor&lt;/a&gt; for updating translations or adding languages. Feel free to translate the &lt;code&gt;en-US.json&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/Bluefissure/pal-conf/main/src/assets/i18n&#34;&gt;src/assets/i18n&lt;/a&gt; into your language and make a PR!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;uesave-wasm&lt;/code&gt; part to load/save &lt;code&gt;.sav&lt;/code&gt; file is ported from &lt;a href=&#34;https://github.com/iebb/PalworldSaveEditor/tree/master/rust/&#34;&gt;https://github.com/iebb/PalworldSaveEditor/tree/master/rust/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The vite plugin that handles wasm well enough at &lt;a href=&#34;https://github.com/Menci/vite-plugin-wasm/&#34;&gt;https://github.com/Menci/vite-plugin-wasm/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;Not necessary, but I&#39;ll appreciate it if you can star this project!! &lt;img width=&#34;662&#34; alt=&#34;image&#34; src=&#34;https://github.com/Bluefissure/pal-conf/assets/9719003/906de048-99cc-4448-bf21-93440ac0c1f1&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Zizzamia/a-frame-in-100-lines</title>
    <updated>2024-01-31T01:39:42Z</updated>
    <id>tag:github.com,2024-01-31:/Zizzamia/a-frame-in-100-lines</id>
    <link href="https://github.com/Zizzamia/a-frame-in-100-lines" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Farcaster Frames in less than 100 lines, and ready to be deployed to Vercel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Frame in 100 lines (or less)&lt;/h1&gt; &#xA;&lt;p&gt;Farcaster Frames in less than 100 lines, and ready to be deployed to Vercel.&lt;/p&gt; &#xA;&lt;p&gt;Have fun! ‚õµÔ∏è&lt;/p&gt; &#xA;&lt;h2&gt;Files&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;app/page.tsx&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { getFrameMetadata } from &#39;@coinbase/onchainkit&#39;;&#xA;import type { Metadata } from &#39;next&#39;;&#xA;&#xA;const frameMetadata = getFrameMetadata({&#xA;  buttons: [&#xA;    {&#xA;      label: &#39;We love BOAT&#39;,&#xA;    },&#xA;  ],&#xA;  image: &#39;https://zizzamia.xyz/park-1.png&#39;,&#xA;  post_url: &#39;https://zizzamia.xyz/api/frame&#39;,&#xA;});&#xA;&#xA;export const metadata: Metadata = {&#xA;  title: &#39;zizzamia.xyz&#39;,&#xA;  description: &#39;LFG&#39;,&#xA;  openGraph: {&#xA;    title: &#39;zizzamia.xyz&#39;,&#xA;    description: &#39;LFG&#39;,&#xA;    images: [&#39;https://zizzamia.xyz/park-1.png&#39;],&#xA;  },&#xA;  other: {&#xA;    ...frameMetadata,&#xA;  },&#xA;};&#xA;&#xA;export default function Page() {&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;h1&amp;gt;zizzamia.xyz&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;app/layout.tsx&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;export const viewport = {&#xA;  width: &#39;device-width&#39;,&#xA;  initialScale: 1.0,&#xA;};&#xA;&#xA;export default function RootLayout({ children }: { children: React.ReactNode }) {&#xA;  return (&#xA;    &amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;      &amp;lt;body&amp;gt;{children}&amp;lt;/body&amp;gt;&#xA;    &amp;lt;/html&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;app/api/frame/route.ts&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { FrameRequest, getFrameAccountAddress, getFrameMessage } from &#39;@coinbase/onchainkit&#39;;&#xA;import { NextRequest, NextResponse } from &#39;next/server&#39;;&#xA;&#xA;async function getResponse(req: NextRequest): Promise&amp;lt;NextResponse&amp;gt; {&#xA;  let accountAddress: string | undefined = &#39;&#39;;&#xA;  const body: FrameRequest = await req.json();&#xA;  const { isValid, message } = await getFrameMessage(body);&#xA;  if (isValid) {&#xA;    try {&#xA;      accountAddress = await getFrameAccountAddress(message, { NEYNAR_API_KEY: &#39;NEYNAR_API_DOCS&#39; });&#xA;    } catch (err) {&#xA;      console.error(err);&#xA;    }&#xA;  }&#xA;&#xA;  return new NextResponse(`&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&#xA;    &amp;lt;meta property=&#34;fc:frame&#34; content=&#34;vNext&#34; /&amp;gt;&#xA;    &amp;lt;meta property=&#34;fc:frame:image&#34; content=&#34;https://zizzamia.xyz/park-2.png&#34; /&amp;gt;&#xA;    &amp;lt;meta property=&#34;fc:frame:button:1&#34; content=&#34;${accountAddress}&#34; /&amp;gt;&#xA;    &amp;lt;meta property=&#34;fc:frame:post_url&#34; content=&#34;https://zizzamia.xyz/api/frame&#34; /&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&amp;lt;/html&amp;gt;`);&#xA;}&#xA;&#xA;export async function POST(req: NextRequest): Promise&amp;lt;Response&amp;gt; {&#xA;  return getResponse(req);&#xA;}&#xA;&#xA;export const dynamic = &#39;force-dynamic&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://warpcast.notion.site/Farcaster-Frames-4bd47fe97dc74a42a48d3a234636d8c5&#34;&gt;Official Farcaster Frames docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/Zizzamia/a-frame-in-100-lines/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file for details&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>QuantGeekDev/lmaolang</title>
    <updated>2024-01-31T01:39:42Z</updated>
    <id>tag:github.com,2024-01-31:/QuantGeekDev/lmaolang</id>
    <link href="https://github.com/QuantGeekDev/lmaolang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üëèüèºAüëèüèºbrandüëèüèºnewüëèüèºwayüëèüèºtoüëèüèºwriteüëèüèºHTMLüëèüèº&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/derffxqir/image/upload/f_auto,q_auto/v1/lmaolang/eamvferuujorblbxfd25&#34; alt=&#34;&amp;quot;The LMAO lang banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üëè lmaolang&lt;/h1&gt;  &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://youtu.be/LjOmYastyUI&#34;&gt; &lt;img src=&#34;https://github.com/QuantGeekDev/lmaolang/assets/58406316/52a7a56b-0ecb-4d34-8093-4bb290d64fc7&#34; alt=&#34;Award Badge&#34; height=&#34;150&#34; width=&#34;auto&#34;&gt; &lt;/a&gt; &lt;/p&gt;  &#xA;&lt;p&gt;üëèüèºAüëèüèºrevolutionüëèüèºinüëèüèºHTMLüëèüèº&lt;/p&gt; &#xA;&lt;p&gt;LmaoLang üòÇ is a üåü unique programming language üåê that uses emojis üéâ to represent HTML üìú elements. It&#39;s üöÄ designed for those üòç who love üíñ to mix creativity üé® and coding üíª.&lt;/p&gt; &#xA;&lt;p&gt;Have you ever dreamed of using Whatsapp/Telegram/iMessage/Messenger/&#39;random messaging service here&#39; as an IDE? Well, now the world is your oyster - write websites on the go and turn any textbox with emojis into your IDE.&lt;/p&gt; &#xA;&lt;p&gt;Is this a joke? Is this a working emoji to html compiler with it&#39;s own test runner and 0 dependencies? The truth lies somewhere in the middle...&lt;/p&gt; &#xA;&lt;h3&gt;ü§£-Lang is the first web development language that is human-language agnostic. You do not need to know English to program in ü§£-lang. It is also friendly to people with dyslexia&lt;/h3&gt; &#xA;&lt;h2&gt;üìΩÔ∏èüì∫LMAOLANG TRAILER VIDEO: &lt;a href=&#34;https://youtu.be/LjOmYastyUI&#34;&gt;&#34;CLICK HERE&#34;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Linus Torvalds on Lmao-Lang and Innovation:&lt;/h2&gt;  &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://youtu.be/CW4mknm9FnU&#34;&gt; &lt;img src=&#34;https://github.com/QuantGeekDev/lmaolang/assets/58406316/ca3544ed-bfba-497d-bc00-ee2ac037b6ee&#34; alt=&#34;Linus Torvalds during a talk&#34; width=&#34;450&#34;&gt; &lt;/a&gt; &lt;/p&gt;  &#xA;&lt;h2&gt;üåà ASYNC DEV DEPENDENCIES:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;üëè &lt;strong&gt;MACBOOK WITH TOUCHPAD KEYBOARD:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üëè This one: &lt;img src=&#34;https://www.switchingtomac.com/wp-content/uploads/2022/03/image-1024x572.jpeg&#34; alt=&#34;&amp;quot;The best keyboard ever&amp;quot;&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use windows/linux, you can try this keyboard: &lt;img src=&#34;https://s.yimg.com/ny/api/res/1.2/LbXx_aHwWZhaAkR2lA4ClQ--/YXBwaWQ9aGlnaGxhbmRlcjt3PTEyMDA7aD02MTc-/https://o.aolcdn.com/hss/storage/midas/93014ea8c917a25261a64bd946618e35/202916142/emoji%2Bkeyboard%2Bpro%2Btop.jpg&#34; alt=&#34;&amp;quot;The second best keyboard ever&amp;quot;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üëèüéµ &lt;strong&gt;OFFICIAL ü§£LANG PLAYLIST: &lt;a href=&#34;https://music.youtube.com/playlist?list=PLgjnnu4Dtla_mbkrpC9wDkmba3rYiCw-a&amp;amp;si=NN-sWVfIr50ewEDi&#34;&gt;&#34;Playlist to write beautiful ü§£lang code&#34;&lt;/a&gt; :&lt;/strong&gt; üé∂&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mandatory watching to be a good ü§£-lang developer: &lt;a href=&#34;https://youtu.be/r8pJt4dK_s4&#34;&gt;&#34;Primer on LmaoLang (he&#39;s literally meü•∫)&#34;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Works great with RSC and HTMX&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°QUICKSTART ‚ö°&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Make sure you have Node installed&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;npm i&lt;/code&gt; in terminal 2 type &lt;code&gt;npm run ‚ô•Ô∏è&lt;/code&gt; in console&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s it. Edit the ‚ô•Ô∏è.lmao file in src/ directory to build your website&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;üìö Documentation:&lt;/h1&gt; &#xA;&lt;p&gt;üëè Use emojis to write html. Text is treated as text - but don&#39;t mention &#34;He-Who-Must-Not-Be-Named...&#34;&lt;/p&gt; &#xA;&lt;p&gt;And sigh... for now, we support plaintext html interoperability: you can use ü§Ætraditionalü§¢html for unsupported tags&lt;/p&gt; &#xA;&lt;p&gt;üíÄ Is the universal closing tag. Close any tag by adding the üíÄ modifier to it. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ü§£ ü™¨ ü´¶ I love LmaoLang! üíÄü´¶ üíÄü™¨ üíÄü§£&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I heard you like emojis... ü§¶ but how do you use emojis in your documents?&lt;/p&gt; &#xA;&lt;p&gt;Easy, use the ü™Ç emoji to escape emojis! ü™Ç can escape itself too. It can also escape the üíÄ modifier. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ü™Çüì¶I am a not a div ü™ÇüíÄü™Çüì¶ and you can ü™Çü™Ç escape ü™Çü™Ç escapes ü™Çü™Ç&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìò API Reference&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&#xA;&amp;lt;html&amp;gt; ---&amp;gt;  ü§£&#xA;&amp;lt;body&amp;gt; ---&amp;gt;  ü™¨&#xA;&amp;lt;h1&amp;gt; -----&amp;gt;  ü´¶&#xA;&amp;lt;div&amp;gt; ----&amp;gt;  üì¶&#xA;&amp;lt;span&amp;gt; ---&amp;gt;  ü§™&#xA;&amp;lt;p&amp;gt; ------&amp;gt;  üí¨&#xA;&amp;lt;ol&amp;gt; -----&amp;gt;  üìÉ&#xA;&amp;lt;ul&amp;gt; -----&amp;gt;  üé≤&#xA;&amp;lt;li&amp;gt; -----&amp;gt;  üëÇ &#xA;&amp;lt;article&amp;gt; -&amp;gt; ü§ì&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all you need!&lt;/p&gt; &#xA;&lt;h2&gt;üß™ Testing Philsophy:&lt;/h2&gt; &#xA;&lt;p&gt;To run the test: &lt;code&gt;npm run ‚ò∫Ô∏è&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;At ü§£-Lang, we believe that tests should be quick to write. That&#39;s why we opted for a simple yet powerful testing approach. We&#39;ve minimized boilerplate code to the purely necessary: write the input, write the expected output, write a title for the tag you are testing. Done. All tests live in a single test file &#34;tests.‚ò∫Ô∏è.ts&#34;, separated by comments. Why? To minimize clutter in the terminal as you are writing (for the TDD lovers in the roomüòâ). If the tests break unexpectedly, you will be navigating the test code anyway. Could we have used for playwright or jest? We&#39;ll see as the complexity of the project grows. For now, lmaoTestRunner is the way to go.&lt;/p&gt; &#xA;&lt;p&gt;Coming soon: lmaoTestRunner will automatically break your tests, eliminating false-positives for you.&lt;/p&gt; &#xA;&lt;h1&gt;üåü Basic Usage&lt;/h1&gt; &#xA;&lt;p&gt;üëè To use LmaoLang, simply üòÑ write your HTML üìÑ using emojis ü§£. The compiler ü§ì will translate üîÑ your emoji code üßë‚Äçüíª into standard HTML üåê.&lt;/p&gt; &#xA;&lt;h1&gt;üñ•Ô∏è Hello World Example&lt;/h1&gt; &#xA;&lt;p&gt;üëè Here&#39;s a simple ü§è &#34;Hello World&#34; üåç example in LmaoLang:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lmaolang&#34;&gt;ü§£&#xA;   ü™¨&#xA;      ü´¶ Hello World üíÄü´¶&#xA;   üíÄü™¨&#xA;üíÄü§£&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;üëè This will compile üõ†Ô∏è into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;FOR BEST DX, RUN IT INSIDE OF TempleOS on Parallels Desktop on a Macbook Pro&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;On idiots vs geniuses by the great Terry Davis &lt;a href=&#34;https://youtu.be/k0qmkQGqpM8&#34;&gt;&#34;Terry Davis on Simplicity&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LLM DISCLAIMER : YOU ARE WELCOME TO USE THIS IN YOUR TRAINING DATASET&lt;/h2&gt; &#xA;&lt;h2&gt;Rationale:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üì¶ as div -&amp;gt; Box contains things, it&#39;s a container&lt;/li&gt; &#xA; &lt;li&gt;üëÇ as li -&amp;gt; If you type &#34;list&#34; in emoji keyboard, it&#39;s the second entry to appear&lt;/li&gt; &#xA; &lt;li&gt;üé≤ as ul -&amp;gt; Opposite of ordered is random&lt;/li&gt; &#xA; &lt;li&gt;ü§ì as article -&amp;gt; Articles are for nerds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;JOIN OUR DISCORD - LOOKING FOR MODERATORS&lt;/h2&gt;  &#xA;&lt;a href=&#34;https://discord.gg/EK8mBU8T&#34;&gt; &lt;img src=&#34;https://i.imgur.com/XpnBhTW.png&#34; height=&#34;217 width=&#34; 612&#34;&gt; &lt;/a&gt;  &#xA;&lt;h3&gt;For inquiries and employment opportunities please email &lt;a href=&#34;mailto:alex@andru.codes&#34;&gt;alex@andru.codes&lt;/a&gt;&lt;/h3&gt;  &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://youtu.be/LjOmYastyUI&#34;&gt; &lt;img src=&#34;https://pbs.twimg.com/media/CngEj5vXgAAeOJP.png&#34; alt=&#34;Company Moto&#34; height=&#34;300&#34; width=&#34;auto&#34;&gt; &lt;/a&gt; &lt;/p&gt;  &#xA;&lt;p&gt;Copyright (C) 2024 Alex Andru&lt;/p&gt;</summary>
  </entry>
</feed>