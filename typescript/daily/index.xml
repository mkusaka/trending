<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-09T01:56:10Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>massCodeIO/massCode</title>
    <updated>2022-07-09T01:56:10Z</updated>
    <id>tag:github.com,2022-07-09:/massCodeIO/massCode</id>
    <link href="https://github.com/massCodeIO/massCode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next version of massCode. A free and open source code snippets manager for developers&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/massCodeIO/massCode/master/preview.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;massCode&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Built with Electron, Vue 3 &amp;amp; Ace Editor.&lt;/strong&gt; &lt;br&gt; Inspired by applications like SnippetsLab and Quiver. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub package.json version&#34; src=&#34;https://img.shields.io/github/package-json/v/massCodeIO/massCode&#34;&gt; &lt;img alt=&#34;GitHub All Releases&#34; src=&#34;https://img.shields.io/github/downloads/massCodeIO/massCode/total&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/massCodeIO/massCode&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/massCodeIO/massCode/releases&#34;&gt;Latest Release&lt;/a&gt; | &lt;a href=&#34;https://masscode.io/documentation/&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/massCodeIO/massCode/raw/master/CHANGELOG.md&#34;&gt;Change Log&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Extensions: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=AntonReshetov.masscode-assistant&#34;&gt;VS Code&lt;/a&gt; | &lt;a href=&#34;https://www.raycast.com/antonreshetov/masscode&#34;&gt;Raycast&lt;/a&gt; | &lt;a href=&#34;https://github.com/massCodeIO/assistant-alfred&#34;&gt;Alfred&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;massCode need your support, give a &lt;a href=&#34;https://github.com/massCodeIO/massCode/stargazers&#34;&gt;star&lt;/a&gt; on this repo or &lt;a href=&#34;https://opencollective.com/masscode&#34;&gt;donate&lt;/a&gt;. All of this is valuable and will inspire further development.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Organization&lt;/h3&gt; &#xA;&lt;p&gt;massCode allows you to organize snippets using multi-level folders as well as tags. Each snippet has fragments - tabs, which gives even greater level of organization.&lt;/p&gt; &#xA;&lt;h3&gt;Editor&lt;/h3&gt; &#xA;&lt;p&gt;A snippet manager must not only provide organization of snippets but also have a good code editor. That&#39;s why under the hood of massCode there&#39;s &lt;a href=&#34;https://ace.c9.io&#34;&gt;Ace&lt;/a&gt;. Ace is a high performance code editor which supports syntax highlighting for over 170 languages. We also added a &lt;a href=&#34;https://prettier.io&#34;&gt;Prettier&lt;/a&gt; to code formatter.&lt;/p&gt; &#xA;&lt;h3&gt;Markdown&lt;/h3&gt; &#xA;&lt;p&gt;massCode allows you to write in Markdown and provide support to syntax highlighting, tables, list and other formatting. Also massCode supports &lt;a href=&#34;https://mermaid-js.github.io/mermaid/#&#34;&gt;Mermaid&lt;/a&gt; - diagramming and charting tool that renders Markdown-inspired text definitions to create and modify diagrams dynamically.&lt;/p&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;It is impossible to imagine a productive snippets manager without quick access to snippets. Therefore massCode has a fast full-text search with highlighting of the search query.&lt;/p&gt; &#xA;&lt;h3&gt;Autosave&lt;/h3&gt; &#xA;&lt;p&gt;massCode automatically saves any changes you make during work, so you don&#39;t have to worry about losing changes.&lt;/p&gt; &#xA;&lt;h3&gt;Sync&lt;/h3&gt; &#xA;&lt;p&gt;You can use any service that provides cloud synchronization, such as iCloud Drive, Google Drive, Dropbox or other similar.&lt;/p&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;massCode uses a simple JSON to store your data. The database files are on your local computer.&lt;/p&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;p&gt;massCode supports extensions for &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=AntonReshetov.masscode-assistant&#34;&gt;VS Code&lt;/a&gt;, &lt;a href=&#34;https://www.raycast.com/antonreshetov/masscode&#34;&gt;Raycast&lt;/a&gt; and &lt;a href=&#34;https://github.com/massCodeIO/assistant-alfred&#34;&gt;Alfred&lt;/a&gt;, which gives even more possibilities to use application. With the VS Code extension you get practically zen mode, search for the necessary snippets and insert them immediately or save the selected code sections as a snippet.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The goal of creating this application was mostly my own growth as a developer. Also, I wanted this project to absorb the best of such applications already on the market (both free and paid). At the same time, I wanted this project to be an open source project.&lt;/p&gt; &#xA;&lt;h2&gt;Follow&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;News and updates on &lt;a href=&#34;https://twitter.com/anton_reshetov&#34;&gt;Twitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/massCodeIO/massCode/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://github.com/antonreshetov/massCode&#34;&gt;download&lt;/a&gt; massCode v1.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/massCodeIO/massCode/raw/master/LICENSE&#34;&gt;AGPL-3.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2019-present, &lt;a href=&#34;https://github.com/antonreshetov&#34;&gt;Anton Reshetov&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>serverless-stack/sst</title>
    <updated>2022-07-09T01:56:10Z</updated>
    <id>tag:github.com,2022-07-09:/serverless-stack/sst</id>
    <link href="https://github.com/serverless-stack/sst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💥 SST makes it easy to build serverless apps. Set breakpoints and test your functions locally.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sst.dev/&#34;&gt; &lt;img alt=&#34;SST&#34; src=&#34;https://raw.githubusercontent.com/serverless-stack/identity/main/variants/sst-full.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sst.dev/discord&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/983865673656705025?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@serverless-stack/resources&#34;&gt;&lt;img alt=&#34;npm&#34; src=&#34;https://img.shields.io/npm/v/@serverless-stack/resources.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/serverless-stack/sst/actions/workflows/ci.yml&#34;&gt;&lt;img alt=&#34;Build status&#34; src=&#34;https://img.shields.io/github/workflow/status/serverless-stack/sst/CI?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;SST is a framework that makes it easy to build serverless apps. It&#39;s an extension of &lt;a href=&#34;https://aws.amazon.com/cdk/&#34;&gt;AWS CDK&lt;/a&gt; and it features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://docs.sst.dev/live-lambda-development&#34;&gt;Live Lambda Development&lt;/a&gt; environment&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://docs.sst.dev/console&#34;&gt;web based dashboard&lt;/a&gt; to manage your apps&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://docs.sst.dev/live-lambda-development#debugging-with-visual-studio-code&#34;&gt;setting breakpoints and debugging in VS Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/packages/resources&#34;&gt;Higher-level constructs&lt;/a&gt; designed specifically for serverless apps&lt;/li&gt; &#xA; &lt;li&gt;Zero-config support for JS and TS (using &lt;a href=&#34;https://esbuild.github.io&#34;&gt;esbuild&lt;/a&gt;), Go, Python, C#, and F#&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Create your first SST app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create a new SST app&#xA;npm init sst&#xA;cd my-sst-app&#xA;&#xA;# Start Live Lambda Dev&#xA;npm start&#xA;&#xA;# Open the SST Console&#xA;open console.sst.dev&#xA;&#xA;# Deploy to prod&#xA;npx sst deploy --stage prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev&#34;&gt;SST docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sst.dev/examples/index.html&#34;&gt;SST examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/serverless-stack/sst/projects/2&#34;&gt;Public roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/serverless-stack/sst/discussions/categories/ideas?discussions_q=category%3AIdeas+sort%3Atop+is%3Aunanswered&#34;&gt;Feature requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/serverless-stack/sst/master/CONTRIBUTING.md&#34;&gt;Contributing to SST&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ServerlessStack&#34;&gt;Follow us on Twitter&lt;/a&gt; and &lt;a href=&#34;https://sst.dev/newsletter.html&#34;&gt;subscribe to our newsletter&lt;/a&gt; for updates.&lt;/p&gt; &#xA;&lt;h2&gt;About SST&lt;/h2&gt; &#xA;&lt;p&gt;We think SST can make it dramatically easier to build serverless apps.&lt;/p&gt; &#xA;&lt;h3&gt;Live Lambda Development&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;sst start&lt;/code&gt; command starts up a local development environment that opens a WebSocket connection to your deployed app and proxies any Lambda requests to your local machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hnTSTm5n11g&amp;amp;feature=youtu.be&#34;&gt;&lt;img src=&#34;https://d1ne2nltv07ycv.cloudfront.net/SST/sst-start-demo/sst-start-demo-2.gif&#34; alt=&#34;sst start&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work on your Lambda functions locally&lt;/li&gt; &#xA; &lt;li&gt;Supports all Lambda triggers, so there&#39;s no need to mock API Gateway, SQS, SNS, etc.&lt;/li&gt; &#xA; &lt;li&gt;Supports real Lambda environment variables and Lambda IAM permissions&lt;/li&gt; &#xA; &lt;li&gt;And it&#39;s fast. There&#39;s nothing to deploy when you make a change!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.sst.dev/live-lambda-development&#34;&gt;Read more about Live Lambda Development&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SST Console&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.sst.dev/console&#34;&gt;SST Console&lt;/a&gt; is a web based dashboard to manage your SST apps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.sst.dev/console&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/serverless-stack/sst/master/www/static/img/console/sst-console-homescreen.png&#34; alt=&#34;sst start&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Invoke functions and replay them&lt;/li&gt; &#xA; &lt;li&gt;Make HTTP requests and test your APIs&lt;/li&gt; &#xA; &lt;li&gt;Scan, query, and edit items in DynamoDB&lt;/li&gt; &#xA; &lt;li&gt;Query the GraphQL endpoints in your app&lt;/li&gt; &#xA; &lt;li&gt;Upload and delete files from your buckets&lt;/li&gt; &#xA; &lt;li&gt;Create and delete users in your User Pools&lt;/li&gt; &#xA; &lt;li&gt;Query your RDS databases and run migrations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.sst.dev/console&#34;&gt;Read more about the SST Console&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Composable serverless constructs&lt;/h3&gt; &#xA;&lt;p&gt;SST also comes with &lt;a href=&#34;https://docs.sst.dev/packages/resources&#34;&gt;a set of serverless specific higher-level CDK constructs&lt;/a&gt;. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Api&#34;&gt;Api&lt;/a&gt; for building APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Cron&#34;&gt;Cron&lt;/a&gt; for building cron jobs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Queue&#34;&gt;Queue&lt;/a&gt; for creating queues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Bucket&#34;&gt;Bucket&lt;/a&gt; for adding S3 buckets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Auth&#34;&gt;Auth&lt;/a&gt; for configuring authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Table&#34;&gt;Table&lt;/a&gt; for adding DynamoDB tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Topic&#34;&gt;Topic&lt;/a&gt; for creating pub/sub systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/StaticSite&#34;&gt;StaticSite&lt;/a&gt; for creating static websites&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/NextjsSite&#34;&gt;NextjsSite&lt;/a&gt; for creating Next.js websites&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/Script&#34;&gt;Script&lt;/a&gt; for running scripts while deploying&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/ViteStaticSite&#34;&gt;ViteStaticSite&lt;/a&gt; for static sites built with Vite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/KinesisStream&#34;&gt;KinesisStream&lt;/a&gt; for real-time data streaming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/RDS&#34;&gt;RDS&lt;/a&gt; for creating an RDS Serverless Cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/WebSocketApi&#34;&gt;WebSocketApi&lt;/a&gt; for creating WebSocket APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/GraphQLApi&#34;&gt;GraphQLApi&lt;/a&gt; for using GraphQL with Lambda&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/EventBus&#34;&gt;EventBus&lt;/a&gt; for creating EventBridge Event buses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/AppSyncApi&#34;&gt;AppSyncApi&lt;/a&gt; for creating AppSync GraphQL APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/ApiGatewayV1Api&#34;&gt;ApiGatewayV1Api&lt;/a&gt; for using AWS API Gateway v1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sst.dev/constructs/ReactStaticSite&#34;&gt;ReactStaticSite&lt;/a&gt; for static sites built with Create React App&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;And more&lt;/h3&gt; &#xA;&lt;p&gt;SST also supports deploying your CloudFormation stacks asynchronously. &lt;a href=&#34;https://seed.run&#34;&gt;Seed&lt;/a&gt; natively supports concurrent asynchronous deployments for your SST apps. And SST deployments on Seed are free!&lt;/p&gt; &#xA;&lt;p&gt;SST also comes with a few other niceties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically lints your code using &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Runs your unit tests using &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internally, SST uses the CDK CLI to invoke the various CDK commands.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BrainJS/brain.js</title>
    <updated>2022-07-09T01:56:10Z</updated>
    <id>tag:github.com,2022-07-09:/BrainJS/brain.js</id>
    <link href="https://github.com/BrainJS/brain.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 GPU accelerated Neural networks in JavaScript for Browsers and Node.js&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.rawgit.com/harthur-org/brain.js/ff595242/logo.svg?sanitize=true&#34; alt=&#34;Logo&#34; width=&#34;200px/&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;brain.js&lt;/h1&gt; &#xA;&lt;p&gt;GPU accelerated Neural networks in JavaScript for Browsers and Node.js&lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center&#34; align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://brain.js.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?up_message=brain.js.org&amp;amp;url=https%3A%2F%2Fbrain.js.org&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/brain.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/brain.js.svg?style=flat-square&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://standardjs.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;js-standard-style&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/brain-js/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.bri.im&#34;&gt;&lt;img src=&#34;https://slack.bri.im/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/BrainJS/brain.js/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/BrainJS/brain.js&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/BrainJS/brain.js/branch/master/graph/badge.svg?token=3SJIBJ1679&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/brainjsfnd&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/brainjsfnd?label=Twitter&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodei.co/npm/brain.js/&#34;&gt;&lt;img src=&#34;https://nodei.co/npm/brain.js.png?compact=true&#34; alt=&#34;NPM&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;brain.js&lt;/code&gt; is a GPU accelerated library for &lt;a href=&#34;http://en.wikipedia.org/wiki/Artificial_neural_network&#34;&gt;Neural Networks&lt;/a&gt; written in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;💡&lt;/span&gt; This is a continuation of the &lt;a href=&#34;https://github.com/harthur/brain&#34;&gt;&lt;strong&gt;harthur/brain&lt;/strong&gt;&lt;/a&gt;, which is not maintained anymore. &lt;a href=&#34;https://github.com/harthur/brain/issues/72&#34;&gt;More info&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#Installation-and-Usage&#34;&gt;Installation and Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#NPM&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#CDN&#34;&gt;CDN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#Download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#Installation-note&#34;&gt;Installation note&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#Building-from-source&#34;&gt;Building from source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#more-examples&#34;&gt;More Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#training&#34;&gt;Training&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#data-format&#34;&gt;Data format&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#for-training-with-neuralnetwork&#34;&gt;For training with NeuralNetwork&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#for-training-with-rnntimestep-lstmtimestep-and-grutimestep&#34;&gt;For training with &lt;code&gt;RNNTimeStep&lt;/code&gt;, &lt;code&gt;LSTMTimeStep&lt;/code&gt; and &lt;code&gt;GRUTimeStep&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#for-training-with-rnn-lstm-and-gru&#34;&gt;For training with &lt;code&gt;RNN&lt;/code&gt;, &lt;code&gt;LSTM&lt;/code&gt; and &lt;code&gt;GRU&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#training-options&#34;&gt;Training Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#async-training&#34;&gt;Async Training&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#cross-validation&#34;&gt;Cross Validation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/train-stream&#34;&gt;Train Stream&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#methods&#34;&gt;Methods&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#traintrainingdata---trainingstatus&#34;&gt;train&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#runinput---prediction&#34;&gt;run&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#forecastinput-count---predictions&#34;&gt;forecast&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#failing&#34;&gt;Failing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#standalone-function&#34;&gt;Standalone Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#options&#34;&gt;Options&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#activation&#34;&gt;activation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#hiddenlayers&#34;&gt;hiddenLayers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#streams&#34;&gt;Streams&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#transform&#34;&gt;Transform&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#utilities&#34;&gt;Utilities&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#likely&#34;&gt;&lt;code&gt;likely&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#toSVG&#34;&gt;&lt;code&gt;toSVG&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#neural-network-types&#34;&gt;Neural Network Types&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/#why-different-neural-network-types&#34;&gt;Why different Neural Network Types?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;NPM&lt;/h3&gt; &#xA;&lt;p&gt;If you can install &lt;code&gt;brain.js&lt;/code&gt; with &lt;a href=&#34;http://npmjs.org&#34;&gt;npm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install brain.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;//unpkg.com/brain.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unpkg.com/brain.js&#34;&gt;Download the latest brain.js for browser&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation note&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Brain.js&lt;/code&gt; depends on a native module &lt;code&gt;headless-gl&lt;/code&gt; for gpu support. In most cases installing &lt;code&gt;brain.js&lt;/code&gt; from npm should just work. However, if you run into problems, this mean prebuilt binaries are not able to download from github repositories and you might need to build it yourself.&lt;/p&gt; &#xA;&lt;h4&gt;Building from source&lt;/h4&gt; &#xA;&lt;p&gt;Please make sure the following dependencies are installed and up to date and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;System dependencies&lt;/h5&gt; &#xA;&lt;h6&gt;Mac OS X&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python 2.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;XCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Ubuntu/Debian&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python 2.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A GNU C++ environment (available via the &lt;code&gt;build-essential&lt;/code&gt; package on &lt;code&gt;apt&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.x.org/wiki/&#34;&gt;libxi-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Working and up to date OpenGL drivers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://glew.sourceforge.net/&#34;&gt;GLEW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;pkg-config&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y build-essential libxi-dev libglu1-mesa-dev libglew-dev pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python 2.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=48159&#34;&gt;Microsoft Visual Studio Build Tools 2015&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;run in cmd: &lt;code&gt;npm config set msvs_version 2015&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run in cmd: &lt;code&gt;npm config set python python2.7&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;* If you are using &lt;code&gt;Build Tools 2017&lt;/code&gt; then run &lt;code&gt;npm config set msvs_version 2017&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example showcasing how to approximate the XOR function using &lt;code&gt;brain.js&lt;/code&gt;: more info on config &lt;a href=&#34;https://github.com/BrainJS/brain.js/raw/develop/src/neural-network.js#L31&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&#34;https://scrimba.com/g/gneuralnetworks&#34;&gt;A fun and practical introduction to Brain.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// provide optional config object (or undefined). Defaults shown.&#xA;const config = {&#xA;  binaryThresh: 0.5,&#xA;  hiddenLayers: [3], // array of ints for the sizes of the hidden layers in the network&#xA;  activation: &#39;sigmoid&#39;, // supported activation types: [&#39;sigmoid&#39;, &#39;relu&#39;, &#39;leaky-relu&#39;, &#39;tanh&#39;],&#xA;  leakyReluAlpha: 0.01, // supported for activation type &#39;leaky-relu&#39;&#xA;};&#xA;&#xA;// create a simple feed forward neural network with backpropagation&#xA;const net = new brain.NeuralNetwork(config);&#xA;&#xA;net.train([&#xA;  { input: [0, 0], output: [0] },&#xA;  { input: [0, 1], output: [1] },&#xA;  { input: [1, 0], output: [1] },&#xA;  { input: [1, 1], output: [0] },&#xA;]);&#xA;&#xA;const output = net.run([1, 0]); // [0.987]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or more info on config &lt;a href=&#34;https://github.com/BrainJS/brain.js/raw/develop/src/recurrent/rnn.js#L726&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// provide optional config object, defaults shown.&#xA;const config = {&#xA;  inputSize: 20,&#xA;  inputRange: 20,&#xA;  hiddenLayers: [20, 20],&#xA;  outputSize: 20,&#xA;  learningRate: 0.01,&#xA;  decayRate: 0.999,&#xA;};&#xA;&#xA;// create a simple recurrent neural network&#xA;const net = new brain.recurrent.RNN(config);&#xA;&#xA;net.train([&#xA;  { input: [0, 0], output: [0] },&#xA;  { input: [0, 1], output: [1] },&#xA;  { input: [1, 0], output: [1] },&#xA;  { input: [1, 1], output: [0] },&#xA;]);&#xA;&#xA;let output = net.run([0, 0]); // [0]&#xA;output = net.run([0, 1]); // [1]&#xA;output = net.run([1, 0]); // [1]&#xA;output = net.run([1, 1]); // [0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, there is no reason to use a neural network to figure out XOR. (-: So, here is a more involved, realistic example: &lt;a href=&#34;https://brain.js.org/&#34;&gt;Demo: training a neural network to recognize color contrast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;p&gt;You can check out this fantastic screencast, which explains how to train a simple neural network using a real world dataset: &lt;a href=&#34;https://scrimba.com/c/c36zkcb&#34;&gt;How to create a neural network in the browser using Brain.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/childrens-book.js&#34;&gt;writing a children&#39;s book using a recurrent neural network&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/typescript/childrens-book.ts&#34;&gt;typescript version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/cross-validate.js&#34;&gt;using cross validation with a feed forward net&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/typescript/cross-validate.ts&#34;&gt;typescript version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;experimental (NeuralNetwork only, but more to come!) &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/gpu.html&#34;&gt;using the gpu in a browser&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/gpu-fallback.js&#34;&gt;using node gpu fallback to cpu&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/typescript/gpu-fallback.ts&#34;&gt;typescript version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/learn-math.js&#34;&gt;learning math using a recurrent neural network&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/typescript/learn-math.ts&#34;&gt;typescript version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/predict-numbers.js&#34;&gt;predict next number, and forecast numbers&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/typescript/predict-numbers.ts&#34;&gt;typescript version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/stream-example.js&#34;&gt;using node streams&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/typescript/stream-example.ts&#34;&gt;typescript version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/which-letter-simple.js&#34;&gt;simple letter detection&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/typescript/which-letter-simple.ts&#34;&gt;typescript version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryotherapy.surge.sh&#34;&gt;Cryotherapy Success Rate Prediction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arifikhsan/batu-gunting-kertas-nuxt&#34;&gt;Rock Paper Scissors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChocolateLoverRaj/detect-image-color&#34;&gt;Detect the Color of an Image&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;train()&lt;/code&gt; to train the network with an array of training data. The network has to be trained with all the data in bulk in one call to &lt;code&gt;train()&lt;/code&gt;. More training patterns will probably take longer to train, but will usually result in a network better at classifying new patterns.&lt;/p&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;Training is computationally expensive, so you should try to train the network offline (or on a Worker) and use the &lt;code&gt;toFunction()&lt;/code&gt; or &lt;code&gt;toJSON()&lt;/code&gt; options to plug the pre-trained network into your website.&lt;/p&gt; &#xA;&lt;h3&gt;Data format&lt;/h3&gt; &#xA;&lt;h4&gt;For training with &lt;code&gt;NeuralNetwork&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Each training pattern should have an &lt;code&gt;input&lt;/code&gt; and an &lt;code&gt;output&lt;/code&gt;, both of which can be either an array of numbers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; or a hash of numbers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;. For the &lt;a href=&#34;https://brain.js.org/&#34;&gt;color contrast demo&lt;/a&gt; it looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.NeuralNetwork();&#xA;&#xA;net.train([&#xA;  { input: { r: 0.03, g: 0.7, b: 0.5 }, output: { black: 1 } },&#xA;  { input: { r: 0.16, g: 0.09, b: 0.2 }, output: { white: 1 } },&#xA;  { input: { r: 0.5, g: 0.5, b: 1.0 }, output: { white: 1 } },&#xA;]);&#xA;&#xA;const output = net.run({ r: 1, g: 0.4, b: 0 }); // { white: 0.99, black: 0.002 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s another variation of the above example. (&lt;em&gt;Note&lt;/em&gt; that input objects do not need to be similar.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;net.train([&#xA;  { input: { r: 0.03, g: 0.7 }, output: { black: 1 } },&#xA;  { input: { r: 0.16, b: 0.2 }, output: { white: 1 } },&#xA;  { input: { r: 0.5, g: 0.5, b: 1.0 }, output: { white: 1 } },&#xA;]);&#xA;&#xA;const output = net.run({ r: 1, g: 0.4, b: 0 }); // { white: 0.81, black: 0.18 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For training with &lt;code&gt;RNNTimeStep&lt;/code&gt;, &lt;code&gt;LSTMTimeStep&lt;/code&gt; and &lt;code&gt;GRUTimeStep&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Each training pattern can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be an array of numbers&lt;/li&gt; &#xA; &lt;li&gt;Be an array of arrays of numbers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example using an array of numbers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.recurrent.LSTMTimeStep();&#xA;&#xA;net.train([[1, 2, 3]]);&#xA;&#xA;const output = net.run([1, 2]); // 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using an array of arrays of numbers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.recurrent.LSTMTimeStep({&#xA;  inputSize: 2,&#xA;  hiddenLayers: [10],&#xA;  outputSize: 2,&#xA;});&#xA;&#xA;net.train([&#xA;  [1, 3],&#xA;  [2, 2],&#xA;  [3, 1],&#xA;]);&#xA;&#xA;const output = net.run([&#xA;  [1, 3],&#xA;  [2, 2],&#xA;]); // [3, 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For training with &lt;code&gt;RNN&lt;/code&gt;, &lt;code&gt;LSTM&lt;/code&gt; and &lt;code&gt;GRU&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Each training pattern can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be an array of values&lt;/li&gt; &#xA; &lt;li&gt;Be a string&lt;/li&gt; &#xA; &lt;li&gt;Have an &lt;code&gt;input&lt;/code&gt; and an &lt;code&gt;output&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Either of which can have an array of values or a string&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CAUTION: When using an array of values, you can use ANY value, however, the values are represented in the neural network by a single input. So the more &lt;em&gt;distinct values&lt;/em&gt; has &lt;em&gt;the larger your input layer&lt;/em&gt;. If you have a hundreds, thousands, or millions of floating point values &lt;em&gt;THIS IS NOT THE RIGHT CLASS FOR THE JOB&lt;/em&gt;. Also, when deviating from strings, this gets into beta&lt;/p&gt; &#xA;&lt;p&gt;Example using direct strings: Hello World Using Brainjs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;  const net = new brain.recurrent.LSTM();&#xA;&#xA;  net.train([&#39;I am brainjs, Hello World!&#39;]);&#xA;&#xA;  const output = net.run(&#39;I am brainjs&#39;);&#xA;  alert(output);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.recurrent.LSTM();&#xA;&#xA;net.train([&#xA;  &#39;doe, a deer, a female deer&#39;,&#xA;  &#39;ray, a drop of golden sun&#39;,&#xA;  &#39;me, a name I call myself&#39;,&#xA;]);&#xA;&#xA;const output = net.run(&#39;doe&#39;); // &#39;, a deer, a female deer&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using strings with inputs and outputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.recurrent.LSTM();&#xA;&#xA;net.train([&#xA;  { input: &#39;I feel great about the world!&#39;, output: &#39;happy&#39; },&#xA;  { input: &#39;The world is a terrible place!&#39;, output: &#39;sad&#39; },&#xA;]);&#xA;&#xA;const output = net.run(&#39;I feel great about the world!&#39;); // &#39;happy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training Options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;train()&lt;/code&gt; takes a hash of options as its second argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;net.train(data, {&#xA;  // Defaults values --&amp;gt; expected validation&#xA;  iterations: 20000, // the maximum times to iterate the training data --&amp;gt; number greater than 0&#xA;  errorThresh: 0.005, // the acceptable error percentage from training data --&amp;gt; number between 0 and 1&#xA;  log: false, // true to use console.log, when a function is supplied it is used --&amp;gt; Either true or a function&#xA;  logPeriod: 10, // iterations between logging out --&amp;gt; number greater than 0&#xA;  learningRate: 0.3, // scales with delta to effect training rate --&amp;gt; number between 0 and 1&#xA;  momentum: 0.1, // scales with next layer&#39;s change value --&amp;gt; number between 0 and 1&#xA;  callback: null, // a periodic call back that can be triggered while training --&amp;gt; null or function&#xA;  callbackPeriod: 10, // the number of iterations through the training data between callback calls --&amp;gt; number greater than 0&#xA;  timeout: Infinity, // the max number of milliseconds to train for --&amp;gt; number greater than 0&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The network will stop training whenever one of the two criteria is met: the training error has gone below the threshold (default &lt;code&gt;0.005&lt;/code&gt;), or the max number of iterations (default &lt;code&gt;20000&lt;/code&gt;) has been reached.&lt;/p&gt; &#xA;&lt;p&gt;By default training will not let you know how it&#39;s doing until the end, but set &lt;code&gt;log&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to get periodic updates on the current training error of the network. The training error should decrease every time. The updates will be printed to console. If you set &lt;code&gt;log&lt;/code&gt; to a function, this function will be called with the updates instead of printing to the console. However, if you want to use the values of the updates in your own output, the &lt;code&gt;callback&lt;/code&gt; can be set to a function to do so instead.&lt;/p&gt; &#xA;&lt;p&gt;The learning rate is a parameter that influences how quickly the network trains. It&#39;s a number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;. If the learning rate is close to &lt;code&gt;0&lt;/code&gt;, it will take longer to train. If the learning rate is closer to &lt;code&gt;1&lt;/code&gt;, it will train faster, but training results may be constrained to a local minimum and perform badly on new data.(&lt;em&gt;Overfitting&lt;/em&gt;) The default learning rate is &lt;code&gt;0.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The momentum is similar to learning rate, expecting a value from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; as well, but it is multiplied against the next level&#39;s change value. The default value is &lt;code&gt;0.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any of these training options can be passed into the constructor or passed into the &lt;code&gt;updateTrainingOptions(opts)&lt;/code&gt; method and they will be saved on the network and used during the training time. If you save your network to json, these training options are saved and restored as well (except for callback and log, callback will be forgotten and log will be restored using console.log).&lt;/p&gt; &#xA;&lt;p&gt;A boolean property called &lt;code&gt;invalidTrainOptsShouldThrow&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; by default. While the option is &lt;code&gt;true&lt;/code&gt;, if you enter a training option that is outside the normal range, an error will be thrown with a message about the abnormal option. When the option is set to &lt;code&gt;false&lt;/code&gt;, no error will be sent, but a message will still be sent to &lt;code&gt;console.warn&lt;/code&gt; with the related information.&lt;/p&gt; &#xA;&lt;h3&gt;Async Training&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;trainAsync()&lt;/code&gt; takes the same arguments as train (data and options). Instead of returning the results object from training, it returns a promise that when resolved will return the training results object. Does NOT work with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.RNN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.GRU&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.LSTM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.RNNTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.GRUTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.LSTMTimeStep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.NeuralNetwork();&#xA;net&#xA;  .trainAsync(data, options)&#xA;  .then((res) =&amp;gt; {&#xA;    // do something with my trained network&#xA;  })&#xA;  .catch(handleError);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With multiple networks you can train in parallel like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.NeuralNetwork();&#xA;const net2 = new brain.NeuralNetwork();&#xA;&#xA;const p1 = net.trainAsync(data, options);&#xA;const p2 = net2.trainAsync(data, options);&#xA;&#xA;Promise.all([p1, p2])&#xA;  .then((values) =&amp;gt; {&#xA;    const res = values[0];&#xA;    const res2 = values[1];&#xA;    console.log(&#xA;      `net trained in ${res.iterations} and net2 trained in ${res2.iterations}`&#xA;    );&#xA;    // do something super cool with my 2 trained networks&#xA;  })&#xA;  .catch(handleError);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross Validation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-validation_(statistics)&#34;&gt;Cross Validation&lt;/a&gt; can provide a less fragile way of training on larger data sets. The brain.js api provides Cross Validation in this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crossValidate = new brain.CrossValidate(() =&amp;gt; new brain.NeuralNetwork(networkOptions));&#xA;crossValidate.train(data, trainingOptions, k); //note k (or KFolds) is optional&#xA;const json = crossValidate.toJSON(); // all stats in json as well as neural networks&#xA;const net = crossValidate.toNeuralNetwork(); // get top performing net out of `crossValidate`&#xA;&#xA;// optionally later&#xA;const json = crossValidate.toJSON();&#xA;const net = crossValidate.fromJSON(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;CrossValidate&lt;/code&gt; with these classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.NeuralNetwork&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.RNNTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.LSTMTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.GRUTimeStep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example of using cross validate can be found in &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/cross-validate.js&#34;&gt;examples/javascript/cross-validate.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;train(trainingData)&lt;/code&gt; -&amp;gt; trainingStatus&lt;/h3&gt; &#xA;&lt;p&gt;The output of &lt;code&gt;train()&lt;/code&gt; is a hash of information about how the training went:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  error: 0.0039139985510105032,  // training error&#xA;  iterations: 406                // training iterations&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;run(input)&lt;/code&gt; -&amp;gt; prediction&lt;/h3&gt; &#xA;&lt;p&gt;Supported on classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.NeuralNetwork&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.NeuralNetworkGPU&lt;/code&gt; -&amp;gt; All the functionality of &lt;code&gt;brain.NeuralNetwork&lt;/code&gt; but, ran on GPU (via gpu.js in WebGL2, WebGL1, or fallback to CPU)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.RNN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.LSTM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.GRU&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.RNNTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.LSTMTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.GRUTimeStep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// feed forward&#xA;const net = new brain.NeuralNetwork();&#xA;net.fromJSON(json);&#xA;net.run(input);&#xA;&#xA;// time step&#xA;const net = new brain.LSTMTimeStep();&#xA;net.fromJSON(json);&#xA;net.run(input);&#xA;&#xA;// recurrent&#xA;const net = new brain.LSTM();&#xA;net.fromJSON(json);&#xA;net.run(input);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;forecast(input, count)&lt;/code&gt; -&amp;gt; predictions&lt;/h3&gt; &#xA;&lt;p&gt;Available with the following classes. Outputs a array of predictions. Predictions being a continuation of the inputs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.RNNTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.LSTMTimeStep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brain.recurrent.GRUTimeStep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const net = new brain.LSTMTimeStep();&#xA;net.fromJSON(json);&#xA;net.forecast(input, 3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;toJSON() -&amp;gt; json&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Serialize neural network to json&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;fromJSON(json)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Deserialize neural network from json&lt;/p&gt; &#xA;&lt;h2&gt;Failing&lt;/h2&gt; &#xA;&lt;p&gt;If the network failed to train, the error will be above the error threshold. This could happen if the training data is too noisy (most likely), the network does not have enough hidden layers or nodes to handle the complexity of the data, or it has not been trained for enough iterations.&lt;/p&gt; &#xA;&lt;p&gt;If the training error is still something huge like &lt;code&gt;0.4&lt;/code&gt; after 20000 iterations, it&#39;s a good sign that the network can&#39;t make sense of the given data.&lt;/p&gt; &#xA;&lt;h3&gt;RNN, LSTM, or GRU Output too short or too long&lt;/h3&gt; &#xA;&lt;p&gt;The instance of the net&#39;s property &lt;code&gt;maxPredictionLength&lt;/code&gt; (default 100) can be set to adjust the output of the net;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const net = new brain.recurrent.LSTM();&#xA;&#xA;// later in code, after training on a few novels, write me a new one!&#xA;net.maxPredictionLength = 1000000000; // Be careful!&#xA;net.run(&#39;Once upon a time&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON&lt;/h2&gt; &#xA;&lt;p&gt;Serialize or load in the state of a trained network with JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const json = net.toJSON();&#xA;net.fromJSON(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Standalone Function&lt;/h2&gt; &#xA;&lt;p&gt;You can also get a custom standalone function from a trained network that acts just like &lt;code&gt;run()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const run = net.toFunction();&#xA;const output = run({ r: 1, g: 0.4, b: 0 });&#xA;console.log(run.toString()); // copy and paste! no need to import brain.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;NeuralNetwork()&lt;/code&gt; takes a hash of options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new brain.NeuralNetwork({&#xA;  activation: &#39;sigmoid&#39;, // activation function&#xA;  hiddenLayers: [4],&#xA;  learningRate: 0.6, // global learning rate, useful when training using streams&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;activation&lt;/h3&gt; &#xA;&lt;p&gt;This parameter lets you specify which activation function your neural network should use. There are currently four supported activation functions, &lt;strong&gt;sigmoid&lt;/strong&gt; being the default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wikiwand.com/en/Sigmoid_function&#34;&gt;sigmoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wikiwand.com/en/Rectifier_(neural_networks)&#34;&gt;relu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wikiwand.com/en/Rectifier_(neural_networks)&#34;&gt;leaky-relu&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;related option - &#39;leakyReluAlpha&#39; optional number, defaults to 0.01&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://theclevermachine.wordpress.com/tag/tanh-function/&#34;&gt;tanh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s a table (thanks, Wikipedia!) summarizing a plethora of activation functions — &lt;a href=&#34;https://www.wikiwand.com/en/Activation_function&#34;&gt;Activation Function&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;hiddenLayers&lt;/h3&gt; &#xA;&lt;p&gt;You can use this to specify the number of hidden layers in the network and the size of each layer. For example, if you want two hidden layers - the first with 3 nodes and the second with 4 nodes, you&#39;d give:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;hiddenLayers: [3, 4];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;code&gt;brain.js&lt;/code&gt; uses one hidden layer with size proportionate to the size of the input array.&lt;/p&gt; &#xA;&lt;h2&gt;Streams&lt;/h2&gt; &#xA;&lt;p&gt;The network now has a &lt;a href=&#34;http://nodejs.org/api/stream.html#stream_class_stream_writable&#34;&gt;WriteStream&lt;/a&gt;. You can train the network by using &lt;code&gt;pipe()&lt;/code&gt; to send the training data to the network.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/stream-example.js&#34;&gt;&lt;code&gt;stream-example.js&lt;/code&gt;&lt;/a&gt; for an example on how to train the network with a stream.&lt;/p&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;To train the network using a stream you must first create the stream by calling &lt;code&gt;net.createTrainStream()&lt;/code&gt; which takes the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;floodCallback()&lt;/code&gt; - the callback function to re-populate the stream. This gets called on every training iteration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doneTrainingCallback(info)&lt;/code&gt; - the callback function to execute when the network is done training. The &lt;code&gt;info&lt;/code&gt; param will contain a hash of information about how the training went:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  error: 0.0039139985510105032,  // training error&#xA;  iterations: 406                // training iterations&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transform&lt;/h3&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;http://nodejs.org/api/stream.html#stream_class_stream_transform&#34;&gt;Transform&lt;/a&gt; to coerce the data into the correct format. You might also use a Transform stream to normalize your data on the fly.&lt;/p&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;likely&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const likely = require(&#39;brain/likely&#39;);&#xA;const key = likely(input, net);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Likely example see: &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/which-letter-simple.js&#34;&gt;simple letter detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;toSVG&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;script src=&#34;../../src/utilities/svg.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renders the network topology of a feedforward network&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.getElementById(&#39;result&#39;).innerHTML = brain.utilities.toSVG(&#xA;  network,&#xA;  options&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;toSVG example see: &lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/examples/javascript/rendering-svg.html&#34;&gt;network rendering&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The user interface used: &lt;img src=&#34;https://user-images.githubusercontent.com/43925925/48969024-e526ed80-f000-11e8-85bd-e10967cfaee2.png&#34; alt=&#34;screenshot1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Neural Network Types&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/neural-network.ts&#34;&gt;&lt;code&gt;brain.NeuralNetwork&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Feedforward_neural_network&#34;&gt;Feedforward Neural Network&lt;/a&gt; with backpropagation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/neural-network-gpu.ts&#34;&gt;&lt;code&gt;brain.NeuralNetworkGPU&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Feedforward_neural_network&#34;&gt;Feedforward Neural Network&lt;/a&gt; with backpropagation, GPU version&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/recurrent/rnn-time-step.ts&#34;&gt;&lt;code&gt;brain.recurrent.RNNTimeStep&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Recurrent_neural_network&#34;&gt;Time Step Recurrent Neural Network or &#34;RNN&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/recurrent/lstm-time-step.ts&#34;&gt;&lt;code&gt;brain.recurrent.LSTMTimeStep&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Long_short-term_memory&#34;&gt;Time Step Long Short Term Memory Neural Network or &#34;LSTM&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/recurrent/gru-time-step.ts&#34;&gt;&lt;code&gt;brain.recurrent.GRUTimeStep&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Gated_recurrent_unit&#34;&gt;Time Step Gated Recurrent Unit or &#34;GRU&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/recurrent/rnn.ts&#34;&gt;&lt;code&gt;brain.recurrent.RNN&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Recurrent_neural_network&#34;&gt;Recurrent Neural Network or &#34;RNN&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/recurrent/lstm.ts&#34;&gt;&lt;code&gt;brain.recurrent.LSTM&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Long_short-term_memory&#34;&gt;Long Short Term Memory Neural Network or &#34;LSTM&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/recurrent/gru.ts&#34;&gt;&lt;code&gt;brain.recurrent.GRU&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Gated_recurrent_unit&#34;&gt;Gated Recurrent Unit or &#34;GRU&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/feed-forward.ts&#34;&gt;&lt;code&gt;brain.FeedForward&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Feedforward_neural_network&#34;&gt;Highly Customizable Feedforward Neural Network&lt;/a&gt; with backpropagation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/src/recurrent.ts&#34;&gt;&lt;code&gt;brain.Recurrent&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Recurrent_neural_network&#34;&gt;Highly Customizable Recurrent Neural Network&lt;/a&gt; with backpropagation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why different Neural Network Types&lt;/h3&gt; &#xA;&lt;p&gt;Different neural nets do different things well. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Feedforward Neural Network can classify simple things very well, but it has no memory of previous actions and has infinite variation of results.&lt;/li&gt; &#xA; &lt;li&gt;A Time Step Recurrent Neural Network &lt;em&gt;remembers&lt;/em&gt;, and can predict future values.&lt;/li&gt; &#xA; &lt;li&gt;A Recurrent Neural Network &lt;em&gt;remembers&lt;/em&gt;, and has a finite set of results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;h3&gt;W3C machine learning standardization process&lt;/h3&gt; &#xA;&lt;p&gt;If you are a developer or if you just care about how ML API should look like - please take a part and join W3C community and share your opinions or simply support opinions you like or agree with.&lt;/p&gt; &#xA;&lt;p&gt;Brain.js is a widely adopted open source machine learning library in the javascript world. There are several reasons for it, but most notable is &lt;strong&gt;simplicity of usage while not sacrificing performance&lt;/strong&gt;. We would like to keep it also simple to learn, simple to use and performant when it comes to W3C standard. We think that current brain.js API is quite close to what we could expect to become a standard. And since supporting doesn&#39;t require much effort and still can make a huge difference feel free to join W3C community group and support us with brain.js like API.&lt;/p&gt; &#xA;&lt;p&gt;Get involved into W3C machine learning ongoing standardization process &lt;a href=&#34;https://www.w3.org/community/webmachinelearning/&#34;&gt;here&lt;/a&gt;. You can also join our open discussion about standardization &lt;a href=&#34;https://github.com/BrainJS/brain.js/issues/337&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue, either a bug or a feature you think would benefit your project let us know and we will do our best.&lt;/p&gt; &#xA;&lt;p&gt;Create issues &lt;a href=&#34;https://github.com/BrainJS/brain.js/issues&#34;&gt;here&lt;/a&gt; and follow the template.&lt;/p&gt; &#xA;&lt;h3&gt;brain.js.org&lt;/h3&gt; &#xA;&lt;p&gt;Source for &lt;code&gt;brain.js.org&lt;/code&gt; is available at &lt;a href=&#34;https://github.com/BrainJS/brain.js.org&#34;&gt;Brain.js.org Repository&lt;/a&gt;. Built using awesome &lt;code&gt;vue.js&lt;/code&gt; &amp;amp; &lt;code&gt;bulma&lt;/code&gt;. Contributions are always welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/BrainJS/brain.js/master/.github/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/BrainJS/brain.js/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/brainjs#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/brainjs#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/brainjs#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/brainjs/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/brainjs/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/brainjs/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>