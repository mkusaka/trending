<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-13T01:47:58Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cuixueshe/vue3-dida</title>
    <updated>2023-01-13T01:47:58Z</updated>
    <id>tag:github.com,2023-01-13:/cuixueshe/vue3-dida</id>
    <link href="https://github.com/cuixueshe/vue3-dida" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-world vue3 projects with complete testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vue3-DiDa&lt;/h1&gt; &#xA;&lt;p&gt;使用 Vue3 来实现滴答清单的功能&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;展示复杂前端项目应该如何测试&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;编程是门手艺 再真实的项目中不断地练习练习再练习&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;最前沿的技术栈 是的 不新不潮不用&lt;/li&gt; &#xA; &lt;li&gt;只专注技术 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;代码的实现是不是优雅&lt;/li&gt; &#xA;   &lt;li&gt;架构是不是整洁&lt;/li&gt; &#xA;   &lt;li&gt;分层是不是清晰&lt;/li&gt; &#xA;   &lt;li&gt;功能不人性化？样式丑？能 run 就行&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;why&lt;/h2&gt; &#xA;&lt;p&gt;做这个项目主要有两个点&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;带同学们刷副本 打怪升级&lt;/li&gt; &#xA; &lt;li&gt;展示前端项目应该如何测试&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;刷副本 打怪升级&lt;/h3&gt; &#xA;&lt;p&gt;如果你问我最好最高效提高编程能力的方式是什么&lt;/p&gt; &#xA;&lt;p&gt;我会告诉你做项目 做符合 i+1 难度的项目 一直做&lt;/p&gt; &#xA;&lt;p&gt;i 是你当前的能力 在这个难度基础上再 +1 就是适合你的项目&lt;/p&gt; &#xA;&lt;p&gt;同学们应该都玩过游戏打过副本吧&lt;/p&gt; &#xA;&lt;p&gt;想要在游戏里面升级的话 你必须找到符合你当前等级的副本&lt;/p&gt; &#xA;&lt;p&gt;同时最好是有人带你 这样刷副本的话 最快&lt;/p&gt; &#xA;&lt;p&gt;而这个项目就是如此 非常适合工作 1-3 年的同学提高&lt;/p&gt; &#xA;&lt;p&gt;我会把任务拆分成不同等级的难度，让你知道可以领什么样子的任务&lt;/p&gt; &#xA;&lt;p&gt;然后会 review PR ， 告诉你有什么问题 应该如何解决&lt;/p&gt; &#xA;&lt;p&gt;最后我会重构 让你知道好的代码结构应该是什么样子的&lt;/p&gt; &#xA;&lt;p&gt;我们从实战中学习 同时也可以在开源社区建立个人影响力 持续不断的获得正向反馈 激励我们不断地前进&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不要在刷面试题 算法题 八股文了 那只会让你感觉编程是痛苦的&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;展示前端项目应该如何测试&lt;/h3&gt; &#xA;&lt;p&gt;我是一名前端测试布道者，在布道测试的时候听到最多的一句话就是： 测试很好 但是业务代码不适合/没法写&lt;/p&gt; &#xA;&lt;p&gt;同时很多的测试教程资料也都是拿比较简单的 demo 来举例，和真实的业务场景不匹配 复杂性不够&lt;/p&gt; &#xA;&lt;p&gt;所以我决定构建一个真实且偏复杂的前端项目为其加上对应的测试 展示业务代码应该如何测试&lt;/p&gt; &#xA;&lt;p&gt;争取为推动前端社区测试方向贡献自己的力量&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;按照现在的互联网发展趋势来看已经到了&#34;降本增效&#34;的时代 程序员如何保证自己的代码质量以及提高工作效率将会成为重点问题 而测试就是这个问题的解&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;p&gt;执行下面的命令即可&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;执行这个命令安装依赖的话 会跳过 cypress 的安装&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为有很多同学反馈在安装 cypress 的时候超时&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;代码贡献指南&lt;/h2&gt; &#xA;&lt;p&gt;你需要安装 Node.js 16+ 版本和 PNPM 7+ 版本。&lt;/p&gt; &#xA;&lt;p&gt;推荐使用 &lt;a href=&#34;https://nodejs.org/api/corepack.html&#34;&gt; corepack &lt;/a&gt; ，这样的话可以基于项目配置的包管理器版本来安装依赖。&lt;/p&gt; &#xA;&lt;h3&gt;说明&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个 PR 只处理一件事，不要把无关代码提交上来，这样最好 Review 以及 Merged&lt;/li&gt; &#xA; &lt;li&gt;Issue 以 PR 为准，留言不算。&lt;/li&gt; &#xA; &lt;li&gt;PR 的标题要使用英文&lt;/li&gt; &#xA; &lt;li&gt;当发生多个 PR 同时解决一个 Issue 的时候，会随机合并，注意没合并你的 PR 不代表你的实现不好，不要灰心，不要抱怨。你要做的是看看其他 PR 有没有可以学习的地方和可以优化的地方，友好的指出来，当你实现一遍后其实就已经学到很多了。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;规范&lt;/h3&gt; &#xA;&lt;h4&gt;store（pinia）和 service 的关系&lt;/h4&gt; &#xA;&lt;p&gt;service 层是存放业务逻辑，纯 js/ts 是为了测试而分离出来的&lt;/p&gt; &#xA;&lt;p&gt;store 相当于是胶水层，负责两个点&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;负责把 UI 层和 Service 层连接起来 因为对于响应式的开发来讲，我们只需要操作数据就可以完成视图的更新。而数据又在 service 层，所以我们就需要一个胶水层用 reactive/ref 来包裹业务逻辑变成响应式对象，也就是和 UI 绑定在一起了。&lt;/li&gt; &#xA; &lt;li&gt;负责跨组件通信&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;弄明白这两者的区别后，在开发的时候就可以做出判断 我是应该直接调用 service 层的方法呢，还是在 store 包裹一层在调用。 如果你要处理的行为需要修改响应式对象 那么就应该在 store 层包裹然后在使用，比如下面的代码中&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function addTask(title: string) {&#xA;  const task = taskService.createTask(title)&#xA;  taskService.addTask(task, currentActiveProject.value!)&#xA;  changeActiveTask(task)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;既要添加 task 还需要改变 currentActiveProject 的值，而 currentActiveProject 这个变量是和 UI 绑定的， 所以 addTask 就需要放到 store 层 因为这个行为会影响和 UI 绑定的响应式数据&lt;/p&gt; &#xA;&lt;p&gt;反之就是行为不会影响到响应式对象 那么就可以直接调用 service 层的方法 比如&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { isSmartProject } from &#39;services/task&#39;&#xA;const shouldShowTodoAdd = computed(() =&amp;gt; {&#xA;  const name = taskStore.currentActiveProject?.name || &#39;&#39;&#xA;  return !isSmartProject(name)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;isSmartProject 是基于 name 来判断是不是智能清单，不会影响到响应式对象。那么就可以直接调用&lt;/p&gt; &#xA;&lt;h4&gt;什么情况下应该把逻辑抽离到 composable 内&lt;/h4&gt; &#xA;&lt;p&gt;当这段逻辑需要在多个组件之间（ &amp;gt; 1 ）复用的时候，就可以把逻辑抽离放到 composable 内了&lt;/p&gt; &#xA;&lt;p&gt;如果逻辑只在一个组件内使用的话 直接就可以放到对应的组件内&lt;/p&gt; &#xA;&lt;p&gt;这里有个技巧是可以使用 useXXX 来封装一下对应的功能，比如 useXXXX&lt;/p&gt; &#xA;&lt;p&gt;这样的好处在于可以基于功能来隔离变量方法 不至于全部散放到 setup 内。&lt;/p&gt; &#xA;&lt;p&gt;理论上来讲 一个组件中对应的 useXXX 之类的不会多 如果多的话 一定是可以继续拆分出组件的&lt;/p&gt; &#xA;&lt;h2&gt;如何参与进来&lt;/h2&gt; &#xA;&lt;p&gt;项目要开发的功能直接参考滴答清单来就可以&lt;/p&gt; &#xA;&lt;p&gt;我会把任务拆分放到 issues 列表里面&lt;/p&gt; &#xA;&lt;p&gt;如果你想参与进来的话 可以直接去翻看 issues&lt;/p&gt; &#xA;&lt;p&gt;当然你也可以主动发现问题/需求&lt;/p&gt; &#xA;&lt;p&gt;比如说你发现了一个 bug ，然后就可以先去创建一个 issue 解决完成之后在发一个 pr 过来即可&lt;/p&gt; &#xA;&lt;p&gt;在比如你发现一个滴答清单的功能 在项目的 issues 里面并没有被说明，那么你也可以创建一个 issue 然后实现完成后发一个 pr 过来&lt;/p&gt; &#xA;&lt;h2&gt;参与进来可以收获到什么&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;这个项目使用到的技术栈全部都是社区里面最新的，可以让你学到很多新技术&lt;/li&gt; &#xA; &lt;li&gt;比普通前端项目复杂度要高，可以让你接触到更复杂的业务场景&lt;/li&gt; &#xA; &lt;li&gt;可以感受到测试的魅力，如何写测试以及如何使用测试来提高项目的质量&lt;/li&gt; &#xA; &lt;li&gt;每一个 pr 我都会去 review ，你可以在 review 的过程收获很多编程上的技巧&lt;/li&gt; &#xA; &lt;li&gt;暂时想不到了 想到了在说 - -#&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;总之参与进来会对你技术提高有很大的帮助，而且开源合作方式就比较的自由，有时间了就来领个任务做做涨涨经验值 没时间了就该忙啥忙啥去&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;支持 Vim 的方式通过快捷键来操作 类似于 &lt;a href=&#34;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en&#34;&gt;vimium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;支持可以通过 github 账号登录，数据直接保存在自己的 github 上&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>jackmichalak/phishim</title>
    <updated>2023-01-13T01:47:58Z</updated>
    <id>tag:github.com,2023-01-13:/jackmichalak/phishim</id>
    <link href="https://github.com/jackmichalak/phishim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Phishim - let the user log in for you&lt;/h1&gt; &#xA;&lt;p&gt;Phishim is a phishing tool which reduces configuration time and bypasses most types of MFA by running a chrome tab on the server that the user unknowingly interacts with.&lt;/p&gt; &#xA;&lt;h2&gt;What is different about Phishim?&lt;/h2&gt; &#xA;&lt;p&gt;Most phishing infrastructure works in one of two ways: either you create static HTML pages (manually or by grabbing them during setup), or you proxy traffic to the impersonated domain (possibly modifying contents on the fly).&lt;/p&gt; &#xA;&lt;p&gt;Phishim works differently by proxying at the user interaction layer rather than the traffic layer, reducing the amount of configuration required. In particular, I no longer had to spend time removing troublesome JavaScript from my landing pages like I had to with &lt;a href=&#34;https://getgophish.com/&#34;&gt;GoPhish&lt;/a&gt;, and I no longer had to spend time configuring rewrite rules like I had to with &lt;a href=&#34;https://github.com/kgretzky/evilginx2&#34;&gt;Evilginx2&lt;/a&gt;. The tradeoff is that these other tools allow you to create much higher-fidelity impersonations than this approach.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, &lt;a href=&#34;https://nodejs.org/en/download/package-manager/&#34;&gt;install node and npm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then clone this repo and install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:jackmichalak/phishim.git&#xA;$ cd phishim&#xA;$ npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now configure the variables at the top of &lt;code&gt;src/index.ts&lt;/code&gt;. The first string is where you are hosting your phish, and the others are how you interact with the impersonated website. You may also want to add a &lt;code&gt;favicon.ico&lt;/code&gt; file at the root so that the correct favicon is displayed in the browser.&lt;/p&gt; &#xA;&lt;p&gt;Once doing so you can start the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The phish interface by default runs on port 8080, and the admin interface runs on port 3333. Once a user has logged in on the phish interface, you can open up the admin interface to reconnect to their session and browse as them.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Phishim depends very heavily on &lt;a href=&#34;https://pptr.dev/&#34;&gt;Puppeteer&lt;/a&gt;. Puppeteer is a browser automation library which primarily focuses on testing automation, but it has also been used extensively for web scraping. Phishim spins up a Puppeteer browser for each user that visits the site. The server takes screenshots of the web page and sends them down to the client over a web socket connection for display, and the client sends up clicks and keyboard presses to the server to be played on the page. Once the user successfully logs in, they are redirected to the real website.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;h3&gt;Does not work for all types of MFA&lt;/h3&gt; &#xA;&lt;p&gt;While this approach has been tested for many of the most common MFA approaches such as SMS, authenticator apps, in-app notifications, and the like, any MFA approach which involves authenticating the URL in the browser will succeed in protecting the user. For example, &lt;a href=&#34;https://en.wikipedia.org/wiki/WebAuthn&#34;&gt;WebAuthn&lt;/a&gt; uses a different key pair per website which would prevent Phishim from using the data received on the impersonated host.&lt;/p&gt; &#xA;&lt;h3&gt;Some websites are able to detect something phishy is going on&lt;/h3&gt; &#xA;&lt;p&gt;In my testing multiple websites determined that my login attempts were above-average risk and instituted higher-friction MFA techniques than would otherwise be used, for example requiring the user enter a two-digit number from the site into their mobile app, and one website outright blocked the login altogether even though I had valid credentials. I was able to work around some of these problems by modifying Phishim&#39;s behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Requires the target to have a fast internet connection&lt;/h3&gt; &#xA;&lt;p&gt;The slower the internet connection between the server and the user, the more noticeable it is that this is not the real site. Login pages are often quite simple but delayed interactions can cause suspicion. As high internet speeds proliferate this will be less of a concern.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>snyk/cli</title>
    <updated>2023-01-13T01:47:58Z</updated>
    <id>tag:github.com,2023-01-13:/snyk/cli</id>
    <link href="https://github.com/snyk/cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snyk CLI scans and monitors your projects for security vulnerabilities.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://snyk.io/style/asset/logo/snyk-print.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Snyk CLI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snyk.io&#34;&gt;Snyk&lt;/a&gt; scans and monitors your projects for security vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/snyk/cli/master/help/snyk-cli-screenshot.png&#34; alt=&#34;Snyk CLI screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is &lt;a href=&#34;https://snyk.io&#34;&gt;Snyk&lt;/a&gt;?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snyk.io&#34;&gt;Snyk&lt;/a&gt; is a developer-first cloud-native security tool. It covers multiple areas of application security:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/product/open-source-security-management/&#34;&gt;&lt;strong&gt;Snyk Open Source&lt;/strong&gt;&lt;/a&gt;: Find and automatically fix open source vulnerabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/product/snyk-code/&#34;&gt;&lt;strong&gt;Snyk Code&lt;/strong&gt;&lt;/a&gt;: Find and fix vulnerabilities in your application code in real time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/product/container-vulnerability-management/&#34;&gt;&lt;strong&gt;Snyk Container&lt;/strong&gt;&lt;/a&gt;: Find and fix vulnerabilities in container images and Kubernetes applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/product/infrastructure-as-code-security/&#34;&gt;&lt;strong&gt;Snyk Infrastructure as Code&lt;/strong&gt;&lt;/a&gt;: Find and fix insecure configurations in Terraform and Kubernetes code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snyk.io&#34;&gt;Learn more about what Snyk can do and sign up for a free account »&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is Snyk CLI?&lt;/h1&gt; &#xA;&lt;p&gt;Snyk CLI brings the functionality of &lt;a href=&#34;https://snyk.io&#34;&gt;Snyk&lt;/a&gt; into your development workflow. It can be run locally or in your CI/CD pipeline to scan your projects for security issues.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages and tools&lt;/h2&gt; &#xA;&lt;p&gt;Snyk supports many languages and tools, including Java, .NET, JavaScript, Python, Golang, PHP, C/C++, Ruby, Scala and more. See our &lt;a href=&#34;https://support.snyk.io/hc/en-us/articles/360020352437-Language-support-summary&#34;&gt;Language Support documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CLI also supports &lt;a href=&#34;https://support.snyk.io/hc/en-us/articles/360003946897-Snyk-Container-security-overview&#34;&gt;Docker scanning&lt;/a&gt; and &lt;a href=&#34;https://support.snyk.io/hc/en-us/categories/360001342678-Infrastructure-as-code&#34;&gt;Terraform, k8s and other Infrastructure as Code files scanning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Install Snyk CLI&lt;/h1&gt; &#xA;&lt;p&gt;Snyk CLI can be installed through multiple channels.&lt;/p&gt; &#xA;&lt;h2&gt;Install with npm or Yarn&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/snyk&#34;&gt;Snyk CLI is available as an npm package&lt;/a&gt;. If you have Node.js installed locally, you can install it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install snyk@latest -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you are using Yarn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn global add snyk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More installation methods&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Standalone executables (macOS, Linux, Windows)&lt;/summary&gt; &#xA; &lt;h3&gt;Standalone executables&lt;/h3&gt; &#xA; &lt;p&gt;Use &lt;a href=&#34;https://github.com/snyk/snyk/releases&#34;&gt;GitHub Releases&lt;/a&gt; to download a standalone executable of Snyk CLI for your platform.&lt;/p&gt; &#xA; &lt;p&gt;We also provide these standalone executables on our official CDN. See &lt;a href=&#34;https://static.snyk.io/cli/latest/release.json&#34;&gt;the &lt;code&gt;release.json&lt;/code&gt; file&lt;/a&gt; for the download links:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://static.snyk.io/cli/latest/release.json&#xA;&#xA;# Or for specific version or platform&#xA;https://static.snyk.io/cli/v1.666.0/release.json&#xA;https://static.snyk.io/cli/latest/snyk-macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For example, to download and run the latest Snyk CLI on macOS, you could run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://static.snyk.io/cli/latest/snyk-macos -o snyk&#xA;chmod +x ./snyk&#xA;mv ./snyk /usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also use these direct links to download the executables:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;macOS: &lt;a href=&#34;https://static.snyk.io/cli/latest/snyk-macos&#34;&gt;https://static.snyk.io/cli/latest/snyk-macos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Windows: &lt;a href=&#34;https://static.snyk.io/cli/latest/snyk-win.exe&#34;&gt;https://static.snyk.io/cli/latest/snyk-win.exe&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Linux: &lt;a href=&#34;https://static.snyk.io/cli/latest/snyk-linux&#34;&gt;https://static.snyk.io/cli/latest/snyk-linux&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Linux (arm64): &lt;a href=&#34;https://static.snyk.io/cli/latest/snyk-linux-arm64&#34;&gt;https://static.snyk.io/cli/latest/snyk-linux-arm64&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Alpine: &lt;a href=&#34;https://static.snyk.io/cli/latest/snyk-alpine&#34;&gt;https://static.snyk.io/cli/latest/snyk-alpine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Drawback of this method is, that you will have to manually keep the Snyk CLI up to date.&lt;/p&gt; &#xA; &lt;h4&gt;Verifying standalone binaries&lt;/h4&gt; &#xA; &lt;p&gt;You can verify both shasum of downloaded binaries and their GPG signatures.&lt;/p&gt; &#xA; &lt;p&gt;Download location on &lt;code&gt;static.snyk.io&lt;/code&gt; contains a file called &lt;code&gt;sha256sums.txt.asc&lt;/code&gt;. You can download it directly &lt;code&gt;https://static.snyk.io/cli/latest/sha256sums.txt.asc&lt;/code&gt; or for a specific version like &lt;code&gt;https://static.snyk.io/cli/v1.666.0/sha256sums.txt.asc&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;To check that a downloaded file matches the checksum, use a &lt;code&gt;sha256sum&lt;/code&gt; command like so:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep snyk-macos sha256sums.txt.asc | sha256sum -c -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to verify Snyk CLI standalone binaries against &lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/help/_about-this-project/snyk-code-signing-public.pgp&#34;&gt;Snyk CLI GPG key&lt;/a&gt;, you will need to import it first:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# A22665FB96CAB0E0973604C83676C4B8289C296E is the key belonging to code-signing@snyk.io&#xA;# Copy of this public key is also in this repository /help/_about-this-project/snyk-code-signing-public.pgp&#xA;gpg --keyserver hkps://keys.openpgp.org --recv-keys A22665FB96CAB0E0973604C83676C4B8289C296E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then verify the file is signed with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --verify sha256sums.txt.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Command output should look like:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;gpg: Signature made So  8 Jan 14:11:44 2023 CET&#xA;gpg:                using EDDSA key A22665FB96CAB0E0973604C83676C4B8289C296E&#xA;gpg: Good signature from &#34;Snyk Limited &amp;lt;code-signing@snyk.io&amp;gt;&#34; [unknown]&#xA;gpg: WARNING: This key is not certified with a trusted signature!&#xA;gpg:          There is no indication that the signature belongs to the owner.&#xA;Primary key fingerprint: A226 65FB 96CA B0E0 9736  04C8 3676 C4B8 289C 296E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Install with Homebrew (macOS, Linux)&lt;/summary&gt; &#xA; &lt;h3&gt;Homebrew&lt;/h3&gt; &#xA; &lt;p&gt;Install Snyk CLI from &lt;a href=&#34;https://github.com/snyk/homebrew-tap&#34;&gt;Snyk tap&lt;/a&gt; with &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; by running:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap snyk/tap&#xA;brew install snyk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Scoop (Windows)&lt;/summary&gt; &#xA; &lt;h3&gt;Scoop&lt;/h3&gt; &#xA; &lt;p&gt;Install Snyk CLI from our &lt;a href=&#34;https://github.com/snyk/scoop-snyk&#34;&gt;Snyk bucket&lt;/a&gt; with &lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt; on Windows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;scoop bucket add snyk https://github.com/snyk/scoop-snyk&#xA;scoop install snyk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Snyk CLI in a Docker image&lt;/summary&gt; &#xA; &lt;h3&gt;Snyk CLI in a Docker image&lt;/h3&gt; &#xA; &lt;p&gt;Snyk CLI can also be run from a Docker image. Snyk offers multiple Docker tags under &lt;a href=&#34;https://hub.docker.com/r/snyk/snyk&#34;&gt;&lt;code&gt;snyk/snyk&lt;/code&gt;&lt;/a&gt;. These images wrap the Snyk CLI and depending on the Tag come with a relevant tooling for different projects. &lt;a href=&#34;https://github.com/snyk/snyk-images&#34;&gt;See the snyk/images on GitHub for more details and examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Install as a part of a Snyk CLI integration&lt;/h2&gt; &#xA;&lt;p&gt;Snyk also offers many integrations into developer tooling. These integrations will install and manage the Snyk CLI for you. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jenkinsci/snyk-security-scanner-plugin&#34;&gt;Snyk Jenkins plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snyk/snyk-orb&#34;&gt;CircleCI Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snyk/snyk-azure-pipelines-task&#34;&gt;Azure Pipelines Task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snyk/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snyk/snyk-intellij-plugin&#34;&gt;IntelliJ IDE Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=snyk-security.snyk-vulnerability-scanner&#34;&gt;VS Code Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snyk/snyk-eclipse-plugin&#34;&gt;Eclipse IDE Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snyk/snyk-maven-plugin&#34;&gt;Maven plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And many more. See &lt;a href=&#34;https://support.snyk.io/hc/en-us/categories/360000598398-Integrations&#34;&gt;the Integrations documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://support.snyk.io/hc/en-us/categories/360000598398-Integrations&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/snyk/cli/master/help/ide.svg?sanitize=true&#34; alt=&#34;Snyk CLI IDE integration&#34; width=&#34;50%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Getting started with Snyk CLI&lt;/h1&gt; &#xA;&lt;p&gt;Once you installed the Snyk CLI, you can verify it&#39;s working by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/help/cli-commands&#34;&gt;full Snyk CLI help&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authenticating Snyk CLI&lt;/h2&gt; &#xA;&lt;p&gt;Snyk CLI depends on &lt;a href=&#34;https://snyk.io&#34;&gt;Snyk.io&lt;/a&gt; APIs. Connect your Snyk CLI with &lt;a href=&#34;https://snyk.io&#34;&gt;Snyk.io&lt;/a&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk auth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting up language support&lt;/h2&gt; &#xA;&lt;p&gt;Depending on your project&#39;s language, you might need to setup your language environment before using Snyk.&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://support.snyk.io/hc/en-us/articles/360020352437-Language-support-summary&#34;&gt;Language Support documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scanning your project&lt;/h2&gt; &#xA;&lt;p&gt;If you are already in a folder with a supported project, start by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or scan a Docker image by its tag with &lt;a href=&#34;https://snyk.io/product/container-vulnerability-management/&#34;&gt;Snyk Container&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk container test ubuntu:18.04&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a k8s file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk iac test /path/to/kubernetes_file.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monitoring your project&lt;/h2&gt; &#xA;&lt;p&gt;Snyk can also monitor your project periodically and alert you for new vulnerabilities. The &lt;code&gt;snyk monitor&lt;/code&gt; is similar to &lt;code&gt;snyk test&lt;/code&gt; and can be used to create a project on the Snyk website that will be continuously monitored for new vulnerabilities.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://snyk.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/snyk/cli/master/help/monitor.svg?sanitize=true&#34; alt=&#34;Snyk CLI monitor projects&#34; width=&#34;70%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; snyk monitor&#xA;Monitoring /project (project-name)...&#xA;&#xA;Explore this snapshot at https://app.snyk.io/org/my-org/project/29361c2c-9005-4692-8df4-88f1c040fa7c/history/e1c994b3-de5d-482b-9281-eab4236c851e&#xA;&#xA;Notifications about newly disclosed issues related to these dependencies will be emailed to you.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add Snyk to your CI/CD&lt;/h3&gt; &#xA;&lt;p&gt;Snyk is really powerful when you are continuously scanning and monitoring your projects for vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;Use one of &lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/#install-as-a-part-of-a-snyk-cli-integration&#34;&gt;our integrations&lt;/a&gt; to stay secure.&lt;/p&gt; &#xA;&lt;p&gt;You can authorize Snyk CLI in your CI/CD programatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using a SNYK_TOKEN envvar (preferred)&#xA;SNYK_TOKEN=&amp;lt;SNYK_API_TOKEN&amp;gt; snyk test&#xA;&#xA;# Or using a Snyk auth command&#xA;snyk auth &amp;lt;SNYK_API_TOKEN&amp;gt;&#xA;snyk test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More flags and options to try&lt;/h2&gt; &#xA;&lt;p&gt;Here are some flags that you might find useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--severity-threshold=low|medium|high|critical&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Only report vulnerabilities of provided level or higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Prints results in JSON format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--all-projects&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Auto-detect all projects in working directory&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/help/cli-commands&#34;&gt;See all the available commands and options&lt;/a&gt; by running &lt;code&gt;--help&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk --help&#xA;# or get help for a specific command like&#xA;snyk iac --help&#xA;snyk code --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting support&lt;/h1&gt; &#xA;&lt;p&gt;If you need support using Snyk CLI, please &lt;a href=&#34;https://support.snyk.io&#34;&gt;contact support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We do not actively monitor GitHub Issues so any issues there may go unnoticed.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you are an external contributor, before working on any contributions, please first &lt;a href=&#34;https://support.snyk.io&#34;&gt;contact support&lt;/a&gt; to discuss the issue or feature request with us.&lt;/p&gt; &#xA;&lt;p&gt;If you are contributing to Snyk CLI, see &lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/CONTRIBUTING.md&#34;&gt;our contributing guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For information on how Snyk CLI is implemented, see &lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/help/_about-this-project/README.md&#34;&gt;our design decisions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository is a monorepo, also covering other projects and tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/packages/snyk-fix&#34;&gt;&lt;code&gt;@snyk/fix&lt;/code&gt;&lt;/a&gt;: npm package for &lt;code&gt;snyk fix&lt;/code&gt; libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/packages/snyk-protect&#34;&gt;&lt;code&gt;@snyk/protect&lt;/code&gt;&lt;/a&gt;: npm package for &lt;a href=&#34;https://www.npmjs.com/package/@snyk/protect&#34;&gt;&lt;code&gt;snyk-protect&lt;/code&gt;&lt;/a&gt; command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;For any security issues or concerns, please see &lt;a href=&#34;https://raw.githubusercontent.com/snyk/cli/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; file in this repository.&lt;/p&gt; &#xA;&lt;h1&gt;Notices&lt;/h1&gt; &#xA;&lt;h2&gt;Snyk API usage policy&lt;/h2&gt; &#xA;&lt;p&gt;The use of Snyk&#39;s API, whether through the use of the &#39;snyk&#39; npm package or otherwise, is subject to the &lt;a href=&#34;https://snyk.co/ucT6N&#34;&gt;Terms &amp;amp; Conditions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Made with 💜 by Snyk&lt;/p&gt;</summary>
  </entry>
</feed>