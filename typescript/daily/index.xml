<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-17T01:46:34Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FrigadeHQ/remote-storage</title>
    <updated>2024-01-17T01:46:34Z</updated>
    <id>tag:github.com,2024-01-17:/FrigadeHQ/remote-storage</id>
    <link href="https://github.com/FrigadeHQ/remote-storage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;remoteStorage is a simple library that combines the localStorage API with a remote server to persist data across browsers and devices.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/remote-storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/remote-storage&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FrigadeHQ/remote-storage/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/FrigadeHQ/remote-storage/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/remote-storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/remote-storage&#34; alt=&#34;npm license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-prettier-ff69b4.svg?sanitize=true&#34; alt=&#34;code style: prettier&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;strong&gt;remoteStorage&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; remoteStorage is a simple library that combines the localStorage API with a remote server to persist data across browsers and devices.&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://remote.storage&#34;&gt;Website&lt;/a&gt; &#xA; &lt;span&gt; ¬∑ &lt;/span&gt; &#xA; &lt;a href=&#34;https://codesandbox.io/p/sandbox/remote-storage-demo-35hgqz?file=%2Fsrc%2Findex.ts&#34;&gt;Live Demo&lt;/a&gt; &#xA; &lt;span&gt; ¬∑ &lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/FrigadeHQ/remote-storage&#34;&gt;Source&lt;/a&gt; &#xA; &lt;span&gt; ¬∑ &lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/FrigadeHQ/remote-storage&#34;&gt;Docs&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;Storing data in localStorage is useful, but it&#39;s not a good solution when you store data that needs to be shared across multiple devices or browsers.&lt;/p&gt; &#xA;&lt;p&gt;For instance, let&#39;s say you want to show a welcome modal to all new users that sign up for your product. If you use localStorage to track if a user has already seen this modal, your users will continue to get the experience over and over again every time they switch devices or browsers.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s where remoteStorage comes in. Using the same API as localStorage, remoteStorage allows you to easily read and write data on the fly while maintaining state across browsers and devices in order to provide a better user experience.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ú® Simple API (same as localStorage)&lt;/li&gt; &#xA; &lt;li&gt;üëå Works with all Javascript frameworks&lt;/li&gt; &#xA; &lt;li&gt;üì¶ Lightweight (~1 kB minified)&lt;/li&gt; &#xA; &lt;li&gt;üîì Open source server and client (MIT license)&lt;/li&gt; &#xA; &lt;li&gt;üÜì Free hosted community server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Install the library using your favorite package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install remote-storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the library and use it like you would localStorage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { RemoteStorage } from &#39;remote-storage&#39;&#xA;&#xA;const remoteStorage = new RemoteStorage({ userId: &#34;my-user-id&#34; })&#xA;&#xA;const hasSeenNewFeature = await remoteStorage.getItem(&#39;hasSeenNewFeature&#39;)&#xA;&#xA;if (!hasSeenNewFeature) {&#xA;  await remoteStorage.setItem(&#39;hasSeenNewFeature&#39;, true)&#xA;  // Highlight your new and exciting feature!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;User IDs&lt;/h3&gt; &#xA;&lt;p&gt;remoteStorage uses user IDs to identify users. A user ID is a string that uniquely identifies a user. It can be anything you want, but we recommend using a non-iterable UUID to prevent users from guessing other user IDs and accessing their data.&lt;/p&gt; &#xA;&lt;p&gt;The User ID is set when you create a new instance of remoteStorage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const remoteStorage = new RemoteStorage({&#xA;  userId: &#39;123e4567-e89b-12d3-a456-426614174000&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t provide a user ID, remoteStorage will generate a random UUID which will change every time the user visits your site. This is useful for testing, but defeats the purpose of remoteStorage since the data will not persist across devices or browsers.&lt;/p&gt; &#xA;&lt;h3&gt;Instance IDs&lt;/h3&gt; &#xA;&lt;p&gt;remoteStorage uses instance IDs to identify the application instance that is making the request. An instance ID is a string that uniquely identifies an application instance. Typically you would use the same instance ID for all requests from the same application instance.&lt;/p&gt; &#xA;&lt;p&gt;The instance ID is set when you create a new instance of remoteStorage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const remoteStorage = new RemoteStorage({&#xA;  userId: &#39;123e4567-e89b-12d3-a456-426614174000&#39;,&#xA;  instanceId: &#39;my-cool-app&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;We offer a free hosted community server at &lt;code&gt;https://api.remote.storage&lt;/code&gt; (the default behavior if no &lt;code&gt;serverAddress&lt;/code&gt; is provided). This hosted server should not be used for production apps, but it&#39;s great for testing and prototyping.&lt;/p&gt; &#xA;&lt;p&gt;To use a different server, simply pass the &lt;code&gt;serverAddress&lt;/code&gt; option when creating a new instance of remoteStorage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const remoteStorage = new RemoteStorage({&#xA;  serverAddress: &#39;https://api.remote.storage&#39;,&#xA;  userId: &#39;123e4567-e89b-12d3-a456-426614174000&#39;,&#xA;  instanceId: &#39;my-cool-app&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server can be spun up using Docker in a few minutes. See the &lt;a href=&#34;https://raw.githubusercontent.com/FrigadeHQ/remote-storage/main/apps/remote-storage-server/README.md&#34;&gt;server documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;What data should I store in remoteStorage?&lt;/h4&gt; &#xA;&lt;p&gt;remoteStorage should only be used for non-sensitive data. We recommend using it for things like user preferences, settings, and other non-sensitive data. Due to the nature of the public API, it&#39;s not a good fit for storing sensitive data like passwords or PII.&lt;/p&gt; &#xA;&lt;h4&gt;How is remoteStorage different from localStorage?&lt;/h4&gt; &#xA;&lt;p&gt;localStorage is a browser API that allows you to store data in the browser. The data is stored locally on the user&#39;s device and is not shared across devices or browsers. remoteStorage is a library that combines the localStorage API with a remote server to persist data across browsers and devices.&lt;/p&gt; &#xA;&lt;h4&gt;Can&#39;t anyone just guess a user ID and access someone else&#39;s data?&lt;/h4&gt; &#xA;&lt;p&gt;You can secure your calls to remote-storage by using a secret unique UUID generated with a package such as &lt;a href=&#34;https://www.npmjs.com/package/uuid&#34;&gt;uuid&lt;/a&gt; as your User ID. It is not recommended to use a sequential numeric ID or a user&#39;s email address as this makes it possible to easily guess other user IDs and access their data.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can create a simple wrapper/proxy API around remoteStorage that uses your own authentication method to verify the user&#39;s identity before allowing them to access the data. Then, you can pick a secure and secret Instance ID that is not publicly available to ensure that only your application can access the data.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aspen-cloud/triplit</title>
    <updated>2024-01-17T01:46:34Z</updated>
    <id>tag:github.com,2024-01-17:/aspen-cloud/triplit</id>
    <link href="https://github.com/aspen-cloud/triplit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A full-stack, syncing database that runs on both server and client. Pluggable storage (indexeddb, sqlite, durable objects), syncs over websockets, and works with your favorite framework (React, Solid, Vue, Svelte).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://www.triplit.dev/opengraph-image.png&#34; alt=&#34;Triplit banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.triplit.dev&#34;&gt;Triplit&lt;/a&gt; is an open-source database that syncs data between server and browser in real-time.&lt;/p&gt; &#xA;&lt;p&gt;Triplit provides a real-time syncing datastore that you can drop into your app as a Typescript package. Triplit handles storing your data on the server and intelligently syncs your queries to your clients. &lt;strong&gt;We call this type of system a ‚Äúfull stack database‚Äù&lt;/strong&gt;‚Äîyou can watch our presentation to the &lt;a href=&#34;https://localfirstweb.dev/&#34;&gt;Local First community&lt;/a&gt; on this new paradigm &lt;a href=&#34;https://www.youtube.com/watch?v=SEB-hF1F-UU&amp;amp;t=1465s&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Triplit brings together:&lt;/p&gt; &#xA;&lt;p&gt;üîÑ&amp;nbsp;&lt;strong&gt;Real-time sync&lt;/strong&gt; with incremental updates and conflict resolution at the property level&lt;/p&gt; &#xA;&lt;p&gt;üè† &lt;strong&gt;Local caching&lt;/strong&gt; powered by a full-fledged client-side database&lt;/p&gt; &#xA;&lt;p&gt;üíΩ &lt;strong&gt;Durable server-side storage&lt;/strong&gt; with an admin dashboard&lt;/p&gt; &#xA;&lt;p&gt;üîå &lt;strong&gt;Pluggable storage providers&lt;/strong&gt; like SQLite, IndexedDB, LevelDB, Memory, etc&lt;/p&gt; &#xA;&lt;p&gt;üòÉ &lt;strong&gt;Optimistic updates&lt;/strong&gt; to make every interaction feel fast&lt;/p&gt; &#xA;&lt;p&gt;üîó&amp;nbsp;&lt;strong&gt;Relational querying&lt;/strong&gt; for complex data models&lt;/p&gt; &#xA;&lt;p&gt;üõ´&amp;nbsp;&lt;strong&gt;Offline-mode&lt;/strong&gt; with automatic reconnection and consistency guarantees&lt;/p&gt; &#xA;&lt;p&gt;üîô &lt;strong&gt;Rollback and retry management&lt;/strong&gt; on failed updates&lt;/p&gt; &#xA;&lt;p&gt;üóÇÔ∏è&amp;nbsp;&lt;strong&gt;Schemas&lt;/strong&gt; for data safety and Typescript autocompletion&lt;/p&gt; &#xA;&lt;p&gt;üîê&amp;nbsp;&lt;strong&gt;Authorization&lt;/strong&gt; that&#39;s enforced on the server for both read and writes&lt;/p&gt; &#xA;&lt;p&gt;ü§ù&amp;nbsp;&lt;strong&gt;Collaboration/Multiplayer&lt;/strong&gt; powered by &lt;a href=&#34;https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type&#34;&gt;CRDTs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üèéÔ∏è &lt;strong&gt;Low latency&lt;/strong&gt; with minimal network traffic using delta patches&lt;/p&gt; &#xA;&lt;p&gt;üìù &lt;strong&gt;Simple API&lt;/strong&gt; for querying and mutating data in both vanilla Javascript and React&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp;&lt;strong&gt;Fully open-source!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Monorepo Overview&lt;/h1&gt; &#xA;&lt;p&gt;In &lt;code&gt;triplit/packages&lt;/code&gt; you can find the various projects that power Triplit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/db&#34;&gt;TriplitDB&lt;/a&gt; - Designed to run in any JS environment (browser, node, deno, React Native, etc) and provide expressive, fast, and live updating queries while maintaining consistency with many writers over a network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/client&#34;&gt;Client&lt;/a&gt; - Browser library to interact with local and remote TriplitDBs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/cli&#34;&gt;CLI&lt;/a&gt; - CLI tool with commands to scaffold a project, run the full-stack development environment, migrate a server, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/react&#34;&gt;React&lt;/a&gt; - React bindings for @triplit/client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/console&#34;&gt;Console&lt;/a&gt; - React app for viewing and mutating data in Triplit projects and managing their schemas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/server&#34;&gt;Server&lt;/a&gt; - Node server for syncing data between Triplit clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/server-core&#34;&gt;Server-core&lt;/a&gt; - Protocol agnostic library for building servers running Triplit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/docs&#34;&gt;Docs&lt;/a&gt; - Triplit docs, built with Nextera.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/types&#34;&gt;Types&lt;/a&gt; - Shared types for various Triplit projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aspen-cloud/triplit/tree/main/packages/ui&#34;&gt;UI&lt;/a&gt; - Shared UI components for Triplit frontend projects, built with &lt;a href=&#34;https://ui.shadcn.com/&#34;&gt;shadcn&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact us&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re interested in getting early access to Triplit Cloud (currently in developer preview), sign up &lt;a href=&#34;https://www.triplit.dev/waitlist&#34;&gt;here&lt;/a&gt; to join the waitlist.&lt;/p&gt; &#xA;&lt;p&gt;The best way to get in touch is to join our &lt;a href=&#34;https://discord.gg/q89sGWHqQ5&#34;&gt;Discord&lt;/a&gt;! We&#39;re here to answer questions, help developers get started with Triplit and preview new features.&lt;/p&gt; &#xA;&lt;p&gt;You can follow us on &lt;a href=&#34;https://twitter.com/triplit_dev&#34;&gt;Twitter/X&lt;/a&gt; to see our latest announcements.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>weijunext/smart-excel-ai</title>
    <updated>2024-01-17T01:46:34Z</updated>
    <id>tag:github.com,2024-01-17:/weijunext/smart-excel-ai</id>
    <link href="https://github.com/weijunext/smart-excel-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate the Excel formulas you need in seconds using ChatGPT.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;üåç &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weijunext/smart-excel-ai/main/README.md&#34;&gt;English&lt;/a&gt; ‚àô &lt;a href=&#34;https://raw.githubusercontent.com/weijunext/smart-excel-ai/main/README-zh.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://www.smartExcel.cc/&#34;&gt;SmartExcel.cc&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Generate the Excel formulas you need in seconds using AI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.smartExcel.cc/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weijunext/smart-excel-ai/main/public/screenshot.png&#34; alt=&#34;Generate the Excel formulas&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;This project uses the &lt;a href=&#34;https://openai.com/api/&#34;&gt;ChatGPT API&lt;/a&gt; and the &lt;a href=&#34;https://sdk.vercel.ai/docs&#34;&gt;Vercel AI SDK&lt;/a&gt; with streaming. It constructs a prompt based on the form and user input, sends it to the ChatGPT API with a Vercel Edge Function, then streams the response back to the application UI.&lt;/p&gt; &#xA;&lt;h2&gt;Tech Stack&lt;/h2&gt; &#xA;&lt;p&gt;SmartExcel is built on the following stack:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next.js ‚Äì Frontend/Backend&lt;/li&gt; &#xA; &lt;li&gt;TailwindCSS ‚Äì Styles&lt;/li&gt; &#xA; &lt;li&gt;Postgres and Prisma - database and storage(&lt;a href=&#34;https://weijunext.com/article/061d8cd9-fcf3-4d9e-bd33-e257bc4f9989&#34;&gt;How to use?&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Next-auth - Authentication(&lt;a href=&#34;https://weijunext.com/article/061d8cd9-fcf3-4d9e-bd33-e257bc4f9989&#34;&gt;How to use?&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ChatGPT - Generate the Excel formulas&lt;/li&gt; &#xA; &lt;li&gt;Upstash - Redis(&lt;a href=&#34;https://weijunext.com/article/6510121c-90da-4d20-85a1-72cbbdb3983b&#34;&gt;How to use?&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Lemon Squeezy - payments(&lt;a href=&#34;https://weijunext.com/article/integrate-lemonsqueezy-api&#34;&gt;How to use?&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Google Analytics - Analytics(&lt;a href=&#34;https://weijunext.com/article/979b9033-188c-4d88-bfff-6cf74d28420d&#34;&gt;How to use?&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Docker - Development Storage(&lt;a href=&#34;https://weijunext.com/article/b33a5545-fd26-47a6-8641-3c7467fb3910&#34;&gt;How to use?&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vercel - Hosting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are unfamiliar with some of the tech stacks, please click on the &#34;How to use&#34; links above to read my Chinese blog, or visit my another public repo - &lt;a href=&#34;https://github.com/weijunext/nextjs-learn-demos&#34;&gt;Learn Next.js Stack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;After cloning the repo, you need to copy the &lt;code&gt;.env.example&lt;/code&gt; file to create a &lt;code&gt;.env&lt;/code&gt; file and fill in the required fields.&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;https://upstash.com/&#34;&gt;Upstash&lt;/a&gt; and Create Redis application.&lt;/p&gt; &#xA;&lt;p&gt;Then write &lt;code&gt;UPSTASH_REDIS_REST_URL&lt;/code&gt; and &lt;code&gt;UPSTASH_REDIS_REST_TOKEN&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, run the application in the command line and it will be available at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;One-Click Deploy&lt;/h2&gt; &#xA;&lt;p&gt;Deploy the example using &lt;a href=&#34;https://vercel.com?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=vercel-examples&#34;&gt;Vercel&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https://github.com/weijunext/smart-excel-ai&amp;amp;project-name=&amp;amp;repository-name=smart-excel-ai&amp;amp;demo-title=SmartExcel&amp;amp;demo-description=Generate%20the%20Excel%20formulas%20you%20need%20in%20seconds%20using%20AI.&amp;amp;demo-url=https://smartexcel.cc&amp;amp;demo-image=https://smartexcel.cc/opengraph-image.png&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Me&lt;/h2&gt; &#xA;&lt;p&gt;I am a &lt;strong&gt;Front-End Engineer&lt;/strong&gt;, a &lt;strong&gt;Full-Stack Practitioner&lt;/strong&gt;, and an advocate of &lt;strong&gt;AI adventism&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://weijunext.com&#34;&gt;My Blog&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/weijunext&#34;&gt;Github&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://twitter.com/weijunext&#34;&gt;Twitter / X&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://medium.com/@weijunext&#34;&gt;Medium&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://juejin.cn/user/26044008768029&#34;&gt;ÊéòÈáë&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.zhihu.com/people/mo-mo-mo-89-12-11&#34;&gt;Áü•‰πé&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://weijunext.com/make-a-friend&#34;&gt;ÂæÆ‰ø°‰∫§ÊµÅÁæ§&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If this project is helpful to you, buy be a coffee.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/weijunextz&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=weijunext/smart-excel-ai&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>