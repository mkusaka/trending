<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-04T01:38:11Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ykhli/local-ai-stack</title>
    <updated>2023-11-04T01:38:11Z</updated>
    <id>tag:github.com,2023-11-04:/ykhli/local-ai-stack</id>
    <link href="https://github.com/ykhli/local-ai-stack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A starter kit to build *local-only* AI apps that cost $0 to run -- starting with document Q&amp;A. Written in Javascript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Local AI Stack&lt;/h1&gt; &#xA;&lt;p&gt;Make it possible for anyone to run a simple AI app that can do document Q&amp;amp;A &lt;strong&gt;100% locally&lt;/strong&gt; without having to swipe a credit card üí≥. Based on &lt;a href=&#34;https://github.com/a16z-infra/ai-getting-started&#34;&gt;AI Starter Kit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screen Shot 2023-10-30 at 10 20 17 PM&#34; src=&#34;https://github.com/ykhli/local-ai-stack/assets/3489963/b4a7eddb-e655-45c3-93d4-fbb26e94a96c&#34;&gt; &#xA;&lt;p&gt;Have questions? Join &lt;a href=&#34;https://discord.gg/TsWCNVvRP5&#34;&gt;AI Stack devs&lt;/a&gt; and find me in #local-ai-stack channel.&lt;/p&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü¶ô Inference: &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;Ollama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíª VectorDB: &lt;a href=&#34;https://supabase.com/docs/guides/database/extensions/pgvector&#34;&gt;Supabase pgvector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üß† LLM Orchestration: &lt;a href=&#34;https://js.langchain.com/docs/&#34;&gt;Langchain.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üñºÔ∏è App logic: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;1. Fork and Clone repo&lt;/h3&gt; &#xA;&lt;p&gt;Fork the repo to your Github account, then run the following command to clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:[YOUR_GITHUB_ACCOUNT_NAME]/local-ai-stack.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd local-ai-stack&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Install Ollama&lt;/h3&gt; &#xA;&lt;p&gt;Instructions are &lt;a href=&#34;https://github.com/jmorganca/ollama#macos&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. Run Supabase locally&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Supabase CLI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install supabase/tap/supabase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start Supabase&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Make sure you are under &lt;code&gt;/local-ai-stack&lt;/code&gt; directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;supabase start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Fill in secrets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.local.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then get &lt;code&gt;SUPABASE_PRIVATE_KEY&lt;/code&gt; by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;supabase status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;anon key&lt;/code&gt; and save it as &lt;code&gt;SUPABASE_PRIVATE_KEY&lt;/code&gt; in &lt;code&gt;.env.local&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6. Generate embeddings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node src/scripts/indexBlogLocal.mjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script takes in all files from /blogs, generate embeddings using &lt;a href=&#34;https://github.com/xenova/transformers.js&#34;&gt;transformers.js&lt;/a&gt;, and store embeddings as well as metadata in Supabase.&lt;/p&gt; &#xA;&lt;h3&gt;7. Run app locally&lt;/h3&gt; &#xA;&lt;p&gt;Now you are ready to test out the app locally! To do this, simply run &lt;code&gt;npm run dev&lt;/code&gt; under the project root and visit &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;8. Deploy the app&lt;/h3&gt; &#xA;&lt;p&gt;If you want to take the local-only app to the next level, feel free to follow instructions on &lt;a href=&#34;https://github.com/a16z-infra/ai-getting-started&#34;&gt;AI Starter Kit&lt;/a&gt; for using Clerk, Pinecone/Supabase, OpenAI, Replicate and other cloud-based vendors.&lt;/p&gt; &#xA;&lt;h2&gt;Refs &amp;amp; Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sdk.vercel.ai/docs&#34;&gt;AI SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.langui.dev/components&#34;&gt;LangUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/a16z-infra/ai-getting-started&#34;&gt;a16z AI starter kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pinecone&#34;&gt;https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pinecone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/models/llms/integrations#replicate&#34;&gt;https://js.langchain.com/docs/modules/models/llms/integrations#replicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/chains/index_related_chains/retrieval_qa&#34;&gt;https://js.langchain.com/docs/modules/chains/index_related_chains/retrieval_qa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xyflow/xyflow</title>
    <updated>2023-11-04T01:38:11Z</updated>
    <id>tag:github.com,2023-11-04:/xyflow/xyflow</id>
    <link href="https://github.com/xyflow/xyflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Flow |¬†Svelte Flow - Powerful open source libraries for building node-based UIs with React or Svelte. Ready out-of-the-box and infinitely customizable&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2857535/279643999-ffda9f91-6b6d-447d-82be-fcbd6103edb6.svg#gh-light-mode-only&#34; alt=&#34;xyflow-header&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2857535/279644026-a01c231c-6c6e-4b41-96e0-a85c75c9acee.svg#gh-dark-mode-only&#34; alt=&#34;xyflow-header-dark&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/wbkd/react-flow?color=%23ff0072&#34; alt=&#34;GitHub License MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dt/reactflow?color=%23FF0072&amp;amp;label=React%20Flow%20downloads&#34; alt=&#34;npm downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dt/@xyflow/svelte?color=%23FF3E00&amp;amp;label=Svelte%20Flow%20downloads&#34; alt=&#34;npm downloads&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Powerful open source libraries for building node-based UIs with React or Svelte. Ready out-of-the-box and infinitely customizable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://reactflow.dev/&#34;&gt;React Flow&lt;/a&gt; ¬∑ &lt;a href=&#34;https://svelteflow.dev/&#34;&gt;Svelte Flow&lt;/a&gt; ¬∑ &lt;a href=&#34;https://reactflow.dev/pro&#34;&gt;React Flow Pro&lt;/a&gt; ¬∑ &lt;a href=&#34;https://discord.gg/Bqt6xrs&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;The xyflow mono repo&lt;/h2&gt; &#xA;&lt;p&gt;The xyflow repository is the home of four packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React Flow v11 &lt;code&gt;reactflow&lt;/code&gt; &lt;a href=&#34;https://github.com/xyflow/xyflow/tree/v11&#34;&gt;v11 branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React Flow v12 (not published yet) &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/packages/react&#34;&gt;packages/react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Svelte Flow &lt;code&gt;@xyflow/svelte&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/packages/svelte&#34;&gt;packages/svelte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shared helper library &lt;code&gt;@xyflow/system&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/packages/system&#34;&gt;packages/system&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We just moved repositories&lt;/strong&gt; from the @wbkd org to this one. React Flow v11 will remain on the &lt;a href=&#34;https://github.com/xyflow/xyflow/tree/v11&#34;&gt;v11 branch&lt;/a&gt;. When we have a stable v12, the package name of React Flow will change from &lt;code&gt;reactflow&lt;/code&gt; to &lt;code&gt;@xyflow/react&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commercial Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Are you using React Flow or Svelte Flow for a personal project?&lt;/strong&gt; Great! No sponsorship needed, you can support us by reporting any bugs you find, sending us screenshots of your projects, and starring us on Github üåü&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Are you using React Flow or Svelte Flow at your organization and making money from it?&lt;/strong&gt; Awesome! We rely on your support to keep our libraries developed and maintained under an MIT License, just how we like it. For React Flow you can do that on the &lt;a href=&#34;https://reactflow.dev/pro&#34;&gt;React Flow Pro website&lt;/a&gt; and for both of our libraries you can do it through &lt;a href=&#34;https://github.com/sponsors/xyflow&#34;&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The best way to get started is to check out the &lt;a href=&#34;https://reactflow.dev/learn&#34;&gt;React Flow&lt;/a&gt; or &lt;a href=&#34;https://svelteflow.dev/learn&#34;&gt;Svelte Flow&lt;/a&gt; learn section. However if you want to get a sneak peek of how to install the and use the libraries you can see it here:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;React Flow&lt;/strong&gt; basic usage&lt;/summary&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install reactflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Basic usage&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { useCallback } from &#39;react&#39;;&#xA;import ReactFlow, {&#xA;MiniMap,&#xA;Controls,&#xA;Background,&#xA;useNodesState,&#xA;useEdgesState,&#xA;addEdge,&#xA;} from &#39;reactflow&#39;;&#xA;&#xA;import &#39;reactflow/dist/style.css&#39;;&#xA;&#xA;const initialNodes = [&#xA;{ id: &#39;1&#39;, position: { x: 0, y: 0 }, data: { label: &#39;1&#39; } },&#xA;{ id: &#39;2&#39;, position: { x: 0, y: 100 }, data: { label: &#39;2&#39; } },&#xA;];&#xA;&#xA;const initialEdges = [{ id: &#39;e1-2&#39;, source: &#39;1&#39;, target: &#39;2&#39; }];&#xA;&#xA;function Flow() {&#xA;const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);&#xA;const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);&#xA;&#xA;const onConnect = useCallback((params) =&amp;gt; setEdges((eds) =&amp;gt; addEdge(params, eds)), [setEdges]);&#xA;&#xA;return (&#xA;  &amp;lt;ReactFlow&#xA;    nodes={nodes}&#xA;    edges={edges}&#xA;    onNodesChange={onNodesChange}&#xA;    onEdgesChange={onEdgesChange}&#xA;    onConnect={onConnect}&#xA;  &amp;gt;&#xA;    &amp;lt;MiniMap /&amp;gt;&#xA;    &amp;lt;Controls /&amp;gt;&#xA;    &amp;lt;Background /&amp;gt;&#xA;  &amp;lt;/ReactFlow&amp;gt;&#xA;);&#xA;}&#xA;&#xA;export default Flow;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Svelte Flow&lt;/strong&gt; basic usage&lt;/summary&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @xyflow/svelte&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Basic usage&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-svelte&#34;&gt;&amp;lt;script lang=&#34;ts&#34;&amp;gt;&#xA;import { writable } from &#39;svelte/store&#39;;&#xA;import {&#xA;  SvelteFlow,&#xA;  Controls,&#xA;  Background,&#xA;  BackgroundVariant,&#xA;  MiniMap,&#xA;} from &#39;@xyflow/svelte&#39;;&#xA;&#xA;import &#39;@xyflow/svelte/dist/style.css&#39;&#xA;&#xA;const nodes = writable([&#xA;  {&#xA;    id: &#39;1&#39;,&#xA;    type: &#39;input&#39;,&#xA;    data: { label: &#39;Input Node&#39; },&#xA;    position: { x: 0, y: 0 }&#xA;  },&#xA;  {&#xA;    id: &#39;2&#39;,&#xA;    type: &#39;custom&#39;,&#xA;    data: { label: &#39;Node&#39; },&#xA;    position: { x: 0, y: 150 }&#xA;  }&#xA;]);&#xA;&#xA;const edges = writable([&#xA;  {&#xA;    id: &#39;1-2&#39;,&#xA;    type: &#39;default&#39;,&#xA;    source: &#39;1&#39;,&#xA;    target: &#39;2&#39;,&#xA;    label: &#39;Edge Text&#39;&#xA;  }&#xA;]);&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;SvelteFlow&#xA;{nodes}&#xA;{edges}&#xA;fitView&#xA;on:nodeclick={(event) =&amp;gt; console.log(&#39;on node click&#39;, event)}&#xA;&amp;gt;&#xA;&amp;lt;Controls /&amp;gt;&#xA;&amp;lt;Background variant={BackgroundVariant.Dots} /&amp;gt;&#xA;&amp;lt;MiniMap /&amp;gt;&#xA;&amp;lt;/SvelteFlow&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;The xyflow team&lt;/h2&gt; &#xA;&lt;p&gt;React Flow and Svelte Flow are maintained by the team behind &lt;a href=&#34;https://xyflow.com&#34;&gt;xyflow&lt;/a&gt;. If you need help or want to talk to us about a collaboration, reach out through our&amp;nbsp;&lt;a href=&#34;https://xyflow.com/contact&#34;&gt;contact form&lt;/a&gt;&amp;nbsp;or by joining our &lt;a href=&#34;https://discord.gg/Bqt6xrs&#34;&gt;Discord Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Christopher ‚Ä¢&amp;nbsp;&lt;a href=&#34;https://twitter.com/chrtze&#34;&gt;Twitter&lt;/a&gt;&amp;nbsp;‚Ä¢&amp;nbsp;&lt;a href=&#34;https://github.com/chrtze&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hayleigh ‚Ä¢&amp;nbsp;&lt;a href=&#34;https://twitter.com/hayleighdotdev&#34;&gt;Twitter&lt;/a&gt;&amp;nbsp;‚Ä¢&amp;nbsp;&lt;a href=&#34;https://github.com/hayleigh-dot-dev&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John ‚Ä¢&amp;nbsp;&lt;a href=&#34;https://johnrobbdesign.com/&#34;&gt;Website&lt;/a&gt;&amp;nbsp;‚Ä¢&amp;nbsp;&lt;a href=&#34;https://mastodon.social/@johnrobbjr&#34;&gt;Mastodon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Moritz ‚Ä¢&amp;nbsp;&lt;a href=&#34;https://twitter.com/moklick&#34;&gt;Twitter&lt;/a&gt;&amp;nbsp;‚Ä¢&amp;nbsp;&lt;a href=&#34;https://github.com/moklick&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Peter ‚Ä¢&amp;nbsp;&lt;a href=&#34;https://github.com/peterkogo&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;React Flow and Svelte Flow are &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gristlabs/grist-core</title>
    <updated>2023-11-04T01:38:11Z</updated>
    <id>tag:github.com,2023-11-04:/gristlabs/grist-core</id>
    <link href="https://github.com/gristlabs/grist-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Grist is the evolution of spreadsheets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grist&lt;/h1&gt; &#xA;&lt;p&gt;Grist is a modern relational spreadsheet. It combines the flexibility of a spreadsheet with the robustness of a database to organize your data and make you more productive.&lt;/p&gt; &#xA;&lt;p&gt;This repository, &lt;code&gt;grist-core&lt;/code&gt;, is the heart of Grist, and has what you need to run a powerful spreadsheet hosting server. If you wish to view and edit spreadsheets stored locally, another option is to use the &lt;a href=&#34;https://github.com/gristlabs/grist-electron&#34;&gt;&lt;code&gt;grist-electron&lt;/code&gt;&lt;/a&gt; desktop app for Linux, Mac, and Windows. And to show Grist spreadsheets on a website without any special back-end support, your options include &lt;a href=&#34;https://github.com/gristlabs/grist-static&#34;&gt;&lt;code&gt;grist-static&lt;/code&gt;&lt;/a&gt;, a fully in-browser build of Grist. The &lt;code&gt;grist-core&lt;/code&gt; repository is the basis for all these options, and for the hosted spreadsheet services offered by &lt;a href=&#34;https://getgrist.com&#34;&gt;&lt;code&gt;Grist Labs&lt;/code&gt;&lt;/a&gt;, an NYC-based company üá∫üá∏ that is the main developer of Grist, and by &lt;a href=&#34;https://donnees.incubateur.anct.gouv.fr/toolbox/grist&#34;&gt;&lt;code&gt;ANCT Donn√©es et Territoires&lt;/code&gt;&lt;/a&gt;, a French government agency üá´üá∑ whose developers have made many contributions to the code-base. The &lt;code&gt;grist-core&lt;/code&gt;, &lt;code&gt;grist-electron&lt;/code&gt;, and &lt;code&gt;grist-static&lt;/code&gt; repositories are all open-source (Apache License, Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/118367/151245587-892e50a6-41f5-4b74-9786-fe3566f6b1fb.mp4&#34;&gt;https://user-images.githubusercontent.com/118367/151245587-892e50a6-41f5-4b74-9786-fe3566f6b1fb.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Grist is a hybrid database/spreadsheet, meaning that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Columns work like they do in databases. They are named, and hold one kind of data.&lt;/li&gt; &#xA; &lt;li&gt;Columns can be filled by formula, spreadsheet-style, with automatic updates when referenced cells change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This difference can confuse people coming directly from Excel or Google Sheets. Give it a chance! If you are coming from Airtable, you&#39;ll find the model familiar though (and there&#39;s a &lt;a href=&#34;https://www.getgrist.com/blog/grist-v-airtable/&#34;&gt;Grist vs Airtable&lt;/a&gt; article that might interest you).&lt;/p&gt; &#xA;&lt;p&gt;Here are some specific feature highlights of Grist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python formulas. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Full &lt;a href=&#34;https://support.getgrist.com/formulas/#python&#34;&gt;Python syntax is supported&lt;/a&gt;, and the standard library.&lt;/li&gt; &#xA;   &lt;li&gt;Many &lt;a href=&#34;https://support.getgrist.com/functions/&#34;&gt;Excel functions&lt;/a&gt; also available.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A portable, self-contained format. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Based on SQLite, the most widely deployed database engine.&lt;/li&gt; &#xA;   &lt;li&gt;Any tool that can read SQLite can read numeric and text data from a Grist file.&lt;/li&gt; &#xA;   &lt;li&gt;Great format for &lt;a href=&#34;https://support.getgrist.com/exports/#backing-up-an-entire-document&#34;&gt;backups&lt;/a&gt; that you can be confident you can restore in full.&lt;/li&gt; &#xA;   &lt;li&gt;Great format for moving between different hosts.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can be displayed on a static website with &lt;a href=&#34;https://github.com/gristlabs/grist-static&#34;&gt;grist-static&lt;/a&gt;, no special server needed.&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s a self-contained desktop app available for viewing and editing: &lt;a href=&#34;https://github.com/gristlabs/grist-electron&#34;&gt;grist-electron&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convenient editing and formatting features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Choices and &lt;a href=&#34;https://support.getgrist.com/col-types/#choice-list-columns&#34;&gt;choice lists&lt;/a&gt;, for adding colorful tags to records without fuss.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://support.getgrist.com/col-refs/#creating-a-new-reference-list-column&#34;&gt;References&lt;/a&gt; and reference lists, for cross-referencing records in other tables.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://support.getgrist.com/col-types/#attachment-columns&#34;&gt;Attachments&lt;/a&gt;, to include media or document files in records.&lt;/li&gt; &#xA;   &lt;li&gt;Dates and times, toggles, and special numerics such as currency all have specialized editors and formatting options.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://support.getgrist.com/conditional-formatting/&#34;&gt;Conditional Formatting&lt;/a&gt;, letting you control the style of cells with formulas, to draw attention to important information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Great for dashboards, visualizations, and data entry. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://support.getgrist.com/widget-chart/&#34;&gt;Charts&lt;/a&gt; for visualization.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://support.getgrist.com/summary-tables/&#34;&gt;Summary tables&lt;/a&gt; for summing and counting across groups.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://support.getgrist.com/linking-widgets/&#34;&gt;Widget linking&lt;/a&gt; streamlines filtering and editing data. Grist has a unique approach to visualization, where you can lay out and link distinct widgets to show together, without cramming mixed material into a table.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://support.getgrist.com/search-sort-filter/#filter-buttons&#34;&gt;Filter bar&lt;/a&gt; is great for quick slicing and dicing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.getgrist.com/imports/#updating-existing-records&#34;&gt;Incremental imports&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;So you can import a CSV of the last three months activity from your bank...&lt;/li&gt; &#xA;   &lt;li&gt;... and import new activity a month later without fuss or duplicates.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integrations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;a href=&#34;https://support.getgrist.com/api/&#34;&gt;REST API&lt;/a&gt;, &lt;a href=&#34;https://support.getgrist.com/integrators/#integrations-via-zapier&#34;&gt;Zapier actions/triggers&lt;/a&gt;, and support from similar &lt;a href=&#34;https://support.getgrist.com/integrators/&#34;&gt;integrators&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Import/export to Google drive, Excel format, CSV.&lt;/li&gt; &#xA;   &lt;li&gt;Can link data with custom widgets hosted externally.&lt;/li&gt; &#xA;   &lt;li&gt;You can set up outgoing webhooks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://templates.getgrist.com/&#34;&gt;Many templates&lt;/a&gt; to get you started, from investment research to organizing treasure hunts.&lt;/li&gt; &#xA; &lt;li&gt;Access control options. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(You&#39;ll need SSO logins set up to make use of these options; &lt;a href=&#34;https://github.com/gristlabs/grist-omnibus&#34;&gt;grist-omnibus&lt;/a&gt; has a prepackaged solution if configuring this feels daunting)&lt;/li&gt; &#xA;   &lt;li&gt;Share &lt;a href=&#34;https://support.getgrist.com/sharing/&#34;&gt;individual documents&lt;/a&gt;, or workspaces, or &lt;a href=&#34;https://support.getgrist.com/team-sharing/&#34;&gt;team sites&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Control access to &lt;a href=&#34;https://support.getgrist.com/access-rules/&#34;&gt;individual rows, columns, and tables&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Control access based on cell values and user attributes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Can be self-maintained. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Useful for intranet operation and specific compliance requirements.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sandboxing options for untrusted documents. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Linux or with docker, you can enable &lt;a href=&#34;https://github.com/google/gvisor&#34;&gt;gVisor&lt;/a&gt; sandboxing at the individual document level.&lt;/li&gt; &#xA;   &lt;li&gt;On OSX, you can use native sandboxing.&lt;/li&gt; &#xA;   &lt;li&gt;On any OS, including Windows, you can use a wasm-based sandbox.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Translated to many languages.&lt;/li&gt; &#xA; &lt;li&gt;Support for an AI Formula Assistant (using OpenAI gpt-3.5-turbo or comparable models).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;F1&lt;/code&gt; key brings up some quick help. This used to go without saying. In general Grist has good keyboard support.&lt;/li&gt; &#xA; &lt;li&gt;We post progress on &lt;a href=&#34;https://twitter.com/getgrist&#34;&gt;ùïè or Twitter or whatever&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are curious about where Grist is going heading, see &lt;a href=&#34;https://github.com/gristlabs/grist-core/projects/1&#34;&gt;our roadmap&lt;/a&gt;, drop a question in &lt;a href=&#34;https://community.getgrist.com&#34;&gt;our forum&lt;/a&gt;, or browse &lt;a href=&#34;https://support.getgrist.com&#34;&gt;our extensive documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using Grist&lt;/h2&gt; &#xA;&lt;p&gt;If you just want a quick demo of Grist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can try Grist out at the hosted service run by Grist Labs at &lt;a href=&#34;https://docs.getgrist.com&#34;&gt;docs.getgrist.com&lt;/a&gt; (no registration needed).&lt;/li&gt; &#xA; &lt;li&gt;Or you can see an experimental fully in-browser build of Grist at &lt;a href=&#34;https://gristlabs.github.io/grist-static/&#34;&gt;gristlabs.github.io/grist-static&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Or you can download Grist as a desktop app from &lt;a href=&#34;https://github.com/gristlabs/grist-electron&#34;&gt;github.com/gristlabs/grist-electron&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get &lt;code&gt;grist-core&lt;/code&gt; running on your computer with &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker&lt;/a&gt;, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull gristlabs/grist&#xA;docker run -p 8484:8484 -it gristlabs/grist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;code&gt;http://localhost:8484&lt;/code&gt; in your browser. You&#39;ll be able to create, edit, import, and export documents. To preserve your work across docker runs, share a directory as &lt;code&gt;/persist&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -p 8484:8484 -v $PWD/persist:/persist -it gristlabs/grist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get templates at &lt;a href=&#34;https://templates.getgrist.com&#34;&gt;templates.getgrist.com&lt;/a&gt; for payroll, inventory management, invoicing, D&amp;amp;D encounter tracking, and a lot more, or use any document you&#39;ve created on &lt;a href=&#34;https://docs.getgrist.com&#34;&gt;docs.getgrist.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to change the port Grist runs on, set a &lt;code&gt;PORT&lt;/code&gt; variable, don&#39;t just change the port mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --env PORT=9999 -p 9999:9999 -v $PWD/persist:/persist -it gristlabs/grist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable gVisor sandboxing, set &lt;code&gt;--env GRIST_SANDBOX_FLAVOR=gvisor&lt;/code&gt;. This should work with default docker settings, but may not work in all environments.&lt;/p&gt; &#xA;&lt;p&gt;You can find a lot more about configuring Grist, setting up authentication, and running it on a public server in our &lt;a href=&#34;https://support.getgrist.com/self-managed/&#34;&gt;Self-Managed Grist&lt;/a&gt; handbook.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;To build Grist from source, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn install&#xA;yarn run build:prod&#xA;yarn run install:python&#xA;yarn start&#xA;# Grist will be available at http://localhost:8484/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grist formulas in documents will be run using Python executed directly on your machine. You can configure sandboxing using a &lt;code&gt;GRIST_SANDBOX_FLAVOR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On OSX, &lt;code&gt;export GRIST_SANDBOX_FLAVOR=macSandboxExec&lt;/code&gt; uses the native &lt;code&gt;sandbox-exec&lt;/code&gt; command for sandboxing.&lt;/li&gt; &#xA; &lt;li&gt;On Linux with &lt;a href=&#34;https://github.com/google/gvisor&#34;&gt;gVisor&#39;s runsc&lt;/a&gt; installed, &lt;code&gt;export GRIST_SANDBOX_FLAVOR=gvisor&lt;/code&gt; is an option.&lt;/li&gt; &#xA; &lt;li&gt;On any OS including Windows, &lt;code&gt;export GRIST_SANDBOX_FLAVOR=pyodide&lt;/code&gt; is available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These sandboxing methods have been written for our own use at Grist Labs and may need tweaking to work in your own environment - pull requests very welcome here!&lt;/p&gt; &#xA;&lt;h2&gt;Logins&lt;/h2&gt; &#xA;&lt;p&gt;Like git, Grist has features to track document revision history. So for full operation, Grist expects to know who the user modifying a document is. Until it does, it operates in a limited anonymous mode. To get you going, the docker image is configured so that when you click on the &#34;sign in&#34; button Grist will attribute your work to &lt;code&gt;you@example.com&lt;/code&gt;. Change this by setting &lt;code&gt;GRIST_DEFAULT_EMAIL&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --env GRIST_DEFAULT_EMAIL=my@email -p 8484:8484 -v $PWD/persist:/persist -it gristlabs/grist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change your name in &lt;code&gt;Profile Settings&lt;/code&gt; in the &lt;a href=&#34;https://support.getgrist.com/glossary/#user-menu&#34;&gt;User Menu&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For multi-user operation, or if you wish to access Grist across the public internet, you&#39;ll want to connect it to your own Single Sign-On service. There are a lot of ways to do this, including &lt;a href=&#34;https://support.getgrist.com/self-managed/#how-do-i-set-up-authentication&#34;&gt;SAML and forward authentication&lt;/a&gt;. Grist has been tested with &lt;a href=&#34;https://goauthentik.io/&#34;&gt;Authentik&lt;/a&gt;, &lt;a href=&#34;https://auth0.com/&#34;&gt;Auth0&lt;/a&gt;, and Google/Microsoft sign-ins via &lt;a href=&#34;https://dexidp.io/&#34;&gt;Dex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://hosted.weblate.org/engage/grist/&#34;&gt;Weblate&lt;/a&gt; to manage translations. Thanks to everyone who is pitching in. Thanks especially to the ANCT developers who did the hard work of making a good chunk of the application localizable. Merci bien!&lt;/p&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/grist/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widgets/grist/-/open-graph.png&#34; alt=&#34;Translation status&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Why free and open source software&lt;/h2&gt; &#xA;&lt;p&gt;This repository, &lt;a href=&#34;https://github.com/gristlabs/grist-core&#34;&gt;grist-core&lt;/a&gt;, is maintained by Grist Labs. Our flagship product available at &lt;a href=&#34;https://www.getgrist.com&#34;&gt;getgrist.com&lt;/a&gt; is built from the code you see here, combined with business-specific software designed to scale it to many users, handle billing, etc.&lt;/p&gt; &#xA;&lt;p&gt;Grist Labs is an open-core company. We offer Grist hosting as a service, with free and paid plans. We also develop and sell features related to Grist using a proprietary license, targeted at the needs of enterprises with large self-managed installations. We see data portability and autonomy as a key value Grist can bring to our users, and &lt;code&gt;grist-core&lt;/code&gt; as an essential means to deliver that. We are committed to maintaining and improving the &lt;code&gt;grist-core&lt;/code&gt; codebase, and to be thoughtful about how proprietary offerings impact data portability and autonomy.&lt;/p&gt; &#xA;&lt;p&gt;By opening its source code and offering an &lt;a href=&#34;https://opensource.org/&#34;&gt;OSI&lt;/a&gt;-approved free license, Grist benefits its users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer community.&lt;/strong&gt; The freedom to examine source code, make bug fixes, and develop new features is a big deal for a general-purpose spreadsheet-like product, where there is a very long tail of features vital to someone somewhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Increased trust.&lt;/strong&gt; Because anyone can examine the source code, ‚Äúsecurity by obscurity‚Äù is not an option. Vulnerabilities in the code can be found by others and reported before they cause damage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Independence.&lt;/strong&gt; Grist is available to you regardless of the fortunes of the Grist Labs business, since it is open source and can be self-hosted. Using our hosted solution is convenient, but you are not locked in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Price flexibility.&lt;/strong&gt; If you are low on funds but have time to invest, self-hosting is a great option to have. And DIY users may have the technical savvy and motivation to delve in and make improvements, which can benefit all users of Grist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensibility.&lt;/strong&gt; For developers, having the source open makes it easier to build extensions (such as the experimental &lt;a href=&#34;https://support.getgrist.com/widget-custom/&#34;&gt;Custom Widget&lt;/a&gt;). You can more easily include Grist in your pipeline. And if a feature is missing, you can just take the source code and build on top of it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.dotphoton.com/&#34;&gt; &lt;img width=&#34;11%&#34; src=&#34;https://user-images.githubusercontent.com/11277225/228914729-ae581352-b37a-4ca8-b220-b1463dd1ade0.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Reviews&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.producthunt.com/posts/grist-2&#34;&gt;Grist on ProductHunt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://appsumo.com/products/grist/&#34;&gt;Grist on AppSumo&lt;/a&gt; (life-time deal is sold out)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.capterra.com/p/232821/Grist/#reviews&#34;&gt;Capterra&lt;/a&gt;, &lt;a href=&#34;https://www.g2.com/products/grist/reviews&#34;&gt;G2&lt;/a&gt;, &lt;a href=&#34;https://www.trustradius.com/products/grist/reviews&#34;&gt;TrustRadius&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;Grist can be configured in many ways. Here are the main environment variables it is sensitive to:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ALLOWED_WEBHOOK_DOMAINS&lt;/td&gt; &#xA;   &lt;td&gt;comma-separated list of permitted domains to use in webhooks (e.g. webhook.site,zapier.com). You can set this to &lt;code&gt;*&lt;/code&gt; to allow all domains, but if doing so, we recommend using a carefully locked-down proxy (see &lt;code&gt;GRIST_HTTPS_PROXY&lt;/code&gt;) if you do not entirely trust users. Otherwise services on your internal network may become vulnerable to manipulation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APP_DOC_URL&lt;/td&gt; &#xA;   &lt;td&gt;doc worker url, set when starting an individual doc worker (other servers will find doc worker urls via redis)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APP_HOME_URL&lt;/td&gt; &#xA;   &lt;td&gt;url prefix for home api (home and doc servers need this)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APP_STATIC_URL&lt;/td&gt; &#xA;   &lt;td&gt;url prefix for static resources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APP_STATIC_INCLUDE_CUSTOM_CSS&lt;/td&gt; &#xA;   &lt;td&gt;set to &#34;true&#34; to include custom.css (from APP_STATIC_URL) in static pages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APP_UNTRUSTED_URL&lt;/td&gt; &#xA;   &lt;td&gt;URL at which to serve/expect plugin content.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_ADAPT_DOMAIN&lt;/td&gt; &#xA;   &lt;td&gt;set to &#34;true&#34; to support multiple base domains (careful, host header should be trustworthy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_ALLOWED_HOSTS&lt;/td&gt; &#xA;   &lt;td&gt;comma-separated list of permitted domains origin for requests (e.g. my.site,another.com)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_APP_ROOT&lt;/td&gt; &#xA;   &lt;td&gt;directory containing Grist sandbox and assets (specifically the sandbox and static subdirectories).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_BACKUP_DELAY_SECS&lt;/td&gt; &#xA;   &lt;td&gt;wait this long after a doc change before making a backup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_DATA_DIR&lt;/td&gt; &#xA;   &lt;td&gt;directory in which to store document caches.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_DEFAULT_EMAIL&lt;/td&gt; &#xA;   &lt;td&gt;if set, login as this user if no other credentials presented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_DEFAULT_PRODUCT&lt;/td&gt; &#xA;   &lt;td&gt;if set, this controls enabled features and limits of new sites. See names of PRODUCTS in Product.ts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_DEFAULT_LOCALE&lt;/td&gt; &#xA;   &lt;td&gt;Locale to use as fallback when Grist cannot honour the browser locale.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_DOMAIN&lt;/td&gt; &#xA;   &lt;td&gt;in hosted Grist, Grist is served from subdomains of this domain. Defaults to &#34;getgrist.com&#34;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_EXPERIMENTAL_PLUGINS&lt;/td&gt; &#xA;   &lt;td&gt;enables experimental plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_ENABLE_REQUEST_FUNCTION&lt;/td&gt; &#xA;   &lt;td&gt;enables the REQUEST function. This function performs HTTP requests in a similar way to &lt;code&gt;requests.request&lt;/code&gt;. This function presents a significant security risk, since it can let users call internal endpoints when Grist is available publicly. This function can also cause performance issues. Unset by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_HIDE_UI_ELEMENTS&lt;/td&gt; &#xA;   &lt;td&gt;comma-separated list of UI features to disable. Allowed names of parts: &lt;code&gt;helpCenter,billing,templates,multiSite,multiAccounts,sendToDrive,tutorials&lt;/code&gt;. If a part also exists in GRIST_UI_FEATURES, it will still be disabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_HOME_INCLUDE_STATIC&lt;/td&gt; &#xA;   &lt;td&gt;if set, home server also serves static resources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_HOST&lt;/td&gt; &#xA;   &lt;td&gt;hostname to use when listening on a port.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_HTTPS_PROXY&lt;/td&gt; &#xA;   &lt;td&gt;if set, use this proxy for webhook payload delivery.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_ID_PREFIX&lt;/td&gt; &#xA;   &lt;td&gt;for subdomains of form o-&lt;em&gt;, expect or produce o-${GRIST_ID_PREFIX}&lt;/em&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_IGNORE_SESSION&lt;/td&gt; &#xA;   &lt;td&gt;if set, Grist will not use a session for authentication.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_INST_DIR&lt;/td&gt; &#xA;   &lt;td&gt;path to Grist instance configuration files, for Grist server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_LIST_PUBLIC_SITES&lt;/td&gt; &#xA;   &lt;td&gt;if set to true, sites shared with the public will be listed for anonymous users. Defaults to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_MANAGED_WORKERS&lt;/td&gt; &#xA;   &lt;td&gt;if set, Grist can assume that if a url targeted at a doc worker returns a 404, that worker is gone&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_MAX_UPLOAD_ATTACHMENT_MB&lt;/td&gt; &#xA;   &lt;td&gt;max allowed size for attachments (0 or empty for unlimited).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_MAX_UPLOAD_IMPORT_MB&lt;/td&gt; &#xA;   &lt;td&gt;max allowed size for imports (except .grist files) (0 or empty for unlimited).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_OFFER_ALL_LANGUAGES&lt;/td&gt; &#xA;   &lt;td&gt;if set, all translated langauages are offered to the user (by default, only languages with a special &#39;good enough&#39; key set are offered to user).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_ORG_IN_PATH&lt;/td&gt; &#xA;   &lt;td&gt;if true, encode org in path rather than domain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_PAGE_TITLE_SUFFIX&lt;/td&gt; &#xA;   &lt;td&gt;a string to append to the end of the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; in HTML documents. Defaults to &lt;code&gt;&#34; - Grist&#34;&lt;/code&gt;. Set to &lt;code&gt;_blank&lt;/code&gt; for no suffix at all.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_PROXY_AUTH_HEADER&lt;/td&gt; &#xA;   &lt;td&gt;header which will be set by a (reverse) proxy webserver with an authorized users&#39; email. This can be used as an alternative to a SAML service. See also GRIST_FORWARD_AUTH_HEADER.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_ROUTER_URL&lt;/td&gt; &#xA;   &lt;td&gt;optional url for an api that allows servers to be (un)registered with a load balancer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SERVE_SAME_ORIGIN&lt;/td&gt; &#xA;   &lt;td&gt;set to &#34;true&#34; to access home server and doc workers on the same protocol-host-port as the top-level page, same as for custom domains (careful, host header should be trustworthy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SERVERS&lt;/td&gt; &#xA;   &lt;td&gt;the types of server to setup. Comma separated values which may contain &#34;home&#34;, &#34;docs&#34;, static&#34; and/or &#34;app&#34;. Defaults to &#34;home,docs,static&#34;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SESSION_COOKIE&lt;/td&gt; &#xA;   &lt;td&gt;if set, overrides the name of Grist&#39;s cookie&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SESSION_DOMAIN&lt;/td&gt; &#xA;   &lt;td&gt;if set, associates the cookie with the given domain - otherwise defaults to GRIST_DOMAIN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SESSION_SECRET&lt;/td&gt; &#xA;   &lt;td&gt;a key used to encode sessions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_ANON_PLAYGROUND&lt;/td&gt; &#xA;   &lt;td&gt;When set to &#39;false&#39; deny anonymous users access to the home page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_FORCE_LOGIN&lt;/td&gt; &#xA;   &lt;td&gt;Much like GRIST_ANON_PLAYGROUND but don&#39;t support anonymous access at all (features like sharing docs publicly requires authentication)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SINGLE_ORG&lt;/td&gt; &#xA;   &lt;td&gt;set to an org &#34;domain&#34; to pin client to that org&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TEMPLATE_ORG&lt;/td&gt; &#xA;   &lt;td&gt;set to an org &#34;domain&#34; to show public docs from that org&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_HELP_CENTER&lt;/td&gt; &#xA;   &lt;td&gt;set the help center link ref&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SUPPORT_ANON&lt;/td&gt; &#xA;   &lt;td&gt;if set to &#39;true&#39;, show UI for anonymous access (not shown by default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SUPPORT_EMAIL&lt;/td&gt; &#xA;   &lt;td&gt;if set, give a user with the specified email support powers. The main extra power is the ability to share sites, workspaces, and docs with all users in a listed way.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TELEMETRY_LEVEL&lt;/td&gt; &#xA;   &lt;td&gt;the telemetry level. Can be set to: &lt;code&gt;off&lt;/code&gt; (default), &lt;code&gt;limited&lt;/code&gt;, or &lt;code&gt;full&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_THROTTLE_CPU&lt;/td&gt; &#xA;   &lt;td&gt;if set, CPU throttling is enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TRUST_PLUGINS&lt;/td&gt; &#xA;   &lt;td&gt;if set, plugins are expect to be served from the same host as the rest of the Grist app, rather than from a distinct host. Ordinarily, plugins are served from a distinct host so that the cookies used by the Grist app are not automatically available to them. Enable this only if you understand the security implications.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_USER_ROOT&lt;/td&gt; &#xA;   &lt;td&gt;an extra path to look for plugins in - Grist will scan for plugins in &lt;code&gt;$GRIST_USER_ROOT/plugins&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_UI_FEATURES&lt;/td&gt; &#xA;   &lt;td&gt;comma-separated list of UI features to enable. Allowed names of parts: &lt;code&gt;helpCenter,billing,templates,multiSite,multiAccounts,sendToDrive,tutorials&lt;/code&gt;. If a part also exists in GRIST_HIDE_UI_ELEMENTS, it won&#39;t be enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_UNTRUSTED_PORT&lt;/td&gt; &#xA;   &lt;td&gt;if set, plugins will be served from the given port. This is an alternative to setting APP_UNTRUSTED_URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_WIDGET_LIST_URL&lt;/td&gt; &#xA;   &lt;td&gt;a url pointing to a widget manifest, by default &lt;code&gt;https://github.com/gristlabs/grist-widget/releases/download/latest/manifest.json&lt;/code&gt; is used&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;COOKIE_MAX_AGE&lt;/td&gt; &#xA;   &lt;td&gt;session cookie max age, defaults to 90 days; can be set to &#34;none&#34; to make it a session cookie&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HOME_PORT&lt;/td&gt; &#xA;   &lt;td&gt;port number to listen on for REST API server; if set to &#34;share&#34;, add API endpoints to regular grist port.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PORT&lt;/td&gt; &#xA;   &lt;td&gt;port number to listen on for Grist server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_URL&lt;/td&gt; &#xA;   &lt;td&gt;optional redis server for browser sessions and db query caching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SNAPSHOT_TIME_CAP&lt;/td&gt; &#xA;   &lt;td&gt;optional. Define the caps for tracking buckets. Usage: {&#34;hour&#34;: 25, &#34;day&#34;: 32, &#34;isoWeek&#34;: 12, &#34;month&#34;: 96, &#34;year&#34;: 1000}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SNAPSHOT_KEEP&lt;/td&gt; &#xA;   &lt;td&gt;optional. Number of recent snapshots to retain unconditionally for a document, regardless of when they were made&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_PROMCLIENT_PORT&lt;/td&gt; &#xA;   &lt;td&gt;optional. If set, serve the Prometheus metrics on the specified port number. ‚ö†Ô∏è Be sure to use a port which is not publicly exposed ‚ö†Ô∏è.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;AI Formula Assistant related variables (all optional):&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ASSISTANT_API_KEY&lt;/td&gt; &#xA;   &lt;td&gt;optional. An API key to pass when making requests to an external AI conversational endpoint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ASSISTANT_CHAT_COMPLETION_ENDPOINT&lt;/td&gt; &#xA;   &lt;td&gt;optional. A chat-completion style endpoint to call. Not needed if OpenAI is being used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ASSISTANT_MODEL&lt;/td&gt; &#xA;   &lt;td&gt;optional. If set, this string is passed along in calls to the AI conversational endpoint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ASSISTANT_LONGER_CONTEXT_MODEL&lt;/td&gt; &#xA;   &lt;td&gt;optional. If set, requests that fail because of a context length limitation will be retried with this model set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAI_API_KEY&lt;/td&gt; &#xA;   &lt;td&gt;optional. Synonym for ASSISTANT_API_KEY that assumes an OpenAI endpoint is being used. Sign up for an account on OpenAI and then generate a secret key &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;here&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;At the time of writing, the AI Assistant is known to function against OpenAI chat completion endpoints for gpt-3.5-turbo and gpt-4. It can also function against the chat completion endpoint provided by &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python&#34;&gt;llama-cpp-python&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Sandbox related variables:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SANDBOX_FLAVOR&lt;/td&gt; &#xA;   &lt;td&gt;can be pynbox, unsandboxed, docker, or macSandboxExec. If set, forces Grist to use the specified kind of sandbox.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_SANDBOX&lt;/td&gt; &#xA;   &lt;td&gt;a program or image name to run as the sandbox. See NSandbox.ts for nerdy details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PYTHON_VERSION&lt;/td&gt; &#xA;   &lt;td&gt;can be 2 or 3. If set, documents without an engine setting are assumed to use the specified version of python. Not all sandboxes support all versions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PYTHON_VERSION_ON_CREATION&lt;/td&gt; &#xA;   &lt;td&gt;can be 2 or 3. If set, newly created documents have an engine setting set to python2 or python3. Not all sandboxes support all versions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Forward authentication variables:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_FORWARD_AUTH_HEADER&lt;/td&gt; &#xA;   &lt;td&gt;if set, trust the specified header (e.g. &#34;x-forwarded-user&#34;) to contain authorized user emails, and enable &#34;forward auth&#34; logins.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_FORWARD_AUTH_LOGIN_PATH&lt;/td&gt; &#xA;   &lt;td&gt;if GRIST_FORWARD_AUTH_HEADER is set, Grist will listen at this path for logins. Defaults to &lt;code&gt;/auth/login&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_FORWARD_AUTH_LOGOUT_PATH&lt;/td&gt; &#xA;   &lt;td&gt;if GRIST_FORWARD_AUTH_HEADER is set, Grist will forward to this path when user logs out.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;When using forward authentication, you may wish to also set the following variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GRIST_FORCE_LOGIN=true to disable anonymous access.&lt;/li&gt; &#xA; &lt;li&gt;GRIST_IGNORE_SESSION=true to ignore any user identity information in a cookie. Only do this if you use forward authentication on all paths. You may not want to use forward authentication on all paths if it makes signing in required, and you are trying to permit anonymous access.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GRIST_FORWARD_AUTH_HEADER is similar to GRIST_PROXY_AUTH_HEADER, but enables a login system (assuming you have some forward authentication set up).&lt;/p&gt; &#xA;&lt;h4&gt;Plugins:&lt;/h4&gt; &#xA;&lt;p&gt;Grist has a plugin system, used internally. One useful thing you can do with it is include custom widgets in a build of Grist. Custom widgets are usually made available just by setting &lt;code&gt;GRIST_WIDGET_LIST_URL&lt;/code&gt;, but that has the downside of being an external dependency, which can be awkward for offline use or for archiving. Plugins offer an alternative.&lt;/p&gt; &#xA;&lt;p&gt;To &#34;bundle&#34; custom widgets as a plugin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a subdirectory of &lt;code&gt;plugins&lt;/code&gt;, e.g. &lt;code&gt;plugins/my-widgets&lt;/code&gt;. Alternatively, you can set the &lt;code&gt;GRIST_USER_ROOT&lt;/code&gt; environment variable to any path you want, and then create &lt;code&gt;plugins/my-widgets&lt;/code&gt; within that.&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;manifest.yml&lt;/code&gt; file in that subdirectory that looks like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;name: My Widgets&#xA;components:&#xA;  widgets: widgets.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;widgets.json&lt;/code&gt; file should be in the format produced by the &lt;a href=&#34;https://github.com/gristlabs/grist-widget&#34;&gt;grist-widget&lt;/a&gt; repository, and should be placed in the same directory as &lt;code&gt;manifest.yml&lt;/code&gt;. Any material in &lt;code&gt;plugins/my-widgets&lt;/code&gt; will be served by Grist, and relative URLs can be used in &lt;code&gt;widgets.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Once all files are in place, restart Grist. Your widgets should now be available in the custom widgets dropdown, along with any others from &lt;code&gt;GRIST_WIDGET_LIST_URL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you like, you can add multiple plugin subdirectories, with multiple sets of widgets, and they&#39;ll all be made available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Google Drive integrations:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOOGLE_CLIENT_ID&lt;/td&gt; &#xA;   &lt;td&gt;set to the Google Client Id to be used with Google API client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOOGLE_CLIENT_SECRET&lt;/td&gt; &#xA;   &lt;td&gt;set to the Google Client Secret to be used with Google API client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOOGLE_API_KEY&lt;/td&gt; &#xA;   &lt;td&gt;set to the Google API Key to be used with Google API client (accessing public files)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOOGLE_DRIVE_SCOPE&lt;/td&gt; &#xA;   &lt;td&gt;set to the scope requested for Google Drive integration (defaults to drive.file)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Database variables:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPEORM_DATABASE&lt;/td&gt; &#xA;   &lt;td&gt;database filename for sqlite or database name for other db types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPEORM_HOST&lt;/td&gt; &#xA;   &lt;td&gt;host for db&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPEORM_LOGGING&lt;/td&gt; &#xA;   &lt;td&gt;set to &#39;true&#39; to see all sql queries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPEORM_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;password to use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPEORM_PORT&lt;/td&gt; &#xA;   &lt;td&gt;port number for db if not the default for that db type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPEORM_TYPE&lt;/td&gt; &#xA;   &lt;td&gt;set to &#39;sqlite&#39; or &#39;postgres&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPEORM_USERNAME&lt;/td&gt; &#xA;   &lt;td&gt;username to connect as&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Testing:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TESTING_SOCKET&lt;/td&gt; &#xA;   &lt;td&gt;a socket used for out-of-channel communication during tests only.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TEST_HTTPS_OFFSET&lt;/td&gt; &#xA;   &lt;td&gt;if set, adds https ports at the specified offset. This is useful in testing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TEST_SSL_CERT&lt;/td&gt; &#xA;   &lt;td&gt;if set, contains filename of SSL certificate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TEST_SSL_KEY&lt;/td&gt; &#xA;   &lt;td&gt;if set, contains filename of SSL private key.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TEST_LOGIN&lt;/td&gt; &#xA;   &lt;td&gt;allow fake unauthenticated test logins (suitable for dev environment only).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRIST_TEST_ROUTER&lt;/td&gt; &#xA;   &lt;td&gt;if set, then the home server will serve a mock version of router api at /test/router&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GREP_TESTS&lt;/td&gt; &#xA;   &lt;td&gt;pattern for selecting specific tests to run (e.g. &lt;code&gt;env GREP_TESTS=ActionLog yarn test&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Tests are run automatically as part of CI when a PR is opened. However, it can be helpful to run tests locally before pushing your changes to GitHub. First, you&#39;ll want to make sure you&#39;ve installed all dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn install&#xA;yarn install:python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can run the main test suite like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Python tests may also be run locally. (Note: currently requires Python 3.9 - 3.11.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test:python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For running specific tests, you can specify a pattern with the &lt;code&gt;GREP_TESTS&lt;/code&gt; variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;env GREP_TESTS=ChoiceList yarn test&#xA;env GREP_TESTS=summary yarn test:python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository, &lt;code&gt;grist-core&lt;/code&gt;, is released under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;, which is an &lt;a href=&#34;https://opensource.org/&#34;&gt;OSI&lt;/a&gt;-approved free software license. See LICENSE.txt and NOTICE.txt for more information.&lt;/p&gt;</summary>
  </entry>
</feed>