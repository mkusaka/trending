<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-12T01:36:42Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>i-am-alice/3rd-devs</title>
    <updated>2025-05-12T01:36:42Z</updated>
    <id>tag:github.com,2025-05-12:/i-am-alice/3rd-devs</id>
    <link href="https://github.com/i-am-alice/3rd-devs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI_devs 3&lt;/h1&gt; &#xA;&lt;p&gt;Repozytorium zawiera przykłady z lekcji kursu AI_devs 3. Więcej informacji znajdziesz na &lt;a href=&#34;https://aidevs.pl&#34;&gt;aidevs.pl&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Wymagania&lt;/h2&gt; &#xA;&lt;p&gt;Wszystkie przykłady zostały napisane w JavaScript / TypeScript i większość z nich zawiera kod backendowy do którego uruchomienia potrzebny jest Node.js oraz Bun.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.sh&#34;&gt;Bun&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Upewnij się, że posiadasz najnowsze wersje Node.js oraz Bun zainstalowane na swoim komputerze.&lt;/p&gt; &#xA;&lt;h2&gt;Instalacja&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pobierz repozytorium:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:i-am-alice/3rd-devs.git&#xA;cd 3rd-devs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zainstaluj zależności:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Skopiuj plik &lt;code&gt;.env.example&lt;/code&gt; do &lt;code&gt;.env&lt;/code&gt; i wypełnij go kluczami API (na początek wystarczy klucz OpenAI).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Uruchom dostępne przykłady z pliku &lt;code&gt;package.json&lt;/code&gt;, według poniższej instrukcji.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Instalacja — DOCKER&lt;/h2&gt; &#xA;&lt;p&gt;Jeśli posiadasz w swoim systemie możliwość uruchamiania kontenerów Dockera (na Windows użyj np. WSL/WSL2), możesz wykorzystać&amp;nbsp;skrypt, który zbuduje i uruchomi dla Ciebie kontener ze środowiskiem gotowym do pracy.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Wejdź&amp;nbsp;do katalogu, w którym chcesz przetrzymywać pliki środowiska i wydaj następujące polecenia:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://env.ag3nts.org -o setup.sh&#xA;bash setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Powyższy skrypt NIE zmienia niczego w systemie. Wykonuje on następujące czynności:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;klonowanie repozytorium do katalogu &#34;3rd-devs&#34; (poza kontenerem, w aktualnym katalogu)&lt;/li&gt; &#xA;   &lt;li&gt;przygotowanie pliku Dockerfile&lt;/li&gt; &#xA;   &lt;li&gt;usunięcie starego obrazu Dockera o nazwie &#34;aidevs&#34; (jeśli istnieje)&lt;/li&gt; &#xA;   &lt;li&gt;uruchomienie procesu budowy obrazu Dockera&lt;/li&gt; &#xA;   &lt;li&gt;instalacja wymaganych paczek wewnątrz zdokeryzowanego środowiska&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Po pomyślnym zbudowaniu obrazu możesz uruchomić&amp;nbsp;go poleceniem (jeśli port 3000 masz zajęty, wybierz inny):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -p 3000:3000 --name aidevs -v ${PWD}/3rd-devs:/app aidevs3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pliki w katalogu &#34;3rd-devs&#34; możesz modyfikować&amp;nbsp;w dowolnym IDE. Będą one bezpośrednio widoczne wewnątrz kontenera&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Będąc już wewnątrz kontenera, skopiuj plik &lt;code&gt;.env.example&lt;/code&gt; do &lt;code&gt;.env&lt;/code&gt; i wypełnij go wymaganymi kluczami API (na początek wystarczy klucz OpenAI).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Twoje środowisko jest gotowe do pracy.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;S01E01&lt;/h2&gt; &#xA;&lt;h3&gt;Thread&lt;/h3&gt; &#xA;&lt;p&gt;Przykład przedstawia konwersację między użytkownikiem i asystentem, w której działa mechanizm podsumowania konwersacji.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun run thread&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja demo: &lt;code&gt;curl -X POST http://localhost:3000/api/demo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja chat: &lt;code&gt;curl -X POST http://localhost:3000/api/chat -H &#34;Content-Type: application/json&#34; -d &#39;{&#34;message&#34;: { &#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hi&#34;}}&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wywołanie powyższego endpointu uruchomi trzy niezależne zapytania do OpenAI, jednak w wiadomości systemowej zostanie przekazane podsumowanie poprzedniej interakcji, dzięki czemu model będzie miał możliwość odwołać się&amp;nbsp;do ich treści.&lt;/p&gt; &#xA;&lt;p&gt;W przykładzie uwzględniony jest także endpoint &lt;code&gt;/api/chat&lt;/code&gt; na który można przesłać obiekt { &#34;message&#34;: &#34;...&#34; } zawierający treść wiadomości do modelu. Wątek zostanie zresetowany &lt;strong&gt;dopiero po ponownym uruchomieniu serwera&lt;/strong&gt; (wciśnij CMD + C / Control + C i ponownie &lt;code&gt;bun run thread&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Use Search&lt;/h3&gt; &#xA;&lt;p&gt;UWAGA: przykład wymaga zainstalowania &lt;code&gt;promptfoo&lt;/code&gt; w przypadku którego prawdopodobnie musisz to zrobić poleceniem &lt;code&gt;npm install promptfoo&lt;/code&gt; ponieważ &lt;code&gt;bun install promptfoo&lt;/code&gt; nie działa poprawnie w każdej sytuacji.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie skryptu: &lt;code&gt;bun use_search&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rezultatem działania skryptu jest tablica zawierająca kilkanaście przykładowych testów dla promptu decydującego o tym, czy skorzystanie z wyszukiwarki jest potrzebne.&lt;/p&gt; &#xA;&lt;h3&gt;Pick domains&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie skryptu: &lt;code&gt;bun pick_domains&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rezultatem działania skryptu jest tablica zawierająca kilkanaście przykładowych testów dla promptu generującego zapytania do wyszukiwarki Internetowej, wskazując także odpowiednie domeny.&lt;/p&gt; &#xA;&lt;h3&gt;Rate&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie skryptu: &lt;code&gt;bun rate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rezultatem działania skryptu jest tablica zawierająca kilkanaście przykładowych testów dla promptu oceniającego, czy odpowiedź modelu zawiera odpowiednie informacje.&lt;/p&gt; &#xA;&lt;h3&gt;Websearch&lt;/h3&gt; &#xA;&lt;p&gt;Przykład ten korzysta z &lt;a href=&#34;https://www.firecrawl.dev&#34;&gt;Firecrawl&lt;/a&gt; do przeszukiwania Internetu oraz pobierania treści stron &lt;a href=&#34;http://www&#34;&gt;www&lt;/a&gt;. Konieczne jest więc uzupełnienie pliku &lt;code&gt;.env&lt;/code&gt; wartości FIRECRAWL_API_KEY ustawionej na klucz API. (Firecrawl oferuje bezpłatny plan).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun websearch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Search wiki for &#39;John Wick&#39;&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ważne: w pliku &lt;code&gt;websearch/app.ts&lt;/code&gt; można zmienić listę domen, które są&amp;nbsp;dopuszczalne do przeszukiwania i pobierania treści.&lt;/p&gt; &#xA;&lt;h2&gt;S01E02&lt;/h2&gt; &#xA;&lt;h3&gt;Linear&lt;/h3&gt; &#xA;&lt;p&gt;Uruchomienie tego przykładu wymaga uzupełnienia pliku &lt;code&gt;.env&lt;/code&gt; i wartości &lt;code&gt;LINEAR_API_KEY&lt;/code&gt; oraz &lt;code&gt;LINEAR_WEBHOOK_SECRET&lt;/code&gt;. Obie wartości można znaleźć w &lt;a href=&#34;https://linear.app/overment/settings/api&#34;&gt;ustawieniach API&lt;/a&gt;. Dodatkowo Twój localhost musi być&amp;nbsp;dostępny z poza Twojej sieci lokalnej, np. za pomocą &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;. Publiczny adres URL należy także wskazać w panelu Linear w sekcji Webhooks, np.: &lt;code&gt;https://&amp;lt;ngrok-url&amp;gt;/api/linear/watch-issue&lt;/code&gt; (pamiętaj o dodaniu właściwego endpointu do adresu).&lt;/p&gt; &#xA;&lt;p&gt;WAŻNE: w pliku &lt;code&gt;linear/prompts.ts&lt;/code&gt; znajduje się prompt w którym zostały opisane &lt;strong&gt;moje projekty&lt;/strong&gt; w Linear. Aby skrypt działał poprawnie, musisz zmodyfikować ten prompt, tak aby zawierał identyfikatory oraz opisy Twoich projektów.&lt;/p&gt; &#xA;&lt;p&gt;Listę projektów i ich identyfikatory możesz pobrać korzystając z endpointu &lt;code&gt;/api/linear/projects&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun linear&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pobranie listy projektów: &lt;code&gt;curl http://localhost:3000/api/linear/projects&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Po dodaniu nowego wpisu w Twoim linearze, zostanie on automatycznie przypisany do projektu zgodnie z zasadami w promptach, o ile nie został&amp;nbsp;przypisany przez Ciebie ręcznie.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hey there, what\&#39;s up?&#34;}], &#34;conversation_id&#34;: &#34;d7582176-bc52-4ef3-980a-047b868f9f49&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Przykład ten pokazuje mechanizm podejmowania decyzji o zapamiętywaniu informacji na podstawie kontekstu rozmowy. Dodatkowo w przypadku podania &lt;code&gt;conversation_id&lt;/code&gt; w obiekcie żądania, do rozmowy zostaną&amp;nbsp;wczytane wszystkie wiadomości dotyczące konkretnej rozmowy.&lt;/p&gt; &#xA;&lt;p&gt;Wszystkie pliki zapisywane są w folderze &lt;code&gt;files/context&lt;/code&gt;, a sam katalog można otworzyć&amp;nbsp;w aplikacji &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; aby zobaczyć powiązania pomiędzy wspomnieniami.&lt;/p&gt; &#xA;&lt;h2&gt;S01E03&lt;/h2&gt; &#xA;&lt;h3&gt;Langfuse&lt;/h3&gt; &#xA;&lt;p&gt;Ten przykład wymaga uzupełnienia pliku &lt;code&gt;.env&lt;/code&gt; o wartości &lt;code&gt;LANGFUSE_PUBLIC_KEY&lt;/code&gt;, &lt;code&gt;LANGFUSE_SECRET_KEY&lt;/code&gt; oraz &lt;code&gt;LANGFUSE_HOST&lt;/code&gt;. Można je uzyskać zakładając bezpłatne konto na &lt;a href=&#34;https://langfuse.com/&#34;&gt;Langfuse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;UWAGA: Aby uruchomić ten przykład, musisz w panelu Langfuse utworzyć&amp;nbsp;nowy prompt o nazwie &lt;code&gt;Answer&lt;/code&gt;, którego wartość możesz ustawić&amp;nbsp;na np. &#39;Odpowiadaj pisząc wyłącznie wielkimi literami&#39;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun langfuse&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hey there, what\&#39;s up?&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Po wykonaniu zapytania, zostanie ono automatycznie zalogowane do Langfuse, a wynik wyświetlony w panelu.&lt;/p&gt; &#xA;&lt;h3&gt;Tiktokenizer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun tiktokenizer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hey there, what\&#39;s up?&#34;}], &#34;model&#34;: &#34;gpt-4o&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Przykład ten pokazuje mechanizm liczenia tokenów w zapytaniach do modeli OpenAI (np. gpt-4o).&lt;/p&gt; &#xA;&lt;h3&gt;Max tokens&lt;/h3&gt; &#xA;&lt;p&gt;Przykład ten pokazuje jeden mechanizm pozwalający na kontynuowanie wypowiedzi modelu, pomimo osiągnięcia maksymalnej liczby tokenów wyjściowych (output tokens).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun max_tokens&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Write ten sentences about apples and put them in order.&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Constitution&lt;/h3&gt; &#xA;&lt;p&gt;Przykład ten przedstawia mechanizm blokowania zapytań, które nie spełniają warunków określonych w prompcie &lt;code&gt;/constitution/prompts.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun constitution&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S01E04&lt;/h2&gt; &#xA;&lt;h3&gt;Memory&lt;/h3&gt; &#xA;&lt;p&gt;Ten przykład po uruchomieniu tworzy katalog memories w którym zapisywane są pliki markdown, pełniące rolę&amp;nbsp;pamięci modelu. Nie jest to przykład nadający się na produkcję, lecz przedstawia ogólne mechaniki pamięci długoterminowej, które będziemy rozwijać w dalszych lekcjach.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun memory&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; curl -X POST http://localhost:3000/api/chat \&#xA;   -H &#34;Content-Type: application/json&#34; \&#xA;   -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;S01E05&lt;/h2&gt; &#xA;&lt;h3&gt;External&lt;/h3&gt; &#xA;&lt;p&gt;Ten przykład zawiera standardową&amp;nbsp;logikę&amp;nbsp;interakcji z modelem, ale wymaga podania klucza API w nagłówku &lt;code&gt;Authorization&lt;/code&gt; w formacie &lt;code&gt;Bearer &amp;lt;klucz&amp;gt;&lt;/code&gt;. Wartość&amp;nbsp;klucza zostaje wczytana z pliku &lt;code&gt;.env&lt;/code&gt; jako &lt;code&gt;PERSONAL_API_KEY&lt;/code&gt;. Dodatkowo zostały dodane mechanizmy ograniczania liczby zapytań, więc po kilku próbach ponowne wywołanie zapytania zwróci błąd 429.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun external&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;UWAGA&lt;/strong&gt;: Aby uruchomić ten przykład konieczne jest nawiązanie połączenie z Langfuse poprzez uzupełnienie pliku &lt;code&gt;.env&lt;/code&gt; o wartości &lt;code&gt;LANGFUSE_PUBLIC_KEY&lt;/code&gt;, &lt;code&gt;LANGFUSE_SECRET_KEY&lt;/code&gt; oraz &lt;code&gt;LANGFUSE_HOST&lt;/code&gt;. Dodatkowo na Twoim koncie musisz utworzyć nowy prompt o nazwie &lt;code&gt;Answer&lt;/code&gt;, którego wartość możesz ustawić&amp;nbsp;na np. &#39;Odpowiadaj pisząc wyłącznie wielkimi literami&#39;, aby tylko sprawdzić&amp;nbsp;działanie mechanizmu. Dodatkowo prompt &#34;Answer&#34; należy dodać w ustawieniu &#34;Chat&#34;, a nie &#34;Text&#34; (tryb można zmienić&amp;nbsp;z pomocą zakładek w Langfuse)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun prompts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;Ten przykład nie dotyczy bezpośrednio działania LLM, lecz przedstawia sposób organizacji informacji w bazie danych, takich jak konwersacje czy historia wiadomości.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun database&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Qdrant&lt;/h3&gt; &#xA;&lt;p&gt;Przykład ten przedstawia &lt;strong&gt;absolutnie podstawowe&lt;/strong&gt; połączenie z bazą&amp;nbsp;wektorową Qdrant. Jego zadaniem jest zapisywanie historii wiadomości, a następnie wyszukiwanie i wczytywanie do kontekstu rozmowy najbardziej podobnych wiadomości. Przykład ten będziemy rozbudowywać w dalszych lekcjach, łącząc się z Qdrant w bardziej złożonych konfiguracjach.&lt;/p&gt; &#xA;&lt;p&gt;UWAGA: Aby uruchomić ten przykład, musisz w panelu Langfuse utworzyć&amp;nbsp;nowy prompt o nazwie &lt;code&gt;Answer&lt;/code&gt;, którego wartość możesz ustawić&amp;nbsp;na np. &#39;Odpowiadaj pisząc wyłącznie wielkimi literami&#39;. Powodem jest fakt, że w ten przykład został powiązany z przykładem &lt;code&gt;langfuse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie serwera: &lt;code&gt;bun qdrant&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:3000/api/chat \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S02E01&lt;/h2&gt; &#xA;&lt;h3&gt;Audio&lt;/h3&gt; &#xA;&lt;p&gt;UWAGA: Ten przykład wymaga uruchomienia frontendu w folderze &lt;code&gt;audio-frontend&lt;/code&gt; oraz backendu w folderze &lt;code&gt;audio-backend&lt;/code&gt;. W związku z tym przykład &lt;strong&gt;trzeba&lt;/strong&gt; uruchomić na własnym komputerze.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie frontendu: &lt;code&gt;bun audio:dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Uruchomienie backendu: &lt;code&gt;bun audio&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: Otwórz w przeglądarce stronę &lt;a href=&#34;http://localhost:5173&#34;&gt;http://localhost:5173&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;WAŻNE: Jakość działania tego przykładu zależy głównie od jakości mikrofonu oraz dźwięków otoczenia. Upewnij się&amp;nbsp;więc, że jakość nagrania jest dobra i że nie ma zakłóceń uniemożliwiających wykrywanie końca wypowiedzi.&lt;/p&gt; &#xA;&lt;h2&gt;S02E02&lt;/h2&gt; &#xA;&lt;h3&gt;Vision&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun vision&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recognize&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun recognize&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recognize-Pixtral&lt;/h3&gt; &#xA;&lt;p&gt;Do uruchomienia tego przykładu należy uzupełnić plik &lt;code&gt;.env&lt;/code&gt; o wartość &lt;code&gt;MISTRAL_API_KEY&lt;/code&gt;. Można go pobrać tutaj na &lt;a href=&#34;https://auth.mistral.ai/ui/login?flow=d2707d87-5325-4ff5-a7cd-25a2e21323d5&#34;&gt;Mistral.ai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun recognize_pixtral&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S02E02&lt;/h2&gt; &#xA;&lt;h3&gt;Vision&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun vision&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na pliku &lt;code&gt;vision/lessons.png&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recognize&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun recognize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na plikach z katalogu &lt;code&gt;recognize/avatars&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recognize-Pixtral&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun recognize_pixtral&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na plikach z katalogu &lt;code&gt;recognize_pixtral/avatars&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S02E03&lt;/h2&gt; &#xA;&lt;p&gt;--- brak przykładów ---&lt;/p&gt; &#xA;&lt;h2&gt;S02E04&lt;/h2&gt; &#xA;&lt;h3&gt;Captions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun captions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na pliku &lt;code&gt;captions/article.md&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun summary&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: skrypt wykonuje się&amp;nbsp;automatycznie na pliku &lt;code&gt;summary/article.md&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;p&gt;Do uruchomienia tego przykładu należy uzupełnić plik &lt;code&gt;.env&lt;/code&gt; o wartość &lt;code&gt;GOOGLE_AI_STUDIO_API_KEY&lt;/code&gt;, który można pobrać&amp;nbsp;z &lt;a href=&#34;https://aistudio.google.com/&#34;&gt;Google AI Studio&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun video&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na pliku &lt;code&gt;video/test.mp3&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Narration&lt;/h3&gt; &#xA;&lt;p&gt;UWAGA: Ten przykład może zużywać&amp;nbsp;duże ilości kredytów na ElevenLabs, więc jeśli chcesz zobaczyć&amp;nbsp;rezultat jego działania, to w katalogu &lt;code&gt;narration&lt;/code&gt; znajdują&amp;nbsp;się dwa przykładowe pliki audio, które możesz odtworzyć bez uruchamiania kodu.&lt;/p&gt; &#xA;&lt;p&gt;Do uruchomienia tego przykładu należy uzupełnić plik &lt;code&gt;.env&lt;/code&gt; o wartość &lt;code&gt;GOOGLE_AI_STUDIO_API_KEY&lt;/code&gt;, który można pobrać&amp;nbsp;z &lt;a href=&#34;https://aistudio.google.com/&#34;&gt;Google AI Studio&lt;/a&gt; oraz &lt;code&gt;ELEVEN_LABS_API_KEY&lt;/code&gt;, który można pobrać&amp;nbsp;z &lt;a href=&#34;https://elevenlabs.io/&#34;&gt;ElevenLabs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun narration&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na treści wiadomości użytkownika przekazanej w funkcji &lt;code&gt;generateNarration&lt;/code&gt; w pliku &lt;code&gt;narration/app.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S02E05&lt;/h2&gt; &#xA;&lt;h3&gt;Read&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun read&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na pliku &lt;code&gt;read/article.md&lt;/code&gt; i generuje plik audio w folderze read/summary.wav&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mindmap&lt;/h3&gt; &#xA;&lt;p&gt;Ten przykład wymaga uruchomienia frontendu w folderze &lt;code&gt;audio-map-frontend&lt;/code&gt; oraz backendu w folderze &lt;code&gt;audio-map&lt;/code&gt;. W związku z tym przykład &lt;strong&gt;trzeba&lt;/strong&gt; uruchomić na własnym komputerze.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie frontendu: &lt;code&gt;bun map:dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Uruchomienie backendu: &lt;code&gt;bun audio-map&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: Otwórz w przeglądarce stronę &lt;a href=&#34;http://localhost:5173&#34;&gt;http://localhost:5173&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun notes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na wiadomości wpisanej w treść pliku &lt;code&gt;notes/app.ts&lt;/code&gt; (jest tam kilka przykładów innych wiadomości, które można podmienić).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S03E01&lt;/h2&gt; &#xA;&lt;h3&gt;Text Splitter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun text-splitter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na plikach markdown z katalogu &#34;text-splitter&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unstructured&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun unstructured&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na pliku source.md z katalogu &#34;unstructured&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S03E02&lt;/h2&gt; &#xA;&lt;h3&gt;Embedding&lt;/h3&gt; &#xA;&lt;p&gt;Uruchomienie tego przykładu wymaga uzupełnienia pliku &lt;code&gt;.env&lt;/code&gt; o wartości &#34;QDRANT_URL&#34; oraz &#34;QDRANT_API_KEY&#34;. Wartości te można znaleźć w panelu Qdrant po zalogowaniu na bezpłatne konto na stronie &lt;a href=&#34;https://cloud.qdrant.io/&#34;&gt;Qdrant Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.overment.com/aidevs3_cluster-1732010353.png&#34; alt=&#34;Qdrant Cloud&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Natomiast klucz API można pobrać w zakładce &#34;Data Access Control&#34;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun embedding&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku embedding/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rerank&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun rerank&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku rerank/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Naive RAG&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun naive-rag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku naive-rag/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Better RAG&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun better-rag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku better-rag/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Semantic&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun semantic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku semantic/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S03E03&lt;/h2&gt; &#xA;&lt;h3&gt;Algolia&lt;/h3&gt; &#xA;&lt;p&gt;Do uruchomienia tego przykładu konieczne jest uzupełnienie &lt;code&gt;ALGOLIA_APP_ID&lt;/code&gt; oraz &lt;code&gt;ALGOLIA_API_KEY&lt;/code&gt; w pliku &lt;code&gt;.env&lt;/code&gt;. &lt;strong&gt;UWAGA&lt;/strong&gt;: przy pierwszym uruchomieniu przykładu pojawi się błąd ale spowoduje to utworzenie indeksu w Algolia. Wówczas należy przejść do panelu Algolia i w zakładce &#34;Facets&#34; dodać nowy facet o nazwie &lt;code&gt;author&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.overment.com/2024-11-20/aidevs3_algolia-09eeb970-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun algolia&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku algolia/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sync&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;UWAGA&lt;/strong&gt;: Do uruchomienia tego przykładu konieczne jest uzupełnienie &lt;code&gt;ALGOLIA_APP_ID&lt;/code&gt; oraz &lt;code&gt;ALGOLIA_API_KEY&lt;/code&gt; w pliku &lt;code&gt;.env&lt;/code&gt;. Wymagane jest bezpłatne konto na &lt;a href=&#34;https://www.algolia.com/&#34;&gt;Algolia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dodatkowo jeśli wyniki wyszukiwania nie są poprawnie zwracane, należy sprawdzić&amp;nbsp;czy pole &lt;code&gt;text&lt;/code&gt; zostało poprawnie ustawione w panelu Algolia jako &lt;code&gt;searchableAttributes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.overment.com/2024-11-19/aidevs3_cleanshot-3e7fd444-c.png&#34; alt=&#34;Algolia&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun sync&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku sync/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hybrid&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;UWAGA&lt;/strong&gt;: Do uruchomienia tego przykładu konieczne jest uzupełnienie &lt;code&gt;QDRANT_URL&lt;/code&gt; oraz &lt;code&gt;QDRANT_API_KEY&lt;/code&gt; w pliku &lt;code&gt;.env&lt;/code&gt;. Konieczne jest także połączenie z Algolia podobnie jak w przypadku przykładu &lt;code&gt;sync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun hybrid&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku hybrid/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;S03E05&lt;/h2&gt; &#xA;&lt;p&gt;Do uruchomienia tego przykładu konieczne jest połączenie z bazą Neo4j. Można ją&amp;nbsp;zainstalować lokalnie, a następnie uzupełnić plik &lt;code&gt;.env&lt;/code&gt; o wartości &lt;code&gt;NEO4J_URI&lt;/code&gt;, &lt;code&gt;NEO4J_USER&lt;/code&gt; oraz &lt;code&gt;NEO4J_PASSWORD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Neo4j-101&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun neo4j-101&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku neo4j-101/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Neo4j&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uruchomienie kodu: &lt;code&gt;bun neo4j&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interakcja: przykład wykonuje się&amp;nbsp;automatycznie na danych osadzonych w pliku neo4j/app.ts&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>unnoq/orpc</title>
    <updated>2025-05-12T01:36:42Z</updated>
    <id>tag:github.com,2025-05-12:/unnoq/orpc</id>
    <link href="https://github.com/unnoq/orpc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Typesafe APIs Made Simple 🪄&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img align=&#34;center&#34; src=&#34;https://orpc.unnoq.com/logo.webp&#34; width=&#34;280&#34; alt=&#34;oRPC logo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://codecov.io/gh/unnoq/orpc&#34;&gt; &lt;img alt=&#34;codecov&#34; src=&#34;https://codecov.io/gh/unnoq/orpc/branch/main/graph/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/@orpc/client&#34;&gt; &lt;img alt=&#34;weekly downloads&#34; src=&#34;https://img.shields.io/npm/dw/%40orpc%2Fclient?logo=npm&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/unnoq/orpc/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;MIT License&#34; src=&#34;https://img.shields.io/github/license/unnoq/orpc?logo=open-source-initiative&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/TXEbwRBvQn&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1308966753044398161?color=7389D8&amp;amp;label&amp;amp;logo=discord&amp;amp;logoColor=ffffff&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Typesafe APIs Made Simple 🪄&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;oRPC is a powerful combination of RPC and OpenAPI&lt;/strong&gt;, makes it easy to build APIs that are end-to-end type-safe and adhere to OpenAPI standards&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;🔗 End-to-End Type Safety&lt;/strong&gt;: Ensure type-safe inputs, outputs, and errors from client to server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📘 First-Class OpenAPI&lt;/strong&gt;: Built-in support that fully adheres to the OpenAPI standard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📝 Contract-First Development&lt;/strong&gt;: Optionally define your API contract before implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;⚙️ Framework Integrations&lt;/strong&gt;: Seamlessly integrate with TanStack Query (React, Vue, Solid, Svelte), Pinia Colada, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🚀 Server Actions&lt;/strong&gt;: Fully compatible with React Server Actions on Next.js, TanStack Start, and other platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🔠 Standard Schema Support&lt;/strong&gt;: Works out of the box with Zod, Valibot, ArkType, and other schema validators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🗃️ Native Types&lt;/strong&gt;: Supports native types like Date, File, Blob, BigInt, URL, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;⏱️ Lazy Router&lt;/strong&gt;: Enhance cold start times with our lazy routing feature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📡 SSE &amp;amp; Streaming&lt;/strong&gt;: Enjoy full type-safe support for SSE and streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🌍 Multi-Runtime Support&lt;/strong&gt;: Fast and lightweight on Cloudflare, Deno, Bun, Node.js, and beyond.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🔌 Extendability&lt;/strong&gt;: Easily extend functionality with plugins, middleware, and interceptors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🛡️ Reliability&lt;/strong&gt;: Well-tested, TypeScript-based, production-ready, and MIT licensed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full documentation &lt;a href=&#34;https://orpc.unnoq.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/contract&#34;&gt;@orpc/contract&lt;/a&gt;: Build your API contract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/server&#34;&gt;@orpc/server&lt;/a&gt;: Build your API or implement API contract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/client&#34;&gt;@orpc/client&lt;/a&gt;: Consume your API on the client with type-safety.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/nest&#34;&gt;@orpc/nest&lt;/a&gt;: Deeply integrate oRPC with NestJS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/react&#34;&gt;@orpc/react&lt;/a&gt;: Utilities for integrating oRPC with React and React Server Actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/react-query&#34;&gt;@orpc/react-query&lt;/a&gt;: Integration with &lt;a href=&#34;https://tanstack.com/query/latest/docs/framework/react/overview&#34;&gt;React Query&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/vue-query&#34;&gt;@orpc/vue-query&lt;/a&gt;: Integration with &lt;a href=&#34;https://tanstack.com/query/latest/docs/framework/vue/overview&#34;&gt;Vue Query&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/solid-query&#34;&gt;@orpc/solid-query&lt;/a&gt;: Integration with &lt;a href=&#34;https://tanstack.com/query/latest/docs/framework/solid/overview&#34;&gt;Solid Query&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/svelte-query&#34;&gt;@orpc/svelte-query&lt;/a&gt;: Integration with &lt;a href=&#34;https://tanstack.com/query/latest/docs/framework/svelte/overview&#34;&gt;Svelte Query&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/vue-colada&#34;&gt;@orpc/vue-colada&lt;/a&gt;: Integration with &lt;a href=&#34;https://pinia-colada.esm.dev/&#34;&gt;Pinia Colada&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/openapi&#34;&gt;@orpc/openapi&lt;/a&gt;: Generate OpenAPI specs and handle OpenAPI requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/zod&#34;&gt;@orpc/zod&lt;/a&gt;: More schemas that &lt;a href=&#34;https://zod.dev/&#34;&gt;Zod&lt;/a&gt; doesn&#39;t support yet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/valibot&#34;&gt;@orpc/valibot&lt;/a&gt;: OpenAPI spec generation from &lt;a href=&#34;https://valibot.dev/&#34;&gt;Valibot&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@orpc/arktype&#34;&gt;@orpc/arktype&lt;/a&gt;: OpenAPI spec generation from &lt;a href=&#34;https://arktype.io/&#34;&gt;ArkType&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is a quick overview of how to use oRPC. For more details, please refer to the &lt;a href=&#34;https://orpc.unnoq.com&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Define your router:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import type { IncomingHttpHeaders } from &#39;node:http&#39;&#xA;import { ORPCError, os } from &#39;@orpc/server&#39;&#xA;import { z } from &#39;zod&#39;&#xA;&#xA;const PlanetSchema = z.object({&#xA;  id: z.number().int().min(1),&#xA;  name: z.string(),&#xA;  description: z.string().optional(),&#xA;})&#xA;&#xA;export const listPlanet = os&#xA;  .input(&#xA;    z.object({&#xA;      limit: z.number().int().min(1).max(100).optional(),&#xA;      cursor: z.number().int().min(0).default(0),&#xA;    }),&#xA;  )&#xA;  .handler(async ({ input }) =&amp;gt; {&#xA;    // your list code here&#xA;    return [{ id: 1, name: &#39;name&#39; }]&#xA;  })&#xA;&#xA;export const findPlanet = os&#xA;  .input(PlanetSchema.pick({ id: true }))&#xA;  .handler(async ({ input }) =&amp;gt; {&#xA;    // your find code here&#xA;    return { id: 1, name: &#39;name&#39; }&#xA;  })&#xA;&#xA;export const createPlanet = os&#xA;  .$context&amp;lt;{ headers: IncomingHttpHeaders }&amp;gt;()&#xA;  .use(({ context, next }) =&amp;gt; {&#xA;    const user = parseJWT(context.headers.authorization?.split(&#39; &#39;)[1])&#xA;&#xA;    if (user) {&#xA;      return next({ context: { user } })&#xA;    }&#xA;&#xA;    throw new ORPCError(&#39;UNAUTHORIZED&#39;)&#xA;  })&#xA;  .input(PlanetSchema.omit({ id: true }))&#xA;  .handler(async ({ input, context }) =&amp;gt; {&#xA;    // your create code here&#xA;    return { id: 1, name: &#39;name&#39; }&#xA;  })&#xA;&#xA;export const router = {&#xA;  planet: {&#xA;    list: listPlanet,&#xA;    find: findPlanet,&#xA;    create: createPlanet&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create your server:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createServer } from &#39;node:http&#39;&#xA;import { RPCHandler } from &#39;@orpc/server/node&#39;&#xA;import { CORSPlugin } from &#39;@orpc/server/plugins&#39;&#xA;&#xA;const handler = new RPCHandler(router, {&#xA;  plugins: [new CORSPlugin()]&#xA;})&#xA;&#xA;const server = createServer(async (req, res) =&amp;gt; {&#xA;  const result = await handler.handle(req, res, {&#xA;    context: { headers: req.headers }&#xA;  })&#xA;&#xA;  if (!result.matched) {&#xA;    res.statusCode = 404&#xA;    res.end(&#39;No procedure matched&#39;)&#xA;  }&#xA;})&#xA;&#xA;server.listen(&#xA;  3000,&#xA;  &#39;127.0.0.1&#39;,&#xA;  () =&amp;gt; console.log(&#39;Listening on 127.0.0.1:3000&#39;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create your client:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import type { RouterClient } from &#39;@orpc/server&#39;&#xA;import { createORPCClient } from &#39;@orpc/client&#39;&#xA;import { RPCLink } from &#39;@orpc/client/fetch&#39;&#xA;&#xA;const link = new RPCLink({&#xA;  url: &#39;http://127.0.0.1:3000&#39;,&#xA;  headers: { Authorization: &#39;Bearer token&#39; },&#xA;})&#xA;&#xA;export const orpc: RouterClient&amp;lt;typeof router&amp;gt; = createORPCClient(link)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Consume your API:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { orpc } from &#39;./client&#39;&#xA;&#xA;const planets = await orpc.planet.list({ limit: 10 })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generate OpenAPI Spec:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { OpenAPIGenerator } from &#39;@orpc/openapi&#39;&#xA;import { ZodToJsonSchemaConverter } from &#39;@orpc/zod&#39;&#xA;&#xA;const generator = new OpenAPIGenerator({&#xA;  schemaConverters: [new ZodToJsonSchemaConverter()]&#xA;})&#xA;&#xA;const spec = await generator.generate(router, {&#xA;  info: {&#xA;    title: &#39;Planet API&#39;,&#xA;    version: &#39;1.0.0&#39;&#xA;  }&#xA;})&#xA;&#xA;console.log(spec)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cdn.jsdelivr.net/gh/unnoq/unnoq/sponsors.svg&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/unnoq/unnoq/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;oRPC is inspired by existing solutions that prioritize type safety and developer experience. Special acknowledgments to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trpc.io&#34;&gt;tRPC&lt;/a&gt;: For pioneering the concept of end-to-end type-safe RPC and influencing the development of type-safe APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ts-rest.com&#34;&gt;ts-rest&lt;/a&gt;: For its emphasis on contract-first development and OpenAPI integration, which have greatly inspired oRPC’s feature set.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;a href=&#34;https://github.com/unnoq/orpc/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heroui-inc/heroui</title>
    <updated>2025-05-12T01:36:42Z</updated>
    <id>tag:github.com,2025-05-12:/heroui-inc/heroui</id>
    <link href="https://github.com/heroui-inc/heroui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 Beautiful, fast and modern React UI library. (Previously NextUI)&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://ph.heroui.chat?utm_source=https://github.com/heroui-inc/heroui&amp;amp;utm_medium=banner&#34;&gt; &lt;img alt=&#34;HeroUI Chat on Product Hunt&#34; src=&#34;https://heroui-chat-assets.nyc3.cdn.digitaloceanspaces.com/github_banner-round.png&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://heroui.com&#34;&gt; &lt;img width=&#34;20%&#34; src=&#34;https://raw.githubusercontent.com/heroui-inc/heroui/main/apps/docs/public/isotipo.png&#34; alt=&#34;heorui&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroui.com&#34;&gt;HeroUI&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://heroui.com&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/heroui-inc/heroui/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/l/@heroui/react?style=flat&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/jrgarciadev/nextui&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/jrgarciadev/nextui/branch/main/graph/badge.svg?token=QJF2QKR5N4&#34; alt=&#34;codecov badge&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://github.com/heroui-inc/heroui/actions/workflows/main.yaml&#34;&gt;&#xA;    &lt;img src=&#34;https://github.com/heroui-inc/heroui/actions/workflows/main.yaml/badge.svg&#34; alt=&#34;CI/CD heroui&#34;&gt;&#xA;  &lt;/a&gt; --&gt; &lt;a href=&#34;https://www.npmjs.com/package/@heroui/react&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/@heroui/react.svg?style=flat-round&#34; alt=&#34;npm downloads&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a aria-label=&#34;heroui learn&#34; href=&#34;https://heroui.com/learn&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://heroui.com/guide&#34;&gt;https://heroui.com/guide&lt;/a&gt; to get started with HeroUI.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://heroui.com/docs&#34;&gt;https://heroui.com/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Storybook&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://storybook.heroui.com/&#34;&gt;https://storybook.heroui.com&lt;/a&gt; to view the storybook for all components.&lt;/p&gt; &#xA;&lt;h2&gt;Canary Release&lt;/h2&gt; &#xA;&lt;p&gt;Canary versions are available after every merge into &lt;code&gt;canary&lt;/code&gt; branch. You can install the packages with the tag &lt;code&gt;canary&lt;/code&gt; in npm to use the latest changes before the next production release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://canary.heroui.com/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://canary-sb.heroui.com&#34;&gt;Storybook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re excited to see the community adopt HeroUI, raise issues, and provide feedback. Whether it&#39;s a feature request, bug report, or a project to showcase, please get involved!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/9b6yyZKmH4&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/hero_ui&#34;&gt;X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heroui-inc/heroui/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/heroui-inc/heroui/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for ways to get started.&lt;/p&gt; &#xA;&lt;p&gt;Please adhere to this project&#39;s &lt;a href=&#34;https://github.com/heroui-inc/heroui/raw/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>