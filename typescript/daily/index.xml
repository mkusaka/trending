<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-30T01:44:20Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dabit3/react-native-ai</title>
    <updated>2023-11-30T01:44:20Z</updated>
    <id>tag:github.com,2023-11-30:/dabit3/react-native-ai</id>
    <link href="https://github.com/dabit3/react-native-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full stack framework for building cross-platform mobile AI apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Native AI&lt;/h1&gt; &#xA;&lt;p&gt;Full stack framework for building cross-platform mobile AI apps supporting LLM real-time / streaming text and chat UIs, image services and natural language to images with multiple models, and image processing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/AOOgBM0.png&#34; alt=&#34;React Native AI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLM support for &lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt; ChatGPT, &lt;a href=&#34;https://anthropic.com&#34;&gt;Anthropic&lt;/a&gt; Claude, &lt;a href=&#34;https://cohere.com/&#34;&gt;Cohere&lt;/a&gt; and Cohere Web&lt;/li&gt; &#xA; &lt;li&gt;An array of image models provided by &lt;a href=&#34;https://www.fal.ai/&#34;&gt;Fal.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Real-time / streaming responses from all providers&lt;/li&gt; &#xA; &lt;li&gt;OpenAI Assistants including code interpreter and retrieval&lt;/li&gt; &#xA; &lt;li&gt;Server proxy to easily enable authentication and authorization with auth provider of choice.&lt;/li&gt; &#xA; &lt;li&gt;Theming (comes out of the box with 5 themes) - easily add additional themes with just a few lines of code.&lt;/li&gt; &#xA; &lt;li&gt;Image processing with &lt;a href=&#34;https://bytescale.com/&#34;&gt;ByteScale&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7Gser4F.png&#34; alt=&#34;React Native AI Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Generate a new project by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx rn-ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, either configure your environment variables with the CLI, or do so later.&lt;/p&gt; &#xA;&lt;h3&gt;Running the app&lt;/h3&gt; &#xA;&lt;p&gt;Change into the app directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the server&lt;/h3&gt; &#xA;&lt;p&gt;Change into the server directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Theming&lt;/h2&gt; &#xA;&lt;p&gt;To add a new theme, open &lt;code&gt;app/src/theme.ts&lt;/code&gt; and add a new theme with the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const christmas = {&#xA;  // extend an esisting theme or start from scratch&#xA;  ...lightTheme,&#xA;  name: &#39;Christmas&#39;,&#xA;  label: &#39;christmas&#39;,&#xA;  tintColor: &#39;#ff0000&#39;,&#xA;  textColor: &#39;#378b29&#39;,&#xA;  tabBarActiveTintColor: &#39;#378b29&#39;,&#xA;  tabBarInactiveTintColor: &#39;#ff0000&#39;,&#xA;  placeholderTextColor: &#39;#378b29&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the bottom of the file, export the new theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export {&#xA;  lightTheme, darkTheme, hackerNews, miami, vercel, christmas&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring LLM Models&lt;/h2&gt; &#xA;&lt;p&gt;Here is how to add new or remove existing LLM models.&lt;/p&gt; &#xA;&lt;h3&gt;In the app&lt;/h3&gt; &#xA;&lt;p&gt;You can add or configure a model by updating &lt;code&gt;MODELS&lt;/code&gt; in &lt;code&gt;constants.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For removing models, just remove the models you do not want to support.&lt;/p&gt; &#xA;&lt;p&gt;For adding models, once the model definition is added to the &lt;code&gt;MODELS&lt;/code&gt; array, you should update &lt;code&gt;src/screens/chat.tsx&lt;/code&gt; to support the new model:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create local state to hold new model data&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;chat()&lt;/code&gt; function to handle new model type&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;generateModelReponse&lt;/code&gt; function to call new model&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;getChatType&lt;/code&gt; in &lt;code&gt;utils.ts&lt;/code&gt; to configure the LLM type that will correspond with your server path.&lt;/li&gt; &#xA; &lt;li&gt;Render new model in UI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;{&#xA;  chatType.label.includes(&#39;newModel&#39;) &amp;amp;&amp;amp; (&#xA;    &amp;lt;FlatList&#xA;      data={newModelReponse.messages}&#xA;      renderItem={renderItem}&#xA;      scrollEnabled={false}&#xA;    /&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On the server&lt;/h3&gt; &#xA;&lt;p&gt;Create a new file in the &lt;code&gt;server/src/chat&lt;/code&gt; folder that corresponds to the model type you created in the mobile app. You can probably copy and re-use a lot of the streaming code from the other existing paths to get you started.&lt;/p&gt; &#xA;&lt;p&gt;Next, update &lt;code&gt;server/src/chat/chatRouter&lt;/code&gt; to use the new route.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring Image Models&lt;/h2&gt; &#xA;&lt;p&gt;Here is how to add new or remove existing Image models.&lt;/p&gt; &#xA;&lt;h3&gt;In the app&lt;/h3&gt; &#xA;&lt;p&gt;You can add or configure a model by updating &lt;code&gt;IMAGE_MODELS&lt;/code&gt; in &lt;code&gt;constants.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For removing models, just remove the models you do not want to support.&lt;/p&gt; &#xA;&lt;p&gt;For adding models, once the model definition is add to the &lt;code&gt;IMAGE_MODELS&lt;/code&gt; array, you should update &lt;code&gt;src/screens/images.tsx&lt;/code&gt; to support the new model.&lt;/p&gt; &#xA;&lt;p&gt;Main consideration is input. Does the model take text, image, or both as inputs?&lt;/p&gt; &#xA;&lt;p&gt;The app is configured to handle both, but you must update the &lt;code&gt;generate&lt;/code&gt; function to pass the values to the API accordingly.&lt;/p&gt; &#xA;&lt;h3&gt;On the server&lt;/h3&gt; &#xA;&lt;h4&gt;Fal.ai&lt;/h4&gt; &#xA;&lt;p&gt;In &lt;code&gt;server/src/images/fal&lt;/code&gt;, update the handler function to take into account the new model.&lt;/p&gt; &#xA;&lt;h4&gt;Other API providers&lt;/h4&gt; &#xA;&lt;p&gt;Create a new file in &lt;code&gt;server/src/images/modelName&lt;/code&gt;, update the handler function to handle the new API call.&lt;/p&gt; &#xA;&lt;p&gt;Next, update &lt;code&gt;server/src/images/imagesRouter&lt;/code&gt; to use the new route.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HuolalaTech/page-spy-web</title>
    <updated>2023-11-30T01:44:20Z</updated>
    <id>tag:github.com,2023-11-30:/HuolalaTech/page-spy-web</id>
    <link href="https://github.com/HuolalaTech/page-spy-web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug remotely and easily like chrome devtools.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HuolalaTech/page-spy-web/main/README_EN.md&#34;&gt;English&lt;/a&gt; | 中文&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/HuolalaTech/page-spy-web/main/logo.svg?sanitize=true&#34; height=&#34;120&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;PageSpyWeb&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PageSpy&lt;/strong&gt; 是一款用来调试远程 Web 项目的工具。&lt;/p&gt; &#xA;&lt;p&gt;基于对原生 API 的封装，它将调用原生方法时的参数进行过滤、转化，整理成格式规范的消息供调试端消费；调试端收到消息数据，提供类控制台可交互式的功能界面将数据呈现出来。&lt;/p&gt; &#xA;&lt;h2&gt;何时使用？&lt;/h2&gt; &#xA;&lt;p&gt;&lt;u&gt;任何无法在本地使用控制台调试的场景，都是 &lt;strong&gt;PageSpy&lt;/strong&gt; 可以大显身手的时候！&lt;/u&gt;一起来看下面的两个例子：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;节省沟通成本，提升协同效率&lt;/strong&gt;：在现代远程工作和跨地区合作变得越来越普遍的背景下，技术人员和测试人员之间的有效协同变得异常重要。然而，传统的沟通方式如邮件、电话、视频会议等存在沟通效率不高、故障信息不全面、误解误判等。PageSpy 提供项目运行现场供技术人员在调试端查看，测试人员不用再频繁的通过文字、截图、录屏等方式向技术人员提供故障信息。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;精准高效排障，避免大海捞针&lt;/strong&gt;：当应用在用户的终端上出现白屏或其他类似致命问题时，快速定位、精准排障并修复问题一直是技术人员面临的难题。传统定位问题的方式包括数据监控、日志分析等，这些方式不仅会耗费大量的时间和精力来分析和诊断问题，还极度依赖排障人员非常理解业务需求场景、技术实现。PageSpy 将错误信息直接呈现给技术人员，排除一切信息干扰，show the code!&lt;/p&gt; &#xA;&lt;h2&gt;如何使用？&lt;/h2&gt; &#xA;&lt;p&gt;为了数据安全和方便您的使用，我们提供完整的、开箱即用的部署方案。&lt;/p&gt; &#xA;&lt;h3&gt;Docker 部署 👍&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --restart=always -p 6752:6752 --name=&#34;pageSpy&#34; ghcr.io/huolalatech/page-spy-web:release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Node 部署&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;提示：这会根据不同的平台下载对应的二进制文件，二进制文件包含了必要的所有内容，所以下载需要一点时间，请耐心等待。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn global add @huolala-tech/page-spy-api&#xA;&#xA;# 如果你使用 npm&#xA;&#xA;$ npm install -g @huolala-tech/page-spy-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下载完成之后你可以在命令行中直接执行 &lt;code&gt;page-spy-api&lt;/code&gt; 启动服务。 同时还会在运行目录下面生成配置文件 config.json，修改配置文件可以修改运行端口&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;port&#34;: &#34;6752&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;部署完成后，页面顶部会出现 &lt;code&gt;接入SDK&lt;/code&gt; 菜单，点击菜单查看如何在业务项目中配置并集成。&lt;/p&gt; &#xA;&lt;h2&gt;功能概览&lt;/h2&gt; &#xA;&lt;h3&gt;Console 面板&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;显示 &lt;code&gt;console.&amp;lt;log | info | warn | error&amp;gt;&lt;/code&gt; 日志信息，可以执行代码；&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Screenshot&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HuolalaTech/page-spy-web/main/src/assets/image/screenshot/console-panel.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Network 面板&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;显示 &lt;code&gt;fetch&lt;/code&gt; | &lt;code&gt;XMLHttpRequest&lt;/code&gt; | &lt;code&gt;navigator.sendBeacon&lt;/code&gt; 的网络请求；&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Screenshot&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HuolalaTech/page-spy-web/main/src/assets/image/screenshot/network-panel.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Page 面板&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;显示当前页面，查看 HTML 节点树；&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Screenshot&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HuolalaTech/page-spy-web/main/src/assets/image/screenshot/page-panel.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Storage 面板&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;查看 &lt;code&gt;localStorage&lt;/code&gt; | &lt;code&gt;sessionStorage&lt;/code&gt; | &lt;code&gt;cookie&lt;/code&gt; 缓存数据；&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Screenshot&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HuolalaTech/page-spy-web/main/src/assets/image/screenshot/storage-panel.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Systems 面板&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;显示 userAgent 信息，查看 api 兼容性;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Screenshot&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HuolalaTech/page-spy-web/main/src/assets/image/screenshot/system-panel.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;除此之外，当有新的数据或者数据发生变化的时候会实时的收到通知。&lt;/p&gt; &#xA;&lt;h2&gt;技术支持&lt;/h2&gt; &#xA;&lt;p&gt;有问题可以使用微信扫码进群。&lt;/p&gt; &#xA;&lt;img src=&#34;https://public-assets-v.huolala.cn/images/page-spy-wechat-group.jpg&#34; alt=&#34;微信群&#34; width=&#34;300&#34;&gt; &#xA;&lt;h2&gt;开发&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;克隆仓库:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/HuolalaTech/page-spy-web.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;安装依赖:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;本地开发:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 前端&#xA;yarn start:client&#xA;&#xA;# 后端&#xA;yarn global add @huolala-tech/page-spy-api&#xA;yarn start:server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;生产构建&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn build:client&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>DylanVann/react-native-fast-image</title>
    <updated>2023-11-30T01:44:20Z</updated>
    <id>tag:github.com,2023-11-30:/DylanVann/react-native-fast-image</id>
    <link href="https://github.com/DylanVann/react-native-fast-image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚩 FastImage, performant React Native image component.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; 🚩 FastImage &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;Performant React Native image component.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/react-native-fast-image&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-fast-image.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.npmtrends.com/react-native-fast-image&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/react-native-fast-image.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/DylanVann/react-native-fast-image/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/dylanvann/react-native-fast-image/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/dylanvann/react-native-fast-image&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/dylanvann/react-native-fast-image.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/dylanvann/react-native-fast-image/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/dylanvann/react-native-fast-image.svg?style=social&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dylanvann/react-native-fast-image/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dylanvann/react-native-fast-image.svg?style=social&#34; alt=&#34;Star on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/home?status=Check%20out%20react-native-fast-image%20by%20%40atomarranger%20https%3A//github.com/DylanVann/react-native-fast-image&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/github.com/DylanVann/react-native-fast-image.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;kbd&gt; &lt;img src=&#34;https://github.com/DylanVann/react-native-fast-image/raw/main/docs/assets/scroll.gif?raw=true&#34; title=&#34;Scroll Demo&#34; float=&#34;left&#34;&gt; &lt;/kbd&gt; &lt;kbd&gt; &lt;img src=&#34;https://github.com/DylanVann/react-native-fast-image/raw/main/docs/assets/priority.gif?raw=true&#34; title=&#34;Priority Demo&#34; float=&#34;left&#34;&gt; &lt;/kbd&gt; &lt;br&gt; &lt;em&gt;FastImage example app.&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p&gt;React Native&#39;s &lt;code&gt;Image&lt;/code&gt; component handles image caching like browsers for the most part. If the server is returning proper cache control headers for images you&#39;ll generally get the sort of built in caching behavior you&#39;d have in a browser. Even so many people have noticed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flickering.&lt;/li&gt; &#xA; &lt;li&gt;Cache misses.&lt;/li&gt; &#xA; &lt;li&gt;Low performance loading from cache.&lt;/li&gt; &#xA; &lt;li&gt;Low performance in general.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;FastImage&lt;/code&gt; is an &lt;code&gt;Image&lt;/code&gt; replacement that solves these issues. &lt;code&gt;FastImage&lt;/code&gt; is a wrapper around &lt;a href=&#34;https://github.com/rs/SDWebImage&#34;&gt;SDWebImage (iOS)&lt;/a&gt; and &lt;a href=&#34;https://github.com/bumptech/glide&#34;&gt;Glide (Android)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Aggressively cache images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add authorization headers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prioritize images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Preload images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GIF support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Border radius.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: You must be using React Native 0.60.0 or higher to use the most recent version of &lt;code&gt;react-native-fast-image&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add react-native-fast-image&#xA;cd ios &amp;amp;&amp;amp; pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import FastImage from &#39;react-native-fast-image&#39;&#xA;&#xA;const YourImage = () =&amp;gt; (&#xA;    &amp;lt;FastImage&#xA;        style={{ width: 200, height: 200 }}&#xA;        source={{&#xA;            uri: &#39;https://unsplash.it/400/400?image=1&#39;,&#xA;            headers: { Authorization: &#39;someAuthToken&#39; },&#xA;            priority: FastImage.priority.normal,&#xA;        }}&#xA;        resizeMode={FastImage.resizeMode.contain}&#xA;    /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Are you using Glide already using an AppGlideModule?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DylanVann/react-native-fast-image/main/docs/app-glide-module.md&#34;&gt;Are you using Glide already using an AppGlideModule?&lt;/a&gt; (you might have problems if you don&#39;t read this)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Are you using Proguard?&lt;/h2&gt; &#xA;&lt;p&gt;If you use Proguard you will need to add these lines to &lt;code&gt;android/app/proguard-rules.pro&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep public class com.dylanvann.fastimage.* {*;}&#xA;-keep public class com.dylanvann.fastimage.** {*;}&#xA;-keep public class * implements com.bumptech.glide.module.GlideModule&#xA;-keep public class * extends com.bumptech.glide.module.AppGlideModule&#xA;-keep public enum com.bumptech.glide.load.ImageHeaderParser$** {&#xA;  **[] $VALUES;&#xA;  public *;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Properties&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;source?: object&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Source for the remote image to load.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;source.uri?: string&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remote url to load the image from. e.g. &lt;code&gt;&#39;https://facebook.github.io/react/img/logo_og.png&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;source.headers?: object&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Headers to load the image with. e.g. &lt;code&gt;{ Authorization: &#39;someAuthToken&#39; }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;source.priority?: enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.priority.low&lt;/code&gt; - Low Priority.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.priority.normal&lt;/code&gt; &lt;strong&gt;(Default)&lt;/strong&gt; - Normal Priority.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.priority.high&lt;/code&gt; - High Priority.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;source.cache?: enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.cacheControl.immutable&lt;/code&gt; - &lt;strong&gt;(Default)&lt;/strong&gt; - Only updates if url changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.cacheControl.web&lt;/code&gt; - Use headers and follow normal caching procedures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.cacheControl.cacheOnly&lt;/code&gt; - Only show images from cache, do not make any network requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;defaultSource?: number&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An asset loaded with &lt;code&gt;require(...)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Note that like the built-in &lt;code&gt;Image&lt;/code&gt; implementation, on Android &lt;code&gt;defaultSource&lt;/code&gt; does not work in debug mode. This is due to the fact that assets are sent from the dev server, but RN&#39;s functions only know how to load it from &lt;code&gt;res&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;resizeMode?: enum&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.resizeMode.contain&lt;/code&gt; - Scale the image uniformly (maintain the image&#39;s aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.resizeMode.cover&lt;/code&gt; &lt;strong&gt;(Default)&lt;/strong&gt; - Scale the image uniformly (maintain the image&#39;s aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.resizeMode.stretch&lt;/code&gt; - Scale width and height independently, This may change the aspect ratio of the src.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastImage.resizeMode.center&lt;/code&gt; - Do not scale the image, keep centered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;onLoadStart?: () =&amp;gt; void&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Called when the image starts to load.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;onProgress?: (event) =&amp;gt; void&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Called when the image is loading.&lt;/p&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;onProgress={e =&amp;gt; console.log(e.nativeEvent.loaded / e.nativeEvent.total)}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;onLoad?: (event) =&amp;gt; void&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Called on a successful image fetch. Called with the width and height of the loaded image.&lt;/p&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;onLoad={e =&amp;gt; console.log(e.nativeEvent.width, e.nativeEvent.height)}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;onError?: () =&amp;gt; void&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Called on an image fetching error.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;onLoadEnd?: () =&amp;gt; void&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Called when the image finishes loading, whether it was successful or an error.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;style&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A React Native style. Supports using &lt;code&gt;borderRadius&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;fallback: boolean&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If true will fallback to using &lt;code&gt;Image&lt;/code&gt;. In this case the image will still be styled and laid out the same way as &lt;code&gt;FastImage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;tintColor?: number | string&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If supplied, changes the color of all the non-transparent pixels to the given color.&lt;/p&gt; &#xA;&lt;h2&gt;Static Methods&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;FastImage.preload: (source[]) =&amp;gt; void&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Preload images to display later. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;FastImage.preload([&#xA;    {&#xA;        uri: &#39;https://facebook.github.io/react/img/logo_og.png&#39;,&#xA;        headers: { Authorization: &#39;someAuthToken&#39; },&#xA;    },&#xA;    {&#xA;        uri: &#39;https://facebook.github.io/react/img/logo_og.png&#39;,&#xA;        headers: { Authorization: &#39;someAuthToken&#39; },&#xA;    },&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;FastImage.clearMemoryCache: () =&amp;gt; Promise&amp;lt;void&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Clear all images from memory cache.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;FastImage.clearDiskCache: () =&amp;gt; Promise&amp;lt;void&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Clear all images from disk cache.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have any problems using this library try the steps in &lt;a href=&#34;https://raw.githubusercontent.com/DylanVann/react-native-fast-image/main/docs/troubleshooting.md&#34;&gt;troubleshooting&lt;/a&gt; and see if they fix it.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DylanVann/react-native-fast-image/main/docs/development.md&#34;&gt;Follow these instructions to get the example app running.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported React Native Versions&lt;/h2&gt; &#xA;&lt;p&gt;This project only aims to support the latest version of React Native.&lt;br&gt; This simplifies the development and the testing of the project.&lt;/p&gt; &#xA;&lt;p&gt;If you require new features or bug fixes for older versions you can fork this project.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The idea for this modules came from &lt;a href=&#34;https://github.com/vovkasm&#34;&gt;vovkasm&#39;s&lt;/a&gt; &lt;a href=&#34;https://github.com/vovkasm/react-native-web-image&#34;&gt;react-native-web-image&lt;/a&gt; package. It also uses Glide and SDWebImage, but didn&#39;t have some features I needed (priority, headers).&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/mobinni&#34;&gt;@mobinni&lt;/a&gt; for helping with the conceptualization&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FastImage - MIT © &lt;a href=&#34;https://github.com/DylanVann&#34;&gt;DylanVann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SDWebImage - &lt;code&gt;MIT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Glide - BSD, part MIT and Apache 2.0. See the &lt;a href=&#34;https://github.com/bumptech/glide/raw/master/license&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>