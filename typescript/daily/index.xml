<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-03T01:37:47Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Nutlope/llamacoder</title>
    <updated>2024-11-03T01:37:47Z</updated>
    <id>tag:github.com,2024-11-03:/Nutlope/llamacoder</id>
    <link href="https://github.com/Nutlope/llamacoder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source Claude Artifacts – built with Llama 3.1 405B&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://www.llamacoder.io&#34;&gt; &lt;img alt=&#34;Llama Coder&#34; src=&#34;https://raw.githubusercontent.com/Nutlope/llamacoder/main/public/og-image.png&#34;&gt; &lt;h1 align=&#34;center&#34;&gt;Llama Coder&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p align=&#34;center&#34;&gt; An open source Claude Artifacts – generate small apps with one prompt. Powered by Llama 3 405B &amp;amp; Together.ai. &lt;/p&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.meta.com/blog/meta-llama-3-1/&#34;&gt;Llama 3.1 405B&lt;/a&gt; from Meta for the LLM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dub.sh/together-ai/?utm_source=example-app&amp;amp;utm_medium=llamacoder&amp;amp;utm_campaign=llamacoder-app-signup&#34;&gt;Together AI&lt;/a&gt; for LLM inference&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sandpack.codesandbox.io/&#34;&gt;Sandpack&lt;/a&gt; for the code sandbox&lt;/li&gt; &#xA; &lt;li&gt;Next.js app router with Tailwind&lt;/li&gt; &#xA; &lt;li&gt;Helicone for observability&lt;/li&gt; &#xA; &lt;li&gt;Plausible for website analytics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cloning &amp;amp; running&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/Nutlope/llamacoder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file and add your &lt;a href=&#34;https://dub.sh/together-ai/?utm_source=example-app&amp;amp;utm_medium=llamacoder&amp;amp;utm_campaign=llamacoder-app-signup&#34;&gt;Together AI API key&lt;/a&gt;: &lt;code&gt;TOGETHER_API_KEY=&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run dev&lt;/code&gt; to install dependencies and run locally&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Future Tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Experiment with a prompt rewriter and launch this as well&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make the toast that opens better like a modal for sharability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add sharability to people can take their apps and share them publicly&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add the ability to toggle on and off shadcn components and others&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Launch support for different themes – somehow pass down variables to components&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add dynamic OG images to the specific generations &amp;amp; include the prompt&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more dynamic OG images for playwright&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Address issue of ability to publish the same app repeatedly&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try chain of thought reasoning to see if it works better overall&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Encourage best practices by making the input and textarea &amp;amp; having pills to generate apps w/ good prompts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more customizability in terms of changing the prompt, temperature, ect...&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Save previous versions so people can go back and forth between the generated ones&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Could be nice to show a &#34;featured apps&#34; route on the site on /featured. Have a /id/${prompt} dynamic route that can display a bunch of nice example apps in the sandbox ready to go&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support more languages starting with Python, check out E2B&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try chain of thought reasoning to see if it works better overall&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try finetuning a smaller model on good prompts from 405b or GPT-4/Claude&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add dark mode to the site overall, nice design change&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Surface errors better in codesandbox to the user so people know what is wrong&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Think about how to have 405B correct itself (sometimes it makes up imports)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; New route for updateCode that only sends the latest generated code + the modify request&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fix bug where if a user edits the code, then does a change, it doesn&#39;t use the edited code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add rate limiting with redis upstash if the traffic gets too high&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try to add a consistent component library like shadcn&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Apply code diffs directly instead of asking the model to generate the code from scratch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add the ability to upload things like a screenshot for it to start from that&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yamadashy/repomix</title>
    <updated>2024-11-03T01:37:47Z</updated>
    <id>tag:github.com,2024-11-03:/yamadashy/repomix</id>
    <link href="https://github.com/yamadashy/repomix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📦 Repomix (formerly Repopack) is a powerful tool that packs your entire repository into a single, AI-friendly file. Perfect for when you need to feed your codebase to Large Language Models (LLMs) or other AI tools like Claude, ChatGPT, and Gemini.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📦 Repomix (formerly Repopack)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yamadashy/repomix/actions?query=workflow%3A%22ci%22&#34;&gt;&lt;img src=&#34;https://github.com/yamadashy/repomix/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/repomix&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/repomix.svg?maxAge=1000&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/repomix&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/d18m/repomix&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yamadashy/repomix/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/repomix.svg?maxAge=1000&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/repomix&#34;&gt;&lt;img src=&#34;https://img.shields.io/node/v/repomix.svg?maxAge=1000&#34; alt=&#34;node&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Repomix is a powerful tool that packs your entire repository into a single, AI-friendly file.&lt;br&gt; It is perfect for when you need to feed your codebase to Large Language Models (LLMs) or other AI tools like Claude, ChatGPT, and Gemini.&lt;/p&gt; &#xA;&lt;h2&gt;📢 Important Notice: Project Renamed to Repomix&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Due to legal considerations, this project has been renamed from &#34;Repopack&#34; to &#34;Repomix&#34;. Only the name is changing; Repomix all functionality and maintainer (&lt;a href=&#34;https://github.com/yamadashy&#34;&gt;@yamadashy&lt;/a&gt;) remain the same. We are committed to ensuring a smooth transition for all users.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Migration Guide&lt;/h3&gt; &#xA;&lt;p&gt;To continue using the tool, simply install the new package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install new package&#xA;npm install -g repomix&#xA;&#xA;# Or use directly with npx&#xA;npx repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can also uninstall the old package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm uninstall -g repopack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration Files&lt;/h4&gt; &#xA;&lt;p&gt;Your existing configuration files (&lt;code&gt;repopack.config.json&lt;/code&gt; and &lt;code&gt;.repopackignore&lt;/code&gt;) will continue to work during the transition period.&lt;br&gt; &lt;code&gt;repomix&lt;/code&gt; will automatically detect these files and offer to migrate them to the new format (&lt;code&gt;repomix.config.json&lt;/code&gt; and &lt;code&gt;.repomixignore&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Timeline&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Current: Transition period begins&lt;/li&gt; &#xA; &lt;li&gt;December 1st, 2024: Ownership of the &lt;a href=&#34;https://npmjs.com/repopack&#34;&gt;repopack npm package&lt;/a&gt; will be transferred to another party. The repomix package will continue to be maintained as usual&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We appreciate your understanding and cooperation during this transition.&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI-Optimized&lt;/strong&gt;: Formats your codebase in a way that&#39;s easy for AI to understand and process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Token Counting&lt;/strong&gt;: Provides token counts for each file and the entire repository, useful for LLM context limits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple to Use&lt;/strong&gt;: You need just one command to pack your entire repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Easily configure what to include or exclude.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git-Aware&lt;/strong&gt;: Automatically respects your .gitignore files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security-Focused&lt;/strong&gt;: Incorporates &lt;a href=&#34;https://github.com/secretlint/secretlint&#34;&gt;Secretlint&lt;/a&gt; for robust security checks to detect and prevent inclusion of sensitive information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;You can try Repomix instantly in your project directory without installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install globally for repeated use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install using npm&#xA;npm install -g repomix&#xA;&#xA;# Alternatively using yarn&#xA;yarn global add repomix&#xA;&#xA;# Then run in any project directory&#xA;repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Repomix will generate a &lt;code&gt;repomix-output.txt&lt;/code&gt; file in your current directory, containing your entire repository in an AI-friendly format.&lt;/p&gt; &#xA;&lt;h2&gt;📊 Usage&lt;/h2&gt; &#xA;&lt;p&gt;To pack your entire repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pack a specific directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix path/to/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pack specific files or directories using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --include &#34;src/**/*.ts,**/*.md&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To exclude specific files or directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --ignore &#34;**/*.log,tmp/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pack a remote repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --remote https://github.com/yamadashy/repomix&#xA;&#xA;# You can also use GitHub shorthand:&#xA;repomix --remote yamadashy/repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To initialize a new configuration file (&lt;code&gt;repomix.config.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have generated the packed file, you can use it with Generative AI tools like Claude, ChatGPT, and Gemini.&lt;/p&gt; &#xA;&lt;h3&gt;Prompt Examples&lt;/h3&gt; &#xA;&lt;p&gt;Once you have generated the packed file with Repomix, you can use it with AI tools like Claude, ChatGPT, and Gemini. Here are some example prompts to get you started:&lt;/p&gt; &#xA;&lt;h4&gt;Code Review and Refactoring&lt;/h4&gt; &#xA;&lt;p&gt;For a comprehensive code review and refactoring suggestions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This file contains my entire codebase. Please review the overall structure and suggest any improvements or refactoring opportunities, focusing on maintainability and scalability.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Documentation Generation&lt;/h4&gt; &#xA;&lt;p&gt;To generate project documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Based on the codebase in this file, please generate a detailed README.md that includes an overview of the project, its main features, setup instructions, and usage examples.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test Case Generation&lt;/h4&gt; &#xA;&lt;p&gt;For generating test cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Analyze the code in this file and suggest a comprehensive set of unit tests for the main functions and classes. Include edge cases and potential error scenarios.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Code Quality Assessment&lt;/h4&gt; &#xA;&lt;p&gt;Evaluate code quality and adherence to best practices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Review the codebase for adherence to coding best practices and industry standards. Identify areas where the code could be improved in terms of readability, maintainability, and efficiency. Suggest specific changes to align the code with best practices.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Library Overview&lt;/h4&gt; &#xA;&lt;p&gt;Get a high-level understanding of the library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This file contains the entire codebase of library. Please provide a comprehensive overview of the library, including its main purpose, key features, and overall architecture.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to modify these prompts based on your specific needs and the capabilities of the AI tool you&#39;re using.&lt;/p&gt; &#xA;&lt;h3&gt;Output File Format&lt;/h3&gt; &#xA;&lt;p&gt;Repomix generates a single file with clear separators between different parts of your codebase.&lt;br&gt; To enhance AI comprehension, the output file begins with an AI-oriented explanation, making it easier for AI models to understand the context and structure of the packed repository.&lt;/p&gt; &#xA;&lt;h4&gt;Plain Text Format (default)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;This file is a merged representation of the entire codebase, combining all repository files into a single document.&#xA;&#xA;================================================================&#xA;File Summary&#xA;================================================================&#xA;(Metadata and usage AI instructions)&#xA;&#xA;================================================================&#xA;Repository Structure&#xA;================================================================&#xA;src/&#xA;  cli/&#xA;    cliOutput.ts&#xA;    index.ts&#xA;  config/&#xA;    configLoader.ts&#xA;&#xA;(...remaining directories)&#xA;&#xA;================================================================&#xA;Repository Files&#xA;================================================================&#xA;&#xA;================&#xA;File: src/index.js&#xA;================&#xA;// File contents here&#xA;&#xA;================&#xA;File: src/utils.js&#xA;================&#xA;// File contents here&#xA;&#xA;(...remaining files)&#xA;&#xA;================================================================&#xA;Instruction&#xA;================================================================&#xA;(Custom instructions from `output.instructionFilePath`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;XML Format&lt;/h4&gt; &#xA;&lt;p&gt;To generate output in XML format, use the &lt;code&gt;--style xml&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --style xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The XML format structures the content in a hierarchical manner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;This file is a merged representation of the entire codebase, combining all repository files into a single document.&#xA;&#xA;&amp;lt;file_summary&amp;gt;&#xA;(Metadata and usage AI instructions)&#xA;&amp;lt;/file_summary&amp;gt;&#xA;&#xA;&amp;lt;repository_structure&amp;gt;&#xA;src/&#xA;  cli/&#xA;    cliOutput.ts&#xA;    index.ts&#xA;&#xA;(...remaining directories)&#xA;&amp;lt;/repository_structure&amp;gt;&#xA;&#xA;&amp;lt;repository_files&amp;gt;&#xA;&amp;lt;file path=&#34;src/index.js&#34;&amp;gt;&#xA;// File contents here&#xA;&amp;lt;/file&amp;gt;&#xA;&#xA;(...remaining files)&#xA;&amp;lt;/repository_files&amp;gt;&#xA;&#xA;&amp;lt;instruction&amp;gt;&#xA;(Custom instructions from `output.instructionFilePath`)&#xA;&amp;lt;/instruction&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For those interested in the potential of XML tags in AI contexts:&lt;br&gt; &lt;a href=&#34;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags&#34;&gt;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When your prompts involve multiple components like context, instructions, and examples, XML tags can be a game-changer. They help Claude parse your prompts more accurately, leading to higher-quality outputs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This means that the XML output from Repomix is not just a different format, but potentially a more effective way to feed your codebase into AI systems for analysis, code review, or other tasks.&lt;/p&gt; &#xA;&lt;h4&gt;Markdown Format&lt;/h4&gt; &#xA;&lt;p&gt;To generate output in Markdown format, use the &lt;code&gt;--style markdown&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --style markdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Markdown format structures the content in a hierarchical manner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;This file is a merged representation of the entire codebase, combining all repository files into a single document.&#xA;&#xA;# File Summary&#xA;(Metadata and usage AI instructions)&#xA;&#xA;# Repository Structure&#xA;```&#xA;src/&#xA;  cli/&#xA;    cliOutput.ts&#xA;    index.ts&#xA;```&#xA;(...remaining directories)&#xA;&#xA;# Repository Files&#xA;&#xA;## File: src/index.js&#xA;```&#xA;// File contents here&#xA;```&#xA;&#xA;(...remaining files)&#xA;&#xA;# Instruction&#xA;(Custom instructions from `output.instructionFilePath`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This format provides a clean, readable structure that is both human-friendly and easily parseable by AI systems.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-v, --version&lt;/code&gt;: Show tool version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-o, --output &amp;lt;file&amp;gt;&lt;/code&gt;: Specify the output file name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--include &amp;lt;patterns&amp;gt;&lt;/code&gt;: List of include patterns (comma-separated)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-i, --ignore &amp;lt;patterns&amp;gt;&lt;/code&gt;: Additional ignore patterns (comma-separated)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-c, --config &amp;lt;path&amp;gt;&lt;/code&gt;: Path to a custom config file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--style &amp;lt;style&amp;gt;&lt;/code&gt;: Specify the output style (&lt;code&gt;plain&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--top-files-len &amp;lt;number&amp;gt;&lt;/code&gt;: Number of top files to display in the summary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output-show-line-numbers&lt;/code&gt;: Show line numbers in the output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--remote &amp;lt;url&amp;gt;&lt;/code&gt;: Process a remote Git repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt;: Enable verbose logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix -o custom-output.txt&#xA;repomix -i &#34;*.log,tmp&#34; -v&#xA;repomix -c ./custom-config.json&#xA;repomix --style xml&#xA;repomix --remote https://github.com/user/repo.git&#xA;npx repomix src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating Repomix&lt;/h3&gt; &#xA;&lt;p&gt;To update a globally installed Repomix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using npm&#xA;npm update -g repomix&#xA;&#xA;# Using yarn&#xA;yarn global upgrade repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;npx repomix&lt;/code&gt; is generally more convenient as it always uses the latest version.&lt;/p&gt; &#xA;&lt;h3&gt;Remote Repository Processing&lt;/h3&gt; &#xA;&lt;p&gt;Repomix supports processing remote Git repositories without the need for manual cloning. This feature allows you to quickly analyze any public Git repository with a single command.&lt;/p&gt; &#xA;&lt;p&gt;To process a remote repository, use the &lt;code&gt;--remote&lt;/code&gt; option followed by the repository URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --remote https://github.com/user/repo.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use GitHub&#39;s shorthand format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --remote user/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;repomix.config.json&lt;/code&gt; file in your project root for custom configurations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an explanation of the configuration options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.filePath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the output file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;repomix-output.txt&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The style of the output (&lt;code&gt;plain&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;plain&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.headerText&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom text to include in the file header&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.instructionFilePath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to a file containing detailed custom instructions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.removeComments&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to remove comments from supported file types&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.removeEmptyLines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to remove empty lines from the output&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.showLineNumbers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to add line numbers to each line in the output&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.topFilesLength&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number of top files to display in the summary. If set to 0, no summary will be displayed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;include&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Patterns of files to include (using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore.useGitignore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to use patterns from the project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore.useDefaultPatterns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to use default ignore patterns&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore.customPatterns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional patterns to ignore (using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;security.enableSecurityCheck&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to perform security checks on files&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;output&#34;: {&#xA;    &#34;filePath&#34;: &#34;repomix-output.xml&#34;,&#xA;    &#34;style&#34;: &#34;xml&#34;,&#xA;    &#34;headerText&#34;: &#34;Custom header information for the packed file.&#34;,&#xA;    &#34;removeComments&#34;: false,&#xA;    &#34;removeEmptyLines&#34;: false,&#xA;    &#34;showLineNumbers&#34;: false,&#xA;    &#34;topFilesLength&#34;: 5&#xA;  },&#xA;  &#34;include&#34;: [&#34;**/*&#34;],&#xA;  &#34;ignore&#34;: {&#xA;    &#34;useGitignore&#34;: true,&#xA;    &#34;useDefaultPatterns&#34;: true,&#xA;    &#34;customPatterns&#34;: [&#34;additional-folder&#34;, &#34;**/*.log&#34;]&#xA;  },&#xA;  &#34;security&#34;: {&#xA;    &#34;enableSecurityCheck&#34;: true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global Configuration&lt;/h3&gt; &#xA;&lt;p&gt;To create a global configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --init --global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The global configuration file will be created in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;%LOCALAPPDATA%\Repomix\repomix.config.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS/Linux: &lt;code&gt;$XDG_CONFIG_HOME/repomix/repomix.config.json&lt;/code&gt; or &lt;code&gt;~/.config/repomix/repomix.config.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Local configuration (if present) takes precedence over global configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Include and Ignore&lt;/h3&gt; &#xA;&lt;h4&gt;Include Patterns&lt;/h4&gt; &#xA;&lt;p&gt;Repomix now supports specifying files to include using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;. This allows for more flexible and powerful file selection:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;**/*.js&lt;/code&gt; to include all JavaScript files in any directory&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;src/**/*&lt;/code&gt; to include all files within the &lt;code&gt;src&lt;/code&gt; directory and its subdirectories&lt;/li&gt; &#xA; &lt;li&gt;Combine multiple patterns like &lt;code&gt;[&#34;src/**/*.js&#34;, &#34;**/*.md&#34;]&lt;/code&gt; to include JavaScript files in &lt;code&gt;src&lt;/code&gt; and all Markdown files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ignore Patterns&lt;/h4&gt; &#xA;&lt;p&gt;Repomix offers multiple methods to set ignore patterns for excluding specific files or directories during the packing process:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;.gitignore&lt;/strong&gt;: By default, patterns listed in your project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file are used. This behavior can be controlled with the &lt;code&gt;ignore.useGitignore&lt;/code&gt; setting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default patterns&lt;/strong&gt;: Repomix includes a default list of commonly excluded files and directories (e.g., node_modules, .git, binary files). This feature can be controlled with the &lt;code&gt;ignore.useDefaultPatterns&lt;/code&gt; setting. Please see &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/src/config/defaultIgnore.ts&#34;&gt;defaultIgnore.ts&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.repomixignore&lt;/strong&gt;: You can create a &lt;code&gt;.repomixignore&lt;/code&gt; file in your project root to define Repomix-specific ignore patterns. This file follows the same format as &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom patterns&lt;/strong&gt;: Additional ignore patterns can be specified using the &lt;code&gt;ignore.customPatterns&lt;/code&gt; option in the configuration file. You can overwrite this setting with the &lt;code&gt;-i, --ignore&lt;/code&gt; command line option.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Priority Order (from highest to lowest):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Custom patterns &lt;code&gt;ignore.customPatterns&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.repomixignore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt; (if &lt;code&gt;ignore.useGitignore&lt;/code&gt; is true)&lt;/li&gt; &#xA; &lt;li&gt;Default patterns (if &lt;code&gt;ignore.useDefaultPatterns&lt;/code&gt; is true)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This approach allows for flexible file exclusion configuration based on your project&#39;s needs. It helps optimize the size of the generated pack file by ensuring the exclusion of security-sensitive files and large binary files, while preventing the leakage of confidential information.&lt;/p&gt; &#xA;&lt;p&gt;Note: Binary files are not included in the packed output by default, but their paths are listed in the &#34;Repository Structure&#34; section of the output file. This provides a complete overview of the repository structure while keeping the packed file efficient and text-based.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Instruction&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;output.instructionFilePath&lt;/code&gt; option allows you to specify a separate file containing detailed instructions or context about your project. This allows AI systems to understand the specific context and requirements of your project, potentially leading to more relevant and tailored analysis or suggestions.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how you might use this feature:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a file named &lt;code&gt;repomix-instruction.md&lt;/code&gt; in your project root:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Coding Guidelines&#xA;- Follow the Airbnb JavaScript Style Guide&#xA;- Suggest splitting files into smaller, focused units when appropriate&#xA;- Add comments for non-obvious logic. Keep all text in English&#xA;- All new features should have corresponding unit tests&#xA;&#xA;# Generate Comprehensive Output&#xA;- Include all content without abbreviation, unless specified otherwise&#xA;- Optimize for handling large codebases while maintaining output quality&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In your &lt;code&gt;repomix.config.json&lt;/code&gt;, add the &lt;code&gt;instructionFilePath&lt;/code&gt; option:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json5&#34;&gt;{&#xA;  &#34;output&#34;: {&#xA;    &#34;instructionFilePath&#34;: &#34;repomix-instruction.md&#34;,&#xA;    // other options...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When Repomix generates the output, it will include the contents of &lt;code&gt;repomix-instruction.md&lt;/code&gt; in a dedicated section.&lt;/p&gt; &#xA;&lt;p&gt;Note: The instruction content is appended at the end of the output file. This placement can be particularly effective for AI systems. For those interested in understanding why this might be beneficial, Anthropic provides some insights in their documentation:&lt;br&gt; &lt;a href=&#34;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips&#34;&gt;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Put long-form data at the top: Place your long documents and inputs (~20K+ tokens) near the top of your prompt, above your query, instructions, and examples. This can significantly improve Claude&#39;s performance across all models. Queries at the end can improve response quality by up to 30% in tests, especially with complex, multi-document inputs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Comment Removal&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;output.removeComments&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, Repomix will attempt to remove comments from supported file types. This feature can help reduce the size of the output file and focus on the essential code content.&lt;/p&gt; &#xA;&lt;p&gt;Supported languages include:&lt;br&gt; HTML, CSS, JavaScript, TypeScript, Vue, Svelte, Python, PHP, Ruby, C, C#, Java, Go, Rust, Swift, Kotlin, Dart, Shell, and YAML.&lt;/p&gt; &#xA;&lt;p&gt;Note: The comment removal process is conservative to avoid accidentally removing code. In complex cases, some comments might be retained.&lt;/p&gt; &#xA;&lt;h2&gt;🔍 Security Check&lt;/h2&gt; &#xA;&lt;p&gt;Repomix includes a security check feature that uses &lt;a href=&#34;https://github.com/secretlint/secretlint&#34;&gt;Secretlint&lt;/a&gt; to detect potentially sensitive information in your files. This feature helps you identify possible security risks before sharing your packed repository.&lt;/p&gt; &#xA;&lt;p&gt;The security check results will be displayed in the CLI output after the packing process is complete. If any suspicious files are detected, you&#39;ll see a list of these files along with a warning message.&lt;/p&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;🔍 Security Check:&#xA;──────────────────&#xA;2 suspicious file(s) detected:&#xA;1. src/utils/test.txt&#xA;2. tests/utils/secretLintUtils.test.ts&#xA;&#xA;Please review these files for potentially sensitive information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Repomix&#39;s security check feature is enabled. You can disable it by setting &lt;code&gt;security.enableSecurityCheck&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;security&#34;: {&#xA;    &#34;enableSecurityCheck&#34;: false&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤝 Contribution&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community! To get started, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/yamadashy/repomix/graphs/contributors&#34;&gt; &lt;img alt=&#34;contributors&#34; src=&#34;https://contrib.rocks/image?repo=yamadashy/repomix&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/#-repomix&#34; target=&#34;_blank&#34;&gt; Back To Top &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>browserbase/stagehand</title>
    <updated>2024-11-03T01:37:47Z</updated>
    <id>tag:github.com,2024-11-03:/browserbase/stagehand</id>
    <link href="https://github.com/browserbase/stagehand" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI web browsing framework focused on simplicity and extensibility.&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;toc&#34; align=&#34;center&#34;&gt; &#xA; &lt;ul style=&#34;list-style: none&#34;&gt; &#xA;  &lt;summary&gt; &lt;h1&gt; 🤘 Stagehand &lt;/h1&gt; &lt;/summary&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; An AI web browsing framework focused on simplicity and extensibility. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/browserbase/stagehand/actions/workflows/ci.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/browserbase/stagehand/actions/workflows/ci.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@browserbasehq/stagehand&#34;&gt;&lt;img alt=&#34;NPM&#34; src=&#34;https://img.shields.io/npm/v/@browserbasehq/stagehand.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/browserbase/stagehand/raw/main/license&#34;&gt;&lt;img alt=&#34;MIT License&#34; src=&#34;https://img.shields.io/badge/license-MIT-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/stagehand-dev/shared_invite/zt-2tdncfgkk-fF8y5U0uJzR2y2_M9c9OJA&#34;&gt;&lt;img alt=&#34;Slack Community&#34; src=&#34;https://img.shields.io/badge/slack-Join%20our%20community-FEC89A.svg?logo=slack&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#api-reference&#34;&gt;API Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#act&#34;&gt;act()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#extract&#34;&gt;extract()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#observe&#34;&gt;observe()&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#model-support&#34;&gt;Model Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#how-it-works&#34;&gt;How It Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#prompting-tips&#34;&gt;Prompting Tips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &amp;gt; &lt;code&gt;Stagehand&lt;/code&gt; is currently available as an early release, and we&#39;re actively seeking feedback from the community. Please join our &lt;a href=&#34;https://join.slack.com/t/stagehand-dev/shared_invite/zt-2tdncfgkk-fF8y5U0uJzR2y2_M9c9OJA&#34;&gt;Slack community&lt;/a&gt; to stay updated on the latest developments and provide feedback.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;Stagehand is the AI-powered successor to &lt;a href=&#34;https://github.com/microsoft/playwright&#34;&gt;Playwright&lt;/a&gt;, offering three simple APIs (&lt;code&gt;act&lt;/code&gt;, &lt;code&gt;extract&lt;/code&gt;, and &lt;code&gt;observe&lt;/code&gt;) that provide the building blocks for natural language driven web automation.&lt;/p&gt; &#xA;&lt;p&gt;The goal of Stagehand is to provide a lightweight, configurable framework, without overly complex abstractions, as well as modular support for different models and model providers. It&#39;s not going to order you a pizza, but it will help you reliably automate the web.&lt;/p&gt; &#xA;&lt;p&gt;Each Stagehand function takes in an atomic instruction, such as &lt;code&gt;act(&#34;click the login button&#34;)&lt;/code&gt; or &lt;code&gt;extract(&#34;find the red shoes&#34;)&lt;/code&gt;, generates the appropriate Playwright code to accomplish that instruction, and executes it.&lt;/p&gt; &#xA;&lt;p&gt;Instructions should be atomic to increase reliability, and step planning should be handled by the higher level agent. You can use &lt;code&gt;observe()&lt;/code&gt; to get a suggested list of actions that can be taken on the current page, and then use those to ground your step planning prompts.&lt;/p&gt; &#xA;&lt;p&gt;Stagehand is &lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#license&#34;&gt;open source&lt;/a&gt; and maintained by the &lt;a href=&#34;https://browserbase.com&#34;&gt;Browserbase&lt;/a&gt; team. We believe that by enabling more developers to build reliable web automations, we&#39;ll expand the market of developers who benefit from our headless browser infrastructure. This is the framework that we wished we had while tinkering on our own applications, and we&#39;re excited to share it with you.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;1. Install the Stagehand package&lt;/h3&gt; &#xA;&lt;p&gt;We also install zod to power typed extraction&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @browserbasehq/stagehand zod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Configure your model provider&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to provide your API Key for the model provider you&#39;d like to use. The default model provider is OpenAI, but you can also use Anthropic or others. More information on supported models can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/#api-reference&#34;&gt;API Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that an OpenAI API Key or Anthropic API key is accessible in your local environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export OPENAI_API_KEY=sk-...&#xA;export ANTHROPIC_API_KEY=sk-...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Create a Stagehand Instance&lt;/h3&gt; &#xA;&lt;p&gt;If you plan to run the browser locally, you&#39;ll also need to install Playwright&#39;s browser dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm exec playwright install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can create a Stagehand instance like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Stagehand } from &#34;@browserbasehq/stagehand&#34;;&#xA;import { z } from &#34;zod&#34;;&#xA;&#xA;const stagehand = new Stagehand({&#xA;  env: &#34;LOCAL&#34;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you plan to run the browser remotely, you&#39;ll need to set a Browserbase API Key and Project ID.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export BROWSERBASE_API_KEY=...&#xA;export BROWSERBASE_PROJECT_ID=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Stagehand } from &#34;@browserbasehq/stagehand&#34;;&#xA;import { z } from &#34;zod&#34;;&#xA;&#xA;const stagehand = new Stagehand({&#xA;  env: &#34;BROWSERBASE&#34;,&#xA;  enableCaching: true,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Run your first automation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await stagehand.init();&#xA;await stagehand.page.goto(&#34;https://github.com/browserbase/stagehand&#34;);&#xA;await stagehand.act({ action: &#34;click on the contributors&#34; });&#xA;const contributor = await stagehand.extract({&#xA;  instruction: &#34;extract the top contributor&#34;,&#xA;  schema: z.object({&#xA;    username: z.string(),&#xA;    url: z.string(),&#xA;  }),&#xA;});&#xA;console.log(`Our favorite contributor is ${contributor.username}`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simple snippet will open a browser, navigate to the Stagehand repo, and log the top contributor.&lt;/p&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;Stagehand()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This constructor is used to create an instance of Stagehand.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;env&lt;/code&gt;: &lt;code&gt;&#39;LOCAL&#39;&lt;/code&gt; or &lt;code&gt;&#39;BROWSERBASE&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;: an &lt;code&gt;integer&lt;/code&gt; that enables several levels of logging during automation: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: limited to no logging&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: SDK-level logging&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: LLM-client level logging (most granular)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;debugDom&lt;/code&gt;: a &lt;code&gt;boolean&lt;/code&gt; that draws bounding boxes around elements presented to the LLM during automation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;domSettleTimeoutMs&lt;/code&gt;: an &lt;code&gt;integer&lt;/code&gt; that specifies the timeout in milliseconds for waiting for the DOM to settle. Defaults to 30000 (30 seconds).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;enableCaching&lt;/code&gt;: a &lt;code&gt;boolean&lt;/code&gt; that enables caching of LLM responses. When set to &lt;code&gt;true&lt;/code&gt;, the LLM requests will be cached on disk and reused for identical requests. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An instance of the &lt;code&gt;Stagehand&lt;/code&gt; class configured with the specified options.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const stagehand = new Stagehand();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;init()&lt;/code&gt; asynchronously initializes the Stagehand instance. It should be called before any other methods.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;modelName&lt;/code&gt;: (optional) an &lt;code&gt;AvailableModel&lt;/code&gt; string to specify the model to use. This will be used for all other methods unless overridden. Defaults to &lt;code&gt;&#34;gpt-4o&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;code&gt;Promise&lt;/code&gt; that resolves to an object containing: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;debugUrl&lt;/code&gt;: a &lt;code&gt;string&lt;/code&gt; representing the URL for live debugging. This is only available when using a Browserbase browser.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;sessionUrl&lt;/code&gt;: a &lt;code&gt;string&lt;/code&gt; representing the session URL. This is only available when using a Browserbase browser.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await stagehand.init({ modelName: &#34;gpt-4o&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;act()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;act()&lt;/code&gt; allows Stagehand to interact with a web page. Provide an &lt;code&gt;action&lt;/code&gt; like &lt;code&gt;&#34;search for &#39;x&#39;&#34;&lt;/code&gt;, or &lt;code&gt;&#34;select the cheapest flight presented&#34;&lt;/code&gt; (small atomic goals perform the best).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: a &lt;code&gt;string&lt;/code&gt; describing the action to perform, e.g., &lt;code&gt;&#34;search for &#39;x&#39;&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;modelName&lt;/code&gt;: (optional) an &lt;code&gt;AvailableModel&lt;/code&gt; string to specify the model to use.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useVision&lt;/code&gt;: (optional) a &lt;code&gt;boolean&lt;/code&gt; or &lt;code&gt;&#34;fallback&#34;&lt;/code&gt; to determine if vision-based processing should be used. Defaults to &lt;code&gt;&#34;fallback&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;code&gt;Promise&lt;/code&gt; that resolves to an object containing: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;success&lt;/code&gt;: a &lt;code&gt;boolean&lt;/code&gt; indicating if the action was completed successfully.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: a &lt;code&gt;string&lt;/code&gt; providing details about the action&#39;s execution.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: a &lt;code&gt;string&lt;/code&gt; describing the action performed.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await stagehand.act({ action: &#34;click on add to cart&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;extract()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;extract()&lt;/code&gt; grabs structured text from the current page using &lt;a href=&#34;https://github.com/colinhacks/zod&#34;&gt;zod&lt;/a&gt;. Given instructions and &lt;code&gt;schema&lt;/code&gt;, you will receive structured data. Unlike some extraction libraries, stagehand can extract any information on a page, not just the main article contents.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;instruction&lt;/code&gt;: a &lt;code&gt;string&lt;/code&gt; providing instructions for extraction.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;schema&lt;/code&gt;: a &lt;code&gt;z.AnyZodObject&lt;/code&gt; defining the structure of the data to extract.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;modelName&lt;/code&gt;: (optional) an &lt;code&gt;AvailableModel&lt;/code&gt; string to specify the model to use.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;code&gt;Promise&lt;/code&gt; that resolves to the structured data as defined by the provided &lt;code&gt;schema&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const price = await stagehand.extract({&#xA;  instruction: &#34;extract the price of the item&#34;,&#xA;  schema: z.object({&#xA;    price: z.number(),&#xA;  }),&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;observe()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &amp;gt; &lt;code&gt;observe()&lt;/code&gt; currently only evaluates the first chunk in the page.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;observe()&lt;/code&gt; is used to get a list of actions that can be taken on the current page. It&#39;s useful for adding context to your planning step, or if you unsure of what page you&#39;re on.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for a specific element, you can also pass in an instruction to observe via: &lt;code&gt;observe({ instruction: &#34;{your instruction}&#34;})&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;instruction&lt;/code&gt;: a &lt;code&gt;string&lt;/code&gt; providing instructions for the observation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;useVision&lt;/code&gt;: (optional) a &lt;code&gt;boolean&lt;/code&gt; or &lt;code&gt;&#34;fallback&#34;&lt;/code&gt; to determine if vision-based processing should be used. Defaults to &lt;code&gt;&#34;fallback&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;code&gt;Promise&lt;/code&gt; that resolves to an array of &lt;code&gt;string&lt;/code&gt;s representing the actions that can be taken on the current page.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const actions = await stagehand.observe();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;page&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;page&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; are instances of Playwright&#39;s &lt;code&gt;Page&lt;/code&gt; and &lt;code&gt;BrowserContext&lt;/code&gt; respectively. Use these methods to interact with the Playwright instance that Stagehand is using. Most commonly, you&#39;ll use &lt;code&gt;page.goto()&lt;/code&gt; to navigate to a URL.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await stagehand.page.goto(&#34;https://github.com/browserbase/stagehand&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;log()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;log()&lt;/code&gt; is used to print a message to the browser console. These messages will be persisted in the Browserbase session logs, and can be used to debug sessions after they&#39;ve completed.&lt;/p&gt; &#xA;&lt;p&gt;Make sure the log level is above the verbose level you set when initializing the Stagehand instance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;stagehand.log(&#34;Hello, world!&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Model Support&lt;/h2&gt; &#xA;&lt;p&gt;Stagehand leverages a generic LLM client architecture to support various language models from different providers. This design allows for flexibility, enabling the integration of new models with minimal changes to the core system. Different models work better for different tasks, so you can choose the model that best suits your needs.&lt;/p&gt; &#xA;&lt;h4&gt;Currently Supported Models&lt;/h4&gt; &#xA;&lt;p&gt;Stagehand currently supports the following models from OpenAI and Anthropic:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;OpenAI Models:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;gpt-4o&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gpt-4o-mini&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gpt-4o-2024-08-06&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Anthropic Models:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;claude-3-5-sonnet-latest&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;claude-3-5-sonnet-20240620&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;claude-3-5-sonnet-20241022&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These models can be specified when initializing the &lt;code&gt;Stagehand&lt;/code&gt; instance or when calling methods like &lt;code&gt;act()&lt;/code&gt; and &lt;code&gt;extract()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;The SDK has two major phases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Processing the DOM (including chunking - &lt;em&gt;see below&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Taking LLM powered actions based on the current state of the DOM.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;DOM processing&lt;/h3&gt; &#xA;&lt;p&gt;Stagehand uses a combination of techniques to prepare the DOM.&lt;/p&gt; &#xA;&lt;p&gt;The DOM Processing steps look as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Via Playwright, inject a script into the DOM accessible by the SDK that can run processing.&lt;/li&gt; &#xA; &lt;li&gt;Crawl the DOM and create a list of candidate elements. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Candidate elements are either leaf elements (DOM elements that contain actual user facing substance), or are interactive elements.&lt;/li&gt; &#xA;   &lt;li&gt;Interactive elements are determined by a combination of roles and HTML tags.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Candidate elements that are not active, visible, or at the top of the DOM are discarded. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The LLM should only receive elements it can faithfully act on on behalf of the agent/user.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For each candidate element, an xPath is generated. this guarantees that if this element is picked by the LLM, we&#39;ll be able to reliably target it.&lt;/li&gt; &#xA; &lt;li&gt;Return both the list of candidate elements, as well as the map of elements to xPath selectors across the browser back to the SDK, to be analyzed by the LLM.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Chunking&lt;/h4&gt; &#xA;&lt;p&gt;While LLMs will continue to increase context window length and reduce latency, giving any reasoning system less stuff to think about should make it more reliable. As a result, DOM processing is done in chunks in order to keep the context small per inference call. In order to chunk, the SDK considers a candidate element that starts in a section of the viewport to be a part of that chunk. In the future, padding will be added to ensure that an individual chunk does not lack relevant context. See this diagram for how it looks:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/docs/media/chunks.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Vision&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;act()&lt;/code&gt; and &lt;code&gt;observe()&lt;/code&gt; methods can take a &lt;code&gt;useVision&lt;/code&gt; flag. If this is set to &lt;code&gt;true&lt;/code&gt;, the LLM will be provided with a annotated screenshot of the current page to identify which elements to act on. This is useful for complex DOMs that the LLM has a hard time reasoning about, even after processing and chunking. By default, this flag is set to &lt;code&gt;&#34;fallback&#34;&lt;/code&gt;, which means that if the LLM fails to successfully identify a single element, Stagehand will retry the attempt using vision.&lt;/p&gt; &#xA;&lt;h3&gt;LLM analysis&lt;/h3&gt; &#xA;&lt;p&gt;Now we have a list of candidate elements and a way to select them. We can present those elements with additional context to the LLM for extraction or action. While untested on a large scale, presenting a &#34;numbered list of elements&#34; guides the model to not treat the context as a full DOM, but as a list of related but independent elements to operate on.&lt;/p&gt; &#xA;&lt;p&gt;In the case of action, we ask the LLM to write a playwright method in order to do the correct thing. In our limited testing, playwright syntax is much more effective than relying on built in javascript APIs, possibly due to tokenization.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, we use the LLM to write future instructions to itself to help manage it&#39;s progress and goals when operating across chunks.&lt;/p&gt; &#xA;&lt;h2&gt;Prompting Tips&lt;/h2&gt; &#xA;&lt;p&gt;Prompting Stagehand is more literal and atomic than other higher level frameworks, including agentic frameworks. Here are some guidelines to help you craft effective prompts:&lt;/p&gt; &#xA;&lt;h3&gt;Do:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use specific and concise actions&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await stagehand.act({ action: &#34;click the login button&#34; });&#xA;&#xA;const productInfo = await stagehand.extract({&#xA;  instruction: &#34;find the red shoes&#34;,&#xA;  schema: z.object({&#xA;    productName: z.string(),&#xA;    price: z.number(),&#xA;  }),&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Break down complex tasks into smaller, atomic steps&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instead of combining actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Avoid this&#xA;await stagehand.act({ action: &#34;log in and purchase the first item&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Split them into individual steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await stagehand.act({ action: &#34;click the login button&#34; });&#xA;// ...additional steps to log in...&#xA;await stagehand.act({ action: &#34;click on the first item&#34; });&#xA;await stagehand.act({ action: &#34;click the purchase button&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;observe()&lt;/code&gt; to get actionable suggestions from the current page&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const actions = await stagehand.observe();&#xA;console.log(&#34;Possible actions:&#34;, actions);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use broad or ambiguous instructions&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Too vague&#xA;await stagehand.act({ action: &#34;find something interesting on the page&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Combine multiple actions into one instruction&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Avoid combining actions&#xA;await stagehand.act({ action: &#34;fill out the form and submit it&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Expect Stagehand to perform high-level planning or reasoning&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Outside Stagehand&#39;s scope&#xA;await stagehand.act({ action: &#34;book the cheapest flight available&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By following these guidelines, you&#39;ll increase the reliability and effectiveness of your web automations with Stagehand. Remember, Stagehand excels at executing precise, well-defined actions so keeping your instructions atomic will lead to the best outcomes.&lt;/p&gt; &#xA;&lt;p&gt;We leave the agentic behaviour to higher-level agentic systems which can use Stagehand as a tool.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;At a high level, we&#39;re focused on improving reliability, speed, and cost in that order of priority.&lt;/p&gt; &#xA;&lt;p&gt;You can see the roadmap &lt;a href=&#34;https://raw.githubusercontent.com/browserbase/stagehand/main/ROADMAP.md&#34;&gt;here&lt;/a&gt;. Looking to contribute? Read on!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; We highly value contributions to Stagehand! For support or code review, please join our &lt;a href=&#34;https://join.slack.com/t/stagehand-dev/shared_invite/zt-2tdncfgkk-fF8y5U0uJzR2y2_M9c9OJA&#34;&gt;Slack community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, clone the repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:browserbase/stagehand.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure you have the &lt;code&gt;.env&lt;/code&gt; file as documented above in the Getting Started section.&lt;/p&gt; &#xA;&lt;p&gt;Then, run the example script &lt;code&gt;npm run example&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development tips&lt;/h3&gt; &#xA;&lt;p&gt;A good development loop is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Try things in the example file&lt;/li&gt; &#xA; &lt;li&gt;Use that to make changes to the SDK&lt;/li&gt; &#xA; &lt;li&gt;Write evals that help validate your changes&lt;/li&gt; &#xA; &lt;li&gt;Make sure you don&#39;t break existing evals!&lt;/li&gt; &#xA; &lt;li&gt;Open a PR and get it reviewed by the team.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running evals&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need a Braintrust API key to run evals&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-.env&#34;&gt;BRAINTRUST_API_KEY=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, you can run the eval using &lt;code&gt;npm run evals&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Adding new evals&lt;/h3&gt; &#xA;&lt;p&gt;Running all evals can take some time. We have a convenience script &lt;code&gt;example.ts&lt;/code&gt; where you can develop your new single eval before adding it to the set of all evals.&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;npm run example&lt;/code&gt; to execute and iterate on the eval you are currently developing.&lt;/p&gt; &#xA;&lt;h4&gt;Adding a New Model&lt;/h4&gt; &#xA;&lt;p&gt;To add a new model to Stagehand, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Define the Model&lt;/strong&gt;: Add the new model name to the &lt;code&gt;AvailableModel&lt;/code&gt; type in the &lt;code&gt;LLMProvider.ts&lt;/code&gt; file. This ensures that the model is recognized by the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Map the Model to a Provider&lt;/strong&gt;: Update the &lt;code&gt;modelToProviderMap&lt;/code&gt; in the &lt;code&gt;LLMProvider&lt;/code&gt; class to associate the new model with its corresponding provider. This mapping is crucial for determining which client to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Implement the Client&lt;/strong&gt;: If the new model requires a new client, implement a class that adheres to the &lt;code&gt;LLMClient&lt;/code&gt; interface. This class should define all necessary methods, such as &lt;code&gt;createChatCompletion&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update the &lt;code&gt;getClient&lt;/code&gt; Method&lt;/strong&gt;: Modify the &lt;code&gt;getClient&lt;/code&gt; method in the &lt;code&gt;LLMProvider&lt;/code&gt; class to return an instance of the new client when the new model is requested.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building the SDK&lt;/h3&gt; &#xA;&lt;p&gt;Stagehand uses &lt;a href=&#34;https://github.com/egoist/tsup&#34;&gt;tsup&lt;/a&gt; to build the SDK and vanilla &lt;code&gt;esbuild&lt;/code&gt; to build scripts that run in the DOM.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;run &lt;code&gt;npm run build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;npm pack&lt;/code&gt; to get a tarball for distribution&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project heavily relies on &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; as a resilient backbone to automate the web. It also would not be possible without the awesome techniques and discoveries made by &lt;a href=&#34;https://github.com/reworkd/tarsier&#34;&gt;tarsier&lt;/a&gt;, and &lt;a href=&#34;https://github.com/fuji-web&#34;&gt;fuji-web&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://x.com/jeremypress&#34;&gt;Jeremy Press&lt;/a&gt; wrote the original MVP of Stagehand and continues to be a major ally to the project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2024 Browserbase, Inc.&lt;/p&gt;</summary>
  </entry>
</feed>