<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-23T01:46:45Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mattzcarey/code-review-gpt</title>
    <updated>2023-07-23T01:46:45Z</updated>
    <id>tag:github.com,2023-07-23:/mattzcarey/code-review-gpt</id>
    <link href="https://github.com/mattzcarey/code-review-gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your personal code reviewer powered by LLMs (OpenAI GPT-3.5/4, Llama, Falcon, Azure AI) &amp; Embeddings ‚ö°Ô∏è Improve code quality and catch bugs before you break production üöÄ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Code Review GPT&lt;/h1&gt; &#xA;&lt;h2&gt;We give engineers their weekends back&lt;/h2&gt; &#xA;&lt;p&gt;Code Review GPT uses Large Language Models to review code in your CI/CD pipeline. It helps streamline the code review process by providing feedback on code that may have issues or areas for improvement.&lt;/p&gt; &#xA;&lt;p&gt;It should pick up on common issues such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dead code&lt;/li&gt; &#xA; &lt;li&gt;Exposed secrets&lt;/li&gt; &#xA; &lt;li&gt;Slow or inefficient code&lt;/li&gt; &#xA; &lt;li&gt;Unreadable code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It can also be run locally in your command line to review staged files.&lt;/p&gt; &#xA;&lt;p&gt;Just so you know, this is in alpha and should be used for fun only. It may provide helpful suggestions or they may be completely wrong.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattzcarey/code-review-gpt/assets/77928207/92029baf-f691-465f-8d15-e1363fcb808e&#34;&gt;https://github.com/mattzcarey/code-review-gpt/assets/77928207/92029baf-f691-465f-8d15-e1363fcb808e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;Github CLI (optional for setup tool)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Easy Setup (Github Actions)&lt;/h2&gt; &#xA;&lt;p&gt;In the root of your git repository run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install code-review-gpt&#xA;npx code-review-gpt configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Template CI Usage (GitHub Actions)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- name: Install code-review-gpt&#xA;   run: npm install code-review-gpt&#xA;&#xA;- name: Run code review script&#xA;   run: npx code-review-gpt review --ci&#xA;   env:&#xA;      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;      BASE_SHA: ${{ github.event.pull_request.base.sha }}&#xA;      GITHUB_SHA: ${{ github.sha }}&#xA;      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See templates/pr.yml for an example.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/mattzcarey/code-review-gpt.git&#xA;cd code-review-gpt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up the API key:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rename the .env.example file to .env.&lt;/li&gt; &#xA;   &lt;li&gt;Open the .env file and replace YOUR_API_KEY with your actual OPENAI API key.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When used globally you should run &lt;code&gt;export OPENAI_API_KEY=YOUR_API_KEY&lt;/code&gt; (or similar for your operating system) in your terminal to set the API key.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the application globally (optional):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run build&#xA;npm install -g&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will allow you to run the application from anywhere on your machine.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Not installed globally&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;npm i code-review-gpt &amp;amp;&amp;amp; npx code-review-gpt&lt;/code&gt; in the root directory of a git repository.&lt;/p&gt; &#xA;&lt;h3&gt;Installed globally&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;code-review-gpt&lt;/code&gt; in the root directory of a git repository.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;code-review-gpt review&lt;/code&gt; - Runs the code review on the staged files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;code-review-gpt configure&lt;/code&gt; - Runs a setup tool to configure the application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--ci&lt;/code&gt; - Runs the application in CI mode. This will use the BASE_SHA and GITHUB_SHA environment variables to determine which files to review. It will also use the GITHUB_TOKEN environment variable to create a comment on the pull request with the review results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--model&lt;/code&gt; - The model to use for the review. Defaults to &lt;code&gt;gpt-4&lt;/code&gt;. You can use any openai model you have access to.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make a more clever way to find the exact code to review&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; VSCode extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Use some embeddings and vector store to build a knowledge graph of the repo to make better suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Prompt engineering to refine the prompt&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build a prompt analysis tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support different LLMs... Private, HuggingFace, Azure etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build out the cloud offering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.quivr.app/&#34;&gt; &lt;img src=&#34;https://github.com/mattzcarey/code-review-gpt/assets/77928207/30361248-3159-4535-8efb-b114989ae886&#34; alt=&#34;quivr logo&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.aleios.com/&#34;&gt; &lt;img src=&#34;https://github.com/mattzcarey/code-review-gpt/assets/77928207/a47c2460-b866-433f-a4c9-efb5737d4fed&#34; alt=&#34;aleios logo&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History ‚≠êÔ∏èüëÄ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#mattzcarey/code-review-gpt&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=mattzcarey/code-review-gpt&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>reduxjs/redux-toolkit</title>
    <updated>2023-07-23T01:46:45Z</updated>
    <id>tag:github.com,2023-07-23:/reduxjs/redux-toolkit</id>
    <link href="https://github.com/reduxjs/redux-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official, opinionated, batteries-included toolset for efficient Redux development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redux Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/reduxjs/redux-toolkit/tests.yml?style=flat-square&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@reduxjs/toolkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@reduxjs/toolkit.svg?style=flat-square&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@reduxjs/toolkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@reduxjs/toolkit.svg?style=flat-square&amp;amp;label=RTK+downloads&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The official, opinionated, batteries-included toolset for efficient Redux development&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Formerly known as &#34;Redux Starter Kit&#34;)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using Create React App&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to start new apps with React and Redux Toolkit is by using the &lt;a href=&#34;https://github.com/reduxjs/cra-template-redux&#34;&gt;official Redux+JS template&lt;/a&gt; for &lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;Create React App&lt;/a&gt;, which takes advantage of React Redux&#39;s integration with React components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-react-app my-app --template redux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are a TypeScript user, use &lt;a href=&#34;https://github.com/reduxjs/cra-template-redux-typescript&#34;&gt;cra-template-redux-typescript&lt;/a&gt;, which is based on that template&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-react-app my-app --template redux-typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;An Existing App&lt;/h3&gt; &#xA;&lt;p&gt;Redux Toolkit is available as a package on NPM for use with a module bundler or in a Node application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# NPM&#xA;npm install @reduxjs/toolkit&#xA;&#xA;# Yarn&#xA;yarn add @reduxjs/toolkit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also available as a precompiled UMD package that defines a &lt;code&gt;window.RTK&lt;/code&gt; global variable. The UMD package can be used as a &lt;a href=&#34;https://unpkg.com/@reduxjs/toolkit/dist/redux-toolkit.umd.js&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Redux Toolkit&lt;/strong&gt; package is intended to be the standard way to write Redux logic. It was originally created to help address three common concerns about Redux:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Configuring a Redux store is too complicated&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;I have to add a lot of packages to get Redux to do anything useful&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Redux requires too much boilerplate code&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We can&#39;t solve every use case, but in the spirit of &lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt;, we can try to provide some tools that abstract over the setup process and handle the most common use cases, as well as include some useful utilities that will let the user simplify their application code.&lt;/p&gt; &#xA;&lt;p&gt;Because of that, this package is deliberately limited in scope. It does &lt;em&gt;not&lt;/em&gt; address concepts like &#34;reusable encapsulated Redux modules&#34;, folder or file structures, managing entity relationships in the store, and so on.&lt;/p&gt; &#xA;&lt;p&gt;Redux Toolkit also includes a powerful data fetching and caching capability that we&#39;ve dubbed &#34;RTK Query&#34;. It&#39;s included in the package as a separate set of entry points. It&#39;s optional, but can eliminate the need to hand-write data fetching logic yourself.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s Included&lt;/h2&gt; &#xA;&lt;p&gt;Redux Toolkit includes these APIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;configureStore()&lt;/code&gt;: wraps &lt;code&gt;createStore&lt;/code&gt; to provide simplified configuration options and good defaults. It can automatically combine your slice reducers, add whatever Redux middleware you supply, includes &lt;code&gt;redux-thunk&lt;/code&gt; by default, and enables use of the Redux DevTools Extension.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createReducer()&lt;/code&gt;: lets you supply a lookup table of action types to case reducer functions, rather than writing switch statements. In addition, it automatically uses the &lt;a href=&#34;https://github.com/mweststrate/immer&#34;&gt;&lt;code&gt;immer&lt;/code&gt; library&lt;/a&gt; to let you write simpler immutable updates with normal mutative code, like &lt;code&gt;state.todos[3].completed = true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createAction()&lt;/code&gt;: generates an action creator function for the given action type string. The function itself has &lt;code&gt;toString()&lt;/code&gt; defined, so that it can be used in place of the type constant.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createSlice()&lt;/code&gt;: combines &lt;code&gt;createReducer()&lt;/code&gt; + &lt;code&gt;createAction()&lt;/code&gt;. Accepts an object of reducer functions, a slice name, and an initial state value, and automatically generates a slice reducer with corresponding action creators and action types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createListenerMiddleware()&lt;/code&gt;: lets you define &#34;listener&#34; entries that contain an &#34;effect&#34; callback with additional logic, and a way to specify when that callback should run based on dispatched actions or state changes. A lightweight alternative to Redux async middleware like sagas and observables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createAsyncThunk()&lt;/code&gt;: accepts an action type string and a function that returns a promise, and generates a thunk that dispatches &lt;code&gt;pending/resolved/rejected&lt;/code&gt; action types based on that promise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;createEntityAdapter()&lt;/code&gt;: generates a set of reusable reducers and selectors to manage normalized data in the store&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;createSelector()&lt;/code&gt; utility from the &lt;a href=&#34;https://github.com/reduxjs/reselect&#34;&gt;Reselect&lt;/a&gt; library, re-exported for ease of use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RTK Query&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;RTK Query&lt;/strong&gt; is provided as an optional addon within the &lt;code&gt;@reduxjs/toolkit&lt;/code&gt; package. It is purpose-built to solve the use case of data fetching and caching, supplying a compact, but powerful toolset to define an API interface layer for your app. It is intended to simplify common cases for loading data in a web application, eliminating the need to hand-write data fetching &amp;amp; caching logic yourself.&lt;/p&gt; &#xA;&lt;p&gt;RTK Query is built on top of the Redux Toolkit core for its implementation, using &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; internally for its architecture. Although knowledge of Redux and RTK are not required to use RTK Query, you should explore all of the additional global store management capabilities they provide, as well as installing the &lt;a href=&#34;https://github.com/reduxjs/redux-devtools&#34;&gt;Redux DevTools browser extension&lt;/a&gt;, which works flawlessly with RTK Query to traverse and replay a timeline of your request &amp;amp; cache behavior.&lt;/p&gt; &#xA;&lt;p&gt;RTK Query is included within the installation of the core Redux Toolkit package. It is available via either of the two entry points below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createApi } from &#39;@reduxjs/toolkit/query&#39;&#xA;&#xA;/* React-specific entry point that automatically generates&#xA;   hooks corresponding to the defined endpoints */&#xA;import { createApi } from &#39;@reduxjs/toolkit/query/react&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s included&lt;/h3&gt; &#xA;&lt;p&gt;RTK Query includes these APIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;createApi()&lt;/code&gt;: The core of RTK Query&#39;s functionality. It allows you to define a set of endpoints describe how to retrieve data from a series of endpoints, including configuration of how to fetch and transform that data. In most cases, you should use this once per app, with &#34;one API slice per base URL&#34; as a rule of thumb.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetchBaseQuery()&lt;/code&gt;: A small wrapper around fetch that aims to simplify requests. Intended as the recommended baseQuery to be used in createApi for the majority of users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;ApiProvider /&amp;gt;&lt;/code&gt;: Can be used as a Provider if you do not already have a Redux store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setupListeners()&lt;/code&gt;: A utility used to enable refetchOnMount and refetchOnReconnect behaviors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://redux-toolkit.js.org/rtk-query/overview&#34;&gt;&lt;strong&gt;RTK Query Overview&lt;/strong&gt;&lt;/a&gt; page for more details on what RTK Query is, what problems it solves, and how to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The Redux Toolkit docs are available at &lt;strong&gt;&lt;a href=&#34;https://redux-toolkit.js.org&#34;&gt;https://redux-toolkit.js.org&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/TypeChat</title>
    <updated>2023-07-23T01:46:45Z</updated>
    <id>tag:github.com,2023-07-23:/microsoft/TypeChat</id>
    <link href="https://github.com/microsoft/TypeChat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeChat is a library that makes it easy to build natural language interfaces using types.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TypeChat&lt;/h1&gt; &#xA;&lt;p&gt;TypeChat is a library that makes it easy to build natural language interfaces using types.&lt;/p&gt; &#xA;&lt;p&gt;Building natural language interfaces has traditionally been difficult. These apps often relied on complex decision trees to determine intent and collect the required inputs to take action. Large language models (LLMs) have made this easier by enabling us to take natural language input from a user and match to intent. This has introduced its own challenges including the need to constrain the model&#39;s reply for safety, structure responses from the model for further processing, and ensuring that the reply from the model is valid. Prompt engineering aims to solve these problems, but comes with a steep learning curve and increased fragility as the prompt increases in size.&lt;/p&gt; &#xA;&lt;p&gt;TypeChat replaces &lt;em&gt;prompt engineering&lt;/em&gt; with &lt;em&gt;schema engineering&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply define types that represent the intents supported in your natural language application. That could be as simple as an interface for categorizing sentiment or more complex examples like types for a shopping cart or music application. For example, to add additional intents to a schema, a developer can add additional types into a discriminated union. To make schemas hierarchical, a developer can use a &#34;meta-schema&#34; to choose one or more sub-schemas based on user input.&lt;/p&gt; &#xA;&lt;p&gt;After defining your types, TypeChat takes care of the rest by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Constructing a prompt to the LLM using types.&lt;/li&gt; &#xA; &lt;li&gt;Validating the LLM response conforms to the schema. If the validation fails, repair the non-conforming output through further language model interaction.&lt;/li&gt; &#xA; &lt;li&gt;Summarizing succinctly (without use of a LLM) the instance and confirm that it aligns with user intent.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Types are all you need!&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Install TypeChat:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install typechat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build TypeChat from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see TypeChat in action, we recommend exploring the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TypeChat/main/examples&#34;&gt;TypeChat example projects&lt;/a&gt;. You can try them on your local machine or in a GitHub Codespace.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about TypeChat, visit the &lt;a href=&#34;https://microsoft.github.io/TypeChat&#34;&gt;documentation&lt;/a&gt; which includes more information on TypeChat and how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
</feed>