<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-07T01:42:23Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>victordibia/autogen-ui</title>
    <updated>2023-11-07T01:42:23Z</updated>
    <id>tag:github.com,2023-11-07:/victordibia/autogen-ui</id>
    <link href="https://github.com/victordibia/autogen-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web UI for AutoGen (A Framework Multi-Agent LLM Applications)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AutoGen UI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/victordibia/autogen-ui/main/docs/images/autogenuiscreen.png&#34; alt=&#34;AutoGen UI Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Experimental UI for working with &lt;a href=&#34;https://github.com/microsoft/autogen&#34;&gt;AutoGen&lt;/a&gt; agents, based on the &lt;a href=&#34;https://github.com/microsoft/autogen&#34;&gt;AutoGen&lt;/a&gt; library. The UI is built using Next.js and web apis built using FastApi.&lt;/p&gt; &#xA;&lt;h2&gt;Why AutoGen UI?&lt;/h2&gt; &#xA;&lt;p&gt;AutoGen is a framework that enables the development of LLM applications using multiple agents that can converse with each other to solve complex tasks. A UI can help in the development of such applications by enabling rapid prototypingand testing and debugging of agents/agent flows (defining, composing etc) inspecting agent behaviors, and agent outcomes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is early work in progress.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note that you will have to setup your OPENAI_API_KEY or general llm config using an environment variable. Also See this article for how Autogen supports multiple &lt;a href=&#34;https://microsoft.github.io/autogen/docs/FAQ/#set-your-api-endpoints&#34;&gt;llm providers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export OPENAI_API_KEY=&amp;lt;your key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Install dependencies. Python 3.9+ is required. You can install from pypi using pip.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install autogenui .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to install from source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:victordibia/autogen-ui.git&#xA;cd autogenui&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run ui server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;autogenui # or with --port 8081&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:8081&#34;&gt;http://localhost:8081&lt;/a&gt; in your browser.&lt;/p&gt; &#xA;&lt;p&gt;To modify the source files, make changes in the frontend source files and run &lt;code&gt;npm run build&lt;/code&gt; to rebuild the frontend.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;FastApi end point for AutoGen&lt;/strong&gt;. This involves setting up a FastApi endpoint that can respond to end user prompt based requests using a basic two agent format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Basic Chat UI&lt;/strong&gt; Front end UI with a chatbox to enable sending requests and showing responses from the end point for a basic 2 agent format. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Debug Tools&lt;/strong&gt;: enable support for useful debugging capabilities like viewing &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; # of agent turns per request&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; define agent config (e.g. assistant agent + code agent)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; append conversation history per request&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; display cost of interaction per request (# tokens and $ cost)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Streaming UI Enable streaming of agent responses to the UI. This will enable the UI to show agent responses as they are generated, instead of waiting for the entire response to be generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Flow based Playground UI&lt;/strong&gt;&lt;br&gt; Explore the use of a tool like React Flow to add agent nodes and compose agent flows. For example, setup an assistant agent + a code agent, click run and view output in a chat window. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create agent nodes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Compose agent nodes into flows&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Run agent flows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Explore external integrations e.g. with &lt;a href=&#34;https://github.com/FlowiseAI/Flowise&#34;&gt;Flowise&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2308.08155&#34;&gt;AutoGen&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{wu2023autogen,&#xA;      title={AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation Framework},&#xA;      author={Qingyun Wu and Gagan Bansal and Jieyu Zhang and Yiran Wu and Shaokun Zhang and Erkang Zhu and Beibin Li and Li Jiang and Xiaoyun Zhang and Chi Wang},&#xA;      year={2023},&#xA;      eprint={2308.08155},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.AI}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hinterdupfinger/obsidian-ollama</title>
    <updated>2023-11-07T01:42:23Z</updated>
    <id>tag:github.com,2023-11-07:/hinterdupfinger/obsidian-ollama</id>
    <link href="https://github.com/hinterdupfinger/obsidian-ollama" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ¦™ Obsidian Ollama&lt;/h1&gt; &#xA;&lt;p&gt;This is a plugin for &lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian&lt;/a&gt; that allows you to use &lt;a href=&#34;https://ollama.ai&#34;&gt;Ollama&lt;/a&gt; within your notes. There are different pre configured promts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- Summarize selection&#xA;- Explain selection&#xA;- Expand selection&#xA;- Rewrite selection (formal)&#xA;- Rewrite selection (casual)&#xA;- Rewrite selection (active voice)&#xA;- Rewrite selection (bullet points)&#xA;- Caption selection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you can also configure your own prompts, specify their model and temperature. The plugin always passes the prompt and either selected text or full note to Ollama and inserts the result into your note at the cursor position.&lt;/p&gt; &#xA;&lt;p&gt;This requires a local installation of &lt;a href=&#34;https://ollama.ai&#34;&gt;Ollama&lt;/a&gt; which can currently be installed as a &lt;a href=&#34;https://github.com/jmorganca/ollama#download&#34;&gt;MacOS app&lt;/a&gt;. By default the plugin will connect to &lt;code&gt;http://localhost:11434&lt;/code&gt; - the port of the MacOS app.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aave/aave-v3-core</title>
    <updated>2023-11-07T01:42:23Z</updated>
    <id>tag:github.com,2023-11-07:/aave/aave-v3-core</id>
    <link href="https://github.com/aave/aave-v3-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the core smart contracts of the Aave V3 protocol.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/aave/aave-v3-core/actions/workflows/node.js.yml&#34;&gt;&lt;img src=&#34;https://github.com/aave/aave-v3-core/actions/workflows/node.js.yml/badge.svg?sanitize=true&#34; alt=&#34;Build pass&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/aave/aave-v3-core&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/aave/aave-v3-core/branch/master/graph/badge.svg?token=U50KN38G67&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        .///.                .///.     //.            .//  `/////////////-&#xA;       `++:++`              .++:++`    :++`          `++:  `++:......---.`&#xA;      `/+: -+/`            `++- :+/`    /+/         `/+/   `++.&#xA;      /+/   :+/            /+:   /+/    `/+/        /+/`   `++.&#xA;  -::/++::`  /+:       -::/++::` `/+:    `++:      :++`    `++/:::::::::.&#xA;  -:+++::-`  `/+:      --++/---`  `++-    .++-    -++.     `++/:::::::::.&#xA;   -++.       .++-      -++`       .++.    .++.  .++-      `++.&#xA;  .++-         -++.    .++.         -++.    -++``++-       `++.&#xA; `++:           :++`  .++-           :++`    :+//+:        `++:----------`&#xA; -/:             :/-  -/:             :/.     ://:         `/////////////-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Aave Protocol v3&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the smart contracts source code and markets configuration for Aave Protocol V3. The repository uses Docker Compose and Hardhat as development environment for compilation, testing and deployment tasks.&lt;/p&gt; &#xA;&lt;h2&gt;What is Aave?&lt;/h2&gt; &#xA;&lt;p&gt;Aave is a decentralized non-custodial liquidity markets protocol where users can participate as suppliers or borrowers. Suppliers provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralized (perpetually) or undercollateralized (one-block liquidity) fashion.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the link to the technical paper or visit the Aave Developer docs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/techpaper/Aave_V3_Technical_Paper.pdf&#34;&gt;Technical Paper&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.aave.com/developers/&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Audits and Formal Verification&lt;/h2&gt; &#xA;&lt;p&gt;You can find all audit reports under the audits folder&lt;/p&gt; &#xA;&lt;p&gt;V3.0.1 - December 2022&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/audits/09-12-2022_PeckShield_AaveV3-0-1.pdf&#34;&gt;PeckShield&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/audits/23-12-2022_SigmaPrime_AaveV3-0-1.pdf&#34;&gt;SigmaPrime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;V3 Round 1 - October 2021&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/audits/27-01-2022_ABDK_AaveV3.pdf&#34;&gt;ABDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/audits/01-11-2021_OpenZeppelin_AaveV3.pdf&#34;&gt;OpenZeppelin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/audits/07-01-2022_TrailOfBits_AaveV3.pdf&#34;&gt;Trail of Bits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/audits/14-01-2022_PeckShield_AaveV3.pdf&#34;&gt;Peckshield&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;V3 Round 2 - December 2021&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/audits/27-01-2022_SigmaPrime_AaveV3.pdf&#34;&gt;SigmaPrime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Formal Verification - November 2021-January 2022&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aave/aave-v3-core/master/certora/Aave_V3_Formal_Verification_Report_Jan2022.pdf&#34;&gt;Certora&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connect with the community&lt;/h2&gt; &#xA;&lt;p&gt;You can join the &lt;a href=&#34;http://aave.com/discord&#34;&gt;Discord&lt;/a&gt; channel or the &lt;a href=&#34;https://governance.aave.com/&#34;&gt;Governance Forum&lt;/a&gt; to ask questions about the protocol or talk about Aave with other peers.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;@aave/core-v3&lt;/code&gt; as an NPM package in your Hardhat or Truffle project to import the contracts and interfaces:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install @aave/core-v3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Import at Solidity files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import {IPool} from &#34;@aave/core-v3/contracts/interfaces/IPool.sol&#34;;&#xA;&#xA;contract Misc {&#xA;&#xA;  function supply(address pool, address token, address user, uint256 amount) public {&#xA;    IPool(pool).supply(token, amount, user, 0);&#xA;    {...}&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JSON artifacts with the ABI and Bytecode are also included in the bundled NPM package at &lt;code&gt;artifacts/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Import JSON file via Node JS &lt;code&gt;require&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const PoolV3Artifact = require(&#39;@aave/core-v3/artifacts/contracts/protocol/pool/Pool.sol/Pool.json&#39;);&#xA;&#xA;// Log the ABI into console&#xA;console.log(PoolV3Artifact.abi)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The repository uses Docker Compose to manage sensitive keys and load the configuration. Prior to any action like test or deploy, you must run &lt;code&gt;docker-compose up&lt;/code&gt; to start the &lt;code&gt;contracts-env&lt;/code&gt; container, and then connect to the container console via &lt;code&gt;docker-compose exec contracts-env bash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Follow the next steps to setup the repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create an environment file named &lt;code&gt;.env&lt;/code&gt; and fill the next environment variables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Add Alchemy or Infura provider keys, alchemy takes preference at the config level&#xA;ALCHEMY_KEY=&#34;&#34;&#xA;INFURA_KEY=&#34;&#34;&#xA;&#xA;&#xA;# Optional, if you plan to use Tenderly scripts&#xA;TENDERLY_PROJECT=&#34;&#34;&#xA;TENDERLY_USERNAME=&#34;&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;You can run the full test suite with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# In one terminal&#xA;docker-compose up&#xA;&#xA;# Open another tab or terminal&#xA;docker-compose exec contracts-env bash&#xA;&#xA;# A new Bash terminal is prompted, connected to the container&#xA;npm run test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>