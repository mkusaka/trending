<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T01:46:00Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nodejs/corepack</title>
    <updated>2023-09-10T01:46:00Z</updated>
    <id>tag:github.com,2023-09-10:/nodejs/corepack</id>
    <link href="https://github.com/nodejs/corepack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero-runtime-dependency package acting as bridge between Node projects and their package managers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nodejs/corepack/main/icon.svg?sanitize=true&#34; height=&#34;25&#34;&gt; corepack&lt;/h1&gt; &#xA;&lt;p&gt;Corepack is a zero-runtime-dependency Node.js script that acts as a bridge between Node.js projects and the package managers they are intended to be used with during development. In practical terms, &lt;strong&gt;Corepack lets you use Yarn, npm, and pnpm without having to install them&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Install&lt;/h2&gt; &#xA;&lt;h3&gt;Default Installs&lt;/h3&gt; &#xA;&lt;p&gt;Corepack is &lt;a href=&#34;https://nodejs.org/api/corepack.html&#34;&gt;distributed by default with all recent Node.js versions&lt;/a&gt;. Run &lt;code&gt;corepack enable&lt;/code&gt; to install the required Yarn and pnpm binaries on your path.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Install Corepack using npm&lt;/summary&gt; &#xA; &lt;p&gt;First uninstall your global Yarn and pnpm binaries (just leave npm). In general, you&#39;d do this by running the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm uninstall -g yarn pnpm&#xA;&#xA;# That should be enough, but if you installed Yarn without going through npm it might&#xA;# be more tedious - for example, you might need to run `brew uninstall yarn` as well.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then install Corepack:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g corepack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;We do acknowledge the irony and overhead of using npm to install Corepack, which is at least part of why the preferred option is to use the Corepack version that is distributed along with Node.js itself.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Install Corepack from source&lt;/summary&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/corepack/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;When Building Packages&lt;/h3&gt; &#xA;&lt;p&gt;Just use your package managers as you usually would. Run &lt;code&gt;yarn install&lt;/code&gt; in Yarn projects, &lt;code&gt;pnpm install&lt;/code&gt; in pnpm projects, and &lt;code&gt;npm&lt;/code&gt; in npm projects. Corepack will catch these calls, and depending on the situation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If the local project is configured for the package manager you&#39;re using&lt;/strong&gt;, Corepack will silently download and cache the latest compatible version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If the local project is configured for a different package manager&lt;/strong&gt;, Corepack will request you to run the command again using the right package manager - thus avoiding corruptions of your install artifacts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If the local project isn&#39;t configured for any package manager&lt;/strong&gt;, Corepack will assume that you know what you&#39;re doing, and will use whatever package manager version has been pinned as &#34;known good release&#34;. Check the relevant section for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;When Authoring Packages&lt;/h3&gt; &#xA;&lt;p&gt;Set your package&#39;s manager with the &lt;code&gt;packageManager&lt;/code&gt; field in &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;packageManager&#34;: &#34;yarn@3.2.3+sha224.953c8233f7a92884eee2de69a1b92d1f2ec1655e66d08071ba9a02fa&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;yarn&lt;/code&gt; is the name of the package manager, specified at version &lt;code&gt;3.2.3&lt;/code&gt;, along with the SHA-224 hash of this version for validation. &lt;code&gt;packageManager@x.y.z&lt;/code&gt; is required. The hash is optional but strongly recommended as a security practice. Permitted values for the package manager are &lt;code&gt;yarn&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, and &lt;code&gt;pnpm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Good Releases&lt;/h2&gt; &#xA;&lt;p&gt;When running Corepack within projects that don&#39;t list a supported package manager, it will default to a set of Known Good Releases. In a way, you can compare this to Node.js, where each version ships with a specific version of npm.&lt;/p&gt; &#xA;&lt;p&gt;If there is no Known Good Release for the requested package manager, Corepack looks up the npm registry for the latest available version and cache it for future use.&lt;/p&gt; &#xA;&lt;p&gt;The Known Good Releases can be updated system-wide using &lt;code&gt;corepack install -g&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Offline Workflow&lt;/h2&gt; &#xA;&lt;p&gt;The utility commands detailed in the next section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Either you can use the network while building your container image, in which case you&#39;ll simply run &lt;code&gt;corepack pack&lt;/code&gt; to make sure that your image includes the Last Known Good release for the specified package manager.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want to have &lt;em&gt;all&lt;/em&gt; Last Known Good releases for all package managers, just use the &lt;code&gt;--all&lt;/code&gt; flag which will do just that.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or you&#39;re publishing your project to a system where the network is unavailable, in which case you&#39;ll preemptively generate a package manager archive from your local computer (using &lt;code&gt;corepack pack -o&lt;/code&gt;) before storing it somewhere your container will be able to access (for example within your repository). After that it&#39;ll just be a matter of running &lt;code&gt;corepack install -g --cache-only &amp;lt;path/to/corepack.tgz&amp;gt;&lt;/code&gt; to setup the cache.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Utility Commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack &amp;lt;binary name&amp;gt;[@&amp;lt;version&amp;gt;] [... args]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This meta-command runs the specified package manager in the local folder. You can use it to force an install to run with a given version, which can be useful when looking for regressions.&lt;/p&gt; &#xA;&lt;p&gt;Note that those commands still check whether the local project is configured for the given package manager (ie you won&#39;t be able to run &lt;code&gt;corepack yarn install&lt;/code&gt; on a project where the &lt;code&gt;packageManager&lt;/code&gt; field references &lt;code&gt;pnpm&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack enable [... name]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--install-directory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add the shims to the specified location&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This command will detect where Corepack is installed and will create shims next to it for each of the specified package managers (or all of them if the command is called without parameters). Note that the npm shims will not be installed unless explicitly requested, as npm is currently distributed with Node.js through other means.&lt;/p&gt; &#xA;&lt;p&gt;If the file system where the &lt;code&gt;corepack&lt;/code&gt; binary is located is read-only, this command will fail. A workaround is to add the binaries as alias in your shell configuration file (e.g. in &lt;code&gt;~/.bash_aliases&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias yarn=&#34;corepack yarn&#34;&#xA;alias yarnpkg=&#34;corepack yarnpkg&#34;&#xA;alias pnpm=&#34;corepack pnpm&#34;&#xA;alias pnpx=&#34;corepack pnpx&#34;&#xA;alias npm=&#34;corepack npm&#34;&#xA;alias npx=&#34;corepack npx&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows PowerShell, you can add functions using the &lt;code&gt;$PROFILE&lt;/code&gt; automatic variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;echo &#34;function yarn { corepack yarn `$args }&#34; &amp;gt;&amp;gt; $PROFILE&#xA;echo &#34;function yarnpkg { corepack yarnpkg `$args }&#34; &amp;gt;&amp;gt; $PROFILE&#xA;echo &#34;function pnpm { corepack pnpm `$args }&#34; &amp;gt;&amp;gt; $PROFILE&#xA;echo &#34;function pnpx { corepack pnpx `$args }&#34; &amp;gt;&amp;gt; $PROFILE&#xA;echo &#34;function npm { corepack npm `$args }&#34; &amp;gt;&amp;gt; $PROFILE&#xA;echo &#34;function npx { corepack npx `$args }&#34; &amp;gt;&amp;gt; $PROFILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack disable [... name]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--install-directory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove the shims to the specified location&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This command will detect where Node.js is installed and will remove the shims from there.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack install&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Download and install the package manager configured in the local project. This command doesn&#39;t change the global version used when running the package manager from outside the project (use the `-g,--global` flag if you wish to do this).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack install &amp;lt;-g,--global&amp;gt; [--all] [... name@version]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install all Last Known Good releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Install the selected package managers and install them on the system.&lt;/p&gt; &#xA;&lt;p&gt;Package managers thus installed will be configured as the new default when calling their respective binaries outside of projects defining the &lt;code&gt;packageManager&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack pack [--all] [... name@version]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pack all Last Known Good releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--json &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print the output folder rather than logs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-o,--output &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path where to generate the archive&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Download the selected package managers and store them inside a tarball suitable for use with &lt;code&gt;corepack install -g&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack use &amp;lt;name@version&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When run, this command will retrieve the latest release matching the provided descriptor, assign it to the project&#39;s package.json file, and automatically perform an install.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;corepack up&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Retrieve the latest available version for the current major release line of the package manager used in the local project, and update the project to use it.&lt;/p&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;corepack use&lt;/code&gt; this command doesn&#39;t take a package manager name nor a version range, as it will always select the latest available version from the same major line. Should you need to upgrade to a new major, use an explicit &lt;code&gt;corepack use {name}@latest&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_DEFAULT_TO_LATEST&lt;/code&gt; can be set to &lt;code&gt;0&lt;/code&gt; in order to instruct Corepack not to lookup on the remote registry for the latest version of the selected package manager.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_ENABLE_NETWORK&lt;/code&gt; can be set to &lt;code&gt;0&lt;/code&gt; to prevent Corepack from accessing the network (in which case you&#39;ll be responsible for hydrating the package manager versions that will be required for the projects you&#39;ll run, using &lt;code&gt;corepack install -g --cache-only&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_ENABLE_STRICT&lt;/code&gt; can be set to &lt;code&gt;0&lt;/code&gt; to prevent Corepack from throwing error if the package manager does not correspond to the one defined for the current project. This means that if a user is using the package manager specified in the current project, it will use the version specified by the project&#39;s &lt;code&gt;packageManager&lt;/code&gt; field. But if the user is using other package manager different from the one specified for the current project, it will use the system-wide package manager version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_ENABLE_PROJECT_SPEC&lt;/code&gt; can be set to &lt;code&gt;0&lt;/code&gt; to prevent Corepack from checking if the package manager corresponds to the one defined for the current project. This means that it will always use the system-wide package manager regardless of what is being specified in the project&#39;s &lt;code&gt;packageManager&lt;/code&gt; field.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_HOME&lt;/code&gt; can be set in order to define where Corepack should install the package managers. By default it is set to &lt;code&gt;%LOCALAPPDATA%\node\corepack&lt;/code&gt; on Windows, and to &lt;code&gt;$HOME/.cache/node/corepack&lt;/code&gt; everywhere else.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_ROOT&lt;/code&gt; has no functional impact on Corepack itself; it&#39;s automatically being set in your environment by Corepack when it shells out to the underlying package managers, so that they can feature-detect its presence (useful for commands like &lt;code&gt;yarn init&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_NPM_REGISTRY&lt;/code&gt; sets the registry base url used when retrieving package managers from npm. Default value is &lt;code&gt;https://registry.npmjs.org&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_NPM_TOKEN&lt;/code&gt; sets a Bearer token authorization header when connecting to a npm type registry.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COREPACK_NPM_USERNAME&lt;/code&gt; and &lt;code&gt;COREPACK_NPM_PASSWORD&lt;/code&gt; to set a Basic authorization header when connecting to a npm type registry. Note that both environment variables are required and as plain text. If you want to send an empty password, explicitly set &lt;code&gt;COREPACK_NPM_PASSWORD&lt;/code&gt; to an empty string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HTTP_PROXY&lt;/code&gt;, &lt;code&gt;HTTPS_PROXY&lt;/code&gt;, and &lt;code&gt;NO_PROXY&lt;/code&gt; are supported through &lt;a href=&#34;https://github.com/TooTallNate/node-proxy-agent&#34;&gt;&lt;code&gt;node-proxy-agent&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;There are a wide variety of networking issues that can occur while running &lt;code&gt;corepack&lt;/code&gt; commands. Things to check:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure your network connection is active.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the host for your request can be resolved by your DNS; try using &lt;code&gt;curl [URL]&lt;/code&gt; (ipv4) and &lt;code&gt;curl -6 [URL]&lt;/code&gt; (ipv6) from your shell.&lt;/li&gt; &#xA; &lt;li&gt;Check your proxy settings (see &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/corepack/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/corepack/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/corepack/main/DESIGN.md&#34;&gt;&lt;code&gt;DESIGN.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License (MIT)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/corepack/main/LICENSE.md&#34;&gt;&lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>langchain-ai/langchainjs</title>
    <updated>2023-09-10T01:46:00Z</updated>
    <id>tag:github.com,2023-09-10:/langchain-ai/langchainjs</id>
    <link href="https://github.com/langchain-ai/langchainjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🦜️🔗 LangChain.js&lt;/h1&gt; &#xA;&lt;p&gt;⚡ Building applications with LLMs through composability ⚡&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hwchase17/langchainjs/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchainjs/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/npm/dw/langchain&#34; alt=&#34;npm&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/langchainai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/langchainai.svg?style=social&amp;amp;label=Follow%20%40LangChainAI&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6adMQxSpJS&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/6adMQxSpJS?compact=true&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/hwchase17/langchainjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Dev%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Dev Containers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codespaces.new/hwchase17/langchainjs&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; title=&#34;Open in Github Codespace&#34; width=&#34;150&#34; height=&#34;20&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Looking for the Python version? Check out &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Production Support:&lt;/strong&gt; As you move your LangChains into production, we&#39;d love to offer more hands-on support. Fill out &lt;a href=&#34;https://airtable.com/appwQzlErAS2qiP0L/shrGtGaVBVAz7NcV2&#34;&gt;this form&lt;/a&gt; to share more about what you&#39;re building, and our team will get in touch.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn add langchain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { OpenAI } from &#34;langchain/llms/openai&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Environments&lt;/h2&gt; &#xA;&lt;p&gt;LangChain is written in TypeScript and can be used in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js (ESM and CommonJS) - 18.x, 19.x, 20.x&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare Workers&lt;/li&gt; &#xA; &lt;li&gt;Vercel / Next.js (Browser, Serverless and Edge functions)&lt;/li&gt; &#xA; &lt;li&gt;Supabase Edge Functions&lt;/li&gt; &#xA; &lt;li&gt;Browser&lt;/li&gt; &#xA; &lt;li&gt;Deno&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤔 What is this?&lt;/h2&gt; &#xA;&lt;p&gt;Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. But using these LLMs in isolation is often not enough to create a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.&lt;/p&gt; &#xA;&lt;p&gt;This library is aimed at assisting in the development of those types of applications.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Full Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For full documentation of prompts, chains, agents and more, please see &lt;a href=&#34;https://js.langchain.com/docs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Relationship with Python LangChain&lt;/h2&gt; &#xA;&lt;p&gt;This is built to integrate as seamlessly as possible with the &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain Python package&lt;/a&gt;. Specifically, this means all objects (prompts, LLMs, chains, etc) are designed in a way where they can be serialized and shared between languages.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/hwchase17/langchain-hub&#34;&gt;LangChainHub&lt;/a&gt; is a central place for the serialized versions of these prompts, chains, and agents.&lt;/p&gt; &#xA;&lt;h2&gt;💁 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langchainjs/main/CONTRIBUTING.md&#34;&gt;our contributing guidelines&lt;/a&gt; for instructions on how to contribute.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iwae/easyMenu</title>
    <updated>2023-09-10T01:46:00Z</updated>
    <id>tag:github.com,2023-09-10:/iwae/easyMenu</id>
    <link href="https://github.com/iwae/easyMenu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;easyMenu is a component to help developers to add menus easily in Cocos Creator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;easyMenu&lt;/h1&gt; &#xA;&lt;p&gt;easyMenu is a component to help developers to add menus easily in Cocos Creator&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/iwae/easyMenu/assets/26038745/80b44753-5222-4223-840e-d7141c8fccaa&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;it presets few functions for 2d/3d game tests.&lt;/p&gt; &#xA;&lt;h3&gt;FPS Monitor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/iwae/easyMenu/assets/26038745/d39d5829-45d1-45ad-9e7d-effec50bf63b&#34; alt=&#34;122&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Time Scale&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/iwae/easyMenu/assets/26038745/6c84889d-7c37-49df-b4f4-db167e9d0b88&#34; alt=&#34;133&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Overdraw Debug&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/iwae/easyMenu/assets/26038745/446e4c69-2c30-4522-8ce2-d35afe37da3c&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;how to use&lt;/h2&gt; &#xA;&lt;p&gt;copy easyMenu to your project, and add EasyMenu to the Canvas&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/iwae/easyMenu/assets/26038745/f65c65b1-df16-4014-b64f-3ad579a60041&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;add group&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/iwae/easyMenu/assets/26038745/05c1f225-6d05-47fc-8378-5d46054fb140&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;    const menu = director.getScene().getChildByName(&#39;Canvas&#39;).getComponentInChildren(eMenu);&#xA;    if(!menu) return;&#xA;    const group = menu.addGroup(&#34;Scene&#34;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add item&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;    group.addItem(&#34;Default&#34;,()=&amp;gt;{&#xA;          this.defaultScene();&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add toggle&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  &#xA;     group.addToggle(&#34;High FPS&#34;, (t) =&amp;gt; {&#xA;           game.frameRate = t ? 60 : 30;&#xA;     });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add list&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  &#xA;     group.addList(&#34;Image Memory&#34;,&#xA;           this.getImageMemory.bind(this)&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add slider&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;  &#xA;     group.addSlider(&#34;Scale&#34;, (v: number) =&amp;gt; {&#xA;           timeScale.scale = v;&#xA;     }, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add editbox&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;     group.addEdit(&#34;edit&#34;, &#34;default&#34;,((input:string)=&amp;gt;{&#xA;&#xA;     });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add graph&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;    group.addGraph(&#34;FPS&#34;, null, 60, 14);&#xA;&#xA;    this.graph = group.node.getChildByName(&#34;FPS&#34;).getComponent(eGraph);&#xA;&#xA;    this.graph.callback = (() =&amp;gt; {&#xA;        const output = this.graph.positions.toString();&#xA;        console.log(&#34;FPS History&#34;, output)&#xA;        this.copyToClipboard(output);&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add multi items&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;   this.menu&#xA;    .addGroup(&#34;Debug&#34;)&#xA;    .addToggle(&#34;Profiler&#34;, (t) =&amp;gt; {&#xA;        t ? profiler.showStats() : profiler.hideStats();&#xA;    })&#xA;    .addSlider(&#34;Scale&#34;, (v: number) =&amp;gt; {&#xA;        TimeScale.scale = v;&#xA;    }, 1)&#xA;    .addItem(&#34;Game Time&#34;, () =&amp;gt; {&#xA;        return &#34;GameTime: &#34; + Math.floor(game.totalTime) + &#34; ms&#34;;&#xA;    })&#xA;    .addToggle(&#34;High FPS&#34;, (t) =&amp;gt; {&#xA;        game.frameRate = t ? 60 : 30;&#xA;    })&#xA;    .addItem(&#34;Overdraw Test&#34;,&#xA;        this.testOverdraw.bind(this)&#xA;    )&#xA;    .addList(&#34;Image Memory&#34;,&#xA;        this.getImageMemory.bind(this)&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>