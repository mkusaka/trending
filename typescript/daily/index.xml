<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-25T01:37:26Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google-gemini/generative-ai-js</title>
    <updated>2024-06-25T01:37:26Z</updated>
    <id>tag:github.com,2024-06-25:/google-gemini/generative-ai-js</id>
    <link href="https://github.com/google-gemini/generative-ai-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Node.js / Typescript library for the Google Gemini API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google AI SDK for JavaScript&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] &lt;strong&gt;Using the Google AI SDK for JavaScript directly from a client-side app is recommended for prototyping only.&lt;/strong&gt; If you plan to enable billing, we strongly recommend that you call the Google AI Gemini API only server-side to keep your API key safe. You risk potentially exposing your API key to malicious actors if you embed your API key directly in your JavaScript app or fetch it remotely at runtime.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Google AI JavaScript SDK enables developers to use Google&#39;s state-of-the-art generative AI models (like Gemini) to build AI-powered features and applications. This SDK supports use cases like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate text from text-only input&lt;/li&gt; &#xA; &lt;li&gt;Generate text from text-and-images input (multimodal)&lt;/li&gt; &#xA; &lt;li&gt;Build multi-turn conversations (chat)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(for Node.js)&lt;/em&gt; Embedding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use this JavaScript SDK for applications built with Node.js or for web apps.&lt;/p&gt; &#xA;&lt;p&gt;For example, with just a few lines of code, you can access Gemini&#39;s multimodal capabilities to generate text from text-and-image input.&lt;/p&gt; &#xA;&lt;p&gt;For Node.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const model = genAI.getGenerativeModel({ model: &#34;gemini-1.5-flash-latest&#34; });&#xA;&#xA;const prompt = &#34;Does this look store-bought or homemade?&#34;;&#xA;const image = {&#xA;  inlineData: {&#xA;    data: Buffer.from(fs.readFileSync(&#34;cookie.png&#34;)).toString(&#34;base64&#34;),&#xA;    mimeType: &#34;image/png&#34;,&#xA;  },&#xA;};&#xA;&#xA;const result = await model.generateContent([prompt, image]);&#xA;console.log(result.response.text());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For web:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const model = genAI.getGenerativeModel({ model: &#34;gemini-1.5-flash-latest&#34; });&#xA;&#xA;const prompt = &#34;Does this look store-bought or homemade?&#34;;&#xA;const image = {&#xA;  inlineData: {&#xA;    data: base64EncodedImage /* see JavaScript quickstart for details */,&#xA;    mimeType: &#34;image/png&#34;,&#xA;  },&#xA;};&#xA;&#xA;const result = await model.generateContent([prompt, image]);&#xA;console.log(result.response.text());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Try out a sample app&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains sample Node and web apps demonstrating how the SDK can access and utilize the Gemini model for various use cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To try out the sample Node app, follow these steps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check out this repository.&lt;br&gt; &lt;code&gt;git clone https://github.com/google/generative-ai-js&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;Obtain an API key&lt;/a&gt; to use with the Google AI SDKs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cd into the &lt;code&gt;samples/node&lt;/code&gt; folder and run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assign your API key to an environment variable: &lt;code&gt;export API_KEY=MY_API_KEY&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the sample file you&#39;re interested in. Example: &lt;code&gt;node simple-text.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;To try out the sample web app, follow these steps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check out this repository.&lt;br&gt; &lt;code&gt;git clone https://github.com/google/generative-ai-js&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;Obtain an API key&lt;/a&gt; to use with the Google AI SDKs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cd into the &lt;code&gt;samples/web&lt;/code&gt; folder and run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assign your API key to an environment variable: &lt;code&gt;export API_KEY=MY_API_KEY&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Serve your web app by running: &lt;code&gt;npm run http-server&lt;/code&gt;. Open the displayed URL in a browser.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Node.js (or web projects using NPM), run &lt;code&gt;npm install @google/generative-ai&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For web, add &lt;code&gt;import { GoogleGenerativeAI } from &#34;https://esm.run/@google/generative-ai&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For detailed instructions, you can find quickstarts for the Google AI JavaScript SDK in the Google documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.google.dev/tutorials/node_quickstart&#34;&gt;Quickstart for Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.google.dev/tutorials/web_quickstart&#34;&gt;Quickstart for web apps&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These quickstarts describe how to add your API key and the SDK to your app, initialize the model, and then call the API to access the model. It also describes some additional use cases and features, like streaming, counting tokens, and controlling responses. For Node.js, embedding is also available.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Find complete documentation for the Google AI SDKs and the Gemini model in the Google documentation:&lt;br&gt; &lt;a href=&#34;https://ai.google.dev/docs&#34;&gt;https://ai.google.dev/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find reference docs for this SDK here in the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/generative-ai-js/main/docs/reference/main/generative-ai.md&#34;&gt;GoogleGenerativeAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/generative-ai-js/main/docs/reference/files/generative-ai.googleaifilemanager.md&#34;&gt;GoogleAIFileManager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@google/generative-ai&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/generative-ai-js/main/packages/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/generative-ai-js/main/docs/contributing.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Google AI JavaScript SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mayneyao/eidos</title>
    <updated>2024-06-25T01:37:26Z</updated>
    <id>tag:github.com,2024-06-25:/mayneyao/eidos</id>
    <link href="https://github.com/mayneyao/eidos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Offline alternative to Notion. Eidos is an extensible framework for managing your personal data throughout your lifetime in one place.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mayneyao/eidos/main/public/show/table-and-doc.webp&#34; alt=&#34;eidos&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://eidos.space?home=1&#34;&gt;Home Page&lt;/a&gt; | &#xA; &lt;a href=&#34;https://discord.gg/bsGMPDR23b&#34;&gt;Discord&lt;/a&gt; &#xA; &lt;p&gt; Eidos is an extensible framework for managing your personal data throughout your lifetime in one place. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Everything runs inside your browser. It&#39;s a pure PWA with no web server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Offline Support: Access your data without an internet connection. Data is stored locally for blazing-fast performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AI Features: Deeply integrated with LLM for AI-powered capabilities. Translate, summarize, and interact with your data within Eidos. AI works even offline.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extensible: Customize Eidos to suit your needs.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Prompt: Speed up your workflow with the Prompt extension. No coding required.&lt;/li&gt; &#xA;   &lt;li&gt;UDF: Use JavaScript to customize Formula functions.&lt;/li&gt; &#xA;   &lt;li&gt;Script: Create powerful data processing logic with TypeScript/JavaScript.&lt;/li&gt; &#xA;   &lt;li&gt;App: Build your own app using any preferred framework.&lt;/li&gt; &#xA;   &lt;li&gt;Block: Extend documents with custom blocks.&lt;/li&gt; &#xA;   &lt;li&gt;Field: Extend tables with custom fields.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developer Friendly:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;API &amp;amp; SDK&lt;/li&gt; &#xA;   &lt;li&gt;Sqlite Standardization: Every table in Eidos is a SQLite table.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Currently, Eidos only supports the latest version of chromium-based browsers, such as Chrome, Edge, Arc, and Brave. It recommends a version greater than 122.&lt;/p&gt; &#xA;&lt;p&gt;Safari, Firefox, and other browsers are not tested yet.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;Eidos is built on sqlite-wasm and requires browser support for OPFS[1] to work.&lt;/p&gt; &#xA;&lt;p&gt;Storing data in a local folder is a good practice to ensure better data security. With Chrome 122 and its later versions, we can get persistent permissions[2] for local folders, so we do not have to select a folder every time we open the web app.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sqlite.org/wasm/doc/trunk/persistence.md#opfs&#34;&gt;https://sqlite.org/wasm/doc/trunk/persistence.md#opfs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/persistent-permissions-for-the-file-system-access-api&#34;&gt;https://developer.chrome.com/blog/persistent-permissions-for-the-file-system-access-api&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to develop&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository &lt;code&gt;git clone git@github.com:mayneyao/eidos.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm install&lt;/code&gt; to install dependencies&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm build&lt;/code&gt; (only needed once)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can now access the app in your browser at &lt;a href=&#34;http://localhost:5173&#34;&gt;http://localhost:5173&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Generate sdk types&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm gen-types&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Eidos based on the following open-source projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sqlite/sqlite-wasm&#34;&gt;sqlite-wasm&lt;/a&gt; - Run SQLite in the browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shadcn-ui/ui&#34;&gt;shadcn-ui&lt;/a&gt; - UI components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glideapps/glide-data-grid&#34;&gt;glide-data-grid&lt;/a&gt; - High performance table&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/lexical&#34;&gt;lexical&lt;/a&gt; - Document editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlc-ai/web-llm&#34;&gt;web-llm&lt;/a&gt; - Run LLM in the browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teableio/teable&#34;&gt;teable&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/apitable/apitable&#34;&gt;apitable&lt;/a&gt; - Teach me how to build an Airtable-like table.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the AGPL license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>anthropics/anthropic-sdk-typescript</title>
    <updated>2024-06-25T01:37:26Z</updated>
    <id>tag:github.com,2024-06-25:/anthropics/anthropic-sdk-typescript</id>
    <link href="https://github.com/anthropics/anthropic-sdk-typescript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Access to Anthropic&#39;s safety-first language model APIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anthropic TypeScript API Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.org/package/@anthropic-ai/sdk&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@anthropic-ai/sdk.svg?sanitize=true&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/@anthropic-ai/sdk&#34; alt=&#34;npm bundle size&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library provides convenient access to the Anthropic REST API from server-side TypeScript or JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;The REST API documentation can be found &lt;a href=&#34;https://docs.anthropic.com/claude/reference/&#34;&gt;on docs.anthropic.com&lt;/a&gt;. The full API of this library can be found in &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-typescript/main/api.md&#34;&gt;api.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @anthropic-ai/sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The full API of this library can be found in &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-typescript/main/api.md&#34;&gt;api.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Anthropic from &#39;@anthropic-ai/sdk&#39;;&#xA;&#xA;const anthropic = new Anthropic({&#xA;  apiKey: process.env[&#39;ANTHROPIC_API_KEY&#39;], // This is the default and can be omitted&#xA;});&#xA;&#xA;async function main() {&#xA;  const message = await anthropic.messages.create({&#xA;    max_tokens: 1024,&#xA;    messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;    model: &#39;claude-3-opus-20240229&#39;,&#xA;  });&#xA;&#xA;  console.log(message.content);&#xA;}&#xA;&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Streaming responses&lt;/h2&gt; &#xA;&lt;p&gt;We provide support for streaming responses using Server Sent Events (SSE).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import Anthropic from &#39;@anthropic-ai/sdk&#39;;&#xA;&#xA;const anthropic = new Anthropic();&#xA;&#xA;const stream = await anthropic.messages.create({&#xA;  max_tokens: 1024,&#xA;  messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;  model: &#39;claude-3-opus-20240229&#39;,&#xA;  stream: true,&#xA;});&#xA;for await (const messageStreamEvent of stream) {&#xA;  console.log(messageStreamEvent.type);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to cancel a stream, you can &lt;code&gt;break&lt;/code&gt; from the loop or call &lt;code&gt;stream.controller.abort()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Request &amp;amp; Response types&lt;/h3&gt; &#xA;&lt;p&gt;This library includes TypeScript definitions for all request params and response fields. You may import and use them like so:&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import Anthropic from &#39;@anthropic-ai/sdk&#39;;&#xA;&#xA;const anthropic = new Anthropic({&#xA;  apiKey: process.env[&#39;ANTHROPIC_API_KEY&#39;], // This is the default and can be omitted&#xA;});&#xA;&#xA;async function main() {&#xA;  const params: Anthropic.MessageCreateParams = {&#xA;    max_tokens: 1024,&#xA;    messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;    model: &#39;claude-3-opus-20240229&#39;,&#xA;  };&#xA;  const message: Anthropic.Message = await anthropic.messages.create(params);&#xA;}&#xA;&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Documentation for each method, request param, and response field are available in docstrings and will appear on hover in most modern editors.&lt;/p&gt; &#xA;&lt;h2&gt;Counting Tokens&lt;/h2&gt; &#xA;&lt;p&gt;You can see the exact usage for a given request through the &lt;code&gt;usage&lt;/code&gt; response property, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const message = await client.messages.create(...)&#xA;console.log(message.usage)&#xA;// { input_tokens: 25, output_tokens: 13 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Streaming Helpers&lt;/h2&gt; &#xA;&lt;p&gt;This library provides several conveniences for streaming messages, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import Anthropic from &#39;@anthropic-ai/sdk&#39;;&#xA;&#xA;const anthropic = new Anthropic();&#xA;&#xA;async function main() {&#xA;  const stream = anthropic.messages&#xA;    .stream({&#xA;      model: &#39;claude-3-opus-20240229&#39;,&#xA;      max_tokens: 1024,&#xA;      messages: [&#xA;        {&#xA;          role: &#39;user&#39;,&#xA;          content: &#39;Say hello there!&#39;,&#xA;        },&#xA;      ],&#xA;    })&#xA;    .on(&#39;text&#39;, (text) =&amp;gt; {&#xA;      console.log(text);&#xA;    });&#xA;&#xA;  const message = await stream.finalMessage();&#xA;  console.log(message);&#xA;}&#xA;&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Streaming with &lt;code&gt;client.messages.stream(...)&lt;/code&gt; exposes &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-typescript/main/helpers.md&#34;&gt;various helpers for your convenience&lt;/a&gt; including event handlers and accumulation.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;client.messages.create({ ..., stream: true })&lt;/code&gt; which only returns an async iterable of the events in the stream and thus uses less memory (it does not build up a final message object for you).&lt;/p&gt; &#xA;&lt;h2&gt;Tool use beta&lt;/h2&gt; &#xA;&lt;p&gt;This SDK provides beta support for tool use, aka function calling. More details can be found in &lt;a href=&#34;https://docs.anthropic.com/claude/docs/tool-use&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AWS Bedrock&lt;/h2&gt; &#xA;&lt;p&gt;We provide support for the &lt;a href=&#34;https://aws.amazon.com/bedrock/claude/&#34;&gt;Anthropic Bedrock API&lt;/a&gt; through a &lt;a href=&#34;https://github.com/anthropics/anthropic-sdk-typescript/tree/main/packages/bedrock-sdk&#34;&gt;separate package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Handling errors&lt;/h2&gt; &#xA;&lt;p&gt;When the library is unable to connect to the API, or if the API returns a non-success status code (i.e., 4xx or 5xx response), a subclass of &lt;code&gt;APIError&lt;/code&gt; will be thrown:&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;async function main() {&#xA;  const message = await anthropic.messages&#xA;    .create({&#xA;      max_tokens: 1024,&#xA;      messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;      model: &#39;claude-3-opus-20240229&#39;,&#xA;    })&#xA;    .catch(async (err) =&amp;gt; {&#xA;      if (err instanceof Anthropic.APIError) {&#xA;        console.log(err.status); // 400&#xA;        console.log(err.name); // BadRequestError&#xA;        console.log(err.headers); // {server: &#39;nginx&#39;, ...}&#xA;      } else {&#xA;        throw err;&#xA;      }&#xA;    });&#xA;}&#xA;&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Error codes are as followed:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Status Code&lt;/th&gt; &#xA;   &lt;th&gt;Error Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;400&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;BadRequestError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;401&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AuthenticationError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;403&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PermissionDeniedError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;404&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NotFoundError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;422&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UnprocessableEntityError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;429&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RateLimitError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;=500&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;InternalServerError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;APIConnectionError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Retries&lt;/h3&gt; &#xA;&lt;p&gt;Certain errors will be automatically retried 2 times by default, with a short exponential backoff. Connection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors will all be retried by default.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;maxRetries&lt;/code&gt; option to configure or disable this:&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Configure the default for all requests:&#xA;const anthropic = new Anthropic({&#xA;  maxRetries: 0, // default is 2&#xA;});&#xA;&#xA;// Or, configure per-request:&#xA;await anthropic.messages.create({ max_tokens: 1024, messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }], model: &#39;claude-3-opus-20240229&#39; }, {&#xA;  maxRetries: 5,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;Requests time out after 10 minutes by default. You can configure this with a &lt;code&gt;timeout&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Configure the default for all requests:&#xA;const anthropic = new Anthropic({&#xA;  timeout: 20 * 1000, // 20 seconds (default is 10 minutes)&#xA;});&#xA;&#xA;// Override per-request:&#xA;await anthropic.messages.create({ max_tokens: 1024, messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }], model: &#39;claude-3-opus-20240229&#39; }, {&#xA;  timeout: 5 * 1000,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On timeout, an &lt;code&gt;APIConnectionTimeoutError&lt;/code&gt; is thrown.&lt;/p&gt; &#xA;&lt;p&gt;Note that requests which time out will be &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-typescript/main/#retries&#34;&gt;retried twice by default&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Default Headers&lt;/h2&gt; &#xA;&lt;p&gt;We automatically send the &lt;code&gt;anthropic-version&lt;/code&gt; header set to &lt;code&gt;2023-06-01&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to, you can override it by setting default headers on a per-request basis.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that doing so may result in incorrect types and other unexpected or undefined behavior in the SDK.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import Anthropic from &#39;@anthropic-ai/sdk&#39;;&#xA;&#xA;const anthropic = new Anthropic();&#xA;&#xA;const message = await anthropic.messages.create(&#xA;  {&#xA;    max_tokens: 1024,&#xA;    messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;    model: &#39;claude-3-opus-20240229&#39;,&#xA;  },&#xA;  { headers: { &#39;anthropic-version&#39;: &#39;My-Custom-Value&#39; } },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Accessing raw Response data (e.g., headers)&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;raw&#34; &lt;code&gt;Response&lt;/code&gt; returned by &lt;code&gt;fetch()&lt;/code&gt; can be accessed through the &lt;code&gt;.asResponse()&lt;/code&gt; method on the &lt;code&gt;APIPromise&lt;/code&gt; type that all methods return.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;.withResponse()&lt;/code&gt; method to get the raw &lt;code&gt;Response&lt;/code&gt; along with the parsed data.&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const anthropic = new Anthropic();&#xA;&#xA;const response = await anthropic.messages&#xA;  .create({&#xA;    max_tokens: 1024,&#xA;    messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;    model: &#39;claude-3-opus-20240229&#39;,&#xA;  })&#xA;  .asResponse();&#xA;console.log(response.headers.get(&#39;X-My-Header&#39;));&#xA;console.log(response.statusText); // access the underlying Response object&#xA;&#xA;const { data: message, response: raw } = await anthropic.messages&#xA;  .create({&#xA;    max_tokens: 1024,&#xA;    messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;    model: &#39;claude-3-opus-20240229&#39;,&#xA;  })&#xA;  .withResponse();&#xA;console.log(raw.headers.get(&#39;X-My-Header&#39;));&#xA;console.log(message.content);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making custom/undocumented requests&lt;/h3&gt; &#xA;&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented endpoints, params, or response properties, the library can still be used.&lt;/p&gt; &#xA;&lt;h4&gt;Undocumented endpoints&lt;/h4&gt; &#xA;&lt;p&gt;To make requests to undocumented endpoints, you can use &lt;code&gt;client.get&lt;/code&gt;, &lt;code&gt;client.post&lt;/code&gt;, and other HTTP verbs. Options on the client, such as retries, will be respected when making these requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await client.post(&#39;/some/path&#39;, {&#xA;  body: { some_prop: &#39;foo&#39; },&#xA;  query: { some_query_arg: &#39;bar&#39; },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Undocumented request params&lt;/h4&gt; &#xA;&lt;p&gt;To make requests using undocumented parameters, you may use &lt;code&gt;// @ts-expect-error&lt;/code&gt; on the undocumented parameter. This library doesn&#39;t validate at runtime that the request matches the type, so any extra values you send will be sent as-is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;client.foo.create({&#xA;  foo: &#39;my_param&#39;,&#xA;  bar: 12,&#xA;  // @ts-expect-error baz is not yet public&#xA;  baz: &#39;undocumented option&#39;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For requests with the &lt;code&gt;GET&lt;/code&gt; verb, any extra params will be in the query, all other requests will send the extra param in the body.&lt;/p&gt; &#xA;&lt;p&gt;If you want to explicitly send an extra argument, you can do so with the &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;, and &lt;code&gt;headers&lt;/code&gt; request options.&lt;/p&gt; &#xA;&lt;h4&gt;Undocumented response properties&lt;/h4&gt; &#xA;&lt;p&gt;To access undocumented response properties, you may access the response object with &lt;code&gt;// @ts-expect-error&lt;/code&gt; on the response object, or cast the response object to the requisite type. Like the request params, we do not validate or strip extra properties from the response from the API.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing the fetch client&lt;/h3&gt; &#xA;&lt;p&gt;By default, this library uses &lt;code&gt;node-fetch&lt;/code&gt; in Node, and expects a global &lt;code&gt;fetch&lt;/code&gt; function in other environments.&lt;/p&gt; &#xA;&lt;p&gt;If you would prefer to use a global, web-standards-compliant &lt;code&gt;fetch&lt;/code&gt; function even in a Node environment, (for example, if you are running Node with &lt;code&gt;--experimental-fetch&lt;/code&gt; or using NextJS which polyfills with &lt;code&gt;undici&lt;/code&gt;), add the following import before your first import &lt;code&gt;from &#34;Anthropic&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Tell TypeScript and the package to use the global web fetch instead of node-fetch.&#xA;// Note, despite the name, this does not add any polyfills, but expects them to be provided if needed.&#xA;import &#39;@anthropic-ai/sdk/shims/web&#39;;&#xA;import Anthropic from &#39;@anthropic-ai/sdk&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To do the inverse, add &lt;code&gt;import &#34;@anthropic-ai/sdk/shims/node&#34;&lt;/code&gt; (which does import polyfills). This can also be useful if you are getting the wrong TypeScript types for &lt;code&gt;Response&lt;/code&gt; (&lt;a href=&#34;https://github.com/anthropics/anthropic-sdk-typescript/tree/main/src/_shims#readme&#34;&gt;more details&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Logging and middleware&lt;/h3&gt; &#xA;&lt;p&gt;You may also provide a custom &lt;code&gt;fetch&lt;/code&gt; function when instantiating the client, which can be used to inspect or alter the &lt;code&gt;Request&lt;/code&gt; or &lt;code&gt;Response&lt;/code&gt; before/after each request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { fetch } from &#39;undici&#39;; // as one example&#xA;import Anthropic from &#39;@anthropic-ai/sdk&#39;;&#xA;&#xA;const client = new Anthropic({&#xA;  fetch: async (url: RequestInfo, init?: RequestInit): Promise&amp;lt;Response&amp;gt; =&amp;gt; {&#xA;    console.log(&#39;About to make a request&#39;, url, init);&#xA;    const response = await fetch(url, init);&#xA;    console.log(&#39;Got response&#39;, response);&#xA;    return response;&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if given a &lt;code&gt;DEBUG=true&lt;/code&gt; environment variable, this library will log all requests and responses automatically. This is intended for debugging purposes only and may change in the future without notice.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring an HTTP(S) Agent (e.g., for proxies)&lt;/h3&gt; &#xA;&lt;p&gt;By default, this library uses a stable agent for all http/https requests to reuse TCP connections, eliminating many TCP &amp;amp; TLS handshakes and shaving around 100ms off most requests.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to disable or customize this behavior, for example to use the API behind a proxy, you can pass an &lt;code&gt;httpAgent&lt;/code&gt; which is used for all requests (be they http or https), for example:&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import http from &#39;http&#39;;&#xA;import { HttpsProxyAgent } from &#39;https-proxy-agent&#39;;&#xA;&#xA;// Configure the default for all requests:&#xA;const anthropic = new Anthropic({&#xA;  httpAgent: new HttpsProxyAgent(process.env.PROXY_URL),&#xA;});&#xA;&#xA;// Override per-request:&#xA;await anthropic.messages.create(&#xA;  {&#xA;    max_tokens: 1024,&#xA;    messages: [{ role: &#39;user&#39;, content: &#39;Hello, Claude&#39; }],&#xA;    model: &#39;claude-3-opus-20240229&#39;,&#xA;  },&#xA;  {&#xA;    httpAgent: new http.Agent({ keepAlive: false }),&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semantic versioning&lt;/h2&gt; &#xA;&lt;p&gt;This package generally follows &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Changes that only affect static types, without breaking runtime behavior.&lt;/li&gt; &#xA; &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; &#xA;&lt;p&gt;We are keen for your feedback; please open an &lt;a href=&#34;https://www.github.com/anthropics/anthropic-sdk-typescript/issues&#34;&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;TypeScript &amp;gt;= 4.5 is supported.&lt;/p&gt; &#xA;&lt;p&gt;The following runtimes are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js 18 LTS or later (&lt;a href=&#34;https://endoflife.date/nodejs&#34;&gt;non-EOL&lt;/a&gt;) versions.&lt;/li&gt; &#xA; &lt;li&gt;Deno v1.28.0 or higher, using &lt;code&gt;import Anthropic from &#34;npm:@anthropic-ai/sdk&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Bun 1.0 or later.&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare Workers.&lt;/li&gt; &#xA; &lt;li&gt;Vercel Edge Runtime.&lt;/li&gt; &#xA; &lt;li&gt;Jest 28 or greater with the &lt;code&gt;&#34;node&#34;&lt;/code&gt; environment (&lt;code&gt;&#34;jsdom&#34;&lt;/code&gt; is not supported at this time).&lt;/li&gt; &#xA; &lt;li&gt;Nitro v2.6 or greater.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that React Native is not supported at this time.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in other runtime environments, please open or upvote an issue on GitHub.&lt;/p&gt;</summary>
  </entry>
</feed>