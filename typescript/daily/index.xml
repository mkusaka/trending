<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-17T01:41:37Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>react-native-maps/react-native-maps</title>
    <updated>2025-04-17T01:41:37Z</updated>
    <id>tag:github.com,2025-04-17:/react-native-maps/react-native-maps</id>
    <link href="https://github.com/react-native-maps/react-native-maps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Native Mapview component for iOS + Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-maps &lt;a href=&#34;https://www.npmjs.com/package/react-native-maps&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-maps.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;React Native Map components for iOS + Android&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is being maintained by a small group of people, and any help with issues and pull requests are always appreciated. If you are able and willing to contribute, please read the &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&#34;&gt;Installation Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/examples-setup.md&#34;&gt;Setup Instructions for the Included Example Project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;h2&gt;React Native Compatibility&lt;/h2&gt; &#xA;&lt;h3&gt;Important Notes:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fabric is now supported&lt;/strong&gt;:&lt;br&gt; Fabric is now supported for the latest version of the library, if you don&#39;t have Fabric (New Arch) enabled, please use v1.21.0 or earlier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version Requirements:&lt;/h3&gt; &#xA;&lt;h4&gt;Fabric Only&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Version &lt;code&gt;1.22.0&lt;/code&gt; and below&lt;/strong&gt;: Requires &lt;strong&gt;React Native &lt;code&gt;&amp;gt;= 0.76&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Old Arch&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Version &lt;code&gt;1.21.0&lt;/code&gt; and below&lt;/strong&gt;: Requires &lt;strong&gt;React Native &lt;code&gt;&amp;gt;= 0.74&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Version &lt;code&gt;1.14.0&lt;/code&gt; and above&lt;/strong&gt;: Requires &lt;strong&gt;React Native &lt;code&gt;&amp;gt;= 0.74&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Versions below &lt;code&gt;1.14.0&lt;/code&gt;&lt;/strong&gt;: Require &lt;strong&gt;React Native &lt;code&gt;&amp;gt;= 0.64.3&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Component API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/mapview.md&#34;&gt;&lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/marker.md&#34;&gt;&lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/callout.md&#34;&gt;&lt;code&gt;&amp;lt;Callout /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polygon.md&#34;&gt;&lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polyline.md&#34;&gt;&lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/circle.md&#34;&gt;&lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/overlay.md&#34;&gt;&lt;code&gt;&amp;lt;Overlay /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/heatmap.md&#34;&gt;&lt;code&gt;&amp;lt;Heatmap /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/geojson.md&#34;&gt;&lt;code&gt;&amp;lt;Geojson /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;General Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import MapView from &#39;react-native-maps&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MapView = require(&#39;react-native-maps&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This MapView component is built so that features on the map (such as Markers, Polygons, etc.) are specified as children of the MapView itself. This provides an intuitive and react-like API for declaratively controlling features on the map.&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a Map with an initial region&lt;/h3&gt; &#xA;&lt;h2&gt;MapView&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;MapView&#xA;  initialRegion={{&#xA;    latitude: 37.78825,&#xA;    longitude: -122.4324,&#xA;    latitudeDelta: 0.0922,&#xA;    longitudeDelta: 0.0421,&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a MapView while controlling the region as state&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;getInitialState() {&#xA;  return {&#xA;    region: {&#xA;      latitude: 37.78825,&#xA;      longitude: -122.4324,&#xA;      latitudeDelta: 0.0922,&#xA;      longitudeDelta: 0.0421,&#xA;    },&#xA;  };&#xA;}&#xA;&#xA;onRegionChange(region) {&#xA;  this.setState({ region });&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a list of markers on a map&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {Marker} from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView region={this.state.region} onRegionChange={this.onRegionChange}&amp;gt;&#xA;  {this.state.markers.map((marker, index) =&amp;gt; (&#xA;    &amp;lt;Marker&#xA;      key={index}&#xA;      coordinate={marker.latlng}&#xA;      title={marker.title}&#xA;      description={marker.description}&#xA;    /&amp;gt;&#xA;  ))}&#xA;&amp;lt;/MapView&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a Marker with a custom image&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need to generate an &lt;code&gt;png&lt;/code&gt; image with various resolution (lets call them &lt;code&gt;custom_pin&lt;/code&gt;) - for more information go to &lt;a href=&#34;https://developer.android.com/studio/write/resource-manager#import&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding-images-to-your-xcode-project&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;put all images in Android drawables and iOS assets dir&lt;/li&gt; &#xA; &lt;li&gt;Now you can use the following code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Marker&#xA;  coordinate={{latitude: latitude, longitude: longitude}}&#xA;  image={{uri: &#39;custom_pin&#39;}}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You can also pass the image binary data like &lt;code&gt;image={require(&#39;custom_pin.png&#39;)}&lt;/code&gt;, but this will not scale good with the different screen sizes.&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a Marker with a custom view&lt;/h3&gt; &#xA;&lt;p&gt;Note: This has performance implications, if you wish for a simpler solution go with a custom image (save your self the headache)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Marker coordinate={{latitude: latitude, longitude: longitude}}&amp;gt;&#xA;  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;&#xA;&amp;lt;/Marker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a custom Marker with a custom Callout&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {Callout} from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;Marker coordinate={marker.latlng}&amp;gt;&#xA;  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;&#xA;  &amp;lt;Callout&amp;gt;&#xA;    &amp;lt;MyCustomCalloutView {...marker} /&amp;gt;&#xA;  &amp;lt;/Callout&amp;gt;&#xA;&amp;lt;/Marker&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Draggable Markers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;MapView initialRegion={...}&amp;gt;&#xA;  &amp;lt;Marker draggable&#xA;    coordinate={this.state.x}&#xA;    onDragEnd={(e) =&amp;gt; this.setState({ x: e.nativeEvent.coordinate })}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a custom Tile Overlay&lt;/h3&gt; &#xA;&lt;h4&gt;Tile Overlay using tile server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {UrlTile} from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView region={this.state.region} onRegionChange={this.onRegionChange}&amp;gt;&#xA;  &amp;lt;UrlTile&#xA;    /**&#xA;     * The url template of the tile server. The patterns {x} {y} {z} will be replaced at runtime&#xA;     * For example, http://c.tile.openstreetmap.org/{z}/{x}/{y}.png&#xA;     */&#xA;    urlTemplate={this.state.urlTemplate}&#xA;    /**&#xA;     * The maximum zoom level for this tile overlay. Corresponds to the maximumZ setting in&#xA;     * MKTileOverlay. iOS only.&#xA;     */&#xA;    maximumZ={19}&#xA;    /**&#xA;     * flipY allows tiles with inverted y coordinates (origin at bottom left of map)&#xA;     * to be used. Its default value is false.&#xA;     */&#xA;    flipY={false}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Android: add the following line in your AndroidManifest.xml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For IOS: configure &lt;a href=&#34;https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&#34;&gt;App Transport Security&lt;/a&gt; in your app&lt;/p&gt; &#xA;&lt;h2&gt;React Native Configuration for Fabric / New Architecture&lt;/h2&gt; &#xA;&lt;p&gt;This library doesn&#39;t support the new arch yet due to issues with inserting subviews / interoplayer. we&#39;re working on it.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open your configuration file&lt;/strong&gt;: Locate the &lt;code&gt;react-native-config&lt;/code&gt; file in your project directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add the following configuration&lt;/strong&gt;: Include the &lt;code&gt;unstable_reactLegacyComponentNames&lt;/code&gt; array for both Android and iOS platforms as shown below:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {&#xA;  project: {&#xA;    android: {&#xA;      unstable_reactLegacyComponentNames: [&#xA;        &#39;AIRMap&#39;,&#xA;        &#39;AIRMapCallout&#39;,&#xA;        &#39;AIRMapCalloutSubview&#39;,&#xA;        &#39;AIRMapCircle&#39;,&#xA;        &#39;AIRMapHeatmap&#39;,&#xA;        &#39;AIRMapLocalTile&#39;,&#xA;        &#39;AIRMapMarker&#39;,&#xA;        &#39;AIRMapOverlay&#39;,&#xA;        &#39;AIRMapPolygon&#39;,&#xA;        &#39;AIRMapPolyline&#39;,&#xA;        &#39;AIRMapUrlTile&#39;,&#xA;        &#39;AIRMapWMSTile&#39;,&#xA;      ],&#xA;    },&#xA;    ios: {&#xA;      unstable_reactLegacyComponentNames: [&#xA;        &#39;AIRMap&#39;,&#xA;        &#39;AIRMapCallout&#39;,&#xA;        &#39;AIRMapCalloutSubview&#39;,&#xA;        &#39;AIRMapCircle&#39;,&#xA;        &#39;AIRMapHeatmap&#39;,&#xA;        &#39;AIRMapLocalTile&#39;,&#xA;        &#39;AIRMapMarker&#39;,&#xA;        &#39;AIRMapOverlay&#39;,&#xA;        &#39;AIRMapPolygon&#39;,&#xA;        &#39;AIRMapPolyline&#39;,&#xA;        &#39;AIRMapUrlTile&#39;,&#xA;        &#39;AIRMapWMSTile&#39;,&#xA;      ],&#xA;    },&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;checkout the example project to see it in action.&lt;/p&gt; &#xA;&lt;h4&gt;Tile Overlay using local tiles&lt;/h4&gt; &#xA;&lt;p&gt;Tiles can be stored locally within device using xyz tiling scheme and displayed as tile overlay as well. This is usefull especially for offline map usage when tiles are available for selected map region within device storage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {LocalTile} from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView region={this.state.region} onRegionChange={this.onRegionChange}&amp;gt;&#xA;  &amp;lt;LocalTile&#xA;    /**&#xA;     * The path template of the locally stored tiles. The patterns {x} {y} {z} will be replaced at runtime&#xA;     * For example, /storage/emulated/0/mytiles/{z}/{x}/{y}.png&#xA;     */&#xA;    pathTemplate={this.state.pathTemplate}&#xA;    /**&#xA;     * The size of provided local tiles (usually 256 or 512).&#xA;     */&#xA;    tileSize={256}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Android: LocalTile is still just overlay over original map tiles. It means that if device is online, underlying tiles will be still downloaded. If original tiles download/display is not desirable set mapType to &#39;none&#39;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;MapView&#xA;  mapType={Platform.OS == &#34;android&#34; ? &#34;none&#34; : &#34;standard&#34;}&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/Category:Tile_downloading&#34;&gt;OSM Wiki&lt;/a&gt; for how to download tiles for offline usage.&lt;/p&gt; &#xA;&lt;h3&gt;Overlaying other components on the map&lt;/h3&gt; &#xA;&lt;p&gt;Place components that you wish to overlay &lt;code&gt;MapView&lt;/code&gt; underneath the &lt;code&gt;MapView&lt;/code&gt; closing tag. Absolutely position these elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;    /&amp;gt;&#xA;    &amp;lt;OverlayComponent&#xA;      style={{position: &#34;absolute&#34;, bottom: 50}}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing the map style (Google Maps Only)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;MapView provider=&#34;google&#34; googleMapId=&#34;yourStyledMapId&#34; /&amp;gt;&lt;/code&gt; Google Maps on iOS and Android supports styling via google cloud platform, the styled maps are published under a googleMapId, by simply setting the property googleMapId to the MapView you can use that styled map more info here: &lt;a href=&#34;https://developers.google.com/maps/documentation/get-map-id&#34;&gt;google map id&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MapView Events&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component and its child components have several events that you can subscribe to. This example displays some of them in a log as a demonstration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBpncYQASu2WTW8.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77YdviLqtjaecRYA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tracking Region / Location&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBoPSLlIKQ2dv7q.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XWjqECvdgjx9oA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Programmatically Changing Region&lt;/h3&gt; &#xA;&lt;p&gt;One can change the mapview&#39;s position using refs and component methods, or by passing in an updated &lt;code&gt;region&lt;/code&gt; prop. The component methods will allow one to animate to a given position like the native API could.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UB7poyB6YJ0KPWU.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77Yc4wK3pzZusEbm.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changing the style of the map&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/a9WqCL6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Arbitrary React Views as Markers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBcsCLoLQtksJxe.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UB1qGEM9jYni3KM.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using the MapView with the Animated API&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component can be made to work with the Animated API, having the entire &lt;code&gt;region&lt;/code&gt; prop be declared as an animated value. This allows one to animate the zoom and position of the MapView along with other gestures, giving a nice feel.&lt;/p&gt; &#xA;&lt;p&gt;Further, Marker views can use the animated API to enhance the effect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XMw9IwS6QAv0nC.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UBdGQdM1GmVoIdq.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issue: Since android needs to render its marker views as a bitmap, the animations APIs may not be compatible with the Marker views. Not sure if this can be worked around yet or not.&lt;/p&gt; &#xA;&lt;p&gt;Markers&#39; coordinates can also be animated, as shown in this example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xTcnTelp1OwGPu1Wh2.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xTcnT6WVpwlCiQnFW8.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Polygon Creator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UAZWqQBkOzs8HE4.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XVBRErNZl3zyWQ.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other Overlays&lt;/h3&gt; &#xA;&lt;p&gt;So far, &lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; are available to pass in as children to the &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XZCH8JpEhzVcNG.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XZyA0aYeOX5jsA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gradient Polylines (iOS MapKit only)&lt;/h3&gt; &#xA;&lt;p&gt;Gradient polylines can be created using the &lt;code&gt;strokeColors&lt;/code&gt; prop of the &lt;code&gt;&amp;lt;Polyline&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/P7UeqAm.png?1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Default Markers&lt;/h3&gt; &#xA;&lt;p&gt;Default markers will be rendered unless a custom marker is specified. One can optionally adjust the color of the default marker by using the &lt;code&gt;pinColor&lt;/code&gt; prop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77Y0pWKmUUnguHK0.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UBfk3I58VIwZjVe.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Callouts&lt;/h3&gt; &#xA;&lt;p&gt;Callouts to markers can be completely arbitrary react views, similar to markers. As a result, they can be interacted with like any other view.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can fall back to the standard behavior of just having a title/description through the &lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; props.&lt;/p&gt; &#xA;&lt;p&gt;Custom callout views can be the entire tooltip bubble, or just the content inside of the system default bubble.&lt;/p&gt; &#xA;&lt;p&gt;To handle press on specific subview of callout use &lt;code&gt;&amp;lt;CalloutSubview /&amp;gt;&lt;/code&gt; with &lt;code&gt;onPress&lt;/code&gt;. See &lt;code&gt;Callouts.js&lt;/code&gt; example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XNePGnMIIDpbnq.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77YdU0HXryvoRqaQ.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image-based Markers&lt;/h3&gt; &#xA;&lt;p&gt;Markers can be customized by just using images, and specified using the &lt;code&gt;image&lt;/code&gt; prop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/mzrOjTR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Draggable Markers&lt;/h3&gt; &#xA;&lt;p&gt;Markers are draggable, and emit continuous drag events to update other UI during drags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/l2JImnZxdv1WbpQfC.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/l2JIhv4Jx6Ugx1EGI.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lite Mode ( Android )&lt;/h3&gt; &#xA;&lt;p&gt;Enable lite mode on Android with &lt;code&gt;liteMode&lt;/code&gt; prop. Ideal when having multiple maps in a View or ScrollView.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/qZ2lAf18s89na.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Poi Click (Google Maps Only)&lt;/h3&gt; &#xA;&lt;p&gt;Poi are clickable, you can catch the event to get its information (usually to get the full detail from Google Place using the placeId).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3480VsCKnHr31uCLU3/giphy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Animated Region&lt;/h3&gt; &#xA;&lt;p&gt;The MapView can accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as its &lt;code&gt;region&lt;/code&gt; prop. This allows you to utilize the Animated API to control the map&#39;s center and zoom.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { AnimatedRegion, Animated } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    region: new AnimatedRegion({&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;      latitudeDelta: LATITUDE_DELTA,&#xA;      longitudeDelta: LONGITUDE_DELTA,&#xA;    }),&#xA;  };&#xA;}&#xA;&#xA;onRegionChange(region) {&#xA;  this.state.region.setValue(region);&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;Animated&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animated Marker Position&lt;/h3&gt; &#xA;&lt;p&gt;Markers can also accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as a coordinate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { AnimatedRegion, MarkerAnimated } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    coordinate: new AnimatedRegion({&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;    }),&#xA;  };&#xA;}&#xA;&#xA;componentWillReceiveProps(nextProps) {&#xA;  const duration = 500&#xA;&#xA;  if (this.props.coordinate !== nextProps.coordinate) {&#xA;    if (Platform.OS === &#39;android&#39;) {&#xA;      if (this.marker) {&#xA;        this.marker.animateMarkerToCoordinate(&#xA;          nextProps.coordinate,&#xA;          duration&#xA;        );&#xA;      }&#xA;    } else {&#xA;      this.state.coordinate.timing({&#xA;        ...nextProps.coordinate,&#xA;        useNativeDriver: true, // defaults to false if not passed explicitly&#xA;        duration&#xA;      }).start();&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView initialRegion={...}&amp;gt;&#xA;      &amp;lt;MarkerAnimated&#xA;        ref={marker =&amp;gt; { this.marker = marker }}&#xA;        coordinate={this.state.coordinate}&#xA;      /&amp;gt;&#xA;    &amp;lt;/MapView&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Take Snapshot of map&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { Marker } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    coordinate: {&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;    },&#xA;  };&#xA;}&#xA;&#xA;takeSnapshot () {&#xA;  // &#39;takeSnapshot&#39; takes a config object with the&#xA;  // following options&#xA;  const snapshot = this.map.takeSnapshot({&#xA;    width: 300,      // optional, when omitted the view-width is used&#xA;    height: 300,     // optional, when omitted the view-height is used&#xA;    region: {..},    // iOS only, optional region to render&#xA;    format: &#39;png&#39;,   // image formats: &#39;png&#39;, &#39;jpg&#39; (default: &#39;png&#39;)&#xA;    quality: 0.8,    // image quality: 0..1 (only relevant for jpg, default: 1)&#xA;    result: &#39;file&#39;   // result types: &#39;file&#39;, &#39;base64&#39; (default: &#39;file&#39;)&#xA;  });&#xA;  snapshot.then((uri) =&amp;gt; {&#xA;    this.setState({ mapSnapshot: uri });&#xA;  });&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;View&amp;gt;&#xA;      &amp;lt;MapView initialRegion={...} ref={map =&amp;gt; { this.map = map }}&amp;gt;&#xA;        &amp;lt;Marker coordinate={this.state.coordinate} /&amp;gt;&#xA;      &amp;lt;/MapView&amp;gt;&#xA;      &amp;lt;Image source={{ uri: this.state.mapSnapshot.uri }} /&amp;gt;&#xA;      &amp;lt;TouchableOpacity onPress={this.takeSnapshot}&amp;gt;&#xA;        Take Snapshot&#xA;      &amp;lt;/TouchableOpacity&amp;gt;&#xA;    &amp;lt;/View&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zoom to Specified Markers&lt;/h3&gt; &#xA;&lt;p&gt;Pass an array of marker identifiers to have the map re-focus.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o7qEbOQnO0yoXqKJ2.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/l41YdrQZ7m6Dz4h0c.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Zoom to Specified Coordinates&lt;/h3&gt; &#xA;&lt;p&gt;Pass an array of coordinates to focus a map region on said coordinates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1627824/18609960/da5d9e06-7cdc-11e6-811e-34e255093df9.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;My map is blank&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that you have &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&#34;&gt;properly installed&lt;/a&gt; react-native-maps.&lt;/li&gt; &#xA; &lt;li&gt;Check in the logs if there is more informations about the issue.&lt;/li&gt; &#xA; &lt;li&gt;Try setting the style of the MapView to an absolute position with top, left, right and bottom values set.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have enabled Google Maps API in &lt;a href=&#34;https://console.developers.google.com/apis/library&#34;&gt;Google developer console&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const styles = StyleSheet.create({&#xA;  map: {&#xA;    ...StyleSheet.absoluteFillObject,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;MapView&#xA;  style={styles.map}&#xA;  // other props&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Inputs don&#39;t focus&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When inputs don&#39;t focus or elements don&#39;t respond to tap, look at the order of the view hierarchy, sometimes the issue could be due to ordering of rendered components, prefer putting MapView as the first component.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View&amp;gt;&#xA;  &amp;lt;TextInput /&amp;gt;&#xA;  &amp;lt;MapView /&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View&amp;gt;&#xA;  &amp;lt;MapView /&amp;gt;&#xA;  &amp;lt;TextInput /&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Children Components Not Re-Rendering&lt;/h4&gt; &#xA;&lt;p&gt;Components that aren&#39;t declared by this library (Ex: Markers, Polyline) must not be children of the MapView component due to MapView&#39;s unique rendering methodology. Have your custom components / views outside the MapView component and position absolute to ensure they only re-render as needed. Example: Bad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;  &amp;lt;MapView style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;    &amp;lt;View style={{position: &#39;absolute&#39;, top: 100, left: 50}} /&amp;gt;&#xA;  &amp;lt;/MapView&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;  &amp;lt;MapView style={StyleSheet.absoluteFillObject} /&amp;gt;&#xA;  &amp;lt;View style={{position: &#39;absolute&#39;, top: 100, left: 50}} /&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/issues/1901&#34;&gt;https://github.com/react-native-maps/react-native-maps/issues/1901&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Crashing with EXC_BAD_ACCESS on iOS when switching apps&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;MapView&amp;gt;&lt;/code&gt; using Apple Maps in &lt;code&gt;mapType: &#34;standard&#34;&lt;/code&gt; will sometimes crash when you background the app or switch into another app. This is only an issue in XCode using Metal API Validation, and won&#39;t happen in production. To eliminate this problem even while debugging in XCode, go to &lt;code&gt;Edit Scheme... -&amp;gt; Run (Debug) -&amp;gt; Diagnostics&lt;/code&gt; and uncheck &lt;code&gt;Metal -&amp;gt; API Validation&lt;/code&gt;. (h/t &lt;a href=&#34;https://github.com/Simon-TechForm&#34;&gt;@Simon-TechForm&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&#34;&gt;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;onRegionChangeComplete() callback is called infinitely&lt;/h4&gt; &#xA;&lt;p&gt;If changing the state in &lt;code&gt;onRegionChangeComplete&lt;/code&gt; is called infinitely, add a condition to limit these calls to occur only when the region change was done as a result of a user&#39;s action.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;onRegionChangeComplete={ (region, gesture) =&amp;gt; {&#xA;&#x9;// This fix only works on Google Maps because isGesture is NOT available on Apple Maps&#xA;&#x9;if (!gesture.isGesture) {&#xA;    return;&#xA;  }&#xA;&#xA;  // You can use&#xA;  dispatch({ type: &#34;map_region&#34;, payload: { mapRegion: region }}); // if using useReducer&#xA;&#x9;// setMapRegionState(region); // if using useState&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/issues/846#issuecomment-1210079461&#34;&gt;https://github.com/react-native-maps/react-native-maps/issues/846#issuecomment-1210079461&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; Copyright (c) 2017 Airbnb&#xA;&#xA; Licensed under the The MIT License (MIT) (the &#34;License&#34;);&#xA; you may not use this file except in compliance with the License.&#xA; You may obtain a copy of the License at&#xA;&#xA;    https://raw.githubusercontent.com/airbnb/react-native-maps/master/LICENSE&#xA;&#xA; Unless required by applicable law or agreed to in writing, software&#xA; distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; See the License for the specific language governing permissions and&#xA; limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>