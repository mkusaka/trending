<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-27T01:48:16Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>whoiskatrin/chart-gpt</title>
    <updated>2023-04-27T01:48:16Z</updated>
    <id>tag:github.com,2023-04-27:/whoiskatrin/chart-gpt</id>
    <link href="https://github.com/whoiskatrin/chart-gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI tool to build charts based on text input&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chart-GPT - text to beautiful charts within seconds&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/whoiskatrin/chart-gpt/raw/main/UI.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started, first clone this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/whoiskatrin/chart-gpt.git&#xA;cd chart-gpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then duplicate the &lt;code&gt;.env.example&lt;/code&gt; template with &lt;code&gt;cp .env.example .env&lt;/code&gt; and add your OpenAI API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=&#34;your-api-key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install the dependencies and start the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;npm run dev&#xA;# or&#xA;yarn&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the development server at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute to this project, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository.&lt;/li&gt; &#xA; &lt;li&gt;Clone your forked repository:&lt;/li&gt; &#xA; &lt;li&gt;For your changes:&lt;/li&gt; &#xA; &lt;li&gt;Make your changes, commit them, and push them to your forked repository:&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request on this repository.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>daangn/websites</title>
    <updated>2023-04-27T01:48:16Z</updated>
    <id>tag:github.com,2023-04-27:/daangn/websites</id>
    <link href="https://github.com/daangn/websites" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Daangn on the WWW&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;websites&lt;/h1&gt; &#xA;&lt;p&gt;Daangn on the WWW&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;당근마켓에서 공통으로 관리되는 웹사이트 소스코드 저장소입니다.&lt;/p&gt; &#xA;&lt;p&gt;점점 빈번해지는 웹사이트 개발과 관리를 효율화 하고 모두가 기여할 수 있도록 맥락을 보존하는 모노레포입니다.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/daangn/teams/webmasters&#34;&gt;@webmasters&lt;/a&gt; at &lt;a href=&#34;https://github.com/daangn&#34;&gt;daangn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/daangn/websites/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/daangn/websites/main/NOTICE&#34;&gt;&lt;code&gt;NOTICE&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>carlosazaustre/next-hexagonal-starter</title>
    <updated>2023-04-27T01:48:16Z</updated>
    <id>tag:github.com,2023-04-27:/carlosazaustre/next-hexagonal-starter</id>
    <link href="https://github.com/carlosazaustre/next-hexagonal-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hexagonal (Next) Frontend WebApp&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple webapp that uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)&#34;&gt;Hexagonal Architecture&lt;/a&gt; in the frontend.&lt;/p&gt; &#xA;&lt;p&gt;The API used is &lt;a href=&#34;https://jsonplaceholder.typicode.com/&#34;&gt;JSONPlaceholder&lt;/a&gt;, a fake online REST API for testing and prototyping.Using Post and Users entities mainly.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; as language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; as React Front/Back Framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt; for styling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://daisyui.com/&#34;&gt;DaisyUI&lt;/a&gt; for TailwindCSS components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cypress.io/&#34;&gt;Cypress&lt;/a&gt; for E2E testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; for Unit testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testing-library.com/&#34;&gt;Testing Library&lt;/a&gt; for React Components testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; for linting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt; for code formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://typicode.github.io/husky/#/&#34;&gt;Husky&lt;/a&gt; for pre-commit hooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://commitlint.js.org/#/&#34;&gt;Commitlint&lt;/a&gt; for commit message linting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;The project is structured following &#34;Screaming Architecture&#34; approach. The structure is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;src/&#xA;|-- modules/&#xA;    |-- posts/&#xA;        |-- domain/&#xA;        |-- application/&#xA;        |-- infra/&#xA;    |-- users/&#xA;        |-- domain/&#xA;        |-- application/&#xA;        |-- infra/&#xA;    |-- comments/&#xA;        |-- domain/&#xA;        |-- application/&#xA;        |-- infra/&#xA;|-- components/&#xA;|-- hooks/&#xA;|-- sections/&#xA;|-- pages/&#xA;|-- styles/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;modules&lt;/code&gt; folder contains the different modules of the application. Each module has its own domain, application and infra layers.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;components&lt;/code&gt; folder contains the different UI shared components of the application.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;hooks&lt;/code&gt; folder contains the different hooks of the application.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;sections&lt;/code&gt; folder contains specific components and utils functions related with a module.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; folder contains the different pages (or Next.js routes) of the application&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;styles&lt;/code&gt; folder contains the base styles using TailwindCSS.&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;Each module follows the same structure, with its own domain, application and infra layers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;modules/&#xA;|-- posts/&#xA;    |-- domain/&#xA;        |-- Post.ts&#xA;        |-- PostRepository.ts&#xA;    |-- application/&#xA;        |-- get/&#xA;            |-- getPostById.ts&#xA;        |-- get-all/&#xA;            |-- getAllPosts.ts&#xA;            |-- getAllPostsByUser.ts&#xA;            |-- getPaginatedPosts.ts&#xA;        |-- create/&#xA;            |-- createPost.ts&#xA;        |-- mappers/&#xA;            |-- PostMapper.ts&#xA;    |-- infra/&#xA;        |-- ApiPostRepository.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The project has unit and E2E testing. The unit testing is done using &lt;strong&gt;Jest&lt;/strong&gt; and &lt;strong&gt;Testing Library&lt;/strong&gt;. The E2E testing is done using &lt;strong&gt;Cypress&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unit tests and Component tests are in the &lt;code&gt;__tests__&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;The E2E tests are in the &lt;code&gt;cypress&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt;</summary>
  </entry>
</feed>