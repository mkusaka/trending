<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-20T01:39:05Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>riffusion/riffusion-app</title>
    <updated>2022-12-20T01:39:05Z</updated>
    <id>tag:github.com,2022-12-20:/riffusion/riffusion-app</id>
    <link href="https://github.com/riffusion/riffusion-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stable diffusion for real-time music generation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Riffusion App&lt;/h1&gt; &#xA;&lt;p&gt;Riffusion is an app for real-time music generation with stable diffusion.&lt;/p&gt; &#xA;&lt;p&gt;Read about it at &lt;a href=&#34;https://www.riffusion.com/about&#34;&gt;https://www.riffusion.com/about&lt;/a&gt; and try it at &lt;a href=&#34;https://www.riffusion.com/&#34;&gt;https://www.riffusion.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web app: &lt;a href=&#34;https://github.com/hmartiro/riffusion-app&#34;&gt;https://github.com/hmartiro/riffusion-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inference server: &lt;a href=&#34;https://github.com/hmartiro/riffusion-inference&#34;&gt;https://github.com/hmartiro/riffusion-inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Model checkpoint: &lt;a href=&#34;https://huggingface.co/riffusion/riffusion-model-v1&#34;&gt;https://huggingface.co/riffusion/riffusion-model-v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Colab notebook: &lt;a href=&#34;https://colab.research.google.com/drive/1FhH3HlN8Ps_Pr9OR6Qcfbfz7utDvICl0?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradio Web Demo: &lt;a href=&#34;https://huggingface.co/spaces/fffiloni/spectrogram-to-music&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains the interactive web app that powers the website.&lt;/p&gt; &#xA;&lt;p&gt;It is built with Next.js, React, Typescript, three.js, Tailwind, and Vercel.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; project bootstrapped with &lt;a href=&#34;https://github.com/vercel/next.js/tree/canary/packages/create-next-app&#34;&gt;&lt;code&gt;create-next-app&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure you have Node v18 or greater installed using &lt;code&gt;node --version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;# or&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the app.&lt;/p&gt; &#xA;&lt;p&gt;The app home is at &lt;code&gt;pages/index.js&lt;/code&gt;. The page auto-updates as you edit the file. The about page is at &lt;code&gt;pages/about.tsx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;pages/api&lt;/code&gt; directory is mapped to &lt;code&gt;/api/*&lt;/code&gt;. Files in this directory are treated as &lt;a href=&#34;https://nextjs.org/docs/api-routes/introduction&#34;&gt;API routes&lt;/a&gt; instead of React pages.&lt;/p&gt; &#xA;&lt;h2&gt;Inference Server&lt;/h2&gt; &#xA;&lt;p&gt;To actually generate model outputs, we need a model backend that responds to inference requests via API. If you have a large GPU that can run stable diffusion in under five seconds, clone and run the instructions in the &lt;a href=&#34;https://github.com/hmartiro/riffusion-inference&#34;&gt;inference server&lt;/a&gt; to run the Flask app.&lt;/p&gt; &#xA;&lt;p&gt;You will need to add a &lt;code&gt;.env.local&lt;/code&gt; file in the root of this repository specifying the URL of the inference server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RIFFUSION_FLASK_URL=http://127.0.0.1:3013/run_inference/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you build on this work, please cite it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{Forsgren_Martiros_2022,&#xA;  author = {Forsgren, Seth* and Martiros, Hayk*},&#xA;  title = {{Riffusion - Stable diffusion for real-time music generation}},&#xA;  url = {https://riffusion.com/about},&#xA;  year = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-cpptools</title>
    <updated>2022-12-20T01:39:05Z</updated>
    <id>tag:github.com,2022-12-20:/microsoft/vscode-cpptools</id>
    <link href="https://github.com/microsoft/vscode-cpptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official repository for the Microsoft C/C++ extension for VS Code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C/C++ for Visual Studio Code&lt;/h1&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-cpptools&#34;&gt;Repository&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://github.com/microsoft/vscode-cpptools/issues&#34;&gt;Issues&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://code.visualstudio.com/docs/languages/cpp&#34;&gt;Documentation&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://github.com/microsoft/vscode-cpptools/tree/main/Code%20Samples&#34;&gt;Code Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aka.ms/vsls&#34;&gt;&lt;img src=&#34;https://aka.ms/vsls-badge&#34; alt=&#34;Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C/C++ extension adds language support for C/C++ to Visual Studio Code, including &lt;a href=&#34;https://code.visualstudio.com/docs/cpp/cpp-ide&#34;&gt;editing (IntelliSense)&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/docs/cpp/cpp-debug&#34;&gt;debugging&lt;/a&gt; features.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-requisites&lt;/h2&gt; &#xA;&lt;p&gt;C++ is a compiled language meaning your program&#39;s source code must be translated (compiled) before it can be run on your computer. VS Code is first and foremost an editor, and relies on command-line tools to do much of the development workflow. The C/C++ extension &lt;strong&gt;does not include a C++ compiler or debugger&lt;/strong&gt;. You will need to install these tools or use those already installed on your computer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++ compiler pre-installed&lt;/li&gt; &#xA; &lt;li&gt;C++ debugger pre-installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Here is a list of compilers and architectures per platform officially supported by the extension. These are reflected by the available &lt;a href=&#34;https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation#_intellisense-mode&#34;&gt;IntelliSense modes&lt;/a&gt; from the extension&#39;s IntelliSense configuration. Note that support for other compilers may be limited.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Compilers&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Architectures&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MSVC, Clang, GCC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;x64, x86, arm64, arm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clang, GCC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;x64, x86, arm64, arm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clang, GCC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;x64, x86, arm64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more information about installing the required tools or setting up the extension, please follow the tutorials below. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview and tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/languages/cpp&#34;&gt;C/C++ extension overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/introvideos-cpp&#34;&gt;Introductory Videos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;C/C++ extension tutorials per compiler and platform&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/config-msvc&#34;&gt;Microsoft C++ compiler (MSVC) on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/config-mingw&#34;&gt;GCC and Mingw-w64 on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/config-wsl&#34;&gt;GCC on Windows Subsystem for Linux (WSL)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/config-linux&#34;&gt;GCC on Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/config-clang-mac&#34;&gt;Clang on macOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/cpp-ide&#34;&gt;Editing features (IntelliSense)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/customize-default-settings-cpp&#34;&gt;IntelliSense configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/colorization-cpp&#34;&gt;Enhanced colorization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/cpp-debug&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/launch-json-reference&#34;&gt;Debug configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/enable-logging-cpp&#34;&gt;Enable logging for IntelliSense or debugging&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions and feedback&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/cpp/faq-cpp&#34;&gt;FAQs&lt;/a&gt;&lt;/strong&gt; &lt;br&gt; Check out the FAQs before filing a question. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-cpptools/issues/new/choose&#34;&gt;Provide feedback&lt;/a&gt;&lt;/strong&gt; &lt;br&gt; File questions, issues, or feature requests for the extension. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Microsoft/vscode-cpptools/issues&#34;&gt;Known issues&lt;/a&gt;&lt;/strong&gt; &lt;br&gt; If someone has already filed an issue that encompasses your feedback, please leave a 👍 or 👎 reaction on the issue to upvote or downvote it to help us prioritize the issue. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.research.net/r/VBVV6C6&#34;&gt;Quick survey&lt;/a&gt;&lt;/strong&gt; &lt;br&gt; Let us know what you think of the extension by taking the quick survey.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome. Please see our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-cpptools/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft Open Source Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Data and telemetry&lt;/h2&gt; &#xA;&lt;p&gt;This extension collects usage data and sends it to Microsoft to help improve our products and services. Collection of telemetry is controlled via the same setting provided by Visual Studio Code: &lt;code&gt;&#34;telemetry.enableTelemetry&#34;&lt;/code&gt;. Read our &lt;a href=&#34;https://privacy.microsoft.com/en-us/privacystatement&#34;&gt;privacy statement&lt;/a&gt; to learn more.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Uniswap/token-lists</title>
    <updated>2022-12-20T01:39:05Z</updated>
    <id>tag:github.com,2022-12-20:/Uniswap/token-lists</id>
    <link href="https://github.com/Uniswap/token-lists" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📚 The Token Lists specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;@uniswap/token-lists (beta)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Uniswap/token-lists/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/Uniswap/token-lists/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://unpkg.com/@uniswap/token-lists@latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@uniswap/token-lists&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package includes a JSON schema for token lists, and TypeScript utilities for working with token lists.&lt;/p&gt; &#xA;&lt;p&gt;The JSON schema represents the technical specification for a token list which can be used in a dApp interface, such as the Uniswap Interface.&lt;/p&gt; &#xA;&lt;h2&gt;What are token lists?&lt;/h2&gt; &#xA;&lt;p&gt;Uniswap Token Lists is a specification for lists of token metadata (e.g. address, decimals, ...) that can be used by any dApp interfaces that needs one or more lists of tokens.&lt;/p&gt; &#xA;&lt;p&gt;Anyone can create and maintain a token list, as long as they follow the specification.&lt;/p&gt; &#xA;&lt;p&gt;Specifically an instance of a token list is a &lt;a href=&#34;https://www.json.org/json-en.html&#34;&gt;JSON&lt;/a&gt; blob that contains a list of &lt;a href=&#34;https://github.com/ethereum/eips/issues/20&#34;&gt;ERC20&lt;/a&gt; token metadata for use in dApp user interfaces. Token list JSON must validate against the &lt;a href=&#34;https://json-schema.org/&#34;&gt;JSON schema&lt;/a&gt; in order to be used in the Uniswap Interface. Tokens on token lists, and token lists themselves, are tagged so that users can easily find tokens.&lt;/p&gt; &#xA;&lt;h2&gt;JSON Schema $id&lt;/h2&gt; &#xA;&lt;p&gt;The JSON schema ID is &lt;a href=&#34;https://uniswap.org/tokenlist.schema.json&#34;&gt;https://uniswap.org/tokenlist.schema.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validating token lists&lt;/h2&gt; &#xA;&lt;p&gt;This package does not include code for token list validation. You can easily do this by including a library such as &lt;a href=&#34;https://ajv.js.org/&#34;&gt;ajv&lt;/a&gt; to perform the validation against the JSON schema. The schema is exported from the package for ease of use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#xA;import { schema } from &#39;@uniswap/token-lists&#39;&#xA;import Ajv from &#39;ajv&#39;&#xA;import addFormats from &#39;ajv-formats&#39;&#xA;import fetch from &#39;node-fetch&#39;&#xA;&#xA;const ARBITRUM_LIST = &#39;https://bridge.arbitrum.io/token-list-42161.json&#39;&#xA;&#xA;async function validate() {&#xA;  const ajv = new Ajv({ allErrors: true, verbose: true })&#xA;  addFormats(ajv)&#xA;  const validator = ajv.compile(schema);&#xA;  const response = await fetch(ARBITRUM_LIST)&#xA;  const data = await response.json()&#xA;  const valid = validator(data)&#xA;  if (valid) {&#xA;    return valid&#xA;  }&#xA;  if (validator.errors) {&#xA;    throw validator.errors.map(error =&amp;gt; {&#xA;      delete error.data&#xA;      return error&#xA;    })&#xA;  }&#xA;}&#xA;&#xA;validate()&#xA;  .then(console.log(&#34;Valid List.&#34;))&#xA;  .catch(console.error)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authoring token lists&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;The best way to manually author token lists is to use an editor that supports JSON schema validation. Most popular code editors do, such as &lt;a href=&#34;https://www.jetbrains.com/help/idea/json.html#ws_json_schema_add_custom&#34;&gt;IntelliJ&lt;/a&gt; or &lt;a href=&#34;https://code.visualstudio.com/docs/languages/json#_json-schemas-and-settings&#34;&gt;VSCode&lt;/a&gt;. Other editors can be found &lt;a href=&#34;https://json-schema.org/implementations.html#editors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The schema is registered in the &lt;a href=&#34;https://github.com/SchemaStore/schemastore&#34;&gt;SchemaStore&lt;/a&gt;, and any file that matches the pattern &lt;code&gt;*.tokenlist.json&lt;/code&gt; should &lt;a href=&#34;https://www.jetbrains.com/help/idea/json.html#ws_json_using_schemas&#34;&gt;automatically utilize&lt;/a&gt; the JSON schema for the &lt;a href=&#34;https://www.schemastore.org/json/#editors&#34;&gt;supported text editors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order for your token list to be able to be used, it must pass all JSON schema validation.&lt;/p&gt; &#xA;&lt;h3&gt;Automated&lt;/h3&gt; &#xA;&lt;p&gt;If you want to automate token listing, e.g. by pulling from a smart contract, or other sources, you can use this npm package to take advantage of the JSON schema for validation and the TypeScript types. Otherwise, you are simply working with JSON. All the usual tools apply, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { TokenList, schema } from &#39;@uniswap/token-lists&#39;&#xA;&#xA;// generate your token list however you like.&#xA;const myList: TokenList = generateMyTokenList();&#xA;&#xA;// use a tool like `ajv` to validate your generated token list&#xA;validateMyTokenList(myList, schema);&#xA;&#xA;// print the resulting JSON to stdout&#xA;process.stdout.write(JSON.stringify(myList));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semantic versioning&lt;/h2&gt; &#xA;&lt;p&gt;Lists include a &lt;code&gt;version&lt;/code&gt; field, which follows &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;List versions must follow the rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increment major version when tokens are removed&lt;/li&gt; &#xA; &lt;li&gt;Increment minor version when tokens are added&lt;/li&gt; &#xA; &lt;li&gt;Increment patch version when tokens already on the list have minor details changed (name, symbol, logo URL, decimals)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Changing a token address or chain ID is considered both a remove and an add, and should be a major version update.&lt;/p&gt; &#xA;&lt;p&gt;Note that list versioning is used to improve the user experience, but not for security, i.e. list versions are not meant to provide protection against malicious updates to a token list; i.e. the list semver is used as a lossy compression of the diff of list updates. List updates may still be diffed in the client dApp.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying your list&lt;/h2&gt; &#xA;&lt;p&gt;Once you have authored the list, you can make it available at any URI. Prefer pinning your list to IPFS (e.g. via &lt;a href=&#34;https://pinata.cloud&#34;&gt;pinata.cloud&lt;/a&gt;) and referencing the list by an ENS name that resolves to the &lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-1577&#34;&gt;contenthash&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If hosted on HTTPS, make sure the endpoint is configured to send an access-control-allow-origin header to avoid CORS errors.&lt;/p&gt; &#xA;&lt;h3&gt;Linking an ENS name to the list&lt;/h3&gt; &#xA;&lt;p&gt;An ENS name can be assigned to an IPFS hash via the &lt;a href=&#34;https://eips.ethereum.org/EIPS/eip-1577&#34;&gt;contenthash&lt;/a&gt; text record. This is the preferred way of referencing your list.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;You can find a simple example of a token list in &lt;a href=&#34;https://raw.githubusercontent.com/Uniswap/token-lists/main/test/schema/example.tokenlist.json&#34;&gt;test/schema/example.tokenlist.json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A snapshot of the Uniswap default list encoded as a token list is found in &lt;a href=&#34;https://raw.githubusercontent.com/Uniswap/token-lists/main/test/schema/bigexample.tokenlist.json&#34;&gt;test/schema/bigexample.tokenlist.json&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>