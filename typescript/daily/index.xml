<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-22T01:38:59Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>C4illin/ConvertX</title>
    <updated>2025-05-22T01:38:59Z</updated>
    <id>tag:github.com,2025-05-22:/C4illin/ConvertX</id>
    <link href="https://github.com/C4illin/ConvertX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíæ Self-hosted online file converter. Supports 1000+ formats ‚öôÔ∏è&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/C4illin/ConvertX/main/images/logo.png&#34; alt=&#34;ConvertX&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ConvertX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/C4illin/ConvertX/actions/workflows/docker-publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/C4illin/ConvertX/actions/workflows/docker-publish.yml/badge.svg?branch=main&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/C4illin/ConvertX/pkgs/container/ConvertX&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?logo=github&amp;amp;url=https%3A%2F%2Fipitio.github.io%2Fbackage%2FC4illin%2FConvertX%2Fconvertx.json&amp;amp;query=%24.downloads&amp;amp;label=ghcr.io%20pulls&amp;amp;cacheSeconds=14400&#34; alt=&#34;ghcr.io Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/c4illin/convertx&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/c4illin/convertx?style=flat&amp;amp;logo=docker&amp;amp;label=dockerhub%20pulls&amp;amp;link=https%3A%2F%2Fhub.docker.com%2Frepository%2Fdocker%2Fc4illin%2Fconvertx%2Fgeneral&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/C4illin/ConvertX/pkgs/container/convertx&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/C4illin/ConvertX&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commits-since/C4illin/ConvertX/latest&#34; alt=&#34;GitHub commits since latest release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/C4illin/ConvertX&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://ghcr-badge.egpl.dev/c4illin/convertx/size?color=%230375b6&amp;amp;tag=latest&amp;amp;label=image+size&amp;amp;trim=&#34; alt=&#34;Docker container size&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- ![Dev image size](https://ghcr-badge.egpl.dev/c4illin/convertx/size?color=%230375b6&amp;tag=main&amp;label=dev+image&amp;trim=) --&gt; &#xA;&lt;p&gt;A self-hosted online file converter. Supports over a thousand different formats. Written with TypeScript, Bun and Elysia.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convert files to different formats&lt;/li&gt; &#xA; &lt;li&gt;Process multiple files at once&lt;/li&gt; &#xA; &lt;li&gt;Password protection&lt;/li&gt; &#xA; &lt;li&gt;Multiple accounts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Converters supported&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Converter&lt;/th&gt; &#xA;   &lt;th&gt;Use case&lt;/th&gt; &#xA;   &lt;th&gt;Converts from&lt;/th&gt; &#xA;   &lt;th&gt;Converts to&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libjxl/libjxl&#34;&gt;libjxl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JPEG XL&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/RazrFalcon/resvg&#34;&gt;resvg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SVG&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libvips/libvips&#34;&gt;Vips&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Images&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/strukturag/libheif&#34;&gt;libheif&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HEIF&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tug.org/xetex/&#34;&gt;XeLaTeX&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Documents&lt;/td&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;65&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.graphicsmagick.org/&#34;&gt;GraphicsMagick&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Images&lt;/td&gt; &#xA;   &lt;td&gt;167&lt;/td&gt; &#xA;   &lt;td&gt;130&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://inkscape.org/&#34;&gt;Inkscape&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vector images&lt;/td&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/assimp/assimp&#34;&gt;Assimp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3D Assets&lt;/td&gt; &#xA;   &lt;td&gt;77&lt;/td&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Video&lt;/td&gt; &#xA;   &lt;td&gt;~472&lt;/td&gt; &#xA;   &lt;td&gt;~199&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://potrace.sourceforge.net/&#34;&gt;Potrace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Raster to vector&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- | [Calibre](https://calibre-ebook.com/)                                        | E-books       | 26            | 19          | --&gt; &#xA;&lt;!-- many ffmpeg fileformats are duplicates --&gt; &#xA;&lt;p&gt;Any missing converter? Open an issue or pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] If you can&#39;t login, make sure you are accessing the service over localhost or https otherwise set HTTP_ALLOWED=true&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# docker-compose.yml&#xA;services:&#xA;  convertx: &#xA;    image: ghcr.io/c4illin/convertx&#xA;    container_name: convertx&#xA;    restart: unless-stopped&#xA;    ports:&#xA;      - &#34;3000:3000&#34;&#xA;    environment:&#xA;      - JWT_SECRET=aLongAndSecretStringUsedToSignTheJSONWebToken1234 # will use randomUUID() if unset&#xA;    volumes:&#xA;      - ./data:/app/data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 3000:3000 -v ./data:/app/data ghcr.io/c4illin/convertx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;code&gt;http://localhost:3000&lt;/code&gt; in your browser and create your account. Don&#39;t leave it unconfigured and open, as anyone can register the first account.&lt;/p&gt; &#xA;&lt;p&gt;If you get unable to open database file run &lt;code&gt;chown -R $USER:$USER path&lt;/code&gt; on the path you choose.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;All are optional, JWT_SECRET is recommended to be set.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JWT_SECRET&lt;/td&gt; &#xA;   &lt;td&gt;when unset it will use the value from randomUUID()&lt;/td&gt; &#xA;   &lt;td&gt;A long and secret string used to sign the JSON Web Token&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ACCOUNT_REGISTRATION&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Allow users to register accounts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP_ALLOWED&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Allow HTTP connections, only set this to true locally&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ALLOW_UNAUTHENTICATED&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Allow unauthenticated users to use the service, only set this to true locally&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AUTO_DELETE_EVERY_N_HOURS&lt;/td&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;Checks every n hours for files older then n hours and deletes them, set to 0 to disable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WEBROOT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The address to the root path setting this to &#34;/convert&#34; will serve the website on &#34;example.com/convert/&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FFMPEG_ARGS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Arguments to pass to ffmpeg, e.g. &lt;code&gt;-preset veryfast&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HIDE_HISTORY&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Hide the history page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Docker images&lt;/h3&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;:latest&lt;/code&gt; tag that is updated with every release and a &lt;code&gt;:main&lt;/code&gt; tag that is updated with every push to the main branch. &lt;code&gt;:latest&lt;/code&gt; is recommended for normal use.&lt;/p&gt; &#xA;&lt;p&gt;The image is available on &lt;a href=&#34;https://github.com/C4illin/ConvertX/pkgs/container/ConvertX&#34;&gt;GitHub Container Registry&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/c4illin/convertx&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;   &lt;th&gt;What it is&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image: ghcr.io/c4illin/convertx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The latest release on ghcr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image: ghcr.io/c4illin/convertx:main&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The latest commit on ghcr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image: c4illin/convertx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The latest release on docker hub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image: c4illin/convertx:main&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The latest commit on docker hub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ghcr-badge.egpl.dev/c4illin/convertx/size?color=%230375b6&amp;amp;tag=latest&amp;amp;label=release+image&amp;amp;trim=&#34; alt=&#34;Release image size&#34;&gt; &lt;img src=&#34;https://ghcr-badge.egpl.dev/c4illin/convertx/size?color=%230375b6&amp;amp;tag=main&amp;amp;label=dev+image&amp;amp;trim=&#34; alt=&#34;Dev image size&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- Dockerhub was introduced in 0.9.0 and older releases --&gt; &#xA;&lt;h3&gt;Tutorial&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] These are written by other people, and may be outdated, incorrect or wrong.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Tutorial in french: &lt;a href=&#34;https://belginux.com/installer-convertx-avec-docker/&#34;&gt;https://belginux.com/installer-convertx-avec-docker/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tutorial in chinese: &lt;a href=&#34;https://xzllll.com/24092901/&#34;&gt;https://xzllll.com/24092901/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/C4illin/ConvertX/main/images/preview.png&#34; alt=&#34;ConvertX Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://bun.sh/&#34;&gt;Bun&lt;/a&gt; and Git&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bun install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bun run dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Pull requests are welcome! See below and open issues for the list of todos.&lt;/p&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add messages for errors in converters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add searchable list of formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add options for converters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Divide index.tsx into smaller components&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make the upload button nicer and more easy to drop files on. Support copy paste as well if possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make errors logs visible from the web ui&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more converters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/jsummers/deark&#34;&gt;deark&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; LibreOffice&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/mgieseki/dvisvgm&#34;&gt;dvisvgm&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/C4illin/ConvertX/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=C4illin/ConvertX&#34; alt=&#34;Image with all contributors&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/C4illin/ConvertX/stargazers&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=C4illin/ConvertX&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=C4illin/ConvertX&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=C4illin/ConvertX&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>langchain-ai/agent-chat-ui</title>
    <updated>2025-05-22T01:38:59Z</updated>
    <id>tag:github.com,2025-05-22:/langchain-ai/agent-chat-ui</id>
    <link href="https://github.com/langchain-ai/agent-chat-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü¶úüí¨ Web app for interacting with any LangGraph agent (PY &amp; TS) via a chat interface.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agent Chat UI&lt;/h1&gt; &#xA;&lt;p&gt;Agent Chat UI is a Next.js application which enables chatting with any LangGraph server with a &lt;code&gt;messages&lt;/code&gt; key through a chat interface.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] üé• Watch the video setup guide &lt;a href=&#34;https://youtu.be/lInrwVnZ83o&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Don&#39;t want to run the app locally? Use the deployed site here: &lt;a href=&#34;https://agentchat.vercel.app&#34;&gt;agentchat.vercel.app&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, clone the repository, or run the &lt;a href=&#34;https://www.npmjs.com/package/create-agent-chat-app&#34;&gt;&lt;code&gt;npx&lt;/code&gt; command&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-agent-chat-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/langchain-ai/agent-chat-ui.git&#xA;&#xA;cd agent-chat-ui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The app will be available at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once the app is running (or if using the deployed site), you&#39;ll be prompted to enter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deployment URL&lt;/strong&gt;: The URL of the LangGraph server you want to chat with. This can be a production or development URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Assistant/Graph ID&lt;/strong&gt;: The name of the graph, or ID of the assistant to use when fetching, and submitting runs via the chat interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LangSmith API Key&lt;/strong&gt;: (only required for connecting to deployed LangGraph servers) Your LangSmith API key to use when authenticating requests sent to LangGraph servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After entering these values, click &lt;code&gt;Continue&lt;/code&gt;. You&#39;ll then be redirected to a chat interface where you can start chatting with your LangGraph server.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;You can bypass the initial setup form by setting the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NEXT_PUBLIC_API_URL=http://localhost:2024&#xA;NEXT_PUBLIC_ASSISTANT_ID=agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you want to connect to a production LangGraph server, read the &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agent-chat-ui/main/#going-to-production&#34;&gt;Going to Production&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To use these variables:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;.env.example&lt;/code&gt; file to a new file named &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fill in the values in the &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Restart the application&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When these environment variables are set, the application will use them instead of showing the setup form.&lt;/p&gt; &#xA;&lt;h2&gt;Hiding Messages in the Chat&lt;/h2&gt; &#xA;&lt;p&gt;You can control the visibility of messages within the Agent Chat UI in two main ways:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Prevent Live Streaming:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To stop messages from being displayed &lt;em&gt;as they stream&lt;/em&gt; from an LLM call, add the &lt;code&gt;langsmith:nostream&lt;/code&gt; tag to the chat model&#39;s configuration. The UI normally uses &lt;code&gt;on_chat_model_stream&lt;/code&gt; events to render streaming messages; this tag prevents those events from being emitted for the tagged model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Python Example:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langchain_anthropic import ChatAnthropic&#xA;&#xA;# Add tags via the .with_config method&#xA;model = ChatAnthropic().with_config(&#xA;    config={&#34;tags&#34;: [&#34;langsmith:nostream&#34;]}&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;TypeScript Example:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ChatAnthropic } from &#34;@langchain/anthropic&#34;;&#xA;&#xA;const model = new ChatAnthropic()&#xA;  // Add tags via the .withConfig method&#xA;  .withConfig({ tags: [&#34;langsmith:nostream&#34;] });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Even if streaming is hidden this way, the message will still appear after the LLM call completes if it&#39;s saved to the graph&#39;s state without further modification.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Hide Messages Permanently:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To ensure a message is &lt;em&gt;never&lt;/em&gt; displayed in the chat UI (neither during streaming nor after being saved to state), prefix its &lt;code&gt;id&lt;/code&gt; field with &lt;code&gt;do-not-render-&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; adding it to the graph&#39;s state, along with adding the &lt;code&gt;langsmith:do-not-render&lt;/code&gt; tag to the chat model&#39;s configuration. The UI explicitly filters out any message whose &lt;code&gt;id&lt;/code&gt; starts with this prefix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Python Example:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = model.invoke([messages])&#xA;# Prefix the ID before saving to state&#xA;result.id = f&#34;do-not-render-{result.id}&#34;&#xA;return {&#34;messages&#34;: [result]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;TypeScript Example:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const result = await model.invoke([messages]);&#xA;// Prefix the ID before saving to state&#xA;result.id = `do-not-render-${result.id}`;&#xA;return { messages: [result] };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This approach guarantees the message remains completely hidden from the user interface.&lt;/p&gt; &#xA;&lt;h2&gt;Rendering Artifacts&lt;/h2&gt; &#xA;&lt;p&gt;The Agent Chat UI supports rendering artifacts in the chat. Artifacts are rendered in a side panel to the right of the chat. To render an artifact, you can obtain the artifact context from the &lt;code&gt;thread.meta.artifact&lt;/code&gt; field. Here&#39;s a sample utility hook for obtaining the artifact context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;export function useArtifact&amp;lt;TContext = Record&amp;lt;string, unknown&amp;gt;&amp;gt;() {&#xA;  type Component = (props: {&#xA;    children: React.ReactNode;&#xA;    title?: React.ReactNode;&#xA;  }) =&amp;gt; React.ReactNode;&#xA;&#xA;  type Context = TContext | undefined;&#xA;&#xA;  type Bag = {&#xA;    open: boolean;&#xA;    setOpen: (value: boolean | ((prev: boolean) =&amp;gt; boolean)) =&amp;gt; void;&#xA;&#xA;    context: Context;&#xA;    setContext: (value: Context | ((prev: Context) =&amp;gt; Context)) =&amp;gt; void;&#xA;  };&#xA;&#xA;  const thread = useStreamContext&amp;lt;&#xA;    { messages: Message[]; ui: UIMessage[] },&#xA;    { MetaType: { artifact: [Component, Bag] } }&#xA;  &amp;gt;();&#xA;&#xA;  return thread.meta?.artifact;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After which you can render additional content using the &lt;code&gt;Artifact&lt;/code&gt; component from the &lt;code&gt;useArtifact&lt;/code&gt; hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { useArtifact } from &#34;../utils/use-artifact&#34;;&#xA;import { LoaderIcon } from &#34;lucide-react&#34;;&#xA;&#xA;export function Writer(props: {&#xA;  title?: string;&#xA;  content?: string;&#xA;  description?: string;&#xA;}) {&#xA;  const [Artifact, { open, setOpen }] = useArtifact();&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;div&#xA;        onClick={() =&amp;gt; setOpen(!open)}&#xA;        className=&#34;cursor-pointer rounded-lg border p-4&#34;&#xA;      &amp;gt;&#xA;        &amp;lt;p className=&#34;font-medium&#34;&amp;gt;{props.title}&amp;lt;/p&amp;gt;&#xA;        &amp;lt;p className=&#34;text-sm text-gray-500&#34;&amp;gt;{props.description}&amp;lt;/p&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;&#xA;      &amp;lt;Artifact title={props.title}&amp;gt;&#xA;        &amp;lt;p className=&#34;p-4 whitespace-pre-wrap&#34;&amp;gt;{props.content}&amp;lt;/p&amp;gt;&#xA;      &amp;lt;/Artifact&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Going to Production&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;re ready to go to production, you&#39;ll need to update how you connect, and authenticate requests to your deployment. By default, the Agent Chat UI is setup for local development, and connects to your LangGraph server directly from the client. This is not possible if you want to go to production, because it requires every user to have their own LangSmith API key, and set the LangGraph configuration themselves.&lt;/p&gt; &#xA;&lt;h3&gt;Production Setup&lt;/h3&gt; &#xA;&lt;p&gt;To productionize the Agent Chat UI, you&#39;ll need to pick one of two ways to authenticate requests to your LangGraph server. Below, I&#39;ll outline the two options:&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart - API Passthrough&lt;/h3&gt; &#xA;&lt;p&gt;The quickest way to productionize the Agent Chat UI is to use the &lt;a href=&#34;https://github.com/langchain-ai/langgraph-nextjs-api-passthrough&#34;&gt;API Passthrough&lt;/a&gt; package. This package provides a simple way to proxy requests to your LangGraph server, and handle authentication for you.&lt;/p&gt; &#xA;&lt;p&gt;This repository already contains all of the code you need to start using this method. The only configuration you need to do is set the proper environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NEXT_PUBLIC_ASSISTANT_ID=&#34;agent&#34;&#xA;# This should be the deployment URL of your LangGraph server&#xA;LANGGRAPH_API_URL=&#34;https://my-agent.default.us.langgraph.app&#34;&#xA;# This should be the URL of your website + &#34;/api&#34;. This is how you connect to the API proxy&#xA;NEXT_PUBLIC_API_URL=&#34;https://my-website.com/api&#34;&#xA;# Your LangSmith API key which is injected into requests inside the API proxy&#xA;LANGSMITH_API_KEY=&#34;lsv2_...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s cover what each of these environment variables does:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NEXT_PUBLIC_ASSISTANT_ID&lt;/code&gt;: The ID of the assistant you want to use when fetching, and submitting runs via the chat interface. This still needs the &lt;code&gt;NEXT_PUBLIC_&lt;/code&gt; prefix, since it&#39;s not a secret, and we use it on the client when submitting requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LANGGRAPH_API_URL&lt;/code&gt;: The URL of your LangGraph server. This should be the production deployment URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NEXT_PUBLIC_API_URL&lt;/code&gt;: The URL of your website + &lt;code&gt;/api&lt;/code&gt;. This is how you connect to the API proxy. For the &lt;a href=&#34;https://agentchat.vercel.app&#34;&gt;Agent Chat demo&lt;/a&gt;, this would be set as &lt;code&gt;https://agentchat.vercel.app/api&lt;/code&gt;. You should set this to whatever your production URL is.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LANGSMITH_API_KEY&lt;/code&gt;: Your LangSmith API key to use when authenticating requests sent to LangGraph servers. Once again, do &lt;em&gt;not&lt;/em&gt; prefix this with &lt;code&gt;NEXT_PUBLIC_&lt;/code&gt; since it&#39;s a secret, and is only used on the server when the API proxy injects it into the request to your deployed LangGraph server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For in depth documentation, consult the &lt;a href=&#34;https://www.npmjs.com/package/langgraph-nextjs-api-passthrough&#34;&gt;LangGraph Next.js API Passthrough&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Setup - Custom Authentication&lt;/h3&gt; &#xA;&lt;p&gt;Custom authentication in your LangGraph deployment is an advanced, and more robust way of authenticating requests to your LangGraph server. Using custom authentication, you can allow requests to be made from the client, without the need for a LangSmith API key. Additionally, you can specify custom access controls on requests.&lt;/p&gt; &#xA;&lt;p&gt;To set this up in your LangGraph deployment, please read the LangGraph custom authentication docs for &lt;a href=&#34;https://langchain-ai.github.io/langgraph/tutorials/auth/getting_started/&#34;&gt;Python&lt;/a&gt;, and &lt;a href=&#34;https://langchain-ai.github.io/langgraphjs/how-tos/auth/custom_auth/&#34;&gt;TypeScript here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve set it up on your deployment, you should make the following changes to the Agent Chat UI:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure any additional API requests to fetch the authentication token from your LangGraph deployment which will be used to authenticate requests from the client.&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;NEXT_PUBLIC_API_URL&lt;/code&gt; environment variable to your production LangGraph deployment URL.&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;NEXT_PUBLIC_ASSISTANT_ID&lt;/code&gt; environment variable to the ID of the assistant you want to use when fetching, and submitting runs via the chat interface.&lt;/li&gt; &#xA; &lt;li&gt;Modify the &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agent-chat-ui/main/src/providers/Stream.tsx&#34;&gt;&lt;code&gt;useTypedStream&lt;/code&gt;&lt;/a&gt; (extension of &lt;code&gt;useStream&lt;/code&gt;) hook to pass your authentication token through headers to the LangGraph server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const streamValue = useTypedStream({&#xA;  apiUrl: process.env.NEXT_PUBLIC_API_URL,&#xA;  assistantId: process.env.NEXT_PUBLIC_ASSISTANT_ID,&#xA;  // ... other fields&#xA;  defaultHeaders: {&#xA;    Authentication: `Bearer ${addYourTokenHere}`, // this is where you would pass your authentication token&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>cloudflare/templates</title>
    <updated>2025-05-22T01:38:59Z</updated>
    <id>tag:github.com,2025-05-22:/cloudflare/templates</id>
    <link href="https://github.com/cloudflare/templates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Templates for Cloudflare Workers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Templates for Cloudflare Workers&lt;/h1&gt; &#xA;&lt;p&gt;Cloudflare Workers let you deploy serverless code instantly across the globe for exceptional performance, reliability, and scale. This repository contains a collection of starter templates for building full-stack applications on Workers. &lt;strong&gt;You are encouraged to use, modify, and extend this code!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to start building with a template in this repository: the &lt;a href=&#34;https://dash.cloudflare.com/&#34;&gt;Cloudflare dashboard&lt;/a&gt; and &lt;a href=&#34;https://developers.cloudflare.com/pages/get-started/c3/&#34;&gt;C3&lt;/a&gt; (the &lt;code&gt;create-cloudflare&lt;/code&gt; CLI).&lt;/p&gt; &#xA;&lt;h3&gt;Starting from the Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;After logging in or signing up through the &lt;a href=&#34;https://dash.cloudflare.com/&#34;&gt;Cloudflare dashboard&lt;/a&gt;, open the &lt;a href=&#34;https://dash.cloudflare.com/?to=/:account/workers-and-pages/templates&#34;&gt;Workers templates page&lt;/a&gt; and select a template to get started with. From here, you can create a repository and deploy your first Worker without needing a local development environment.&lt;/p&gt; &#xA;&lt;h3&gt;Starting via CLI&lt;/h3&gt; &#xA;&lt;p&gt;To get started locally, run one of the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm create cloudflare@latest&#xA;# or&#xA;pnpm create cloudflare@latest&#xA;# or&#xA;yarn create cloudflare@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on getting started with our CLI, check out the &lt;a href=&#34;https://developers.cloudflare.com/workers/get-started/guide/&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Resources&lt;/h3&gt; &#xA;&lt;p&gt;Questions about Workers? Join the &lt;a href=&#34;https://workers.community/&#34;&gt;official Cloudflare Discord&lt;/a&gt; or check out the &lt;a href=&#34;https://developers.cloudflare.com/workers/&#34;&gt;Workers docs&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome template contributions! If there&#39;s a Workers template you think would be valuable, please read our &lt;a href=&#34;https://raw.githubusercontent.com/cloudflare/templates/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; and open an issue or pull request.&lt;/p&gt;</summary>
  </entry>
</feed>