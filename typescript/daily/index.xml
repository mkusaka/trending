<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-29T01:41:13Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coral-xyz/backpack</title>
    <updated>2022-09-29T01:41:13Z</updated>
    <id>tag:github.com,2022-09-29:/coral-xyz/backpack</id>
    <link href="https://github.com/coral-xyz/backpack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üéí Next level crypto wallet&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/coral-xyz/backpack/master/assets/backpack.png&#34;&gt; &#xA; &lt;h1&gt;Backpack&lt;/h1&gt; &#xA; &lt;p&gt; &lt;strong&gt;A home for your xNFTs&lt;/strong&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/coral-xyz/backpack/actions&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/coral-xyz/backpack/actions/workflows/pull_request.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.xnft.gg&#34;&gt;&lt;img alt=&#34;Tutorials&#34; src=&#34;https://img.shields.io/badge/docs-tutorials-blueviolet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/w9P85Y9yBR&#34;&gt;&lt;img alt=&#34;Discord Chat&#34; src=&#34;https://img.shields.io/badge/chat-discord-blueviolet&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backpack is in active development, so all APIs are subject to change.&lt;/li&gt; &#xA; &lt;li&gt;This code is unaudited. Use at your own risk.&lt;/li&gt; &#xA; &lt;li&gt;I repeat. This is not ready for production.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing the Latest Release&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to install the latest dev release, grab the latest &lt;strong&gt;build.zip&lt;/strong&gt; &lt;a href=&#34;https://github.com/coral-xyz/backpack/releases&#34;&gt;here&lt;/a&gt; and add it to your local chrome profile, using developer mode. See the video below.&lt;/p&gt; &#xA;&lt;h2&gt;Developing Locally&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/101902546/173857300-fc139113-0af5-46fc-baad-236a2ebf63f1.m4p&#34;&gt;https://user-images.githubusercontent.com/101902546/173857300-fc139113-0af5-46fc-baad-236a2ebf63f1.m4p&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;0. Pull the code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:coral-xyz/backpack.git&#xA;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1. Temporary preliminary steps&lt;/h3&gt; &#xA;&lt;h4&gt;Enable self-signed local SSL certs&lt;/h4&gt; &#xA;&lt;p&gt;Go to chrome://flags/#allow-insecure-localhost and enable the toggle, then restart chrome. Note: Please don&#39;t enable this if you don&#39;t know what you&#39;re doing. It will leave you vulnerable to exploits if left on. It is recommended to undo this step when you are done developing.&lt;/p&gt; &#xA;&lt;h4&gt;Environment variables&lt;/h4&gt; &#xA;&lt;p&gt;You can also optionally rename &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and set your own variables.&lt;/p&gt; &#xA;&lt;h3&gt;2. Install dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Build all packages for production&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Start packages for development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: In a fresh repo, you should run &lt;code&gt;yarn build&lt;/code&gt; before &lt;code&gt;yarn start&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you run into issues with builds try running &lt;code&gt;yarn clean&lt;/code&gt; and then start again.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5a. Install the development version of the extension&lt;/h3&gt; &#xA;&lt;p&gt;Go to chrome://extensions, enable developer mode (top right) and drag the &lt;code&gt;packages/app-extension/dev&lt;/code&gt; dir into the window. This version will have (Dev) in the title and supports live-reloading.&lt;/p&gt; &#xA;&lt;h3&gt;5b. Optionally install the built extension&lt;/h3&gt; &#xA;&lt;p&gt;If you want to try the production build of the extension, run &lt;code&gt;yarn build&lt;/code&gt; and drag the &lt;code&gt;packages/app-extension/build&lt;/code&gt; dir into chrome://extensions as above. This version won&#39;t have hot-reloading and local plugins won&#39;t be visible unless you also run &lt;code&gt;yarn start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion by you shall be licensed at the discretion of the repository maintainers without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vanilla-extract-css/vanilla-extract</title>
    <updated>2022-09-29T01:41:13Z</updated>
    <id>tag:github.com,2022-09-29:/vanilla-extract-css/vanilla-extract</id>
    <link href="https://github.com/vanilla-extract-css/vanilla-extract" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero-runtime Stylesheets-in-TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üßÅ vanilla-extract&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zero-runtime Stylesheets-in-TypeScript.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Write your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.&lt;/p&gt; &#xA;&lt;p&gt;Basically, it‚Äôs &lt;a href=&#34;https://github.com/css-modules/css-modules&#34;&gt;‚ÄúCSS Modules&lt;/a&gt;-in-TypeScript‚Äù but with scoped CSS Variables + heaps more.&lt;/p&gt; &#xA;&lt;p&gt;üî• &amp;nbsp; All styles generated at build time ‚Äî just like &lt;a href=&#34;https://sass-lang.com&#34;&gt;Sass&lt;/a&gt;, &lt;a href=&#34;http://lesscss.org&#34;&gt;Less&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;‚ú® &amp;nbsp; Minimal abstraction over standard CSS.&lt;/p&gt; &#xA;&lt;p&gt;ü¶Ñ &amp;nbsp; Works with any front-end framework ‚Äî or even without one.&lt;/p&gt; &#xA;&lt;p&gt;üå≥ &amp;nbsp; Locally scoped class names ‚Äî just like &lt;a href=&#34;https://github.com/css-modules/css-modules&#34;&gt;CSS Modules.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üöÄ &amp;nbsp; Locally scoped &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&#34;&gt;CSS Variables&lt;/a&gt;, &lt;code&gt;@keyframes&lt;/code&gt; and &lt;code&gt;@font-face&lt;/code&gt; rules.&lt;/p&gt; &#xA;&lt;p&gt;üé® &amp;nbsp; High-level theme system with support for simultaneous themes. No globals!&lt;/p&gt; &#xA;&lt;p&gt;üõ† &amp;nbsp; Utils for generating variable-based &lt;code&gt;calc&lt;/code&gt; expressions.&lt;/p&gt; &#xA;&lt;p&gt;üí™ &amp;nbsp; Type-safe styles via &lt;a href=&#34;https://github.com/frenic/csstype&#34;&gt;CSSType.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è &amp;nbsp; Optional runtime version for development and testing.&lt;/p&gt; &#xA;&lt;p&gt;üôà &amp;nbsp; Optional API for dynamic runtime theming.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;üåê &lt;a href=&#34;https://vanilla-extract.style&#34;&gt;Check out the documentation site for setup guides, examples and API docs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;üñ• &amp;nbsp; &lt;a href=&#34;https://codesandbox.io/s/github/vanilla-extract-css/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts&#34;&gt;Try it out for yourself in CodeSandbox.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Write your styles in &lt;code&gt;.css.ts&lt;/code&gt; files.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// styles.css.ts&#xA;&#xA;import { createTheme, style } from &#39;@vanilla-extract/css&#39;;&#xA;&#xA;export const [themeClass, vars] = createTheme({&#xA;  color: {&#xA;    brand: &#39;blue&#39;&#xA;  },&#xA;  font: {&#xA;    body: &#39;arial&#39;&#xA;  }&#xA;});&#xA;&#xA;export const exampleStyle = style({&#xA;  backgroundColor: vars.color.brand,&#xA;  fontFamily: vars.font.body,&#xA;  color: &#39;white&#39;,&#xA;  padding: 10&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° Once you&#39;ve &lt;a href=&#34;https://vanilla-extract.style/documentation/getting-started/&#34;&gt;configured your build tooling,&lt;/a&gt; these &lt;code&gt;.css.ts&lt;/code&gt; files will be evaluated at build time. None of the code in these files will be included in your final bundle. Think of it as using TypeScript as your preprocessor instead of Sass, Less, etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Then consume them in your markup.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// app.ts&#xA;&#xA;import { themeClass, exampleStyle } from &#39;./styles.css.ts&#39;;&#xA;&#xA;document.write(`&#xA;  &amp;lt;section class=&#34;${themeClass}&#34;&amp;gt;&#xA;    &amp;lt;h1 class=&#34;${exampleStyle}&#34;&amp;gt;Hello world!&amp;lt;/h1&amp;gt;&#xA;  &amp;lt;/section&amp;gt;&#xA;`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Want to work at a higher level while maximising style re-use? Check out üç® &lt;a href=&#34;https://vanilla-extract.style/documentation/packages/sprinkles&#34;&gt;Sprinkles&lt;/a&gt;, our official zero-runtime atomic CSS framework, built on top of vanilla-extract.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/naistran&#34;&gt;Nathan Nam Tran&lt;/a&gt; for creating &lt;a href=&#34;https://github.com/naistran/css-in-js-loader&#34;&gt;css-in-js-loader&lt;/a&gt;, which served as the initial starting point for &lt;a href=&#34;https://seek-oss.github.io/treat&#34;&gt;treat&lt;/a&gt;, the precursor to this library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stitches.dev/&#34;&gt;Stitches&lt;/a&gt; for getting us excited about CSS-Variables-in-JS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.seek.com.au&#34;&gt;SEEK&lt;/a&gt; for giving us the space to do interesting work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>justadudewhohacks/face-api.js</title>
    <updated>2022-09-29T01:41:13Z</updated>
    <id>tag:github.com,2022-09-29:/justadudewhohacks/face-api.js</id>
    <link href="https://github.com/justadudewhohacks/face-api.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JavaScript API for face detection and face recognition in the browser and nodejs with tensorflow.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;face-api.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/justadudewhohacks/face-api.js&#34;&gt;&lt;img src=&#34;https://travis-ci.org/justadudewhohacks/face-api.js.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.bri.im&#34;&gt;&lt;img src=&#34;https://slack.bri.im/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;JavaScript face recognition API for the browser and nodejs implemented on top of tensorflow.js core (&lt;a href=&#34;https://github.com/tensorflow/tfjs&#34;&gt;tensorflow/tfjs-core&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31125521/57224752-ad3dc080-700a-11e9-85b9-1357b9f9bca4.gif&#34; alt=&#34;faceapi&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;a href=&#34;https://justadudewhohacks.github.io/face-api.js/&#34;&gt;Click me for Live Demos!&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://itnext.io/face-api-js-javascript-api-for-face-recognition-in-the-browser-with-tensorflow-js-bcc2a6c4cf07&#34;&gt;face-api.js‚Ää‚Äî‚ÄäJavaScript API for Face Recognition in the Browser with tensorflow.js&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://itnext.io/realtime-javascript-face-tracking-and-face-recognition-using-face-api-js-mtcnn-face-detector-d924dd8b5740&#34;&gt;Realtime JavaScript Face Tracking and Face Recognition using face-api.js‚Äô MTCNN Face Detector&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://youtu.be/CVClHLwv-4I&#34;&gt;Realtime Webcam Face Detection And Emotion Recognition - Video&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://youtu.be/AZ4PdALMqx0&#34;&gt;Easy Face Recognition Tutorial With JavaScript - Video&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://medium.com/@andreas.schallwig/do-not-laugh-a-simple-ai-powered-game-3e22ad0f8166&#34;&gt;Using face-api.js with Vue.js and Electron&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.learnwithjason.dev/fun-with-machine-learning-pt-2&#34;&gt;Add Masks to People - Gant Laborde on Learn with Jason&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#running-the-examples&#34;&gt;Running the Examples&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#face-api.js-for-the-browser&#34;&gt;face-api.js for the Browser&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#face-api.js-for-nodejs&#34;&gt;face-api.js for Nodejs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started&#34;&gt;Usage&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-loading-models&#34;&gt;Loading the Models&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#high-level-api&#34;&gt;High Level API&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-displaying-detection-results&#34;&gt;Displaying Detection Results&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-face-detection-options&#34;&gt;Face Detection Options&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;Utility Classes&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#other-useful-utility&#34;&gt;Other Useful Utility&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#models&#34;&gt;Available Models&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#models-face-detection&#34;&gt;Face Detection&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#models-face-landmark-detection&#34;&gt;Face Landmark Detection&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#models-face-recognition&#34;&gt;Face Recognition&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#models-face-expression-recognition&#34;&gt;Face Expression Recognition&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#models-age-and-gender-recognition&#34;&gt;Age Estimation and Gender Recognition&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://justadudewhohacks.github.io/face-api.js/docs/globals.html&#34;&gt;API Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h2&gt;Face Recognition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31125521/57297377-bfcdfd80-70cf-11e9-8afa-2044cb167bff.gif&#34; alt=&#34;face-recognition&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Face Landmark Detection&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31125521/57297731-b1ccac80-70d0-11e9-9bd7-59d77f180322.jpg&#34; alt=&#34;face_landmark_detection&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Face Expression Recognition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31125521/50575270-f501d080-0dfb-11e9-9676-8f419efdade4.png&#34; alt=&#34;preview_face-expression-recognition&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Age Estimation &amp;amp; Gender Recognition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31125521/57297736-b5603380-70d0-11e9-873d-8b6c7243eb64.jpg&#34; alt=&#34;age_gender_recognition&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;running-the-examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Running the Examples&lt;/h1&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/justadudewhohacks/face-api.js.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Browser Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd face-api.js/examples/examples-browser&#xA;npm i&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browse to &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Nodejs Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd face-api.js/examples/examples-nodejs&#xA;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run one of the examples using ts-node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ts-node faceDetection.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or simply compile and run them with node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tsc faceDetection.ts&#xA;node faceDetection.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;face-api.js-for-the-browser&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;face-api.js for the Browser&lt;/h1&gt; &#xA;&lt;p&gt;Simply include the latest script from &lt;a href=&#34;https://github.com/justadudewhohacks/face-api.js/tree/master/dist&#34;&gt;dist/face-api.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or install it via npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i face-api.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;face-api.js-for-nodejs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;face-api.js for Nodejs&lt;/h1&gt; &#xA;&lt;p&gt;We can use the equivalent API in a nodejs environment by polyfilling some browser specifics, such as HTMLImageElement, HTMLCanvasElement and ImageData. The easiest way to do so is by installing the node-canvas package.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can simply construct your own tensors from image data and pass tensors as inputs to the API.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore you want to install @tensorflow/tfjs-node (not required, but highly recommended), which speeds things up drastically by compiling and binding to the native Tensorflow C++ library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i face-api.js canvas @tensorflow/tfjs-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we simply monkey patch the environment to use the polyfills:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// import nodejs bindings to native tensorflow,&#xA;// not required, but will speed up things drastically (python required)&#xA;import &#39;@tensorflow/tfjs-node&#39;;&#xA;&#xA;// implements nodejs wrappers for HTMLCanvasElement, HTMLImageElement, ImageData&#xA;import * as canvas from &#39;canvas&#39;;&#xA;&#xA;import * as faceapi from &#39;face-api.js&#39;;&#xA;&#xA;// patch nodejs environment, we need to provide an implementation of&#xA;// HTMLCanvasElement and HTMLImageElement&#xA;const { Canvas, Image, ImageData } = canvas&#xA;faceapi.env.monkeyPatch({ Canvas, Image, ImageData })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getting-started&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getting-started-loading-models&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Loading the Models&lt;/h2&gt; &#xA;&lt;p&gt;All global neural network instances are exported via faceapi.nets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(faceapi.nets)&#xA;// ageGenderNet&#xA;// faceExpressionNet&#xA;// faceLandmark68Net&#xA;// faceLandmark68TinyNet&#xA;// faceRecognitionNet&#xA;// ssdMobilenetv1&#xA;// tinyFaceDetector&#xA;// tinyYolov2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To load a model, you have to provide the corresponding manifest.json file as well as the model weight files (shards) as assets. Simply copy them to your public or assets folder. The manifest.json and shard files of a model have to be located in the same directory / accessible under the same route.&lt;/p&gt; &#xA;&lt;p&gt;Assuming the models reside in &lt;strong&gt;public/models&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await faceapi.nets.ssdMobilenetv1.loadFromUri(&#39;/models&#39;)&#xA;// accordingly for the other models:&#xA;// await faceapi.nets.faceLandmark68Net.loadFromUri(&#39;/models&#39;)&#xA;// await faceapi.nets.faceRecognitionNet.loadFromUri(&#39;/models&#39;)&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a nodejs environment you can furthermore load the models directly from disk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await faceapi.nets.ssdMobilenetv1.loadFromDisk(&#39;./models&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also load the model from a tf.NamedTensorMap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await faceapi.nets.ssdMobilenetv1.loadFromWeightMap(weightMap)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also create own instances of the neural nets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const net = new faceapi.SsdMobilenetv1()&#xA;await net.loadFromUri(&#39;/models&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also load the weights as a Float32Array (in case you want to use the uncompressed models):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// using fetch&#xA;net.load(await faceapi.fetchNetWeights(&#39;/models/face_detection_model.weights&#39;))&#xA;&#xA;// using axios&#xA;const res = await axios.get(&#39;/models/face_detection_model.weights&#39;, { responseType: &#39;arraybuffer&#39; })&#xA;const weights = new Float32Array(res.data)&#xA;net.load(weights)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getting-high-level-api&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;High Level API&lt;/h2&gt; &#xA;&lt;p&gt;In the following &lt;strong&gt;input&lt;/strong&gt; can be an HTML img, video or canvas element or the id of that element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img id=&#34;myImg&#34; src=&#34;images/example.png&#34; /&amp;gt;&#xA;&amp;lt;video id=&#34;myVideo&#34; src=&#34;media/example.mp4&#34; /&amp;gt;&#xA;&amp;lt;canvas id=&#34;myCanvas&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const input = document.getElementById(&#39;myImg&#39;)&#xA;// const input = document.getElementById(&#39;myVideo&#39;)&#xA;// const input = document.getElementById(&#39;myCanvas&#39;)&#xA;// or simply:&#xA;// const input = &#39;myImg&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Detecting Faces&lt;/h3&gt; &#xA;&lt;p&gt;Detect all faces in an image. Returns &lt;strong&gt;Array&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#interface-face-detection&#34;&gt;FaceDetection&lt;/a&gt;&amp;gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detections = await faceapi.detectAllFaces(input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect the face with the highest confidence score in an image. Returns &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#interface-face-detection&#34;&gt;FaceDetection&lt;/a&gt; | undefined&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detection = await faceapi.detectSingleFace(input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;strong&gt;detectAllFaces&lt;/strong&gt; and &lt;strong&gt;detectSingleFace&lt;/strong&gt; utilize the SSD Mobilenet V1 Face Detector. You can specify the face detector by passing the corresponding options object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detections1 = await faceapi.detectAllFaces(input, new faceapi.SsdMobilenetv1Options())&#xA;const detections2 = await faceapi.detectAllFaces(input, new faceapi.TinyFaceDetectorOptions())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can tune the options of each face detector as shown &lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-face-detection-options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Detecting 68 Face Landmark Points&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;After face detection, we can furthermore predict the facial landmarks for each detected face as follows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detect all faces in an image + computes 68 Point Face Landmarks for each detected face. Returns &lt;strong&gt;Array&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&lt;/a&gt;&amp;gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionsWithLandmarks = await faceapi.detectAllFaces(input).withFaceLandmarks()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect the face with the highest confidence score in an image + computes 68 Point Face Landmarks for that face. Returns &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&lt;/a&gt; | undefined&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionWithLandmarks = await faceapi.detectSingleFace(input).withFaceLandmarks()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify to use the tiny model instead of the default model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const useTinyModel = true&#xA;const detectionsWithLandmarks = await faceapi.detectAllFaces(input).withFaceLandmarks(useTinyModel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Computing Face Descriptors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;After face detection and facial landmark prediction the face descriptors for each face can be computed as follows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detect all faces in an image + compute 68 Point Face Landmarks for each detected face. Returns &lt;strong&gt;Array&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceDescriptor&amp;lt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&amp;gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const results = await faceapi.detectAllFaces(input).withFaceLandmarks().withFaceDescriptors()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect the face with the highest confidence score in an image + compute 68 Point Face Landmarks and face descriptor for that face. Returns &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceDescriptor&amp;lt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt; | undefined&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const result = await faceapi.detectSingleFace(input).withFaceLandmarks().withFaceDescriptor()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recognizing Face Expressions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Face expression recognition can be performed for detected faces as follows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detect all faces in an image + recognize face expressions of each face. Returns &lt;strong&gt;Array&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceExpressions&amp;lt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&amp;gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionsWithExpressions = await faceapi.detectAllFaces(input).withFaceLandmarks().withFaceExpressions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect the face with the highest confidence score in an image + recognize the face expressions for that face. Returns &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceExpressions&amp;lt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt; | undefined&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionWithExpressions = await faceapi.detectSingleFace(input).withFaceLandmarks().withFaceExpressions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also skip .withFaceLandmarks(), which will skip the face alignment step (less stable accuracy):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detect all faces without face alignment + recognize face expressions of each face. Returns &lt;strong&gt;Array&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceExpressions&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&lt;/a&gt;&amp;gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionsWithExpressions = await faceapi.detectAllFaces(input).withFaceExpressions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect the face with the highest confidence score without face alignment + recognize the face expression for that face. Returns &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithFaceExpressions&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&lt;/a&gt; | undefined&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionWithExpressions = await faceapi.detectSingleFace(input).withFaceExpressions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Age Estimation and Gender Recognition&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Age estimation and gender recognition from detected faces can be done as follows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detect all faces in an image + estimate age and recognize gender of each face. Returns &lt;strong&gt;Array&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithAge&amp;lt;WithGender&amp;lt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&amp;gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionsWithAgeAndGender = await faceapi.detectAllFaces(input).withFaceLandmarks().withAgeAndGender()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect the face with the highest confidence score in an image + estimate age and recognize gender for that face. Returns &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithAge&amp;lt;WithGender&amp;lt;WithFaceLandmarks&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt; | undefined&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionWithAgeAndGender = await faceapi.detectSingleFace(input).withFaceLandmarks().withAgeAndGender()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also skip .withFaceLandmarks(), which will skip the face alignment step (less stable accuracy):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detect all faces without face alignment + estimate age and recognize gender of each face. Returns &lt;strong&gt;Array&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithAge&amp;lt;WithGender&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&amp;gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionsWithAgeAndGender = await faceapi.detectAllFaces(input).withAgeAndGender()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detect the face with the highest confidence score without face alignment + estimate age and recognize gender for that face. Returns &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/#getting-started-utility-classes&#34;&gt;WithAge&amp;lt;WithGender&amp;lt;WithFaceDetection&amp;lt;{}&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt; | undefined&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detectionWithAgeAndGender = await faceapi.detectSingleFace(input).withAgeAndGender()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composition of Tasks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tasks can be composed as follows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// all faces&#xA;await faceapi.detectAllFaces(input)&#xA;await faceapi.detectAllFaces(input).withFaceExpressions()&#xA;await faceapi.detectAllFaces(input).withFaceLandmarks()&#xA;await faceapi.detectAllFaces(input).withFaceLandmarks().withFaceExpressions()&#xA;await faceapi.detectAllFaces(input).withFaceLandmarks().withFaceExpressions().withFaceDescriptors()&#xA;await faceapi.detectAllFaces(input).withFaceLandmarks().withAgeAndGender().withFaceDescriptors()&#xA;await faceapi.detectAllFaces(input).withFaceLandmarks().withFaceExpressions().withAgeAndGender().withFaceDescriptors()&#xA;&#xA;// single face&#xA;await faceapi.detectSingleFace(input)&#xA;await faceapi.detectSingleFace(input).withFaceExpressions()&#xA;await faceapi.detectSingleFace(input).withFaceLandmarks()&#xA;await faceapi.detectSingleFace(input).withFaceLandmarks().withFaceExpressions()&#xA;await faceapi.detectSingleFace(input).withFaceLandmarks().withFaceExpressions().withFaceDescriptor()&#xA;await faceapi.detectSingleFace(input).withFaceLandmarks().withAgeAndGender().withFaceDescriptor()&#xA;await faceapi.detectSingleFace(input).withFaceLandmarks().withFaceExpressions().withAgeAndGender().withFaceDescriptor()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Face Recognition by Matching Descriptors&lt;/h3&gt; &#xA;&lt;p&gt;To perform face recognition, one can use faceapi.FaceMatcher to compare reference face descriptors to query face descriptors.&lt;/p&gt; &#xA;&lt;p&gt;First, we initialize the FaceMatcher with the reference data, for example we can simply detect faces in a &lt;strong&gt;referenceImage&lt;/strong&gt; and match the descriptors of the detected faces to faces of subsequent images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const results = await faceapi&#xA;  .detectAllFaces(referenceImage)&#xA;  .withFaceLandmarks()&#xA;  .withFaceDescriptors()&#xA;&#xA;if (!results.length) {&#xA;  return&#xA;}&#xA;&#xA;// create FaceMatcher with automatically assigned labels&#xA;// from the detection results for the reference image&#xA;const faceMatcher = new faceapi.FaceMatcher(results)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can recognize a persons face shown in &lt;strong&gt;queryImage1&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const singleResult = await faceapi&#xA;  .detectSingleFace(queryImage1)&#xA;  .withFaceLandmarks()&#xA;  .withFaceDescriptor()&#xA;&#xA;if (singleResult) {&#xA;  const bestMatch = faceMatcher.findBestMatch(singleResult.descriptor)&#xA;  console.log(bestMatch.toString())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or we can recognize all faces shown in &lt;strong&gt;queryImage2&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const results = await faceapi&#xA;  .detectAllFaces(queryImage2)&#xA;  .withFaceLandmarks()&#xA;  .withFaceDescriptors()&#xA;&#xA;results.forEach(fd =&amp;gt; {&#xA;  const bestMatch = faceMatcher.findBestMatch(fd.descriptor)&#xA;  console.log(bestMatch.toString())&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create labeled reference descriptors as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const labeledDescriptors = [&#xA;  new faceapi.LabeledFaceDescriptors(&#xA;    &#39;obama&#39;,&#xA;    [descriptorObama1, descriptorObama2]&#xA;  ),&#xA;  new faceapi.LabeledFaceDescriptors(&#xA;    &#39;trump&#39;,&#xA;    [descriptorTrump]&#xA;  )&#xA;]&#xA;&#xA;const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getting-started-displaying-detection-results&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Displaying Detection Results&lt;/h2&gt; &#xA;&lt;p&gt;Preparing the overlay canvas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const displaySize = { width: input.width, height: input.height }&#xA;// resize the overlay canvas to the input dimensions&#xA;const canvas = document.getElementById(&#39;overlay&#39;)&#xA;faceapi.matchDimensions(canvas, displaySize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;face-api.js predefines some highlevel drawing functions, which you can utilize:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* Display detected face bounding boxes */&#xA;const detections = await faceapi.detectAllFaces(input)&#xA;// resize the detected boxes in case your displayed image has a different size than the original&#xA;const resizedDetections = faceapi.resizeResults(detections, displaySize)&#xA;// draw detections into the canvas&#xA;faceapi.draw.drawDetections(canvas, resizedDetections)&#xA;&#xA;/* Display face landmarks */&#xA;const detectionsWithLandmarks = await faceapi&#xA;  .detectAllFaces(input)&#xA;  .withFaceLandmarks()&#xA;// resize the detected boxes and landmarks in case your displayed image has a different size than the original&#xA;const resizedResults = faceapi.resizeResults(detectionsWithLandmarks, displaySize)&#xA;// draw detections into the canvas&#xA;faceapi.draw.drawDetections(canvas, resizedResults)&#xA;// draw the landmarks into the canvas&#xA;faceapi.draw.drawFaceLandmarks(canvas, resizedResults)&#xA;&#xA;&#xA;/* Display face expression results */&#xA;const detectionsWithExpressions = await faceapi&#xA;  .detectAllFaces(input)&#xA;  .withFaceLandmarks()&#xA;  .withFaceExpressions()&#xA;// resize the detected boxes and landmarks in case your displayed image has a different size than the original&#xA;const resizedResults = faceapi.resizeResults(detectionsWithExpressions, displaySize)&#xA;// draw detections into the canvas&#xA;faceapi.draw.drawDetections(canvas, resizedResults)&#xA;// draw a textbox displaying the face expressions with minimum probability into the canvas&#xA;const minProbability = 0.05&#xA;faceapi.draw.drawFaceExpressions(canvas, resizedResults, minProbability)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also draw boxes with custom text (&lt;a href=&#34;https://github.com/justadudewhohacks/tfjs-image-recognition-base/raw/master/src/draw/DrawBox.ts&#34;&gt;DrawBox&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const box = { x: 50, y: 50, width: 100, height: 100 }&#xA;// see DrawBoxOptions below&#xA;const drawOptions = {&#xA;  label: &#39;Hello I am a box!&#39;,&#xA;  lineWidth: 2&#xA;}&#xA;const drawBox = new faceapi.draw.DrawBox(box, drawOptions)&#xA;drawBox.draw(document.getElementById(&#39;myCanvas&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DrawBox drawing options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export interface IDrawBoxOptions {&#xA;  boxColor?: string&#xA;  lineWidth?: number&#xA;  drawLabelOptions?: IDrawTextFieldOptions&#xA;  label?: string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally you can draw custom text fields (&lt;a href=&#34;https://github.com/justadudewhohacks/tfjs-image-recognition-base/raw/master/src/draw/DrawTextField.ts&#34;&gt;DrawTextField&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const text = [&#xA;  &#39;This is a textline!&#39;,&#xA;  &#39;This is another textline!&#39;&#xA;]&#xA;const anchor = { x: 200, y: 200 }&#xA;// see DrawTextField below&#xA;const drawOptions = {&#xA;  anchorPosition: &#39;TOP_LEFT&#39;,&#xA;  backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;&#xA;}&#xA;const drawBox = new faceapi.draw.DrawTextField(text, anchor, drawOptions)&#xA;drawBox.draw(document.getElementById(&#39;myCanvas&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DrawTextField drawing options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export interface IDrawTextFieldOptions {&#xA;  anchorPosition?: AnchorPosition&#xA;  backgroundColor?: string&#xA;  fontColor?: string&#xA;  fontSize?: number&#xA;  fontStyle?: string&#xA;  padding?: number&#xA;}&#xA;&#xA;export enum AnchorPosition {&#xA;  TOP_LEFT = &#39;TOP_LEFT&#39;,&#xA;  TOP_RIGHT = &#39;TOP_RIGHT&#39;,&#xA;  BOTTOM_LEFT = &#39;BOTTOM_LEFT&#39;,&#xA;  BOTTOM_RIGHT = &#39;BOTTOM_RIGHT&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getting-started-face-detection-options&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Face Detection Options&lt;/h2&gt; &#xA;&lt;h3&gt;SsdMobilenetv1Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export interface ISsdMobilenetv1Options {&#xA;  // minimum confidence threshold&#xA;  // default: 0.5&#xA;  minConfidence?: number&#xA;&#xA;  // maximum number of faces to return&#xA;  // default: 100&#xA;  maxResults?: number&#xA;}&#xA;&#xA;// example&#xA;const options = new faceapi.SsdMobilenetv1Options({ minConfidence: 0.8 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TinyFaceDetectorOptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export interface ITinyFaceDetectorOptions {&#xA;  // size at which image is processed, the smaller the faster,&#xA;  // but less precise in detecting smaller faces, must be divisible&#xA;  // by 32, common sizes are 128, 160, 224, 320, 416, 512, 608,&#xA;  // for face tracking via webcam I would recommend using smaller sizes,&#xA;  // e.g. 128, 160, for detecting smaller faces use larger sizes, e.g. 512, 608&#xA;  // default: 416&#xA;  inputSize?: number&#xA;&#xA;  // minimum confidence threshold&#xA;  // default: 0.5&#xA;  scoreThreshold?: number&#xA;}&#xA;&#xA;// example&#xA;const options = new faceapi.TinyFaceDetectorOptions({ inputSize: 320 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getting-started-utility-classes&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Utility Classes&lt;/h2&gt; &#xA;&lt;h3&gt;IBox&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export interface IBox {&#xA;  x: number&#xA;  y: number&#xA;  width: number&#xA;  height: number&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IFaceDetection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export interface IFaceDetection {&#xA;  score: number&#xA;  box: Box&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IFaceLandmarks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export interface IFaceLandmarks {&#xA;  positions: Point[]&#xA;  shift: Point&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WithFaceDetection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export type WithFaceDetection&amp;lt;TSource&amp;gt; = TSource &amp;amp; {&#xA;  detection: FaceDetection&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WithFaceLandmarks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export type WithFaceLandmarks&amp;lt;TSource&amp;gt; = TSource &amp;amp; {&#xA;  unshiftedLandmarks: FaceLandmarks&#xA;  landmarks: FaceLandmarks&#xA;  alignedRect: FaceDetection&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WithFaceDescriptor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export type WithFaceDescriptor&amp;lt;TSource&amp;gt; = TSource &amp;amp; {&#xA;  descriptor: Float32Array&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WithFaceExpressions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export type WithFaceExpressions&amp;lt;TSource&amp;gt; = TSource &amp;amp; {&#xA;  expressions: FaceExpressions&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WithAge&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export type WithAge&amp;lt;TSource&amp;gt; = TSource &amp;amp; {&#xA;  age: number&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WithGender&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export type WithGender&amp;lt;TSource&amp;gt; = TSource &amp;amp; {&#xA;  gender: Gender&#xA;  genderProbability: number&#xA;}&#xA;&#xA;export enum Gender {&#xA;  FEMALE = &#39;female&#39;,&#xA;  MALE = &#39;male&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;getting-started-other-useful-utility&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other Useful Utility&lt;/h2&gt; &#xA;&lt;h3&gt;Using the Low Level API&lt;/h3&gt; &#xA;&lt;p&gt;Instead of using the high level API, you can directly use the forward methods of each neural network:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const detections1 = await faceapi.ssdMobilenetv1(input, options)&#xA;const detections2 = await faceapi.tinyFaceDetector(input, options)&#xA;const landmarks1 = await faceapi.detectFaceLandmarks(faceImage)&#xA;const landmarks2 = await faceapi.detectFaceLandmarksTiny(faceImage)&#xA;const descriptor = await faceapi.computeFaceDescriptor(alignedFaceImage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extracting a Canvas for an Image Region&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const regionsToExtract = [&#xA;  new faceapi.Rect(0, 0, 100, 100)&#xA;]&#xA;// actually extractFaces is meant to extract face regions from bounding boxes&#xA;// but you can also use it to extract any other region&#xA;const canvases = await faceapi.extractFaces(input, regionsToExtract)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Euclidean Distance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ment to be used for computing the euclidean distance between two face descriptors&#xA;const dist = faceapi.euclideanDistance([0, 0], [0, 10])&#xA;console.log(dist) // 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retrieve the Face Landmark Points and Contours&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const landmarkPositions = landmarks.positions&#xA;&#xA;// or get the positions of individual contours,&#xA;// only available for 68 point face ladnamrks (FaceLandmarks68)&#xA;const jawOutline = landmarks.getJawOutline()&#xA;const nose = landmarks.getNose()&#xA;const mouth = landmarks.getMouth()&#xA;const leftEye = landmarks.getLeftEye()&#xA;const rightEye = landmarks.getRightEye()&#xA;const leftEyeBbrow = landmarks.getLeftEyeBrow()&#xA;const rightEyeBrow = landmarks.getRightEyeBrow()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetch and Display Images from an URL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img id=&#34;myImg&#34; src=&#34;&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const image = await faceapi.fetchImage(&#39;/images/example.png&#39;)&#xA;&#xA;console.log(image instanceof HTMLImageElement) // true&#xA;&#xA;// displaying the fetched image content&#xA;const myImg = document.getElementById(&#39;myImg&#39;)&#xA;myImg.src = image.src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetching JSON&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const json = await faceapi.fetchJson(&#39;/files/example.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating an Image Picker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img id=&#34;myImg&#34; src=&#34;&#34;&amp;gt;&#xA;&amp;lt;input id=&#34;myFileUpload&#34; type=&#34;file&#34; onchange=&#34;uploadImage()&#34; accept=&#34;.jpg, .jpeg, .png&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;async function uploadImage() {&#xA;  const imgFile = document.getElementById(&#39;myFileUpload&#39;).files[0]&#xA;  // create an HTMLImageElement from a Blob&#xA;  const img = await faceapi.bufferToImage(imgFile)&#xA;  document.getElementById(&#39;myImg&#39;).src = img.src&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Canvas Element from an Image or Video Element&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img id=&#34;myImg&#34; src=&#34;images/example.png&#34; /&amp;gt;&#xA;&amp;lt;video id=&#34;myVideo&#34; src=&#34;media/example.mp4&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const canvas1 = faceapi.createCanvasFromMedia(document.getElementById(&#39;myImg&#39;))&#xA;const canvas2 = faceapi.createCanvasFromMedia(document.getElementById(&#39;myVideo&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;models&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Available Models&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;models-face-detection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Face Detection Models&lt;/h2&gt; &#xA;&lt;h3&gt;SSD Mobilenet V1&lt;/h3&gt; &#xA;&lt;p&gt;For face detection, this project implements a SSD (Single Shot Multibox Detector) based on MobileNetV1. The neural net will compute the locations of each face in an image and will return the bounding boxes together with it&#39;s probability for each face. This face detector is aiming towards obtaining high accuracy in detecting face bounding boxes instead of low inference time. The size of the quantized model is about 5.4 MB (&lt;strong&gt;ssd_mobilenetv1_model&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The face detection model has been trained on the &lt;a href=&#34;http://mmlab.ie.cuhk.edu.hk/projects/WIDERFace/&#34;&gt;WIDERFACE dataset&lt;/a&gt; and the weights are provided by &lt;a href=&#34;https://github.com/yeephycho&#34;&gt;yeephycho&lt;/a&gt; in &lt;a href=&#34;https://github.com/yeephycho/tensorflow-face-detection&#34;&gt;this&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h3&gt;Tiny Face Detector&lt;/h3&gt; &#xA;&lt;p&gt;The Tiny Face Detector is a very performant, realtime face detector, which is much faster, smaller and less resource consuming compared to the SSD Mobilenet V1 face detector, in return it performs slightly less well on detecting small faces. This model is extremely mobile and web friendly, thus it should be your GO-TO face detector on mobile devices and resource limited clients. The size of the quantized model is only 190 KB (&lt;strong&gt;tiny_face_detector_model&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The face detector has been trained on a custom dataset of ~14K images labeled with bounding boxes. Furthermore the model has been trained to predict bounding boxes, which entirely cover facial feature points, thus it in general produces better results in combination with subsequent face landmark detection than SSD Mobilenet V1.&lt;/p&gt; &#xA;&lt;p&gt;This model is basically an even tinier version of Tiny Yolo V2, replacing the regular convolutions of Yolo with depthwise separable convolutions. Yolo is fully convolutional, thus can easily adapt to different input image sizes to trade off accuracy for performance (inference time).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;models-face-landmark-detection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;68 Point Face Landmark Detection Models&lt;/h2&gt; &#xA;&lt;p&gt;This package implements a very lightweight and fast, yet accurate 68 point face landmark detector. The default model has a size of only 350kb (&lt;strong&gt;face_landmark_68_model&lt;/strong&gt;) and the tiny model is only 80kb (&lt;strong&gt;face_landmark_68_tiny_model&lt;/strong&gt;). Both models employ the ideas of depthwise separable convolutions as well as densely connected blocks. The models have been trained on a dataset of ~35k face images labeled with 68 face landmark points.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;models-face-recognition&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Face Recognition Model&lt;/h2&gt; &#xA;&lt;p&gt;For face recognition, a ResNet-34 like architecture is implemented to compute a face descriptor (a feature vector with 128 values) from any given face image, which is used to describe the characteristics of a persons face. The model is &lt;strong&gt;not&lt;/strong&gt; limited to the set of faces used for training, meaning you can use it for face recognition of any person, for example yourself. You can determine the similarity of two arbitrary faces by comparing their face descriptors, for example by computing the euclidean distance or using any other classifier of your choice.&lt;/p&gt; &#xA;&lt;p&gt;The neural net is equivalent to the &lt;strong&gt;FaceRecognizerNet&lt;/strong&gt; used in &lt;a href=&#34;https://github.com/justadudewhohacks/face-recognition.js&#34;&gt;face-recognition.js&lt;/a&gt; and the net used in the &lt;a href=&#34;https://github.com/davisking/dlib/raw/master/examples/dnn_face_recognition_ex.cpp&#34;&gt;dlib&lt;/a&gt; face recognition example. The weights have been trained by &lt;a href=&#34;https://github.com/davisking&#34;&gt;davisking&lt;/a&gt; and the model achieves a prediction accuracy of 99.38% on the LFW (Labeled Faces in the Wild) benchmark for face recognition.&lt;/p&gt; &#xA;&lt;p&gt;The size of the quantized model is roughly 6.2 MB (&lt;strong&gt;face_recognition_model&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;models-face-expression-recognition&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Face Expression Recognition Model&lt;/h2&gt; &#xA;&lt;p&gt;The face expression recognition model is lightweight, fast and provides reasonable accuracy. The model has a size of roughly 310kb and it employs depthwise separable convolutions and densely connected blocks. It has been trained on a variety of images from publicly available datasets as well as images scraped from the web. Note, that wearing glasses might decrease the accuracy of the prediction results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;models-age-and-gender-recognition&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Age and Gender Recognition Model&lt;/h2&gt; &#xA;&lt;p&gt;The age and gender recognition model is a multitask network, which employs a feature extraction layer, an age regression layer and a gender classifier. The model has a size of roughly 420kb and the feature extractor employs a tinier but very similar architecture to Xception.&lt;/p&gt; &#xA;&lt;p&gt;This model has been trained and tested on the following databases with an 80/20 train/test split each: UTK, FGNET, Chalearn, Wiki, IMDB*, CACD*, MegaAge, MegaAge-Asian. The &lt;code&gt;*&lt;/code&gt; indicates, that these databases have been algorithmically cleaned up, since the initial databases are very noisy.&lt;/p&gt; &#xA;&lt;h3&gt;Total Test Results&lt;/h3&gt; &#xA;&lt;p&gt;Total MAE (Mean Age Error): &lt;strong&gt;4.54&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Total Gender Accuracy: &lt;strong&gt;95%&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Test results for each database&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;-&lt;/code&gt; indicates, that there are no gender labels available for these databases.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;UTK&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;FGNET&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Chalearn&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Wiki&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;IMDB*&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;CACD*&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;MegaAge&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;MegaAge-Asian&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MAE&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.25&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.23&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.24&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.54&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.63&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.23&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.21&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gender Accuracy&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.93&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.94&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.95&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.97&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Test results for different age category groups&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Age Range&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;0 - 3&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;4 - 8&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;9 - 18&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;19 - 28&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;29 - 40&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;41 - 60&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;60 - 80&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;80+&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MAE&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.52&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.06&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.82&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.99&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.43&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4.94&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9.91&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gender Accuracy&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.69&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.80&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.88&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.96&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.97&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.97&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.96&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>