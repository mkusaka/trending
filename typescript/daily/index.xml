<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-13T01:38:09Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jacoblee93/fully-local-pdf-chatbot</title>
    <updated>2024-03-13T01:38:09Z</updated>
    <id>tag:github.com,2024-03-13:/jacoblee93/fully-local-pdf-chatbot</id>
    <link href="https://github.com/jacoblee93/fully-local-pdf-chatbot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yes, it&#39;s another chat over documents implementation... but this one is entirely local!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üè† Fully Client-Side Chat Over Documents&lt;/h1&gt; &#xA;&lt;p&gt;Yes, it&#39;s another chat over documents implementation... but this one is entirely local!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jacoblee93/fully-local-pdf-chatbot/main/public/images/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a Next.js app that read the content of an uploaded PDF, chunks it, adds it to a vector store, and performs RAG, all client side. You can even turn off your WiFi after the site loads!&lt;/p&gt; &#xA;&lt;p&gt;You can see a live version at &lt;a href=&#34;https://webml-demo.vercel.app&#34;&gt;https://webml-demo.vercel.app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users will need to download and set up &lt;a href=&#34;https://ollama.ai&#34;&gt;Ollama&lt;/a&gt;, then run the following commands to allow the site access to a locally running Mistral instance:&lt;/p&gt; &#xA;&lt;h2&gt;Mac/Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ OLLAMA_ORIGINS=https://webml-demo.vercel.app OLLAMA_HOST=127.0.0.1:11435 ollama serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in another terminal window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ OLLAMA_HOST=127.0.0.1:11435 ollama pull mistral&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;$ set OLLAMA_ORIGINS=https://webml-demo.vercel.app&#xA;set OLLAMA_HOST=127.0.0.1:11435&#xA;ollama serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in another terminal window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;$ set OLLAMA_HOST=127.0.0.1:11435&#xA;ollama pull mistral&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚ö° Stack&lt;/h2&gt; &#xA;&lt;p&gt;It uses the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tantaraio/voy&#34;&gt;Voy&lt;/a&gt; as the vector store, fully WASM in the browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ollama.ai/&#34;&gt;Ollama&lt;/a&gt; to run an LLM locally and expose it to the web app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com&#34;&gt;LangChain.js&lt;/a&gt; to call the models, perform retrieval, and generally orchestrate all the pieces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers.js/index&#34;&gt;Transformers.js&lt;/a&gt; to run open source &lt;a href=&#34;https://www.nomic.ai/&#34;&gt;Nomic&lt;/a&gt; embeddings in the browser. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For more speed on some machines, switch to &lt;code&gt;&#34;Xenova/all-MiniLM-L6-v2&#34;&lt;/code&gt; in &lt;code&gt;app/worker.ts&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I wanted to run as much of the app as possible directly in the browser, but you can swap in &lt;a href=&#34;https://js.langchain.com/docs/modules/data_connection/text_embedding/integrations/ollama&#34;&gt;Ollama embeddings&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;üî± Forking&lt;/h2&gt; &#xA;&lt;p&gt;To run/deploy this yourself, simply fork this repo and install the required dependencies with &lt;code&gt;yarn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are no required environment variables!&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Further reading&lt;/h2&gt; &#xA;&lt;p&gt;For a bit more on this topic, check out &lt;a href=&#34;https://ollama.ai/blog/building-llm-powered-web-apps&#34;&gt;my blog post on Ollama&lt;/a&gt; or &lt;a href=&#34;https://www.youtube.com/watch?v=-1sdWLr3TbI&#34;&gt;my Google Summit talk on building with LLMs in the browser&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üôè Thank you!&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://twitter.com/dawchihliou&#34;&gt;@dawchihliou&lt;/a&gt; for making Voy, &lt;a href=&#34;https://twitter.com/jmorgan&#34;&gt;@jmorgan&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/mchiang0610&#34;&gt;@mchiang0610&lt;/a&gt; for making Ollama and for your feedback, and &lt;a href=&#34;https://twitter.com/xenovacom&#34;&gt;@xenovacom&lt;/a&gt; for making Transformers.js.&lt;/p&gt; &#xA;&lt;p&gt;For more, follow me on Twitter &lt;a href=&#34;https://x.com/hacubu&#34;&gt;@Hacubu&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>polkadot-js/apps</title>
    <updated>2024-03-13T01:38:09Z</updated>
    <id>tag:github.com,2024-03-13:/polkadot-js/apps</id>
    <link href="https://github.com/polkadot-js/apps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Basic Polkadot/Substrate UI for interacting with a Polkadot and Substrate node. This is the main user-facing application, allowing access to all features available on Substrate chains.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;@polkadot/apps&lt;/h1&gt; &#xA;&lt;p&gt;A Portal into the Polkadot and Substrate networks. Provides a view and interaction layer from a browser.&lt;/p&gt; &#xA;&lt;p&gt;This can be accessed as a hosted application via &lt;a href=&#34;https://polkadot.js.org/apps/&#34;&gt;https://polkadot.js.org/apps/&lt;/a&gt; or you can access the IPFS hosted version via &lt;a href=&#34;https://polkadot.js.org/apps/ipfs&#34;&gt;https://polkadot.js.org/apps/ipfs&lt;/a&gt; (via hash) or &lt;a href=&#34;https://dotapps.io&#34;&gt;https://dotapps.io&lt;/a&gt; (via ipns) to explore any of the supported Polkadot and Substrate chains.&lt;/p&gt; &#xA;&lt;p&gt;If you run one or more IPFS node(s), pinning the UI (which only gets updated on releases) will make it faster for you and others. You can find details about that below in the IPFS chapter below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; If you are a chain developer and would like to add support for your chain to the UI, all the local configuration (API types, settings, logos) can be customized in &lt;a href=&#34;https://raw.githubusercontent.com/polkadot-js/apps/master/packages/apps-config#README.md&#34;&gt;the apps-config package&lt;/a&gt;, complete with instructions of what goes where.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The repo is split into a number of packages, each representing an application.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome!&lt;/p&gt; &#xA;&lt;p&gt;To start off, this repo (along with others in the &lt;a href=&#34;https://github.com/polkadot-js/&#34;&gt;@polkadot&lt;/a&gt; family) uses yarn workspaces to organize the code. As such, after cloning dependencies &lt;em&gt;should&lt;/em&gt; be installed via &lt;code&gt;yarn&lt;/code&gt;, not via npm, the latter will result in broken dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To get started -&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo locally, via &lt;code&gt;git clone https://github.com/polkadot-js/apps &amp;lt;optional local path&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ensure that you have a recent LTS version of Node.js, for development purposes &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node &amp;gt;= 16&lt;/a&gt; is recommended.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that you have a recent version of Yarn, for development purposes &lt;a href=&#34;https://yarnpkg.com/docs/install&#34;&gt;Yarn &amp;gt;= 1.22&lt;/a&gt; is required.&lt;/li&gt; &#xA; &lt;li&gt;Install the dependencies by running &lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ready! Now you can launch the UI (assuming you have a local Polkadot Node running), via &lt;code&gt;yarn run start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Access the UI via &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;You can run a docker container via -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it --name polkadot-ui -e WS_URL=ws://someip:9944 -p 80:80 jacogr/polkadot-js-apps:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a docker container containing local changes -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t jacogr/polkadot-js-apps -f docker/Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using these Docker commands, you can access the UI via &lt;a href=&#34;http://localhost:80&#34;&gt;http://localhost:80&lt;/a&gt; (or just &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;IPFS&lt;/h2&gt; &#xA;&lt;p&gt;IPFS allows sharing files in a decentralized manner in a similar fashion the polkadot network exchanges blocks. IPFS works best when many nodes seed the same data. Nodes can seed specific data by &lt;strong&gt;pinning&lt;/strong&gt; them.&lt;/p&gt; &#xA;&lt;p&gt;You can pin with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -s https://polkadot.js.org/apps/ipfs/pin.json | jq -jr .IpfsHash | xargs -0 -I CID ipfs pin add --progress CID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a script you can save as &lt;code&gt;/usr/local/bin/polkadotjs-ipfs-pin.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash&#xA;&#xA;IPFS=&#39;/usr/local/bin/ipfs&#39;&#xA;curl -s https://polkadot.js.org/apps/ipfs/pin.json | jq -jr .IpfsHash | xargs -0 -I CID $IPFS pin add --progress CID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I suggest to run the script once. The output should be similar to (the CID/Hash will very likely be different though):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ /usr/local/bin/polkadotjs-ipfs-pin.sh&#xA;pinned QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW recursively&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that you know the CID (hash), you can check whether the data is already pinned or not:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfs pin ls | grep QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW&#xA;QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that we know it works, we can automate that with a cron task. Run &lt;code&gt;crontab -e&lt;/code&gt;. If you see only comments, append the following to the file and save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SHELL=/bin/bash&#xA;HOME=/&#xA;0 * * * * /usr/local/bin/polkadotjs-ipfs-pin.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now our script will run every hours at minute &#39;0&#39; (8:00, 9:00, etc...). To check, we can unpin temporarily:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfs pin rm QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW&#xA;unpinned QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now asking for the CID confirms that is it not there.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfs pin ls QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW&#xA;Error: path &#39;QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW&#39; is not pinned&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait until the your cron task runs and try again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfs pin ls QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW&#xA;QmNYAbzaE8kRAf68YiN3ZuUxgdwroeav3JhicsHsG5b2oW recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tada! This is now automatic and you may forget it.&lt;/p&gt; &#xA;&lt;p&gt;If you are curious and want to know how many people seed the UI on IPFS, here is the magic command (it may take a while to return the answer as ipfs will search for about 1 minute):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ipfs dht findprovs QmTejwB7mJPBHBoqubjzHSgSxfLMcjnZA3LFefqoQc87VJ | wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are current about the content of what you just pinned, you may use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfs ls QmTejwB7mJPBHBoqubjzHSgSxfLMcjnZA3LFefqoQc87VJ&#xA;QmPJGyqVCcXm238noz7TZDByyGa35qqc8g6sfyXF3KDXZ3 38078   favicon.ico&#xA;QmdouVsVE9rMVB84Cy1ehVi1LAGW1fKcqqQxSEjgxJrv7H 668     index.html&#xA;QmWHcGf1JCFZCYjZsw52vM5RiJVbcNpX1fo2NyoBKBvtuf -       ipfs/&#xA;QmT6NwDsJzMyBs6bMq845nMumeJWbixBfNXA9hdAhAMdSG -       locales/&#xA;QmcgiZpwvpT1E1dkSS3zr5je89rZRVocNKPebgWhn3JVTC 2178582 main.ce05dfca.js&#xA;QmdnEtuhFDyw5Tjr82bFPzyveFrbkYjJAnUvBvzwT18YGG 337     manifest.json&#xA;QmW7gDKHbmtD7sRTqsvyo84bDpyYPZR3w1wQo8pme2q5HC -       next/&#xA;Qmd8UnRQiBobm4qb6dhiC1HoQ7SvwZrWJenoN3JPEV3iiF 480594  polkadotjs.3af757ad.js&#xA;QmUfXPMfNys8Y8dekuankBx7BHiSAjALCpBDKH6F5DdcNm 628284  react.0cecb00d.css&#xA;QmSEgXdQbC1ek9Td1mHy3BRvJpfWHm9zQYegTgAUj1QC4g 924156  react.8f083b49.js&#xA;QmfGBgFe2aqf83Wv21m9k5DH2ew89CDj4tydoxJWdK6NNL 1552    runtime.3d77e510.js&#xA;QmYPa8jcHH7gfopMALr5XTW4i1QM2xgVBe3NeP11y3tErA -       static/&#xA;QmeYBC5EgbccC8NEwXC2rvbd93YiHtTM5xYzqCDohXerDf 859984  vendor.8b793a81.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Desktop App&lt;/h2&gt; &#xA;&lt;p&gt;The main advantage of using Desktop App is that it by default stores encrypted accounts on the filesystem instead of browser&#39;s local storage. Local storage is susceptible to attacks using XSS (Cross-Site Scripting). There&#39;s no such risk when with files stored on disk.&lt;/p&gt; &#xA;&lt;p&gt;The desktop app uses the &lt;a href=&#34;https://www.electronjs.org/&#34;&gt;Electron&lt;/a&gt; framework. It provides the same features as web app, the only difference being different account storage.&lt;/p&gt; &#xA;&lt;p&gt;The accounts are stored in the following directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac: &lt;code&gt;~/Library/Application Support/polkadot-apps/polkadot-accounts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;~/.config/polkadot-apps/polkadot-accounts&lt;/code&gt; (or &lt;code&gt;$XDG_CONFIG_HOME/polkadot-apps/polkadot-accounts&lt;/code&gt; if &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; is defined)&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;%APPDATA%\polkadot-apps\polkadot-accounts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details on the desktop app, head over to &lt;a href=&#34;https://github.com/polkadot-js/apps/raw/master/packages/apps-electron/README.md&#34;&gt;Electron package README&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tiangolo/full-stack-fastapi-template</title>
    <updated>2024-03-13T01:38:09Z</updated>
    <id>tag:github.com,2024-03-13:/tiangolo/full-stack-fastapi-template</id>
    <link href="https://github.com/tiangolo/full-stack-fastapi-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full stack, modern web application template. Using FastAPI, React, SQLModel, PostgreSQL, Docker, GitHub Actions, automatic HTTPS and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Full Stack FastAPI Template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template/actions?query=workflow%3ATest&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/tiangolo/full-stack-fastapi-template/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/full-stack-fastapi-template&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coverage-badge.samuelcolvin.workers.dev/tiangolo/full-stack-fastapi-template.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dashboard - Dark Mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-postgresql&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/img/dashboard-dark.png&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technology Stack and Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ö° &lt;a href=&#34;https://fastapi.tiangolo.com&#34;&gt;&lt;strong&gt;FastAPI&lt;/strong&gt;&lt;/a&gt; for the Python backend API. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üß∞ &lt;a href=&#34;https://sqlmodel.tiangolo.com&#34;&gt;SQLModel&lt;/a&gt; for the Python SQL database interactions (ORM).&lt;/li&gt; &#xA;   &lt;li&gt;üîç &lt;a href=&#34;https://docs.pydantic.dev&#34;&gt;Pydantic&lt;/a&gt;, used by FastAPI, for the data validation and settings management.&lt;/li&gt; &#xA;   &lt;li&gt;üíæ &lt;a href=&#34;https://www.postgresql.org&#34;&gt;PostgreSQL&lt;/a&gt; as the SQL database.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üöÄ &lt;a href=&#34;https://react.dev&#34;&gt;React&lt;/a&gt; for the frontend. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üíÉ Using TypeScript, hooks, Vite, and other parts of a modern frontend stack.&lt;/li&gt; &#xA;   &lt;li&gt;üé® &lt;a href=&#34;https://chakra-ui.com&#34;&gt;Chakra UI&lt;/a&gt; for the frontend components.&lt;/li&gt; &#xA;   &lt;li&gt;ü§ñ An automatically generated frontend client.&lt;/li&gt; &#xA;   &lt;li&gt;ü¶á Dark mode support.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üêã &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker Compose&lt;/a&gt; for development and production.&lt;/li&gt; &#xA; &lt;li&gt;üîí Secure password hashing by default.&lt;/li&gt; &#xA; &lt;li&gt;üîë JWT token authentication.&lt;/li&gt; &#xA; &lt;li&gt;üì´ Email based password recovery.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Tests with &lt;a href=&#34;https://pytest.org&#34;&gt;Pytest&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üìû &lt;a href=&#34;https://traefik.io&#34;&gt;Traefik&lt;/a&gt; as a reverse proxy / load balancer.&lt;/li&gt; &#xA; &lt;li&gt;üö¢ Deployment instructions using Docker Compose, including how to set up a frontend Traefik proxy to handle automatic HTTPS certificates.&lt;/li&gt; &#xA; &lt;li&gt;üè≠ CI (continuous integration) and CD (continuous deployment) based on GitHub Actions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dashboard Login&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/img/login.png&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dashboard - Admin&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/img/dashboard.png&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dashboard - Create User&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/img/dashboard-create.png&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dashboard - Items&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/img/dashboard-items.png&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dashboard - User Settings&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/img/dashboard-user-settings.png&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interactive API documentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/img/docs.png&#34; alt=&#34;API docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;just fork or clone&lt;/strong&gt; this repository and use it as is.&lt;/p&gt; &#xA;&lt;p&gt;‚ú® It just works. ‚ú®&lt;/p&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;You can then update configs in the &lt;code&gt;.env&lt;/code&gt; files to customize your configurations.&lt;/p&gt; &#xA;&lt;p&gt;Before deploying it, make sure you change at least the values for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FIRST_SUPERUSER_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generate secret keys&lt;/h3&gt; &#xA;&lt;p&gt;Some environment variables in the &lt;code&gt;.env&lt;/code&gt; file have a default value of &lt;code&gt;changethis&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have to change them with a secret key, to generate secret keys you can run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -c &#34;import secrets; print(secrets.token_urlsafe(32))&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the content and use that as password / secret key. And run that again to generate another secure key.&lt;/p&gt; &#xA;&lt;h2&gt;How to use it - alternative with Copier&lt;/h2&gt; &#xA;&lt;p&gt;This repository also supports generating a new project using &lt;a href=&#34;https://copier.readthedocs.io&#34;&gt;Copier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It will copy all the files, ask you configuration questions, and update the &lt;code&gt;.env&lt;/code&gt; files with your answers.&lt;/p&gt; &#xA;&lt;h3&gt;Install Copier&lt;/h3&gt; &#xA;&lt;p&gt;You can install Copier with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install copier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or better, if you have &lt;a href=&#34;https://pipx.pypa.io/&#34;&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt;, you can run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipx install copier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you have &lt;code&gt;pipx&lt;/code&gt;, installing copier is optional, you could run it directly.&lt;/p&gt; &#xA;&lt;h3&gt;Generate a Project with Copier&lt;/h3&gt; &#xA;&lt;p&gt;Decide a name for your new project&#39;s directory, you will use it below. For example, &lt;code&gt;my-awesome-project&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Go to the directory that will be the parent of your project, and run the command with your project&#39;s name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;copier copy https://github.com/tiangolo/full-stack-fastapi-template my-awesome-project --trust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;pipx&lt;/code&gt; and you didn&#39;t install &lt;code&gt;copier&lt;/code&gt;, you can run it directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipx run copier copy https://github.com/tiangolo/full-stack-fastapi-template my-awesome-project --trust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the &lt;code&gt;--trust&lt;/code&gt; option is necessary to be able to execute a &lt;a href=&#34;https://github.com/tiangolo/full-stack-fastapi-template/raw/master/.copier/update_dotenv.py&#34;&gt;post-creation script&lt;/a&gt; that updates your &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h3&gt;Input variables&lt;/h3&gt; &#xA;&lt;p&gt;Copier will ask you for some data, you might want to have at hand before generating the project.&lt;/p&gt; &#xA;&lt;p&gt;But don&#39;t worry, you can just update any of that in the &lt;code&gt;.env&lt;/code&gt; files afterwards.&lt;/p&gt; &#xA;&lt;p&gt;The input variables, with their default values (some auto generated) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;project_name&lt;/code&gt;: (default: &lt;code&gt;&#34;FastAPI Project&#34;&lt;/code&gt;) The name of the project, shown to API users (in .env).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack_name&lt;/code&gt;: (default: &lt;code&gt;&#34;fastapi-project&#34;&lt;/code&gt;) The name of the stack used for Docker Compose labels (no spaces) (in .env).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secret_key&lt;/code&gt;: (default: &lt;code&gt;&#34;changethis&#34;&lt;/code&gt;) The secret key for the project, used for security, stored in .env, you can generate one with the method above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;first_superuser&lt;/code&gt;: (default: &lt;code&gt;&#34;admin@example.com&#34;&lt;/code&gt;) The email of the first superuser (in .env).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;first_superuser_password&lt;/code&gt;: (default: &lt;code&gt;&#34;changethis&#34;&lt;/code&gt;) The password of the first superuser (in .env).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smtp_host&lt;/code&gt;: (default: &#34;&#34;) The SMTP server host to send emails, you can set it later in .env.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smtp_user&lt;/code&gt;: (default: &#34;&#34;) The SMTP server user to send emails, you can set it later in .env.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smtp_password&lt;/code&gt;: (default: &#34;&#34;) The SMTP server password to send emails, you can set it later in .env.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;emails_from_email&lt;/code&gt;: (default: &lt;code&gt;&#34;info@example.com&#34;&lt;/code&gt;) The email account to send emails from, you can set it later in .env.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;postgres_password&lt;/code&gt;: (default: &lt;code&gt;&#34;changethis&#34;&lt;/code&gt;) The password for the PostgreSQL database, stored in .env, you can generate one with the method above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sentry_dsn&lt;/code&gt;: (default: &#34;&#34;) The DSN for Sentry, if you are using it, you can set it later in .env.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Backend Development&lt;/h2&gt; &#xA;&lt;p&gt;Backend docs: &lt;a href=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/backend/README.md&#34;&gt;backend/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frontend Development&lt;/h2&gt; &#xA;&lt;p&gt;Frontend docs: &lt;a href=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/frontend/README.md&#34;&gt;frontend/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Deployment docs: &lt;a href=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/deployment.md&#34;&gt;deployment.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;General development docs: &lt;a href=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/development.md&#34;&gt;development.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This includes using Docker Compose, custom local domains, &lt;code&gt;.env&lt;/code&gt; configurations, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;Check the file &lt;a href=&#34;https://raw.githubusercontent.com/tiangolo/full-stack-fastapi-template/master/release-notes.md&#34;&gt;release-notes.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Full Stack FastAPI Template is licensed under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>