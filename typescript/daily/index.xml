<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-19T01:42:57Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paralogical/glish</title>
    <updated>2023-12-19T01:42:57Z</updated>
    <id>tag:github.com,2023-12-19:/paralogical/glish</id>
    <link href="https://github.com/paralogical/glish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;map all words to single-syllable version&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Glish&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Goal: Make a version of English where every word is only one syllable&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;words by frequency (optimize monosyllabification for more common words) inputs/word_frequency.txt&lt;/li&gt; &#xA; &lt;li&gt;words with pronunciations and split by syllables (CMU Dict syllablized) Note: multiple valid pronunciations for any given word, but all American english&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Stages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;syllablize.ts&lt;/code&gt; → convert CMU dict to JSON mapping of word → IPA split by syllables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;main.ts&lt;/code&gt; → load IPA syllables and generate new monosyllabic version of all words&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sonorityGraph.ts&lt;/code&gt; → data structure that helps generate new syllables following sonority sequencing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;respellIPA.ts&lt;/code&gt; → convert IPA back into &#34;readable&#34; latin alphabet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run code to generate Glish language mapping,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ts-node syllablize.ts&lt;/code&gt; to generate outputs/syllablizedIPA.json + syllableGraph + big list of randomly generated syllables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ts-node main.ts&lt;/code&gt; to generate outputs/monosyllabic.json &amp;amp; other monosyllabic results&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run UI,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd ui&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>adrianhajdin/event_platform</title>
    <updated>2023-12-19T01:42:57Z</updated>
    <id>tag:github.com,2023-12-19:/adrianhajdin/event_platform</id>
    <link href="https://github.com/adrianhajdin/event_platform" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build an event organization web app like Eventbrite or Meetup with authentication, event management, search, filtering, categories, checkout, and payments using Next JS 14, Tailwind CSS, Shadcn, React Hook Form, Zod, Uploadthing, React-Datepicker, Mongoose, Clerk, and Stripe.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://youtu.be/zgGhzuBZOQg&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/adrianhajdin/event_platform/assets/151519281/548975af-f0ed-4103-8834-fe93cf91862e&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Next_JS_14-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=nextdotjs&amp;amp;color=000000&#34; alt=&#34;Next.js&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-TypeScript-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=typescript&amp;amp;color=3178C6&#34; alt=&#34;TypeScript&#34;&gt; &#xA;  &lt;img src=&#34;https://img.shields.io/badge/-Stripe-black?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=stripe&amp;amp;color=008CDD&#34; alt=&#34;stripe&#34;&gt; &#xA; &lt;/div&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;A Full Stack Next 14 Events App&lt;/h3&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;   Build this project step by step with our detailed tutorial on &#xA;  &lt;a href=&#34;https://www.youtube.com/@javascriptmastery/videos&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;JavaScript Mastery&lt;/b&gt;&lt;/a&gt; YouTube. Join the JSM family! &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;📋 &lt;a name=&#34;table&#34;&gt;Table of Contents&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🤖 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/event_platform/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/event_platform/main/#tech-stack&#34;&gt;Tech Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔋 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/event_platform/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🤸 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/event_platform/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🕸️ &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/event_platform/main/#snippets&#34;&gt;Snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔗 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/event_platform/main/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://raw.githubusercontent.com/adrianhajdin/event_platform/main/#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🚨 Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the code corresponding to an in-depth tutorial available on our YouTube channel, &lt;a href=&#34;https://www.youtube.com/@javascriptmastery/videos&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;JavaScript Mastery&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer visual learning, this is the perfect resource for you. Follow our tutorial to learn how to build projects like these step-by-step in a beginner-friendly manner!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/zgGhzuBZOQg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/1736fca5-a031-4854-8c09-bc110e3bc16d&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;introduction&#34;&gt;🤖 Introduction&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Built on Next.js 14, the events application stands as a comprehensive, full-stack platform for managing events. It serves as a hub, spotlighting diverse events taking place globally. Featuring seamless payment processing through Stripe, you have the capability to purchase tickets for any event or even initiate and manage your own events.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re getting started and need assistance or face any bugs, join our active Discord community with over 27k+ members. It&#39;s a place where people help each other out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/n6EdbFJ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/618f4872-1e10-42da-8213-1d69e486d02e&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;tech-stack&#34;&gt;⚙️ Tech Stack&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA; &lt;li&gt;Next.js&lt;/li&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;TailwindCSS&lt;/li&gt; &#xA; &lt;li&gt;Stripe&lt;/li&gt; &#xA; &lt;li&gt;Zod&lt;/li&gt; &#xA; &lt;li&gt;React Hook Form&lt;/li&gt; &#xA; &lt;li&gt;Shadcn&lt;/li&gt; &#xA; &lt;li&gt;uploadthing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;features&#34;&gt;🔋 Features&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Authentication (CRUD) with Clerk:&lt;/strong&gt; User management through Clerk, ensuring secure and efficient authentication.&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Events (CRUD):&lt;/strong&gt; Comprehensive functionality for creating, reading, updating, and deleting events, giving users full control over event management.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create Events:&lt;/strong&gt; Users can effortlessly generate new events, providing essential details such as title, date, location, and any additional information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read Events:&lt;/strong&gt; Seamless access to a detailed view of all events, allowing users to explore event specifics, including descriptions, schedules, and related information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update Events:&lt;/strong&gt; Empowering users to modify event details dynamically, ensuring that event information remains accurate and up-to-date.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Delete Events:&lt;/strong&gt; A straightforward process for removing events from the system, giving administrators the ability to manage and curate the platform effectively.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Related Events:&lt;/strong&gt; Smartly connects events that are related and displaying on the event details page, making it more engaging for users&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Organized Events:&lt;/strong&gt; Efficient organization of events, ensuring a structured and user-friendly display for the audience, i.e., showing events created by the user on the user profile&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Search &amp;amp; Filter:&lt;/strong&gt; Empowering users with a robust search and filter system, enabling them to easily find the events that match their preferences.&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;New Category:&lt;/strong&gt; Dynamic categorization allows for the seamless addition of new event categories, keeping your platform adaptable.&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Checkout and Pay with Stripe:&lt;/strong&gt; Smooth and secure payment transactions using Stripe, enhancing user experience during the checkout process.&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Event Orders:&lt;/strong&gt; Comprehensive order management system, providing a clear overview of all event-related transactions.&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;strong&gt;Search Orders:&lt;/strong&gt; Quick and efficient search functionality for orders, facilitating easy tracking and management.&lt;/p&gt; &#xA;&lt;p&gt;and many more, including code architecture and reusability&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;quick-start&#34;&gt;🤸 Quick Start&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps to set up the project locally on your machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have the following installed on your machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; (Node Package Manager)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cloning the Repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/your-username/your-project.git&#xA;cd your-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the project dependencies using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Set Up Environment Variables&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a new file named &lt;code&gt;.env&lt;/code&gt; in the root of your project and add the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;#NEXT&#xA;NEXT_PUBLIC_SERVER_URL=&#xA;&#xA;#CLERK&#xA;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=&#xA;CLERK_SECRET_KEY=&#xA;NEXT_CLERK_WEBHOOK_SECRET=&#xA;&#xA;NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in&#xA;NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up&#xA;NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/&#xA;NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/&#xA;&#xA;#MONGODB&#xA;MONGODB_URI=&#xA;&#xA;#UPLOADTHING&#xA;UPLOADTHING_SECRET=&#xA;UPLOADTHING_APP_ID=&#xA;&#xA;#STRIPE&#xA;STRIPE_SECRET_KEY=&#xA;STRIPE_WEBHOOK_SECRET=&#xA;NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace the placeholder values with your actual credentials&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Running the Project&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to view the project.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;snippets&#34;&gt;🕸️ Snippets&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;globals.css&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@tailwind base;&#xA;@tailwind components;&#xA;@tailwind utilities;&#xA;&#xA;@layer base {&#xA;  :root {&#xA;    --background: 0 0% 100%;&#xA;    --foreground: 222.2 84% 4.9%;&#xA;&#xA;    --card: 0 0% 100%;&#xA;    --card-foreground: 222.2 84% 4.9%;&#xA;&#xA;    --popover: 0 0% 100%;&#xA;    --popover-foreground: 222.2 84% 4.9%;&#xA;&#xA;    --primary: 222.2 47.4% 11.2%;&#xA;    --primary-foreground: 210 40% 98%;&#xA;&#xA;    --secondary: 210 40% 96.1%;&#xA;    --secondary-foreground: 222.2 47.4% 11.2%;&#xA;&#xA;    --muted: 210 40% 96.1%;&#xA;    --muted-foreground: 215.4 16.3% 46.9%;&#xA;&#xA;    --accent: 210 40% 96.1%;&#xA;    --accent-foreground: 222.2 47.4% 11.2%;&#xA;&#xA;    --destructive: 0 84.2% 60.2%;&#xA;    --destructive-foreground: 210 40% 98%;&#xA;&#xA;    --border: 214.3 31.8% 91.4%;&#xA;    --input: 214.3 31.8% 91.4%;&#xA;    --ring: 222.2 84% 4.9%;&#xA;&#xA;    --radius: 0.5rem;&#xA;  }&#xA;&#xA;  .dark {&#xA;    --background: 222.2 84% 4.9%;&#xA;    --foreground: 210 40% 98%;&#xA;&#xA;    --card: 222.2 84% 4.9%;&#xA;    --card-foreground: 210 40% 98%;&#xA;&#xA;    --popover: 222.2 84% 4.9%;&#xA;    --popover-foreground: 210 40% 98%;&#xA;&#xA;    --primary: 210 40% 98%;&#xA;    --primary-foreground: 222.2 47.4% 11.2%;&#xA;&#xA;    --secondary: 217.2 32.6% 17.5%;&#xA;    --secondary-foreground: 210 40% 98%;&#xA;&#xA;    --muted: 217.2 32.6% 17.5%;&#xA;    --muted-foreground: 215 20.2% 65.1%;&#xA;&#xA;    --accent: 217.2 32.6% 17.5%;&#xA;    --accent-foreground: 210 40% 98%;&#xA;&#xA;    --destructive: 0 62.8% 30.6%;&#xA;    --destructive-foreground: 210 40% 98%;&#xA;&#xA;    --border: 217.2 32.6% 17.5%;&#xA;    --input: 217.2 32.6% 17.5%;&#xA;    --ring: 212.7 26.8% 83.9%;&#xA;  }&#xA;}&#xA;&#xA;* {&#xA;  list-style: none;&#xA;  padding: 0;&#xA;  margin: 0;&#xA;  scroll-behavior: smooth;&#xA;}&#xA;&#xA;body {&#xA;  font-family: var(--font-poppins)&#xA;}&#xA;&#xA;.filter-grey {&#xA;  filter: brightness(0) saturate(100%) invert(47%) sepia(0%) saturate(217%)&#xA;    hue-rotate(32deg) brightness(98%) contrast(92%);&#xA;}&#xA;&#xA;/* ========================================== TAILWIND STYLES */&#xA;@layer utilities {&#xA;  .wrapper {&#xA;    @apply max-w-7xl lg:mx-auto p-5 md:px-10 xl:px-0 w-full;&#xA;  }&#xA;&#xA;  .flex-center {&#xA;    @apply flex justify-center items-center;&#xA;  }&#xA;&#xA;  .flex-between {&#xA;    @apply flex justify-between items-center;&#xA;  }&#xA;&#xA;  /* TYPOGRAPHY */&#xA;  /* 64 */&#xA;  .h1-bold {&#xA;    @apply font-bold text-[40px] leading-[48px] lg:text-[48px] lg:leading-[60px]  xl:text-[58px] xl:leading-[74px];&#xA;  }&#xA;&#xA;  /* 40 */&#xA;  .h2-bold {&#xA;    @apply font-bold text-[32px] leading-[40px] lg:text-[36px] lg:leading-[44px] xl:text-[40px] xl:leading-[48px];&#xA;  }&#xA;&#xA;  .h2-medium {&#xA;    @apply font-medium text-[32px] leading-[40px] lg:text-[36px] lg:leading-[44px] xl:text-[40px] xl:leading-[48px];&#xA;  }&#xA;&#xA;  /* 36 */&#xA;  .h3-bold {&#xA;    @apply font-bold text-[28px] leading-[36px] md:text-[36px] md:leading-[44px];&#xA;  }&#xA;&#xA;  .h3-medium {&#xA;    @apply font-medium text-[28px] leading-[36px] md:text-[36px] md:leading-[44px];&#xA;  }&#xA;&#xA;  /* 32 */&#xA;  .h4-medium {&#xA;    @apply font-medium text-[32px] leading-[40px];&#xA;  }&#xA;&#xA;  /* 28 */&#xA;  .h5-bold {&#xA;    @apply font-bold text-[28px] leading-[36px];&#xA;  }&#xA;&#xA;  /* 24 */&#xA;  .p-bold-24 {&#xA;    @apply font-bold text-[24px] leading-[36px];&#xA;  }&#xA;&#xA;  .p-medium-24 {&#xA;    @apply font-medium text-[24px] leading-[36px];&#xA;  }&#xA;&#xA;  .p-regular-24 {&#xA;    @apply font-normal text-[24px] leading-[36px];&#xA;  }&#xA;&#xA;  /* 20 */&#xA;  .p-bold-20 {&#xA;    @apply font-bold text-[20px] leading-[30px] tracking-[2%];&#xA;  }&#xA;&#xA;  .p-semibold-20 {&#xA;    @apply text-[20px] font-semibold leading-[30px] tracking-[2%];&#xA;  }&#xA;&#xA;  .p-medium-20 {&#xA;    @apply text-[20px] font-medium leading-[30px];&#xA;  }&#xA;&#xA;  .p-regular-20 {&#xA;    @apply text-[20px] font-normal leading-[30px] tracking-[2%];&#xA;  }&#xA;&#xA;  /* 18 */&#xA;  .p-semibold-18 {&#xA;    @apply text-[18px] font-semibold leading-[28px] tracking-[2%];&#xA;  }&#xA;&#xA;  .p-medium-18 {&#xA;    @apply text-[18px] font-medium leading-[28px];&#xA;  }&#xA;&#xA;  .p-regular-18 {&#xA;    @apply text-[18px] font-normal leading-[28px] tracking-[2%];&#xA;  }&#xA;&#xA;  /* 16 */&#xA;  .p-bold-16 {&#xA;    @apply text-[16px] font-bold leading-[24px];&#xA;  }&#xA;&#xA;  .p-medium-16 {&#xA;    @apply text-[16px] font-medium leading-[24px];&#xA;  }&#xA;&#xA;  .p-regular-16 {&#xA;    @apply text-[16px] font-normal leading-[24px];&#xA;  }&#xA;&#xA;  /* 14 */&#xA;  .p-semibold-14 {&#xA;    @apply text-[14px] font-semibold leading-[20px];&#xA;  }&#xA;&#xA;  .p-medium-14 {&#xA;    @apply text-[14px] font-medium leading-[20px];&#xA;  }&#xA;&#xA;  .p-regular-14 {&#xA;    @apply text-[14px] font-normal leading-[20px];&#xA;  }&#xA;&#xA;  /* 12 */&#xA;  .p-medium-12 {&#xA;    @apply text-[12px] font-medium leading-[20px];&#xA;  }&#xA;&#xA;  /* SHADCN OVERRIDES */&#xA;  .select-field {&#xA;    @apply w-full bg-grey-50 h-[54px] placeholder:text-grey-500 rounded-full p-regular-16 px-5 py-3 border-none focus-visible:ring-transparent focus:ring-transparent !important;&#xA;  }&#xA;&#xA;  .input-field {&#xA;    @apply bg-grey-50 h-[54px] focus-visible:ring-offset-0 placeholder:text-grey-500 rounded-full p-regular-16 px-4 py-3 border-none focus-visible:ring-transparent !important;&#xA;  }&#xA;&#xA;  .textarea {&#xA;    @apply bg-grey-50 flex flex-1 placeholder:text-grey-500 p-regular-16 px-5 py-3 border-none focus-visible:ring-transparent !important;&#xA;  }&#xA;&#xA;  .button {&#xA;    @apply rounded-full h-[54px] p-regular-16;&#xA;  }&#xA;&#xA;  .select-item {&#xA;    @apply py-3 cursor-pointer  focus:bg-primary-50;&#xA;  }&#xA;&#xA;  .toggle-switch {&#xA;    @apply bg-gray-300 !important;&#xA;  }&#xA;}&#xA;&#xA;/* ========================================== CLERK STYLES */&#xA;.cl-logoImage {&#xA;  height: 38px;&#xA;}&#xA;&#xA;.cl-userButtonBox {&#xA;  flex-direction: row-reverse;&#xA;}&#xA;&#xA;.cl-userButtonOuterIdentifier {&#xA;  font-size: 16px;&#xA;}&#xA;&#xA;.cl-userButtonPopoverCard {&#xA;  right: 4px !important;&#xA;}&#xA;&#xA;.cl-formButtonPrimary:hover,&#xA;.cl-formButtonPrimary:focus,&#xA;.cl-formButtonPrimary:active {&#xA;  background-color: #705CF7&#xA;}&#xA;&#xA;/* ========================================== REACT-DATEPICKER STYLES */&#xA;.datePicker {&#xA;  width: 100%;&#xA;}&#xA;&#xA;.react-datepicker__input-container input {&#xA;  background-color: transparent;&#xA;  width: 100%;&#xA;  outline: none;&#xA;  margin-left: 16px;&#xA;}&#xA;&#xA;.react-datepicker__day--selected {&#xA;  background-color: #624cf5 !important;&#xA;  color: #ffffff !important;&#xA;  border-radius: 4px;&#xA;}&#xA;&#xA;.react-datepicker__time-list-item--selected {&#xA;  background-color: #624cf5 !important;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;tailwind.config.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;/** @type {import(&#39;tailwindcss&#39;).Config} */&#xA;import { withUt } from &#39;uploadthing/tw&#39;;&#xA;&#xA;module.exports = withUt({&#xA;  darkMode: [&#39;class&#39;],&#xA;  content: [&#xA;    &#39;./pages/**/*.{ts,tsx}&#39;,&#xA;    &#39;./components/**/*.{ts,tsx}&#39;,&#xA;    &#39;./app/**/*.{ts,tsx}&#39;,&#xA;    &#39;./src/**/*.{ts,tsx}&#39;,&#xA;  ],&#xA;  theme: {&#xA;    container: {&#xA;      center: true,&#xA;      padding: &#39;2rem&#39;,&#xA;      screens: {&#xA;        &#39;2xl&#39;: &#39;1400px&#39;,&#xA;      },&#xA;    },&#xA;    extend: {&#xA;      colors: {&#xA;        primary: {&#xA;          500: &#39;#624CF5&#39;,&#xA;          50: &#39; #F6F8FD&#39;,&#xA;          DEFAULT: &#39;#624CF5&#39;,&#xA;          foreground: &#39;hsl(var(--primary-foreground))&#39;,&#xA;        },&#xA;        coral: {&#xA;          500: &#39;#15BF59&#39;,&#xA;        },&#xA;&#xA;        grey: {&#xA;          600: &#39;#545454&#39;, // Subdued - color name in figma&#xA;          500: &#39;#757575&#39;,&#xA;          400: &#39;#AFAFAF&#39;, // Disabled - color name in figma&#xA;          50: &#39;#F6F6F6&#39;, // White Grey - color name in figma&#xA;        },&#xA;        black: &#39;#000000&#39;,&#xA;        white: &#39;#FFFFFF&#39;,&#xA;        border: &#39;hsl(var(--border))&#39;,&#xA;        input: &#39;hsl(var(--input))&#39;,&#xA;        ring: &#39;hsl(var(--ring))&#39;,&#xA;        foreground: &#39;hsl(var(--foreground))&#39;,&#xA;        secondary: {&#xA;          DEFAULT: &#39;hsl(var(--secondary))&#39;,&#xA;          foreground: &#39;hsl(var(--secondary-foreground))&#39;,&#xA;        },&#xA;        destructive: {&#xA;          DEFAULT: &#39;hsl(var(--destructive))&#39;,&#xA;          foreground: &#39;hsl(var(--destructive-foreground))&#39;,&#xA;        },&#xA;        muted: {&#xA;          DEFAULT: &#39;hsl(var(--muted))&#39;,&#xA;          foreground: &#39;hsl(var(--muted-foreground))&#39;,&#xA;        },&#xA;        accent: {&#xA;          DEFAULT: &#39;hsl(var(--accent))&#39;,&#xA;          foreground: &#39;hsl(var(--accent-foreground))&#39;,&#xA;        },&#xA;        popover: {&#xA;          DEFAULT: &#39;hsl(var(--popover))&#39;,&#xA;          foreground: &#39;hsl(var(--popover-foreground))&#39;,&#xA;        },&#xA;        card: {&#xA;          DEFAULT: &#39;hsl(var(--card))&#39;,&#xA;          foreground: &#39;hsl(var(--card-foreground))&#39;,&#xA;        },&#xA;      },&#xA;      fontFamily: {&#xA;        poppins: [&#39;var(--font-poppins)&#39;],&#xA;      },&#xA;      backgroundImage: {&#xA;        &#39;dotted-pattern&#39;: &#34;url(&#39;/assets/images/dotted-pattern.png&#39;)&#34;,&#xA;        &#39;hero-img&#39;: &#34;url(&#39;/assets/images/hero.png&#39;)&#34;,&#xA;      },&#xA;      borderRadius: {&#xA;        lg: &#39;var(--radius)&#39;,&#xA;        md: &#39;calc(var(--radius) - 2px)&#39;,&#xA;        sm: &#39;calc(var(--radius) - 4px)&#39;,&#xA;      },&#xA;      keyframes: {&#xA;        &#39;accordion-down&#39;: {&#xA;          from: { height: &#39;0&#39; },&#xA;          to: { height: &#39;var(--radix-accordion-content-height)&#39; },&#xA;        },&#xA;        &#39;accordion-up&#39;: {&#xA;          from: { height: &#39;var(--radix-accordion-content-height)&#39; },&#xA;          to: { height: &#39;0&#39; },&#xA;        },&#xA;      },&#xA;      animation: {&#xA;        &#39;accordion-down&#39;: &#39;accordion-down 0.2s ease-out&#39;,&#xA;        &#39;accordion-up&#39;: &#39;accordion-up 0.2s ease-out&#39;,&#xA;      },&#xA;    },&#xA;  },&#xA;  plugins: [require(&#39;tailwindcss-animate&#39;)],&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;Clerk webhook&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Webhook } from &#39;svix&#39;&#xA;import { headers } from &#39;next/headers&#39;&#xA;import { WebhookEvent } from &#39;@clerk/nextjs/server&#39;&#xA;import { createUser, deleteUser, updateUser } from &#39;@/lib/actions/user.actions&#39;&#xA;import { clerkClient } from &#39;@clerk/nextjs&#39;&#xA;import { NextResponse } from &#39;next/server&#39;&#xA; &#xA;export async function POST(req: Request) {&#xA; &#xA;  // You can find this in the Clerk Dashboard -&amp;gt; Webhooks -&amp;gt; choose the webhook&#xA;  const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET&#xA; &#xA;  if (!WEBHOOK_SECRET) {&#xA;    throw new Error(&#39;Please add WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local&#39;)&#xA;  }&#xA; &#xA;  // Get the headers&#xA;  const headerPayload = headers();&#xA;  const svix_id = headerPayload.get(&#34;svix-id&#34;);&#xA;  const svix_timestamp = headerPayload.get(&#34;svix-timestamp&#34;);&#xA;  const svix_signature = headerPayload.get(&#34;svix-signature&#34;);&#xA; &#xA;  // If there are no headers, error out&#xA;  if (!svix_id || !svix_timestamp || !svix_signature) {&#xA;    return new Response(&#39;Error occured -- no svix headers&#39;, {&#xA;      status: 400&#xA;    })&#xA;  }&#xA; &#xA;  // Get the body&#xA;  const payload = await req.json()&#xA;  const body = JSON.stringify(payload);&#xA; &#xA;  // Create a new Svix instance with your secret.&#xA;  const wh = new Webhook(WEBHOOK_SECRET);&#xA; &#xA;  let evt: WebhookEvent&#xA; &#xA;  // Verify the payload with the headers&#xA;  try {&#xA;    evt = wh.verify(body, {&#xA;      &#34;svix-id&#34;: svix_id,&#xA;      &#34;svix-timestamp&#34;: svix_timestamp,&#xA;      &#34;svix-signature&#34;: svix_signature,&#xA;    }) as WebhookEvent&#xA;  } catch (err) {&#xA;    console.error(&#39;Error verifying webhook:&#39;, err);&#xA;    return new Response(&#39;Error occured&#39;, {&#xA;      status: 400&#xA;    })&#xA;  }&#xA; &#xA;  // Get the ID and type&#xA;  const { id } = evt.data;&#xA;  const eventType = evt.type;&#xA; &#xA;  if(eventType === &#39;user.created&#39;) {&#xA;    const { id, email_addresses, image_url, first_name, last_name, username } = evt.data;&#xA;&#xA;    const user = {&#xA;      clerkId: id,&#xA;      email: email_addresses[0].email_address,&#xA;      username: username!,&#xA;      firstName: first_name,&#xA;      lastName: last_name,&#xA;      photo: image_url,&#xA;    }&#xA;&#xA;    const newUser = await createUser(user);&#xA;&#xA;    if(newUser) {&#xA;      await clerkClient.users.updateUserMetadata(id, {&#xA;        publicMetadata: {&#xA;          userId: newUser._id&#xA;        }&#xA;      })&#xA;    }&#xA;&#xA;    return NextResponse.json({ message: &#39;OK&#39;, user: newUser })&#xA;  }&#xA;&#xA;  if (eventType === &#39;user.updated&#39;) {&#xA;    const {id, image_url, first_name, last_name, username } = evt.data&#xA;&#xA;    const user = {&#xA;      firstName: first_name,&#xA;      lastName: last_name,&#xA;      username: username!,&#xA;      photo: image_url,&#xA;    }&#xA;&#xA;    const updatedUser = await updateUser(id, user)&#xA;&#xA;    return NextResponse.json({ message: &#39;OK&#39;, user: updatedUser })&#xA;  }&#xA;&#xA;  if (eventType === &#39;user.deleted&#39;) {&#xA;    const { id } = evt.data&#xA;&#xA;    const deletedUser = await deleteUser(id!)&#xA;&#xA;    return NextResponse.json({ message: &#39;OK&#39;, user: deletedUser })&#xA;  }&#xA; &#xA;  return new Response(&#39;&#39;, { status: 200 })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;user.actions.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#39;use server&#39;&#xA;&#xA;import { revalidatePath } from &#39;next/cache&#39;&#xA;&#xA;import { connectToDatabase } from &#39;@/lib/database&#39;&#xA;import User from &#39;@/lib/database/models/user.model&#39;&#xA;import Order from &#39;@/lib/database/models/order.model&#39;&#xA;import Event from &#39;@/lib/database/models/event.model&#39;&#xA;import { handleError } from &#39;@/lib/utils&#39;&#xA;&#xA;import { CreateUserParams, UpdateUserParams } from &#39;@/types&#39;&#xA;&#xA;export async function createUser(user: CreateUserParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const newUser = await User.create(user)&#xA;    return JSON.parse(JSON.stringify(newUser))&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;export async function getUserById(userId: string) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const user = await User.findById(userId)&#xA;&#xA;    if (!user) throw new Error(&#39;User not found&#39;)&#xA;    return JSON.parse(JSON.stringify(user))&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;export async function updateUser(clerkId: string, user: UpdateUserParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const updatedUser = await User.findOneAndUpdate({ clerkId }, user, { new: true })&#xA;&#xA;    if (!updatedUser) throw new Error(&#39;User update failed&#39;)&#xA;    return JSON.parse(JSON.stringify(updatedUser))&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;export async function deleteUser(clerkId: string) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    // Find user to delete&#xA;    const userToDelete = await User.findOne({ clerkId })&#xA;&#xA;    if (!userToDelete) {&#xA;      throw new Error(&#39;User not found&#39;)&#xA;    }&#xA;&#xA;    // Unlink relationships&#xA;    await Promise.all([&#xA;      // Update the &#39;events&#39; collection to remove references to the user&#xA;      Event.updateMany(&#xA;        { _id: { $in: userToDelete.events } },&#xA;        { $pull: { organizer: userToDelete._id } }&#xA;      ),&#xA;&#xA;      // Update the &#39;orders&#39; collection to remove references to the user&#xA;      Order.updateMany({ _id: { $in: userToDelete.orders } }, { $unset: { buyer: 1 } }),&#xA;    ])&#xA;&#xA;    // Delete user&#xA;    const deletedUser = await User.findByIdAndDelete(userToDelete._id)&#xA;    revalidatePath(&#39;/&#39;)&#xA;&#xA;    return deletedUser ? JSON.parse(JSON.stringify(deletedUser)) : null&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;order.model.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { Schema, model, models, Document } from &#39;mongoose&#39;&#xA;&#xA;export interface IOrder extends Document {&#xA;  createdAt: Date&#xA;  stripeId: string&#xA;  totalAmount: string&#xA;  event: {&#xA;    _id: string&#xA;    title: string&#xA;  }&#xA;  buyer: {&#xA;    _id: string&#xA;    firstName: string&#xA;    lastName: string&#xA;  }&#xA;}&#xA;&#xA;export type IOrderItem = {&#xA;  _id: string&#xA;  totalAmount: string&#xA;  createdAt: Date&#xA;  eventTitle: string&#xA;  eventId: string&#xA;  buyer: string&#xA;}&#xA;&#xA;const OrderSchema = new Schema({&#xA;  createdAt: {&#xA;    type: Date,&#xA;    default: Date.now,&#xA;  },&#xA;  stripeId: {&#xA;    type: String,&#xA;    required: true,&#xA;    unique: true,&#xA;  },&#xA;  totalAmount: {&#xA;    type: String,&#xA;  },&#xA;  event: {&#xA;    type: Schema.Types.ObjectId,&#xA;    ref: &#39;Event&#39;,&#xA;  },&#xA;  buyer: {&#xA;    type: Schema.Types.ObjectId,&#xA;    ref: &#39;User&#39;,&#xA;  },&#xA;})&#xA;&#xA;const Order = models.Order || model(&#39;Order&#39;, OrderSchema)&#xA;&#xA;export default Order&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;FileUploader.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#39;use client&#39;&#xA;&#xA;import { useCallback, Dispatch, SetStateAction } from &#39;react&#39;&#xA;import type { FileWithPath } from &#39;@uploadthing/react&#39;&#xA;import { useDropzone } from &#39;@uploadthing/react/hooks&#39;&#xA;import { generateClientDropzoneAccept } from &#39;uploadthing/client&#39;&#xA;&#xA;import { Button } from &#39;@/components/ui/button&#39;&#xA;import { convertFileToUrl } from &#39;@/lib/utils&#39;&#xA;&#xA;type FileUploaderProps = {&#xA;  onFieldChange: (url: string) =&amp;gt; void&#xA;  imageUrl: string&#xA;  setFiles: Dispatch&amp;lt;SetStateAction&amp;lt;File[]&amp;gt;&amp;gt;&#xA;}&#xA;&#xA;export function FileUploader({ imageUrl, onFieldChange, setFiles }: FileUploaderProps) {&#xA;  const onDrop = useCallback((acceptedFiles: FileWithPath[]) =&amp;gt; {&#xA;    setFiles(acceptedFiles)&#xA;    onFieldChange(convertFileToUrl(acceptedFiles[0]))&#xA;  }, [])&#xA;&#xA;  const { getRootProps, getInputProps } = useDropzone({&#xA;    onDrop,&#xA;    accept: &#39;image/*&#39; ? generateClientDropzoneAccept([&#39;image/*&#39;]) : undefined,&#xA;  })&#xA;&#xA;  return (&#xA;    &amp;lt;div&#xA;      {...getRootProps()}&#xA;      className=&#34;flex-center bg-dark-3 flex h-72 cursor-pointer flex-col overflow-hidden rounded-xl bg-grey-50&#34;&amp;gt;&#xA;      &amp;lt;input {...getInputProps()} className=&#34;cursor-pointer&#34; /&amp;gt;&#xA;&#xA;      {imageUrl ? (&#xA;        &amp;lt;div className=&#34;flex h-full w-full flex-1 justify-center &#34;&amp;gt;&#xA;          &amp;lt;img&#xA;            src={imageUrl}&#xA;            alt=&#34;image&#34;&#xA;            width={250}&#xA;            height={250}&#xA;            className=&#34;w-full object-cover object-center&#34;&#xA;          /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      ) : (&#xA;        &amp;lt;div className=&#34;flex-center flex-col py-5 text-grey-500&#34;&amp;gt;&#xA;          &amp;lt;img src=&#34;/assets/icons/upload.svg&#34; width={77} height={77} alt=&#34;file upload&#34; /&amp;gt;&#xA;          &amp;lt;h3 className=&#34;mb-2 mt-2&#34;&amp;gt;Drag photo here&amp;lt;/h3&amp;gt;&#xA;          &amp;lt;p className=&#34;p-medium-12 mb-4&#34;&amp;gt;SVG, PNG, JPG&amp;lt;/p&amp;gt;&#xA;          &amp;lt;Button type=&#34;button&#34; className=&#34;rounded-full&#34;&amp;gt;&#xA;            Select from computer&#xA;          &amp;lt;/Button&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      )}&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;DeleteConfirmation.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#39;use client&#39;&#xA;&#xA;import { useTransition } from &#39;react&#39;&#xA;import { usePathname } from &#39;next/navigation&#39;&#xA;import Image from &#39;next/image&#39;&#xA;&#xA;import {&#xA;  AlertDialog,&#xA;  AlertDialogAction,&#xA;  AlertDialogCancel,&#xA;  AlertDialogContent,&#xA;  AlertDialogDescription,&#xA;  AlertDialogFooter,&#xA;  AlertDialogHeader,&#xA;  AlertDialogTitle,&#xA;  AlertDialogTrigger,&#xA;} from &#39;@/components/ui/alert-dialog&#39;&#xA;&#xA;import { deleteEvent } from &#39;@/lib/actions/event.actions&#39;&#xA;&#xA;export const DeleteConfirmation = ({ eventId }: { eventId: string }) =&amp;gt; {&#xA;  const pathname = usePathname()&#xA;  let [isPending, startTransition] = useTransition()&#xA;&#xA;  return (&#xA;    &amp;lt;AlertDialog&amp;gt;&#xA;      &amp;lt;AlertDialogTrigger&amp;gt;&#xA;        &amp;lt;Image src=&#34;/assets/icons/delete.svg&#34; alt=&#34;edit&#34; width={20} height={20} /&amp;gt;&#xA;      &amp;lt;/AlertDialogTrigger&amp;gt;&#xA;&#xA;      &amp;lt;AlertDialogContent className=&#34;bg-white&#34;&amp;gt;&#xA;        &amp;lt;AlertDialogHeader&amp;gt;&#xA;          &amp;lt;AlertDialogTitle&amp;gt;Are you sure you want to delete?&amp;lt;/AlertDialogTitle&amp;gt;&#xA;          &amp;lt;AlertDialogDescription className=&#34;p-regular-16 text-grey-600&#34;&amp;gt;&#xA;            This will permanently delete this event&#xA;          &amp;lt;/AlertDialogDescription&amp;gt;&#xA;        &amp;lt;/AlertDialogHeader&amp;gt;&#xA;&#xA;        &amp;lt;AlertDialogFooter&amp;gt;&#xA;          &amp;lt;AlertDialogCancel&amp;gt;Cancel&amp;lt;/AlertDialogCancel&amp;gt;&#xA;&#xA;          &amp;lt;AlertDialogAction&#xA;            onClick={() =&amp;gt;&#xA;              startTransition(async () =&amp;gt; {&#xA;                await deleteEvent({ eventId, path: pathname })&#xA;              })&#xA;            }&amp;gt;&#xA;            {isPending ? &#39;Deleting...&#39; : &#39;Delete&#39;}&#xA;          &amp;lt;/AlertDialogAction&amp;gt;&#xA;        &amp;lt;/AlertDialogFooter&amp;gt;&#xA;      &amp;lt;/AlertDialogContent&amp;gt;&#xA;    &amp;lt;/AlertDialog&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;event.action.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#39;use server&#39;&#xA;&#xA;import { revalidatePath } from &#39;next/cache&#39;&#xA;&#xA;import { connectToDatabase } from &#39;@/lib/database&#39;&#xA;import Event from &#39;@/lib/database/models/event.model&#39;&#xA;import User from &#39;@/lib/database/models/user.model&#39;&#xA;import Category from &#39;@/lib/database/models/category.model&#39;&#xA;import { handleError } from &#39;@/lib/utils&#39;&#xA;&#xA;import {&#xA;  CreateEventParams,&#xA;  UpdateEventParams,&#xA;  DeleteEventParams,&#xA;  GetAllEventsParams,&#xA;  GetEventsByUserParams,&#xA;  GetRelatedEventsByCategoryParams,&#xA;} from &#39;@/types&#39;&#xA;&#xA;const getCategoryByName = async (name: string) =&amp;gt; {&#xA;  return Category.findOne({ name: { $regex: name, $options: &#39;i&#39; } })&#xA;}&#xA;&#xA;const populateEvent = (query: any) =&amp;gt; {&#xA;  return query&#xA;    .populate({ path: &#39;organizer&#39;, model: User, select: &#39;_id firstName lastName&#39; })&#xA;    .populate({ path: &#39;category&#39;, model: Category, select: &#39;_id name&#39; })&#xA;}&#xA;&#xA;// CREATE&#xA;export async function createEvent({ userId, event, path }: CreateEventParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const organizer = await User.findById(userId)&#xA;    if (!organizer) throw new Error(&#39;Organizer not found&#39;)&#xA;&#xA;    const newEvent = await Event.create({ ...event, category: event.categoryId, organizer: userId })&#xA;    revalidatePath(path)&#xA;&#xA;    return JSON.parse(JSON.stringify(newEvent))&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// GET ONE EVENT BY ID&#xA;export async function getEventById(eventId: string) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const event = await populateEvent(Event.findById(eventId))&#xA;&#xA;    if (!event) throw new Error(&#39;Event not found&#39;)&#xA;&#xA;    return JSON.parse(JSON.stringify(event))&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// UPDATE&#xA;export async function updateEvent({ userId, event, path }: UpdateEventParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const eventToUpdate = await Event.findById(event._id)&#xA;    if (!eventToUpdate || eventToUpdate.organizer.toHexString() !== userId) {&#xA;      throw new Error(&#39;Unauthorized or event not found&#39;)&#xA;    }&#xA;&#xA;    const updatedEvent = await Event.findByIdAndUpdate(&#xA;      event._id,&#xA;      { ...event, category: event.categoryId },&#xA;      { new: true }&#xA;    )&#xA;    revalidatePath(path)&#xA;&#xA;    return JSON.parse(JSON.stringify(updatedEvent))&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// DELETE&#xA;export async function deleteEvent({ eventId, path }: DeleteEventParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const deletedEvent = await Event.findByIdAndDelete(eventId)&#xA;    if (deletedEvent) revalidatePath(path)&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// GET ALL EVENTS&#xA;export async function getAllEvents({ query, limit = 6, page, category }: GetAllEventsParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const titleCondition = query ? { title: { $regex: query, $options: &#39;i&#39; } } : {}&#xA;    const categoryCondition = category ? await getCategoryByName(category) : null&#xA;    const conditions = {&#xA;      $and: [titleCondition, categoryCondition ? { category: categoryCondition._id } : {}],&#xA;    }&#xA;&#xA;    const skipAmount = (Number(page) - 1) * limit&#xA;    const eventsQuery = Event.find(conditions)&#xA;      .sort({ createdAt: &#39;desc&#39; })&#xA;      .skip(skipAmount)&#xA;      .limit(limit)&#xA;&#xA;    const events = await populateEvent(eventsQuery)&#xA;    const eventsCount = await Event.countDocuments(conditions)&#xA;&#xA;    return {&#xA;      data: JSON.parse(JSON.stringify(events)),&#xA;      totalPages: Math.ceil(eventsCount / limit),&#xA;    }&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// GET EVENTS BY ORGANIZER&#xA;export async function getEventsByUser({ userId, limit = 6, page }: GetEventsByUserParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const conditions = { organizer: userId }&#xA;    const skipAmount = (page - 1) * limit&#xA;&#xA;    const eventsQuery = Event.find(conditions)&#xA;      .sort({ createdAt: &#39;desc&#39; })&#xA;      .skip(skipAmount)&#xA;      .limit(limit)&#xA;&#xA;    const events = await populateEvent(eventsQuery)&#xA;    const eventsCount = await Event.countDocuments(conditions)&#xA;&#xA;    return { data: JSON.parse(JSON.stringify(events)), totalPages: Math.ceil(eventsCount / limit) }&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// GET RELATED EVENTS: EVENTS WITH SAME CATEGORY&#xA;export async function getRelatedEventsByCategory({&#xA;  categoryId,&#xA;  eventId,&#xA;  limit = 3,&#xA;  page = 1,&#xA;}: GetRelatedEventsByCategoryParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const skipAmount = (Number(page) - 1) * limit&#xA;    const conditions = { $and: [{ category: categoryId }, { _id: { $ne: eventId } }] }&#xA;&#xA;    const eventsQuery = Event.find(conditions)&#xA;      .sort({ createdAt: &#39;desc&#39; })&#xA;      .skip(skipAmount)&#xA;      .limit(limit)&#xA;&#xA;    const events = await populateEvent(eventsQuery)&#xA;    const eventsCount = await Event.countDocuments(conditions)&#xA;&#xA;    return { data: JSON.parse(JSON.stringify(events)), totalPages: Math.ceil(eventsCount / limit) }&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;order.action.ts&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&#34;use server&#34;&#xA;&#xA;import Stripe from &#39;stripe&#39;;&#xA;import { CheckoutOrderParams, CreateOrderParams, GetOrdersByEventParams, GetOrdersByUserParams } from &#34;@/types&#34;&#xA;import { redirect } from &#39;next/navigation&#39;;&#xA;import { handleError } from &#39;../utils&#39;;&#xA;import { connectToDatabase } from &#39;../database&#39;;&#xA;import Order from &#39;../database/models/order.model&#39;;&#xA;import Event from &#39;../database/models/event.model&#39;;&#xA;import {ObjectId} from &#39;mongodb&#39;;&#xA;import User from &#39;../database/models/user.model&#39;;&#xA;&#xA;export const checkoutOrder = async (order: CheckoutOrderParams) =&amp;gt; {&#xA;  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);&#xA;&#xA;  const price = order.isFree ? 0 : Number(order.price) * 100;&#xA;&#xA;  try {&#xA;    const session = await stripe.checkout.sessions.create({&#xA;      line_items: [&#xA;        {&#xA;          price_data: {&#xA;            currency: &#39;usd&#39;,&#xA;            unit_amount: price,&#xA;            product_data: {&#xA;              name: order.eventTitle&#xA;            }&#xA;          },&#xA;          quantity: 1&#xA;        },&#xA;      ],&#xA;      metadata: {&#xA;        eventId: order.eventId,&#xA;        buyerId: order.buyerId,&#xA;      },&#xA;      mode: &#39;payment&#39;,&#xA;      success_url: `${process.env.NEXT_PUBLIC_SERVER_URL}/profile`,&#xA;      cancel_url: `${process.env.NEXT_PUBLIC_SERVER_URL}/`,&#xA;    });&#xA;&#xA;    redirect(session.url!)&#xA;  } catch (error) {&#xA;    throw error;&#xA;  }&#xA;}&#xA;&#xA;export const createOrder = async (order: CreateOrderParams) =&amp;gt; {&#xA;  try {&#xA;    await connectToDatabase();&#xA;    &#xA;    const newOrder = await Order.create({&#xA;      ...order,&#xA;      event: order.eventId,&#xA;      buyer: order.buyerId,&#xA;    });&#xA;&#xA;    return JSON.parse(JSON.stringify(newOrder));&#xA;  } catch (error) {&#xA;    handleError(error);&#xA;  }&#xA;}&#xA;&#xA;// GET ORDERS BY EVENT&#xA;export async function getOrdersByEvent({ searchString, eventId }: GetOrdersByEventParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    if (!eventId) throw new Error(&#39;Event ID is required&#39;)&#xA;    const eventObjectId = new ObjectId(eventId)&#xA;&#xA;    const orders = await Order.aggregate([&#xA;      {&#xA;        $lookup: {&#xA;          from: &#39;users&#39;,&#xA;          localField: &#39;buyer&#39;,&#xA;          foreignField: &#39;_id&#39;,&#xA;          as: &#39;buyer&#39;,&#xA;        },&#xA;      },&#xA;      {&#xA;        $unwind: &#39;$buyer&#39;,&#xA;      },&#xA;      {&#xA;        $lookup: {&#xA;          from: &#39;events&#39;,&#xA;          localField: &#39;event&#39;,&#xA;          foreignField: &#39;_id&#39;,&#xA;          as: &#39;event&#39;,&#xA;        },&#xA;      },&#xA;      {&#xA;        $unwind: &#39;$event&#39;,&#xA;      },&#xA;      {&#xA;        $project: {&#xA;          _id: 1,&#xA;          totalAmount: 1,&#xA;          createdAt: 1,&#xA;          eventTitle: &#39;$event.title&#39;,&#xA;          eventId: &#39;$event._id&#39;,&#xA;          buyer: {&#xA;            $concat: [&#39;$buyer.firstName&#39;, &#39; &#39;, &#39;$buyer.lastName&#39;],&#xA;          },&#xA;        },&#xA;      },&#xA;      {&#xA;        $match: {&#xA;          $and: [{ eventId: eventObjectId }, { buyer: { $regex: RegExp(searchString, &#39;i&#39;) } }],&#xA;        },&#xA;      },&#xA;    ])&#xA;&#xA;    return JSON.parse(JSON.stringify(orders))&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&#xA;// GET ORDERS BY USER&#xA;export async function getOrdersByUser({ userId, limit = 3, page }: GetOrdersByUserParams) {&#xA;  try {&#xA;    await connectToDatabase()&#xA;&#xA;    const skipAmount = (Number(page) - 1) * limit&#xA;    const conditions = { buyer: userId }&#xA;&#xA;    const orders = await Order.distinct(&#39;event._id&#39;)&#xA;      .find(conditions)&#xA;      .sort({ createdAt: &#39;desc&#39; })&#xA;      .skip(skipAmount)&#xA;      .limit(limit)&#xA;      .populate({&#xA;        path: &#39;event&#39;,&#xA;        model: Event,&#xA;        populate: {&#xA;          path: &#39;organizer&#39;,&#xA;          model: User,&#xA;          select: &#39;_id firstName lastName&#39;,&#xA;        },&#xA;      })&#xA;&#xA;    const ordersCount = await Order.distinct(&#39;event._id&#39;).countDocuments(conditions)&#xA;&#xA;    return { data: JSON.parse(JSON.stringify(orders)), totalPages: Math.ceil(ordersCount / limit) }&#xA;  } catch (error) {&#xA;    handleError(error)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;orders/page.tsx&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import Search  from &#39;@/components/shared/Search&#39;&#xA;import { getOrdersByEvent } from &#39;@/lib/actions/order.actions&#39;&#xA;import { formatDateTime, formatPrice } from &#39;@/lib/utils&#39;&#xA;import { SearchParamProps } from &#39;@/types&#39;&#xA;import { IOrderItem } from &#39;@/lib/database/models/order.model&#39;&#xA;&#xA;const Orders = async ({ searchParams }: SearchParamProps) =&amp;gt; {&#xA;  const eventId = (searchParams?.eventId as string) || &#39;&#39;&#xA;  const searchText = (searchParams?.query as string) || &#39;&#39;&#xA;&#xA;  const orders = await getOrdersByEvent({ eventId, searchString: searchText })&#xA;&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;section className=&#34; bg-primary-50 bg-dotted-pattern bg-cover bg-center py-5 md:py-10&#34;&amp;gt;&#xA;        &amp;lt;h3 className=&#34;wrapper h3-bold text-center sm:text-left &#34;&amp;gt;Orders&amp;lt;/h3&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;&#xA;      &amp;lt;section className=&#34;wrapper mt-8&#34;&amp;gt;&#xA;        &amp;lt;Search placeholder=&#34;Search buyer name...&#34; /&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;&#xA;      &amp;lt;section className=&#34;wrapper overflow-x-auto&#34;&amp;gt;&#xA;        &amp;lt;table className=&#34;w-full border-collapse border-t&#34;&amp;gt;&#xA;          &amp;lt;thead&amp;gt;&#xA;            &amp;lt;tr className=&#34;p-medium-14 border-b text-grey-500&#34;&amp;gt;&#xA;              &amp;lt;th className=&#34;min-w-[250px] py-3 text-left&#34;&amp;gt;Order ID&amp;lt;/th&amp;gt;&#xA;              &amp;lt;th className=&#34;min-w-[200px] flex-1 py-3 pr-4 text-left&#34;&amp;gt;Event Title&amp;lt;/th&amp;gt;&#xA;              &amp;lt;th className=&#34;min-w-[150px] py-3 text-left&#34;&amp;gt;Buyer&amp;lt;/th&amp;gt;&#xA;              &amp;lt;th className=&#34;min-w-[100px] py-3 text-left&#34;&amp;gt;Created&amp;lt;/th&amp;gt;&#xA;              &amp;lt;th className=&#34;min-w-[100px] py-3 text-right&#34;&amp;gt;Amount&amp;lt;/th&amp;gt;&#xA;            &amp;lt;/tr&amp;gt;&#xA;          &amp;lt;/thead&amp;gt;&#xA;          &amp;lt;tbody&amp;gt;&#xA;            {orders &amp;amp;&amp;amp; orders.length === 0 ? (&#xA;              &amp;lt;tr className=&#34;border-b&#34;&amp;gt;&#xA;                &amp;lt;td colSpan={5} className=&#34;py-4 text-center text-gray-500&#34;&amp;gt;&#xA;                  No orders found.&#xA;                &amp;lt;/td&amp;gt;&#xA;              &amp;lt;/tr&amp;gt;&#xA;            ) : (&#xA;              &amp;lt;&amp;gt;&#xA;                {orders &amp;amp;&amp;amp;&#xA;                  orders.map((row: IOrderItem) =&amp;gt; (&#xA;                    &amp;lt;tr&#xA;                      key={row._id}&#xA;                      className=&#34;p-regular-14 lg:p-regular-16 border-b &#34;&#xA;                      style={{ boxSizing: &#39;border-box&#39; }}&amp;gt;&#xA;                      &amp;lt;td className=&#34;min-w-[250px] py-4 text-primary-500&#34;&amp;gt;{row._id}&amp;lt;/td&amp;gt;&#xA;                      &amp;lt;td className=&#34;min-w-[200px] flex-1 py-4 pr-4&#34;&amp;gt;{row.eventTitle}&amp;lt;/td&amp;gt;&#xA;                      &amp;lt;td className=&#34;min-w-[150px] py-4&#34;&amp;gt;{row.buyer}&amp;lt;/td&amp;gt;&#xA;                      &amp;lt;td className=&#34;min-w-[100px] py-4&#34;&amp;gt;&#xA;                        {formatDateTime(row.createdAt).dateTime}&#xA;                      &amp;lt;/td&amp;gt;&#xA;                      &amp;lt;td className=&#34;min-w-[100px] py-4 text-right&#34;&amp;gt;&#xA;                        {formatPrice(row.totalAmount)}&#xA;                      &amp;lt;/td&amp;gt;&#xA;                    &amp;lt;/tr&amp;gt;&#xA;                  ))}&#xA;              &amp;lt;/&amp;gt;&#xA;            )}&#xA;          &amp;lt;/tbody&amp;gt;&#xA;        &amp;lt;/table&amp;gt;&#xA;      &amp;lt;/section&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;export default Orders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;links&#34;&gt;🔗 Links&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;All assets used in the project can be found &lt;a href=&#34;https://drive.google.com/file/d/1hoRwUtTFIiuOXPw-SDYj6wk4hZTMcYmL/view?usp=sharing&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;more&#34;&gt;🚀 More&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advance your skills with Next.js 14 Pro Course&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enjoyed creating this project? Dive deeper into our PRO courses for a richer learning adventure. They&#39;re packed with detailed explanations, cool features, and exercises to boost your skills. Give it a go!&lt;/p&gt; &#xA;&lt;a href=&#34;https://jsmastery.pro/next14&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/557837ce-f612-4530-ab24-189e75133c71&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accelerate your professional journey with Expert Training program&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;And if you&#39;re hungry for more than just a course and want to understand how we learn and tackle tech challenges, hop into our personalized masterclass. We cover best practices, different web skills, and offer mentorship to boost your confidence. Let&#39;s learn and grow together!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.jsmastery.pro/masterclass&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/sujatagunale/EasyRead/assets/151519281/fed352ad-f27b-400d-9b8f-c7fe628acb84&#34; alt=&#34;Project Banner&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>babaohuang/GeminiProChat</title>
    <updated>2023-12-19T01:42:57Z</updated>
    <id>tag:github.com,2023-12-19:/babaohuang/GeminiProChat</id>
    <link href="https://github.com/babaohuang/GeminiProChat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal web UI for GeminiPro.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GeminiProChat&lt;/h1&gt; &#xA;&lt;p&gt;Minimal web UI for GeminiPro Chat.&lt;/p&gt; &#xA;&lt;p&gt;Live demo: &lt;a href=&#34;https://www.geminiprochat.com&#34;&gt;Gemini Pro Chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.geminiprochat.com&#34;&gt;&lt;img src=&#34;https://github.com/babaohuang/GeminiProChat/assets/559171/d02fd440-401a-410d-a112-4b10935624c6&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project is inspired by and based on the following open-source project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anse-app/chatgpt-demo&#34;&gt;ChatGPT-Demo&lt;/a&gt; - For the foundational codebase and features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;h3&gt;Pre environment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Node&lt;/strong&gt;: Check that both your development environment and deployment environment are using &lt;code&gt;Node v18&lt;/code&gt; or later. You can use &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; to manage multiple &lt;code&gt;node&lt;/code&gt; versions locally.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; node -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;PNPM&lt;/strong&gt;: We recommend using &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt; to manage dependencies. If you have never installed pnpm, you can install it with the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; npm i -g pnpm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GEMINI_API_KEY&lt;/strong&gt;: Before running this application, you need to obtain the API key from Google. You can register the API key at &lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;https://makersuite.google.com/app/apikey&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;.env.example&lt;/code&gt; file, then rename it to &lt;code&gt;.env&lt;/code&gt;, and add your &lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;GEMINI API key&lt;/a&gt; to the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; GEMINI_API_KEY=AIzaSy...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the application, the local project runs on &lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;You can control the website through environment variables.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GEMINI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Your API Key for GEMINI. You can get it from &lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;here&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;API_BASE_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom base url for GEMINI API. Click &lt;a href=&#34;https://github.com/babaohuang/GeminiProChat?tab=readme-ov-file#solution-for-user-location-is-not-supported-for-the-api-use&#34;&gt;here&lt;/a&gt; to see when to use this.&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HEAD_SCRIPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Inject analytics or other scripts before &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; of the page&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PUBLIC_SECRET_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Secret string for the project. Use for generating signatures for API calls&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SITE_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set password for site, support multiple password separated by comma. If not set, site will be public&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;h3&gt;Deploy With Vercel(Recommended)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https://github.com/babaohuang/GeminiProChat&amp;amp;env=GEMINI_API_KEY&amp;amp;envDescription=Google%20API%20Key%20for%20GeminiProChat&amp;amp;envLink=https://makersuite.google.com/app/apikey&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just click the button above and follow the instructions to deploy your own copy of the app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;h4&gt;Solution for &#34;User location is not supported for the API use&#34;&lt;/h4&gt; &#xA; &lt;p&gt;If you encounter the issue &lt;strong&gt;&#34;User location is not supported for the API use&#34;&lt;/strong&gt;, follow these steps to resolve it:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to this &lt;a href=&#34;https://github.com/antergone/palm-proxy&#34;&gt;&lt;strong&gt;palm-proxy&lt;/strong&gt;&lt;/a&gt; repo and click &lt;strong&gt;&#34;Deploy With Vercel&#34;&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Once the deployment is complete, you will receive a domain name assigned by Vercel (e.g., &lt;code&gt;https://xxx.vercel.app&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;In your &lt;strong&gt;Gemini Pro Chat&lt;/strong&gt; project, set an environment variable named &lt;code&gt;API_BASE_URL&lt;/code&gt; with the value being the domain you got from deploying the gemini proxy (&lt;code&gt;https://xxx.vercel.app&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;Redeploy your &lt;strong&gt;Gemini Pro Chat&lt;/strong&gt; project to finalize the configuration. This should resolve the issue.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/antergone/palm-proxy&#34;&gt;&lt;strong&gt;antergone&lt;/strong&gt;&lt;/a&gt; for providing this solution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Deploy With Docker&lt;/h3&gt; &#xA;&lt;p&gt;Although this project provides a Dockerfile, there is currently a known bug with the Docker deployment method. I am actively working on fixing this issue. Therefore, Docker deployment is not recommended at this moment. If any contributors have a solution to fix this bug, your contributions are highly welcomed. Please feel free to submit a Pull Request (PR) to help me resolve this issue.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#babaohuang/geminiprochat&amp;amp;Timeline&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=babaohuang/geminiprochat&amp;amp;type=Timeline&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>