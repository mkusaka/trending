<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-13T01:49:22Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FuelLabs/fuels-ts</title>
    <updated>2023-07-13T01:49:22Z</updated>
    <id>tag:github.com,2023-07-13:/FuelLabs/fuels-ts</id>
    <link href="https://github.com/FuelLabs/fuels-ts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fuel v2 TypeScript SDK&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/FuelLabs/fuels-ts/master/apps/docs/src/public/fuels-ts-logo-dark.png&#34;&gt; &#xA; &lt;img alt=&#34;Fuels-ts SDK logo&#34; width=&#34;400px&#34; src=&#34;https://raw.githubusercontent.com/FuelLabs/fuels-ts/master/apps/docs/src/public/fuels-ts-logo-light.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;strong&gt;fuels-ts&lt;/strong&gt; is a library for interacting with &lt;strong&gt;Fuel v2&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuels-ts/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/FuelLabs/fuels-ts/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/fuels&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/fuels&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fuellabs.github.io/fuels-ts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-fuels.ts-brightgreen.svg?style=flat&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/xfpK4Pe&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat%20on-discord-orange?&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://fuellabs.github.io/fuels-ts&#34;&gt;documentation&lt;/a&gt; site is your main stop for resources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/fuel-docs/master/quickstart/developer-quickstart.html&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/fuels-ts&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/fuels-ts/guide/wallets/&#34;&gt;Wallets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/fuels-ts/guide/contracts/&#34;&gt;Contracts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/fuels-ts/guide/scripts/&#34;&gt;Scripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/fuels-ts/guide/predicates/&#34;&gt;Predicates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/fuels-ts/guide/abi-typegen/&#34;&gt;ABI Typegen&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuels-ts/raw/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.fuel.network/&#34;&gt;The Fuel Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FuelLabs/fuels-ts/master/#the-fuel-ecosystem&#34;&gt;The Fuel Ecosystem&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install fuels --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Import&lt;/h1&gt; &#xA;&lt;p&gt;Simple example usages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Wallet } from &#34;fuels&#34;;&#xA;&#xA;// Random Wallet&#xA;console.log(Wallet.generate());&#xA;&#xA;// Using privateKey Wallet&#xA;console.log(new Wallet(&#34;0x0000...0000&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;CLI&lt;/h1&gt; &#xA;&lt;p&gt;Fuels include some utility commands via built-in CLI tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npm add fuels&#xA;$ npx fuels --help&#xA;Usage: fuels [options] [command]&#xA;&#xA;Options:&#xA;  -V, --version      output the version number&#xA;  -h, --help         display help for command&#xA;&#xA;Commands:&#xA;  versions           check for version incompatibilities&#xA;  typegen [options]  generate typescript from contract abi json files&#xA;  help [command]     display help for command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;The Fuel Ecosystem&lt;/h1&gt; &#xA;&lt;p&gt;Learn more about the Fuel Ecosystem.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/sway/&#34;&gt;üå¥ Sway&lt;/a&gt; ‚Äî The new language, empowering everyone to build reliable and efficient smart contracts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fuellabs.github.io/sway/v0.30.1/forc/index.html&#34;&gt;üß∞ Forc&lt;/a&gt; ‚Äî The Fuel toolbox: &lt;em&gt;Build, deploy and manage your sway projects&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuel-core&#34;&gt;‚öôÔ∏è Fuel Core&lt;/a&gt; ‚Äî The new FuelVM, a blazingly fast blockchain VM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuel-specs&#34;&gt;üîó Fuel Specs&lt;/a&gt; ‚Äî The Fuel protocol specifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuels-wallet&#34;&gt;üíº Fuels Wallet&lt;/a&gt; ‚Äî The Official Fuels Wallet&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FuelLabs/fuels-rs&#34;&gt;ü¶Ä Rust SDK&lt;/a&gt; ‚Äî A robust SDK in rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fuel.network/&#34;&gt;‚ö° Fuel Network&lt;/a&gt; ‚Äî The project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.fuel.network/&#34;&gt;üìö The Fuel Forum&lt;/a&gt; ‚Äî Ask questions, get updates, and contribute to a modular future&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The primary license for this repo is &lt;code&gt;Apache 2.0&lt;/code&gt;, see &lt;a href=&#34;https://github.com/FuelLabs/fuels-ts/raw/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shelf-nu/shelf.nu</title>
    <updated>2023-07-13T01:49:22Z</updated>
    <id>tag:github.com,2023-07-13:/Shelf-nu/shelf.nu</id>
    <link href="https://github.com/Shelf-nu/shelf.nu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;shelf is open source Asset Management Infrastructure for absolutely everyone.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shelf.nu - Open Source Asset Management Infrastructure for everyone.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ShelfQR&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/cloudposse.svg?style=social&amp;amp;label=Follow%20%40ShelfQR&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Shelf-nu/shelf.nu/actions/workflows/deploy.yml&#34;&gt;&lt;img src=&#34;https://github.com/Shelf-nu/shelf.nu/actions/workflows/deploy.yml/badge.svg?branch=dev&#34; alt=&#34;üöÄ Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shelf üè∑Ô∏è Asset Management infrastructure for absolutely everyone (open source).&lt;/p&gt; &#xA;&lt;p&gt;Shelf is a simple and visual asset management and location tracking system that allows people to track their physical assets with ease.&lt;/p&gt; &#xA;&lt;h2&gt;Core Features and Benefits&lt;/h2&gt; &#xA;&lt;p&gt;With Shelf, you can take a picture of any item you own and store it in your own database. From there, you can generate a printable code (QR) that you can tag onto the item, making it easy to identify and locate in the future. Shelf has a handy code printing area where you can add as many QR codes as you can on an A4 sticker paper sheet. You can also add detailed information about the item, including its purchase date, purchase price, warranty information, and more.&lt;/p&gt; &#xA;&lt;h3&gt;Once your assets are online, you will be able to:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate printable PDFs sheets from assets you select, so you can stick them onto anything&lt;/li&gt; &#xA; &lt;li&gt;Check the last known location of your assets&lt;/li&gt; &#xA; &lt;li&gt;Instant Search through your assets database&lt;/li&gt; &#xA; &lt;li&gt;Use &#39;lost mode&#39; for emergencies (offer a bounty for a return of an item)&lt;/li&gt; &#xA; &lt;li&gt;Get notified of assets you are not using&lt;/li&gt; &#xA; &lt;li&gt;Share your asset vault with other users&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Use Shelf alone, or as a team. And, these questions will be a thing of the past.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Who was the last person that took X,Y or Z?&lt;/li&gt; &#xA; &lt;li&gt;What gear does X have currently?&lt;/li&gt; &#xA; &lt;li&gt;Which assets did we appoint to our team member abroad?&lt;/li&gt; &#xA; &lt;li&gt;What do we have in our storage facility now?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shelf&#39;s vision and ambition&lt;/h2&gt; &#xA;&lt;p&gt;To enable and facilitate the tagging of 1 Billion assets by 2023. Shelf therefore allows users to create unlimited assets on their environments. We will fund the growth and further development of the tool by releasing premium features. However, Shelf core will be forever free for individuals.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Shelf&#39;s current stack&lt;/h3&gt; &#xA;&lt;p&gt;We have decided to give RemixJS a try.&lt;/p&gt; &#xA;&lt;p&gt;For the purpose of shipping asap, we have opted into using a template: &lt;a href=&#34;https://github.com/rphlmr/supa-fly-stack&#34;&gt;https://github.com/rphlmr/supa-fly-stack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Getting started with Shelf&lt;/h3&gt; &#xA;&lt;h1&gt;Remix Supa Fly Stack&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This Readme will be re-written soon&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx create-remix --template rphlmr/supa-fly-stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What&#39;s in the stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fly.io&#34;&gt;Fly app deployment&lt;/a&gt; with &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Production-ready &lt;a href=&#34;https://supabase.com/&#34;&gt;Supabase Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Healthcheck endpoint for &lt;a href=&#34;https://fly.io/docs/reference/configuration/#services-http_checks&#34;&gt;Fly backups region fallbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; to deploy on merge to production and staging environments&lt;/li&gt; &#xA; &lt;li&gt;Email/Password Authentication / Magic Link, with &lt;a href=&#34;https://remix.run/docs/en/v1/api/remix#createcookiesessionstorage&#34;&gt;cookie-based sessions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Database ORM with &lt;a href=&#34;https://prisma.io&#34;&gt;Prisma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forms Schema (client and server sides !) validation with &lt;a href=&#34;https://github.com/kiliman/remix-params-helper&#34;&gt;Remix Params Helper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Styling with &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end testing with &lt;a href=&#34;https://cypress.io&#34;&gt;Cypress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Local third party request mocking with &lt;a href=&#34;https://mswjs.io&#34;&gt;MSW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unit testing with &lt;a href=&#34;https://vitest.dev&#34;&gt;Vitest&lt;/a&gt; and &lt;a href=&#34;https://testing-library.com&#34;&gt;Testing Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code formatting with &lt;a href=&#34;https://prettier.io&#34;&gt;Prettier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linting with &lt;a href=&#34;https://eslint.org&#34;&gt;ESLint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Static Types with &lt;a href=&#34;https://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not a fan of bits of the stack? Fork it, change it, and use &lt;code&gt;npx create-remix --template your/repo&lt;/code&gt;! Make it your own.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;a href=&#34;https://supabase.com/&#34;&gt;Supabase Database&lt;/a&gt; (free tier gives you 2 databases)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Only one for playing around with Supabase or 2 for &lt;code&gt;staging&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Used all your free tiers ? Also works with &lt;a href=&#34;https://github.com/supabase/cli&#34;&gt;Supabase CLI&lt;/a&gt; and local self-hosting&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Create a strong database password, but prefer a passphrase, it&#39;ll be more easy to use in connection string (no need to escape special char)&lt;/p&gt; &#xA;   &lt;p&gt;&lt;em&gt;example : my_strong_passphrase&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;https://app.supabase.io/project/%7BPROJECT%7D/settings/api&#34;&gt;https://app.supabase.io/project/{PROJECT}/settings/api&lt;/a&gt; to find your secrets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Project API keys&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your &lt;code&gt;MAPTILER_TOKEN&lt;/code&gt;, &lt;code&gt;SUPABASE_URL&lt;/code&gt;, &lt;code&gt;SERVER_URL&lt;/code&gt;, &lt;code&gt;SUPABASE_SERVICE_ROLE&lt;/code&gt; (aka &lt;code&gt;service_role&lt;/code&gt; &lt;code&gt;secret&lt;/code&gt;), &lt;code&gt;SUPABASE_ANON_PUBLIC&lt;/code&gt; (aka &lt;code&gt;anon&lt;/code&gt; &lt;code&gt;public&lt;/code&gt;) and &lt;code&gt;DATABASE_URL&lt;/code&gt; in the &lt;code&gt;.env&lt;/code&gt; file&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;SERVER_URL&lt;/code&gt; is your localhost on dev. It&#39;ll work for magic link login&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-en&#34;&gt;DATABASE_URL=&#34;postgres://postgres:{STAGING_POSTGRES_PASSWORD}@db.{STAGING_YOUR_INSTANCE_NAME}.supabase.co:5432/postgres&#34;&#xA;SUPABASE_ANON_PUBLIC=&#34;{ANON_PUBLIC}&#34;&#xA;SUPABASE_SERVICE_ROLE=&#34;{SERVICE_ROLE}&#34;&#xA;SUPABASE_URL=&#34;https://{STAGING_YOUR_INSTANCE_NAME}.supabase.co&#34;&#xA;SESSION_SECRET=&#34;super-duper-s3cret&#34;&#xA;SERVER_URL=&#34;http://localhost:3000&#34;&#xA;MAPTILER_TOKEN=&#34;someToken&#34;&#xA;SMTP_HOST=&#34;smtp.yourhost.com&#34;&#xA;SMTP_USER=&#34;you@example.com&#34;&#xA;SMTP_PWD=&#34;yourSMTPpassword&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This step only applies if you&#39;ve opted out of having the CLI install dependencies for you:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx remix init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initial setup:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start dev server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This starts your app in development mode, rebuilding assets on file changes.&lt;/p&gt; &#xA;&lt;p&gt;The database seed script creates a new user with some data you can use to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;code&gt;hello@supabase.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;supabase&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Relevant code:&lt;/h3&gt; &#xA;&lt;p&gt;This is a pretty simple note-taking app, but it&#39;s a good example of how you can build a full-stack app with Prisma, Supabase, and Remix. The main functionality is creating users, logging in and out (handling access and refresh tokens + refresh on expiration), and creating and deleting notes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;auth / session &lt;a href=&#34;https://raw.githubusercontent.com/Shelf-nu/shelf.nu/main/app/modules/auth&#34;&gt;./app/modules/auth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;creating, and deleting notes &lt;a href=&#34;https://raw.githubusercontent.com/Shelf-nu/shelf.nu/main/app/modules/note&#34;&gt;./app/modules/note&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Do what you know if you are a Fly.io expert.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This Remix Stack comes with two GitHub Actions that handle automatically deploying your app to production and staging environments.&lt;/p&gt; &#xA;&lt;p&gt;Prior to your first deployment, you&#39;ll need to do a few things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fly.io/docs/getting-started/installing-flyctl/&#34;&gt;Install Fly&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sign up and log in to Fly&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly auth signup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you have more than one Fly account, ensure that you are signed into the same account in the Fly CLI as you are in the browser. In your terminal, run &lt;code&gt;fly auth whoami&lt;/code&gt; and ensure the email matches the Fly account signed into the browser.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create two apps on Fly, one for staging and one for production:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly apps create supa-fly-stack-template&#xA;fly apps create supa-fly-stack-template-staging  # ** not mandatory if you don&#39;t want a staging environnement **&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For production app, make sure this name matches the &lt;code&gt;app&lt;/code&gt; set in your &lt;code&gt;fly.toml&lt;/code&gt; file. Otherwise, you will not be able to deploy.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Initialize Empty Git repository.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new &lt;a href=&#34;https://repo.new&#34;&gt;GitHub Repository&lt;/a&gt;, and then add it as the remote for your project. &lt;strong&gt;Do not push your app yet!&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote add origin &amp;lt;ORIGIN_URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;MAPTILER_TOKEN&lt;/code&gt; which is needed for rendering the map which shows the last scanned location. For more info and to get an account and token: &lt;a href=&#34;https://www.maptiler.com/&#34;&gt;https://www.maptiler.com/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;FLY_API_TOKEN&lt;/code&gt; to your GitHub repo. To do this, go to your user settings on Fly and create a new &lt;a href=&#34;https://web.fly.io/user/personal_access_tokens/new&#34;&gt;token&lt;/a&gt;, then add it to &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;your repo secrets&lt;/a&gt; with the name &lt;code&gt;FLY_API_TOKEN&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;SESSION_SECRET&lt;/code&gt;, &lt;code&gt;SUPABASE_URL&lt;/code&gt;, &lt;code&gt;SUPABASE_SERVICE_ROLE&lt;/code&gt;,&lt;code&gt;SUPABASE_ANON_PUBLIC&lt;/code&gt;, &lt;code&gt;SERVER_URL&lt;/code&gt; and &lt;code&gt;DATABASE_URL&lt;/code&gt; to your fly app secrets&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To find your &lt;code&gt;SERVER_URL&lt;/code&gt;, go to &lt;a href=&#34;https://fly.io/apps/supa-fly-stack-template-3a36&#34;&gt;your fly.io dashboard&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;To do this you can run the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# production (--app name is resolved from fly.toml)&#xA;fly secrets set SESSION_SECRET=$(openssl rand -hex 32)&#xA;fly secrets set SUPABASE_URL=&#34;https://{YOUR_INSTANCE_NAME}.supabase.co&#34;&#xA;fly secrets set SUPABASE_SERVICE_ROLE=&#34;{SUPABASE_SERVICE_ROLE}&#34;&#xA;fly secrets set SUPABASE_ANON_PUBLIC=&#34;{SUPABASE_ANON_PUBLIC}&#34;&#xA;fly secrets set DATABASE_URL=&#34;postgres://postgres:{POSTGRES_PASSWORD}@db.{YOUR_INSTANCE_NAME}.supabase.co:5432/postgres&#34;&#xA;fly secrets set SERVER_URL=&#34;https://{YOUR_STAGING_SERVEUR_URL}&#34;&#xA;fly secrets set MAPTILER_TOKEN=&#34;{YOUR_MAPTILER_TOKEN}&#34;&#xA;&#xA;fly secrets set SMTP_HOST=&#34;smtp.yourhost.com&#34;&#xA;fly secrets set SMTP_USER=&#34;you@example.com&#34;&#xA;fly secrets set SMTP_PWD=&#34;yourSMTPpassword&#34;&#xA;&#xA;&#xA;# staging (specify --app name) ** not mandatory if you don&#39;t want a staging environnement **&#xA;fly secrets set SESSION_SECRET=$(openssl rand -hex 32) --app supa-fly-stack-template-staging&#xA;fly secrets set SUPABASE_URL=&#34;https://{YOUR_STAGING_INSTANCE_NAME}.supabase.co&#34; --app supa-fly-stack-template-staging&#xA;fly secrets set SUPABASE_SERVICE_ROLE=&#34;{STAGING_SUPABASE_SERVICE_ROLE}&#34; --app supa-fly-stack-template-staging&#xA;fly secrets set SUPABASE_ANON_PUBLIC=&#34;{STAGING_SUPABASE_ANON_PUBLIC}&#34; --app supa-fly-stack-template-staging&#xA;fly secrets set DATABASE_URL=&#34;postgres://postgres:{STAGING_POSTGRES_PASSWORD}@db.{STAGING_YOUR_INSTANCE_NAME}.supabase.co:5432/postgres&#34; --app supa-fly-stack-template-staging&#xA;fly secrets set SERVER_URL=&#34;https://{YOUR_STAGING_SERVEUR_URL}&#34; --app supa-fly-stack-template-staging&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t have openssl installed, you can also use &lt;a href=&#34;https://1password.com/generate-password&#34;&gt;1password&lt;/a&gt; to generate a random secret, just replace &lt;code&gt;$(openssl rand -hex 32)&lt;/code&gt; with the generated secret.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that everything is set up you can commit and push your changes to your repo. Every commit to your &lt;code&gt;main&lt;/code&gt; branch will trigger a deployment to your production environment, and every commit to your &lt;code&gt;dev&lt;/code&gt; branch will trigger a deployment to your staging environment.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To deploy manually, just run &lt;code&gt;fly deploy&lt;/code&gt; (It&#39;ll deploy app defined in fly.toml)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;File Storage&lt;/h2&gt; &#xA;&lt;p&gt;For File storage we use the S3 buckets service provided by supabase. We do this as it makes it easier to manage permissions in relation to our users which are also stored on supabase. To set it up you need to do the following steps:&lt;/p&gt; &#xA;&lt;h3&gt;Profile pictures&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a bucket called &lt;code&gt;profile-pictures&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make it a public bucket&lt;/li&gt; &#xA; &lt;li&gt;Implement a policy for &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; &amp;amp; &lt;code&gt;DELETE&lt;/code&gt;. The policy expression is: &lt;code&gt;((bucket_id = &#39;profile-pictures&#39;::text) AND ((storage.foldername(name))[1] = (auth.uid())::text))&lt;/code&gt; and target roles should be set to &lt;code&gt;authenticated&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Items&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a bucket called &lt;code&gt;items&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implement a policy for &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; &amp;amp; &lt;code&gt;DELETE&lt;/code&gt;. The policy expression is: &lt;code&gt;((bucket_id = &#39;items&#39;::text) AND ((storage.foldername(name))[1] = (auth.uid())::text))&lt;/code&gt; and target roles should be set to &lt;code&gt;authenticated&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;GitHub Actions&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DISCLAIMER : Github actions ==&amp;gt; I&#39;m not an expert about that. Read carefully before using it&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We use GitHub Actions for continuous integration and deployment. Anything that gets into the &lt;code&gt;main&lt;/code&gt; branch will be deployed to production after running tests/build/etc. Anything in the &lt;code&gt;dev&lt;/code&gt; branch will be deployed to staging.&lt;/p&gt; &#xA;&lt;p&gt;üëâ &lt;strong&gt;You have to add some env secrets for cypress.&lt;/strong&gt; üëà&lt;/p&gt; &#xA;&lt;p&gt;Add a &lt;code&gt;SESSION_SECRET&lt;/code&gt;, &lt;code&gt;SUPABASE_URL&lt;/code&gt;, &lt;code&gt;SUPABASE_SERVICE_ROLE&lt;/code&gt;,&lt;code&gt;SUPABASE_ANON_PUBLIC&lt;/code&gt;, &lt;code&gt;SERVER_URL&lt;/code&gt; and &lt;code&gt;DATABASE_URL&lt;/code&gt; to &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;your repo secrets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;h3&gt;Cypress&lt;/h3&gt; &#xA;&lt;p&gt;We use Cypress for our End-to-End tests in this project. You&#39;ll find those in the &lt;code&gt;cypress&lt;/code&gt; directory. As you make changes, add to an existing file or create a new file in the &lt;code&gt;cypress/e2e&lt;/code&gt; directory to test your changes.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://testing-library.com/cypress&#34;&gt;&lt;code&gt;@testing-library/cypress&lt;/code&gt;&lt;/a&gt; for selecting elements on the page semantically.&lt;/p&gt; &#xA;&lt;p&gt;To run these tests in development, complete your &lt;code&gt;.env&lt;/code&gt; and run &lt;code&gt;npm run test:e2e:dev&lt;/code&gt; which will start the dev server for the app as well as the Cypress client. Make sure the database is running in docker as described above.&lt;/p&gt; &#xA;&lt;p&gt;We also have a utility to auto-delete the user at the end of your test. Just make sure to add this in each test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;afterEach(() =&amp;gt; {&#xA;  cy.cleanupUser();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That way, we can keep your test db clean and keep your tests isolated from one another.&lt;/p&gt; &#xA;&lt;h3&gt;Vitest&lt;/h3&gt; &#xA;&lt;p&gt;For lower level tests of utilities and individual components, we use &lt;code&gt;vitest&lt;/code&gt;. We have DOM-specific assertion helpers via &lt;a href=&#34;https://testing-library.com/jest-dom&#34;&gt;&lt;code&gt;@testing-library/jest-dom&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Type Checking&lt;/h3&gt; &#xA;&lt;p&gt;This project uses TypeScript. It&#39;s recommended to get TypeScript set up for your editor to get a great in-editor experience with type checking and auto-complete. To run type checking across the whole project, run &lt;code&gt;npm run typecheck&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;This project uses ESLint for linting. That is configured in &lt;code&gt;.eslintrc.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt; for auto-formatting in this project. It&#39;s recommended to install an editor plugin (like the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34;&gt;VSCode Prettier plugin&lt;/a&gt;) to get auto-formatting on save. There&#39;s also a &lt;code&gt;npm run format&lt;/code&gt; script you can run to format all files in the project.&lt;/p&gt; &#xA;&lt;h2&gt;Start working with Supabase&lt;/h2&gt; &#xA;&lt;p&gt;You are now ready to go further, congrats!&lt;/p&gt; &#xA;&lt;p&gt;To extend your Prisma schema and apply changes on your supabase database :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your changes in &lt;a href=&#34;https://raw.githubusercontent.com/Shelf-nu/shelf.nu/main/app/database/schema.prisma&#34;&gt;./app/database/schema.prisma&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepare your schema migration&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run db:prepare-migration&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check your migration in &lt;a href=&#34;https://raw.githubusercontent.com/Shelf-nu/shelf.nu/main/app/database&#34;&gt;./app/database/migrations&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apply this migration to production&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run db:deploy-migration&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;If your token expires in less than 1 hour (3600 seconds in Supabase Dashboard)&lt;/h2&gt; &#xA;&lt;p&gt;If you have a lower token lifetime than me (1 hour), you should take a look at &lt;code&gt;REFRESH_ACCESS_TOKEN_THRESHOLD&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/Shelf-nu/shelf.nu/main/app/modules/auth/session.server.ts&#34;&gt;./app/modules/auth/session.server.ts&lt;/a&gt; and set what you think is the best value for your use case.&lt;/p&gt; &#xA;&lt;h2&gt;Supabase RLS&lt;/h2&gt; &#xA;&lt;p&gt;You may ask &#34;can I use RLS with Remix&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The answer is &#34;Yes&#34; but It has a cost.&lt;/p&gt; &#xA;&lt;p&gt;Using Supabase SDK server side to query your database (for those using RLS features) adds an extra delay due to calling a Gotrue rest API instead of directly calling the Postgres database (and this is fine because at first Supabase SDK is for those who don&#39;t have/want backend).&lt;/p&gt; &#xA;&lt;p&gt;In my benchmark, it makes my pages twice slower. (~+200ms compared to a direct query with Prisma)&lt;/p&gt; &#xA;&lt;h2&gt;Supabase login with magic link&lt;/h2&gt; &#xA;&lt;p&gt;In order to make the register/login with magic link work, you will need to add some configuration to your Supabase. You need to add the site url as well as the redirect urls of your local, test and live app that will be used for oauth To do that navigate to Authentication &amp;gt; URL configiration and add the folowing values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://localhost:3000/oauth/callback&#34;&gt;https://localhost:3000/oauth/callback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://localhost:3000/reset-password&#34;&gt;https://localhost:3000/reset-password&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://staging-domain.com/oauth/callback&#34;&gt;https://staging-domain.com/oauth/callback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://staging-domain.com/reset-password&#34;&gt;https://staging-domain.com/reset-password&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://live-domain.com/oauth/callback&#34;&gt;https://live-domain.com/oauth/callback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://live-domain.com/reset-password&#34;&gt;https://live-domain.com/reset-password&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>korbinzhao/excalidraw-cn</title>
    <updated>2023-07-13T01:49:22Z</updated>
    <id>tag:github.com,2023-07-13:/korbinzhao/excalidraw-cn</id>
    <link href="https://github.com/korbinzhao/excalidraw-cn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Excalidraw-CN ÊòØÊîØÊåÅ‰∏≠ÊñáÊâãÂÜôÂíåÂ§öÁîªÂ∏ÉÁöÑ Excalidraw ÁôΩÊùøÂ∑•ÂÖ∑„ÄÇExcalidraw-CN is a whiteboard supporting Chinese hand draw font and multi-canvas based on Excalidraw.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i3/O1CN01Fj9ngw1N77fY1yafL_!!6000000001522-2-tps-1639-395.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A whiteboard supporting Chinese hand writing style and multi-canvas based on excalidraw.&lt;/p&gt; &#xA;&lt;h3&gt;Try it now&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Online &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visit &lt;a href=&#34;https://handraw.top/&#34;&gt;handraw.top&lt;/a&gt; to use free.&lt;/li&gt; &#xA;   &lt;li&gt;ËÆøÈóÆ &lt;a href=&#34;https://handraw.top/&#34;&gt;handraw.top&lt;/a&gt; ÂÖçË¥π‰ΩøÁî®„ÄÇ&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Obsidian Plugin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Comming soon, welcome to Star the plugin repo &lt;span&gt;üëâ&lt;/span&gt; &lt;a href=&#34;https://github.com/korbinzhao/obsidian-excalidraw-cn-plugin&#34;&gt;obsidian-excalidraw-cn-plugin&lt;/a&gt;, v1.0.0 development done, official reviewing.&lt;/li&gt; &#xA;   &lt;li&gt;ÂºÄÊ∫êÊèí‰ª∂ÔºàÊ¨¢Ëøé Star &lt;span&gt;üëâ&lt;/span&gt;Ôºâ&lt;a href=&#34;https://github.com/korbinzhao/obsidian-excalidraw-cn-plugin&#34;&gt;obsidian-excalidraw-cn-plugin&lt;/a&gt; v1.0.0 ÂºÄÂèëÂÆåÊàêÔºåÂÆòÊñπËØÑÂÆ°‰∏≠ÔºåÊï¨ËØ∑ÊúüÂæÖ„ÄÇ&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;span&gt;üíú&lt;/span&gt;Sponsors&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Welcome sponsors to contact me for customized advertising information. Quick link: &lt;a href=&#34;https://afdian.net/a/wantian&#34; target=&#34;_blank&#34;&gt;ÊäïÂñÇÁå´Á≤Æ&lt;/a&gt; or &lt;a href=&#34;https://www.buymeacoffee.com/korbinzhao&#34; target=&#34;_blank&#34;&gt;Buy me a coffee&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Thanks for all the sponsors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‰∫åÁ±≥ - &lt;a href=&#34;https://www.flagify.com/&#34;&gt;ÂõΩ‰∫ß SOAR ÂéÇÂïÜÈõæÂ∏úÊô∫ËÉΩ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://afdian.net/u/9ad7f8a01aee11ee808d5254001e7c00&#34;&gt;Áà±ÂèëÁîµÁî®Êà∑_SFnB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Chinese Handwriting StyleÔºà‰∏≠ÊñáÊâãÂÜôÊïàÊûúÔºâ&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i3/O1CN01TEf1Xy20EEpyKk91j_!!6000000006817-0-tps-2852-1620.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i4/O1CN01K0d6K51Iqr8fkojYy_!!6000000000945-0-tps-2876-1640.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Windows System SupportÔºàWindows ÊîØÊåÅÔºâ&lt;/h4&gt; &#xA;&lt;p&gt;The Chinese handwriting fonts are different between MacOS and Windows systems. The displayed effect in the previous section is for MacOS, while the displayed effect here is for Windows.&lt;/p&gt; &#xA;&lt;p&gt;MacOS Á≥ªÁªüÂíå Windows Á≥ªÁªü‰∏ã‰∏≠ÊñáÊâãÂÜôÂ≠ó‰Ωì‰∏çÂêåÔºåÂâçÊñáÂ±ïÁ§∫ÊïàÊûú‰∏∫ MacOS ÊïàÊûúÔºåËøôÈáåÁöÑÂ±ïÁ§∫ÊïàÊûú‰∏∫ Windows ÊïàÊûú„ÄÇ &lt;img src=&#34;https://github.com/korbinzhao/excalidraw-cn/assets/5051627/cd73fb34-2957-4a58-a533-98abb21162ab&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Multiple CanvasÔºàÂ§öÁîªÂ∏ÉËÉΩÂäõÔºâ&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i2/O1CN01vGnzBy1kFa8ksoEGt_!!6000000004654-0-tps-1272-1020.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Local Installation&lt;/h3&gt; &#xA;&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.&lt;/p&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/getting-started/install&#34;&gt;Yarn&lt;/a&gt; (v1 or v2.4.2+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Clone the repo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:korbinzhao/excalidraw-cn.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install the dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Start the server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and start coding in your favorite code editor.&lt;/p&gt; &#xA;&lt;h4&gt;Collaboration&lt;/h4&gt; &#xA;&lt;p&gt;For collaboration, you will need to set up &lt;a href=&#34;https://github.com/excalidraw/excalidraw-room&#34;&gt;collab server&lt;/a&gt; in local.&lt;/p&gt; &#xA;&lt;h4&gt;Commands&lt;/h4&gt; &#xA;&lt;h5&gt;Install the dependencies&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run the project&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reformat all files with Prettier&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run tests&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Update test snapshots&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test:update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Test for formatting with Prettier&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test:code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;You can use docker-compose to work on Excalidraw locally if you don&#39;t want to setup a Node.js env.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up --build -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please &lt;a href=&#34;https://github.com/korbinzhao/excalidraw-cn/issues/new&#34;&gt;open an issue&lt;/a&gt; first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;h2&gt;ÊäïÂñÇÁå´Á≤Æ&lt;/h2&gt; &#xA;&lt;p&gt;ÂõΩÂÜÖÂ∞è‰ºô‰º¥Ê¨¢ËøéÁõ¥Êé•„Äå&lt;a href=&#34;https://afdian.net/a/wantian&#34; target=&#34;_blank&#34;&gt;ÊäïÂñÇÁå´Á≤Æ&lt;/a&gt;„Äç„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Buy me a coffee&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/korbinzhao&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;39&#34; width=&#34;175&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>