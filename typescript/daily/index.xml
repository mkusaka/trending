<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-10T01:47:11Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ianarawjo/ChainForge</title>
    <updated>2023-08-10T01:47:11Z</updated>
    <id>tag:github.com,2023-08-10:/ianarawjo/ChainForge</id>
    <link href="https://github.com/ianarawjo/ChainForge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source visual programming environment for LLM experimentation and prompt evaluation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‚õìÔ∏èüõ†Ô∏è ChainForge&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;An open-source visual programming environment for battle-testing prompts to LLMs.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;1517&#34; alt=&#34;banner&#34; src=&#34;https://github.com/ianarawjo/ChainForge/assets/5251713/570879ef-ef8a-4e00-b37c-b49bc3c1a370&#34;&gt; &#xA;&lt;p&gt;ChainForge is a data flow prompt engineering environment for analyzing and evaluating LLM responses. It is geared towards early-stage, quick-and-dirty exploration of prompts, chat responses, and response quality that goes beyond ad-hoc chatting with individual LLMs. With ChainForge, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Query multiple LLMs at once&lt;/strong&gt; to test prompt ideas and variations quickly and effectively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compare response quality across prompt permutations, across models, and across model settings&lt;/strong&gt; to choose the best prompt and model for your use case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Setup evaluation metrics&lt;/strong&gt; (scoring function) and immediately visualize results across prompts, prompt parameters, models, and model settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hold multiple conversations at once across template parameters and chat models.&lt;/strong&gt; Template not just prompts, but follow-up chat messages, and inspect and evaluate outputs at each turn of a chat conversation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chainforge.ai/docs/&#34;&gt;Read the docs to learn more.&lt;/a&gt; ChainForge comes with a number of example evaluation flows to give you a sense of what&#39;s possible, including 188 example flows generated from benchmarks in OpenAI evals.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is an open beta of Chainforge.&lt;/strong&gt; We support model providers OpenAI, HuggingFace, Anthropic, Google PaLM2, Azure OpenAI endpoints, and &lt;a href=&#34;https://github.com/cocktailpeanut/dalai&#34;&gt;Dalai&lt;/a&gt;-hosted models Alpaca and Llama. You can change the exact model and individual model settings. Visualization nodes support numeric and boolean evaluation metrics. Try it and let us know what you think! :)&lt;/p&gt; &#xA;&lt;p&gt;ChainForge is built on &lt;a href=&#34;https://reactflow.dev&#34;&gt;ReactFlow&lt;/a&gt; and &lt;a href=&#34;https://flask.palletsprojects.com/en/2.3.x/&#34;&gt;Flask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainforge.ai/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ianarawjo/ChainForge/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ianarawjo/ChainForge/main/#example-experiments&#34;&gt;Example Experiments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ianarawjo/ChainForge/main/#share-with-others&#34;&gt;Share with Others&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ianarawjo/ChainForge/main/#features&#34;&gt;Features&lt;/a&gt; (see the &lt;a href=&#34;https://chainforge.ai/docs/nodes/&#34;&gt;docs&lt;/a&gt; for more comprehensive info)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ianarawjo/ChainForge/main/#development&#34;&gt;Development and How to Cite&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install ChainForge locally, or try it out on the web at &lt;strong&gt;&lt;a href=&#34;https://chainforge.ai/play/&#34;&gt;https://chainforge.ai/play/&lt;/a&gt;&lt;/strong&gt;. The web version of ChainForge has a limited feature set. In a locally installed version you can load API keys automatically from environment variables, write Python code to evaluate LLM responses, or query locally-run Alpaca/Llama models hosted via Dalai.&lt;/p&gt; &#xA;&lt;p&gt;To install Chainforge on your machine, make sure you have Python 3.8 or higher, then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install chainforge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once installed, do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chainforge serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:8000/&#34;&gt;localhost:8000&lt;/a&gt; in a Google Chrome, Firefox, Microsoft Edge, or Brave browser.&lt;/p&gt; &#xA;&lt;p&gt;You can set your API keys by clicking the Settings icon in the top-right corner. If you prefer to not worry about this everytime you open ChainForge, we recommend that save your OpenAI, Anthropic, and/or Google PaLM API keys to your local environment. For more details, see the &lt;a href=&#34;https://github.com/ianarawjo/ChainForge/raw/main/INSTALL_GUIDE.md&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Example experiments&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;ve prepared a couple example flows to give you a sense of what&#39;s possible with Chainforge. Click the &#34;Example Flows&#34; button on the top-right corner and select one. Here is a basic comparison example, plotting the length of responses across different models and arguments for the prompt parameter &lt;code&gt;{game}&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;img width=&#34;1593&#34; alt=&#34;basic-compare&#34; src=&#34;https://github.com/ianarawjo/ChainForge/assets/5251713/43c87ab7-aabd-41ba-8d9b-e7e9ebe25c75&#34;&gt; &#xA;&lt;p&gt;You can also conduct &lt;strong&gt;ground truth evaluations&lt;/strong&gt; using Tabular Data nodes. For instance, we can compare each LLM&#39;s ability to answer math problems by comparing each response to the expected answer:&lt;/p&gt; &#xA;&lt;img width=&#34;1775&#34; alt=&#34;Screen Shot 2023-07-04 at 9 21 50 AM&#34; src=&#34;https://github.com/ianarawjo/ChainForge/assets/5251713/6d842f7a-f747-44f9-b317-95bec73653c5&#34;&gt; &#xA;&lt;h1&gt;Compare responses across models and prompts&lt;/h1&gt; &#xA;&lt;p&gt;Compare across models and prompt variables with an interactive response inspector, including a formatted table and exportable data:&lt;/p&gt; &#xA;&lt;img width=&#34;1460&#34; alt=&#34;Screen Shot 2023-07-19 at 5 03 55 PM&#34; src=&#34;https://github.com/ianarawjo/ChainForge/assets/5251713/6aca2bd7-7820-4256-9e8b-3a87795f3e50&#34;&gt; &#xA;&lt;h1&gt;Share with others&lt;/h1&gt; &#xA;&lt;p&gt;The web version of ChainForge (&lt;a href=&#34;https://chainforge.ai/play/&#34;&gt;https://chainforge.ai/play/&lt;/a&gt;) includes a Share button.&lt;/p&gt; &#xA;&lt;p&gt;Simply click Share to generate a unique link for your flow and copy it to your clipboard:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ianarawjo/ChainForge/assets/5251713/1c69900b-5a0f-4055-bbd3-ea191e93ecde&#34; alt=&#34;ezgif-2-a4d8048bba&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For instance, here&#39;s a experiment I made that tries to get an LLM to reveal a secret key: &lt;a href=&#34;https://chainforge.ai/play/?f=28puvwc788bog&#34;&gt;https://chainforge.ai/play/?f=28puvwc788bog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; To prevent abuse, you can only share up to 10 flows at a time, and each flow must be &amp;lt;5MB after compression. If you share more than 10 flows, the oldest link will break, so make sure to always Export important flows to &lt;code&gt;cforge&lt;/code&gt; files, and use Share to only pass data ephemerally.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For finer details about the features of specific nodes, check out the &lt;a href=&#34;https://github.com/ianarawjo/ChainForge/raw/main/GUIDE.md&#34;&gt;Node Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;A key goal of ChainForge is facilitating &lt;strong&gt;comparison&lt;/strong&gt; and &lt;strong&gt;evaluation&lt;/strong&gt; of prompts and models. Basic features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt permutations&lt;/strong&gt;: Setup a prompt template and feed it variations of input variables. ChainForge will prompt all selected LLMs with all possible permutations of the input prompt, so that you can get a better sense of prompt quality. You can also chain prompt templates at arbitrary depth (e.g., to compare templates).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat turns&lt;/strong&gt;: Go beyond prompts and template follow-up chat messages, just like prompts. You can test how the wording of the user&#39;s query might change an LLM&#39;s output, or compare quality of later responses across multiple chat models (or the same chat model with different settings!).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Model settings&lt;/strong&gt;: Change the settings of supported models, and compare across settings. For instance, you can measure the impact of a system message on ChatGPT by adding several ChatGPT models, changing individual settings, and nicknaming each one. ChainForge will send out queries to each version of the model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evaluation nodes&lt;/strong&gt;: Probe LLM responses in a chain and test them (classically) for some desired behavior. At a basic level, this is Python script based. We plan to add preset evaluator nodes for common use cases in the near future (e.g., name-entity recognition). Note that you can also chain LLM responses into prompt templates to help evaluate outputs cheaply before more extensive evaluation methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visualization nodes&lt;/strong&gt;: Visualize evaluation results on plots like grouped box-and-whisker (for numeric metrics) and histograms (for boolean metrics). Currently we only support numeric and boolean metrics. We aim to provide users more control and options for plotting in the future.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Taken together, these features let you easily:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compare across prompts and prompt parameters&lt;/strong&gt;: Choose the best set of prompts that maximizes your eval target metrics (e.g., lowest code error rate). Or, see how changing parameters in a prompt template affects the quality of responses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compare across models&lt;/strong&gt;: Compare responses for every prompt across models and different model settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;ve also found that some users simply want to use ChainForge to make tons of parametrized queries to LLMs (e.g., chaining prompt templates into prompt templates), possibly score them, and then output the results to a spreadsheet (Excel &lt;code&gt;xlsx&lt;/code&gt;). To do this, attach an Inspect node to the output of a Prompt node and click &lt;code&gt;Export Data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more specific details, see the &lt;a href=&#34;https://github.com/ianarawjo/ChainForge/raw/main/GUIDE.md&#34;&gt;Node Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;ChainForge was created by &lt;a href=&#34;http://ianarawjo.com/index.html&#34;&gt;Ian Arawjo&lt;/a&gt;, a postdoctoral scholar in Harvard HCI&#39;s &lt;a href=&#34;http://glassmanlab.seas.harvard.edu/&#34;&gt;Glassman Lab&lt;/a&gt; with support from the Harvard HCI community. Collaborators include PhD students &lt;a href=&#34;https://priyan.info&#34;&gt;Priyan Vaithilingam&lt;/a&gt; and &lt;a href=&#34;https://seas.harvard.edu/person/chelse-swoopes&#34;&gt;Chelse Swoopes&lt;/a&gt; and faculty members &lt;a href=&#34;http://glassmanlab.seas.harvard.edu/glassman.html&#34;&gt;Elena Glassman&lt;/a&gt; and &lt;a href=&#34;https://www.bewitched.com/about.html&#34;&gt;Martin Wattenberg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This work was partially funded by the NSF grant IIS-2107391. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.&lt;/p&gt; &#xA;&lt;p&gt;We provide ongoing releases of this tool in the hopes that others find it useful for their projects.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration and Links&lt;/h2&gt; &#xA;&lt;p&gt;ChainForge is meant to be general-purpose, and is not developed for a specific API or LLM back-end. Our ultimate goal is integration into other tools for the systematic evaluation and auditing of LLMs. We hope to help others who are developing prompt-analysis flows in LLMs, or otherwise auditing LLM outputs. This project was inspired by own our use case, but also shares some comraderie with two related (closed-source) research projects, both led by &lt;a href=&#34;https://www.cs.cmu.edu/~sherryw/&#34;&gt;Sherry Wu&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;PromptChainer: Chaining Large Language Model Prompts through Visual Programming&#34; (Wu et al., CHI ‚Äô22 LBW) &lt;a href=&#34;https://www.youtube.com/watch?v=p6MA8q19uo0&#34;&gt;Video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;AI Chains: Transparent and Controllable Human-AI Interaction by Chaining Large Language Model Prompts&#34; (Wu et al., CHI ‚Äô22)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike these projects, we are focusing on supporting evaluation across prompts, prompt parameters, and models.&lt;/p&gt; &#xA;&lt;h2&gt;How to collaborate?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome open-source collaborators. If you want to report a bug or request a feature, open an &lt;a href=&#34;https://github.com/ianarawjo/ChainForge/issues&#34;&gt;Issue&lt;/a&gt;. We also encourage users to implement the requested feature / bug fix and submit a Pull Request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(If you are an investor or funder, send us a message via email.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Cite Us&lt;/h1&gt; &#xA;&lt;p&gt;If you use ChainForge for research purposes, or build upon the source code, we ask that you cite this project in any related publications. The BibTeX you can use for now is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{Arawjo_2023,&#xA;  author = {Arawjo, Ian and Vaithilingam, Priyan and Swoopes, Chelse and Wattenberg, Martin and Glassman, Elena},&#xA;  title = {ChainForge},&#xA;  year = {2023},&#xA;  howpublished = {\url{https://www.chainforge.ai/}},&#xA;  note = {Accessed: 2023-07-21}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;ChainForge is released under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>diogocapela/flatdraw</title>
    <updated>2023-08-10T01:47:11Z</updated>
    <id>tag:github.com,2023-08-10:/diogocapela/flatdraw</id>
    <link href="https://github.com/diogocapela/flatdraw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple canvas drawing web app with responsive UI. Made with TypeScript, React, and Next.js.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flatdraw&lt;/h1&gt; &#xA;&lt;p&gt;A simple canvas drawing web application with responsive UI. Built using &lt;a href=&#34;https://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;, &lt;a href=&#34;https://react.dev&#34;&gt;React&lt;/a&gt;, and &lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Live demo:&lt;/strong&gt; &lt;a href=&#34;https://flatdraw.com&#34;&gt;flatdraw.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flatdraw.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/diogocapela/flatdraw/main/docs/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt; (the specific version is defined in the &lt;a href=&#34;https://raw.githubusercontent.com/diogocapela/flatdraw/main/.nvmrc&#34;&gt;&lt;code&gt;.nvmrc&lt;/code&gt;&lt;/a&gt; file)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Copy the content of &lt;code&gt;.env.example&lt;/code&gt; to a new &lt;code&gt;.env&lt;/code&gt; file and fill in the required environment variables. You can get your Unsplash API keys &lt;a href=&#34;https://unsplash.com/developers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install all the dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the development server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Open source under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/diogocapela/flatdraw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nativefier/nativefier</title>
    <updated>2023-08-10T01:47:11Z</updated>
    <id>tag:github.com,2023-08-10:/nativefier/nativefier</id>
    <link href="https://github.com/nativefier/nativefier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make any web page a desktop application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nativefier&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/.github/dock-screenshot.png&#34; alt=&#34;Example of Nativefier app in the macOS dock&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You want to make a native-looking wrapper for WhatsApp Web (or any web page).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nativefier &#39;web.whatsapp.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/.github/nativefier-walkthrough.gif&#34; alt=&#34;Walkthrough animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re done.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Nativefier is a command-line tool to easily create a ‚Äúdesktop app‚Äù for any web site with minimal fuss. Apps are wrapped by &lt;a href=&#34;https://www.electronjs.org/&#34;&gt;Electron&lt;/a&gt; (which uses Chromium under the hood) in an OS executable (&lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.exe&lt;/code&gt;, etc) usable on Windows, macOS and Linux.&lt;/p&gt; &#xA;&lt;p&gt;I built this because I grew tired of having to Alt-Tab to my browser and then search through numerous open tabs when using Messenger or Whatsapp Web (&lt;a href=&#34;https://news.ycombinator.com/item?id=10930718&#34;&gt;HN thread&lt;/a&gt;). Nativefier features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically retrieval of app icon / name&lt;/li&gt; &#xA; &lt;li&gt;Injection of custom JS &amp;amp; CSS&lt;/li&gt; &#xA; &lt;li&gt;Many more, see the &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/API.md&#34;&gt;API docs&lt;/a&gt; or &lt;code&gt;nativefier --help&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Nativefier globally with &lt;code&gt;npm install -g nativefier&lt;/code&gt; . Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 10.13+ / Windows / Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; ‚â• 16.9 and npm ‚â• 7.10&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt; or &lt;a href=&#34;http://www.graphicsmagick.org/&#34;&gt;GraphicsMagick&lt;/a&gt; to convert icons. Be sure &lt;code&gt;convert&lt;/code&gt; + &lt;code&gt;identify&lt;/code&gt; or &lt;code&gt;gm&lt;/code&gt; are in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.winehq.org/&#34;&gt;Wine&lt;/a&gt; to build Windows apps from non-Windows platforms. Be sure &lt;code&gt;wine&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Or install with Docker (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pull the image from &lt;a href=&#34;https://hub.docker.com/r/nativefier/nativefier&#34;&gt;Docker Hub&lt;/a&gt;: &lt;code&gt;docker pull nativefier/nativefier&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;... or build it yourself: &lt;code&gt;docker build -t local/nativefier .&lt;/code&gt; (in this case, replace &lt;code&gt;nativefier/&lt;/code&gt; in the below examples with &lt;code&gt;local/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;By default, &lt;code&gt;nativefier --help&lt;/code&gt; will be executed. To build e.g. a Gmail app into &lt;code&gt;~/nativefier-apps&lt;/code&gt;,&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v ~/nativefier-apps:/target/ nativefier/nativefier https://mail.google.com/ /target/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass Nativefier flags, and mount volumes to pass local files. E.g. to use an icon,&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v ~/my-icons-folder/:/src -v $TARGET-PATH:/target nativefier/nativefier --icon /src/icon.png --name whatsApp -p linux -a x64 https://web.whatsapp.com/ /target/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Or install with Snap &amp;amp; AUR (click to expand)&lt;/summary&gt; &#xA; &lt;p&gt;These repos are &lt;em&gt;not&lt;/em&gt; managed by Nativefier maintainers; use at your own risk. If using them, for your security, please inspect the build script.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://snapcraft.io/nativefier&#34;&gt;Snap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/nodejs-nativefier&#34;&gt;AUR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To create an app for medium.com, simply &lt;code&gt;nativefier &#39;medium.com&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nativefier will try to determine the app name, and well as other options that you can override. For example, to override the name, &lt;code&gt;nativefier --name &#39;My Medium App&#39; &#39;medium.com&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/API.md&#34;&gt;API docs&lt;/a&gt; or run &lt;code&gt;nativefier --help&lt;/code&gt;&lt;/strong&gt; to learn about command-line flags and configure your app.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/CATALOG.md&#34;&gt;CATALOG.md&lt;/a&gt; for site-specific ideas &amp;amp; workarounds contributed by the community&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this doesn‚Äôt help, go look at our &lt;a href=&#34;https://github.com/nativefier/nativefier/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Help welcome on &lt;a href=&#34;https://github.com/nativefier/nativefier/issues?q=is%3Aopen+is%3Aissue+label%3Abug&#34;&gt;bugs&lt;/a&gt; and &lt;a href=&#34;https://github.com/nativefier/nativefier/issues?q=is%3Aopen+is%3Aissue+label%3Afeature-request&#34;&gt;feature requests&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Docs: &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/HACKING.md&#34;&gt;Developer / build / hacking&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/API.md&#34;&gt;API / flags&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;License: &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/LICENSE.md&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>