<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-13T01:44:54Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scroll-tech/scroll-contract-deploy-demo</title>
    <updated>2023-03-13T01:44:54Z</updated>
    <id>tag:github.com,2023-03-13:/scroll-tech/scroll-contract-deploy-demo</id>
    <link href="https://github.com/scroll-tech/scroll-contract-deploy-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scroll Contract Deployment Demo&lt;/h1&gt; &#xA;&lt;p&gt;This project demonstrates how to use hardhat or foundry to deploy a contract in Scroll&#39;s rollup network. This project contains a simple contract that will lock a certain amount of Ether in the deployed contract for a specified amount of time.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Network setup: &lt;a href=&#34;https://guide.scroll.io/user-guide/setup&#34;&gt;https://guide.scroll.io/user-guide/setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deploy with Hardhat&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you haven&#39;t already, install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;nodejs&lt;/a&gt; and &lt;a href=&#34;https://classic.yarnpkg.com/lang/en/docs/install&#34;&gt;yarn&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn install&lt;/code&gt; to install dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file following the example &lt;code&gt;.env.example&lt;/code&gt; in the root directory. Change &lt;code&gt;PRIVATE_KEY&lt;/code&gt; to your own account private key in the &lt;code&gt;.env&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn compile&lt;/code&gt; to compile the contract.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn deploy:scrollTestnet&lt;/code&gt; to deploy the contract on the Scroll Alpha Testnet.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn test&lt;/code&gt; for hardhat tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Deploy with Foundry&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Foundry. &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -L https://foundry.paradigm.xyz | bash&#xA;foundryup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build the project. &lt;pre&gt;&lt;code&gt;forge build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Deploy the contract. &lt;pre&gt;&lt;code&gt;forge create --rpc-url https://alpha-rpc.scroll.io/l2 \&#xA;  --value &amp;lt;lock_amount&amp;gt; \&#xA;  --constructor-args &amp;lt;unlock_time&amp;gt; \&#xA;  --private-key &amp;lt;your_private_key&amp;gt; \&#xA;  --legacy \&#xA;  contracts/Lock.sol:Lock&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;lock_amount&amp;gt;&lt;/code&gt; is the amount of &lt;code&gt;ETH&lt;/code&gt; to be locked in the contract. Try setting this to some small amount, like &lt;code&gt;0.0000001ether&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;unlock_time&amp;gt;&lt;/code&gt; is the Unix timestamp after which the funds locked in the contract will become available for withdrawal. Try setting this to some Unix timestamp in the future, like &lt;code&gt;1696118400&lt;/code&gt; (this Unix timestamp corresponds to October 1, 2023).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;forge create --rpc-url https://alpha-rpc.scroll.io/l2 --value 0.00000000002ether --constructor-args 1696118400 --private-key 0xabc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc1 --legacy contracts/Lock.sol:Lock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Join our Discord: &lt;a href=&#34;https://scroll.io/&#34;&gt;https://scroll.io/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vadimdemedes/ink</title>
    <updated>2023-03-13T01:44:54Z</updated>
    <id>tag:github.com,2023-03-13:/vadimdemedes/ink</id>
    <link href="https://github.com/vadimdemedes/ink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåà React for interactive command-line apps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/vshymanskyy/StandWithUkraine/raw/main/docs/README.md&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;img width=&#34;240&#34; alt=&#34;Ink&#34; src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/logo.png&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;React for CLIs. Build and test your CLI output using components.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vadimdemedes/ink/actions&#34;&gt;&lt;img src=&#34;https://github.com/vadimdemedes/ink/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/ink&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/ink?logo=npm&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ink provides the same component-based UI building experience that React offers in the browser, but for command-line apps. It uses &lt;a href=&#34;https://github.com/facebook/yoga&#34;&gt;Yoga&lt;/a&gt; to build Flexbox layouts in the terminal, so most CSS-like props are available in Ink as well. If you are already familiar with React, you already know Ink.&lt;/p&gt; &#xA;&lt;p&gt;Since Ink is a React renderer, it means that all features of React are supported. Head over to &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; website for documentation on how to use it. Only Ink&#39;s methods will be documented in this readme.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is documentation for Ink 4. If you&#39;re looking for docs on Ink 3, check out &lt;a href=&#34;https://github.com/vadimdemedes/ink/tree/v3.2.0&#34;&gt;this release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt; &lt;sup&gt; &lt;a href=&#34;https://opencollective.com/vadimdemedes&#34;&gt;My open source work is supported by the community ‚ù§Ô∏è&lt;/a&gt; &lt;/sup&gt; &lt;/p&gt; &#xA; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://workos.com/?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=ink&amp;amp;utm_source=github&#34;&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://vadimdemedes.com/github/workos.svg?sanitize=true&#34; width=&#34;200&#34; alt=&#34;WorkOS&#34;&gt; &#xA;  &lt;/div&gt; &lt;b&gt;Your app, enterprise-ready.&lt;/b&gt; &#xA;  &lt;div&gt; &#xA;   &lt;sub&gt;Start selling to enterprise customers with just a few lines of code.&lt;/sub&gt; &#xA;   &lt;br&gt; &#xA;   &lt;sup&gt;Add Single Sign-On (and more) in minutes instead of months.&lt;/sup&gt; &#xA;  &lt;/div&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install ink react&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React, {useState, useEffect} from &#39;react&#39;;&#xA;import {render, Text} from &#39;ink&#39;;&#xA;&#xA;const Counter = () =&amp;gt; {&#xA;&#x9;const [counter, setCounter] = useState(0);&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;const timer = setInterval(() =&amp;gt; {&#xA;&#x9;&#x9;&#x9;setCounter(previousCounter =&amp;gt; previousCounter + 1);&#xA;&#x9;&#x9;}, 100);&#xA;&#xA;&#x9;&#x9;return () =&amp;gt; {&#xA;&#x9;&#x9;&#x9;clearInterval(timer);&#xA;&#x9;&#x9;};&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return &amp;lt;Text color=&#34;green&#34;&amp;gt;{counter} tests passed&amp;lt;/Text&amp;gt;;&#xA;};&#xA;&#xA;render(&amp;lt;Counter /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/demo.svg?sanitize=true&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;You can also check it out live on &lt;a href=&#34;https://ink-counter-demo.vadimdemedes.repl.run/&#34;&gt;repl.it sandbox&lt;/a&gt;. Feel free to play around with the code and fork this repl at &lt;a href=&#34;https://repl.it/@vadimdemedes/ink-counter-demo&#34;&gt;https://repl.it/@vadimdemedes/ink-counter-demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s Using Ink?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/wrangler2&#34;&gt;Cloudflare&#39;s Wrangler&lt;/a&gt; - The CLI for Cloudflare Workers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org&#34;&gt;Gatsby&lt;/a&gt; - Gatsby is a modern web framework for blazing fast websites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://node-tap.org&#34;&gt;tap&lt;/a&gt; - A Test-Anything-Protocol library for JavaScript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/terraform-cdk&#34;&gt;Terraform CDK&lt;/a&gt; - CDK (Cloud Development Kit) for HashiCorp Terraform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twilio-labs/plugin-signal2020&#34;&gt;Twilio&#39;s SIGNAL&lt;/a&gt; - CLI for Twilio&#39;s SIGNAL conference. &lt;a href=&#34;https://www.twilio.com/blog/building-conference-cli-in-react&#34;&gt;Blog post&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segmentio/typewriter&#34;&gt;Typewriter&lt;/a&gt; - Generates strongly-typed &lt;a href=&#34;https://segment.com&#34;&gt;Segment&lt;/a&gt; analytics clients from arbitrary JSON Schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.prisma.io&#34;&gt;Prisma&lt;/a&gt; - The unified data layer for modern applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.projectwallace.com&#34;&gt;Wallace&lt;/a&gt; - Pretty CSS analytics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blitzjs.com&#34;&gt;Blitz&lt;/a&gt; - The Fullstack React Framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nytimes/kyt&#34;&gt;New York Times&lt;/a&gt; - NYT uses Ink &lt;code&gt;kyt&lt;/code&gt; - a toolkit that encapsulates and manages the configuration for web apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/npm/tink&#34;&gt;tink&lt;/a&gt; - Next-generation runtime and package manager.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrr/inkle&#34;&gt;Inkle&lt;/a&gt; - Wordle game.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oblador/loki&#34;&gt;loki&lt;/a&gt; - Visual regression testing for Storybook.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teambit/bit&#34;&gt;Bit&lt;/a&gt; - Build, distribute and collaborate on components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remirror/remirror&#34;&gt;Remirror&lt;/a&gt; - Your friendly, world-class editor toolkit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/birkir/prime&#34;&gt;Prime&lt;/a&gt; - Open source GraphQL CMS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/polaris-react/tree/master/scripts/splash&#34;&gt;Splash&lt;/a&gt; - Observe the splash zone of a change across the Shopify&#39;s &lt;a href=&#34;https://polaris.shopify.com&#34;&gt;Polaris&lt;/a&gt; component library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/emoj&#34;&gt;emoj&lt;/a&gt; - Find relevant emojis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maticzav/emma-cli&#34;&gt;emma&lt;/a&gt; - Find and install npm packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simple-integrated-marketing/swiff&#34;&gt;swiff&lt;/a&gt; - Multi-environment command line tools for time-saving web developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marionebl/share-cli&#34;&gt;share&lt;/a&gt; - Quickly share files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ameerthehacker/kubelive&#34;&gt;Kubelive&lt;/a&gt; - CLI for Kubernetes to provide live data about the cluster and its resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdeniau/changelog-view&#34;&gt;changelog-view&lt;/a&gt; - View changelogs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mamachanko/cfpush&#34;&gt;cfpush&lt;/a&gt; - An interactive Cloud Foundry tutorial.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mgrip/startd&#34;&gt;startd&lt;/a&gt; - Turn your React component into a web app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hexrcs/wiki-cli&#34;&gt;wiki-cli&lt;/a&gt; - Search Wikipedia and read summaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goliney/garson&#34;&gt;garson&lt;/a&gt; - Build interactive config-based command-line interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/giannisp/git-contrib-calendar&#34;&gt;git-contrib-calendar&lt;/a&gt; - Display a contributions calendar for any git repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitGud-org/GitGud&#34;&gt;gitgud&lt;/a&gt; - An interactive command-line GUI for Git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pranshuchittora/autarky&#34;&gt;Autarky&lt;/a&gt; - Find and delete old &lt;code&gt;node_modules&lt;/code&gt; directories in order to free up disk space.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/fast-cli&#34;&gt;fast-cli&lt;/a&gt; - Test your download and upload speed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/privatenumber/tasuku&#34;&gt;tasuku&lt;/a&gt; - Minimal task runner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mordv/mnswpr&#34;&gt;mnswpr&lt;/a&gt; - Minesweeper game.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krychu/lrn&#34;&gt;lrn&lt;/a&gt; - Learning by repetition.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mynameisankit/turdle&#34;&gt;turdle&lt;/a&gt; - Wordle game.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/cli&#34;&gt;Shopify CLI&lt;/a&gt; - Build apps, themes, and storefronts for Shopify.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.todesktop.com/electron&#34;&gt;ToDesktop CLI&lt;/a&gt; - An all-in-one platform for building Electron apps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#components&#34;&gt;Components&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#text&#34;&gt;&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#box&#34;&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#newline&#34;&gt;&lt;code&gt;&amp;lt;Newline&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#spacer&#34;&gt;&lt;code&gt;&amp;lt;Spacer&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#static&#34;&gt;&lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#transform&#34;&gt;&lt;code&gt;&amp;lt;Transform&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#hooks&#34;&gt;Hooks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#useinputinputhandler-options&#34;&gt;&lt;code&gt;useInput&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#useapp&#34;&gt;&lt;code&gt;useApp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#usestdin&#34;&gt;&lt;code&gt;useStdin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#usestdout&#34;&gt;&lt;code&gt;useStdout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#usestderr&#34;&gt;&lt;code&gt;useStderr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#usefocusoptions&#34;&gt;&lt;code&gt;useFocus&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#usefocusmanager&#34;&gt;&lt;code&gt;useFocusManager&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#using-react-devtools&#34;&gt;Using React Devtools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#useful-components&#34;&gt;Useful Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#useful-hooks&#34;&gt;Useful Hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/vadimdemedes/create-ink-app&#34;&gt;create-ink-app&lt;/a&gt; to quickly scaffold a new Ink-based CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-ink-app my-ink-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, create a TypeScript project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-ink-app --typescript my-ink-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Manual setup&lt;/summary&gt; &#xA; &lt;p&gt; Ink requires the same Babel setup as you would do for regular React-based apps in the browser. &lt;/p&gt;&#xA; &lt;p&gt;Set up Babel with a React preset to ensure all examples in this readme work as expected. After &lt;a href=&#34;https://babeljs.io/docs/en/usage&#34;&gt;installing Babel&lt;/a&gt;, install &lt;code&gt;@babel/preset-react&lt;/code&gt; and insert the following configuration in &lt;code&gt;babel.config.json&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save-dev @babel/preset-react&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;presets&#34;: [&#xA;&#x9;&#x9;&#34;@babel/preset-react&#34;,&#xA;&#x9;&#x9;[&#xA;&#x9;&#x9;&#x9;&#34;@babel/preset-env&#34;,&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;targets&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;node&#34;: true&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;]&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Next, create a file &lt;code&gt;source.js&lt;/code&gt;, where you&#39;ll type code that uses Ink:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;&#xA;import {render, Text} from &#39;ink&#39;;&#xA;&#xA;const Demo = () =&amp;gt; &amp;lt;Text&amp;gt;Hello World&amp;lt;/Text&amp;gt;;&#xA;&#xA;render(&amp;lt;Demo /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then, transpile this file with Babel:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx babel source.js -o cli.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now you can run &lt;code&gt;cli.js&lt;/code&gt; with Node.js:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;node cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you don&#39;t like transpiling files during development, you can use &lt;a href=&#34;https://github.com/vadimdemedes/import-jsx&#34;&gt;import-jsx&lt;/a&gt; or &lt;a href=&#34;https://github.com/esbuild-kit/esm-loader&#34;&gt;@esbuild-kit/esm-loader&lt;/a&gt; to &lt;code&gt;import&lt;/code&gt; a JSX file and transpile it on the fly.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Ink uses &lt;a href=&#34;https://github.com/facebook/yoga&#34;&gt;Yoga&lt;/a&gt; - a Flexbox layout engine to build great user interfaces for your CLIs using familiar CSS-like props you&#39;ve used when building apps for the browser. It&#39;s important to remember that each element is a Flexbox container. Think of it as if each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the browser had &lt;code&gt;display: flex&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#box&#34;&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;&lt;/a&gt; built-in component below for documentation on how to use Flexbox layouts in Ink. Note that all text must be wrapped in a &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#text&#34;&gt;&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;&lt;/a&gt; component.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This component can display text, and change its style to make it bold, underline, italic or strikethrough.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, Text} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; (&#xA;&#x9;&amp;lt;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text color=&#34;green&#34;&amp;gt;I am green&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text color=&#34;black&#34; backgroundColor=&#34;white&#34;&amp;gt;&#xA;&#x9;&#x9;&#x9;I am black on white&#xA;&#x9;&#x9;&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text color=&#34;#ffffff&#34;&amp;gt;I am white&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text bold&amp;gt;I am bold&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text italic&amp;gt;I am italic&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text underline&amp;gt;I am underline&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text strikethrough&amp;gt;I am strikethrough&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text inverse&amp;gt;I am inversed&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/&amp;gt;&#xA;);&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; allows only text nodes and nested &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; components inside of it. For example, &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; component can&#39;t be used inside &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;color&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change text color. Ink uses &lt;a href=&#34;https://github.com/chalk/chalk&#34;&gt;chalk&lt;/a&gt; under the hood, so all its functionality is supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Text color=&#34;green&#34;&amp;gt;Green&amp;lt;/Text&amp;gt;&#xA;&amp;lt;Text color=&#34;#005cc5&#34;&amp;gt;Blue&amp;lt;/Text&amp;gt;&#xA;&amp;lt;Text color=&#34;rgb(232, 131, 136)&#34;&amp;gt;Red&amp;lt;/Text&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/text-color.jpg&#34; width=&#34;247&#34;&gt; &#xA;&lt;h4&gt;backgroundColor&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;color&lt;/code&gt; above, but for background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Text backgroundColor=&#34;green&#34; color=&#34;white&#34;&amp;gt;Green&amp;lt;/Text&amp;gt;&#xA;&amp;lt;Text backgroundColor=&#34;#005cc5&#34; color=&#34;white&#34;&amp;gt;Blue&amp;lt;/Text&amp;gt;&#xA;&amp;lt;Text backgroundColor=&#34;rgb(232, 131, 136)&#34; color=&#34;white&#34;&amp;gt;Red&amp;lt;/Text&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/text-backgroundColor.jpg&#34; width=&#34;226&#34;&gt; &#xA;&lt;h4&gt;dimColor&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dim the color (emit a small amount of light).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Text color=&#34;red&#34; dimColor&amp;gt;&#xA;&#x9;Dimmed Red&#xA;&amp;lt;/Text&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/text-dimColor.jpg&#34; width=&#34;138&#34;&gt; &#xA;&lt;h4&gt;bold&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make the text bold.&lt;/p&gt; &#xA;&lt;h4&gt;italic&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make the text italic.&lt;/p&gt; &#xA;&lt;h4&gt;underline&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make the text underlined.&lt;/p&gt; &#xA;&lt;h4&gt;strikethrough&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make the text crossed with a line.&lt;/p&gt; &#xA;&lt;h4&gt;inverse&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inverse background and foreground colors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Text inverse color=&#34;yellow&#34;&amp;gt;&#xA;&#x9;Inversed Yellow&#xA;&amp;lt;/Text&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/text-inverse.jpg&#34; width=&#34;138&#34;&gt; &#xA;&lt;h4&gt;wrap&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;wrap&lt;/code&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;code&gt;truncate-start&lt;/code&gt; &lt;code&gt;truncate-middle&lt;/code&gt; &lt;code&gt;truncate-end&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;wrap&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This property tells Ink to wrap or truncate text if its width is larger than container. If &lt;code&gt;wrap&lt;/code&gt; is passed (by default), Ink will wrap text and split it into multiple lines. If &lt;code&gt;truncate-*&lt;/code&gt; is passed, Ink will truncate text instead, which will result in one line of text with the rest cut off.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box width={7}&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Hello World&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;Hello\nWorld&#39;&#xA;&#xA;// `truncate` is an alias to `truncate-end`&#xA;&amp;lt;Box width={7}&amp;gt;&#xA;&#x9;&amp;lt;Text wrap=&#34;truncate&#34;&amp;gt;Hello World&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;Hello‚Ä¶&#39;&#xA;&#xA;&amp;lt;Box width={7}&amp;gt;&#xA;&#x9;&amp;lt;Text wrap=&#34;truncate-middle&#34;&amp;gt;Hello World&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;He‚Ä¶ld&#39;&#xA;&#xA;&amp;lt;Box width={7}&amp;gt;&#xA;&#x9;&amp;lt;Text wrap=&#34;truncate-start&#34;&amp;gt;Hello World&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;‚Ä¶World&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; is an essential Ink component to build your layout. It&#39;s like &lt;code&gt;&amp;lt;div style=&#34;display: flex&#34;&amp;gt;&lt;/code&gt; in the browser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, Box, Text} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; (&#xA;&#x9;&amp;lt;Box margin={2}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;This is a box with margin&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;);&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dimensions&lt;/h4&gt; &#xA;&lt;h5&gt;width&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Width of the element in spaces. You can also set it in percent, which will calculate the width based on the width of parent element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box width={4}&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;X   &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box width={10}&amp;gt;&#xA;&#x9;&amp;lt;Box width=&#34;50%&#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;X    Y&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;height&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Height of the element in lines (rows). You can also set it in percent, which will calculate the height based on the height of parent element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box height={4}&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;X\n\n\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box height={6} flexDirection=&#34;column&#34;&amp;gt;&#xA;&#x9;&amp;lt;Box height=&#34;50%&#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;X\n\n\nY\n\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;minWidth&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets a minimum width of the element. Percentages aren&#39;t supported yet, see &lt;a href=&#34;https://github.com/facebook/yoga/issues/872&#34;&gt;https://github.com/facebook/yoga/issues/872&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;minHeight&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets a minimum height of the element. Percentages aren&#39;t supported yet, see &lt;a href=&#34;https://github.com/facebook/yoga/issues/872&#34;&gt;https://github.com/facebook/yoga/issues/872&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Padding&lt;/h4&gt; &#xA;&lt;h5&gt;paddingTop&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Top padding.&lt;/p&gt; &#xA;&lt;h5&gt;paddingBottom&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bottom padding.&lt;/p&gt; &#xA;&lt;h5&gt;paddingLeft&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left padding.&lt;/p&gt; &#xA;&lt;h5&gt;paddingRight&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Right padding.&lt;/p&gt; &#xA;&lt;h5&gt;paddingX&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Horizontal padding. Equivalent to setting &lt;code&gt;paddingLeft&lt;/code&gt; and &lt;code&gt;paddingRight&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;paddingY&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vertical padding. Equivalent to setting &lt;code&gt;paddingTop&lt;/code&gt; and &lt;code&gt;paddingBottom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;padding&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Padding on all sides. Equivalent to setting &lt;code&gt;paddingTop&lt;/code&gt;, &lt;code&gt;paddingBottom&lt;/code&gt;, &lt;code&gt;paddingLeft&lt;/code&gt; and &lt;code&gt;paddingRight&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box paddingTop={2}&amp;gt;Top&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box paddingBottom={2}&amp;gt;Bottom&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box paddingLeft={2}&amp;gt;Left&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box paddingRight={2}&amp;gt;Right&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box paddingX={2}&amp;gt;Left and right&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box paddingY={2}&amp;gt;Top and bottom&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box padding={2}&amp;gt;Top, bottom, left and right&amp;lt;/Box&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Margin&lt;/h4&gt; &#xA;&lt;h5&gt;marginTop&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Top margin.&lt;/p&gt; &#xA;&lt;h5&gt;marginBottom&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bottom margin.&lt;/p&gt; &#xA;&lt;h5&gt;marginLeft&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left margin.&lt;/p&gt; &#xA;&lt;h5&gt;marginRight&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Right margin.&lt;/p&gt; &#xA;&lt;h5&gt;marginX&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Horizontal margin. Equivalent to setting &lt;code&gt;marginLeft&lt;/code&gt; and &lt;code&gt;marginRight&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;marginY&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vertical margin. Equivalent to setting &lt;code&gt;marginTop&lt;/code&gt; and &lt;code&gt;marginBottom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;margin&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Margin on all sides. Equivalent to setting &lt;code&gt;marginTop&lt;/code&gt;, &lt;code&gt;marginBottom&lt;/code&gt;, &lt;code&gt;marginLeft&lt;/code&gt; and &lt;code&gt;marginRight&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box marginTop={2}&amp;gt;Top&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box marginBottom={2}&amp;gt;Bottom&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box marginLeft={2}&amp;gt;Left&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box marginRight={2}&amp;gt;Right&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box marginX={2}&amp;gt;Left and right&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box marginY={2}&amp;gt;Top and bottom&amp;lt;/Box&amp;gt;&#xA;&amp;lt;Box margin={2}&amp;gt;Top, bottom, left and right&amp;lt;/Box&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Flex&lt;/h4&gt; &#xA;&lt;h5&gt;flexGrow&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-grow/&#34;&gt;flex-grow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Label:&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;Box flexGrow={1}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Fills all remaining space&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;flexShrink&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-shrink/&#34;&gt;flex-shrink&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box width={20}&amp;gt;&#xA;&#x9;&amp;lt;Box flexShrink={2} width={10}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Will be 1/4&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Box width={10}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Will be 3/4&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;flexBasis&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-basis/&#34;&gt;flex-basis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box width={6}&amp;gt;&#xA;&#x9;&amp;lt;Box flexBasis={3}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;X  Y&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box width={6}&amp;gt;&#xA;&#x9;&amp;lt;Box flexBasis=&#34;50%&#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//=&amp;gt; &#39;X  Y&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;flexDirection&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;row&lt;/code&gt; &lt;code&gt;row-reverse&lt;/code&gt; &lt;code&gt;column&lt;/code&gt; &lt;code&gt;column-reverse&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-direction/&#34;&gt;flex-direction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box&amp;gt;&#xA;&#x9;&amp;lt;Box marginRight={1}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// X Y&#xA;&#xA;&amp;lt;Box flexDirection=&#34;row-reverse&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;Box marginRight={1}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// Y X&#xA;&#xA;&amp;lt;Box flexDirection=&#34;column&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// X&#xA;// Y&#xA;&#xA;&amp;lt;Box flexDirection=&#34;column-reverse&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// Y&#xA;// X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;alignItems&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;flex-start&lt;/code&gt; &lt;code&gt;center&lt;/code&gt; &lt;code&gt;flex-end&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/a/align-items/&#34;&gt;align-items&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box alignItems=&#34;flex-start&#34;&amp;gt;&#xA;&#x9;&amp;lt;Box marginRight={1}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;&#xA;&#x9;&#x9;A&#xA;&#x9;&#x9;&amp;lt;Newline/&amp;gt;&#xA;&#x9;&#x9;B&#xA;&#x9;&#x9;&amp;lt;Newline/&amp;gt;&#xA;&#x9;&#x9;C&#xA;&#x9;&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// X A&#xA;//   B&#xA;//   C&#xA;&#xA;&amp;lt;Box alignItems=&#34;center&#34;&amp;gt;&#xA;&#x9;&amp;lt;Box marginRight={1}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;&#xA;&#x9;&#x9;A&#xA;&#x9;&#x9;&amp;lt;Newline/&amp;gt;&#xA;&#x9;&#x9;B&#xA;&#x9;&#x9;&amp;lt;Newline/&amp;gt;&#xA;&#x9;&#x9;C&#xA;&#x9;&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//   A&#xA;// X B&#xA;//   C&#xA;&#xA;&amp;lt;Box alignItems=&#34;flex-end&#34;&amp;gt;&#xA;&#x9;&amp;lt;Box marginRight={1}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;&#xA;&#x9;&#x9;A&#xA;&#x9;&#x9;&amp;lt;Newline/&amp;gt;&#xA;&#x9;&#x9;B&#xA;&#x9;&#x9;&amp;lt;Newline/&amp;gt;&#xA;&#x9;&#x9;C&#xA;&#x9;&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//   A&#xA;//   B&#xA;// X C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;alignSelf&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;auto&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;auto&lt;/code&gt; &lt;code&gt;flex-start&lt;/code&gt; &lt;code&gt;center&lt;/code&gt; &lt;code&gt;flex-end&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/a/align-self/&#34;&gt;align-self&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box height={3}&amp;gt;&#xA;&#x9;&amp;lt;Box alignSelf=&#34;flex-start&#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// X&#xA;//&#xA;//&#xA;&#xA;&amp;lt;Box height={3}&amp;gt;&#xA;&#x9;&amp;lt;Box alignSelf=&#34;center&#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//&#xA;// X&#xA;//&#xA;&#xA;&amp;lt;Box height={3}&amp;gt;&#xA;&#x9;&amp;lt;Box alignSelf=&#34;flex-end&#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;//&#xA;//&#xA;// X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;justifyContent&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;flex-start&lt;/code&gt; &lt;code&gt;center&lt;/code&gt; &lt;code&gt;flex-end&lt;/code&gt; &lt;code&gt;space-between&lt;/code&gt; &lt;code&gt;space-around&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/j/justify-content/&#34;&gt;justify-content&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box justifyContent=&#34;flex-start&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// [X      ]&#xA;&#xA;&amp;lt;Box justifyContent=&#34;center&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// [   X   ]&#xA;&#xA;&amp;lt;Box justifyContent=&#34;flex-end&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// [      X]&#xA;&#xA;&amp;lt;Box justifyContent=&#34;space-between&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// [X      Y]&#xA;&#xA;&amp;lt;Box justifyContent=&#34;space-around&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;X&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Y&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;// [  X   Y  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Visibility&lt;/h4&gt; &#xA;&lt;h5&gt;display&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;flex&lt;/code&gt; &lt;code&gt;none&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;flex&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set this property to &lt;code&gt;none&lt;/code&gt; to hide the element.&lt;/p&gt; &#xA;&lt;h5&gt;overflowX&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;visible&lt;/code&gt; &lt;code&gt;hidden&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;visible&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Behavior for an element&#39;s overflow in horizontal direction.&lt;/p&gt; &#xA;&lt;h5&gt;overflowY&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;visible&lt;/code&gt; &lt;code&gt;hidden&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;visible&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Behavior for an element&#39;s overflow in vertical direction.&lt;/p&gt; &#xA;&lt;h5&gt;overflow&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;visible&lt;/code&gt; &lt;code&gt;hidden&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;visible&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shortcut for setting &lt;code&gt;overflowX&lt;/code&gt; and &lt;code&gt;overflowY&lt;/code&gt; at the same time.&lt;/p&gt; &#xA;&lt;h4&gt;Borders&lt;/h4&gt; &#xA;&lt;h5&gt;borderStyle&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;single&lt;/code&gt; &lt;code&gt;double&lt;/code&gt; &lt;code&gt;round&lt;/code&gt; &lt;code&gt;bold&lt;/code&gt; &lt;code&gt;singleDouble&lt;/code&gt; &lt;code&gt;doubleSingle&lt;/code&gt; &lt;code&gt;classic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add a border with a specified style. If &lt;code&gt;borderStyle&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; (which it is by default), no border will be added. Ink uses border styles from &lt;a href=&#34;https://github.com/sindresorhus/cli-boxes&#34;&gt;&lt;code&gt;cli-boxes&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box flexDirection=&#34;column&#34;&amp;gt;&#xA;&#x9;&amp;lt;Box&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Box borderStyle=&#34;single&#34; marginRight={2}&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;single&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#xA;&#x9;&#x9;&amp;lt;Box borderStyle=&#34;double&#34; marginRight={2}&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;double&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#xA;&#x9;&#x9;&amp;lt;Box borderStyle=&#34;round&#34; marginRight={2}&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;round&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#xA;&#x9;&#x9;&amp;lt;Box borderStyle=&#34;bold&#34;&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;bold&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#xA;&#x9;&amp;lt;Box marginTop={1}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Box borderStyle=&#34;singleDouble&#34; marginRight={2}&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;singleDouble&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#xA;&#x9;&#x9;&amp;lt;Box borderStyle=&#34;doubleSingle&#34; marginRight={2}&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;doubleSingle&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#xA;&#x9;&#x9;&amp;lt;Box borderStyle=&#34;classic&#34;&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;classic&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/box-borderStyle.jpg&#34; width=&#34;521&#34;&gt; &#xA;&lt;p&gt;See example in &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/borders/borders.js&#34;&gt;examples/borders&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;borderColor&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change border color. Accepts the same values as &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#color&#34;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Box borderStyle=&#34;round&#34; borderColor=&#34;green&#34;&amp;gt;&#xA;&#x9;&amp;lt;Text&amp;gt;Green Rounded Box&amp;lt;/Text&amp;gt;&#xA;&amp;lt;/Box&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/box-borderColor.jpg&#34; width=&#34;228&#34;&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;Newline&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Adds one or more newline (&lt;code&gt;\n&lt;/code&gt;) characters. Must be used within &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; components.&lt;/p&gt; &#xA;&lt;h4&gt;count&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Number of newlines to insert.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, Text, Newline} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; (&#xA;&#x9;&amp;lt;Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text color=&#34;green&#34;&amp;gt;Hello&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Newline /&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text color=&#34;red&#34;&amp;gt;World&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Text&amp;gt;&#xA;);&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hello&#xA;World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;Spacer&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A flexible space that expands along the major axis of its containing layout. It&#39;s useful as a shortcut for filling all the available spaces between elements.&lt;/p&gt; &#xA;&lt;p&gt;For example, using &lt;code&gt;&amp;lt;Spacer&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; with default flex direction (&lt;code&gt;row&lt;/code&gt;) will position &#34;Left&#34; on the left side and will push &#34;Right&#34; to the right side.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, Box, Text, Spacer} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; (&#xA;&#x9;&amp;lt;Box&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Left&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Spacer /&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Right&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;);&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a vertical flex direction (&lt;code&gt;column&lt;/code&gt;), it will position &#34;Top&#34; to the top of the container and push &#34;Bottom&#34; to the bottom of it. Note, that container needs to be tall to enough to see this in effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, Box, Text, Spacer} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; (&#xA;&#x9;&amp;lt;Box flexDirection=&#34;column&#34; height={10}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Top&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Spacer /&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Bottom&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Box&amp;gt;&#xA;);&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt; component permanently renders its output above everything else. It&#39;s useful for displaying activity like completed tasks or logs - things that are not changing after they&#39;re rendered (hence the name &#34;Static&#34;).&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s preferred to use &lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt; for use cases like these, when you can&#39;t know or control the amount of items that need to be rendered.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;a href=&#34;https://github.com/tapjs/node-tap&#34;&gt;Tap&lt;/a&gt; uses &lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt; to display a list of completed tests. &lt;a href=&#34;https://github.com/gatsbyjs/gatsby&#34;&gt;Gatsby&lt;/a&gt; uses it to display a list of generated pages, while still displaying a live progress bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React, {useState, useEffect} from &#39;react&#39;;&#xA;import {render, Static, Box, Text} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const [tests, setTests] = useState([]);&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;let completedTests = 0;&#xA;&#x9;&#x9;let timer;&#xA;&#xA;&#x9;&#x9;const run = () =&amp;gt; {&#xA;&#x9;&#x9;&#x9;// Fake 10 completed tests&#xA;&#x9;&#x9;&#x9;if (completedTests++ &amp;lt; 10) {&#xA;&#x9;&#x9;&#x9;&#x9;setTests(previousTests =&amp;gt; [&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;...previousTests,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;id: previousTests.length,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;title: `Test #${previousTests.length + 1}`&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;]);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;setTimeout(run, 100);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;};&#xA;&#xA;&#x9;&#x9;run();&#xA;&#xA;&#x9;&#x9;return () =&amp;gt; {&#xA;&#x9;&#x9;&#x9;clearTimeout(timer);&#xA;&#x9;&#x9;};&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return (&#xA;&#x9;&#x9;&amp;lt;&amp;gt;&#xA;&#x9;&#x9;&#x9;{/* This part will be rendered once to the terminal */}&#xA;&#x9;&#x9;&#x9;&amp;lt;Static items={tests}&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;{test =&amp;gt; (&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;lt;Box key={test.id}&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;lt;Text color=&#34;green&#34;&amp;gt;‚úî {test.title}&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;)}&#xA;&#x9;&#x9;&#x9;&amp;lt;/Static&amp;gt;&#xA;&#xA;&#x9;&#x9;&#x9;{/* This part keeps updating as state changes */}&#xA;&#x9;&#x9;&#x9;&amp;lt;Box marginTop={1}&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;lt;Text dimColor&amp;gt;Completed tests: {tests.length}&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/&amp;gt;&#xA;&#x9;);&#xA;};&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt; only renders new items in &lt;code&gt;items&lt;/code&gt; prop and ignores items that were previously rendered. This means that when you add new items to &lt;code&gt;items&lt;/code&gt; array, changes you make to previous items will not trigger a rerender.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/static/static.js&#34;&gt;examples/static&lt;/a&gt; for an example usage of &lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;h4&gt;items&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;Array&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Array of items of any type to render using a function you pass as a component child.&lt;/p&gt; &#xA;&lt;h4&gt;style&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;object&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Styles to apply to a container of child elements. See &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#box&#34;&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;&lt;/a&gt; for supported properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Static items={...} style={{padding: 1}}&amp;gt;&#xA;&#x9;{...}&#xA;&amp;lt;/Static&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;children(item)&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Function that is called to render every item in &lt;code&gt;items&lt;/code&gt; array. First argument is an item itself and second argument is index of that item in &lt;code&gt;items&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;key&lt;/code&gt; must be assigned to the root component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Static items={[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]}&amp;gt;&#xA;&#x9;{(item, index) =&amp;gt; {&#xA;&#x9;&#x9;// This function is called for every item in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&#xA;&#x9;&#x9;// `item` is &#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#xA;&#x9;&#x9;// `index` is 0, 1, 2&#xA;&#x9;&#x9;return (&#xA;&#x9;&#x9;&#x9;&amp;lt;Box key={index}&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;Item: {item}&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&#x9;);&#xA;&#x9;}}&#xA;&amp;lt;/Static&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;Transform&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Transform a string representation of React components before they are written to output. For example, you might want to apply a &lt;a href=&#34;https://github.com/sindresorhus/ink-gradient&#34;&gt;gradient to text&lt;/a&gt;, &lt;a href=&#34;https://github.com/sindresorhus/ink-link&#34;&gt;add a clickable link&lt;/a&gt; or &lt;a href=&#34;https://github.com/sindresorhus/ink-big-text&#34;&gt;create some text effects&lt;/a&gt;. These use cases can&#39;t accept React nodes as input, they are expecting a string. That&#39;s what &lt;code&gt;&amp;lt;Transform&amp;gt;&lt;/code&gt; component does, it gives you an output string of its child components and lets you transform it in any way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;&amp;lt;Transform&amp;gt;&lt;/code&gt; must be applied only to &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; children components and shouldn&#39;t change the dimensions of the output, otherwise layout will be incorrect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, Transform} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; (&#xA;&#x9;&amp;lt;Transform transform={output =&amp;gt; output.toUpperCase()}&amp;gt;&#xA;&#x9;&#x9;&amp;lt;Text&amp;gt;Hello World&amp;lt;/Text&amp;gt;&#xA;&#x9;&amp;lt;/Transform&amp;gt;&#xA;);&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;transform&lt;/code&gt; function converts all characters to upper case, final output that&#39;s rendered to the terminal will be &#34;HELLO WORLD&#34;, not &#34;Hello World&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;transform(children)&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Function which transforms children output. It accepts children and must return transformed children too.&lt;/p&gt; &#xA;&lt;h5&gt;children&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output of child components.&lt;/p&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;h3&gt;useInput(inputHandler, options?)&lt;/h3&gt; &#xA;&lt;p&gt;This hook is used for handling user input. It&#39;s a more convenient alternative to using &lt;code&gt;useStdin&lt;/code&gt; and listening to &lt;code&gt;data&lt;/code&gt; events. The callback you pass to &lt;code&gt;useInput&lt;/code&gt; is called for each character when user enters any input. However, if user pastes text and it&#39;s more than one character, the callback will be called only once and the whole string will be passed as &lt;code&gt;input&lt;/code&gt;. You can find a full example of using &lt;code&gt;useInput&lt;/code&gt; at &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-input/use-input.js&#34;&gt;examples/use-input&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {useInput} from &#39;ink&#39;;&#xA;&#xA;const UserInput = () =&amp;gt; {&#xA;&#x9;useInput((input, key) =&amp;gt; {&#xA;&#x9;&#x9;if (input === &#39;q&#39;) {&#xA;&#x9;&#x9;&#x9;// Exit program&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (key.leftArrow) {&#xA;&#x9;&#x9;&#x9;// Left arrow key pressed&#xA;&#x9;&#x9;}&#xA;&#x9;});&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;inputHandler(input, key)&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The handler function that you pass to &lt;code&gt;useInput&lt;/code&gt; receives two arguments:&lt;/p&gt; &#xA;&lt;h5&gt;input&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The input that the program received.&lt;/p&gt; &#xA;&lt;h5&gt;key&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;object&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Handy information about a key that was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.leftArrow&lt;/h6&gt; &#xA;&lt;h6&gt;key.rightArrow&lt;/h6&gt; &#xA;&lt;h6&gt;key.upArrow&lt;/h6&gt; &#xA;&lt;h6&gt;key.downArrow&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If an arrow key was pressed, the corresponding property will be &lt;code&gt;true&lt;/code&gt;. For example, if user presses left arrow key, &lt;code&gt;key.leftArrow&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h6&gt;key.return&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Return (Enter) key was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.escape&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Escape key was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.ctrl&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ctrl key was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.shift&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shift key was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.tab&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tab key was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.backspace&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Backspace key was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.delete&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delete key was pressed.&lt;/p&gt; &#xA;&lt;h6&gt;key.pageDown&lt;/h6&gt; &#xA;&lt;h6&gt;key.pageUp&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If Page Up or Page Down key was pressed, the corresponding property will be &lt;code&gt;true&lt;/code&gt;. For example, if user presses Page Down, &lt;code&gt;key.pageDown&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h6&gt;key.meta&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Meta_key&#34;&gt;Meta key&lt;/a&gt; was pressed.&lt;/p&gt; &#xA;&lt;h4&gt;options&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;object&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;isActive&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enable or disable capturing of user input. Useful when there are multiple &lt;code&gt;useInput&lt;/code&gt; hooks used at once to avoid handling the same input several times.&lt;/p&gt; &#xA;&lt;h3&gt;useApp()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;useApp&lt;/code&gt; is a React hook, which exposes a method to manually exit the app (unmount).&lt;/p&gt; &#xA;&lt;h4&gt;exit(error?)&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exit (unmount) the whole Ink app.&lt;/p&gt; &#xA;&lt;h5&gt;error&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;Error&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Optional error. If passed, &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/waituntilexit&#34;&gt;&lt;code&gt;waitUntilExit&lt;/code&gt;&lt;/a&gt; will reject with that error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useApp} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {exit} = useApp();&#xA;&#xA;&#x9;// Exit the app after 5 seconds&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;setTimeout(() =&amp;gt; {&#xA;&#x9;&#x9;&#x9;exit();&#xA;&#x9;&#x9;}, 5000);&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;useStdin()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;useStdin&lt;/code&gt; is a React hook, which exposes stdin stream.&lt;/p&gt; &#xA;&lt;h4&gt;stdin&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;stream.Readable&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.stdin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stdin stream passed to &lt;code&gt;render()&lt;/code&gt; in &lt;code&gt;options.stdin&lt;/code&gt; or &lt;code&gt;process.stdin&lt;/code&gt; by default. Useful if your app needs to handle user input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useStdin} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {stdin} = useStdin();&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;isRawModeSupported&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A boolean flag determining if the current &lt;code&gt;stdin&lt;/code&gt; supports &lt;code&gt;setRawMode&lt;/code&gt;. A component using &lt;code&gt;setRawMode&lt;/code&gt; might want to use &lt;code&gt;isRawModeSupported&lt;/code&gt; to nicely fall back in environments where raw mode is not supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {useStdin} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {isRawModeSupported} = useStdin();&#xA;&#xA;&#x9;return isRawModeSupported ? (&#xA;&#x9;&#x9;&amp;lt;MyInputComponent /&amp;gt;&#xA;&#x9;) : (&#xA;&#x9;&#x9;&amp;lt;MyComponentThatDoesntUseInput /&amp;gt;&#xA;&#x9;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;setRawMode(isRawModeEnabled)&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;isRawModeEnabled&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nodejs.org/api/tty.html#tty_readstream_setrawmode_mode&#34;&gt;&lt;code&gt;setRawMode&lt;/code&gt;&lt;/a&gt;. Ink exposes this function to be able to handle &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;, that&#39;s why you should use Ink&#39;s &lt;code&gt;setRawMode&lt;/code&gt; instead of &lt;code&gt;process.stdin.setRawMode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This function will throw unless the current &lt;code&gt;stdin&lt;/code&gt; supports &lt;code&gt;setRawMode&lt;/code&gt;. Use &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#israwmodesupported&#34;&gt;&lt;code&gt;isRawModeSupported&lt;/code&gt;&lt;/a&gt; to detect &lt;code&gt;setRawMode&lt;/code&gt; support.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useStdin} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {setRawMode} = useStdin();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;setRawMode(true);&#xA;&#xA;&#x9;&#x9;return () =&amp;gt; {&#xA;&#x9;&#x9;&#x9;setRawMode(false);&#xA;&#x9;&#x9;};&#xA;&#x9;});&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;useStdout()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;useStdout&lt;/code&gt; is a React hook, which exposes stdout stream, where Ink renders your app.&lt;/p&gt; &#xA;&lt;h4&gt;stdout&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;stream.Writable&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.stdout&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useStdout} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {stdout} = useStdout();&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;write(data)&lt;/h4&gt; &#xA;&lt;p&gt;Write any string to stdout, while preserving Ink&#39;s output. It&#39;s useful when you want to display some external information outside of Ink&#39;s rendering and ensure there&#39;s no conflict between the two. It&#39;s similar to &lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt;, except it can&#39;t accept components, it only works with strings.&lt;/p&gt; &#xA;&lt;h5&gt;data&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Data to write to stdout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useStdout} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {write} = useStdout();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;// Write a single message to stdout, above Ink&#39;s output&#xA;&#x9;&#x9;write(&#39;Hello from Ink to stdout\n&#39;);&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See additional usage example in &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-stdout/use-stdout.js&#34;&gt;examples/use-stdout&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;useStderr()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;useStderr&lt;/code&gt; is a React hook, which exposes stderr stream.&lt;/p&gt; &#xA;&lt;h4&gt;stderr&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;stream.Writable&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.stderr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stderr stream.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useStderr} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {stderr} = useStderr();&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;write(data)&lt;/h4&gt; &#xA;&lt;p&gt;Write any string to stderr, while preserving Ink&#39;s output.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s useful when you want to display some external information outside of Ink&#39;s rendering and ensure there&#39;s no conflict between the two. It&#39;s similar to &lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt;, except it can&#39;t accept components, it only works with strings.&lt;/p&gt; &#xA;&lt;h5&gt;data&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Data to write to stderr.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useStderr} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {write} = useStderr();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;// Write a single message to stderr, above Ink&#39;s output&#xA;&#x9;&#x9;write(&#39;Hello from Ink to stderr\n&#39;);&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;useFocus(options?)&lt;/h3&gt; &#xA;&lt;p&gt;Component that uses &lt;code&gt;useFocus&lt;/code&gt; hook becomes &#34;focusable&#34; to Ink, so when user presses &lt;kbd&gt;Tab&lt;/kbd&gt;, Ink will switch focus to this component. If there are multiple components that execute &lt;code&gt;useFocus&lt;/code&gt; hook, focus will be given to them in the order that these components are rendered in. This hook returns an object with &lt;code&gt;isFocused&lt;/code&gt; boolean property, which determines if this component is focused or not.&lt;/p&gt; &#xA;&lt;h4&gt;options&lt;/h4&gt; &#xA;&lt;h5&gt;autoFocus&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Auto focus this component, if there&#39;s no active (focused) component right now.&lt;/p&gt; &#xA;&lt;h5&gt;isActive&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enable or disable this component&#39;s focus, while still maintaining its position in the list of focusable components. This is useful for inputs that are temporarily disabled.&lt;/p&gt; &#xA;&lt;h5&gt;id&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Required: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a component&#39;s focus ID, which can be used to programmatically focus the component. This is useful for large interfaces with many focusable elements, to avoid having to cycle through all of them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, useFocus, Text} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {isFocused} = useFocus();&#xA;&#xA;&#x9;return &amp;lt;Text&amp;gt;{isFocused ? &#39;I am focused&#39; : &#39;I am not focused&#39;}&amp;lt;/Text&amp;gt;;&#xA;};&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See example in &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-focus/use-focus.js&#34;&gt;examples/use-focus&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-focus-with-id/use-focus-with-id.js&#34;&gt;examples/use-focus-with-id&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;useFocusManager()&lt;/h3&gt; &#xA;&lt;p&gt;This hook exposes methods to enable or disable focus management for all components or manually switch focus to next or previous components.&lt;/p&gt; &#xA;&lt;h4&gt;enableFocus()&lt;/h4&gt; &#xA;&lt;p&gt;Enable focus management for all components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You don&#39;t need to call this method manually, unless you&#39;ve disabled focus management. Focus management is enabled by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useFocusManager} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {enableFocus} = useFocusManager();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;enableFocus();&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;disableFocus()&lt;/h4&gt; &#xA;&lt;p&gt;Disable focus management for all components. Currently active component (if there&#39;s one) will lose its focus.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useFocusManager} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {disableFocus} = useFocusManager();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;disableFocus();&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;focusNext()&lt;/h4&gt; &#xA;&lt;p&gt;Switch focus to the next focusable component. If there&#39;s no active component right now, focus will be given to the first focusable component. If active component is the last in the list of focusable components, focus will be switched to the first component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ink calls this method when user presses &lt;kbd&gt;Tab&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useFocusManager} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {focusNext} = useFocusManager();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;focusNext();&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;focusPrevious()&lt;/h4&gt; &#xA;&lt;p&gt;Switch focus to the previous focusable component. If there&#39;s no active component right now, focus will be given to the first focusable component. If active component is the first in the list of focusable components, focus will be switched to the last component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ink calls this method when user presses &lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useFocusManager} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {focusPrevious} = useFocusManager();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;focusPrevious();&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;focus(id)&lt;/h4&gt; &#xA;&lt;h5&gt;id&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Switch focus to the component with the given &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#id&#34;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/a&gt;. If there&#39;s no component with that ID, focus will be given to the next focusable component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {useFocusManager, useInput} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const {focus} = useFocusManager();&#xA;&#xA;&#x9;useInput(input =&amp;gt; {&#xA;&#x9;&#x9;if (input === &#39;s&#39;) {&#xA;&#x9;&#x9;&#x9;// Focus the component with focus ID &#39;someId&#39;&#xA;&#x9;&#x9;&#x9;focus(&#39;someId&#39;);&#xA;&#x9;&#x9;}&#xA;&#x9;});&#xA;&#xA;&#x9;return ‚Ä¶&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h4&gt;render(tree, options?)&lt;/h4&gt; &#xA;&lt;p&gt;Returns: &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/#instance&#34;&gt;&lt;code&gt;Instance&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mount a component and render the output.&lt;/p&gt; &#xA;&lt;h5&gt;tree&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;ReactElement&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;options&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;object&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h6&gt;stdout&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;stream.Writable&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.stdout&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output stream where app will be rendered.&lt;/p&gt; &#xA;&lt;h6&gt;stdin&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;stream.Readable&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.stdin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Input stream where app will listen for input.&lt;/p&gt; &#xA;&lt;h6&gt;exitOnCtrlC&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Configure whether Ink should listen to Ctrl+C keyboard input and exit the app. This is needed in case &lt;code&gt;process.stdin&lt;/code&gt; is in &lt;a href=&#34;https://nodejs.org/api/tty.html#tty_readstream_setrawmode_mode&#34;&gt;raw mode&lt;/a&gt;, because then Ctrl+C is ignored by default and process is expected to handle it manually.&lt;/p&gt; &#xA;&lt;h6&gt;patchConsole&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Patch console methods to ensure console output doesn&#39;t mix with Ink output. When any of &lt;code&gt;console.*&lt;/code&gt; methods are called (like &lt;code&gt;console.log()&lt;/code&gt;), Ink intercepts their output, clears main output, renders output from the console method and then rerenders main output again. That way both are visible and are not overlapping each other.&lt;/p&gt; &#xA;&lt;p&gt;This functionality is powered by &lt;a href=&#34;https://github.com/vadimdemedes/patch-console&#34;&gt;patch-console&lt;/a&gt;, so if you need to disable Ink&#39;s interception of output but want to build something custom, you can use it.&lt;/p&gt; &#xA;&lt;h6&gt;debug&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, each update will be rendered as a separate output, without replacing the previous one.&lt;/p&gt; &#xA;&lt;h4&gt;Instance&lt;/h4&gt; &#xA;&lt;p&gt;This is the object that &lt;code&gt;render()&lt;/code&gt; returns.&lt;/p&gt; &#xA;&lt;h5&gt;rerender(tree)&lt;/h5&gt; &#xA;&lt;p&gt;Replace previous root node with a new one or update props of the current root node.&lt;/p&gt; &#xA;&lt;h6&gt;tree&lt;/h6&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;ReactElement&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// Update props of the root node&#xA;const {rerender} = render(&amp;lt;Counter count={1} /&amp;gt;);&#xA;rerender(&amp;lt;Counter count={2} /&amp;gt;);&#xA;&#xA;// Replace root node&#xA;const {rerender} = render(&amp;lt;OldCounter /&amp;gt;);&#xA;rerender(&amp;lt;NewCounter /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;unmount()&lt;/h5&gt; &#xA;&lt;p&gt;Manually unmount the whole Ink app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const {unmount} = render(&amp;lt;MyApp /&amp;gt;);&#xA;unmount();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;waitUntilExit()&lt;/h5&gt; &#xA;&lt;p&gt;Returns a promise, which resolves when app is unmounted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const {unmount, waitUntilExit} = render(&amp;lt;MyApp /&amp;gt;);&#xA;&#xA;setTimeout(unmount, 1000);&#xA;&#xA;await waitUntilExit(); // resolves after `unmount()` is called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;clear()&lt;/h5&gt; &#xA;&lt;p&gt;Clear output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const {clear} = render(&amp;lt;MyApp /&amp;gt;);&#xA;clear();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;measureElement(ref)&lt;/h4&gt; &#xA;&lt;p&gt;Measure the dimensions of a particular &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; element. It returns an object with &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; properties. This function is useful when your component needs to know the amount of available space it has. You could use it when you need to change the layout based on the length of its content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;measureElement()&lt;/code&gt; returns correct results only after the initial render, when layout has been calculated. Until then, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; equal to zero. It&#39;s recommended to call &lt;code&gt;measureElement()&lt;/code&gt; in a &lt;code&gt;useEffect&lt;/code&gt; hook, which fires after the component has rendered.&lt;/p&gt; &#xA;&lt;h5&gt;ref&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;MutableRef&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A reference to a &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; element captured with a &lt;code&gt;ref&lt;/code&gt; property. See &lt;a href=&#34;https://reactjs.org/docs/refs-and-the-dom.html&#34;&gt;Refs&lt;/a&gt; for more information on how to capture references.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {render, measureElement, Box, Text} from &#39;ink&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;&#x9;const ref = useRef();&#xA;&#xA;&#x9;useEffect(() =&amp;gt; {&#xA;&#x9;&#x9;const {width, height} = measureElement(ref.current);&#xA;&#x9;&#x9;// width = 100, height = 1&#xA;&#x9;}, []);&#xA;&#xA;&#x9;return (&#xA;&#x9;&#x9;&amp;lt;Box width={100}&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;Box ref={ref}&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;lt;Text&amp;gt;This box will stretch to 100 width&amp;lt;/Text&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/Box&amp;gt;&#xA;&#x9;);&#xA;};&#xA;&#xA;render(&amp;lt;Example /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Ink components are simple to test with &lt;a href=&#34;https://github.com/vadimdemedes/ink-testing-library&#34;&gt;ink-testing-library&lt;/a&gt;. Here&#39;s a simple example that checks how component is rendered:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;&#xA;import {Text} from &#39;ink&#39;;&#xA;import {render} from &#39;ink-testing-library&#39;;&#xA;&#xA;const Test = () =&amp;gt; &amp;lt;Text&amp;gt;Hello World&amp;lt;/Text&amp;gt;;&#xA;const {lastFrame} = render(&amp;lt;Test /&amp;gt;);&#xA;&#xA;lastFrame() === &#39;Hello World&#39;; //=&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/vadimdemedes/ink-testing-library&#34;&gt;ink-testing-library&lt;/a&gt; for more examples and full documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Using React Devtools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/media/devtools.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ink supports &lt;a href=&#34;https://github.com/facebook/react/tree/master/packages/react-devtools&#34;&gt;React Devtools&lt;/a&gt; out-of-the-box. To enable integration with React Devtools in your Ink-based CLI, run it with &lt;code&gt;DEV=true&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DEV=true my-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, start React Devtools itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx react-devtools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it starts up, you should see the component tree of your CLI. You can even inspect and change the props of components, and see the results immediatelly in the CLI, without restarting it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You must manually quit your CLI via &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; after you&#39;re done testing.&lt;/p&gt; &#xA;&lt;h2&gt;Useful Components&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vadimdemedes/ink-text-input&#34;&gt;ink-text-input&lt;/a&gt; - Text input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vadimdemedes/ink-spinner&#34;&gt;ink-spinner&lt;/a&gt; - Spinner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vadimdemedes/ink-select-input&#34;&gt;ink-select-input&lt;/a&gt; - Select (dropdown) input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/ink-link&#34;&gt;ink-link&lt;/a&gt; - Link.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/ink-gradient&#34;&gt;ink-gradient&lt;/a&gt; - Gradient color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/ink-big-text&#34;&gt;ink-big-text&lt;/a&gt; - Awesome text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevva/ink-image&#34;&gt;ink-image&lt;/a&gt; - Display images inside the terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdeniau/ink-tab&#34;&gt;ink-tab&lt;/a&gt; - Tab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LitoMore/ink-color-pipe&#34;&gt;ink-color-pipe&lt;/a&gt; - Create color text with simpler style strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karaggeorge/ink-multi-select&#34;&gt;ink-multi-select&lt;/a&gt; - Select one or more values from a list&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JureSotosek/ink-divider&#34;&gt;ink-divider&lt;/a&gt; - A divider.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brigand/ink-progress-bar&#34;&gt;ink-progress-bar&lt;/a&gt; - Progress bar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maticzav/ink-table&#34;&gt;ink-table&lt;/a&gt; - Table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hexrcs/ink-ascii&#34;&gt;ink-ascii&lt;/a&gt; - Awesome text component with more font choices, based on Figlet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cameronhunter/ink-markdown&#34;&gt;ink-markdown&lt;/a&gt; - Render syntax highlighted Markdown.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Eximchain/ink-quicksearch-input&#34;&gt;ink-quicksearch-input&lt;/a&gt; - Select component with fast quicksearch-like navigation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevva/ink-confirm-input&#34;&gt;ink-confirm-input&lt;/a&gt; - Yes/No confirmation input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vsashyn/ink-syntax-highlight&#34;&gt;ink-syntax-highlight&lt;/a&gt; - Code syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukasbach/ink-form&#34;&gt;ink-form&lt;/a&gt; - Form.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/privatenumber/ink-task-list&#34;&gt;ink-task-list&lt;/a&gt; - Task list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Hooks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cameronhunter/ink-monorepo/tree/master/packages/ink-use-stdout-dimensions&#34;&gt;ink-use-stdout-dimensions&lt;/a&gt; - Subscribe to stdout dimensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory contains a set of real examples. You can run them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run example examples/[example name]&#xA;# e.g. npm run example examples/borders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/jest/jest.tsx&#34;&gt;Jest&lt;/a&gt; - Implementation of basic Jest UI &lt;a href=&#34;https://ink-jest-demo.vadimdemedes.repl.run/&#34;&gt;(live demo)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/counter/counter.tsx&#34;&gt;Counter&lt;/a&gt; - Simple counter that increments every 100ms &lt;a href=&#34;https://ink-counter-demo.vadimdemedes.repl.run/&#34;&gt;(live demo)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/final-form/rff-cli-example&#34;&gt;Form with validation&lt;/a&gt; - Manage form state using &lt;a href=&#34;https://github.com/final-form/final-form#-final-form&#34;&gt;Final Form&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/borders/borders.tsx&#34;&gt;Borders&lt;/a&gt; - Add borders to &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; component.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/suspense/suspense.tsx&#34;&gt;Suspense&lt;/a&gt; - Use React Suspense.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/table/table.tsx&#34;&gt;Table&lt;/a&gt; - Render a table with multiple columns and rows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-focus/use-focus.tsx&#34;&gt;Focus management&lt;/a&gt; - Use &lt;code&gt;useFocus&lt;/code&gt; hook to manage focus between components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-input/use-input.tsx&#34;&gt;User input&lt;/a&gt; - Listen to user input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-stdout/use-stdout.tsx&#34;&gt;Write to stdout&lt;/a&gt; - Write to stdout bypassing main Ink output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/use-stderr/use-stderr.tsx&#34;&gt;Write to stderr&lt;/a&gt; - Write to stderr bypassing main Ink output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/static/static.tsx&#34;&gt;Static&lt;/a&gt; - Use &lt;code&gt;&amp;lt;Static&amp;gt;&lt;/code&gt; to render permanent output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vadimdemedes/ink/master/examples/subprocess-output&#34;&gt;Child process&lt;/a&gt; - Render output from a child process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vadimdemedes&#34;&gt;Vadim Demedes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus&#34;&gt;Sindre Sorhus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>byteluo/Vector2</title>
    <updated>2023-03-13T01:44:54Z</updated>
    <id>tag:github.com,2023-03-13:/byteluo/Vector2</id>
    <link href="https://github.com/byteluo/Vector2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰∏Ä‰∏™Ë∂ÖÂø´ÁöÑÈùôÊÄÅÁΩëÁ´ôÁîüÊàêÂô®üéà&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vector&lt;/h1&gt; &#xA;&lt;p&gt;Vector ÊòØ‰∏Ä‰∏™ÈùûÂ∏∏Âº∫Â§ßÁöÑ‰∏™‰∫∫ÂçöÂÆ¢ÁîüÊàêÂô®„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://treecat.cn&#34;&gt;Âú®Á∫øÊºîÁ§∫&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>