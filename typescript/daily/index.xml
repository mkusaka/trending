<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-18T01:47:21Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antfu/unplugin-auto-import</title>
    <updated>2023-01-18T01:47:21Z</updated>
    <id>tag:github.com,2023-01-18:/antfu/unplugin-auto-import</id>
    <link href="https://github.com/antfu/unplugin-auto-import" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Auto import APIs on-demand for Vite, Webpack and Rollup&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;unplugin-auto-import&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/unplugin-auto-import&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/unplugin-auto-import?color=a1b858&amp;amp;label=&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Auto import APIs on-demand for Vite, Webpack, Rollup and esbuild. With TypeScript support. Powered by &lt;a href=&#34;https://github.com/unjs/unplugin&#34;&gt;unplugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;without&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { computed, ref } from &#39;vue&#39;&#xA;const count = ref(0)&#xA;const doubled = computed(() =&amp;gt; count.value * 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const count = ref(0)&#xA;const doubled = computed(() =&amp;gt; count.value * 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;without&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { useState } from &#39;react&#39;&#xA;export function Counter() {&#xA;  const [count, setCount] = useState(0)&#xA;  return &amp;lt;div&amp;gt;{ count }&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;export function Counter() {&#xA;  const [count, setCount] = useState(0)&#xA;  return &amp;lt;div&amp;gt;{ count }&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -D unplugin-auto-import&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vite&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vite.config.ts&#xA;import AutoImport from &#39;unplugin-auto-import/vite&#39;&#xA;&#xA;export default defineConfig({&#xA;  plugins: [&#xA;    AutoImport({ /* options */ }),&#xA;  ],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/antfu/unplugin-auto-import/main/playground/&#34;&gt;&lt;code&gt;playground/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rollup&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// rollup.config.js&#xA;import AutoImport from &#39;unplugin-auto-import/rollup&#39;&#xA;&#xA;export default {&#xA;  plugins: [&#xA;    AutoImport({ /* options */ }),&#xA;    // other plugins&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Webpack&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// webpack.config.js&#xA;module.exports = {&#xA;  /* ... */&#xA;  plugins: [&#xA;    require(&#39;unplugin-auto-import/webpack&#39;)({ /* options */ }),&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Nuxt&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;You &lt;strong&gt;don&#39;t need&lt;/strong&gt; this plugin for Nuxt, it&#39;s already builtin.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vue CLI&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vue.config.js&#xA;module.exports = {&#xA;  configureWebpack: {&#xA;    plugins: [&#xA;      require(&#39;unplugin-auto-import/webpack&#39;)({ /* options */ }),&#xA;    ],&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Quasar&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// quasar.conf.js [Vite]&#xA;module.exports = {&#xA;  vitePlugins: [&#xA;    [&#39;unplugin-auto-import/vite&#39;, { /* options */ }],&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// quasar.conf.js [Webpack]&#xA;const AutoImportPlugin = require(&#39;unplugin-auto-import/webpack&#39;)&#xA;&#xA;module.exports = {&#xA;  build: {&#xA;    chainWebpack(chain) {&#xA;      chain.plugin(&#39;unplugin-auto-import&#39;).use(&#xA;        AutoImportPlugin({ /* options */ }),&#xA;      )&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;esbuild&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// esbuild.config.js&#xA;import { build } from &#39;esbuild&#39;&#xA;&#xA;build({&#xA;  /* ... */&#xA;  plugins: [&#xA;    require(&#39;unplugin-auto-import/esbuild&#39;)({&#xA;      /* options */&#xA;    }),&#xA;  ],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Astro&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// astro.config.mjs&#xA;import AutoImport from &#39;unplugin-auto-import/astro&#39;&#xA;&#xA;export default defineConfig({&#xA;  integrations: [&#xA;    AutoImport({&#xA;      /* options */&#xA;    })&#xA;  ],&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;AutoImport({&#xA;  // targets to transform&#xA;  include: [&#xA;    /\.[tj]sx?$/, // .ts, .tsx, .js, .jsx&#xA;    /\.vue$/, /\.vue\?vue/, // .vue&#xA;    /\.md$/, // .md&#xA;  ],&#xA;&#xA;  // global imports to register&#xA;  imports: [&#xA;    // presets&#xA;    &#39;vue&#39;,&#xA;    &#39;vue-router&#39;,&#xA;    // custom&#xA;    {&#xA;      &#39;@vueuse/core&#39;: [&#xA;        // named imports&#xA;        &#39;useMouse&#39;, // import { useMouse } from &#39;@vueuse/core&#39;,&#xA;        // alias&#xA;        [&#39;useFetch&#39;, &#39;useMyFetch&#39;], // import { useFetch as useMyFetch } from &#39;@vueuse/core&#39;,&#xA;      ],&#xA;      &#39;axios&#39;: [&#xA;        // default imports&#xA;        [&#39;default&#39;, &#39;axios&#39;], // import { default as axios } from &#39;axios&#39;,&#xA;      ],&#xA;      &#39;[package-name]&#39;: [&#xA;        &#39;[import-names]&#39;,&#xA;        // alias&#xA;        [&#39;[from]&#39;, &#39;[alias]&#39;],&#xA;      ],&#xA;    },&#xA;  ],&#xA;  // Enable auto import by filename for default module exports under directories&#xA;  defaultExportByFilename: false,&#xA;&#xA;  // Auto import for module exports under directories&#xA;  // by default it only scan one level of modules under the directory&#xA;  dirs: [&#xA;    // &#39;./hooks&#39;,&#xA;    // &#39;./composables&#39; // only root modules&#xA;    // &#39;./composables/**&#39;, // all nested modules&#xA;    // ...&#xA;  ],&#xA;&#xA;  // Filepath to generate corresponding .d.ts file.&#xA;  // Defaults to &#39;./auto-imports.d.ts&#39; when `typescript` is installed locally.&#xA;  // Set `false` to disable.&#xA;  dts: &#39;./auto-imports.d.ts&#39;,&#xA;&#xA;  // Auto import inside Vue template&#xA;  // see https://github.com/unjs/unimport/pull/15 and https://github.com/unjs/unimport/pull/72&#xA;  vueTemplate: false,&#xA;&#xA;  // Custom resolvers, compatible with `unplugin-vue-components`&#xA;  // see https://github.com/antfu/unplugin-auto-import/pull/23/&#xA;  resolvers: [&#xA;    /* ... */&#xA;  ],&#xA;&#xA;  // Generate corresponding .eslintrc-auto-import.json file.&#xA;  // eslint globals Docs - https://eslint.org/docs/user-guide/configuring/language-options#specifying-globals&#xA;  eslintrc: {&#xA;    enabled: false, // Default `false`&#xA;    filepath: &#39;./.eslintrc-auto-import.json&#39;, // Default `./.eslintrc-auto-import.json`&#xA;    globalsPropValue: true, // Default `true`, (true | false | &#39;readonly&#39; | &#39;readable&#39; | &#39;writable&#39; | &#39;writeable&#39;)&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/antfu/unplugin-auto-import/main/src/types.ts&#34;&gt;type definitions&lt;/a&gt; for more options.&lt;/p&gt; &#xA;&lt;h2&gt;Presets&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/antfu/unplugin-auto-import/main/src/presets&#34;&gt;src/presets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;In order to properly hint types for auto-imported APIs&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;400px&#34; valign=&#34;top&#34;&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Enable &lt;code&gt;options.dts&lt;/code&gt; so that &lt;code&gt;auto-imports.d.ts&lt;/code&gt; file is automatically generated&lt;/li&gt; &#xA;     &lt;li&gt;Make sure &lt;code&gt;auto-imports.d.ts&lt;/code&gt; is not excluded in &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;600px&#34;&gt;&lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;AutoImport({&#xA;  dts: true // or a custom path&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;ESLint&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 When using TypeScript, we recommend to &lt;strong&gt;disable&lt;/strong&gt; &lt;code&gt;no-undef&lt;/code&gt; rule directly as TypeScript already check for them and you don&#39;t need to worry about this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you have encountered ESLint error of &lt;code&gt;no-undef&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;400px&#34;&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Enable &lt;code&gt;eslintrc.enabled&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;600px&#34;&gt;&lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;AutoImport({&#xA;  eslintrc: {&#xA;    enabled: true, // &amp;lt;-- this&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;400px&#34;&gt; &#xA;    &lt;ol start=&#34;2&#34;&gt; &#xA;     &lt;li&gt;Update your &lt;code&gt;eslintrc&lt;/code&gt;: &lt;a href=&#34;https://eslint.org/docs/user-guide/configuring/configuration-files#extending-configuration-files&#34;&gt;Extending Configuration Files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;600px&#34;&gt;&lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// .eslintrc.js&#xA;module.exports = {&#xA;  extends: [&#xA;    &#39;./.eslintrc-auto-import.json&#39;,&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Compare to &lt;a href=&#34;https://github.com/unjs/unimport&#34;&gt;&lt;code&gt;unimport&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;From v0.8.0, &lt;code&gt;unplugin-auto-import&lt;/code&gt; &lt;strong&gt;uses&lt;/strong&gt; &lt;code&gt;unimport&lt;/code&gt; underneath. &lt;code&gt;unimport&lt;/code&gt; is designed to be a lower level tool (it also powered Nuxt&#39;s auto import). You can think &lt;code&gt;unplugin-auto-import&lt;/code&gt; is a wrapper of it that provides more user-friendly config APIs and capability like resolvers. Development of new features will mostly happend in &lt;code&gt;unimport&lt;/code&gt; from now.&lt;/p&gt; &#xA;&lt;h3&gt;Compare to &lt;a href=&#34;https://github.com/antfu/vue-global-api&#34;&gt;&lt;code&gt;vue-global-api&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can think of this plugin as a successor to &lt;code&gt;vue-global-api&lt;/code&gt;, but offering much more flexibility and bindings with libraries other than Vue (e.g. React).&lt;/p&gt; &#xA;&lt;h6&gt;Pros&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flexible and customizable&lt;/li&gt; &#xA; &lt;li&gt;Tree-shakable (on-demand transforming)&lt;/li&gt; &#xA; &lt;li&gt;No global population&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Cons&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Relying on build tools integrations (while &lt;code&gt;vue-global-api&lt;/code&gt; is pure runtime) - but hey, we have supported quite a few of them already!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antfu/unplugin-auto-import/main/LICENSE&#34;&gt;MIT&lt;/a&gt; License © 2021 &lt;a href=&#34;https://github.com/antfu&#34;&gt;Anthony Fu&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>quicktype/quicktype</title>
    <updated>2023-01-18T01:47:21Z</updated>
    <id>tag:github.com,2023-01-18:/quicktype/quicktype</id>
    <link href="https://github.com/quicktype/quicktype" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate types and converters from JSON, Schema, and GraphQL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/quicktype/quicktype/master/media/quicktype-logo.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/quicktype&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/quicktype.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/quicktype/quicktype/actions/workflows/master.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;quicktype&lt;/code&gt; generates strongly-typed models and serializers from JSON, JSON Schema, TypeScript, and &lt;a href=&#34;https://blog.quicktype.io/graphql-with-quicktype/&#34;&gt;GraphQL queries&lt;/a&gt;, making it a breeze to work with JSON type-safely in many programming languages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.quicktype.io&#34;&gt;Try &lt;code&gt;quicktype&lt;/code&gt; in your browser&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;http://blog.quicktype.io/first-look/&#34;&gt;&#39;A first look at quicktype&#39;&lt;/a&gt; for more introduction.&lt;/li&gt; &#xA; &lt;li&gt;If you have any questions, check out the &lt;a href=&#34;https://raw.githubusercontent.com/quicktype/quicktype/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Inputs&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;JSON&lt;/th&gt; &#xA;   &lt;th&gt;JSON API URLs&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#s=coordinate&#34;&gt;JSON Schema&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;TypeScript&lt;/th&gt; &#xA;   &lt;th&gt;GraphQL queries&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Target Languages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=js&#34;&gt;JavaScript&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=flow&#34;&gt;Flow&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=rust&#34;&gt;Rust&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=kotlin&#34;&gt;Kotlin&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=dart&#34;&gt;Dart&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=python&#34;&gt;Python&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=cs&#34;&gt;C#&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=go&#34;&gt;Go&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=cpp&#34;&gt;C++&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=java&#34;&gt;Java&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=ts&#34;&gt;TypeScript&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=swift&#34;&gt;Swift&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=objc&#34;&gt;Objective-C&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=elm&#34;&gt;Elm&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=schema&#34;&gt;JSON Schema&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=pike&#34;&gt;Pike&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=javascript-prop-types&#34;&gt;Prop-Types&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.quicktype.io/#l=haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Missing your favorite language? Please implement it!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to use &lt;code&gt;quicktype&lt;/code&gt;. &lt;a href=&#34;https://app.quicktype.io&#34;&gt;app.quicktype.io&lt;/a&gt; is the most powerful and complete UI. The web app also works offline and doesn&#39;t send your sample data over the Internet, so paste away!&lt;/p&gt; &#xA;&lt;p&gt;For the best CLI, we recommend installing &lt;code&gt;quicktype&lt;/code&gt; globally via &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g quicktype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://formulae.brew.sh/formula/quicktype&#34;&gt;Homebrew&lt;/a&gt; &lt;em&gt;(infrequently updated)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/paste-json-as-code-quicktype/id1330801220?mt=12&#34;&gt;Xcode extension&lt;/a&gt;*&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items/quicktype.quicktype&#34;&gt;VSCode extension&lt;/a&gt;*&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=typeguard.quicktype-vs&#34;&gt;Visual Studio extension&lt;/a&gt;*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;small&gt;* limited functionality&lt;/small&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;quicktype&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run quicktype without arguments for help and options&#xA;quicktype&#xA;&#xA;# quicktype a simple JSON object in C#&#xA;echo &#39;{ &#34;name&#34;: &#34;David&#34; }&#39; | quicktype -l csharp&#xA;&#xA;# quicktype a top-level array and save as Go source&#xA;echo &#39;[1, 2, 3]&#39; | quicktype -o ints.go&#xA;&#xA;# quicktype a sample JSON file in Swift&#xA;quicktype person.json -o Person.swift&#xA;&#xA;# A verbose way to do the same thing&#xA;quicktype \&#xA;  --src person.json \&#xA;  --src-lang json \&#xA;  --lang swift \&#xA;  --top-level Person \&#xA;  --out Person.swift&#xA;&#xA;# quicktype a directory of samples as a C++ program&#xA;# Suppose ./blockchain is a directory with files:&#xA;#   latest-block.json transactions.json marketcap.json&#xA;quicktype ./blockchain -o blockchain-api.cpp&#xA;&#xA;# quicktype a live JSON API as a Java program&#xA;quicktype https://api.somewhere.com/data -o Data.java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating code from JSON schema&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to use &lt;code&gt;quicktype&lt;/code&gt; is to generate a JSON schema from sample data, review and edit the schema, commit the schema to your project repo, then generate code from the schema as part of your build process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First, infer a JSON schema from a sample.&#xA;quicktype pokedex.json -l schema -o schema.json&#xA;&#xA;# Review the schema, make changes,&#xA;# and commit it to your project repo.&#xA;&#xA;# Finally, generate model code from schema in your&#xA;# build process for whatever languages you need:&#xA;quicktype -s schema schema.json -o src/ios/models.swift&#xA;quicktype -s schema schema.json -o src/android/Models.java&#xA;quicktype -s schema schema.json -o src/nodejs/Models.ts&#xA;&#xA;# All of these models will serialize to and from the same&#xA;# JSON, so different programs in your stack can communicate&#xA;# seamlessly.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating code from TypeScript (Experimental)&lt;/h3&gt; &#xA;&lt;p&gt;You can achieve a similar result by writing or generating a &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; file, then quicktyping it. TypeScript is a typed superset of JavaScript with simple, succinct syntax for defining types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;interface Person {&#xA;    name: string;&#xA;    nickname?: string; // an optional property&#xA;    luckyNumber: number;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use TypeScript just like JSON schema was used in the last example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First, infer a TypeScript file from a sample (or just write one!)&#xA;quicktype pokedex.json -o pokedex.ts --just-types&#xA;# Review the TypeScript, make changes, etc.&#xA;quicktype pokedex.ts -o src/ios/models.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Calling &lt;code&gt;quicktype&lt;/code&gt; from JavaScript&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;quicktype&lt;/code&gt; as a JavaScript function within &lt;code&gt;node&lt;/code&gt; or browsers. First add the &lt;code&gt;quicktype-core&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install quicktype-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In general, first you create an &lt;code&gt;InputData&lt;/code&gt; value with one or more JSON samples, JSON schemas, TypeScript sources, or other supported input types. Then you call &lt;code&gt;quicktype&lt;/code&gt;, passing that &lt;code&gt;InputData&lt;/code&gt; value and any options you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import {&#xA;    quicktype,&#xA;    InputData,&#xA;    jsonInputForTargetLanguage,&#xA;    JSONSchemaInput,&#xA;    FetchingJSONSchemaStore&#xA;} from &#34;quicktype-core&#34;;&#xA;&#xA;async function quicktypeJSON(targetLanguage, typeName, jsonString) {&#xA;    const jsonInput = jsonInputForTargetLanguage(targetLanguage);&#xA;&#xA;    // We could add multiple samples for the same desired&#xA;    // type, or many sources for other types. Here we&#39;re&#xA;    // just making one type from one piece of sample JSON.&#xA;    await jsonInput.addSource({&#xA;        name: typeName,&#xA;        samples: [jsonString]&#xA;    });&#xA;&#xA;    const inputData = new InputData();&#xA;    inputData.addInput(jsonInput);&#xA;&#xA;    return await quicktype({&#xA;        inputData,&#xA;        lang: targetLanguage&#xA;    });&#xA;}&#xA;&#xA;async function quicktypeJSONSchema(targetLanguage, typeName, jsonSchemaString) {&#xA;    const schemaInput = new JSONSchemaInput(new FetchingJSONSchemaStore());&#xA;&#xA;    // We could add multiple schemas for multiple types,&#xA;    // but here we&#39;re just making one type from JSON schema.&#xA;    await schemaInput.addSource({ name: typeName, schema: jsonSchemaString });&#xA;&#xA;    const inputData = new InputData();&#xA;    inputData.addInput(schemaInput);&#xA;&#xA;    return await quicktype({&#xA;        inputData,&#xA;        lang: targetLanguage&#xA;    });&#xA;}&#xA;&#xA;async function main() {&#xA;    const { lines: swiftPerson } = await quicktypeJSON(&#34;swift&#34;, &#34;Person&#34;, jsonString);&#xA;    console.log(swiftPerson.join(&#34;\n&#34;));&#xA;&#xA;    const { lines: pythonPerson } = await quicktypeJSONSchema(&#34;python&#34;, &#34;Person&#34;, jsonSchemaString);&#xA;    console.log(pythonPerson.join(&#34;\n&#34;));&#xA;}&#xA;&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The argument to &lt;code&gt;quicktype&lt;/code&gt; is a complex object with many optional properties. &lt;a href=&#34;https://github.com/quicktype/quicktype/raw/master/src/quicktype-core/Run.ts#L119&#34;&gt;Explore its definition&lt;/a&gt; to understand what options are allowed.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;quicktype&lt;/code&gt; is &lt;a href=&#34;https://raw.githubusercontent.com/quicktype/quicktype/master/LICENSE&#34;&gt;Open Source&lt;/a&gt; and we love contributors! In fact, we have a &lt;a href=&#34;https://github.com/quicktype/quicktype/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3Ahelp-wanted&#34;&gt;list of issues&lt;/a&gt; that are low-priority for us, but for which we&#39;d happily accept contributions. Support for new target languages is also strongly desired. If you&#39;d like to contribute, need help with anything at all, or would just like to talk things over, come &lt;a href=&#34;http://slack.quicktype.io/&#34;&gt;join us on Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setup, Build, Run&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;quicktype&lt;/code&gt; is implemented in TypeScript and requires &lt;code&gt;nodejs&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; to build and run.&lt;/p&gt; &#xA;&lt;p&gt;First, install &lt;code&gt;typescript&lt;/code&gt; globally via &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Clone this repo and do:&lt;/p&gt; &#xA;&lt;h4&gt;macOS / Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm use&#xA;npm install&#xA;script/quicktype # rebuild (slow) and run (fast)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --ignore-scripts # Install dependencies&#xA;npm install -g typescript # Install typescript globally&#xA;tsc --project src/cli # Rebuild&#xA;node dist\cli\index.js # Run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;, open this workspace, and install the recommended extensions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;code . # opens in VS Code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Live-reloading for quick feedback&lt;/h3&gt; &#xA;&lt;p&gt;When working on an output language, you&#39;ll want to view generated output as you edit. Use &lt;code&gt;npm start&lt;/code&gt; to watch for changes and recompile and rerun &lt;code&gt;quicktype&lt;/code&gt; for live feedback. For example, if you&#39;re developing a new renderer for &lt;code&gt;fortran&lt;/code&gt;, you could use the following command to rebuild and reinvoke &lt;code&gt;quicktype&lt;/code&gt; as you implement your renderer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start -- &#34;--lang fortran pokedex.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command in quotes is passed to &lt;code&gt;quicktype&lt;/code&gt;, so you can render local &lt;code&gt;.json&lt;/code&gt; files, URLs, or add other options.&lt;/p&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run full test suite&#xA;npm run test&#xA;&#xA;# Test a specific language (see test/languages.ts)&#xA;FIXTURE=golang npm test&#xA;&#xA;# Test a single sample or directory&#xA;FIXTURE=swift npm test -- pokedex.json&#xA;FIXTURE=swift npm test -- test/inputs/json/samples&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>maplibre/maplibre-gl-js</title>
    <updated>2023-01-18T01:47:21Z</updated>
    <id>tag:github.com,2023-01-18:/maplibre/maplibre-gl-js</id>
    <link href="https://github.com/maplibre/maplibre-gl-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The open-source fork of Mapbox GL JS: Interactive maps in the browser, powered by vector tiles and WebGL.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://maplibre.org/img/maplibre-logo-big.svg?sanitize=true&#34; alt=&#34;MapLibre Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MapLibre GL JS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://maplibre.org/maplibre-gl-js-docs/api/&#34;&gt;MapLibre GL JS&lt;/a&gt;&lt;/strong&gt; is an open-source library for publishing maps on your websites or webview based apps. Fast displaying of maps is possible thanks to GPU-accelerated vector tile rendering.&lt;/p&gt; &#xA;&lt;p&gt;It originated as an open-source fork of &lt;a href=&#34;https://github.com/mapbox/mapbox-gl-js&#34;&gt;mapbox-gl-js&lt;/a&gt;, before their switch to a non-OSS license in December 2020. The library&#39;s initial versions (1.x) were intended to be a drop-in replacement for the Mapbox’s OSS version (1.x) with additional functionality, but have evolved a lot since then.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maplibre/maplibre-gl-js/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD_3--Clause-blue.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.npmjs.com/package/maplibre-gl&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/maplibre-gl?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/maplibre/maplibre-gl-js/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/maplibre/maplibre-gl-js/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34; alt=&#34;PRs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Call for Bounties💰&lt;/strong&gt; If you have ideas for new features in MapLibre, you can now nominate them for the MapLibre Bounty Program at &lt;a href=&#34;https://maplibre.org/news/2022-10-16-call-for-bounties/&#34;&gt;https://maplibre.org/news/2022-10-16-call-for-bounties/&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Include the JavaScript and CSS files in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your HTML file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#39;https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.js&#39;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;link href=&#39;https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.css&#39; rel=&#39;stylesheet&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include the following code in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of your HTML file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&#39;map&#39; style=&#39;width: 400px; height: 300px;&#39;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;var map = new maplibregl.Map({&#xA;  container: &#39;map&#39;,&#xA;  style: &#39;https://demotiles.maplibre.org/style.json&#39;, // stylesheet location&#xA;  center: [-74.5, 40], // starting position [lng, lat]&#xA;  zoom: 9 // starting zoom&#xA;});&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enjoy the map!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation for this library &lt;a href=&#34;https://maplibre.org/maplibre-gl-js-docs/api/&#34;&gt;is available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the features through &lt;a href=&#34;https://maplibre.org/maplibre-gl-js-docs/example/&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Showcases&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://maplibre.org/maplibre-gl-js-docs/assets/simple-map-800-22a3f5b6410f543ab214e14f68fb42ec.png&#34; alt=&#34;Display a map&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://maplibre.org/maplibre-gl-js-docs/assets/third-party-800-e047007bba338f6ec7d6cd47abfed279.png&#34; alt=&#34;Third party vector tile source&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://maplibre.org/maplibre-gl-js-docs/assets/animate-images-800-497358611dbe047f300faeb9465aad5f.png&#34; alt=&#34;Animate a series of images&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://maplibre.org/maplibre-gl-js-docs/assets/heatmap-layer-800-05c0f97ddb6b1a10e84b5064564e86ff.png&#34; alt=&#34;Create a heatmap layer&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://maplibre.org/maplibre-gl-js-docs/assets/3d-buildings-800-bd7885f07050dbbfee7a9bb800ff5ce8.png&#34; alt=&#34;3D buildings&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://maplibre.org/maplibre-gl-js-docs/assets/visualize-population-density-800-6c65712d9ea94eb6d2bd3348a82b9bdf.png&#34; alt=&#34;Visualize population density&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Migrating from mapbox-gl to maplibre&lt;/h2&gt; &#xA;&lt;p&gt;The libraries are very similar but diverge with newer features happening from v2 in both libraries where Mapbox turned proprietary.&lt;/p&gt; &#xA;&lt;p&gt;The overall migration happens by uninstalling &lt;code&gt;mapbox-gl&lt;/code&gt; and installing &lt;code&gt;maplibre-gl&lt;/code&gt; in your node packages (or see below for CDN links), and replacing &lt;code&gt;mapboxgl&lt;/code&gt; with &lt;code&gt;maplibregl&lt;/code&gt; throughout your TypeScript, JavaScript and HTML/CSS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    var map = new mapboxgl.Map({&#xA;+    var map = new maplibregl.Map({&#xA;&#xA;-    &amp;lt;button class=&#34;mapboxgl-ctrl&#34;&amp;gt;&#xA;+    &amp;lt;button class=&#34;maplibregl-ctrl&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compatibility branch&lt;/h4&gt; &#xA;&lt;p&gt;Maplibre v1 is completely backward compatible with Mapbox v1. This compatibility branch (named 1.x) is tagged v1 on npm, and its current verison is 1.15.3.&lt;/p&gt; &#xA;&lt;h4&gt;CDN Links&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;MapLibre GL JS is distributed via &lt;a href=&#34;https://unpkg.com&#34;&gt;unpkg.com&lt;/a&gt;. For more informations please see &lt;a href=&#34;https://raw.githubusercontent.com/maplibre/maplibre-gl-js/main/docs/README-unpkg.md#maplibre-gl-on-unpkgcom&#34;&gt;MapLibre GL is on unpkg.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    &amp;lt;script src=&#34;https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;-    &amp;lt;link&#xA;-      href=&#34;https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.css&#34;&#xA;-      rel=&#34;stylesheet&#34;&#xA;-    /&amp;gt;&#xA;&#xA;     &#xA;+    &amp;lt;script src=&#34;https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;+    &amp;lt;link&#xA;+      href=&#34;https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.css&#34;&#xA;+      rel=&#34;stylesheet&#34;&#xA;+    /&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want an example? Have a look at the official &lt;a href=&#34;https://maplibre.org/maplibre-gl-js-docs/example/&#34;&gt;MapLibre GL JS Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use MapLibre GL JS bindings for React (&lt;a href=&#34;https://visgl.github.io/react-map-gl/docs/get-started/get-started#using-with-a-mapbox-gl-fork&#34;&gt;https://visgl.github.io/react-map-gl/docs/get-started/get-started#using-with-a-mapbox-gl-fork&lt;/a&gt;) and Angular (&lt;a href=&#34;https://github.com/maplibre/ngx-maplibre-gl&#34;&gt;https://github.com/maplibre/ngx-maplibre-gl&lt;/a&gt;). Find more at &lt;a href=&#34;https://github.com/maplibre/awesome-maplibre&#34;&gt;awesome-maplibre&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;h3&gt;Getting Involved&lt;/h3&gt; &#xA;&lt;p&gt;Join the #maplibre slack channel at OSMUS: get an invite at &lt;a href=&#34;https://slack.openstreetmap.us/&#34;&gt;https://slack.openstreetmap.us/&lt;/a&gt; Read the &lt;a href=&#34;https://raw.githubusercontent.com/maplibre/maplibre-gl-js/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; guide in order to get familiar with how we do things around here.&lt;/p&gt; &#xA;&lt;h3&gt;Community Leadership&lt;/h3&gt; &#xA;&lt;p&gt;You can find the official status of the backing community and steering committee in the &lt;a href=&#34;https://raw.githubusercontent.com/maplibre/maplibre-gl-js/main/COMMUNITY.md&#34;&gt;COMMUNITY.md&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Fragmentation&lt;/h3&gt; &#xA;&lt;p&gt;If you depend on a free software alternative to &lt;code&gt;mapbox-gl-js&lt;/code&gt;, please consider joining our effort! Anyone with a stake in a healthy community-led fork is welcome to help us figure out our next steps. We welcome contributors and leaders! MapLibre GL already represents the combined efforts of a few early fork efforts, and we all benefit from &#34;one project&#34; rather than &#34;our way&#34;. If you know of other forks, please reach out to them and direct them here.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;MapLibre GL&lt;/strong&gt; is developed following&amp;nbsp;&lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;Semantic Versioning (2.0.0)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;We thank everyone who supported us financially in the past and special thanks to the people and organizations who support us with recurring donations!&lt;/p&gt; &#xA;&lt;p&gt;Read more about the MapLibre Sponsorship Program at &lt;a href=&#34;https://maplibre.org/sponsors/&#34;&gt;https://maplibre.org/sponsors/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Platinum:&lt;/p&gt; &#xA;&lt;img src=&#34;https://maplibre.org/img/aws-logo.svg?sanitize=true&#34; alt=&#34;Logo AWS&#34; width=&#34;25%&#34;&gt; &#xA;&lt;p&gt;Silver:&lt;/p&gt; &#xA;&lt;img src=&#34;https://maplibre.org/img/meta-logo.svg?sanitize=true&#34; alt=&#34;Logo Meta&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Stone:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mierune.co.jp/?lang=en&#34;&gt;MIERUNE Inc.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Backers and Supporters:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/maplibre/backer/0/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/0/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/1/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/1/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/2/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/2/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/3/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/3/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/4/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/4/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/5/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/5/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/6/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/6/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/7/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/7/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/8/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/8/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/9/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/9/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/10/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/10/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/11/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/11/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/12/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/12/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/13/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/13/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/14/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/14/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/15/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/15/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/16/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/16/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/17/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/17/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/18/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/18/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/19/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/19/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/20/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/20/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/21/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/21/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/22/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/22/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/23/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/23/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/24/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/24/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/25/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/25/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/26/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/26/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/27/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/27/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/28/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/28/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/29/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/29/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/maplibre/backer/30/website?requireActive=false&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/maplibre/backer/30/avatar.svg?requireActive=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Thank you Mapbox 🙏🏽&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d like to acknowledge the amazing work Mapbox has contributed to open source. The open source community is sad to part ways with them, but we simultaneously feel grateful for everything they already contributed. &lt;code&gt;mapbox-gl-js&lt;/code&gt; 1.x is an open source achievement that now lives on as &lt;code&gt;maplibre-gl&lt;/code&gt;. We&#39;re proud to develop on the shoulders of giants, thank you Mapbox 🙇🏽‍♀️.&lt;/p&gt; &#xA;&lt;p&gt;Please keep in mind: Unauthorized backports are the biggest threat to the MapLibre project. It is unacceptable to backport code from mapbox-gl-js, which is not covered by the former BSD-3 license. If you are unsure about this issue, &lt;a href=&#34;https://github.com/maplibre/maplibre-gl-js/discussions&#34;&gt;please ask&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;MapLibre GL&lt;/strong&gt; is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/maplibre/maplibre-gl-js/main/LICENSE.txt&#34;&gt;3-Clause BSD license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>