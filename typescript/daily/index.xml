<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-12T01:47:24Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Nutlope/restorePhotos</title>
    <updated>2023-01-12T01:47:24Z</updated>
    <id>tag:github.com,2023-01-12:/Nutlope/restorePhotos</id>
    <link href="https://github.com/Nutlope/restorePhotos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Restoring old and blurry face photos with AI.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://restorephotos.io/&#34;&gt;RestorePhotos.io&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This project restores old face photos using AI. Watch the &lt;a href=&#34;https://twitter.com/nutlope/status/1612488923716136962&#34;&gt;15 second demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://restorephotos.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Nutlope/restorePhotos/main/public/screenshot.png&#34; alt=&#34;Face Photo Restorer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;It uses an ML model from the Applied Research Center called &lt;a href=&#34;https://github.com/TencentARC/GFPGAN&#34;&gt;GFPGAN&lt;/a&gt; on &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt; to restore face photos. This application gives you the ability to upload any photo, which will send it through this ML Model using a Next.js API route, and return your restored photo.&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;After cloning the repo, go to &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt; to make an account and put your API key in a file called &lt;code&gt;.env&lt;/code&gt;. If you&#39;d also like to do rate limiting, create an account on UpStash, create a Redis database, and populate the two environment variables in &lt;code&gt;.env&lt;/code&gt; as well. If you don&#39;t want to do rate limiting, you don&#39;t need to make any changes.&lt;/p&gt; &#xA;&lt;p&gt;Then, run the application in the command line and it will be available at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;One-Click Deploy&lt;/h2&gt; &#xA;&lt;p&gt;Deploy the example using &lt;a href=&#34;https://vercel.com?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=vercel-examples&#34;&gt;Vercel&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https://github.com/Nutlope/restorePhotos&amp;amp;env=REPLICATE_API_KEY&amp;amp;project-name=face-photo-restorer&amp;amp;repo-name=restore-photos&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Future Tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fix issue on iphones rotating photos&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add FAQ section on homepage with privacy policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add NSFW filter&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cloudflare/wildebeest</title>
    <updated>2023-01-12T01:47:24Z</updated>
    <id>tag:github.com,2023-01-12:/cloudflare/wildebeest</id>
    <link href="https://github.com/cloudflare/wildebeest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wildebeest&lt;/h1&gt; &#xA;&lt;p&gt;Wildebeest is an &lt;a href=&#34;https://www.w3.org/TR/activitypub/&#34;&gt;ActivityPub&lt;/a&gt; and &lt;a href=&#34;https://joinmastodon.org/&#34;&gt;Mastodon&lt;/a&gt;-compatible server whose goal is to allow anyone to operate their Fediverse server and identity on their domain without needing to keep infrastructure, with minimal setup and maintenance, and running in minutes.&lt;/p&gt; &#xA;&lt;p&gt;Wildebeest runs on top Cloudflare&#39;s &lt;a href=&#34;https://blog.cloudflare.com/welcome-to-the-supercloud-and-developer-week-2022/&#34;&gt;Supercloud&lt;/a&gt;, uses &lt;a href=&#34;https://workers.cloudflare.com/&#34;&gt;Workers&lt;/a&gt; and &lt;a href=&#34;https://pages.cloudflare.com/&#34;&gt;Pages&lt;/a&gt;, the &lt;a href=&#34;https://developers.cloudflare.com/d1/&#34;&gt;D1 database&lt;/a&gt; to store metadata and configurations, &lt;a href=&#34;https://www.cloudflare.com/en-gb/products/zero-trust/access/&#34;&gt;Zero Trust Access&lt;/a&gt; to handle authentication and &lt;a href=&#34;https://www.cloudflare.com/en-gb/products/cloudflare-images/&#34;&gt;Images&lt;/a&gt; for media handling.&lt;/p&gt; &#xA;&lt;p&gt;Currently, Wildebeest supports the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authentication and automatic profile creation.&lt;/li&gt; &#xA; &lt;li&gt;Message signing &amp;amp; notification.&lt;/li&gt; &#xA; &lt;li&gt;Inbox and Outbox notes (text, mentions and images), follow, announce (reblog), accept (friend), like.&lt;/li&gt; &#xA; &lt;li&gt;Server to server federation.&lt;/li&gt; &#xA; &lt;li&gt;Web client for content exploration (read-only).&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with &lt;a href=&#34;https://raw.githubusercontent.com/cloudflare/wildebeest/main/#supported-clients&#34;&gt;other Mastodon clients&lt;/a&gt; (Mobile iOS/Android and Web).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cloudflare will continue to evolve this open-source project with additional features over time and listen to the community feedback to steer our priorities. Pull requests and issues are welcome too.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Wildebeest is a full-stack app running on top of Cloudflare Pages using &lt;a href=&#34;https://developers.cloudflare.com/pages/platform/functions/&#34;&gt;Pages Functions&lt;/a&gt;. We are of course assuming that you have a Cloudflare account (click &lt;a href=&#34;https://dash.cloudflare.com/sign-up&#34;&gt;here&lt;/a&gt; if you don&#39;t) and have at least one &lt;a href=&#34;https://www.cloudflare.com/en-gb/learning/dns/glossary/dns-zone/&#34;&gt;zone&lt;/a&gt; using Cloudflare. If you don&#39;t have a zone, you can use &lt;a href=&#34;https://www.cloudflare.com/en-gb/products/registrar/&#34;&gt;Cloudflare Registrar&lt;/a&gt; to register new a new domain or &lt;a href=&#34;https://developers.cloudflare.com/registrar/get-started/transfer-domain-to-cloudflare/&#34;&gt;transfer&lt;/a&gt; an existing one.&lt;/p&gt; &#xA;&lt;p&gt;Some features, like data persistence, access controls, media storage, are handled by other Cloudflare products:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/d1/&#34;&gt;D1&lt;/a&gt; for the database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/workers/learning/how-kv-works/&#34;&gt;Workers KV&lt;/a&gt; for object caching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/en-gb/products/zero-trust/access/&#34;&gt;Zero Trust Access&lt;/a&gt; to handle user authentication and SSO on &lt;a href=&#34;https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/&#34;&gt;any identity provider&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/en-gb/products/cloudflare-images/&#34;&gt;Images&lt;/a&gt; for media handling.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of our products offer a &lt;a href=&#34;https://www.cloudflare.com/en-gb/plans/&#34;&gt;generous free plan&lt;/a&gt; that allows our users to try them for personal or hobby projects that aren’t business-critical. However the &lt;strong&gt;&lt;em&gt;Images&lt;/em&gt;&lt;/strong&gt; one doesn&#39;t have a free tier, so for setting up your instance you need to activate one of the paid &lt;strong&gt;&lt;em&gt;Images&lt;/em&gt;&lt;/strong&gt; plans.&lt;/p&gt; &#xA;&lt;h3&gt;Images plan&lt;/h3&gt; &#xA;&lt;p&gt;To activate &lt;strong&gt;&lt;em&gt;Images&lt;/em&gt;&lt;/strong&gt;, please login into your account, select &lt;strong&gt;&lt;em&gt;Images&lt;/em&gt;&lt;/strong&gt; on the left menu, and then select the plan that best fits your needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/fd07dede-a883-4372-b0cf-3afb6b2ab400/public&#34; alt=&#34;images subscription&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;API token&lt;/h3&gt; &#xA;&lt;p&gt;Before we begin, you also need to create an API token in your Cloudflare account. To do that, &lt;a href=&#34;https://dash.cloudflare.com/&#34;&gt;login&lt;/a&gt; into your account, and press the &lt;strong&gt;&lt;em&gt;Create Token&lt;/em&gt;&lt;/strong&gt; button under &lt;strong&gt;&lt;em&gt;My Profile (top right corner) / API Tokens&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/589e9e1b-5c50-4269-f039-3414454c4a00/public&#34; alt=&#34;create token&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now press &lt;strong&gt;&lt;em&gt;Create Custom Token&lt;/em&gt;&lt;/strong&gt; and add the following permissions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;D1, account level, edit permission.&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare Pages, account level, edit permission.&lt;/li&gt; &#xA; &lt;li&gt;Access: Apps and policies, account level, edit permission.&lt;/li&gt; &#xA; &lt;li&gt;Access: Organizations, Identity Providers and Groups, account level, read permission.&lt;/li&gt; &#xA; &lt;li&gt;Workers KV Storage, account level, edit permission.&lt;/li&gt; &#xA; &lt;li&gt;DNS, zone level, edit permission.&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare Images, account level, edit permission.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/a29c3063-dc81-470b-3d57-ce047e0b3f00/public&#34; alt=&#34;token permissions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can limit the token to the specific zone where you will using Wildebeest if you want. Don&#39;t set a TTL.&lt;/p&gt; &#xA;&lt;p&gt;Now &lt;strong&gt;&lt;em&gt;Continue to Summary&lt;/em&gt;&lt;/strong&gt;, review your settings, and &lt;strong&gt;&lt;em&gt;Create Token&lt;/em&gt;&lt;/strong&gt;. Take note of your token and store it in your password manager, you&#39;re going to need it later.&lt;/p&gt; &#xA;&lt;h3&gt;Zone and Account IDs&lt;/h3&gt; &#xA;&lt;p&gt;You also need to take note of your Zone and Account IDs. To find them, &lt;a href=&#34;https://dash.cloudflare.com/&#34;&gt;login&lt;/a&gt; into your account and select the zone (domain) where you plan to use Wildebeest. Then, on the &lt;strong&gt;&lt;em&gt;Overview&lt;/em&gt;&lt;/strong&gt; page you will the following information:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/f595d8b7-6ce9-4ef7-7416-253efd012800/w=306&#34; alt=&#34;zone and account IDs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re all set now, let&#39;s start the installation process.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Wildebeest uses &lt;a href=&#34;https://deploy.workers.cloudflare.com/&#34;&gt;Deploy to Workers&lt;/a&gt; to automate the installation process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Click here to start the installation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deploy.workers.cloudflare.com/?url=https://github.com/cloudflare/wildebeest&amp;amp;authed=true&amp;amp;fields=%7B%22name%22:%22Zone%20ID%22,%22secret%22:%22CF_ZONE_ID%22,%22descr%22:%22Get%20your%20Zone%20ID%20from%20the%20Cloudflare%20Dashboard%22%7D&amp;amp;fields=%7B%22name%22:%22Domain%22,%22secret%22:%22CF_DEPLOY_DOMAIN%22,%22descr%22:%22Domain%20on%20which%20your%20instance%20will%20be%20running%22%7D&amp;amp;fields=%7B%22name%22:%22Instance%20title%22,%22secret%22:%22INSTANCE_TITLE%22,%22descr%22:%22Title%20of%20your%20instance%22%7D&amp;amp;fields=%7B%22name%22:%22Administrator%20Email%22,%22secret%22:%22ADMIN_EMAIL%22,%22descr%22:%22An%20Email%20address%20that%20can%20be%20messaged%20regarding%20inquiries%20or%20issues%22%7D&amp;amp;fields=%7B%22name%22:%22Instance%20description%22,%22secret%22:%22INSTANCE_DESCR%22,%22descr%22:%22A%20short,%20plain-text%20description%20of%20your%20instance%22%7D&#34;&gt;&lt;img src=&#34;https://deploy.workers.cloudflare.com/button&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please pay attention to all the steps involved in the installation process.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authorize Workers to use your GitHub account.&lt;/li&gt; &#xA; &lt;li&gt;Enter your &lt;strong&gt;Account ID&lt;/strong&gt; (from the previous section) and the &lt;strong&gt;API token&lt;/strong&gt; that you created previously.&lt;/li&gt; &#xA; &lt;li&gt;Configure your instance/project with the &lt;strong&gt;Zone ID&lt;/strong&gt;, &lt;strong&gt;Domain&lt;/strong&gt;, &lt;strong&gt;Title&lt;/strong&gt;, &lt;strong&gt;Admin Email&lt;/strong&gt; and &lt;strong&gt;Description&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fork the repository into your personal GitHub account.&lt;/li&gt; &#xA; &lt;li&gt;Enable GitHub Actions.&lt;/li&gt; &#xA; &lt;li&gt;Deploy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Authorizations and API Token&lt;/h3&gt; &#xA;&lt;p&gt;The first two steps are authorizing Workers to use your GitHub account and entering your &lt;strong&gt;Account ID&lt;/strong&gt; and the &lt;strong&gt;API token&lt;/strong&gt; you created in the requirements section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/00d9a77c-440f-46e5-b2bf-ccd198815800/public&#34; alt=&#34;deploy to workers&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Instance configuration&lt;/h3&gt; &#xA;&lt;p&gt;Configure your instance/project with the &lt;strong&gt;Zone ID&lt;/strong&gt; (see the requirements above), &lt;strong&gt;Domain&lt;/strong&gt; (the full FQDN domain of your zone, where you want to deploy your Wildebeest server), &lt;strong&gt;Title&lt;/strong&gt;, &lt;strong&gt;Admin Email&lt;/strong&gt; and &lt;strong&gt;Description&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/8aa836c5-a8e1-4ea5-d55c-a678aafe0b00/public&#34; alt=&#34;configure instance&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now click &lt;strong&gt;&lt;em&gt;Fork the repository&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then enable GitHub Actions and confirm by clicking &lt;strong&gt;&lt;em&gt;Workflows enabled&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And finally click &lt;strong&gt;&lt;em&gt;Deploy&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/be02ef19-b38a-4aef-7591-37dde5161200/public&#34; alt=&#34;deploy&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The installation script will now build and deploy your project to Cloudflare Pages and will run a &lt;a href=&#34;https://github.com/cloudflare/wildebeest/raw/main/tf/main.tf&#34;&gt;Terraform script&lt;/a&gt; to configure the D1, KV, DNS, Images and Access settings automatically for you.&lt;/p&gt; &#xA;&lt;h2&gt;Finish installation&lt;/h2&gt; &#xA;&lt;p&gt;If you followed all the steps, you should see a successful GitHub Actions build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/2f00e3e4-aace-46f9-f0f4-eaeceb691a00/w=915&#34; alt=&#34;github actions secrets&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also confirm in the Cloudflare &lt;a href=&#34;https://dash.cloudflare.com&#34;&gt;dashboard&lt;/a&gt; that the Pages project, DNS entry, KV namespace, D1 database and Access rule were all created and configured.&lt;/p&gt; &#xA;&lt;p&gt;Almost there, only one last step missing:&lt;/p&gt; &#xA;&lt;h3&gt;Configure the access rule&lt;/h3&gt; &#xA;&lt;p&gt;The installation process automatically created a &lt;a href=&#34;https://developers.cloudflare.com/cloudflare-one/applications/&#34;&gt;Zero Trust Access application&lt;/a&gt; called &lt;code&gt;wildebeest-your-github-user&lt;/code&gt; for you. Now you need to create a &lt;a href=&#34;https://developers.cloudflare.com/cloudflare-one/policies/&#34;&gt;policy&lt;/a&gt; that defines who can have access to your Wildebeest instance.&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://one.dash.cloudflare.com/access&#34;&gt;https://one.dash.cloudflare.com/access&lt;/a&gt; and select your account, then select &lt;strong&gt;&lt;em&gt;Access / Applications&lt;/em&gt;&lt;/strong&gt; and Edit the &lt;code&gt;wildebeest-your-github-user&lt;/code&gt; application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/c93d68e8-ddfc-457d-bc63-cc50472e9e00/public&#34; alt=&#34;access applications&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now click &lt;strong&gt;&lt;em&gt;Add a policy&lt;/em&gt;&lt;/strong&gt;. Name the policy &lt;code&gt;wildebeest-policy&lt;/code&gt;, set the action to &lt;strong&gt;&lt;em&gt;Allow&lt;/em&gt;&lt;/strong&gt;, and add an include rule with the list of Emails that you want to allow and then click &lt;strong&gt;&lt;em&gt;Save policy&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/f6b1238f-22c3-4daf-6102-7178fc91ca00/public&#34; alt=&#34;access policy&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;You&#39;re ready&lt;/h3&gt; &#xA;&lt;p&gt;Open your browser and go to your newly deployed Wildebeest domain &lt;code&gt;https://social.example/&lt;/code&gt; (replace social.example with your domain). You should see something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/8ffd58d6-6b5b-46c0-af21-ec58a57f1600/public&#34; alt=&#34;ready&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;https://social.example/api/v1/instance&lt;/code&gt; (replace social.example with your domain) and double-check your configuration. It should show:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;description&#34;: &#34;Private Mastodon Server&#34;,&#xA;&#x9;&#34;email&#34;: &#34;admin@social.example&#34;,&#xA;&#x9;&#34;title&#34;: &#34;My Wildebeest Server&#34;,&#xA;&#x9;&#34;registrations&#34;: false,&#xA;&#x9;&#34;version&#34;: &#34;4.0.2&#34;,&#xA;&#x9;&#34;rules&#34;: [],&#xA;&#x9;&#34;uri&#34;: &#34;social.example&#34;,&#xA;&#x9;&#34;short_description&#34;: &#34;Private Mastodon Server&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, you&#39;re ready to start using your Wildebeest Mastodon compatible instance.&lt;/p&gt; &#xA;&lt;h2&gt;Supported clients&lt;/h2&gt; &#xA;&lt;p&gt;Wildebeest is Mastodon API compatible, which means that you should be able to use most of the Web, Desktop, and Mobile clients with it. However, this project is a work in progress, and nuances might affect some of their functionality.&lt;/p&gt; &#xA;&lt;p&gt;This is the list clients that we have been using successfully while developing and testing Wildebeest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pinafore.social/&#34;&gt;Pinafore&lt;/a&gt; web client (&lt;a href=&#34;https://github.com/nolanlawson/pinafore&#34;&gt;source&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Mastodon &lt;a href=&#34;https://joinmastodon.org/apps&#34;&gt;official&lt;/a&gt; mobile client for &lt;a href=&#34;https://apps.apple.com/us/app/mastodon-for-iphone/id1571998974&#34;&gt;iOS&lt;/a&gt; (&lt;a href=&#34;https://github.com/mastodon/mastodon-ios&#34;&gt;source&lt;/a&gt;) and &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.joinmastodon.android&#34;&gt;Android&lt;/a&gt; (&lt;a href=&#34;https://github.com/mastodon/mastodon-android&#34;&gt;source&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wildebeest also provides a read-only web client in your instance URL, where you can explore the timelines (local and federated), posts and profiles. Please use the existing Mastodon clients to post and manage your account.&lt;/p&gt; &#xA;&lt;h3&gt;Wildebeest has no user registration&lt;/h3&gt; &#xA;&lt;p&gt;Wildebeest uses &lt;a href=&#34;https://www.cloudflare.com/en-gb/products/zero-trust/access/&#34;&gt;Zero Trust Access&lt;/a&gt; to handle user authentication. It assumes that your users will register with another identity provider (Zero Trust supports &lt;a href=&#34;https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/&#34;&gt;many providers&lt;/a&gt; or your custom one that implements &lt;a href=&#34;https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/generic-saml/&#34;&gt;Generic SAML 2.0&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When you start using Wildebeest with a client, you don&#39;t need to register. Instead, you go straight to log in, which will redirect you to the Access page and handle the authentication step according to the policy that you defined earlier.&lt;/p&gt; &#xA;&lt;p&gt;When authenticated, Access will redirect you back to Wildebeest. The first time this happens, we will detect that we don&#39;t have information about the user and ask for your &lt;strong&gt;Username&lt;/strong&gt; and &lt;strong&gt;Display Name&lt;/strong&gt;. This will be asked only once and is what will show in your public Mastodon profile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/4f5d27d0-3d30-49bd-b356-e33c194d7c00/w=450&#34; alt=&#34;first login&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updating Wildebeest&lt;/h2&gt; &#xA;&lt;p&gt;Updating your Wildebeest to the latest version is as easy as going to your forked repo on GitHub and clicking the &lt;strong&gt;&lt;em&gt;Sync fork&lt;/em&gt;&lt;/strong&gt; button:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/92ddc9f2-789b-454d-f6ca-2e9011613900/w=500&#34; alt=&#34;configuration screen&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once your fork is syncronized with the official repo, the GitHub Actions CI is triggered and a new build will be deployed.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Cloudflare services&lt;/h2&gt; &#xA;&lt;p&gt;Since Wildebeest is a Cloudflare app running on Pages, you can seamlessly enable additional Cloudflare services to protect or improve your server.&lt;/p&gt; &#xA;&lt;h3&gt;Email Routing&lt;/h3&gt; &#xA;&lt;p&gt;If you want to receive Email at your @social.example domain, you can enable &lt;a href=&#34;https://developers.cloudflare.com/email-routing/get-started/enable-email-routing/&#34;&gt;Email Routing&lt;/a&gt; for free and take advantage of sophisticated Email forwarding and protection features. Simply log in to your account, select the Wildebeest zone and then click on Email to enable.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes things go south. The GitHub Actions deployment can fail for some reason, or some configuration changed or was accidentally removed.&lt;/p&gt; &#xA;&lt;h3&gt;Starting over&lt;/h3&gt; &#xA;&lt;p&gt;If you attempted to deploy Wildebeest in your account and something failed, or you simply want to reinstall everything from scratch again, you need to do manual checkups and cleaning before you start over.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to your zone DNS settings and delete the CNAME record that points to &lt;code&gt;wildebeest-username.pages.dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to your account Pages section and delete the &lt;code&gt;wildebeest-username&lt;/code&gt; project (make sure you remove the custom domain first if it&#39;s been configured).&lt;/li&gt; &#xA; &lt;li&gt;Go to your account Workers / KV section and delete the &lt;code&gt;wildebeest-username-cache&lt;/code&gt; and &lt;code&gt;wildebeest-terraform-username-state&lt;/code&gt; namespaces.&lt;/li&gt; &#xA; &lt;li&gt;Go to your account Workers / D1 and delete the &lt;code&gt;wildebeest-username&lt;/code&gt; database.&lt;/li&gt; &#xA; &lt;li&gt;Launch &lt;a href=&#34;https://one.dash.cloudflare.com/&#34;&gt;Zero Trust&lt;/a&gt;, select your account, go to Access / Applications and delete the &lt;code&gt;wildebeest-username&lt;/code&gt; application.&lt;/li&gt; &#xA; &lt;li&gt;Delete your GitHub wildebeest forked repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can now start a clean install.&lt;/p&gt; &#xA;&lt;h3&gt;Error 1102&lt;/h3&gt; &#xA;&lt;p&gt;Wildebeest runs cryptographical functions and can process lots of data internally, depending on the size of the instance and social graph. It&#39;s possible that, in some cases, a request exceeds the Worker&#39;s resource limits in the free plan.&lt;/p&gt; &#xA;&lt;p&gt;We will keep optimizing our code to run as fast as possible, but if you start seeing 1102 errors when using your Wildebeest pages and APIs, you might need to upgrade to Workers Unbound, which provides much higher limits.&lt;/p&gt; &#xA;&lt;p&gt;To do that, go to your &lt;strong&gt;&lt;em&gt;Account Page&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;Pages&lt;/em&gt;&lt;/strong&gt;, select the &lt;code&gt;wildebeest-username&lt;/code&gt; project, go to &lt;strong&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;Functions&lt;/em&gt;&lt;/strong&gt; and change the usage model to &lt;strong&gt;Unbound&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imagedelivery.net/NkfPDviynOyTAOI79ar_GQ/45de3429-d01a-4cfc-2ffc-819ac4f51900/public&#34; alt=&#34;unbound&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After you change your Pages project to Unbound, you need to redeploy it. Go to GitHub Actions in your repo, select the latest successful deploy, and press &lt;strong&gt;Re-run all jobs&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chen-rn/CUA</title>
    <updated>2023-01-12T01:47:24Z</updated>
    <id>tag:github.com,2023-01-12:/chen-rn/CUA</id>
    <link href="https://github.com/chen-rn/CUA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;create-universal-app(CUA) is an opinionated template for creating fullstack universal apps (Expo, Next, tRPC, Prisma, Clerk, Solito, Tamagui)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌌 create-universal-app(CUA)&lt;/h1&gt; &#xA;&lt;h3&gt;Video Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/36214945/211167187-347b87ce-1c03-4678-9904-542aa78ab131.mp4&#34;&gt;https://user-images.githubusercontent.com/36214945/211167187-347b87ce-1c03-4678-9904-542aa78ab131.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🌌 What is this?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;create-universal-app(CUA)&lt;/strong&gt; is an opinionated template for creating fullstack universal(mobile + web codeshare) apps with built in auth for both mobile and web using &lt;strong&gt;Expo&lt;/strong&gt;(mobile), &lt;strong&gt;Nextjs&lt;/strong&gt;(web), &lt;strong&gt;tRPC&lt;/strong&gt;, &lt;strong&gt;Prisma&lt;/strong&gt;, &lt;strong&gt;Tamagui&lt;/strong&gt;(ui/styling), and &lt;strong&gt;Clerk&lt;/strong&gt;(mobile + web auth).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/aTEv0-ZBbWk&#34;&gt;Here&#39;s&lt;/a&gt; a 20 minute Youtube tutorial going over everything if that&#39;s more of your style!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This repo is made on top of&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/t3-oss/create-t3-turbo&#34;&gt;create-t3-turbo&lt;/a&gt;(expo, next, trpc, prisma, nextauth - all in one, but no UI code share, no mobile auth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clerkinc/t3-turbo-and-clerk&#34;&gt;t3-turbo-and-clerk&lt;/a&gt;(t3 turbo, but with auth for mobile + web, still no code share for UI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamagui/tamagui/tree/master/starters/next-expo-solito&#34;&gt;tamagui + solito starter&lt;/a&gt;(expo + next code share, but no tRPC, no built in auth)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌟 How it works&lt;/h2&gt; &#xA;&lt;h3&gt;Folder Structure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apps &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;next&lt;/li&gt; &#xA;   &lt;li&gt;expo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;packages &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ui (your reusable components/tamagui)&lt;/li&gt; &#xA;   &lt;li&gt;db (db schema, prisma stuff)&lt;/li&gt; &#xA;   &lt;li&gt;app &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;features (basically all of your frontend code in React Native will go here ⭐️⭐️⭐️)&lt;/li&gt; &#xA;     &lt;li&gt;navigation (unifying web + mobile nav)&lt;/li&gt; &#xA;     &lt;li&gt;provider (unifying providers)&lt;/li&gt; &#xA;     &lt;li&gt;utils (your utils ie. auth/trpc)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;api (all of your tRPC/backend code)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In a bit more detail&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your &lt;strong&gt;frontend&lt;/strong&gt; code will be coded in React Native, meaning that you&#39;re going to write Views instead of divs.(Note: since we are using Tamagui, we&#39;re gonna write Stacks instead Views) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;apps/expo and apps/next are practically empty folders that are simply &lt;em&gt;referencing&lt;/em&gt; your packages/app folder.&lt;/li&gt; &#xA;   &lt;li&gt;If you&#39;re familiar with React Native, it&#39;s going to feel as if you&#39;re writing a React Native app, that just happens to also run really well on the web(with SSR and all of those goodies).&lt;/li&gt; &#xA;   &lt;li&gt;Your code will get rendered as HTML/CSS on the NextJS side and normal React Native on the Native side.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Your &lt;strong&gt;backend&lt;/strong&gt; code is gonna be in &#34;packages/api&#34;. This code is actually gonna get ran by NextJS in a serverless environment. If you&#39;re a little confused about how that works, &lt;a href=&#34;https://www.youtube.com/watch?v=2cB5Fh46Vi4&amp;amp;t=1017s&#34;&gt;here&#39;s&lt;/a&gt; a good video by Theo that talks about NextJS as a backend framework.&lt;/li&gt; &#xA; &lt;li&gt;Your backend and frontend will communicate with tRPC.&lt;/li&gt; &#xA; &lt;li&gt;Your backend and your DB will communicate with Prisma(ORM).&lt;/li&gt; &#xA; &lt;li&gt;Mobile auth is done with Clerk Expo, and web auth is done with Clerk React and Clerk Next.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: you don&#39;t need to understanding how everything works in detail before you can start using something like this. As someone that wants to know how every bolt and nut works, I often get &#34;blocked&#34; by my own perfectionism, so I&#39;m just throwing this out there in case you&#39;re feeling the same about something.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💭 Behind the decisions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why Tamagui for style/ui?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;what is Tamagui? -&amp;gt; TLDR: it&#39;s for making things look pretty on both web and mobile while being really really fast and easy to work with.&lt;/li&gt; &#xA; &lt;li&gt;In a bit more detail, Tamagui has 3 things. 1. Compiler 2. Core 3. UI &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1 is their unique way of turning your &#34;style related code&#34; into pure CSS faster. Most important thing here is probably this tree flattening thing they do.&lt;/li&gt; &#xA;   &lt;li&gt;2 is a small set of components they built aimed to replace View and Text that you one uses in RN, with some advantages.&lt;/li&gt; &#xA;   &lt;li&gt;3 is a set of UI components that the tama team built using #2.&lt;/li&gt; &#xA;   &lt;li&gt;if you want a bit more detail, either visit their website or join discord channel or ask ChatGPT(I admit it&#39;s not the simplest thing out there)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;why not Nativewind/Tailwind? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;What I like about Tamagui is that it&#39;s simultaneously Tailwind and DaisyUI that&#39;s built from the ground up designed for universal apps with its own compiler and core components.&lt;/li&gt; &#xA;   &lt;li&gt;Feel free to use Nativewind/Tailwind instead of Tamagui! You should be able to set things up there fairly easily.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why Clerk for auth?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On a high level, clerk promises an overall user management solution instead of just authentication with things like User Profile, Banning, Device management and stuff all built in. But in practice, I&#39;ve just personally had an great time using Clerk for Expo compared to Firebase/Supabase auth for my projects.&lt;/li&gt; &#xA; &lt;li&gt;practical things I like about Clerk: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Really nice hooks/components(SignedIn/SignedOut) that work for both Expo and NextJs&lt;/li&gt; &#xA;   &lt;li&gt;SDKs for all 3 sides: Expo frontend, NextJs frontend, NextJs serverside&lt;/li&gt; &#xA;   &lt;li&gt;Fantastic support/help from their team(personal experience)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;downside: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;doesn&#39;t do SMS unless you pay: big negative for mobile, but imo makes up for it with easy oauth.&lt;/li&gt; &#xA;   &lt;li&gt;premium plan is also expensive compared to the alternatives&lt;/li&gt; &#xA;   &lt;li&gt;double edged sword of being a start up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which DB?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I recommend either spin up a postgres instance on Railway or use Supabase, doesn&#39;t matter too much IMO.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔨 How to use this? Step by step tutorial.&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;ve duplicated the repo and cloned it, we need to make sure your Yarn is set up properly for monorepos.&lt;/p&gt; &#xA;&lt;h3&gt;1. Set up yarn&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn set version stable&lt;/code&gt; make sure we are on 3&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn plugin import workspace-tools&lt;/code&gt; add in a workspace plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn config set nodeLinker node-modules&lt;/code&gt; make sure we are not using the default plug n play&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Set up project properly&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt; install packages and build the project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn generate&lt;/code&gt; generate your prisma client!&lt;/li&gt; &#xA; &lt;li&gt;set up your environment variables properly by duplicating the .env.example page, removing .example, and entering your environment variables. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clerk API: sign up clerk&lt;/li&gt; &#xA;   &lt;li&gt;DATABASE_URL: spin up a postgres instance with Railway or Supabase&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;you&#39;ll also need to manually enter your clerk frontend api into /packages/app/provider/auth/index.tsx(you can also global search //ENTER YOUR ENV HERE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn db-push&lt;/code&gt; push our schema to our DB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. Start up your project!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn web&lt;/code&gt; for web dev&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn native&lt;/code&gt; to run on iOS or Android&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn studio&lt;/code&gt; to start up your prisma studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Starting your project!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Put your screens in packages/app/features&lt;/li&gt; &#xA; &lt;li&gt;For smaller components, feel free to put them in /packages/ui&lt;/li&gt; &#xA; &lt;li&gt;For new routes, add them in /packages/api/src/router, and make sure you merge them in index.ts&lt;/li&gt; &#xA; &lt;li&gt;When you add a new page or screen, you&#39;ll need to add the page into both Expo and Next by &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Expo &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Go to packages/app/navigation/native/index.tsx and add the page in there following the example&lt;/li&gt; &#xA;     &lt;li&gt;Go to packages/app/provider/navigation/index.tsx and add the page in there following the example&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Next &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Go to apps/next/pages, create the folder with the name being your route, and an index.tsx that&#39;s importing your element from /app/feature/home&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>