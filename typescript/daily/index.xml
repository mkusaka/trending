<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-26T01:39:16Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tbakerx/react-resume-template</title>
    <updated>2022-09-26T01:39:16Z</updated>
    <id>tag:github.com,2022-09-26:/tbakerx/react-resume-template</id>
    <link href="https://github.com/tbakerx/react-resume-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A personal resume website template built with React.js, Typescript, Next.js, and styled with Tailwind css&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React JS Resume Website Template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tbakerx/react-resume-template/main/resume-screenshot.jpg?raw=true&#34; alt=&#34;ReactJS Resume Website Template&#34; title=&#34;ReactJS Resume Website Template&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;View a &lt;a href=&#34;https://reactresume.com&#34;&gt;live demo here.&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;If this template has helped you and you&#39;d like to support my work, feel free to &lt;a href=&#34;https://github.com/sponsors/tbakerx&#34;&gt;‚ô•Ô∏è Sponsor&lt;/a&gt; the project&lt;/h4&gt; &#xA;&lt;h3&gt;üéâ Version 2 is here! New features:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Completely rebuilt with React and full typescript support&lt;/li&gt; &#xA; &lt;li&gt;Built on the &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; framework for easy server side rendering/static generation, image optimization, api routes, and deployment&lt;/li&gt; &#xA; &lt;li&gt;Styled entirely with &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Re-organized data population file for customizing site.&lt;/li&gt; &#xA; &lt;li&gt;Significant improvement/modernization of all site sections&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Looking for the old version? You can find it &lt;a href=&#34;https://github.com/tbakerx/react-resume-template/releases/tag/v1.0.0&#34;&gt;here.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This is a React based personal resume website template. Built with typescript on the Next.js framework, styled with Tailwind css, and populated with data from a single file, you can easily create, customize and host your own personal website in minutes. Even better, the site is fully mobile-optimized and server-side rendered to ensure fast loading and a clean UI on any device. Read on to learn how to make it your own.&lt;/p&gt; &#xA;&lt;h2&gt;Make it Your Own!&lt;/h2&gt; &#xA;&lt;h3&gt;1. Make sure you have what you need&lt;/h3&gt; &#xA;&lt;p&gt;To build this website, you will need to have the latest stable versions of Node and Yarn downloaded and installed on your machine. If you don&#39;t already have them, you can get Node &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;here,&lt;/a&gt; and Yarn &lt;a href=&#34;https://yarnpkg.com/getting-started/install&#34;&gt;here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Fork and download this repo (and star if you like!)&lt;/h3&gt; &#xA;&lt;p&gt;Next, find the &lt;code&gt;Fork&lt;/code&gt; button in the top right of this page. This will allow you to make your own copy, for more info on forking repo&#39;s see &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository&#34;&gt;here.&lt;/a&gt; After this, download to your development machine using the green &lt;code&gt;Code&lt;/code&gt; button at the top of the repo page.&lt;/p&gt; &#xA;&lt;h3&gt;3. Install dependencies and run&lt;/h3&gt; &#xA;&lt;p&gt;Once you have your own copy of this repo forked and downloaded, open the folder in your favorite terminal and run &lt;code&gt;yarn install&lt;/code&gt; to install dependencies. Following this, run &lt;code&gt;yarn dev&lt;/code&gt; to run the project. In your terminal you should be given the url of the running instance (usually &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; unless you have something else running).&lt;/p&gt; &#xA;&lt;h3&gt;4. Customize the data to make it your own&lt;/h3&gt; &#xA;&lt;p&gt;All of the data for the site is driven via a file at &lt;code&gt;/src/data/data.tsx&lt;/code&gt;. This is where you&#39;ll find the existing content, and updating the values here will be reflected on the site. If you have the site running as described above, you should see these changes reflected on save. The data types for all of these items are given in the same folder in the &lt;code&gt;dataDef.ts&lt;/code&gt; file. Example images can be found at &lt;code&gt;src/images/&lt;/code&gt; and are imported in the data file. To change, simply update these images using the same name and location, or add new images and update the imports.&lt;/p&gt; &#xA;&lt;h3&gt;5. Hook up contact form&lt;/h3&gt; &#xA;&lt;p&gt;Due to the variety of options available for contact form providers, I&#39;ve hooked up the contact form only so far as handling inputs and state. Form submission and the actual sending of the email is open to your own implementation. My personal recommendation for email provider is &lt;a href=&#34;https://sendgrid.com/&#34;&gt;Sendgrid.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6. Make any other changes you like&lt;/h3&gt; &#xA;&lt;p&gt;Of course, all of the code is there and nothing is hidden from you so if you would like to make any other styling/data changes, feel free!&lt;/p&gt; &#xA;&lt;h3&gt;7. Deploy to Vercel and enjoy your new Resume Website&lt;/h3&gt; &#xA;&lt;p&gt;Deploying your new site to Vercel is simple, and can be done by following their guide &lt;a href=&#34;https://vercel.com/guides/deploying-nextjs-with-vercel&#34;&gt;here.&lt;/a&gt; When you&#39;re all done and the build succeeds, you should be given a url for your live site, go there and you&#39;ll see your new personal resume website! Congratulations!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>solidjs/solid-start</title>
    <updated>2022-09-26T01:39:16Z</updated>
    <id>tag:github.com,2022-09-26:/solidjs/solid-start</id>
    <link href="https://github.com/solidjs/solid-start" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SolidStart, the Solid app framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;img width=&#34;100%&#34; src=&#34;https://assets.solidjs.com/banner?project=Start&amp;amp;type=core&#34; alt=&#34;Solid Docs&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;SolidStart&lt;/h1&gt; &#xA;&lt;p&gt;This is the home of the Solid app framework. This is still a &lt;strong&gt;work in progress&lt;/strong&gt;. Many features are missing or incomplete. Experimental status does not even mean beta status. Patch releases will break everything.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File-system based routing&lt;/li&gt; &#xA; &lt;li&gt;Supports all rendering modes: Server-side rendering (SSR), Client-side rendering (CSR), Static Site Generation (SSG)&lt;/li&gt; &#xA; &lt;li&gt;Streaming&lt;/li&gt; &#xA; &lt;li&gt;Build optimizations with Code splitting, tree shaking and dead code elimination&lt;/li&gt; &#xA; &lt;li&gt;API Routes&lt;/li&gt; &#xA; &lt;li&gt;Built on Web standards: Fetch, Streams, WebCrypto&lt;/li&gt; &#xA; &lt;li&gt;Adapters for deployment to all popular platforms&lt;/li&gt; &#xA; &lt;li&gt;CSS Modules, SASS/SCSS Support&lt;/li&gt; &#xA; &lt;li&gt;Typescript-first&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir my-app&#xA;cd my-app&#xA;npm init solid&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;The monorepo uses &lt;code&gt;pnpm&lt;/code&gt; as the package manager. To install &lt;code&gt;pnpm&lt;/code&gt;, run the following command in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g pnpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pnpm install&lt;/code&gt; to install all the dependencies for the packages and examples in your monorepo.&lt;/p&gt; &#xA;&lt;!-- &lt;details&gt; --&gt; &#xA;&lt;!-- &lt;summary&gt; --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h4&gt;Monorepo &amp;amp; &lt;code&gt;project.json&lt;/code&gt; &lt;code&gt;&#34;workspace&#34;&lt;/code&gt; support&lt;/h4&gt; &lt;/summary&gt; &#xA; &lt;p&gt;If you are using Solid Start within a monorepo that takes advantage of the &lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;&#34;workspaces&#34;&lt;/code&gt; property (e.g. &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/workspaces/&#34;&gt;yarn workspaces&lt;/a&gt;) with hoisted dependencies (the default for yarn), you must include &lt;code&gt;solid-start&lt;/code&gt; within the optional &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; workspaces property.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;In the following, &#34;workspace root&#34; refers to the root of your repository while &#34;project root&#34; refers to the root of a child package within your repository&lt;/em&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;For example, if specifying &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; options from the workspace root (i.e. for all packages):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in workspace root&#xA;{&#xA;  &#34;workspaces&#34;: {&#xA;    &#34;packages&#34;: [&#xA;      /* ... */&#xA;    ],&#xA;    &#34;nohoist&#34;: [&#34;**/solid-start&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If specifying &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; options for a specific package using &lt;code&gt;solid-start&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in project root of a workspace child&#xA;{&#xA;  &#34;workspaces&#34;: {&#xA;    &#34;nohoist&#34;: [&#34;solid-start&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Regardless of where you specify the nohoist option, you also need to include &lt;code&gt;solid-start&lt;/code&gt; as a devDependency in the child &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;The reason why this is necessary is because &lt;code&gt;solid-start&lt;/code&gt; creates an &lt;code&gt;index.html&lt;/code&gt; file within your project which expects to load a script located in &lt;code&gt;/node_modules/solid-start/runtime/entry.jsx&lt;/code&gt; (where &lt;code&gt;/&lt;/code&gt; is the path of your project root). By default, if you hoist the &lt;code&gt;solid-start&lt;/code&gt; dependency into the workspace root then that script will not be available within the package&#39;s &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;[0.1.0-alpha.104]&lt;/h3&gt; &#xA;&lt;p&gt;Changed grouped routes from &lt;code&gt;__name&lt;/code&gt; syntax to &lt;code&gt;(name)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;[0.1.0-alpha.103]&lt;/h3&gt; &#xA;&lt;p&gt;Changed special compiled functions like &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;createServerData&lt;/code&gt;, &lt;code&gt;createServerAction$&lt;/code&gt;, &lt;code&gt;createServerMultiAction$&lt;/code&gt;. to have a postfix &lt;code&gt;$&lt;/code&gt; to indicate their special compiled (hoisted behavior).&lt;/p&gt; &#xA;&lt;p&gt;Also moved the optional first argument of &lt;code&gt;createServerData$&lt;/code&gt; under &lt;code&gt;key&lt;/code&gt; option. While this hides a very important option it makes the signatures more similar, so it is clear it is the main (first) function that is running on the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const data = createServerData$(&#xA;  async pathname =&amp;gt; {&#xA;    let mod = mods[`./docs${pathname}.mdx`] ?? mods[`./docs${pathname}.md`];&#xA;    return mod.getHeadings().filter(h =&amp;gt; h.depth &amp;gt; 1 &amp;amp;&amp;amp; h.depth &amp;lt;= 3);&#xA;  },&#xA;  {&#xA;    key: () =&amp;gt; path.pathname&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &lt;/summary&gt; --&gt; &#xA;&lt;h3&gt;[0.1.0-alpha.??] - Moving towards beta&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    vite.config.ts&#xA;   &lt;/mono&gt;&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import solid from &#39;solid-start&#39;;&#xA;+ import solid from &#39;solid-start/vite&#39;;&#xA;import { defineConfig } from &#39;vite&#39;;&#xA;export default defineConfig({&#xA;  plugins: [solid()]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Why?&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;We wanted to use the main entry point of &lt;code&gt;solid-start&lt;/code&gt; for use within the app where you are spending most of your time. And for the &lt;code&gt;vite&lt;/code&gt; config, we use the &lt;code&gt;solid-start/vite&lt;/code&gt; entrypoint.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    entry-server.tsx&#xA;   &lt;/mono&gt;&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;import { createHandler, renderAsync, StartServer } from &#34;solid-start/entry-server&#34;;&#xA;&#xA;- export default createHandler(renderAsync(context =&amp;gt; &amp;lt;StartServer context={context} /&amp;gt;));&#xA;+ export default createHandler(renderAsync(event =&amp;gt; &amp;lt;StartServer event={event} /&amp;gt;));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The prop received by &lt;code&gt;StartServer&lt;/code&gt;, and given to you by &lt;code&gt;createHandler&lt;/code&gt; is called &lt;code&gt;event&lt;/code&gt; instead of &lt;code&gt;context&lt;/code&gt;. It represents a &lt;code&gt;PageEvent&lt;/code&gt; which is a &lt;code&gt;FetchEvent&lt;/code&gt; that the server decided should be rendered by our components as a &lt;code&gt;Page&lt;/code&gt;. We adopted the &lt;code&gt;event&lt;/code&gt; terminology to represent the input that our server handlers received. For example, the input to our top-level server handler is a &lt;code&gt;FetchEvent&lt;/code&gt;. It can then be routed to a server function and be passed as a &lt;code&gt;ServerFunctionEvent&lt;/code&gt; or to an API Endpoint as an &lt;code&gt;ApiEvent&lt;/code&gt;. This terminology is adopted from the ServiceWorker API and Cloudflare Workers API.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    entry-client.tsx&#xA;   &lt;/mono&gt;&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you were using SSR:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import { hydrate } from &#34;solid-js&#34;;&#xA;- import { StartClient } from &#34;solid-start/entry-client&#34;;&#xA;+ import { mount, StartClient } from &#34;solid-start/entry-client&#34;;&#xA;&#xA;- hydrate(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document);&#xA;+ mount(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you were not using SSR and rendering your app client-side:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import { render } from &#34;solid-js&#34;;&#xA;- import { StartClient } from &#34;solid-start/entry-client&#34;;&#xA;+ import { mount, StartClient } from &#34;solid-start/entry-client&#34;;&#xA;&#xA;- render(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document.body);&#xA;+ mount(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Earlier, you called &lt;code&gt;hydrate(document)&lt;/code&gt; or &lt;code&gt;render(document.body)&lt;/code&gt; here based on what kind of rendering mode you had selected and whether you had SSR turned on. We felt this was slightly annoying to change if you wanted to switch between the modes and error prone if you are not careful and end up passing &lt;code&gt;document&lt;/code&gt; to &lt;code&gt;render&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;We still wanted to expose &lt;code&gt;entry-client.tsx&lt;/code&gt; to the user so that they can take over and do their own thing here if they want. We made a helper function called &lt;code&gt;mount&lt;/code&gt; that embeds the logic for deciding how to interact with the app we get from the server, be it &lt;code&gt;hydrate&lt;/code&gt; or &lt;code&gt;render&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    root.tsx&#xA;   &lt;/mono&gt;&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;// @refresh reload&#xA;import { Suspense } from &#34;solid-js&#34;;&#xA;- import { Meta, Link, Routes, Scripts } from &#34;solid-start/root&#34;;&#xA;+ import { FileRoutes, Scripts, Html, Head, Body, Routes, Meta, ErrorBoundary } from &#34;solid-start&#34;;&#xA;&#xA;export default function Root() {&#xA;  return (&#xA;-    &amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;+    &amp;lt;Html lang=&#34;en&#34;&amp;gt;&#xA;-      &amp;lt;head&amp;gt;&#xA;+      &amp;lt;Head&amp;gt;&#xA;&#xA;-        &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;&#xA;+        &amp;lt;Meta charset=&#34;utf-8&#34; /&amp;gt;&#xA;-        &amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34; /&amp;gt;&#xA;+        &amp;lt;Meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34; /&amp;gt;&#xA;&#xA;-        &amp;lt;Meta /&amp;gt; // already exists inside `Head`&#xA;-        &amp;lt;Links /&amp;gt; // already exists inside `Head`&#xA;&#xA;-      &amp;lt;/head&amp;gt;&#xA;+      &amp;lt;/Head&amp;gt;&#xA;-      &amp;lt;body&amp;gt;&#xA;+      &amp;lt;Body&amp;gt;&#xA;         &amp;lt;Suspense&amp;gt;&#xA;           &amp;lt;ErrorBoundary&amp;gt;&#xA;             &amp;lt;a href=&#34;/&#34;&amp;gt;Index&amp;lt;/a&amp;gt;&#xA;             &amp;lt;a href=&#34;/about&#34;&amp;gt;About&amp;lt;/a&amp;gt;&#xA;-            &amp;lt;Routes /&amp;gt;&#xA;+            &amp;lt;Routes&amp;gt;&#xA;+              &amp;lt;FileRoutes /&amp;gt;&#xA;+            &amp;lt;/Routes&amp;gt;&#xA;           &amp;lt;/ErrorBoundary&amp;gt;&#xA;         &amp;lt;/Suspense&amp;gt;&#xA;         &amp;lt;Scripts /&amp;gt;&#xA;-     &amp;lt;/body&amp;gt;&#xA;+     &amp;lt;/Body&amp;gt;&#xA;-   &amp;lt;/html&amp;gt;&#xA;+   &amp;lt;/Html&amp;gt;&#xA;  );&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;We changed how we declare our routes to make it more flexible. Earlier we gave you a &lt;code&gt;Routes&lt;/code&gt; component from &lt;code&gt;solid-start&lt;/code&gt; that was equivalent to rendering a &lt;code&gt;Routes&lt;/code&gt; from &lt;code&gt;@solidjs/router&lt;/code&gt; (yeah we know its confusing, that&#39;s why we are changing it) and filling it with the routes from the file system. The opt-in to the file-system routing was all-in or nothing. You didn&#39;t have an opportunity to add more &lt;code&gt;Route&lt;/code&gt;s. We now export &lt;code&gt;FileRoutes&lt;/code&gt; from &lt;code&gt;solid-start&lt;/code&gt; that represents the route config based on the file-system. It is meant to be passed to the &lt;code&gt;Routes&lt;/code&gt; component from &lt;code&gt;solid-start&lt;/code&gt; or wherever you want to use the file-system routes config.&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;You can use it together with other &lt;code&gt;Route&lt;/code&gt; components. &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&amp;lt;Routes&amp;gt;&#xA;  &amp;lt;FileRoutes /&amp;gt;&#xA;  &amp;lt;Route path=&#34;/somewhere&#34; component={SomeComponent} /&amp;gt;&#xA;&amp;lt;/Routes&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Also for quickly starting an app without creating a bunch of files, you can define your routes in a single file. We generally don&#39;t recommend this since it&#39;s a good idea to code split your app along your routes, but its a neat trick. &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;&amp;lt;Routes&amp;gt;&#xA;  &amp;lt;Route path=&#34;/somewhere&#34; component={SomeComponent} /&amp;gt;&#xA;&amp;lt;/Routes&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;For consistency between the SSR and client-side rendering modes, we needed to take more control of &lt;code&gt;root.tsx&lt;/code&gt; specifically, we couldnt just take &lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tags and allow them to be part of the component tree since we can&#39;t client-side render the whole document. We only really get to take over &lt;code&gt;document.body&lt;/code&gt;. We needed to ship with special &lt;code&gt;Html&lt;/code&gt;, &lt;code&gt;Head&lt;/code&gt;, and &lt;code&gt;Body&lt;/code&gt; components that you use in &lt;code&gt;root.tsx&lt;/code&gt; instead of the lower-case counterparts. These document flow components know what to do whether you are in SSR mode on or off.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;We can avoid you having to include &lt;code&gt;Meta&lt;/code&gt; and &lt;code&gt;Links&lt;/code&gt; from &lt;code&gt;solid-start/root&lt;/code&gt; in your &lt;code&gt;head&lt;/code&gt; since we do it by default.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;We will always use the title-case variants of the tags used in &lt;code&gt;head&lt;/code&gt; (eg. &lt;code&gt;Link&lt;/code&gt; &amp;gt; &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;Style&lt;/code&gt; &amp;gt; &lt;code&gt;style&lt;/code&gt;, &lt;code&gt;Meta&lt;/code&gt; &amp;gt; &lt;code&gt;meta&lt;/code&gt;) for consistency throughout the app&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;solid-meta&lt;/code&gt; is renamed to &lt;code&gt;@solidjs/meta&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;solid-app-router&lt;/code&gt; is renamed to &lt;code&gt;@solidjs/router&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;solid-start&lt;/code&gt; exports all the components meant to be used in your app and these components work on the client and server. Sometimes they are the same on both, and other times they coordinate between the two.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Now, our &lt;code&gt;root.tsx&lt;/code&gt; even more closely replicates how you would be writing your &lt;code&gt;index.html&lt;/code&gt;. And this was intentionally done so that we could enable an SPA mode for you that used the same code as the SSR mode without changing anything. How we do this? At build time for SPA mode, we quickly run the vite server, and make a request for your app&#39;s index and we tell our &lt;code&gt;Body&lt;/code&gt; component not to render anything. So the index.html we get is the one you would have written. We then use that &lt;code&gt;index.html&lt;/code&gt; as your entrypoint. You can still write your own &lt;code&gt;index.html&lt;/code&gt; if you don&#39;t want to use this functionality.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h3&gt;createServerResource -&amp;gt; createServerData$&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;&#xA;export function routeData() {&#xA;-  return createServerResource(async (_, { request }) =&amp;gt; {&#xA;+  return createServerData$(async (_, { request }) =&amp;gt; {&#xA;    const user = await getUser(request);&#xA;&#xA;    if (!user) {&#xA;      throw redirect(&#34;/login&#34;);&#xA;    }&#xA;&#xA;    return user;&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Renamed &lt;code&gt;createServerResource&lt;/code&gt; to &lt;code&gt;createServerData$&lt;/code&gt;, and &lt;code&gt;createRouteResource&lt;/code&gt; to &lt;code&gt;createRouteData&lt;/code&gt;: We renamed &lt;code&gt;createServerResource&lt;/code&gt; to &lt;code&gt;createServerData$&lt;/code&gt; because we were not using the &lt;code&gt;createResource&lt;/code&gt; signature and that was confusing and we needed to indicate the function was compiled. We just return one single signal from &lt;code&gt;createServerData$&lt;/code&gt; instead of a tuple like &lt;code&gt;createResource&lt;/code&gt; does. And we have moved the source into the options as &lt;code&gt;key&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h3&gt;createServerAction$, createServerMultiAction$&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- const logoutAction = createServerAction(() =&amp;gt; logout(server.request));&#xA;+ const [logginOut, logOut] = createServerAction$((_, { request }) =&amp;gt; logout(request));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;We pass in a &lt;code&gt;ServerFunctionEvent&lt;/code&gt; which has a &lt;code&gt;request&lt;/code&gt; field as the second argument to server actions. You can use this to access to the HTTP Request sent for your action and get the headers from it for things like auth.&lt;/p&gt; &#xA; &lt;p&gt;We now return a tuple where the first argument is the current submission, and the second is the submit function it also has a progressive enhancible form attached to it &lt;code&gt;logout.Form&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h3&gt;üÜï HttpStatusCode, HttpHeader&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;export default function NotFound() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;HttpStatusCode code={404} /&amp;gt;&#xA;      &amp;lt;HttpHeader name=&#34;my-header&#34; value=&#34;header-value&#34; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;p&gt;All credit for the work on Forms and Sessions goes to the @remix-run team, MIT License, Copyright 2021 Remix Software Inc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>transitive-bullshit/nextjs-notion-starter-kit</title>
    <updated>2022-09-26T01:39:16Z</updated>
    <id>tag:github.com,2022-09-26:/transitive-bullshit/nextjs-notion-starter-kit</id>
    <link href="https://github.com/transitive-bullshit/nextjs-notion-starter-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deploy your own Notion-powered website in minutes with Next.js and Vercel.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://transitivebullsh.it/nextjs-notion-starter-kit&#34;&gt; &lt;img alt=&#34;Example article page&#34; src=&#34;https://user-images.githubusercontent.com/552829/160132094-12875e09-41ec-450a-80fc-ae8cd488129d.jpg&#34; width=&#34;689&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Next.js Notion Starter Kit&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The perfect starter kit for building websites with Next.js and Notion.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/transitive-bullshit/nextjs-notion-starter-kit/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/transitive-bullshit/nextjs-notion-starter-kit/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://prettier.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-prettier-brightgreen.svg?sanitize=true&#34; alt=&#34;Prettier Code Formatting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;This repo is what I use to power my personal blog and portfolio site &lt;a href=&#34;https://transitivebullsh.it&#34;&gt;transitivebullsh.it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It uses Notion as a CMS, &lt;a href=&#34;https://github.com/NotionX/react-notion-x&#34;&gt;react-notion-x&lt;/a&gt;, &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;, and &lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup only takes a few minutes (&lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/site.config.ts&#34;&gt;single config file&lt;/a&gt;) üí™&lt;/li&gt; &#xA; &lt;li&gt;Robust support for Notion content via &lt;a href=&#34;https://github.com/NotionX/react-notion-x&#34;&gt;react-notion-x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built using Next.js, TS, and React&lt;/li&gt; &#xA; &lt;li&gt;Excellent page speeds&lt;/li&gt; &#xA; &lt;li&gt;Smooth image previews&lt;/li&gt; &#xA; &lt;li&gt;Automatic social images&lt;/li&gt; &#xA; &lt;li&gt;Automatic pretty URLs&lt;/li&gt; &#xA; &lt;li&gt;Automatic table of contents&lt;/li&gt; &#xA; &lt;li&gt;Full support for dark mode&lt;/li&gt; &#xA; &lt;li&gt;Quick search via CMD+K / CMD+P&lt;/li&gt; &#xA; &lt;li&gt;Responsive for different devices&lt;/li&gt; &#xA; &lt;li&gt;Optimized for Next.js and Vercel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs-notion-starter-kit.transitivebullsh.it&#34;&gt;Default demo&lt;/a&gt; - Deployed from the &lt;code&gt;main&lt;/code&gt; branch&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://transitivebullsh.it&#34;&gt;My site&lt;/a&gt; - Deployed from the &lt;code&gt;transitive-bullshit&lt;/code&gt; branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;All config is defined in &lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/site.config.ts&#34;&gt;site.config.ts&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project requires a recent version of Node.js (&amp;gt;= 14.17).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork / clone this repo&lt;/li&gt; &#xA; &lt;li&gt;Change a few values in &lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/site.config.ts&#34;&gt;site.config.ts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt; to test locally&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run deploy&lt;/code&gt; to deploy to vercel üí™&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I tried to make configuration as easy as possible ‚Äî All you really need to do to get started is edit &lt;code&gt;rootNotionPageId&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We recommend duplicating the &lt;a href=&#34;https://notion.so/7875426197cf461698809def95960ebf&#34;&gt;default page&lt;/a&gt; as a starting point, but you can use any public notion page you want.&lt;/p&gt; &#xA;&lt;p&gt;Make sure your root Notion page is &lt;strong&gt;public&lt;/strong&gt; and then copy the link to your clipboard. Extract the last part of the URL that looks like &lt;code&gt;7875426197cf461698809def95960ebf&lt;/code&gt;, which is your page&#39;s Notion ID.&lt;/p&gt; &#xA;&lt;p&gt;In order to find your Notion workspace ID (optional), just load any of your site&#39;s pages into your browser and open up the developer console. There will be a global variable that you can access called &lt;code&gt;block&lt;/code&gt; which is the Notion data for the current page. If you enter &lt;code&gt;block.space_id&lt;/code&gt;, it will print out your page&#39;s workspace ID.&lt;/p&gt; &#xA;&lt;p&gt;I recommend setting up a collection on your home page that contains all of your articles / projects / content. There are no structural constraints on your Notion workspace, however, so feel free to add content as you normally would in Notion.&lt;/p&gt; &#xA;&lt;h2&gt;URL Paths&lt;/h2&gt; &#xA;&lt;p&gt;The app defaults to slightly different URL paths in dev vs prod (though pasting any dev pathname into prod will work and vice-versa).&lt;/p&gt; &#xA;&lt;p&gt;In development, it will use &lt;code&gt;/nextjs-notion-blog-d1b5dcf8b9ff425b8aef5ce6f0730202&lt;/code&gt; which is a slugified version of the page&#39;s title suffixed with its Notion ID. I&#39;ve found that it&#39;s really useful to always have the Notion Page ID front and center during local development.&lt;/p&gt; &#xA;&lt;p&gt;In production, it will use &lt;code&gt;/nextjs-notion-blog&lt;/code&gt; which is a bit nicer as it gets rid of the extra ID clutter.&lt;/p&gt; &#xA;&lt;p&gt;The mapping of Notion ID to slugified page titles is done automatically as part of the build process. Just keep in mind that if you plan on changing page titles over time, you probably want to make sure old links will still work, and we don&#39;t currently provide a solution for detecting old links aside from Next.js&#39;s built-in &lt;a href=&#34;https://nextjs.org/docs/api-reference/next.config.js/redirects&#34;&gt;support for redirects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/lib/map-page-url.ts&#34;&gt;mapPageUrl&lt;/a&gt; and &lt;a href=&#34;https://github.com/NotionX/react-notion-x/raw/master/packages/notion-utils/src/get-canonical-page-id.ts&#34;&gt;getCanonicalPageId&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can override the default slug generation on a per-page basis by adding a &lt;code&gt;Slug&lt;/code&gt; text property to your database. Any page which has a &lt;code&gt;Slug&lt;/code&gt; property will use that as its slug.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: if you have multiple pages in your workspace with the same slugified name, the app will throw an error letting you know that there are duplicate URL pathnames.&lt;/p&gt; &#xA;&lt;h2&gt;Preview Images&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Example preview image&#34; src=&#34;https://user-images.githubusercontent.com/552829/160142320-35343317-aa9e-4710-bcf7-67e5cdec586d.gif&#34; width=&#34;458&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://nextjs.org/docs/api-reference/next/image&#34;&gt;next/image&lt;/a&gt; to serve images efficiently, with preview images optionally generated via &lt;a href=&#34;https://github.com/transitive-bullshit/lqip-modern&#34;&gt;lqip-modern&lt;/a&gt;. This gives us extremely optimized image support for sexy smooth images.&lt;/p&gt; &#xA;&lt;p&gt;Preview images are &lt;strong&gt;enabled by default&lt;/strong&gt;, but they can be slow to generate, so if you want to disable them, set &lt;code&gt;isPreviewImageSupportEnabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;site.config.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Redis&lt;/h3&gt; &#xA;&lt;p&gt;If you want to cache generated preview images to speed up subsequent builds, you&#39;ll need to first set up an external &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt; data store. To enable redis caching, set &lt;code&gt;isRedisEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;site.config.ts&lt;/code&gt; and then set &lt;code&gt;REDIS_HOST&lt;/code&gt; and &lt;code&gt;REDIS_PASSWORD&lt;/code&gt; environment variables to point to your redis instance.&lt;/p&gt; &#xA;&lt;p&gt;You can do this locally by adding a &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REDIS_HOST=&#39;TODO&#39;&#xA;REDIS_PASSWORD=&#39;TODO&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not sure which Redis provider to use, we recommend &lt;a href=&#34;https://redis.com&#34;&gt;Redis Labs&lt;/a&gt;, which provides a free plan.&lt;/p&gt; &#xA;&lt;p&gt;Note that preview images and redis caching are both optional features. If you‚Äôd rather not deal with them, just disable them in your site config.&lt;/p&gt; &#xA;&lt;h2&gt;Styles&lt;/h2&gt; &#xA;&lt;p&gt;All CSS styles that customize Notion content are located in &lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/styles/notion.css&#34;&gt;styles/notion.css&lt;/a&gt;. They mainly target global CSS classes exported by react-notion-x &lt;a href=&#34;https://github.com/NotionX/react-notion-x/raw/master/packages/react-notion-x/src/styles.css&#34;&gt;styles.css&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every notion block gets its own unique classname, so you can target individual blocks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.notion-block-260baa77f1e1428b97fb14ac99c7c385 {&#xA;  display: none;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dark Mode&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Light Mode&#34; src=&#34;https://transitive-bs.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F83ea9f0f-4761-4c0b-b53e-1913627975fc%2Ftransitivebullsh.it_-opt.jpg?table=block&amp;amp;id=ed7e8f60-c6d1-449e-840b-5c7762505c44&amp;amp;spaceId=fde5ac74-eea3-4527-8f00-4482710e1af3&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; width=&#34;45%&#34;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img alt=&#34;Dark Mode&#34; src=&#34;https://transitive-bs.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc0839d6c-7141-48df-8afd-69b27fed84aa%2Ftransitivebullsh.it__(1)-opt.jpg?table=block&amp;amp;id=23b11fe5-d6df-422d-9674-39cf7f547523&amp;amp;spaceId=fde5ac74-eea3-4527-8f00-4482710e1af3&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; width=&#34;45%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Dark mode is fully supported and can be toggled via the sun / moon icon in the footer.&lt;/p&gt; &#xA;&lt;h2&gt;Automatic Social Images&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Example social image&#34; src=&#34;https://user-images.githubusercontent.com/552829/162001133-34d4cf24-123a-4569-a540-f683b22830d1.jpeg&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;All Open Graph and social meta tags are generated from your Notion content, which makes social sharing look professional by default.&lt;/p&gt; &#xA;&lt;p&gt;Social images are generated automatically using headless chrome. You can tweak the default React template for social images by editing &lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/pages/api/social-image.tsx&#34;&gt;api/social-images.tsx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can view an example social image live in production &lt;a href=&#34;https://transitivebullsh.it/api/social-image?id=dfc7f709-ae3e-42c6-9292-f6543d5586f0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Automatic Table of Contents&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Smooth ToC Scrollspy&#34; src=&#34;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcb2df62d-9028-440b-964b-117711450921%2Ftoc2.gif?table=block&amp;amp;id=d7e9951b-289c-4ff2-8b82-b0a61fe260b1&amp;amp;cache=v2&#34; width=&#34;240&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;By default, every article page will have a table of contents displayed as an &lt;code&gt;aside&lt;/code&gt; on desktop. It uses &lt;strong&gt;scrollspy&lt;/strong&gt; logic to automatically update the current section as the user scrolls through your document, and makes it really easy to jump between different sections.&lt;/p&gt; &#xA;&lt;p&gt;If a page has less than &lt;code&gt;minTableOfContentsItems&lt;/code&gt; (default 3), the table of contents will be hidden. It is also hidden on the index page and if the browser window is too small.&lt;/p&gt; &#xA;&lt;p&gt;This table of contents uses the same logic that Notion uses for its built-in Table of Contents block (see &lt;a href=&#34;https://github.com/NotionX/react-notion-x/raw/master/packages/notion-utils/src/get-page-table-of-contents.ts&#34;&gt;getPageTableOfContents&lt;/a&gt; for the underlying logic).&lt;/p&gt; &#xA;&lt;h2&gt;Responsive&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Mobile article page&#34; src=&#34;https://user-images.githubusercontent.com/552829/160132983-c2dd5830-80b3-4a0e-a8f1-abab5dbeed11.jpg&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;All pages are designed to be responsive across common device sizes.&lt;/p&gt; &#xA;&lt;h2&gt;Analytics&lt;/h2&gt; &#xA;&lt;p&gt;Analytics are an optional feature that are easy to enable if you want.&lt;/p&gt; &#xA;&lt;h3&gt;Fathom Analytics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://usefathom.com/ref/42TFOZ&#34;&gt;Fathom&lt;/a&gt; provides a lightweight alternative to Google Analytics.&lt;/p&gt; &#xA;&lt;p&gt;To enable, just add a &lt;code&gt;NEXT_PUBLIC_FATHOM_ID&lt;/code&gt; environment variable, which will only be used in production.&lt;/p&gt; &#xA;&lt;h3&gt;PostHog Analytics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://posthog.com/&#34;&gt;PostHog&lt;/a&gt; provides a lightweight, &lt;strong&gt;open source&lt;/strong&gt; alternative to Google Analytics.&lt;/p&gt; &#xA;&lt;p&gt;To enable, just add a &lt;code&gt;NEXT_PUBLIC_POSTHOG_ID&lt;/code&gt; environment variable, which will only be used in production.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using Redis, analytics, or any other feature which requires environment variables, then you&#39;ll need to &lt;a href=&#34;https://vercel.com/docs/concepts/projects/environment-variables&#34;&gt;add them to your Vercel project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to test your redis builds with GitHub Actions, then you&#39;ll need to edit the &lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/.github/workflows/build.yml&#34;&gt;default build action&lt;/a&gt; to add &lt;code&gt;REDIS_HOST&lt;/code&gt; and &lt;code&gt;REDIS_PASSWORD&lt;/code&gt;. Here is an &lt;a href=&#34;https://github.com/transitive-bullshit/nextjs-notion-starter-kit/raw/transitive-bullshit/.github/workflows/build.yml#L17-L21&#34;&gt;example from my personal branch&lt;/a&gt;. You&#39;ll also need to add these environment variables to your GitHub repo as &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;repository secrets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/transitive-bullshit/nextjs-notion-starter-kit/main/contributing.md&#34;&gt;contribution guide&lt;/a&gt; and join our amazing list of &lt;a href=&#34;https://github.com/transitive-bullshit/nextjs-notion-starter-kit/graphs/contributors&#34;&gt;contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT ¬© &lt;a href=&#34;https://transitivebullsh.it&#34;&gt;Travis Fischer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support my open source work by &lt;a href=&#34;https://twitter.com/transitive_bs&#34;&gt;following me on twitter &lt;img src=&#34;https://storage.googleapis.com/saasify-assets/twitter-logo.svg?sanitize=true&#34; alt=&#34;twitter&#34; height=&#34;24px&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>