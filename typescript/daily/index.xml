<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-12T01:42:42Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>teaxyz/cli</title>
    <updated>2022-11-12T01:42:42Z</updated>
    <id>tag:github.com,2022-11-12:/teaxyz/cli</id>
    <link href="https://github.com/teaxyz/cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the unified package manager&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://tea.xyz/banner.png&#34; alt=&#34;tea&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;tea is not a package manager.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;tea is unified packaging infrastructure&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From the creator of &lt;a href=&#34;https://brew.sh&#34;&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;, tea is a standalone, binary download for all platforms that puts the entire open source ecosystem at your fingertips. Casually and effortlessly use the latest and greatest or the oldest and most mature from any layer of any stack. Break down the silos between programming communities, throw together scripts that use entirely separate tools and languages and share them with the world with a simple one-liner.&lt;/p&gt; &#xA;&lt;p&gt;All you need is &lt;code&gt;tea&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;tea is pre v1. This means there may still be some niggles in day to day use. It also means that you should absolutely get involved. This is the key and golden time when getting involved is both easy and hugely fun. We look forward to meeting you 👊&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;tea/cli 0.12.1&lt;/h1&gt; &#xA;&lt;p&gt;Open source is a treasure trove—yet those chests are sealed with gnarly locks. tea is the key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea +rust-lang.org&#xA;&#xA;tea: installing rust-lang.org and 13 other packages into a temporary sandbox&#xA;when done type: exit&#xA;&#xA;tea $ cat &amp;lt;&amp;lt;EOF &amp;gt;hello.rs&#xA;fn main() {&#xA;  println!(&#34;Hello World!&#34;);&#xA;}&#xA;EOF&#xA;$ rustc hello.rs -o hello&#xA;$ ./hello&#xA;Hello World!&#xA;&#xA;tea $ exit&#xA;&#xA;$ rustc&#xA;command not found: rustc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tea doesn’t &lt;em&gt;install&lt;/em&gt; packages—at least not in a conventional sense—we &lt;em&gt;stow&lt;/em&gt; them in &lt;code&gt;~/.tea&lt;/code&gt;†. Your system remains pristine and isolated from tea’s activity. But everything is right there when you need it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;† &lt;em&gt;finally&lt;/em&gt; a package manager where all the packages are &lt;em&gt;relocatable&lt;/em&gt; (like they should be).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;tea Pipelines&lt;/h3&gt; &#xA;&lt;p&gt;tea’s &lt;code&gt;+pkg&lt;/code&gt; syntax puts the whole open source ecosystem at your fingertips, if you stop at the &lt;code&gt;+pkg&lt;/code&gt; then the above happens—we open a new shell with those packages in the environment—but if you keep typing you can construct direct usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea +nodejs.org npx --yes browser-sync start --server&#xA;# ^^ one-liner to start a local web server with live reload&#xA;&#xA;$ sh &amp;lt;(curl tea.xyz) +nodejs.org npx --yes browser-sync start --server&#xA;# ^^ same one-liner but works for anyone on the Internet&#xA;# (if tea is already installed, it uses it, if not it *doesn’t* install tea,&#xA;#  a temporary sandbox is created)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compose everything, combine everything—just like the UNIX philosophy envisaged. Which leads us to &lt;code&gt;tea&lt;/code&gt;-pipelines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea +gnu.org/wget wget -qO- tea.xyz/white-paper | tea +charm.sh/glow glow -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Notably, with &lt;code&gt;-X&lt;/code&gt; syntax this can expressed more concisely:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea -X wget -qO- tea.xyz/white-paper | tea -X glow -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;h3&gt;Further Examples&lt;/h3&gt;&lt;/summary&gt; &#xA;  &lt;p&gt;It’s 202x so obviously we also can download scripts from the Internet:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sh &amp;lt;(curl tea.xyz) +charm.sh/gum https://github.com/charmbracelet/gum/blob/main/examples/demo.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Want to try out the latest version of node, but not sure if it will work with your project? &lt;em&gt;tea makes it easy.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea +nodejs.org^19 npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;One liner to create a react app:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sh &amp;lt;(curl tea.xyz) -X npx create-react-app my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA; &lt;p&gt;tea pipelines are so interesting we intend to have a dedicated showcase for them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;tea: the Universal Interpreter&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea https://github.com/teaxyz/demos/blob/main/demo.go input.txt&#xA;tea: installing go 1.18.3&#xA;go: running demo.go&#xA;…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this basic example we know to install &lt;code&gt;go&lt;/code&gt; first based on the file extension. Obvious right? Which is why we didn’t stop there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea favicon-generator.sh input.png&#xA;tea: installing image-magick, optipng, guetzli and 3 other packages…&#xA;…&#xA;output: favicon-128.png…&#xA;&#xA;$ cat favicon-generator.sh&#xA;#!/usr/bin/env tea&#xA;#---&#xA;# args: [/bin/sh, -e]&#xA;# dependencies:&#xA;#     imagemagick.org: 4&#xA;#     optipng.sourceforge.net: 1&#xA;# [snip]…&#xA;#---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tea reads a file’s YAML front-matter, allowing you to roll in the entire open source ecosystem for your scripts, gists and one-liners. While it runs, the script has these dependencies in its environment, but the rest of your system will never know about them.&lt;/p&gt; &#xA;&lt;p&gt;We also know a little more magic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea -X node&#xA;tea: installing node@18.9.1&#xA;Welcome to Node.js v18.9.1.&#xA;Type &#34;.help&#34; for more information.&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typically &lt;code&gt;tea&lt;/code&gt; uses fully-qualified-names for packages, but we know what tools they provide, so as long as you know what tool you’re looking for we can figure out the rest.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;dependencies:&#xA; nodejs.org: 19&#xA; npmjs.com:&#xA;   package.json:&#xA;     dependencies:&#xA;       react: ^18&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;tea: the universal virtual‑environment manager&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ deno&#xA;zsh: command not found: deno&#xA;&#xA;$ echo $PATH&#xA;/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin&#xA;&#xA;$ cd my-project&#xA;$ deno&#xA;tea: installing deno.land^1.22&#xA;deno 1.27.0&#xA;&amp;gt; ^D&#xA;&#xA;$ env&#xA;PATH=~/.tea/deno.land/v1.27.0/bin:/usr/bin:/bin&#xA;SRCROOT=/src/my-project&#xA;VERSION=…&#xA;…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;i&gt;What is this sourcery?&lt;/i&gt;&lt;/summary&gt;&#xA;  &lt;br&gt; &#xA;  &lt;p&gt;tea uses a shell hook to insert the precise tooling your project needs into your shell environment. Development is now containerized at the &lt;em&gt;package manager&lt;/em&gt; level. No longer do you need to worry about your team being on different versions of foundational tooling nor do you need to worry about system level updates breaking different projects you’re working on.&lt;/p&gt; &#xA;  &lt;p&gt;There are thousands of version managers for the thousands of tools they support. Probably it’s time we stopped that duplicated effort.&lt;/p&gt; &#xA;  &lt;p&gt;Projects can specify precisely what they need and you can install those requirements precisely be it today, tomorrow or in ten years.&lt;/p&gt; &#xA;  &lt;p&gt;In the above example if &lt;code&gt;deno&lt;/code&gt; is not yet installed we insert a hook so trying to execute it will install it first.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;i&gt;PSA:&lt;/i&gt; Stop using Docker&lt;/summary&gt;&#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Docker is great for deployment and cross compilation, but… let’s face it: it sucks for dev.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;em&gt;Docker stifles builders&lt;/em&gt;. It constricts you; you’re immalleable; tech marches onwards but your docker container remains immobile. &lt;em&gt;Nobody knows how to use &lt;code&gt;docker&lt;/code&gt;&lt;/em&gt;. Once that &lt;code&gt;Dockerfile&lt;/code&gt; is set up, nobody dares touch it.&lt;/p&gt; &#xA;  &lt;p&gt;And let’s face it, getting your personal dev and debug tools working inside that image is incredibly frustrating. Why limit your potential?&lt;/p&gt; &#xA;  &lt;p&gt;Keep deploying with Docker, but use tea to develop.&lt;/p&gt; &#xA;  &lt;p&gt;Then when you do deploy you may as well install those deps with tea.&lt;/p&gt; &#xA;  &lt;p&gt;Frankly, tea is properly versioned unlike system packagers, so with tea your deployments actually remain &lt;em&gt;more&lt;/em&gt; stable.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You need 34 dependencies to compile our white-paper but with tea there’s nothing to think about:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/teaxyz/white-paper&#xA;$ cd white-paper&#xA;$ make  #†&#xA;tea: installing pandoc.org and 33 other dependencies…&#xA;…&#xA;$ open tea.white-paper.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our white-paper’s dependencies are written in plain markdown in our &lt;code&gt;README&lt;/code&gt;. tea sets up a virtual environment for them simply by stepping into the directory.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;† on macOS you may need to do &lt;code&gt;tea -S&lt;/code&gt; first since we re-use the system make (we try to detect system installed deps) and thus we cannot intercept the call&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;we’ll automatically load and unload completions&lt;/li&gt; &#xA;  &lt;li&gt;we’ll allow customizations per package for your project&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Executable Markdown&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; has (justifiably) become the standard documentation format of development. How about instead of writing scripts with comments, we write documentation that can be &lt;em&gt;run&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea .  # interprets `# Getting Started`, could also be `tea ./README.md`&#xA;tea: npm install&#xA;tea: npm start&#xA;&#xA;$ sh &amp;lt;(curl tea.xyz) https://github.com/my/project&#xA;tea: cloning…&#xA;tea: npm start&#xA;&#xA;$ git clone https://github.com/my/project&#xA;$ cd project&#xA;$ tea build&#xA;tea: executing `# Build`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using these scripts in CI is easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - uses: teaxyz/setup@v0&#xA;    with:&#xA;      target: build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/setup&#34;&gt;teaxyz/setup&lt;/a&gt; for all that you can do with our GitHub Action.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA; &lt;p&gt;This is a limited set of first steps exploring the idea of executable markdown. We intend to sensibly build out concepts for making entire documents executable, and we’d like your help with that. Start a &lt;a href=&#34;https://github.com/orgs/teaxyz/discussions&#34;&gt;discussion&lt;/a&gt; about it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;tea is a standalone binary so, if you like, you can just download it yourself. For a little more magic†, however, we recommend our installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh &amp;lt;(curl https://tea.xyz)&#xA;# • asks you to confirm before it sets tea up in `~/.tea`&#xA;# • asks you to confirm before adding one line to your `~/.shellrc`&#xA;# • asks you to confirm before making a `/usr/local/bin/tea` symlink&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;† if you want tea’s virtual environment manager functionality, the installer is the easiest way.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In fact, the tea one-liner abstracts away installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sh &amp;lt;(curl tea.xyz) https://example.com/script.ts&#xA;&#xA;# works the same as:&#xA;$ tea https://example.com/script.ts&#xA;&#xA;# if tea is installed, our one-liner uses the tea installation, if it’s not&#xA;# installed then it **doesn’t install tea** or any dependencies, it creates a&#xA;# sandbox and runs everything in there&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now in your blog posts, tweets and tutorials you don’t have to start with any “how to install tea” preamble nor will they need to google anything. If they want to learn about tea first they can go to the same URL as they’re curl’ing. We already work on Linux, macOS, and WSL; soon we’ll support Windows natively.&lt;/p&gt; &#xA;&lt;p&gt;As a bonus, the installer also updates tea.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;Now see here fella’, I &lt;em&gt;hate&lt;/em&gt; installers…&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We get it! &lt;em&gt;We hate installers&lt;/em&gt;. That’s why we package everything! If you don’t want it, then we fully support you in that.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;i&gt;Installing Without the Installer&lt;/i&gt;&lt;/summary&gt;&#xA;  &lt;br&gt; &#xA;  &lt;p&gt;&lt;code&gt;tea&lt;/code&gt; is a single binary that you can &lt;a href=&#34;https://raw.githubusercontent.com/teaxyz/releases&#34;&gt;install yourself&lt;/a&gt;. If you prefer &lt;code&gt;curl dist.tea.xyz&lt;/code&gt; for a &lt;em&gt;plain/text&lt;/em&gt; listing of binary downloads for all platforms.&lt;/p&gt; &#xA;  &lt;p&gt;On macOS you will probably need to unquarantine the binary:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ xattr -d com.apple.quarantine ./tea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;You can try it out from the download location, but you will probably want to move it to &lt;code&gt;/usr/local/bin&lt;/code&gt; or another directory in your &lt;code&gt;PATH&lt;/code&gt; if you want to “install” it.&lt;/p&gt; &#xA;  &lt;p&gt;Now &lt;code&gt;tea&lt;/code&gt;’s installed you can omit any instance of &lt;code&gt;sh &amp;lt;(curl tea.xyz)&lt;/code&gt; and instead use your locally installed copy of &lt;code&gt;tea&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;Our (optional) magic &lt;code&gt;PATH&lt;/code&gt; restructuring requires a hook in your &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;add-zsh-hook -Uz chpwd(){ source &amp;lt;(tea -Eds) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;If this sourcery seems a bit much, you can just use tea as an interpreter instead. eg. &lt;code&gt;tea npm start&lt;/code&gt; will execute the correct &lt;code&gt;npm&lt;/code&gt; for your environment.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;i&gt;Uninstalling tea&lt;/i&gt;&lt;/summary&gt;&#xA;  &lt;br&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can delete everything under &lt;code&gt;~/.tea&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;There’s also a one-liner added to your &lt;code&gt;~/.zshrc&lt;/code&gt; you should remove.&lt;/li&gt; &#xA;   &lt;li&gt;Finally delete &lt;code&gt;/usr/local/bin/tea&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Usage as an Environment Manager&lt;/h2&gt; &#xA;&lt;p&gt;You’re a developer, installing tools globally makes no sense. With tea the tools you need per project or script are available to that workspace as &lt;em&gt;virtual environments&lt;/em&gt;. Our magic works from depths of libc to the heights of the latests fads in CSS precompilers. All versions†. All platforms‡.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;† We’re new software, give us time to achieve this promise.&lt;br&gt; ‡ Windows (native, we support WSL), Raspberry Pi, BeOS, etc. coming soon!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When you &lt;code&gt;cd&lt;/code&gt; into a project in your terminal, tea sets up the environment so your tools “just work”. To do this it looks for a dependencies table in your &lt;code&gt;README&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Using the &lt;code&gt;README&lt;/code&gt; may seem weird, but really it&#39;s the right place to document your dependencies. Typically in open source this information is barely documented, incorrectly documented or duplicated (incorrectly) in various hard to find places. No longer.&lt;/p&gt; &#xA; &lt;p&gt;Additionally this makes use of tea &lt;em&gt;optional&lt;/em&gt;. Your team or your users can source your dependencies themselves if they want. It says right there in a human readable form in the &lt;code&gt;README&lt;/code&gt; what they need to get.&lt;/p&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;i&gt;Umm, I hate this, can I use a different file?&lt;/i&gt;&lt;/summary&gt; &#xA;  &lt;p&gt;You can use &lt;code&gt;package.json&lt;/code&gt; instead:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;tea&#34;: {&#xA;    &#34;dependencies&#34;: [{ &#34;nodejs.org&#34;: 18 }]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;We check &lt;code&gt;README.md&lt;/code&gt; before &lt;code&gt;package.json&lt;/code&gt;. You can force use of &lt;code&gt;package.json&lt;/code&gt; by disabling magic with &lt;code&gt;--muggle&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For an example see our “&lt;a href=&#34;https://raw.githubusercontent.com/teaxyz/cli/main/#dependencies&#34;&gt;dependencies&lt;/a&gt;” section (teaception: we use tea to build tea).&lt;/p&gt; &#xA;&lt;p&gt;You can check what environment this generates with &lt;code&gt;tea&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tea --env --dump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--env&lt;/code&gt; specifies that tea will generate an environment based on the source control checkout. So if you’re using git we’ll look around for a &lt;code&gt;.git&lt;/code&gt; directory and consider that the &lt;code&gt;SRCROOT&lt;/code&gt; for your project. Then we check the &lt;code&gt;README.md&lt;/code&gt; there to gather the environment information.&lt;/p&gt; &#xA;&lt;p&gt;tea attempts to further enhance your environment based on your workspace context:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Extracted from the &lt;code&gt;README&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SRCROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;We descend towards root until we find a source control marker, eg. &lt;code&gt;.git&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MANPATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;So &lt;code&gt;man …&lt;/code&gt; works for your deps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We also provide eg. &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt;, &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, &lt;code&gt;DEVELOPER_DIR&lt;/code&gt;, etc. so other tools can find your dependencies. We provide other variables for convenience too, like &lt;code&gt;GITHUB_SLUG&lt;/code&gt; (extracted from your &lt;code&gt;git remote&lt;/code&gt;) which can be surprisingly useful to automation scripts.&lt;/p&gt; &#xA;&lt;p&gt;These variables are also available to tea Scripts.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Usage as an Interpreter&lt;/h2&gt; &#xA;&lt;p&gt;You can use tea to execute pretty much any script from any location. We’ll auto-magically install the right interpreter (as an isolated virtual environment—there are no global consequences to your system).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tea my-script.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tea sees the &lt;code&gt;.py&lt;/code&gt; file extension, so it installs the latest version of Python and then executes the script.&lt;/p&gt; &#xA;&lt;p&gt;If you want more control over the python version then we need to edit the script’s YAML front-matter, eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python&#xA;&#xA;&#34;&#34;&#34;&#xA;---&#xA;dependencies:&#xA;  python.org: ^2.7&#xA;---&#xA;&#34;&#34;&#34;&#xA;&#xA;# snip …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tea will run the script with the latest version of Python that is &amp;gt;=2.7 but less than 3.0. If it&#39;s not installed we grab it, otherwise we use what is available.&lt;/p&gt; &#xA;&lt;p&gt;We also support &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt; parameters which are useful for tools that require a &lt;code&gt;run&lt;/code&gt; command like deno or go.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;#!/usr/bin/env deno&#xA;&#xA;/*---&#xA;dependencies:&#xA;  deno.land: ^1.27&#xA;args:&#xA;  - deno&#xA;  - run&#xA;  # we put the script filename on the end for you here&#xA;env:&#xA;  foo: {{srcroot}}/bar&#xA;---*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a &lt;code&gt;tea&lt;/code&gt; Shebang&lt;/h3&gt; &#xA;&lt;p&gt;You can &lt;code&gt;#!/usr/bin/env tea&lt;/code&gt;, and you’d possibly choose this because tea can do more than install dependencies. You may recall our earlier diatribe about tools sticking to what they’re good at—&lt;em&gt;we really believe this&lt;/em&gt;. Thus having tools evolve to be configurable for project environments is something we think should be left to &lt;em&gt;us&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;deno&lt;/code&gt; is a wonderful interpreter for JavaScript and TypeScript, but it has no project configuration capabilities which means if you want to use it for scripts you may have to mess around a little. We think deno should stay this way, and instead we can use tea:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;#!/usr/bin/env -S tea -E&#xA;&#xA;/* ---&#xA;dependencies:&#xA;  deno.land: ^1.18&#xA;args:&#xA;  - deno&#xA;  - run&#xA;  - --allow-net&#xA;  - --import-map={{ srcroot }}/import-map.json&#xA;  # ^^ we provide {{srcroot}} which can be enormously useful for scripting&#xA;  # note that you must use a `tea -E` shebang for this to work&#xA;--- */&#xA;&#xA;// snip …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which would go like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd&#xA;/src&#xA;$ ./script.ts my-arg&#xA;tea: ~/.tea/deno.land/v1.18/bin/deno run \&#xA;  --allow-net \&#xA;  --import-map=/src/import-map.json \&#xA;  /src/script.ts \&#xA;  my-arg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When called with &lt;code&gt;-E&lt;/code&gt; tea reads the virtual environment and injects any dependencies from there. Probably your project already specifies your &lt;code&gt;deno&lt;/code&gt; dependency, so the above YAML is possibly being redundant.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Magic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;tea&lt;/code&gt; codifies the concept of magic.&lt;/p&gt; &#xA;&lt;p&gt;In an environment where there is magic we try to be clever and infer what you want. Without magic we are strict and require precise specification of your intent.&lt;/p&gt; &#xA;&lt;p&gt;You can disable magic by specifying &lt;code&gt;--muggle&lt;/code&gt; or exporting &lt;code&gt;MAGIC=0&lt;/code&gt; to your shell environment.&lt;/p&gt; &#xA;&lt;p&gt;The primary magic we apply is determining if you want to use your virtual environment or not. Strictly &lt;code&gt;tea --env&lt;/code&gt; is required to inject it, but when magic is enabled we try to figure out if you &lt;em&gt;just wanted that&lt;/em&gt;. Our goal is to be smart and useful for your productivity.&lt;/p&gt; &#xA;&lt;p&gt;We do some magic per dependency. This is currently hard-coded logic in tea/cli itself, but we intend to make it general with a &lt;code&gt;magic.ts&lt;/code&gt; file per package in the &lt;a href=&#34;https://raw.githubusercontent.com/pantry.core&#34;&gt;pantry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently magic is limited (and a great place for contributions).&lt;/p&gt; &#xA;&lt;p&gt;For example, if we detect that your project is a GitHub Action we read the &lt;code&gt;action.yml&lt;/code&gt; and make the right version of node available.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you have suggestions or ideas, start a &lt;a href=&#34;https://github.com/orgs/teaxyz/discussions&#34;&gt;discussion&lt;/a&gt;. If we agree we’ll move it to an issue. Bug fixes straight to pull request or issue please!&lt;/p&gt; &#xA;&lt;p&gt;Probably the place you’ll want to start is by supplementing the &lt;a href=&#34;https://raw.githubusercontent.com/pantry.core&#34;&gt;pantry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking on &lt;code&gt;tea&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tea&lt;/code&gt; is written in &lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; using &lt;a href=&#34;https://deno.land&#34;&gt;deno&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/teaxyz/cli tea&#xA;cd tea&#xA;&#xA;tea run foo       # runs the local checkout passing `foo` as an argument&#xA;tea install-self  # deploys the local checkout into your `~/.tea`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Things we Need&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We really need more tests!&lt;/li&gt; &#xA; &lt;li&gt;We need test coverage information&lt;/li&gt; &#xA; &lt;li&gt;More magic for dependencies, eg. knowing what version of node should be in the env based on &lt;code&gt;.node-version&lt;/code&gt; files used for other version managers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Token Rewards&lt;/h2&gt; &#xA;&lt;p&gt;There isn’t a token &lt;em&gt;yet&lt;/em&gt; but when it’s brewed it’s quite possible there will be a little something extra for those who helped build tea. 😶‍🌫️&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;Where’s &lt;code&gt;tea install&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;tea works differently. It’s not “I want to install Freetype” it’s “I want to &lt;em&gt;use&lt;/em&gt; Freetype”.&lt;/p&gt; &#xA;&lt;p&gt;Look, we’re not idiots. We know there are occasions where a good ol’ &lt;code&gt;brew install&lt;/code&gt; is what you need. So—&lt;em&gt;for now&lt;/em&gt;—continue using &lt;code&gt;brew install&lt;/code&gt;. Longer term, we have plans for an extensible commands system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;tea is a set of packaging primitives&lt;/em&gt;. We want you to build entirely new things on top of tea. We want to integrate tea into your existing build tools, we eventually want to be the authoritative packaging datastore (isn’t it about time there was one of those?)&lt;/p&gt; &#xA;&lt;p&gt;Coming soon is &lt;a href=&#34;https://raw.githubusercontent.com/cmd&#34;&gt;tea/cmd&lt;/a&gt;. tea/cli will expose forks of this repo as commands the user can run utilizing the power of tea’s packaging primitives to do all that they can imagine. Maybe it’ll be you who writes the &lt;code&gt;tea install&lt;/code&gt; command? (If you do, try to do something new, eh? 😌)&lt;/p&gt; &#xA;&lt;h3&gt;May we interest you in a hack?&lt;/h3&gt; &#xA;&lt;p&gt;If you really want to put &lt;code&gt;tea&lt;/code&gt; through its paces, you can combine the search magic with your shell’s “command not found” logic, to get automatic &lt;code&gt;tea&lt;/code&gt; lookups.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details open&gt;&#xA;  &lt;summary&gt;&lt;h4&gt;&lt;code&gt;zsh&lt;/code&gt;&lt;/h4&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function command_not_found_handler {&#xA;  tea -X $*&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;h4&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/h4&gt;&lt;/summary&gt; &#xA;  &lt;p&gt;The following requires &lt;code&gt;bash^4&lt;/code&gt;; sadly macOS ships with v3.2, but &lt;code&gt;tea&lt;/code&gt; provides &lt;code&gt;+gnu.org/bash&lt;/code&gt;, and we’ve met very few people who want to use &lt;code&gt;bash&lt;/code&gt; on macs, though I bet you&#39;re out there).&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function command_not_found_handle {&#xA;  tea -X $*&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;&lt;h4&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/h4&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function fish_command_not_found&#xA;  tea -X $argv&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How do I find available packages?&lt;/h2&gt; &#xA;&lt;p&gt;We list all packages at &lt;a href=&#34;https://tea.xyz&#34;&gt;tea.xyz&lt;/a&gt;. Or &lt;code&gt;open ~/.tea/tea.xyz/var/pantry&lt;/code&gt;. We agree this is not great UX.&lt;/p&gt; &#xA;&lt;h2&gt;What are you doing to my computer?&lt;/h2&gt; &#xA;&lt;p&gt;We install compartmentalized packages to &lt;code&gt;~/.tea&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We then suggest you add our one-liner to your shell &lt;code&gt;.rc&lt;/code&gt; and a symlink for &lt;code&gt;/usr/local/bin/tea&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We might not have installed tea, if you used &lt;code&gt;sh &amp;lt;(curl tea.xyz) foo&lt;/code&gt; and tea wasn’t already installed, then you we only fetched any packages, including tea, temporarily.&lt;/p&gt; &#xA;&lt;h2&gt;I thought you were decentralized and web3 and shit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/white-paper&#34;&gt;tea is creating new technologies that will change how open source is funded&lt;/a&gt;. tea/cli is an essential part of that endeavor and is released prior to our protocol in order to bootstrap our holistic vision.&lt;/p&gt; &#xA;&lt;p&gt;We don’t subscribe to any particular “web” at tea.xyz, our blockchain component will be an implementation detail that you won’t need to think about (but we think you will want to).&lt;/p&gt; &#xA;&lt;h2&gt;Am I or my employer going to have to pay for open source now?&lt;/h2&gt; &#xA;&lt;p&gt;No. Software is a multi-trillion industry. We only have to skim a little off that to pay the entire open source ecosystem. Check out our &lt;a href=&#34;https://raw.githubusercontent.com/white-paper&#34;&gt;white-paper&lt;/a&gt; for the deets.&lt;/p&gt; &#xA;&lt;h2&gt;Packaging up tea packages with your &lt;code&gt;.app&lt;/code&gt;, etc.&lt;/h2&gt; &#xA;&lt;p&gt;Our packages are relocatable by default. Just keep the directory structure the same. And ofc. you are licensed to do so. Honestly we think you should absolutely bundle and deploy tea’s prefix with your software. We designed it so that it would be easier for you to do this than anything that has come before.&lt;/p&gt; &#xA;&lt;h2&gt;I have another question&lt;/h2&gt; &#xA;&lt;p&gt;Start a &lt;a href=&#34;https://github.com/orgs/teaxyz/discussions&#34;&gt;discussion&lt;/a&gt; and we’ll get back to you.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Appendix&lt;/h1&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be non‑intrusive &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;don’t interfere with our users’ systems or habits&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Be “just works” &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;our users have better things to do than fix us&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Error messages must be excellent &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;trust that if it comes to it, our users can fix things provided we give them a helping hand&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Be intuitive &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;being clever is good—but don’t be so clever nobody gets it&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Resist complexity &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;rethink the problem until a simpler solution emerges&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Be fast &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;we are in the way of our users’ real work, don’t make them wait&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;env: tea: No such file or directory&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you got this error message, you need to install tea: &lt;code&gt;sh &amp;lt;(curl https://tea.xyz)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;vs. &lt;code&gt;brew&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We don’t aim to replace &lt;code&gt;brew&lt;/code&gt;, we see our offerings as somewhat complementary. Still where we have overlapping features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tea doesn’t require you install the Xcode Command Line Tools&lt;/li&gt; &#xA; &lt;li&gt;tea packages are relocatable&lt;/li&gt; &#xA; &lt;li&gt;tea aims to be zippier in all usage&lt;/li&gt; &#xA; &lt;li&gt;tea doesn’t make global changes to your system&lt;/li&gt; &#xA; &lt;li&gt;tea aims to enhance the way you work, rather than impose the way you work&lt;/li&gt; &#xA; &lt;li&gt;tea installs independently for every user on the machine&lt;/li&gt; &#xA; &lt;li&gt;tea is somewhat decentralized and aims to be completely decentralized&lt;/li&gt; &#xA; &lt;li&gt;tea is a tight series of tight, easy-to-understand codebases&lt;/li&gt; &#xA; &lt;li&gt;tea starts building new releases for tools almost immediately&lt;/li&gt; &#xA; &lt;li&gt;tea’s packages are named in a fully-qualified manner&lt;/li&gt; &#xA; &lt;li&gt;tea’s philosophy is user-first and not tea-maintainer-first&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Tea Scripts&lt;/h2&gt; &#xA;&lt;p&gt;You can execute each of these with &lt;code&gt;tea foo&lt;/code&gt; where &lt;code&gt;foo&lt;/code&gt; is the name of the section.&lt;/p&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;FIXME&lt;/code&gt; would be nice to be able to specify tests here deno supports &lt;code&gt;--filter&lt;/code&gt; but that would require a little massaging.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export TMPDIR=${TMPDIR:-/tmp}&#xA;&#xA;deno test \&#xA; --allow-net \&#xA; --allow-read \&#xA; --allow-env=SRCROOT,GITHUB_TOKEN,TMPDIR,TEA_PREFIX \&#xA; --allow-run \&#xA; --import-map=$SRCROOT/import-map.json \&#xA; --allow-write=&#34;$TMPDIR&#34; \&#xA; --unstable \&#xA; &#34;$SRCROOT&#34;/tests/**/*.test.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Typecheck&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;deno check \&#xA;  --import-map=&#34;$SRCROOT&#34;/import-map.json \&#xA;  --unstable \&#xA;  src/app.ts \&#xA;  &#34;$SRCROOT&#34;/scripts/*.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;deno run \&#xA;  --import-map=&#34;$SRCROOT&#34;/import-map.json \&#xA;  --unstable \&#xA;  --allow-all \&#xA;  &#34;$SRCROOT&#34;/src/app.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;OUT=&#34;$1&#34;&#xA;if test -z &#34;$OUT&#34;; then&#xA;  OUT=&#34;./tea&#34;&#xA;else&#xA;  shift&#xA;fi&#xA;&#xA;deno compile \&#xA;  --allow-read \&#xA;  --allow-write \&#xA;  --allow-net \&#xA;  --allow-run \&#xA;  --allow-env \&#xA;  --unstable \&#xA;  --import-map=&#34;$SRCROOT/import-map.json&#34; \&#xA;  --output &#34;$OUT&#34; \&#xA;  &#34;$@&#34; \&#xA;  &#34;$SRCROOT/src/app.ts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Self&lt;/h3&gt; &#xA;&lt;p&gt;Installs this working copy into &lt;code&gt;~/.tea/tea.xyz/vx.y.z&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tea compile &#34;$TEA_PREFIX/tea.xyz/v$VERSION/bin/tea&#34;&#xA;&#34;$SRCROOT&#34;/scripts/repair.ts tea.xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deno.land&lt;/td&gt; &#xA;   &lt;td&gt;^1.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tea.xyz&lt;/td&gt; &#xA;   &lt;td&gt;^0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;macOS &amp;gt;= 11 || linux:glibc &amp;gt;= 23&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;A Brief Diatribe&lt;/h2&gt; &#xA;&lt;p&gt;Every programming language, every build system, every compiler, web server, database and email client seem to gravitate towards adding infinite features and complexity so that their users can do ever more and more.&lt;/p&gt; &#xA;&lt;p&gt;This is contrary to the UNIX philosophy: tools should do one thing and —by being tight and focused— do it &lt;em&gt;damn&lt;/em&gt; well. If they are composable and flexible then they can be combined, piped and leveraged into a larger, more capable toolbox. &lt;em&gt;The Internet is built with this toolbox.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nowadays every programming language reimplements the same set of libraries and tools because using a well-maintained, mature and portable library that lives higher up the stack adds too much complexity. This extends the adolescence of new languages, results in no single language even becoming truly state of the art and leads to degrees of duplication that make the open source ecosystem &lt;em&gt;fragile&lt;/em&gt;. This is to the detriment of all software, everywhere.&lt;/p&gt; &#xA;&lt;p&gt;tea removes this complexity and adds some much needed robustness for the good of the entire open source ecosystem, the larger Internet and the whole world of software.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TanStack/router</title>
    <updated>2022-11-12T01:42:42Z</updated>
    <id>tag:github.com,2022-11-12:/TanStack/router</id>
    <link href="https://github.com/TanStack/router" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 Type-safe router w/ built-in caching &amp; URL state management for JS/TS, React, Preact, Solid, Vue, Svelte and Angular&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://static.scarf.sh/a.png?x-pxid=d988eb79-b0fc-4a2b-8514-6a1ab932d188&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tanstack/router/raw/beta/media/header.png&#34; alt=&#34;TanStack Router Header&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🤖 Application Routing for JS/TS, React, Solid, Vue and Svelte&lt;/p&gt; &#xA;&lt;a href=&#34;https://twitter.com/intent/tweet?button_hashtag=TanStack&#34; target=&#34;\_parent&#34;&gt; &lt;img alt=&#34;#TanStack&#34; src=&#34;https://img.shields.io/twitter/url?color=%2308a0e9&amp;amp;label=%23TanStack&amp;amp;style=social&amp;amp;url=https%3A%2F%2Ftwitter.com%2Fintent%2Ftweet%3Fbutton_hashtag%3DTanStack&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://discord.com/invite/WrRKjPJ&#34; target=&#34;\_parent&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Discord-TanStack-%235865F2&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://npmjs.com/package/@tanstack/react-router&#34; target=&#34;\_parent&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/dm/@tanstack/react-router.svg?sanitize=true&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://bundlephobia.com/result?p=@tanstack/react-router&#34; target=&#34;\_parent&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://badgen.net/bundlephobia/minzip/@tanstack/react-router&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://raw.githubusercontent.com/TanStack/router/beta/#badge&#34;&gt; &lt;img alt=&#34;semantic-release&#34; src=&#34;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/tanstack/router/discussions&#34;&gt; &lt;img alt=&#34;Join the discussion on Github&#34; src=&#34;https://img.shields.io/badge/Github%20Discussions%20%26%20Support-Chat%20now!-blue&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://bestofjs.org/projects/react-router&#34;&gt;&lt;img alt=&#34;Best of JS&#34; src=&#34;https://img.shields.io/endpoint?url=https://bestofjs-serverless.now.sh/api/project-badge?fullName=tanstack%2Freact-router%26since=daily&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/tanstack/router&#34; target=&#34;\_parent&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/github/stars/tanstack/router.svg?style=social&amp;amp;label=Star&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://twitter.com/tan_stack&#34; target=&#34;\_parent&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/twitter/follow/tan_stack.svg?style=social&amp;amp;label=Follow @TanStack&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://twitter.com/tannerlinsley&#34; target=&#34;\_parent&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/twitter/follow/tannerlinsley.svg?style=social&amp;amp;label=Follow @TannerLinsley&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Enjoy this library? Try the entire &lt;a href=&#34;https://tanstack.com&#34;&gt;TanStack&lt;/a&gt;! &lt;a href=&#34;https://github.com/tannerlinsley/react-query&#34;&gt;React Query&lt;/a&gt;, &lt;a href=&#34;https://github.com/tanstack/react-table&#34;&gt;React Table&lt;/a&gt;, &lt;a href=&#34;https://github.com/tannerlinsley/react-charts&#34;&gt;React Charts&lt;/a&gt;, &lt;a href=&#34;https://github.com/tannerlinsley/react-virtual&#34;&gt;React Virtual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Visit &lt;a href=&#34;https://tanstack.com/router&#34;&gt;tanstack.com/router&lt;/a&gt; for docs, guides, API and more!&lt;/h2&gt; &#xA;&lt;h2&gt;Quick Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% TypeSafe &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Route Defs&lt;/li&gt; &#xA;   &lt;li&gt;Navigation&lt;/li&gt; &#xA;   &lt;li&gt;Relative Navigation&lt;/li&gt; &#xA;   &lt;li&gt;Search Params&lt;/li&gt; &#xA;   &lt;li&gt;Path Params&lt;/li&gt; &#xA;   &lt;li&gt;Loaders&lt;/li&gt; &#xA;   &lt;li&gt;Actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;1st Class Search Params &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Schemas + Validation&lt;/li&gt; &#xA;   &lt;li&gt;Parsing + Serialization&lt;/li&gt; &#xA;   &lt;li&gt;Immutable&lt;/li&gt; &#xA;   &lt;li&gt;Structural Sharing&lt;/li&gt; &#xA;   &lt;li&gt;Pre/Post Processing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in Caching &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stale-While-Revalidate&lt;/li&gt; &#xA;   &lt;li&gt;Max-Age&lt;/li&gt; &#xA;   &lt;li&gt;Auto Garbage Collection&lt;/li&gt; &#xA;   &lt;li&gt;Invalidation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Prefetching&lt;/li&gt; &#xA; &lt;li&gt;Automatic Prefetching&lt;/li&gt; &#xA; &lt;li&gt;Transitions&lt;/li&gt; &#xA; &lt;li&gt;Pending States&lt;/li&gt; &#xA; &lt;li&gt;Error Boundaries&lt;/li&gt; &#xA; &lt;li&gt;Code Splitting&lt;/li&gt; &#xA; &lt;li&gt;Layout Routes&lt;/li&gt; &#xA; &lt;li&gt;Easy Integration w/ external caches and storage (eg. React Query, Apollo, SWR, RTKQuery)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Use the force, Luke! --&gt;</summary>
  </entry>
  <entry>
    <title>containers/podman-desktop</title>
    <updated>2022-11-12T01:42:42Z</updated>
    <id>tag:github.com,2022-11-12:/containers/podman-desktop</id>
    <link href="https://github.com/containers/podman-desktop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Podman Desktop - A graphical tool for developing on containers and Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Podman Desktop - A graphical tool for developing on containers and Kubernetes&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Podman Desktop&#34; src=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/website/static/img/features/manage-containers.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#download&#34;&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#download&#34;&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#join-our-early-adopter-program-optional&#34;&gt;&lt;strong&gt;Join Our Early Adopter Program (Optional)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#roadmap&#34;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#contributing&#34;&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#communication&#34;&gt;&lt;strong&gt;Communication&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#code-of-conduct&#34;&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#license&#34;&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Podman Desktop is a graphical interface that enables application developers to seamlessly work with containers and Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;Podman Desktop installs, configures and keeps Podman up to date on your local environment. It provides a system tray, to check status and interact with your container engine without losing focus from other tasks. The desktop application provides a dashboard to interact with containers, images, pods and volumes but also configures your environment with your OCI registries and network settings. Podman Desktop also provides capabilities to connect and deploy pods to Kubernetes environments.&lt;/p&gt; &#xA;&lt;p&gt;Podman Desktop also supports &lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/#multiple-container-engine-support&#34;&gt;multiple container engines&lt;/a&gt;, pick your favourite one and use the tool!&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Check the downloads page on &lt;a href=&#34;https://podman-desktop.io/downloads&#34;&gt;podman-desktop.io/downloads&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h4&gt;Containers and pods dashboard&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build, run, manage, and debug both containers and pods&lt;/li&gt; &#xA; &lt;li&gt;Run Pods on your container engine or with Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;Convert your Pods to be running on Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;Manage multiple container engines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Multiple container engine support&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containers/podman&#34;&gt;Podman container engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/code-ready/crc&#34;&gt;crc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lima-vm/lima&#34;&gt;Podman Lima machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moby/moby&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Podman engine update support&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep &lt;code&gt;podman&lt;/code&gt; up-to-date on your PC by having Podman Desktop automatically install the newest version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;System tray support&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manage your Container engine&lt;/li&gt; &#xA; &lt;li&gt;Define your Kubernetes context&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Enterprise capabilities&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proxy Support&lt;/li&gt; &#xA; &lt;li&gt;OCI Image registries management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bridge between local and remote environments&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect and deploy to both local or remote Kubernetes environments&lt;/li&gt; &#xA; &lt;li&gt;Change your Kubernetes context and pick your deployment environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join our early adopter program! (optional)&lt;/h2&gt; &#xA;&lt;p&gt;We are seeking developers who are interested in improving Podman Desktop!&lt;/p&gt; &#xA;&lt;p&gt;Register your interest to join our Early Adopter Program by filling &lt;a href=&#34;https://forms.gle/ow73dV7Ce3YLzoXH7&#34; target=&#34;_blank&#34;&gt;this form&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is totally &lt;em&gt;optional&lt;/em&gt; and does not change any Podman Desktop features.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;All upcoming features are tracked with GitHub milestones.&lt;/p&gt; &#xA;&lt;p&gt;Check out all our &lt;a href=&#34;https://github.com/containers/podman-desktop/milestones&#34;&gt;future features!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Interested in fixing issues or contributing to Podman Desktop?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;🐛&lt;/span&gt; &lt;a href=&#34;https://github.com/containers/podman-desktop/issues/new/choose&#34;&gt;File bugs or feature requests on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🏁&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/CONTRIBUTING.md&#34;&gt;Read our contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;👌&lt;/span&gt; &lt;a href=&#34;https://github.com/containers/podman-desktop/pulls&#34;&gt;Review or contribute a pull request&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;p&gt;For all bug and feature requests please &lt;a href=&#34;https://github.com/containers/podman-desktop/issues/new/choose&#34;&gt;file a GitHub issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Discussions are done using &lt;a href=&#34;https://github.com/containers/podman-desktop/discussions/&#34;&gt;Github Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;https://app.slack.com/client/T09NY5SBT/C04A0L7LUFM&#34;&gt;#podman-desktop&lt;/a&gt; on the &lt;a href=&#34;https://slack.k8s.io/&#34;&gt;Kubernetes Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Hangout with us on &lt;a href=&#34;https://discordapp.com/invite/TCTB38RWpf&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project uses the &lt;a href=&#34;https://github.com/containers/common/raw/main/CODE-OF-CONDUCT.md&#34;&gt;Containers Community Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/containers/podman-desktop/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>