<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-15T01:37:10Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cheeriojs/cheerio</title>
    <updated>2024-08-15T01:37:10Z</updated>
    <id>tag:github.com,2024-08-15:/cheeriojs/cheerio</id>
    <link href="https://github.com/cheeriojs/cheerio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fast, flexible, and elegant library for parsing and manipulating HTML and XML.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;cheerio&lt;/h1&gt; &#xA;&lt;h5 align=&#34;center&#34;&gt;The fast, flexible, and elegant library for parsing and manipulating HTML and XML.&lt;/h5&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/cheeriojs/cheerio/actions/workflows/ci.yml&#34;&gt; &lt;img src=&#34;https://github.com/cheeriojs/cheerio/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://coveralls.io/github/cheeriojs/cheerio&#34;&gt; &lt;img src=&#34;https://img.shields.io/coveralls/github/cheeriojs/cheerio/main&#34; alt=&#34;Coverage&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/cheeriojs/cheerio/main/#backers&#34;&gt; &lt;img src=&#34;https://img.shields.io/opencollective/backers/cheerio&#34; alt=&#34;OpenCollective backers&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/cheeriojs/cheerio/main/#sponsors&#34;&gt; &lt;img src=&#34;https://img.shields.io/opencollective/sponsors/cheerio&#34; alt=&#34;OpenCollective sponsors&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cheeriojs/cheerio/wiki/Chinese-README&#34;&gt;中文文档 (Chinese Readme)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import * as cheerio from &#39;cheerio&#39;;&#xA;const $ = cheerio.load(&#39;&amp;lt;h2 class=&#34;title&#34;&amp;gt;Hello world&amp;lt;/h2&amp;gt;&#39;);&#xA;&#xA;$(&#39;h2.title&#39;).text(&#39;Hello there!&#39;);&#xA;$(&#39;h2&#39;).addClass(&#39;welcome&#39;);&#xA;&#xA;$.html();&#xA;//=&amp;gt; &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h2 class=&#34;title welcome&#34;&amp;gt;Hello there!&amp;lt;/h2&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install cheerio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;❤ Proven syntax:&lt;/strong&gt; Cheerio implements a subset of core jQuery. Cheerio removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ϟ Blazingly fast:&lt;/strong&gt; Cheerio works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;❁ Incredibly flexible:&lt;/strong&gt; Cheerio wraps around &lt;a href=&#34;https://github.com/inikulin/parse5&#34;&gt;parse5&lt;/a&gt; for parsing HTML and can optionally use the forgiving &lt;a href=&#34;https://github.com/fb55/htmlparser2/&#34;&gt;htmlparser2&lt;/a&gt;. Cheerio can parse nearly any HTML or XML document. Cheerio works in both browser and server environments.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Loading&lt;/h3&gt; &#xA;&lt;p&gt;First you need to load in the HTML. This step in jQuery is implicit, since jQuery operates on the one, baked-in DOM. With Cheerio, we need to pass in the HTML document.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ESM or TypeScript:&#xA;import * as cheerio from &#39;cheerio&#39;;&#xA;&#xA;// In other environments:&#xA;const cheerio = require(&#39;cheerio&#39;);&#xA;&#xA;const $ = cheerio.load(&#39;&amp;lt;ul id=&#34;fruits&#34;&amp;gt;...&amp;lt;/ul&amp;gt;&#39;);&#xA;&#xA;$.html();&#xA;//=&amp;gt; &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;ul id=&#34;fruits&#34;&amp;gt;...&amp;lt;/ul&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Selectors&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve loaded the HTML, you can use jQuery-style selectors to find elements within the document.&lt;/p&gt; &#xA;&lt;h4&gt;$( selector, [context], [root] )&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;selector&lt;/code&gt; searches within the &lt;code&gt;context&lt;/code&gt; scope which searches within the &lt;code&gt;root&lt;/code&gt; scope. &lt;code&gt;selector&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; can be a string expression, DOM Element, array of DOM elements, or cheerio object. &lt;code&gt;root&lt;/code&gt;, if provided, is typically the HTML document string.&lt;/p&gt; &#xA;&lt;p&gt;This selector method is the starting point for traversing and manipulating the document. Like in jQuery, it&#39;s the primary method for selecting elements in the document.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;.apple&#39;, &#39;#fruits&#39;).text();&#xA;//=&amp;gt; Apple&#xA;&#xA;$(&#39;ul .pear&#39;).attr(&#39;class&#39;);&#xA;//=&amp;gt; pear&#xA;&#xA;$(&#39;li[class=orange]&#39;).html();&#xA;//=&amp;gt; Orange&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering&lt;/h3&gt; &#xA;&lt;p&gt;When you&#39;re ready to render the document, you can call the &lt;code&gt;html&lt;/code&gt; method on the &#34;root&#34; selection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$.root().html();&#xA;//=&amp;gt;  &amp;lt;html&amp;gt;&#xA;//      &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&#xA;//      &amp;lt;body&amp;gt;&#xA;//        &amp;lt;ul id=&#34;fruits&#34;&amp;gt;&#xA;//          &amp;lt;li class=&#34;apple&#34;&amp;gt;Apple&amp;lt;/li&amp;gt;&#xA;//          &amp;lt;li class=&#34;orange&#34;&amp;gt;Orange&amp;lt;/li&amp;gt;&#xA;//          &amp;lt;li class=&#34;pear&#34;&amp;gt;Pear&amp;lt;/li&amp;gt;&#xA;//        &amp;lt;/ul&amp;gt;&#xA;//      &amp;lt;/body&amp;gt;&#xA;//    &amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to render the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML&#34;&gt;&lt;code&gt;outerHTML&lt;/code&gt;&lt;/a&gt; of a selection, you can use the &lt;code&gt;outerHTML&lt;/code&gt; prop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;.pear&#39;).prop(&#39;outerHTML&#39;);&#xA;//=&amp;gt; &amp;lt;li class=&#34;pear&#34;&amp;gt;Pear&amp;lt;/li&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also render the text content of a Cheerio object using the &lt;code&gt;text&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const $ = cheerio.load(&#39;This is &amp;lt;em&amp;gt;content&amp;lt;/em&amp;gt;.&#39;);&#xA;$(&#39;body&#39;).text();&#xA;//=&amp;gt; This is content.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &#34;DOM Node&#34; object&lt;/h3&gt; &#xA;&lt;p&gt;Cheerio collections are made up of objects that bear some resemblance to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Node&#34;&gt;browser-based DOM nodes&lt;/a&gt;. You can expect them to define the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tagName&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parentNode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;previousSibling&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nextSibling&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nodeValue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firstChild&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;childNodes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lastChild&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screencasts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vimeo.com/31950192&#34;&gt;https://vimeo.com/31950192&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This video tutorial is a follow-up to Nettut&#39;s &#34;How to Scrape Web Pages with Node.js and jQuery&#34;, using cheerio instead of JSDOM + jQuery. This video shows how easy it is to use cheerio and how much faster cheerio is than JSDOM + jQuery.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Cheerio in the real world&lt;/h2&gt; &#xA;&lt;p&gt;Are you using cheerio in production? Add it to the &lt;a href=&#34;https://github.com/cheeriojs/cheerio/wiki/Cheerio-in-Production&#34;&gt;wiki&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Does your company use Cheerio in production? Please consider &lt;a href=&#34;https://github.com/cheeriojs/cheerio?sponsor=1&#34;&gt;sponsoring this project&lt;/a&gt;! Your help will allow maintainers to dedicate more time and resources to its development and support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Headlining Sponsors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- BEGIN SPONSORS: headliner --&gt; &#xA;&lt;a href=&#34;https://tidelift.com/subscription/pkg/npm-cheerio&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;128px&#34; width=&#34;128px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fgithub.com%2Ftidelift.png?ixlib=js-3.8.0&amp;amp;w=128&amp;amp;h=128&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=0713e6ee5c7ab01e7559df695c1e8cd9&#34; title=&#34;Tidelift&#34; alt=&#34;Tidelift&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;128px&#34; width=&#34;128px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fgithub.com%2Fgithub.png?ixlib=js-3.8.0&amp;amp;w=128&amp;amp;h=128&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=a1e87ca289de84eb32ea85432cf8ad11&#34; title=&#34;Github&#34; alt=&#34;Github&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.airbnb.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;128px&#34; width=&#34;128px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fgithub.com%2Fairbnb.png?ixlib=js-3.8.0&amp;amp;w=128&amp;amp;h=128&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=384cad45e10faea516202ad10801f895&#34; title=&#34;AirBnB&#34; alt=&#34;AirBnB&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- END SPONSORS --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other Sponsors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- BEGIN SPONSORS: sponsor --&gt; &#xA;&lt;a href=&#34;https://www.casinoonlineaams.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fcasinoonlineaamscom%2Fc59b0fd%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=7b90355c5df11c3ac489869b01279fee&#34; title=&#34;Casinoonlineaams.com&#34; alt=&#34;Casinoonlineaams.com&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://casinoutansvensklicens.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fcasino-utan-svensk-licens3%2Ff7e9357%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=45ea355f0c3411592219714943df29dd&#34; title=&#34;Casino utan svensk licens&#34; alt=&#34;Casino utan svensk licens&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.zenrows.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fzenrows%2F3199d4b%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=8a51972a1004283672506d2e3aedd25b&#34; title=&#34;ZenRows&#34; alt=&#34;ZenRows&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://slotoking.ua/games/all-slots/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Figrovye-avtomaty-ua%2F96bfde3%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=07091c88a0b859ecaa81ef10fadf3075&#34; title=&#34;Ігрові автомати&#34; alt=&#34;Ігрові автомати&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://onlinecasinosspelen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fonlinecasinosspelen%2F4ce3830%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=60e5dd9f3993a754d0e5d47a43ff7462&#34; title=&#34;OnlineCasinosSpelen&#34; alt=&#34;OnlineCasinosSpelen&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://casinoZonderregistratie.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fczrnet%2F24e6252%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=d9b81b3c39bca4d3a8f279e79c5eec8d&#34; title=&#34;CasinoZonderRegistratie.net&#34; alt=&#34;CasinoZonderRegistratie.net&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://Nieuwe-Casinos.net&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fnieuwecasinos%2Fee150d6%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=c2663f8b5dcfc983ef5641028d7b430b&#34; title=&#34;Nieuwe-Casinos.net&#34; alt=&#34;Nieuwe-Casinos.net&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://vedonlyontiyhtiot.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fvedonlyontiyhtiot-com%2Favatar.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=9983cbab4b2e4b4f715c31acaa27bea6&#34; title=&#34;Vedonlyontiyhtiot.com&#34; alt=&#34;Vedonlyontiyhtiot.com&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://puter.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fputer%2Ff8643c4%2Favatar.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=533e28124d885c9d8b261e464db029c5&#34; title=&#34;Puter.com&#34; alt=&#34;Puter.com&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.nodepositcasinobonus.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fno-deposit-bonus%2F912e261%2Flogo.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=ce708f21996657eef8c5207fb84312b5&#34; title=&#34;No Deposit Bonus&#34; alt=&#34;No Deposit Bonus&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- END SPONSORS --&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cheeriojs/cheerio?sponsor=1&#34;&gt;Become a backer&lt;/a&gt; to show your support for Cheerio and help us maintain and improve this open source project.&lt;/p&gt; &#xA;&lt;!-- BEGIN SPONSORS: backer --&gt; &#xA;&lt;a href=&#34;https://kafidoff.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;64px&#34; width=&#34;64px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fkafidoff-vasy%2Fd7ff85c%2Favatar.png?ixlib=js-3.8.0&amp;amp;w=64&amp;amp;h=64&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=a41c66c2f9b1d3a7a241e425e7aa2d09&#34; title=&#34;Vasy Kafidoff&#34; alt=&#34;Vasy Kafidoff&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://medium.com/norch&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img height=&#34;48px&#34; width=&#34;48px&#34; src=&#34;https://humble.imgix.net/https%3A%2F%2Fimages.opencollective.com%2Fespenklem%2F7e8cd40%2Favatar.png?ixlib=js-3.8.0&amp;amp;w=48&amp;amp;h=48&amp;amp;fit=fillmax&amp;amp;fill=solid&amp;amp;s=f727bc0f59d1738188ec8e4499123149&#34; title=&#34;Espen Klem&#34; alt=&#34;Espen Klem&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- END SPONSORS --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sindresorhus/type-fest</title>
    <updated>2024-08-15T01:37:10Z</updated>
    <id>tag:github.com,2024-08-15:/sindresorhus/type-fest</id>
    <link href="https://github.com/sindresorhus/type-fest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of essential TypeScript types&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/media/logo.svg?sanitize=true&#34; alt=&#34;type-fest&#34; height=&#34;300&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;b&gt;A collection of essential TypeScript types&lt;/b&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p&gt; &lt;/p&gt;&#xA;  &lt;p&gt; &lt;sup&gt; &lt;a href=&#34;https://github.com/sponsors/sindresorhus&#34;&gt;Sindre Sorhus&#39; open source work is supported by the community&lt;/a&gt; &lt;/sup&gt; &lt;/p&gt; &#xA;  &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;a href=&#34;https://standardresume.co/tech&#34;&gt; &lt;img src=&#34;https://sindresorhus.com/assets/thanks/standard-resume-logo.svg?sanitize=true&#34; width=&#34;180&#34;&gt; &lt;/a&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;a href=&#34;https://workos.com/?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=type-fest&amp;amp;utm_source=github&#34;&gt; &#xA;   &lt;div&gt; &#xA;    &lt;img src=&#34;https://sindresorhus.com/assets/thanks/workos-logo-white-bg.svg?sanitize=true&#34; width=&#34;220&#34; alt=&#34;WorkOS&#34;&gt; &#xA;   &lt;/div&gt; &lt;b&gt;Your app, enterprise-ready.&lt;/b&gt; &#xA;   &lt;div&gt; &#xA;    &lt;sub&gt;Start selling to enterprise customers with just a few lines of code.&lt;/sub&gt; &#xA;    &lt;br&gt; &#xA;    &lt;sup&gt;Add Single Sign-On (and more) in minutes instead of months.&lt;/sup&gt; &#xA;   &lt;/div&gt; &lt;/a&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;a href=&#34;https://transloadit.com?utm_source=sindresorhus&amp;amp;utm_medium=referral&amp;amp;utm_campaign=sponsorship&amp;amp;utm_content=type-fest&#34;&gt; &#xA;   &lt;picture&gt; &#xA;    &lt;source width=&#34;350&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://sindresorhus.com/assets/thanks/transloadit-logo-dark.svg&#34;&gt; &#xA;    &lt;source width=&#34;350&#34; media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://sindresorhus.com/assets/thanks/transloadit-logo.svg&#34;&gt; &#xA;    &lt;img width=&#34;350&#34; src=&#34;https://sindresorhus.com/assets/thanks/transloadit-logo.svg?sanitize=true&#34; alt=&#34;Transloadit logo&#34;&gt; &#xA;   &lt;/picture&gt; &lt;/a&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;a href=&#34;https://logto.io/?ref=sindre&#34;&gt; &#xA;   &lt;div&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source width=&#34;200&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://sindresorhus.com/assets/thanks/logto-logo-dark.svg?x&#34;&gt; &#xA;     &lt;source width=&#34;200&#34; media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://sindresorhus.com/assets/thanks/logto-logo-light.svg?x&#34;&gt; &#xA;     &lt;img width=&#34;200&#34; src=&#34;https://sindresorhus.com/assets/thanks/logto-logo-light.svg?x&#34; alt=&#34;Logto logo&#34;&gt; &#xA;    &lt;/picture&gt; &#xA;   &lt;/div&gt; &lt;b&gt;The better identity infrastructure for developers&lt;/b&gt; &#xA;   &lt;div&gt; &#xA;    &lt;sup&gt;Logto is an open-source Auth0 alternative designed for every app.&lt;/sup&gt; &#xA;   &lt;/div&gt; &lt;/a&gt; &#xA;  &lt;br&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/illustration-rainbow-unicorn-26AHG5KGFxSkUWw1i&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unicorn-approved-ff69b4.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/type-fest?activeTab=dependents&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/dependents/type-fest&#34; alt=&#34;npm dependents&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/type-fest&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/dt/type-fest&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many of the types here should have been built-in. You can help by suggesting some of them to the &lt;a href=&#34;https://github.com/Microsoft/TypeScript/raw/main/CONTRIBUTING.md&#34;&gt;TypeScript project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Either add this package as a dependency or copy-paste the needed types. No credit required. 👌&lt;/p&gt; &#xA;&lt;p&gt;PR welcome for additional commonly needed types and docs improvements. Read the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/.github/contributing.md&#34;&gt;contributing guidelines&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Help wanted with reviewing &lt;a href=&#34;https://github.com/sindresorhus/type-fest/issues&#34;&gt;proposals&lt;/a&gt; and &lt;a href=&#34;https://github.com/sindresorhus/type-fest/pulls&#34;&gt;pull requests&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install type-fest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires TypeScript &amp;gt;=5.1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Works best with &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#strict&#34;&gt;&lt;code&gt;{strict: true}&lt;/code&gt;&lt;/a&gt; in your tsconfig.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import type {Except} from &#39;type-fest&#39;;&#xA;&#xA;type Foo = {&#xA;&#x9;unicorn: string;&#xA;&#x9;rainbow: boolean;&#xA;};&#xA;&#xA;type FooWithoutRainbow = Except&amp;lt;Foo, &#39;rainbow&#39;&amp;gt;;&#xA;//=&amp;gt; {unicorn: string}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Click the type names for complete docs.&lt;/p&gt; &#xA;&lt;h3&gt;Basic&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/primitive.d.ts&#34;&gt;&lt;code&gt;Primitive&lt;/code&gt;&lt;/a&gt; - Matches any &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&#34;&gt;primitive value&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; - Matches a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&#34;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; - Matches a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&#34;&gt;&lt;code&gt;class&lt;/code&gt; constructor&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;AbstractClass&lt;/code&gt;&lt;/a&gt; - Matches an &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/classes.html#abstract-classes&#34;&gt;&lt;code&gt;abstract class&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;AbstractConstructor&lt;/code&gt;&lt;/a&gt; - Matches an &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-2.html#abstract-construct-signatures&#34;&gt;&lt;code&gt;abstract class&lt;/code&gt;&lt;/a&gt; constructor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/typed-array.d.ts&#34;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; - Matches any &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&#34;&gt;typed array&lt;/a&gt;, like &lt;code&gt;Uint8Array&lt;/code&gt; or &lt;code&gt;Float64Array&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/observable-like.d.ts&#34;&gt;&lt;code&gt;ObservableLike&lt;/code&gt;&lt;/a&gt; - Matches a value that is like an &lt;a href=&#34;https://github.com/tc39/proposal-observable&#34;&gt;Observable&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Utilities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/empty-object.d.ts&#34;&gt;&lt;code&gt;EmptyObject&lt;/code&gt;&lt;/a&gt; - Represents a strictly empty plain object, the &lt;code&gt;{}&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/non-empty-object.d.ts&#34;&gt;&lt;code&gt;NonEmptyObject&lt;/code&gt;&lt;/a&gt; - Represents an object with at least 1 non-optional key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/unknown-record.d.ts&#34;&gt;&lt;code&gt;UnknownRecord&lt;/code&gt;&lt;/a&gt; - Represents an object with &lt;code&gt;unknown&lt;/code&gt; value. You probably want this instead of &lt;code&gt;{}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/unknown-array.d.ts&#34;&gt;&lt;code&gt;UnknownArray&lt;/code&gt;&lt;/a&gt; - Represents an array with &lt;code&gt;unknown&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/except.d.ts&#34;&gt;&lt;code&gt;Except&lt;/code&gt;&lt;/a&gt; - Create a type from an object type without certain keys. This is a stricter version of &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys&#34;&gt;&lt;code&gt;Omit&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/writable.d.ts&#34;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; - Create a type that strips &lt;code&gt;readonly&lt;/code&gt; from the given type. Inverse of &lt;code&gt;Readonly&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/writable-deep.d.ts&#34;&gt;&lt;code&gt;WritableDeep&lt;/code&gt;&lt;/a&gt; - Create a deeply mutable version of an &lt;code&gt;object&lt;/code&gt;/&lt;code&gt;ReadonlyMap&lt;/code&gt;/&lt;code&gt;ReadonlySet&lt;/code&gt;/&lt;code&gt;ReadonlyArray&lt;/code&gt; type. The inverse of &lt;code&gt;ReadonlyDeep&amp;lt;T&amp;gt;&lt;/code&gt;. Use &lt;code&gt;Writable&amp;lt;T&amp;gt;&lt;/code&gt; if you only need one level deep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/merge.d.ts&#34;&gt;&lt;code&gt;Merge&lt;/code&gt;&lt;/a&gt; - Merge two types into a new type. Keys of the second type overrides keys of the first type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/merge-deep.d.ts&#34;&gt;&lt;code&gt;MergeDeep&lt;/code&gt;&lt;/a&gt; - Merge two objects or two arrays/tuples recursively into a new type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/merge-exclusive.d.ts&#34;&gt;&lt;code&gt;MergeExclusive&lt;/code&gt;&lt;/a&gt; - Create a type that has mutually exclusive keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/override-properties.d.ts&#34;&gt;&lt;code&gt;OverrideProperties&lt;/code&gt;&lt;/a&gt; - Override only existing properties of the given type. Similar to &lt;code&gt;Merge&lt;/code&gt;, but enforces that the original type has the properties you want to override.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/require-at-least-one.d.ts&#34;&gt;&lt;code&gt;RequireAtLeastOne&lt;/code&gt;&lt;/a&gt; - Create a type that requires at least one of the given keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/require-exactly-one.d.ts&#34;&gt;&lt;code&gt;RequireExactlyOne&lt;/code&gt;&lt;/a&gt; - Create a type that requires exactly a single key of the given keys and disallows more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/require-all-or-none.d.ts&#34;&gt;&lt;code&gt;RequireAllOrNone&lt;/code&gt;&lt;/a&gt; - Create a type that requires all of the given keys or none of the given keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/require-one-or-none.d.ts&#34;&gt;&lt;code&gt;RequireOneOrNone&lt;/code&gt;&lt;/a&gt; - Create a type that requires exactly a single key of the given keys and disallows more, or none of the given keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/single-key-object.d.ts&#34;&gt;&lt;code&gt;SingleKeyObject&lt;/code&gt;&lt;/a&gt; - Create a type that only accepts an object with a single key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/required-deep.d.ts&#34;&gt;&lt;code&gt;RequiredDeep&lt;/code&gt;&lt;/a&gt; - Create a deeply required version of another type. Use &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#requiredtype&#34;&gt;&lt;code&gt;Required&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; if you only need one level deep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/pick-deep.d.ts&#34;&gt;&lt;code&gt;PickDeep&lt;/code&gt;&lt;/a&gt; - Pick properties from a deeply-nested object. Use &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys&#34;&gt;&lt;code&gt;Pick&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; if you only need one level deep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/omit-deep.d.ts&#34;&gt;&lt;code&gt;OmitDeep&lt;/code&gt;&lt;/a&gt; - Omit properties from a deeply-nested object. Use &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys&#34;&gt;&lt;code&gt;Omit&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; if you only need one level deep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/omit-index-signature.d.ts&#34;&gt;&lt;code&gt;OmitIndexSignature&lt;/code&gt;&lt;/a&gt; - Omit any index signatures from the given object type, leaving only explicitly defined properties.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/pick-index-signature.d.ts&#34;&gt;&lt;code&gt;PickIndexSignature&lt;/code&gt;&lt;/a&gt; - Pick only index signatures from the given object type, leaving out all explicitly defined properties.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/partial-deep.d.ts&#34;&gt;&lt;code&gt;PartialDeep&lt;/code&gt;&lt;/a&gt; - Create a deeply optional version of another type. Use &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype&#34;&gt;&lt;code&gt;Partial&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; if you only need one level deep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/partial-on-undefined-deep.d.ts&#34;&gt;&lt;code&gt;PartialOnUndefinedDeep&lt;/code&gt;&lt;/a&gt; - Create a deep version of another type where all keys accepting &lt;code&gt;undefined&lt;/code&gt; type are set to optional.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/undefined-on-partial-deep.d.ts&#34;&gt;&lt;code&gt;UndefinedOnPartialDeep&lt;/code&gt;&lt;/a&gt; - Create a deep version of another type where all optional keys are set to also accept &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/readonly-deep.d.ts&#34;&gt;&lt;code&gt;ReadonlyDeep&lt;/code&gt;&lt;/a&gt; - Create a deeply immutable version of an &lt;code&gt;object&lt;/code&gt;/&lt;code&gt;Map&lt;/code&gt;/&lt;code&gt;Set&lt;/code&gt;/&lt;code&gt;Array&lt;/code&gt; type. Use &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype&#34;&gt;&lt;code&gt;Readonly&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; if you only need one level deep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/literal-union.d.ts&#34;&gt;&lt;code&gt;LiteralUnion&lt;/code&gt;&lt;/a&gt; - Create a union type by combining primitive types and literal types without sacrificing auto-completion in IDEs for the literal type part of the union. Workaround for &lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/29729&#34;&gt;Microsoft/TypeScript#29729&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/opaque.d.ts&#34;&gt;&lt;code&gt;Tagged&lt;/code&gt;&lt;/a&gt; - Create a &lt;a href=&#34;https://medium.com/@KevinBGreene/surviving-the-typescript-ecosystem-branding-and-type-tagging-6cf6e516523d&#34;&gt;tagged type&lt;/a&gt; that can support &lt;a href=&#34;https://github.com/sindresorhus/type-fest/issues/665&#34;&gt;multiple tags&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@ethanresnick/advanced-typescript-tagged-types-improved-with-type-level-metadata-5072fc125fcf&#34;&gt;per-tag metadata&lt;/a&gt;. (This replaces the previous &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/opaque.d.ts&#34;&gt;&lt;code&gt;Opaque&lt;/code&gt;&lt;/a&gt; type, which is now deprecated.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/opaque.d.ts&#34;&gt;&lt;code&gt;UnwrapTagged&lt;/code&gt;&lt;/a&gt; - Get the untagged portion of a tagged type created with &lt;code&gt;Tagged&lt;/code&gt;. (This replaces the previous &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/opaque.d.ts&#34;&gt;&lt;code&gt;UnwrapOpaque&lt;/code&gt;&lt;/a&gt; type, which is now deprecated.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/invariant-of.d.ts&#34;&gt;&lt;code&gt;InvariantOf&lt;/code&gt;&lt;/a&gt; - Create an &lt;a href=&#34;https://basarat.gitbook.io/typescript/type-system/type-compatibility#footnote-invariance&#34;&gt;invariant type&lt;/a&gt;, which is a type that does not accept supertypes and subtypes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-optional.d.ts&#34;&gt;&lt;code&gt;SetOptional&lt;/code&gt;&lt;/a&gt; - Create a type that makes the given keys optional.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-readonly.d.ts&#34;&gt;&lt;code&gt;SetReadonly&lt;/code&gt;&lt;/a&gt; - Create a type that makes the given keys readonly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-required.d.ts&#34;&gt;&lt;code&gt;SetRequired&lt;/code&gt;&lt;/a&gt; - Create a type that makes the given keys required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-non-nullable.d.ts&#34;&gt;&lt;code&gt;SetNonNullable&lt;/code&gt;&lt;/a&gt; - Create a type that makes the given keys non-nullable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/value-of.d.ts&#34;&gt;&lt;code&gt;ValueOf&lt;/code&gt;&lt;/a&gt; - Create a union of the given object&#39;s values, and optionally specify which keys to get the values from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/conditional-keys.d.ts&#34;&gt;&lt;code&gt;ConditionalKeys&lt;/code&gt;&lt;/a&gt; - Extract keys from a shape where values extend the given &lt;code&gt;Condition&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/conditional-pick.d.ts&#34;&gt;&lt;code&gt;ConditionalPick&lt;/code&gt;&lt;/a&gt; - Like &lt;code&gt;Pick&lt;/code&gt; except it selects properties from a shape where the values extend the given &lt;code&gt;Condition&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/conditional-pick-deep.d.ts&#34;&gt;&lt;code&gt;ConditionalPickDeep&lt;/code&gt;&lt;/a&gt; - Like &lt;code&gt;ConditionalPick&lt;/code&gt; except that it selects the properties deeply.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/conditional-except.d.ts&#34;&gt;&lt;code&gt;ConditionalExcept&lt;/code&gt;&lt;/a&gt; - Like &lt;code&gt;Omit&lt;/code&gt; except it removes properties from a shape where the values extend the given &lt;code&gt;Condition&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/union-to-intersection.d.ts&#34;&gt;&lt;code&gt;UnionToIntersection&lt;/code&gt;&lt;/a&gt; - Convert a union type to an intersection type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/literal-to-primitive.d.ts&#34;&gt;&lt;code&gt;LiteralToPrimitive&lt;/code&gt;&lt;/a&gt; - Convert a &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types&#34;&gt;literal type&lt;/a&gt; to the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/primitive.d.ts&#34;&gt;primitive type&lt;/a&gt; it belongs to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/literal-to-primitive-deep.d.ts&#34;&gt;&lt;code&gt;LiteralToPrimitiveDeep&lt;/code&gt;&lt;/a&gt; - Like &lt;code&gt;LiteralToPrimitive&lt;/code&gt; except it converts literal types inside an object or array deeply.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/stringified.d.ts&#34;&gt;&lt;code&gt;Stringified&lt;/code&gt;&lt;/a&gt; - Create a type with the keys of the given type changed to &lt;code&gt;string&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/iterable-element.d.ts&#34;&gt;&lt;code&gt;IterableElement&lt;/code&gt;&lt;/a&gt; - Get the element type of an &lt;code&gt;Iterable&lt;/code&gt;/&lt;code&gt;AsyncIterable&lt;/code&gt;. For example, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, generator, stream, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/entry.d.ts&#34;&gt;&lt;code&gt;Entry&lt;/code&gt;&lt;/a&gt; - Create a type that represents the type of an entry of a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/entries.d.ts&#34;&gt;&lt;code&gt;Entries&lt;/code&gt;&lt;/a&gt; - Create a type that represents the type of the entries of a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-return-type.d.ts&#34;&gt;&lt;code&gt;SetReturnType&lt;/code&gt;&lt;/a&gt; - Create a function type with a return type of your choice and the same parameters as the given function type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-parameter-type.d.ts&#34;&gt;&lt;code&gt;SetParameterType&lt;/code&gt;&lt;/a&gt; - Create a function that replaces some parameters with the given parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/simplify.d.ts&#34;&gt;&lt;code&gt;Simplify&lt;/code&gt;&lt;/a&gt; - Useful to flatten the type output to improve type hints shown in editors. And also to transform an interface into a type to aide with assignability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/simplify-deep.d.ts&#34;&gt;&lt;code&gt;SimplifyDeep&lt;/code&gt;&lt;/a&gt; - Deeply simplifies an object type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/get.d.ts&#34;&gt;&lt;code&gt;Get&lt;/code&gt;&lt;/a&gt; - Get a deeply-nested property from an object using a key path, like &lt;a href=&#34;https://lodash.com/docs/latest#get&#34;&gt;Lodash&#39;s &lt;code&gt;.get()&lt;/code&gt;&lt;/a&gt; function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/string-key-of.d.ts&#34;&gt;&lt;code&gt;StringKeyOf&lt;/code&gt;&lt;/a&gt; - Get keys of the given type as strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/schema.d.ts&#34;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; - Create a deep version of another object type where property values are recursively replaced into a given value type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/exact.d.ts&#34;&gt;&lt;code&gt;Exact&lt;/code&gt;&lt;/a&gt; - Create a type that does not allow extra properties.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/optional-keys-of.d.ts&#34;&gt;&lt;code&gt;OptionalKeysOf&lt;/code&gt;&lt;/a&gt; - Extract all optional keys from the given type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/keys-of-union.d.ts&#34;&gt;&lt;code&gt;KeysOfUnion&lt;/code&gt;&lt;/a&gt; - Create a union of all keys from a given type, even those exclusive to specific union members.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/has-optional-keys.d.ts&#34;&gt;&lt;code&gt;HasOptionalKeys&lt;/code&gt;&lt;/a&gt; - Create a &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; type depending on whether the given type has any optional fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/required-keys-of.d.ts&#34;&gt;&lt;code&gt;RequiredKeysOf&lt;/code&gt;&lt;/a&gt; - Extract all required keys from the given type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/has-required-keys.d.ts&#34;&gt;&lt;code&gt;HasRequiredKeys&lt;/code&gt;&lt;/a&gt; - Create a &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; type depending on whether the given type has any required fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/readonly-keys-of.d.ts&#34;&gt;&lt;code&gt;ReadonlyKeysOf&lt;/code&gt;&lt;/a&gt; - Extract all readonly keys from the given type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/has-readonly-keys.d.ts&#34;&gt;&lt;code&gt;HasReadonlyKeys&lt;/code&gt;&lt;/a&gt; - Create a &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; type depending on whether the given type has any readonly fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/writable-keys-of.d.ts&#34;&gt;&lt;code&gt;WritableKeysOf&lt;/code&gt;&lt;/a&gt; - Extract all writable (non-readonly) keys from the given type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/has-writable-keys.d.ts&#34;&gt;&lt;code&gt;HasWritableKeys&lt;/code&gt;&lt;/a&gt; - Create a &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; type depending on whether the given type has any writable fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/spread.d.ts&#34;&gt;&lt;code&gt;Spread&lt;/code&gt;&lt;/a&gt; - Mimic the type inferred by TypeScript when merging two objects or two arrays/tuples using the spread syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-equal.d.ts&#34;&gt;&lt;code&gt;IsEqual&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the two given types are equal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/tagged-union.d.ts&#34;&gt;&lt;code&gt;TaggedUnion&lt;/code&gt;&lt;/a&gt; - Create a union of types that share a common discriminant property.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/int-range.d.ts&#34;&gt;&lt;code&gt;IntRange&lt;/code&gt;&lt;/a&gt; - Generate a union of numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/array-indices.d.ts&#34;&gt;&lt;code&gt;ArrayIndices&lt;/code&gt;&lt;/a&gt; - Provides valid indices for a constant array or tuple.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/array-values.d.ts&#34;&gt;&lt;code&gt;ArrayValues&lt;/code&gt;&lt;/a&gt; - Provides all values for a constant array or tuple.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/array-splice.d.ts&#34;&gt;&lt;code&gt;ArraySplice&lt;/code&gt;&lt;/a&gt; - Creates a new array type by adding or removing elements at a specified index range in the original array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/array-tail.d.ts&#34;&gt;&lt;code&gt;ArrayTail&lt;/code&gt;&lt;/a&gt; - Extracts the type of an array or tuple minus the first element.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-field-type.d.ts&#34;&gt;&lt;code&gt;SetFieldType&lt;/code&gt;&lt;/a&gt; - Create a type that changes the type of the given keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/paths.d.ts&#34;&gt;&lt;code&gt;Paths&lt;/code&gt;&lt;/a&gt; - Generate a union of all possible paths to properties in the given object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/shared-union-fields-deep.d.ts&#34;&gt;&lt;code&gt;SharedUnionFieldsDeep&lt;/code&gt;&lt;/a&gt; - Create a type with shared fields from a union of object types, deeply traversing nested structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/distributed-omit.d.ts&#34;&gt;&lt;code&gt;DistributedOmit&lt;/code&gt;&lt;/a&gt; - Omits keys from a type, distributing the operation over a union.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/distributed-pick.d.ts&#34;&gt;&lt;code&gt;DistributedPick&lt;/code&gt;&lt;/a&gt; - Picks keys from a type, distributing the operation over a union.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/and.d.ts&#34;&gt;&lt;code&gt;And&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether two given types are both true.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/or.d.ts&#34;&gt;&lt;code&gt;Or&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether either of two given types are true.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/non-empty-tuple.d.ts&#34;&gt;&lt;code&gt;NonEmptyTuple&lt;/code&gt;&lt;/a&gt; - Matches any non-empty tuple.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/find-global-type.d.ts&#34;&gt;&lt;code&gt;FindGlobalType&lt;/code&gt;&lt;/a&gt; - Tries to find the type of a global with the given name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/find-global-type.d.ts&#34;&gt;&lt;code&gt;FindGlobalInstanceType&lt;/code&gt;&lt;/a&gt; - Tries to find one or more types from their globally-defined constructors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Type Guard&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;IsType&lt;/code&gt; vs. &lt;code&gt;IfType&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For every &lt;code&gt;IsT&lt;/code&gt; type (e.g. &lt;code&gt;IsAny&lt;/code&gt;), there is an associated &lt;code&gt;IfT&lt;/code&gt; type that can help simplify conditional types. While the &lt;code&gt;IsT&lt;/code&gt; types return a &lt;code&gt;boolean&lt;/code&gt;, the &lt;code&gt;IfT&lt;/code&gt; types act like an &lt;code&gt;If&lt;/code&gt;/&lt;code&gt;Else&lt;/code&gt; - they resolve to the given &lt;code&gt;TypeIfT&lt;/code&gt; or &lt;code&gt;TypeIfNotT&lt;/code&gt; depending on whether &lt;code&gt;IsX&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or not. By default, &lt;code&gt;IfT&lt;/code&gt; returns a &lt;code&gt;boolean&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type IfAny&amp;lt;T, TypeIfAny = true, TypeIfNotAny = false&amp;gt; = (&#xA;&#x9;IsAny&amp;lt;T&amp;gt; extends true ? TypeIfAny : TypeIfNotAny&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import type {IsAny, IfAny} from &#39;type-fest&#39;;&#xA;&#xA;type ShouldBeTrue = IsAny&amp;lt;any&amp;gt; extends true ? true : false;&#xA;//=&amp;gt; true&#xA;&#xA;type ShouldBeFalse = IfAny&amp;lt;&#39;not any&#39;&amp;gt;;&#xA;//=&amp;gt; false&#xA;&#xA;type ShouldBeNever = IfAny&amp;lt;&#39;not any&#39;, &#39;not never&#39;, &#39;never&#39;&amp;gt;;&#xA;//=&amp;gt; &#39;never&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-literal.d.ts&#34;&gt;&lt;code&gt;IsLiteral&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is a &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types&#34;&gt;literal type&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-literal.d.ts&#34;&gt;&lt;code&gt;IsStringLiteral&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is a &lt;code&gt;string&lt;/code&gt; &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types&#34;&gt;literal type&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-literal.d.ts&#34;&gt;&lt;code&gt;IsNumericLiteral&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is a &lt;code&gt;number&lt;/code&gt; or &lt;code&gt;bigint&lt;/code&gt; &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types&#34;&gt;literal type&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-literal.d.ts&#34;&gt;&lt;code&gt;IsBooleanLiteral&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types&#34;&gt;literal type&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-literal.d.ts&#34;&gt;&lt;code&gt;IsSymbolLiteral&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is a &lt;code&gt;symbol&lt;/code&gt; &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types&#34;&gt;literal type&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-any.d.ts&#34;&gt;&lt;code&gt;IsAny&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is &lt;code&gt;any&lt;/code&gt;. (Conditional version: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/if-any.d.ts&#34;&gt;&lt;code&gt;IfAny&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-never.d.ts&#34;&gt;&lt;code&gt;IsNever&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is &lt;code&gt;never&lt;/code&gt;. (Conditional version: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/if-never.d.ts&#34;&gt;&lt;code&gt;IfNever&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-unknown.d.ts&#34;&gt;&lt;code&gt;IsUnknown&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is &lt;code&gt;unknown&lt;/code&gt;. (Conditional version: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/if-unknown.d.ts&#34;&gt;&lt;code&gt;IfUnknown&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/empty-object.d.ts&#34;&gt;&lt;code&gt;IsEmptyObject&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the type is strictly equal to an empty plain object, the &lt;code&gt;{}&lt;/code&gt; value. (Conditional version: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/if-empty-object.d.ts&#34;&gt;&lt;code&gt;IfEmptyObject&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-null.d.ts&#34;&gt;&lt;code&gt;IsNull&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given type is &lt;code&gt;null&lt;/code&gt;. (Conditional version: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/if-null.d.ts&#34;&gt;&lt;code&gt;IfNull&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JSON&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/jsonify.d.ts&#34;&gt;&lt;code&gt;Jsonify&lt;/code&gt;&lt;/a&gt; - Transform a type to one that is assignable to the &lt;code&gt;JsonValue&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/jsonifiable.d.ts&#34;&gt;&lt;code&gt;Jsonifiable&lt;/code&gt;&lt;/a&gt; - Matches a value that can be losslessly converted to JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;JsonPrimitive&lt;/code&gt;&lt;/a&gt; - Matches a JSON primitive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;JsonObject&lt;/code&gt;&lt;/a&gt; - Matches a JSON object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;JsonArray&lt;/code&gt;&lt;/a&gt; - Matches a JSON array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/basic.d.ts&#34;&gt;&lt;code&gt;JsonValue&lt;/code&gt;&lt;/a&gt; - Matches any valid JSON value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Structured clone&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/structured-cloneable.d.ts&#34;&gt;&lt;code&gt;StructuredCloneable&lt;/code&gt;&lt;/a&gt; - Matches a value that can be losslessly cloned using &lt;code&gt;structuredClone&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Async&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/promisable.d.ts&#34;&gt;&lt;code&gt;Promisable&lt;/code&gt;&lt;/a&gt; - Create a type that represents either the value or the value wrapped in &lt;code&gt;PromiseLike&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/async-return-type.d.ts&#34;&gt;&lt;code&gt;AsyncReturnType&lt;/code&gt;&lt;/a&gt; - Unwrap the return type of a function that returns a &lt;code&gt;Promise&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/asyncify.d.ts&#34;&gt;&lt;code&gt;Asyncify&lt;/code&gt;&lt;/a&gt; - Create an async version of the given function type.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;String&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/trim.d.ts&#34;&gt;&lt;code&gt;Trim&lt;/code&gt;&lt;/a&gt; - Remove leading and trailing spaces from a string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/split.d.ts&#34;&gt;&lt;code&gt;Split&lt;/code&gt;&lt;/a&gt; - Represents an array of strings split using a given character or character set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/replace.d.ts&#34;&gt;&lt;code&gt;Replace&lt;/code&gt;&lt;/a&gt; - Represents a string with some or all matches replaced by a replacement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/string-slice.d.ts&#34;&gt;&lt;code&gt;StringSlice&lt;/code&gt;&lt;/a&gt; - Returns a string slice of a given range, just like &lt;code&gt;String#slice()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/string-repeat.d.ts&#34;&gt;&lt;code&gt;StringRepeat&lt;/code&gt;&lt;/a&gt; - Returns a new string which contains the specified number of copies of a given string, just like &lt;code&gt;String#repeat()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Array&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/arrayable.d.ts&#34;&gt;&lt;code&gt;Arrayable&lt;/code&gt;&lt;/a&gt; - Create a type that represents either the value or an array of the value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/includes.d.ts&#34;&gt;&lt;code&gt;Includes&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given array includes the given item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/join.d.ts&#34;&gt;&lt;code&gt;Join&lt;/code&gt;&lt;/a&gt; - Join an array of strings and/or numbers using the given string as a delimiter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/array-slice.d.ts&#34;&gt;&lt;code&gt;ArraySlice&lt;/code&gt;&lt;/a&gt; - Returns an array slice of a given range, just like &lt;code&gt;Array#slice()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/last-array-element.d.ts&#34;&gt;&lt;code&gt;LastArrayElement&lt;/code&gt;&lt;/a&gt; - Extracts the type of the last element of an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/fixed-length-array.d.ts&#34;&gt;&lt;code&gt;FixedLengthArray&lt;/code&gt;&lt;/a&gt; - Create a type that represents an array of the given type and length.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/multidimensional-array.d.ts&#34;&gt;&lt;code&gt;MultidimensionalArray&lt;/code&gt;&lt;/a&gt; - Create a type that represents a multidimensional array of the given type and dimensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/multidimensional-readonly-array.d.ts&#34;&gt;&lt;code&gt;MultidimensionalReadonlyArray&lt;/code&gt;&lt;/a&gt; - Create a type that represents a multidimensional readonly array of the given type and dimensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/readonly-tuple.d.ts&#34;&gt;&lt;code&gt;ReadonlyTuple&lt;/code&gt;&lt;/a&gt; - Create a type that represents a read-only tuple of the given type and length.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/tuple-to-union.d.ts&#34;&gt;&lt;code&gt;TupleToUnion&lt;/code&gt;&lt;/a&gt; - Convert a tuple/array into a union type of its elements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Numeric&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;PositiveInfinity&lt;/code&gt;&lt;/a&gt; - Matches the hidden &lt;code&gt;Infinity&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;NegativeInfinity&lt;/code&gt;&lt;/a&gt; - Matches the hidden &lt;code&gt;-Infinity&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;Finite&lt;/code&gt;&lt;/a&gt; - A finite &lt;code&gt;number&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; - A &lt;code&gt;number&lt;/code&gt; that is an integer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; - A &lt;code&gt;number&lt;/code&gt; that is not an integer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;NegativeFloat&lt;/code&gt;&lt;/a&gt; - A negative (&lt;code&gt;-∞ &amp;lt; x &amp;lt; 0&lt;/code&gt;) &lt;code&gt;number&lt;/code&gt; that is not an integer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;Negative&lt;/code&gt;&lt;/a&gt; - A negative &lt;code&gt;number&lt;/code&gt;/&lt;code&gt;bigint&lt;/code&gt; (&lt;code&gt;-∞ &amp;lt; x &amp;lt; 0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;NonNegative&lt;/code&gt;&lt;/a&gt; - A non-negative &lt;code&gt;number&lt;/code&gt;/&lt;code&gt;bigint&lt;/code&gt; (&lt;code&gt;0 &amp;lt;= x &amp;lt; ∞&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;NegativeInteger&lt;/code&gt;&lt;/a&gt; - A negative (&lt;code&gt;-∞ &amp;lt; x &amp;lt; 0&lt;/code&gt;) &lt;code&gt;number&lt;/code&gt; that is an integer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;NonNegativeInteger&lt;/code&gt;&lt;/a&gt; - A non-negative (&lt;code&gt;0 &amp;lt;= x &amp;lt; ∞&lt;/code&gt;) &lt;code&gt;number&lt;/code&gt; that is an integer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/numeric.d.ts&#34;&gt;&lt;code&gt;IsNegative&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given number is a negative number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-float.d.ts&#34;&gt;&lt;code&gt;IsFloat&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given number is a float, like &lt;code&gt;1.5&lt;/code&gt; or &lt;code&gt;-1.5&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/is-integer.d.ts&#34;&gt;&lt;code&gt;IsInteger&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether the given number is a integer, like &lt;code&gt;-5&lt;/code&gt;, &lt;code&gt;1.0&lt;/code&gt; or &lt;code&gt;100&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/greater-than.d.ts&#34;&gt;&lt;code&gt;GreaterThan&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether a given number is greater than another number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/greater-than-or-equal.d.ts&#34;&gt;&lt;code&gt;GreaterThanOrEqual&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether a given number is greater than or equal to another number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/less-than.d.ts&#34;&gt;&lt;code&gt;LessThan&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether a given number is less than another number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/less-than-or-equal.d.ts&#34;&gt;&lt;code&gt;LessThanOrEqual&lt;/code&gt;&lt;/a&gt; - Returns a boolean for whether a given number is less than or equal to another number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/sum.d.ts&#34;&gt;&lt;code&gt;Sum&lt;/code&gt;&lt;/a&gt; - Returns the sum of two numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/subtract.d.ts&#34;&gt;&lt;code&gt;Subtract&lt;/code&gt;&lt;/a&gt; - Returns the difference between two numbers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Change case&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/camel-case.d.ts&#34;&gt;&lt;code&gt;CamelCase&lt;/code&gt;&lt;/a&gt; - Convert a string literal to camel-case (&lt;code&gt;fooBar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/camel-cased-properties.d.ts&#34;&gt;&lt;code&gt;CamelCasedProperties&lt;/code&gt;&lt;/a&gt; - Convert object properties to camel-case (&lt;code&gt;fooBar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/camel-cased-properties-deep.d.ts&#34;&gt;&lt;code&gt;CamelCasedPropertiesDeep&lt;/code&gt;&lt;/a&gt; - Convert object properties to camel-case recursively (&lt;code&gt;fooBar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/kebab-case.d.ts&#34;&gt;&lt;code&gt;KebabCase&lt;/code&gt;&lt;/a&gt; - Convert a string literal to kebab-case (&lt;code&gt;foo-bar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/kebab-cased-properties.d.ts&#34;&gt;&lt;code&gt;KebabCasedProperties&lt;/code&gt;&lt;/a&gt; - Convert a object properties to kebab-case recursively (&lt;code&gt;foo-bar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/kebab-cased-properties-deep.d.ts&#34;&gt;&lt;code&gt;KebabCasedPropertiesDeep&lt;/code&gt;&lt;/a&gt; - Convert object properties to kebab-case (&lt;code&gt;foo-bar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/pascal-case.d.ts&#34;&gt;&lt;code&gt;PascalCase&lt;/code&gt;&lt;/a&gt; - Converts a string literal to pascal-case (&lt;code&gt;FooBar&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/pascal-cased-properties.d.ts&#34;&gt;&lt;code&gt;PascalCasedProperties&lt;/code&gt;&lt;/a&gt; - Converts object properties to pascal-case (&lt;code&gt;FooBar&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/pascal-cased-properties-deep.d.ts&#34;&gt;&lt;code&gt;PascalCasedPropertiesDeep&lt;/code&gt;&lt;/a&gt; - Converts object properties to pascal-case (&lt;code&gt;FooBar&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/snake-case.d.ts&#34;&gt;&lt;code&gt;SnakeCase&lt;/code&gt;&lt;/a&gt; - Convert a string literal to snake-case (&lt;code&gt;foo_bar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/snake-cased-properties.d.ts&#34;&gt;&lt;code&gt;SnakeCasedProperties&lt;/code&gt;&lt;/a&gt; - Convert object properties to snake-case (&lt;code&gt;foo_bar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/snake-cased-properties-deep.d.ts&#34;&gt;&lt;code&gt;SnakeCasedPropertiesDeep&lt;/code&gt;&lt;/a&gt; - Convert object properties to snake-case recursively (&lt;code&gt;foo_bar&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/screaming-snake-case.d.ts&#34;&gt;&lt;code&gt;ScreamingSnakeCase&lt;/code&gt;&lt;/a&gt; - Convert a string literal to screaming-snake-case (&lt;code&gt;FOO_BAR&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/delimiter-case.d.ts&#34;&gt;&lt;code&gt;DelimiterCase&lt;/code&gt;&lt;/a&gt; - Convert a string literal to a custom string delimiter casing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/delimiter-cased-properties.d.ts&#34;&gt;&lt;code&gt;DelimiterCasedProperties&lt;/code&gt;&lt;/a&gt; - Convert object properties to a custom string delimiter casing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/delimiter-cased-properties-deep.d.ts&#34;&gt;&lt;code&gt;DelimiterCasedPropertiesDeep&lt;/code&gt;&lt;/a&gt; - Convert object properties to a custom string delimiter casing recursively.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/global-this.d.ts&#34;&gt;&lt;code&gt;GlobalThis&lt;/code&gt;&lt;/a&gt; - Declare locally scoped properties on &lt;code&gt;globalThis&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/package-json.d.ts&#34;&gt;&lt;code&gt;PackageJson&lt;/code&gt;&lt;/a&gt; - Type for &lt;a href=&#34;https://docs.npmjs.com/creating-a-package-json-file&#34;&gt;npm&#39;s &lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt;. It also includes support for &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html&#34;&gt;TypeScript Declaration Files&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/tsconfig-json.d.ts&#34;&gt;&lt;code&gt;TsConfigJson&lt;/code&gt;&lt;/a&gt; - Type for &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&#34;&gt;TypeScript&#39;s &lt;code&gt;tsconfig.json&lt;/code&gt; file&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Declined types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;If we decline a type addition, we will make sure to document the better solution here.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/pull/7&#34;&gt;&lt;code&gt;Diff&lt;/code&gt; and &lt;code&gt;Spread&lt;/code&gt;&lt;/a&gt; - The pull request author didn&#39;t provide any real-world use-cases and the PR went stale. If you think this type is useful, provide some real-world use-cases and we might reconsider.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/issues/33&#34;&gt;&lt;code&gt;Dictionary&lt;/code&gt;&lt;/a&gt; - You only save a few characters (&lt;code&gt;Dictionary&amp;lt;number&amp;gt;&lt;/code&gt; vs &lt;code&gt;Record&amp;lt;string, number&amp;gt;&lt;/code&gt;) from &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type&#34;&gt;&lt;code&gt;Record&lt;/code&gt;&lt;/a&gt;, which is more flexible and well-known. Also, you shouldn&#39;t use an object as a dictionary. We have &lt;code&gt;Map&lt;/code&gt; in JavaScript now.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/pull/4&#34;&gt;&lt;code&gt;ExtractProperties&lt;/code&gt; and &lt;code&gt;ExtractMethods&lt;/code&gt;&lt;/a&gt; - The types violate the single responsibility principle. Instead, refine your types into more granular type hierarchies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/pull/262&#34;&gt;&lt;code&gt;Url2Json&lt;/code&gt;&lt;/a&gt; - Inferring search parameters from a URL string is a cute idea, but not very useful in practice, since search parameters are usually dynamic and defined separately.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/pull/318&#34;&gt;&lt;code&gt;Nullish&lt;/code&gt;&lt;/a&gt; - The type only saves a couple of characters, not everyone knows what &#34;nullish&#34; means, and I&#39;m also trying to &lt;a href=&#34;https://github.com/sindresorhus/meta/discussions/7&#34;&gt;get away from &lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/pull/303&#34;&gt;&lt;code&gt;TitleCase&lt;/code&gt;&lt;/a&gt; - It&#39;s not solving a common need and is a better fit for a separate package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/pull/247&#34;&gt;&lt;code&gt;ExtendOr&lt;/code&gt; and &lt;code&gt;ExtendAnd&lt;/code&gt;&lt;/a&gt; - The benefits don&#39;t outweigh having to learn what they mean.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/type-fest/issues/371&#34;&gt;&lt;code&gt;PackageJsonExtras&lt;/code&gt;&lt;/a&gt; - There are too many possible configurations that can be put into &lt;code&gt;package.json&lt;/code&gt;. If you would like to extend &lt;code&gt;PackageJson&lt;/code&gt; to support an additional configuration in your project, please see the &lt;em&gt;Extending existing types&lt;/em&gt; section below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternative type names&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;If you know one of our types by a different name, add it here for discovery.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Prettify&lt;/code&gt;- See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/simplify.d.ts&#34;&gt;&lt;code&gt;Simplify&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Expand&lt;/code&gt;- See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/simplify.d.ts&#34;&gt;&lt;code&gt;Simplify&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PartialBy&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/set-optional.d.ts&#34;&gt;&lt;code&gt;SetOptional&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RecordDeep&lt;/code&gt;- See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/schema.d.ts&#34;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Mutable&lt;/code&gt;- See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/writable.d.ts&#34;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RequireOnlyOne&lt;/code&gt;, &lt;code&gt;OneOf&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/require-exactly-one.d.ts&#34;&gt;&lt;code&gt;RequireExactlyOne&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AtMostOne&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/require-one-or-none.d.ts&#34;&gt;&lt;code&gt;RequireOneOrNone&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AllKeys&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/keys-of-union.d.ts&#34;&gt;&lt;code&gt;KeysOfUnion&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Branded&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/opaque.d.ts&#34;&gt;&lt;code&gt;Tagged&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Opaque&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/opaque.d.ts&#34;&gt;&lt;code&gt;Tagged&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetElement&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/iterable-element.d.ts&#34;&gt;&lt;code&gt;IterableElement&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetEntry&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/iterable-element.d.ts&#34;&gt;&lt;code&gt;IterableElement&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetValues&lt;/code&gt; - See &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/iterable-element.d.ts&#34;&gt;&lt;code&gt;IterableElement&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Extending existing types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/type-fest/main/source/package-json.d.ts&#34;&gt;&lt;code&gt;PackageJson&lt;/code&gt;&lt;/a&gt; - There are a lot of tools that place extra configurations inside the &lt;code&gt;package.json&lt;/code&gt; file. You can extend &lt;code&gt;PackageJson&lt;/code&gt; to support these additional configurations.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBDAnmApnA3gBQIYGMDW2A5igFIDOEAdnNuXAEJ0o4HFmVUC+cAZlBBBwA5ElQBaXinIxhAbgCwAKFCRYCZGnQAZYFRgooPfoJHSANntmKlysWlaESFanAC8jZo-YuaAMgwLKwBhal5gIgB+AC44XX1DADpQqnCiLhsgA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; import type {PackageJson as BasePackageJson} from &#39;type-fest&#39;;&#xA; import type {Linter} from &#39;eslint&#39;;&#xA;&#xA; type PackageJson = BasePackageJson &amp;amp; {eslintConfig?: Linter.Config};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/g-plane/typed-query-selector&#34;&gt;typed-query-selector&lt;/a&gt; - Enhances &lt;code&gt;document.querySelector&lt;/code&gt; and &lt;code&gt;document.querySelectorAll&lt;/code&gt; with a template literal type that matches element types returned from an HTML element query selector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/types/eslint/index.d.ts&#34;&gt;&lt;code&gt;Linter.Config&lt;/code&gt;&lt;/a&gt; - Definitions for the &lt;a href=&#34;https://eslint.org/docs/user-guide/configuring/language-options&#34;&gt;ESLint configuration schema&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Built-in types&lt;/h3&gt; &#xA;&lt;p&gt;There are many advanced types most users don&#39;t know about.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype&#34;&gt;&lt;code&gt;Partial&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Make all properties in &lt;code&gt;T&lt;/code&gt; optional.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgHIHsAmEDC6QzADmyA3gLABQyycADnanALYQBcyAzmFKEQNxUaddFDAcQAV2YAjaIMoBfKlQQAbOJ05osEAIIMAQpOBrsUMkOR1eANziRkCfISKSoD4Pg4ZseAsTIALyW1DS0DEysHADkvvoMMQA0VsKi4sgAzAAMuVaKClY2wPaOknSYDrguADwA0sgQAB6QIJjaANYQAJ7oMDp+LsQAfAAUXd0cdUnI9mo+uv6uANp1ALoAlKHhyGAAFsCcAHTOAW4eYF4gyxNrwbNwago0ypRWp66jH8QcAApwYmAjxq8SWIy2FDCNDA3ToKFBQyIdR69wmfQG1TOhShyBgomQX3w3GQE2Q6IA8jIAFYQBBgI4TTiEs5bTQYsFInrLTbbHZOIlgZDlSqQABqj0kKBC3yINx6a2xfOQwH6o2FVXFaklwSCIUkbQghBAEEwENSfNOlykEGefNe5uhB2O6sgS3GPRmLogmslG1tLxUOKgEDA7hAuydtteryAA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; interface NodeConfig {&#xA; &#x9;&#x9;appName: string;&#xA; &#x9;&#x9;port: number;&#xA; }&#xA;&#xA; class NodeAppBuilder {&#xA; &#x9;&#x9;private configuration: NodeConfig = {&#xA; &#x9;&#x9;&#x9;&#x9;appName: &#39;NodeApp&#39;,&#xA; &#x9;&#x9;&#x9;&#x9;port: 3000&#xA; &#x9;&#x9;};&#xA;&#xA; &#x9;&#x9;private updateConfig&amp;lt;Key extends keyof NodeConfig&amp;gt;(key: Key, value: NodeConfig[Key]) {&#xA; &#x9;&#x9;&#x9;&#x9;this.configuration[key] = value;&#xA; &#x9;&#x9;}&#xA;&#xA; &#x9;&#x9;config(config: Partial&amp;lt;NodeConfig&amp;gt;) {&#xA; &#x9;&#x9;&#x9;&#x9;type NodeConfigKey = keyof NodeConfig;&#xA;&#xA; &#x9;&#x9;&#x9;&#x9;for (const key of Object.keys(config) as NodeConfigKey[]) {&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;const updateValue = config[key];&#xA;&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (updateValue === undefined) {&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.updateConfig(key, updateValue);&#xA; &#x9;&#x9;&#x9;&#x9;}&#xA;&#xA; &#x9;&#x9;&#x9;&#x9;return this;&#xA; &#x9;&#x9;}&#xA; }&#xA;&#xA; // `Partial&amp;lt;NodeConfig&amp;gt;`` allows us to provide only a part of the&#xA; // NodeConfig interface.&#xA; new NodeAppBuilder().config({appName: &#39;ToDoApp&#39;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#requiredtype&#34;&gt;&lt;code&gt;Required&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Make all properties in &lt;code&gt;T&lt;/code&gt; required.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/AQ4SwOwFwUwJwGYEMDGNgGED21VQGJZwC2wA3gFCjXAzFJgA2A-AFzADOUckA5gNxUaIYjA4ckvGG07c+g6gF8KQkAgCuEFFDA5O6gEbEwUbLm2ESwABQIixACJIoSdgCUYAR3Vg4MACYAPGYuFvYAfACU5Ko0APRxwADKMBD+wFAAFuh2Vv7OSBlYGdmc8ABu8LHKsRyGxqY4oQT21pTCIHQMjOwA5DAAHgACxAAOjDAAdChYxL0ANLHUouKSMH0AEmAAhJhY6ozpAJ77GTCMjMCiV0ToSAb7UJPPC9WRgrEJwAAqR6MwSRQPFGUFocDgRHYxnEfGAowh-zgUCOwF6KwkUl6tXqJhCeEsxDaS1AXSYfUGI3GUxmc0WSneQA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; interface ContactForm {&#xA; &#x9;&#x9;email?: string;&#xA; &#x9;&#x9;message?: string;&#xA; }&#xA;&#xA; function submitContactForm(formData: Required&amp;lt;ContactForm&amp;gt;) {&#xA; &#x9;&#x9;// Send the form data to the server.&#xA; }&#xA;&#xA; submitContactForm({&#xA; &#x9;&#x9;email: &#39;ex@mple.com&#39;,&#xA; &#x9;&#x9;message: &#39;Hi! Could you tell me more about…&#39;,&#xA; });&#xA;&#xA; // TypeScript error: missing property &#39;message&#39;&#xA; submitContactForm({&#xA; &#x9;&#x9;email: &#39;ex@mple.com&#39;,&#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype&#34;&gt;&lt;code&gt;Readonly&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Make all properties in &lt;code&gt;T&lt;/code&gt; readonly.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/AQ4UwOwVwW2AZA9gc3mAbmANsA3gKFCOAHkAzMgGkOJABEwAjKZa2kAUQCcvEu32AMQCGAF2FYBIAL4BufDRABLCKLBcywgMZgEKZOoDCiCGSXI8i4hGEwwALmABnUVxXJ57YFgzZHSVF8sT1BpBSItLGEnJz1kAy5LLy0TM2RHACUwYQATEywATwAeAITjU3MAPnkrCJMXLigtUT4AClxgGztKbyDgaX99I1TzAEokr1BRAAslJwA6FIqLAF48TtswHp9MHDla9hJGACswZvmyLjAwAC8wVpm5xZHkUZDaMKIwqyWXYCW0oN4sNlsA1h0ug5gAByACyBQAggAHJHQ7ZBIFoXbzBjMCz7OoQP5YIaJNYQMAAdziCVaALGNSIAHomcAACoFJFgADKWjcSNEwG4vC4ji0wggEEQguiTnMEGALWAV1yAFp8gVgEjeFyuKICvMrCTgVxnst5jtsGC4ljsPNhXxGaAWcAAOq6YRXYDCRg+RWIcA5JSC+kWdCepQ+v3RYCU3RInzRMCGwlpC19NYBW1Ye08R1AA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; enum LogLevel {&#xA; &#x9;&#x9;Off,&#xA; &#x9;&#x9;Debug,&#xA; &#x9;&#x9;Error,&#xA; &#x9;&#x9;Fatal&#xA; };&#xA;&#xA; interface LoggerConfig {&#xA; &#x9;&#x9;name: string;&#xA; &#x9;&#x9;level: LogLevel;&#xA; }&#xA;&#xA; class Logger {&#xA; &#x9;&#x9;config: Readonly&amp;lt;LoggerConfig&amp;gt;;&#xA;&#xA; &#x9;&#x9;constructor({name, level}: LoggerConfig) {&#xA; &#x9;&#x9;&#x9;&#x9;this.config = {name, level};&#xA; &#x9;&#x9;&#x9;&#x9;Object.freeze(this.config);&#xA; &#x9;&#x9;}&#xA; }&#xA;&#xA; const config: LoggerConfig = {&#xA; &#x9;name: &#39;MyApp&#39;,&#xA; &#x9;level: LogLevel.Debug&#xA; };&#xA;&#xA; const logger = new Logger(config);&#xA;&#xA; // TypeScript Error: cannot assign to read-only property.&#xA; logger.config.level = LogLevel.Error;&#xA;&#xA; // We are able to edit config variable as we please.&#xA; config.level = LogLevel.Error;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys&#34;&gt;&lt;code&gt;Pick&amp;lt;T, K&amp;gt;&lt;/code&gt;&lt;/a&gt; - From &lt;code&gt;T&lt;/code&gt;, pick a set of properties whose keys are in the union &lt;code&gt;K&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/AQ4SwOwFwUwJwGYEMDGNgEE5TCgNugN4BQoZwOUBAXMAM5RyQDmA3KeSFABYCuAtgCMISMHloMmENh04oA9tBjQJjFuzIBfYrOAB6PcADCcGElh1gEGAHcKATwAO6ebyjB5CTNlwFwSxFR0BX5HeToYABNgBDh5fm8cfBg6AHIKG3ldA2BHOOcfFNpUygJ0pAhokr4hETFUgDpswywkggAFUwA3MFtgAF5gQgowKhhVKTYKGuFRcXo1aVZgbTIoJ3RW3xhOmB6+wfbcAGsAHi3kgBpgEtGy4AAfG54BWfqAPnZm4AAlZUj4MAkMA8GAGB4vEgfMlLLw6CwPBA8PYRmMgZVgAC6CgmI4cIommQELwICh8RBgKZKvALh1ur0bHQABR5PYMui0Wk7em2ADaAF0AJS0AASABUALIAGQAogR+Mp3CROCAFBBwVC2ikBpj5CgBIqGjizLA5TAFdAmalImAuqlBRoVQh5HBgEy1eDWfs7J5cjzGYKhroVfpDEhHM4MV6GRR5NN0JrtnRg6BVirTFBeHAKYmYY6QNpdB73LmCJZBlSAXAubtvczeSmQMNSuMbmKNgBlHFgPEUNwusBIPAAQlS1xetTmxT0SDoESgdD0C4aACtHMwxytLrohawgA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; interface Article {&#xA; &#x9;&#x9;title: string;&#xA; &#x9;&#x9;thumbnail: string;&#xA; &#x9;&#x9;content: string;&#xA; }&#xA;&#xA; // Creates new type out of the `Article` interface composed&#xA; // from the Articles&#39; two properties: `title` and `thumbnail`.&#xA; // `ArticlePreview = {title: string; thumbnail: string}`&#xA; type ArticlePreview = Pick&amp;lt;Article, &#39;title&#39; | &#39;thumbnail&#39;&amp;gt;;&#xA;&#xA; // Render a list of articles using only title and description.&#xA; function renderArticlePreviews(previews: ArticlePreview[]): HTMLElement {&#xA; &#x9;&#x9;const articles = document.createElement(&#39;div&#39;);&#xA;&#xA; &#x9;&#x9;for (const preview of previews) {&#xA; &#x9;&#x9;&#x9;&#x9;// Append preview to the articles.&#xA; &#x9;&#x9;}&#xA;&#xA; &#x9;&#x9;return articles;&#xA; }&#xA;&#xA; const articles = renderArticlePreviews([&#xA; &#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;title: &#39;TypeScript tutorial!&#39;,&#xA; &#x9;&#x9;&#x9;thumbnail: &#39;/assets/ts.jpg&#39;&#xA; &#x9;&#x9;}&#xA; ]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type&#34;&gt;&lt;code&gt;Record&amp;lt;K, T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Construct a type with a set of properties &lt;code&gt;K&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/AQ4ejYAUHsGcCWAXBMB2dgwGbAKYC2ADgDYwCeeemCaWArgE7ADGMxAhmuQHQBQoYEnJE8wALKEARnkaxEKdMAC8wAOS0kstGuAAfdQBM8ANzxlRjXQbVaWACwC0JPB0NqA3HwGgIwAJJoWozYHCxixnAsjAhStADmwESMMJYo1Fi4HMCIaPEu+MRklHj8gpqyoeHAAKJFFFTAAN4+giDYCIxwSAByHAR4AFw5SDF5Xm2gJBzdfQPD3WPxE5PAlBxdAPLYNQAelgh4aOHDaPQEMowrIAC+3oJ+AMKMrlrAXFhSAFZ4LEhC9g4-0BmA4JBISXgiCkBQABpILrJ5MhUGhYcATGD6Bk4Hh-jNgABrPDkOBlXyQAAq9ngYmJpOAAHcEOCRjAXqwYODfoo6DhakUSph+Uh7GI4P0xER4Cj0OSQGwMP8tP1hgAlX7swwAHgRl2RvIANALSA08ABtAC6AD4VM1Wm0Kow0MMrYaHYJjGYLLJXZb3at1HYnC43Go-QHQDcvA6-JsmEJXARgCDgMYWAhjIYhDAU+YiMAAFIwex0ZmilMITCGF79TLAGRsAgJYAAZRwSEZGzEABFTOZUrJ5Yn+jwnWgeER6HB7AAKJrADpdXqS4ZqYultTG6azVfqHswPBbtauLY7fayQ7HIbAAAMwBuAEoYw9IBq2Ixs9h2eFMOQYPQObALQKJgggABeYhghCIpikkKRpOQRIknAsZUiIeCttECBEP8NSMCkjDDAARMGziuIYxHwYOjDCMBmDNnAuTxA6irdCOBB1Lh5Dqpqn66tISIykawBnOCtqqC0gbjqc9DgpGkxegOliyfJDrRkAA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; // Positions of employees in our company.&#xA; type MemberPosition = &#39;intern&#39; | &#39;developer&#39; | &#39;tech-lead&#39;;&#xA;&#xA; // Interface describing properties of a single employee.&#xA; interface Employee {&#xA; &#x9;&#x9;firstName: string;&#xA; &#x9;&#x9;lastName: string;&#xA; &#x9;&#x9;yearsOfExperience: number;&#xA; }&#xA;&#xA; // Create an object that has all possible `MemberPosition` values set as keys.&#xA; // Those keys will store a collection of Employees of the same position.&#xA; const team: Record&amp;lt;MemberPosition, Employee[]&amp;gt; = {&#xA; &#x9;&#x9;intern: [],&#xA; &#x9;&#x9;developer: [],&#xA; &#x9;&#x9;&#39;tech-lead&#39;: [],&#xA; };&#xA;&#xA; // Our team has decided to help John with his dream of becoming Software Developer.&#xA; team.intern.push({&#xA; &#x9;firstName: &#39;John&#39;,&#xA; &#x9;lastName: &#39;Doe&#39;,&#xA; &#x9;yearsOfExperience: 0&#xA; });&#xA;&#xA; // `Record` forces you to initialize all of the property keys.&#xA; // TypeScript Error: &#34;tech-lead&#34; property is missing&#xA; const teamEmpty: Record&amp;lt;MemberPosition, null&amp;gt; = {&#xA; &#x9;&#x9;intern: null,&#xA; &#x9;&#x9;developer: null,&#xA; };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#excludetype-excludedunion&#34;&gt;&lt;code&gt;Exclude&amp;lt;T, U&amp;gt;&lt;/code&gt;&lt;/a&gt; - Exclude from &lt;code&gt;T&lt;/code&gt; those types that are assignable to &lt;code&gt;U&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/JYOwLgpgTgZghgYwgAgMrQG7QMIHsQzADmyA3gFDLIAOuUYAXMiAK4A2byAPsgM5hRQJHqwC2AI2gBucgF9y5MAE9qKAEoQAjiwj8AEnBAATNtGQBeZAAooWphu26wAGmS3e93bRC8IASgsAPmRDJRlyAHoI5ABRAA8ENhYjFFYOZGVVZBgoXFFkAAM0zh5+QRBhZhYJaAKAOkjogEkQZAQ4X2QAdwALCFbaemRgXmQtFjhOMFwq9K6ULuB0lk6U+HYwZAxJnQaYFhAEMGB8ZCIIMAAFOjAANR2IK0HGWISklIAedCgsKDwCYgAbQA5M9gQBdVzFQJ+JhiSRQMiUYYwayZCC4VHPCzmSzAspCYEBWxgFhQAZwKC+FpgJ43VwARgADH4ZFQSWSBjcZPJyPtDsdTvxKWBvr8rD1DCZoJ5HPopaYoK4EPhCEQmGKcKriLCtrhgEYkVQVT5Nr4fmZLLZtMBbFZgT0wGBqES6ghbHBIJqoBKFdBWQpjfh+DQbhY2tqiHVsbjLMVkAB+ZAAZiZaeQTHOVxu9ySjxNaujNwDVHNvzqbBGkBAdPoAfkQA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; interface ServerConfig {&#xA; &#x9;port: null | string | number;&#xA; }&#xA;&#xA; type RequestHandler = (request: Request, response: Response) =&amp;gt; void;&#xA;&#xA; // Exclude `null` type from `null | string | number`.&#xA; // In case the port is equal to `null`, we will use default value.&#xA; function getPortValue(port: Exclude&amp;lt;ServerConfig[&#39;port&#39;], null&amp;gt;): number {&#xA; &#x9;if (typeof port === &#39;string&#39;) {&#xA; &#x9;&#x9;return parseInt(port, 10);&#xA; &#x9;}&#xA;&#xA; &#x9;return port;&#xA; }&#xA;&#xA; function startServer(handler: RequestHandler, config: ServerConfig): void {&#xA; &#x9;const server = require(&#39;http&#39;).createServer(handler);&#xA;&#xA; &#x9;const port = config.port === null ? 3000 : getPortValue(config.port);&#xA; &#x9;server.listen(port);&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#extracttype-union&#34;&gt;&lt;code&gt;Extract&amp;lt;T, U&amp;gt;&lt;/code&gt;&lt;/a&gt; - Extract from &lt;code&gt;T&lt;/code&gt; those types that are assignable to &lt;code&gt;U&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXzSwEdkQBJYACgEoAueVZAWwCMQYBuAKDDwGcM8MgBF4AXngBlAJ6scESgHIRi6ty5ZUGdoihgEABXZ888AN5d48ANoiAuvUat23K6ihMQ9ATE0BzV3goPy8GZjZOLgBfLi4Aejj4AEEICBwAdz54MAALKFQQ+BxEeAAHY1NgKAwoIKy0grr4DByEUpgccpgMaXgAaxBerCzi+B9-ZulygDouFHRsU1z8kKMYE1RhaqgAHkt4AHkWACt4EAAPbVRgLLWNgBp9gGlBs8uQa6yAUUuYPQwdgNpKM7nh7mMML4CgA+R5WABqUAgpDeVxuhxO1he0jsXGh8EoOBO9COx3BQPo2PBADckaR6IjkSA6PBqTgsMBzPsicdrEC7OJWXSQNwYvFEgAVTS9JLXODpeDpKBZFg4GCoWa8VACIJykAKiQWKy2YQOAioYikCg0OEMDyhRSy4DyxS24KhAAMjyi6gS8AAwjh5OD0iBFHAkJoEOksC1mnkMJq8gUQKDNttKPlnfrwYp3J5XfBHXqoKpfYkAOI4ansTxaeDADmoRSCCBYAbxhC6TDx6rwYHIRX5bScjA4bLJwoDmDwDkfbA9JMrVMVdM1TN69LgkTgwgkchUahqIA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; declare function uniqueId(): number;&#xA;&#xA; const ID = Symbol(&#39;ID&#39;);&#xA;&#xA; interface Person {&#xA; &#x9;[ID]: number;&#xA; &#x9;name: string;&#xA; &#x9;age: number;&#xA; }&#xA;&#xA; // Allows changing the person data as long as the property key is of string type.&#xA; function changePersonData&amp;lt;&#xA; &#x9;Obj extends Person,&#xA; &#x9;Key extends Extract&amp;lt;keyof Person, string&amp;gt;,&#xA; &#x9;Value extends Obj[Key]&#xA; &amp;gt; (obj: Obj, key: Key, value: Value): void {&#xA; &#x9;obj[key] = value;&#xA; }&#xA;&#xA; // Tiny Andrew was born.&#xA; const andrew = {&#xA; &#x9;[ID]: uniqueId(),&#xA; &#x9;name: &#39;Andrew&#39;,&#xA; &#x9;age: 0,&#xA; };&#xA;&#xA; // Cool, we&#39;re fine with that.&#xA; changePersonData(andrew, &#39;name&#39;, &#39;Pony&#39;);&#xA;&#xA; // Government didn&#39;t like the fact that you wanted to change your identity.&#xA; changePersonData(andrew, ID, uniqueId());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#nonnullabletype&#34;&gt;&lt;code&gt;NonNullable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Exclude &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; from &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; Works with &#xA;   &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#strictNullChecks&#34;&gt;&lt;code&gt;strictNullChecks&lt;/code&gt;&lt;/a&gt; set to &#xA;   &lt;code&gt;true&lt;/code&gt;. &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/C4TwDgpgBACg9gJ2AOQK4FsBGEFQLxQDOwCAlgHYDmUAPlORtrnQwDasDcAUFwPQBU-WAEMkUOADMowqAGNWwwoSgATCBIqlgpOOSjAAFsOBRSy1IQgr9cKJlSlW1mZYQA3HFH68u8xcoBlHA8EACEHJ08Aby4oKDBUTFZSWXjEFEYcAEIALihkXTR2YSSIAB54JDQsHAA+blj4xOTUsHSACkMzPKD3HHDHNQQAGjSkPMqMmoQASh7g-oihqBi4uNIpdraxPAI2VhmVxrX9AzMAOm2ppnwoAA4ABifuE4BfKAhWSyOTuK7CS7pao3AhXF5rV48E4ICDAVAIPT-cGQyG+XTEIgLMJLTx7CAAdygvRCA0iCHaMwarhJOIQjUBSHaACJHk8mYdeLwxtdcVAAOSsh58+lXdr7Dlcq7A3n3J4PEUdADMcspUE53OluAIUGVTx46oAKuAIAFZGQwCYAKIIBCILjUxaDHAMnla+iodjcIA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; type PortNumber = string | number | null;&#xA;&#xA; /** Part of a class definition that is used to build a server */&#xA; class ServerBuilder {&#xA; &#x9;&#x9;portNumber!: NonNullable&amp;lt;PortNumber&amp;gt;;&#xA;&#xA; &#x9;&#x9;port(this: ServerBuilder, port: PortNumber): ServerBuilder {&#xA; &#x9;&#x9;&#x9;&#x9;if (port == null) {&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.portNumber = 8000;&#xA; &#x9;&#x9;&#x9;&#x9;} else {&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.portNumber = port;&#xA; &#x9;&#x9;&#x9;&#x9;}&#xA;&#xA; &#x9;&#x9;&#x9;&#x9;return this;&#xA; &#x9;&#x9;}&#xA; }&#xA;&#xA; const serverBuilder = new ServerBuilder();&#xA;&#xA; serverBuilder&#xA; &#x9;&#x9;.port(&#39;8000&#39;)   // portNumber = &#39;8000&#39;&#xA; &#x9;&#x9;.port(null)     // portNumber =  8000&#xA; &#x9;&#x9;.port(3000);    // portNumber =  3000&#xA;&#xA; // TypeScript error&#xA; serverBuilder.portNumber = null;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterstype&#34;&gt;&lt;code&gt;Parameters&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Obtain the parameters of a function type in a tuple.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/GYVwdgxgLglg9mABAZwBYmMANgUwBQxgAOIUAXIgIZgCeA2gLoCUFAbnDACaIDeAUIkQB6IYgCypSlBxUATrMo1ECsJzgBbLEoipqAc0J7EMKMgDkiHLnU4wp46pwAPHMgB0fAL58+oSLARECEosLAA5ABUYG2QAHgAxJGdpVWREPDdMylk9ZApqemZEAF4APipacrw-CApEgBogkKwAYThwckQwEHUAIxxZJl4BYVEImiIZKF0oZRwiWVdbeygJmThgOYgcGFYcbhqApCJsyhtpWXcR1cnEePBoeDAABVPzgbTixFeFd8uEsClADcIxGiygIFkSEOT3SmTc2VydQeRx+ZxwF2QQ34gkEwDgsnSuFmMBKiAADEDjIhYk1Qm0OlSYABqZnYka4xA1DJZHJYkGc7yCbyeRA+CAIZCzNAYbA4CIAdxg2zJwVCkWirjwMswuEaACYmCCgA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; function shuffle(input: any[]): void {&#xA; &#x9;// Mutate array randomly changing its&#39; elements indexes.&#xA; }&#xA;&#xA; function callNTimes&amp;lt;Fn extends (...arguments_: any[]) =&amp;gt; any&amp;gt; (func: Fn, callCount: number) {&#xA; &#x9;// Type that represents the type of the received function parameters.&#xA; &#x9;type FunctionParameters = Parameters&amp;lt;Fn&amp;gt;;&#xA;&#xA; &#x9;return function (...arguments_: FunctionParameters) {&#xA; &#x9;&#x9;for (let i = 0; i &amp;lt; callCount; i++) {&#xA; &#x9;&#x9;&#x9;func(...arguments_);&#xA; &#x9;&#x9;}&#xA; &#x9;}&#xA; }&#xA;&#xA; const shuffleTwice = callNTimes(shuffle, 2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#constructorparameterstype&#34;&gt;&lt;code&gt;ConstructorParameters&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Obtain the parameters of a constructor function type in a tuple.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/MYGwhgzhAECCBOAXAlqApgWQPYBM0mgG8AoaaFRENALmgkXmQDsBzAblOmCycTV4D8teo1YdO3JiICuwRFngAKClWENmLAJRFOZRAAtkEAHQq00ALzlklNBzIBfYk+KhIMAJJTEYJsDQAwmDA+mgAPAAq0GgAHnxMODCKTGgA7tCKxllg8CwQtL4AngDaALraFgB80EWa1SRkAA6MAG5gfNAB4FABPDJyCrQR9tDNyG0dwMGhtBhgjWEiGgA00F70vv4RhY3hEZXVVinpc42KmuJkkv3y8Bly8EPaDWTkhiZd7r3e8LK3llwGCMXGQWGhEOsfH5zJlsrl8p0+gw-goAAo5MAAW3BaHgEEilU0tEhmzQ212BJ0ry4SOg+kg+gBBiMximIGA0nAfAQLGk2N4EAAEgzYcYcnkLsRdDTvNEYkYUKwSdCme9WdM0MYwYhFPSIPpJdTkAAzDKxBUaZX+aAAQgsVmkCTQxuYaBw2ng4Ok8CYcotSu8pMur09iG9vuObxZnx6SN+AyUWTF8MN0CcZE4Ywm5jZHK5aB5fP4iCFIqT4oRRTKRLo6lYVNeAHpG50wOzOe1zHr9NLQ+HoABybsD4HOKXXRA1JCoKhBELmI5pNaB6Fz0KKBAodDYPAgSUTmqYsAALx4m5nC6nW9nGq14KtaEUA9gR9PvuNCjQ9BgACNvcwNBtAcLiAA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; class ArticleModel {&#xA; &#x9;title: string;&#xA; &#x9;content?: string;&#xA;&#xA; &#x9;constructor(title: string) {&#xA; &#x9;&#x9;this.title = title;&#xA; &#x9;}&#xA; }&#xA;&#xA; class InstanceCache&amp;lt;T extends (new (...arguments_: any[]) =&amp;gt; any)&amp;gt; {&#xA; &#x9;private ClassConstructor: T;&#xA; &#x9;private cache: Map&amp;lt;string, InstanceType&amp;lt;T&amp;gt;&amp;gt; = new Map();&#xA;&#xA; &#x9;constructor (ctr: T) {&#xA; &#x9;&#x9;this.ClassConstructor = ctr;&#xA; &#x9;}&#xA;&#xA; &#x9;getInstance (...arguments_: ConstructorParameters&amp;lt;T&amp;gt;): InstanceType&amp;lt;T&amp;gt; {&#xA; &#x9;&#x9;const hash = this.calculateArgumentsHash(...arguments_);&#xA;&#xA; &#x9;&#x9;const existingInstance = this.cache.get(hash);&#xA; &#x9;&#x9;if (existingInstance !== undefined) {&#xA; &#x9;&#x9;&#x9;return existingInstance;&#xA; &#x9;&#x9;}&#xA;&#xA; &#x9;&#x9;return new this.ClassConstructor(...arguments_);&#xA; &#x9;}&#xA;&#xA; &#x9;private calculateArgumentsHash(...arguments_: any[]): string {&#xA; &#x9;&#x9;// Calculate hash.&#xA; &#x9;&#x9;return &#39;hash&#39;;&#xA; &#x9;}&#xA; }&#xA;&#xA; const articleCache = new InstanceCache(ArticleModel);&#xA; const amazonArticle = articleCache.getInstance(&#39;Amazon forests burning!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype&#34;&gt;&lt;code&gt;ReturnType&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Obtain the return type of a function type.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/MYGwhgzhAECSAmICmBlJAnAbgS2E6A3gFDTTwD2AcuQC4AW2AdgOYAUAlAFzSbnbyEAvkWFFQkGJSQB3GMVI1sNZNwg10TZgG4S0YOUY0kh1es07d+xmvQBXYDXLpWi5UlMaWAGj0GjJ6BtNdkJdBQYIADpXZGgAXmgYpB1ScOwoq38aeN9DYxoU6GFRKzVoJjUwRjwAYXJbPPRuAFkwAAcAHgAxBodsAx9GWwBbACMMAD4cxhloVraOCyYjdAAzMDxoOut1e0d0UNIZ6WhWSPOwdGYIbiqATwBtAF0uaHudUQB6ACpv6ABpJBINqJdAbADW0Do5BOw3u5R2VTwMHIq2gAANtjZ0bkbHsnFCwJh8ONjHp0EgwEZ4JFoN9PkRVr1FAZoMwkDRYIjqkgOrosepoEgAB7+eAwAV2BxOLy6ACCVxgIrFEoMeOl6AACpcwMMORgIB1JRMiBNWKVdhruJKfOdIpdrtwFddXlzKjyACp3Nq842HaDIbL6BrZBIVGhIpB1EMYSLsmjmtWW-YhAA+qegAAYLKQLQj3ZsEsdccmnGcLor2Dn8xGedHGpEIBzEzspfsfMHDNAANTQACMVaIljV5GQkRA5DYmIpVKQAgAJARO9le33BDXIyi0YuLW2nJFGLqkOvxFB0YPdBSaLZ0IwNzyPkO8-xkGgsLh8Al427a3hWAhXwwHA8EHT5PmgAB1bAQBAANJ24adKWpft72RaBUTgRBUCAj89HAM8xCTaBjggABRQx0DuHJv25P9dCkWRZVIAAiBjoFImpmjlFBgA0NpsjadByDacgIDAEAIAAQmYpjoGYgAZSBsmGPw6DtZiiFA8CoJguDmAQmoZ2QvtUKQLdoAYmBTwgdEiCAA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; /** Provides every element of the iterable `iter` into the `callback` function and stores the results in an array. */&#xA; function mapIter&amp;lt;&#xA; &#x9;&#x9;Elem,&#xA; &#x9;&#x9;Func extends (elem: Elem) =&amp;gt; any,&#xA; &#x9;&#x9;Ret extends ReturnType&amp;lt;Func&amp;gt;&#xA; &amp;gt;(iter: Iterable&amp;lt;Elem&amp;gt;, callback: Func): Ret[] {&#xA; &#x9;&#x9;const mapped: Ret[] = [];&#xA;&#xA; &#x9;&#x9;for (const elem of iter) {&#xA; &#x9;&#x9;&#x9;&#x9;mapped.push(callback(elem));&#xA; &#x9;&#x9;}&#xA;&#xA; &#x9;&#x9;return mapped;&#xA; }&#xA;&#xA; const setObject: Set&amp;lt;string&amp;gt; = new Set();&#xA; const mapObject: Map&amp;lt;number, string&amp;gt; = new Map();&#xA;&#xA; mapIter(setObject, (value: string) =&amp;gt; value.indexOf(&#39;Foo&#39;)); // number[]&#xA;&#xA; mapIter(mapObject, ([key, value]: [number, string]) =&amp;gt; {&#xA; &#x9;&#x9;return key % 2 === 0 ? value : &#39;Odd&#39;;&#xA; }); // string[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#instancetypetype&#34;&gt;&lt;code&gt;InstanceType&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Obtain the instance type of a constructor function type.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/MYGwhgzhAECSAmICmBlJAnAbgS2E6A3gFDTTwD2AcuQC4AW2AdgOYAUAlAFzSbnbyEAvkWFFQkGJSQB3GMVI1sNZNwg10TZgG4S0YOUY0kh1es07d+xmvQBXYDXLpWi5UlMaWAGj0GjJ6BtNdkJdBQYIADpXZGgAXmgYpB1ScOwoq38aeN9DYxoU6GFRKzVoJjUwRjwAYXJbPPRuAFkwAAcAHgAxBodsAx9GWwBbACMMAD4cxhloVraOCyYjdAAzMDxoOut1e0d0UNIZ6WhWSPOwdGYIbiqATwBtAF0uaHudUQB6ACpv6ABpJBINqJdAbADW0Do5BOw3u5R2VTwMHIq2gAANtjZ0bkbHsnFCwJh8ONjHp0EgwEZ4JFoN9PkRVr1FAZoMwkDRYIjqkgOrosepoEgAB7+eAwAV2BxOLy6ACCVxgIrFEoMeOl6AACpcwMMORgIB1JRMiBNWKVdhruJKfOdIpdrtwFddXlzKjyACp3Nq842HaDIbL6BrZBIVGhIpB1EMYSLsmjmtWW-YhAA+qegAAYLKQLQj3ZsEsdccmnGcLor2Dn8xGedHGpEIBzEzspfsfMHDNAANTQACMVaIljV5GQkRA5DYmIpVKQAgAJARO9le33BDXIyi0YuLW2nJFGLqkOvxFB0YPdBSaLZ0IwNzyPkO8-xkGgsLh8Al427a3hWAhXwwHA8EHT5PmgAB1bAQBAANJ24adKWpft72RaBUTgRBUCAj89HAM8xCTaBjggABRQx0DuHJv25P9dCkWRZVIAAiBjoFImpmjlFBgA0NpsjadByDacgIDAEAIAAQmYpjoGYgAZSBsmGPw6DtZiiFA8CoJguDmAQmoZ2QvtUKQLdoAYmBTwgdEiCAA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; class IdleService {&#xA; &#x9;&#x9;doNothing (): void {}&#xA; }&#xA;&#xA; class News {&#xA; &#x9;&#x9;title: string;&#xA; &#x9;&#x9;content: string;&#xA;&#xA; &#x9;&#x9;constructor(title: string, content: string) {&#xA; &#x9;&#x9;&#x9;&#x9;this.title = title;&#xA; &#x9;&#x9;&#x9;&#x9;this.content = content;&#xA; &#x9;&#x9;}&#xA; }&#xA;&#xA; const instanceCounter: Map&amp;lt;Function, number&amp;gt; = new Map();&#xA;&#xA; interface Constructor {&#xA; &#x9;&#x9;new(...arguments_: any[]): any;&#xA; }&#xA;&#xA; // Keep track how many instances of `Constr` constructor have been created.&#xA; function getInstance&amp;lt;&#xA; &#x9;&#x9;Constr extends Constructor,&#xA; &#x9;&#x9;Arguments extends ConstructorParameters&amp;lt;Constr&amp;gt;&#xA; &amp;gt;(constructor: Constr, ...arguments_: Arguments): InstanceType&amp;lt;Constr&amp;gt; {&#xA; &#x9;&#x9;let count = instanceCounter.get(constructor) || 0;&#xA;&#xA; &#x9;&#x9;const instance = new constructor(...arguments_);&#xA;&#xA; &#x9;&#x9;instanceCounter.set(constructor, count + 1);&#xA;&#xA; &#x9;&#x9;console.log(`Created ${count + 1} instances of ${Constr.name} class`);&#xA;&#xA; &#x9;&#x9;return instance;&#xA; }&#xA;&#xA;&#xA; const idleService = getInstance(IdleService);&#xA; // Will log: `Created 1 instances of IdleService class`&#xA; const newsEntry = getInstance(News, &#39;New ECMAScript proposals!&#39;, &#39;Last month...&#39;);&#xA; // Will log: `Created 1 instances of News class`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys&#34;&gt;&lt;code&gt;Omit&amp;lt;T, K&amp;gt;&lt;/code&gt;&lt;/a&gt; - Constructs a type by picking all properties from T and then removing K.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://typescript-play.js.org/?target=6#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlks4BzCAVShwC5kBnMKUcgbmKYAcIFgIjBs1YgOXMpSFMWbANoBdTiW5woFddwAW0kfKWEAvoUIB6U8gDCUCHEiNkICAHdkYAJ69kz4GC3JcPG4oAHteKDABBxCYNAxsPFBIWEQUCAAPJG4wZABySUFcgJAAEzMLXNV1ck0dIuCw6EjBADpy5AB1FAQ4EGQAV0YUP2AHDy8wEOQbUugmBLwtEIA3OcmQnEjuZBgQqE7gAGtgZAhwKHdkHFGwNvGUdDIcAGUliIBJEF3kAF5kAHlML4ADyPBIAGjyBUYRQAPnkqho4NoYQA+TiEGD9EAISIhPozErQMG4AASK2gn2+AApek9pCSXm8wFSQooAJQMUkAFQAsgAZACiOAgmDOOSIJAQ+OYyGl4DgoDmf2QJRCCH6YvALQQNjsEGFovF1NyJWAy1y7OUyHMyE+yRAuFImG4Iq1YDswHxbRINjA-SgfXlHqVUE4xiAA&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; interface Animal {&#xA; &#x9;&#x9;imageUrl: string;&#xA; &#x9;&#x9;species: string;&#xA; &#x9;&#x9;images: string[];&#xA; &#x9;&#x9;paragraphs: string[];&#xA; }&#xA;&#xA; // Creates new type with all properties of the `Animal` interface&#xA; // except &#39;images&#39; and &#39;paragraphs&#39; properties. We can use this&#xA; // type to render small hover tooltip for a wiki entry list.&#xA; type AnimalShortInfo = Omit&amp;lt;Animal, &#39;images&#39; | &#39;paragraphs&#39;&amp;gt;;&#xA;&#xA; function renderAnimalHoverInfo (animals: AnimalShortInfo[]): HTMLElement {&#xA; &#x9;&#x9;const container = document.createElement(&#39;div&#39;);&#xA; &#x9;&#x9;// Internal implementation.&#xA; &#x9;&#x9;return container;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#uppercasestringtype&#34;&gt;&lt;code&gt;Uppercase&amp;lt;S extends string&amp;gt;&lt;/code&gt;&lt;/a&gt; - Transforms every character in a string into uppercase.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; type T = Uppercase&amp;lt;&#39;hello&#39;&amp;gt;;  // &#39;HELLO&#39;&#xA;&#xA; type T2 = Uppercase&amp;lt;&#39;foo&#39; | &#39;bar&#39;&amp;gt;;  // &#39;FOO&#39; | &#39;BAR&#39;&#xA;&#xA; type T3&amp;lt;S extends string&amp;gt; = Uppercase&amp;lt;`aB${S}`&amp;gt;;&#xA; type T4 = T3&amp;lt;&#39;xYz&#39;&amp;gt;;  // &#39;ABXYZ&#39;&#xA;&#xA; type T5 = Uppercase&amp;lt;string&amp;gt;;  // string&#xA; type T6 = Uppercase&amp;lt;any&amp;gt;;  // any&#xA; type T7 = Uppercase&amp;lt;never&amp;gt;;  // never&#xA; type T8 = Uppercase&amp;lt;42&amp;gt;;  // Error, type &#39;number&#39; does not satisfy the constraint &#39;string&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#lowercasestringtype&#34;&gt;&lt;code&gt;Lowercase&amp;lt;S extends string&amp;gt;&lt;/code&gt;&lt;/a&gt; - Transforms every character in a string into lowercase.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; type T = Lowercase&amp;lt;&#39;HELLO&#39;&amp;gt;;  // &#39;hello&#39;&#xA;&#xA; type T2 = Lowercase&amp;lt;&#39;FOO&#39; | &#39;BAR&#39;&amp;gt;;  // &#39;foo&#39; | &#39;bar&#39;&#xA;&#xA; type T3&amp;lt;S extends string&amp;gt; = Lowercase&amp;lt;`aB${S}`&amp;gt;;&#xA; type T4 = T3&amp;lt;&#39;xYz&#39;&amp;gt;;  // &#39;abxyz&#39;&#xA;&#xA; type T5 = Lowercase&amp;lt;string&amp;gt;;  // string&#xA; type T6 = Lowercase&amp;lt;any&amp;gt;;  // any&#xA; type T7 = Lowercase&amp;lt;never&amp;gt;;  // never&#xA; type T8 = Lowercase&amp;lt;42&amp;gt;;  // Error, type &#39;number&#39; does not satisfy the constraint &#39;string&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#capitalizestringtype&#34;&gt;&lt;code&gt;Capitalize&amp;lt;S extends string&amp;gt;&lt;/code&gt;&lt;/a&gt; - Transforms the first character in a string into uppercase.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; type T = Capitalize&amp;lt;&#39;hello&#39;&amp;gt;;  // &#39;Hello&#39;&#xA;&#xA; type T2 = Capitalize&amp;lt;&#39;foo&#39; | &#39;bar&#39;&amp;gt;;  // &#39;Foo&#39; | &#39;Bar&#39;&#xA;&#xA; type T3&amp;lt;S extends string&amp;gt; = Capitalize&amp;lt;`aB${S}`&amp;gt;;&#xA; type T4 = T3&amp;lt;&#39;xYz&#39;&amp;gt;;  // &#39;ABxYz&#39;&#xA;&#xA; type T5 = Capitalize&amp;lt;string&amp;gt;;  // string&#xA; type T6 = Capitalize&amp;lt;any&amp;gt;;  // any&#xA; type T7 = Capitalize&amp;lt;never&amp;gt;;  // never&#xA; type T8 = Capitalize&amp;lt;42&amp;gt;;  // Error, type &#39;number&#39; does not satisfy the constraint &#39;string&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html#uncapitalizestringtype&#34;&gt;&lt;code&gt;Uncapitalize&amp;lt;S extends string&amp;gt;&lt;/code&gt;&lt;/a&gt; - Transforms the first character in a string into lowercase.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt; Example &lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt; type T = Uncapitalize&amp;lt;&#39;Hello&#39;&amp;gt;;  // &#39;hello&#39;&#xA;&#xA; type T2 = Uncapitalize&amp;lt;&#39;Foo&#39; | &#39;Bar&#39;&amp;gt;;  // &#39;foo&#39; | &#39;bar&#39;&#xA;&#xA; type T3&amp;lt;S extends string&amp;gt; = Uncapitalize&amp;lt;`AB${S}`&amp;gt;;&#xA; type T4 = T3&amp;lt;&#39;xYz&#39;&amp;gt;;  // &#39;aBxYz&#39;&#xA;&#xA; type T5 = Uncapitalize&amp;lt;string&amp;gt;;  // string&#xA; type T6 = Uncapitalize&amp;lt;any&amp;gt;;  // any&#xA; type T7 = Uncapitalize&amp;lt;never&amp;gt;;  // never&#xA; type T8 = Uncapitalize&amp;lt;42&amp;gt;;  // Error, type &#39;number&#39; does not satisfy the constraint &#39;string&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find some examples in the &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html&#34;&gt;TypeScript docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus&#34;&gt;Sindre Sorhus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Emiyaaaaa&#34;&gt;Haozheng Li&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CvX&#34;&gt;Jarek Radosz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BendingBender&#34;&gt;Dimitri Benin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/voxpelli&#34;&gt;Pelle Wessman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skarab42&#34;&gt;Sébastien Mischler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SPDX-License-Identifier: (MIT OR CC0-1.0)&lt;/p&gt;</summary>
  </entry>
</feed>