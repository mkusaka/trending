<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T01:58:06Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ykdojo/defaang</title>
    <updated>2022-08-14T01:58:06Z</updated>
    <id>tag:github.com,2022-08-14:/ykdojo/defaang</id>
    <link href="https://github.com/ykdojo/defaang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A website that will curate recently-asked interview questions from FAANG+ to help people practice &amp; prep!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;defaang.io&lt;/h1&gt; &#xA;&lt;p&gt;A website that will curate recently-asked interview questions from FAANG+ to help people practice &amp;amp; prep!&lt;/p&gt; &#xA;&lt;p&gt;The questions will be submitted anonymously, or at least semi-anonymously. We&#39;ll ensure that no matter who submits them, we won&#39;t reveal the usernames, emails or any other personal info unless they explicitly choose to do so.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;You can find YK&#39;s original tweet &lt;a href=&#34;https://twitter.com/ykdojo/status/1557611357251350528&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tech stack&lt;/h1&gt; &#xA;&lt;p&gt;Currently planning to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;frontend: Next.js / React&lt;/li&gt; &#xA; &lt;li&gt;CSS framework: Tailwind&lt;/li&gt; &#xA; &lt;li&gt;backend: Supabase&lt;/li&gt; &#xA; &lt;li&gt;hosting: Vercel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to contribute&lt;/h1&gt; &#xA;&lt;p&gt;First, feel free to search for good first issues to tackle: &lt;a href=&#34;https://github.com/ykdojo/defaang/labels/good%20first%20issue&#34;&gt;https://github.com/ykdojo/defaang/labels/good%20first%20issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Even if you&#39;re an advanced coder, feel free to take one of them.&lt;/p&gt; &#xA;&lt;p&gt;Second, please take a look through &lt;a href=&#34;https://github.com/ykdojo/defaang/issues&#34;&gt;the other issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/ykdojo/defaang/discussions&#34;&gt;discussions&lt;/a&gt; to get a better idea about our vision, and to get inspired. If you have any idea about something you want to contribute, feel free to start an issue or discussion around that.&lt;/p&gt; &#xA;&lt;h3&gt;Semantic commits&lt;/h3&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;Semantic Commits&lt;/code&gt; while you commit your code changes. It helps reviewers to review the code and makes you a &lt;strong&gt;better coder&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-feat:&#34;&gt;feat: (adding new feature)&#xA;fix: (bug fix for the user, not a fix to a build script)&#xA;docs: (changes to the documentation)&#xA;style: (formatting, missing semi colons, etc; no production code change)&#xA;refactor: (refactoring production code, eg. renaming a variable)&#xA;test: (adding missing tests, refactoring tests; no production code change)&#xA;dx: (dev experience; anything that helps to improve developers&#39; experience)&#xA;chore: (updating grunt tasks etc; no production code change)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;feat: added authentication using supabase auth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;learn more about semantic commits&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to start Frontend (Next.js + TailwindCSS)&lt;/h1&gt; &#xA;&lt;h3&gt;Steps:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;#1&lt;/code&gt; Make sure you have installed &lt;a href=&#34;https://docs.npmjs.com/cli/init&#34;&gt;npm&lt;/a&gt; in your local machine where you want to start app&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#2&lt;/code&gt; Run &lt;code&gt;npm install&lt;/code&gt; to install all the required packages&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#3&lt;/code&gt; The repository has a &lt;code&gt;.vscode&lt;/code&gt; folder that contains &lt;code&gt;settings.json&lt;/code&gt; and &lt;code&gt;extensions.json&lt;/code&gt;. The &lt;code&gt;settings.json&lt;/code&gt; file configures your VS Code editor to use &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;prettier&lt;/code&gt; on every code save action (&lt;code&gt;ctrl + s&lt;/code&gt;). The &lt;code&gt;extension.json&lt;/code&gt; file contains a list of VS Code extensions, VS Code will show these extensions as suggestions in the extensions tab. After installing these extensions, auto linting and formatting should start working.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#4&lt;/code&gt; Use below commands&lt;/p&gt; &#xA;&lt;h3&gt;To start the application as development server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To start the application as a production server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build &amp;amp;&amp;amp; npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How to deploy the application to Vercel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;#1&lt;/code&gt; Ensure you have a vercel account if not signup for one &lt;a href=&#34;https://vercel.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#2&lt;/code&gt; Import the project into vercel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#3&lt;/code&gt; Give vercel the nessecary permissions, deploy the projects and voila the deployment is done.&lt;/p&gt; &#xA;&lt;h1&gt;How to enable E-Mail auth in Supabase&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;#1&lt;/code&gt; Sign up on Supabase &lt;a href=&#34;https://supabase.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#2&lt;/code&gt; Create a new Project inside Supabase&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#3&lt;/code&gt; Go to settings -&amp;gt; API and copy the Project &lt;code&gt;URL&lt;/code&gt; and &lt;code&gt;Anon/Public&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#4&lt;/code&gt; Paste the values in the .env.template at &lt;code&gt;NEXT_PUBLIC_SUPABASE_URL&lt;/code&gt; for the URL and &lt;code&gt;NEXT_PUBLIC_SUPABASE_ANON_KEY&lt;/code&gt; for the anon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#5&lt;/code&gt; Go to the &lt;a href=&#34;https://app.supabase.com/project/_/sql&#34;&gt;SQL Editor&lt;/a&gt; Page inside the Supabase Dashboard&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#6&lt;/code&gt; Click User Management Starter and then run&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#7&lt;/code&gt; Change the .env.template to .env.local and all is done.&lt;/p&gt; &#xA;&lt;p&gt;For more reference watch the &lt;a href=&#34;https://supabase.com/docs/guides/with-nextjs&#34;&gt;Next Quickstart for Supabase&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://defaang.vercel.app/&#34;&gt;https://defaang.vercel.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Discord&lt;/h1&gt; &#xA;&lt;p&gt;Join us &lt;a href=&#34;https://discord.gg/aJp6Fypb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unocss/unocss</title>
    <updated>2022-08-14T01:58:06Z</updated>
    <id>tag:github.com,2022-08-14:/unocss/unocss</id>
    <link href="https://github.com/unocss/unocss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The instant on-demand atomic CSS engine.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/unocss/unocss/main/playground/public/icon-gray.svg?sanitize=true&#34; style=&#34;width:100px;&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;UnoCSS&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The instant on-demand Atomic CSS engine. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/unocss&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/unocss?color=c95f8b&amp;amp;label=&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote align=&#34;center&#34;&gt; &#xA; &lt;p&gt;üí° I highly recommend reading this blog post - &lt;br&gt;&lt;a href=&#34;https://antfu.me/posts/reimagine-atomic-css&#34;&gt;&lt;strong&gt;Reimagine Atomic CSS&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;for the story behind&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://uno.antfu.me/&#34;&gt;üßë‚Äçüíª Interactive Docs &lt;sup&gt;Beta&lt;/sup&gt;&lt;/a&gt; | &lt;a href=&#34;https://uno.antfu.me/play/&#34;&gt;ü§π‚Äç‚ôÇÔ∏è Playground&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;http://windicss.org/&#34;&gt;Windi CSS&lt;/a&gt;, &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tw-in-js/twind&#34;&gt;Twind&lt;/a&gt;, but:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/#configurations&#34;&gt;Fully customizable&lt;/a&gt; - no core utilities, all functionalities are provided via presets.&lt;/li&gt; &#xA; &lt;li&gt;No parsing, no AST, no scanning, it&#39;s &lt;strong&gt;INSTANT&lt;/strong&gt; (200x faster than Windi CSS or Tailwind JIT).&lt;/li&gt; &#xA; &lt;li&gt;~5kb min+gzip - zero deps and browser friendly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/#shortcuts&#34;&gt;Shortcuts&lt;/a&gt; - aliasing utilities, dynamically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-attributify/&#34;&gt;Attributify mode&lt;/a&gt; - group utilities in attributes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-icons/&#34;&gt;Pure CSS Icons&lt;/a&gt; - use any icon as a single class.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/transformer-variant-group&#34;&gt;Variant Groups&lt;/a&gt; - shorthand for group utils with common prefixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/transformer-directives&#34;&gt;CSS Directives&lt;/a&gt; - reuse utils in CSS with &lt;code&gt;@apply&lt;/code&gt; directive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/transformer-compile-class/&#34;&gt;Compilation mode&lt;/a&gt; - synthesizes multiple classes into one at build time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/#inspector&#34;&gt;Inspector&lt;/a&gt; - inspect and debug interactively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/runtime&#34;&gt;CSS-in-JS Runtime build&lt;/a&gt; - use UnoCSS with one line of CDN import.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=antfu.unocss&#34;&gt;VS Code extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code-splitting for CSS - ships minimal CSS for MPA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Benchmark&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;2022/7/2 08:38:12 PM&#xA;1656 utilities | x50 runs (min build time)&#xA;&#xA;none                              5.87 ms / delta.      0.00 ms &#xA;unocss       v0.43.0              9.17 ms / delta.      3.30 ms (x1.00)&#xA;tailwindcss  v3.1.4             497.24 ms / delta.    491.37 ms (x148.70)&#xA;windicss     v3.5.5             869.47 ms / delta.    863.60 ms (x261.35)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Vite&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -D unocss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vite.config.ts&#xA;import Unocss from &#39;unocss/vite&#39;&#xA;&#xA;export default {&#xA;  plugins: [&#xA;    Unocss({ /* options */ }),&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;uno.css&lt;/code&gt; to your main entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// main.ts&#xA;import &#39;uno.css&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, have fun.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://github.com/unocss/unocss/raw/main/packages/vite&#34;&gt;@unocss/vite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages&#34;&gt;all packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Nuxt&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -D @unocss/nuxt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// nuxt.config.js&#xA;&#xA;export default {&#xA;  modules: [&#xA;    &#39;@unocss/nuxt&#39;,&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/nuxt&#34;&gt;@unocss/nuxt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;p&gt;UnoCSS is an atomic-CSS engine instead of a framework. Everything is designed with flexibility and performance in mind. There are no core utilities in UnoCSS, all functionalities are provided via presets.&lt;/p&gt; &#xA;&lt;p&gt;By default, UnoCSS applies &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-uno&#34;&gt;the default preset&lt;/a&gt;, which provides a common superset of the popular utilities-first frameworks Tailwind CSS, Windi CSS, Bootstrap, Tachyons, etc.&lt;/p&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;ml-3&lt;/code&gt; (Tailwind), &lt;code&gt;ms-2&lt;/code&gt; (Bootstrap), &lt;code&gt;ma4&lt;/code&gt; (Tachyons), and &lt;code&gt;mt-10px&lt;/code&gt; (Windi CSS) are all valid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.ma4 { margin: 1rem; }&#xA;.ml-3 { margin-left: 0.75rem; }&#xA;.ms-2 { margin-inline-start: 0.5rem; }&#xA;.mt-10px { margin-top: 10px; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-uno&#34;&gt;the default preset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Presets&lt;/h3&gt; &#xA;&lt;p&gt;Presets are the heart of UnoCSS. They let you make your own custom framework in minutes.&lt;/p&gt; &#xA;&lt;h6&gt;Official Presets&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-uno&#34;&gt;@unocss/preset-uno&lt;/a&gt; - The default preset (right now it&#39;s equivalent to &lt;code&gt;@unocss/preset-wind&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-mini&#34;&gt;@unocss/preset-mini&lt;/a&gt; - The minimal but essential rules and variants.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-wind&#34;&gt;@unocss/preset-wind&lt;/a&gt; - Tailwind / Windi CSS compact preset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-attributify&#34;&gt;@unocss/preset-attributify&lt;/a&gt; - Provides &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-attributify#attributify-mode&#34;&gt;Attributify Mode&lt;/a&gt; to other presets and rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-icons&#34;&gt;@unocss/preset-icons&lt;/a&gt; - Use any icon as a class utility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-web-fonts&#34;&gt;@unocss/preset-web-fonts&lt;/a&gt; - Web fonts at ease.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-typography&#34;&gt;@unocss/preset-typography&lt;/a&gt; - The typography preset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-tagify&#34;&gt;@unocss/preset-tagify&lt;/a&gt; - Tagify Mode for UnoCSS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-rem-to-px&#34;&gt;@unocss/preset-rem-to-px&lt;/a&gt; - Coverts rem to px for utils.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Community Presets&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/macheteHot/unocss-preset-scalpel&#34;&gt;unocss-preset-scalpel&lt;/a&gt; - Scalpel Preset by &lt;a href=&#34;https://github.com/macheteHot/&#34;&gt;@macheteHot&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chu121su12/unocss-preset-chroma&#34;&gt;unocss-preset-chroma&lt;/a&gt; - Gradient Preset by &lt;a href=&#34;https://github.com/chu121su12&#34;&gt;@chu121su12&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/action-hong/unocss-preset-scrollbar&#34;&gt;unocss-preset-scrollbar&lt;/a&gt; - Scrollbar Preset by &lt;a href=&#34;https://github.com/action-hong&#34;&gt;@action-hong&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zguolee/unocss-preset-uni&#34;&gt;unocss-preset-uni&lt;/a&gt; - UniApp Preset by &lt;a href=&#34;https://github.com/zguolee&#34;&gt;@zguolee&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MellowCo/unocss-preset-weapp&#34;&gt;unocss-preset-weapp&lt;/a&gt; - Wechat MiniProgram Preset for &lt;a href=&#34;https://uniapp.dcloud.io&#34;&gt;UniApp&lt;/a&gt; and &lt;a href=&#34;https://taro-docs.jd.com/taro/docs&#34;&gt;Taro&lt;/a&gt; by &lt;a href=&#34;https://github.com/MellowCo&#34;&gt;@MellowCo&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using Presets&lt;/h3&gt; &#xA;&lt;p&gt;To set presets to your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vite.config.ts&#xA;import Unocss from &#39;unocss/vite&#39;&#xA;import { presetAttributify, presetUno } from &#39;unocss&#39;&#xA;&#xA;export default {&#xA;  plugins: [&#xA;    Unocss({&#xA;      presets: [&#xA;        presetAttributify({ /* preset options */}),&#xA;        presetUno(),&#xA;        // ...custom presets&#xA;      ],&#xA;    }),&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the &lt;code&gt;presets&lt;/code&gt; option is specified, the default preset will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;To disable the default preset, you can set &lt;code&gt;presets&lt;/code&gt; to an empty array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vite.config.ts&#xA;import Unocss from &#39;unocss/vite&#39;&#xA;&#xA;export default {&#xA;  plugins: [&#xA;    Unocss({&#xA;      presets: [], // disable default preset&#xA;      rules: [&#xA;        // your custom rules&#xA;      ],&#xA;    }),&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Rules&lt;/h3&gt; &#xA;&lt;h6&gt;Static Rules&lt;/h6&gt; &#xA;&lt;p&gt;Writing custom rules for UnoCSS is super easy. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;rules: [&#xA;  [&#39;m-1&#39;, { margin: &#39;0.25rem&#39; }],&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will have the following CSS generated whenever &lt;code&gt;m-1&lt;/code&gt; is detected in users&#39; codebase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.m-1 { margin: 0.25rem; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Dynamic Rules&lt;/h6&gt; &#xA;&lt;p&gt;To make it smarter, change the matcher to a RegExp and the body to a function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;rules: [&#xA;  [/^m-(\d+)$/, ([, d]) =&amp;gt; ({ margin: `${d / 4}rem` })],&#xA;  [/^p-(\d+)$/, match =&amp;gt; ({ padding: `${match[1] / 4}rem` })],&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument of the body function is the match result, you can destructure it to get the matched groups.&lt;/p&gt; &#xA;&lt;p&gt;For example, with the following usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;m-100&#34;&amp;gt;&#xA;  &amp;lt;button class=&#34;m-3&#34;&amp;gt;&#xA;    &amp;lt;icon class=&#34;p-5&#34; /&amp;gt;&#xA;    My Button&#xA;  &amp;lt;/button&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the corresponding CSS will be generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.m-100 { margin: 25rem; }&#xA;.m-3 { margin: 0.75rem; }&#xA;.p-5 { padding: 1.25rem; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations! Now you got your own powerful atomic CSS utilities, enjoy!&lt;/p&gt; &#xA;&lt;h6&gt;Full Controlled Rules&lt;/h6&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;This is an advanced feature, you don&#39;t need it in most of the cases.&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;When you really need some advanced rules that can&#39;t be covered by the combination of &lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/#dynamic-rules&#34;&gt;Dynamic Rules&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/#custom-variants&#34;&gt;Variants&lt;/a&gt;, we also provide a way to give you full control to generate the CSS.&lt;/p&gt; &#xA; &lt;p&gt;By returning a &lt;code&gt;string&lt;/code&gt; from the dynamic rule&#39;s body function, it will be directly passed to the generated CSS. That also means you would need to take care of things like CSS escaping, variants applying, CSS constructing, and so on.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import Unocss, { toEscapedSelector as e } from &#39;unocss&#39;&#xA;&#xA;Unocss({&#xA;  rules: [&#xA;    [/^custom-(.+)$/, ([, name], { rawSelector, currentSelector, variantHandlers, theme }) =&amp;gt; {&#xA;      // discard mismatched rules&#xA;      if (name.includes(&#39;something&#39;))&#xA;        return&#xA;&#xA;      // if you want, you can disable the variants for this rule&#xA;      if (variantHandlers.length)&#xA;        return&#xA;      const selector = e(rawSelector)&#xA;      // return a string instead of an object&#xA;      return `&#xA;${selector} {&#xA;  font-size: ${theme.fontSize.sm};&#xA;}&#xA;/* you can have multiple rules */&#xA;${selector}::after {&#xA;  content: &#39;after&#39;;&#xA;}&#xA;.foo &amp;gt; ${selector} {&#xA;  color: red;&#xA;}&#xA;/* or media queries */&#xA;@media (min-width: ${theme.breakpoints.sm}) {&#xA;  ${selector} {&#xA;    font-size: ${theme.fontSize.sm};&#xA;  }&#xA;}&#xA;`&#xA;    }],&#xA;  ],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You might need to read some code to take the full power of it.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Ordering&lt;/h3&gt; &#xA;&lt;p&gt;UnoCSS respects the order of the rules you defined in the generated CSS. Latter ones come with higher priority.&lt;/p&gt; &#xA;&lt;h3&gt;Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;The shortcuts functionality that UnoCSS provides is similar to &lt;a href=&#34;https://windicss.org/features/shortcuts.html&#34;&gt;Windi CSS&#39;s&lt;/a&gt; one&lt;/p&gt; &#xA;&lt;!--eslint-skip--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;shortcuts: {&#xA;  // shortcuts to multiple utilities&#xA;  &#39;btn&#39;: &#39;py-2 px-4 font-semibold rounded-lg shadow-md&#39;,&#xA;  &#39;btn-green&#39;: &#39;text-white bg-green-500 hover:bg-green-700&#39;,&#xA;  // single utility alias&#xA;  &#39;red&#39;: &#39;text-red-100&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the plain mapping, UnoCSS also allows you to define dynamic shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/#custom-rules&#34;&gt;Rules&lt;/a&gt;, a dynamic shortcut is the combination of a matcher RegExp and a handler function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;shortcuts: [&#xA;  // you could still have object style&#xA;  {&#xA;    btn: &#39;py-2 px-4 font-semibold rounded-lg shadow-md&#39;,&#xA;  },&#xA;  // dynamic shortcuts&#xA;  [/^btn-(.*)$/, ([, c]) =&amp;gt; `bg-${c}-400 text-${c}-100 py-2 px-4 rounded-lg`],&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this, we could use &lt;code&gt;btn-green&lt;/code&gt; and &lt;code&gt;btn-red&lt;/code&gt; to generate the following CSS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.btn-green {&#xA;  padding-top: 0.5rem;&#xA;  padding-bottom: 0.5rem;&#xA;  padding-left: 1rem;&#xA;  padding-right: 1rem;&#xA;  --un-bg-opacity: 1;&#xA;  background-color: rgba(74, 222, 128, var(--un-bg-opacity));&#xA;  border-radius: 0.5rem;&#xA;  --un-text-opacity: 1;&#xA;  color: rgba(220, 252, 231, var(--un-text-opacity));&#xA;}&#xA;.btn-red {&#xA;  padding-top: 0.5rem;&#xA;  padding-bottom: 0.5rem;&#xA;  padding-left: 1rem;&#xA;  padding-right: 1rem;&#xA;  --un-bg-opacity: 1;&#xA;  background-color: rgba(248, 113, 113, var(--un-bg-opacity));&#xA;  border-radius: 0.5rem;&#xA;  --un-text-opacity: 1;&#xA;  color: rgba(254, 226, 226, var(--un-text-opacity));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rules Merging&lt;/h3&gt; &#xA;&lt;p&gt;By default, UnoCSS will merge CSS rules with the same body to minimize the CSS size.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;&amp;lt;div class=&#34;m-2 hover:m2&#34;&amp;gt;&lt;/code&gt; will generate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.hover\:m2:hover, .m-2 { margin: 0.5rem; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instead of two separate rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.hover\:m2:hover { margin: 0.5rem; }&#xA;.m-2 { margin: 0.5rem; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style Resetting&lt;/h3&gt; &#xA;&lt;p&gt;UnoCSS does not provide style resetting or preflight by default for maximum flexibility and does not populate your global CSS. If you use UnoCSS along with other CSS frameworks, they probably already do the resetting for you. If you use UnoCSS alone, you can use resetting libraries like &lt;a href=&#34;https://necolas.github.io/normalize.css/&#34;&gt;Normalize.css&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a small collection for you to grab them quickly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i @unocss/reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// main.js&#xA;// pick one of the following&#xA;&#xA;// normalize.css&#xA;import &#39;@unocss/reset/normalize.css&#39;&#xA;// reset.css by Eric Meyer https://meyerweb.com/eric/tools/css/reset/index.html&#xA;import &#39;@unocss/reset/eric-meyer.css&#39;&#xA;// preflights from tailwind&#xA;import &#39;@unocss/reset/tailwind.css&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/reset&#34;&gt;@unocss/reset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Preflight&lt;/h3&gt; &#xA;&lt;p&gt;You can inject raw css as preflights from the configuration. The resolved &lt;code&gt;theme&lt;/code&gt; is available to customize the css.&lt;/p&gt; &#xA;&lt;!--eslint-skip--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;preflights: [&#xA;  {&#xA;    getCSS: ({ theme }) =&amp;gt; `&#xA;      * {&#xA;        color: ${theme.colors.gray?.[700] ?? &#39;#333&#39;}&#xA;        padding: 0;&#xA;        margin: 0;&#xA;      }&#xA;    `&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Variants&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://windicss.org/utilities/general/variants.html&#34;&gt;Variants&lt;/a&gt; allows you to apply some variations to your existing rules. For example, to implement the &lt;code&gt;hover:&lt;/code&gt; variant from Tailwind:&lt;/p&gt; &#xA;&lt;!--eslint-skip--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;variants: [&#xA;  // hover:&#xA;  (matcher) =&amp;gt; {&#xA;    if (!matcher.startsWith(&#39;hover:&#39;))&#xA;      return matcher&#xA;    return {&#xA;      // slice `hover:` prefix and passed to the next variants and rules&#xA;      matcher: matcher.slice(6),&#xA;      selector: s =&amp;gt; `${s}:hover`,&#xA;    }&#xA;  }&#xA;],&#xA;rules: [&#xA;  [/^m-(\d)$/, ([, d]) =&amp;gt; ({ margin: `${d / 4}rem` })],&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;matcher&lt;/code&gt; controls when the variant is enabled. If the return value is a string, it will be used as the selector for matching the rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selector&lt;/code&gt; provides the availability of customizing the generated CSS selector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s have a tour of what happened when matching for &lt;code&gt;hover:m-2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hover:m-2&lt;/code&gt; is extracted from users usages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hover:m-2&lt;/code&gt; send to all variants for matching&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hover:m-2&lt;/code&gt; is matched by our variant and returns &lt;code&gt;m-2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;the result &lt;code&gt;m-2&lt;/code&gt; will be used for the next round of variants matching&lt;/li&gt; &#xA; &lt;li&gt;if no other variant is matched, &lt;code&gt;m-2&lt;/code&gt; will then goes to match the rules&lt;/li&gt; &#xA; &lt;li&gt;our first rule get matched and generates &lt;code&gt;.m-2 { margin: 0.5rem; }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;finally, we apply our variants transformation to the generated CSS. In this case, we prepended &lt;code&gt;:hover&lt;/code&gt; to the &lt;code&gt;selector&lt;/code&gt; hook&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a result, the following CSS will be generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.hover\:m-2:hover { margin: 0.5rem; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this, we could have &lt;code&gt;m-2&lt;/code&gt; applied only when users hover over the element.&lt;/p&gt; &#xA;&lt;p&gt;The variant system is very powerful and can&#39;t be covered fully in this guide, you can check &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/preset-mini/src/variants&#34;&gt;the default preset&#39;s implementation&lt;/a&gt; to see more advanced usages.&lt;/p&gt; &#xA;&lt;h3&gt;Extend Theme&lt;/h3&gt; &#xA;&lt;p&gt;UnoCSS also supports the theming system that you might be familiar with in Tailwind / Windi. At the user level, you can specify the &lt;code&gt;theme&lt;/code&gt; property in your config and it will be deep merged to the default theme.&lt;/p&gt; &#xA;&lt;!--eslint-skip--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;theme: {&#xA;  // ...&#xA;  colors: {&#xA;    &#39;veryCool&#39;: &#39;#0000ff&#39;, // class=&#34;text-very-cool&#34;&#xA;    &#39;brand&#39;: {&#xA;      &#39;primary&#39;: &#39;hsla(var(--hue, 217), 78%, 51%)&#39;, //class=&#34;bg-brand-primary&#34;&#xA;    }&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To consume the theme in rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;rules: [&#xA;  [/^text-(.*)$/, ([, c], { theme }) =&amp;gt; {&#xA;    if (theme.colors[c])&#xA;      return { color: theme.colors[c] }&#xA;  }],&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One exception is that UnoCSS gives full control of &lt;code&gt;breakpoints&lt;/code&gt; to users. When a custom &lt;code&gt;breakpoints&lt;/code&gt; is provided, the default will be overridden instead of merging. For example:&lt;/p&gt; &#xA;&lt;!--eslint-skip--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;theme: {&#xA;  // ...&#xA;  breakpoints: {&#xA;    sm: &#39;320px&#39;,&#xA;    md: &#39;640px&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Right now, you can only use the &lt;code&gt;sm:&lt;/code&gt; and &lt;code&gt;md:&lt;/code&gt; breakpoint variants.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;verticalBreakpoints&lt;/code&gt; is same as &lt;code&gt;breakpoints&lt;/code&gt; but for vertical layout.&lt;/p&gt; &#xA;&lt;h3&gt;Layers&lt;/h3&gt; &#xA;&lt;p&gt;The order of CSS will affect their priorities. While we will &lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/#ordering&#34;&gt;retain the order of rules&lt;/a&gt;, sometimes you may want to group some utilities to have more explicit control of their order.&lt;/p&gt; &#xA;&lt;p&gt;Unlike Tailwind, which offers 3 fixed layers (&lt;code&gt;base&lt;/code&gt;, &lt;code&gt;components&lt;/code&gt;, &lt;code&gt;utilities&lt;/code&gt;), UnoCSS allows you to define the layers as you want. To set the layer, you can pass the metadata as the third item of your rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;rules: [&#xA;  [/^m-(\d)$/, ([, d]) =&amp;gt; ({ margin: `${d / 4}rem` }), { layer: &#39;utilities&#39; }],&#xA;  // when you omit the layer, it will be `default`&#xA;  [&#39;btn&#39;, { padding: &#39;4px&#39; }],&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* layer: default */&#xA;.btn { padding: 4px; }&#xA;/* layer: utilities */&#xA;.m-2 { margin: 0.5rem; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Layering also can be set on each preflight:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;preflights: [&#xA;  {&#xA;    layer: &#39;my-layer&#39;,&#xA;    getCSS: async () =&amp;gt; (await fetch(&#39;my-style.css&#39;)).text(),&#xA;  },&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can control the order of layers by:&lt;/p&gt; &#xA;&lt;!--eslint-skip--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;layers: {&#xA;  components: -1,&#xA;  default: 1,&#xA;  utilities: 2,&#xA;  &#39;my-layer&#39;: 3,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Layers without specified order will be sorted alphabetically.&lt;/p&gt; &#xA;&lt;p&gt;When you want to have your custom CSS between layers, you can update your entry module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// &#39;uno:[layer-name].css&#39;&#xA;import &#39;uno:components.css&#39;&#xA;// layers that are not &#39;components&#39; and &#39;utilities&#39; will fallback to here&#xA;import &#39;uno.css&#39;&#xA;// your own CSS&#xA;import &#39;./my-custom.css&#39;&#xA;// &#34;utilities&#34; layer will have the highest priority&#xA;import &#39;uno:utilities.css&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utilities Preprocess &amp;amp; Prefixing&lt;/h3&gt; &#xA;&lt;p&gt;UnoCSS also provides the ability to preprocess and transform extracted utilities before processing to the matcher. For example, the following example allows you to add a global prefix to all utilities:&lt;/p&gt; &#xA;&lt;!--eslint-skip--&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;preprocess(matcher) {&#xA;  return matcher.startsWith(&#39;prefix-&#39;)&#xA;    ? matcher.slice(7)&#xA;    : undefined // ignore&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scanning&lt;/h3&gt; &#xA;&lt;p&gt;Please note that UnoCSS works &lt;strong&gt;at build time&lt;/strong&gt;, meaning only statically presented utilities will be generated and shipped to your app. Utilities that used dynamically or fetched from external resources at runtime might not be appied.&lt;/p&gt; &#xA;&lt;p&gt;By default UnoCSS will extract the utilities usage from files in your build pipeline with extension &lt;code&gt;.jsx&lt;/code&gt;, &lt;code&gt;.tsx&lt;/code&gt;, &lt;code&gt;.vue&lt;/code&gt;, &lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.svelte&lt;/code&gt;, &lt;code&gt;.astro&lt;/code&gt;. And then generate the CSS on demand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.ts&lt;/code&gt; files are &lt;strong&gt;NOT included by default&lt;/strong&gt;. You can add &lt;code&gt;@unocss-include&lt;/code&gt;, per-file basis, anywhere in the file that you want UnoCSS to scan, or add &lt;code&gt;*.js&lt;/code&gt; or &lt;code&gt;*.ts&lt;/code&gt; in the configuration to include all js/ts files as scan targets. Similarly, you can also add &lt;code&gt;@unocss-ignore&lt;/code&gt; to bypass the scanning and transforming for a file.&lt;/p&gt; &#xA;&lt;h3&gt;Safelist&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you might want have to use dynamic concatenations like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;p-${size}&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- this won&#39;t work! --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Due the fact that UnoCSS works in build time using static extracting, at the compile time we can&#39;t possibility know all the combination of the utilities. For that, you can configure the &lt;code&gt;safelist&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;safelist: &#39;p-1 p-2 p-3 p-4&#39;.split(&#39; &#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the corresponding CSS will be always generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.p-1 { padding: 0.25rem; }&#xA;.p-2 { padding: 0.5rem; }&#xA;.p-3 { padding: 0.75rem; }&#xA;.p-4 { padding: 1rem; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or more flexible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;safelist: [&#xA;  ...Array.from({ length: 4 }, (_, i) =&amp;gt; `p-${i + 1}`),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are seaking for the true dynamic generation at the runtime, you may check the &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/runtime&#34;&gt;@unocss/runtime&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;Inspector&lt;/h3&gt; &#xA;&lt;p&gt;From v0.7.0, our Vite plugin now ships with a dev inspector (&lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/inspector&#34;&gt;@unocss/inspector&lt;/a&gt;) for you to view, play and analyse your custom rules and setup. Visit &lt;code&gt;http://localhost:3000/__unocss&lt;/code&gt; in your Vite dev server to see it.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/11247099/140885990-1827f5ce-f12a-4ed4-9d63-e5145a65fb4a.png&#34;&gt; &#xA;&lt;h3&gt;Runtime (CSS-in-JS)&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/unocss/unocss/tree/main/packages/runtime&#34;&gt;@unocss/runtime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;in alphabet order&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://acss.io/&#34;&gt;ACSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getbootstrap.com/docs/5.1/utilities/flex/&#34;&gt;Bootstrap Utilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chakra-ui.com/docs/features/style-props&#34;&gt;Chakra UI Style Props&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://semantic-ui.com/&#34;&gt;Semantic UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tachyons.io/&#34;&gt;Tachyons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tw-in-js/twind&#34;&gt;Twind&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://windicss.org/&#34;&gt;Windi CSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unocss/unocss/main/LICENSE&#34;&gt;MIT&lt;/a&gt; License ¬© 2021-PRESENT &lt;a href=&#34;https://github.com/antfu&#34;&gt;Anthony Fu&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>remult/remult</title>
    <updated>2022-08-14T01:58:06Z</updated>
    <id>tag:github.com,2022-08-14:/remult/remult</id>
    <link href="https://github.com/remult/remult" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CRUD framework for full stack TypeScript&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://remult.dev/&#34;&gt; &lt;img src=&#34;https://github.com/remult/remult/raw/master/docs/.vuepress/public/logo.png&#34; width=&#34;140&#34; height=&#34;140&#34;&gt; &lt;/a&gt; &#xA; &lt;h1&gt;Remult&lt;/h1&gt; &#xA; &lt;a href=&#34;https://circleci.com/gh/remult/remult/tree/master&#34;&gt; &lt;img alt=&#34;CircleCI&#34; src=&#34;https://circleci.com/gh/remult/remult/tree/master.svg?style=shield&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://codecov.io/gh/remult/remult&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/remult/remult/branch/master/graph/badge.svg?token=LYWQRUN3D1&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/remult/remult/master/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub license&#34; src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/remult&#34;&gt; &lt;img alt=&#34;npm version&#34; src=&#34;https://badge.fury.io/js/remult.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/remult&#34;&gt; &lt;img alt=&#34;npm downloads&#34; src=&#34;https://img.shields.io/npm/dm/remult&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/GXHk7ZfuG5&#34;&gt; &lt;img alt=&#34;chat on discord&#34; src=&#34;https://img.shields.io/badge/chat-on%20discord-blueviolet&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://twitter.com/remultjs&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/remultjs?style=social&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remult/remult/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/remult/remult/master/#documentation&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/remult/remult/master/#example-apps&#34;&gt;Example Apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Remult?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remult&lt;/strong&gt; is a full-stack CRUD framework that uses your &lt;strong&gt;TypeScript entities as a single source of truth for your API, frontend type-safe API client and backend ORM&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;Remult is &lt;strong&gt;production-ready&lt;/strong&gt; and, in fact, used in production apps since 2018. However, we‚Äôre keeping the major version at zero so we can use community feedback to finalize the v1 API.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Full-stack web development is (still) too complicated. &lt;strong&gt;Simple CRUD, a common requirement of any business application, should be simple to build, maintain, and extend&lt;/strong&gt; when the need arises.&lt;/p&gt; &#xA;&lt;p&gt;Remult abstracts away repetitive, boilerplate, error-prone, and poorly designed code on the one hand, and enables total flexibility and control on the other. &lt;strong&gt;Remult helps building fullstack apps using only TypeScript code you can easily follow and safely refactor&lt;/strong&gt;, and fits nicely into any existing or new project by being minimalistic and completely unopinionated regarding the developer‚Äôs choice of other frameworks and tools.&lt;/p&gt; &#xA;&lt;p&gt;Other frameworks tend to fall into either too much abstraction (no-code, low-code, BaaS) or partial abstraction (MVC frameworks, GraphQL, ORMs, API generators, code generators), and tend to be opinionated regarding the development tool-chain, deployment environment, configuration/conventions or DSL. Remult attempts to strike a better balance.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;remult&lt;/em&gt; package is one and the same for both the frontend bundle and the backend. Install it once for a monolith project or per-repo in a monorepo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i remult&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Define model classes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// shared/product.ts&#xA;&#xA;import { Entity, Fields } from &#39;remult&#39;;&#xA;&#xA;@Entity(&#39;products&#39;, {&#xA;    allowApiCrud: true&#xA;})&#xA;export class Product {&#xA;  @Fields.string()&#xA;  name = &#39;&#39;;&#xA;&#xA;  @Fields.number()&#xA;  unitPrice = 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup API backend using an Express middleware&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// backend/index.ts&#xA;&#xA;import express from &#39;express&#39;;&#xA;import { remultExpress } from &#39;remult/remult-express&#39;;&#xA;import { Product } from &#39;../shared/product&#39;;&#xA;&#xA;const port = 3001;&#xA;const app = express();&#xA;&#xA;app.use(remultExpress({&#xA;  entities: [Product]&#xA;}));&#xA;&#xA;app.listen(port, () =&amp;gt; {&#xA;  console.log(`Example API listening at http://localhost:${port}`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;üöÄ&lt;/span&gt; API Ready&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; curl http://localhost:3001/api/products&#xA;&#xA;[{&#34;name&#34;:&#34;Tofu&#34;,&#34;unitPrice&#34;:5}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Find and manipulate data in type-safe frontend code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// frontend/code.ts&#xA;&#xA;import { Remult } from &#39;remult&#39;;&#xA;import { Product } from &#39;../shared/product&#39;;&#xA;&#xA;const remult = new Remult();&#xA;&#xA;async function increasePriceOfTofu(priceIncrease: number) {&#xA;  const productsRepo = remult.repo(Product);&#xA;&#xA;  const product = await productsRepo.findFirst({ name: &#39;Tofu&#39; }); // filter is passed through API request all the way to the db&#xA;  product.unitPrice += priceIncrease;&#xA;  productsRepo.save(product); // mutation request updates the db with no boilerplate code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;...&lt;em&gt;exactly&lt;/em&gt; the same way as in backend code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@BackendMethod({ allowed: Allow.authenticated })&#xA;static async increasePriceOfTofu(priceIncrease: number, remult?: Remult) {&#xA;  const productsRepo = remult!.repo(Product);&#xA;&#xA;  const product = await productsRepo.findFirst({ name: &#39;Tofu&#39; }); // use Remult in the backend as an ORM&#xA;  product.unitPrice += priceIncrease;&#xA;  productsRepo.save(product);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;‚òë&lt;/span&gt; Data validation and constraints - defined once&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Entity, Fields, Validators } from &#39;remult&#39;;&#xA;&#xA;@Entity(&#39;products&#39;, {&#xA;    allowApiCrud: true&#xA;})&#xA;export class Product {&#xA;    @Fields.string({&#xA;        validate: Validators.required&#xA;    })&#xA;    name = &#39;&#39;;&#xA;&#xA;    @Fields.string&amp;lt;Product&amp;gt;({&#xA;        validate: product =&amp;gt; {&#xA;            if (product.description.trim().length &amp;lt; 50)&#xA;                throw &#34;too short&#34;;&#xA;        }&#xA;    })&#xA;    description = &#39;&#39;;&#xA;&#xA;    @Fields.number({&#xA;        validate: (_, field) =&amp;gt; {&#xA;            if (field.value &amp;lt; 0)&#xA;                field.error = &#34;must not be less than 0&#34;; // or: throw &#34;must not be less than 0&#34;;&#xA;        }&#xA;    })&#xA;    unitPrice = 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enforced in frontend:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const product = productsRepo.create();&#xA;&#xA;try {&#xA;  await productsRepo.save(product);&#xA;}&#xA;catch (e: any) {&#xA;  console.error(e.message); // Browser console will display - &#34;Name: required&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enforced in backend:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; curl http://localhost:3001/api/products -H &#34;Content-Type: application/json&#34; -d &#34;{&#34;&#34;unitPrice&#34;&#34;:-1}&#34;&#xA;&#xA;{&#34;modelState&#34;:{&#34;unitPrice&#34;:&#34;must not be less than 0&#34;,&#34;name&#34;:&#34;required&#34;},&#34;message&#34;:&#34;Name: required&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;üîí&lt;/span&gt; Secure the API with fine-grained authorization&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;@Entity&amp;lt;Article&amp;gt;(&#39;Articles&#39;, {&#xA;    allowApiRead: true,&#xA;    allowApiInsert: remult =&amp;gt; remult.authenticated(),&#xA;    allowApiUpdate: (remult, article) =&amp;gt; article.author.id == remult.user.id&#xA;})&#xA;export class Article {&#xA;    @Fields.string({ allowApiUpdate: false })&#xA;    slug = &#39;&#39;;&#xA;    &#xA;    @Field(() =&amp;gt; Profile, { allowApiUpdate: false })&#xA;    author!: Profile;&#xA;&#xA;    @Fields.string()&#xA;    content = &#39;&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What about complex CRUD?&lt;/h2&gt; &#xA;&lt;p&gt;While simple CRUD shouldn‚Äôt require any backend coding, using Remult means having the ability to handle any complex scenario by controlling the backend in numerous ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backend computed (read-only) fields - from simple &lt;a href=&#34;https://remult.dev/docs/ref_field.html#serverexpression&#34;&gt;expressions&lt;/a&gt; to complex data lookups or even direct db access (SQL)&lt;/li&gt; &#xA; &lt;li&gt;Custom side-effects with &lt;a href=&#34;https://remult.dev/docs/ref_entity.html#saving&#34;&gt;entity lifecycle hooks&lt;/a&gt; (before/after saving/deleting)&lt;/li&gt; &#xA; &lt;li&gt;Backend only updatable fields (e.g. ‚Äúlast updated at‚Äù)&lt;/li&gt; &#xA; &lt;li&gt;Many-to-one &lt;a href=&#34;https://remult.dev/docs/entity-relations.html&#34;&gt;relations&lt;/a&gt; with &lt;a href=&#34;https://remult.dev/docs/lazy-loading-of-related-entities.html&#34;&gt;lazy/eager loading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Roll-your-own type-safe endpoints with &lt;a href=&#34;https://remult.dev/docs/backendMethods.html&#34;&gt;Backend Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Roll-your-own low-level endpoints (Express, Fastify, koa, others‚Ä¶)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The best way to learn Remult is by following a tutorial of a simple Todo web app with a Node.js Express backend.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remult.dev/tutorials/react/&#34;&gt;Tutorial with React&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remult.dev/tutorials/angular/&#34;&gt;Tutorial with Angular&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remult.dev/tutorials/vue/&#34;&gt;Tutorial with Vue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remult.dev/tutorials/react-next/&#34;&gt;Tutorial with Next.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://remult.dev/docs&#34;&gt;documentation&lt;/a&gt; covers the main features of Remult. However, it is still a work-in-progress.&lt;/p&gt; &#xA;&lt;h2&gt;Example Apps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fullstack TodoMVC example with React and Express. (&lt;a href=&#34;https://github.com/remult/TodoMVC-eample&#34;&gt;Source code&lt;/a&gt; | &lt;a href=&#34;https://codesandbox.io/s/github/remult/TodoMVC-example?file=/src/frontend/App.tsx&#34;&gt;CodeSandbox&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/remult/crm-demo&#34;&gt;CRM demo&lt;/a&gt; with a React + &lt;a href=&#34;https://mui.com&#34;&gt;MUI&lt;/a&gt; front-end and Postgres database.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. See &lt;a href=&#34;https://raw.githubusercontent.com/remult/remult/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üí¨&lt;/span&gt; Any feedback or suggestions? Start a &lt;a href=&#34;https://github.com/remult/remult/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üí™&lt;/span&gt; Want to help out? Look for &#34;help wanted&#34; labeled &lt;a href=&#34;https://github.com/remult/remult/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚≠ê&lt;/span&gt; Give this repo a star.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Remult is &lt;a href=&#34;https://raw.githubusercontent.com/remult/remult/master/LICENSE&#34;&gt;MIT Licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>