<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-07T01:48:23Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AprilNEA/ChatGPT-Admin-Web</title>
    <updated>2023-05-07T01:48:23Z</updated>
    <id>tag:github.com,2023-05-07:/AprilNEA/ChatGPT-Admin-Web</id>
    <link href="https://github.com/AprilNEA/ChatGPT-Admin-Web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;带有用户管理和后台管理系统的 ChatGPT WebUI&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ 本项目为 &lt;a href=&#34;https://lmo.best&#34;&gt;lmobest&lt;/a&gt; 的开源版本，目前并没有发布正式版&lt;/p&gt; &#xA; &lt;p&gt;用户层的逻辑已经实现完毕，管理页面（后台）仍在开发中。&lt;/p&gt; &#xA; &lt;p&gt;可以关注&lt;a href=&#34;https://t.me/s/ChatGPTAdminWebChannel&#34;&gt;频道&lt;/a&gt;获取最新消息。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/apps/docs/static/img/icon.svg?sanitize=true&#34; alt=&#34;icon&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;ChatGPT Admin Web&lt;/h1&gt; &#xA; &lt;p&gt;简体中文 / &lt;a href=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/apps/chat/README.md&#34;&gt;apps/chat&lt;/a&gt; 基于 &lt;a href=&#34;https://github.com/Yidadaa/ChatGPT-Next-Web/tree/b1f27aaf93c88c088db6bae5ac8163e2ffe991bd&#34;&gt;ChatGPT-Next-Web&lt;/a&gt; 二次开发&lt;/p&gt; &#xA; &lt;p&gt;带有用户管理和后台面板的 ChatGPT 网页应用&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt; &lt;a href=&#34;https://docs.lmo.best/&#34;&gt;📚 部署文档&lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td&gt; &lt;a href=&#34;https://lmo.best/&#34;&gt;🎦 演示站点&lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td&gt; &lt;a href=&#34;https://github.com/AprilNEA/ChatGPT-April-Web/issues&#34;&gt;💬 反馈&lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td&gt; 🌐 &lt;a href=&#34;https://t.me/ChatGPTAdminWeb&#34;&gt;群组&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://t.me/ChatGPTAdminWebChannel&#34;&gt;频道&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;ChatGPT Admin Web&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/docs/system.svg?sanitize=true&#34; alt=&#34;system&#34;&gt; &#xA;&lt;h2&gt;🤩 开发计划&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/docs/roadmap.svg?sanitize=true&#34; alt=&#34;system&#34;&gt; &#xA;&lt;h2&gt;🚀 技术栈 Tech Stack&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/docs/tech-stack.svg?sanitize=true&#34; alt=&#34;tech-stack&#34;&gt; &#xA;&lt;h2&gt;仓库 Repository&lt;/h2&gt; &#xA;&lt;p&gt;这是一个 monorepo 仓库，由以下部分组成：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Package Description&lt;/th&gt; &#xA;   &lt;th&gt;Package Version&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;apps/chat&lt;/td&gt; &#xA;   &lt;td&gt;用户界面&lt;/td&gt; &#xA;   &lt;td&gt;0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;996 &amp;amp;&amp;amp; MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;apps/dash&lt;/td&gt; &#xA;   &lt;td&gt;后台管理&lt;/td&gt; &#xA;   &lt;td&gt;0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;apps/docs&lt;/td&gt; &#xA;   &lt;td&gt;项目文档&lt;/td&gt; &#xA;   &lt;td&gt;0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;packages/bots&lt;/td&gt; &#xA;   &lt;td&gt;API 接口和自定义模型接口&lt;/td&gt; &#xA;   &lt;td&gt;0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;packages/database&lt;/td&gt; &#xA;   &lt;td&gt;数据库 DAL 以及部分 Logic&lt;/td&gt; &#xA;   &lt;td&gt;0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;MIT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;作者 Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AprilNEA&#34;&gt;@AprilNEA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PeronGH&#34;&gt;@PeronGH&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;☁️ 许可证 License&lt;/h2&gt; &#xA;&lt;p&gt;本仓库中 &lt;a href=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/apps/chat&#34;&gt;apps/chat&lt;/a&gt; 是基于仓库 &lt;a href=&#34;https://github.com/Yidadaa/ChatGPT-Next-Web&#34;&gt;Yidadaa&#39;s repository&lt;/a&gt; 的 996许可证以&lt;a href=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;的形式从新分发。&lt;/p&gt; &#xA;&lt;p&gt;其他部分均以&lt;a href=&#34;https://raw.githubusercontent.com/AprilNEA/ChatGPT-Admin-Web/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;分发。&lt;/p&gt; &#xA;&lt;img src=&#34;https://hits-app.vercel.app/hits?url=https%3A%2F%2Fgithub.com%2FAprilNEA%2FChatGPT-Admin-Web&#34;&gt;</summary>
  </entry>
  <entry>
    <title>pingdotgg/zact</title>
    <updated>2023-05-07T01:48:23Z</updated>
    <id>tag:github.com,2023-05-07:/pingdotgg/zact</id>
    <link href="https://github.com/pingdotgg/zact" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nothing to see here&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zact - Zod Server ACTions&lt;/h1&gt; &#xA;&lt;p&gt;We like NextJS Server Actions. We wanted to love them. This package makes them validated and typesafe, so you can use them in things that aren&#39;t forms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install zact&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// action.ts&#xA;&#34;use server&#34;;&#xA;&#xA;import { z } from &#34;zod&#34;;&#xA;import { zact } from &#34;zact/server&#34;;&#xA;export const validatedAction = zact(z.object({ stuff: z.string().min(6) }))(&#xA;  async (input) =&amp;gt; {&#xA;    return { message: `hello ${input.stuff}` };&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client WITH custom hook&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// component.tsx&#xA;&#34;use client&#34;;&#xA;&#xA;import { validatedAction } from &#34;./action&#34;;&#xA;import { useZact } from &#34;zact/client&#34;;&#xA;&#xA;export const zactTestComponent = () =&amp;gt; {&#xA;  const { mutate, data, isRunning } = useZact(validatedAction);&#xA;&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;button onClick={() =&amp;gt; mutate({ stuff: &#34;testtestaet&#34; })}&amp;gt;&#xA;        Run server action&#xA;      &amp;lt;/button&amp;gt;&#xA;      {isRunning &amp;amp;&amp;amp; &amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&#xA;      {data?.message}&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client WITHOUT custom hook&lt;/h3&gt; &#xA;&lt;p&gt;Yes you can just import them and call them like promises too&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// component.tsx&#xA;&#34;use client&#34;;&#xA;&#xA;import { validatedAction } from &#34;./action&#34;;&#xA;&#xA;export const zactTestComponent = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;button onClick={() =&amp;gt; {&#xA;        validatedAction({ stuff: &#34;test&#34; }).then((response) =&amp;gt; console.log(&#34;response!&#34;, response));&#xA;      }&amp;gt;&#xA;        Run server action&#xA;      &amp;lt;/button&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ava-labs/avalanche-faucet</title>
    <updated>2023-05-07T01:48:23Z</updated>
    <id>tag:github.com,2023-05-07:/ava-labs/avalanche-faucet</id>
    <link href="https://github.com/ava-labs/avalanche-faucet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Avalanche Faucet for Fuji Network and Subnets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Avalanche Subnet Faucet&lt;/h1&gt; &#xA;&lt;p&gt;Right now there are thousands of networks and chains in the blockchain space, each with its capabilities and use-cases. And each network requires native coins to do any transaction on them, which can have a monetary value as well. These coins can be collected through centralized exchanges, token sales, etc in exchange for some monetary assets like USD.&lt;/p&gt; &#xA;&lt;p&gt;But we cannot risk our funds on the network or on any applications hosted on that network, without testing them first. So, these networks often have test networks or testnets, where the native coins do not have any monetary value, and thus can be obtained freely through faucets.&lt;/p&gt; &#xA;&lt;p&gt;These testnets are often the testbeds for any new native feature of the network itself, or any dApp or &lt;a href=&#34;https://www.avax.network/subnets&#34;&gt;Subnet&lt;/a&gt; that is going live on the main network (mainnet). For example, &lt;a href=&#34;https://docs.avax.network/quickstart/fuji-workflow&#34;&gt;Fuji&lt;/a&gt; network is the testnet for Avalanche&#39;s mainnet.&lt;/p&gt; &#xA;&lt;p&gt;Besides Fuji Testnet, &lt;a href=&#34;https://faucet.avax.network/&#34;&gt;Avalanche Faucet&lt;/a&gt; can be used to get free coins on these testnets Subnets like -&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faucet.avax.network?subnet=wagmi&#34;&gt;WAGMI Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faucet.avax.network?subnet=dfk&#34;&gt;DeFI Kingdoms Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faucet.avax.network?subnet=dexalot&#34;&gt;Dexalot Testnet&lt;/a&gt; and many more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use this &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet&#34;&gt;repository&lt;/a&gt; to deploy your faucet or just make a PR with the &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet/raw/main/config.json&#34;&gt;configurations&lt;/a&gt; of the Subnet. This faucet comes with many features like multiple chain support, custom rate-limiting per Subnet, captcha verification, and concurrent transaction handling.&lt;/p&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://faucet.avax.network/&#34;&gt;Faucet&lt;/a&gt; powered by Avalanche for Fuji Network and other Subnets. You can -&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request test coins for the supported Subnets&lt;/li&gt; &#xA; &lt;li&gt;Integrate your EVM Subnet with the faucet by making a PR with the &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet/raw/main/config.json&#34;&gt;chain configurations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fork the &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet&#34;&gt;repository&lt;/a&gt; to deploy your faucet for any EVM chain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding a New Subnet&lt;/h2&gt; &#xA;&lt;p&gt;You can also integrate a new Subnet on the live &lt;a href=&#34;https://faucet.avax.network&#34;&gt;faucet&lt;/a&gt; with just a few lines of configuration parameters. All you have to do is make a PR on the &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet&#34;&gt;Avalanche Faucet&lt;/a&gt; git repository with the Subnet&#39;s information. The following parameters are required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;ID&#34;: &#34;string&#34;,&#xA;    &#34;NAME&#34;: &#34;string&#34;,&#xA;    &#34;TOKEN&#34;: &#34;string&#34;,&#xA;    &#34;RPC&#34;: &#34;string&#34;,&#xA;    &#34;CHAINID&#34;: &#34;number&#34;,&#xA;    &#34;EXPLORER&#34;: &#34;string&#34;,&#xA;    &#34;IMAGE&#34;: &#34;string&#34;,&#xA;    &#34;MAX_PRIORITY_FEE&#34;: &#34;string&#34;,&#xA;    &#34;MAX_FEE&#34;: &#34;string&#34;,&#xA;    &#34;DRIP_AMOUNT&#34;: &#34;number&#34;,&#xA;    &#34;RATELIMIT&#34;: {&#xA;        &#34;MAX_LIMIT&#34;: &#34;number&#34;,&#xA;        &#34;WINDOW_SIZE&#34;: &#34;number&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt; - Each subnet chain should have a unique and relatable ID.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NAME&lt;/strong&gt; - Name of the Subnet chain that will appear on the website.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RPC&lt;/strong&gt; - A valid RPC URL for accessing the chain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CHAINID&lt;/strong&gt; - Chain ID of the chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EXPLORER&lt;/strong&gt; - Base URL of standard explorer&#39;s website.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IMAGE&lt;/strong&gt; - URL of the icon of the chain that will be shown in the dropdown.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MAX_PRIORITY_FEE&lt;/strong&gt; - Maximum tip per faucet drop in &lt;strong&gt;wei&lt;/strong&gt; or &lt;strong&gt;10&lt;sup&gt;-18&lt;/sup&gt;&lt;/strong&gt; unit (for EIP1559 supported chains)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MAX_FEE&lt;/strong&gt; - Maximum fee that can be paid for a faucet drop in &lt;strong&gt;wei&lt;/strong&gt; or &lt;strong&gt;10&lt;sup&gt;-18&lt;/sup&gt;&lt;/strong&gt; unit&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DRIP_AMOUNT&lt;/strong&gt; - Amount of coins to send per request in &lt;strong&gt;gwei&lt;/strong&gt; or &lt;strong&gt;10&lt;sup&gt;-9&lt;/sup&gt;&lt;/strong&gt; unit&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RECALIBRATE&lt;/strong&gt; &lt;em&gt;(optional)&lt;/em&gt; - Number of seconds after which the nonce and balance will recalibrate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RATELIMIT&lt;/strong&gt; - Number of times (MAX_LIMIT) to allow per user within the WINDOW_SIZE (in minutes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the configuration in the array of &lt;code&gt;evmchains&lt;/code&gt; inside the &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet/raw/main/config.json&#34;&gt;config.json&lt;/a&gt; file and make a PR.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Deploying a Faucet&lt;/h2&gt; &#xA;&lt;p&gt;You can also deploy and build your faucet by using the &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet&#34;&gt;Avalanche Faucet&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en&#34;&gt;Node&lt;/a&gt; &amp;gt;= 17.0 and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; &amp;gt;= 8.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.google.com/recaptcha/intro/v3.html&#34;&gt;Google&#39;s ReCaptcha&lt;/a&gt; v3 keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/get-started/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository at your preferred location.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ava-labs/avalanche-faucet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client Side Configurations&lt;/h3&gt; &#xA;&lt;p&gt;We need to configure our application with the server API endpoints and Captcha site keys. All the client-side configurations are there in the &lt;code&gt;client/src/config.json&lt;/code&gt; file. Since there are no secrets on the client-side, we do not need any environment variables. Update the config files according to your need.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;banner&#34;: &#34;/banner.png&#34;,&#xA;    &#34;apiBaseEndpointProduction&#34;: &#34;/api/&#34;,&#xA;    &#34;apiBaseEndpointDevelopment&#34;: &#34;http://localhost:8000/api/&#34;,&#xA;    &#34;apiTimeout&#34;: 10000,&#xA;    &#34;CAPTCHA&#34;: {&#xA;        &#34;siteKey&#34;: &#34;6LcNScYfAAAAAJH8fauA-okTZrmAxYqfF9gOmujf&#34;,&#xA;        &#34;action&#34;: &#34;faucetdrip&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Put the Google&#39;s ReCaptcha site-key without which the faucet client can&#39;t send the necessary captcha response to the server. This key is not a secret and could be public.&lt;/p&gt; &#xA;&lt;p&gt;In the above file, there are 2 base endpoints for the faucet server &lt;code&gt;apiBaseEndpointProduction&lt;/code&gt; and &lt;code&gt;apiBaseEndpointDevelopment&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In production mode, the client-side will be served as static content over the server&#39;s endpoint, and hence we do not have to provide the server&#39;s IP address or domain.&lt;/p&gt; &#xA;&lt;p&gt;The URL path should be valid, where the server&#39;s APIs are hosted. If the endpoints for API have a leading &lt;code&gt;/v1/api&lt;/code&gt; and the server is running on localhost at port 3000, then you should use &lt;code&gt;http://localhost:3000/v1/api&lt;/code&gt; or &lt;code&gt;/v1/api/&lt;/code&gt; depending on whether it is production or development.&lt;/p&gt; &#xA;&lt;h3&gt;Server-Side Configurations&lt;/h3&gt; &#xA;&lt;p&gt;On the server side, we need to configure 2 files - &lt;code&gt;.env&lt;/code&gt; for secret keys and &lt;code&gt;config.json&lt;/code&gt; for chain and API&#39;s rate limiting configurations.&lt;/p&gt; &#xA;&lt;h4&gt;Setup Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;Setup the environment variable with your private key and ReCaptcha secret. Make a &lt;code&gt;.env&lt;/code&gt; file in your preferred location with the following credentials, as this file will not be committed to the repository. The faucet server can handle multiple EVM chains, and therefore requires private keys for addresses with funds on each of the chains.&lt;/p&gt; &#xA;&lt;p&gt;If you have funds on the same address on every chain, then you can specify them with the single variable&lt;code&gt;PK&lt;/code&gt;. But if you have funds on different addresses on different chains, then you can provide each of the private keys against the ID of the chain, as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;C=&#34;C chain private key&#34;&#xA;WAGMI=&#34;Wagmi chain private key&#34;&#xA;PK=&#34;Sender Private Key with Funds in it&#34;&#xA;CAPTCHA_SECRET=&#34;Google ReCaptcha Secret&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PK&lt;/code&gt; will act as a fallback private key, in case, the key for any chain is not provided.&lt;/p&gt; &#xA;&lt;h4&gt;Setup EVM Chain Configurations&lt;/h4&gt; &#xA;&lt;p&gt;You can create a faucet server for any EVM chain by making changes in the &lt;code&gt;config.json&lt;/code&gt; file. Add your chain configuration as shown below in the &lt;code&gt;evmchains&lt;/code&gt; object. Configuration for Fuji&#39;s C-Chain and WAGMI chain is shown below for example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;evmchains&#34;: [&#xA;    {&#xA;        &#34;ID&#34;: &#34;C&#34;,&#xA;        &#34;NAME&#34;: &#34;Fuji (C-Chain)&#34;,&#xA;        &#34;TOKEN&#34;: &#34;AVAX&#34;,&#xA;        &#34;RPC&#34;: &#34;https://api.avax-test.network/ext/C/rpc&#34;,&#xA;        &#34;CHAINID&#34;: 43113,&#xA;        &#34;EXPLORER&#34;: &#34;https://testnet.snowtrace.io&#34;,&#xA;        &#34;IMAGE&#34;: &#34;/avaxred.png&#34;,&#xA;        &#34;MAX_PRIORITY_FEE&#34;: &#34;2000000000&#34;,&#xA;        &#34;MAX_FEE&#34;: &#34;100000000000&#34;,&#xA;        &#34;DRIP_AMOUNT&#34;: 2000000000,&#xA;        &#34;RECALIBRATE&#34;: 30,&#xA;        &#34;RATELIMIT&#34;: {&#xA;            &#34;MAX_LIMIT&#34;: 1,&#xA;            &#34;WINDOW_SIZE&#34;: 1440&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;ID&#34;: &#34;WAGMI&#34;,&#xA;        &#34;NAME&#34;: &#34;WAGMI Testnet&#34;,&#xA;        &#34;TOKEN&#34;: &#34;WGM&#34;,&#xA;        &#34;RPC&#34;: &#34;https://subnets.avax.network/wagmi/wagmi-chain-testnet/rpc&#34;,&#xA;        &#34;CHAINID&#34;: 11111,&#xA;        &#34;EXPLORER&#34;: &#34;https://subnets.avax.network/wagmi/wagmi-chain-testnet/explorer&#34;,&#xA;        &#34;IMAGE&#34;: &#34;/wagmi.png&#34;,&#xA;        &#34;MAX_PRIORITY_FEE&#34;: &#34;2000000000&#34;,&#xA;        &#34;MAX_FEE&#34;: &#34;100000000000&#34;,&#xA;        &#34;DRIP_AMOUNT&#34;: 2000000000,&#xA;        &#34;RATELIMIT&#34;: {&#xA;            &#34;MAX_LIMIT&#34;: 1,&#xA;            &#34;WINDOW_SIZE&#34;: 1440&#xA;        }&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above configuration drip amount is in &lt;code&gt;nAVAX&lt;/code&gt; or &lt;code&gt;gwei&lt;/code&gt;, whereas fees are in &lt;code&gt;wei&lt;/code&gt;. For example, with the above configurations, the faucet will send &lt;code&gt;1 AVAX&lt;/code&gt; with maximum fees per gas being &lt;code&gt;100 nAVAX&lt;/code&gt; and priority fee as &lt;code&gt;2 nAVAX&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The rate limiter for C Chain will only accept 1 request in 60 minutes for a particular API and 2 requests in 60 minutes for the WAGMI chain. Though it will skip any failed requests so that users can request tokens again, even if there is some internal error in the application. On the other hand, the global rate limiter will allow 15 requests per minute on every API. This time failed requests will also get counted so that no one can abuse the APIs.&lt;/p&gt; &#xA;&lt;h3&gt;API Endpoints&lt;/h3&gt; &#xA;&lt;p&gt;This server will expose the following APIs&lt;/p&gt; &#xA;&lt;h4&gt;Health API&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;/health&lt;/code&gt; API will always return a response with a &lt;code&gt;200&lt;/code&gt; status code. This endpoint can be used to know the health of the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://localhost:8000/health&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Server healthy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get Faucet Address&lt;/h4&gt; &#xA;&lt;p&gt;This API will be used for fetching the faucet address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://localhost:8000/api/faucetAddress?chain=C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will give the following response&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0x3EA53fA26b41885cB9149B62f0b7c0BAf76C78D4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get Faucet Balance&lt;/h4&gt; &#xA;&lt;p&gt;This API will be used for fetching the faucet address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://localhost:8000/api/getBalance?chain=C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will give the following response&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;14282900936&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Send Token&lt;/h4&gt; &#xA;&lt;p&gt;This API endpoint will handle token requests from users. It will return the transaction hash as a receipt of the faucet drip.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -d &#39;{&#xA;        &#34;address&#34;: &#34;0x3EA53fA26b41885cB9149B62f0b7c0BAf76C78D4&#34;&#xA;        &#34;chain&#34;: &#34;C&#34;&#xA;}&#39; -H &#39;Content-Type: application/json&#39; http://localhost:8000/api/sendToken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Send token API requires a Captcha response token that is generated using the Captcha site key on the client-side. Since we can&#39;t generate and pass this token while making a curl request, we have to disable the captcha verification for testing purposes. You can find the steps to disable it in the next sections. The response is shown below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#xA;    &#34;message&#34;: &#34;Transaction successful on Avalanche C Chain!&#34;,&#xA;    &#34;txHash&#34;: &#34;0x3d1f1c3facf59c5cd7d6937b3b727d047a1e664f52834daf20b0555e89fc8317&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rate Limiters (Important)&lt;/h3&gt; &#xA;&lt;p&gt;The rate limiters are applied on the global (all endpoints) as well as on the &lt;code&gt;/api/sendToken&lt;/code&gt; API. These can be configured from the &lt;code&gt;config.json&lt;/code&gt; file. Rate limiting parameters for chains are passed in the chain configuration as shown above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;GLOBAL_RL&#34;: {&#xA;    &#34;ID&#34;: &#34;GLOBAL&#34;,&#xA;    &#34;RATELIMIT&#34;: {&#xA;        &#34;REVERSE_PROXIES&#34;: 4,&#xA;        &#34;MAX_LIMIT&#34;: 40,&#xA;        &#34;WINDOW_SIZE&#34;: 1,&#xA;        &#34;PATH&#34;: &#34;/&#34;,&#xA;        &#34;SKIP_FAILED_REQUESTS&#34;: false&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There could be multiple proxies between the server and the client. The server will see the IP address of the adjacent proxy connected with the server, and this may not be the client&#39;s actual IP.&lt;/p&gt; &#xA;&lt;p&gt;The IPs of all the proxies that the request has hopped through are stuffed inside the header &lt;strong&gt;x-forwarded-for&lt;/strong&gt; array. But the proxies in between can easily manipulate these headers to bypass rate limiters. So, we cannot trust all the proxies and hence all the IPs inside the header.&lt;/p&gt; &#xA;&lt;p&gt;The proxies that are set up by the owner of the server (reverse-proxies) are the trusted proxies on which we can rely and know that they have stuffed the actual IP of the requesters in between. Any proxy that is not set up by the server, should be considered an untrusted proxy. So, we can jump to the IP address added by the last proxy that we trust. The number of jumps that we want can be configured in the &lt;code&gt;config.json&lt;/code&gt; file inside the &lt;code&gt;GLOBAL_RL&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/static/img/faucet-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Clients Behind Same Proxy&lt;/h4&gt; &#xA;&lt;p&gt;Consider the below diagram. The server is set up with 2 reverse proxies. If the client is behind proxies, then we cannot get the client&#39;s actual IP, and instead will consider the proxy&#39;s IP as the client&#39;s IP. And if some other client is behind the same proxy, then those clients will be considered as a single entity and might get rate-limited faster.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/static/img/faucet-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Therefore it is advised to the users, to avoid using any proxy for accessing applications that have critical rate limits, like this faucet.&lt;/p&gt; &#xA;&lt;h4&gt;Wrong Number of Reverse Proxies&lt;/h4&gt; &#xA;&lt;p&gt;So, if you want to deploy this faucet, and have some reverse proxies in between, then you should configure this inside the &lt;code&gt;GLOBAL_RL&lt;/code&gt; key of the &lt;code&gt;config.json&lt;/code&gt; file. If this is not configured properly, then the users might get rate-limited very frequently, since the server-side proxy&#39;s IP addresses are being viewed as the client&#39;s IP. You can verify this in the code &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet/raw/23eb300635b64130bc9ce10d9e894f0a0b3d81ea/middlewares/rateLimiter.ts#L25&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;GLOBAL_RL&#34;: {&#xA;    &#34;ID&#34;: &#34;GLOBAL&#34;,&#xA;    &#34;RATELIMIT&#34;: {&#xA;        &#34;REVERSE_PROXIES&#34;: 4,&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/static/img/faucet-7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is also quite common to have Cloudflare as the last reverse proxy or the exposed server. Cloudflare provides a header &lt;strong&gt;cf-connecting-ip&lt;/strong&gt; which is the IP of the client that requested the faucet and hence Cloudflare. We are using this as default.&lt;/p&gt; &#xA;&lt;h3&gt;Captcha Verification&lt;/h3&gt; &#xA;&lt;p&gt;Captcha is required to prove the user is a human and not a bot. For this purpose, we will use &lt;a href=&#34;https://www.google.com/recaptcha/intro/v3.html&#34;&gt;Google&#39;s Recaptcha&lt;/a&gt;. The server side will require &lt;code&gt;CAPTCHA_SECRET&lt;/code&gt; that should not be exposed. You can set the threshold score to pass the captcha test by the users &lt;a href=&#34;https://github.com/ava-labs/avalanche-faucet/raw/23eb300635b64130bc9ce10d9e894f0a0b3d81ea/middlewares/verifyCaptcha.ts#L20&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can disable these Captcha verifications and rate limiters for testing the purpose, by tweaking in the &lt;code&gt;server.ts&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling Rate Limiters&lt;/h3&gt; &#xA;&lt;p&gt;Comment or remove these 2 lines from the &lt;code&gt;server.ts&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;new RateLimiter(app, [GLOBAL_RL]);&#xA;new RateLimiter(app, evmchains);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling Captcha Verification&lt;/h3&gt; &#xA;&lt;p&gt;Remove the &lt;code&gt;captcha.middleware&lt;/code&gt; from &lt;code&gt;sendToken&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;h3&gt;Starting the Faucet&lt;/h3&gt; &#xA;&lt;p&gt;Follow the below commands to start your local faucet.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;This will concurrently install dependencies for both client and server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If ports have a default configuration, then the client will start at port 3000 and the server will start at port 8000 while in development mode.&lt;/p&gt; &#xA;&lt;h4&gt;Starting in Development Mode&lt;/h4&gt; &#xA;&lt;p&gt;This will concurrently start the server and client in development mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building for Production&lt;/h4&gt; &#xA;&lt;p&gt;The following command will build server and client at &lt;code&gt;build/&lt;/code&gt; and &lt;code&gt;build/client&lt;/code&gt; directories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Starting in Production Mode&lt;/h4&gt; &#xA;&lt;p&gt;This command should only be run after successfully building the client and server-side code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up with Docker&lt;/h3&gt; &#xA;&lt;p&gt;Follow the steps to run this application in a Docker container.&lt;/p&gt; &#xA;&lt;h4&gt;Build Docker Image&lt;/h4&gt; &#xA;&lt;p&gt;Docker images can be served as the built versions of our application, that can be used to deploy on Docker container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build . -t faucet-image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Starting Application inside Docker Container&lt;/h4&gt; &#xA;&lt;p&gt;Now we can create any number of containers using the above &lt;code&gt;faucet&lt;/code&gt; image. We also have to supply the &lt;code&gt;.env&lt;/code&gt; file or the environment variables with the secret keys to create the container. Once the container is created, these variables and configurations will be persisted and can be easily started or stopped with a single command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 3000:8000 --name faucet-container --env-file ../.env faucet-image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will run on port 8000, and our Docker will also expose this port for the outer world to interact. We have exposed this port in the &lt;code&gt;Dockerfile&lt;/code&gt;. But we cannot directly interact with the container port, so we had to bind this container port to our host port. For the host port, we have chosen 3000. This flag &lt;code&gt;-p 3000:8000&lt;/code&gt; achieves the same.&lt;/p&gt; &#xA;&lt;p&gt;This will start our faucet application in a Docker container at port 3000 (port 8000 on the container). You can interact with the application by visiting &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser.&lt;/p&gt; &#xA;&lt;h4&gt;Stopping the Container&lt;/h4&gt; &#xA;&lt;p&gt;You can easily stop the container using the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop faucet-container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Restarting the Container&lt;/h4&gt; &#xA;&lt;p&gt;To restart the container, use the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker start faucet-container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the Faucet&lt;/h2&gt; &#xA;&lt;p&gt;Using the faucet is quite straightforward, but for the sake of completeness, let&#39;s go through the steps, to collect your first test coins.&lt;/p&gt; &#xA;&lt;h3&gt;Visit Avalanche Faucet Website&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://faucet.avax.network&#34;&gt;https://faucet.avax.network&lt;/a&gt;. You will see various network parameters like network name, faucet balance, drop amount, drop limit, faucet address, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/static/img/faucet-1.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Select Network&lt;/h3&gt; &#xA;&lt;p&gt;You can use the dropdown to select the network of your choice and get some free coins (each network may have a different drop amount).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/static/img/faucet-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Put Address and Request Coins&lt;/h3&gt; &#xA;&lt;p&gt;Put your wallet address where you want to get a drop, and click the &lt;strong&gt;Request&lt;/strong&gt; button. Within a second, you will get a &lt;strong&gt;transaction hash&lt;/strong&gt; for the processed transaction. The hash would be a hyperlink to Subnet&#39;s explorer. You can see the transaction status, by clicking on that hyperlink.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/static/img/faucet-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;More Interactions&lt;/h3&gt; &#xA;&lt;p&gt;This is not just it. Using the buttons shown below, you can go to the Subnet explorer or add the Subnet to your browser wallet extensions like Metamask with a single click.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/static/img/faucet-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Probable Errors and Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;Errors are not expected, but if you are facing some of the errors shown, then you could try troubleshooting as shown below. If none of the troubleshooting works, reach us through &lt;a href=&#34;https://discord.com/channels/578992315641626624/&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Too many requests. Please try again after X minutes&lt;/strong&gt; This is a rate-limiting message. Every Subnet can set its drop limits. The above message suggests that you have reached your drop limit i.e. the number of times you could request coins within the window of X minutes. You should try requesting after X minutes. If you are facing this problem, even when you are requesting for the first time in the window, you may be behind some proxy, WiFi, or VPN service that is also being used by some other user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Captcha verification failed! Try refreshing&lt;/strong&gt; We are using v3 of &lt;a href=&#34;https://developers.google.com/recaptcha/docs/v3&#34;&gt;Google&#39;s ReCaptcha&lt;/a&gt;. This version uses scores between 0 and 1 to rate the interaction of humans with the website, with 0 being the most suspicious one. You do not have to solve any puzzle or mark the &lt;strong&gt;I am not a Robot&lt;/strong&gt; checkbox. The score will be automatically calculated. We want our users to score at least 0.3 to use the faucet. This is configurable, and we will update the threshold after having broader data. But if you are facing this issue, then you can try refreshing your page, disabling ad-blockers, or switching off any VPN. You can follow this &lt;a href=&#34;https://2captcha.com/blog/google-doesnt-accept-recaptcha-answers&#34;&gt;guide&lt;/a&gt; to get rid of this issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Internal RPC error! Please try after sometime&lt;/strong&gt; This is an internal error in the Subnet&#39;s node, on which we are making an RPC for sending transactions. A regular check will update the RPC&#39;s health status every 30 seconds (default) or whatever is set in the configuration. This may happen only in rare scenarios and you cannot do much about it, rather than waiting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Timeout of 10000ms exceeded&lt;/strong&gt; There could be many reasons for this message. It could be an internal server error, or the request didn&#39;t receive by the server, slow internet, etc. You could try again after some time, and if the problem persists, then you should raise this issue on our &lt;a href=&#34;https://discord.com/channels/578992315641626624/&#34;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Couldn&#39;t see any transaction status on explorer&lt;/strong&gt; The transaction hash that you get for each drop is pre-computed using the expected nonce, amount, and receiver&#39;s address. Though transactions on Avalanche are near-instant, the explorer may take time to index those transactions. You should wait for a few more seconds, before raising any issue or reaching out to us.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>