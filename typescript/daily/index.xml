<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:41:00Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>subsquid-quests/algebra-subgraph-migration</title>
    <updated>2024-02-18T01:41:00Z</updated>
    <id>tag:github.com,2024-02-18:/subsquid-quests/algebra-subgraph-migration</id>
    <link href="https://github.com/subsquid-quests/algebra-subgraph-migration" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stellaswap-sponsored quest to migrate the Algebra subgraph to Subsquid&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://github.com/subsquid-quests/network-test-one-uniform-load-squid/assets/7452464/135746dc-a48b-46b8-bce0-f7e5de18f4f9&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;img src=&#34;https://github.com/subsquid-quests/network-test-one-uniform-load-squid/assets/7452464/135746dc-a48b-46b8-bce0-f7e5de18f4f9&#34; alt=&#34;Subsquid Logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;&lt;img src=&#34;https://docs.rs/leptos/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://subsquid.io&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Algebra Subgraph migration&lt;/h1&gt; &#xA;&lt;p&gt;Migrate the &lt;a href=&#34;https://thegraph.com/hosted-service/subgraph/stellaswap/pulsar&#34;&gt;Algebra subgraph&lt;/a&gt; to Squid SDK.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This quest is sponsored by &lt;a href=&#34;https://stellaswap.com&#34;&gt;StellaSwap&lt;/a&gt; who generously offered to provide two extra rewards of $500 (in STELLA tokens) each. The rewards will be given to the authors of two submissions selected by StellaSwap from the pool of five Subsquid-selected winners. See &lt;a href=&#34;https://raw.githubusercontent.com/subsquid-quests/algebra-subgraph-migration/main/#special-considerations&#34;&gt;Special considerations&lt;/a&gt; for extra info.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Subgraph source code is available at the &lt;code&gt;Algebra&lt;/code&gt; folder or this repo. The resulting squid should match the GraphQL API of the subgraph as close as possible, by migrating &lt;code&gt;schema.graphql&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/subsquid-quests/algebra-subgraph-migration/main/#permissible-deviations-from-the-subgraph-schema&#34;&gt;Permissible deviations&lt;/a&gt;). The judges reserve the right to request improvements afther the initial review of the submission. Reach out to the &lt;a href=&#34;https://discord.com/channels/857105545135390731/1155812879770058783&#34;&gt;Discord Channel&lt;/a&gt; for any tech questions regarding this quest. You can use the &lt;code&gt;template&lt;/code&gt; squid as a starter.&lt;/p&gt; &#xA;&lt;h1&gt;Quest Info&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Skill Level&lt;/th&gt; &#xA;   &lt;th&gt;Time required (hours)&lt;/th&gt; &#xA;   &lt;th&gt;Max Participants&lt;/th&gt; &#xA;   &lt;th&gt;Reward&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Migration&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{orange}{\textsf{Medium}}$&lt;/td&gt; &#xA;   &lt;td&gt;~20&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{red}{\textsf{400tSQD}}$ + StellaSwap rewards&lt;/td&gt; &#xA;   &lt;td&gt;open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Two of the winning submissions will be selected by StellaSwap for extra rewards of $500 (in STELLA tokens) each.&lt;/p&gt; &#xA;&lt;h1&gt;Acceptance criteria&lt;/h1&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the criteria put forth by Subsquid. See &lt;a href=&#34;https://raw.githubusercontent.com/subsquid-quests/algebra-subgraph-migration/main/#special-considerations&#34;&gt;Special considerations&lt;/a&gt; for StellaSwap info.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, the solutions are accepted at the discretion of judges following a manual review. This sections is a rough guide that is in no way binding on our side.&lt;/p&gt; &#xA;&lt;p&gt;Some of the reasons why the solution will not be accepted include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The submission is an unmodified squid template. We &lt;strong&gt;will not&lt;/strong&gt; reward these by chance. Give up.&lt;/li&gt; &#xA; &lt;li&gt;We receive two or more solutions with identical or almost identical code. If we detect that, either one or none of the affected submissions will be rewarded, depending on your luck.&lt;/li&gt; &#xA; &lt;li&gt;The squid does not start.&lt;/li&gt; &#xA; &lt;li&gt;The squid fails to sync fully due to internal errors.&lt;/li&gt; &#xA; &lt;li&gt;The squid fails to sync fully in a reasonable time due to severe performance issues. Follow the &lt;a href=&#34;https://docs.subsquid.io/cloud/resources/best-practices/&#34;&gt;best practices guide&lt;/a&gt; to avoid these.&lt;/li&gt; &#xA; &lt;li&gt;The squid writes no data into its database.&lt;/li&gt; &#xA; &lt;li&gt;Data returned for any query is not consistent with subgraph data. You may find &lt;a href=&#34;https://github.com/abernatskiy/compareGraphQL&#34;&gt;this tool&lt;/a&gt; useful for comparing squid and subgraph APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is desirable that your solution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;includes a suite of test GraphQL queries that touches every &lt;a href=&#34;https://docs.subsquid.io/store/postgres/schema-file/entities/&#34;&gt;schema entity&lt;/a&gt; and, if used, every &lt;a href=&#34;https://docs.subsquid.io/graphql-api/custom-resolvers/&#34;&gt;custom resolver&lt;/a&gt; at least once, with corresponding subgraph queries (listing in README is enough)&lt;/li&gt; &#xA; &lt;li&gt;has high code quality (readability, simplicity, comments where necessary)&lt;/li&gt; &#xA; &lt;li&gt;avoids any &#34;sleeping bugs&#34;: logic errors that accidentally happen to not break the data&lt;/li&gt; &#xA; &lt;li&gt;follows the standard squid startup procedure: &lt;pre&gt;&lt;code&gt;git clone &amp;lt;repo_url&amp;gt;&#xA;cd &amp;lt;repo_url&amp;gt;&#xA;npm ci&#xA;sqd up&#xA;sqd process &amp;amp;&#xA;sqd serve&#xA;&lt;/code&gt;&lt;/pre&gt; If it does not, describe your startup procedure in the README.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please test your solutions before submitting.&lt;/strong&gt; We do allow some corrections, but judges&#39; time is not limitless.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] To ensure fair competition and timely delivery of squids to StellaSwap, we limit the time allotted for post-deadline corrections to two weeks. The limit will be enforced.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To submit, invite the following github accounts to your private repo : &lt;a href=&#34;https://github.com/dariaag&#34;&gt;@dariaag&lt;/a&gt;, &lt;a href=&#34;https://github.com/belopash&#34;&gt;@belopash&lt;/a&gt;, &lt;a href=&#34;https://github.com/abernatskiy&#34;&gt;@abernatskiy&lt;/a&gt; and &lt;a href=&#34;https://github.com/dzhelezov&#34;&gt;@dzhelezov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Permissible deviations from the subgraph schema&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;String&lt;/code&gt; in place of &lt;code&gt;Bytes&lt;/code&gt; in your submissions&lt;/li&gt; &#xA; &lt;li&gt;The only way to handle &lt;a href=&#34;https://docs.subsquid.io/sdk/reference/schema-file/entity-relations/#many-to-many-relations&#34;&gt;many-to-many relations&lt;/a&gt; in squids is by adding explicit join tables. Addition of such tables is an expected change when schemas with such relations are migrated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special considerations&lt;/h2&gt; &#xA;&lt;p&gt;The subgraph took an extremely long time to sync on TheGraph. The StellaSwap team wants to improve upon that as much as possible. So, the advice is to pay extra attention to performance-related matters. Use &lt;a href=&#34;https://docs.subsquid.io/sdk/resources/basics/batch-processing/&#34;&gt;batch processing&lt;/a&gt; and &lt;a href=&#34;https://docs.subsquid.io/sdk/reference/schema-file/indexes-and-constraints/&#34;&gt;database indexes&lt;/a&gt; for best results.&lt;/p&gt; &#xA;&lt;h1&gt;Rewards&lt;/h1&gt; &#xA;&lt;p&gt;tSQD rewards will be delivered via the &lt;a href=&#34;https://app.subsquid.io/quests&#34;&gt;quests page&lt;/a&gt; of Subsquid Cloud. Make sure you use the same GitHub handle to make a submission and when linking to that page.&lt;/p&gt; &#xA;&lt;p&gt;STELLA rewards from StellaSwap will be sent to addresses individually agreed upon with each winner. We&#39;ll make a GitHub issue in each of the winning repos for the discussion.&lt;/p&gt; &#xA;&lt;p&gt;Winners (both the five selected by Subsquid and the two selected by StellaSwap) will be listed at the quest repository README. If you do not wish to be listed please tell us that in an issue in your submission repo.&lt;/p&gt; &#xA;&lt;h1&gt;Useful links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.subsquid.io/sdk/how-to-start/squid-development/&#34;&gt;Squid development master guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.subsquid.io/migrate/migrate-subgraph/&#34;&gt;TheGraph migration guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.subsquid.io/cloud/resources/best-practices/&#34;&gt;Subsquid Cloud best practices guide&lt;/a&gt; (includes a lot of good non-Cloud related advice)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abernatskiy/compareGraphQL&#34;&gt;compareGraphQL tool&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup and common errors&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Node v16.x or newer &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;https://nodejs.org/en/download&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Docker &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;https://docs.docker.com/engine/install/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install git &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Squid CLI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g @subsquid/cli@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to run a squid&lt;/h2&gt; &#xA;&lt;p&gt;Full startup procedure for newly developed squids:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependecies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Generate model&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd codegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Generate types&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd typegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Build the squid&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Open docker and run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Generate migrations:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd migration:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Start processing:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Start a local GraphQL server in a separate terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Types (&lt;code&gt;./src/abi&lt;/code&gt;), models (&lt;code&gt;./src/model&lt;/code&gt;) and migrations (&lt;code&gt;./db&lt;/code&gt;) are typically kept within squid repos after they become stable. Then the startup procedure simplifies to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;sqd up&#xA;sqd process &amp;amp;&#xA;sqd serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Possible errors&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Docker not installed&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;X db Error × query-gateway Error&#xA;Error response from daemon: Get &#34;https://registry-1.docker.jo/v2/&#34;: uri ting to 127.0.0.1:8888: dial cp 127.0.0.1:8888: connectex: No connection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Git not installed&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: Error: spawn git ENOENT&#xA;at ChildProcess._handle.onexit (node: internal/child_process: 284:19)&#xA;at onErrorNT (node: internal/child_process:477:16)&#xA;at process.processTicksAndRejections (node: internal/process/task_queues:82:21)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Dependencies not installed. Run &lt;code&gt;npm ci&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd typegen&#xA;TYPEGEN&#xA;    Error: spawn squid-evm-typegen ENOENT&#xA;    Code: ENOENT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Rate-limiting. Get a private RPC endpoint from &lt;a href=&#34;https://ethereumnodes.com&#34;&gt;any node provider&lt;/a&gt;, then change the &lt;code&gt;rpcUrl&lt;/code&gt; in &lt;code&gt;processor.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;will pause new requests for 20000ms {&#34;rpcUrl&#34;:&#34;https://rpc.ankr.com/eth&#34;,&#xA;&#34;reason&#34; : &#34;HttpError: got 429 from https://rpc.ankr.com/eth&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If necessary, &lt;a href=&#34;https://docs.subsquid.io/evm-indexing/configuration/initialization/#set-data-source&#34;&gt;rate limit your RPC queries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Best practices extras&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Batch saving&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;let transfers: Transfers[] = [];&#xA;...&#xA;ctx.store.save(transfers);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Using map instead of array to avoid duplicate values&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;let transfers: Map&amp;lt;string, Transfer&amp;gt; = new Map();&#xA;...&#xA;ctx.store.upsert([...transfers.values()]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Verify both log addresses and topics before processing events.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; if (log.topics[0] === erc721.events.Transfer.topic &amp;amp;&amp;amp; log.address === CONTRACT_ADDRESS) {&#xA;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>observablehq/framework</title>
    <updated>2024-02-18T01:41:00Z</updated>
    <id>tag:github.com,2024-02-18:/observablehq/framework</id>
    <link href="https://github.com/observablehq/framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A static site generator for data apps, dashboards, reports, and more. Observable Framework combines JavaScript on the front-end for interactive graphics with any language on the back-end for data analysis.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Observable Framework&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://observablehq.com/framework/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/observablehq/framework/releases&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/observablehq/framework/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>unjs/ofetch</title>
    <updated>2024-02-18T01:41:00Z</updated>
    <id>tag:github.com,2024-02-18:/unjs/ofetch</id>
    <link href="https://github.com/unjs/ofetch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;😱 A better fetch API. Works on node, browser and workers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ofetch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.com/package/ofetch&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/ofetch?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/ofetch&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/ofetch?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/result?p=ofetch&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/ofetch?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;bundle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/unjs/ofetch&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/unjs/ofetch/main?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/unjs/ofetch/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/unjs/ofetch.svg?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdocs.io/package/ofetch&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/jsDocs.io-reference-18181B?style=flat&amp;amp;colorA=18181B&amp;amp;colorB=F0DB4F&#34; alt=&#34;JSDocs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A better fetch API. Works on node, browser, and workers.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# npm&#xA;npm i ofetch&#xA;&#xA;# yarn&#xA;yarn add ofetch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ESM / Typescript&#xA;import { ofetch } from &#34;ofetch&#34;;&#xA;&#xA;// CommonJS&#xA;const { ofetch } = require(&#34;ofetch&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Works with Node.js&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://nodejs.org/api/packages.html#packages_conditional_exports&#34;&gt;conditional exports&lt;/a&gt; to detect Node.js and automatically use &lt;a href=&#34;https://github.com/unjs/node-fetch-native&#34;&gt;unjs/node-fetch-native&lt;/a&gt;. If &lt;code&gt;globalThis.fetch&lt;/code&gt; is available, will be used instead. To leverage Node.js 17.5.0 experimental native fetch API use &lt;a href=&#34;https://nodejs.org/dist/latest-v17.x/docs/api/cli.html#--experimental-fetch&#34;&gt;&lt;code&gt;--experimental-fetch&lt;/code&gt; flag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;keepAlive&lt;/code&gt; support&lt;/h3&gt; &#xA;&lt;p&gt;By setting the &lt;code&gt;FETCH_KEEP_ALIVE&lt;/code&gt; environment variable to &lt;code&gt;true&lt;/code&gt;, an HTTP/HTTPS agent will be registered that keeps sockets around even when there are no outstanding requests, so they can be used for future requests without having to re-establish a TCP connection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This option can potentially introduce memory leaks. Please check &lt;a href=&#34;https://github.com/node-fetch/node-fetch/pull/1325&#34;&gt;node-fetch/node-fetch#1325&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;✔️ Parsing Response&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ofetch&lt;/code&gt; will smartly parse JSON and native values using &lt;a href=&#34;https://github.com/unjs/destr&#34;&gt;destr&lt;/a&gt;, falling back to the text if it fails to parse.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { users } = await ofetch(&#34;/api/users&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For binary content types, &lt;code&gt;ofetch&lt;/code&gt; will instead return a &lt;code&gt;Blob&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;You can optionally provide a different parser than &lt;code&gt;destr&lt;/code&gt;, or specify &lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;arrayBuffer&lt;/code&gt;, or &lt;code&gt;text&lt;/code&gt; to force parsing the body with the respective &lt;code&gt;FetchResponse&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Use JSON.parse&#xA;await ofetch(&#34;/movie?lang=en&#34;, { parseResponse: JSON.parse });&#xA;&#xA;// Return text as is&#xA;await ofetch(&#34;/movie?lang=en&#34;, { parseResponse: (txt) =&amp;gt; txt });&#xA;&#xA;// Get the blob version of the response&#xA;await ofetch(&#34;/api/generate-image&#34;, { responseType: &#34;blob&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ JSON Body&lt;/h2&gt; &#xA;&lt;p&gt;If an object or a class with a &lt;code&gt;.toJSON()&lt;/code&gt; method is passed to the &lt;code&gt;body&lt;/code&gt; option, &lt;code&gt;ofetch&lt;/code&gt; automatically stringifies it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ofetch&lt;/code&gt; utilizes &lt;code&gt;JSON.stringify()&lt;/code&gt; to convert the passed object. Classes without a &lt;code&gt;.toJSON()&lt;/code&gt; method have to be converted into a string value in advance before being passed to the &lt;code&gt;body&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, and &lt;code&gt;POST&lt;/code&gt; request methods, when a string or object body is set, &lt;code&gt;ofetch&lt;/code&gt; adds the default &lt;code&gt;content-type: &#34;application/json&#34;&lt;/code&gt; and &lt;code&gt;accept: &#34;application/json&#34;&lt;/code&gt; headers (which you can always override).&lt;/p&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;ofetch&lt;/code&gt; supports binary responses with &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;ReadableStream&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt;, and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/fetch#body&#34;&gt;compatible body types&lt;/a&gt;. ofetch will automatically set the &lt;code&gt;duplex: &#34;half&#34;&lt;/code&gt; option for streaming support!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { users } = await ofetch(&#34;/api/users&#34;, {&#xA;  method: &#34;POST&#34;,&#xA;  body: { some: &#34;json&#34; },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Handling Errors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ofetch&lt;/code&gt; Automatically throws errors when &lt;code&gt;response.ok&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; with a friendly error message and compact stack (hiding internals).&lt;/p&gt; &#xA;&lt;p&gt;A parsed error body is available with &lt;code&gt;error.data&lt;/code&gt;. You may also use &lt;code&gt;FetchError&lt;/code&gt; type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await ofetch(&#34;https://google.com/404&#34;);&#xA;// FetchError: [GET] &#34;https://google/404&#34;: 404 Not Found&#xA;//     at async main (/project/playground.ts:4:3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To catch error response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await ofetch(&#34;/url&#34;).catch((err) =&amp;gt; err.data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To bypass status error catching you can set &lt;code&gt;ignoreResponseError&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await ofetch(&#34;/url&#34;, { ignoreResponseError: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Auto Retry&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ofetch&lt;/code&gt; Automatically retries the request if an error happens and if the response status code is included in &lt;code&gt;retryStatusCodes&lt;/code&gt; list:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Retry status codes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;408&lt;/code&gt; - Request Timeout&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;409&lt;/code&gt; - Conflict&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;425&lt;/code&gt; - Too Early&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;429&lt;/code&gt; - Too Many Requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;500&lt;/code&gt; - Internal Server Error&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;502&lt;/code&gt; - Bad Gateway&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;503&lt;/code&gt; - Service Unavailable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;504&lt;/code&gt; - Gateway Timeout&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can specify the amount of retry and delay between them using &lt;code&gt;retry&lt;/code&gt; and &lt;code&gt;retryDelay&lt;/code&gt; options and also pass a custom array of codes using &lt;code&gt;retryStatusCodes&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The default for &lt;code&gt;retry&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; retry, except for &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; methods where &lt;code&gt;ofetch&lt;/code&gt; does not retry by default to avoid introducing side effects. If you set a custom value for &lt;code&gt;retry&lt;/code&gt; it will &lt;strong&gt;always retry&lt;/strong&gt; for all requests.&lt;/p&gt; &#xA;&lt;p&gt;The default for &lt;code&gt;retryDelay&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; ms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await ofetch(&#34;http://google.com/404&#34;, {&#xA;  retry: 3,&#xA;  retryDelay: 500, // ms&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Timeout&lt;/h2&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;timeout&lt;/code&gt; in milliseconds to automatically abort a request after a timeout (default is disabled).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await ofetch(&#34;http://google.com/404&#34;, {&#xA;  timeout: 3000, // Timeout after 3 seconds&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Type Friendly&lt;/h2&gt; &#xA;&lt;p&gt;The response can be type assisted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const article = await ofetch&amp;lt;Article&amp;gt;(`/api/article/${id}`);&#xA;// Auto complete working with article.id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Adding &lt;code&gt;baseURL&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;By using &lt;code&gt;baseURL&lt;/code&gt; option, &lt;code&gt;ofetch&lt;/code&gt; prepends it for trailing/leading slashes and query search params for baseURL using &lt;a href=&#34;https://github.com/unjs/ufo&#34;&gt;ufo&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await ofetch(&#34;/config&#34;, { baseURL });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Adding Query Search Params&lt;/h2&gt; &#xA;&lt;p&gt;By using &lt;code&gt;query&lt;/code&gt; option (or &lt;code&gt;params&lt;/code&gt; as alias), &lt;code&gt;ofetch&lt;/code&gt; adds query search params to the URL by preserving the query in the request itself using &lt;a href=&#34;https://github.com/unjs/ufo&#34;&gt;ufo&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await ofetch(&#34;/movie?lang=en&#34;, { query: { id: 123 } });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Interceptors&lt;/h2&gt; &#xA;&lt;p&gt;Providing async interceptors to hook into lifecycle events of &lt;code&gt;ofetch&lt;/code&gt; call is possible.&lt;/p&gt; &#xA;&lt;p&gt;You might want to use &lt;code&gt;ofetch.create&lt;/code&gt; to set shared interceptors.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;onRequest({ request, options })&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;onRequest&lt;/code&gt; is called as soon as &lt;code&gt;ofetch&lt;/code&gt; is called, allowing you to modify options or do simple logging.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await ofetch(&#34;/api&#34;, {&#xA;  async onRequest({ request, options }) {&#xA;    // Log request&#xA;    console.log(&#34;[fetch request]&#34;, request, options);&#xA;&#xA;    // Add `?t=1640125211170` to query search params&#xA;    options.query = options.query || {};&#xA;    options.query.t = new Date();&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;onRequestError({ request, options, error })&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;onRequestError&lt;/code&gt; will be called when the fetch request fails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await ofetch(&#34;/api&#34;, {&#xA;  async onRequestError({ request, options, error }) {&#xA;    // Log error&#xA;    console.log(&#34;[fetch request error]&#34;, request, error);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;onResponse({ request, options, response })&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;onResponse&lt;/code&gt; will be called after &lt;code&gt;fetch&lt;/code&gt; call and parsing body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await ofetch(&#34;/api&#34;, {&#xA;  async onResponse({ request, response, options }) {&#xA;    // Log response&#xA;    console.log(&#34;[fetch response]&#34;, request, response.status, response.body);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;onResponseError({ request, options, response })&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;onResponseError&lt;/code&gt; is the same as &lt;code&gt;onResponse&lt;/code&gt; but will be called when fetch happens but &lt;code&gt;response.ok&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await ofetch(&#34;/api&#34;, {&#xA;  async onResponseError({ request, response, options }) {&#xA;    // Log error&#xA;    console.log(&#xA;      &#34;[fetch response error]&#34;,&#xA;      request,&#xA;      response.status,&#xA;      response.body&#xA;    );&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✔️ Create fetch with default options&lt;/h2&gt; &#xA;&lt;p&gt;This utility is useful if you need to use common options across several fetch calls.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Defaults will be cloned at one level and inherited. Be careful about nested options like &lt;code&gt;headers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const apiFetch = ofetch.create({ baseURL: &#34;/api&#34; });&#xA;&#xA;apiFetch(&#34;/test&#34;); // Same as ofetch(&#39;/test&#39;, { baseURL: &#39;/api&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💡 Adding headers&lt;/h2&gt; &#xA;&lt;p&gt;By using &lt;code&gt;headers&lt;/code&gt; option, &lt;code&gt;ofetch&lt;/code&gt; adds extra headers in addition to the request default headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await ofetch(&#34;/movies&#34;, {&#xA;  headers: {&#xA;    Accept: &#34;application/json&#34;,&#xA;    &#34;Cache-Control&#34;: &#34;no-cache&#34;,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💡 Adding HTTP(S) Agent&lt;/h2&gt; &#xA;&lt;p&gt;If you need use HTTP(S) Agent, can add &lt;code&gt;agent&lt;/code&gt; option with &lt;code&gt;https-proxy-agent&lt;/code&gt; (for Node.js only):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { HttpsProxyAgent } from &#34;https-proxy-agent&#34;;&#xA;&#xA;await ofetch(&#34;/api&#34;, {&#xA;  agent: new HttpsProxyAgent(&#34;http://example.com&#34;),&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍣 Access to Raw Response&lt;/h2&gt; &#xA;&lt;p&gt;If you need to access raw response (for headers, etc), can use &lt;code&gt;ofetch.raw&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const response = await ofetch.raw(&#34;/sushi&#34;);&#xA;&#xA;// response._data&#xA;// response.headers&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Native fetch&lt;/h2&gt; &#xA;&lt;p&gt;As a shortcut, you can use &lt;code&gt;ofetch.native&lt;/code&gt; that provides native &lt;code&gt;fetch&lt;/code&gt; API&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const json = await ofetch.native(&#34;/sushi&#34;).then((r) =&amp;gt; r.json());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📦 Bundler Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All targets are exported with Module and CommonJS format and named exports&lt;/li&gt; &#xA; &lt;li&gt;No export is transpiled for the sake of modern syntax &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You probably need to transpile &lt;code&gt;ofetch&lt;/code&gt;, &lt;code&gt;destr&lt;/code&gt;, and &lt;code&gt;ufo&lt;/code&gt; packages with Babel for ES5 support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You need to polyfill &lt;code&gt;fetch&lt;/code&gt; global for supporting legacy browsers like using &lt;a href=&#34;https://github.com/developit/unfetch&#34;&gt;unfetch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❓ FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why export is called &lt;code&gt;ofetch&lt;/code&gt; instead of &lt;code&gt;fetch&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the same name of &lt;code&gt;fetch&lt;/code&gt; can be confusing since API is different but still, it is a fetch so using the closest possible alternative. You can, however, import &lt;code&gt;{ fetch }&lt;/code&gt; from &lt;code&gt;ofetch&lt;/code&gt; which is auto-polyfill for Node.js and using native otherwise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why not have default export?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default exports are always risky to be mixed with CommonJS exports.&lt;/p&gt; &#xA;&lt;p&gt;This also guarantees we can introduce more utils without breaking the package and also encourage using &lt;code&gt;ofetch&lt;/code&gt; name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why not transpiled?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By transpiling libraries, we push the web backward with legacy code which is unneeded for most of the users.&lt;/p&gt; &#xA;&lt;p&gt;If you need to support legacy users, you can optionally transpile the library in your build pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT. Made with 💖&lt;/p&gt; &#xA;&lt;!-- Badges --&gt;</summary>
  </entry>
</feed>