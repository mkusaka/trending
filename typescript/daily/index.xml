<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-29T01:32:01Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>woovibr/pix-pdf</title>
    <updated>2024-04-29T01:32:01Z</updated>
    <id>tag:github.com,2024-04-29:/woovibr/pix-pdf</id>
    <link href="https://github.com/woovibr/pix-pdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Woovi Pix PDF&lt;/h1&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install deps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run storybook&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm storybook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to develop new templates&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;- Create a new file in src/templates&#xA;- Create .stories.tsx file&#xA;- Run the command `pnpm storybook`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to expose a new template&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;- Export the new template in src/templates/index&#xA;- Add the new template to templatesMap src/bin/generate-pdfs&#xA;- Run the command `pnpm generate-pdfs`&#xA;&#xA;The pdf file will be available in the generated-pdfs folder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neves/boleto-barcode-svg/&#34;&gt;https://github.com/neves/boleto-barcode-svg/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zpao/qrcode.react&#34;&gt;https://github.com/zpao/qrcode.react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portal.febraban.org.br/pagina/3166/33/pt-br/layour-arrecadacao&#34;&gt;https://portal.febraban.org.br/pagina/3166/33/pt-br/layour-arrecadacao&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cohere-ai/cohere-toolkit</title>
    <updated>2024-04-29T01:32:01Z</updated>
    <id>tag:github.com,2024-04-29:/cohere-ai/cohere-toolkit</id>
    <link href="https://github.com/cohere-ai/cohere-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toolkit is a collection of prebuilt components enabling users to quickly build and deploy RAG applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/assets/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cohere Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;Toolkit is a collection of prebuilt components enabling users to quickly build and deploy RAG applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#quick-start&#34;&gt;Try Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#what-is-included-in-toolkit&#34;&gt;About Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#deployment-guides&#34;&gt;Deploy Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#setup-for-development&#34;&gt;Develop and troubleshoot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#component-guides&#34;&gt;Component Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#roadmap&#34;&gt;What&#39;s on our roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#contributing&#34;&gt;How to contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coral.cohere.com/&#34;&gt;Try Coral Showcase&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/assets/toolkit.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Deploying to Azure&lt;/h3&gt; &#xA;&lt;p&gt;You can deploy Toolkit with one click to Microsoft Azure Platform:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fcohere-ai%2Fcohere-toolkit%2Fmain%2Fazuredeploy.json&#34;&gt;&lt;img src=&#34;https://aka.ms/deploytoazurebutton&#34; height=&#34;48px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building and running locally&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repo and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the instructions to configure the model - either AWS Sagemaker, Azure, or Cohere&#39;s platform. This can also be done by running &lt;code&gt;make setup&lt;/code&gt; (See Option 2 below), which will help generate a file for you, or by manually creating a &lt;code&gt;.env&lt;/code&gt; file and copying the contents of the provided &lt;code&gt;.env-template&lt;/code&gt;. Then replacing the values with the correct ones.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Environment variables&lt;/summary&gt; &#xA; &lt;h3&gt;Cohere Platform&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;COHERE_API_KEY&lt;/code&gt;: If your application will interface with Cohere&#39;s API, you will need to supply an API key. Not required if using AWS Sagemaker or Azure. Sign up at &lt;a href=&#34;https://dashboard.cohere.com/&#34;&gt;https://dashboard.cohere.com/&lt;/a&gt; to create an API key.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;NEXT_PUBLIC_API_HOSTNAME&lt;/code&gt;: The backend URL which the frontend will communicate with. Defaults to &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;DATABASE_URL&lt;/code&gt;: Your PostgreSQL database connection string for SQLAlchemy, should follow the format &lt;code&gt;postgresql+psycopg2://USER:PASSWORD@HOST:PORT&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;AWS Sagemaker&lt;/h3&gt; &#xA; &lt;p&gt;To use the toolkit with AWS Sagemaker you will first need the cohere model (a command version) which powers chat deployed in Sagemaker. Follow Cohere&#39;s &lt;a href=&#34;https://docs.cohere.com/docs/amazon-sagemaker-setup-guide&#34;&gt;guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/cohere-ai/cohere-aws/tree/main/notebooks/sagemaker&#34;&gt;notebooks&lt;/a&gt; to deploy a command model and create an endpoint which can then be used with the toolkit.&lt;/p&gt; &#xA; &lt;p&gt;Then you will need to set up authorization, &lt;a href=&#34;https://aws.amazon.com/iam/&#34;&gt;see more details here&lt;/a&gt;. The default toolkit set up uses the configuration file (after &lt;code&gt;aws configure sso&lt;/code&gt;) with the following environment variables:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;SAGE_MAKER_REGION_NAME&lt;/code&gt;: The region you configured for the model.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;SAGE_MAKER_ENDPOINT_NAME&lt;/code&gt;: The name of the endpoint which you created in the notebook.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;SAGE_MAKER_PROFILE_NAME&lt;/code&gt;: Your AWS profile name&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Hosted tools&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;PYTHON_INTERPRETER_URL&lt;/code&gt;: URL to the python interpreter container. Defaults to &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;TAVILY_API_KEY&lt;/code&gt;: If you want to enable internet search, you will need to supply a Tavily API Key. Not required.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Deploy locally&lt;/h3&gt; &#xA;&lt;p&gt;Once your environment variables are set, you&#39;re ready to deploy the Toolkit locally! Pull the Docker images from Github Artifact registry or build files from source. See the &lt;code&gt;Makefile&lt;/code&gt; for all available commands.&lt;/p&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python-poetry.org/docs/#installation&#34;&gt;Poetry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker-compose &amp;gt;= 2.22&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Option 1 - Install locally with Docker:&lt;/h4&gt; &#xA;&lt;p&gt;Ensure your shell is authenticated with &lt;a href=&#34;https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-with-a-personal-access-token-classic&#34;&gt;GHCR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pull the &lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/deployment_guides/single_container.md&#34;&gt;Single Container Image&lt;/a&gt; from Github&#39;s Artifact Registry&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/cohere-ai/cohere-toolkit:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the images locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name=cohere-toolkit -itd -e COHERE_API_KEY=&#39;Your Cohere API key here&#39; -p 8000:8000 -p 4000:4000 ghcr.io/cohere-ai/cohere-toolkit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Option 2 - Build locally from scratch:&lt;/h4&gt; &#xA;&lt;h5&gt;Option 2.1 - Run everything at once&lt;/h5&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make first-run&lt;/code&gt; to start the CLI, that will generate a &lt;code&gt;.env&lt;/code&gt; file for you. This will also run all the DB migrations and run the containers&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make first-run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Option 2.1 - Run each command separately&lt;/h5&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make setup&lt;/code&gt; to start the CLI, that will generate a &lt;code&gt;.env&lt;/code&gt; file for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrate&#xA;make dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you did not change the default port, visit &lt;a href=&#34;http://localhost:4000/&#34;&gt;http://localhost:4000/&lt;/a&gt; in your browser to chat with the model.&lt;/p&gt; &#xA;&lt;h2&gt;What is included in Toolkit?&lt;/h2&gt; &#xA;&lt;p&gt;Components in this repo include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/interfaces/coral_web&lt;/code&gt; - A web app built in Next.js. Includes a simple SQL database out of the box to store conversation history in the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/backend&lt;/code&gt; - Contains preconfigured data sources and retrieval code to set up RAG on custom data sources (called &#34;Retrieval Chains&#34;). Users can also configure which model to use, selecting from Cohere&#39;s models hosted on either Cohere&#39;s platform, Azure, and AWS Sagemaker. By default, we have configured a Langchain data retriever to test RAG on Wikipedia and your own uploaded documents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/assets/toolkit_graphic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deployment Guides&lt;/h2&gt; &#xA;&lt;p&gt;Looking to deploy the Toolkit to your preferred cloud service provider? See our guides below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/deployment_guides/single_container.md&#34;&gt;Single Container Setup&lt;/a&gt;: Useful as a quickstart to run the Toolkit, or deploy to AWS on an EC2 instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/deployment_guides/aws_ecs_single_container.md&#34;&gt;AWS ECS Deployment&lt;/a&gt;: Deploy the Toolkit single container to AWS ECS(Fargate).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/deployment_guides/gcp_deployment.md&#34;&gt;Google Cloud Platform&lt;/a&gt;: Help setup your Cloud SQL instance, then build, push and deploy backend+frontend containers to Cloud Run.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup for Development&lt;/h2&gt; &#xA;&lt;h3&gt;Setting up Poetry&lt;/h3&gt; &#xA;&lt;p&gt;Use for configuring and adding new retrieval chains.&lt;/p&gt; &#xA;&lt;p&gt;Install your dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run linters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run black .&#xA;poetry run isort .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up Your Local Database&lt;/h3&gt; &#xA;&lt;p&gt;The docker-compose file should spin up a local &lt;code&gt;db&lt;/code&gt; container with a PostgreSQL server. The first time you setup this project, and whenever new migrations are added, you will need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will apply all existing database migrations and ensure your DB schema is up to date.&lt;/p&gt; &#xA;&lt;p&gt;If ever you run into issues with Alembic, such as being out of sync and your DB does not contain any data you&#39;d like to preserve, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make reset-db&#xA;make migrate&#xA;make dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will delete the existing &lt;code&gt;db&lt;/code&gt; container volumes, restart the containers and reapply all migrations.&lt;/p&gt; &#xA;&lt;h3&gt;Testing the Toolkit&lt;/h3&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To spin the &lt;code&gt;test_db&lt;/code&gt; service for you. After, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make run-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making Database Model Changes&lt;/h3&gt; &#xA;&lt;p&gt;When making changes to any of the database models, such as adding new tables, modifying or removing columns, you will need to create a new Alembic migration. You can use the following Make command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Important: If adding a new table, make sure to add the import to the &lt;code&gt;model/__init__.py&lt;/code&gt; file! This will allow Alembic to import the models and generate migrations accordingly.&lt;/p&gt; &#xA;&lt;p&gt;This should generate a migration on the Docker container and be copied to your local &lt;code&gt;/alembic&lt;/code&gt; folder. Make sure the new migration gets created.&lt;/p&gt; &#xA;&lt;p&gt;Then you can migrate the changes to the PostgreSQL Docker instance using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;Multiple errors after running make dev for the first time&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you run the following command before running make dev:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging locally&lt;/h4&gt; &#xA;&lt;p&gt;To debug any of the backend logic while the Docker containers are running, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the Docker containers with reloading enabled, then in a separate shell window, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make attach&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will attach an interactive shell to the backend running, now when your backend code hits any&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pdb; pdb.set_trace()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will allow you to debug.&lt;/p&gt; &#xA;&lt;h2&gt;Component Guides&lt;/h2&gt; &#xA;&lt;h3&gt;How to add your own model deployment&lt;/h3&gt; &#xA;&lt;p&gt;A model deployment is a running version of one of the Cohere command models. The Toolkit currently supports the model deployments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cohere Platform (model_deployments/cohere_platform.py) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This model deployment option call the Cohere Platform with the &lt;a href=&#34;https://github.com/cohere-ai/cohere-python&#34;&gt;Cohere python SDK&lt;/a&gt;. You will need a Cohere API key. When you create an account with Cohere, we automatically create a trial API key for you. You can find it &lt;a href=&#34;https://dashboard.cohere.com/api-keys&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Azure (model_deployments/azure.py) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This model deployment calls into your Azure deployment. To get an Azure deployment &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-studio/how-to/deploy-models-cohere-command&#34;&gt;follow these steps&lt;/a&gt;. Once you have a model deployed you will need to get the endpoint URL and API key from the azure AI studio &lt;a href=&#34;https://ai.azure.com/build/&#34;&gt;https://ai.azure.com/build/&lt;/a&gt; -&amp;gt; Project -&amp;gt; Deployments -&amp;gt; Click your deployment -&amp;gt; You will see your URL and API Key. Note to use the Cohere SDK you need to add &lt;code&gt;/v1&lt;/code&gt; to the end of the url.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SageMaker (model_deployments/sagemaker.py) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This deployment option calls into your SageMaker deployment. To create a SageMaker endpoint &lt;a href=&#34;https://docs.cohere.com/docs/amazon-sagemaker-setup-guide&#34;&gt;follow the steps here&lt;/a&gt;, alternatively &lt;a href=&#34;https://github.com/cohere-ai/cohere-aws/tree/main/notebooks/sagemaker&#34;&gt;follow a command notebook here&lt;/a&gt;. Note your region and endpoint name when executing the notebook as these will be needed in the environment variables.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To add your own deployment: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Create a deployment file, add it to &lt;a href=&#34;https://github.com/cohere-ai/toolkit/tree/main/src/backend/chat/custom/model_deployments&#34;&gt;/model_deployments&lt;/a&gt; folder, implement the function calls from &lt;code&gt;BaseDeployment&lt;/code&gt; similar to the other deployments.&lt;/li&gt; &#xA;   &lt;li&gt;Add the deployment to &lt;a href=&#34;https://github.com/cohere-ai/toolkit/raw/main/src/backend/config/deployments.py&#34;&gt;src/backend/config/deployments.py&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add the option to &lt;a href=&#34;https://github.com/cohere-ai/toolkit/raw/main/cli/main.py&#34;&gt;cli/main.py&lt;/a&gt; and the environment variables required to the env template.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;To add a Cohere private deployment, use the steps above copying the cohere platform implementation changing the base_url for your private deployment and add in custom auth steps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to call the backend as an API&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to just run the backend service, and call it in the same manner as the Cohere API. Note streaming and non streaming endpoints are split into &#39;&lt;a href=&#34;http://localhost:8000/chat-stream&#34;&gt;http://localhost:8000/chat-stream&lt;/a&gt;&#39; and &#39;&lt;a href=&#34;http://localhost:8000/chat&#34;&gt;http://localhost:8000/chat&lt;/a&gt;&#39; compared to the API. For example, to stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location &#39;http://localhost:8000/chat-stream&#39; \&#xA;--header &#39;User-Id: me&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data &#39;{&#xA;    &#34;message&#34;: &#34;Tell me about the aya model&#34;&#xA;}&#xA;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to add your own chat interface&lt;/h3&gt; &#xA;&lt;p&gt;Currently the core chat interface is the Coral frontend. To add your own interface, take the steps above for call the backend as an API in your implementation and add it alongside &lt;code&gt;src/interfaces/coral_web&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to add a connector to the Toolkit&lt;/h3&gt; &#xA;&lt;p&gt;If you have already created a &lt;a href=&#34;https://docs.cohere.com/docs/connectors&#34;&gt;connector&lt;/a&gt;, it can be used in the toolkit with &lt;code&gt;ConnectorRetriever&lt;/code&gt;. Add in your configuration and then add the definition in &lt;a href=&#34;https://github.com/cohere-ai/toolkit/raw/main/src/backend/config/tools.py&#34;&gt;config/tools.py&lt;/a&gt; similar to &lt;code&gt;Arxiv&lt;/code&gt; implementation with the category &lt;code&gt;Category.DataLoader&lt;/code&gt;. You can now use the Coral frontend and API with the connector.&lt;/p&gt; &#xA;&lt;h3&gt;How to set up web search with the Toolkit&lt;/h3&gt; &#xA;&lt;p&gt;To use Coral with web search, simply use the &lt;code&gt;Tavily_Internet_Search&lt;/code&gt; tool by adding your API key to the env file. Alternatively you can use any search provider of your choosing, either with your own implementation or an integration implementation (such as LangChain) by following these &lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#how-to-create-your-own-tools-and-retrieval-sources&#34;&gt;steps below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to set up PDF Upload with the Toolkit&lt;/h3&gt; &#xA;&lt;p&gt;To use Coral with document upload, simply use the &lt;code&gt;File_Upload_LlamaIndex&lt;/code&gt; or &lt;code&gt;File_Upload_Langchain&lt;/code&gt; (this needs a cohere API key in the .env file) tool or by adding your API key to the env file. Alternatively you can use any document uploader of your choosing, either with your own implementation or an integration implementation (such as LangChain) by following these &lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/#how-to-create-your-own-tools-and-retrieval-sources&#34;&gt;steps below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to create your own tools and retrieval sources&lt;/h3&gt; &#xA;&lt;p&gt;Toolkit includes some sample tools that you can copy to configure your own data sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File loaders - Parses a PDF file and performs RAG. Enables users to upload PDF in Toolkit UI. Users have an option to use either Langchain or Llamaindex, whichever is preferred. Langchain is used by default.&lt;/li&gt; &#xA; &lt;li&gt;Data loaders - This tool queries a data source and then performs RAG on extracted documents. We used Langchain&#39;s Wikiretriever as the sample data source.&lt;/li&gt; &#xA; &lt;li&gt;Functions - Python interpreter and calculator tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To create your own tools or add custom data sources, see our guide: &lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/docs/custom_tool_guides/tool_guide.md&#34;&gt;tools and retrieval sources overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Experimental Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note that these are experimental features.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Langchain Multihop&lt;/h3&gt; &#xA;&lt;p&gt;Chatting with multihop tool usage through Langchain is enabled by setting experimental feature flag to True in &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;USE_EXPERIMENTAL_LANGCHAIN=True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting this flag to true, only tools that have a Langchain implementation can be utilized. These exist under &lt;code&gt;LANGCHAIN_TOOLS&lt;/code&gt; and require a &lt;code&gt;to_lanchain_tool()&lt;/code&gt; function on the tool implementation which returns a langchain compatible tool. Python interpreter and Tavily Internet search are provided in the toolkit by default once the environment is set up.&lt;/p&gt; &#xA;&lt;p&gt;Example API call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location &#39;http://localhost:8000/langchain-chat&#39; \&#xA;--header &#39;User-Id: me&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data &#39;{&#xA;    &#34;message&#34;: &#34;Tell me about the aya model&#34;,&#xA;    &#34;tools&#34;: [{&#34;name&#34;: &#34;Python_Interpreter&#34;},{&#34;name&#34;: &#34;Internet Search&#34;},]&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, citations are not supported in lanchain multihop.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set env variables in UI&lt;/li&gt; &#xA; &lt;li&gt;Include citations for multi hop tools&lt;/li&gt; &#xA; &lt;li&gt;Display images for python interpreter tool&lt;/li&gt; &#xA; &lt;li&gt;Add a slack bot as an available interface&lt;/li&gt; &#xA; &lt;li&gt;White labelling: Changing fonts, logos, and colours.&lt;/li&gt; &#xA; &lt;li&gt;User management and authentication system: Toolkit is currently configured with one user role and no authentication.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what drive an open source community, any contributions made are greatly appreciated. To get started, check out our &lt;a href=&#34;https://raw.githubusercontent.com/cohere-ai/cohere-toolkit/main/CONTRIBUTING.md&#34;&gt;documentation.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ethanniser/effect-workshop</title>
    <updated>2024-04-29T01:32:01Z</updated>
    <id>tag:github.com,2024-04-29:/ethanniser/effect-workshop</id>
    <link href="https://github.com/ethanniser/effect-workshop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Effect Beginner/Intermediate Workshop By Ethan Niser&lt;/h1&gt; &#xA;&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/ethanniser&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/@ethanniser&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;USEFUL LINKS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://effect-ts.github.io/effect/&#34;&gt;Effect API Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://effect.website/&#34;&gt;Effect Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect&#34;&gt;Effect Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/effect-ts&#34;&gt;Effect Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;REQUIREMENTS:&lt;/h2&gt; &#xA;&lt;h3&gt;A way to run typescript Node (with ts-node or tsx) or Bun&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en&#34;&gt;https://nodejs.org/en&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g tsx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I&#39;m using bun just because its over twice as fast to run typescript than with &lt;code&gt;tsx&lt;/code&gt; or &lt;code&gt;ts-node&lt;/code&gt; If you want to also use bun you can install it at &lt;a href=&#34;https://bun.sh/docs/installation&#34;&gt;https://bun.sh/docs/installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install JS Dependecies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i&#xA;yarn i&#xA;pnpm i&#xA;bun i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;An editor that supports LSP&lt;/h3&gt; &#xA;&lt;p&gt;Hovering to see types, autocompletion, and go-to-definition are gonna be pretty useful. I&#39;ll be using VSCode, but you can use any editor that supports LSP.&lt;/p&gt; &#xA;&lt;h2&gt;How this project is broken up&lt;/h2&gt; &#xA;&lt;h3&gt;Slides&lt;/h3&gt; &#xA;&lt;p&gt;The slides are available online at &lt;a href=&#34;https://effect-workshop-slides.vercel.app&#34;&gt;https://effect-workshop-slides.vercel.app&lt;/a&gt; But, if you wish to run the slides locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd slides&#xA;bun run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;All of the content is in the &lt;code&gt;src&lt;/code&gt; folder&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Each part has its own folder. Within those folders you find these folders:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;snippets&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This contains typescript files that have code examples and comment explanations for individual concepts. I will go through these files in the workshop. Free free to follow along and read the comments.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;exercises&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This contains typescript files that define some practice exercises for individual concepts. They define test cases that you can check by just running the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Solutions are located in the &lt;code&gt;solutions&lt;/code&gt; folder&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;project&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For parts 2 and 3, we will be rewriting a non-effect application to effect. The project folder contains the non-effect application, and is where if you want to follow along, you can modify the code to use effect.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;AFTER_THE_WORKSHOP.md&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;To reinforce your learning, I&#39;ve provided some ideas for how to expand each project when you get home. Try them out on your own, and if you need help feel free to @ me in the Effect discord- I&#39;d love to see how people approach each problem.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;breakpoints&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For parts 2 &amp;amp; 3, &#39;breakpoints&#39; defines each of the steps we will take to refactor the non-effect application to effect. Each file is a folder. All changes between steps are described in the &lt;code&gt;changes.md&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you get lost, you can always copy whatever &#39;breakpoint&#39; you are on to the &lt;code&gt;project&lt;/code&gt; folder and continue from there.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;pad.ts&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Stands for &#39;scratchpad&#39;. Pretty useful for just trying out some code that doesn&#39;t necessarily belong anywhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run pad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Files&lt;/h2&gt; &#xA;&lt;p&gt;Every file is prefixed with a number. I have defined a bun of scripts so you don&#39;t have to type out the whole file name / path.&lt;/p&gt; &#xA;&lt;p&gt;They follow this pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;part = 1 | 2 | 3 | 4&#xA;section = s (snippets) | e (exercises) | p (project) | b (breakpoints)&#xA;fileOrFolderNumber = (if folder will run index.ts)&#xA;&#xA;bun run part-section-fileOrFolderNumber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to run the first snippet in part 1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run 1-s-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the first exercise in part 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run 2-e-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the part 3 project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run 3-p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cheat Sheet&lt;/h2&gt; &#xA;&lt;p&gt;For quick reference or for review feel free to read &lt;a href=&#34;https://raw.githubusercontent.com/ethanniser/effect-workshop/main/CHEATSHEET.md&#34;&gt;CHEATSHEET.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VSCode Snippets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Gen Function $&#34;: {&#xA;    &#34;prefix&#34;: &#34;gg&#34;,&#xA;    &#34;body&#34;: [&#34;function* (_) {\n\t$0\n}&#34;],&#xA;    &#34;description&#34;: &#34;Generator function with _ input&#34;&#xA;  },&#xA;  &#34;Gen Function $ (wrapped)&#34;: {&#xA;    &#34;prefix&#34;: &#34;egg&#34;,&#xA;    &#34;body&#34;: [&#34;Effect.gen(function* (_) {\n\t$0\n})&#34;],&#xA;    &#34;description&#34;: &#34;Generator function with _ input&#34;&#xA;  },&#xA;  &#34;Gen Yield $&#34;: {&#xA;    &#34;prefix&#34;: &#34;yy&#34;,&#xA;    &#34;body&#34;: [&#34;yield* _($0)&#34;],&#xA;    &#34;description&#34;: &#34;Yield generator calling _()&#34;&#xA;  },&#xA;  &#34;Gen Yield $ (const)&#34;: {&#xA;    &#34;prefix&#34;: &#34;cyy&#34;,&#xA;    &#34;body&#34;: [&#34;const $1 = yield* _($0)&#34;],&#xA;    &#34;description&#34;: &#34;Yield generator calling _()&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>