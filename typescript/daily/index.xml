<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-30T01:45:56Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>actions/labeler</title>
    <updated>2023-06-30T01:45:56Z</updated>
    <id>tag:github.com,2023-06-30:/actions/labeler</id>
    <link href="https://github.com/actions/labeler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An action for automatically labelling pull requests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pull Request Labeler&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/actions/labeler/actions/workflows/basic-validation.yml&#34;&gt;&lt;img src=&#34;https://github.com/actions/labeler/actions/workflows/basic-validation.yml/badge.svg?branch=main&#34; alt=&#34;Basic validation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automatically label new pull requests based on the paths of files being changed.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Create &lt;code&gt;.github/labeler.yml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;.github/labeler.yml&lt;/code&gt; file with a list of labels and &lt;a href=&#34;https://github.com/isaacs/minimatch&#34;&gt;minimatch&lt;/a&gt; globs to match to apply the label.&lt;/p&gt; &#xA;&lt;p&gt;The key is the name of the label in your repository that you want to add (e.g. &lt;code&gt;merge conflict&lt;/code&gt;, &lt;code&gt;needs-updating&lt;/code&gt;) and the value is the path (glob) of the changed files (e.g. &lt;code&gt;src/**&lt;/code&gt;, &lt;code&gt;tests/*.spec.js&lt;/code&gt;) or a match object.&lt;/p&gt; &#xA;&lt;h4&gt;Match Object&lt;/h4&gt; &#xA;&lt;p&gt;For more control over matching, you can provide a match object instead of a simple path glob. The match object is defined as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- any: [&#39;list&#39;, &#39;of&#39;, &#39;globs&#39;]&#xA;  all: [&#39;list&#39;, &#39;of&#39;, &#39;globs&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One or both fields can be provided for fine-grained matching. Unlike the top-level list, the list of path globs provided to &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt; must ALL match against a path for the label to be applied.&lt;/p&gt; &#xA;&lt;p&gt;The fields are defined as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;any&lt;/code&gt;: match ALL globs against ANY changed path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all&lt;/code&gt;: match ALL globs against ALL changed paths&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simple path glob is the equivalent to &lt;code&gt;any: [&#39;glob&#39;]&lt;/code&gt;. More specifically, the following two configurations are equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;label1:&#xA;- example1/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;label1:&#xA;- any: [&#39;example1/*&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a boolean logic perspective, top-level match objects are &lt;code&gt;OR&lt;/code&gt;-ed together and individual match rules within an object are &lt;code&gt;AND&lt;/code&gt;-ed. Combined with &lt;code&gt;!&lt;/code&gt; negation, you can write complex matching rules.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ This action uses &lt;a href=&#34;https://www.npmjs.com/package/minimatch&#34;&gt;minimatch&lt;/a&gt; to apply glob patterns. For historical reasons, paths starting with dot (e.g. &lt;code&gt;.github&lt;/code&gt;) are not matched by default. You need to set &lt;code&gt;dot: true&lt;/code&gt; to change this behavior. See &lt;a href=&#34;https://raw.githubusercontent.com/actions/labeler/main/#inputs&#34;&gt;Inputs&lt;/a&gt; table below for details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Basic Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# Add &#39;label1&#39; to any changes within &#39;example&#39; folder or any subfolders&#xA;label1:&#xA;- example/**&#xA;&#xA;# Add &#39;label2&#39; to any file changes within &#39;example2&#39; folder&#xA;label2: example2/*&#xA;&#xA;# Add label3 to any change to .txt files within the entire repository. Quotation marks are required for the leading asterisk&#xA;label3:&#xA;- &#39;**/*.txt&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Common Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# Add &#39;repo&#39; label to any root file changes&#xA;repo:&#xA;- &#39;*&#39;&#xA;&#xA;# Add &#39;@domain/core&#39; label to any change within the &#39;core&#39; package&#xA;&#39;@domain/core&#39;:&#xA;- package/core/**&#xA;&#xA;# Add &#39;test&#39; label to any change to *.spec.js files within the source dir&#xA;test:&#xA;- src/**/*.spec.js&#xA;&#xA;# Add &#39;source&#39; label to any change to src files within the source dir EXCEPT for the docs sub-folder&#xA;source:&#xA;- any: [&#39;src/**&#39;, &#39;!src/docs/*&#39;]&#xA;&#xA;# Add &#39;frontend` label to any change to *.js files as long as the `main.js` hasn&#39;t changed&#xA;frontend:&#xA;- any: [&#39;src/**/*.js&#39;]&#xA;  all: [&#39;!src/main.js&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create Workflow&lt;/h3&gt; &#xA;&lt;p&gt;Create a workflow (e.g. &lt;code&gt;.github/workflows/labeler.yml&lt;/code&gt; see &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-workflow#creating-a-workflow-file&#34;&gt;Creating a Workflow file&lt;/a&gt;) to utilize the labeler action with content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;name: &#34;Pull Request Labeler&#34;&#xA;on:&#xA;- pull_request_target&#xA;&#xA;jobs:&#xA;  triage:&#xA;    permissions:&#xA;      contents: read&#xA;      pull-requests: write&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: actions/labeler@v4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Inputs&lt;/h4&gt; &#xA;&lt;p&gt;Various inputs are defined in &lt;a href=&#34;https://raw.githubusercontent.com/actions/labeler/main/action.yml&#34;&gt;&lt;code&gt;action.yml&lt;/code&gt;&lt;/a&gt; to let you configure the labeler:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;repo-token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Token to use to authorize label changes. Typically the GITHUB_TOKEN secret&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;configuration-path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The path to the label configuration file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.github/labeler.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sync-labels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether or not to remove labels when matching files are reverted or no longer changed by the PR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dot&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether or not to auto-include paths starting with dot (e.g. &lt;code&gt;.github&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;When &lt;code&gt;dot&lt;/code&gt; is disabled and you want to include &lt;em&gt;all&lt;/em&gt; files in a folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;label1:&#xA;- path/to/folder/**/*&#xA;- path/to/folder/**/.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;dot&lt;/code&gt; is enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;label1:&#xA;- path/to/folder/**&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Outputs&lt;/h4&gt; &#xA;&lt;p&gt;Labeler provides the following outputs:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;new-labels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A comma-separated list of all new labels&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;all-labels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A comma-separated list of all labels that the PR contains&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following example performs steps based on the output of labeler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;name: &#34;My workflow&#34;&#xA;on:&#xA;- pull_request_target&#xA;&#xA;jobs:&#xA;  triage:&#xA;    runs-on: ubuntu-latest&#xA;    permissions:&#xA;      contents: read&#xA;      pull-requests: write&#xA;    steps:&#xA;    - id: label-the-PR&#xA;      uses: actions/labeler@v3&#xA;      &#xA;    - id: run-frontend-tests&#xA;      if: contains(fromJson(steps.label-the-PR.outputs.all-labels), &#39;frontend&#39;)&#xA;      run: |&#xA;        echo &#34;Running frontend tests...&#34;&#xA;        # Put your commands for running frontend tests here&#xA;  &#xA;    - id: run-backend-tests&#xA;      if: contains(fromJson(steps.label-the-PR.outputs.all-labels), &#39;backend&#39;)&#xA;      run: |&#xA;        echo &#34;Running backend tests...&#34;&#xA;        # Put your commands for running backend tests here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;In order to add labels to pull requests, the GitHub labeler action requires write permissions on the pull-request. However, when the action runs on a pull request from a forked repository, GitHub only grants read access tokens for &lt;code&gt;pull_request&lt;/code&gt; events, at most. If you encounter an &lt;code&gt;Error: HttpError: Resource not accessible by integration&lt;/code&gt;, it&#39;s likely due to these permission constraints. To resolve this issue, you can modify the &lt;code&gt;on:&lt;/code&gt; section of your workflow to use &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target&#34;&gt;&lt;code&gt;pull_request_target&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;pull_request&lt;/code&gt; (see example &lt;a href=&#34;https://raw.githubusercontent.com/actions/labeler/main/#create-workflow&#34;&gt;above&lt;/a&gt;). This change allows the action to have write access, because &lt;code&gt;pull_request_target&lt;/code&gt; alters the &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target&#34;&gt;context of the action&lt;/a&gt; and safely grants additional permissions. Refer to the &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token&#34;&gt;GitHub token permissions documentation&lt;/a&gt; for more details about access levels and event contexts.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! See the &lt;a href=&#34;https://raw.githubusercontent.com/actions/labeler/main/CONTRIBUTING.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>