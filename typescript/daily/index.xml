<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-18T01:47:19Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>statofu/statofu</title>
    <updated>2023-05-18T01:47:19Z</updated>
    <id>tag:github.com,2023-05-18:/statofu/statofu</id>
    <link href="https://github.com/statofu/statofu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;States changing predictable without tracking any function bodies. Born for low overall cost of development on state management.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/statofu/statofu/main/assets/d9606fc3fb1f3abc2505a5856412c87b8cce3679.jpg&#34; alt=&#34;Statofu&#34;&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/statofu/statofu&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/statofu/statofu/latest&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/statofu/statofu/actions/workflows/verify-and-release.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/statofu/statofu/verify-and-release.yml?branch=latest&amp;amp;label=verify%20and%20release&#34; alt=&#34;Verify and release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/statofu&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/statofu&#34; alt=&#34;Npm Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/package/statofu&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/statofu&#34; alt=&#34;Minzipped size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/statofu/statofu/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/statofu/statofu&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/statofu/statofu/main/README.zh-Hans.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Statofu?&lt;/h2&gt; &#xA;&lt;p&gt;Two problems that today&#39;s widely-accepted libraries of state management don&#39;t actually handle well are (1) predictability of states changing and (2) overall cost of development on use.&lt;/p&gt; &#xA;&lt;p&gt;Taking an example in React, Redux uses reducers/slices to make one-state changing predictable without tracking function bodies but multi-state changing is not the case. When a simple action changes one state, what one state it changes can be understood clearly by checking what reducer/slice responds to it, which often involves checking delcarative information only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const checkboxSlice = createSlice({&#xA;  name: &#39;checkbox&#39;,&#xA;  initialState: {&#xA;    checked: false,&#xA;  },&#xA;  reducers: {&#xA;    check(state) {&#xA;      state.checked = true;&#xA;    },&#xA;  },&#xA;});&#xA;&#xA;const { check } = checkboxSlice.actions;&#xA;&#xA;// By checking `check` is declared in `checkboxSlice`, we know `checkboxSlice` responds to `check` so `check` changes the one state represented by `checkboxSlice`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But, when a complicated action changes multi states, what multi states it changes needs to be figured out by tracking what simple actions it invokes and what redcuers/slices respond to the invoked simple actions, which always involves trakcing function bodies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;const checkboxSlice = createSlice({&#xA;  name: &#39;checkbox&#39;,&#xA;  initialState: {&#xA;    checked: false,&#xA;  },&#xA;  reducers: {&#xA;    check(state) {&#xA;      state.checked = true;&#xA;    },&#xA;+&#xA;+    uncheck(state) {&#xA;+      state.checked = false;&#xA;+    },&#xA;  },&#xA;});&#xA;&#xA;-const { check } = checkboxSlice.actions;&#xA;+const { check, uncheck } = checkboxSlice.actions;&#xA;&#xA;// The underlying simple action `uncheck` needs to be built in advance for the complicated action `uncheckWithTextCleaned` but may never get invoked anywhere else.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const textareaSlice = createSlice({&#xA;  name: &#39;textarea&#39;,&#xA;  initialState: {&#xA;    text: &#39;&#39;,&#xA;  },&#xA;  reducers: {&#xA;    setText(state, action: PayloadAction&amp;lt;string&amp;gt;) {&#xA;      state.text = action.payload;&#xA;    },&#xA;  },&#xA;});&#xA;&#xA;const { setText } = textareaSlice.actions;&#xA;&#xA;function uncheckWithTextCleaned(): AppThunk {&#xA;  return (dispatch) =&amp;gt; {&#xA;    dispatch(uncheck());&#xA;    dispatch(setText(&#39;&#39;));&#xA;  };&#xA;}&#xA;&#xA;// By tracking `uncheckWithTextCleaned` invokes `uncheck` declared in `checkboxSlice` and `setText` declared in `textareaSlice`, we know `uncheckWithTextCleaned` changes the multi states represented by `checkboxSlice` and `textareaSlice`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without tracking function bodies, the multi states to be changed remain unknown so multi-state changing goes unpredictable. With tracking function bodies, the multi states to be changed get known but overall cost of development on use increases. In addition, when underlying simple actions to be invoked in a complicated action to be built are not yet ready, they need to be built in advance only for it but may never get invoked anywhere else. Then, complicated actions become high-coupling with their underlying reducers/slices, which brings difficulties in development, thus the cost increases further.&lt;/p&gt; &#xA;&lt;p&gt;The problems exist not only in Redux but also in many widely-accepted libraries of state management in React. &lt;a href=&#34;https://github.com/licg9999/review-of-state-management-in-react&#34;&gt;A series of articles&lt;/a&gt; was written for the clarification. Further more, with a glimpse of the most widely-accepted library of state management in each of different frameworks, the problems are considered to exist universally.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, Statofu, another framework-agnostic, fast and small library of state management, is built. It&#39;s able to make both one-state and multi-state changing predictable without tracking any function bodies. Besides, necessities but only necessities of state management are included so overall cost of development on use decreases in primary aspects. Let&#39;s check it out 🌈.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Statofu can be installed by &lt;code&gt;npm&lt;/code&gt; or any package manager you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i -S statofu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, its UMD format can be loaded from a npm CDN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/statofu/dist/statofu.umd.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The UMD name is &lt;code&gt;statofu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Essentials&lt;/h2&gt; &#xA;&lt;h3&gt;Creating a store&lt;/h3&gt; &#xA;&lt;p&gt;In Statofu, states are managed by a store. The API &lt;code&gt;createStatofuStore&lt;/code&gt; returns a store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createStatofuStore } from &#39;statofu&#39;;&#xA;&#xA;const store = createStatofuStore();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining states&lt;/h3&gt; &#xA;&lt;p&gt;A state in Statofu is defined by a Plain Old JavaScript Object(POJO). A POJO itself is not a state but a state definition, (1) identifying a state in a store, (2) hosting the default state and (3) declaring the state type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface CheckboxState {&#xA;  checked: boolean;&#xA;  highlighted: boolean;&#xA;}&#xA;&#xA;const $checkboxState = {&#xA;  checked: false,&#xA;  highlighted: false,&#xA;};&#xA;&#xA;interface TextareaState {&#xA;  text: string;&#xA;  highlighted: boolean;&#xA;}&#xA;&#xA;const $textareaState = {&#xA;  text: &#39;&#39;,&#xA;  highlighted: false,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tell state definitions from states by names, it&#39;s recommended to prefix &lt;code&gt;$&lt;/code&gt; to names of state definitions.&lt;/p&gt; &#xA;&lt;h3&gt;Operating states&lt;/h3&gt; &#xA;&lt;p&gt;Operating states in Statofu means changing states. Operating one state involves a pure function that processes old one state and optional payloads to return new one state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function check(state: CheckboxState): CheckboxState {&#xA;  return { ...state, checked: true };&#xA;}&#xA;&#xA;function setText(state: TextareaState, text: string): TextareaState {&#xA;  return { ...state, text };&#xA;}&#xA;&#xA;store.operate($checkboxState, check); // { checked: true, highlighted: false }&#xA;store.operate($textareaState, setText, &#39;Lorem ipsum&#39;); // { text: &#39;Lorem ipsum&#39;, highlighted: false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Operating multi states involves a pure function that processes a old multi states tuple and optional payloads to return a new multi states tuple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function uncheckWithTextCleaned([checkboxState, textareaState]: [CheckboxState, TextareaState]): [&#xA;  CheckboxState,&#xA;  TextareaState&#xA;] {&#xA;  return [&#xA;    { ...checkboxState, checked: false },&#xA;    { ...textareaState, text: &#39;&#39; },&#xA;  ];&#xA;}&#xA;&#xA;store.operate([$checkboxState, $textareaState], uncheckWithTextCleaned); // [{ checked: false, highlighted: false }, { text: &#39;&#39;, highlighted: false }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A pure function in Statofu behaves as above is a reducer. This reducer is the same concept as in Redux. The difference is, a reducer in Redux handles all kinds of state-changing logics on one state in terms of all kinds of actions, but a reducer in Statofu handles only one kind of state-changing logics on either one or multi states in terms of only one kind of payloads.&lt;/p&gt; &#xA;&lt;p&gt;As each reducer in Statofu is designed to handle either one-state or multi-state changing as a pure function without any side effects, what states it changes can be understood clearly by checking its function declaration only, which makes both one-state and multi-state changing predictable without tracking any function bodies. As each reducer in Statofu is designed to handle only one kind of state-changing logics in terms of only one kind of payloads, different kinds of state-changing logics can be placed in different reducers separately, which makes state-changing logics well structured easily.&lt;/p&gt; &#xA;&lt;p&gt;By the way, there is no limitation to either the count or the types of payloads in a reducer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function setTextVariously(&#xA;  state: TextareaState,&#xA;  s: string,&#xA;  n: number,&#xA;  b: boolean,&#xA;  f: () =&amp;gt; string&#xA;): TextareaState {&#xA;  return { ...state, text: `${s} ${n} ${b} ${f()}` };&#xA;}&#xA;&#xA;store.operate($textareaState, setTextVariously, &#39;Lorem ipsum&#39;, 0, false, () =&amp;gt; &#39;dolor sit amet&#39;); // { text: &#39;Lorem ipsum 0 false dolor sit amet&#39;, highlighted: false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another tip is, as reducers are pure functions in nature, a reducer can directly invoke another reducer as a pure function as long as the finally returned states make sense:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function checkWithHighlighted(state: CheckboxState): CheckboxState {&#xA;  return { ...check(state), highlighted: true };&#xA;}&#xA;&#xA;function checkWithTextCleaned([checkboxState, textareaState]: [CheckboxState, TextareaState]): [&#xA;  CheckboxState,&#xA;  TextareaState&#xA;] {&#xA;  return [check(checkboxState), { ...textareaState, text: &#39;&#39; }];&#xA;}&#xA;&#xA;store.operate($checkboxState, checkWithHighlighted); // { checked: true, highlighted: true }&#xA;store.operate([$checkboxState, $textareaState], checkWithTextCleaned); // [{ checked: true, highlighted: true }, { text: &#39;&#39;, highlighted: false }]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshotting states&lt;/h3&gt; &#xA;&lt;p&gt;Snapshotting states in Statofu means getting states. Snapshotting can be done to either one or multi states:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const checkboxState1 = store.snapshot($checkboxState);&#xA;const textareaState1 = store.snapshot($textareaState);&#xA;const [checkboxState2, textareaState2] = store.snapshot([$checkboxState, $textareaState]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data deriving in Statofu is achieved by selectors. A selector is a pure function that processes either one or multi states and optional payloads to return a value as a derived datum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function selectIsChecked(state: CheckboxState): boolean {&#xA;  return state.checked;&#xA;}&#xA;&#xA;function selectDoesTextInclude(state: TextareaState, searchText: string): boolean {&#xA;  return state.text.includes(searchText);&#xA;}&#xA;&#xA;function selectIsAnyHighlighted([checkboxState, textareaState]: [&#xA;  CheckboxState,&#xA;  TextareaState&#xA;]): boolean {&#xA;  return checkboxState.highlighted || textareaState.highlighted;&#xA;}&#xA;&#xA;const isChecked = store.snapshot($checkboxState, selectIsChecked);&#xA;const doesTextIncludeLorem = store.snapshot($textareaState, selectDoesTextInclude, &#39;Lorem&#39;);&#xA;const isAnyHighlighted = store.snapshot([$checkboxState, $textareaState], selectIsAnyHighlighted);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subscribing states changes&lt;/h3&gt; &#xA;&lt;p&gt;In Statofu, a listener can be taken to subscribe to (1) one-state, (2) multi-state, or (3) any-state changes. When one state gets operated and the new state goes referentially different(&lt;code&gt;!==&lt;/code&gt;) from the old state, one-state change listeners on the one, multi-state change listeners on some multi containing the one and all any-state change listeners get called once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// (1)&#xA;function onCheckboxStateChange(newState: CheckboxState, oldState: CheckboxState): void {}&#xA;&#xA;// (2)&#xA;function onTextareaStateChange(newState: TextareaState, oldState: TextareaState): void {}&#xA;&#xA;// (3)&#xA;function onCheckboxTextareaStatesChange(&#xA;  [newCheckboxState, newTextareaState]: [CheckboxState, TextareaState],&#xA;  [oldCheckboxState, oldTextareaState]: [CheckboxState, TextareaState]&#xA;): void {}&#xA;&#xA;// (4)&#xA;function onAnyStateChange(&#xA;  newStates: OneOrMulti&amp;lt;StatofuState&amp;gt;,&#xA;  oldStates: OneOrMulti&amp;lt;StatofuState&amp;gt;&#xA;): void {}&#xA;&#xA;const unsubscribeNo1 = store.subscribe($checkboxState, onCheckboxStateChange);&#xA;const unsubscribeNo2 = store.subscribe($textareaState, onTextareaStateChange);&#xA;const unsubscribeNo3 = store.subscribe(&#xA;  [$checkboxState, $textareaState],&#xA;  onCheckboxTextareaStatesChange&#xA;);&#xA;const unsubscribeNo4 = store.subscribe(onAnyStateChange);&#xA;&#xA;store.operate($checkboxState, check); // Listeners #1, #3 and #4 get called once&#xA;store.operate($textareaState, setText, &#39;Lorem ipsum&#39;); // Listeners #2, #3 and #4 get called once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When multi states get operated and at least one of the new states goes referentially different(&lt;code&gt;!==&lt;/code&gt;) from that in the old states, one-state change listeners on some one contained by the changed parts, multi-state change listeners on some multi intersecting with the changed parts and all any-state change listeners get called once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;store.operate([$checkboxState, $textareaState], uncheckWithTextCleaned); // Listeners #1, #2, #3 and #4 get called once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To unsubscribe from states changes, it&#39;s doable by calling either &lt;code&gt;store.unsubscribe&lt;/code&gt; or the callback returned by &lt;code&gt;store.subscribe&lt;/code&gt;. If only states are specified on calling &lt;code&gt;store.unsubscribe&lt;/code&gt;, all listeners on the states changes go deactivated. Though, deactivating all listeners on one-state changes doesn&#39;t affect any listeners on multi-state changes and vice versa.&lt;/p&gt; &#xA;&lt;h2&gt;Recipes&lt;/h2&gt; &#xA;&lt;h3&gt;Recommended code structure&lt;/h3&gt; &#xA;&lt;p&gt;Usually, when you start using a library of state management, you mean to manage states across UI components. UI components sharing a set of states constitue a UI module. (A UI module is just the client app if it has no other UI module as its parent.) Assuming the whole module resides in a standalone module directory, you may place logics on a state into a standalone state file in the module directory.&lt;/p&gt; &#xA;&lt;p&gt;With each of the state files, you can easily understand (1) a state definition, (2) available states changing on the state and (3) available data deriving on the state. Also, they are very indepdent from the rest of the module or even from Statofu, which benefits maintainability:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// SomeModule/CheckboxState.ts&#xA;export interface CheckboxState {&#xA;  checked: boolean;&#xA;  highlighted: boolean;&#xA;}&#xA;&#xA;export const $checkboxState = {&#xA;  checked: false,&#xA;  highlighted: false,&#xA;};&#xA;&#xA;export function check(state: CheckboxState): CheckboxState {&#xA;  return { ...state, checked: true };&#xA;}&#xA;&#xA;// More reducers ...&#xA;&#xA;export function selectIsChecked(state: CheckboxState): boolean {&#xA;  return state.checked;&#xA;}&#xA;&#xA;// More selectors ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// SomeModule/TextareaState.ts&#xA;export interface TextareaState {&#xA;  text: string;&#xA;  highlighted: boolean;&#xA;}&#xA;&#xA;export const $textareaState = {&#xA;  text: &#39;&#39;,&#xA;  highlighted: false,&#xA;};&#xA;&#xA;export function setText(state: TextareaState, text: string): TextareaState {&#xA;  return { ...state, text };&#xA;}&#xA;&#xA;// More reducers ...&#xA;&#xA;export function selectDoesTextInclude(state: TextareaState, searchText: string): boolean {&#xA;  return state.text.includes(searchText);&#xA;}&#xA;&#xA;// More selectors ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, you can get a store created on the module initialized and cleared on the module destroyed. Meanwhile, you can make the store accessible to components in the module. Then, in the components, you can call the store APIs along with exports from the state files to develop UI logics as you wish:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// SomeModule/SomePseudoComponent.ts&#xA;import { $checkboxState, check, selectIsChecked, uncheckWithTextCleaned } from &#39;./CheckboxState&#39;;&#xA;import { $textareaState, selectDoesTextInclude, setText } from &#39;./TextareaState&#39;;&#xA;&#xA;// Events handlers&#xA;&#xA;function onCheckboxToggle(checked: boolean): void {&#xA;  if (checked) {&#xA;    store.operate($checkboxState, check);&#xA;  } else {&#xA;    store.operate([$checkboxState, $textareaState], uncheckWithTextCleaned);&#xA;  }&#xA;}&#xA;&#xA;function onTextareaChange(text: string): void {&#xA;  store.operate($textareaState, setText, text);&#xA;}&#xA;&#xA;// Rendering&#xA;&#xA;function renderCheckbox(/* ... */): Element {&#xA;  const { checked, highlighted } = store.snapshot($checkboxState);&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;function renderTextarea(/* ... */): Element {&#xA;  const { text, highlighted } = store.snapshot($textareaState);&#xA;  const isChecked = store.snapshot($checkboxState, selectIsChecked);&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;function renderTodoHint(/* ... */): Element {&#xA;  const doesTextIncludeTODO = store.snapshot($textareaState, selectDoesTextInclude, &#39;TODO&#39;);&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;function onComponentInitialized(): void {&#xA;  store.subscribe([$checkboxState, $textareaState], (/* ... */) =&amp;gt; {&#xA;    rerender(/* ... */);&#xA;  });&#xA;}&#xA;&#xA;// More UI logics ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration with React&lt;/h3&gt; &#xA;&lt;p&gt;Statofu is designed as framework-agnostic and is supposed to work with any framework. To integrate Statofu with a framework, you may simply deal with 3 points, (1) binding a store&#39;s lifecyle with a module&#39;s, (2) making the store accessible to components in the module and (3) having latest states observed in a timely manner for rendering. A simple demo of integrating Statofu with React looks as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// StatofuReact.tsx&#xA;import { createStatofuStore, OneOrMulti, StatofuState, StatofuStore } from &#39;statofu&#39;;&#xA;&#xA;// For point #1&#xA;export function useBindStore(): StatofuStore {&#xA;  const refStore = useRef&amp;lt;StatofuStore | null&amp;gt;(null);&#xA;&#xA;  if (!refStore.current) {&#xA;    refStore.current = createStatofuStore();&#xA;  }&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    const store = refStore.current;&#xA;    return () =&amp;gt; {&#xA;      if (store) {&#xA;        store.clear();&#xA;      }&#xA;    };&#xA;  }, []);&#xA;&#xA;  return refStore.current;&#xA;}&#xA;&#xA;// For point #2&#xA;const StoreContext = createContext&amp;lt;StatofuStore | null&amp;gt;(null);&#xA;&#xA;export function StoreProvider({ children }: PropsWithChildren): ReactElement {&#xA;  const store = useBindStore();&#xA;  return &amp;lt;StoreContext.Provider value={store}&amp;gt;{children}&amp;lt;/StoreContext.Provider&amp;gt;;&#xA;}&#xA;&#xA;export function useStore(): StatofuStore {&#xA;  const store = useContext(StoreContext);&#xA;&#xA;  if (!store) {&#xA;    throw new Error(&#39;Store not found&#39;);&#xA;  }&#xA;&#xA;  return store;&#xA;}&#xA;&#xA;// For point #3&#xA;export function useSnapshot&amp;lt;TStates extends OneOrMulti&amp;lt;StatofuState&amp;gt;&amp;gt;($states: TStates): TStates {&#xA;  const store = useStore();&#xA;&#xA;  const subscribeStates = useCallback(&#xA;    (listener: () =&amp;gt; void) =&amp;gt; store.subscribe($states, listener),&#xA;    [$states, store]&#xA;  );&#xA;&#xA;  return useSyncExternalStore(subscribeStates, () =&amp;gt; store.snapshot($states));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, use of the demo integration feels as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// SomeModule/TheRootComponent.tsx&#xA;import { StoreProvider } from &#39;../StatofuReact&#39;;&#xA;import { SomeOtherComponent } from &#39;./SomeOtherComponent&#39;;&#xA;&#xA;export function TheRootComponent(): ReactElement {&#xA;  return (&#xA;    &amp;lt;StoreProvider&amp;gt;&#xA;      {/* ... */}&#xA;      &amp;lt;SomeOtherComponent /&amp;gt;&#xA;      {/* ... */}&#xA;    &amp;lt;/StoreProvider&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// SomeModule/SomeOtherComponent.tsx&#xA;import { useSnapshot, useStore } from &#39;../StatofuReact&#39;;&#xA;&#xA;export function SomeOtherComponent(): ReactElement {&#xA;  const store = useStore();&#xA;  const [checkboxState, textareaState] = useSnapshot([$checkboxState, $textareaState]);&#xA;&#xA;  const onCheckboxToggle = useCallback(&#xA;    (checked: boolean): void =&amp;gt; {&#xA;      if (checked) {&#xA;        store.operate($checkboxState, check);&#xA;      } else {&#xA;        store.operate([$checkboxState, $textareaState], uncheckWithTextCleaned);&#xA;      }&#xA;    },&#xA;    [store]&#xA;  );&#xA;&#xA;  const onTextareaChange = useCallback(&#xA;    (text: string): void =&amp;gt; {&#xA;      store.operate($textareaState, setText, text);&#xA;    },&#xA;    [store]&#xA;  );&#xA;&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      {/* ... */}&#xA;      &amp;lt;Checkbox {...checkboxState} onToggle={onCheckboxToggle} /&amp;gt;&#xA;      {/* ... */}&#xA;      &amp;lt;Textarea {...textareaState} onChange={onTextareaChange} /&amp;gt;&#xA;      {/* ... */}&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, Statofu&#39;s official integrations with different frameworks are still being actively developed. For React, it&#39;s &lt;a href=&#34;https://github.com/statofu/statofu-react&#34;&gt;statofu-react&lt;/a&gt;. For Vue, it&#39;s &lt;a href=&#34;https://github.com/statofu/statofu-vue&#34;&gt;statofu-vue&lt;/a&gt;. The naming convention is &lt;code&gt;statofu-{{framework}}&lt;/code&gt;. If you find yourself interested in the integrations development, we may do it together.&lt;/p&gt; &#xA;&lt;h2&gt;APIs&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;createStatofuStore&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Creates a Statofu store.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const store = createStatofuStore();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;store.operate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Operates either one or multi states with a reducer and required payloads of the reducer. The latest states are returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const checkboxState1 = store.operate($checkboxState, check);&#xA;const textareaState1 = store.operate($textareaState, setText, &#39;Lorem ipsum&#39;);&#xA;const [checkboxState2, textareaState2] = store.operate(&#xA;  [$checkboxState, $textareaState],&#xA;  uncheckWithTextCleaned&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;store.snapshot&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Snapshots either one or multi states optionally with a selector and required payloads of the selector.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const checkboxState1 = store.snapshot($checkboxState);&#xA;const textareaState1 = store.snapshot($textareaState);&#xA;const [checkboxState2, textareaState2] = store.snapshot([$checkboxState, $textareaState]);&#xA;&#xA;const isChecked = store.snapshot($checkboxState, selectIsChecked);&#xA;const doesTextIncludeLorem = store.snapshot($textareaState, selectDoesTextInclude, &#39;Lorem&#39;);&#xA;const isAnyHighlighted = store.snapshot([$checkboxState, $textareaState], selectIsAnyHighlighted);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;store.subscribe&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Subscribes to one-state, multi-state or any-state changes with a listener, then returns the callback for unsubscribing the listener from the states changes. The listener gets called once with the new states and the old states when at least one of the states in the subscription goes referentially different(&lt;code&gt;!==&lt;/code&gt;) by a call of &lt;code&gt;store.operate&lt;/code&gt;. For the unchanged parts of the states in the subscription, their new states stay referentially identical(&lt;code&gt;===&lt;/code&gt;) to their old states on the listener called. Notice that, when a listener on any-state changes gets called, the new states and the old states passed into it vary in terms of what states are operated by a call of &lt;code&gt;store.operate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const unsubscribeCheckboxStateChanges = store.subscribe(&#xA;  $checkboxState,&#xA;  (newState: CheckboxState, oldState: CheckboxState): void =&amp;gt; {&#xA;    // ...&#xA;  }&#xA;);&#xA;const unsubscribeCheckboxTextareaStatesChanges = store.subscribe(&#xA;  [$checkboxState, $textareaState],&#xA;  (&#xA;    [newCheckboxState, newTextareaState]: [CheckboxState, TextareaState],&#xA;    [oldCheckboxState, oldTextareaState]: [CheckboxState, TextareaState]&#xA;  ): void =&amp;gt; {&#xA;    // ...&#xA;  }&#xA;);&#xA;const subscribeAnyStateChanges = store.subscribe(&#xA;  (newStates: OneOrMulti&amp;lt;StatofuState&amp;gt;, oldStates: OneOrMulti&amp;lt;StatofuState&amp;gt;): void =&amp;gt; {&#xA;    // ...&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;store.unsubscribe&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Unsubscribes from states changes. If both states and a listener are specified, only the listener goes deactivated on the states changes. If only states are specified, all listeners on the states changes go deactivated. If nothing is specified, all listeners on all kinds of states changes go deactivated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;store.unsubscribe($checkboxState, onCheckboxStateChange);&#xA;store.unsubscribe([$checkboxState, $textareaState], onCheckboxTextareaStatesChange);&#xA;store.unsubscribe(onAnyStateChange);&#xA;&#xA;store.unsubscribe($checkboxState);&#xA;store.unsubscribe([$checkboxState, $textareaState]);&#xA;store.unsubscribe();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;store.clear&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Clears everything in a store, including states and listeners, as if the store is newly created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;store.clear();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About the name&lt;/h2&gt; &#xA;&lt;p&gt;Since the modernization in frontend development starts, doing state management has been a pain. How can just reading and writing some data for some use on the client be so difficult? There is no fun at all.&lt;/p&gt; &#xA;&lt;p&gt;The name Statofu means bringing &lt;strong&gt;state&lt;/strong&gt; management back &lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;fu&lt;/strong&gt;n, which is just the core idea of Statofu. Only when we as devs have fun in doing state management, we can do it well. Also, good state management constitues a necessity for a good client app. As a forseeable result, having fun in doing state management leads to developing a good client app.&lt;/p&gt; &#xA;&lt;p&gt;The name Statofu can be pronounced like a concatenation of the words state and tofu, which is [ˈsteitəʊfu]. By the way, tofu, as food with a history of over 2000 years, tastes smooth and benefits health, which accords with the core idea of Statofu more or less.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you meet any bugs or have any thoughts, it&#39;s always welcomed to &lt;a href=&#34;https://github.com/statofu/statofu/issues&#34;&gt;open an issue&lt;/a&gt;. Or, if that&#39;s not your case, it&#39;s very OK to DM me on &lt;a href=&#34;https://twitter.com/licg9999&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/statofu/statofu/main/assets/ed0458952a4930f1aeebd01da0127de240c85bbf.jpg&#34;&gt;Wechat&lt;/a&gt;. Looking forward to hearing from you for any topics on Statofu 🔥.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT, details are listed in the &lt;a href=&#34;https://raw.githubusercontent.com/statofu/statofu/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bluesky-social/social-app</title>
    <updated>2023-05-18T01:47:19Z</updated>
    <id>tag:github.com,2023-05-18:/bluesky-social/social-app</id>
    <link href="https://github.com/bluesky-social/social-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Bluesky Social application for Web, iOS, and Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bluesky Social App&lt;/h1&gt; &#xA;&lt;p&gt;Welcome friends! This is the codebase for the Bluesky Social app. It serves as a resource to engineers building on the &lt;a href=&#34;https://atproto.com&#34;&gt;AT Protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web: &lt;a href=&#34;https://staging.bsky.app&#34;&gt;staging.bsky.app&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS: &lt;a href=&#34;https://apps.apple.com/us/app/bluesky-social/id6444370199&#34;&gt;App Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=xyz.blueskyweb.app&amp;amp;hl=en_US&amp;amp;gl=US&#34;&gt;Play Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bluesky-social/social-app/main/docs/build.md&#34;&gt;Build instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluesky-social/atproto&#34;&gt;ATProto repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atproto.com&#34;&gt;ATProto docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rules &amp;amp; guidelines&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;ℹ️ While we do accept contributions, we prioritize high quality issues and pull requests. Adhering to the below guidelines will ensure a more timely review.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We may not respond to your issue or PR.&lt;/li&gt; &#xA; &lt;li&gt;We may close an issue or PR without much feedback.&lt;/li&gt; &#xA; &lt;li&gt;We may lock discussions or contributions if our attention is getting DDOSed.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;re not going to provide support for build issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Guidelines:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check for existing issues before filing a new one please.&lt;/li&gt; &#xA; &lt;li&gt;Open an issue and give some time for discussion before submitting a PR.&lt;/li&gt; &#xA; &lt;li&gt;Stay away from PRs like... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Changing &#34;Post&#34; to &#34;Skeet.&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Refactoring the codebase, eg to replace mobx with redux or something.&lt;/li&gt; &#xA;   &lt;li&gt;Adding entirely new features without prior discussion.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Remember, we serve a wide community of users. Our day to day involves us constantly asking &#34;which top priority is our top priority.&#34; If you submit well-written PRs that solve problems concisely, that&#39;s an awesome contribution. Otherwise, as much as we&#39;d love to accept your ideas and contributions, we really don&#39;t have the bandwidth. That&#39;s what forking is for!&lt;/p&gt; &#xA;&lt;h2&gt;Forking guidelines&lt;/h2&gt; &#xA;&lt;p&gt;You have our blessing 🪄✨ to fork this application! However, it&#39;s very important to be clear to users when you&#39;re giving them a fork.&lt;/p&gt; &#xA;&lt;p&gt;Please be sure to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change all branding in the repository and UI to clearly differentiate from Bluesky.&lt;/li&gt; &#xA; &lt;li&gt;Change any support links (feedback, email, terms of service, etc) to your own systems.&lt;/li&gt; &#xA; &lt;li&gt;Replace any analytics or error-collection systems with your own so we don&#39;t get super confused.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security disclosures&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any security issues, please send an email to &lt;a href=&#34;mailto:security@bsky.app&#34;&gt;security@bsky.app&lt;/a&gt;. The email is automatically CCed to the entire team and we&#39;ll respond promptly.&lt;/p&gt; &#xA;&lt;h2&gt;License (MIT)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bluesky-social/social-app/main/LICENSE&#34;&gt;./LICENSE&lt;/a&gt; for the full license.&lt;/p&gt; &#xA;&lt;h2&gt;P.S.&lt;/h2&gt; &#xA;&lt;p&gt;We ❤️ you and all of the ways you support us. Thank you for making Bluesky a great place!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>epicweb-dev/epic-stack</title>
    <updated>2023-05-18T01:47:19Z</updated>
    <id>tag:github.com,2023-05-18:/epicweb-dev/epic-stack</id>
    <link href="https://github.com/epicweb-dev/epic-stack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a Remix Stack with the foundational things setup and configured for you to hit the ground running on your next EPIC idea.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.epicweb.dev/epic-stack&#34;&gt;The Epic Stack 🚀&lt;/a&gt;&lt;/h1&gt; &#xA; &lt;strong align=&#34;center&#34;&gt; Ditch analysis paralysis and start shipping Epic Web apps. &lt;/strong&gt; &#xA; &lt;p&gt; This is an opinionated project starter and reference that allows teams to ship their ideas to production faster and on a more stable foundation based on the experience of &lt;a href=&#34;https://kentcdodds.com&#34;&gt;Kent C. Dodds&lt;/a&gt; and &lt;a href=&#34;https://github.com/epicweb-dev/epic-stack/graphs/contributors&#34;&gt;contributors&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.epicweb.dev/epic-stack&#34;&gt;&lt;img src=&#34;https://github.com/epicweb-dev/epic-stack/assets/1500684/345a3947-54ad-481d-888a-dbc1d1f313c1&#34; alt=&#34;The Epic Stack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/epicweb-dev/epic-stack/actions?query=workflow%3Adeploy&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/epicweb-dev/epic-stack/deploy.yml?branch=main&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/epicweb-dev/epic-stack/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT%20License-blue.svg?style=flat-square&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kentcdodds.com/conduct&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square&#34; alt=&#34;Code of Conduct&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://remix.run/stacks&#34;&gt;Remix Stacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-remix@latest --typescript --install --template epicweb-dev/epic-stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that context, here are a few things you get today:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remix.run/&#34;&gt;Remix&lt;/a&gt; is the Web Framework of choice&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fly.io/&#34;&gt;Fly app deployment&lt;/a&gt; with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multi-region, distributed, production-ready &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite Database&lt;/a&gt; with &lt;a href=&#34;https://fly.io/docs/litefs/&#34;&gt;LiteFS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Healthcheck endpoint for &lt;a href=&#34;https://fly.io/docs/reference/configuration/#services-http_checks&#34;&gt;Fly backups region fallbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; Dashboards of the running app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; with testing and deploy on merge for both production and staging environments&lt;/li&gt; &#xA; &lt;li&gt;Email/Password Authentication with &lt;a href=&#34;https://remix.run/utils/sessions#md-createcookiesessionstorage&#34;&gt;cookie-based sessions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Transaction email with &lt;a href=&#34;https://www.mailgun.com/&#34;&gt;Mailgun&lt;/a&gt; and forgot password/password reset support.&lt;/li&gt; &#xA; &lt;li&gt;Progressively Enhanced and fully type safe forms with &lt;a href=&#34;https://conform.guide/&#34;&gt;Conform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Database ORM with &lt;a href=&#34;https://prisma.io/&#34;&gt;Prisma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Role-based User Permissions.&lt;/li&gt; &#xA; &lt;li&gt;Custom built image hosting&lt;/li&gt; &#xA; &lt;li&gt;Caching via &lt;a href=&#34;https://npm.im/cachified&#34;&gt;cachified&lt;/a&gt;: Both in-memory and SQLite-based (with &lt;a href=&#34;https://github.com/WiseLibs/better-sqlite3&#34;&gt;better-sqlite3&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Styling with &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An excellent, customizable component library with &lt;a href=&#34;https://www.radix-ui.com/&#34;&gt;Radix UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end testing with &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Local third party request mocking with &lt;a href=&#34;https://mswjs.io/&#34;&gt;MSW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unit testing with &lt;a href=&#34;https://vitest.dev/&#34;&gt;Vitest&lt;/a&gt; and &lt;a href=&#34;https://testing-library.com/&#34;&gt;Testing Library&lt;/a&gt; with pre-configured Test Database&lt;/li&gt; &#xA; &lt;li&gt;Code formatting with &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linting with &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Static Types with &lt;a href=&#34;https://typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Runtime schema validation with &lt;a href=&#34;https://zod.dev/&#34;&gt;zod&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And that’s what we have today, here are some things that will likely find their way into the Epic Stack in the future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Powerful, yet simple sitemap control&lt;/li&gt; &#xA; &lt;li&gt;Error monitoring with &lt;a href=&#34;https://sentry.io/welcome/&#34;&gt;Sentry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ecommerce support with &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ethical site analytics with &lt;a href=&#34;https://usefathom.com/&#34;&gt;fathom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Internationalization&lt;/li&gt; &#xA; &lt;li&gt;Image optimization route and component&lt;/li&gt; &#xA; &lt;li&gt;Feature flags&lt;/li&gt; &#xA; &lt;li&gt;Light/Dark/System mode (without a flash of incorrect theme)&lt;/li&gt; &#xA; &lt;li&gt;Documentation on production data seeding process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not a fan of bits of the stack? Fork it, change it, and use &lt;code&gt;npx create-remix --template your/repo&lt;/code&gt;! Make it your own.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Initial setup:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start dev server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This starts your app in development mode, rebuilding assets on file changes.&lt;/p&gt; &#xA;&lt;p&gt;The database seed script creates a new user with some data you can use to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Username: &lt;code&gt;kody&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;kodylovesyou&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Relevant code&lt;/h3&gt; &#xA;&lt;p&gt;This is a pretty simple note-taking app, but it&#39;s a good example of how you can build a full stack app with Prisma and Remix. The main functionality is creating users, logging in and out, and creating and deleting notes.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;The Epic Stack comes with a GitHub Action that handles automatically deploying your app to production and staging environments.&lt;/p&gt; &#xA;&lt;p&gt;Prior to your first deployment, you&#39;ll need to do a few things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fly.io/docs/getting-started/installing-flyctl/&#34;&gt;Install Fly&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sign up and log in to Fly&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly auth signup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you have more than one Fly account, ensure that you are signed into the same account in the Fly CLI as you are in the browser. In your terminal, run &lt;code&gt;fly auth whoami&lt;/code&gt; and ensure the email matches the Fly account signed into the browser.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The following instructions will be improved soon. Eventually most of these steps will be replaced with a simple &lt;code&gt;fly launch&lt;/code&gt; command which will prompt you for what you need. For now the steps below are manual.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: This template is currently only configured to work for Fly v1 apps. If you just created your account you are probably running on Fly v2 which is ultimately preferable, but will require a few changes. This is temporary and will be fixed soon. See &lt;a href=&#34;https://github.com/epicweb-dev/epic-stack/discussions/22&#34;&gt;#22&lt;/a&gt; for more info.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create two apps on Fly, one for staging and one for production:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly apps create epic-stack-template&#xA;fly apps create epic-stack-template-staging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure this name matches the &lt;code&gt;app&lt;/code&gt; set in your &lt;code&gt;fly.toml&lt;/code&gt; file. Otherwise, you will not be able to deploy.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Initialize Git.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new &lt;a href=&#34;https://repo.new&#34;&gt;GitHub Repository&lt;/a&gt;, and then add it as the remote for your project. &lt;strong&gt;Do not push your app yet!&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote add origin &amp;lt;ORIGIN_URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;FLY_API_TOKEN&lt;/code&gt; to your GitHub repo. To do this, go to your user settings on Fly and create a new &lt;a href=&#34;https://web.fly.io/user/personal_access_tokens/new&#34;&gt;token&lt;/a&gt;, then add it to &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;your repo secrets&lt;/a&gt; with the name &lt;code&gt;FLY_API_TOKEN&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;SESSION_SECRET&lt;/code&gt;, &lt;code&gt;ENCRYPTION_SECRET&lt;/code&gt;, and &lt;code&gt;INTERNAL_COMMAND_TOKEN&lt;/code&gt; to your fly app secrets, to do this you can run the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly secrets set SESSION_SECRET=$(openssl rand -hex 32) ENCRYPTION_SECRET=$(openssl rand -hex 32) INTERNAL_COMMAND_TOKEN=$(openssl rand -hex 32) --app epic-stack-template&#xA;fly secrets set SESSION_SECRET=$(openssl rand -hex 32) ENCRYPTION_SECRET=$(openssl rand -hex 32) INTERNAL_COMMAND_TOKEN=$(openssl rand -hex 32) --app epic-stack-template-staging&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t have openssl installed, you can also use &lt;a href=&#34;https://1password.com/password-generator&#34;&gt;1Password&lt;/a&gt; to generate a random secret, just replace &lt;code&gt;$(openssl rand -hex 32)&lt;/code&gt; with the generated secret.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create an account on Mailgun.&lt;/strong&gt; (Can be deferred to later)&lt;/p&gt; &lt;p&gt;NOTE: this is an optional step. During development the emails will be logged to the terminal and in production if you haven&#39;t set the proper environment variables yet you will get a warning until you set the environment variables.&lt;/p&gt; &lt;p&gt;Create a Sending API Key (find it at &lt;code&gt;https://app.mailgun.com/app/sending/domains/YOUR_SENDING_DOMAIN/sending-keys&lt;/code&gt; replacing &lt;code&gt;YOUR_SENDING_DOMAIN&lt;/code&gt; with your sending domain) and set &lt;code&gt;MAILGUN_DOMAIN&lt;/code&gt; and &lt;code&gt;MAILGUN_SENDING_KEY&lt;/code&gt; environment variables in both prod and staging:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly secrets set MAILGUN_DOMAIN=&#34;mg.example.com&#34; MAILGUN_SENDING_KEY=&#34;some-api-token-with-dashes&#34; --app epic-stack-template&#xA;fly secrets set MAILGUN_DOMAIN=&#34;mg.example.com&#34; MAILGUN_SENDING_KEY=&#34;some-api-token-with-dashes&#34; --app epic-stack-template-staging&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a persistent volume for the sqlite database for both your staging and production environments. Run the following (feel free to change the GB size based on your needs):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly volumes create data --size 1 --app epic-stack-template&#xA;fly volumes create data --size 1 --app epic-stack-template-staging&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that everything is set up you can commit and push your changes to your repo. Every commit to your &lt;code&gt;main&lt;/code&gt; branch will trigger a deployment to your production environment, and every commit to your &lt;code&gt;dev&lt;/code&gt; branch will trigger a deployment to your staging environment.&lt;/p&gt; &#xA;&lt;h3&gt;Connecting to your database&lt;/h3&gt; &#xA;&lt;p&gt;The sqlite database lives at &lt;code&gt;/data/sqlite.db&lt;/code&gt; in the deployed application. You can connect to the live database by running &lt;code&gt;fly ssh console -C database-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub Actions&lt;/h2&gt; &#xA;&lt;p&gt;We use GitHub Actions for continuous integration and deployment. Anything that gets into the &lt;code&gt;main&lt;/code&gt; branch will be deployed to production after running tests/build/etc. Anything in the &lt;code&gt;dev&lt;/code&gt; branch will be deployed to staging.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;h3&gt;Playwright&lt;/h3&gt; &#xA;&lt;p&gt;We use Playwright for our End-to-End tests in this project. You&#39;ll find those in the &lt;code&gt;tests&lt;/code&gt; directory. As you make changes, add to an existing file or create a new file in the &lt;code&gt;tests&lt;/code&gt; directory to test your changes.&lt;/p&gt; &#xA;&lt;p&gt;To run these tests in development, run &lt;code&gt;npm run test:e2e:dev&lt;/code&gt; which will start the dev server for the app and run Playwright on it.&lt;/p&gt; &#xA;&lt;p&gt;We have a fixture for testing authenticated features without having to go through the login flow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;test(&#39;my test&#39;, async ({ page, login }) =&amp;gt; {&#xA;&#x9;const user = await login()&#xA;&#x9;// you are now logged in&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also auto-delete the user at the end of your test. That way, we can keep your local db clean and keep your tests isolated from one another.&lt;/p&gt; &#xA;&lt;h3&gt;Vitest&lt;/h3&gt; &#xA;&lt;p&gt;For lower level tests of utilities and individual components, we use &lt;code&gt;vitest&lt;/code&gt;. We have DOM-specific assertion helpers via &lt;a href=&#34;https://testing-library.com/jest-dom&#34;&gt;&lt;code&gt;@testing-library/jest-dom&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Type Checking&lt;/h3&gt; &#xA;&lt;p&gt;This project uses TypeScript. It&#39;s recommended to get TypeScript set up for your editor to get a really great in-editor experience with type checking and auto-complete. To run type checking across the whole project, run &lt;code&gt;npm run typecheck&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;This project uses ESLint for linting. That is configured in &lt;code&gt;.eslintrc.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt; for auto-formatting in this project. It&#39;s recommended to install an editor plugin (like the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34;&gt;VSCode Prettier plugin&lt;/a&gt;) to get auto-formatting on save. There&#39;s also a &lt;code&gt;npm run format&lt;/code&gt; script you can run to format all files in the project.&lt;/p&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt;</summary>
  </entry>
</feed>