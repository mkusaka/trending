<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-08T01:38:13Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nerding-io/n8n-nodes-mcp</title>
    <updated>2025-07-08T01:38:13Z</updated>
    <id>tag:github.com,2025-07-08:/nerding-io/n8n-nodes-mcp</id>
    <link href="https://github.com/nerding-io/n8n-nodes-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;n8n custom node for MCP&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://mseep.ai/app/bd76f121-1c8f-4f5d-9c65-1eac5d81b6af&#34;&gt;&lt;img src=&#34;https://mseep.ai/badge.svg?sanitize=true&#34; alt=&#34;Verified on MseeP&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;n8n-nodes-mcp-client&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; The Server-Sent Events (SSE) transport is deprecated and replaced by the new HTTP Streamable transport. SSE remains available for legacy compatibility, but HTTP Streamable is now the recommended method for all new implementations.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is an n8n community node that lets you interact with Model Context Protocol (MCP) servers in your n8n workflows.&lt;/p&gt; &#xA;&lt;p&gt;MCP is a protocol that enables AI models to interact with external tools and data sources in a standardized way. This node allows you to connect to MCP servers, access resources, execute tools, and use prompts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://n8n.io/&#34;&gt;n8n&lt;/a&gt; is a &lt;a href=&#34;https://docs.n8n.io/reference/license/&#34;&gt;fair-code licensed&lt;/a&gt; workflow automation platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#installation&#34;&gt;Installation&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#credentials&#34;&gt;Credentials&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#operations&#34;&gt;Operations&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#using-as-a-tool&#34;&gt;Using as a Tool&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#compatibility&#34;&gt;Compatibility&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Official Quickstart Video:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/1t8DQL-jUJk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/mcp-n8n.png&#34; alt=&#34;MCP Client Node Quickstart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Community Videos&lt;/h3&gt; &#xA;&lt;p&gt;Shoutout to all the creators of the following n8n community videos that are great resources for learning how to use this node:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/sb5hCcFYPIE&#34;&gt;Is MCP the Future of N8N AI Agents? (Fully Tested!)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/tTDRgkD-120&#34;&gt;Connect N8N AI Agents to EVERYTHING using MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SVZe2rdhYmA&#34;&gt;Build an AI Agent That Can Use Any Tool (MCP in n8n Tutorial)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/RxXS_FpJyGM&#34;&gt;The NEW N8N MCP is an Absolute Game-Changer (Brave Search MCP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mbQsnrxHPwE&#34;&gt;MCP &amp;amp; n8n Automation: The Ultimate Guide for MCP AI Agents (2025)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zgH85dJcs5c&#34;&gt;REVOLUÇÃO na criação de AGENTES no N8N com o MCP Server!!!&lt;/a&gt; (Portuguese)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have a great video that you&#39;d like to share, please let me know and I&#39;ll add it to the list!&lt;/p&gt; &#xA;&lt;h4&gt;Interested a deeper dive into MCP?&lt;/h4&gt; &#xA;&lt;p&gt;Check out my YouTube Series &lt;a href=&#34;https://www.youtube.com/playlist?list=PLjOCx_PNfJ4S_oOSqrMi6t9_x1GllvQZO&#34;&gt;MCP Explained&lt;/a&gt; for more information about the Model Context Protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Security Assessment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mseep.ai/app/nerding-io-n8n-nodes-mcp&#34;&gt;&lt;img src=&#34;https://mseep.net/pr/nerding-io-n8n-nodes-mcp-badge.png&#34; alt=&#34;MseeP.ai Security Assessment Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.n8n.io/integrations/community-nodes/installation/&#34;&gt;installation guide&lt;/a&gt; in the n8n community nodes documentation.&lt;/p&gt; &#xA;&lt;p&gt;Also pay attention to Environment Variables for &lt;a href=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/#using-as-a-tool&#34;&gt;using tools in AI Agents&lt;/a&gt;. It&#39;s mandatory to set the &lt;code&gt;N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE&lt;/code&gt; environment variable to &lt;code&gt;true&lt;/code&gt; if you want to use the MCP Client node as a tool in AI Agents.&lt;/p&gt; &#xA;&lt;h2&gt;Credentials&lt;/h2&gt; &#xA;&lt;p&gt;The MCP Client node supports three types of credentials to connect to an MCP server:&lt;/p&gt; &#xA;&lt;h3&gt;Command-line Based Transport (STDIO)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/credentials.png&#34; alt=&#34;MCP Client STDIO Credentials&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt;: The command to start the MCP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arguments&lt;/strong&gt;: Optional arguments to pass to the server command&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment Variables&lt;/strong&gt;: Variables to pass to the server in NAME=VALUE format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;HTTP Streamable Transport (Recommended)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP Streamable URL&lt;/strong&gt;: The HTTP endpoint that supports streaming responses (e.g., &lt;a href=&#34;http://localhost:3001/stream&#34;&gt;http://localhost:3001/stream&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Headers&lt;/strong&gt;: Optional headers to send with requests (format: name:value, one per line)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;HTTP Streamable is the recommended and modern method for all new integrations, providing better efficiency and flexibility compared to SSE.&lt;/p&gt; &#xA;&lt;h4&gt;Example: Using a Local MCP Server with HTTP Streamable&lt;/h4&gt; &#xA;&lt;p&gt;This example shows how to connect to a locally running MCP server using HTTP Streamable:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start a local MCP server that supports HTTP Streamable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/server-example-streamable&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure MCP Client credentials:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the node settings, select &lt;strong&gt;Connection Type&lt;/strong&gt;: &lt;code&gt;HTTP Streamable&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create new credentials of type &lt;strong&gt;MCP Client (HTTP Streamable) API&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;strong&gt;HTTP Streamable URL&lt;/strong&gt;: &lt;code&gt;http://localhost:3001/stream&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add any required headers for authentication&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a workflow using the MCP Client node:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add an MCP Client node&lt;/li&gt; &#xA;   &lt;li&gt;Set the Connection Type to &lt;code&gt;HTTP Streamable&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select your HTTP Streamable credentials&lt;/li&gt; &#xA;   &lt;li&gt;Execute the workflow to see the results&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Server-Sent Events (SSE) Transport (Deprecated, still available for legacy use)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;SSE URL&lt;/strong&gt;: The URL of the SSE endpoint (default: &lt;a href=&#34;http://localhost:3001/sse&#34;&gt;http://localhost:3001/sse&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Messages Post Endpoint&lt;/strong&gt;: Optional custom endpoint for posting messages if different from the SSE URL&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Headers&lt;/strong&gt;: Optional headers to send with requests (format: name:value, one per line)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Deprecated:&lt;/strong&gt; SSE is deprecated and will not receive further updates, but remains available for legacy compatibility. For new projects, use HTTP Streamable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Example: Using a Local MCP Server with SSE (legacy)&lt;/h4&gt; &#xA;&lt;p&gt;This example shows how to connect to a locally running MCP server using Server-Sent Events (SSE):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start a local MCP server that supports SSE:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/server-example-sse&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure MCP Client credentials:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the node settings, select &lt;strong&gt;Connection Type&lt;/strong&gt;: &lt;code&gt;Server-Sent Events (SSE)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create new credentials of type &lt;strong&gt;MCP Client (SSE) API&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;strong&gt;SSE URL&lt;/strong&gt;: &lt;code&gt;http://localhost:3001/sse&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add any required headers for authentication&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a workflow using the MCP Client node:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add an MCP Client node&lt;/li&gt; &#xA;   &lt;li&gt;Set the Connection Type to &lt;code&gt;Server-Sent Events (SSE)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select your SSE credentials&lt;/li&gt; &#xA;   &lt;li&gt;Execute the workflow to see the results&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For new projects, HTTP Streamable is strongly recommended.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;The MCP Client node supports passing environment variables to MCP servers using the command-line based transport in two ways:&lt;/p&gt; &#xA;&lt;h3&gt;1. Using the Credentials UI&lt;/h3&gt; &#xA;&lt;p&gt;You can add environment variables directly in the credentials configuration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/credentials-envs.png&#34; alt=&#34;Environment Variables in Credentials&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method is useful for individual setups and testing. The values are stored securely as credentials in n8n.&lt;/p&gt; &#xA;&lt;h3&gt;2. Using Docker Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;For Docker deployments, you can pass environment variables directly to your MCP servers by prefixing them with &lt;code&gt;MCP_&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;&#xA;&#xA;services:&#xA;  n8n:&#xA;    image: n8nio/n8n&#xA;    environment:&#xA;      - MCP_BRAVE_API_KEY=your-api-key-here&#xA;      - MCP_OPENAI_API_KEY=your-openai-key-here&#xA;      - MCP_CUSTOM_SETTING=some-value&#xA;    # other configuration...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These environment variables will be automatically passed to your MCP servers when they are executed.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Using Brave Search MCP Server&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to set up and use the Brave Search MCP server:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the Brave Search MCP server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g @modelcontextprotocol/server-brave-search&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure MCP Client credentials:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt;: &lt;code&gt;npx&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Arguments&lt;/strong&gt;: &lt;code&gt;-y @modelcontextprotocol/server-brave-search&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Environment Variables&lt;/strong&gt;: &lt;code&gt;BRAVE_API_KEY=your-api-key&lt;/code&gt; Add a variables (space comma or newline separated)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a workflow that uses the MCP Client node:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add an MCP Client node&lt;/li&gt; &#xA;   &lt;li&gt;Select the &#34;List Tools&#34; operation to see available search tools&lt;/li&gt; &#xA;   &lt;li&gt;Add another MCP Client node&lt;/li&gt; &#xA;   &lt;li&gt;Select the &#34;Execute Tool&#34; operation&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;brave_search&#34; tool&lt;/li&gt; &#xA;   &lt;li&gt;Set Parameters to: &lt;code&gt;{&#34;query&#34;: &#34;latest AI news&#34;}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/brave-search-example.png&#34; alt=&#34;Brave Search Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The node will execute the search and return the results in the output.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Multi-Server Setup with AI Agent&lt;/h3&gt; &#xA;&lt;p&gt;This example demonstrates how to set up multiple MCP servers in a production environment and use them with an AI agent:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure your docker-compose.yml file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;&#xA;&#xA;services:&#xA;  n8n:&#xA;    image: n8nio/n8n&#xA;    environment:&#xA;      # MCP server environment variables&#xA;      - MCP_BRAVE_API_KEY=your-brave-api-key&#xA;      - MCP_OPENAI_API_KEY=your-openai-key&#xA;      - MCP_SERPER_API_KEY=your-serper-key&#xA;      - MCP_WEATHER_API_KEY=your-weather-api-key&#xA;&#xA;      # Enable community nodes as tools&#xA;      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true&#xA;    ports:&#xA;      - &#34;5678:5678&#34;&#xA;    volumes:&#xA;      - ~/.n8n:/home/node/.n8n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Create multiple MCP Client credentials in n8n:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Brave Search Credentials&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command: &lt;code&gt;npx&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arguments: &lt;code&gt;-y @modelcontextprotocol/server-brave-search&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;OpenAI Tools Credentials&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command: &lt;code&gt;npx&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arguments: &lt;code&gt;-y @modelcontextprotocol/server-openai&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Web Search Credentials&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command: &lt;code&gt;npx&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arguments: &lt;code&gt;-y @modelcontextprotocol/server-serper&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Weather API Credentials&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command: &lt;code&gt;npx&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arguments: &lt;code&gt;-y @modelcontextprotocol/server-weather&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an AI Agent workflow:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add an AI Agent node&lt;/li&gt; &#xA;   &lt;li&gt;Enable MCP Client as a tool&lt;/li&gt; &#xA;   &lt;li&gt;Configure different MCP Client nodes with different credentials&lt;/li&gt; &#xA;   &lt;li&gt;Create a prompt that uses multiple data sources&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/multi-server-example.png&#34; alt=&#34;Multi-Server Setup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example AI Agent prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;I need you to help me plan a trip. First, search for popular destinations in {destination_country}.&#xA;Then, check the current weather in the top 3 cities.&#xA;Finally, find some recent news about travel restrictions for these places.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this setup, the AI agent can use multiple MCP tools across different servers, all using environment variables configured in your Docker deployment.&lt;/p&gt; &#xA;&lt;h2&gt;Operations&lt;/h2&gt; &#xA;&lt;p&gt;The MCP Client node supports the following operations:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/operations.png&#34; alt=&#34;MCP Client Operations&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execute Tool&lt;/strong&gt; - Execute a specific tool with parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Get Prompt&lt;/strong&gt; - Get a specific prompt template&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;List Prompts&lt;/strong&gt; - Get a list of available prompts&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;List Resources&lt;/strong&gt; - Get a list of available resources from the MCP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;List Tools&lt;/strong&gt; - Get a list of available tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read Resource&lt;/strong&gt; - Read a specific resource by URI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example: List Tools Operation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/list-tools.png&#34; alt=&#34;List Tools Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The List Tools operation returns all available tools from the MCP server, including their names, descriptions, and parameter schemas.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Execute Tool Operation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/execute-tool.png&#34; alt=&#34;Execute Tool Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Execute Tool operation allows you to execute a specific tool with parameters. Make sure to select the tool you want to execute from the dropdown menu.&lt;/p&gt; &#xA;&lt;h2&gt;Using as a Tool&lt;/h2&gt; &#xA;&lt;p&gt;This node can be used as a tool in n8n AI Agents. To enable community nodes as tools, you need to set the &lt;code&gt;N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE&lt;/code&gt; environment variable to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the Environment Variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re using a bash/zsh shell:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true&#xA;n8n start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re using Docker:&lt;/strong&gt; Add to your docker-compose.yml file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re using the desktop app:&lt;/strong&gt; Create a &lt;code&gt;.env&lt;/code&gt; file in the n8n directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you want to set it permanently on Mac/Linux:&lt;/strong&gt; Add to your &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example of an AI Agent workflow results:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nerding-io/n8n-nodes-mcp/main/assets/execute-tool-result.png&#34; alt=&#34;AI Agent Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After setting this environment variable and restarting n8n, your MCP Client node will be available as a tool in AI Agent nodes.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires n8n version 1.0.0 or later&lt;/li&gt; &#xA; &lt;li&gt;Compatible with MCP Protocol version 1.0.0 or later&lt;/li&gt; &#xA; &lt;li&gt;Supports both STDIO and SSE transports for connecting to MCP servers&lt;/li&gt; &#xA; &lt;li&gt;SSE transport requires a server that implements the MCP Server-Sent Events specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.n8n.io/integrations/community-nodes/&#34;&gt;n8n community nodes documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelcontextprotocol.io/docs/&#34;&gt;Model Context Protocol Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/modelcontextprotocol/typescript-sdk&#34;&gt;MCP TypeScript SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelcontextprotocol.io/docs/concepts/transports&#34;&gt;MCP Transports Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/modelcontextprotocol/typescript-sdk/raw/main/src/client/sse.ts&#34;&gt;Using SSE in MCP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>samanhappy/mcphub</title>
    <updated>2025-07-08T01:38:13Z</updated>
    <id>tag:github.com,2025-07-08:/samanhappy/mcphub</id>
    <link href="https://github.com/samanhappy/mcphub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A unified hub for centralized management and dynamic organization of multiple MCP servers into streamable HTTP (SSE) endpoints, with support for flexible routing strategies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCPHub: The Unified Hub for Model Context Protocol (MCP) Servers&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/samanhappy/mcphub/main/README.zh.md&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MCPHub makes it easy to manage and scale multiple MCP (Model Context Protocol) servers by organizing them into flexible Streamable HTTP (SSE) endpoints—supporting access to all servers, individual servers, or logical server groups.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samanhappy/mcphub/main/assets/dashboard.png&#34; alt=&#34;Dashboard Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Broadened MCP Server Support&lt;/strong&gt;: Seamlessly integrate any MCP server with minimal configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Centralized Dashboard&lt;/strong&gt;: Monitor real-time status and performance metrics from one sleek web UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Protocol Handling&lt;/strong&gt;: Full compatibility with both stdio and SSE MCP protocols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hot-Swappable Configuration&lt;/strong&gt;: Add, remove, or update MCP servers on the fly — no downtime required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Group-Based Access Control&lt;/strong&gt;: Organize servers into customizable groups for streamlined permissions management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure Authentication&lt;/strong&gt;: Built-in user management with role-based access powered by JWT and bcrypt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker-Ready&lt;/strong&gt;: Deploy instantly with our containerized setup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔧 Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;mcp_settings.json&lt;/code&gt; file to customize your server settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;amap&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;-y&#34;, &#34;@amap/amap-maps-mcp-server&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;AMAP_MAPS_API_KEY&#34;: &#34;your-api-key&#34;&#xA;      }&#xA;    },&#xA;    &#34;playwright&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;@playwright/mcp@latest&#34;, &#34;--headless&#34;]&#xA;    },&#xA;    &#34;fetch&#34;: {&#xA;      &#34;command&#34;: &#34;uvx&#34;,&#xA;      &#34;args&#34;: [&#34;mcp-server-fetch&#34;]&#xA;    },&#xA;    &#34;slack&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;-y&#34;, &#34;@modelcontextprotocol/server-slack&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;SLACK_BOT_TOKEN&#34;: &#34;your-bot-token&#34;,&#xA;        &#34;SLACK_TEAM_ID&#34;: &#34;your-team-id&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Deployment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: Mount your custom config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 3000:3000 -v ./mcp_settings.json:/app/mcp_settings.json -v ./data:/app/data samanhappy/mcphub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or run with default settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 3000:3000 samanhappy/mcphub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Access the Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;Open &lt;code&gt;http://localhost:3000&lt;/code&gt; and log in with your credentials.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Default credentials are &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;admin123&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dashboard Overview&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Live status of all MCP servers&lt;/li&gt; &#xA; &lt;li&gt;Enable/disable or reconfigure servers&lt;/li&gt; &#xA; &lt;li&gt;Group management for organizing servers&lt;/li&gt; &#xA; &lt;li&gt;User administration for access control&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Streamable HTTP Endpoint&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As of now, support for streaming HTTP endpoints varies across different AI clients. If you encounter issues, you can use the SSE endpoint or wait for future updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Connect AI clients (e.g., Claude Desktop, Cursor, DeepChat, etc.) via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/mcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This endpoint provides a unified streamable HTTP interface for all your MCP servers. It allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send requests to any configured MCP server&lt;/li&gt; &#xA; &lt;li&gt;Receive responses in real-time&lt;/li&gt; &#xA; &lt;li&gt;Easily integrate with various AI clients and tools&lt;/li&gt; &#xA; &lt;li&gt;Use the same endpoint for all servers, simplifying your integration process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Smart Routing (Experimental)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Smart Routing is MCPHub&#39;s intelligent tool discovery system that uses vector semantic search to automatically find the most relevant tools for any given task.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/mcp/$smart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;How it Works:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tool Indexing&lt;/strong&gt;: All MCP tools are automatically converted to vector embeddings and stored in PostgreSQL with pgvector&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Semantic Search&lt;/strong&gt;: User queries are converted to vectors and matched against tool embeddings using cosine similarity&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intelligent Filtering&lt;/strong&gt;: Dynamic thresholds ensure relevant results without noise&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Precise Execution&lt;/strong&gt;: Found tools can be directly executed with proper parameter validation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setup Requirements:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samanhappy/mcphub/main/assets/smart-routing.png&#34; alt=&#34;Smart Routing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To enable Smart Routing, you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PostgreSQL with pgvector extension&lt;/li&gt; &#xA; &lt;li&gt;OpenAI API key (or compatible embedding service)&lt;/li&gt; &#xA; &lt;li&gt;Enable Smart Routing in MCPHub settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Group-Specific Endpoints (Recommended)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samanhappy/mcphub/main/assets/group.png&#34; alt=&#34;Group Management&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For targeted access to specific server groups, use the group-based HTTP endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/mcp/{group}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;{group}&lt;/code&gt; is the ID or name of the group you created in the dashboard. This allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect to a specific subset of MCP servers organized by use case&lt;/li&gt; &#xA; &lt;li&gt;Isolate different AI tools to access only relevant servers&lt;/li&gt; &#xA; &lt;li&gt;Implement more granular access control for different environments or teams&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Server-Specific Endpoints&lt;/strong&gt;: For direct access to individual servers, use the server-specific HTTP endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/mcp/{server}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;{server}&lt;/code&gt; is the name of the server you want to connect to. This allows you to access a specific MCP server directly.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the server name and group name are the same, the group name will take precedence.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;SSE Endpoint (Deprecated in Future)&lt;/h3&gt; &#xA;&lt;p&gt;Connect AI clients (e.g., Claude Desktop, Cursor, DeepChat, etc.) via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/sse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For smart routing, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/sse/$smart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For targeted access to specific server groups, use the group-based SSE endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/sse/{group}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For direct access to individual servers, use the server-specific SSE endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3000/sse/{server}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🧑‍💻 Local Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/samanhappy/mcphub.git&#xA;cd mcphub&#xA;pnpm install&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This starts both frontend and backend in development mode with hot-reloading.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For windows users, you may need to start the backend server and frontend separately: &lt;code&gt;pnpm backend:dev&lt;/code&gt;, &lt;code&gt;pnpm frontend:dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🛠️ Common Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Using Nginx as a Reverse Proxy&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Nginx to reverse proxy MCPHub, please make sure to add the following configuration in your Nginx setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;proxy_buffering off&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔍 Tech Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: Node.js, Express, TypeScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: React, Vite, Tailwind CSS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auth&lt;/strong&gt;: JWT &amp;amp; bcrypt&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Protocol&lt;/strong&gt;: Model Context Protocol SDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👥 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions of any kind are welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New features &amp;amp; optimizations&lt;/li&gt; &#xA; &lt;li&gt;Documentation improvements&lt;/li&gt; &#xA; &lt;li&gt;Bug reports &amp;amp; fixes&lt;/li&gt; &#xA; &lt;li&gt;Translations &amp;amp; suggestions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Welcome to join our &lt;a href=&#34;https://discord.gg/qMKNsn5Q&#34;&gt;Discord community&lt;/a&gt; for discussions and support.&lt;/p&gt; &#xA;&lt;h2&gt;❤️ Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;If you like this project, maybe you can consider:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/samanhappy&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#samanhappy/mcphub&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=samanhappy/mcphub&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/samanhappy/mcphub/main/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>