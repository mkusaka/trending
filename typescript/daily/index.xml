<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-27T01:35:20Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Yonom/assistant-ui</title>
    <updated>2024-09-27T01:35:20Z</updated>
    <id>tag:github.com,2024-09-27:/Yonom/assistant-ui</id>
    <link href="https://github.com/Yonom/assistant-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Components for AI Chat 💬 🚀&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://www.assistant-ui.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Yonom/assistant-ui/main/.github/assets/header.svg?sanitize=true&#34; alt=&#34;assistant-ui Header&#34; width=&#34;100%&#34; style=&#34;width: 1000px&#34;&gt; &lt;/a&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://assistant-ui.com&#34;&gt;Product&lt;/a&gt; · &lt;a href=&#34;https://assistant-ui.com/docs&#34;&gt;Documentation&lt;/a&gt; · &lt;a href=&#34;https://assistant-ui.com/examples&#34;&gt;Examples&lt;/a&gt; · &lt;a href=&#34;https://discord.gg/S9dwgCNEFs&#34;&gt;Discord Community&lt;/a&gt; · &lt;a href=&#34;https://cal.com/simon-farshid/assistant-ui&#34;&gt;Contact Sales&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;assistant-ui&lt;/strong&gt; is a set of React components for AI chat, with integrations Langchain, Vercel AI SDK, TailwindCSS, shadcn-ui, react-markdown, react-syntax-highlighter, React Hook Form and more!&lt;/p&gt; &#xA;&lt;p&gt;Wide model provider support (OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, Replicate, Ollama) out of the box and the ability to integrate custom APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/k6Dc8URmLjk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yonom/assistant-ui/main/.github/assets/assistant-ui-starter.gif&#34; alt=&#34;assistant-ui starter template&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Step 1: Create a new project with &lt;code&gt;assistant-ui&lt;/code&gt; pre-configured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx assistant-ui@latest create my-app&#xA;cd my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2: Update the &lt;code&gt;.env&lt;/code&gt; file with your OpenAI API key.&lt;/p&gt; &#xA;&lt;p&gt;Step 3: Run the app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Hacker0x01/react-datepicker</title>
    <updated>2024-09-27T01:35:20Z</updated>
    <id>tag:github.com,2024-09-27:/Hacker0x01/react-datepicker</id>
    <link href="https://github.com/Hacker0x01/react-datepicker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and reusable datepicker component for React&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Date Picker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/react-datepicker&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/react-datepicker.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hacker0x01/react-datepicker/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/Hacker0x01/react-datepicker/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test suite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Hacker0x01/react-datepicker&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Hacker0x01/react-datepicker/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/react-datepicker&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/react-datepicker.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple and reusable Datepicker component for React (&lt;a href=&#34;https://reactdatepicker.com/&#34;&gt;Demo&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1412392/5339491/c40de124-7ee1-11e4-9f07-9276e2545f27.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The package can be installed via &lt;a href=&#34;https://github.com/npm/cli&#34;&gt;npm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install react-datepicker --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;yarn&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add react-datepicker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You’ll need to install React and PropTypes separately since those dependencies aren’t included in the package. If you need to use a locale other than the default en-US, you&#39;ll also need to import that into your project from date-fns (see Localization section below). Below is a simple example of how to use the Datepicker in a React view. You will also need to require the CSS file from this package (or provide your own). The example below shows how to include the CSS from this package if your build system supports requiring CSS files (Webpack is one that does).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { useState } from &#34;react&#34;;&#xA;import DatePicker from &#34;react-datepicker&#34;;&#xA;&#xA;import &#34;react-datepicker/dist/react-datepicker.css&#34;;&#xA;&#xA;// CSS Modules, react-datepicker-cssmodules.css&#xA;// import &#39;react-datepicker/dist/react-datepicker-cssmodules.css&#39;;&#xA;&#xA;const Example = () =&amp;gt; {&#xA;  const [startDate, setStartDate] = useState(new Date());&#xA;  return (&#xA;    &amp;lt;DatePicker selected={startDate} onChange={(date) =&amp;gt; setStartDate(date)} /&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The most basic use of the DatePicker can be described with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;DatePicker selected={startdate} onChange={(date) =&amp;gt; setStartDate(date)} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;onSelect&lt;/code&gt; event handler which fires each time some calendar date has been selected&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;DatePicker&#xA;  selected={date}&#xA;  onSelect={handleDateSelect} //when day is clicked&#xA;  onChange={handleDateChange} //only when value has changed&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;onClickOutside&lt;/code&gt; handler may be useful to close datepicker in &lt;code&gt;inline&lt;/code&gt; mode&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Hacker0x01/react-datepicker/raw/main/docs/datepicker.md&#34;&gt;here&lt;/a&gt; for a full list of props that may be passed to the component. Examples are given on the &lt;a href=&#34;https://hacker0x01.github.io/react-datepicker&#34;&gt;main website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Time picker&lt;/h3&gt; &#xA;&lt;p&gt;You can also include a time picker by adding the showTimeSelect prop&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;DatePicker&#xA;  selected={date}&#xA;  onChange={handleDateChange}&#xA;  showTimeSelect&#xA;  dateFormat=&#34;Pp&#34;&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Times will be displayed at 30-minute intervals by default (default configurable via timeIntervals prop)&lt;/p&gt; &#xA;&lt;p&gt;More examples of how to use the time picker are given on the &lt;a href=&#34;https://hacker0x01.github.io/react-datepicker&#34;&gt;main website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;The date picker relies on &lt;a href=&#34;https://date-fns.org/v3.3.1/docs/I18n&#34;&gt;date-fns internationalization&lt;/a&gt; to localize its display components. By default, the date picker will use the locale globally set, which is English. Provided are 3 helper methods to set the locale:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;registerLocale&lt;/strong&gt; (string, object): loads an imported locale object from date-fns&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;setDefaultLocale&lt;/strong&gt; (string): sets a registered locale as the default for all datepicker instances&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;getDefaultLocale&lt;/strong&gt;: returns a string showing the currently set default locale&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { registerLocale, setDefaultLocale } from  &#34;react-datepicker&#34;;&#xA;import { es } from &#39;date-fns/locale/es&#39;;&#xA;registerLocale(&#39;es&#39;, es)&#xA;&#xA;&amp;lt;DatePicker&#xA;  locale=&#34;es&#34;&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Locales can be changed in the following way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Globally&lt;/strong&gt; - &lt;code&gt;setDefaultLocale(&#39;es&#39;);&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;h3&gt;React&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re always trying to stay compatible with the latest version of React. We can&#39;t support all older versions of React.&lt;/p&gt; &#xA;&lt;p&gt;Latest compatible versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React 16 or newer: React-datepicker v2.9.4 and newer&lt;/li&gt; &#xA; &lt;li&gt;React 15.5: React-datepicker v2.9.3&lt;/li&gt; &#xA; &lt;li&gt;React 15.4.1: needs React-datepicker v0.40.0, newer won&#39;t work (due to react-onclickoutside dependencies)&lt;/li&gt; &#xA; &lt;li&gt;React 0.14 or newer: All above React-datepicker v0.13.0&lt;/li&gt; &#xA; &lt;li&gt;React 0.13: React-datepicker v0.13.0&lt;/li&gt; &#xA; &lt;li&gt;pre React 0.13: React-datepicker v0.6.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Moment.js&lt;/h3&gt; &#xA;&lt;p&gt;Up until version 1.8.0, this package was using Moment.js. Starting v2.0.0, we switched to using &lt;code&gt;date-fns&lt;/code&gt;, which uses native Date objects, to reduce the size of the package. If you&#39;re switching from 1.8.0 to 2.0.0 or higher, please see the updated example above of check out the &lt;a href=&#34;https://reactdatepicker.com&#34;&gt;examples site&lt;/a&gt; for up to date examples.&lt;/p&gt; &#xA;&lt;h3&gt;Browser Support&lt;/h3&gt; &#xA;&lt;p&gt;The date picker is compatible with the latest versions of Chrome, Firefox, and IE10+.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, it is difficult to support legacy browsers while maintaining our ability to develop new features in the future. For IE9 support, it is known that the &lt;a href=&#34;https://www.npmjs.com/package/classlist-polyfill&#34;&gt;classlist polyfill&lt;/a&gt; is needed, but this may change or break at any point in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; branch contains the latest version of the Datepicker component.&lt;/p&gt; &#xA;&lt;p&gt;To begin local development:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn link&lt;/code&gt; from project root&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd docs-site &amp;amp;&amp;amp; yarn link react-datepicker&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn install&lt;/code&gt; from project root&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn build&lt;/code&gt; from project root&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn start&lt;/code&gt; from project root&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The last step starts documentation app as a simple webserver on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;yarn test&lt;/code&gt; to execute the test suite and linters. To help you develop the component we’ve set up some tests that cover the basic functionality (can be found in &lt;code&gt;/tests&lt;/code&gt;). Even though we’re big fans of testing, this only covers a small piece of the component. We highly recommend you add tests when you’re adding new functionality.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file for more details about getting set up.&lt;/p&gt; &#xA;&lt;h3&gt;The examples&lt;/h3&gt; &#xA;&lt;p&gt;The examples are hosted within the docs folder and are ran in the simple app that loads the Datepicker. To extend the examples with a new example, you can simply duplicate one of the existing examples and change the unique properties of your example.&lt;/p&gt; &#xA;&lt;h2&gt;Accessibility&lt;/h2&gt; &#xA;&lt;h3&gt;Keyboard support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Left&lt;/em&gt;: Move to the previous day.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Right&lt;/em&gt;: Move to the next day.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Up&lt;/em&gt;: Move to the previous week.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Down&lt;/em&gt;: Move to the next week.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;PgUp&lt;/em&gt;: Move to the previous month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Shift+PgUp&lt;/em&gt;: Move to the same day and month of the previous year. If that day does not exist, moves focus to the last day of the month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;PgDn&lt;/em&gt;: Move to the next month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Shift+PgDn&lt;/em&gt;: Move to the same day and month of the next year. If that day does not exist, moves focus to the last day of the month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Home&lt;/em&gt;: Move to the first day (e.g Sunday) of the current week.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;End&lt;/em&gt;: Move to the last day (e.g. Saturday) of the current week.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Enter/Esc/Tab&lt;/em&gt;: close the calendar. (Enter &amp;amp; Esc calls preventDefault)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;For month picker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Left&lt;/em&gt;: Move to the previous month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Right&lt;/em&gt;: Move to the next month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Enter&lt;/em&gt;: Select date and close the calendar&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2014-2024 HackerOne Inc. and individual contributors. Licensed under MIT license, see &lt;a href=&#34;https://raw.githubusercontent.com/Hacker0x01/react-datepicker/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stripe/stripe-node</title>
    <updated>2024-09-27T01:35:20Z</updated>
    <id>tag:github.com,2024-09-27:/stripe/stripe-node</id>
    <link href="https://github.com/stripe/stripe-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js library for the Stripe API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stripe Node.js Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/stripe&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/stripe.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stripe/stripe-node/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/stripe/stripe-node/actions/workflows/main.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/stripe/stripe-node?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/stripe/stripe-node/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/stripe&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/stripe.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://runkit.com/npm/stripe&#34;&gt;&lt;img src=&#34;https://badge.runkitcdn.com/stripe.svg?sanitize=true&#34; alt=&#34;Try on RunKit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Stripe Node library provides convenient access to the Stripe API from applications written in server-side JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;For collecting customer and payment information in the browser, use &lt;a href=&#34;https://stripe.com/docs/js&#34;&gt;Stripe.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://stripe.com/docs/api?lang=node&#34;&gt;&lt;code&gt;stripe-node&lt;/code&gt; API docs&lt;/a&gt; for Node.js.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.youtube.com/playlist?list=PLy1nL-pvL2M5xNIuNapwmABwEy2uifAlY&#34;&gt;video demonstrations&lt;/a&gt; covering how to use the library.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Node 12 or higher.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the package with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install stripe&#xA;# or&#xA;yarn add stripe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The package needs to be configured with your account&#39;s secret key, which is available in the &lt;a href=&#34;https://dashboard.stripe.com/account/apikeys&#34;&gt;Stripe Dashboard&lt;/a&gt;. Require it with the key&#39;s value:&lt;/p&gt; &#xA;&lt;!-- prettier-ignore --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = require(&#39;stripe&#39;)(&#39;sk_test_...&#39;);&#xA;&#xA;stripe.customers.create({&#xA;  email: &#39;customer@example.com&#39;,&#xA;})&#xA;  .then(customer =&amp;gt; console.log(customer.id))&#xA;  .catch(error =&amp;gt; console.error(error));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or using ES modules and &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Stripe from &#39;stripe&#39;;&#xA;const stripe = new Stripe(&#39;sk_test_...&#39;);&#xA;&#xA;const customer = await stripe.customers.create({&#xA;  email: &#39;customer@example.com&#39;,&#xA;});&#xA;&#xA;console.log(customer.id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage with TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;As of 8.0.1, Stripe maintains types for the latest &lt;a href=&#34;https://stripe.com/docs/api/versioning&#34;&gt;API version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Import Stripe as a default import (not &lt;code&gt;* as Stripe&lt;/code&gt;, unlike the DefinitelyTyped version) and instantiate it as &lt;code&gt;new Stripe()&lt;/code&gt; with the latest API version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import Stripe from &#39;stripe&#39;;&#xA;const stripe = new Stripe(&#39;sk_test_...&#39;);&#xA;&#xA;const createCustomer = async () =&amp;gt; {&#xA;  const params: Stripe.CustomerCreateParams = {&#xA;    description: &#39;test customer&#39;,&#xA;  };&#xA;&#xA;  const customer: Stripe.Customer = await stripe.customers.create(params);&#xA;&#xA;  console.log(customer.id);&#xA;};&#xA;createCustomer();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a full TS server example in &lt;a href=&#34;https://github.com/stripe-samples/accept-a-payment/tree/main/custom-payment-flow/server/node-typescript&#34;&gt;stripe-samples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Using old API versions with TypeScript&lt;/h4&gt; &#xA;&lt;p&gt;Types can change between API versions (e.g., Stripe may have changed a field from a string to a hash), so our types only reflect the latest API version.&lt;/p&gt; &#xA;&lt;p&gt;We therefore encourage &lt;a href=&#34;https://stripe.com/docs/upgrades#how-can-i-upgrade-my-api&#34;&gt;upgrading your API version&lt;/a&gt; if you would like to take advantage of Stripe&#39;s TypeScript definitions.&lt;/p&gt; &#xA;&lt;p&gt;If you are on an older API version (e.g., &lt;code&gt;2019-10-17&lt;/code&gt;) and not able to upgrade, you may pass another version and use a comment like &lt;code&gt;// @ts-ignore stripe-version-2019-10-17&lt;/code&gt; to silence type errors here and anywhere the types differ between your API version and the latest. When you upgrade, you should remove these comments.&lt;/p&gt; &#xA;&lt;p&gt;We also recommend using &lt;code&gt;// @ts-ignore&lt;/code&gt; if you have access to a beta feature and need to send parameters beyond the type definitions.&lt;/p&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;expand&lt;/code&gt; with TypeScript&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/api/expanding_objects&#34;&gt;Expandable&lt;/a&gt; fields are typed as &lt;code&gt;string | Foo&lt;/code&gt;, so you must cast them appropriately, e.g.,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const paymentIntent: Stripe.PaymentIntent = await stripe.paymentIntents.retrieve(&#xA;  &#39;pi_123456789&#39;,&#xA;  {&#xA;    expand: [&#39;customer&#39;],&#xA;  }&#xA;);&#xA;const customerEmail: string = (paymentIntent.customer as Stripe.Customer).email;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TypeScript and the stripe-node versioning policy&lt;/h4&gt; &#xA;&lt;p&gt;The TypeScript types in stripe-node always reflect the latest shape of the Stripe API. When the Stripe API changes in a &lt;a href=&#34;https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible&#34;&gt;backwards-incompatible way&lt;/a&gt;, there is a new Stripe API version, and we release a new major version of stripe-node. Sometimes, though, the Stripe API changes in a way that weakens the guarantees provided by the TypeScript types, but that cannot result in any backwards incompatibility at runtime. For example, we might add a new enum value on a response, along with a new parameter to a request. Adding a new value to a response enum weakens the TypeScript type. However, if the new enum value is only returned when the new parameter is provided, this cannot break any existing usages and so would not be considered a breaking API change. In stripe-node, we do NOT consider such changes to be breaking under our current versioning policy. This means that you might see new type errors from TypeScript as you upgrade minor versions of stripe-node, that you can resolve by adding additional type guards.&lt;/p&gt; &#xA;&lt;p&gt;Please feel welcome to share your thoughts about the versioning policy in a Github issue. For now, we judge it to be better than the two alternatives: outdated, inaccurate types, or vastly more frequent major releases, which would distract from any future breaking changes with potentially more disruptive runtime implications.&lt;/p&gt; &#xA;&lt;h3&gt;Using Promises&lt;/h3&gt; &#xA;&lt;p&gt;Every method returns a chainable promise which can be used instead of a regular callback:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Create a new customer and then create an invoice item then invoice it:&#xA;stripe.customers&#xA;  .create({&#xA;    email: &#39;customer@example.com&#39;,&#xA;  })&#xA;  .then((customer) =&amp;gt; {&#xA;    // have access to the customer object&#xA;    return stripe.invoiceItems&#xA;      .create({&#xA;        customer: customer.id, // set the customer id&#xA;        amount: 2500, // 25&#xA;        currency: &#39;usd&#39;,&#xA;        description: &#39;One-time setup fee&#39;,&#xA;      })&#xA;      .then((invoiceItem) =&amp;gt; {&#xA;        return stripe.invoices.create({&#xA;          collection_method: &#39;send_invoice&#39;,&#xA;          customer: invoiceItem.customer,&#xA;        });&#xA;      })&#xA;      .then((invoice) =&amp;gt; {&#xA;        // New invoice created on a new customer&#xA;      })&#xA;      .catch((err) =&amp;gt; {&#xA;        // Deal with an error&#xA;      });&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage with Deno&lt;/h3&gt; &#xA;&lt;p&gt;As of 11.16.0, stripe-node provides a &lt;code&gt;deno&lt;/code&gt; export target. In your Deno project, import stripe-node using an npm specifier:&lt;/p&gt; &#xA;&lt;p&gt;Import using npm specifiers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Stripe from &#39;npm:stripe&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/stripe-samples/stripe-node-deno-samples&#34;&gt;https://github.com/stripe-samples/stripe-node-deno-samples&lt;/a&gt; for more detailed examples and instructions on how to use stripe-node in Deno.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Initialize with config object&lt;/h3&gt; &#xA;&lt;p&gt;The package can be initialized with several options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import ProxyAgent from &#39;https-proxy-agent&#39;;&#xA;&#xA;const stripe = Stripe(&#39;sk_test_...&#39;, {&#xA;  maxNetworkRetries: 1,&#xA;  httpAgent: new ProxyAgent(process.env.http_proxy),&#xA;  timeout: 1000,&#xA;  host: &#39;api.example.com&#39;,&#xA;  port: 123,&#xA;  telemetry: true,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apiVersion&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stripe API version to be used. If not set, stripe-node will use the latest version at the time of release.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;maxNetworkRetries&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;The amount of times a request should be &lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-node/master/#network-retries&#34;&gt;retried&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;httpAgent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-node/master/#configuring-a-proxy&#34;&gt;Proxy&lt;/a&gt; agent to be used by the library.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;80000&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-node/master/#configuring-timeout&#34;&gt;Maximum time each request can take in ms.&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;host&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;api.stripe.com&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Host that requests are made to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;port&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;443&lt;/td&gt; &#xA;   &lt;td&gt;Port that requests are made to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;protocol&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;https&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;https&#39;&lt;/code&gt; or &lt;code&gt;&#39;http&#39;&lt;/code&gt;. &lt;code&gt;http&lt;/code&gt; is never appropriate for sending requests to Stripe servers, and we strongly discourage &lt;code&gt;http&lt;/code&gt;, even in local testing scenarios, as this can result in your credentials being transmitted over an insecure channel.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;telemetry&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow Stripe to send &lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-node/master/#telemetry&#34;&gt;telemetry&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Both &lt;code&gt;maxNetworkRetries&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; can be overridden on a per-request basis.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuring Timeout&lt;/h3&gt; &#xA;&lt;p&gt;Timeout can be set globally via the config object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = Stripe(&#39;sk_test_...&#39;, {&#xA;  timeout: 20 * 1000, // 20 seconds&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And overridden on a per-request basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;stripe.customers.create(&#xA;  {&#xA;    email: &#39;customer@example.com&#39;,&#xA;  },&#xA;  {&#xA;    timeout: 1000, // 1 second&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring For Connect&lt;/h3&gt; &#xA;&lt;p&gt;A per-request &lt;code&gt;Stripe-Account&lt;/code&gt; header for use with &lt;a href=&#34;https://stripe.com/connect&#34;&gt;Stripe Connect&lt;/a&gt; can be added to any method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// List the balance transactions for a connected account:&#xA;stripe.balanceTransactions.list(&#xA;  {&#xA;    limit: 10,&#xA;  },&#xA;  {&#xA;    stripeAccount: &#39;acct_foo&#39;,&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring a Proxy&lt;/h3&gt; &#xA;&lt;p&gt;To use stripe behind a proxy you can pass an &lt;a href=&#34;https://github.com/TooTallNate/node-https-proxy-agent&#34;&gt;https-proxy-agent&lt;/a&gt; on initialization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (process.env.http_proxy) {&#xA;  const ProxyAgent = require(&#39;https-proxy-agent&#39;);&#xA;&#xA;  const stripe = Stripe(&#39;sk_test_...&#39;, {&#xA;    httpAgent: new ProxyAgent(process.env.http_proxy),&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Network retries&lt;/h3&gt; &#xA;&lt;p&gt;As of &lt;a href=&#34;https://github.com/stripe/stripe-node/releases/tag/v13.0.0&#34;&gt;v13&lt;/a&gt; stripe-node will automatically do one reattempt for failed requests that are safe to retry. Automatic network retries can be disabled by setting the &lt;code&gt;maxNetworkRetries&lt;/code&gt; config option to &lt;code&gt;0&lt;/code&gt;. You can also set a higher number to reattempt multiple times, with exponential backoff. &lt;a href=&#34;https://stripe.com/docs/api/idempotent_requests&#34;&gt;Idempotency keys&lt;/a&gt; are added where appropriate to prevent duplication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = Stripe(&#39;sk_test_...&#39;, {&#xA;  maxNetworkRetries: 0, // Disable retries&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = Stripe(&#39;sk_test_...&#39;, {&#xA;  maxNetworkRetries: 2, // Retry a request twice before giving up&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Network retries can also be set on a per-request basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;stripe.customers.create(&#xA;  {&#xA;    email: &#39;customer@example.com&#39;,&#xA;  },&#xA;  {&#xA;    maxNetworkRetries: 2, // Retry this specific request twice before giving up&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examining Responses&lt;/h3&gt; &#xA;&lt;p&gt;Some information about the response which generated a resource is available with the &lt;code&gt;lastResponse&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;customer.lastResponse.requestId; // see: https://stripe.com/docs/api/request_ids?lang=node&#xA;customer.lastResponse.statusCode;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; events&lt;/h3&gt; &#xA;&lt;p&gt;The Stripe object emits &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; events. You can use them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = require(&#39;stripe&#39;)(&#39;sk_test_...&#39;);&#xA;&#xA;const onRequest = (request) =&amp;gt; {&#xA;  // Do something.&#xA;};&#xA;&#xA;// Add the event handler function:&#xA;stripe.on(&#39;request&#39;, onRequest);&#xA;&#xA;// Remove the event handler function:&#xA;stripe.off(&#39;request&#39;, onRequest);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;request&lt;/code&gt; object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  api_version: &#39;latest&#39;,&#xA;  account: &#39;acct_TEST&#39;,              // Only present if provided&#xA;  idempotency_key: &#39;abc123&#39;,         // Only present if provided&#xA;  method: &#39;POST&#39;,&#xA;  path: &#39;/v1/customers&#39;,&#xA;  request_start_time: 1565125303932  // Unix timestamp in milliseconds&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;response&lt;/code&gt; object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  api_version: &#39;latest&#39;,&#xA;  account: &#39;acct_TEST&#39;,              // Only present if provided&#xA;  idempotency_key: &#39;abc123&#39;,         // Only present if provided&#xA;  method: &#39;POST&#39;,&#xA;  path: &#39;/v1/customers&#39;,&#xA;  status: 402,&#xA;  request_id: &#39;req_Ghc9r26ts73DRf&#39;,&#xA;  elapsed: 445,                      // Elapsed time in milliseconds&#xA;  request_start_time: 1565125303932, // Unix timestamp in milliseconds&#xA;  request_end_time: 1565125304377    // Unix timestamp in milliseconds&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Webhook signing&lt;/h3&gt; &#xA;&lt;p&gt;Stripe can optionally sign the webhook events it sends to your endpoint, allowing you to validate that they were not sent by a third-party. You can read more about it &lt;a href=&#34;https://stripe.com/docs/webhooks/signatures&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that you must pass the &lt;em&gt;raw&lt;/em&gt; request body, exactly as received from Stripe, to the &lt;code&gt;constructEvent()&lt;/code&gt; function; this will not work with a parsed (i.e., JSON) request body.&lt;/p&gt; &#xA;&lt;p&gt;You can find an example of how to use this with various JavaScript frameworks in &lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-node/master/examples/webhook-signing&#34;&gt;&lt;code&gt;examples/webhook-signing&lt;/code&gt;&lt;/a&gt; folder, but here&#39;s what it looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const event = stripe.webhooks.constructEvent(&#xA;  webhookRawBody,&#xA;  webhookStripeSignatureHeader,&#xA;  webhookSecret&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing Webhook signing&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;stripe.webhooks.generateTestHeaderString&lt;/code&gt; to mock webhook events that come from Stripe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const payload = {&#xA;  id: &#39;evt_test_webhook&#39;,&#xA;  object: &#39;event&#39;,&#xA;};&#xA;&#xA;const payloadString = JSON.stringify(payload, null, 2);&#xA;const secret = &#39;whsec_test_secret&#39;;&#xA;&#xA;const header = stripe.webhooks.generateTestHeaderString({&#xA;  payload: payloadString,&#xA;  secret,&#xA;});&#xA;&#xA;const event = stripe.webhooks.constructEvent(payloadString, header, secret);&#xA;&#xA;// Do something with mocked signed event&#xA;expect(event.id).to.equal(payload.id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing a Plugin&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re writing a plugin that uses the library, we&#39;d appreciate it if you instantiated your stripe client with &lt;code&gt;appInfo&lt;/code&gt;, eg;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = require(&#39;stripe&#39;)(&#39;sk_test_...&#39;, {&#xA;  appInfo: {&#xA;    name: &#39;MyAwesomePlugin&#39;,&#xA;    version: &#39;1.2.34&#39;, // Optional&#xA;    url: &#39;https://myawesomeplugin.info&#39;, // Optional&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or using ES modules or TypeScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = new Stripe(apiKey, {&#xA;  appInfo: {&#xA;    name: &#39;MyAwesomePlugin&#39;,&#xA;    version: &#39;1.2.34&#39;, // Optional&#xA;    url: &#39;https://myawesomeplugin.info&#39;, // Optional&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This information is passed along when the library makes calls to the Stripe API.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-pagination&lt;/h3&gt; &#xA;&lt;p&gt;We provide a few different APIs for this to aid with a variety of node versions and styles.&lt;/p&gt; &#xA;&lt;h4&gt;Async iterators (&lt;code&gt;for-await-of&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;If you are in a Node environment that has support for &lt;a href=&#34;https://github.com/tc39/proposal-async-iteration#the-async-iteration-statement-for-await-of&#34;&gt;async iteration&lt;/a&gt;, such as Node 10+ or &lt;a href=&#34;https://babeljs.io/docs/en/babel-plugin-transform-async-generator-functions&#34;&gt;babel&lt;/a&gt;, the following will auto-paginate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;for await (const customer of stripe.customers.list()) {&#xA;  doSomething(customer);&#xA;  if (shouldStop()) {&#xA;    break;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;autoPagingEach&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are in a Node environment that has support for &lt;code&gt;await&lt;/code&gt;, such as Node 7.9 and greater, you may pass an async function to &lt;code&gt;.autoPagingEach&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await stripe.customers.list().autoPagingEach(async (customer) =&amp;gt; {&#xA;  await doSomething(customer);&#xA;  if (shouldBreak()) {&#xA;    return false;&#xA;  }&#xA;});&#xA;console.log(&#39;Done iterating.&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Equivalently, without &lt;code&gt;await&lt;/code&gt;, you may return a Promise, which can resolve to &lt;code&gt;false&lt;/code&gt; to break:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;stripe.customers&#xA;  .list()&#xA;  .autoPagingEach((customer) =&amp;gt; {&#xA;    return doSomething(customer).then(() =&amp;gt; {&#xA;      if (shouldBreak()) {&#xA;        return false;&#xA;      }&#xA;    });&#xA;  })&#xA;  .then(() =&amp;gt; {&#xA;    console.log(&#39;Done iterating.&#39;);&#xA;  })&#xA;  .catch(handleError);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;autoPagingToArray&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a convenience for cases where you expect the number of items to be relatively small; accordingly, you must pass a &lt;code&gt;limit&lt;/code&gt; option to prevent runaway list growth from consuming too much memory. Once the &lt;code&gt;limit&lt;/code&gt; number of items have been fetched, auto-pagination will stop.&lt;/p&gt; &#xA;&lt;p&gt;Returns a promise of an array of all items across pages for a list request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const allNewCustomers = await stripe.customers&#xA;  .list({created: {gt: lastMonth}, limit: 100}) // 100 items per page&#xA;  .autoPagingToArray({limit: 10000}); // Stop after 10000 items total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telemetry&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library sends request telemetry to Stripe regarding request latency and feature usage. These numbers help Stripe improve the overall latency of its API for all users, and improve popular features.&lt;/p&gt; &#xA;&lt;p&gt;You can disable this behavior if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = new Stripe(&#39;sk_test_...&#39;, {&#xA;  telemetry: false,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Beta SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Stripe has features in the beta phase that can be accessed via the beta version of this package. We would love for you to try these and share feedback with us before these features reach the stable phase. The beta versions can be installed in one of two ways&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To install the latest beta version, run the command &lt;code&gt;npm install stripe@beta --save&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To install a specific beta version, replace the term &#34;beta&#34; in the above command with the version number like &lt;code&gt;npm install stripe@1.2.3-beta.1 --save&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; There can be breaking changes between beta versions. Therefore we recommend pinning the package version to a specific beta version in your package.json file. This way you can install the same version each time without breaking changes unless you are intentionally looking for the latest beta version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We highly recommend keeping an eye on when the beta feature you are interested in goes from beta to stable so that you can move from using a beta version of the SDK to the stable version.&lt;/p&gt; &#xA;&lt;p&gt;The versions tab on the &lt;a href=&#34;https://www.npmjs.com/package/stripe&#34;&gt;stripe page on npm&lt;/a&gt; lists the current tags in use. The &lt;code&gt;beta&lt;/code&gt; tag here corresponds to the the latest beta version of the package.&lt;/p&gt; &#xA;&lt;p&gt;If your beta feature requires a &lt;code&gt;Stripe-Version&lt;/code&gt; header to be sent, use the &lt;code&gt;apiVersion&lt;/code&gt; property of &lt;code&gt;config&lt;/code&gt; object to set it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stripe = new Stripe(&#39;sk_test_...&#39;, {&#xA;  apiVersion: &#39;2022-08-01; feature_beta=v3&#39;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;New features and bug fixes are released on the latest major version of the &lt;code&gt;stripe&lt;/code&gt; package. If you are on an older major version, we recommend that you upgrade to the latest in order to use the new features and bug fixes including those for security vulnerabilities. Older major versions of the package will continue to be available for use, but will not be receiving any updates.&lt;/p&gt; &#xA;&lt;h2&gt;More Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stripe/stripe-node/wiki/REST-API-Version&#34;&gt;REST API Version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stripe/stripe-node/wiki/Error-Handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stripe/stripe-node/wiki/Passing-Options&#34;&gt;Passing Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stripe/stripe-node/wiki/Using-Stripe-Connect-with-node.js&#34;&gt;Using Stripe Connect&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn install&#xA;$ yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not have &lt;code&gt;yarn&lt;/code&gt; installed, you can get it with &lt;code&gt;npm install --global yarn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tests also depends on &lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&lt;/a&gt;, so make sure to fetch and run it from a background terminal (&lt;a href=&#34;https://github.com/stripe/stripe-mock#usage&#34;&gt;stripe-mock&#39;s README&lt;/a&gt; also contains instructions for installing via Homebrew and other methods):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/stripe/stripe-mock&#xA;stripe-mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a single test suite without a coverage report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn mocha-only test/Error.spec.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a single test (case sensitive) in watch mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn mocha-only test/Error.spec.ts --grep &#39;Populates with type&#39; --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish, you may run tests using your Stripe &lt;em&gt;Test&lt;/em&gt; API key by setting the environment variable &lt;code&gt;STRIPE_TEST_API_KEY&lt;/code&gt; before running the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export STRIPE_TEST_API_KEY=&#39;sk_test....&#39;&#xA;$ yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run prettier:&lt;/p&gt; &#xA;&lt;p&gt;Add an &lt;a href=&#34;https://prettier.io/docs/en/editors.html&#34;&gt;editor integration&lt;/a&gt; or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;# vim: set tw=79:&#xA;--&gt;</summary>
  </entry>
</feed>