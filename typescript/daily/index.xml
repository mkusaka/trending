<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-13T01:36:36Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xiangechen/chili3d</title>
    <updated>2025-06-13T01:36:36Z</updated>
    <id>tag:github.com,2025-06-13:/xiangechen/chili3d</id>
    <link href="https://github.com/xiangechen/chili3d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A web-based 3D CAD application for online model design and editing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chili3D&lt;/h1&gt; &#xA;&lt;p&gt;A web-based 3D CAD application for online model design and editing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiangechen/chili3d/main/screenshots/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chili3d.com&#34;&gt;Chili3D&lt;/a&gt; is an &lt;a href=&#34;https://github.com/xiangechen/chili3d&#34;&gt;open-source&lt;/a&gt;, browser-based 3D CAD (Computer-Aided Design) application built with TypeScript. It achieves near-native performance by compiling OpenCascade (OCCT) to WebAssembly and integrating with Three.js, enabling powerful online modeling, editing, and rendering—all without the need for local installation.&lt;/p&gt; &#xA;&lt;p&gt;You can access Chili3D online at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official website: &lt;a href=&#34;https://chili3d.com&#34;&gt;chili3d.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare deployment: &lt;a href=&#34;https://chili3d.pages.dev&#34;&gt;chili3d.pages.dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Modeling Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Shapes&lt;/strong&gt;: Create boxes, cylinders, cones, spheres, pyramids, and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2D Sketching&lt;/strong&gt;: Draw lines, arcs, circles, ellipses, rectangles, polygons, and Bezier curves&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced Operations&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Boolean operations (union, difference, intersection)&lt;/li&gt; &#xA;   &lt;li&gt;Extrusion and revolution&lt;/li&gt; &#xA;   &lt;li&gt;Sweeping and lofting&lt;/li&gt; &#xA;   &lt;li&gt;Offset surfaces&lt;/li&gt; &#xA;   &lt;li&gt;Section creation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Snapping and Tracking&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Object Snapping&lt;/strong&gt;: Precisely snap to geometric features (points, edges, faces)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workplane Snapping&lt;/strong&gt;: Snap to the current workplane for accurate planar operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Axis Tracking&lt;/strong&gt;: Create objects along tracked axes for precise alignment&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature Point Detection&lt;/strong&gt;: Automatically detect and snap to key geometric features&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tracking Visualization&lt;/strong&gt;: Visual guides showing tracking lines and reference points&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Editing Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modification&lt;/strong&gt;: Chamfer, fillet, trim, break, split&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transformation&lt;/strong&gt;: Move, rotate, mirror&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced Editing&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Feature removal&lt;/li&gt; &#xA;   &lt;li&gt;Sub-shape manipulation&lt;/li&gt; &#xA;   &lt;li&gt;Explode compound objects&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Measurement Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Measure angles and lengths&lt;/li&gt; &#xA; &lt;li&gt;Calculate the sum of length, area, and volume&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Document Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create, open, and save documents&lt;/li&gt; &#xA; &lt;li&gt;Full undo/redo stack with transaction history&lt;/li&gt; &#xA; &lt;li&gt;Import/export of industry-standard formats (STEP, IGES, BREP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;User Interface&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Office-style interface with contextual command organization&lt;/li&gt; &#xA; &lt;li&gt;Hierarchical assembly management with flexible grouping capabilities&lt;/li&gt; &#xA; &lt;li&gt;Dynamic workplane support&lt;/li&gt; &#xA; &lt;li&gt;3D viewport with camera controls&lt;/li&gt; &#xA; &lt;li&gt;Camera position recall&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Language Interface&lt;/strong&gt;: Built-in internationalization (i18n) supporting seamless adaptation to global user bases&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Current Languages&lt;/strong&gt;: Chinese &amp;amp; English; contributions for additional languages are welcome&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technology Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: TypeScript, Three.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;3D Engine&lt;/strong&gt;: OpenCascade (via WebAssembly)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build Tools&lt;/strong&gt;: Rspack&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;: Jest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;You can view the full change log &lt;a href=&#34;https://github.com/xiangechen/chili3d/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Chinese users, you can also browse the &lt;a href=&#34;https://space.bilibili.com/539380032/lists/3108412?type=season&#34;&gt;media&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA; &lt;li&gt;npm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/xiangechen/chili3d.git&#xA;cd chili3d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Start the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev # Launches at http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Build the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building wasm&lt;/h3&gt; &#xA;&lt;p&gt;if you want to build wasm by yourself, you can use the following commands:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up WebAssembly dependencies(if you have not installed them yet)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run setup:wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the WebAssembly module:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build:wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Early Development Notice&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chili3D is currently in active alpha development. Key considerations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core APIs may undergo breaking changes&lt;/li&gt; &#xA; &lt;li&gt;Essential features are under implementation&lt;/li&gt; &#xA; &lt;li&gt;Documentation is being progressively developed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions in the form of code, bug reports, or feedback. Please feel free to submit pull requests or open issues.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Discussions&lt;/strong&gt;: Join our &lt;a href=&#34;https://github.com/xiangechen/chili3d/discussions&#34;&gt;GitHub discussions&lt;/a&gt; for general chat or questions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: Use &lt;a href=&#34;https://github.com/xiangechen/chili3d/issues&#34;&gt;GitHub issues&lt;/a&gt; to report public suggestions or bugs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: Contact us privately at &lt;a href=&#34;mailto:xiangetg@msn.cn&#34;&gt;xiangetg@msn.cn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the GNU Affero General Public License v3.0 (AGPL-3.0). For commercial licensing options, contact &lt;a href=&#34;mailto:xiangetg@msn.cn&#34;&gt;xiangetg@msn.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full license details: &lt;a href=&#34;https://raw.githubusercontent.com/xiangechen/chili3d/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>leonardsellem/n8n-mcp-server</title>
    <updated>2025-06-13T01:36:36Z</updated>
    <id>tag:github.com,2025-06-13:/leonardsellem/n8n-mcp-server</id>
    <link href="https://github.com/leonardsellem/n8n-mcp-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP server that provides tools and resources for interacting with n8n API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;n8n MCP Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/%40leonardsellem%2Fn8n-mcp-server&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40leonardsellem%2Fn8n-mcp-server.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Model Context Protocol (MCP) server that allows AI assistants to interact with n8n workflows through natural language.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This project provides a Model Context Protocol (MCP) server that empowers AI assistants to seamlessly interact with n8n, a popular workflow automation tool. It acts as a bridge, enabling AI assistants to programmatically manage and control n8n workflows and executions using natural language commands.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js 20 or later&lt;/li&gt; &#xA; &lt;li&gt;n8n instance with API access enabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install from npm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g @leonardsellem/n8n-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repository&#xA;git clone https://github.com/leonardsellem/n8n-mcp-server.git&#xA;cd n8n-mcp-server&#xA;&#xA;# Install dependencies&#xA;npm install&#xA;&#xA;# Build the project&#xA;npm run build&#xA;&#xA;# Optional: Install globally&#xA;npm install -g .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can also run the server using Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Pull the image&#xA;docker pull leonardsellem/n8n-mcp-server&#xA;&#xA;# Run the container with your n8n API configuration&#xA;docker run -e N8N_API_URL=http://your-n8n:5678/api/v1 \&#xA;  -e N8N_API_KEY=your_n8n_api_key \&#xA;  -e N8N_WEBHOOK_USERNAME=username \&#xA;  -e N8N_WEBHOOK_PASSWORD=password \&#xA;  leonardsellem/n8n-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating the Server&lt;/h2&gt; &#xA;&lt;p&gt;How you update the server depends on how you initially installed it.&lt;/p&gt; &#xA;&lt;h3&gt;1. Installed globally via npm&lt;/h3&gt; &#xA;&lt;p&gt;If you installed the server using &lt;code&gt;npm install -g @leonardsellem/n8n-mcp-server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your terminal or command prompt.&lt;/li&gt; &#xA; &lt;li&gt;Run the following command to get the latest version: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g @leonardsellem/n8n-mcp-server@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the server is currently running (e.g., as a background process or service), you&#39;ll need to restart it for the changes to take effect.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2. Installed from source&lt;/h3&gt; &#xA;&lt;p&gt;If you cloned the repository and installed from source:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your terminal or command prompt.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the directory where you cloned the project: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd path/to/n8n-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you&#39;ve made any local changes to the code that you want to keep, consider stashing them (optional): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git stash&#xA;&lt;/code&gt;&lt;/pre&gt; You can apply them later with &lt;code&gt;git stash pop&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Pull the latest changes from the repository (assuming you are on the &lt;code&gt;main&lt;/code&gt; branch): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull origin main&#xA;&lt;/code&gt;&lt;/pre&gt; If you are on a different branch, replace &lt;code&gt;main&lt;/code&gt; with your branch name.&lt;/li&gt; &#xA; &lt;li&gt;Install or update any changed dependencies: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Rebuild the project to include the latest updates: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you previously installed it globally from this source folder using &lt;code&gt;npm install -g .&lt;/code&gt;, you might want to run this command again to update the global link: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Restart the server. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you run the server directly using a command like &lt;code&gt;node build/index.js&lt;/code&gt; in your AI assistant&#39;s MCP configuration, ensure the path is still correct. Using &lt;code&gt;npm install -g .&lt;/code&gt; and then &lt;code&gt;n8n-mcp-server&lt;/code&gt; as the command should keep this consistent.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3. Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;If you are running the server using Docker:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pull the latest image from Docker Hub: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull leonardsellem/n8n-mcp-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stop and remove your old container. You&#39;ll need your container&#39;s name or ID (you can find it using &lt;code&gt;docker ps&lt;/code&gt;): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop &amp;lt;your_container_name_or_id&amp;gt;&#xA;docker rm &amp;lt;your_container_name_or_id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start a new container with the updated image. Use the same &lt;code&gt;docker run&lt;/code&gt; command you used previously, including all your necessary environment variables (refer to the &#34;Docker Installation&#34; section for an example command). For instance: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -e N8N_API_URL=http://your-n8n:5678/api/v1 \&#xA;  -e N8N_API_KEY=your_n8n_api_key \&#xA;  -e N8N_WEBHOOK_USERNAME=username \&#xA;  -e N8N_WEBHOOK_PASSWORD=password \&#xA;  leonardsellem/n8n-mcp-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; Ensure you use &lt;code&gt;:latest&lt;/code&gt; or the specific version tag you intend to run.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the directory where you&#39;ll run the server, using &lt;code&gt;.env.example&lt;/code&gt; as a template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure the following environment variables:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N8N_API_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full URL of the n8n API, including &lt;code&gt;/api/v1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://localhost:5678/api/v1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N8N_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API key for authenticating with n8n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;n8n_api_...&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N8N_WEBHOOK_USERNAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Username for webhook authentication (if using webhooks)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;username&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N8N_WEBHOOK_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Password for webhook authentication&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable debug logging (optional)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Generating an n8n API Key&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your n8n instance in a browser&lt;/li&gt; &#xA; &lt;li&gt;Go to Settings &amp;gt; API &amp;gt; API Keys&lt;/li&gt; &#xA; &lt;li&gt;Create a new API key with appropriate permissions&lt;/li&gt; &#xA; &lt;li&gt;Copy the key to your &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running the Server&lt;/h3&gt; &#xA;&lt;p&gt;From the installation directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;n8n-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if installed globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;n8n-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrating with AI Assistants&lt;/h3&gt; &#xA;&lt;p&gt;After building the server (&lt;code&gt;npm run build&lt;/code&gt;), you need to configure your AI assistant (like VS Code with the Claude extension or the Claude Desktop app) to run it. This typically involves editing a JSON configuration file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Configuration (e.g., in VS Code &lt;code&gt;settings.json&lt;/code&gt; or Claude Desktop &lt;code&gt;claude_desktop_config.json&lt;/code&gt;):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    // Give your server a unique name&#xA;    &#34;n8n-local&#34;: {&#xA;      // Use &#39;node&#39; to execute the built JavaScript file&#xA;      &#34;command&#34;: &#34;node&#34;,&#xA;      // Provide the *absolute path* to the built index.js file&#xA;      &#34;args&#34;: [&#xA;        &#34;/path/to/your/cloned/n8n-mcp-server/build/index.js&#34;&#xA;        // On Windows, use double backslashes:&#xA;        // &#34;C:\\path\\to\\your\\cloned\\n8n-mcp-server\\build\\index.js&#34;&#xA;      ],&#xA;      // Environment variables needed by the server&#xA;      &#34;env&#34;: {&#xA;        &#34;N8N_API_URL&#34;: &#34;http://your-n8n-instance:5678/api/v1&#34;, // Replace with your n8n URL&#xA;        &#34;N8N_API_KEY&#34;: &#34;YOUR_N8N_API_KEY&#34;, // Replace with your key&#xA;        // Add webhook credentials only if you plan to use webhook tools&#xA;        // &#34;N8N_WEBHOOK_USERNAME&#34;: &#34;your_webhook_user&#34;,&#xA;        // &#34;N8N_WEBHOOK_PASSWORD&#34;: &#34;your_webhook_password&#34;&#xA;      },&#xA;      // Ensure the server is enabled&#xA;      &#34;disabled&#34;: false,&#xA;      // Default autoApprove settings&#xA;      &#34;autoApprove&#34;: []&#xA;    }&#xA;    // ... other servers might be configured here&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key Points:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;/path/to/your/cloned/n8n-mcp-server/&lt;/code&gt; with the actual absolute path where you cloned and built the repository.&lt;/li&gt; &#xA; &lt;li&gt;Use the correct path separator for your operating system (forward slashes &lt;code&gt;/&lt;/code&gt; for macOS/Linux, double backslashes &lt;code&gt;\\&lt;/code&gt; for Windows).&lt;/li&gt; &#xA; &lt;li&gt;Ensure you provide the correct &lt;code&gt;N8N_API_URL&lt;/code&gt; (including &lt;code&gt;/api/v1&lt;/code&gt;) and &lt;code&gt;N8N_API_KEY&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The server needs to be built (&lt;code&gt;npm run build&lt;/code&gt;) before the assistant can run the &lt;code&gt;build/index.js&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available Tools&lt;/h2&gt; &#xA;&lt;p&gt;The server provides the following tools:&lt;/p&gt; &#xA;&lt;h3&gt;Using Webhooks&lt;/h3&gt; &#xA;&lt;p&gt;This MCP server supports executing workflows through n8n webhooks. To use this functionality:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a webhook-triggered workflow in n8n.&lt;/li&gt; &#xA; &lt;li&gt;Set up Basic Authentication on your webhook node.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;run_webhook&lt;/code&gt; tool to trigger the workflow, passing just the workflow name.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const result = await useRunWebhook({&#xA;  workflowName: &#34;hello-world&#34;, // Will call &amp;lt;n8n-url&amp;gt;/webhook/hello-world&#xA;  data: {&#xA;    prompt: &#34;Hello from AI assistant!&#34;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The webhook authentication is handled automatically using the &lt;code&gt;N8N_WEBHOOK_USERNAME&lt;/code&gt; and &lt;code&gt;N8N_WEBHOOK_PASSWORD&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;h3&gt;Workflow Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;workflow_list&lt;/code&gt;: List all workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflow_get&lt;/code&gt;: Get details of a specific workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflow_create&lt;/code&gt;: Create a new workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflow_update&lt;/code&gt;: Update an existing workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflow_delete&lt;/code&gt;: Delete a workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflow_activate&lt;/code&gt;: Activate a workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;workflow_deactivate&lt;/code&gt;: Deactivate a workflow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Execution Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;execution_run&lt;/code&gt;: Execute a workflow via the API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_webhook&lt;/code&gt;: Execute a workflow via a webhook&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;execution_get&lt;/code&gt;: Get details of a specific execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;execution_list&lt;/code&gt;: List executions for a workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;execution_stop&lt;/code&gt;: Stop a running execution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;The server provides the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;n8n://workflows/list&lt;/code&gt;: List of all workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n8n://workflow/{id}&lt;/code&gt;: Details of a specific workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n8n://executions/{workflowId}&lt;/code&gt;: List of executions for a workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n8n://execution/{id}&lt;/code&gt;: Details of a specific execution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The n8n MCP Server is a community-driven project, and its future direction will be shaped by your feedback and contributions!&lt;/p&gt; &#xA;&lt;p&gt;Currently, our roadmap is flexible and under continuous development. We believe in evolving the server based on the needs and ideas of our users.&lt;/p&gt; &#xA;&lt;p&gt;We encourage you to get involved in shaping the future of this tool:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Suggest Features:&lt;/strong&gt; Have an idea for a new tool, resource, or improvement?&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Discuss Priorities:&lt;/strong&gt; Want to weigh in on what we should focus on next?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please share your thoughts, feature requests, and ideas by opening an issue on our &lt;a href=&#34;https://github.com/leonardsellem/n8n-mcp-server/issues&#34;&gt;GitHub Issues page&lt;/a&gt;. Let&#39;s build a powerful tool for AI assistants together!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running in Development Mode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community and are excited to see how you can help improve the n8n MCP Server! Whether you&#39;re fixing a bug, proposing a new feature, or improving documentation, your help is valued.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting Bugs&lt;/h3&gt; &#xA;&lt;p&gt;If you encounter a bug, please report it by opening an issue on our &lt;a href=&#34;https://github.com/leonardsellem/n8n-mcp-server/issues&#34;&gt;GitHub Issues page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When submitting a bug report, please include the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A clear and descriptive title.&lt;/li&gt; &#xA; &lt;li&gt;A detailed description of the problem, including steps to reproduce the bug.&lt;/li&gt; &#xA; &lt;li&gt;Information about your environment (e.g., Node.js version, n8n MCP Server version, operating system).&lt;/li&gt; &#xA; &lt;li&gt;Any relevant error messages or screenshots.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Suggesting Enhancements&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re always looking for ways to make the server better. If you have an idea for an enhancement or a new feature, please open an issue on our &lt;a href=&#34;https://github.com/leonardsellem/n8n-mcp-server/issues&#34;&gt;GitHub Issues page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A clear and descriptive title for your suggestion.&lt;/li&gt; &#xA; &lt;li&gt;A detailed explanation of the proposed enhancement and why it would be beneficial.&lt;/li&gt; &#xA; &lt;li&gt;Any potential use cases or examples.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Submitting Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute code, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fork the repository:&lt;/strong&gt; Create your own fork of the &lt;a href=&#34;https://github.com/leonardsellem/n8n-mcp-server&#34;&gt;n8n-mcp-server repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create a branch:&lt;/strong&gt; Create a new branch in your fork for your changes (e.g., &lt;code&gt;git checkout -b feature/your-feature-name&lt;/code&gt; or &lt;code&gt;bugfix/issue-number&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make your changes:&lt;/strong&gt; Implement your feature or bug fix. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ensure your code adheres to the existing coding style. (We use Prettier for formatting, which can be run with &lt;code&gt;npm run lint&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Include tests for your changes if applicable. You can run tests using &lt;code&gt;npm test&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Commit your changes:&lt;/strong&gt; Write clear and concise commit messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Push to your fork:&lt;/strong&gt; Push your changes to your forked repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open a Pull Request (PR):&lt;/strong&gt; Submit a PR to the &lt;code&gt;main&lt;/code&gt; branch of the official &lt;code&gt;n8n-mcp-server&lt;/code&gt; repository. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Provide a clear title and description for your PR, explaining the changes you&#39;ve made and referencing any related issues.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We&#39;ll review your PR as soon as possible and provide feedback. Thank you for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardsellem/n8n-mcp-server/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Join Our Team: Call for Co-Maintainers!&lt;/h2&gt; &#xA;&lt;p&gt;This project is a vibrant, community-driven tool actively used by AI enthusiasts and developers. Currently, it&#39;s maintained on a part-time basis by a passionate individual who isn&#39;t a seasoned engineer but is dedicated to bridging AI with workflow automation. To help this project flourish, ensure its long-term health, and keep up with its growing user base, we&#39;re looking for enthusiastic &lt;strong&gt;co-maintainers&lt;/strong&gt; to join the team!&lt;/p&gt; &#xA;&lt;h3&gt;Why Contribute?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Learn and Grow:&lt;/strong&gt; Sharpen your skills in areas like TypeScript, Node.js, API integration, and AI tool development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Collaborate:&lt;/strong&gt; Work alongside other motivated developers and AI users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make an Impact:&lt;/strong&gt; Directly shape the future of this project and help build a valuable tool for the AI community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open Source:&lt;/strong&gt; Gain experience contributing to an open-source project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How You Can Help&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions in many forms! Here are some areas where you could make a big difference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bug Fixing:&lt;/strong&gt; Help us identify and squash bugs to improve stability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature Development:&lt;/strong&gt; Implement new tools and functionalities based on user needs and your ideas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; Improve our guides, examples, and API references to make the project more accessible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing:&lt;/strong&gt; Enhance our test suite (unit, integration) to ensure code quality and reliability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CI/CD:&lt;/strong&gt; Help streamline our development and deployment pipelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Reviews:&lt;/strong&gt; Provide feedback on pull requests and help maintain code standards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Community Support:&lt;/strong&gt; Assist users with questions and help manage discussions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Involved!&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re excited about the intersection of AI and workflow automation, and you&#39;re looking for a rewarding open-source opportunity, we&#39;d love to hear from you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ready to contribute?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out our &lt;a href=&#34;https://github.com/leonardsellem/n8n-mcp-server/issues&#34;&gt;GitHub Issues page&lt;/a&gt; to find existing tasks, suggest new ideas, or express your interest in becoming a co-maintainer.&lt;/li&gt; &#xA; &lt;li&gt;You can open an issue titled &#34;Co-maintainer Application&#34; to formally apply, or simply start contributing to existing issues.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, feel free to reach out to the existing maintainers if you have questions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Let’s build the future of AI-powered workflow automation together! 🙌&lt;/p&gt;</summary>
  </entry>
</feed>