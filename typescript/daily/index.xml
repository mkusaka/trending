<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-18T01:46:15Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Nutlope/aicommits</title>
    <updated>2023-02-18T01:46:15Z</updated>
    <id>tag:github.com,2023-02-18:/Nutlope/aicommits</id>
    <link href="https://github.com/Nutlope/aicommits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI that writes your git commit messages for you with AI&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;div&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Nutlope/aicommits/main/.github/screenshot.png&#34; alt=&#34;AI Commits&#34;&gt; &#xA;  &lt;h1 align=&#34;center&#34;&gt;AI Commits&lt;/h1&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;A CLI that writes your git commit messages for you with AI. Never write a commit message again.&lt;/p&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/aicommits&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/aicommits&#34; alt=&#34;Current version&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://twitter.com/nutlope&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/nutlope?style=flat&amp;amp;label=nutlope&amp;amp;logo=twitter&amp;amp;color=0bf&amp;amp;logoColor=fff&#34; alt=&#34;Hassan Twitter follower count&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the CLI:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g aicommits&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Retrieve your API key from &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note: If you haven&#39;t already, you&#39;ll have to create an account and set up billing.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the key so aicommits can use it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#34;OPENAI_KEY=&amp;lt;your token&amp;gt;&#34; &amp;gt;&amp;gt; ~/.aicommits&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;re ready to go!&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;aicommits&lt;/code&gt; in any Git repo and it will generate a commit message for you.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;This CLI tool runs &lt;code&gt;git diff&lt;/code&gt; to grab all your latest code changes, sends them to OpenAI&#39;s GPT-3, then returns the AI generated commit message.&lt;/p&gt; &#xA;&lt;p&gt;Video coming soon where I rebuild it from scratch to show you how to easily build your own CLI tools powered by AI.&lt;/p&gt; &#xA;&lt;h2&gt;Future tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add support for conventional commits as a flag that users can enable&lt;/li&gt; &#xA; &lt;li&gt;Add support for diffs greater than 200 lines by grabbing the diff per file, optional flag&lt;/li&gt; &#xA; &lt;li&gt;Add ability to specify a commit message from inside aicommit if user doesn&#39;t like generated one&lt;/li&gt; &#xA; &lt;li&gt;Solve latency issue (use a githook to asynchronously run gpt3 call on every git add, store the result in a temp file or in the .git folder). Put behind a flag&lt;/li&gt; &#xA; &lt;li&gt;Use gpt-3-tokenizer instead of hard limit on characters as a more accurate model&lt;/li&gt; &#xA; &lt;li&gt;Play around with prompt to produce optimal result&lt;/li&gt; &#xA; &lt;li&gt;Add opt-in emoji flag to preface commits with an emoji, use &lt;a href=&#34;https://gitmoji.dev&#34;&gt;this&lt;/a&gt; as a guide&lt;/li&gt; &#xA; &lt;li&gt;Add opt-in languages flag where it returns the commit in different languages&lt;/li&gt; &#xA; &lt;li&gt;Add automated github releases using &lt;a href=&#34;https://github.com/manovotny/github-releases-for-automated-package-publishing-action&#34;&gt;this action&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build landing page for the 2.0 launch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hassan El Mghari&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Nutlope&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/nutlope&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hiroki Osame&lt;/strong&gt;: &lt;a href=&#34;https://github.com/privatenumber&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/privatenumbr&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/prompt-engine</title>
    <updated>2023-02-18T01:46:15Z</updated>
    <id>tag:github.com,2023-02-18:/microsoft/prompt-engine</id>
    <link href="https://github.com/microsoft/prompt-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for helping developers craft prompts for Large Language Models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prompt Engine&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains an NPM utility library for creating and maintaining prompts for Large Language Models (LLMs).&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;LLMs like GPT-3 and Codex have continued to push the bounds of what AI is capable of - they can capably generate language and code, but are also capable of emergent behavior like question answering, summarization, classification and dialog. One of the best techniques for enabling specific behavior out of LLMs is called prompt engineering - crafting inputs that coax the model to produce certain kinds of outputs. Few-shot prompting is the discipline of giving examples of inputs and outputs, such that the model has a reference for the type of output you&#39;re looking for.&lt;/p&gt; &#xA;&lt;p&gt;Prompt engineering can be as simple as formatting a question and passing it to the model, but it can also get quite complex - requiring substantial code to manipulate and update strings. This library aims to make that easier. It also aims to codify patterns and practices around prompt engineering.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://microsoft.github.io/prompt-engineering/&#34;&gt;How to get Codex to produce the code you want&lt;/a&gt; article for an example of the prompt engineering patterns this library codifies.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install prompt-engine&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The library currently supports a generic &lt;code&gt;PromptEngine&lt;/code&gt;, a &lt;code&gt;CodeEngine&lt;/code&gt; and a &lt;code&gt;ChatEngine&lt;/code&gt;. All three facilitate a pattern of prompt engineering where the prompt is composed of a description, examples of inputs and outputs and an ongoing &#34;dialog&#34; representing the ongoing input/output pairs as the user and model communicate. The dialog ensures that the model (which is stateless) has the context about what&#39;s happened in the conversation so far.&lt;/p&gt; &#xA;&lt;p&gt;See architecture diagram representation:&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/17247257/178334939-65e0e3ce-39b3-4abc-a889-7f2c0fb75f60.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Code Engine&lt;/h3&gt; &#xA;&lt;p&gt;Code Engine creates prompts for Natural Language to Code scenarios. See TypeScript Syntax for importing &lt;code&gt;CodeEngine&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { CodeEngine } from &#34;prompt-engine&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NL-&amp;gt;Code prompts should generally have a description, which should give context about the programming language the model should generate and libraries it should be using. The description should also give information about the task at hand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const description =&#xA;  &#34;Natural Language Commands to JavaScript Math Code. The code should log the result of the command to the console.&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NL-&amp;gt;Code prompts should also have examples of NL-&amp;gt;Code interactions, exemplifying the kind of code you expect the model to produce. In this case, the inputs are math queries (e.g. &#34;what is 2 + 2?&#34;) and code that console logs the result of the query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const examples = [&#xA;  { input: &#34;what&#39;s 10 plus 18&#34;, response: &#34;console.log(10 + 18)&#34; },&#xA;  { input: &#34;what&#39;s 10 times 18&#34;, response: &#34;console.log(10 * 18)&#34; },&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;CodeEngine&lt;/code&gt; uses JavaScript as the programming language, but you can create prompts for different languages by passing a different &lt;code&gt;CodePromptConfig&lt;/code&gt; into the constructor. If, for example, we wanted to produce Python prompts, we could have passed &lt;code&gt;CodeEngine&lt;/code&gt; a &lt;code&gt;pythonConfig&lt;/code&gt; specifying the comment operator it should be using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const pythonConfig = {&#xA;  commentOperator: &#34;#&#34;,&#xA;}&#xA;const codeEngine = new CodeEngine(description, examples, flowResetText, pythonConfig);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With our description and our examples, we can go ahead and create our &lt;code&gt;CodeEngine&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const codeEngine = new CodeEngine(description, examples);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that we have our &lt;code&gt;CodeEngine&lt;/code&gt;, we can use it to create prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const query = &#34;What&#39;s 1018 times the ninth power of four?&#34;;&#xA;const prompt = codeEngine.buildPrompt(query);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting prompt will be a string with the description, examples and the latest query formatted with comment operators and line breaks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/* Natural Language Commands to JavaScript Math Code. The code should log the result of the command to the console. */&#xA;&#xA;/* what&#39;s 10 plus 18 */&#xA;console.log(10 + 18);&#xA;&#xA;/* what&#39;s 10 times 18 */&#xA;console.log(10 * 18);&#xA;&#xA;/* What&#39;s 1018 times the ninth power of four? */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given the context, a capable code generation model can take the above prompt and guess the next line: &lt;code&gt;console.log(1018 * Math.pow(4, 9));&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For multi-turn scenarios, where past conversations influences the next turn, Code Engine enables us to persist interactions in a prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;// Assumes existence of code generation model&#xA;let code = model.generateCode(prompt);&#xA;&#xA;// Adds interaction&#xA;codeEngine.addInteraction(query, code);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now new prompts will include the latest NL-&amp;gt;Code interaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;codeEngine.buildPrompt(&#34;How about the 8th power?&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Produces a prompt identical to the one above, but with the NL-&amp;gt;Code dialog history:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;/* What&#39;s 1018 times the ninth power of four? */&#xA;console.log(1018 * Math.pow(4, 9));&#xA;&#xA;/* How about the 8th power? */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this context, the code generation model has the dialog context needed to understand what we mean by the query. In this case, the model would correctly generate &lt;code&gt;console.log(1018 * Math.pow(4, 8));&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chat Engine&lt;/h3&gt; &#xA;&lt;p&gt;Just like Code Engine, Chat Engine creates prompts with descriptions and examples. The difference is that Chat Engine creates prompts for dialog scenarios, where both the user and the model use natural language. The &lt;code&gt;ChatEngine&lt;/code&gt; constructor takes an optional &lt;code&gt;chatConfig&lt;/code&gt; argument, which allows you to define the name of a user and chatbot in a multi-turn dialog:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const chatEngineConfig = {&#xA;  user: &#34;Ryan&#34;,&#xA;  bot: &#34;Gordon&#34;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chat prompts also benefit from a description that gives context. This description helps the model determine how the bot should respond.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const description = &#34;A conversation with Gordon the Anxious Robot. Gordon tends to reply nervously and asks a lot of follow-up questions.&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, Chat Engine prompts can have examples interactions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const examples = [&#xA;  { input: &#34;Who made you?&#34;, response: &#34;I don&#39;t know man! That&#39;s an awfully existential question. How would you answer it?&#34; },&#xA;  { input: &#34;Good point - do you at least know what you were made for?&#34;, response: &#34;I&#39;m OK at riveting, but that&#39;s not how I should answer a meaning of life question is it?&#34;}&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These examples help set the tone of the bot, in this case Gordon the Anxious Robot. Now we can create our &lt;code&gt;ChatEngine&lt;/code&gt; and use it to create prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const chatEngine = new ChatEngine(description, examples, flowResetText, chatEngineConfig);&#xA;const userQuery = &#34;What are you made of?&#34;;&#xA;const prompt = chatEngine.buildPrompt(userQuery);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When passed to a large language model (e.g. GPT-3), the context of the above prompt will help coax a good answer from the model, like &#34;Subatomic particles at some level, but somehow I don&#39;t think that&#39;s what you were asking.&#34;. As with Code Engine, we can persist this answer and continue the dialog such that the model is aware of the conversation context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;chatEngine.addInteraction(userQuery, &#34;Subatomic particles at some level, but somehow I don&#39;t think that&#39;s what you were asking.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Managing Prompt Overflow&lt;/h2&gt; &#xA;&lt;p&gt;Prompts for Large Language Models generally have limited size, depending on the language model being used. Given that prompt-engine can persist dialog history, it is possible for dialogs to get so long that the prompt overflows. The Prompt Engine pattern handles this situation by removing the oldest dialog interaction from the prompt, effectively only remembering the most recent interactions.&lt;/p&gt; &#xA;&lt;p&gt;You can specify the maximum tokens allowed in your prompt by passing a &lt;code&gt;maxTokens&lt;/code&gt; parameter when constructing the config for any prompt engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let promptEngine = new PromptEngine(description, examples, flowResetText, {&#xA;  modelConfig: { maxTokens: 1000 }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available Functions&lt;/h2&gt; &#xA;&lt;p&gt;The following are the functions available on the &lt;code&gt;PromptEngine&lt;/code&gt; class and those that inherit from it:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Returns&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buildContext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Constructs and return the context with parameters provided to the Prompt Engine&lt;/td&gt; &#xA;   &lt;td&gt;Context: string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buildPrompt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt: string&lt;/td&gt; &#xA;   &lt;td&gt;Combines the context from &lt;code&gt;buildContext&lt;/code&gt; with a query to create a prompt&lt;/td&gt; &#xA;   &lt;td&gt;Prompt: string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buildDialog&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Builds a dialog based on all the past interactions added to the Prompt Engine&lt;/td&gt; &#xA;   &lt;td&gt;Dialog: string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;addExample&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interaction: Interaction(input: string, response: string)&lt;/td&gt; &#xA;   &lt;td&gt;Adds the given example to the examples&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;addInteraction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interaction: Interaction(input: string, response: string)&lt;/td&gt; &#xA;   &lt;td&gt;Adds the given interaction to the dialog&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;removeFirstInteraction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Removes and returns the first interaction in the dialog&lt;/td&gt; &#xA;   &lt;td&gt;Interaction: string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;removeLastInteraction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Removes and returns the last interaction added to the dialog&lt;/td&gt; &#xA;   &lt;td&gt;Interaction: string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resetContext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Removes all interactions from the dialog, returning the reset context&lt;/td&gt; &#xA;   &lt;td&gt;Context:string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more examples and insights into using the prompt-engine library, have a look at the &lt;a href=&#34;https://github.com/microsoft/prompt-engine/tree/main/examples&#34;&gt;examples&lt;/a&gt; folder&lt;/p&gt; &#xA;&lt;h2&gt;YAML Representation&lt;/h2&gt; &#xA;&lt;p&gt;It can be useful to represent prompts as standalone files, versus code. This can allow easy swapping between different prompts, prompt versioning, and other advanced capabiliites. With this in mind, prompt-engine offers a way to represent prompts as YAML and to load that YAML into a prompt-engine class. See &lt;code&gt;examples/yaml-examples&lt;/code&gt; for examples of YAML prompts and how they&#39;re loaded into prompt-engine.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Statement of Purpose&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to simplify use of Large Language Models, and to make it easy for developers to take advantage of existing patterns. The package is released in conjunction with the &lt;a href=&#34;https://github.com/microsoft/Build2022-AI-examples&#34;&gt;Build 2022 AI examples&lt;/a&gt;, as the first three use a multi-turn LLM pattern that this library simplifies. This package works independently of any specific LLM - prompt generated by the package should be useable with various language and code generating models.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
</feed>