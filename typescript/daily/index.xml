<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-23T01:49:15Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>total-typescript/ts-reset</title>
    <updated>2023-02-23T01:49:15Z</updated>
    <id>tag:github.com,2023-02-23:/total-typescript/ts-reset</id>
    <link href="https://github.com/total-typescript/ts-reset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A &#39;CSS reset&#39; for TypeScript, improving types for common JavaScript API&#39;s&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;ts-reset&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;TypeScript&#39;s built-in typings are not perfect. &lt;code&gt;ts-reset&lt;/code&gt; makes them better.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Without &lt;code&gt;ts-reset&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üö® &lt;code&gt;.json&lt;/code&gt; (in &lt;code&gt;fetch&lt;/code&gt;) and &lt;code&gt;JSON.parse&lt;/code&gt; both return &lt;code&gt;any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ü§¶ &lt;code&gt;.filter(Boolean)&lt;/code&gt; doesn&#39;t behave how you expect&lt;/li&gt; &#xA; &lt;li&gt;üò° &lt;code&gt;array.includes&lt;/code&gt; often breaks on readonly arrays&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-reset&lt;/code&gt; smooths over these hard edges, just like a CSS reset does in the browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;ts-reset&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üëç &lt;code&gt;.json&lt;/code&gt; (in &lt;code&gt;fetch&lt;/code&gt;) and &lt;code&gt;JSON.parse&lt;/code&gt; both return &lt;code&gt;unknown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ &lt;code&gt;.filter(Boolean)&lt;/code&gt; behaves EXACTLY how you expect&lt;/li&gt; &#xA; &lt;li&gt;ü•π &lt;code&gt;array.includes&lt;/code&gt; is widened to be more ergonomic&lt;/li&gt; &#xA; &lt;li&gt;üöÄ And several more changes!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Import in a single file, then across your whole project...&#xA;import &#34;@total-typescript/ts-reset&#34;;&#xA;&#xA;// .filter just got smarter!&#xA;const filteredArray = [1, 2, undefined].filter(Boolean); // number[]&#xA;&#xA;// Get rid of the any&#39;s in JSON.parse and fetch&#xA;const result = JSON.parse(&#34;{}&#34;); // unknown&#xA;&#xA;fetch(&#34;/&#34;)&#xA;  .then((res) =&amp;gt; res.json())&#xA;  .then((json) =&amp;gt; {&#xA;    console.log(json); // unknown&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install: &lt;code&gt;npm i -D @total-typescript/ts-reset&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;reset.d.ts&lt;/code&gt; file in your project with these contents:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Enjoy improved typings across your &lt;em&gt;entire&lt;/em&gt; project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installing only certain rules&lt;/h3&gt; &#xA;&lt;p&gt;By importing from &lt;code&gt;@total-typescript/ts-reset&lt;/code&gt;, you&#39;re bundling &lt;em&gt;all&lt;/em&gt; the recommended rules.&lt;/p&gt; &#xA;&lt;p&gt;To only import the rules you want, you can import like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Makes JSON.parse return unknown&#xA;import &#34;@total-typescript/ts-reset/json-parse&#34;;&#xA;&#xA;// Makes await fetch().then(res =&amp;gt; res.json()) return unknown&#xA;import &#34;@total-typescript/ts-reset/fetch&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For these imports to work, you&#39;ll need to ensure that, in your &lt;code&gt;tsconfig.json&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt; is set to &lt;code&gt;NodeNext&lt;/code&gt; or &lt;code&gt;Node16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is a full list of all the rules available.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;Use &lt;code&gt;ts-reset&lt;/code&gt; in applications, not libraries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-reset&lt;/code&gt; is designed to be used in application code, not library code. Each rule you include will make changes to the global scope. That means that, simply by importing your library, your user will be unknowingly opting in to &lt;code&gt;ts-reset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;JSON.parse&lt;/code&gt; return &lt;code&gt;unknown&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/json-parse&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;JSON.parse&lt;/code&gt; returning &lt;code&gt;any&lt;/code&gt; can cause nasty, subtle bugs. Frankly, any &lt;code&gt;any&lt;/code&gt;&#39;s can cause bugs because they disable typechecking on the values they describe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const result = JSON.parse(&#34;{}&#34;); // any&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By changing the result of &lt;code&gt;JSON.parse&lt;/code&gt; to &lt;code&gt;unknown&lt;/code&gt;, we&#39;re now forced to either validate the &lt;code&gt;unknown&lt;/code&gt; to ensure it&#39;s the correct type (perhaps using &lt;a href=&#34;https://github.com/colinhacks/zod&#34;&gt;&lt;code&gt;zod&lt;/code&gt;&lt;/a&gt;), or cast it with &lt;code&gt;as&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/json-parse&#34;;&#xA;&#xA;const result = JSON.parse(&#34;{}&#34;); // unknown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;.json()&lt;/code&gt; return &lt;code&gt;unknown&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/fetch&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like &lt;code&gt;JSON.parse&lt;/code&gt;, &lt;code&gt;.json()&lt;/code&gt; returning &lt;code&gt;any&lt;/code&gt; introduces unwanted &lt;code&gt;any&lt;/code&gt;&#39;s into your application code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;fetch(&#34;/&#34;)&#xA;  .then((res) =&amp;gt; res.json())&#xA;  .then((json) =&amp;gt; {&#xA;    console.log(json); // any&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By forcing &lt;code&gt;res.json&lt;/code&gt; to return &lt;code&gt;unknown&lt;/code&gt;, we&#39;re encouraged to distrust its results, making us more likely to validate the results of &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/fetch&#34;;&#xA;&#xA;fetch(&#34;/&#34;)&#xA;  .then((res) =&amp;gt; res.json())&#xA;  .then((json) =&amp;gt; {&#xA;    console.log(json); // unknown&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;.filter(Boolean)&lt;/code&gt; filter out falsy values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/filter-boolean&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default behaviour of &lt;code&gt;.filter&lt;/code&gt; can feel pretty frustrating. Given the code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const filteredArray = [1, 2, undefined].filter(Boolean); // (number | undefined)[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It feels natural that TypeScript should understand that you&#39;ve filtered out the &lt;code&gt;undefined&lt;/code&gt; from &lt;code&gt;filteredArray&lt;/code&gt;. You can make this work, but you need to mark it as a type predicate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const filteredArray = [1, 2, undefined].filter((item): item is number =&amp;gt; {&#xA;  return !!item;&#xA;}); // number[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;.filter(Boolean)&lt;/code&gt; is a really common shorthand for this. So, this rule makes it so &lt;code&gt;.filter(Boolean)&lt;/code&gt; acts like a type predicate on the array passed in, removing any falsy values from the array member.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/filter-boolean&#34;;&#xA;&#xA;const filteredArray = [1, 2, undefined].filter(Boolean); // number[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;.includes&lt;/code&gt; on &lt;code&gt;as const&lt;/code&gt; arrays less strict&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/array-includes&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This rule improves on TypeScript&#39;s default &lt;code&gt;.includes&lt;/code&gt; behaviour. Without this rule enabled, the argument passed to &lt;code&gt;.includes&lt;/code&gt; MUST be a member of the array it&#39;s being tested against.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const users = [&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const;&#xA;&#xA;// Argument of type &#39;&#34;bryan&#34;&#39; is not assignable to&#xA;// parameter of type &#39;&#34;matt&#34; | &#34;sofia&#34; | &#34;waqas&#34;&#39;.&#xA;users.includes(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can often feel extremely awkward. But with the rule enabled, &lt;code&gt;.includes&lt;/code&gt; now takes a widened version of the literals in the &lt;code&gt;const&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/array-includes&#34;;&#xA;&#xA;const users = [&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const;&#xA;&#xA;// .includes now takes a string as the first parameter&#xA;users.includes(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means you can test non-members of the array safely.&lt;/p&gt; &#xA;&lt;p&gt;It also makes &lt;code&gt;.includes&lt;/code&gt; a type predicate, meaning you can use it to narrow wider types to a set enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/array-includes&#34;;&#xA;&#xA;const users = [&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const;&#xA;&#xA;const isUser = (input: string) =&amp;gt; {&#xA;  if (users.includes(input)) {&#xA;    // input is narrowed to &#34;matt&#34; | &#34;sofia&#34; | &#34;waqas&#34;&#xA;    console.log(input);&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;Set.has()&lt;/code&gt; less strict&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/set-has&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;.includes&lt;/code&gt;, &lt;code&gt;Set.has()&lt;/code&gt; doesn&#39;t let you pass members that don&#39;t exist in the set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const userSet = new Set([&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const);&#xA;&#xA;// Argument of type &#39;&#34;bryan&#34;&#39; is not assignable to&#xA;// parameter of type &#39;&#34;matt&#34; | &#34;sofia&#34; | &#34;waqas&#34;&#39;.&#xA;userSet.has(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the rule enabled, &lt;code&gt;Set&lt;/code&gt; is much smarter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/set-has&#34;;&#xA;&#xA;const userSet = new Set([&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const);&#xA;&#xA;// .has now takes a string as the argument!&#xA;userSet.has(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Removing &lt;code&gt;any[]&lt;/code&gt; from &lt;code&gt;Array.isArray()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/is-array&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re using &lt;code&gt;Array.isArray&lt;/code&gt;, you can introduce subtle &lt;code&gt;any&lt;/code&gt;&#39;s into your app&#39;s code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;&#xA;const validate = (input: unknown) =&amp;gt; {&#xA;  if (Array.isArray(input)) {&#xA;    console.log(input); // any[]&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;is-array&lt;/code&gt; enabled, this check will now mark the value as &lt;code&gt;unknown[]&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/is-array&#34;;&#xA;&#xA;const validate = (input: unknown) =&amp;gt; {&#xA;  if (Array.isArray(input)) {&#xA;    console.log(input); // unknown[]&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rules we won&#39;t add&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;Object.keys&lt;/code&gt;/&lt;code&gt;Object.entries&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A common ask is to provide &#39;better&#39; typings for &lt;code&gt;Object.keys&lt;/code&gt;, so that it returns &lt;code&gt;Array&amp;lt;keyof T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt;. Same for &lt;code&gt;Object.entries&lt;/code&gt;. &lt;code&gt;ts-reset&lt;/code&gt; won&#39;t be including rules to change this.&lt;/p&gt; &#xA;&lt;p&gt;TypeScript is a structural typing system. One of the effects of this is that TypeScript can&#39;t always guarantee that your object types don&#39;t contain excess properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Func = () =&amp;gt; {&#xA;  id: string;&#xA;};&#xA;&#xA;const func: Func = () =&amp;gt; {&#xA;  return {&#xA;    id: &#34;123&#34;,&#xA;    // No error on an excess property!&#xA;    name: &#34;Hello!&#34;,&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, the only reasonable type for &lt;code&gt;Object.keys&lt;/code&gt; to return is &lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Generics for &lt;code&gt;JSON.parse&lt;/code&gt;, &lt;code&gt;Response.json&lt;/code&gt; etc&lt;/h3&gt; &#xA;&lt;p&gt;A common request is for &lt;code&gt;ts-reset&lt;/code&gt; to add type arguments to functions like &lt;code&gt;JSON.parse&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const str = JSON.parse&amp;lt;string&amp;gt;(&#39;&#34;hello&#34;&#39;);&#xA;&#xA;console.log(str); // string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This appears to improve the DX by giving you autocomplete on the thing that gets returned from &lt;code&gt;JSON.parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, we argue that this is a lie to the compiler and so, unsafe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;JSON.parse&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; represent &lt;em&gt;validation boundaries&lt;/em&gt; - places where unknown data can enter your application code.&lt;/p&gt; &#xA;&lt;p&gt;If you &lt;em&gt;really&lt;/em&gt; know what data is coming back from a &lt;code&gt;JSON.parse&lt;/code&gt;, then an &lt;code&gt;as&lt;/code&gt; assertion feels like the right call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const str = JSON.parse(&#39;&#34;hello&#34;&#39;) as string;&#xA;&#xA;console.log(str); // string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This provides the types you intend and also signals to the developer that this is &lt;em&gt;slightly&lt;/em&gt; unsafe.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>notable/notable</title>
    <updated>2023-02-23T01:49:15Z</updated>
    <id>tag:github.com,2023-02-23:/notable/notable</id>
    <link href="https://github.com/notable/notable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Markdown-based note-taking app that doesn&#39;t suck.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://notable.app&#34;&gt;Notable&lt;/a&gt; &lt;a href=&#34;https://chat.notable.app&#34; title=&#34;Notable&#39;s real-time chat&#34;&gt;&lt;img src=&#34;https://notable.app/static/images/icons/discord.svg?sanitize=true&#34; height=&#34;24&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/TheNotableApp&#34; title=&#34;Notable&#39;s Twitter account&#34;&gt;&lt;img src=&#34;https://notable.app/static/images/icons/twitter.svg?sanitize=true&#34; height=&#34;24&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&#34;https://reddit.com/r/notable&#34; title=&#34;Notable&#39;s subreddit&#34;&gt;&lt;img src=&#34;https://notable.app/static/images/icons/reddit.svg?sanitize=true&#34; height=&#34;24&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.notable.app/screenshot-main.png&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/screenshots/main_mac.png?no-webp&#34; width=&#34;900&#34; alt=&#34;Notable&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://download.notable.app&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/badges/download.png&#34; height=&#34;42&#34; alt=&#34;Download button&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;I couldn&#39;t find a note-taking app that ticked all the boxes I&#39;m interested in: notes are written and rendered in GitHub Flavored Markdown, no WYSIWYG, no proprietary formats, I can run a search &amp;amp; replace across all notes, notes support attachments, the app isn&#39;t bloated, the app has a pretty interface, tags are indefinitely nestable and can import Evernote notes (because that&#39;s what I was using before).&lt;/p&gt; &#xA;&lt;p&gt;So I built my own.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://notable.app/static/images/comparison.png&#34;&gt;Comparison&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://notable.app/static/images/comparison.png&#34;&gt;&lt;img src=&#34;https://notable.app/static/images/comparison.png&#34; alt=&#34;Click to Enlarge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Part of this comparison is personal opinion: you may disagree on the UI front, things I consider bloat may be considered features by somebody else etc. but hopefully this comparison did a good job at illustrating the main differences.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Markdown-based&lt;/h3&gt; &#xA;&lt;p&gt;Notes are written in GitHub Flavored Markdown, and you can also write &lt;a href=&#34;https://katex.org&#34;&gt;KaTeX&lt;/a&gt; expressions, &lt;a href=&#34;https://github.com/knsv/mermaid&#34;&gt;Mermaid&lt;/a&gt; diagrams and so much more, check out our full &lt;a href=&#34;https://cheatsheet.notable.app&#34;&gt;Markdown cheatsheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notable also gives you a very powerful Markdown editor, it&#39;s the same one VS Code uses in fact, so features like multi-cursors, a minimap and best-in-class syntax highlighting are built-in.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.notable.app/screenshot-editor.png&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/screenshots/editor_mac.png?no-webp&#34; width=&#34;800&#34; alt=&#34;Editor&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;No Vendor Lock-In&lt;/h3&gt; &#xA;&lt;p&gt;Notes and attachments are simply stored on your disk, this is extremely portable and powerful: you could edit your notes with your favorite editor, have them synchronized via Dropbox, run Git on them, run a regex-based search and replace on them etc.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.notable.app/screenshot-filesystem.png&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/screenshots/filesystem_mac.png?no-webp&#34; width=&#34;800&#34; alt=&#34;Filesystem&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Dark Theme&lt;/h3&gt; &#xA;&lt;p&gt;A dark theme is also available. In the future support for &lt;a href=&#34;https://github.com/notable/notable/issues/104&#34;&gt;custom themes&lt;/a&gt; will be added as well.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to change a color or hide a button you are also free to do that via the Devtools.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.notable.app/screenshot-dark.png&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/screenshots/dark_mac.png?no-webp&#34; width=&#34;800&#34; alt=&#34;Dark Theme&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Zen Mode&lt;/h3&gt; &#xA;&lt;p&gt;Zen mode provides a minimalistic editing and reading experience, hiding everything that&#39;s not necessary.&lt;/p&gt; &#xA;&lt;p&gt;Notable is also keyboard friendly, has a &lt;a href=&#34;https://img.notable.app/screenshot-quickopen.png&#34;&gt;quick open&lt;/a&gt; window, and we&#39;ll soon add a &lt;a href=&#34;https://github.com/notable/notable/issues/338&#34;&gt;command palette&lt;/a&gt; too, so you won&#39;t have to click any buttons if you don&#39;t want to.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.notable.app/screenshot-zen.png&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/screenshots/zen_mac.png?no-webp&#34; width=&#34;800&#34; alt=&#34;Zen Mode&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Multi-Note Editor&lt;/h3&gt; &#xA;&lt;p&gt;A multi-note editor is available for quickly running an action, like favoriting, pinning, deleting, tagging etc., on multiple notes at once.&lt;/p&gt; &#xA;&lt;p&gt;If you need to run a more complex action on your notes remember that they are just file stored on your disk so you can do whatever you want with them.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.notable.app/screenshot-multieditor.png&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/screenshots/multieditor_mac.png?no-webp&#34; width=&#34;800&#34; alt=&#34;Multi-Note Editor&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Split Editor&lt;/h3&gt; &#xA;&lt;p&gt;A split-editor is available for quickly checking out how your note will be rendered while you&#39;re editing it.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.notable.app/screenshot-spliteditor.png&#34;&gt; &lt;img src=&#34;https://notable.app/static/images/screenshots/spliteditor_mac.png?no-webp&#34; width=&#34;800&#34; alt=&#34;Split Editor&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;More Features&lt;/h2&gt; &#xA;&lt;p&gt;A lot more features are implemented, some of the most important ones are listed &lt;a href=&#34;https://notable.app/#more-features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Is a feature you care about currently missing? Make sure to browse the &lt;a href=&#34;https://github.com/notable/notable/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc&#34;&gt;issue tracker&lt;/a&gt; and add your &#34;&lt;span&gt;üëç&lt;/span&gt;&#34; reaction to the issues you care most about, as we also use those reactions to prioritize issues.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to contribute to this project, read about them &lt;a href=&#34;https://github.com/notable/notable/raw/master/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://chat.notable.app&#34;&gt;Chat&lt;/a&gt;&lt;/strong&gt;: we have a public real-time chat, come join us there.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cheatsheet.notable.app&#34;&gt;Cheatsheet&lt;/a&gt;&lt;/strong&gt;: the online version of our built-in Markdown cheatsheet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/notable/notable-customizations&#34;&gt;Customizations&lt;/a&gt;&lt;/strong&gt;: collection of community-created customizations and tips.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sponsors/fabiospampinato&#34;&gt;Donations&lt;/a&gt;&lt;/strong&gt;: you can financially support the project via this GitHub Sponsorship page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/notable/notable-insiders&#34;&gt;Insiders&lt;/a&gt;&lt;/strong&gt;: alpha/beta releases are published here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/r/Notable&#34;&gt;Subreddit&lt;/a&gt;&lt;/strong&gt;: we have a subreddit, where day-to-day discussion happens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://tutorial.notable.app&#34;&gt;Tutorial&lt;/a&gt;&lt;/strong&gt;: the online version of our built-in tutorial.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/TheNotableApp&#34;&gt;Twitter&lt;/a&gt;&lt;/strong&gt;: we have a Twitter account, where tips and general updates are posted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://notable.app&#34;&gt;Website&lt;/a&gt;&lt;/strong&gt;: our official website, this is probably the best link to send to friends and colleagues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCcjJ9nPhOkdy4SfjAlyIsug&#34;&gt;YouTube&lt;/a&gt;&lt;/strong&gt;: we have a YouTube channel, where all videos are hosted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Only older versions of the app are open-sourced, read more about this &lt;a href=&#34;https://github.com/notable/notable/raw/master/SOURCE_CODE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kanaries/graphic-walker</title>
    <updated>2023-02-23T01:49:15Z</updated>
    <id>tag:github.com,2023-02-23:/Kanaries/graphic-walker</id>
    <link href="https://github.com/Kanaries/graphic-walker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source alternative to Tableau. Easily embedded as a component in web apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://ch-resources.oss-cn-shanghai.aliyuncs.com/images/lang-icons/icon128px.png&#34; width=&#34;22px&#34;&gt; English | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/graphic-walker/main/README.zh-CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/graphic-walker/main/README.ja-JP.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;graphic-walker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/Kanaries/graphic-walker?style=flat-square&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@kanaries/graphic-walker?style=flat-square&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/kanaries/graphic-walker/auto-build.yml?style=flat-square&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://twitter.com/kanaries_data&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-kanaries_data-03A9F4?style=flat-square&amp;amp;logo=twitter&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/WWHraZ8SeV&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/987366424634884096?color=%237289da&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@kanaries_data&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YouTube-red?style=flat-square&amp;amp;logo=youtube&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://medium.com/@observedobserver&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Medium-grey?style=flat-square&amp;amp;logo=medium&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/kanaries-data/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LinkedIn-blue?style=flat-square&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Graphic Walker is a different type of open-source alternative to Tableau. It allows data scientists to analyze data and visualize patterns with simple drag-and-drop operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-scatter-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Why is it different?&lt;/h3&gt; &#xA;&lt;p&gt;It is extremely easy to embed in your apps just as a React component üéâ! The original purpose of graphic-walker is not to be a heavy BI platform, but a easy to embed, lite, plugin.&lt;/p&gt; &#xA;&lt;h3&gt;Main features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A user friendly drag and drop based interaction for exploratory data analysis with visualizations.&lt;/li&gt; &#xA; &lt;li&gt;A grammar of graphics based visual analytic user interface where users can build visualizations from low-level visual channel encodings. (based on &lt;a href=&#34;https://vega.github.io/vega-lite/&#34;&gt;vega-lite&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A Data Explainer which explains why some patterns occur / what may cause them (like salesforce einstein).&lt;/li&gt; &#xA; &lt;li&gt;Using web workers to handle computational tasks which allow you to use it as a pure front-end app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Graphic Walker is a lite visual analytic component. If you are interested in more advanced data analysis software, check our related project &lt;a href=&#34;https://github.com/Kanaries/Rath&#34;&gt;RATH&lt;/a&gt;, an augmented analytic BI with automated insight discovery, causal analysis and visualization auto generation based on human&#39;s visual perception.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, upload your CSV file, preview your data, and define the analytic type of columns (dimension or measure).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We are developing more types of data sources. You are welcome to raise an issue telling us the types of sources you are using. If you are a developer, graphic-walker can be used as an embedding component, and you can pass your parsed data source to it. For example, &lt;a href=&#34;https://github.com/Kanaries/Rath&#34;&gt;Rath&lt;/a&gt; uses graphic-walker as an embedding components, and it supports many common data sources. You can load your data in &lt;a href=&#34;https://github.com/Kanaries/Rath&#34;&gt;Rath&lt;/a&gt; and bring the data into graphic-walker. In this way, users can also benefit from data cleaning and transformation features in &lt;a href=&#34;https://github.com/Kanaries/Rath&#34;&gt;Rath&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-ds-02.png&#34; alt=&#34;graphic walker dataset upload&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When the data is ready, click the &#39;Submit&#39; button to use the data. On the left-hand side, &lt;code&gt;Field List&lt;/code&gt; is all of your original columns in the table. You can drag them into visual channels (rows, columns, color, opacity, etc.) and make visualizations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://foghorn-assets.oss-cn-hangzhou.aliyuncs.com/graphic-walker/doc_images/after_load_data.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visualize your data with drag and drop operation. For measures, you can define the aggregation methods (sum, mean, count etc.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-bar-01.png&#34; alt=&#34;graphic walker bar chart&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change the mark type into others to make different charts, for example a line chart.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-line-01.png&#34; alt=&#34;graphic walker line chart&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To compare different measures, you can create a concat view by adding more than one measure into rows/columns.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-area-01.png&#34; alt=&#34;graphic walker area chart&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To make a facet view of several subviews divided by the value in dimension, put dimensions into rows or columns to make a facets view. The rules are similar to Tableau.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-scatter-01.png&#34; alt=&#34;graphic walker scatter chart&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you finish exploration, you can save the result into a local file, which can be imported next time.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes you may have further questions, such as why sales in Dec. is high. Graphic Walker provides a data explainer for these cases.&lt;/p&gt; &#xA;&lt;p&gt;For example, in bike sharing dataset, ask why registered rents in Jan. is lower than expectation, the explainer will try to find some potential explanations:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/explain-data-start.png&#34; alt=&#34;graphic walker explain data button&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(percent of number of working days is less than average)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/explain-data-result.png&#34; alt=&#34;graphic walker explain data result&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use Graphic Walker as a data exploration tool without thinking about deployment details, you can use our online out-of-the-box version.&lt;/p&gt; &#xA;&lt;p&gt;Use it here: &lt;a href=&#34;https://graphic-walker.kanaries.net&#34;&gt;Graphic Walker Online&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Method 1: use as an independent app.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&#xA;yarn workspace @kanaries/graphic-walker build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 2: Use as an embedding component module üî•&lt;/h3&gt; &#xA;&lt;p&gt;Using graphic walker can be extremely easy. It provides a single React component which allows you to easily embed it in your app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add @kanaries/graphic-walker&#xA;&#xA;# or&#xA;&#xA;npm i --save @kanaries/graphic-walker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { GraphicWalker } from &#39;@kanaries/graphic-walker&#39;;&#xA;&#xA;const YourEmbeddingTableauStyleApp: React.FC = props =&amp;gt; {&#xA;    const { dataSource, fields } = props;&#xA;    return &amp;lt;GraphicWalker&#xA;        dataSource={dataSource}&#xA;        rawFields={fields}&#xA;        spec={graphicWalkerSpec}&#xA;        i18nLang={langStore.lang}&#xA;    /&amp;gt;&#xA;}&#xA;&#xA;export default YourEmbeddingTableauStyleApp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;try local (dev mode)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# packages/graphic-walker&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Share with Open Source Community&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please consider sharing your experience or thoughts about &lt;a href=&#34;https://github.com/Kanaries/graphic-walker&#34;&gt;graphic walker&lt;/a&gt; with the border Open Source community If you like this project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/share?url=https://github.com/Kanaries/graphic-walker&amp;amp;text=Graphic-Walker:%20A%20different%20type%20of%20open-source%20alternative%20to%20Tableau&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-twitter-03A9F4?style=flat-square&amp;amp;logo=twitter&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/sharer/sharer.php?u=https://github.com/Kanaries/graphic-walker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-facebook-1976D2?style=flat-square&amp;amp;logo=facebook&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/shareArticle?url=https://github.com/Kanaries/graphic-walker&amp;amp;title=Graphic-Walker:%20A%20different%20type%20of%20open-source%20alternative%20to%20Tableau&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-linkedin-3949AB?style=flat-square&amp;amp;logo=linkedin&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/submitlink?u=https://github.com/Kanaries/graphic-walker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-hacker%20news-orange?style=flat-square&amp;amp;logo=ycombinator&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reddit.com/submit?url=https://github.com/Kanaries/graphic-walker&amp;amp;title=Graphic-Walker:%20A%20different%20type%20of%20open-source%20alternative%20to%20Tableau&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-reddit-red?style=flat-square&amp;amp;logo=reddit&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;I18n Support&lt;/h2&gt; &#xA;&lt;p&gt;Graphic Walker now support &lt;em&gt;English&lt;/em&gt; (as &lt;code&gt;&#34;en&#34;&lt;/code&gt; or &lt;code&gt;&#34;en-US&#34;&lt;/code&gt;) and &lt;em&gt;Chinese&lt;/em&gt; (as &lt;code&gt;&#34;zh&#34;&lt;/code&gt; or &lt;code&gt;&#34;zh-CN&#34;&lt;/code&gt;) with built-in locale resources. You can simply provide a valid string value (enumerated above) as &lt;code&gt;props.i18nLang&lt;/code&gt; to set a language or synchronize your global i18n language with the component like the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const YourApp = props =&amp;gt; {&#xA;    // ...&#xA;&#xA;    const curLang = /* get your i18n language */;&#xA;&#xA;    return &amp;lt;GraphicWalker&#xA;        dataSource={dataSource}&#xA;        rawFields={fields}&#xA;        i18nLang={curLang}&#xA;    /&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize I18n&lt;/h3&gt; &#xA;&lt;p&gt;If you need i18n support to cover languages not supported currently, or to totally rewrite the content of any built-in resource(s), you can also provide your resource(s) as &lt;code&gt;props.i18nResources&lt;/code&gt; to Graphic Walker like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const yourResources = {&#xA;    &#39;de-DE&#39;: {&#xA;        &#39;key&#39;: &#39;value&#39;,&#xA;        ...&#xA;    },&#xA;    &#39;fr-FR&#39;: {&#xA;        ...&#xA;    },&#xA;};&#xA;&#xA;const YourApp = props =&amp;gt; {&#xA;    // ...&#xA;&#xA;    const curLang = /* get your i18n language */;&#xA;&#xA;    return &amp;lt;GraphicWalker&#xA;        dataSource={dataSource}&#xA;        rawFields={fields}&#xA;        i18nLang={curLang}&#xA;        i18nResources={yourResources}&#xA;    /&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Graphic Walker uses &lt;code&gt;react-i18next&lt;/code&gt; to support i18n, which is based on &lt;code&gt;i18next&lt;/code&gt;, so your translation resources should follow &lt;a href=&#34;https://www.i18next.com/misc/json-format&#34;&gt;this format&lt;/a&gt;. You can simply fork and edit &lt;code&gt;/locales/en-US.json&lt;/code&gt; to start your translation.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Graphic Walker Props interface&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export interface EditorProps {&#xA;&#x9;dataSource?: IRow[];&#xA;&#x9;rawFields?: IMutField[];&#xA;&#x9;spec?: Specification;&#xA;&#x9;hideDataSourceConfig?: boolean;&#xA;&#x9;i18nLang?: string;&#xA;&#x9;i18nResources?: { [lang: string]: Record&amp;lt;string, string | any&amp;gt; };&#xA;&#x9;keepAlive?: boolean;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;property description&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dataSource&lt;/code&gt;, type &lt;code&gt;Array&amp;lt;{[key: string]: any}&amp;gt;&lt;/code&gt;, array of key-value object data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rawFields&lt;/code&gt;, type &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/graphic-walker/main/packages/graphic-walker/src/interfaces.ts&#34;&gt;IMutField&lt;/a&gt;. array of fields(columns) of the data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt;, type &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/graphic-walker/main/packages/graphic-walker/src/interfaces.ts&#34;&gt;Specification&lt;/a&gt;. visualization specification&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hideDataSourceConfig&lt;/code&gt; at the top of graphic walker, you can import or upload dataset files. If you want to use graphic-walker as a controlled component, you can hide those component by setting this prop to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i18nLang&lt;/code&gt;, type &lt;code&gt;string&lt;/code&gt;. lang label&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i18nResources&lt;/code&gt; custom lang config&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keepAlive&lt;/code&gt;, type &lt;code&gt;boolean&lt;/code&gt;. whether to keep the component state when it is unmounted. If &lt;code&gt;true&lt;/code&gt;, after you unmount the graphic-walker component, the state will still be store, and will be restore when the component is mount again.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s next&lt;/h2&gt; &#xA;&lt;p&gt;Graphic Walker is basically manual data exploration software. When facing more complex datasets, manual exploration can cost a lot of time, &lt;a href=&#34;https://github.com/Kanaries/Rath&#34;&gt;Rath&lt;/a&gt; is software providing a different data analysis experience with automation enhancement.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/graphic-walker/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>