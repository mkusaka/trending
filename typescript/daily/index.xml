<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-16T01:59:08Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YunYouJun/cook</title>
    <updated>2022-08-16T01:59:08Z</updated>
    <id>tag:github.com,2022-08-16:/YunYouJun/cook</id>
    <link href="https://github.com/YunYouJun/cook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍲 好的，今天我们来做菜！OK, Let&#39;s Cook!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cook&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;好的，今天我们来做菜 🥬 Note: This is primarily a Chinese project and we do not intend to translate to English due to the fact that all the ingredients we are familiar with are in Chinese.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;版本&lt;/h2&gt; &#xA;&lt;h3&gt;网页版本&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;网站链接：&lt;a href=&#34;https://cook.yunyoujun.cn&#34;&gt;cook.yunyoujun.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;备用：&lt;a href=&#34;https://cook.yyj.moe&#34;&gt;cook.yyj.moe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;小程序版本&lt;/h3&gt; &#xA;&lt;p&gt;&lt;del&gt;本仓库为网页版本，小程序版本请在微信搜索「来做菜」。&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;因不可抗力，小程序因跳转 B 站视频而被判定为导流违规下架。 将不再提供小程序版本。&lt;/p&gt; &#xA;&lt;!-- ![微信小程序版本](./public/search-cook.png) --&gt; &#xA;&lt;h2&gt;参考&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qq.com/sheet/DZUpJS0tQZm1YYWlt&#34;&gt;隔离食用手册大全&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;说明&lt;/h2&gt; &#xA;&lt;p&gt;本项目初衷是方便特殊时期隔离在家而材料有限的小伙伴，因此菜谱材料会尽量限制在特定范围内。&lt;/p&gt; &#xA;&lt;p&gt;更多可参见 &lt;a href=&#34;https://cook.yunyoujun.cn/about&#34;&gt;来做菜 | 关于&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;欢迎反馈更多菜谱数据：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qq.com/sheet/DQk1vdkhFV0twQVNS&#34;&gt;菜谱数据&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.qq.com/sheet/DQk1vdkhFV0twQVNS?tab=uykkic&#34;&gt;新菜谱反馈&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.qq.com/sheet/DQk1vdkhFV0twQVNS?tab=dmeahc&#34;&gt;晒晒你的菜&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.qq.com/sheet/DQk1vdkhFV0twQVNS?tab=snaau2&#34;&gt;反馈建议&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ### Features --&gt; &#xA;&lt;!-- 本项目支持 PWA，使用浏览器打开时，可将其添加到主屏幕以获得近原生 APP 的体验。 --&gt; &#xA;&lt;h2&gt;开发&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install dependencies&#xA;pnpm install&#xA;&#xA;# convert csv to json&#xA;# automatically executed when postinstall&#xA;pnpm convert&#xA;&#xA;# start&#xA;pnpm dev&#xA;# http://localhost:3333&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;部署&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 从 Docker Hub 拉取最新的镜像&#xA;docker pull yunyoujun/cook:latest&#xA;# 新建并启动容器，然后打开 http://localhost:3333&#xA;docker run -it -d --name cook -p 8080:80 yunyoujun/cook:latest&#xA;&#xA;# 启动与停止&#xA;docker start cook&#xA;docker stop cook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢以下小伙伴为本项目提供的数据支持和 QA ！&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weibo.com/runny&#34;&gt;Runny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;山竹太凉&lt;/li&gt; &#xA; &lt;li&gt;leo&lt;/li&gt; &#xA; &lt;li&gt;麒麟&lt;/li&gt; &#xA; &lt;li&gt;晴方啾&lt;/li&gt; &#xA; &lt;li&gt;课代表阿伟&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://sponsors.yunyoujun.cn&#34;&gt;Sponsors&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;感谢至今以来的所有赞助者们！因为你们的支持让我更有动力去做各种尝试。&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cdn.jsdelivr.net/gh/YunYouJun/sponsors/public/sponsors.svg&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/YunYouJun/sponsors/public/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>balena-io/etcher</title>
    <updated>2022-08-16T01:59:08Z</updated>
    <id>tag:github.com,2022-08-16:/balena-io/etcher</id>
    <link href="https://github.com/balena-io/etcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flash OS images to SD cards &amp; USB drives, safely and easily.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Etcher&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Flash OS images to SD cards &amp;amp; USB drives, safely and easily.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Etcher is a powerful OS image flasher built with web technologies to ensure flashing an SDCard or USB drive is a pleasant and safe experience. It protects you from accidentally writing to your hard-drives, ensures every byte of data was written correctly, and much more. It can also directly flash Raspberry Pi devices that support &lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#usb-device-boot-mode&#34;&gt;USB device boot mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://balena.io/etcher&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/balena-io/etcher.svg?style=flat-square&#34; alt=&#34;Current Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/balena-io/etcher.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forums.balena.io/c/etcher&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/forums.balena.io/topics.svg?style=flat-square&amp;amp;label=balena.io%20forums&#34; alt=&#34;Balena.io Forums&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://balena.io/etcher&#34;&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/SUPPORT.md&#34;&gt;&lt;strong&gt;Support&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/docs/USER-DOCUMENTATION.md&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/docs/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/milestones&#34;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Operating Systems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (most distros)&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.10 (Yosemite) and later&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Windows 7 and later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Etcher will run on any platform officially supported by &lt;a href=&#34;https://electronjs.org/&#34;&gt;Electron&lt;/a&gt;. Read more in their &lt;a href=&#34;https://electronjs.org/docs/tutorial/support#supported-platforms&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installers&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://balena.io/etcher&#34;&gt;downloads page&lt;/a&gt; for the latest pre-made installers for all supported operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://cloudsmith.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OSS%20hosting%20by-cloudsmith-blue?logo=cloudsmith&amp;amp;style=for-the-badge&#34; alt=&#34;Hosted By: Cloudsmith&#34;&gt;&lt;/a&gt; &lt;br&gt; Package repository hosting is graciously provided by &lt;a href=&#34;https://cloudsmith.com&#34;&gt;Cloudsmith&lt;/a&gt;. Cloudsmith is the only fully hosted, cloud-native, universal package management solution, that enables your organization to create, store and share packages in any format, to any place, with total confidence.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Debian and Ubuntu based Package Repository (GNU/Linux x86/x64)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Detailed or alternative steps in the &lt;a href=&#34;https://cloudsmith.io/~balena/repos/etcher/setup/#formats-deb&#34;&gt;instructions by Cloudsmith&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Etcher Debian repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;   &#39;https://dl.cloudsmith.io/public/balena/etcher/setup.deb.sh&#39; \&#xA;   | sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update&#xA;sudo apt-get install balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get remove balena-etcher-electron&#xA;rm /etc/apt/sources.list.d/balena-etcher.list&#xA;apt-get clean&#xA;rm -rf /var/lib/apt/lists/*&#xA;apt-get update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redhat (RHEL) and Fedora-based Package Repository (GNU/Linux x86/x64)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Detailed or alternative steps in the &lt;a href=&#34;https://cloudsmith.io/~balena/repos/etcher/setup/#formats-rpm&#34;&gt;instructions by Cloudsmith&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;DNF&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Etcher rpm repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;   &#39;https://dl.cloudsmith.io/public/balena/etcher/setup.rpm.sh&#39; \&#xA;   | sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install -y balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h6&gt;Uninstall&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm /etc/yum.repos.d/balena-etcher.repo&#xA;rm /etc/yum.repos.d/balena-etcher-source.repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Yum&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Etcher rpm repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;   &#39;https://dl.cloudsmith.io/public/balena/etcher/setup.rpm.sh&#39; \&#xA;   | sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum install -y balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h6&gt;Uninstall&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum remove -y balena-etcher-electron&#xA;rm /etc/yum.repos.d/balena-etcher.repo&#xA;rm /etc/yum.repos.d/balena-etcher-source.repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenSUSE LEAP &amp;amp; Tumbleweed install (zypper)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;&#39;https://dl.cloudsmith.io/public/balena/etcher/setup.rpm.sh&#39; \&#xA;| sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo zypper up&#xA;sudo zypper install balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo zypper rm balena-etcher-electron&#xA;# remove the repo&#xA;sudo zypper rr balena-etcher&#xA;sudo zypper rr balena-etcher-source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Solus (GNU/Linux x64)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo eopkg it etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo eopkg rm etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch/Manjaro Linux (GNU/Linux x64)&lt;/h4&gt; &#xA;&lt;p&gt;Etcher is offered through the Arch User Repository and can be installed on both Manjaro and Arch systems. You can compile it from the source code in this repository using &lt;a href=&#34;https://aur.archlinux.org/packages/balena-etcher/&#34;&gt;&lt;code&gt;balena-etcher&lt;/code&gt;&lt;/a&gt;. The following example uses a common AUR helper to install the latest release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S balena-etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -R balena-etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Brew (macOS)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Etcher has to be updated manually to point to new versions, so it might not refer to the latest version immediately after an Etcher release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install balenaetcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew uninstall balenaetcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Chocolatey (Windows)&lt;/h4&gt; &#xA;&lt;p&gt;This package is maintained by &lt;a href=&#34;https://github.com/majkinetor&#34;&gt;@majkinetor&lt;/a&gt;, and is kept up to date automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco uninstall etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re having any problem, please &lt;a href=&#34;https://github.com/balena-io/etcher/issues/new&#34;&gt;raise an issue&lt;/a&gt; on GitHub, and the balena.io team will be happy to help.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Etcher is free software and may be redistributed under the terms specified in the &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/LICENSE&#34;&gt;license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mikro-orm/mikro-orm</title>
    <updated>2022-08-16T01:59:08Z</updated>
    <id>tag:github.com,2022-08-16:/mikro-orm/mikro-orm</id>
    <link href="https://github.com/mikro-orm/mikro-orm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript ORM for Node.js based on Data Mapper, Unit of Work and Identity Map patterns. Supports MongoDB, MySQL, MariaDB, PostgreSQL and SQLite databases.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://mikro-orm.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mikro-orm/mikro-orm/master/docs/static/img/logo-readme.svg?sanitize=true&#34; alt=&#34;MikroORM&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;TypeScript ORM for Node.js based on Data Mapper, &lt;a href=&#34;https://mikro-orm.io/docs/unit-of-work/&#34;&gt;Unit of Work&lt;/a&gt; and &lt;a href=&#34;https://mikro-orm.io/docs/identity-map/&#34;&gt;Identity Map&lt;/a&gt; patterns. Supports MongoDB, MySQL, MariaDB, PostgreSQL and SQLite databases.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Heavily inspired by &lt;a href=&#34;https://www.doctrine-project.org/&#34;&gt;Doctrine&lt;/a&gt; and &lt;a href=&#34;https://nextras.org/orm/&#34;&gt;Nextras Orm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@mikro-orm/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@mikro-orm/core.svg?sanitize=true&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@mikro-orm/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@mikro-orm/core/next.svg?sanitize=true&#34; alt=&#34;NPM dev version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/mikroorm/shared_invite/enQtNTM1ODYzMzM4MDk3LWM4ZDExMjU5ZDhmNjA2MmM3MWMwZmExNjhhNDdiYTMwNWM0MGY5ZTE3ZjkyZTMzOWExNDgyYmMzNDE1NDI5NjA&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20slack-blue.svg?sanitize=true&#34; alt=&#34;Chat on slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@mikro-orm/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@mikro-orm/core.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/mikro-orm/mikro-orm?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/mikro-orm/mikro-orm.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/mikro-orm/mikro-orm/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/27999651d3adc47cfa40/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mikro-orm/mikro-orm/actions?workflow=tests&#34;&gt;&lt;img src=&#34;https://github.com/mikro-orm/mikro-orm/workflows/tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤔 Unit of What?&lt;/h2&gt; &#xA;&lt;p&gt;You might be asking: &lt;em&gt;What the hell is Unit of Work and why should I care about it?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unit of Work maintains a list of objects (&lt;em&gt;entities&lt;/em&gt;) affected by a business transaction and coordinates the writing out of changes. &lt;a href=&#34;https://www.martinfowler.com/eaaCatalog/unitOfWork.html&#34;&gt;(Martin Fowler)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Identity Map ensures that each object (&lt;em&gt;entity&lt;/em&gt;) gets loaded only once by keeping every loaded object in a map. Looks up objects using the map when referring to them. &lt;a href=&#34;https://www.martinfowler.com/eaaCatalog/identityMap.html&#34;&gt;(Martin Fowler)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;So what benefits does it bring to us?&lt;/p&gt; &#xA;&lt;h3&gt;Implicit Transactions&lt;/h3&gt; &#xA;&lt;p&gt;First and most important implication of having Unit of Work is that it allows handling transactions automatically.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;em.flush()&lt;/code&gt;, all computed changes are queried inside a database transaction (if supported by given driver). This means that you can control the boundaries of transactions simply by calling &lt;code&gt;em.persistLater()&lt;/code&gt; and once all your changes are ready, calling &lt;code&gt;flush()&lt;/code&gt; will run them inside a transaction.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can also control the transaction boundaries manually via &lt;code&gt;em.transactional(cb)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const user = await em.findOneOrFail(User, 1);&#xA;user.email = &#39;foo@bar.com&#39;;&#xA;const car = new Car();&#xA;user.cars.add(car);&#xA;&#xA;// thanks to bi-directional cascading we only need to persist user entity&#xA;// flushing will create a transaction, insert new car and update user with new email&#xA;// as user entity is managed, calling flush() is enough&#xA;await em.flush();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ChangeSet based persistence&lt;/h3&gt; &#xA;&lt;p&gt;MikroORM allows you to implement your domain/business logic directly in the entities. To maintain always valid entities, you can use constructors to mark required properties. Let&#39;s define the &lt;code&gt;User&lt;/code&gt; entity used in previous example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@Entity()&#xA;export class User {&#xA;&#xA;  @PrimaryKey()&#xA;  id!: number;&#xA;&#xA;  @Property()&#xA;  name!: string;&#xA;&#xA;  @OneToOne()&#xA;  address?: Address;&#xA;&#xA;  @ManyToMany()&#xA;  cars = new Collection&amp;lt;Car&amp;gt;(this);&#xA;&#xA;  constructor(name: string) {&#xA;    this.name = name;&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now to create new instance of the &lt;code&gt;User&lt;/code&gt; entity, we are forced to provide the &lt;code&gt;name&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const user = new User(&#39;John Doe&#39;); // name is required to create new user instance&#xA;user.address = new Address(&#39;10 Downing Street&#39;); // address is optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your entities are loaded, make a number of synchronous actions on your entities, then call &lt;code&gt;em.flush()&lt;/code&gt;. This will trigger computing of change sets. Only entities (and properties) that were changed will generate database queries, if there are no changes, no transaction will be started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const user = await em.findOneOrFail(User, 1, [&#39;cars&#39;, &#39;address&#39;]);&#xA;user.title = &#39;Mr.&#39;;&#xA;user.address.street = &#39;10 Downing Street&#39;; // address is 1:1 relation of Address entity&#xA;user.cars.getItems().forEach(car =&amp;gt; car.forSale = true); // cars is 1:m collection of Car entities&#xA;const car = new Car(&#39;VW&#39;);&#xA;user.cars.add(car);&#xA;&#xA;// now we can flush all changes done to managed entities&#xA;await em.flush();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;em.flush()&lt;/code&gt; will then execute these queries from the example above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;begin;&#xA;update user set title = &#39;Mr.&#39; where id = 1;&#xA;update user_address set street = &#39;10 Downing Street&#39; where id = 123;&#xA;update car set for_sale = true where id = 1;&#xA;update car set for_sale = true where id = 2;&#xA;update car set for_sale = true where id = 3;&#xA;insert into car (brand, owner) values (&#39;VW&#39;, 1);&#xA;commit;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Only One Instance of Entity&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to Identity Map, you will always have only one instance of given entity in one context. This allows for some optimizations (skipping loading of already loaded entities), as well as comparison by identity (&lt;code&gt;ent1 === ent2&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;MikroORM v4 documentation, included in this repo in the root directory, is built with &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; and publicly hosted on GitHub Pages at &lt;a href=&#34;https://mikro-orm.io&#34;&gt;https://mikro-orm.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is also auto-generated &lt;a href=&#34;https://raw.githubusercontent.com/mikro-orm/mikro-orm/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; file based on commit messages (via &lt;code&gt;semantic-release&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can browse MikroORM v3 docs at &lt;a href=&#34;https://mikro-orm.io/docs/3.6/installation&#34;&gt;https://mikro-orm.io/docs/3.6/installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To upgrade to v4, please see the &lt;a href=&#34;https://mikro-orm.io/docs/upgrading-v3-to-v4&#34;&gt;upgrading guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;✨ Core Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/defining-entities/&#34;&gt;Clean and Simple Entity Definition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/identity-map/&#34;&gt;Identity Map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/entity-references/&#34;&gt;Entity References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/using-entity-constructors/&#34;&gt;Using Entity Constructors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/relationships/&#34;&gt;Modelling Relationships&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/collections/&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/unit-of-work/&#34;&gt;Unit of Work&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/transactions/&#34;&gt;Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/cascading/&#34;&gt;Cascading persist and remove&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/composite-keys/&#34;&gt;Composite and Foreign Keys as Primary Key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/filters/&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/query-builder/&#34;&gt;Using &lt;code&gt;QueryBuilder&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/nested-populate/&#34;&gt;Preloading Deeply Nested Structures via populate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/property-validation/&#34;&gt;Property Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/lifecycle-hooks/&#34;&gt;Lifecycle Hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/usage-with-js/&#34;&gt;Vanilla JS Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/schema-generator/&#34;&gt;Schema Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikro-orm.io/docs/entity-generator/&#34;&gt;Entity Generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Example Integrations&lt;/h2&gt; &#xA;&lt;p&gt;You can find example integrations for some popular frameworks in the &lt;a href=&#34;https://github.com/mikro-orm/mikro-orm-examples&#34;&gt;&lt;code&gt;mikro-orm-examples&lt;/code&gt; repository&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;TypeScript Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikro-orm/express-ts-example-app&#34;&gt;Express + MongoDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikro-orm/nestjs-example-app&#34;&gt;Nest + MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikro-orm/nestjs-realworld-example-app&#34;&gt;RealWorld example app (Nest + MySQL)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikro-orm/koa-ts-example-app&#34;&gt;Koa + SQLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/driescroons/mikro-orm-graphql-example&#34;&gt;GraphQL + PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PodaruDragos/inversify-example-app&#34;&gt;Inversify + PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonahallibone/mikro-orm-nextjs&#34;&gt;NextJS + MySQL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JavaScript Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikro-orm/express-js-example-app&#34;&gt;Express + MongoDB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introducing MikroORM, TypeScript data-mapper ORM with Identity Map &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;on &lt;a href=&#34;https://medium.com/dailyjs/introducing-mikro-orm-typescript-data-mapper-orm-with-identity-map-9ba58d049e02&#34;&gt;medium.com&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on &lt;a href=&#34;https://dev.to/b4nan/introducing-mikroorm-typescript-data-mapper-orm-with-identity-map-pc8&#34;&gt;dev.to&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Handling transactions and concurrency in MikroORM &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;on &lt;a href=&#34;https://medium.com/dailyjs/handling-transactions-and-concurrency-in-mikro-orm-ba80d0a65805&#34;&gt;medium.com&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on &lt;a href=&#34;https://dev.to/b4nan/handling-transactions-and-concurrency-in-mikroorm-2cfj&#34;&gt;dev.to&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MikroORM 3: Knex.js, CLI, Schema Updates, Entity Generator and more… &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;on &lt;a href=&#34;https://medium.com/dailyjs/mikro-orm-3-knex-js-cli-schema-updates-entity-generator-and-more-e51ecbbc508c&#34;&gt;medium.com&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on &lt;a href=&#34;https://dev.to/b4nan/mikroorm-3-knex-js-cli-schema-updates-entity-generator-and-more-3g56&#34;&gt;dev.to&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;First install the module via &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt; and do not forget to install the database driver as well:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Since v4, you should install the driver package, but not the db connector itself, e.g. install &lt;code&gt;@mikro-orm/sqlite&lt;/code&gt;, but not &lt;code&gt;sqlite3&lt;/code&gt; as that is already included in the driver package.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add @mikro-orm/core @mikro-orm/mongodb     # for mongo&#xA;yarn add @mikro-orm/core @mikro-orm/mysql       # for mysql/mariadb&#xA;yarn add @mikro-orm/core @mikro-orm/mariadb     # for mysql/mariadb&#xA;yarn add @mikro-orm/core @mikro-orm/postgresql  # for postgresql&#xA;yarn add @mikro-orm/core @mikro-orm/sqlite      # for sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i -s @mikro-orm/core @mikro-orm/mongodb     # for mongo&#xA;npm i -s @mikro-orm/core @mikro-orm/mysql       # for mysql/mariadb&#xA;npm i -s @mikro-orm/core @mikro-orm/mariadb     # for mysql/mariadb&#xA;npm i -s @mikro-orm/core @mikro-orm/postgresql  # for postgresql&#xA;npm i -s @mikro-orm/core @mikro-orm/sqlite      # for sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next you will need to enable support for &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/decorators.html&#34;&gt;decorators&lt;/a&gt; as well as &lt;code&gt;esModuleInterop&lt;/code&gt; in &lt;code&gt;tsconfig.json&lt;/code&gt; via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;experimentalDecorators&#34;: true,&#xA;&#34;emitDecoratorMetadata&#34;: true,&#xA;&#34;esModuleInterop&#34;: true,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then call &lt;code&gt;MikroORM.init&lt;/code&gt; as part of bootstrapping your app:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To access driver specific methods like &lt;code&gt;em.createQueryBuilder()&lt;/code&gt; we need to specify the driver type when calling &lt;code&gt;MikroORM.init()&lt;/code&gt;. Alternatively we can cast the &lt;code&gt;orm.em&lt;/code&gt; to &lt;code&gt;EntityManager&lt;/code&gt; exported from the driver package:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { EntityManager } from &#39;@mikro-orm/postgresql&#39;;&#xA;const em = orm.em as EntityManager;&#xA;const qb = em.createQueryBuilder(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import type { PostgreSqlDriver } from &#39;@mikro-orm/postgresql&#39;; // or any other SQL driver package&#xA;&#xA;const orm = await MikroORM.init&amp;lt;PostgreSqlDriver&amp;gt;({&#xA;  entities: [&#39;./dist/entities&#39;], // path to your JS entities (dist), relative to `baseDir`&#xA;  dbName: &#39;my-db-name&#39;,&#xA;  type: &#39;postgresql&#39;,&#xA;});&#xA;console.log(orm.em); // access EntityManager via `em` property&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are more ways to configure your entities, take a look at &lt;a href=&#34;https://mikro-orm.io/docs/installation/&#34;&gt;installation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Read more about all the possible configuration options in &lt;a href=&#34;https://mikro-orm.io/docs/configuration&#34;&gt;Advanced Configuration&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then you will need to fork entity manager for each request so their &lt;a href=&#34;https://mikro-orm.io/docs/identity-map/&#34;&gt;identity maps&lt;/a&gt; will not collide. To do so, use the &lt;code&gt;RequestContext&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const app = express();&#xA;&#xA;app.use((req, res, next) =&amp;gt; {&#xA;  RequestContext.create(orm.em, next);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You should register this middleware as the last one just before request handlers and before any of your custom middleware that is using the ORM. There might be issues when you register it before request processing middleware like &lt;code&gt;queryParser&lt;/code&gt; or &lt;code&gt;bodyParser&lt;/code&gt;, so definitely register the context after them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;More info about &lt;code&gt;RequestContext&lt;/code&gt; is described &lt;a href=&#34;https://mikro-orm.io/docs/identity-map/#request-context&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you can start defining your entities (in one of the &lt;code&gt;entities&lt;/code&gt; folders). This is how simple entity can look like in mongo driver:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;./entities/MongoBook.ts&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@Entity()&#xA;export class MongoBook {&#xA;&#xA;  @PrimaryKey()&#xA;  _id: ObjectID;&#xA;&#xA;  @SerializedPrimaryKey()&#xA;  id: string;&#xA;&#xA;  @Property()&#xA;  title: string;&#xA;&#xA;  @ManyToOne()&#xA;  author: Author;&#xA;&#xA;  @ManyToMany()&#xA;  tags = new Collection&amp;lt;BookTag&amp;gt;(this);&#xA;&#xA;  constructor(title: string, author: Author) {&#xA;    this.title = title;&#xA;    this.author = author;&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For SQL drivers, you can use &lt;code&gt;id: number&lt;/code&gt; PK:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;./entities/SqlBook.ts&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;@Entity()&#xA;export class SqlBook {&#xA;&#xA;  @PrimaryKey()&#xA;  id: number;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to use UUID primary keys:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;./entities/UuidBook.ts&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { v4 } from &#39;uuid&#39;;&#xA;&#xA;@Entity()&#xA;export class UuidBook {&#xA;&#xA;  @PrimaryKey()&#xA;  uuid = v4();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information can be found in &lt;a href=&#34;https://mikro-orm.io/docs/defining-entities/&#34;&gt;defining entities section&lt;/a&gt; in docs.&lt;/p&gt; &#xA;&lt;p&gt;When you have your entities defined, you can start using ORM either via &lt;code&gt;EntityManager&lt;/code&gt; or via &lt;code&gt;EntityRepository&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;To save entity state to database, you need to persist it. Persist takes care or deciding whether to use &lt;code&gt;insert&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; and computes appropriate change-set. Entity references that are not persisted yet (does not have identifier) will be cascade persisted automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// use constructors in your entities for required parameters&#xA;const author = new Author(&#39;Jon Snow&#39;, &#39;snow@wall.st&#39;);&#xA;author.born = new Date();&#xA;&#xA;const publisher = new Publisher(&#39;7K publisher&#39;);&#xA;&#xA;const book1 = new Book(&#39;My Life on The Wall, part 1&#39;, author);&#xA;book1.publisher = publisher;&#xA;const book2 = new Book(&#39;My Life on The Wall, part 2&#39;, author);&#xA;book2.publisher = publisher;&#xA;const book3 = new Book(&#39;My Life on The Wall, part 3&#39;, author);&#xA;book3.publisher = publisher;&#xA;&#xA;// just persist books, author and publisher will be automatically cascade persisted&#xA;await orm.em.persistAndFlush([book1, book2, book3]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fetch entities from database you can use &lt;code&gt;find()&lt;/code&gt; and &lt;code&gt;findOne()&lt;/code&gt; of &lt;code&gt;EntityManager&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const authors = orm.em.find(Author, {});&#xA;&#xA;for (const author of authors) {&#xA;  console.log(author); // instance of Author entity&#xA;  console.log(author.name); // Jon Snow&#xA;&#xA;  for (const book of author.books) { // iterating books collection&#xA;    console.log(book); // instance of Book entity&#xA;    console.log(book.title); // My Life on The Wall, part 1/2/3&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More convenient way of fetching entities from database is by using &lt;code&gt;EntityRepository&lt;/code&gt;, that carries the entity name so you do not have to pass it to every &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findOne&lt;/code&gt; calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const booksRepository = orm.em.getRepository(Book);&#xA;&#xA;// with sorting, limit and offset parameters, populating author references&#xA;const books = await booksRepository.find({ author: &#39;...&#39; }, [&#39;author&#39;], { title: QueryOrder.DESC }, 2, 1);&#xA;&#xA;// or with options object&#xA;const books = await booksRepository.find({ author: &#39;...&#39; }, { &#xA;  populate: [&#39;author&#39;],&#xA;  limit: 1,&#xA;  offset: 2,&#xA;  orderBy: { title: QueryOrder.DESC },&#xA;});&#xA;&#xA;console.log(books); // Book[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at docs about &lt;a href=&#34;https://mikro-orm.io/docs/entity-manager/&#34;&gt;working with &lt;code&gt;EntityManager&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://mikro-orm.io/docs/repositories/&#34;&gt;using &lt;code&gt;EntityRepository&lt;/code&gt; instead&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions, issues and feature requests are welcome. Please read &lt;a href=&#34;https://raw.githubusercontent.com/mikro-orm/mikro-orm/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on the process for submitting pull requests to us.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;👤 &lt;strong&gt;Martin Adámek&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/B4nan&#34;&gt;@B4nan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github: &lt;a href=&#34;https://github.com/b4nan&#34;&gt;@b4nan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of contributors who &lt;a href=&#34;https://github.com/mikro-orm/mikro-orm/contributors&#34;&gt;participated&lt;/a&gt; in this project.&lt;/p&gt; &#xA;&lt;h2&gt;Show Your Support&lt;/h2&gt; &#xA;&lt;p&gt;Please ⭐️ this repository if this project helped you!&lt;/p&gt; &#xA;&lt;h2&gt;📝 License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2018 &lt;a href=&#34;https://github.com/b4nan&#34;&gt;Martin Adámek&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/mikro-orm/mikro-orm/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>