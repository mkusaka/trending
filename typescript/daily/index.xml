<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-17T01:39:12Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>btc-vision/OP_20</title>
    <updated>2025-07-17T01:39:12Z</updated>
    <id>tag:github.com,2025-07-17:/btc-vision/OP_20</id>
    <link href="https://github.com/btc-vision/OP_20" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OP_20 example token&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deploying and Customizing an OP_20 Token on OP_NET&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Bitcoin-000?style=for-the-badge&amp;amp;logo=bitcoin&amp;amp;logoColor=white&#34; alt=&#34;Bitcoin&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/assembly%20script-%23000000.svg?style=for-the-badge&amp;amp;logo=assemblyscript&amp;amp;logoColor=white&#34; alt=&#34;AssemblyScript&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&amp;amp;logo=typescript&amp;amp;logoColor=white&#34; alt=&#34;TypeScript&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Node%20js-339933?style=for-the-badge&amp;amp;logo=nodedotjs&amp;amp;logoColor=white&#34; alt=&#34;NodeJS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/WebAssembly-654FF0?style=for-the-badge&amp;amp;logo=webassembly&amp;amp;logoColor=white&#34; alt=&#34;WebAssembly&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/npm-CB3837?style=for-the-badge&amp;amp;logo=npm&amp;amp;logoColor=white&#34; alt=&#34;NPM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square&#34; alt=&#34;code style: prettier&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure you have &lt;a href=&#34;https://nodejs.org/en/download/prebuilt-installer&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; installed on your computer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Step-by-Step Guide&lt;/h2&gt; &#xA;&lt;h3&gt;1. Install OP_WALLET Chrome Extension&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and install the &lt;a href=&#34;https://opnet.org&#34;&gt;OP_WALLET Chrome Extension&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set up the wallet and switch the network to Regtest.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Obtain Testnet Bitcoin&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you don&#39;t have any Regtest Bitcoin, get some from &lt;a href=&#34;https://faucet.opnet.org/&#34;&gt;this faucet&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. Download OP_20 Template Contract&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the &lt;a href=&#34;https://github.com/btc-vision/OP_20&#34;&gt;OP_20 template contract&lt;/a&gt; repository: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/btc-vision/OP_20.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Edit Token Details&lt;/h3&gt; &#xA;&lt;p&gt;This step is crucial for customizing your OP_20 token. You will need to adjust several key properties such as &lt;code&gt;maxSupply&lt;/code&gt;, &lt;code&gt;decimals&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;symbol&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Understanding Token Properties&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Here’s what each property means and how you can customize it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;maxSupply&lt;/code&gt;&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This defines the total supply of your token.&lt;/li&gt; &#xA; &lt;li&gt;It’s a &lt;code&gt;u256&lt;/code&gt; value representing the maximum number of tokens that will ever exist.&lt;/li&gt; &#xA; &lt;li&gt;The number should include the full number of decimals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: If you want a total supply of 1,000,000 tokens with 18 decimals, the value should be &lt;code&gt;1000000000000000000000000&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const maxSupply: u256 = u128.fromString(&#39;1000000000000000000000000&#39;).toU256(); // 1,000,000 tokens with 18 decimals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;decimals&lt;/code&gt;&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This property defines how divisible your token is.&lt;/li&gt; &#xA; &lt;li&gt;A value of &lt;code&gt;18&lt;/code&gt; means the token can be divided down to 18 decimal places, similar to how Ethereum handles its tokens.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const decimals: u8 = 18; // Your decimals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;name&lt;/code&gt; is a string representing the full name of your token.&lt;/li&gt; &#xA; &lt;li&gt;This will be displayed in wallets and exchanges.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const name: string = &#39;YourTokenName&#39;; // e.g., &#39;My Custom Token&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;symbol&lt;/code&gt;&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;symbol&lt;/code&gt; is a short string representing the ticker symbol of your token.&lt;/li&gt; &#xA; &lt;li&gt;Similar to how &#34;BTC&#34; represents Bitcoin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const symbol: string = &#39;SYM&#39;; // e.g., &#39;MYT&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Modifying the Contract Code&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Open the &lt;code&gt;OP_20&lt;/code&gt; template repository in your IDE or text editor and navigate to &lt;code&gt;src/contracts/MyToken.ts&lt;/code&gt;. Look for the following section in the &lt;code&gt;onInstantiated&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const maxSupply: u256 = u128.fromString(&#39;1000000000000000000000000&#39;).toU256(); // Your max supply&#xA;const decimals: u8 = 18; // Your decimals&#xA;const name: string = &#39;YourTokenName&#39;; // Your token name&#xA;const symbol: string = &#39;SYM&#39;; // Your token symbol&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify the values as needed for your token.&lt;/p&gt; &#xA;&lt;h3&gt;5. Install Dependencies and Build&lt;/h3&gt; &#xA;&lt;p&gt;After customizing your token&#39;s properties, build the contract:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your terminal and navigate to the location of the downloaded &lt;code&gt;OP_20&lt;/code&gt; template folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install&#xA;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After building, a &lt;code&gt;build&lt;/code&gt; folder will be created in the root of the &lt;code&gt;OP_20&lt;/code&gt; folder. Look for &lt;code&gt;[nameoftoken].wasm&lt;/code&gt; for the compiled contract.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;6. Deploy the Token Contract&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the OP_WALLET extension and select the &#34;deploy&#34; option.&lt;/li&gt; &#xA; &lt;li&gt;Drag your &lt;code&gt;.wasm&lt;/code&gt; file or click to choose it.&lt;/li&gt; &#xA; &lt;li&gt;Send your transaction to deploy the token contract onto Bitcoin with OP_NET.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;7. Add Liquidity on Motoswap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy the token address from your OP_WALLET.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://motoswap.org/pool&#34;&gt;Motoswap&lt;/a&gt; and paste your token address into the top or bottom box.&lt;/li&gt; &#xA; &lt;li&gt;Enter the amount of tokens you wish to add to the liquidity pool.&lt;/li&gt; &#xA; &lt;li&gt;Select the other side of the liquidity pair (e.g., WBTC) and enter the amount of tokens you wish to add.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Add Liquidity&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your token is now tradeable on Motoswap!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Customizing Your Token Further&lt;/h2&gt; &#xA;&lt;p&gt;Now that you&#39;ve set up the basic token properties, you can add additional functionality to your OP_20 token contract. Here are some common customizations:&lt;/p&gt; &#xA;&lt;h3&gt;Adding Custom Methods&lt;/h3&gt; &#xA;&lt;p&gt;To add custom functionality to your token, you can define new methods in your contract. For example, let&#39;s say you want to add an &#34;airdrop&#34; function that distributes tokens to multiple addresses.&lt;/p&gt; &#xA;&lt;h4&gt;Example: Airdrop Function&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;public override callMethod(method: Selector, calldata: Calldata): BytesWriter {&#xA;    switch (method) {&#xA;        case encodeSelector(&#39;airdrop()&#39;):&#xA;            return this.airdrop(calldata);&#xA;        default:&#xA;            return super.callMethod(method, calldata);&#xA;    }&#xA;}&#xA;&#xA;private airdrop(calldata: Calldata): BytesWriter {&#xA;    const drops: Map&amp;lt;Address, u256&amp;gt; = calldata.readAddressValueTuple();&#xA;&#xA;    const addresses: Address[] = drops.keys();&#xA;    for (let i: i32 = 0; i &amp;lt; addresses.length; i++) {&#xA;        const address = addresses[i];&#xA;        const amount = drops.get(address);&#xA;&#xA;        this._mint(address, amount);&#xA;    }&#xA;&#xA;    const writer: BytesWriter = new BytesWriter(BOOLEAN_BYTE_LENGTH);&#xA;    writer.writeBoolean(true);&#xA;&#xA;    return writer;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Overriding Methods&lt;/h3&gt; &#xA;&lt;p&gt;You may want to override some of the existing methods in the &lt;code&gt;DeployableOP_20&lt;/code&gt; base class. For example, you might want to add additional logic when minting tokens.&lt;/p&gt; &#xA;&lt;h4&gt;Example: Overriding &lt;code&gt;_mint&lt;/code&gt; Method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;protected _mint(to: Address, amount: u256): void {&#xA;    super._mint(to, amount);&#xA;&#xA;    // Add custom logic here&#xA;    Blockchain.log(`Minted ${amount.toString()} tokens to ${to.toString()}`); // Only work inside OP_NET Uint Test Framework&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating Events&lt;/h3&gt; &#xA;&lt;p&gt;Events in OP_NET allow you to emit signals that external observers can listen to. These are useful for tracking specific actions within your contract, such as token transfers or approvals.&lt;/p&gt; &#xA;&lt;h4&gt;Example: Transfer Event&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;class TransferEvent extends NetEvent {&#xA;    constructor(from: Address, to: Address, amount: u256) {&#xA;        const writer = new BytesWriter(ADDRESS_BYTE_LENGTH * 2 + U256_BYTE_LENGTH);&#xA;        writer.writeAddress(from);&#xA;        writer.writeAddress(to);&#xA;        writer.writeU256(amount);&#xA;        super(&#39;Transfer&#39;, writer);&#xA;    }&#xA;}&#xA;&#xA;class MyToken extends DeployableOP_20 {&#xA;    public transfer(to: Address, amount: u256): void {&#xA;        const from: Address = Blockchain.sender;&#xA;        this._mint(to, amount);&#xA;        this.emitEvent(new TransferEvent(from, to, amount));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implementing Additional Security Measures&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add more control over who can call certain methods or add advanced features like pausing token transfers, you can implement access control mechanisms.&lt;/p&gt; &#xA;&lt;h4&gt;Example: Only Owner Modifier&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;public mint(to: Address, amount: u256): void {&#xA;    this.onlyOwner(Blockchain.sender); // Restrict minting to the contract owner&#xA;    this._mint(to, amount);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Differences Between Solidity and AssemblyScript on OP_NET&lt;/h2&gt; &#xA;&lt;h3&gt;Constructor Behavior&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidity:&lt;/strong&gt; The constructor runs only once at the time of contract deployment and is used for initializing contract state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AssemblyScript on OP_NET:&lt;/strong&gt; The constructor runs every time the contract is instantiated. Use &lt;code&gt;onInstantiated()&lt;/code&gt; for initialization that should occur only once.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;State Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidity:&lt;/strong&gt; Variables declared at the contract level are automatically persistent and are stored in the contract&#39;s state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AssemblyScript on OP_NET:&lt;/strong&gt; Persistent state must be managed explicitly using storage classes like &lt;code&gt;StoredU256&lt;/code&gt;, &lt;code&gt;StoredBoolean&lt;/code&gt;, and &lt;code&gt;StoredString&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Method Overriding&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidity:&lt;/strong&gt; Method selectors are built-in, and overriding them is straightforward.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AssemblyScript on OP_NET:&lt;/strong&gt; Method selectors are manually defined using functions like &lt;code&gt;encodeSelector()&lt;/code&gt;, and method overriding is handled in &lt;code&gt;callMethod&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Event Handling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidity:&lt;/strong&gt; Events are declared and emitted using the &lt;code&gt;emit&lt;/code&gt; keyword.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AssemblyScript on OP_NET:&lt;/strong&gt; Events are custom classes derived from &lt;code&gt;NetEvent&lt;/code&gt; and are emitted using the &lt;code&gt;emitEvent&lt;/code&gt; function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Advanced Features&lt;/h2&gt; &#xA;&lt;h3&gt;Implementing Additional Custom Logic&lt;/h3&gt; &#xA;&lt;p&gt;The OPNet runtime allows you to implement complex logic in your token contract. For example, you can add functionality such as token freezing, custom transaction fees, or governance mechanisms.&lt;/p&gt; &#xA;&lt;p&gt;These features are implemented by extending the base &lt;code&gt;DeployableOP_20&lt;/code&gt; or &lt;code&gt;OP_20&lt;/code&gt; class and overriding its methods as needed.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Additional Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed explanations on specific topics related to the OPNet runtime, refer to the following documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btc-vision/btc-runtime/tree/main&#34;&gt;OPNet Runtime Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btc-vision/btc-runtime/raw/main/docs/Blockchain.md&#34;&gt;Blockchain.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btc-vision/btc-runtime/raw/main/docs/Contract.md&#34;&gt;Contract.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btc-vision/btc-runtime/raw/main/docs/Events.md&#34;&gt;Events.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btc-vision/btc-runtime/raw/main/docs/Pointers.md&#34;&gt;Pointers.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btc-vision/btc-runtime/raw/main/docs/Storage.md&#34;&gt;Storage.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License. View the full license &lt;a href=&#34;https://raw.githubusercontent.com/btc-vision/OP_20/main/LICENSE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kagent-dev/kagent</title>
    <updated>2025-07-17T01:39:12Z</updated>
    <id>tag:github.com,2025-07-17:/kagent-dev/kagent</id>
    <link href="https://github.com/kagent-dev/kagent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cloud Native Agentic AI | Discord: https://bit.ly/kagentdiscord&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/kagent-dev/kagent/main/img/icon-dark.svg&#34; alt=&#34;kagent&#34; width=&#34;400&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/kagent-dev/kagent/main/img/icon-light.svg&#34; alt=&#34;kagent&#34; width=&#34;400&#34;&gt; &#xA;  &lt;img alt=&#34;kagent&#34; src=&#34;https://raw.githubusercontent.com/kagent-dev/kagent/main/img/icon-light.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/kagent-dev/kagent/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/kagent-dev/kagent?style=flat&amp;amp;label=Latest%20version&#34; alt=&#34;Release&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/kagent-dev/kagent/actions/workflows/ci.yaml&#34;&gt; &lt;img src=&#34;https://github.com/kagent-dev/kagent/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34; height=&#34;20&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache2.0-brightgreen.svg?style=flat&#34; alt=&#34;License: Apache 2.0&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/kagent-dev/kagent&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/kagent-dev/kagent.svg?style=flat&amp;amp;logo=github&amp;amp;label=Stars&#34; alt=&#34;Stars&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://discord.gg/Fu3k65f2k3&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1346225185166065826?style=flat&amp;amp;label=Join%20Discord&amp;amp;color=6D28D9&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://deepwiki.com/kagent-dev/kagent&#34;&gt;&lt;img src=&#34;https://deepwiki.com/badge.svg?sanitize=true&#34; alt=&#34;Ask DeepWiki&#34;&gt;&lt;/a&gt; &#xA;  &lt;a href=&#34;https://codespaces.new/kagent-dev/kagent&#34;&gt; &lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in Github Codespaces&#34; style=&#34;max-width: 100%;&#34; height=&#34;20&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;kagent&lt;/strong&gt; is a Kubernetes native framework for building AI agents. Kubernetes is the most popular orchestration platform for running workloads, and &lt;strong&gt;kagent&lt;/strong&gt; makes it easy to build, deploy and manage AI agents in Kubernetes. The &lt;strong&gt;kagent&lt;/strong&gt; framework is designed to be easy to understand and use, and to provide a flexible and powerful way to build and manage AI agents.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kagent-dev/kagent/main/img/hero.png&#34; alt=&#34;Autogen Framework&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kagent.dev/docs/getting-started/quickstart&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kagent.dev/docs/introduction/installation&#34;&gt;Installation guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The kagent documentation is available at &lt;a href=&#34;https://kagent.dev/docs&#34;&gt;kagent.dev/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agents&lt;/strong&gt;: Agents are the main building block of kagent. They are a system prompt, a set of tools and agents, and an LLM configuration represented with a Kubernetes custom resource called &#34;Agent&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LLM Providers&lt;/strong&gt;: Kagent supports multiple LLM providers, including &lt;a href=&#34;https://kagent.dev/docs/supported-providers/openai&#34;&gt;OpenAI&lt;/a&gt;, &lt;a href=&#34;https://kagent.dev/docs/supported-providers/azure-openai&#34;&gt;Azure OpenAI&lt;/a&gt;, &lt;a href=&#34;https://kagent.dev/docs/supported-providers/anthropic&#34;&gt;Anthropic&lt;/a&gt;, &lt;a href=&#34;https://kagent.dev/docs/supported-providers/google-vertexai&#34;&gt;Google Vertex AI&lt;/a&gt;, &lt;a href=&#34;https://kagent.dev/docs/supported-providers/ollama&#34;&gt;Ollama&lt;/a&gt; and any other &lt;a href=&#34;https://kagent.dev/docs/supported-providers/custom-models&#34;&gt;custom providers and models&lt;/a&gt; accessible via AI gateways. Providers are represented by the ModelConfig resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MCP Tools&lt;/strong&gt;: Agents can connect to any MCP server that provides tools. Kagent comes with an MCP server with tools for Kubernetes, Istio, Helm, Argo, Prometheus, Grafana, Cilium and others. All tools are as Kubernetes custom resources (ToolServers) and can be used by multiple agents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Using the &lt;a href=&#34;https://kagent.dev/docs/concepts/memory&#34;&gt;memory&lt;/a&gt; your agents can always have access to the latest and most up to date information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;: Kagent supports &lt;a href=&#34;https://kagent.dev/docs/getting-started/tracing&#34;&gt;OpenTelemetry tracing&lt;/a&gt; which allows you to monitor what&#39;s happening with your agents and tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kubernetes Native&lt;/strong&gt;: Kagent is designed to be easy to understand and use, and to provide a flexible and powerful way to build and manage AI agents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Kagent is designed to be extensible, so you can add your own agents and tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Kagent is designed to be flexible, to suit any AI agent use case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Observable&lt;/strong&gt;: Kagent is designed to be observable, so you can monitor the agents and tools using all common monitoring frameworks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: Kagent is designed to be declarative, so you can define the agents and tools in a yaml file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testable&lt;/strong&gt;: Kagent is designed to be tested and debugged easily. This is especially important for AI agent applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The kagent framework is designed to be easy to understand and use, and to provide a flexible and powerful way to build and manage AI agents.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kagent-dev/kagent/main/img/arch.png&#34; alt=&#34;Autogen Framework&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Kagent has 4 core components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;: The controller is a Kubernetes controller that watches the kagent custom resources and creates the necessary resources to run the agents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UI&lt;/strong&gt;: The UI is a web UI that allows you to manage the agents and tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Engine&lt;/strong&gt;: The engine is a Python application that runs the agents and tools. The engine is built using &lt;a href=&#34;https://github.com/microsoft/autogen&#34;&gt;Autogen&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLI&lt;/strong&gt;: The CLI is a command line tool that allows you to manage the agents and tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;kagent&lt;/code&gt; is currently in active development. You can check out the full roadmap in the project Kanban board &lt;a href=&#34;https://github.com/orgs/kagent-dev/projects/3&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Local development&lt;/h2&gt; &#xA;&lt;p&gt;For instructions on how to run everything locally, see the &lt;a href=&#34;https://raw.githubusercontent.com/kagent-dev/kagent/main/DEVELOPMENT.md&#34;&gt;DEVELOPMENT.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For instructions on how to contribute to the kagent project, see the &lt;a href=&#34;https://raw.githubusercontent.com/kagent-dev/kagent/main/CONTRIBUTION.md&#34;&gt;CONTRIBUTION.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all contributors who are helping to make kagent better.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/kagent-dev/kagent/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=kagent-dev/kagent&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.star-history.com/#kagent-dev/kagent&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=kagent-dev/kagent&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=kagent-dev/kagent&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star history of kagent-dev/kagent over time&#34; src=&#34;https://api.star-history.com/svg?repos=kagent-dev/kagent&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>director-run/director</title>
    <updated>2025-07-17T01:39:12Z</updated>
    <id>tag:github.com,2025-07-17:/director-run/director</id>
    <link href="https://github.com/director-run/director" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Connect any LLM to any MCP server in seconds. Local-first. 100% free and open source.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Director&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;The simplest way to use MCP&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;code&gt;curl -LsSf https://director.run/install.sh | sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/director-run/director/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/director-run/director/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/director-run/director/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/director-run/director/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/director-run/director/workflows/Release/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@director.run/cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@director.run/cli.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;img src=&#34;https://github.com/director-run/director/raw/main/apps/docs/images/demo.gif&#34; width=&#34;100%&#34; alt=&#34;animated hello&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://director.run&#34;&gt;Director&lt;/a&gt; allows you to connect any MCP server to any LLM in seconds. It&#39;s local first, and 100% open source.&lt;/p&gt; &#xA;&lt;p&gt;More specifically, it&#39;s a gateway that proxies requests between MCP clients and servers. It supports all MCP transports natively and aggregates tools, prompts, and resources server-side while providing a unified client-side integration point. This abstraction eliminates MCP server management overhead, enabling you to focus on the work you want to do with your LLM rather than worrying about how MCP works or the best way to manage it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This project is under active development and is not yet stable &amp;amp; may contain bugs. Please see our &lt;a href=&#34;https://docs.director.run/project/contributing&#34;&gt;contributing&lt;/a&gt; if you&#39;d like to help.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The easiest way to install Director is using the quickstart commad. However you can learn about alternative installation methods (including running it in Docker) by reading &lt;a href=&#34;https://docs.director.run&#34;&gt;our documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -fsSL https://director.run/install | bash&#xA;$ director quickstart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting in Touch&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re using director, have any ideas, or just want to chat about MCP, we&#39;d love to chat:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://discord.gg/kWZGvWks&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send us an &lt;a href=&#34;mailto:hello@director.run&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Project Structure&lt;/h1&gt; &#xA;&lt;h3&gt;External Apps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/apps/cli/README.md&#34;&gt;&lt;code&gt;apps/cli&lt;/code&gt;&lt;/a&gt; - The Director command-line interface, the primary way to interact with Director. Distributed through &lt;a href=&#34;https://www.npmjs.com/package/@director.run/cli&#34;&gt;npm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/apps/docs/README.md&#34;&gt;&lt;code&gt;apps/docs&lt;/code&gt;&lt;/a&gt; - Project documentation hosted at &lt;a href=&#34;https://docs.director.run&#34;&gt;https://docs.director.run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/apps/registry/README.md&#34;&gt;&lt;code&gt;apps/registry&lt;/code&gt;&lt;/a&gt; - Backend for the Director registry hosted at &lt;a href=&#34;https://registry.director.run&#34;&gt;https://registry.director.run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/apps/sandbox/README.md&#34;&gt;&lt;code&gt;apps/sandbox&lt;/code&gt;&lt;/a&gt; - A tool for running Director (and all MCP servers) securely inside a VM. Apple Silicon only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Internal Packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/packages/client-configurator/README.md&#34;&gt;&lt;code&gt;packages/client-configurator&lt;/code&gt;&lt;/a&gt; - Library for managing MCP client configuration files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/packages/gateway/README.md&#34;&gt;&lt;code&gt;packages/gateway&lt;/code&gt;&lt;/a&gt; - Core gateway and proxy logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/packages/mcp/README.md&#34;&gt;&lt;code&gt;packages/mcp&lt;/code&gt;&lt;/a&gt; - Extensions to MCP SDK that add middleware functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/packages/utilities/README.md&#34;&gt;&lt;code&gt;packages/utilities&lt;/code&gt;&lt;/a&gt; - Shared utilities used across all packages and apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/packages/design/README.md&#34;&gt;&lt;code&gt;packages/design&lt;/code&gt;&lt;/a&gt; - Design system: reusable UI components, hooks, and styles for all Director apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/director-run/director/main/packages/typescript-config/README.md&#34;&gt;&lt;code&gt;packages/typescript-config&lt;/code&gt;&lt;/a&gt; - Shared TypeScript configuration for all packages and apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;This is a monorepo managed by &lt;a href=&#34;https://turbo.build/&#34;&gt;Turborepo&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>