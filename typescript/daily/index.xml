<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-21T01:36:50Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yesmore/vmail</title>
    <updated>2024-03-21T01:36:50Z</updated>
    <id>tag:github.com,2024-03-21:/yesmore/vmail</id>
    <link href="https://github.com/yesmore/vmail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual temporary email generator. üëâ vmail.dev&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VMAIL.DEV&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yesmore/vmail/main/README_zh.md&#34;&gt;‰∏≠ÊñáÊñáÊ°£&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Temporary email service build with email worker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Receiving emails (email worker)&lt;/li&gt; &#xA; &lt;li&gt;Display email (remix)&lt;/li&gt; &#xA; &lt;li&gt;Mail Storage (sqlite)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Worker receives email -&amp;gt; saves to database -&amp;gt; client queries email&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Screenshot demo&lt;/h2&gt; &#xA;&lt;p&gt;Here: &lt;a href=&#34;https://vmail.dev&#34;&gt;https://vmail.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://vmail.dev/preview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Self-hosted&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dash.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt; account (Email service)&lt;/li&gt; &#xA; &lt;li&gt;Domain name hosted on Cloudflare&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://turso.tech&#34;&gt;turso&lt;/a&gt; sqlite (a free plan available for personal use)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt; or &lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt; to deploy Remix app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.Register a &lt;a href=&#34;https://turso.tech&#34;&gt;turso&lt;/a&gt; account, create a database, and create an emails table&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;After registration, you will be prompted to create a database. I named it &lt;code&gt;vmail&lt;/code&gt; here,&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.inke.app/file/3773b481c78c9087140b1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, Create a table named &lt;code&gt;emails&lt;/code&gt;. Select your database, you will see the &#34;Edit Tables&#34; button, click and enter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.inke.app/file/d49086f9b450edd5a2cef.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Note: &lt;strong&gt;There is a plus button in the upper left corner, and I tried to click it without any prompts or effects, so I used the cli provided by turso to initialize the table.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Cli documents: &lt;a href=&#34;https://docs.turso.tech/cli/introduction&#34;&gt;https://docs.turso.tech/cli/introduction&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Linux (or mac/windows):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install (Remember to restart the terminal after installation)&#xA;curl -sSfL https://get.tur.so/install.sh | bash&#xA;&#xA;# Authenticate&#xA;turso auth login&#xA;&#xA;# Connect to your Turso database&#xA;turso db shell &amp;lt;database-name&amp;gt;&#xA;&#xA;# Copy sql script to run on the terminal (packages/database/drizzle/0000_sturdy_arclight.sql)&#xA;CREATE TABLE `emails` (&#xA; `id` text PRIMARY KEY NOT NULL,&#xA; `message_from` text NOT NULL,&#xA; `message_to` text NOT NULL,&#xA; `headers` text NOT NULL,&#xA; `from` text NOT NULL,&#xA; `sender` text,&#xA; `reply_to` text,&#xA; `delivered_to` text,&#xA; `return_path` text,&#xA; `to` text,&#xA; `cc` text,&#xA; `bcc` text,&#xA; `subject` text,&#xA; `message_id` text NOT NULL,&#xA; `in_reply_to` text,&#xA; `references` text,&#xA; `date` text,&#xA; `html` text,&#xA; `text` text,&#xA; `created_at` integer NOT NULL,&#xA; `updated_at` integer NOT NULL&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2.Deploy email workers&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/yesmore/vmail&#xA;&#xA;cd vmail&#xA;&#xA;# Install dependencies&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fill in the necessary environment variables in &lt;code&gt;vmail/apps/email-worker/wrangler.toml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TURSO_DB_AUTH_TOKEN (turso table info from step 1Ôºåclick &lt;code&gt;Generate Token&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TURSO_DB_URL (e.g. libsql://db-name.turso.io)&lt;/li&gt; &#xA; &lt;li&gt;EMAIL_DOMAIN (e.g. vmail.dev)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you don&#39;t do this step, you can add environment variables in the worker settings of Cloudflare&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then run cmds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd apps/email-worker&#xA;&#xA;# Node environment required&#xA;pnpm run deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.Configure email routing rules&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;Catch-all&lt;/code&gt; action to Send to Worker&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.inke.app/file/fa39163411cd35fad0a7f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4.Deploy Remix app on Vercel or fly.io&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ensure that the following environment variables (&lt;code&gt;.env.example&lt;/code&gt;) are prepared and filled in during deployment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COOKIES_SECRET (The encryption secret of the cookie, a random string is sufficient)&lt;/li&gt; &#xA; &lt;li&gt;TURNSTILE_KEY (Obtained from Cloudflare for website verification)&lt;/li&gt; &#xA; &lt;li&gt;TURNSTILE_SECRET&lt;/li&gt; &#xA; &lt;li&gt;TURSO_DB_RO_AUTH_TOKEN (Obtain database credentials from turso )&lt;/li&gt; &#xA; &lt;li&gt;TURSO_DB_URL&lt;/li&gt; &#xA; &lt;li&gt;EMAIL_DOMAIN (e.g. vmail.dev)&lt;/li&gt; &#xA; &lt;li&gt;EXPIRY_TIME (optional, default &lt;code&gt;86400&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vercel Project Settings (General):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.inke.app/file/573f842ccbefdf8daf319.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.inke.app/file/36c1566d8c27735bb097d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Local developmentÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd path-to/vmail/ # root directory&#xA;pnpm install&#xA;&#xA;# run on localhost:3000&#xA;pnpm run remix:dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5.Add DNS records to the corresponding platform in Cloudflare&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;e.g. vercel Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.inke.app/file/245b71636cd16afcf93c7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.inke.app/file/e10af19334fd6a13b7d2e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Done!&lt;/p&gt; &#xA;&lt;h2&gt;Community Group&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Âä†ÂæÆ‰ø° &lt;code&gt;yesmore_cc&lt;/code&gt; ÊãâËÆ®ËÆ∫Áæ§ (Â§áÊ≥® vmail)&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/d68kWCBDEs&#34;&gt;https://discord.gg/d68kWCBDEs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://img.inke.app/file/4bc1cb6681c3e5ff75150.jpg&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://img.inke.app/file/711501f1ee488b3423aff.jpg&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GNU General Public License v3.0&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#yesmore/vmail&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=yesmore/vmail&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inspired by smail.pw &amp;amp; email.ml&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>discord/embedded-app-sdk</title>
    <updated>2024-03-21T01:36:50Z</updated>
    <id>tag:github.com,2024-03-21:/discord/embedded-app-sdk</id>
    <link href="https://github.com/discord/embedded-app-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ The Discord Embedded App SDK lets you build rich, multiplayer experiences as Activities inside Discord.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;@discord/embedded-app-sdk&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/discord/embedded-app-sdk/main/assets/discord-embedded-apps.svg?sanitize=true&#34; alt=&#34;Discord Embedded App SDK&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3&gt;The Embedded App SDK enables you to build rich, multiplayer experiences inside Discord.&lt;/h3&gt; &#xA;&lt;p&gt;Activities are multiplayer games and social experiences in Discord. An Activity is a web application hosted in an iframe that can run within the Discord client on desktop, web, or mobile. The Embedded App SDK handles the communication between Discord and your iframed application.&lt;/p&gt; &#xA;&lt;p&gt;Read more about building Discord Activities with the Embedded App SDK on &lt;a href=&#34;https://discord.com/developers/docs/activities/overview&#34;&gt;https://discord.com/developers/docs/activities/overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.com/developers/docs/developer-tools/embedded-app-sdk&#34;&gt;Embedded App SDK Docs&lt;/a&gt;&lt;/strong&gt; - Get familiar with the Embedded App SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/discord/embedded-app-sdk/main/examples/&#34;&gt;Activity Examples&lt;/a&gt;&lt;/strong&gt; - Explore examples of Discord Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.com/invite/discord-developers&#34;&gt;Technical chat on Discord&lt;/a&gt;&lt;/strong&gt; - Join us and other devs at DDevs at &lt;code&gt;#activities-dev-help&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing this package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install @discord/embedded-app-sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the SDK, import it into your project and construct a new instance of the DiscordSDK class.&lt;/p&gt; &#xA;&lt;p&gt;Below is a minimal example of setting up the SDK. Visit &lt;a href=&#34;https://raw.githubusercontent.com/discord/embedded-app-sdk/main/examples/discord-activity-starter/README.md&#34;&gt;/examples/discord-activity-starter&lt;/a&gt; for a complete example application. See more info on environment variables (&lt;code&gt;YOUR_OAUTH2_CLIENT_ID&lt;/code&gt;, etc...) &lt;a href=&#34;https://discord.com/developers/docs/activities/building-an-activity#find-your-oauth2-credentials&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import {DiscordSDK} from &#39;@discord/embedded-app-sdk&#39;;&#xA;const discordSdk = new DiscordSDK(YOUR_OAUTH2_CLIENT_ID);&#xA;&#xA;async function setup() {&#xA;  // Wait for READY payload from the discord client&#xA;  await discordSdk.ready();&#xA;&#xA;  // Pop open the OAuth permission modal and request for access to scopes listed in scope array below&#xA;  const {code} = await discordSdk.commands.authorize({&#xA;    client_id: YOUR_OAUTH2_CLIENT_ID,&#xA;    response_type: &#39;code&#39;,&#xA;    state: &#39;&#39;,&#xA;    prompt: &#39;none&#39;,&#xA;    scope: [&#39;identify&#39;],&#xA;  });&#xA;&#xA;  // Retrieve an access_token from your application&#39;s server&#xA;  const response = await fetch(&#39;/api/token&#39;, {&#xA;    method: &#39;POST&#39;,&#xA;    headers: {&#xA;      &#39;Content-Type&#39;: &#39;application/json&#39;,&#xA;    },&#xA;    body: JSON.stringify({&#xA;      code,&#xA;    }),&#xA;  });&#xA;  const {access_token} = await response.json();&#xA;&#xA;  // Authenticate with Discord client (using the access_token)&#xA;  auth = await discordSdk.commands.authenticate({&#xA;    access_token,&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SDK development&lt;/h2&gt; &#xA;&lt;p&gt;Developing a new feature or patching a bug on the SDK? Check out &lt;a href=&#34;https://raw.githubusercontent.com/discord/embedded-app-sdk/main/docs/local-sdk-development.md&#34;&gt;this guide&lt;/a&gt; to learn how to set up your local dev environment.&lt;/p&gt; &#xA;&lt;h2&gt;Discord Developer Terms of Service &amp;amp; Developer Policy&lt;/h2&gt; &#xA;&lt;p&gt;Please note that while this SDK is licensed under the MIT License, the &lt;a href=&#34;https://discord.com/developers/docs/policies-and-agreements/developer-terms-of-service&#34;&gt;Discord Developer Terms of Service&lt;/a&gt; and &lt;a href=&#34;https://discord.com/developers/docs/policies-and-agreements/developer-policy&#34;&gt;Discord Developer Policy&lt;/a&gt; otherwise still apply to you and the applications you develop utilizing this SDK.&lt;/p&gt;</summary>
  </entry>
</feed>