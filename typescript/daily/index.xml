<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-23T01:36:34Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>github/docs</title>
    <updated>2024-12-23T01:36:34Z</updated>
    <id>tag:github.com,2024-12-23:/github/docs</id>
    <link href="https://github.com/github/docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The open-source repo for docs.github.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Docs &#xA; &lt;!-- omit in toc --&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/codespaces/new/?repo=github&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Build GitHub Docs On Codespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the documentation website code and Markdown source files for &lt;a href=&#34;https://docs.github.com&#34;&gt;docs.github.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GitHub&#39;s Docs team works on pre-production content in a private repo that regularly syncs with this public repo.&lt;/p&gt; &#xA;&lt;p&gt;Use the table of contents icon &lt;img alt=&#34;Table of contents icon&#34; src=&#34;https://raw.githubusercontent.com/github/docs/main/contributing/images/table-of-contents.png&#34; width=&#34;25&#34; height=&#34;25&#34;&gt; on the top right corner of this document to navigate to a specific section quickly.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We accept different types of contributions, including some that don&#39;t require you to write a single line of code. For detailed instructions on how to get started with our project, see &#34;&lt;a href=&#34;https://docs.github.com/en/contributing/collaborating-on-github-docs/about-contributing-to-github-docs&#34;&gt;About contributing to GitHub Docs&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;h3&gt;Ways to contribute&lt;/h3&gt; &#xA;&lt;p&gt;On the GitHub Docs site, you can contribute by clicking the &lt;strong&gt;Make a contribution&lt;/strong&gt; button at the bottom of the page to open a pull request for quick fixes like typos, updates, or link fixes.&lt;/p&gt; &#xA;&lt;p&gt;You can also contribute by creating a local environment or opening a Codespace. For more information, see &#34;&lt;a href=&#34;https://docs.github.com/en/contributing/setting-up-your-environment-to-work-on-github-docs&#34;&gt;Setting up your environment to work on GitHub Docs&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;img alt=&#34;Contribution call-to-action&#34; src=&#34;https://raw.githubusercontent.com/github/docs/main/contributing/images/contribution_cta.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;For more complex contributions, please open an issue using the most appropriate &lt;a href=&#34;https://github.com/github/docs/issues/new/choose&#34;&gt;issue template&lt;/a&gt; to describe the changes you&#39;d like to see.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for a way to contribute, you can scan through our &lt;a href=&#34;https://github.com/github/docs/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&#34;&gt;help wanted board&lt;/a&gt; to find open issues already approved for work.&lt;/p&gt; &#xA;&lt;h3&gt;And that&#39;s it!&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re having trouble with your GitHub account, contact &lt;a href=&#34;https://support.github.com&#34;&gt;Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s how you can easily become a member of the GitHub Docs community. &lt;span&gt;âœ¨&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;READMEs&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the README you&#39;re reading right now, this repo includes other READMEs that describe the purpose of each subdirectory in more detail:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/content/README.md&#34;&gt;content/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/content/graphql/README.md&#34;&gt;content/graphql/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/content/rest/README.md&#34;&gt;content/rest/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/contributing/README.md&#34;&gt;contributing/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/data/README.md&#34;&gt;data/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/data/reusables/README.md&#34;&gt;data/reusables/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/data/variables/README.md&#34;&gt;data/variables/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/src/README.md&#34;&gt;src/README.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The GitHub product documentation in the assets, content, and data folders are licensed under a &lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/LICENSE&#34;&gt;CC-BY license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All other code in this repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/github/docs/main/LICENSE-CODE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using the GitHub logos, be sure to follow the &lt;a href=&#34;https://github.com/logos&#34;&gt;GitHub logo guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks &lt;span&gt;ðŸ’œ&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for all your contributions and efforts towards improving the GitHub documentation. We thank you for being part of our &lt;span&gt;âœ¨&lt;/span&gt; community &lt;span&gt;âœ¨&lt;/span&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elizaOS/agent-twitter-client</title>
    <updated>2024-12-23T01:36:34Z</updated>
    <id>tag:github.com,2024-12-23:/elizaOS/agent-twitter-client</id>
    <link href="https://github.com/elizaOS/agent-twitter-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Twitter client for agents-- no API key necessary&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;agent-twitter-client&lt;/h1&gt; &#xA;&lt;p&gt;This is a modified version of &lt;a href=&#34;https://github.com/the-convocation/twitter-scraper&#34;&gt;@the-convocation/twitter-scraper&lt;/a&gt; with added functionality for sending tweets and retweets. This package does not require the Twitter API to use and will run in both the browser and server.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install agent-twitter-client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Configure environment variables for authentication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TWITTER_USERNAME=    # Account username&#xA;TWITTER_PASSWORD=    # Account password&#xA;TWITTER_EMAIL=       # Account email&#xA;PROXY_URL=           # HTTP(s) proxy for requests (necessary for browsers)&#xA;&#xA;# Twitter API v2 credentials for tweet and poll functionality&#xA;TWITTER_API_KEY=               # Twitter API Key&#xA;TWITTER_API_SECRET_KEY=        # Twitter API Secret Key&#xA;TWITTER_ACCESS_TOKEN=          # Access Token for Twitter API v2&#xA;TWITTER_ACCESS_TOKEN_SECRET=   # Access Token Secret for Twitter API v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting Twitter Cookies&lt;/h3&gt; &#xA;&lt;p&gt;It is important to use Twitter cookies to avoid sending a new login request to Twitter every time you want to perform an action.&lt;/p&gt; &#xA;&lt;p&gt;In your application, you will likely want to check for existing cookies. If cookies are not available, log in with user authentication credentials and cache the cookies for future use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const scraper = await getScraper({ authMethod: &#39;password&#39; });&#xA;&#xA;scraper.getCookies().then((cookies) =&amp;gt; {&#xA;  console.log(cookies);&#xA;  // Remove &#39;Cookies&#39; and save the cookies as a JSON array&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const scraper = new Scraper();&#xA;await scraper.login(&#39;username&#39;, &#39;password&#39;);&#xA;&#xA;// If using v2 functionality (currently required to support polls)&#xA;await scraper.login(&#xA;  &#39;username&#39;,&#xA;  &#39;password&#39;,&#xA;  &#39;email&#39;,&#xA;  &#39;appKey&#39;,&#xA;  &#39;appSecret&#39;,&#xA;  &#39;accessToken&#39;,&#xA;  &#39;accessSecret&#39;,&#xA;);&#xA;&#xA;const tweets = await scraper.getTweets(&#39;elonmusk&#39;, 10);&#xA;const tweetsAndReplies = scraper.getTweetsAndReplies(&#39;elonmusk&#39;);&#xA;const latestTweet = await scraper.getLatestTweet(&#39;elonmusk&#39;);&#xA;const tweet = await scraper.getTweet(&#39;1234567890123456789&#39;);&#xA;await scraper.sendTweet(&#39;Hello world!&#39;);&#xA;&#xA;// Create a poll&#xA;await scraper.sendTweetV2(&#xA;  `What&#39;s got you most hyped? Let us know! ðŸ¤–ðŸ’¸`,&#xA;  undefined,&#xA;  {&#xA;    poll: {&#xA;      options: [&#xA;        { label: &#39;AI Innovations ðŸ¤–&#39; },&#xA;        { label: &#39;Crypto Craze ðŸ’¸&#39; },&#xA;        { label: &#39;Both! ðŸŒŒ&#39; },&#xA;        { label: &#39;Neither for Me ðŸ˜…&#39; },&#xA;      ],&#xA;      durationMinutes: 120, // Duration of the poll in minutes&#xA;    },&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetching Specific Tweet Data (V2)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Fetch a single tweet with poll details&#xA;const tweet = await scraper.getTweetV2(&#39;1856441982811529619&#39;, {&#xA;  expansions: [&#39;attachments.poll_ids&#39;],&#xA;  pollFields: [&#39;options&#39;, &#39;end_datetime&#39;],&#xA;});&#xA;console.log(&#39;tweet&#39;, tweet);&#xA;&#xA;// Fetch multiple tweets with poll and media details&#xA;const tweets = await scraper.getTweetsV2(&#xA;  [&#39;1856441982811529619&#39;, &#39;1856429655215260130&#39;],&#xA;  {&#xA;    expansions: [&#39;attachments.poll_ids&#39;, &#39;attachments.media_keys&#39;],&#xA;    pollFields: [&#39;options&#39;, &#39;end_datetime&#39;],&#xA;    mediaFields: [&#39;url&#39;, &#39;preview_image_url&#39;],&#xA;  },&#xA;);&#xA;console.log(&#39;tweets&#39;, tweets);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Log in&#xA;await scraper.login(&#39;username&#39;, &#39;password&#39;);&#xA;&#xA;// Log out&#xA;await scraper.logout();&#xA;&#xA;// Check if logged in&#xA;const isLoggedIn = await scraper.isLoggedIn();&#xA;&#xA;// Get current session cookies&#xA;const cookies = await scraper.getCookies();&#xA;&#xA;// Set current session cookies&#xA;await scraper.setCookies(cookies);&#xA;&#xA;// Clear current cookies&#xA;await scraper.clearCookies();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Profile&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Get a user&#39;s profile&#xA;const profile = await scraper.getProfile(&#39;TwitterDev&#39;);&#xA;&#xA;// Get a user ID from their screen name&#xA;const userId = await scraper.getUserIdByScreenName(&#39;TwitterDev&#39;);&#xA;&#xA;// Get logged-in user&#39;s profile&#xA;const me = await scraper.me();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { SearchMode } from &#39;agent-twitter-client&#39;;&#xA;&#xA;// Search for recent tweets&#xA;const tweets = scraper.searchTweets(&#39;#nodejs&#39;, 20, SearchMode.Latest);&#xA;&#xA;// Search for profiles&#xA;const profiles = scraper.searchProfiles(&#39;John&#39;, 10);&#xA;&#xA;// Fetch a page of tweet results&#xA;const results = await scraper.fetchSearchTweets(&#39;#nodejs&#39;, 20, SearchMode.Top);&#xA;&#xA;// Fetch a page of profile results&#xA;const profileResults = await scraper.fetchSearchProfiles(&#39;John&#39;, 10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Relationships&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Get a user&#39;s followers&#xA;const followers = scraper.getFollowers(&#39;12345&#39;, 100);&#xA;&#xA;// Get who a user is following&#xA;const following = scraper.getFollowing(&#39;12345&#39;, 100);&#xA;&#xA;// Fetch a page of a user&#39;s followers&#xA;const followerResults = await scraper.fetchProfileFollowers(&#39;12345&#39;, 100);&#xA;&#xA;// Fetch a page of who a user is following&#xA;const followingResults = await scraper.fetchProfileFollowing(&#39;12345&#39;, 100);&#xA;&#xA;// Follow a user&#xA;const followUserResults = await scraper.followUser(&#39;elonmusk&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trends&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Get current trends&#xA;const trends = await scraper.getTrends();&#xA;&#xA;// Fetch tweets from a list&#xA;const listTweets = await scraper.fetchListTweets(&#39;1234567890&#39;, 50);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tweets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Get a user&#39;s tweets&#xA;const tweets = scraper.getTweets(&#39;TwitterDev&#39;);&#xA;&#xA;// Get a user&#39;s liked tweets&#xA;const likedTweets = scraper.getLikedTweets(&#39;TwitterDev&#39;);&#xA;&#xA;// Get a user&#39;s tweets and replies&#xA;const tweetsAndReplies = scraper.getTweetsAndReplies(&#39;TwitterDev&#39;);&#xA;&#xA;// Get tweets matching specific criteria&#xA;const timeline = scraper.getTweets(&#39;TwitterDev&#39;, 100);&#xA;const retweets = await scraper.getTweetsWhere(&#xA;  timeline,&#xA;  (tweet) =&amp;gt; tweet.isRetweet,&#xA;);&#xA;&#xA;// Get a user&#39;s latest tweet&#xA;const latestTweet = await scraper.getLatestTweet(&#39;TwitterDev&#39;);&#xA;&#xA;// Get a specific tweet by ID&#xA;const tweet = await scraper.getTweet(&#39;1234567890123456789&#39;);&#xA;&#xA;// Send a tweet&#xA;const sendTweetResults = await scraper.sendTweet(&#39;Hello world!&#39;);&#xA;&#xA;// Send a quote tweet - Media files are optional&#xA;const sendQuoteTweetResults = await scraper.sendQuoteTweet(&#39;Hello world!&#39;, &#39;1234567890123456789&#39;, [&#39;mediaFile1&#39;, &#39;mediaFile2&#39;]);&#xA;&#xA;// Retweet a tweet&#xA;const retweetResults = await scraper.retweet(&#39;1234567890123456789&#39;);&#xA;&#xA;// Like a tweet&#xA;const likeTweetResults = await scraper.likeTweet(&#39;1234567890123456789&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sending Tweets with Media&lt;/h2&gt; &#xA;&lt;h3&gt;Media Handling&lt;/h3&gt; &#xA;&lt;p&gt;The scraper requires media files to be processed into a specific format before sending:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Media must be converted to Buffer format&lt;/li&gt; &#xA; &lt;li&gt;Each media file needs its MIME type specified&lt;/li&gt; &#xA; &lt;li&gt;This helps the scraper distinguish between image and video processing models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Tweet with Media&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Example: Sending a tweet with media attachments&#xA;const mediaData = [&#xA;  {&#xA;    data: fs.readFileSync(&#39;path/to/image.jpg&#39;),&#xA;    mediaType: &#39;image/jpeg&#39;&#xA;  },&#xA;  {&#xA;    data: fs.readFileSync(&#39;path/to/video.mp4&#39;),&#xA;    mediaType: &#39;video/mp4&#39;&#xA;  }&#xA;];&#xA;&#xA;await scraper.sendTweet(&#39;Hello world!&#39;, undefined, mediaData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Media Types&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Image formats and their MIME types&#xA;const imageTypes = {&#xA;  &#39;.jpg&#39;:  &#39;image/jpeg&#39;,&#xA;  &#39;.jpeg&#39;: &#39;image/jpeg&#39;,&#xA;  &#39;.png&#39;:  &#39;image/png&#39;,&#xA;  &#39;.gif&#39;:  &#39;image/gif&#39;&#xA;};&#xA;&#xA;// Video format&#xA;const videoTypes = {&#xA;  &#39;.mp4&#39;: &#39;video/mp4&#39;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Media Upload Limitations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maximum 4 images per tweet&lt;/li&gt; &#xA; &lt;li&gt;Only 1 video per tweet&lt;/li&gt; &#xA; &lt;li&gt;Maximum video file size: 512MB&lt;/li&gt; &#xA; &lt;li&gt;Supported image formats: JPG, PNG, GIF&lt;/li&gt; &#xA; &lt;li&gt;Supported video format: MP4&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>