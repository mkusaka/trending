<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-09T01:46:16Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>catppuccin/wallpapers</title>
    <updated>2023-01-09T01:46:16Z</updated>
    <id>tag:github.com,2023-01-09:/catppuccin/wallpapers</id>
    <link href="https://github.com/catppuccin/wallpapers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üñºÔ∏è Wallpapers to match your Catppuccin setups!&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png&#34; width=&#34;100&#34; alt=&#34;Logo&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; Wallpapers &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png&#34; height=&#34;30&#34; width=&#34;0px&#34;&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/catppuccin/wallpapers/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/catppuccin/wallpapers?colorA=363a4f&amp;amp;colorB=b7bdf8&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/wallpapers/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/catppuccin/wallpapers?colorA=363a4f&amp;amp;colorB=f5a97f&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/catppuccin/wallpapers/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/catppuccin/wallpapers?colorA=363a4f&amp;amp;colorB=a6da95&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/wallpapers/main/minimalistic/flamingo_unicat.png&#34; style=&#34;border-radius:2%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üíù Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everyone who submits their wallpapers!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/footers/gray0_ctp_on_line.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Copyright ¬© 2021-present &lt;a href=&#34;https://github.com/catppuccin&#34; target=&#34;_blank&#34;&gt;Catppuccin Org&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/catppuccin/catppuccin/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=for-the-badge&amp;amp;label=License&amp;amp;message=MIT&amp;amp;logoColor=d9e0ee&amp;amp;colorA=363a4f&amp;amp;colorB=b7bdf8&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>compiler-explorer/compiler-explorer</title>
    <updated>2023-01-09T01:46:16Z</updated>
    <id>tag:github.com,2023-01-09:/compiler-explorer/compiler-explorer</id>
    <link href="https://github.com/compiler-explorer/compiler-explorer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run compilers interactively from your web browser and interact with the assembly&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/compiler-explorer/compiler-explorer/actions?query=workflow%3A%22Compiler+Explorer%22&#34;&gt;&lt;img src=&#34;https://github.com/compiler-explorer/compiler-explorer/workflows/Compiler%20Explorer/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/compiler-explorer/compiler-explorer&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/compiler-explorer/compiler-explorer/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/views/resources/site-logo.svg?sanitize=true&#34; alt=&#34;Compiler Explorer&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compiler Explorer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiler Explorer&lt;/strong&gt; is an interactive compiler exploration website. Edit code in C, C++, C#, F#, Rust, Go, D, Haskell, Swift, Pascal, &lt;a href=&#34;https://ispc.github.io/&#34;&gt;ispc&lt;/a&gt;, Python, Java or in any of the other &lt;a href=&#34;https://godbolt.org/api/languages&#34;&gt;30+ supported languages&lt;/a&gt;, and see how that code looks after being compiled in real time. Multiple compilers are supported for each language, many different tools and visualisations are available, and the UI layout is configurable (thanks to &lt;a href=&#34;https://www.golden-layout.com/&#34;&gt;GoldenLayout&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Try out at &lt;a href=&#34;https://godbolt.org&#34;&gt;godbolt.org&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/#running-a-local-instance&#34;&gt;run your own local instance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiler Explorer&lt;/strong&gt; follows a &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; which aims to foster an open and welcoming environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiler Explorer&lt;/strong&gt; was started in 2012 to show how C++ constructs translated to assembly code. It started out as a &lt;code&gt;tmux&lt;/code&gt; session with &lt;code&gt;vi&lt;/code&gt; running in one pane and &lt;code&gt;watch gcc -S foo.cc -o -&lt;/code&gt; running in the other.&lt;/p&gt; &#xA;&lt;p&gt;Since then, it has become a public website serving around &lt;a href=&#34;https://www.stathat.com/cards/Tk5csAWI0O7x&#34;&gt;3,000,000 compilations per week&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can financially support &lt;a href=&#34;https://patreon.com/mattgodbolt&#34;&gt;this project on Patreon&lt;/a&gt;, &lt;a href=&#34;https://github.com/sponsors/mattgodbolt/&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=KQWQZ7GPY2GZ6&amp;amp;item_name=Compiler+Explorer+development&amp;amp;currency_code=USD&amp;amp;source=url&#34;&gt;Paypal&lt;/a&gt;, or by buying cool gear on the &lt;a href=&#34;https://shop.spreadshirt.com/compiler-explorer/&#34;&gt;Compiler Explorer store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using Compiler Explorer&lt;/h2&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;There is now a FAQ section &lt;a href=&#34;https://github.com/compiler-explorer/compiler-explorer/wiki/FAQ&#34;&gt;in the repository wiki&lt;/a&gt;. If your question is not present, please contact us as described below, so we can help you. If you find that the FAQ is lacking some important point, please free to contribute to it and/or ask us to clarify it.&lt;/p&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of videos that showcase some features of Compiler Explorer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kIoZDUd5DKw&#34;&gt;Presentation for CppCon 2019 about the project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4_HL3PH4wDg&#34;&gt;Older 2 part series of videos&lt;/a&gt; which go into a bit more detail into the more obscure features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/QLolzolunJ4&#34;&gt;Just Enough Assembly for Compiler Explorer&lt;/a&gt;: Practical introduction to Assembly with a focus on usage on Compiler Explorer, from CppCon 2021.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL2HVqYf7If8dNYVN6ayjB06FPyhHCcnhG&#34;&gt;Playlist: Compiler Explorer&lt;/a&gt;: A collection of videos discussing Compiler Explorer; using it, installing it, what it&#39;s for, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/docs/Roadmap.md&#34;&gt;Road map&lt;/a&gt; is available which gives a little insight into the future plans for &lt;strong&gt;Compiler Explorer&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiler Explorer&lt;/strong&gt; is written in &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Assuming you have a compatible version of &lt;code&gt;node&lt;/code&gt; installed, on Linux simply running &lt;code&gt;make&lt;/code&gt; ought to get you up and running with an Explorer running on port 10240 on your local machine: &lt;a href=&#34;http://localhost:10240/&#34;&gt;http://localhost:10240/&lt;/a&gt;. If this doesn&#39;t work for you, please contact us, as we consider it important you can quickly and easily get running. Currently, &lt;strong&gt;Compiler Explorer&lt;/strong&gt; requires &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/CONTRIBUTING.md#node-version&#34;&gt;&lt;code&gt;node&lt;/code&gt; 16 &lt;em&gt;(LTS version)&lt;/em&gt;&lt;/a&gt; installed, either on the path or at &lt;code&gt;NODE_DIR&lt;/code&gt; (an environment variable or &lt;code&gt;make&lt;/code&gt; parameter).&lt;/p&gt; &#xA;&lt;p&gt;Running with &lt;code&gt;make EXTRA_ARGS=&#39;--language LANG&#39;&lt;/code&gt; will allow you to load &lt;code&gt;LANG&lt;/code&gt; exclusively, where &lt;code&gt;LANG&lt;/code&gt; is one for the language ids/aliases defined in &lt;code&gt;lib/languages.ts&lt;/code&gt;. For example, to only run &lt;strong&gt;Compiler Explorer&lt;/strong&gt; with C++ support, you&#39;d run &lt;code&gt;make EXTRA_ARGS=&#39;--language c++&#39;&lt;/code&gt;. The &lt;code&gt;Makefile&lt;/code&gt; will automatically install all the third party libraries needed to run; using &lt;code&gt;npm&lt;/code&gt; to install server-side and client side components.&lt;/p&gt; &#xA;&lt;p&gt;For development, we suggest using &lt;code&gt;make dev&lt;/code&gt; to enable some useful features, such as automatic reloading on file changes and shorter startup times.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;npm run dev&lt;/code&gt; to run if &lt;code&gt;make dev&lt;/code&gt; doesn&#39;t work on your machine.&lt;/p&gt; &#xA;&lt;p&gt;Some languages need extra tools to demangle them, e.g. &lt;code&gt;rust&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, or &lt;code&gt;haskell&lt;/code&gt;. Such tools are kept separately in the &lt;a href=&#34;https://github.com/compiler-explorer/compiler-explorer-tools&#34;&gt;tools repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Configuring compiler explorer is achieved via configuration files in the &lt;code&gt;etc/config&lt;/code&gt; directory. Values are &lt;code&gt;key=value&lt;/code&gt;. Options in a &lt;code&gt;{type}.local.properties&lt;/code&gt; file (where &lt;code&gt;{type}&lt;/code&gt; is &lt;code&gt;c++&lt;/code&gt; or similar) override anything in the &lt;code&gt;{type}.defaults.properties&lt;/code&gt; file. There is a &lt;code&gt;.gitignore&lt;/code&gt; file to ignore &lt;code&gt;*.local.*&lt;/code&gt; files, so these won&#39;t be checked into git, and you won&#39;t find yourself fighting with updated versions when you &lt;code&gt;git pull&lt;/code&gt;. For more information see &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/docs/AddingACompiler.md&#34;&gt;Adding a Compiler&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for detailed information about how you can contribute to &lt;strong&gt;Compiler Explorer&lt;/strong&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/docs&#34;&gt;docs&lt;/a&gt; folder for specific details regarding various things you might want to do, such as how to add new compilers or languages to the site.&lt;/p&gt; &#xA;&lt;h3&gt;Running a local instance&lt;/h3&gt; &#xA;&lt;p&gt;If you want to point it at your own GCC or similar binaries, either edit the &lt;code&gt;etc/config/LANG.defaults.properties&lt;/code&gt; or else make a new one with the name &lt;code&gt;LANG.local.properties&lt;/code&gt;, substituting &lt;code&gt;LANG&lt;/code&gt; as needed. &lt;code&gt;*.local.properties&lt;/code&gt; files have the highest priority when loading properties.&lt;/p&gt; &#xA;&lt;p&gt;When running in a corporate setting the URL shortening service can be replaced by an internal one if the default storage driver isn&#39;t appropriate for your environment. To do this, add a new module in &lt;code&gt;lib/shortener/myservice.js&lt;/code&gt; and set the &lt;code&gt;urlShortenService&lt;/code&gt; variable in configuration. This module should export a single function, see the &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/lib/shortener/tinyurl.js&#34;&gt;tinyurl module&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;h3&gt;RESTful API&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s a simple restful API that can be used to do compiles to asm and to list compilers.&lt;/p&gt; &#xA;&lt;p&gt;You can find the API documentation &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/docs/API.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;p&gt;We run a &lt;a href=&#34;https://discord.gg/B5WacA7&#34;&gt;Compiler Explorer Discord&lt;/a&gt;, which is a place to discuss using or developing Compiler Explorer. We also have a presence on the &lt;a href=&#34;https://cppalliance.org/slack/&#34;&gt;cpplang&lt;/a&gt; Slack channel &lt;code&gt;#compiler_explorer&lt;/code&gt; and we have &lt;a href=&#34;https://groups.google.com/forum/#!forum/compiler-explorer-discussion&#34;&gt;a public mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a development channel on the discord, and also a &lt;a href=&#34;https://groups.google.com/forum/#!forum/compiler-explorer-development&#34;&gt;development mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to raise an issue on &lt;a href=&#34;https://github.com/compiler-explorer/compiler-explorer/issues&#34;&gt;github&lt;/a&gt; or &lt;a href=&#34;mailto:matt@godbolt.org&#34;&gt;email Matt directly&lt;/a&gt; for more help.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiler Explorer&lt;/strong&gt; is maintained by the awesome people listed in the &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/AUTHORS.md&#34;&gt;AUTHORS&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;We would like to thank the contributors listed in the &lt;a href=&#34;https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS&lt;/a&gt; file, who have helped shape &lt;strong&gt;Compiler Explorer&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We would also like to specially thank these people for their contributions to &lt;strong&gt;Compiler Explorer&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/voxelf&#34;&gt;Gabriel Devillers&lt;/a&gt; (&lt;em&gt;while working for &lt;a href=&#34;http://www.kalrayinc.com/&#34;&gt;Kalray&lt;/a&gt;&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohanEngelen&#34;&gt;Johan Engelen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jsheard&#34;&gt;Joshua Sheard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndrewPardoe&#34;&gt;Andrew Pardoe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A number of &lt;a href=&#34;https://godbolt.org/#sponsors&#34;&gt;amazing sponsors&lt;/a&gt;, both individuals and companies, have helped fund and promote Compiler Explorer.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Jigsaw-Code/outline-server</title>
    <updated>2023-01-09T01:46:16Z</updated>
    <id>tag:github.com,2023-01-09:/Jigsaw-Code/outline-server</id>
    <link href="https://github.com/Jigsaw-Code/outline-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Outline Manager, developed by Jigsaw. The Outline Manager application creates and manages Outline servers, powered by Shadowsocks. It uses the Electron framework to offer support for Windows, macOS and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Outline Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Jigsaw-Code/outline-server/actions/workflows/build_and_test_debug.yml/badge.svg?branch=master&#34; alt=&#34;Build and Test&#34;&gt; &lt;a href=&#34;https://community.internetfreedomfestival.org/community/channels/outline-community&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Mattermost/Outline%20Community/blue&#34; alt=&#34;Mattermost&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/outlinevpn/&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Reddit/r%2Foutlinevpn/orange&#34; alt=&#34;Reddit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository has all the code needed to create and manage Outline servers on DigitalOcean. An Outline server runs instances of Shadowsocks proxies and provides an API used by the Outline Manager application.&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://getoutline.org&#34;&gt;https://getoutline.org&lt;/a&gt; for ready-to-use versions of the software. &lt;strong&gt;To join our Outline Community, &lt;a href=&#34;https://internetfreedomfestival.org/wiki/index.php/IFF_Mattermost&#34;&gt;sign up for the IFF Mattermost&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;The system comprises the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Outline Server&lt;/strong&gt;: a proxy server that runs a Shadowsocks instance for each access key and a REST API to manage the access keys. The Outline Server runs in a Docker container in the host machine.&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/shadowbox&#34;&gt;&lt;code&gt;src/shadowbox&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Outline Manager:&lt;/strong&gt; an &lt;a href=&#34;https://electronjs.org/&#34;&gt;Electron&lt;/a&gt; application that can create Outline Servers on the cloud and talks to their access key management API to manage who has access to the server.&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager&#34;&gt;&lt;code&gt;src/server_manager&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Metrics Server:&lt;/strong&gt; a REST service that the Outline Server talks to if the user opts-in to anonymous metrics sharing.&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/metrics_server&#34;&gt;&lt;code&gt;src/metrics_server&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;In order to build and run the code, you need the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node&lt;/a&gt; LTS (&lt;code&gt;lts/gallium&lt;/code&gt;, version &lt;code&gt;16.13.0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;NPM&lt;/a&gt; (version &lt;code&gt;8.1.0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Manager-specific &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.winehq.org/download&#34;&gt;Wine&lt;/a&gt;, if you would like to generate binaries for Windows.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Server-specific &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker&lt;/a&gt;, to build the Docker image and to run the integration test.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docker-compose&lt;/a&gt;, to run the integration test.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° NOTE: if you have &lt;code&gt;nvm&lt;/code&gt; installed, run &lt;code&gt;nvm use&lt;/code&gt; to switch to the correct node version!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://docs.npmjs.com/cli/v7/using-npm/workspaces/&#34;&gt;NPM workspaces&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build System&lt;/h2&gt; &#xA;&lt;p&gt;We have a very simple build system based on package.json scripts that are called using &lt;code&gt;npm run&lt;/code&gt; and a thin wrapper for what we call build &#34;actions&#34;.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve defined a package.json script called &lt;code&gt;action&lt;/code&gt; whose parameter is a relative path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run action $ACTION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will define a &lt;code&gt;run_action()&lt;/code&gt; function and call &lt;code&gt;${ACTION}.action.sh&lt;/code&gt;, which must exist. The called action script can use &lt;code&gt;run_action&lt;/code&gt; to call its dependencies. The $ACTION parameter is always resolved from the project root, regardless of the caller location.&lt;/p&gt; &#xA;&lt;p&gt;The idea of &lt;code&gt;run_action&lt;/code&gt; is to keep the build logic next to where the relevant code is. It also defines two environmental variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ROOT_DIR: the root directory of the project, as an absolute path.&lt;/li&gt; &#xA; &lt;li&gt;BUILD_DIR: where the build output should go, as an absolute path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è To find all the actions in this project, run &lt;code&gt;npm run action:list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Build output&lt;/h3&gt; &#xA;&lt;p&gt;Building creates the following directories under &lt;code&gt;build/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;web_app/&lt;/code&gt;: The Manager web app. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;static/&lt;/code&gt;: The standalone web app static files. This is what one deploys to a web server or runs with Electron.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;electron_app/&lt;/code&gt;: The launcher desktop Electron app &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;static/&lt;/code&gt;: The Manager Electron app to run with the electron command-line&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bundled/&lt;/code&gt;: The Electron app bundled to run standalone on each platform&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;packaged/&lt;/code&gt;: The Electron app bundles packaged as single files for distribution&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;invite_page&lt;/code&gt;: the Invite Page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;static&lt;/code&gt;: The standalone static files to be deployed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shadowbox&lt;/code&gt;: The Proxy Server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The directories have subdirectories for intermediate output:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ts/&lt;/code&gt;: Autogenerated Typescript files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;js/&lt;/code&gt;: The output from compiling Typescript code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;browserified/&lt;/code&gt;: The output of browserifying the JavaScript code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To clean up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shadowsocks Resistance Against Detection and Blocking&lt;/h2&gt; &#xA;&lt;p&gt;Shadowsocks used to be blocked in some countries, and because Outline uses Shadowsocks, there has been skepticism about Outline working in those countries. In fact, people have tried Outline in the past and had their servers blocked.&lt;/p&gt; &#xA;&lt;p&gt;However, since the second half of 2020 things have changed. The Outline team and Shadowsocks community made a number of improvements that strengthened Shadowsocks beyond the censor&#39;s current capabilities.&lt;/p&gt; &#xA;&lt;p&gt;As shown in the research &lt;a href=&#34;https://gfw.report/talks/imc20/en/&#34;&gt;How China Detects and Blocks Shadowsocks&lt;/a&gt;, the censor uses active probing to detect Shadowsocks servers. The probing may be triggered by packet sniffing, but that&#39;s not how the servers are detected.&lt;/p&gt; &#xA;&lt;p&gt;Even though Shadowsocks is a standard, it leaves a lot of room for choices on how it&#39;s implemented and deployed.&lt;/p&gt; &#xA;&lt;p&gt;First of all, you &lt;strong&gt;must use AEAD ciphers&lt;/strong&gt;. The old stream ciphers are easy to break and manipulate, exposing you to simple detection and decryption attacks. Outline has banned all stream ciphers, since people copy old examples to set up their servers. The Outline Manager goes further and picks the cipher for you, since users don&#39;t usually know how to choose a cipher, and it generates a long random secret, so you are not vulnerable to dictionary-based attacks.&lt;/p&gt; &#xA;&lt;p&gt;Second, you need &lt;strong&gt;probing resistance&lt;/strong&gt;. Both shadowsocks-libev and Outline have added that. The research &lt;a href=&#34;https://www.ndss-symposium.org/ndss-paper/detecting-probe-resistant-proxies/&#34;&gt;Detecting Probe-resistant Proxies&lt;/a&gt; showed that, in the past, an invalid byte would trigger different behaviors whether it was inserted in positions 49, 50 or 51 of the stream, which is very telling. That behavior is now gone, and the censor can no longer rely on that.&lt;/p&gt; &#xA;&lt;p&gt;Third, you need &lt;strong&gt;protection against replayed data&lt;/strong&gt;. Both shadowsocks-libev and Outline have added such protection, which you may need to enable explicitly on ss-libev, but it&#39;s the default on Outline.&lt;/p&gt; &#xA;&lt;p&gt;Fourth, Outline and clients using shadowsocks-libev now &lt;strong&gt;merge the SOCKS address and the initial data&lt;/strong&gt; in the same initial encrypted frame, making the size of the first packet variable. Before the first packet only had the SOCKS address, with a fixed size, and that was a giveaway.&lt;/p&gt; &#xA;&lt;p&gt;The censors used to block Shadowsocks, but Shadowsocks has evolved, and in 2021, it was ahead again in the cat and mouse game.&lt;/p&gt; &#xA;&lt;p&gt;In 2022 China started blocking seemingly random traffic (&lt;a href=&#34;https://www.opentech.fund/news/exposing-the-great-firewalls-dynamic-blocking-of-fully-encrypted-traffic/&#34;&gt;report&lt;/a&gt;). While there is no evidence they could detect Shadowsocks, the protocol ended up blocked.&lt;/p&gt; &#xA;&lt;p&gt;As a reponse, we &lt;a href=&#34;https://github.com/Jigsaw-Code/outline-client/pull/1454&#34;&gt;added a feature to the Outline Client&lt;/a&gt; that allows service managers to specify in the access key a prefix to be used in the Shadowsocks initialization, which can be used to bypass the blocking in China.&lt;/p&gt; &#xA;&lt;p&gt;Shadowsocks remains our protocol of choice because it&#39;s simple, well understood and very performant. Furthermore, it has an enthusiastic community of very smart people behind it.&lt;/p&gt;</summary>
  </entry>
</feed>