<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-19T01:38:56Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openai/openai-realtime-agents</title>
    <updated>2025-05-19T01:38:56Z</updated>
    <id>tag:github.com,2025-05-19:/openai/openai-realtime-agents</id>
    <link href="https://github.com/openai/openai-realtime-agents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a simple demonstration of more advanced, agentic patterns built on top of the Realtime API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Realtime API Agents Demo&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple demonstration of more advanced, agentic patterns built on top of the Realtime API. In particular, this demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sequential agent handoffs according to a defined agent graph (taking inspiration from &lt;a href=&#34;https://github.com/openai/swarm&#34;&gt;OpenAI Swarm&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Background escalation to more intelligent models like o4-mini for high-stakes decisions&lt;/li&gt; &#xA; &lt;li&gt;Prompting models to follow a state machine, for example to accurately collect things like names and phone numbers with confirmation character by character to authenticate a user.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s a quick &lt;a href=&#34;https://x.com/OpenAIDevs/status/1880306081517432936&#34;&gt;demo video&lt;/a&gt; if you&#39;d like a walkthrough. You should be able to use this repo to prototype your own multi-agent realtime voice app in less than 20 minutes!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/public/screenshot.png&#34; alt=&#34;Screenshot of the Realtime API Agents Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a Next.js typescript app&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies with &lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add your &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; to your env. Either add it to your &lt;code&gt;.bash_profile&lt;/code&gt; or equivalent file, or copy &lt;code&gt;.env.sample&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and add it there.&lt;/li&gt; &#xA; &lt;li&gt;Start the server with &lt;code&gt;npm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open your browser to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to see the app. It should automatically connect to the &lt;code&gt;simpleExample&lt;/code&gt; Agent Set.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring Agents&lt;/h2&gt; &#xA;&lt;p&gt;Configuration in &lt;code&gt;src/app/agentConfigs/simpleExample.ts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { AgentConfig } from &#34;@/app/types&#34;;&#xA;import { injectTransferTools } from &#34;./utils&#34;;&#xA;&#xA;// Define agents&#xA;const haikuWriter: AgentConfig = {&#xA;  name: &#34;haikuWriter&#34;,&#xA;  publicDescription: &#34;Agent that writes haikus.&#34;, // Context for the agent_transfer tool&#xA;  instructions:&#xA;    &#34;Ask the user for a topic, then reply with a haiku about that topic.&#34;,&#xA;  tools: [],&#xA;};&#xA;&#xA;const greeter: AgentConfig = {&#xA;  name: &#34;greeter&#34;,&#xA;  publicDescription: &#34;Agent that greets the user.&#34;,&#xA;  instructions:&#xA;    &#34;Please greet the user and ask them if they&#39;d like a Haiku. If yes, transfer them to the &#39;haiku&#39; agent.&#34;,&#xA;  tools: [],&#xA;  downstreamAgents: [haikuWriter],&#xA;};&#xA;&#xA;// add the transfer tool to point to downstreamAgents&#xA;const agents = injectTransferTools([greeter, haikuWriter]);&#xA;&#xA;export default agents;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This fully specifies the agent set that was used in the interaction shown in the screenshot above.&lt;/p&gt; &#xA;&lt;h3&gt;Sequence Diagram of CustomerServiceRetail Flow&lt;/h3&gt; &#xA;&lt;p&gt;This diagram illustrates the interaction flow defined in &lt;code&gt;src/app/agentConfigs/customerServiceRetail/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Show CustomerServiceRetail Flow Diagram&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;    participant User&#xA;    participant WebClient as Next.js Client&#xA;    participant NextAPI as /api/session&#xA;    participant RealtimeAPI as OpenAI Realtime API&#xA;    participant AgentManager as Agents (authentication, returns, sales, simulatedHuman)&#xA;    participant o1mini as &#34;o4-mini&#34; (Escalation Model)&#xA;&#xA;    Note over WebClient: User navigates to ?agentConfig=customerServiceRetail&#xA;    User-&amp;gt;&amp;gt;WebClient: Open Page&#xA;    WebClient-&amp;gt;&amp;gt;NextAPI: GET /api/session&#xA;    NextAPI-&amp;gt;&amp;gt;RealtimeAPI: POST /v1/realtime/sessions&#xA;    RealtimeAPI-&amp;gt;&amp;gt;NextAPI: Returns ephemeral session&#xA;    NextAPI-&amp;gt;&amp;gt;WebClient: Returns ephemeral token (JSON)&#xA;&#xA;    Note right of WebClient: Start RTC handshake&#xA;    WebClient-&amp;gt;&amp;gt;RealtimeAPI: Offer SDP (WebRTC)&#xA;    RealtimeAPI-&amp;gt;&amp;gt;WebClient: SDP answer&#xA;    WebClient-&amp;gt;&amp;gt;WebClient: DataChannel &#34;oai-events&#34; established&#xA;&#xA;    Note over AgentManager: Default agent is &#34;authentication&#34;&#xA;    User-&amp;gt;&amp;gt;WebClient: &#34;Hi, I&#39;d like to return my snowboard.&#34;&#xA;    WebClient-&amp;gt;&amp;gt;AgentManager: conversation.item.create (role=user)&#xA;    WebClient-&amp;gt;&amp;gt;RealtimeAPI: {type: &#34;conversation.item.create&#34;}&#xA;    WebClient-&amp;gt;&amp;gt;RealtimeAPI: {type: &#34;response.create&#34;}&#xA;&#xA;    authentication-&amp;gt;&amp;gt;AgentManager: Requests user info, calls authenticate_user_information()&#xA;    AgentManager--&amp;gt;&amp;gt;WebClient: function_call =&amp;gt; name=&#34;authenticate_user_information&#34;&#xA;    WebClient-&amp;gt;&amp;gt;WebClient: handleFunctionCall =&amp;gt; verifies details&#xA;&#xA;    Note over AgentManager: After user is authenticated&#xA;    authentication-&amp;gt;&amp;gt;AgentManager: transferAgents(&#34;returns&#34;)&#xA;    AgentManager--&amp;gt;&amp;gt;WebClient: function_call =&amp;gt; name=&#34;transferAgents&#34; args={ destination: &#34;returns&#34; }&#xA;    WebClient-&amp;gt;&amp;gt;WebClient: setSelectedAgentName(&#34;returns&#34;)&#xA;&#xA;    Note over returns: The user wants to process a return&#xA;    returns-&amp;gt;&amp;gt;AgentManager: function_call =&amp;gt; checkEligibilityAndPossiblyInitiateReturn&#xA;    AgentManager--&amp;gt;&amp;gt;WebClient: function_call =&amp;gt; name=&#34;checkEligibilityAndPossiblyInitiateReturn&#34;&#xA;&#xA;    Note over WebClient: The WebClient calls /api/chat/completions with model=&#34;o4-mini&#34;&#xA;    WebClient-&amp;gt;&amp;gt;o1mini: &#34;Is this item eligible for return?&#34;&#xA;    o1mini-&amp;gt;&amp;gt;WebClient: &#34;Yes/No (plus notes)&#34;&#xA;&#xA;    Note right of returns: Returns uses the result from &#34;o4-mini&#34;&#xA;    returns-&amp;gt;&amp;gt;AgentManager: &#34;Return is approved&#34; or &#34;Return is denied&#34;&#xA;    AgentManager-&amp;gt;&amp;gt;WebClient: conversation.item.create (assistant role)&#xA;    WebClient-&amp;gt;&amp;gt;User: Displays final verdict&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Next steps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the configs in &lt;code&gt;src/app/agentConfigs&lt;/code&gt;. The example above is a minimal demo that illustrates the core concepts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/src/app/agentConfigs/frontDeskAuthentication&#34;&gt;frontDeskAuthentication&lt;/a&gt; Guides the user through a step-by-step authentication flow, confirming each value character-by-character, authenticates the user with a tool call, and then transfers to another agent. Note that the second agent is intentionally &#34;bored&#34; to show how to prompt for personality and tone.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/src/app/agentConfigs/customerServiceRetail&#34;&gt;customerServiceRetail&lt;/a&gt; Also guides through an authentication flow, reads a long offer from a canned script verbatim, and then walks through a complex return flow which requires looking up orders and policies, gathering user context, and checking with &lt;code&gt;o4-mini&lt;/code&gt; to ensure the return is eligible. To test this flow, say that you&#39;d like to return your snowboard and go through the necessary prompts!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Defining your own agents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can copy these to make your own multi-agent voice app! Once you make a new agent set config, add it to &lt;code&gt;src/app/agentConfigs/index.ts&lt;/code&gt; and you should be able to select it in the UI in the &#34;Scenario&#34; dropdown menu.&lt;/li&gt; &#xA; &lt;li&gt;To see how to define tools and toolLogic, including a background LLM call, see &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/src/app/agentConfigs/customerServiceRetail/returns.ts&#34;&gt;src/app/agentConfigs/customerServiceRetail/returns.ts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To see how to define a detailed personality and tone, and use a prompt state machine to collect user information step by step, see &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/src/app/agentConfigs/frontDeskAuthentication/authentication.ts&#34;&gt;src/app/agentConfigs/frontDeskAuthentication/authentication.ts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To see how to wire up Agents into a single Agent Set, see &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/src/app/agentConfigs/frontDeskAuthentication/index.ts&#34;&gt;src/app/agentConfigs/frontDeskAuthentication/index.ts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you want help creating your own prompt using these conventions, we&#39;ve included a metaprompt &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/src/app/agentConfigs/voiceAgentMetaprompt.txt&#34;&gt;here&lt;/a&gt;, or you can use our &lt;a href=&#34;https://chatgpt.com/g/g-678865c9fb5c81918fa28699735dd08e-voice-agent-metaprompt-gpt&#34;&gt;Voice Agent Metaprompter GPT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customizing Output Guardrails&lt;/h3&gt; &#xA;&lt;p&gt;Assistant messages are checked for safety and compliance using a guardrail function before being finalized in the transcript. This is implemented in &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-realtime-agents/main/src/app/hooks/useHandleServerEvent.ts&#34;&gt;&lt;code&gt;src/app/hooks/useHandleServerEvent.ts&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;processGuardrail&lt;/code&gt; function, which is invoked on each assistant message to run a moderation/classification check. You can review or customize this logic by editing the &lt;code&gt;processGuardrail&lt;/code&gt; function definition and its invocation inside &lt;code&gt;useHandleServerEvent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;UI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can select agent scenarios in the Scenario dropdown, and automatically switch to a specific agent with the Agent dropdown.&lt;/li&gt; &#xA; &lt;li&gt;The conversation transcript is on the left, including tool calls, tool call responses, and agent changes. Click to expand non-message elements.&lt;/li&gt; &#xA; &lt;li&gt;The event log is on the right, showing both client and server events. Click to see the full payload.&lt;/li&gt; &#xA; &lt;li&gt;On the bottom, you can disconnect, toggle between automated voice-activity detection or PTT, turn off audio playback, and toggle logs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Noah MacCallum - &lt;a href=&#34;https://x.com/noahmacca&#34;&gt;noahmacca&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ilan Bigio - &lt;a href=&#34;https://github.com/ibigio&#34;&gt;ibigio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>