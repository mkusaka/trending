<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-27T01:41:22Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>agno-agi/agent-ui</title>
    <updated>2025-05-27T01:41:22Z</updated>
    <id>tag:github.com,2025-05-27:/agno-agi/agent-ui</id>
    <link href="https://github.com/agno-agi/agent-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern chat interface for AI agents built with Next.js, Tailwind CSS, and TypeScript.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agent UI&lt;/h1&gt; &#xA;&lt;p&gt;A modern chat interface for AI agents built with Next.js, Tailwind CSS, and TypeScript. This template provides a ready-to-use UI for interacting with Agno agents.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/user-attachments/assets/7765fae5-a813-46cb-993b-904af9bc1672&#34; alt=&#34;agent-ui&#34; style=&#34;border-radius: 10px; width: 100%; max-width: 800px;&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üí¨ &lt;strong&gt;Modern Chat Interface&lt;/strong&gt;: Clean design with real-time streaming support&lt;/li&gt; &#xA; &lt;li&gt;üß© &lt;strong&gt;Tool Calls Support&lt;/strong&gt;: Visualizes agent tool calls and their results&lt;/li&gt; &#xA; &lt;li&gt;üß† &lt;strong&gt;Reasoning Steps&lt;/strong&gt;: Displays agent reasoning process (when available)&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;References Support&lt;/strong&gt;: Show sources used by the agent&lt;/li&gt; &#xA; &lt;li&gt;üñºÔ∏è &lt;strong&gt;Multi-modality Support&lt;/strong&gt;: Handles various content types including images, video, and audio&lt;/li&gt; &#xA; &lt;li&gt;üé® &lt;strong&gt;Customizable UI&lt;/strong&gt;: Built with Tailwind CSS for easy styling&lt;/li&gt; &#xA; &lt;li&gt;üß∞ &lt;strong&gt;Built with Modern Stack&lt;/strong&gt;: Next.js, TypeScript, shadcn/ui, Framer Motion, and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before setting up Agent UI, you may want to have an Agno Playground running. If you haven&#39;t set up the Agno Playground yet, follow the &lt;a href=&#34;https://agno.link/agent-ui#connect-to-local-agents&#34;&gt;official guide&lt;/a&gt; to run the Playground locally.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h3&gt;Automatic Installation (Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-agent-ui@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/agno-agi/agent-ui.git&#xA;cd agent-ui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start the development server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Connecting to an Agent Backend&lt;/h2&gt; &#xA;&lt;p&gt;By default Agent UI connects to &lt;code&gt;http://localhost:7777&lt;/code&gt;. You can easily change this by hovering over the endpoint URL and clicking the edit option.&lt;/p&gt; &#xA;&lt;p&gt;The default endpoint works with the standard Agno Playground setup described in the &lt;a href=&#34;https://agno.link/agent-ui#connect-to-local-agents&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see &lt;a href=&#34;https://raw.githubusercontent.com/agno-agi/agent-ui/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for contribution guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/agno-agi/agent-ui/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bytedance/flowgram.ai</title>
    <updated>2025-05-27T01:41:22Z</updated>
    <id>tag:github.com,2025-05-27:/bytedance/flowgram.ai</id>
    <link href="https://github.com/bytedance/flowgram.ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FlowGram is a node-based flow building engine that helps developers quickly create workflows in either fixed layout or free connection layout modes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlowGram.AI&lt;/h1&gt; &#xA;&lt;p&gt;FlowGram is a node-based flow building engine that helps developers quickly create workflows in either fixed layout or free connection layout modes. It provides a set of interaction best practices and is particularly suitable for visual workflows with clear inputs and outputs.&lt;/p&gt; &#xA;&lt;p&gt;In the current AI boom, we are also focusing on how to empower workflows with AI capabilities, hence the AI suffix in our name.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/bytedance/flowgram.ai/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/bytedance/flowgram.ai&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@flowgram.ai/editor&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/%40flowgram.ai%2Fcore&#34; alt=&#34;@flowgram.ai/editor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üìñ Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flowgram.ai/&#34;&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytedance/flowgram.ai/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Packages&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/flowgram.ai/main/apps/create-app&#34;&gt;@flowgram.ai/create-app&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;App Creator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@flowgram.ai/create-app&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@flowgram.ai/create-app.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/flowgram.ai/main/packages/client/fixed-layout-editor&#34;&gt;@flowgram.ai/fixed-layout-editor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fixed Layout Editor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@flowgram.ai/fixed-layout-editor&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@flowgram.ai/fixed-layout-editor.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/flowgram.ai/main/packages/client/free-layout-editor&#34;&gt;@flowgram.ai/free-layout-editor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free Layout Editor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/@flowgram.ai/free-layout-editor&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@flowgram.ai/free-layout-editor.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üéÆ Examples&lt;/h2&gt; &#xA;&lt;div&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://flowgram.ai/examples/fixed-layout/fixed-feature-overview.html&#34;&gt; Fixed Layout &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; Fixed layout where nodes can be dragged to specified positions, with support for compound nodes like branches and loops. &lt;/p&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bytedance/flowgram.ai/main/apps/docs/src/public/fixed-layout/fixed-layout-demo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://flowgram.ai/examples/free-layout/free-feature-overview.html&#34;&gt; Free Layout &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; Free layout where nodes can be placed anywhere and connected using free-form lines. &lt;/p&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bytedance/flowgram.ai/main/apps/docs/src/public/free-layout/free-layout-demo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create demo&#xA;npx @flowgram.ai/create-app@latest&#xA;&#xA;# in PowerShell&#xA;npx &#34;@flowgram.ai/create-app@latest&#34;&#xA;&#xA;# select demo&#xA;- fixed-layout # full-feature overview&#xA;- free-layout # full-feature overview&#xA;- fixed-layout-simple # basic usage&#xA;- free-layout-simple # basic usage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî® Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Node.js 18+&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install lts/hydrogen&#xA;nvm alias default lts/hydrogen # set default node version&#xA;nvm use lts/hydrogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:bytedance/flowgram.ai.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install required global dependencies&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g pnpm@9.12.0 @microsoft/rush@5.140.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install project dependencies&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rush update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build the project&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rush build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run docs or demo&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rush dev:docs # docs&#xA;rush dev:demo-fixed-layout&#xA;rush dev:demo-free-layout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, you can start to develop projects inside this repository.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy it!&lt;/p&gt; &#xA;&lt;h2&gt;Stats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/2b88f04ae1568daf1e49f77de99bb9d2fbe0d296.svg?sanitize=true&#34; alt=&#34;Repo Stats&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üåü Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bytedance/flowgram.ai/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=bytedance/flowgram.ai&#34; alt=&#34;FlowGram.AI Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üåü Contact us&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Issues: &lt;a href=&#34;https://github.com/bytedance/flowgram.ai/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lark: Scan the QR code below with &lt;a href=&#34;https://www.feishu.cn/en/&#34;&gt;Register Feishu&lt;/a&gt; to join our FlowGram user group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/bytedance/flowgram.ai/main/apps/docs/src/public/lark-group.png&#34; width=&#34;200&#34;&gt;</summary>
  </entry>
  <entry>
    <title>steel-dev/steel-browser</title>
    <updated>2025-05-27T01:41:22Z</updated>
    <id>tag:github.com,2025-05-27:/steel-dev/steel-browser</id>
    <link href="https://github.com/steel-dev/steel-browser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üî• Open Source Browser API for AI Agents &amp; Apps. Steel Browser is a batteries-included browser instance that lets you automate the web without worrying about infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://steel.dev&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/images/steel_header_logo.png&#34; alt=&#34;Steel Logo&#34; width=&#34;100&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;b&gt;Steel&lt;/b&gt;&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;The open-source browser API for AI agents &amp;amp; apps.&lt;/b&gt; &lt;br&gt; The best way to build live web agents and browser automation tools. &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/steel-dev/steel-browser/commits/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/steel-dev/steel-browser?color=yellow&#34; alt=&#34;Commit Activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/steel-dev/steel-browser/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/steel-dev/steel-browser?color=yellow&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/steel-dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1285696350117167226?label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/steeldotdev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/steeldotdev&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/steel-dev/steel-browser&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/steel-dev/steel-browser&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://app.steel.dev/sign-up&#34; target=&#34;_blank&#34;&gt; Get Started &lt;/a&gt; ¬∑ &lt;a href=&#34;https://docs.steel.dev/&#34; target=&#34;_blank&#34;&gt; Documentation &lt;/a&gt; ¬∑ &lt;a href=&#34;https://steel.dev/&#34; target=&#34;_blank&#34;&gt; Website &lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/steel-dev/steel-cookbook&#34; target=&#34;_blank&#34;&gt; Cookbook &lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/images/demo.gif&#34; alt=&#34;Steel Demo&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Highlights&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://steel.dev&#34;&gt;Steel.dev&lt;/a&gt; is an open-source browser API that makes it easy to build AI apps and agents that interact with the web. Instead of building automation infrastructure from scratch, you can focus on your AI application while Steel handles the complexity.&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, it manages sessions, pages, and browser processes, allowing you to perform complex browsing tasks programmatically without any of the headaches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Browser Control&lt;/strong&gt;: Uses Puppeteer and CDP for complete control over Chrome instances -- allowing you to connect using Puppeteer, Playwright, or Selenium.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Session Management&lt;/strong&gt;: Maintains browser state, cookies, and local storage across requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proxy Support&lt;/strong&gt;: Built-in proxy chain management for IP rotation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extension Support&lt;/strong&gt;: Load custom Chrome extensions for enhanced functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging Tools&lt;/strong&gt;: Built-in request logging and a UI to view/debug sessions with&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Anti-Detection&lt;/strong&gt;: Includes stealth plugins and fingerprint management&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource Management&lt;/strong&gt;: Automatic cleanup and browser lifecycle management&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Browser Tools&lt;/strong&gt;: Exposes APIs to quick convert pages to markdown, readability, screenshots, or PDFs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For detailed API documentation and examples, check out our &lt;a href=&#34;https://docs.steel.dev/api-reference&#34;&gt;API reference&lt;/a&gt; or explore the Swagger UI directly at &lt;code&gt;http://0.0.0.0:3000/documentation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Steel is in public beta and evolving every day. Your suggestions, ideas, and reported bugs help us immensely. Do not hesitate to join in the conversation on &lt;a href=&#34;https://discord.gg/steel-dev&#34;&gt;Discord&lt;/a&gt; or raise a GitHub issue. We read everything, respond to most, and love you.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you love open-source, AI, and dev tools, &lt;a href=&#34;https://steel-dev.notion.site/jobs-at-steel?pvs=74&#34;&gt;we&#39;re hiring across the stack&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;Make sure to give us a star ‚≠ê&lt;/h3&gt; &#xA;&lt;img width=&#34;200&#34; alt=&#34;Start us on Github!&#34; src=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/images/star_img.png&#34;&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started with Steel is by creating a &lt;a href=&#34;https://app.steel.dev&#34;&gt;Steel Cloud&lt;/a&gt; account. Otherwise, you can deploy this Steel browser instance to a cloud provider or run it locally.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö° Quick Deploy&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking to deploy to a cloud provider, we&#39;ve got you covered.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Deployment methods&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pre-built Docker Image (API only)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/steel-dev/steel-browser/pkgs/container/steel-browser-api&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GHCR-478CFF?style=for-the-badge&amp;amp;labelColor=478CFF&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Deploy with Github Container Redistry&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1-click deploy to Railway&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://railway.app/template/FQG9Ca&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Railway-B039CB?style=for-the-badge&amp;amp;labelColor=B039CB&amp;amp;logo=railway&amp;amp;logoColor=white&#34; alt=&#34;Deploy on Railway&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üíª Running Locally&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;The simplest way to run a Steel browser instance locally is to run the pre-built Docker images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone and build the Docker image&#xA;git clone https://github.com/steel-dev/steel-browser&#xA;cd steel-browser&#xA;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the Steel server on port 3000 (&lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;) and the UI on port 5173 (&lt;a href=&#34;http://localhost:5173&#34;&gt;http://localhost:5173&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can now create sessions, scrape pages, take screenshots, and more. Jump to the &lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/#usage&#34;&gt;Usage&lt;/a&gt; section for some quick examples on how you can do that.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart for Contributors&lt;/h2&gt; &#xA;&lt;p&gt;When developing locally, you will need to run the &lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/docker-compose.dev.yml&#34;&gt;&lt;code&gt;docker-compose.dev.yml&lt;/code&gt;&lt;/a&gt; file instead of the default &lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/docker-compose.yml&#34;&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt; file so that your local changes are reflected. Doing this will build the Docker images from the &lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/api&#34;&gt;&lt;code&gt;api&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/ui&#34;&gt;&lt;code&gt;ui&lt;/code&gt;&lt;/a&gt; directories and run the server and UI on port 3000 and 5173 respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose -f docker-compose.dev.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to run it with &lt;code&gt;--build&lt;/code&gt; to ensure the Docker images are re-built every time you make changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose -f docker-compose.dev.yml up --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you run on a custom host, you need to copy .env.example to .env while changing the host or modify the environment variables used by the &lt;code&gt;docker-compose.dev.yml&lt;/code&gt; to use your host.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, if you have Node.js and Chrome installed, you can run the server directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will also start the Steel server on port 3000 and the UI on port 5173.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have the Chrome executable installed and in one of these paths:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;/usr/bin/google-chrome&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MacOS&lt;/strong&gt;: &lt;code&gt;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;C:\Program Files\Google\Chrome\Application\chrome.exe&lt;/code&gt; OR&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom Chrome Executable&lt;/h4&gt; &#xA;&lt;p&gt;If you have a custom Chrome executable or a different path, you can set the &lt;code&gt;CHROME_EXECUTABLE_PATH&lt;/code&gt; environment variable to the path of your Chrome executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CHROME_EXECUTABLE_PATH=/path/to/your/chrome&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on where this is checked look at &lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/api/src/utils/browser.ts&#34;&gt;&lt;code&gt;api/src/utils/browser.ts&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üèÑüèΩ‚Äç‚ôÇÔ∏è Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re looking for quick examples on how to use Steel, check out the &lt;a href=&#34;https://github.com/steel-dev/steel-cookbook&#34;&gt;Cookbook&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Alternatively you can play with the &lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/repl/README.md&#34;&gt;REPL package&lt;/a&gt; too &lt;code&gt;cd repl&lt;/code&gt; and &lt;code&gt;npm run start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are two main ways to interact with the Steel browser API:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/#sessions&#34;&gt;Using Sessions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/#quick-actions-api&#34;&gt;Using the Quick Actions Endpoints&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In these examples, we assume your custom Steel API endpoint is &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The full REST API documentation can be found on your Steel instance at &lt;code&gt;/documentation&lt;/code&gt; (e.g., &lt;code&gt;http://localhost:3000/documentation&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Using the SDKs&lt;/h4&gt; &#xA;&lt;p&gt;If you prefer to use the our Python and Node SDKs, you can install the &lt;code&gt;steel-sdk&lt;/code&gt; package for Node or Python.&lt;/p&gt; &#xA;&lt;p&gt;These SDKs are built on top of the REST API and provide a more convenient way to interact with the Steel browser API. They are fully typed, and are compatible with both Steel Cloud and self-hosted Steel instances (changeable using the &lt;code&gt;baseUrl&lt;/code&gt; option on Node and &lt;code&gt;base_url&lt;/code&gt; on Python).&lt;/p&gt; &#xA;&lt;p&gt;For more details on installing and using the SDKs, please see the &lt;a href=&#34;https://docs.steel.dev/overview/reference/node-sdk-reference&#34;&gt;Node SDK Reference&lt;/a&gt; and the &lt;a href=&#34;https://docs.steel.dev/overview/reference/python-sdk-reference&#34;&gt;Python SDK Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sessions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;/sessions&lt;/code&gt; endpoint lets you relaunch the browser with custom options or extensions (e.g. with a custom proxy) and also reset the browser state. Perfect for complex, stateful workflows that need fine-grained control.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a session, you can use the session ID or the root URL to interact with the browser. To do this, you will need to use Puppeteer or Playwright. You can find some examples of how to use Puppeteer and Playwright with Steel in the docs below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.steel.dev/overview/guides/connect-with-puppeteer&#34;&gt;Puppeteer Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.steel.dev/overview/guides/connect-with-playwright-node&#34;&gt;Playwright with Node&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.steel.dev/overview/guides/connect-with-playwright-python&#34;&gt;Playwright with Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Creating a Session using the Node SDK&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import Steel from &#39;steel-sdk&#39;;&#xA;&#xA;const client = new Steel({&#xA;  baseUrl: &#34;http://localhost:3000&#34;, // Custom API Base URL override&#xA;});&#xA;&#xA;(async () =&amp;gt; {&#xA;  try {&#xA;    // Create a new browser session with custom options&#xA;    const session = await client.sessions.create({&#xA;      sessionTimeout: 1800000, // 30 minutes&#xA;      blockAds: true,&#xA;    });&#xA;    console.log(&#34;Created session with ID:&#34;, session.id);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error creating session:&#34;, error);&#xA;  }&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Creating a Session using the Python SDK&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;from steel import Steel&#xA;&#xA;client = Steel(&#xA;    base_url=&#34;http://localhost:3000&#34;,  # Custom API Base URL override&#xA;)&#xA;&#xA;try:&#xA;    # Create a new browser session with custom options&#xA;    session = client.sessions.create(&#xA;        session_timeout=1800000,  # 30 minutes&#xA;        block_ads=True,&#xA;    )&#xA;    print(&#34;Created session with ID:&#34;, session.id)&#xA;except Exception as e:&#xA;    print(&#34;Error creating session:&#34;, e)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Creating a Session using Curl&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Launch a new browser session&#xA;curl -X POST http://localhost:3000/v1/sessions \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;    &#34;options&#34;: {&#xA;      &#34;proxy&#34;: &#34;user:pass@host:port&#34;,&#xA;      // Custom launch options&#xA;    }&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Selenium Sessions&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This integration does not support all the features of the CDP-based browser sessions API.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For teams with existing Selenium workflows, the Steel browser provides a drop-in replacement that adds enhanced features while maintaining compatibility. You can simply use the &lt;code&gt;isSelenium&lt;/code&gt; option to create a Selenium session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// Using the Node SDK&#xA;const session = await client.sessions.create({ isSelenium: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Using the Python SDK&#xA;session = client.sessions.create(is_selenium=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Using Curl&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Launch a Selenium session&#xA;curl -X POST http://localhost:3000/v1/sessions \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;    &#34;options&#34;: {&#xA;      &#34;isSelenium&#34;: true,&#xA;      // Selenium-compatible options&#xA;    }&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;The Selenium API is fully compatible with Selenium&#39;s WebDriver protocol, so you can use any existing Selenium clients to connect to the Steel browser. &lt;strong&gt;For more details on using Selenium with Steel, refer to the &lt;a href=&#34;https://docs.steel.dev/overview/guides/connect-with-selenium&#34;&gt;Selenium Docs&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick Actions API&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;/scrape&lt;/code&gt;, &lt;code&gt;/screenshot&lt;/code&gt;, and &lt;code&gt;/pdf&lt;/code&gt; endpoints let you quickly extract clean, well-formatted data from any webpage using the running Steel server. Ideal for simple, read-only, on-demand jobs:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Scrape a Web Page&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Extract the HTML content of a web page.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Example using the Actions API&#xA;curl -X POST http://0.0.0.0:3000/v1/scrape \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;    &#34;url&#34;: &#34;https://example.com&#34;,&#xA;    &#34;waitFor&#34;: 1000&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Take a Screenshot&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Take a screenshot of a web page.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Example using the Actions API&#xA;curl -X POST http://0.0.0.0:3000/v1/screenshot \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;    &#34;url&#34;: &#34;https://example.com&#34;,&#xA;    &#34;fullPage&#34;: true&#xA;  }&#39; --output screenshot.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Download a PDF&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Download a PDF of a web page.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Example using the Actions API&#xA;curl -X POST http://0.0.0.0:3000/v1/pdf \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;    &#34;url&#34;: &#34;https://example.com&#34;,&#xA;    &#34;fullPage&#34;: true&#xA;  }&#39; --output output.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;Steel browser is an open-source project, and we welcome contributions!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Questions/ideas/feedback? Come hangout on &lt;a href=&#34;https://discord.gg/steel-dev&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Found a bug? Open an issue on &lt;a href=&#34;https://github.com/steel-dev/steel-browser/issues&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/steel-dev/steel-browser/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Made with ‚ù§Ô∏è by the Steel team.&lt;/p&gt;</summary>
  </entry>
</feed>