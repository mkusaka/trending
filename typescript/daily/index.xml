<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-27T01:41:08Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>supercorp-ai/supergateway</title>
    <updated>2025-03-27T01:41:08Z</updated>
    <id>tag:github.com,2025-03-27:/supercorp-ai/supergateway</id>
    <link href="https://github.com/supercorp-ai/supergateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run MCP stdio servers over SSE and SSE over stdio. AI gateway.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/supercorp-ai/supergateway/main/supergateway.png&#34; alt=&#34;Supergateway: Run stdio MCP servers over SSE and WS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supergateway&lt;/strong&gt; runs &lt;strong&gt;MCP stdio-based servers&lt;/strong&gt; over &lt;strong&gt;SSE (Server-Sent Events)&lt;/strong&gt; or &lt;strong&gt;WebSockets (WS)&lt;/strong&gt; with one command. This is useful for remote access, debugging, or connecting to clients when your MCP server only supports stdio.&lt;/p&gt; &#xA;&lt;p&gt;Supported by &lt;a href=&#34;https://supermachine.ai&#34;&gt;Supermachine&lt;/a&gt; (hosted MCPs), &lt;a href=&#34;https://superinterface.ai&#34;&gt;Superinterface&lt;/a&gt;, and &lt;a href=&#34;https://supercorp.ai&#34;&gt;Supercorp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run Supergateway via &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y supergateway --stdio &#34;uvx mcp-server-git&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--stdio &#34;command&#34;&lt;/code&gt;&lt;/strong&gt;: Command that runs an MCP server over stdio&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--sse &#34;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&#34;&lt;/code&gt;&lt;/strong&gt;: SSE URL to connect to (SSE→stdio mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--outputTransport stdio | sse | ws&lt;/code&gt;&lt;/strong&gt;: Output MCP transport (default: &lt;code&gt;sse&lt;/code&gt; with &lt;code&gt;--stdio&lt;/code&gt;, &lt;code&gt;stdio&lt;/code&gt; with &lt;code&gt;--sse&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--port 8000&lt;/code&gt;&lt;/strong&gt;: Port to listen on (stdio→SSE or stdio→WS mode, default: &lt;code&gt;8000&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--baseUrl &#34;http://localhost:8000&#34;&lt;/code&gt;&lt;/strong&gt;: Base URL for SSE or WS clients (stdio→SSE mode; optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--ssePath &#34;/sse&#34;&lt;/code&gt;&lt;/strong&gt;: Path for SSE subscriptions (stdio→SSE mode, default: &lt;code&gt;/sse&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--messagePath &#34;/message&#34;&lt;/code&gt;&lt;/strong&gt;: Path for messages (stdio→SSE or stdio→WS mode, default: &lt;code&gt;/message&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--logLevel info | none&lt;/code&gt;&lt;/strong&gt;: Controls logging level (default: &lt;code&gt;info&lt;/code&gt;). Use &lt;code&gt;none&lt;/code&gt; to suppress all logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--cors&lt;/code&gt;&lt;/strong&gt;: Enable CORS (stdio→SSE or stdio→WS mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;--healthEndpoint /healthz&lt;/code&gt;&lt;/strong&gt;: Register one or more endpoints (stdio→SSE or stdio→WS mode; can be used multiple times) that respond with &lt;code&gt;&#34;ok&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;stdio → SSE&lt;/h2&gt; &#xA;&lt;p&gt;Expose an MCP stdio server as an SSE server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y supergateway \&#xA;    --stdio &#34;npx -y @modelcontextprotocol/server-filesystem ./my-folder&#34; \&#xA;    --port 8000 --baseUrl http://localhost:8000 \&#xA;    --ssePath /sse --messagePath /message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subscribe to events&lt;/strong&gt;: &lt;code&gt;GET http://localhost:8000/sse&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Send messages&lt;/strong&gt;: &lt;code&gt;POST http://localhost:8000/message&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SSE → stdio&lt;/h2&gt; &#xA;&lt;p&gt;Connect to a remote SSE server and expose locally via stdio:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y supergateway --sse &#34;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Useful for integrating remote SSE MCP servers into local command-line environments.&lt;/p&gt; &#xA;&lt;h2&gt;stdio → WS&lt;/h2&gt; &#xA;&lt;p&gt;Expose an MCP stdio server as a WebSocket server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y supergateway \&#xA;    --stdio &#34;npx -y @modelcontextprotocol/server-filesystem ./my-folder&#34; \&#xA;    --port 8000 --outputTransport ws --messagePath /message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebSocket endpoint&lt;/strong&gt;: &lt;code&gt;ws://localhost:8000/message&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example with MCP Inspector (stdio → SSE mode)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Supergateway&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y supergateway --port 8000 \&#xA;    --stdio &#34;npx -y @modelcontextprotocol/server-filesystem /Users/MyName/Desktop&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use MCP Inspector&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/inspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now list tools, resources, or perform MCP actions via Supergateway.&lt;/p&gt; &#xA;&lt;h2&gt;Using with ngrok&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt; to share your local MCP server publicly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y supergateway --port 8000 \&#xA;    --stdio &#34;npx -y @modelcontextprotocol/server-filesystem .&#34;&#xA;&#xA;# In another terminal:&#xA;ngrok http 8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ngrok provides a public URL for remote access.&lt;/p&gt; &#xA;&lt;h2&gt;Running with Docker&lt;/h2&gt; &#xA;&lt;p&gt;A Docker-based workflow avoids local Node.js setup. A ready-to-run Docker image is available here: &lt;a href=&#34;https://hub.docker.com/r/supercorp/supergateway&#34;&gt;supercorp/supergateway&lt;/a&gt;. Also on GHCR: &lt;a href=&#34;https://github.com/supercorp-ai/supergateway/pkgs/container/supergateway&#34;&gt;ghcr.io/supercorp-ai/supergateway&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using the Official Image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm -p 8000:8000 supercorp/supergateway \&#xA;    --stdio &#34;npx -y @modelcontextprotocol/server-filesystem /&#34; \&#xA;    --port 8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker pulls the image automatically. The MCP server runs in the container’s root directory (&lt;code&gt;/&lt;/code&gt;). You can mount host directories if needed.&lt;/p&gt; &#xA;&lt;h3&gt;Building the Image Yourself&lt;/h3&gt; &#xA;&lt;p&gt;Use provided Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t supergateway .&#xA;&#xA;docker run -it --rm -p 8000:8000 supergateway \&#xA;    --stdio &#34;npx -y @modelcontextprotocol/server-filesystem /&#34; \&#xA;    --port 8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using with Claude Desktop (SSE → stdio mode)&lt;/h2&gt; &#xA;&lt;p&gt;Claude Desktop can use Supergateway’s SSE→stdio mode.&lt;/p&gt; &#xA;&lt;h3&gt;NPX-based MCP Server Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;supermachineExampleNpx&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;-y&#34;,&#xA;        &#34;supergateway&#34;,&#xA;        &#34;--sse&#34;,&#xA;        &#34;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker-based MCP Server Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;supermachineExampleDocker&#34;: {&#xA;      &#34;command&#34;: &#34;docker&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;-i&#34;,&#xA;        &#34;--rm&#34;,&#xA;        &#34;supercorp/supergateway&#34;,&#xA;        &#34;--sse&#34;,&#xA;        &#34;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why MCP?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spec.modelcontextprotocol.io/&#34;&gt;Model Context Protocol&lt;/a&gt; standardizes AI tool interactions. Supergateway converts MCP stdio servers into SSE or WS services, simplifying integration and debugging with web-based or remote clients.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Supergateway emphasizes modularity:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically manages JSON-RPC versioning.&lt;/li&gt; &#xA; &lt;li&gt;Retransmits package metadata where possible.&lt;/li&gt; &#xA; &lt;li&gt;stdio→SSE or stdio→WS mode logs via standard output; SSE→stdio mode logs via stderr.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supercorp-ai/superargs&#34;&gt;Superargs&lt;/a&gt; - provide arguments to MCP servers during runtime.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Joffref&#34;&gt;@Joffref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeljguarino&#34;&gt;@michaeljguarino&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Issues and PRs welcome. Please open one if you encounter problems or have feature suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/supercorp-ai/supergateway/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wonderwhy-er/DesktopCommanderMCP</title>
    <updated>2025-03-27T01:41:08Z</updated>
    <id>tag:github.com,2025-03-27:/wonderwhy-er/DesktopCommanderMCP</id>
    <link href="https://github.com/wonderwhy-er/DesktopCommanderMCP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is MCP server for Claude that gives it terminal control, file system search and diff file editing capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Desktop Commander MCP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@wonderwhy-er/desktop-commander&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://smithery.ai/server/@wonderwhy-er/desktop-commander&#34;&gt;&lt;img src=&#34;https://smithery.ai/badge/@wonderwhy-er/desktop-commander&#34; alt=&#34;smithery badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/wonderwhyer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg?sanitize=true&#34; alt=&#34;Buy Me A Coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/kQ27sNnZr7&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join%20Discord-5865F2?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Short version. Two key things. Terminal commands and diff based file editing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/logo.png&#34; alt=&#34;Desktop Commander MCP&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://glama.ai/mcp/servers/zempur9oh4&#34;&gt; &lt;img width=&#34;380&#34; height=&#34;200&#34; src=&#34;https://glama.ai/mcp/servers/zempur9oh4/badge&#34; alt=&#34;Claude Desktop Commander MCP server&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#handling-long-running-commands&#34;&gt;Handling Long-Running Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#work-in-progress-and-todos&#34;&gt;Work in Progress and TODOs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#media&#34;&gt;Media links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is server that allows Claude desktop app to execute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP) + Built on top of &lt;a href=&#34;https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem&#34;&gt;MCP Filesystem Server&lt;/a&gt; to provide additional search and replace file editing capabilities .&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute terminal commands with output streaming&lt;/li&gt; &#xA; &lt;li&gt;Command timeout and background execution support&lt;/li&gt; &#xA; &lt;li&gt;Process management (list and kill processes)&lt;/li&gt; &#xA; &lt;li&gt;Session management for long-running commands&lt;/li&gt; &#xA; &lt;li&gt;Full filesystem operations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Read/write files&lt;/li&gt; &#xA;   &lt;li&gt;Create/list directories&lt;/li&gt; &#xA;   &lt;li&gt;Move files/directories&lt;/li&gt; &#xA;   &lt;li&gt;Search files&lt;/li&gt; &#xA;   &lt;li&gt;Get file metadata&lt;/li&gt; &#xA;   &lt;li&gt;Code editing capabilities:&lt;/li&gt; &#xA;   &lt;li&gt;Surgical text replacements for small changes&lt;/li&gt; &#xA;   &lt;li&gt;Full file rewrites for major changes&lt;/li&gt; &#xA;   &lt;li&gt;Multiple file support&lt;/li&gt; &#xA;   &lt;li&gt;Pattern-based replacements&lt;/li&gt; &#xA;   &lt;li&gt;vscode-ripgrep based recursive code or text search in folders&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, ensure you&#39;ve downloaded and installed the &lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude Desktop app&lt;/a&gt; and you have &lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;npm installed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Option 1: Installing via Smithery&lt;/h3&gt; &#xA;&lt;p&gt;To install Desktop Commander for Claude Desktop automatically via &lt;a href=&#34;https://smithery.ai/server/@wonderwhy-er/desktop-commander&#34;&gt;Smithery&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y @smithery/cli install @wonderwhy-er/desktop-commander --client claude&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Option 2: Install trough npx&lt;/h3&gt; &#xA;&lt;p&gt;Just run this in terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx @wonderwhy-er/desktop-commander setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart Claude if running&lt;/p&gt; &#xA;&lt;h3&gt;Option 3: Add to claude_desktop_config by hand&lt;/h3&gt; &#xA;&lt;p&gt;Add this entry to your claude_desktop_config.json (on Mac, found at ~/Library/Application\ Support/Claude/claude_desktop_config.json):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;desktop-commander&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;-y&#34;,&#xA;        &#34;@wonderwhy-er/desktop-commander&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart Claude if running&lt;/p&gt; &#xA;&lt;h3&gt;Option 4: Checkout locally&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone and build:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/wonderwhy-er/ClaudeComputerCommander.git&#xA;cd ClaudeComputerCommander&#xA;npm run setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart Claude if running&lt;/p&gt; &#xA;&lt;p&gt;The setup command will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA; &lt;li&gt;Build the server&lt;/li&gt; &#xA; &lt;li&gt;Configure Claude&#39;s desktop app&lt;/li&gt; &#xA; &lt;li&gt;Add MCP servers to Claude&#39;s config if needed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The server provides these tool categories:&lt;/p&gt; &#xA;&lt;h3&gt;Terminal Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;execute_command&lt;/code&gt;: Run commands with configurable timeout&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_output&lt;/code&gt;: Get output from long-running commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force_terminate&lt;/code&gt;: Stop running command sessions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list_sessions&lt;/code&gt;: View active command sessions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list_processes&lt;/code&gt;: View system processes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kill_process&lt;/code&gt;: Terminate processes by PID&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;block_command&lt;/code&gt;/&lt;code&gt;unblock_command&lt;/code&gt;: Manage command blacklist&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Filesystem Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;read_file&lt;/code&gt;/&lt;code&gt;write_file&lt;/code&gt;: File operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_directory&lt;/code&gt;/&lt;code&gt;list_directory&lt;/code&gt;: Directory management&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;move_file&lt;/code&gt;: Move/rename files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;search_files&lt;/code&gt;: Pattern-based file search&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_file_info&lt;/code&gt;: File metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;code_search&lt;/code&gt;: Recursive ripgrep based text and code search&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Edit Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;edit_block&lt;/code&gt;: Apply surgical text replacements (best for changes &amp;lt;20% of file size)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;write_file&lt;/code&gt;: Complete file rewrites (best for large changes &amp;gt;20% or when edit_block fails)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Search/Replace Block Format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;filepath.ext&#xA;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; SEARCH&#xA;existing code to replace&#xA;=======&#xA;new code to insert&#xA;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; REPLACE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;src/main.js&#xA;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; SEARCH&#xA;console.log(&#34;old message&#34;);&#xA;=======&#xA;console.log(&#34;new message&#34;);&#xA;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; REPLACE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handling Long-Running Commands&lt;/h2&gt; &#xA;&lt;p&gt;For commands that may take a while:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;execute_command&lt;/code&gt; returns after timeout with initial output&lt;/li&gt; &#xA; &lt;li&gt;Command continues in background&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;read_output&lt;/code&gt; with PID to get new output&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;force_terminate&lt;/code&gt; to stop if needed&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Model Context Protocol Integration&lt;/h2&gt; &#xA;&lt;p&gt;This project extends the MCP Filesystem Server to enable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Local server support in Claude Desktop&lt;/li&gt; &#xA; &lt;li&gt;Full system command execution&lt;/li&gt; &#xA; &lt;li&gt;Process management&lt;/li&gt; &#xA; &lt;li&gt;File operations&lt;/li&gt; &#xA; &lt;li&gt;Code editing with search/replace blocks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Created as part of exploring Claude MCPs: &lt;a href=&#34;https://youtube.com/live/TlbjFDbl5Us&#34;&gt;https://youtube.com/live/TlbjFDbl5Us&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DONE&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;25-03-2025 Better code search&lt;/strong&gt; (&lt;a href=&#34;https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/17&#34;&gt;merged&lt;/a&gt;) - Enhanced code exploration with context-aware results&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Work in Progress and TODOs&lt;/h2&gt; &#xA;&lt;p&gt;The following features are currently being developed or planned:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Better configurations&lt;/strong&gt; (&lt;a href=&#34;https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/16&#34;&gt;in progress&lt;/a&gt;) - Improved settings for allowed paths, commands and shell environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows environment fixes&lt;/strong&gt; (&lt;a href=&#34;https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/13&#34;&gt;in progress&lt;/a&gt;) - Resolving issues specific to Windows platforms&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux improvements&lt;/strong&gt; (&lt;a href=&#34;https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/12&#34;&gt;in progress&lt;/a&gt;) - Enhancing compatibility with various Linux distributions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for WSL&lt;/strong&gt; - Windows Subsystem for Linux integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for SSH&lt;/strong&gt; - Remote server command execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Installation troubleshooting guide&lt;/strong&gt; - Comprehensive help for setup issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;Visit our official website at &lt;a href=&#34;https://desktopcommander.app/&#34;&gt;https://desktopcommander.app/&lt;/a&gt; for the latest information, documentation, and updates.&lt;/p&gt; &#xA;&lt;h2&gt;Media&lt;/h2&gt; &#xA;&lt;p&gt;Learn more about this project through these resources:&lt;/p&gt; &#xA;&lt;h3&gt;Article&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96&#34;&gt;Claude with MCPs replaced Cursor &amp;amp; Windsurf. How did that happen?&lt;/a&gt; - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.&lt;/p&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ly3bed99Dy8&#34;&gt;Claude Desktop Commander Video Tutorial&lt;/a&gt; - Watch how to set up and use the Commander effectively.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://discord.gg/7cbccwRp&#34;&gt;Discord server&lt;/a&gt; to get help, share feedback, and connect with other users.&lt;/p&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=UgyyBt6_ShdDX_rIOad4AaABAg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img.png&#34; alt=&#34;It&#39;s a life saver! I paid Claude + Cursor currently which I always feel it&#39;s kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It&#39;s so good when Cursor doesn&#39;t work sometimes or all the fast requests are used.&#34;&gt; https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=UgyyBt6_ShdDX_rIOad4AaABAg &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=UgztdHvDMqTb9jiqnf54AaABAg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_1.png&#34; alt=&#34;This is the first comment I&#39;ve ever left on a youtube video, THANK YOU! I&#39;ve been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn&#39;t get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing!&#34;&gt; https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=UgztdHvDMqTb9jiqnf54AaABAg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=UgyQFTmYLJ4VBwIlmql4AaABAg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_2.png&#34; alt=&#34;Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes loosing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost. Also this is much more than code editing it is much more thank you for great video!&#34;&gt; https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=UgyQFTmYLJ4VBwIlmql4AaABAg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=Ugy4-exy166_Ma7TH-h4AaABAg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_3.png&#34; alt=&#34;it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer.&#34;&gt; https://www.youtube.com/watch?v=ly3bed99Dy8&amp;amp;lc=Ugy4-exy166_Ma7TH-h4AaABAg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_4.png&#34; alt=&#34;You sir are my hero. You&#39;ve pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven&#39;t looked back since. Claude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I&#39;m not lol. 33 1&#34;&gt; https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions from the community! Whether you&#39;ve found a bug, have a feature request, or want to contribute code, here&#39;s how you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Found a bug?&lt;/strong&gt; Open an issue at &lt;a href=&#34;https://github.com/wonderwhy-er/ClaudeComputerCommander/issues&#34;&gt;github.com/wonderwhy-er/ClaudeComputerCommander/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a feature idea?&lt;/strong&gt; Submit a feature request in the issues section&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Want to contribute code?&lt;/strong&gt; Fork the repository, create a branch, and submit a pull request&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Questions or discussions?&lt;/strong&gt; Start a discussion in the GitHub Discussions tab&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All contributions, big or small, are greatly appreciated!&lt;/p&gt; &#xA;&lt;p&gt;If you find this tool valuable for your workflow, please consider &lt;a href=&#34;https://www.buymeacoffee.com/wonderwhyer&#34;&gt;supporting the project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>