<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-10T06:02:20Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>browser-use/workflow-use</title>
    <updated>2025-08-10T06:02:20Z</updated>
    <id>tag:github.com,2025-08-10:/browser-use/workflow-use</id>
    <link href="https://github.com/browser-use/workflow-use" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öôÔ∏è Create and run workflows (RPA 2.0)&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;img alt=&#34;Workflow Use logo - a product by Browser Use.&#34; src=&#34;https://raw.githubusercontent.com/browser-use/workflow-use/main/static/workflow-use.png&#34; width=&#34;full&#34; /&gt; &#xA;&lt;/picture&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Deterministic, Self Healing Workflows (RPA 2.0)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/browser-use/workflow-use/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/browser-use/workflow-use?style=social&#34; alt=&#34;GitHub stars&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://link.browser-use.com/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1303749220842340412?color=7289DA&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.browser-use.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Cloud-%E2%98%81%EF%B8%8F-blue&#34; alt=&#34;Cloud&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://x.com/gregpr07&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/Gregor?style=social&#34; alt=&#34;Twitter Follow&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://x.com/mamagnus00&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/Magnus?style=social&#34; alt=&#34;Twitter Follow&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚öôÔ∏è &lt;strong&gt;Workflow Use&lt;/strong&gt; is the easiest way to create and execute deterministic workflows with variables which fallback to &lt;a href=&#34;https://github.com/browser-use/browser-use&#34;&gt;Browser Use&lt;/a&gt; if a step fails. You just &lt;em&gt;show&lt;/em&gt; the recorder the workflow, we automatically generate the workflow.&lt;/p&gt; &#xA;&lt;p&gt;‚ùó This project is in very early development so we don&#39;t recommend using this in production. Lots of things will change and we don&#39;t have a release schedule yet. Originally, the project was born out of customer demand to make Browser Use more reliable and deterministic.&lt;/p&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/browser-use/workflow-use&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build the extension&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd extension &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup workflow environment&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd .. &amp;amp;&amp;amp; cd workflows&#xA;uv sync&#xA;source .venv/bin/activate # for mac / linux&#xA;playwright install chromium&#xA;cp .env.example .env # add your OPENAI_API_KEY to the .env file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run workflow as tool&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python cli.py run-as-tool examples/example.workflow.json --prompt &#34;fill the form with example data&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run workflow with predefined variables&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python cli.py run-workflow examples/example.workflow.json &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Record your own workflow&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python cli.py create-workflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See all commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python cli.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage from python&lt;/h1&gt; &#xA;&lt;p&gt;Running the workflow files is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from workflow_use import Workflow&#xA;&#xA;workflow = Workflow.load_from_file(&#34;example.workflow.json&#34;)&#xA;result = asyncio.run(workflow.run_as_tool(&#34;I want to search for &#39;workflow use&#39;&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Launch the GUI&lt;/h2&gt; &#xA;&lt;p&gt;The Workflow UI provides a visual interface for managing, viewing, and executing workflows.&lt;/p&gt; &#xA;&lt;h3&gt;Option 1: Using the CLI command (Recommended)&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to start the GUI is with the built-in CLI command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd workflows&#xA;python cli.py launch-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start the backend server (FastAPI)&lt;/li&gt; &#xA; &lt;li&gt;Start the frontend development server&lt;/li&gt; &#xA; &lt;li&gt;Automatically open &lt;a href=&#34;http://localhost:5173&#34;&gt;http://localhost:5173&lt;/a&gt; in your browser&lt;/li&gt; &#xA; &lt;li&gt;Capture logs to the &lt;code&gt;./tmp/logs&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Press Ctrl+C to stop both servers when you&#39;re done.&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Start servers separately&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can start the servers individually:&lt;/p&gt; &#xA;&lt;h4&gt;Start the backend server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd workflows&#xA;uvicorn backend.api:app --reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Start the frontend development server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ui&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once both servers are running, you can access the Workflow GUI at &lt;a href=&#34;http://localhost:5173&#34;&gt;http://localhost:5173&lt;/a&gt; in your browser. The UI allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visualize workflows as interactive graphs&lt;/li&gt; &#xA; &lt;li&gt;Execute workflows with custom input parameters&lt;/li&gt; &#xA; &lt;li&gt;Monitor workflow execution logs in real-time&lt;/li&gt; &#xA; &lt;li&gt;Edit workflow metadata and details&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Demos&lt;/h1&gt; &#xA;&lt;h2&gt;Workflow Use filling out form instantly&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/cf284e08-8c8c-484a-820a-02c507de11d4&#34;&gt;https://github.com/user-attachments/assets/cf284e08-8c8c-484a-820a-02c507de11d4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Gregor&#39;s explanation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/379e57c7-f03e-4eb9-8184-521377d5c0f9&#34;&gt;https://github.com/user-attachments/assets/379e57c7-f03e-4eb9-8184-521377d5c0f9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîÅ &lt;strong&gt;Record Once, Reuse Forever&lt;/strong&gt;: Record browser interactions once and replay them indefinitely.&lt;/li&gt; &#xA; &lt;li&gt;‚è≥ &lt;strong&gt;Show, don&#39;t prompt&lt;/strong&gt;: No need to spend hours prompting Browser Use to do the same thing over and over again.&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è &lt;strong&gt;Structured &amp;amp; Executable Workflows&lt;/strong&gt;: Converts recordings into deterministic, fast, and reliable workflows which automatically extract variables from forms.&lt;/li&gt; &#xA; &lt;li&gt;ü™Ñ &lt;strong&gt;Human-like Interaction Understanding&lt;/strong&gt;: Intelligently filters noise from recordings to create meaningful workflows.&lt;/li&gt; &#xA; &lt;li&gt;üîí &lt;strong&gt;Enterprise-Ready Foundation&lt;/strong&gt;: Built for future scalability with features like self-healing and workflow diffs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Vision and roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Show computer what it needs to do once, and it will do it over and over again without any human intervention.&lt;/p&gt; &#xA;&lt;h2&gt;Workflows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Nice way to use the &lt;code&gt;.json&lt;/code&gt; files inside python code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Improve LLM fallback when step fails (currently really bad)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Self healing, if it fails automatically agent kicks in and updates the workflow file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Better support for LLM steps&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Take output from previous steps and use it as input for next steps&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Expose workflows as MCP tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Use Browser Use to automatically create workflows from websites&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer experience&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Improve CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Improve extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Step editor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Agent&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Allow Browser Use to use the workflows as MCP tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Use workflows as website caching layer&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>