<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-04T01:42:44Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CrowdDotDev/crowd.dev</title>
    <updated>2023-10-04T01:42:44Z</updated>
    <id>tag:github.com,2023-10-04:/CrowdDotDev/crowd.dev</id>
    <link href="https://github.com/CrowdDotDev/crowd.dev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö°Ô∏è The developer data platform to centralize community, product, and customer data&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/CrowdDotDev/crowd.dev&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://github.com/CrowdDotDev/crowd.dev/assets/41432658/e5970c3a-095c-46ea-b93b-eb517bcd8a4f&#34; alt=&#34;crowd.dev icon&#34; width=&#34;120px&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;Effortlessly centralize community, product, and customer data&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://crowd.dev/sign-up&#34;&gt;üåê Cloud version (beta)&lt;/a&gt; ¬∑ &lt;a href=&#34;https://docs.crowd.dev&#34;&gt;üìñ Docs&lt;/a&gt; ¬∑ &lt;a href=&#34;https://crowd.dev/discord&#34;&gt;‚ù§Ô∏è Discord&lt;/a&gt; ¬∑ &lt;a href=&#34;https://crowd.dev/newsletter-sign-up&#34;&gt;üì£ Newsletter&lt;/a&gt; ¬∑ &lt;a href=&#34;https://crowd.dev/roadmap&#34;&gt;üó∫Ô∏è Roadmap&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- BODY --&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/41432658/198830271-cbe6d3c7-0c46-4539-98cc-b13c495ddedf.png&#34; alt=&#34;UI Home screen&#34;&gt; &#xA;&lt;h2&gt;About crowd.dev&lt;/h2&gt; &#xA;&lt;p&gt;crowd.dev is the developer data platform (DDP) that lets companies centralize all touch points developers have with their product and brand - be it in community (e.g. Stack Overflow or Reddit), product (open-source or SaaS), or commercial channels (e.g. HubSpot). The platform pulls data from a variety of different sources, normalizes it, matches identities across platforms, and enriches it with 3rd party data. The result is a unified 360-view of who the developers are that engage with your product and community, which companies they work for, and where they stand in their personal customer journey.&lt;/p&gt; &#xA;&lt;p&gt;crowd.dev is open-source, built with developers in mind, available for both hosted and self-hosted deployments, open to extensions, and offers full control over your data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To our &lt;strong&gt;users&lt;/strong&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can get actively involved, contribute to our roadmap, and turn crowd.dev into the tool you always wanted.&lt;/li&gt; &#xA; &lt;li&gt;We are open regarding what we are building, allowing you to take a look inside, and making sure we handle your data in a privacy-preserving way.&lt;/li&gt; &#xA; &lt;li&gt;You will never be locked in by us. Our interests as a company are aligned with yours and we need to make sure that we always deliver enough value to your with our commercial offering in relation to our pricing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;To our developer community:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can self-host crowd.dev to centralize data for your community or company while keeping full control over your data.&lt;/li&gt; &#xA; &lt;li&gt;Our product is build for extensibilty. If you can think of any use cases that you want to build with the data we collect and store for you, please go ahead and build it! We will be here to help out if you need us.&lt;/li&gt; &#xA; &lt;li&gt;You can actively contribute to crowd.dev (e.g. integrations), and we will be supporting you along the journey. Just take a look at our &lt;a href=&#34;https://github.com/CrowdDotDev/crowd.dev/raw/main/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plug &amp;amp; play integrations&lt;/strong&gt; to tie all relevant platforms - like GitHub, Discord, Slack, or LinkedIn - together. (&lt;a href=&#34;https://www.crowd.dev/integrations&#34;&gt;all integrations&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Identity resolution &amp;amp; automated segmentation&lt;/strong&gt; to effortlessly understand activities and profiles across platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated analytics &amp;amp; reports&lt;/strong&gt; on topics like product-market-fit and open-source community activity to further inform your GTM strategy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workflows automation&lt;/strong&gt; with webhooks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2-way CRM sync &amp;amp; Slack alerts&lt;/strong&gt; to get notified about intent events in real-time. [cloud only]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User enrichment&lt;/strong&gt; with 25+ attributes, including emails, social profiles, work experience, and technical skills. [cloud only]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Organization enrichment&lt;/strong&gt; with 50+ attributes, including industry, headcount, and revenue. [cloud only]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sentiment analysis and conversation detection&lt;/strong&gt; to stay on top of what&#39;s going on in your open source community. [cloud only]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.crowd.dev/eagle-eye&#34;&gt;Eagle Eye&lt;/a&gt;&lt;/strong&gt;: Monitor dev-focussed community platforms to find relevant content to engage with, helping you to gain developers‚Äô mindshare and grow your community organically [cloud only]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Cloud version&lt;/h3&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://app.crowd.dev/&#34;&gt;cloud version&lt;/a&gt; is a fast, easy and free way to get started with crowd.dev.&lt;/p&gt; &#xA;&lt;h3&gt;Self-hosted version&lt;/h3&gt; &#xA;&lt;p&gt;To get started with self-hosting, take a look at our &lt;a href=&#34;https://docs.crowd.dev/docs/getting-started-with-self-hosting&#34;&gt;self-hosting docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Deployment with Kubernetes&lt;/h4&gt; &#xA;&lt;p&gt;Our services can be deployed using Kubernetes, as well as a lightweight development environment using Docker. You can read more about it in our &lt;a href=&#34;https://docs.crowd.dev/docs/deployment&#34;&gt;self-hosting docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Integrations&lt;/h4&gt; &#xA;&lt;p&gt;We currently support all our integrations for self-hosting. For each one of them you will need to create your own application. You can see the steps for each integration in our &lt;a href=&#34;https://docs.crowd.dev/docs/self-hosting&#34;&gt;self-hosting integrations guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development environment&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node v16.16.0&lt;/li&gt; &#xA; &lt;li&gt;Docker and docker-compose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;getting_started&#34;&gt;Getting started&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get the mono repo from GitHub&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:CrowdDotDev/crowd.dev.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run the start script&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd scripts&#xA;./cli start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For hot reloading, you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd scripts&#xA;./cli clean-start-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;App will be available at &lt;a href=&#34;http://localhost:8081&#34;&gt;http://localhost:8081&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information on development, you can &lt;a href=&#34;https://docs.crowd.dev/docs/docker-compose-single-machine-development-with-docker-images&#34;&gt;check our docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üó∫Ô∏è Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You can find more features on our &lt;a href=&#34;https://crowd.dev/roadmap&#34;&gt;public roadmap&lt;/a&gt;. Feel free to also &lt;a href=&#34;https://crowd.dev/open-an-issue&#34;&gt;open an issue&lt;/a&gt; for anything you&#39;re missing.&lt;/p&gt; &#xA;&lt;h2&gt;üîî Stay up-to-date&lt;/h2&gt; &#xA;&lt;p&gt;crowd.dev is still in beta and we ship new features every week. To stay in the loop, leave us a star and subscribe to our &lt;a href=&#34;https://crowd.dev/newsletter-sign-up&#34;&gt;monthly newsletter&lt;/a&gt;. Thanks a lot! ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Contribution&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways you can contribute to crowd.dev! Here are a few options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Star this repo&lt;/li&gt; &#xA; &lt;li&gt;Create issues every time you feel something is missing or goes wrong&lt;/li&gt; &#xA; &lt;li&gt;Upvote issues with üëç reaction so we know what&#39;s the demand for particular issue to prioritize it within roadmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to contribute to the development of the project, please refer to our &lt;a href=&#34;https://github.com/CrowdDotDev/crowd.dev/raw/main/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All contributions are highly appreciated. üôè&lt;/p&gt; &#xA;&lt;h2&gt;‚öñÔ∏è License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the Apache 2.0 License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Our self-hosted version can be run and deployed by default following the permissive Apache 2.0 license. All premium components will be hidden and inactive with the default configuration. You can run, deploy, and contribute to the app without fearing to violate the premium license. Check out the &lt;a href=&#34;https://docs.crowd.dev/docs/premium-self-hosted-apps&#34;&gt;premium self-hosted features docs&lt;/a&gt; to know more about the premium self-hosted features.&lt;/p&gt; &#xA;&lt;h2&gt;üîí Security&lt;/h2&gt; &#xA;&lt;p&gt;We take security very seriously. If you come across any security vulnerabilities, please disclose them by sending an email to &lt;a href=&#34;mailto:security@crowd.dev&#34;&gt;security@crowd.dev&lt;/a&gt;. We appreciate your help in making our platform as secure as possible and are committed to working with you to resolve any issues quickly and efficiently.&lt;/p&gt; &#xA;&lt;h2&gt;üìû Book a call&lt;/h2&gt; &#xA;&lt;p&gt;Call with a crowd.dev team member to learn more about our product and make sure you get the most out of it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cal.com/team/CrowdDotDev/intro-to-crowd-dev/&#34;&gt;&lt;img alt=&#34;Book us with Cal.com&#34; src=&#34;https://cal.com/book-with-cal-dark.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wasp-lang/wasp</title>
    <updated>2023-10-04T01:42:44Z</updated>
    <id>tag:github.com,2023-10-04:/wasp-lang/wasp</id>
    <link href="https://github.com/wasp-lang/wasp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fastest way to develop full-stack web apps with React &amp; Node.js.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;80px&#34; src=&#34;https://user-images.githubusercontent.com/1536647/77317442-78625700-6d0b-11ea-9822-0fb21e557e87.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The fastest way to develop full-stack web apps with React &amp;amp; Node.js. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/github/license/wasp-lang/wasp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/releases/latest&#34;&gt;&lt;img alt=&#34;latest release&#34; src=&#34;https://img.shields.io/github/v/release/wasp-lang/wasp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img alt=&#34;discord&#34; src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20@%20discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://wasp-lang.dev&#34;&gt;Web page&lt;/a&gt; | &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;Docs&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Wasp (&lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;Sp&lt;/strong&gt;ecification) is a Rails-like framework for React, Node.js and Prisma.&lt;br&gt; Build your app in a day and deploy it with a single CLI command!&lt;/p&gt; &#xA;&lt;h3&gt;Why is Wasp awesome&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üöÄ &lt;strong&gt;Quick start&lt;/strong&gt;: Due to its expressiveness, you can create and deploy a production-ready web app from scratch with very few lines of concise, consistent, declarative code.&lt;/li&gt; &#xA; &lt;li&gt;üòå &lt;strong&gt;No boilerplate&lt;/strong&gt;: By abstracting away complex full-stack features, there is less boilerplate code. That means less code to maintain and understand! It also means easier upgrades.&lt;/li&gt; &#xA; &lt;li&gt;üîì &lt;strong&gt;No lock-in&lt;/strong&gt;: You can deploy Wasp app anywhere you like. There is no lock-in into specific providers, you have full control over the code (and can actually check it out in .wasp/ dir if you are interested ).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;üîí Full-stack Auth, üñáÔ∏è RPC (Client &amp;lt;-&amp;gt; Server), üöÄ Simple Deployment, ‚öô Ô∏èJobs, ‚úâÔ∏è Email Sending, üõü Full-stack Type Safety, ...&lt;/p&gt; &#xA;&lt;h3&gt;Code example&lt;/h3&gt; &#xA;&lt;p&gt;Simple Wasp config file in which you describe the high-level details of your web app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// file: main.wasp&#xA;&#xA;app todoApp {&#xA;  title: &#34;ToDo App&#34;,  // visible in the browser tab&#xA;  wasp: { version: &#34;^0.11.0&#34; },&#xA;  auth: { // full-stack auth out-of-the-box&#xA;    userEntity: User, methods: { email: {...} }&#xA;  }&#xA;}&#xA;&#xA;route RootRoute { path: &#34;/&#34;, to: MainPage }&#xA;page MainPage {&#xA;  authRequired: true, // Limit access to logged in users.&#xA;  component: import Main from &#34;@client/Main.tsx&#34; // Your React code.&#xA;}&#xA;&#xA;query getTasks {&#xA;  fn: import { getTasks } from &#34;@server/tasks.js&#34;, // Your Node.js code.&#xA;  entities: [Task] // Automatic cache invalidation.&#xA;}&#xA;&#xA;entity Task {=psl  // Your Prisma data model.&#xA;    id          Int     @id @default(autoincrement())&#xA;    description String&#xA;    isDone      Boolean @default(false)&#xA;psl=}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest of the code you write in React / Node.js / Prisma and just reference it from the .wasp file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ñ∂&lt;/span&gt; Check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/examples/tutorials/TodoApp&#34;&gt;TodoApp example&lt;/a&gt; for the complete code example. &lt;span&gt;‚óÄ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;img width=&#34;800px&#34; src=&#34;https://user-images.githubusercontent.com/1536647/231472285-126679e5-ecce-4cbb-8579-eb3cd9ba95bf.png&#34;&gt; &#xA;&lt;p&gt;Given a simple .wasp configuration file that describes the high-level details of your web app, and .js(x)/.css/..., source files with your unique logic, Wasp compiler generates the full source of your web app in the target stack: front-end, back-end and deployment.&lt;/p&gt; &#xA;&lt;p&gt;This unique approach is what makes Wasp &#34;smart&#34; and gives it its super powers!&lt;/p&gt; &#xA;&lt;p&gt;For more information about Wasp, check &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Get started&lt;/h1&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.wasp-lang.dev/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install Wasp on OSX/Linux/WSL(Win). From there, just follow the instructions to run your first app in less than a minute!&lt;/p&gt; &#xA;&lt;p&gt;For more details check out &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;This repository&lt;/h1&gt; &#xA;&lt;p&gt;This is the main repo of the Wasp universe, containing core code (mostly &lt;code&gt;waspc&lt;/code&gt; - Wasp compiler) and the supporting materials.&lt;/p&gt; &#xA;&lt;h1&gt;Project status&lt;/h1&gt; &#xA;&lt;p&gt;Currently, Wasp is in beta, with most features flushed out and working well. However, there are still a lot of improvements and additions that we have in mind for the future, and we are working on them constantly, so you can expect a lot of changes and improvements in the future.&lt;/p&gt; &#xA;&lt;p&gt;While the idea is to support multiple web tech stacks in the future, right now we are focusing on the specific stack: React + react-query, NodeJS + ExpressJS, Prisma.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Any way you want to contribute is a good way :)!&lt;/p&gt; &#xA;&lt;p&gt;The best place to start is to check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/waspc/&#34;&gt;waspc/&lt;/a&gt;, where you can find detailed steps for the first time contributors + technical details about the Wasp compiler.&lt;/p&gt; &#xA;&lt;p&gt;Core of Wasp is built in Haskell, but there is also a lot of non-Haskell parts of Wasp, so you will certainly be able to find something for you!&lt;/p&gt; &#xA;&lt;p&gt;Even if you don&#39;t plan to submit any code, just joining the discussion on discord &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20on%20discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; and giving your feedback is already great and helps a lot (motivates us and helps us figure out how to shape Wasp)!&lt;/p&gt; &#xA;&lt;p&gt;You can also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚≠ê&lt;/span&gt; Star this repo to show your interest/support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üì´&lt;/span&gt; Stay updated by subscribing to our &lt;a href=&#34;https://wasp-lang.dev#signup&#34;&gt;email list&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üí¨&lt;/span&gt; Join the discussion at &lt;a href=&#34;https://github.com/wasp-lang/wasp/discussions&#34;&gt;https://github.com/wasp-lang/wasp/discussions&lt;/a&gt; .&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Careers&lt;/h1&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://wasp-lang.notion.site/Wasp-Careers-59fd1682c80d446f92be5fa65cc17672&#34;&gt;careers&lt;/a&gt; page for a list of currently opened positions!&lt;/p&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/michelwaechter&#34;&gt;&lt;img src=&#34;https://github.com/michelwaechter.png&#34; width=&#34;50px&#34; alt=&#34;michelwaechter&#34;&gt;&lt;/a&gt; - Our first sponsor ever! Thanks so much Michel ‚ù§Ô∏è , from the whole Wasp Team, for bravely going where nobody has been before :)!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aidenybai/pattycake</title>
    <updated>2023-10-04T01:42:44Z</updated>
    <id>tag:github.com,2023-10-04:/aidenybai/pattycake</id>
    <link href="https://github.com/aidenybai/pattycake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero-runtime pattern matching&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Note: this is highly experimental software. Here be dragons üêâ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;üéÇ pattycake&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zero-runtime pattern matching. (~10-12x faster üî•)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pattycake is an optimizing compiler for &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern&#34;&gt;ts-pattern&lt;/a&gt; that lets you have your cake (expressive pattern matching), and eat it too (zero runtime overhead).&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install pattycake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Next.js&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// next.config.js&#xA;const pattycake = require(&#39;pattycake&#39;);&#xA;&#xA;module.exports = pattycake.next({&#xA;  // your next.js config&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vite&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// vite.config.js&#xA;import { defineConfig } from &#39;vite&#39;;&#xA;import pattycake from &#39;pattycake&#39;;&#xA;&#xA;export default defineConfig({&#xA;  plugins: [pattycake.vite()],&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Create React App&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const pattycake = require(&#39;pattycake&#39;);&#xA;&#xA;module.exports = {&#xA;  webpack: {&#xA;    plugins: { add: [pattycake.webpack()] },&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Webpack&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const pattycake = require(&#39;pattycake&#39;);&#xA;&#xA;module.exports = {&#xA;  plugins: [pattycake.webpack()],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-pattern&lt;/code&gt; is a great library that brings the ergonomics of pattern matching from languages like Rust and OCaml to Typescript, but at the cost of being orders of magnitude slower.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pattycake&lt;/code&gt; compiles ts-pattern&#39;s &lt;code&gt;match()&lt;/code&gt; expressions into an optimized chain of if statements to completely eliminate that cost. In our initial benchmarks, it outperforms &lt;code&gt;ts-pattern&lt;/code&gt; by usually ~10-12x.&lt;/p&gt; &#xA;&lt;p&gt;In essence, &lt;code&gt;pattycake&lt;/code&gt; converts a &lt;code&gt;ts-pattern&lt;/code&gt; &lt;code&gt;match()&lt;/code&gt; expression like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;let html = match(result)&#xA;  .with(&#xA;    { type: &#39;error&#39;, error: { foo: [1, 2] }, nice: &#39;&#39; },&#xA;    () =&amp;gt; &#39;&amp;lt;p&amp;gt;Oups! An error occured&amp;lt;/p&amp;gt;&#39;,&#xA;  )&#xA;  .with({ type: &#39;ok&#39;, data: { type: &#39;text&#39; } }, function (data) {&#xA;    return &#39;&amp;lt;p&amp;gt;420&amp;lt;/p&amp;gt;&#39;;&#xA;  })&#xA;  .with(&#xA;    { type: &#39;ok&#39;, data: { type: &#39;img&#39;, src: &#39;hi&#39; } },&#xA;    (src) =&amp;gt; `&amp;lt;img src=${src} /&amp;gt;`,&#xA;  )&#xA;  .otherwise(() =&amp;gt; &#39;idk bro&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Into this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;let html;&#xA;out: {&#xA;  if (&#xA;    result.type === &#39;error&#39; &amp;amp;&amp;amp;&#xA;    Array.isArray(result.error.foo) &amp;amp;&amp;amp;&#xA;    result.error.foo.length &amp;gt;= 2 &amp;amp;&amp;amp;&#xA;    result.error.foo[0] === 1 &amp;amp;&amp;amp;&#xA;    result.error.foo[1] === 2&#xA;  ) {&#xA;    html = &#39;&amp;lt;p&amp;gt;Oups! An error occured&amp;lt;/p&amp;gt;&#39;;&#xA;    break out;&#xA;  }&#xA;  if (result.type === &#39;ok&#39; &amp;amp;&amp;amp; result.data.type === &#39;text&#39;) {&#xA;    let data = result;&#xA;    html = &#39;&amp;lt;p&amp;gt;420&amp;lt;/p&amp;gt;&#39;;&#xA;    break out;&#xA;  }&#xA;  if (&#xA;    result.type === &#39;ok&#39; &amp;amp;&amp;amp;&#xA;    result.data.type === &#39;img&#39; &amp;amp;&amp;amp;&#xA;    result.data.src === &#39;hi&#39;&#xA;  ) {&#xA;    let src = result;&#xA;    html = `&amp;lt;img src=${src} /&amp;gt;`;&#xA;    break out;&#xA;  }&#xA;  html = &#39;idk bro&#39;;&#xA;  break out;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature parity with ts-pattern&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern#literals&#34;&gt;Literal patterns&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; string&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; number&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; booleans&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; bigint&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; undefined&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; null&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NaN&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern#objects&#34;&gt;Object patterns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern#tuples-arrays&#34;&gt;Array/tuples patterns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;.when()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern#wildcards&#34;&gt;Wildcards&lt;/a&gt; patterns &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;P._&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;P.string&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;P.number&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Special matcher functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;P.not&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;P.when&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;P.select&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;P.array&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;P.map&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;P.set&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Fallback / compatibility with &lt;code&gt;ts-pattern&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;pattycake&lt;/code&gt; is unable to optimize a &lt;code&gt;match()&lt;/code&gt; expression, it will fallback to using &lt;code&gt;ts-pattern&lt;/code&gt;. This is enabled right now because we don&#39;t support the full feature set of ts-pattern.&lt;/p&gt; &#xA;&lt;h3&gt;Inlining handlers&lt;/h3&gt; &#xA;&lt;p&gt;One performance problem of &lt;code&gt;ts-pattern&lt;/code&gt;&#39;s are handler functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;match(foo)&#xA;  .with({ foo: &#39;bar&#39; }, () =&amp;gt; /* this is a handler function */)&#xA;  .with({ foo: &#39;baz&#39; }, () =&amp;gt; /* another one */)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Function calls usually have an overhead, and a lot of the time these handlers are small little functions (e.g. &lt;code&gt;(result) =&amp;gt; result + 1&lt;/code&gt;) which can be much faster if just directly inlined in the code.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, a &lt;code&gt;match()&lt;/code&gt; with many branches means creating a lot of function objects in the runtime.&lt;/p&gt; &#xA;&lt;p&gt;The JIT-compiler and optimizer in JS engines can do inlining of functions, but in general with JIT you need to run your code several times or it to determine what to optimize.&lt;/p&gt; &#xA;&lt;p&gt;So when possible, &lt;code&gt;pattycake&lt;/code&gt; will try to inline function expression (anonymous functions / arrow functions) handlers directly into the code if it is small.&lt;/p&gt; &#xA;&lt;h3&gt;IIFEs&lt;/h3&gt; &#xA;&lt;p&gt;When possible, &lt;code&gt;pattycake&lt;/code&gt; will try to generate a block of code (like in the example above). But there are times where this is not possible without breaking the semantics of source code.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Right now, the goal is to support the full feature set of ts-pattern, or at least a sufficient amount. After, the ideal is that we compile pattern matching expressions into code that would be faster than what you would write by hand.&lt;/p&gt;</summary>
  </entry>
</feed>