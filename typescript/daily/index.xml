<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-29T01:41:14Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Herm-Studio/StakeVladDracula</title>
    <updated>2024-02-29T01:41:14Z</updated>
    <id>tag:github.com,2024-02-29:/Herm-Studio/StakeVladDracula</id>
    <link href="https://github.com/Herm-Studio/StakeVladDracula" rel="alternate"></link>
    <summary type="html">&lt;p&gt;StakeVladDracula pierces all.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;160&#34; src=&#34;https://raw.githubusercontent.com/Herm-Studio/StakeVladDracula/main/assets/logo.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;Stake Vlad Dracula&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;StakeVladDracula pierces all ! &lt;/p&gt;  &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;h3&gt;Vercel&lt;/h3&gt; &#xA;&lt;p&gt;Recommended deployment is with Vercel. But you can deploy it anywhere you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https://github.com/Herm-Studio/StakeVladDracula&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Netlify&lt;/h3&gt; &#xA;&lt;p&gt;You can also deploy it with Netlify.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlify.com/start/deploy?repository=https://github.com/Herm-Studio/StakeVladDracula&#34;&gt;&lt;img src=&#34;https://www.netlify.com/img/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Netlify&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This project is an experimental one. While it has been optimized, caution is still advised, and any consequences of use are at your own risk!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Just deploy the project and you are ready to go.&lt;/p&gt; &#xA;&lt;h3&gt;OpenAI&lt;/h3&gt; &#xA;&lt;p&gt;for &lt;strong&gt;OpenAI&lt;/strong&gt; just change the &lt;code&gt;baseURL&lt;/code&gt; from &lt;code&gt;https://api.openai.com/v1&lt;/code&gt; to &lt;code&gt;YOUR_DEPLOYED_URL/v1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;for example if you deployed the project to &lt;code&gt;https://stake-vlad-dracula.vercel.app&lt;/code&gt; then change the &lt;code&gt;baseURL&lt;/code&gt; to &lt;code&gt;https://stake-vlad-dracula.vercel.app/v1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;import OpenAI from &#39;openai&#39;;&#xA;&#xA;const openai = new OpenAI({&#xA;  apiKey: &#39;YOUR_API_KEY sk-XXXXXX-XXXXXX-XXXXXX-XXXXXX&#39;,&#xA;  // change the baseURL to your deployed URL, for example: https://stake-vlad-dracula.vercel.app/v1&#xA;+ baseURL: &#39;https://stake-vlad-dracula.vercel.app/v1&#39;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gemini&lt;/h3&gt; &#xA;&lt;p&gt;for &lt;strong&gt;Gemini&lt;/strong&gt; change &lt;code&gt;https://generativelanguage.googleapis.com/v1beta&lt;/code&gt; to &lt;code&gt;YOUR_DEPLOYED_URL/v1beta&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;export API_KEY=&#34;YOUR_API_KEY&#34;&#xA;- export BASE_URL=&#34;https://generativelanguage.googleapis.com/v1beta&#34;&#xA;+ export BASE_URL=&#34;YOUR_DEPLOYED_URL/v1beta&#34;&#xA;&#xA;curl https://${BASE_URL}/models/gemini-pro:generateContent?key=${API_KEY} \&#xA;    -H &#39;Content-Type: application/json&#39; \&#xA;    -X POST \&#xA;    -d &#39;{&#xA;      &#34;contents&#34;: [{&#xA;        &#34;parts&#34;:[{&#xA;          &#34;text&#34;: &#34;Write a story about a magic backpack.&#34;}]}]}&#39; 2&amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Give it a Star&lt;/h2&gt; &#xA;&lt;p&gt;If you found this Implementation helpful or used it in your Projects, do give it a star. Thanks! ðŸŒŸ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Herm-Studio/StakeVladDracula&amp;amp;Timeline&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Herm-Studio/StakeVladDracula&amp;amp;type=Timeline&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can use GitHub Action to keep the forked repository up to date with the original repository. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/Herm-Studio/StakeVladDracula/main/docs/sync.md&#34;&gt;Syncing a fork.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>guilhermerodz/input-otp</title>
    <updated>2024-02-29T01:41:14Z</updated>
    <id>tag:github.com,2024-02-29:/guilhermerodz/input-otp</id>
    <link href="https://github.com/guilhermerodz/input-otp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One time passcode Input. Accessible &amp; unstyled.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OTP Input for React&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guilhermerodz/input-otp/assets/10366880/753751f5-eda8-4145-a4b9-7ef51ca5e453&#34;&gt;https://github.com/guilhermerodz/input-otp/assets/10366880/753751f5-eda8-4145-a4b9-7ef51ca5e453&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install input-otp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import the component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+&#39;use client&#39;&#xA;+import { OTPInput } from &#39;input-otp&#39;&#xA;&#xA;function MyForm() {&#xA;  return &amp;lt;form&amp;gt;&#xA;+   &amp;lt;OTPInput maxLength={6} render={({slots})  =&amp;gt; (...)} /&amp;gt;&#xA;  &amp;lt;/form&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default example&lt;/h2&gt; &#xA;&lt;p&gt;The example below uses &lt;code&gt;tailwindcss&lt;/code&gt; &lt;code&gt;@shadcn/ui&lt;/code&gt; &lt;code&gt;tailwind-merge&lt;/code&gt; &lt;code&gt;clsx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&#39;use client&#39;&#xA;import { OTPInput, SlotProps } from &#39;input-otp&#39;&#xA;&#xA;&amp;lt;OTPInput&#xA;  maxLength={6}&#xA;  containerClassName=&#34;group flex items-center has-[:disabled]:opacity-30&#34;&#xA;  render={({ slots }) =&amp;gt; (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;div className=&#34;flex&#34;&amp;gt;&#xA;        {slots.slice(0, 3).map((slot, idx) =&amp;gt; (&#xA;          &amp;lt;Slot key={idx} {...slot} /&amp;gt;&#xA;        ))}&#xA;      &amp;lt;/div&amp;gt;&#xA;&#xA;      &amp;lt;FakeDash /&amp;gt;&#xA;&#xA;      &amp;lt;div className=&#34;flex&#34;&amp;gt;&#xA;        {slots.slice(3).map((slot, idx) =&amp;gt; (&#xA;          &amp;lt;Slot key={idx} {...slot} /&amp;gt;&#xA;        ))}&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  )}&#xA;/&amp;gt;&#xA;&#xA;// Feel free to copy. Uses @shadcn/ui tailwind colors.&#xA;function Slot(props: SlotProps) {&#xA;  return (&#xA;    &amp;lt;div&#xA;      className={cn(&#xA;        &#39;relative w-10 h-14 text-[2rem]&#39;,&#xA;        &#39;flex items-center justify-center&#39;,&#xA;        &#39;transition-all duration-300&#39;,&#xA;        &#39;border-border border-y border-r first:border-l first:rounded-l-md last:rounded-r-md&#39;,&#xA;        &#39;group-hover:border-accent-foreground/20 group-focus-within:border-accent-foreground/20&#39;,&#xA;        &#39;outline outline-0 outline-accent-foreground/20&#39;,&#xA;        { &#39;outline-4 outline-accent-foreground&#39;: props.isActive },&#xA;      )}&#xA;    &amp;gt;&#xA;      {props.char !== null &amp;amp;&amp;amp; &amp;lt;div&amp;gt;{props.char}&amp;lt;/div&amp;gt;}&#xA;      {props.hasFakeCaret &amp;amp;&amp;amp; &amp;lt;FakeCaret /&amp;gt;}&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;// You can emulate a fake textbox caret!&#xA;function FakeCaret() {&#xA;  return (&#xA;    &amp;lt;div className=&#34;absolute pointer-events-none inset-0 flex items-center justify-center animate-caret-blink&#34;&amp;gt;&#xA;      &amp;lt;div className=&#34;w-px h-8 bg-white&#34; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;// Inspired by Stripe&#39;s MFA input.&#xA;function FakeDash() {&#xA;  return (&#xA;    &amp;lt;div className=&#34;flex w-10 justify-center items-center&#34;&amp;gt;&#xA;      &amp;lt;div className=&#34;w-3 h-1 rounded-full bg-border&#34; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;// tailwind.config.ts for the blinking caret animation.&#xA;const config = {&#xA;  theme: {&#xA;    extend: {&#xA;      keyframes: {&#xA;        &#39;caret-blink&#39;: {&#xA;          &#39;0%,70%,100%&#39;: { opacity: &#39;1&#39; },&#xA;          &#39;20%,50%&#39;: { opacity: &#39;0&#39; },&#xA;        },&#xA;      },&#xA;      animation: {&#xA;        &#39;caret-blink&#39;: &#39;caret-blink 1.2s ease-out infinite&#39;,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;// Small utility to merge class names.&#xA;import { clsx } from &#34;clsx&#34;;&#xA;import { twMerge } from &#34;tailwind-merge&#34;;&#xA;&#xA;import type { ClassValue } from &#34;clsx&#34;;&#xA;&#xA;export function cn(...inputs: ClassValue[]) {&#xA;  return twMerge(clsx(inputs));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s currently no native OTP/2FA/MFA input in HTML, which means people are either going with 1. a simple input design or 2. custom designs like this one. This library works by rendering an invisible input as a sibling of the slots, contained by a &lt;code&gt;relative&lt;/code&gt;ly positioned parent (the container root called &lt;em&gt;OTPInput&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;h3&gt;OTPInput&lt;/h3&gt; &#xA;&lt;p&gt;The root container. Define settings for the input via props. Then, use the &lt;code&gt;render&lt;/code&gt; prop to create the slots.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pmndrs/uikit</title>
    <updated>2024-02-29T01:41:14Z</updated>
    <id>tag:github.com,2024-02-29:/pmndrs/uikit</id>
    <link href="https://github.com/pmndrs/uikit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ“± user interfaces for react-three-fiber&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;@react-three/uikit&lt;/h1&gt; &#xA;&lt;p&gt;Build performant 3D user interfaces for Three.js using @react-three/fiber and yoga&lt;/p&gt; &#xA;&lt;h1&gt;Changes over Koestlich&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;higher performance (GPU + CPU)&lt;/li&gt; &#xA; &lt;li&gt;no suspense (similarly to html/css images and texts don&#39;t suspend)&lt;/li&gt; &#xA; &lt;li&gt;objects are nested for correct event propagation&lt;/li&gt; &#xA; &lt;li&gt;no default animations&lt;/li&gt; &#xA; &lt;li&gt;complete freedom to use R3F inside of UI =&amp;gt; &#xA;  &lt;content&gt;&#xA;   ...&#xA;  &lt;/content&gt;&lt;/li&gt; &#xA; &lt;li&gt;better scroll experiences (scrollbar + overscroll)&lt;/li&gt; &#xA; &lt;li&gt;overall DX improvements (hover, responsive, ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO Release&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix: changing font weight with hot reload (test if its the same for normal react state change)&lt;/li&gt; &#xA; &lt;li&gt;fix: conditionally render children (see Discord)&lt;/li&gt; &#xA; &lt;li&gt;feat: ref.current.setStyle({ ... })&lt;/li&gt; &#xA; &lt;li&gt;feat: nesting inside non root/container components (e.g. image)&lt;/li&gt; &#xA; &lt;li&gt;fix: scrollbar border radius to high (happens with very long panels)&lt;/li&gt; &#xA; &lt;li&gt;feat: drag/click threshold&lt;/li&gt; &#xA; &lt;li&gt;feat: cli for kits&lt;/li&gt; &#xA; &lt;li&gt;feat: add apfel components&lt;/li&gt; &#xA; &lt;li&gt;feat: input&lt;/li&gt; &#xA; &lt;li&gt;fix: decrease clipping rect when scrollbar present&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Roadmap&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;on demand rendering to save battery for UI only apps / rendering to render targets&lt;/li&gt; &#xA; &lt;li&gt;upgrade to yoga2.0&lt;/li&gt; &#xA; &lt;li&gt;virtual lists (support thousands of elements in a list by using fixed sizes and not using yoga)&lt;/li&gt; &#xA; &lt;li&gt;option to render to seperate render targets depending on element type (e.g. render text to high quality quad layer for WebXR)&lt;/li&gt; &#xA; &lt;li&gt;scrollIntoView&lt;/li&gt; &#xA; &lt;li&gt;Instancing for icons&lt;/li&gt; &#xA; &lt;li&gt;Support more characters for different languages&lt;/li&gt; &#xA; &lt;li&gt;Support for visibility=&#34;hidden&#34; &amp;amp; display=&#34;none&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Limitations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nested clipping with rotation in z-axis (the clipping area can become more complex than a rectangle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pnpm install&lt;/code&gt;&lt;br&gt; &lt;code&gt;pnpm -r inline-wasm&lt;/code&gt;&lt;br&gt; &lt;code&gt;pnpm -r convert&lt;/code&gt;&lt;br&gt; &lt;code&gt;pnpm -r generate&lt;/code&gt;&lt;br&gt; &lt;code&gt;pnpm -r build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;go to &lt;code&gt;examples/market&lt;/code&gt; and run &lt;code&gt;pnpm dev&lt;/code&gt; to view the example dashboard&lt;/p&gt;</summary>
  </entry>
</feed>