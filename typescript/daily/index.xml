<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-06T01:56:13Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>t3-oss/create-t3-app</title>
    <updated>2022-07-06T01:56:13Z</updated>
    <id>tag:github.com,2022-07-06:/t3-oss/create-t3-app</id>
    <link href="https://github.com/t3-oss/create-t3-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickest way to start a new web app with full stack typesafety&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; create-t3-app &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;Interactive CLI to quickly set up a project using the &lt;a href=&#34;https://init.tips&#34;&gt;T3 Stack&lt;/a&gt;&lt;/p&gt; &#xA; &lt;img src=&#34;https://s6.imgcdn.dev/BJW4B.png&#34; width=&#34;130&#34; style=&#34;border-radius:40%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/t3-oss/create-t3-app/raw/main/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-blue.svg?sanitize=true&#34; alt=&#34;PRs-Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/create-t3-app&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/create-t3-app?color=0b7285&amp;amp;logoColor=0b7285&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/create-t3-app&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/create-t3-app?color=364fc7&amp;amp;logoColor=364fc7&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;usage&#34;&gt; &#xA; &lt;h1&gt;Usage&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-t3-app@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;yarn&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn create t3-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;pnpm&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dlx create-t3-app@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt;  &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/t3-oss/create-t3-app/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/t3-oss/create-t3-app/main/#axioms&#34;&gt;T3 Axioms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/t3-oss/create-t3-app/main/#dev&#34;&gt;Dev/Contributor Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/t3-oss/create-t3-app/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div id=&#34;about&#34;&gt; &#xA; &lt;h1&gt;What is this? Some kinda template?&lt;/h1&gt; &#xA; &lt;p&gt;Kind of. We love all of the technologies that create-t3-app includes, but we do NOT believe every project needs all of them.&lt;/p&gt; &#xA; &lt;p&gt;We made &lt;code&gt;create-t3-app&lt;/code&gt; to do &lt;strong&gt;one thing&lt;/strong&gt; - simplify the complex boilerplate around the core T3 Stack tech without compromising the modularity of the pieces.&lt;/p&gt; &#xA; &lt;p&gt;This is &lt;strong&gt;NOT&lt;/strong&gt; an all-inclusive template. We don&#39;t add things that are as simple as an &lt;code&gt;npm install zustand&lt;/code&gt;. &lt;em&gt;If you cut an issue asking us to add your preferred libraries, we will make fun of you.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;h2&gt;What is the T3 Stack?&lt;/h2&gt; &#xA; &lt;p&gt;The &lt;em&gt;&#34;T3 Stack&#34;&lt;/em&gt; is a web development stack made by &lt;a href=&#34;https://twitter.com/t3dotgg&#34;&gt;Theo&lt;/a&gt;, focused on &lt;strong&gt;simplicity&lt;/strong&gt;, &lt;strong&gt;modularity&lt;/strong&gt;, and &lt;strong&gt;full-stack typesafety&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=PbjHxIuHduU&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://t3.gg/random/T3%20Stack%20V4.png&#34; alt=&#34;Watch the video&#34; width=&#34;320&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=PbjHxIuHduU&#34; target=&#34;_blank&#34;&gt; Watch Theo&#39;s overview on Youtube here &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt;It consists of&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://trpc.io&#34;&gt;tRPC&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://prisma.io&#34;&gt;Prisma&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://next-auth.js.org&#34;&gt;NextAuth.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If you&#39;re looking for more info about this stack (state management solutions, deployment recommendations, etc) - check out &lt;a href=&#34;https://init.tips/other&#34;&gt;init.tips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;axioms&#34;&gt; &#xA; &lt;h1&gt;T3 Axioms&lt;/h1&gt; &#xA; &lt;p&gt;I&#39;ll be frank - this is an &lt;em&gt;opinionated project&lt;/em&gt;. We share a handful of core beliefs around building, and we treat them as the basis for our decisions.&lt;/p&gt; &#xA; &lt;h2&gt;1. Solve Problems&lt;/h2&gt; &#xA; &lt;p&gt;It&#39;s easy to fall in the trap of &#34;adding everything&#34; - we explicitly &lt;em&gt;don&#39;t&lt;/em&gt; want to do that. Everything added to &lt;code&gt;create-t3-app&lt;/code&gt; should solve a &lt;em&gt;specific&lt;/em&gt; problem that exists within the core technologies included.&lt;/p&gt; &#xA; &lt;p&gt;This means we &lt;strong&gt;won&#39;t&lt;/strong&gt; add things like state libraries (zustand, redux), but we &lt;strong&gt;will&lt;/strong&gt; add things like NextAuth.js and integrate it with Prisma and tRPC for you&lt;/p&gt; &#xA; &lt;h2&gt;2. Bleed Responsibly&lt;/h2&gt; &#xA; &lt;p&gt;We love our bleeding edge tech. The amount of speed and, honestly, &lt;em&gt;fun&lt;/em&gt; that comes out of new shit is really cool. We think it&#39;s important to &lt;strong&gt;bleed responsibly&lt;/strong&gt;, using riskier tech in the less risky parts.&lt;/p&gt; &#xA; &lt;p&gt;This means we &lt;strong&gt;wouldn&#39;t&lt;/strong&gt; bet on risky new database tech (SQL is great!) - but we &lt;strong&gt;happily&lt;/strong&gt; bet on tRPC (it&#39;s just functions, moving off it is trivial).&lt;/p&gt; &#xA; &lt;h2&gt;3. Typesafety Isn&#39;t Optional&lt;/h2&gt; &#xA; &lt;p&gt;Two of the three T&#39;s are typesafe (Typescript, tRPC). We take typesafety seriously in these parts. Any decision that compromises the full-stack typesafe nature of &lt;code&gt;create-t3-app&lt;/code&gt; is a decision that should be made in a different project.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;dev&#34;&gt; &#xA; &lt;h1&gt;Dev/Contributor Setup&lt;/h1&gt; &#xA; &lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/t3-oss/create-t3-app/main/CONTRIBUTING.md&#34;&gt;Contributing guidelines&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;To install dependencies&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install pnpm&#xA;npm install -g pnpm&#xA;# Install dependencies&#xA;pnpm install&#xA;# Initial build&#xA;pnpm run build&#xA;# Start the package locally&#xA;pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;We 💖 contributors! Feel free to contribute to this project&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/t3-oss/create-t3-app/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=t3-oss/create-t3-app&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34; href=&#34;https://vercel.com/?utm_source=t3-oss&amp;amp;utm_campaign=osss&#34;&gt; &lt;img height=&#34;34px&#34; src=&#34;https://www.datocms-assets.com/31049/1618983297-powered-by-vercel.svg?sanitize=true&#34; alt=&#34;Powered by vercel&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pmndrs/react-three-fiber</title>
    <updated>2022-07-06T01:56:13Z</updated>
    <id>tag:github.com,2022-07-06:/pmndrs/react-three-fiber</id>
    <link href="https://github.com/pmndrs/react-three-fiber" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🇨🇭 A React renderer for Three.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-three-fiber&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.com/package/@react-three/fiber&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@react-three/fiber?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/@react-three/fiber&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/react-three-fiber.svg?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pmndrs&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pmndrs?label=%40pmndrs&amp;amp;style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&amp;amp;logo=twitter&amp;amp;logoColor=000000&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ZZjjNvJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/740090768164651008?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&amp;amp;label=discord&amp;amp;logo=discord&amp;amp;logoColor=000000&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-three-fiber&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/react-three-fiber?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://blockchain.com/eth/address/0x6E3f79Ea1d0dcedeb33D3fC6c34d2B1f156F2682&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ETH-f5f5f5?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;ETH&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://blockchain.com/btc/address/36fuguTPxGCNnYZSRdgdh6Ea94brCAjMbH&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/BTC-f5f5f5?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;BTC&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;react-three-fiber is a &lt;a href=&#34;https://reactjs.org/docs/codebase-overview.html#renderers&#34;&gt;React renderer&lt;/a&gt; for threejs.&lt;/p&gt; &#xA;&lt;p&gt;Build your scene declaratively with re-usable, self-contained components that react to state, are readily interactive and can participate in React&#39;s ecosystem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install three @react-three/fiber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Does it have limitations?&lt;/h4&gt; &#xA;&lt;p&gt;None. Everything that works in Threejs will work here without exception.&lt;/p&gt; &#xA;&lt;h4&gt;Is it slower than plain Threejs?&lt;/h4&gt; &#xA;&lt;p&gt;No. There is no overhead. Components render outside of React. It outperforms Threejs in scale due to Reacts scheduling abilities.&lt;/p&gt; &#xA;&lt;h4&gt;Can it keep up with frequent feature updates to Threejs?&lt;/h4&gt; &#xA;&lt;p&gt;Yes. It merely expresses Threejs in JSX: &lt;code&gt;&amp;lt;mesh /&amp;gt;&lt;/code&gt; becomes &lt;code&gt;new THREE.Mesh()&lt;/code&gt;, and that happens dynamically. If a new Threejs version adds, removes or changes features, it will be available to you instantly without depending on updates to this library.&lt;/p&gt; &#xA;&lt;h3&gt;What does it look like?&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Let&#39;s make a re-usable component that has its own state, reacts to user-input and participates in the render-loop. (&lt;a href=&#34;https://codesandbox.io/s/rrppl0y8l4?file=/src/App.js&#34;&gt;live demo&lt;/a&gt;).&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://codesandbox.io/s/rrppl0y8l4&#34;&gt; &lt;img src=&#34;https://i.imgur.com/sS4ArrZ.gif&#34;&gt;&lt;/a&gt;&lt;/td&gt;  &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { createRoot } from &#39;react-dom/client&#39;&#xA;import React, { useRef, useState } from &#39;react&#39;&#xA;import { Canvas, useFrame } from &#39;@react-three/fiber&#39;&#xA;&#xA;function Box(props) {&#xA;  // This reference gives us direct access to the THREE.Mesh object&#xA;  const ref = useRef()&#xA;  // Hold state for hovered and clicked events&#xA;  const [hovered, hover] = useState(false)&#xA;  const [clicked, click] = useState(false)&#xA;  // Subscribe this component to the render-loop, rotate the mesh every frame&#xA;  useFrame((state, delta) =&amp;gt; (ref.current.rotation.x += 0.01))&#xA;  // Return the view, these are regular Threejs elements expressed in JSX&#xA;  return (&#xA;    &amp;lt;mesh&#xA;      {...props}&#xA;      ref={ref}&#xA;      scale={clicked ? 1.5 : 1}&#xA;      onClick={(event) =&amp;gt; click(!clicked)}&#xA;      onPointerOver={(event) =&amp;gt; hover(true)}&#xA;      onPointerOut={(event) =&amp;gt; hover(false)}&amp;gt;&#xA;      &amp;lt;boxGeometry args={[1, 1, 1]} /&amp;gt;&#xA;      &amp;lt;meshStandardMaterial color={hovered ? &#39;hotpink&#39; : &#39;orange&#39;} /&amp;gt;&#xA;    &amp;lt;/mesh&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;createRoot(document.getElementById(&#39;root&#39;)).render(&#xA;  &amp;lt;Canvas&amp;gt;&#xA;    &amp;lt;ambientLight /&amp;gt;&#xA;    &amp;lt;pointLight position={[10, 10, 10]} /&amp;gt;&#xA;    &amp;lt;Box position={[-1.2, 0, 0]} /&amp;gt;&#xA;    &amp;lt;Box position={[1.2, 0, 0]} /&amp;gt;&#xA;  &amp;lt;/Canvas&amp;gt;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show TypeScript example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @types/three&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import * as THREE from &#39;three&#39;&#xA;import { createRoot } from &#39;react-dom/client&#39;&#xA;import React, { useRef, useState } from &#39;react&#39;&#xA;import { Canvas, useFrame } from &#39;@react-three/fiber&#39;&#xA;&#xA;function Box(props: JSX.IntrinsicElements[&#39;mesh&#39;]) {&#xA;  const ref = useRef&amp;lt;THREE.Mesh&amp;gt;(null!)&#xA;  const [hovered, hover] = useState(false)&#xA;  const [clicked, click] = useState(false)&#xA;  useFrame((state, delta) =&amp;gt; (ref.current.rotation.x += 0.01))&#xA;  return (&#xA;    &amp;lt;mesh&#xA;      {...props}&#xA;      ref={ref}&#xA;      scale={clicked ? 1.5 : 1}&#xA;      onClick={(event) =&amp;gt; click(!clicked)}&#xA;      onPointerOver={(event) =&amp;gt; hover(true)}&#xA;      onPointerOut={(event) =&amp;gt; hover(false)}&amp;gt;&#xA;      &amp;lt;boxGeometry args={[1, 1, 1]} /&amp;gt;&#xA;      &amp;lt;meshStandardMaterial color={hovered ? &#39;hotpink&#39; : &#39;orange&#39;} /&amp;gt;&#xA;    &amp;lt;/mesh&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;createRoot(document.getElementById(&#39;root&#39;) as HTMLElement).render(&#xA;  &amp;lt;Canvas&amp;gt;&#xA;    &amp;lt;ambientLight /&amp;gt;&#xA;    &amp;lt;pointLight position={[10, 10, 10]} /&amp;gt;&#xA;    &amp;lt;Box position={[-1.2, 0, 0]} /&amp;gt;&#xA;    &amp;lt;Box position={[1.2, 0, 0]} /&amp;gt;&#xA;  &amp;lt;/Canvas&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Live demo: &lt;a href=&#34;https://codesandbox.io/s/icy-tree-brnsm?file=/src/App.tsx&#34;&gt;https://codesandbox.io/s/icy-tree-brnsm?file=/src/App.tsx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show React Native example&lt;/summary&gt; &#xA; &lt;p&gt;This example relies on react 18 and uses &lt;code&gt;expo-cli&lt;/code&gt;, but you can create a bare project with their template or with the &lt;code&gt;react-native&lt;/code&gt; CLI.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install expo-cli, this will create our app&#xA;npm install expo-cli -g&#xA;# Create app and cd into it&#xA;expo init my-app&#xA;cd my-app&#xA;# Install dependencies&#xA;npm install three @react-three/fiber@beta react@rc&#xA;# Start&#xA;expo start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Some configuration may be required to tell the Metro bundler about your assets if you use &lt;code&gt;useLoader&lt;/code&gt; or Drei abstractions like &lt;code&gt;useGLTF&lt;/code&gt; and &lt;code&gt;useTexture&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// metro.config.js&#xA;module.exports = {&#xA;  resolver: {&#xA;    sourceExts: [&#39;js&#39;, &#39;jsx&#39;, &#39;json&#39;, &#39;ts&#39;, &#39;tsx&#39;, &#39;cjs&#39;],&#xA;    assetExts: [&#39;glb&#39;, &#39;png&#39;, &#39;jpg&#39;],&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import React, { useRef, useState } from &#39;react&#39;&#xA;import { Canvas, useFrame } from &#39;@react-three/fiber/native&#39;&#xA;function Box(props) {&#xA;  const mesh = useRef(null)&#xA;  const [hovered, setHover] = useState(false)&#xA;  const [active, setActive] = useState(false)&#xA;  useFrame((state, delta) =&amp;gt; (mesh.current.rotation.x += 0.01))&#xA;  return (&#xA;    &amp;lt;mesh&#xA;      {...props}&#xA;      ref={mesh}&#xA;      scale={active ? 1.5 : 1}&#xA;      onClick={(event) =&amp;gt; setActive(!active)}&#xA;      onPointerOver={(event) =&amp;gt; setHover(true)}&#xA;      onPointerOut={(event) =&amp;gt; setHover(false)}&amp;gt;&#xA;      &amp;lt;boxGeometry args={[1, 1, 1]} /&amp;gt;&#xA;      &amp;lt;meshStandardMaterial color={hovered ? &#39;hotpink&#39; : &#39;orange&#39;} /&amp;gt;&#xA;    &amp;lt;/mesh&amp;gt;&#xA;  )&#xA;}&#xA;export default function App() {&#xA;  return (&#xA;    &amp;lt;Canvas&amp;gt;&#xA;      &amp;lt;ambientLight /&amp;gt;&#xA;      &amp;lt;pointLight position={[10, 10, 10]} /&amp;gt;&#xA;      &amp;lt;Box position={[-1.2, 0, 0]} /&amp;gt;&#xA;      &amp;lt;Box position={[1.2, 0, 0]} /&amp;gt;&#xA;    &amp;lt;/Canvas&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Documentation, tutorials, examples&lt;/h1&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://docs.pmnd.rs/react-three-fiber&#34;&gt;docs.pmnd.rs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.pmnd.rs/react-three-fiber&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pmndrs/react-three-fiber/master/docs/preview.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Fundamentals&lt;/h1&gt; &#xA;&lt;p&gt;You need to be versed in both React and Threejs before rushing into this. If you are unsure about React consult the official &lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;React docs&lt;/a&gt;, especially &lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html&#34;&gt;the section about hooks&lt;/a&gt;. As for Threejs, make sure you at least glance over the following links:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have a &lt;a href=&#34;https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene&#34;&gt;basic grasp of Threejs&lt;/a&gt;. Keep that site open.&lt;/li&gt; &#xA; &lt;li&gt;When you know what a scene is, a camera, mesh, geometry, material, fork the &lt;a href=&#34;https://github.com/pmndrs/react-three-fiber#what-does-it-look-like&#34;&gt;demo above&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threejs.org/docs/index.html#api/en/objects/Mesh&#34;&gt;Look up&lt;/a&gt; the JSX elements that you see (mesh, ambientLight, etc), &lt;em&gt;all&lt;/em&gt; threejs exports are native to three-fiber.&lt;/li&gt; &#xA; &lt;li&gt;Try changing some values, scroll through our &lt;a href=&#34;https://docs.pmnd.rs/react-three-fiber/API&#34;&gt;API&lt;/a&gt; to see what the various settings and hooks do.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some reading material:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threejs.org/docs&#34;&gt;Threejs-docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threejs.org/examples&#34;&gt;Threejs-examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threejsfundamentals.org&#34;&gt;Threejs-fundamentals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discoverthreejs.com&#34;&gt;Discover Threejs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discoverthreejs.com/tips-and-tricks&#34;&gt;Do&#39;s and don&#39;ts&lt;/a&gt; for performance and best practices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alligator.io/react/react-with-threejs&#34;&gt;react-three-fiber alligator.io tutorial&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/dghez_&#34;&gt;@dghez_&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Ecosystem&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/gltfjsx&#34;&gt;&lt;code&gt;@react-three/gltfjsx&lt;/code&gt;&lt;/a&gt; – turns GLTFs into JSX components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/drei&#34;&gt;&lt;code&gt;@react-three/drei&lt;/code&gt;&lt;/a&gt; – useful helpers for react-three-fiber&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/react-postprocessing&#34;&gt;&lt;code&gt;@react-three/postprocessing&lt;/code&gt;&lt;/a&gt; – post-processing effects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/react-three-flex&#34;&gt;&lt;code&gt;@react-three/flex&lt;/code&gt;&lt;/a&gt; – flexbox for react-three-fiber&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/react-xr&#34;&gt;&lt;code&gt;@react-three/xr&lt;/code&gt;&lt;/a&gt; – VR/AR controllers and events&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/use-cannon&#34;&gt;&lt;code&gt;@react-three/cannon&lt;/code&gt;&lt;/a&gt; – physics based hooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/react-three-a11y&#34;&gt;&lt;code&gt;@react-three/a11y&lt;/code&gt;&lt;/a&gt; – real a11y for your scene&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/zustand&#34;&gt;&lt;code&gt;zustand&lt;/code&gt;&lt;/a&gt; – state management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/react-spring&#34;&gt;&lt;code&gt;react-spring&lt;/code&gt;&lt;/a&gt; – a spring-physics-based animation library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/react-use-gesture&#34;&gt;&lt;code&gt;react-use-gesture&lt;/code&gt;&lt;/a&gt; – mouse/touch gestures&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/leva&#34;&gt;&lt;code&gt;leva&lt;/code&gt;&lt;/a&gt; – create GUI controls in seconds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to contribute&lt;/h1&gt; &#xA;&lt;p&gt;If you like this project, please consider helping out. All contributions are welcome as well as donations to &lt;a href=&#34;https://opencollective.com/react-three-fiber&#34;&gt;Opencollective&lt;/a&gt;, or in crypto &lt;code&gt;BTC: 36fuguTPxGCNnYZSRdgdh6Ea94brCAjMbH&lt;/code&gt;, &lt;code&gt;ETH: 0x6E3f79Ea1d0dcedeb33D3fC6c34d2B1f156F2682&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Backers&lt;/h4&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏&lt;/p&gt; &#xA;&lt;a href=&#34;https://opencollective.com/react-three-fiber#backers&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/react-three-fiber/backers.svg?width=890&#34;&gt; &lt;/a&gt; &#xA;&lt;h4&gt;Contributors&lt;/h4&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/pmndrs/react-three-fiber/graphs/contributors&#34;&gt; &lt;img src=&#34;https://opencollective.com/react-three-fiber/contributors.svg?width=890&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>adrianhajdin/project_tiktik</title>
    <updated>2022-07-06T01:56:13Z</updated>
    <id>tag:github.com,2022-07-06:/adrianhajdin/project_tiktik</id>
    <link href="https://github.com/adrianhajdin/project_tiktik" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jsmastery.pro&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Build and Deploy a Full Stack TikTok Clone Application and Master TypeScript | Full Course&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/w7WyFJG/Tik-Tok-Clone-Thumbnail-2.png&#34; alt=&#34;TikTik&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is a code repository for the corresponding video tutorial.&lt;/p&gt; &#xA;&lt;h2&gt;Launch your development career with project-based coaching - &lt;a href=&#34;https://www.jsmastery.pro&#34;&gt;https://www.jsmastery.pro&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
</feed>