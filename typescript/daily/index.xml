<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-09T01:43:19Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ixahmedxi/orbitkit</title>
    <updated>2024-04-09T01:43:19Z</updated>
    <id>tag:github.com,2024-04-09:/ixahmedxi/orbitkit</id>
    <link href="https://github.com/ixahmedxi/orbitkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸš€ Orbitkit is a monorepo starterkit aiming to be the foundation you build your next startup or big idea upon.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/ixahmedxi/orbitkit/raw/main/apps/marketing/public/blog-placeholder.jpg?raw=true&#34; alt=&#34;OrbitKit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] OrbitKit is built on top of a very opinionated tech stack, which might not work for every use case/business idea. I offer monorepo architecture consulting or even building something completely custom for you, if you are interested be sure to &lt;a href=&#34;https://twitter.com/ixahmedxii&#34;&gt;DM me on X/Twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next.js Web Application&lt;/li&gt; &#xA; &lt;li&gt;Astro Marketing Website&lt;/li&gt; &#xA; &lt;li&gt;File uploads with Uploadthing&lt;/li&gt; &#xA; &lt;li&gt;ESM Only&lt;/li&gt; &#xA; &lt;li&gt;TailwindCSS&lt;/li&gt; &#xA; &lt;li&gt;Lucia auth with github and google oauth&lt;/li&gt; &#xA; &lt;li&gt;Typesafe Next.js routes&lt;/li&gt; &#xA; &lt;li&gt;Drizzle ORM&lt;/li&gt; &#xA; &lt;li&gt;Neon DB&lt;/li&gt; &#xA; &lt;li&gt;Rate limiting with &lt;a href=&#34;https://unkey.dev&#34;&gt;Unkey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dedicated ShadCN UI primitives package&lt;/li&gt; &#xA; &lt;li&gt;Storybook&lt;/li&gt; &#xA; &lt;li&gt;Radix UI Colors for auto light/dark mode&lt;/li&gt; &#xA; &lt;li&gt;Next themes&lt;/li&gt; &#xA; &lt;li&gt;Shared tooling configuration&lt;/li&gt; &#xA; &lt;li&gt;Spell checking&lt;/li&gt; &#xA; &lt;li&gt;Markdown linting&lt;/li&gt; &#xA; &lt;li&gt;Turborepo task caching&lt;/li&gt; &#xA; &lt;li&gt;ESLint for linting&lt;/li&gt; &#xA; &lt;li&gt;Prettier formatting&lt;/li&gt; &#xA; &lt;li&gt;Commitlint with pnpm scopes&lt;/li&gt; &#xA; &lt;li&gt;Lint staged&lt;/li&gt; &#xA; &lt;li&gt;Husky&lt;/li&gt; &#xA; &lt;li&gt;TS Reset for the applications&lt;/li&gt; &#xA; &lt;li&gt;Packages built using tsup&lt;/li&gt; &#xA; &lt;li&gt;Changesets for versioning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And much more!&lt;/p&gt; &#xA;&lt;h2&gt;Todos&lt;/h2&gt; &#xA;&lt;p&gt;OrbitKit is not in final form yet, there are many things in the plans for it but it is in a usable primitive state. Checkout the &lt;a href=&#34;https://github.com/users/ixahmedxi/projects/6&#34;&gt;Roadmap&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repository&#xA;git clone --depth 1 https://github.com/ixahmedxi/orbitkit.git &amp;lt;your-project-name&amp;gt;&#xA;&#xA;#or use&#xA;npx degit ixahmedxi/orbitkit&#xA;&#xA;# Install Dependencies&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reset changelog and versions&lt;/h3&gt; &#xA;&lt;p&gt;When you first clone the repository, you should reset the changelog and versions to start fresh. You can do so by running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Reset changelog - this will remove all the changelog.md files in the packages&#xA;pnpm reset:changelog&#xA;&#xA;# Reset package versions - this will reset the versions of all the packages to 0.1.0&#xA;pnpm reset:versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Checkout the &lt;code&gt;.env.example&lt;/code&gt; file inside the &lt;code&gt;apps/web&lt;/code&gt; directory for the environment variables you need to get the project running. You should create an UploadThing and Neon DB accounts and copy the environment variables from their dashboard to a &lt;code&gt;.env.local&lt;/code&gt; file in &lt;code&gt;apps/web&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will also need to create a GitHub Oauth token as well as for Google authentication as well.&lt;/p&gt; &#xA;&lt;h3&gt;Explaining the architecture&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;apps&lt;/code&gt; folder is where the applications live like the Next.js app and the Astrojs marketing website&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/config&lt;/code&gt; folder is where packages that configure and ship out presets of tool configuration throughout the monorepo, for example &lt;code&gt;packages/config/tailwind&lt;/code&gt; that ships out a tailwind configuration preset as the single source of truth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages&lt;/code&gt; hosts all of the packages that get consumed by applications, for example &lt;code&gt;packages/ui&lt;/code&gt; that ships all of Shadcn UI primitives, some packages are internal (meaning they do not have a build step like the auth package) and some do like the ui package.&lt;/li&gt; &#xA; &lt;li&gt;There is a core package, &lt;code&gt;packages/core&lt;/code&gt; that is empty and should be used for business logic sharing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packages/env&lt;/code&gt; is where we define the environment variable types, it is an internal package that gets away with not needing a build step by using &lt;code&gt;jiti&lt;/code&gt; to run the typescript file in the &lt;code&gt;next.config.js&lt;/code&gt; file of the web application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the project&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Dev&#xA;pnpm turbo dev&#xA;&#xA;# Build&#xA;pnpm turbo build&#xA;&#xA;# Typecheck&#xA;pnpm turbo typecheck&#xA;&#xA;# Lint&#xA;pnpm turbo lint&#xA;&#xA;# Storybook&#xA;pnpm turbo storybook&#xA;&#xA;# Start apps in production mode&#xA;pnpm turbo start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re familiar with turborepo / pnpm workspaces, running stuff around this repo will be easy to figure out.&lt;/p&gt; &#xA;&lt;h3&gt;Commit messages&lt;/h3&gt; &#xA;&lt;p&gt;This project uses commitlint to enforce a commit message convention. The commit message should be structured as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;&amp;lt;footer&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make this easier, you can use the &lt;code&gt;pnpm commit&lt;/code&gt; command to create a commit message. This will open up a prompt for you to enter the type, scope, and subject of the commit message.&lt;/p&gt; &#xA;&lt;p&gt;Through husky and the &lt;code&gt;prepare-commit-msg&lt;/code&gt; hook, any &lt;code&gt;git commit&lt;/code&gt; commands will automatically be intercepted and processed by commitizen and commitlint. If a commit message does not follow the convention, the commit will be rejected. If no commit message is provided, commitizen will open up a prompt for you to enter the commit message.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues / problems with using OrbitKit, be sure to create an issue here on GitHub and I will help you out with it.&lt;/p&gt;</summary>
  </entry>
</feed>