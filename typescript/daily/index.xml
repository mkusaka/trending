<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-17T01:38:46Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>quilljs/quill</title>
    <updated>2023-08-17T01:38:46Z</updated>
    <id>tag:github.com,2023-08-17:/quilljs/quill</id>
    <link href="https://github.com/quilljs/quill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quill is a modern WYSIWYG editor built for compatibility and extensibility.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Note: This branch and README covers the upcoming 2.0 release. View &lt;a href=&#34;https://github.com/quilljs/quill/tree/1.3.6&#34;&gt;1.x docs here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://quilljs.com/&#34; title=&#34;Quill&#34;&gt;Quill Rich Text Editor&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://quilljs.com/&#34; title=&#34;Quill&#34;&gt;&lt;img alt=&#34;Quill Logo&#34; src=&#34;https://quilljs.com/assets/images/logo.svg?sanitize=true&#34; width=&#34;180&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;Quickstart&#34; href=&#34;https://raw.githubusercontent.com/quilljs/quill/develop/#quickstart&#34;&gt;&lt;strong&gt;Quickstart&lt;/strong&gt;&lt;/a&gt; • &lt;a title=&#34;Documentation&#34; href=&#34;https://quilljs.com/docs/&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; • &lt;a title=&#34;Development&#34; href=&#34;https://github.com/quilljs/quill/raw/master/.github/DEVELOPMENT.md&#34;&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/a&gt; • &lt;a title=&#34;Contributing&#34; href=&#34;https://github.com/quilljs/quill/raw/master/.github/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt; • &lt;a title=&#34;Interactive Playground&#34; href=&#34;https://quilljs.com/playground/&#34;&gt;&lt;strong&gt;Interactive Playground&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/quilljs/quill/actions&#34; title=&#34;Build Status&#34;&gt; &lt;img src=&#34;https://github.com/quilljs/quill/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/quill&#34; title=&#34;Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/quill.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/quill&#34; title=&#34;Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/quill.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://saucelabs.com/u/quill&#34; title=&#34;Test Status&#34;&gt; &lt;img src=&#34;https://cdn.quilljs.com/badge.svg?v=2&#34; alt=&#34;Test Status&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://quilljs.com/&#34;&gt;Quill&lt;/a&gt; is a modern rich text editor built for compatibility and extensibility. It was created by &lt;a href=&#34;https://twitter.com/jhchen&#34;&gt;Jason Chen&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/byronmilligan&#34;&gt;Byron Milligan&lt;/a&gt; and actively maintained by &lt;a href=&#34;https://slab.com&#34;&gt;Slab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get started, check out &lt;a href=&#34;https://quilljs.com/&#34;&gt;https://quilljs.com/&lt;/a&gt; for documentation, guides, and live demos!&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Instantiate a new Quill object with a css selector for the div that should become the editor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Include Quill stylesheet --&amp;gt;&#xA;&amp;lt;link href=&#34;https://cdn.quilljs.com/1.0.0/quill.snow.css&#34; rel=&#34;stylesheet&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- Create the toolbar container --&amp;gt;&#xA;&amp;lt;div id=&#34;toolbar&#34;&amp;gt;&#xA;  &amp;lt;button class=&#34;ql-bold&#34;&amp;gt;Bold&amp;lt;/button&amp;gt;&#xA;  &amp;lt;button class=&#34;ql-italic&#34;&amp;gt;Italic&amp;lt;/button&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;!-- Create the editor container --&amp;gt;&#xA;&amp;lt;div id=&#34;editor&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;!-- Include the Quill library --&amp;gt;&#xA;&amp;lt;script src=&#34;https://cdn.quilljs.com/1.0.0/quill.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;!-- Initialize Quill editor --&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  var editor = new Quill(&#39;#editor&#39;, {&#xA;    modules: { toolbar: &#39;#toolbar&#39; },&#xA;    theme: &#39;snow&#39;,&#xA;  });&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://quilljs.com/&#34;&gt;Quill&lt;/a&gt; website for more documentation, guides and &lt;a href=&#34;https://quilljs.com/playground/&#34;&gt;live playground&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/quill&#34;&gt;npm&lt;/a&gt; - &lt;code&gt;npm install quill&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;tar - &lt;a href=&#34;https://github.com/quilljs/quill/releases&#34;&gt;https://github.com/quilljs/quill/releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Main Quill library --&amp;gt;&#xA;&amp;lt;script src=&#34;//cdn.quilljs.com/1.0.0/quill.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;//cdn.quilljs.com/1.0.0/quill.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;!-- Theme included stylesheets --&amp;gt;&#xA;&amp;lt;link href=&#34;//cdn.quilljs.com/1.0.0/quill.snow.css&#34; rel=&#34;stylesheet&#34; /&amp;gt;&#xA;&amp;lt;link href=&#34;//cdn.quilljs.com/1.0.0/quill.bubble.css&#34; rel=&#34;stylesheet&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- Core build with no theme, formatting, non-essential modules --&amp;gt;&#xA;&amp;lt;link href=&#34;//cdn.quilljs.com/1.0.0/quill.core.css&#34; rel=&#34;stylesheet&#34; /&amp;gt;&#xA;&amp;lt;script src=&#34;//cdn.quilljs.com/1.0.0/quill.core.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Get help or stay up to date.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quilljs/quill/raw/develop/.github/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt; on &lt;a href=&#34;https://github.com/quilljs/quill/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/jhchen&#34;&gt;@jhchen&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/quilljs&#34;&gt;@quilljs&lt;/a&gt; on Twitter&lt;/li&gt; &#xA; &lt;li&gt;Ask questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/quill&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If privacy is required, email &lt;a href=&#34;mailto:support@quilljs.com&#34;&gt;support@quilljs.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD 3-clause&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RabbyHub/Rabby</title>
    <updated>2023-08-17T01:38:46Z</updated>
    <id>tag:github.com,2023-08-17:/RabbyHub/Rabby</id>
    <link href="https://github.com/RabbyHub/Rabby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The game-changing wallet for Ethereum and all EVM chains&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rabby Wallet&lt;/h1&gt; &#xA;&lt;p&gt;Rabby Wallet is an open source browser plugin for the DeFi ecosystem, providing users with a better-to-use and more secure multi-chain experience.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can Download the latest Rabby &lt;a href=&#34;https://github.com/RabbyHub/Rabby/releases/latest&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Guideline for integrating Rabby Wallet&lt;/h2&gt; &#xA;&lt;p&gt;To help dapp developers support and integrate Rabby Wallet more easily, we recommend you use our integration solution that has almost NO development cost and does not introduce any uncertainty:&lt;/p&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;When a dapp connects to an extension wallet, it usually works in this way:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The extension wallet will integrate an &#34;Ethereum&#34; object into the dapp page while it&#39;s loading;&lt;/li&gt; &#xA; &lt;li&gt;The dapp will look for this &#34;Ethereum&#34; object to determine if an extension wallet is installed;&lt;/li&gt; &#xA; &lt;li&gt;If the &#34;Ethereum&#34; object is detected, all following interactions between the dapp and the extension wallet are realized by this &#34;Ethereum&#34; object.&lt;/li&gt; &#xA; &lt;li&gt;If the &#34;Ethereum&#34; object is not detected, the dapp will ask users to download a new extension wallet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The problem is that many dapps will wrongly display this detected &#34;Ethereum&#34; object as &#34;MetaMask&#34; and displays a &#34;connect to MetaMask&#34; button by default which brings a lot of confusion to the users as any Web3 wallet can inject this &#34;Ethereum&#34; object.&lt;/p&gt; &#xA;&lt;h3&gt;Solution:&lt;/h3&gt; &#xA;&lt;p&gt;We recommend you to solve above problem with simple modifications as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On your connection page, display both connection buttons for &#34;MetaMask&#34; &amp;amp; &#34;Rabby Wallet&#34; when the &#34;Ethereum&#34; object is detected: these two buttons basically have the same function. Users can click any of them to interact with the &#34;Ethereum&#34; object and perform the connection operation. These two buttons are only used to display both brands&#39; logos to help users understand their operation path.&lt;/li&gt; &#xA; &lt;li&gt;If the &#34;Ethereum&#34; object is not detected, then suggest the users go download the extension wallet and provide download links for both &#34;MetaMask&#34; and &#34;Rabby Wallet&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This solution does not involve any change to your actual business logic and is just simple UI adjustments. It does not introduce any uncertainty and is with rather low cost.&lt;/p&gt; &#xA;&lt;p&gt;You can refer to &#34;&lt;a href=&#34;https://debank.com&#34;&gt;https://debank.com&lt;/a&gt;&#34; for final display effect.&lt;/p&gt; &#xA;&lt;h3&gt;Potential issues:&lt;/h3&gt; &#xA;&lt;p&gt;According to the above solution, if a user is using the &#34;Rabby Wallet&#34; and clicks the &#34;connect to MetaMask&#34; button, he will still interact with the &#34;Rabby Wallet&#34; and vice versa which might be a little bit weird.&lt;/p&gt; &#xA;&lt;p&gt;However, above issue is a very rare scenario and very unlikely to happen because users are not likely to click and interact with an extension wallet that he hasn&#39;t installed. Even it happens, it&#39;s not a real problem from the user&#39;s perspective.&lt;/p&gt; &#xA;&lt;p&gt;Please don&#39;t hesitate to reach us if you have any doubt.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;h3&gt;Install dependency&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Node.js version 14 or later&lt;/li&gt; &#xA; &lt;li&gt;Install Yarn &lt;code&gt;npm install -g yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; to install dependency&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;yarn build:dev&lt;/code&gt; to develop with file watching and development log(you can see request sent by dapp in website console in this mode and notification will not close when focus lost)&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;yarn build:pro&lt;/code&gt; to build a production package, it&#39;s in dist folder&lt;/p&gt; &#xA;&lt;h3&gt;Language&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;_raw/_locales/en/messages.json&lt;/code&gt; to &lt;code&gt;_raw/_locales/${localCode}/messages.json&lt;/code&gt; (Find your locale code in &lt;a href=&#34;https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes&#34;&gt;https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Replace content in &lt;code&gt;message&lt;/code&gt; property to your locale language&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;ATTENTION: When you create a new key, make sure the key should without space and not duplicate with exist(case insensitive)&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RabbyHub/Rabby/develop/docs/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extension&#39;s scripts&lt;/h2&gt; &#xA;&lt;p&gt;below 4 scripts all live in different context!&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;- &lt;code&gt;background.js&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;for all async request and encrypt things.&lt;/p&gt; &#xA;&lt;p&gt;user&#39;s keyrings, password and wallet personal preference data all stored in chrome local storage.&lt;/p&gt; &#xA;&lt;p&gt;it has 2 main controllers:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;walletController&lt;/code&gt;&lt;/p&gt; &lt;p&gt;it expose methods to background window, so other scripts can access these methods with &lt;code&gt;runtime.getBackgroundPage&lt;/code&gt;, e.g. &lt;code&gt;ui.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;providerController&lt;/code&gt;&lt;/p&gt; &lt;p&gt;it handles request from pages(dapp request).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;strong&gt;- &lt;code&gt;content-script&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;injected at &lt;code&gt;document_start&lt;/code&gt;, share the same dom with dapp, use &lt;code&gt;broadcastChannel&lt;/code&gt; to tap &lt;code&gt;pageProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;the main purpose is inject &lt;code&gt;pageProvider.js&lt;/code&gt; and pass messages between &lt;code&gt;pageProvider.js&lt;/code&gt; and &lt;code&gt;background.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;- &lt;code&gt;pageProvider.js&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;this script is injected into dapp&#39;s context through &lt;code&gt;content-script&lt;/code&gt;. it mounts &lt;code&gt;ethereum&lt;/code&gt; to &lt;code&gt;window&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;when dapp use &lt;code&gt;window.ethereum&lt;/code&gt; to request, it will send message to &lt;code&gt;content-script&lt;/code&gt; with &lt;code&gt;broadcastChannel&lt;/code&gt; and wait for it&#39;s response.&lt;/p&gt; &#xA;&lt;p&gt;then the &lt;code&gt;content-script&lt;/code&gt; will send message to &lt;code&gt;background&lt;/code&gt; with &lt;code&gt;runtime.connect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;after &lt;code&gt;background&lt;/code&gt; receive the message, it will use &lt;code&gt;providerController&lt;/code&gt; to handle the request. and keep the message channel in &lt;code&gt;sessionSevice&lt;/code&gt; for later communicate.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;- &lt;code&gt;ui&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;it&#39;s used by 3 pages which share the same js code, but the template html is different for respective purpose.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;notification.html&lt;/code&gt;&lt;/p&gt; &lt;p&gt;triggered by dapp to request user&#39;s permission.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt; &lt;p&gt;opened in browser tab for better user interaction experience.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;popup.html&lt;/code&gt;&lt;/p&gt; &lt;p&gt;user click the extension icon on the right of address bar, the popup will show.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for contributions from MetaMask team to browser extension wallet community, Rabby uses (or forks) them to make Rabby better.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>a16z-infra/ai-town</title>
    <updated>2023-08-17T01:38:46Z</updated>
    <id>tag:github.com,2023-08-17:/a16z-infra/ai-town</id>
    <link href="https://github.com/a16z-infra/ai-town" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A MIT-licensed, deployable starter kit for building and customizing your own version of AI town - a virtual town where AI characters live, chat and socialize.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Town 🏠💻💌&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.convex.dev/ai-town&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/PQUmTBTGmT&#34;&gt;Join our community Discord: AI Stack Devs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;1454&#34; alt=&#34;Screen Shot 2023-08-14 at 10 01 00 AM&#34; src=&#34;https://github.com/a16z-infra/ai-town/assets/3489963/a4c91f17-23ed-47ec-8c4e-9f9a8505057d&#34;&gt; &#xA;&lt;p&gt;AI Town is a virtual town where AI characters live, chat and socialize.&lt;/p&gt; &#xA;&lt;p&gt;This project is a deployable starter kit for easily building and customizing your own version of AI town. Inspired by the research paper &lt;a href=&#34;https://arxiv.org/pdf/2304.03442.pdf&#34;&gt;&lt;em&gt;Generative Agents: Interactive Simulacra of Human Behavior&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The primary goal of this project, beyond just being a lot of fun to work on, is to provide a platform with a strong foundation that is meant to be extended. The back-end engine natively supports shared global state, transactions, and a journal of all events so should be suitable for everything from a simple project to play around with to a scalable, multi-player game. A secondary goal is to make a JS/TS framework available as most simulators in this space (including the original paper above) are written in Python.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💻 &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-town/main/#stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🧠 &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-town/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;👤 &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-town/main/#customize-your-own-simulation&#34;&gt;Customize - run YOUR OWN simulated world&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🏆 &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-town/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Game engine &amp;amp; Database: &lt;a href=&#34;https://convex.dev/&#34;&gt;Convex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VectorDB: &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Auth: &lt;a href=&#34;https://clerk.com/&#34;&gt;Clerk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Text model: &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deployment: &lt;a href=&#34;https://fly.io/&#34;&gt;Fly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pixel Art Generation: &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt;, &lt;a href=&#34;https://serverless.fal.ai/lora&#34;&gt;Fal.ai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Clone repo and Install packages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:a16z-infra/ai-town.git&#xA;cd AI-town&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt; will fail asking for environment variables. Enter them in the environment variables on your Convex dashboard to proceed. You can get there via &lt;code&gt;npx convex dashboard&lt;/code&gt; or &lt;a href=&#34;https://dashboard.convex.dev&#34;&gt;https://dashboard.convex.dev&lt;/a&gt; See below on how to get the various environnment variables.&lt;/p&gt; &#xA;&lt;p&gt;a. &lt;strong&gt;Set up Clerk&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://dashboard.clerk.com/&#34;&gt;https://dashboard.clerk.com/&lt;/a&gt; and click on &#34;Add Application&#34;&lt;/li&gt; &#xA; &lt;li&gt;Name your application and select the sign-in providers you would like to offer users&lt;/li&gt; &#xA; &lt;li&gt;Create Application&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; to &lt;code&gt;.env.local&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_***&#xA;CLERK_SECRET_KEY=sk_***&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to JWT Templates and create a new Convex Template.&lt;/li&gt; &#xA; &lt;li&gt;Copy the JWKS endpoint URL for use below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;b. &lt;strong&gt;OpenAI API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt; to get your OpenAI API key if you&#39;re using OpenAI for your language model.&lt;/p&gt; &#xA;&lt;p&gt;c. &lt;strong&gt;Pinecone API keys&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Pinecone index by visiting &lt;a href=&#34;https://app.pinecone.io/&#34;&gt;https://app.pinecone.io/&lt;/a&gt; and click on &#34;Create Index&#34;&lt;/li&gt; &#xA; &lt;li&gt;Give it an index name (this will be the environment variable &lt;code&gt;PINECONE_INDEX_NAME&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fill in Dimension as &lt;code&gt;1536&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once the index is successfully created, click on &#34;API Keys&#34; on the left side nav and create an API key: copy &#34;Environment&#34; value to &lt;code&gt;PINECONE_ENVIRONMENT&lt;/code&gt; variable, and &#34;Value&#34; to &lt;code&gt;PINECONE_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;d. &lt;strong&gt;Add secrets to the convex dashboard&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx convex dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to &#34;settings&#34; and add the following environment varables. &lt;code&gt;CLERK_ISSUER_URL&lt;/code&gt; should be the URL from the JWKS endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY  sk-*******&#xA;CLERK_ISSUER_URL  https://****&#xA;PINECONE_API_KEY  ********&#xA;PINECONE_ENVIRONMENT us****&#xA;PINECONE_INDEX_NAME  ********&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the code&lt;/h3&gt; &#xA;&lt;p&gt;To run both the front and and back end:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now visit &lt;a href=&#34;http://localhost:%5BPORT_NUMBER%5D&#34;&gt;http://localhost:[PORT_NUMBER]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d rather run the frontend in a separate terminal from Convex (which syncs your backend functions as they&#39;re saved), you can run these two commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev:frontend&#xA;npm run dev:backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See package.json for details, but dev:backend runs &lt;code&gt;npx convex dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;*Note: The simulation will pause after 5 minutes if the window is idle. Loading the page will unpause it. If you want to run the world without the browser, you can comment-out the heartbeat check in &lt;code&gt;convex/engine.ts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Various commands to run / test / debug&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;To add a new world, seed it, and start it running&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you can add &lt;code&gt;--no-push&lt;/code&gt; to run these commands without first syncing the functions. If you already have &lt;code&gt;npm run dev&lt;/code&gt; running, this will be faster. If you remove it, it&#39;ll push up the latest version of code before running the command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx convex run init:reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To go one iteration at a time, you can create a world with&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx convex run --no-push init:resetFrozen&#xA;&#xA;# for each iteration&#xA;npx convex run --no-push engine:tick &#39;{&#34;worldId&#34;:&#34;&amp;lt;your world id&amp;gt;&#34;,&#34;noSchedule&#34;:true}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To freeze the back end, in case of too much activity&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx convex run --no-push engine:freezeAll&#xA;&#xA;# when ready to rerun (defaults to latest world)&#xA;npx convex run --no-push engine:unfreeze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To clear all databases&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to the dashboard &lt;code&gt;npx convex dashboard&lt;/code&gt; and clear tables from there.&lt;/li&gt; &#xA; &lt;li&gt;Adjust the variables in &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-town/main/convex/crons.ts&#34;&gt;&lt;code&gt;crons.ts&lt;/code&gt;&lt;/a&gt; to automatically clear up space from old journal and memory entries.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npx convex run --no-push testing:debugClearAll&lt;/code&gt; to wipe all the tables.&lt;/li&gt; &#xA; &lt;li&gt;As a fallback, if things are stuck, you can check out the &lt;code&gt;origin/reset-town&lt;/code&gt; git branch. Doing &lt;code&gt;npm run dev&lt;/code&gt; from there will clear your schema, stop your functions, and allow you to delete your tables in the dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To delete all vectors from the Pinecone index, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx convex run --no-push lib/pinecone:deleteAllVectors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you share this index between dev &amp;amp; prod, or between projects, it will wipe them all out. You generally don&#39;t need to be deleting vectors from Pinecone, as each query is indexed on the userId, which is unique between worlds and backend instances.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To Snoop on messages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the following in a side terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx convex run testing:listMessages --no-push --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to watch one player&#39;s state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx convex run testing:latestPlayer --no-push --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more functions in &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-town/main/convex/testing.ts&#34;&gt;&lt;code&gt;testing.ts&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy the app&lt;/h3&gt; &#xA;&lt;h4&gt;Deploy to fly.io&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Register an account on fly.io and then &lt;a href=&#34;https://fly.io/docs/hands-on/install-flyctl/&#34;&gt;install flyctl&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If you are using Github Codespaces&lt;/strong&gt;: You will need to &lt;a href=&#34;https://fly.io/docs/hands-on/install-flyctl/&#34;&gt;install flyctl&lt;/a&gt; and authenticate from your codespaces cli by running &lt;code&gt;fly auth login&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;npx convex deploy&lt;/code&gt; to deploy your dev environment to prod environment. Make sure you copy over all secrets to Convex&#39;s prod environment&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;fly launch&lt;/code&gt; under project root. This will generate a &lt;code&gt;fly.toml&lt;/code&gt; that includes all the configurations you will need&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify generated &lt;code&gt;fly.toml&lt;/code&gt; to include &lt;code&gt;NEXT_PUBLIC_*&lt;/code&gt; during build time for NextJS to access client side.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[build]&#xA;  [build.args]&#xA;    NEXT_PUBLIC_CLERK_SIGN_IN_URL=&#34;/sign-in&#34;&#xA;    NEXT_PUBLIC_CLERK_SIGN_UP_URL=&#34;/sign-up&#34;&#xA;    NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=&#34;/&#34;&#xA;    NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=&#34;/&#34;&#xA;    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=&#34;pk_*****&#34;&#xA;    NEXT_PUBLIC_CONVEX_URL=&#34;https://*******.convex.cloud&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify fly.io&#39;s generated &lt;code&gt;Dockerfile&lt;/code&gt; to include new ENV variables right above &lt;code&gt;RUN npm run build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;ARG NEXT_PUBLIC_CLERK_SIGN_IN_URL&#xA;ARG NEXT_PUBLIC_CLERK_SIGN_UP_URL&#xA;ARG NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL&#xA;ARG NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL&#xA;ARG NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&#xA;ARG NEXT_PUBLIC_CONVEX_URL&#xA;&#xA;# Build application&#xA;RUN npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;fly deploy --ha=false&lt;/code&gt; to deploy the app. The --ha flag makes sure fly only spins up one instance, which is included in the free plan.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;fly scale memory 512&lt;/code&gt; to scale up the fly vm memory for this app.&lt;/li&gt; &#xA; &lt;li&gt;Create a new file &lt;code&gt;.env.prod&lt;/code&gt; locally and fill in all the production-environment secrets. Remember to update &lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; by copying secrets from Clerk&#39;s production instance -&lt;code&gt;cat .env.prod | fly secrets import&lt;/code&gt; to upload secrets. Also remember to update &lt;code&gt;CONVEX_DEPLOYMENT&lt;/code&gt; and &lt;code&gt;NEXT_PUBLIC_CONVEX_URL&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize your own simulation&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: every time you change character data, you should re-run &lt;code&gt;npx convex run testing:debugClearAll --no-push&lt;/code&gt; and then &lt;code&gt;npm run dev&lt;/code&gt; to re-upload everything to Convex. This is because character data is sent to Convex on the initial load. However, beware that &lt;code&gt;npx convex run testing:debugClearAll --no-push&lt;/code&gt; WILL wipe all of your data, including your vector store.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create your own characters and stories: All characters and stories, as well as their spritesheet references are stored in &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-town/main/convex/characterdata/data.ts#L4&#34;&gt;data.ts&lt;/a&gt;. You can start by changing character descriptions.&lt;/li&gt; &#xA; &lt;li&gt;Updating spritesheets: in &lt;code&gt;data.ts&lt;/code&gt;, you will see this code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-export&#34;&gt;  {&#xA;    name: &#39;f1&#39;,&#xA;    textureUrl: &#39;/assets/32x32folk.png&#39;,&#xA;    spritesheetData: f1SpritesheetData,&#xA;    speed: 0.1,&#xA;  },...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should find a sprite sheet for your character, and define sprite motion / assets in the corresponding file (in the above example, &lt;code&gt;f1SpritesheetData&lt;/code&gt; was defined in f1.ts)&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Update the background (environment): &lt;code&gt;convex/maps/firstmap.ts&lt;/code&gt; is where the map gets loaded. The easiest way to export a tilemap is by using &lt;a href=&#34;https://www.mapeditor.org/&#34;&gt;Tiled&lt;/a&gt; -- Tiled exports tilemaps as a CSV and you can convert CSV to a 2d array accepted by firstmap.ts&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All interactions, background music and rendering on the &#xA;  &lt;game /&gt; component in the project are powered by &lt;a href=&#34;https://pixijs.com/&#34;&gt;PixiJS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tilesheet: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://opengameart.org/content/16x16-game-assets&#34;&gt;https://opengameart.org/content/16x16-game-assets&lt;/a&gt; by George Bailey&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://opengameart.org/content/16x16-rpg-tileset&#34;&gt;https://opengameart.org/content/16x16-rpg-tileset&lt;/a&gt; by hilau&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;We used &lt;a href=&#34;https://github.com/pierpo/phaser3-simple-rpg&#34;&gt;https://github.com/pierpo/phaser3-simple-rpg&lt;/a&gt; for the original POC of this project. We have since re-wrote the whole app, but appreciated the easy starting point&lt;/li&gt; &#xA; &lt;li&gt;Original assets by &lt;a href=&#34;https://opengameart.org/content/tiny-rpg-forest&#34;&gt;ansimuz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The UI is based on original assets by &lt;a href=&#34;https://mounirtohami.itch.io/pixel-art-gui-elements&#34;&gt;Mounir Tohami&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>