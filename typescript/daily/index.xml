<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-09T01:40:07Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fuergaosi233/wechat-chatgpt</title>
    <updated>2022-12-09T01:40:07Z</updated>
    <id>tag:github.com,2022-12-09:/fuergaosi233/wechat-chatgpt</id>
    <link href="https://github.com/fuergaosi233/wechat-chatgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use ChatGPT On Wechat via wechaty&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Welcome to wechat-chatgpt üëã&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/badge/version-1.0.0-blue.svg?cacheSeconds=2592000&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/fuergaosi233/wechat-chatgpt/main/#&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;License: ISC&#34; src=&#34;https://img.shields.io/badge/License-ISC-yellow.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/fuergaosi&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Twitter: fuergaosi&#34; src=&#34;https://img.shields.io/twitter/follow/fuergaosi.svg?style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Use ChatGPT On Wechat via wechaty&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üè† &lt;a href=&#34;https://github.com/fuergaosi233/wechat-chatgpt&#34;&gt;Homepage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;üåü Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use ChatGPT On Wechat via wechaty&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support OpenAI Accounts Pool&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support use proxy to login&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Simulated at message receive&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add conversation Support (Everyone will have their own session)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Dockerfile&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Publish to Docker.hub&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Raiway deploy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto Reload OpenAI Accounts Pool&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add sendmessage retry for 429/503&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use with docker (recommended)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp config.yaml.example config.yaml&#xA;# Change Config.yaml&#xA;docker run -d --name wechat-chatgpt -v $(pwd)/config.yaml:/app/config.yaml holegots/wechat-chatgpt:latest&#xA;# login with qrcode&#xA;docker logs -f wechat-chatgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install &amp;amp;&amp;amp; poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage with manual&lt;/h2&gt; &#xA;&lt;h3&gt;Copy config&lt;/h3&gt; &#xA;&lt;p&gt;You need copy config file for setting up your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp config.yaml.example config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get and config Openai account&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you don&#39;t have this OpenAI account and you live in China, you can get it &lt;a href=&#34;https://mirror.xyz/boxchen.eth/9O9CSqyKDj4BKUIil7NC1Sa1LJM-3hsPqaeW_QjfFBc&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;&lt;strong&gt;AÔºöUse account and password&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You need get OpenAI account and password. Your config.yaml should be like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;chatGPTAccountPool:&#xA;  - email: &amp;lt;your email&amp;gt;&#xA;    password: &amp;lt;your password&amp;gt;&#xA;# if you hope only some keywords can trigger chatgpt on private chat, you can set it like this:&#xA;chatPrivateTiggerKeyword: &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ö†Ô∏è Trigger keywords must appear in the first position of the received message. ‚ö†Ô∏è Pls make sure your network can log in to OpenAI, and if you fail to login in try setting up a proxy or using SessionToken.&lt;br&gt; &lt;strong&gt;Setup proxy:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export http_proxy=&amp;lt;Your Proxy&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;B: Use Session Token&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you cant use email and password to login your openai account or your network can&#39;t login, you can use session token. You need to follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://chat.openai.com/chat&#34;&gt;https://chat.openai.com/chat&lt;/a&gt; and log in or sign up.&lt;/li&gt; &#xA; &lt;li&gt;Open dev tools.&lt;/li&gt; &#xA; &lt;li&gt;Open Application &amp;gt; Cookies. &lt;img src=&#34;https://raw.githubusercontent.com/fuergaosi233/wechat-chatgpt/main/docs/images/session-token.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the value for __Secure-next-auth.session-token and save it to your config Your config.yaml should be like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;chatGPTAccountPool:&#xA;  - session_token: &amp;lt;your session_token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Project&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are logging in for the first time, then you need to scan the qrcode.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;üë§ &lt;strong&gt;holegots&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/fuergaosi&#34;&gt;@fuergaosi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/fuergaosi233&#34;&gt;@fuergaosi233&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions, issues and feature requests are welcome!&lt;br&gt;Feel free to check &lt;a href=&#34;https://github.com/fuergaosi233/wechat-chatgpt/issues&#34;&gt;issues page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Show your support&lt;/h2&gt; &#xA;&lt;p&gt;Give a ‚≠êÔ∏è if this project helped you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zenorocha/react-email</title>
    <updated>2022-12-09T01:40:07Z</updated>
    <id>tag:github.com,2022-12-09:/zenorocha/react-email</id>
    <link href="https://github.com/zenorocha/react-email" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíå Build and send emails using React&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://assets.react.email/covers/react-email.png&#34; alt=&#34;React email cover&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;strong&gt;React Email&lt;/strong&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; The next generation of writing emails.&#xA; &lt;br&gt;High-quality, unstyled components for creating emails.&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://react.email&#34;&gt;Website&lt;/a&gt; &#xA; &lt;span&gt; ¬∑ &lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/zenorocha/react-email&#34;&gt;GitHub&lt;/a&gt; &#xA; &lt;span&gt; ¬∑ &lt;/span&gt; &#xA; &lt;a href=&#34;https://react.email/discord&#34;&gt;Discord&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A collection of high-quality, unstyled components for creating beautiful emails using React and TypeScript. It reduces the pain of coding responsive emails with dark mode support. It also takes care of inconsistencies between Gmail, Outlook, and other email clients for you.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;We believe that email is an extremely important medium for people to communicate. However, we need to stop developing emails like 2010, and rethink how email can be done in 2022 and beyond. Email development needs a revamp. A renovation. Modernized for the way we build web apps today.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install one of the components from your command line.&lt;/p&gt; &#xA;&lt;h4&gt;With yarn&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add @react-email/button -E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With npm&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @react-email/button -E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Add the component to your email template. Include styles where needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Button } from &#39;@react-email/button&#39;;&#xA;&#xA;const Email = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;Button href=&#34;https://example.com&#34; style={{ color: &#39;#61dafb&#39; }}&amp;gt;&#xA;      Click me&#xA;    &amp;lt;/Button&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;A set of standard components to help you build amazing emails without having to deal with the mess of creating table-based layouts and maintaining archaic markup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/html&#34;&gt;Html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/head&#34;&gt;Head&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/button&#34;&gt;Button&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/link&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/img&#34;&gt;Image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/hr&#34;&gt;Divider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/text&#34;&gt;Paragraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/preview&#34;&gt;Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/column&#34;&gt;Column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/packages/section&#34;&gt;Section&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;Emails built with React Email can be converted into HTML and sent using any email service provider. Here are some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/examples/nodemailer&#34;&gt;Nodemailer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/examples/sendgrid&#34;&gt;SendGrid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/examples/postmark&#34;&gt;Postmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenorocha/react-email/tree/main/examples/aws-ses&#34;&gt;AWS SES&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;All components were tested using the most popular email clients.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://assets.react.email/icons/gmail.svg?sanitize=true&#34; width=&#34;48px&#34; height=&#34;48px&#34; alt=&#34;Gmail logo&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://assets.react.email/icons/apple-mail.svg?sanitize=true&#34; width=&#34;48px&#34; height=&#34;48px&#34; alt=&#34;Apple Mail&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://assets.react.email/icons/outlook.svg?sanitize=true&#34; width=&#34;48px&#34; height=&#34;48px&#34; alt=&#34;Outlook logo&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://assets.react.email/icons/yahoo-mail.svg?sanitize=true&#34; width=&#34;48px&#34; height=&#34;48px&#34; alt=&#34;Yahoo! Mail logo&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://assets.react.email/icons/hey.svg?sanitize=true&#34; width=&#34;48px&#34; height=&#34;48px&#34; alt=&#34;HEY logo&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://assets.react.email/icons/superhuman.svg?sanitize=true&#34; width=&#34;48px&#34; height=&#34;48px&#34; alt=&#34;Superhuman logo&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gmail ‚úî&lt;/td&gt; &#xA;   &lt;td&gt;Apple Mail ‚úî&lt;/td&gt; &#xA;   &lt;td&gt;Outlook ‚úî&lt;/td&gt; &#xA;   &lt;td&gt;Yahoo! Mail ‚úî&lt;/td&gt; &#xA;   &lt;td&gt;HEY ‚úî&lt;/td&gt; &#xA;   &lt;td&gt;Superhuman ‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h4&gt;Install dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build and run packages&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will initialize all packages in parallel and watch for changes, including the website which will be available at &lt;a href=&#34;http://localhost:3001&#34;&gt;localhost:3001&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bu Kinoshita (&lt;a href=&#34;https://twitter.com/bukinoshita&#34;&gt;@bukinoshita&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Zeno Rocha (&lt;a href=&#34;https://twitter.com/zenorocha&#34;&gt;@zenorocha&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AutumnWhj/ChatGPT-wechat-bot</title>
    <updated>2022-12-09T01:40:07Z</updated>
    <id>tag:github.com,2022-12-09:/AutumnWhj/ChatGPT-wechat-bot</id>
    <link href="https://github.com/AutumnWhj/ChatGPT-wechat-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT for wechat&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ChatGPT-wechat-botü§ñ&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/badge/version-1.0.0-blue.svg?cacheSeconds=2592000&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AutumnWhj/ChatGPT-wechat-bot/master/#&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;License: ISC&#34; src=&#34;https://img.shields.io/badge/License-ISC-yellow.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ChatGPT webchart bot is a WeChat assistant based on NodeJS and webchaty. This tool is more convenient for you to use ChatGPT, you just chat with it as a good friend or a housekeeper.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;support&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;can reply message when metioning your bot in room(group) &lt;a href=&#34;https://github.com/AutumnWhj/ChatGPT-wechat-bot/issues/5&#34;&gt;https://github.com/AutumnWhj/ChatGPT-wechat-bot/issues/5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;use docker to deploy wechat bot project &lt;a href=&#34;https://github.com/AutumnWhj/ChatGPT-wechat-bot/issues/9&#34;&gt;https://github.com/AutumnWhj/ChatGPT-wechat-bot/issues/9&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Use with docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;// build&#xA;docker build --pull --rm -f &#34;Dockerfile&#34; -t wechatbot:latest &#34;.&#34;&#xA;&#xA;// run, and then you will see some logs &#xA;docker run --name wechatbot wechatbot:latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;QA&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If your WeChat cannot log in&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please check the root directory of your project, whether there is a file ‚Äî‚Äî &lt;code&gt;wechaty-puppet-wechat.memory-card.json&lt;/code&gt;, if so, please delete it and try it again.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;support env&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;engines&#34;: { &#34;node&#34;: &#34;&amp;gt;=16&#34;, &#34;npm&#34;: &#34;&amp;gt;=7&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to get token?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Firstly, you should have an OpenAI account, then follow the steps below to get your token.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Refer to this article: &lt;a href=&#34;https://github.com/transitive-bullshit/chatgpt-api&#34;&gt;https://github.com/transitive-bullshit/chatgpt-api&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To get a session token:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to &lt;a href=&#34;https://chat.openai.com/chat&#34;&gt;https://chat.openai.com/chat&lt;/a&gt; and log in or sign up.&lt;/li&gt; &#xA;  &lt;li&gt;Open dev tools.&lt;/li&gt; &#xA;  &lt;li&gt;Open Application &amp;gt; Cookies.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2022/png/2777249/1670287051371-acd694da-cd3f-46c4-97c4-96438965f8a4.png#averageHue=%232d3136&amp;amp;clientId=uf4023d0a-0da7-4&amp;amp;crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;from=paste&amp;amp;height=497&amp;amp;id=u77b3570c&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=994&amp;amp;originWidth=1586&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=796464&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=uf4e7e669-4feb-431a-80b7-f7ab47c9113&amp;amp;title=&amp;amp;width=793&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;Copy the value for __Secure-next-auth.session-token and save it to your environment.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Now, you should fill your Token value into the ChatGPTSessionToken in the directory src/index.jsÔºå then run this project on local.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// install dependencies&#xA;npm i&#xA;&#xA;// dev&#xA;npm run dev&#xA;&#xA;// or &#xA;&#xA;// build&#xA;npm run build&#xA;// run lib&#xA;node lib/bundle.esm.js&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;you can see your logs, and scan qrcode to log in wechat.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2022/png/2777249/1670287138908-cc898c58-6e0a-488f-ae07-ae489508c1be.png#averageHue=%23484948&amp;amp;clientId=uf4023d0a-0da7-4&amp;amp;crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;from=paste&amp;amp;height=442&amp;amp;id=ub5fee6b7&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=1200&amp;amp;originWidth=1660&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=492370&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u233d9139-1ef5-42bf-9f44-354c6565862&amp;amp;title=&amp;amp;width=612&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Send a message to your WeChat and you will receive a reply from ChatGPT.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2022/png/2777249/1670288278607-73beed83-1a42-42db-8404-72ba60bf2c53.png#averageHue=%234d4e4d&amp;amp;clientId=uf4023d0a-0da7-4&amp;amp;crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;from=paste&amp;amp;height=437&amp;amp;id=uff52651b&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=874&amp;amp;originWidth=1398&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=543479&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=ub5559ec7-30f8-4c07-a9f8-1445a659835&amp;amp;title=&amp;amp;width=699&#34; alt=&#34;image.png&#34;&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2022/png/2777249/1670288469581-470c7f45-b3db-4a7e-ab01-32b44b812668.png#averageHue=%23f2f2f2&amp;amp;clientId=uf4023d0a-0da7-4&amp;amp;crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;from=paste&amp;amp;height=230&amp;amp;id=u97e5b1e5&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=460&amp;amp;originWidth=1266&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=112172&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u7d7970df-3044-4534-910c-fdb7b3d2a5b&amp;amp;title=&amp;amp;width=633&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>