<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-24T01:50:26Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vercel/hyper</title>
    <updated>2022-08-24T01:50:26Z</updated>
    <id>tag:github.com,2022-08-24:/vercel/hyper</id>
    <link href="https://github.com/vercel/hyper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A terminal built on web technologies&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://assets.vercel.com/image/upload/v1549723846/repositories/hyper/hyper-3-repo-banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Vercel logo&#34; href=&#34;https://vercel.com&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=vercel&amp;amp;labelColor=000000&amp;amp;logoWidth=20&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vercel/hyper/actions?query=workflow%3A%22Node+CI%22+branch%3Acanary+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/vercel/hyper/workflows/Node%20CI/badge.svg?event=push&#34; alt=&#34;Node CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://changelog.com/213&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/changelog-%23213-lightgrey.svg?sanitize=true&#34; alt=&#34;Changelog #213&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more details, head to: &lt;a href=&#34;https://hyper.is&#34;&gt;https://hyper.is&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project goals&lt;/h2&gt; &#xA;&lt;p&gt;The goal of the project is to create a beautiful and extensible experience for command-line interface users, built on open web standards. In the beginning, our focus will be primarily around speed, stability and the development of the correct API for extension authors.&lt;/p&gt; &#xA;&lt;p&gt;In the future, we anticipate the community will come up with innovative additions to enhance what could be the simplest, most powerful and well-tested interface for productivity.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hyper.is/#installation&#34;&gt;Download the latest release!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Arch and derivatives&lt;/h4&gt; &#xA;&lt;p&gt;Hyper is available in the &lt;a href=&#34;https://aur.archlinux.org/packages/hyper/&#34;&gt;AUR&lt;/a&gt;. Use an AUR &lt;a href=&#34;https://wiki.archlinux.org/index.php/AUR_helpers&#34;&gt;package manager&lt;/a&gt; e.g. &lt;a href=&#34;https://github.com/Morganamilo/paru&#34;&gt;paru&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S hyper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NixOS&lt;/h4&gt; &#xA;&lt;p&gt;Hyper is available as &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/applications/misc/hyper/default.nix&#34;&gt;Nix package&lt;/a&gt;, to install the app run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -i hyper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew Cask&lt;/a&gt; to download the app by running these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update&#xA;brew install --cask hyper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://chocolatey.org/&#34;&gt;chocolatey&lt;/a&gt; to install the app by running the following command (package information can be found &lt;a href=&#34;https://chocolatey.org/packages/hyper/&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install hyper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The version available on &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew Cask&lt;/a&gt;, &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;, &lt;a href=&#34;https://snapcraft.io/store&#34;&gt;Snapcraft&lt;/a&gt; or the &lt;a href=&#34;https://aur.archlinux.org&#34;&gt;AUR&lt;/a&gt; may not be the latest. Please consider downloading it from &lt;a href=&#34;https://hyper.is/#installation&#34;&gt;here&lt;/a&gt; if that&#39;s the case.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Regardless of the platform you are working on, you will need to have Yarn installed. If you have never installed Yarn before, you can find out how at: &lt;a href=&#34;https://yarnpkg.com/en/docs/install&#34;&gt;https://yarnpkg.com/en/docs/install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install necessary packages:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Be sure to run &lt;code&gt;yarn global add windows-build-tools&lt;/code&gt; from an elevated prompt (as an administrator) to install &lt;code&gt;windows-build-tools&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;macOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Once you have installed Yarn, you can skip this section!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux (You can see &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Linux_distributions&#34;&gt;here&lt;/a&gt; what your Linux is based on.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RPM-based &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;GraphicsMagick&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;libicns-utils&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;xz&lt;/code&gt; (Installed by default on some distributions.)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Debian-based &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;graphicsmagick&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;icnsutils&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;xz-utils&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;Fork&lt;/a&gt; this repository to your own GitHub account and then &lt;a href=&#34;https://help.github.com/articles/cloning-a-repository/&#34;&gt;clone&lt;/a&gt; it to your local device&lt;/li&gt; &#xA; &lt;li&gt;Install the dependencies: &lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the code and watch for changes: &lt;code&gt;yarn run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To run &lt;code&gt;hyper&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn run app&lt;/code&gt; from another terminal tab/window/pane&lt;/li&gt; &#xA; &lt;li&gt;If you are using &lt;strong&gt;Visual Studio Code&lt;/strong&gt;, select &lt;code&gt;Launch Hyper&lt;/code&gt; in debugger configuration to launch a new Hyper instance with debugger attached.&lt;/li&gt; &#xA; &lt;li&gt;If you interrupt &lt;code&gt;yarn run dev&lt;/code&gt;, you&#39;ll need to relaunch it each time you want to test something. Webpack will watch changes and will rebuild renderer code when needed (and only what have changed). You&#39;ll just have to relaunch electron by using yarn run app or VSCode launch task.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To make sure that your code works in the finished application, you can generate the binaries like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn run dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, you will see the binary in the &lt;code&gt;./dist&lt;/code&gt; folder!&lt;/p&gt; &#xA;&lt;h4&gt;Known issues that can happen during development&lt;/h4&gt; &#xA;&lt;h5&gt;Error building &lt;code&gt;node-pty&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If after building during development you get an alert dialog related to &lt;code&gt;node-pty&lt;/code&gt; issues, make sure its build process is working correctly by running &lt;code&gt;yarn run rebuild-node-pty&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are on macOS, this typically is related to Xcode issues (like not having agreed to the Terms of Service by running &lt;code&gt;sudo xcodebuild&lt;/code&gt; after a fresh Xcode installation).&lt;/p&gt; &#xA;&lt;h5&gt;Error with &lt;code&gt;C++&lt;/code&gt; on macOS when running &lt;code&gt;yarn&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you are getting compiler errors when running &lt;code&gt;yarn&lt;/code&gt; add the environment variable &lt;code&gt;export CXX=clang++&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Error with &lt;code&gt;codesign&lt;/code&gt; on macOS when running &lt;code&gt;yarn run dist&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you have issues in the &lt;code&gt;codesign&lt;/code&gt; step when running &lt;code&gt;yarn run dist&lt;/code&gt; on macOS, you can temporarily disable code signing locally by setting &lt;code&gt;export CSC_IDENTITY_AUTO_DISCOVERY=false&lt;/code&gt; for the current terminal session.&lt;/p&gt; &#xA;&lt;h2&gt;Related Repositories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vercel/hyper-site&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vercel/hyperpower&#34;&gt;Sample Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vercel/hyperyellow&#34;&gt;Sample Theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bnb/awesome-hyper&#34;&gt;Awesome Hyper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>actions/cache</title>
    <updated>2022-08-24T01:50:26Z</updated>
    <id>tag:github.com,2022-08-24:/actions/cache</id>
    <link href="https://github.com/actions/cache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cache dependencies and build outputs in GitHub Actions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cache&lt;/h1&gt; &#xA;&lt;p&gt;This action allows caching dependencies and build outputs to improve workflow execution time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/actions/cache/actions/workflows/workflow.yml&#34;&gt;&lt;img src=&#34;https://github.com/actions/cache/actions/workflows/workflow.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://help.github.com/github/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows&#34;&gt;&#34;Caching dependencies to speed up workflows&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s New&lt;/h2&gt; &#xA;&lt;h3&gt;v3&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added support for caching from GHES 3.5.&lt;/li&gt; &#xA; &lt;li&gt;Fixed download issue for files &amp;gt; 2GB during restore.&lt;/li&gt; &#xA; &lt;li&gt;Updated the minimum runner version support from node 12 -&amp;gt; node 16.&lt;/li&gt; &#xA; &lt;li&gt;Fixed avoiding empty cache save when no files are available for caching.&lt;/li&gt; &#xA; &lt;li&gt;Fixed tar creation error while trying to create tar with path as &lt;code&gt;~/&lt;/code&gt; home folder on &lt;code&gt;ubuntu-latest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fixed zstd failing on amazon linux 2.0 runners.&lt;/li&gt; &#xA; &lt;li&gt;Fixed cache not working with github workspace directory or current directory.&lt;/li&gt; &#xA; &lt;li&gt;Fixed the download stuck problem by introducing a timeout of 1 hour for cache downloads.&lt;/li&gt; &#xA; &lt;li&gt;Fix zstd not working for windows on gnu tar in issues.&lt;/li&gt; &#xA; &lt;li&gt;Allowing users to provide a custom timeout as input for aborting download of a cache segment using an environment variable &lt;code&gt;SEGMENT_DOWNLOAD_TIMEOUT_MIN&lt;/code&gt;. Default is 60 minutes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer &lt;a href=&#34;https://github.com/actions/cache/raw/v2/README.md&#34;&gt;here&lt;/a&gt; for previous versions&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-requisites&lt;/h3&gt; &#xA;&lt;p&gt;Create a workflow &lt;code&gt;.yml&lt;/code&gt; file in your repositories &lt;code&gt;.github/workflows&lt;/code&gt; directory. An &lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/#example-workflow&#34;&gt;example workflow&lt;/a&gt; is available below. For more information, reference the GitHub Help Documentation for &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-workflow#creating-a-workflow-file&#34;&gt;Creating a workflow file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using this inside a container, a POSIX-compliant &lt;code&gt;tar&lt;/code&gt; needs to be included and accessible in the execution path.&lt;/p&gt; &#xA;&lt;h3&gt;Inputs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt; - A list of files, directories, and wildcard patterns to cache and restore. See &lt;a href=&#34;https://github.com/actions/toolkit/tree/main/packages/glob&#34;&gt;&lt;code&gt;@actions/glob&lt;/code&gt;&lt;/a&gt; for supported patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;key&lt;/code&gt; - An explicit key for restoring and saving the cache&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;restore-keys&lt;/code&gt; - An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note &lt;code&gt;cache-hit&lt;/code&gt; returns false in this case.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Environment Variables&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SEGMENT_DOWNLOAD_TIMEOUT_MIN&lt;/code&gt; - Segment download timeout (in minutes, default &lt;code&gt;60&lt;/code&gt;) to abort download of the segment if not completed in the defined number of minutes. &lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/#cache-segment-restore-timeout&#34;&gt;Read more&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Outputs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cache-hit&lt;/code&gt; - A boolean value to indicate an exact match was found for the key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/#Skipping-steps-based-on-cache-hit&#34;&gt;Skipping steps based on cache-hit&lt;/a&gt; for info on using this output&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cache scopes&lt;/h3&gt; &#xA;&lt;p&gt;The cache is scoped to the key and branch. The default branch cache is available to other branches.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key&#34;&gt;Matching a cache key&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Example workflow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Caching Primes&#xA;&#xA;on: push&#xA;&#xA;jobs:&#xA;  build:&#xA;    runs-on: ubuntu-latest&#xA;&#xA;    steps:&#xA;    - uses: actions/checkout@v3&#xA;&#xA;    - name: Cache Primes&#xA;      id: cache-primes&#xA;      uses: actions/cache@v3&#xA;      with:&#xA;        path: prime-numbers&#xA;        key: ${{ runner.os }}-primes&#xA;&#xA;    - name: Generate Prime Numbers&#xA;      if: steps.cache-primes.outputs.cache-hit != &#39;true&#39;&#xA;      run: /generate-primes.sh -d prime-numbers&#xA;&#xA;    - name: Use Prime Numbers&#xA;      run: /primes.sh -d prime-numbers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You must use the &lt;code&gt;cache&lt;/code&gt; action in your workflow before you need to use the files that might be restored from the cache. If the provided &lt;code&gt;key&lt;/code&gt; doesn&#39;t match an existing cache, a new cache is automatically created if the job completes successfully.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Implementation Examples&lt;/h2&gt; &#xA;&lt;p&gt;Every programming language and framework has its own way of caching.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md&#34;&gt;Examples&lt;/a&gt; for a list of &lt;code&gt;actions/cache&lt;/code&gt; implementations for use with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#c---nuget&#34;&gt;C# - NuGet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#clojure---lein-deps&#34;&gt;Clojure - Lein Deps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#d---dub&#34;&gt;D - DUB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#deno&#34;&gt;Deno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#elixir---mix&#34;&gt;Elixir - Mix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#go---modules&#34;&gt;Go - Modules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#haskell---cabal&#34;&gt;Haskell - Cabal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#haskell---stack&#34;&gt;Haskell - Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#java---gradle&#34;&gt;Java - Gradle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#java---maven&#34;&gt;Java - Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#node---npm&#34;&gt;Node - npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#node---lerna&#34;&gt;Node - Lerna&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#node---yarn&#34;&gt;Node - Yarn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#ocamlreason---esy&#34;&gt;OCaml/Reason - esy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#php---composer&#34;&gt;PHP - Composer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#python---pip&#34;&gt;Python - pip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#python---pipenv&#34;&gt;Python - pipenv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#r---renv&#34;&gt;R - renv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#ruby---bundler&#34;&gt;Ruby - Bundler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#rust---cargo&#34;&gt;Rust - Cargo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#scala---sbt&#34;&gt;Scala - SBT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#swift-objective-c---carthage&#34;&gt;Swift, Objective-C - Carthage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#swift-objective-c---cocoapods&#34;&gt;Swift, Objective-C - CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/examples.md#swift---swift-package-manager&#34;&gt;Swift - Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Creating a cache key&lt;/h2&gt; &#xA;&lt;p&gt;A cache key can include any of the contexts, functions, literals, and operators supported by GitHub Actions.&lt;/p&gt; &#xA;&lt;p&gt;For example, using the &lt;a href=&#34;https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#hashfiles&#34;&gt;&lt;code&gt;hashFiles&lt;/code&gt;&lt;/a&gt; function allows you to create a new cache when dependencies change.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  - uses: actions/cache@v3&#xA;    with:&#xA;      path: |&#xA;        path/to/dependencies&#xA;        some/other/dependencies&#xA;      key: ${{ runner.os }}-${{ hashFiles(&#39;**/lockfiles&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can use arbitrary command output in a cache key, such as a date or software version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  # http://man7.org/linux/man-pages/man1/date.1.html&#xA;  - name: Get Date&#xA;    id: get-date&#xA;    run: |&#xA;      echo &#34;::set-output name=date::$(/bin/date -u &#34;+%Y%m%d&#34;)&#34;&#xA;    shell: bash&#xA;&#xA;  - uses: actions/cache@v3&#xA;    with:&#xA;      path: path/to/dependencies&#xA;      key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles(&#39;**/lockfiles&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows#using-contexts-to-create-cache-keys&#34;&gt;Using contexts to create cache keys&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cache Limits&lt;/h2&gt; &#xA;&lt;p&gt;A repository can have up to 10GB of caches. Once the 10GB limit is reached, older caches will be evicted based on when the cache was last accessed. Caches that are not accessed within the last week will also be evicted.&lt;/p&gt; &#xA;&lt;h2&gt;Skipping steps based on cache-hit&lt;/h2&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;cache-hit&lt;/code&gt; output, subsequent steps (such as install or build) can be skipped when a cache hit occurs on the key.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - uses: actions/checkout@v3&#xA;&#xA;  - uses: actions/cache@v3&#xA;    id: cache&#xA;    with:&#xA;      path: path/to/dependencies&#xA;      key: ${{ runner.os }}-${{ hashFiles(&#39;**/lockfiles&#39;) }}&#xA;&#xA;  - name: Install Dependencies&#xA;    if: steps.cache.outputs.cache-hit != &#39;true&#39;&#xA;    run: /install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The &lt;code&gt;id&lt;/code&gt; defined in &lt;code&gt;actions/cache&lt;/code&gt; must match the &lt;code&gt;id&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement (i.e. &lt;code&gt;steps.[ID].outputs.cache-hit&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Cache Version&lt;/h2&gt; &#xA;&lt;p&gt;Cache version is unique for a combination of compression tool used for compression of cache (Gzip, Zstd, etc based on runner OS) and the path of directories being cached. If two caches have different versions, they are identified as unique cache entries. This also means that a cache created on &lt;code&gt;windows-latest&lt;/code&gt; runner can&#39;t be restored on &lt;code&gt;ubuntu-latest&lt;/code&gt; as cache &lt;code&gt;Version&lt;/code&gt;s are different.&lt;/p&gt; &#xA;&lt;p&gt;Example: Below example will create 3 unique caches with same keys. Ubuntu and windows runners will use different compression technique and hence create two different caches. And &lt;code&gt;build-linux&lt;/code&gt; will create two different caches as the &lt;code&gt;paths&lt;/code&gt; are different.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  build-linux:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;&#xA;      - name: Cache Primes&#xA;        id: cache-primes&#xA;        uses: actions/cache@v3&#xA;        with:&#xA;          path: prime-numbers&#xA;          key: primes&#xA;&#xA;      - name: Generate Prime Numbers&#xA;        if: steps.cache-primes.outputs.cache-hit != &#39;true&#39;&#xA;        run: ./generate-primes.sh -d prime-numbers&#xA;&#xA;      - name: Cache Numbers&#xA;        id: cache-numbers&#xA;        uses: actions/cache@v3&#xA;        with:&#xA;          path: numbers&#xA;          key: primes&#xA;&#xA;      - name: Generate Numbers&#xA;        if: steps.cache-numbers.outputs.cache-hit != &#39;true&#39;&#xA;        run: ./generate-primes.sh -d numbers&#xA;&#xA;  build-windows:&#xA;    runs-on: windows-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;&#xA;      - name: Cache Primes&#xA;        id: cache-primes&#xA;        uses: actions/cache@v3&#xA;        with:&#xA;          path: prime-numbers&#xA;          key: primes&#xA;&#xA;      - name: Generate Prime Numbers&#xA;        if: steps.cache-primes.outputs.cache-hit != &#39;true&#39;&#xA;        run: ./generate-primes -d prime-numbers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cache segment restore timeout&lt;/h2&gt; &#xA;&lt;p&gt;A cache gets downloaded in multiple segments of fixed sizes (&lt;code&gt;1GB&lt;/code&gt; for a &lt;code&gt;32-bit&lt;/code&gt; runner and &lt;code&gt;2GB&lt;/code&gt; for a &lt;code&gt;64-bit&lt;/code&gt; runner). Sometimes, a segment download gets stuck which causes the workflow job to be stuck forever and fail. Version &lt;code&gt;v3.0.8&lt;/code&gt; of &lt;code&gt;actions/cache&lt;/code&gt; introduces a segment download timeout. The segment download timeout will allow the segment download to get aborted and hence allow the job to proceed with a cache miss.&lt;/p&gt; &#xA;&lt;p&gt;Default value of this timeout is 60 minutes and can be customized by specifying an &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/environment-variables&#34;&gt;environment variable&lt;/a&gt; named &lt;code&gt;SEGMENT_DOWNLOAD_TIMEOUT_MINS&lt;/code&gt; with timeout value in minutes.&lt;/p&gt; &#xA;&lt;h2&gt;Known practices and workarounds&lt;/h2&gt; &#xA;&lt;p&gt;Following are some of the known practices/workarounds which community has used to fulfill specific requirements. You may choose to use them if suits your use case. Note these are not necessarily the only or the recommended solution.&lt;/p&gt; &#xA;&lt;h4&gt;Update a cache&lt;/h4&gt; &#xA;&lt;p&gt;A cache today is immutable and cannot be updated. But some use cases require the cache to be saved even though there was a &#34;hit&#34; during restore. To do so, use a &lt;code&gt;key&lt;/code&gt; which is unique for every run and use &lt;code&gt;restore-keys&lt;/code&gt; to restore the nearest cache. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    - name: update cache on every commit&#xA;      uses: actions/cache@v3&#xA;      with:&#xA;        path: prime-numbers&#xA;        key: primes-${{ runner.os }}-${{ github.run_id }} # Can use time based key as well&#xA;        restore-keys: |&#xA;          primes-${{ runner.os }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that this will create a new cache on every run and hence will consume the cache &lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/#cache-limits&#34;&gt;quota&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Use cache across feature branches&lt;/h4&gt; &#xA;&lt;p&gt;Reusing cache across feature branches is not allowed today to provide cache &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache&#34;&gt;isolation&lt;/a&gt;. However if both feature branches are from the default branch, a good way to achieve this is to ensure that the default branch has a cache. This cache will then be consumable by both feature branches.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We would love for you to contribute to &lt;code&gt;actions/cache&lt;/code&gt;, pull requests are welcome! Please see the &lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The scripts and documentation in this project are released under the &lt;a href=&#34;https://raw.githubusercontent.com/actions/cache/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>f2e-developer/chinese-f2e-developer</title>
    <updated>2022-08-24T01:50:26Z</updated>
    <id>tag:github.com,2022-08-24:/f2e-developer/chinese-f2e-developer</id>
    <link href="https://github.com/f2e-developer/chinese-f2e-developer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中国前端开发者。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;中国前端开发者&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;个人视野有限，请不吝 PR！缓慢施工 🚧 中。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;为什么会有这个仓库？前几日转了 &lt;a href=&#34;https://github.com/fz6m&#34;&gt;Yingci&lt;/a&gt; 的文章&lt;a href=&#34;https://mp.weixin.qq.com/s/McVmzQcSM82gtT0UDnX5Nw&#34;&gt;「国内 FE 圈常见用语方法论」&lt;/a&gt; 到我的公众号，发现大家对这个还挺感兴趣，因为这篇是我的公众号留言最多的一篇。。与此同时，发现遗漏了不少同学，以及一些描述可能不准确，所以在 Github 上整理一份，可以大家一起协同维护更新，也方便更多同学了解前端社区。&lt;/p&gt; &#xA;&lt;p&gt;什么样的同学可以加入到这个列表？暂定是「活跃、有一定社区影响力、关注后能带来收获的开发者」，不再活跃的开发者会定期挪到「不活跃」标题下。同时介绍部分可以贴上链接宣传下自己的作品、书或服务。如有不准确的描述或者不希望出现在这个列表上，也可 PR 删除。&lt;/p&gt; &#xA;&lt;h2&gt;活跃开发者&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;排名不分先后，以 [首字母].sort() 排序。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/antfu&#34;&gt;antfu&lt;/a&gt;&lt;/strong&gt; - 狂热的开源软件开发者，就职于 &lt;a href=&#34;https://nuxtlabs.com/&#34;&gt;NuxtLabs&lt;/a&gt;，Vitest、Slidev、VueUse、UnoCSS 等库作者，Vue、Nuxt、Vite 核心成员。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ConardLi&#34;&gt;ConardLi&lt;/a&gt;&lt;/strong&gt; - 世奇，字节员工，公众号「code秘密花园」作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/cuixiaorui&#34;&gt;崔效瑞&lt;/a&gt;&lt;/strong&gt; - web 前端 &lt;a href=&#34;https://space.bilibili.com/175301983&#34;&gt;up 主&lt;/a&gt;，&lt;a href=&#34;https://github.com/cuixiaorui/mini-vue&#34;&gt;mini-vue&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/shengxinjing&#34;&gt;大圣&lt;/a&gt;&lt;/strong&gt; - 花果山大圣，前开课吧讲师，公众号「花果山前端」作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/haixiangyan&#34;&gt;海怪&lt;/a&gt;&lt;/strong&gt; - 腾讯员工，公众号「写代码的海怪」作者，写有开源小书&lt;a href=&#34;https://github.com/haixiangyan/jest-tutorial&#34;&gt;《Jest 实践指南》&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/hax&#34;&gt;Hax&lt;/a&gt;&lt;/strong&gt; - 贺师俊，TC39 特邀专家，前端行业 20 多年发展历程见证人和参与者，OpenAtom TOC 成员。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Huxpro&#34;&gt;黄玄&lt;/a&gt;&lt;/strong&gt; - 就职于 Meta，React Team 核心成员，现负责 React Forget 项目，曾参与 &lt;a href=&#34;https://hermesengine.dev/&#34;&gt;Hermes JavaScript 引擎&lt;/a&gt;，&lt;a href=&#34;https://reasonml.github.io/&#34;&gt;ReasonML&lt;/a&gt;（现 &lt;a href=&#34;https://rescript-lang.org/&#34;&gt;ReScript&lt;/a&gt;）等。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ustbhuangyi&#34;&gt;黄轶&lt;/a&gt;&lt;/strong&gt; - zoom 员工，慕课网&lt;a href=&#34;https://www.imooc.com/u/3017249&#34;&gt;明星讲师&lt;/a&gt;，Vue.js 布道者，&lt;a href=&#34;https://ustbhuangyi.github.io/vue-analysis/&#34;&gt;《Vue.js 技术揭秘》&lt;/a&gt; 独立作者，《Vue.js 权威指南》主要作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ascoders&#34;&gt;黄子毅&lt;/a&gt;&lt;/strong&gt; - 阿里员工，&lt;a href=&#34;https://github.com/ascoders/weekly&#34;&gt;「前端精读周刊」&lt;/a&gt;作者。。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/HcySunYang&#34;&gt;霍春阳&lt;/a&gt;&lt;/strong&gt; - Vue 团队成员，&lt;a href=&#34;https://book.douban.com/subject/35768338/&#34;&gt;《Vue.js 设计与实现》&lt;/a&gt;作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/shenghy&#34;&gt;技术胖&lt;/a&gt;&lt;/strong&gt; - 活跃的前端讲师，任职于百姓网。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/JounQin&#34;&gt;JounQin&lt;/a&gt;&lt;/strong&gt; - 狂热开源爱好者，&lt;a href=&#34;https://github.com/alauda&#34;&gt;@Alauda&lt;/a&gt; 灵雀云在职员工，&lt;a href=&#34;https://github.com/unifiedjs&#34;&gt;unified&lt;/a&gt; 生态核心维护者和开发者，&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eslint&lt;/a&gt; 生态开发者，&lt;a href=&#34;https://github.com/prettier/eslint-plugin-prettier&#34;&gt;eslint-plugin-prettier&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;stylelint&lt;/a&gt; 维护者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/justjavac&#34;&gt;justjavac&lt;/a&gt;&lt;/strong&gt; - 。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/awmleer&#34;&gt;卡晨&lt;/a&gt;&lt;/strong&gt; - 蚂蚁员工，&lt;a href=&#34;https://github.com/ant-design/ant-design-mobile&#34;&gt;Antd Mobile&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/BetaSu&#34;&gt;卡颂&lt;/a&gt;&lt;/strong&gt; - 。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/i5ting&#34;&gt;狼叔&lt;/a&gt;&lt;/strong&gt; - 阿里员工，写有《狼书》系列，即将出版《狼书(卷3)》。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/berwin&#34;&gt;刘博文&lt;/a&gt;&lt;/strong&gt; - 阿里员工，W3C 性能工作组成员，&lt;a href=&#34;https://book.douban.com/subject/32581281&#34;&gt;《深入浅出 Vue.js》&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/afc163&#34;&gt;偏右&lt;/a&gt;&lt;/strong&gt; - 蚂蚁员工，&lt;a href=&#34;https://ant.design/&#34;&gt;Ant Design&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/PeachScript&#34;&gt;辟起&lt;/a&gt;&lt;/strong&gt; - 蚂蚁员工，&lt;a href=&#34;https://d.umijs.org/&#34;&gt;dumi&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/JacksonTian&#34;&gt;朴灵&lt;/a&gt;&lt;/strong&gt; - 阿里员工，Node.js 布道者，&lt;a href=&#34;https://book.douban.com/subject/25768396/&#34;&gt;《深入浅出 Node.js》&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/hua1995116&#34;&gt;秋风&lt;/a&gt;&lt;/strong&gt; - 公众号「秋风的笔记」作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/chenshuai2144&#34;&gt;期贤&lt;/a&gt;&lt;/strong&gt; - 蚂蚁员工，名望程序员，&lt;a href=&#34;https://pro.ant.design/&#34;&gt;Ant Design Pro&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ruanyf&#34;&gt;阮一峰&lt;/a&gt;&lt;/strong&gt; - 。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lxchuan12&#34;&gt;若川&lt;/a&gt;&lt;/strong&gt; - 公众号「若川视野」作者，源码共读领头人。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sanyuan0704&#34;&gt;三元&lt;/a&gt;&lt;/strong&gt; - 字节员工，公众号「三元同学」作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/zaoscott&#34;&gt;Scott&lt;/a&gt;&lt;/strong&gt; - 「&lt;a href=&#34;https://www.zaozao.run/&#34;&gt;前端早早聊大会&lt;/a&gt;」创始人，帮 1000 多位国内外前端工程师做过职业规划与辅导。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/QuarkGluonPlasma&#34;&gt;神光&lt;/a&gt;&lt;/strong&gt; - 神说要有光，前高德、Coupang 员工，现全职自由职业，公众号「神光的编程秘籍」作者，写有&lt;a href=&#34;https://juejin.cn/book/6946117847848321055&#34;&gt;《Babel 插件通关秘籍》&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/XadillaX&#34;&gt;死月&lt;/a&gt;&lt;/strong&gt; - 。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sl1673495&#34;&gt;SSH&lt;/a&gt;&lt;/strong&gt; - 单是昊，字节员工，公众号「前端从进阶到入门」作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sudongyuer&#34;&gt;速冻鱼&lt;/a&gt;&lt;/strong&gt; - 开源爱好者，公众号「前端速冻鱼」作者，写有开源小书&lt;a href=&#34;https://github.com/sudongyuer/learn-eslint&#34;&gt;《ESLint通关小册》&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/theanarkh&#34;&gt;theanarkh&lt;/a&gt;&lt;/strong&gt; - 字节员工，公众号「编程杂技」作者，nodejs 爱好者，写有「&lt;a href=&#34;https://github.com/theanarkh/understand-nodejs&#34;&gt;通过源码分析nodejs原理&lt;/a&gt;」等 nodejs 相关内容。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/atian25&#34;&gt;天猪&lt;/a&gt;&lt;/strong&gt; - 。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Geekhyt&#34;&gt;童欧巴&lt;/a&gt;&lt;/strong&gt; - 理想汽车员工，公众号「前端食堂」、「&lt;a href=&#34;https://github.com/Geekhyt/weekly&#34;&gt;前端食堂技术周刊&lt;/a&gt;」作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/underfin&#34;&gt;underfin&lt;/a&gt;&lt;/strong&gt; - 字节员工，vite 核心作者。&lt;a href=&#34;https://github.com/vitejs/vite&#34;&gt;vite&lt;/a&gt; ,vue core 核心 member。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xiaohuoni&#34;&gt;小虎&lt;/a&gt;&lt;/strong&gt; - 聪小陈，&lt;a href=&#34;https://github.com/alitajs/alita&#34;&gt;Alita&lt;/a&gt; 作者，Umi 核心成员。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/yanhaijing&#34;&gt;颜海镜&lt;/a&gt;&lt;/strong&gt; - 公众号「颜海镜」， 写有《React状态管理与同构实战》。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mqyqingfeng&#34;&gt;冴羽&lt;/a&gt;&lt;/strong&gt; - 。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/KieSun&#34;&gt;YCK&lt;/a&gt;&lt;/strong&gt; - 。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/kuitos&#34;&gt;有知&lt;/a&gt;&lt;/strong&gt; - 蚂蚁员工，&lt;a href=&#34;https://github.com/umijs/qiankun&#34;&gt;qiankun&lt;/a&gt; 作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lifesinger&#34;&gt;玉伯&lt;/a&gt;&lt;/strong&gt; - 蚂蚁员工，蚂蚁体验技术部负责人。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/akira-cn&#34;&gt;月影&lt;/a&gt;&lt;/strong&gt; - 字节员工，前奇舞团负责人，「跟月影学可视化」等课程作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sorrycc&#34;&gt;云谦&lt;/a&gt;&lt;/strong&gt; - 阿里 &amp;amp; 蚂蚁 10 年 + 老前端，ZJU，&lt;a href=&#34;https://github.com/umijs/umi&#34;&gt;Umi&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/dvajs/dva&#34;&gt;Dva&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/umijs/babel-plugin-import&#34;&gt;babel-plugin-import&lt;/a&gt; 等开源库作者，蚂蚁中台框架 Owner，「MDH 前端周刊」作者，付费星球&lt;a href=&#34;https://q.sorrycc.com/&#34;&gt;「云谦 · 前端日更星球」&lt;/a&gt;作者。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/zhangxinxu&#34;&gt;张鑫旭&lt;/a&gt;&lt;/strong&gt; - 阅文员工， 写有《CSS世界》、《CSS新世界》、《CSS选择器》，CSS领域大佬。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/brickspert&#34;&gt;砖家&lt;/a&gt;&lt;/strong&gt; - 蚂蚁员工，花名「尽龙」，&lt;a href=&#34;https://github.com/alibaba/hooks&#34;&gt;ahooks&lt;/a&gt; 作者，公众号「前端技术砖家」作者。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;不活跃开发者&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不再活跃的开发者会定期挪到这里。排名不分先后，以 [首字母].sort() 排序。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;参考&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fz6m/weixin-fe&#34;&gt;https://github.com/fz6m/weixin-fe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>