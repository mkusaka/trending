<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-13T01:38:35Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chimurai/http-proxy-middleware</title>
    <updated>2024-06-13T01:38:35Z</updated>
    <id>tag:github.com,2024-06-13:/chimurai/http-proxy-middleware</id>
    <link href="https://github.com/chimurai/http-proxy-middleware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö° The one-liner node.js http-proxy middleware for connect, express, next.js and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;http-proxy-middleware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/chimurai/http-proxy-middleware/ci.yml?branch=master&amp;amp;logo=github-actions&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;GitHub Workflow Status (with branch)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/chimurai/http-proxy-middleware&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/chimurai/http-proxy-middleware.svg?style=flat-square&amp;amp;logo=coveralls&#34; alt=&#34;Coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/chimurai/http-proxy-middleware&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/chimurai/http-proxy-middleware/badge.svg?sanitize=true&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/http-proxy-middleware&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/http-proxy-middleware?color=%23CC3534&amp;amp;style=flat-square&amp;amp;logo=npm&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js proxying made simple. Configure proxy middleware with ease for &lt;a href=&#34;https://github.com/senchalabs/connect&#34;&gt;connect&lt;/a&gt;, &lt;a href=&#34;https://github.com/expressjs/express&#34;&gt;express&lt;/a&gt;, &lt;a href=&#34;https://github.com/vercel/next.js&#34;&gt;next.js&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#compatible-servers&#34;&gt;many more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Powered by the popular Nodejitsu &lt;a href=&#34;https://github.com/http-party/node-http-proxy&#34;&gt;&lt;code&gt;http-proxy&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://github.com/http-party/node-http-proxy&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/http-party/node-http-proxy.svg?style=social&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ö†Ô∏è Note &#xA; &lt;!-- omit in toc --&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This page is showing documentation for version v3.x.x (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/releases&#34;&gt;release notes&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/raw/master/MIGRATION.md&#34;&gt;MIGRATION.md&lt;/a&gt; for details on how to migrate from v2.x.x to v3.x.x&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for older documentation. Go to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/v2.0.4#readme&#34;&gt;https://github.com/chimurai/http-proxy-middleware/tree/v2.0.4#readme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/v0.21.0#readme&#34;&gt;https://github.com/chimurai/http-proxy-middleware/tree/v0.21.0#readme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TL;DR &#xA; &lt;!-- omit in toc --&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Proxy &lt;code&gt;/api&lt;/code&gt; requests to &lt;code&gt;http://www.example.org&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip:&lt;/strong&gt; Set the option &lt;code&gt;changeOrigin&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for &lt;a href=&#34;http://en.wikipedia.org/wiki/Virtual_hosting#Name-based&#34;&gt;name-based virtual hosted sites&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// typescript&#xA;&#xA;import * as express from &#39;express&#39;;&#xA;import type { Request, Response, NextFunction } from &#39;express&#39;;&#xA;&#xA;import { createProxyMiddleware } from &#39;http-proxy-middleware&#39;;&#xA;import type { Filter, Options, RequestHandler } from &#39;http-proxy-middleware&#39;;&#xA;&#xA;const app = express();&#xA;&#xA;const proxyMiddleware = createProxyMiddleware&amp;lt;Request, Response&amp;gt;({&#xA;    target: &#39;http://www.example.org/api&#39;,&#xA;    changeOrigin: true,&#xA;  }),&#xA;&#xA;app.use(&#39;/api&#39;, proxyMiddleware);&#xA;&#xA;app.listen(3000);&#xA;&#xA;// proxy and keep the same base path &#34;/api&#34;&#xA;// http://127.0.0.1:3000/api/foo/bar -&amp;gt; http://www.example.org/api/foo/bar&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;All&lt;/em&gt; &lt;code&gt;http-proxy&lt;/code&gt; &lt;a href=&#34;https://github.com/nodejitsu/node-http-proxy#options&#34;&gt;options&lt;/a&gt; can be used, along with some extra &lt;code&gt;http-proxy-middleware&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#options&#34;&gt;options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents &#xA; &lt;!-- omit in toc --&gt;&lt;/h2&gt; &#xA;&lt;!-- // spell-checker:disable --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#basic-usage&#34;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#express-server-example&#34;&gt;Express Server Example&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#appusepath-proxy&#34;&gt;app.use(path, proxy)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#options&#34;&gt;Options&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#pathfilter-string-string-glob-glob-function&#34;&gt;&lt;code&gt;pathFilter&lt;/code&gt; (string, []string, glob, []glob, function)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#pathrewrite-objectfunction&#34;&gt;&lt;code&gt;pathRewrite&lt;/code&gt; (object/function)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#router-objectfunction&#34;&gt;&lt;code&gt;router&lt;/code&gt; (object/function)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#plugins-array&#34;&gt;&lt;code&gt;plugins&lt;/code&gt; (Array)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#ejectplugins-boolean-default-false&#34;&gt;&lt;code&gt;ejectPlugins&lt;/code&gt; (boolean) default: &lt;code&gt;false&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#logger-object&#34;&gt;&lt;code&gt;logger&lt;/code&gt; (Object)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#http-proxy-events&#34;&gt;&lt;code&gt;http-proxy&lt;/code&gt; events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#http-proxy-options&#34;&gt;&lt;code&gt;http-proxy&lt;/code&gt; options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#websocket&#34;&gt;WebSocket&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#external-websocket-upgrade&#34;&gt;External WebSocket upgrade&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#intercept-and-manipulate-requests&#34;&gt;Intercept and manipulate requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#intercept-and-manipulate-responses&#34;&gt;Intercept and manipulate responses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#nodejs-17-econnrefused-issue-with-ipv6-and-localhost-705&#34;&gt;Node.js 17+: ECONNREFUSED issue with IPv6 and localhost (#705)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#working-examples&#34;&gt;Working examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#recipes&#34;&gt;Recipes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#compatible-servers&#34;&gt;Compatible servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- // spell-checker:enable --&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install --save-dev http-proxy-middleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Create and configure a proxy middleware with: &lt;code&gt;createProxyMiddleware(config)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { createProxyMiddleware } = require(&#39;http-proxy-middleware&#39;);&#xA;&#xA;const apiProxy = createProxyMiddleware({&#xA;  target: &#39;http://www.example.org&#39;,&#xA;  changeOrigin: true,&#xA;});&#xA;&#xA;// &#39;apiProxy&#39; is now ready to be used as middleware in a server.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;options.target&lt;/strong&gt;: target host to proxy to. &lt;em&gt;(protocol + host)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;options.changeOrigin&lt;/strong&gt;: for virtual hosted sites&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;see full list of &lt;a href=&#34;https://raw.githubusercontent.com/chimurai/http-proxy-middleware/master/#options&#34;&gt;&lt;code&gt;http-proxy-middleware&lt;/code&gt; configuration options&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Express Server Example&lt;/h2&gt; &#xA;&lt;p&gt;An example with &lt;code&gt;express&lt;/code&gt; server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// include dependencies&#xA;const express = require(&#39;express&#39;);&#xA;const { createProxyMiddleware } = require(&#39;http-proxy-middleware&#39;);&#xA;&#xA;const app = express();&#xA;&#xA;// create the proxy&#xA;/** @type {import(&#39;http-proxy-middleware/dist/types&#39;).RequestHandler&amp;lt;express.Request, express.Response&amp;gt;} */&#xA;const exampleProxy = createProxyMiddleware({&#xA;  target: &#39;http://www.example.org/api&#39;, // target host with the same base path&#xA;  changeOrigin: true, // needed for virtual hosted sites&#xA;});&#xA;&#xA;// mount `exampleProxy` in web server&#xA;app.use(&#39;/api&#39;, exampleProxy);&#xA;app.listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;app.use(path, proxy)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the server&#39;s &lt;code&gt;app.use&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; parameter to match requests. Use &lt;code&gt;pathFilter&lt;/code&gt; option to further include/exclude requests which you want to proxy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.use(&#xA;  createProxyMiddleware({&#xA;    target: &#39;http://www.example.org/api&#39;,&#xA;    changeOrigin: true,&#xA;    pathFilter: &#39;/api/proxy-only-this-path&#39;,&#xA;  }),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;app.use&lt;/code&gt; documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;express: &lt;a href=&#34;http://expressjs.com/en/4x/api.html#app.use&#34;&gt;http://expressjs.com/en/4x/api.html#app.use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;connect: &lt;a href=&#34;https://github.com/senchalabs/connect#mount-middleware&#34;&gt;https://github.com/senchalabs/connect#mount-middleware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;polka: &lt;a href=&#34;https://github.com/lukeed/polka#usebase-fn&#34;&gt;https://github.com/lukeed/polka#usebase-fn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;http-proxy-middleware options:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;pathFilter&lt;/code&gt; (string, []string, glob, []glob, function)&lt;/h3&gt; &#xA;&lt;p&gt;Narrow down which requests should be proxied. The &lt;code&gt;path&lt;/code&gt; used for filtering is the &lt;code&gt;request.url&lt;/code&gt; pathname. In Express, this is the &lt;code&gt;path&lt;/code&gt; relative to the mount-point of the proxy.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;path matching&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({...})&lt;/code&gt; - matches any path, all requests will be proxied when &lt;code&gt;pathFilter&lt;/code&gt; is not configured.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: &#39;/api&#39;, ...})&lt;/code&gt; - matches paths starting with &lt;code&gt;/api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;multiple path matching&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: [&#39;/api&#39;, &#39;/ajax&#39;, &#39;/someotherpath&#39;], ...})&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;wildcard path matching&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For fine-grained control you can use wildcard matching. Glob pattern matching is done by &lt;em&gt;micromatch&lt;/em&gt;. Visit &lt;a href=&#34;https://www.npmjs.com/package/micromatch&#34;&gt;micromatch&lt;/a&gt; or &lt;a href=&#34;https://www.npmjs.com/package/glob&#34;&gt;glob&lt;/a&gt; for more globbing examples.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: &#39;**&#39;, ...})&lt;/code&gt; matches any path, all requests will be proxied.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: &#39;**/*.html&#39;, ...})&lt;/code&gt; matches any path which ends with &lt;code&gt;.html&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: &#39;/*.html&#39;, ...})&lt;/code&gt; matches paths directly under path-absolute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: &#39;/api/**/*.html&#39;, ...})&lt;/code&gt; matches requests ending with &lt;code&gt;.html&lt;/code&gt; in the path of &lt;code&gt;/api&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: [&#39;/api/**&#39;, &#39;/ajax/**&#39;], ...})&lt;/code&gt; combine multiple patterns&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createProxyMiddleware({ pathFilter: [&#39;/api/**&#39;, &#39;!**/bad.json&#39;], ...})&lt;/code&gt; exclusion&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In multiple path matching, you cannot use string paths and wildcard paths together.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;custom matching&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For full control you can provide a custom function to determine which requests should be proxied or not.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**&#xA; * @return {Boolean}&#xA; */&#xA;const pathFilter = function (path, req) {&#xA;  return path.match(&#39;^/api&#39;) &amp;amp;&amp;amp; req.method === &#39;GET&#39;;&#xA;};&#xA;&#xA;const apiProxy = createProxyMiddleware({&#xA;  target: &#39;http://www.example.org&#39;,&#xA;  pathFilter: pathFilter,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;pathRewrite&lt;/code&gt; (object/function)&lt;/h3&gt; &#xA;&lt;p&gt;Rewrite target&#39;s url path. Object-keys will be used as &lt;em&gt;RegExp&lt;/em&gt; to match paths.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// rewrite path&#xA;pathRewrite: {&#39;^/old/api&#39; : &#39;/new/api&#39;}&#xA;&#xA;// remove path&#xA;pathRewrite: {&#39;^/remove/api&#39; : &#39;&#39;}&#xA;&#xA;// add base path&#xA;pathRewrite: {&#39;^/&#39; : &#39;/basepath/&#39;}&#xA;&#xA;// custom rewriting&#xA;pathRewrite: function (path, req) { return path.replace(&#39;/api&#39;, &#39;/base/api&#39;) }&#xA;&#xA;// custom rewriting, returning Promise&#xA;pathRewrite: async function (path, req) {&#xA;  const should_add_something = await httpRequestToDecideSomething(path);&#xA;  if (should_add_something) path += &#34;something&#34;;&#xA;  return path;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;router&lt;/code&gt; (object/function)&lt;/h3&gt; &#xA;&lt;p&gt;Re-target &lt;code&gt;option.target&lt;/code&gt; for specific requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Use `host` and/or `path` to match requests. First match will be used.&#xA;// The order of the configuration matters.&#xA;router: {&#xA;    &#39;integration.localhost:3000&#39; : &#39;http://127.0.0.1:8001&#39;,  // host only&#xA;    &#39;staging.localhost:3000&#39;     : &#39;http://127.0.0.1:8002&#39;,  // host only&#xA;    &#39;localhost:3000/api&#39;         : &#39;http://127.0.0.1:8003&#39;,  // host + path&#xA;    &#39;/rest&#39;                      : &#39;http://127.0.0.1:8004&#39;   // path only&#xA;}&#xA;&#xA;// Custom router function (string target)&#xA;router: function(req) {&#xA;    return &#39;http://127.0.0.1:8004&#39;;&#xA;}&#xA;&#xA;// Custom router function (target object)&#xA;router: function(req) {&#xA;    return {&#xA;        protocol: &#39;https:&#39;, // The : is required&#xA;        host: &#39;127.0.0.1&#39;,&#xA;        port: 8004&#xA;    };&#xA;}&#xA;&#xA;// Asynchronous router function which returns promise&#xA;router: async function(req) {&#xA;    const url = await doSomeIO();&#xA;    return url;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;plugins&lt;/code&gt; (Array)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const simpleRequestLogger = (proxyServer, options) =&amp;gt; {&#xA;  proxyServer.on(&#39;proxyReq&#39;, (proxyReq, req, res) =&amp;gt; {&#xA;    console.log(`[HPM] [${req.method}] ${req.url}`); // outputs: [HPM] GET /users&#xA;  });&#xA;},&#xA;&#xA;const config = {&#xA;  target: `http://example.org`,&#xA;  changeOrigin: true,&#xA;  plugins: [simpleRequestLogger],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;ejectPlugins&lt;/code&gt; (boolean) default: &lt;code&gt;false&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re not satisfied with the pre-configured plugins, you can eject them by configuring &lt;code&gt;ejectPlugins: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: register your own error handlers to prevent server from crashing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// eject default plugins and manually add them back&#xA;&#xA;const {&#xA;  debugProxyErrorsPlugin, // subscribe to proxy errors to prevent server from crashing&#xA;  loggerPlugin, // log proxy events to a logger (ie. console)&#xA;  errorResponsePlugin, // return 5xx response on proxy error&#xA;  proxyEventsPlugin, // implements the &#34;on:&#34; option&#xA;} = require(&#39;http-proxy-middleware&#39;);&#xA;&#xA;createProxyMiddleware({&#xA;  target: `http://example.org`,&#xA;  changeOrigin: true,&#xA;  ejectPlugins: true,&#xA;  plugins: [debugProxyErrorsPlugin, loggerPlugin, errorResponsePlugin, proxyEventsPlugin],&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;logger&lt;/code&gt; (Object)&lt;/h3&gt; &#xA;&lt;p&gt;Configure a logger to output information from http-proxy-middleware: ie. &lt;code&gt;console&lt;/code&gt;, &lt;code&gt;winston&lt;/code&gt;, &lt;code&gt;pino&lt;/code&gt;, &lt;code&gt;bunyan&lt;/code&gt;, &lt;code&gt;log4js&lt;/code&gt;, etc...&lt;/p&gt; &#xA;&lt;p&gt;Only &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; are used internally for compatibility across different loggers.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;winston&lt;/code&gt;, make sure to enable interpolation: &lt;a href=&#34;https://github.com/winstonjs/winston#string-interpolation&#34;&gt;https://github.com/winstonjs/winston#string-interpolation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also logger recipes (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/raw/master/recipes/logger.md&#34;&gt;recipes/logger.md&lt;/a&gt;) for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;createProxyMiddleware({&#xA;  logger: console,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;http-proxy&lt;/code&gt; events&lt;/h2&gt; &#xA;&lt;p&gt;Subscribe to &lt;a href=&#34;https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events&#34;&gt;http-proxy events&lt;/a&gt; with the &lt;code&gt;on&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createProxyMiddleware({&#xA;  target: &#39;http://www.example.org&#39;,&#xA;  on: {&#xA;    proxyReq: (proxyReq, req, res) =&amp;gt; {&#xA;      /* handle proxyReq */&#xA;    },&#xA;    proxyRes: (proxyRes, req, res) =&amp;gt; {&#xA;      /* handle proxyRes */&#xA;    },&#xA;    error: (err, req, res) =&amp;gt; {&#xA;      /* handle error */&#xA;    },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.on.error&lt;/strong&gt;: function, subscribe to http-proxy&#39;s &lt;code&gt;error&lt;/code&gt; event for custom error handling.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onError(err, req, res, target) {&#xA;  res.writeHead(500, {&#xA;    &#39;Content-Type&#39;: &#39;text/plain&#39;,&#xA;  });&#xA;  res.end(&#39;Something went wrong. And we are reporting a custom error message.&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.on.proxyRes&lt;/strong&gt;: function, subscribe to http-proxy&#39;s &lt;code&gt;proxyRes&lt;/code&gt; event.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onProxyRes(proxyRes, req, res) {&#xA;  proxyRes.headers[&#39;x-added&#39;] = &#39;foobar&#39;; // add new header to response&#xA;  delete proxyRes.headers[&#39;x-removed&#39;]; // remove header from response&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.on.proxyReq&lt;/strong&gt;: function, subscribe to http-proxy&#39;s &lt;code&gt;proxyReq&lt;/code&gt; event.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onProxyReq(proxyReq, req, res) {&#xA;  // add custom header to request&#xA;  proxyReq.setHeader(&#39;x-added&#39;, &#39;foobar&#39;);&#xA;  // or log the req&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.on.proxyReqWs&lt;/strong&gt;: function, subscribe to http-proxy&#39;s &lt;code&gt;proxyReqWs&lt;/code&gt; event.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onProxyReqWs(proxyReq, req, socket, options, head) {&#xA;  // add custom header&#xA;  proxyReq.setHeader(&#39;X-Special-Proxy-Header&#39;, &#39;foobar&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.on.open&lt;/strong&gt;: function, subscribe to http-proxy&#39;s &lt;code&gt;open&lt;/code&gt; event.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onOpen(proxySocket) {&#xA;  // listen for messages coming FROM the target here&#xA;  proxySocket.on(&#39;data&#39;, hybridParseAndLogMessage);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.on.close&lt;/strong&gt;: function, subscribe to http-proxy&#39;s &lt;code&gt;close&lt;/code&gt; event.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onClose(res, socket, head) {&#xA;  // view disconnected websocket connections&#xA;  console.log(&#39;Client disconnected&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;http-proxy&lt;/code&gt; options&lt;/h2&gt; &#xA;&lt;p&gt;The following options are provided by the underlying &lt;a href=&#34;https://github.com/nodejitsu/node-http-proxy#options&#34;&gt;http-proxy&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.target&lt;/strong&gt;: url string to be parsed with the url module&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.forward&lt;/strong&gt;: url string to be parsed with the url module&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.agent&lt;/strong&gt;: object to be passed to http(s).request (see Node&#39;s &lt;a href=&#34;http://nodejs.org/api/https.html#https_class_https_agent&#34;&gt;https agent&lt;/a&gt; and &lt;a href=&#34;http://nodejs.org/api/http.html#http_class_http_agent&#34;&gt;http agent&lt;/a&gt; objects)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.ssl&lt;/strong&gt;: object to be passed to https.createServer()&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.ws&lt;/strong&gt;: true/false: if you want to proxy websockets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.xfwd&lt;/strong&gt;: true/false, adds x-forward headers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.secure&lt;/strong&gt;: true/false, if you want to verify the SSL Certs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.toProxy&lt;/strong&gt;: true/false, passes the absolute URL as the &lt;code&gt;path&lt;/code&gt; (useful for proxying to proxies)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.prependPath&lt;/strong&gt;: true/false, Default: true - specify whether you want to prepend the target&#39;s path to the proxy path&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.ignorePath&lt;/strong&gt;: true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request (note: you will have to append / manually if required).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.localAddress&lt;/strong&gt; : Local interface string to bind for outgoing connections&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.changeOrigin&lt;/strong&gt;: true/false, Default: false - changes the origin of the host header to the target URL&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.preserveHeaderKeyCase&lt;/strong&gt;: true/false, Default: false - specify whether you want to keep letter case of response header key&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.auth&lt;/strong&gt; : Basic authentication i.e. &#39;user:password&#39; to compute an Authorization header.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.hostRewrite&lt;/strong&gt;: rewrites the location hostname on (301/302/307/308) redirects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.autoRewrite&lt;/strong&gt;: rewrites the location host/port on (301/302/307/308) redirects based on requested host/port. Default: false.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.protocolRewrite&lt;/strong&gt;: rewrites the location protocol on (301/302/307/308) redirects to &#39;http&#39; or &#39;https&#39;. Default: null.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.cookieDomainRewrite&lt;/strong&gt;: rewrites domain of &lt;code&gt;set-cookie&lt;/code&gt; headers. Possible values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;false&lt;/code&gt; (default): disable cookie rewriting&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;String: new domain, for example &lt;code&gt;cookieDomainRewrite: &#34;new.domain&#34;&lt;/code&gt;. To remove the domain, use &lt;code&gt;cookieDomainRewrite: &#34;&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Object: mapping of domains to new domains, use &lt;code&gt;&#34;*&#34;&lt;/code&gt; to match all domains.&lt;br&gt; For example keep one domain unchanged, rewrite one domain and remove other domains:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;cookieDomainRewrite: {&#xA;  &#34;unchanged.domain&#34;: &#34;unchanged.domain&#34;,&#xA;  &#34;old.domain&#34;: &#34;new.domain&#34;,&#xA;  &#34;*&#34;: &#34;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.cookiePathRewrite&lt;/strong&gt;: rewrites path of &lt;code&gt;set-cookie&lt;/code&gt; headers. Possible values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;false&lt;/code&gt; (default): disable cookie rewriting&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;String: new path, for example &lt;code&gt;cookiePathRewrite: &#34;/newPath/&#34;&lt;/code&gt;. To remove the path, use &lt;code&gt;cookiePathRewrite: &#34;&#34;&lt;/code&gt;. To set path to root use &lt;code&gt;cookiePathRewrite: &#34;/&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Object: mapping of paths to new paths, use &lt;code&gt;&#34;*&#34;&lt;/code&gt; to match all paths. For example, to keep one path unchanged, rewrite one path and remove other paths:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;cookiePathRewrite: {&#xA;  &#34;/unchanged.path/&#34;: &#34;/unchanged.path/&#34;,&#xA;  &#34;/old.path/&#34;: &#34;/new.path/&#34;,&#xA;  &#34;*&#34;: &#34;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.headers&lt;/strong&gt;: object, adds &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields&#34;&gt;request headers&lt;/a&gt;. (Example: &lt;code&gt;{host:&#39;www.example.org&#39;}&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.proxyTimeout&lt;/strong&gt;: timeout (in millis) when proxy receives no response from target&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.timeout&lt;/strong&gt;: timeout (in millis) for incoming requests&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.followRedirects&lt;/strong&gt;: true/false, Default: false - specify whether you want to follow redirects&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.selfHandleResponse&lt;/strong&gt; true/false, if set to true, none of the webOutgoing passes are called and it&#39;s your responsibility to appropriately return the response by listening and acting on the &lt;code&gt;proxyRes&lt;/code&gt; event&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;option.buffer&lt;/strong&gt;: stream of data to send as the request body. Maybe you have some middleware that consumes the request stream before proxying it on e.g. If you read the body of a request into a field called &#39;req.rawbody&#39; you could restream this field in the buffer option:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;&#xA;&#xA;const streamify = require(&#39;stream-array&#39;);&#xA;const HttpProxy = require(&#39;http-proxy&#39;);&#xA;const proxy = new HttpProxy();&#xA;&#xA;module.exports = (req, res, next) =&amp;gt; {&#xA;  proxy.web(&#xA;    req,&#xA;    res,&#xA;    {&#xA;      target: &#39;http://127.0.0.1:4003/&#39;,&#xA;      buffer: streamify(req.rawBody),&#xA;    },&#xA;    next,&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;WebSocket&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// verbose api&#xA;createProxyMiddleware({ pathFilter: &#39;/&#39;, target: &#39;http://echo.websocket.org&#39;, ws: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;External WebSocket upgrade&lt;/h3&gt; &#xA;&lt;p&gt;In the previous WebSocket examples, http-proxy-middleware relies on a initial http request in order to listen to the http &lt;code&gt;upgrade&lt;/code&gt; event. If you need to proxy WebSockets without the initial http request, you can subscribe to the server&#39;s http &lt;code&gt;upgrade&lt;/code&gt; event manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const wsProxy = createProxyMiddleware({ target: &#39;ws://echo.websocket.org&#39;, changeOrigin: true });&#xA;&#xA;const app = express();&#xA;app.use(wsProxy);&#xA;&#xA;const server = app.listen(3000);&#xA;server.on(&#39;upgrade&#39;, wsProxy.upgrade); // &amp;lt;-- subscribe to http &#39;upgrade&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Intercept and manipulate requests&lt;/h2&gt; &#xA;&lt;p&gt;Intercept requests from downstream by defining &lt;code&gt;onProxyReq&lt;/code&gt; in &lt;code&gt;createProxyMiddleware&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently the only pre-provided request interceptor is &lt;code&gt;fixRequestBody&lt;/code&gt;, which is used to fix proxied POST requests when &lt;code&gt;bodyParser&lt;/code&gt; is applied before this middleware.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { createProxyMiddleware, fixRequestBody } = require(&#39;http-proxy-middleware&#39;);&#xA;&#xA;const proxy = createProxyMiddleware({&#xA;  /**&#xA;   * Fix bodyParser&#xA;   **/&#xA;  on: {&#xA;    proxyReq: fixRequestBody,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Intercept and manipulate responses&lt;/h2&gt; &#xA;&lt;p&gt;Intercept responses from upstream with &lt;code&gt;responseInterceptor&lt;/code&gt;. (Make sure to set &lt;code&gt;selfHandleResponse: true&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Responses which are compressed with &lt;code&gt;brotli&lt;/code&gt;, &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;deflate&lt;/code&gt; will be decompressed automatically. The response will be returned as &lt;code&gt;buffer&lt;/code&gt; (&lt;a href=&#34;https://nodejs.org/api/buffer.html&#34;&gt;docs&lt;/a&gt;) which you can manipulate.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;buffer&lt;/code&gt;, response manipulation is not limited to text responses (html/css/js, etc...); image manipulation will be possible too. (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/raw/master/recipes/response-interceptor.md#manipulate-image-response&#34;&gt;example&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;NOTE: &lt;code&gt;responseInterceptor&lt;/code&gt; disables streaming of target&#39;s response.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { createProxyMiddleware, responseInterceptor } = require(&#39;http-proxy-middleware&#39;);&#xA;&#xA;const proxy = createProxyMiddleware({&#xA;  /**&#xA;   * IMPORTANT: avoid res.end being called automatically&#xA;   **/&#xA;  selfHandleResponse: true, // res.end() will be called internally by responseInterceptor()&#xA;&#xA;  /**&#xA;   * Intercept response and replace &#39;Hello&#39; with &#39;Goodbye&#39;&#xA;   **/&#xA;  on: {&#xA;    proxyRes: responseInterceptor(async (responseBuffer, proxyRes, req, res) =&amp;gt; {&#xA;      const response = responseBuffer.toString(&#39;utf8&#39;); // convert buffer to string&#xA;      return response.replace(&#39;Hello&#39;, &#39;Goodbye&#39;); // manipulate response and return the result&#xA;    }),&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/raw/master/recipes/response-interceptor.md#readme&#34;&gt;interception recipes&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;Node.js 17+: ECONNREFUSED issue with IPv6 and localhost (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/issues/705&#34;&gt;#705&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Node.js 17+ no longer prefers IPv4 over IPv6 for DNS lookups. E.g. It&#39;s &lt;strong&gt;not&lt;/strong&gt; guaranteed that &lt;code&gt;localhost&lt;/code&gt; will be resolved to &lt;code&gt;127.0.0.1&lt;/code&gt; ‚Äì it might just as well be &lt;code&gt;::1&lt;/code&gt; (or some other IP address).&lt;/p&gt; &#xA;&lt;p&gt;If your target server only accepts IPv4 connections, trying to proxy to &lt;code&gt;localhost&lt;/code&gt; will fail if resolved to &lt;code&gt;::1&lt;/code&gt; (IPv6).&lt;/p&gt; &#xA;&lt;p&gt;Ways to solve it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change &lt;code&gt;target: &#34;http://localhost&#34;&lt;/code&gt; to &lt;code&gt;target: &#34;http://127.0.0.1&#34;&lt;/code&gt; (IPv4).&lt;/li&gt; &#xA; &lt;li&gt;Change the target server to (also) accept IPv6 connections.&lt;/li&gt; &#xA; &lt;li&gt;Add this flag when running &lt;code&gt;node&lt;/code&gt;: &lt;code&gt;node index.js --dns-result-order=ipv4first&lt;/code&gt;. (Not recommended.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: There‚Äôs a thing called &lt;a href=&#34;https://en.wikipedia.org/wiki/Happy_Eyeballs&#34;&gt;Happy Eyeballs&lt;/a&gt; which means connecting to both IPv4 and IPv6 in parallel, which Node.js doesn‚Äôt have, but explains why for example &lt;code&gt;curl&lt;/code&gt; can connect.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Configure the &lt;code&gt;DEBUG&lt;/code&gt; environment variable enable debug logging.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/debug-js/debug#readme&#34;&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt; project for more options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;DEBUG=http-proxy-middleware* node server.js&#xA;&#xA;$ http-proxy-middleware proxy created +0ms&#xA;$ http-proxy-middleware proxying request to target: &#39;http://www.example.org&#39; +359ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working examples&lt;/h2&gt; &#xA;&lt;p&gt;View and play around with &lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/master/examples&#34;&gt;working examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browser-Sync (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/master/examples/browser-sync/index.js&#34;&gt;example source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;express (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/master/examples/express/index.js&#34;&gt;example source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;connect (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/master/examples/connect/index.js&#34;&gt;example source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WebSocket (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/master/examples/websocket/index.js&#34;&gt;example source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Response Manipulation (&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/raw/master/examples/response-interceptor/index.js&#34;&gt;example source&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recipes&lt;/h2&gt; &#xA;&lt;p&gt;View the &lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/master/recipes&#34;&gt;recipes&lt;/a&gt; for common use cases.&lt;/p&gt; &#xA;&lt;h2&gt;Compatible servers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;http-proxy-middleware&lt;/code&gt; is compatible with the following servers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/connect&#34;&gt;connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/express&#34;&gt;express&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/next&#34;&gt;next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/fastify&#34;&gt;fastify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/browser-sync&#34;&gt;browser-sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/lite-server&#34;&gt;lite-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukeed/polka&#34;&gt;polka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/grunt-contrib-connect&#34;&gt;grunt-contrib-connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/grunt-browser-sync&#34;&gt;grunt-browser-sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/gulp-connect&#34;&gt;gulp-connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/gulp-webserver&#34;&gt;gulp-webserver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sample implementations can be found in the &lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/tree/master/recipes/servers.md&#34;&gt;server recipes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install dependencies&#xA;$ yarn&#xA;&#xA;# linting&#xA;$ yarn lint&#xA;$ yarn lint:fix&#xA;&#xA;# building (compile typescript to js)&#xA;$ yarn build&#xA;&#xA;# unit tests&#xA;$ yarn test&#xA;&#xA;# code coverage&#xA;$ yarn cover&#xA;&#xA;# check spelling mistakes&#xA;$ yarn spellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chimurai/http-proxy-middleware/raw/master/CHANGELOG.md&#34;&gt;View changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2015-2022 Steven Chim&lt;/p&gt;</summary>
  </entry>
</feed>