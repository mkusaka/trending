<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:43:26Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>visgl/deck.gl</title>
    <updated>2023-12-03T01:43:26Z</updated>
    <id>tag:github.com,2023-12-03:/visgl/deck.gl</id>
    <link href="https://github.com/visgl/deck.gl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebGL2 powered visualization framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://npmjs.org/package/deck.gl&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/deck.gl.svg?style=flat-square&#34; alt=&#34;version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/visgl/deck.gl/actions?query=workflow%3Atest+branch%3Amaster&#34;&gt; &lt;img src=&#34;https://github.com/visgl/deck.gl/workflows/test/badge.svg?branch=master&#34; alt=&#34;build&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/deck.gl&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/@deck.gl/core.svg?style=flat-square&#34; alt=&#34;downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/visgl/deck.gl?branch=master&#34;&gt; &lt;img src=&#34;https://img.shields.io/coveralls/visgl/deck.gl.svg?style=flat-square&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;deck.gl | &lt;a href=&#34;https://deck.gl&#34;&gt;Website&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h5 align=&#34;center&#34;&gt; WebGL2-powered, highly performant large-scale data visualization&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://visgl.github.io/deck.gl&#34;&gt;&lt;img src=&#34;http://i.imgur.com/mvfvgf0.jpg&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;deck.gl is designed to simplify high-performance, WebGL-based visualization of large data sets. Users can quickly get impressive visual results with minimal effort by composing existing layers, or leverage deck.gl&#39;s extensible architecture to address custom needs.&lt;/p&gt; &#xA;&lt;p&gt;deck.gl maps &lt;strong&gt;data&lt;/strong&gt; (usually an array of JSON objects) into a stack of visual &lt;strong&gt;layers&lt;/strong&gt; - e.g. icons, polygons, texts; and look at them with &lt;strong&gt;views&lt;/strong&gt;: e.g. map, first-person, orthographic.&lt;/p&gt; &#xA;&lt;p&gt;deck.gl handles a number of challenges out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performant rendering and updating of large data sets&lt;/li&gt; &#xA; &lt;li&gt;Interactive event handling such as picking, highlighting and filtering&lt;/li&gt; &#xA; &lt;li&gt;Cartographic projections and integration with major basemap providers&lt;/li&gt; &#xA; &lt;li&gt;A catalog of proven, well-tested layers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Deck.gl is designed to be highly customizable. All layers come with flexible APIs to allow programmatic control of each aspect of the rendering. All core classes such are easily extendable by the users to address custom use cases.&lt;/p&gt; &#xA;&lt;h2&gt;Flavors&lt;/h2&gt; &#xA;&lt;h3&gt;Script Tag&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/deck.gl@latest/dist.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visgl/deck.gl/master/docs/get-started/using-standalone.md#using-the-scripting-api&#34;&gt;Get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/visgl/deck.gl/tree/master/examples/get-started/scripting&#34;&gt;Full examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NPM Module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install deck.gl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pure JS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visgl/deck.gl/master/docs/get-started/using-standalone.md&#34;&gt;Get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visgl/deck.gl/master/examples/get-started/pure-js&#34;&gt;Full examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;React&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visgl/deck.gl/master/docs/get-started/using-with-react.md&#34;&gt;Get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/visgl/deck.gl/master/examples/get-started/react&#34;&gt;Full examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pydeck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pydeck.gl/installation.html&#34;&gt;Get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pydeck.gl/&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Third-Party Goodies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danmarshall/deckgl-typings&#34;&gt;deckgl-typings&lt;/a&gt; (Typescript)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symbolixau.github.io/mapdeck/articles/mapdeck.html&#34;&gt;mapdeck&lt;/a&gt; (R)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/SandDance/tree/master/packages/vega-deck.gl&#34;&gt;vega-deck.gl&lt;/a&gt; (&lt;a href=&#34;https://vega.github.io/&#34;&gt;Vega&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://earthengine-layers.com/&#34;&gt;earthengine-layers&lt;/a&gt; (&lt;a href=&#34;https://earthengine.google.com/&#34;&gt;Google Earth Engine&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UnfoldedInc/deck.gl-native&#34;&gt;deck.gl-native&lt;/a&gt; (C++)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylebarron/deck.gl-raster/&#34;&gt;deck.gl-raster&lt;/a&gt; (Computation on rasters)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learning Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deck.gl/#/documentation&#34;&gt;API documentation&lt;/a&gt; for the latest release&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deck.gl/#/examples&#34;&gt;Website demos&lt;/a&gt; with links to source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deck.gl/playground&#34;&gt;Interactive playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codepen.io/vis-gl/&#34;&gt;deck.gl Codepen demos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.observablehq.com/@pessimistress&#34;&gt;deck.gl Observable demos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/vis-gl&#34;&gt;vis.gl Medium blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/deckgl/shared_invite/zt-7oeoqie8-NQqzSp5SLTFMDeNSPxi7eg&#34;&gt;deck.gl Slack workspace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;deck.gl is part of vis.gl, an &lt;a href=&#34;https://openjsf.org/&#34;&gt;OpenJS Foundation&lt;/a&gt; project. Read the &lt;a href=&#34;https://raw.githubusercontent.com/visgl/deck.gl/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; if you are interested in contributing.&lt;/p&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;h4&gt;Data sources&lt;/h4&gt; &#xA;&lt;p&gt;Data sources are listed in each example.&lt;/p&gt; &#xA;&lt;h4&gt;The deck.gl project is supported by&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.unfolded.ai&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/visgl/deck.gl-data/master/images/branding/unfolded.png&#34; height=&#34;32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.foursquare.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/visgl/deck.gl-data/master/images/branding/fsq.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.carto.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/visgl/deck.gl-data/master/images/branding/carto.svg?sanitize=true&#34; height=&#34;48&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mapbox.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/visgl/deck.gl-data/master/images/branding/mapbox.svg?sanitize=true&#34; height=&#34;44&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.uber.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/visgl/deck.gl-data/master/images/branding/uber.png&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.browserstack.com/&#34;&gt;&lt;img src=&#34;https://d98b8t1nnulk5.cloudfront.net/production/images/static/logo.svg?sanitize=true&#34; alt=&#34;BrowserStack&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dorny/test-reporter</title>
    <updated>2023-12-03T01:43:26Z</updated>
    <id>tag:github.com,2023-12-03:/dorny/test-reporter</id>
    <link href="https://github.com/dorny/test-reporter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Displays test results from popular testing frameworks directly in GitHub&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Test Reporter&lt;/h1&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Action&lt;/a&gt; displays test results from popular testing frameworks directly in GitHub.&lt;/p&gt; &#xA;&lt;p&gt;✔️ Parses test results in XML or JSON format and creates nice report as Github Check Run&lt;/p&gt; &#xA;&lt;p&gt;✔️ Annotates code where it failed based on message and stack trace captured during test execution&lt;/p&gt; &#xA;&lt;p&gt;✔️ Provides final &lt;code&gt;conclusion&lt;/code&gt; and counts of &lt;code&gt;passed&lt;/code&gt;, &lt;code&gt;failed&lt;/code&gt; and &lt;code&gt;skipped&lt;/code&gt; tests as output parameters&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How it looks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dorny/test-reporter/main/assets/fluent-validation-report.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dorny/test-reporter/main/assets/provider-error-summary.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dorny/test-reporter/main/assets/provider-error-details.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dorny/test-reporter/main/assets/mocha-groups.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported languages / frameworks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET / &lt;a href=&#34;https://xunit.net/&#34;&gt;xUnit&lt;/a&gt; / &lt;a href=&#34;https://nunit.org/&#34;&gt;NUnit&lt;/a&gt; / &lt;a href=&#34;https://github.com/Microsoft/testfx-docs&#34;&gt;MSTest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart / &lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Flutter / &lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java / &lt;a href=&#34;https://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JavaScript / &lt;a href=&#34;https://jestjs.io/&#34;&gt;JEST&lt;/a&gt; / &lt;a href=&#34;https://mochajs.org/&#34;&gt;Mocha&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information see &lt;a href=&#34;https://raw.githubusercontent.com/dorny/test-reporter/main/#supported-formats&#34;&gt;Supported formats&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Do you miss support for your favorite language or framework? Please create &lt;a href=&#34;https://github.com/dorny/test-reporter/issues/new&#34;&gt;Issue&lt;/a&gt; or contribute with PR.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Following setup does not work in workflows triggered by pull request from forked repository. If that&#39;s fine for you, using this action is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  pull_request:&#xA;  push:&#xA;permissions:&#xA;  contents: read&#xA;  actions: read&#xA;  checks: write&#xA;jobs:&#xA;  build-test:&#xA;    name: Build &amp;amp; Test&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3     # checkout the repo&#xA;      - run: npm ci                   # install packages&#xA;      - run: npm test                 # run tests (configured to use jest-junit reporter)&#xA;&#xA;      - name: Test Report&#xA;        uses: dorny/test-reporter@v1&#xA;        if: success() || failure()    # run this step even if previous step failed&#xA;        with:&#xA;          name: JEST Tests            # Name of the check run which will be created&#xA;          path: reports/jest-*.xml    # Path to test results&#xA;          reporter: jest-junit        # Format of test results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recommended setup for public repositories&lt;/h2&gt; &#xA;&lt;p&gt;Workflows triggered by pull requests from forked repositories are executed with read-only token and therefore can&#39;t create check runs. To workaround this security restriction, it&#39;s required to use two separate workflows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;CI&lt;/code&gt; runs in the context of the PR head branch with the read-only token. It executes the tests and uploads test results as a build artifact&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Test Report&lt;/code&gt; runs in the context of the repository main branch with read/write token. It will download test results and create reports&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The second workflow will only run after it has been merged into your default branch (typically &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;), it won&#39;t run in a PR unless after the workflow file is part of that branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PR head branch:&lt;/strong&gt; &lt;em&gt;.github/workflows/ci.yml&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: &#39;CI&#39;&#xA;on:&#xA;  pull_request:&#xA;jobs:&#xA;  build-test:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3         # checkout the repo&#xA;      - run: npm ci                       # install packages&#xA;      - run: npm test                     # run tests (configured to use jest-junit reporter)&#xA;      - uses: actions/upload-artifact@v3  # upload test results&#xA;        if: success() || failure()        # run this step even if previous step failed&#xA;        with:&#xA;          name: test-results&#xA;          path: jest-junit.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;default branch:&lt;/strong&gt; &lt;em&gt;.github/workflows/test-report.yml&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: &#39;Test Report&#39;&#xA;on:&#xA;  workflow_run:&#xA;    workflows: [&#39;CI&#39;]                     # runs after CI workflow&#xA;    types:&#xA;      - completed&#xA;permissions:&#xA;  contents: read&#xA;  actions: read&#xA;  checks: write&#xA;jobs:&#xA;  report:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: dorny/test-reporter@v1&#xA;      with:&#xA;        artifact: test-results            # artifact name&#xA;        name: JEST Tests                  # Name of the check run which will be created&#xA;        path: &#39;*.xml&#39;                     # Path to test results (inside artifact .zip)&#xA;        reporter: jest-junit              # Format of test results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: dorny/test-reporter@v1&#xA;  with:&#xA;&#xA;    # Name or regex of artifact containing test results&#xA;    # Regular expression must be enclosed in &#39;/&#39;.&#xA;    # Values from captured groups will replace occurrences of $N in report name.&#xA;    # Example:&#xA;    #   artifact: /test-results-(.*)/&#xA;    #   name: &#39;Test report $1&#39;&#xA;    #   -&amp;gt; Artifact &#39;test-result-ubuntu&#39; would create report &#39;Test report ubuntu&#39;&#xA;    artifact: &#39;&#39;&#xA;&#xA;    # Name of the Check Run which will be created&#xA;    name: &#39;&#39;&#xA;&#xA;    # Comma-separated list of paths to test results&#xA;    # Supports wildcards via [fast-glob](https://github.com/mrmlnc/fast-glob)&#xA;    # All matched result files must be of the same format&#xA;    path: &#39;&#39;&#xA;&#xA;    # The fast-glob library that is internally used interprets backslashes as escape characters.&#xA;    # If enabled, all backslashes in provided path will be replaced by forward slashes and act as directory separators.&#xA;    # It might be useful when path input variable is composed dynamically from existing directory paths on Windows.&#xA;    path-replace-backslashes: &#39;false&#39;&#xA;&#xA;    # Format of test results. Supported options:&#xA;    #   dart-json&#xA;    #   dotnet-trx&#xA;    #   flutter-json&#xA;    #   java-junit&#xA;    #   jest-junit&#xA;    #   mocha-json&#xA;    reporter: &#39;&#39;&#xA;&#xA;    # Allows you to generate only the summary.&#xA;    # If enabled, the report will contain a table listing each test results file and the number of passed, failed, and skipped tests.&#xA;    # Detailed listing of test suites and test cases will be skipped.&#xA;    only-summary: &#39;false&#39;&#xA;&#xA;    # Limits which test suites are listed:&#xA;    #   all&#xA;    #   failed&#xA;    list-suites: &#39;all&#39;&#xA;&#xA;    # Limits which test cases are listed:&#xA;    #   all&#xA;    #   failed&#xA;    #   none&#xA;    list-tests: &#39;all&#39;&#xA;&#xA;    # Limits number of created annotations with error message and stack trace captured during test execution.&#xA;    # Must be less or equal to 50.&#xA;    max-annotations: &#39;10&#39;&#xA;&#xA;    # Set action as failed if test report contains any failed test&#xA;    fail-on-error: &#39;true&#39;&#xA;&#xA;    # Set this action as failed if no test results were found&#xA;    fail-on-empty: &#39;true&#39;&#xA;&#xA;    # Relative path under $GITHUB_WORKSPACE where the repository was checked out.&#xA;    working-directory: &#39;&#39;&#xA;&#xA;    # Personal access token used to interact with Github API&#xA;    # Default: ${{ github.token }}&#xA;    token: &#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Output parameters&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;conclusion&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;success&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;passed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Count of passed tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;failed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Count of failed tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;skipped&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Count of skipped tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;time&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test execution time [ms]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;url&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Check run URL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;url_html&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Check run URL HTML&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supported formats&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dart-json&lt;/summary&gt; &#xA; &lt;p&gt;Test run must be configured to use &lt;a href=&#34;https://github.com/dart-lang/test/raw/master/pkgs/test/doc/configuration.md#reporter&#34;&gt;JSON&lt;/a&gt; reporter. You can configure it in &lt;code&gt;dart_test.yaml&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;file_reporters:&#xA;  json: reports/test-results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or with CLI arguments:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;&lt;code&gt;dart test --file-reporter=&#34;json:test-results.json&#34;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;For more information see:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test package&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/test/raw/master/pkgs/test/doc/configuration.md&#34;&gt;test configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dotnet-trx&lt;/summary&gt; &#xA; &lt;p&gt;Test execution must be configured to produce &lt;em&gt;Visual Studio Test Results&lt;/em&gt; files (TRX). To get test results in TRX format you can execute your tests with CLI arguments:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;dotnet test --logger &#34;trx;LogFileName=test-results.trx&#34;&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Or you can configure TRX test output in &lt;code&gt;*.csproj&lt;/code&gt; or &lt;code&gt;Directory.Build.props&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&#xA;  &amp;lt;VSTestLogger&amp;gt;trx%3bLogFileName=$(MSBuildProjectName).trx&amp;lt;/VSTestLogger&amp;gt;&#xA;  &amp;lt;VSTestResultsDirectory&amp;gt;$(MSBuildThisFileDirectory)/TestResults/$(TargetFramework)&amp;lt;/VSTestResultsDirectory&amp;gt;&#xA;&amp;lt;/PropertyGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Supported testing frameworks:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://xunit.net/&#34;&gt;xUnit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://nunit.org/&#34;&gt;NUnit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/testfx-docs&#34;&gt;MSTest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;For more information see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test#examples&#34;&gt;dotnet test&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;flutter-json&lt;/summary&gt; &#xA; &lt;p&gt;Test run must be configured to use &lt;a href=&#34;https://github.com/dart-lang/test/raw/master/pkgs/test/doc/configuration.md#reporter&#34;&gt;JSON&lt;/a&gt; reporter. You can configure it in &lt;code&gt;dart_test.yaml&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;file_reporters:&#xA;  json: reports/test-results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or with (undocumented) CLI argument:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;flutter test --machine &amp;gt; test-results.json&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;According to documentation &lt;code&gt;dart_test.yaml&lt;/code&gt; should be at the root of the package, next to the package&#39;s pubspec. On current &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;beta&lt;/code&gt; channels it doesn&#39;t work, and you have to put &lt;code&gt;dart_test.yaml&lt;/code&gt; inside your &lt;code&gt;test&lt;/code&gt; folder. On &lt;code&gt;dev&lt;/code&gt; channel, it&#39;s already fixed.&lt;/p&gt; &#xA; &lt;p&gt;For more information see:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;test package&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/test/raw/master/pkgs/test/doc/configuration.md&#34;&gt;test configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/reference/flutter-cli&#34;&gt;flutter-cli&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/cookbook/testing/unit/introduction&#34;&gt;unit testing introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;java-junit (Experimental)&lt;/summary&gt; &#xA; &lt;p&gt;Support for &lt;a href=&#34;https://Junit.org/&#34;&gt;JUnit&lt;/a&gt; XML is experimental - should work but it was not extensively tested. To have code annotations working properly, it&#39;s required your directory structure matches the package name. This is due to the fact Java stack traces don&#39;t contain a full path to the source file. Some heuristic was necessary to figure out the mapping between the line in the stack trace and an actual source file.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;jest-junit&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;JEST&lt;/a&gt; testing framework support requires the usage of &lt;a href=&#34;https://github.com/jest-community/jest-junit&#34;&gt;jest-junit&lt;/a&gt; reporter. It will create test results in Junit XML format which can be then processed by this action. You can use the following example configuration in &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;  &#34;test&#34;: &#34;jest --ci --reporters=default --reporters=jest-junit&#34;&#xA;},&#xA;&#34;devDependencies&#34;: {&#xA;  &#34;jest&#34;: &#34;^26.5.3&#34;,&#xA;  &#34;jest-junit&#34;: &#34;^12.0.0&#34;&#xA;},&#xA;&#34;jest-junit&#34;: {&#xA;  &#34;outputDirectory&#34;: &#34;reports&#34;,&#xA;  &#34;outputName&#34;: &#34;jest-junit.xml&#34;,&#xA;  &#34;ancestorSeparator&#34;: &#34; › &#34;,&#xA;  &#34;uniqueOutputName&#34;: &#34;false&#34;,&#xA;  &#34;suiteNameTemplate&#34;: &#34;{filepath}&#34;,&#xA;  &#34;classNameTemplate&#34;: &#34;{classname}&#34;,&#xA;  &#34;titleTemplate&#34;: &#34;{title}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configuration of &lt;code&gt;uniqueOutputName&lt;/code&gt;, &lt;code&gt;suiteNameTemplate&lt;/code&gt;, &lt;code&gt;classNameTemplate&lt;/code&gt;, &lt;code&gt;titleTemplate&lt;/code&gt; is important for proper visualization of test results.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;mocha-json&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://mochajs.org/&#34;&gt;Mocha&lt;/a&gt; testing framework support requires:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Mocha version &lt;a href=&#34;https://github.com/mochajs/mocha/releases/tag/v7.2.0&#34;&gt;v7.2.0&lt;/a&gt; or higher&lt;/li&gt; &#xA;  &lt;li&gt;Usage of &lt;a href=&#34;https://mochajs.org/#json&#34;&gt;json&lt;/a&gt; reporter.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;You can use the following example configuration in &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;  &#34;test&#34;: &#34;mocha --reporter json &amp;gt; test-results.json&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Test processing might fail if any of your tests write anything on standard output. Mocha, unfortunately, doesn&#39;t have the option to store &lt;code&gt;json&lt;/code&gt; output directly to the file, and we have to rely on redirecting its standard output. There is a work in progress to fix it: &lt;a href=&#34;https://github.com/mochajs/mocha/pull/4607&#34;&gt;mocha#4607&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;GitHub limitations&lt;/h2&gt; &#xA;&lt;p&gt;Unfortunately, there are some known issues and limitations caused by GitHub API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test report (i.e. Check Run summary) is markdown text. No custom styling or HTML is possible.&lt;/li&gt; &#xA; &lt;li&gt;Maximum report size is 65535 bytes. Input parameters &lt;code&gt;list-suites&lt;/code&gt; and &lt;code&gt;list-tests&lt;/code&gt; will be automatically adjusted if max size is exceeded.&lt;/li&gt; &#xA; &lt;li&gt;Test report can&#39;t reference any additional files (e.g. screenshots). You can use &lt;code&gt;actions/upload-artifact@v3&lt;/code&gt; to upload them and inspect them manually.&lt;/li&gt; &#xA; &lt;li&gt;Check Runs are created for specific commit SHA. It&#39;s not possible to specify under which workflow test report should belong if more workflows are running for the same SHA. Thanks to this GitHub &#34;feature&#34; it&#39;s possible your test report will appear in an unexpected place in GitHub UI. For more information, see &lt;a href=&#34;https://github.com/dorny/test-reporter/issues/67&#34;&gt;#67&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dorny/paths-filter&#34;&gt;paths-filter&lt;/a&gt; - Conditionally run actions based on files modified by PR, feature branch, or pushed commits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The scripts and documentation in this project are released under the &lt;a href=&#34;https://github.com/dorny/test-reporter/raw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google-github-actions/auth</title>
    <updated>2023-12-03T01:43:26Z</updated>
    <id>tag:github.com,2023-12-03:/google-github-actions/auth</id>
    <link href="https://github.com/google-github-actions/auth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A GitHub Action for authenticating to Google Cloud.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Authenticate to Google Cloud from GitHub Actions&lt;/h1&gt; &#xA;&lt;p&gt;This GitHub Action authenticates to Google Cloud. It supports authentication via a Google Cloud Service Account Key JSON and authentication via &lt;a href=&#34;https://cloud.google.com/iam/docs/workload-identity-federation&#34;&gt;Workload Identity Federation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Workload Identity Federation is recommended over Service Account Keys as it obviates the need to export a long-lived credential and establishes a trust delegation relationship between a particular GitHub Actions workflow invocation and permissions on Google Cloud. There are three ways to set up this GitHub Action to authenticate to Google Cloud:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#direct-wif&#34;&gt;(Preferred) Direct Workload Identity Federation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#indirect-wif&#34;&gt;Workload Identity Federation through a Service Account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#sake&#34;&gt;Service Account Key JSON&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is not an officially supported Google product, and it is not covered by a Google Cloud support contract. To report bugs or request features in a Google Cloud product, please contact &lt;a href=&#34;https://cloud.google.com/support&#34;&gt;Google Cloud support&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;actions/checkout@v4&lt;/code&gt; step &lt;em&gt;before&lt;/em&gt; this action. Omitting the checkout step or putting it after &lt;code&gt;auth&lt;/code&gt; will cause future steps to be unable to authenticate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To create binaries, containers, pull requests, or other releases, add the following to your &lt;code&gt;.gitignore&lt;/code&gt; to prevent accidentially committing credentials to your release artifact:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# Ignore generated credentials from google-github-actions/auth&#xA;gha-creds-*.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use the &lt;code&gt;bq&lt;/code&gt; or &lt;code&gt;gsutil&lt;/code&gt; tools, use the Google Cloud SDK version 390.0.0 or newer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This action runs using Node 20. Use a &lt;a href=&#34;https://github.com/actions/virtual-environments&#34;&gt;runner version&lt;/a&gt; that supports this version of Node or newer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  job_id:&#xA;    # Add &#34;id-token&#34; with the intended permissions.&#xA;    permissions:&#xA;      contents: &#39;read&#39;&#xA;      id-token: &#39;write&#39;&#xA;&#xA;    steps:&#xA;    - uses: &#39;actions/checkout@v4&#39;&#xA;&#xA;    - uses: &#39;google-github-actions/auth@v2&#39;&#xA;      with:&#xA;        project_id: &#39;my-project&#39;&#xA;        workload_identity_provider: &#39;projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ NOTE!&lt;/strong&gt; Changing the &lt;code&gt;permissions&lt;/code&gt; block may remove some default permissions. See the &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#permissions&#34;&gt;permissions documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more usage options, see the &lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/EXAMPLES.md&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inputs&lt;/h2&gt; &#xA;&lt;h3&gt;Inputs: Workload Identity Federation&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ WARNING!&lt;/strong&gt; This option is &lt;a href=&#34;https://github.com/firebase/firebase-admin-node/issues/1377&#34;&gt;not supported by Firebase Admin SDK&lt;/a&gt;. Use Service Account Key JSON authentication instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The following inputs are for &lt;em&gt;authenticating&lt;/em&gt; to Google Cloud via Workload Identity Federation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;workload_identity_provider&lt;/code&gt;: (Required) The full identifier of the Workload Identity Provider, including the project number, pool name, and provider name. If provided, this must be the full identifier which includes all parts:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;service_account&lt;/code&gt;: (Optional) Email address or unique identifier of the Google Cloud service account for which to impersonate and generate credentials. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;my-service-account@my-project.iam.gserviceaccount.com&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Without this input, the GitHub Action will use &lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#direct-wif&#34;&gt;Direct Workload Identity Federation&lt;/a&gt;. If this input is provided, the GitHub Action will use &lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#indirect-wif&#34;&gt;Workload Identity Federation through a Service Account&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;audience&lt;/code&gt;: (Optional) The value for the audience (&lt;code&gt;aud&lt;/code&gt;) parameter in the generated GitHub Actions OIDC token. This value defaults to the value of &lt;code&gt;workload_identity_provider&lt;/code&gt;, which is also the default value Google Cloud expects for the audience parameter on the token.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inputs: Service Account Key JSON&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ WARNING!&lt;/strong&gt; Service Account Key JSON credentials are long-lived credentials and must be treated like a password.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The following inputs are for &lt;em&gt;authenticating&lt;/em&gt; to Google Cloud via a Service Account Key JSON.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;credentials_json&lt;/code&gt;: (Required) The Google Cloud Service Account Key JSON to use for authentication.&lt;/p&gt; &lt;p&gt;We advise minifying your JSON into a single line string before storing it in a GitHub Secret. When a GitHub Secret is used in a GitHub Actions workflow, &lt;em&gt;each line&lt;/em&gt; of the secret is masked in log output. This can lead to aggressive sanitization of benign characters like curly braces (&lt;code&gt;{}&lt;/code&gt;) and brackets (&lt;code&gt;[]&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;To generate access tokens or ID tokens using this service account, you must grant the underlying service account &lt;code&gt;roles/iam.serviceAccountTokenCreator&lt;/code&gt; permissions on itself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inputs: Generating OAuth 2.0 access tokens&lt;/h3&gt; &#xA;&lt;p&gt;The following inputs are for &lt;em&gt;generating&lt;/em&gt; OAuth 2.0 access tokens for authenticating to Google Cloud as an output for use in future steps in the workflow. These options only apply to access tokens generated by this action. By default, this action does not generate any tokens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;service_account&lt;/code&gt;: (Required) Email address or unique identifier of the Google Cloud service account for which to generate the access token. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;my-service-account@my-project.iam.gserviceaccount.com&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;token_format&lt;/code&gt;: (Required) This value must be &lt;code&gt;&#34;access_token&#34;&lt;/code&gt; to generate OAuth 2.0 access tokens.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;access_token_lifetime&lt;/code&gt;: (Optional) Desired lifetime duration of the access token, in seconds. This must be specified as the number of seconds with a trailing &#34;s&#34; (e.g. 30s). The default value is 1 hour (3600s). The maximum value is 1 hour, unless the [&lt;code&gt;constraints/iam.allowServiceAccountCredentialLifetimeExtension&lt;/code&gt; organization policy][orgpolicy-creds-lifetime] is enabled, in which case the maximum value is 12 hours.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;access_token_scopes&lt;/code&gt;: (Optional) List of OAuth 2.0 access scopes to be included in the generated token. This is only valid when &#34;token_format&#34; is &#34;access_token&#34;. The default value is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://www.googleapis.com/auth/cloud-platform&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;access_token_subject&lt;/code&gt;: (Optional) Email address of a user to impersonate for &lt;a href=&#34;https://developers.google.com/admin-sdk/directory/v1/guides/delegation&#34;&gt;Domain-Wide Delegation&lt;/a&gt;. Access tokens created for Domain-Wide Delegation cannot have a lifetime beyond 1 hour, even if the [&lt;code&gt;constraints/iam.allowServiceAccountCredentialLifetimeExtension&lt;/code&gt; organization policy][orgpolicy-creds-lifetime] is enabled.&lt;/p&gt; &lt;p&gt;In order to support Domain-Wide Delegation via Workload Identity Federation, you must grant the external identity (&#34;principalSet&#34;) &lt;code&gt;roles/iam.serviceAccountTokenCreator&lt;/code&gt; in addition to &lt;code&gt;roles/iam.workloadIdentityUser&lt;/code&gt;. The default Workload Identity setup will only grant the latter role. If you want to use this GitHub Action with Domain-Wide Delegation, you must manually add the &#34;Service Account Token Creator&#34; role onto the external identity.&lt;/p&gt; &lt;p&gt;You will also need to customize the &lt;code&gt;access_token_scopes&lt;/code&gt; value to correspond to the OAuth scopes required for the API(s) you will access.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inputs: Generating ID tokens&lt;/h3&gt; &#xA;&lt;p&gt;The following inputs are for &lt;em&gt;generating&lt;/em&gt; ID tokens for authenticating to Google Cloud as an output for use in future steps in the workflow. These options only apply to ID tokens generated by this action. By default, this action does not generate any tokens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;service_account&lt;/code&gt;: (Required) Email address or unique identifier of the Google Cloud service account for which to generate the ID token. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;my-service-account@my-project.iam.gserviceaccount.com&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;token_format&lt;/code&gt;: This value must be &lt;code&gt;&#34;id_token&#34;&lt;/code&gt; to generate ID tokens.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;id_token_audience&lt;/code&gt;: (Required) The audience for the generated ID Token.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;id_token_include_email&lt;/code&gt;: (Optional) Optional parameter of whether to include the service account email in the generated token. If true, the token will contain &#34;email&#34; and &#34;email_verified&#34; claims. This is only valid when &#34;token_format&#34; is &#34;id_token&#34;. The default value is false.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inputs: Retry options&lt;/h3&gt; &#xA;&lt;p&gt;The following inputs are for controlling retry behavior. By default, this GitHub Action will retry API calls in an attempt to reduce transient failures. You can control and disable the retry behavior with these inputs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;retries&lt;/code&gt;: (Optional) Number of times to retry a failed authentication attempt. This is useful for automated pipelines that may execute before IAM permissions are fully propogated or intermittent connectivity failures. The default value is &#34;3&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backoff&lt;/code&gt;: (Optional) Delay time before trying another authentication attempt. This is implemented using a fibonacci backoff method (e.g. 1-1-2-3-5). This value defaults to 250 milliseconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backoff_limit&lt;/code&gt;: (Optional) Limits the retry backoff to the specified value. The default value is no limit.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inputs: Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;The following inputs are for controlling the behavior of this GitHub Actions, regardless of the authentication mechanism.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;project_id&lt;/code&gt;: (Optional) Custom project ID to use for authentication and exporting into other steps. If unspecified, the project ID will be extracted from the Workload Identity Provider or the Service Account Key JSON.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;create_credentials_file&lt;/code&gt;: (Optional) If true, the action will securely generate a credentials file which can be used for authentication via gcloud and Google Cloud SDKs in other steps in the workflow. The default is true.&lt;/p&gt; &lt;p&gt;The credentials file is exported into &lt;code&gt;$GITHUB_WORKSPACE&lt;/code&gt;, which makes it available to all future steps and filesystems (including Docker-based GitHub Actions). The file is automatically removed at the end of the job via a post action. In order to use exported credentials, you &lt;strong&gt;must&lt;/strong&gt; add the &lt;code&gt;actions/checkout&lt;/code&gt; step before calling &lt;code&gt;auth&lt;/code&gt;. This is due to how GitHub Actions creates &lt;code&gt;$GITHUB_WORKSPACE&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA; job_id:&#xA;   steps:&#xA;   - uses: &#39;actions/checkout@v4&#39; # Must come first!&#xA;   - uses: &#39;google-github-actions/auth@v2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;export_environment_variables&lt;/code&gt;: (Optional) If true, the action will export common environment variables which are known to be consumed by popular downstream libraries and tools, including:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;CLOUDSDK_PROJECT&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CLOUDSDK_CORE_PROJECT&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GCP_PROJECT&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GCLOUD_PROJECT&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GOOGLE_CLOUD_PROJECT&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;create_credentials_file&lt;/code&gt; is true, additional environment variables are exported:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GOOGLE_GHA_CREDS_PATH&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If false, the action will not export any environment variables, meaning future steps are unlikely to be automatically authenticated to Google Cloud. The default value is true.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegates&lt;/code&gt;: (Optional) List of additional service account emails or unique identities to use for impersonation in the chain. By default there are no delegates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;universe&lt;/code&gt;: (Optional) The Google Cloud universe to use for constructing API endpoints. The default universe is &#34;googleapis.com&#34;, which corresponds to &lt;a href=&#34;https://cloud.google.com&#34;&gt;https://cloud.google.com&lt;/a&gt;. Trusted Partner Cloud and Google Distributed Hosted Cloud should set this to their universe address.&lt;/p&gt; &lt;p&gt;You can also override individual API endpoints by setting the environment variable &lt;code&gt;GHA_ENDPOINT_OVERRIDE_&amp;lt;endpoint&amp;gt;&lt;/code&gt; where endpoint is the API endpoint to override. This only applies to the &lt;code&gt;auth&lt;/code&gt; action and does not persist to other steps. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  GHA_ENDPOINT_OVERRIDE_oauth2: &#39;https://oauth2.myapi.endpoint/v1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cleanup_credentials&lt;/code&gt;: (Optional) If true, the action will remove any created credentials from the filesystem upon completion. This only applies if &#34;create_credentials_file&#34; is true. The default is true.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Outputs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;project_id&lt;/code&gt;: Provided or extracted value for the Google Cloud project ID.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;credentials_file_path&lt;/code&gt;: Path on the local filesystem where the generated credentials file resides. This is only available if &#34;create_credentials_file&#34; was set to true.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;auth_token&lt;/code&gt;: The Google Cloud federated token (for Workload Identity Federation) or self-signed JWT (for a Service Account Key JSON). This output is always available.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;access_token&lt;/code&gt;: The Google Cloud access token for calling other Google Cloud APIs. This is only available when &#34;token_format&#34; is &#34;access_token&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;id_token&lt;/code&gt;: The Google Cloud ID token. This is only available when &#34;token_format&#34; is &#34;id_token&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;setup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the three configuration options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#direct-wif&#34;&gt;(Preferred) Direct Workload Identity Federation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#indirect-wif&#34;&gt;Workload Identity Federation through a Service Account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/#sake&#34;&gt;Service Account Key JSON&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ NOTE!&lt;/strong&gt; It can take up to 5 minutes for Workload Identity Pools, Workload Identity Providers, and IAM permissions to propagate. Please wait at least five minutes and follow all &lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/TROUBLESHOOTING.md&#34;&gt;Troubleshooting steps&lt;/a&gt; before opening an issue.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;direct-wif&#34; id=&#34;direct-wif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;(Preferred) Direct Workload Identity Federation&lt;/h3&gt; &#xA;&lt;p&gt;In this setup, the Workload Identity Pool has direct IAM permissions on Google Cloud resources; there are no intermediate service accounts or keys. This is preferred since it directly authenticates GitHub Actions to Google Cloud without a proxy resource. However, not all Google Cloud resources support &lt;code&gt;principalSet&lt;/code&gt; identities. Please see the documentation for your Google Cloud service for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/google-github-actions-auth-direct-workload-identity-federation.svg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/google-github-actions-auth-direct-workload-identity-federation.svg?sanitize=true&#34; alt=&#34;Authenticate to Google Cloud from GitHub Actions with Direct Workload Identity Federation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ NOTE!&lt;/strong&gt; To generate OAuth 2.0 access tokens or ID tokens, you &lt;em&gt;must&lt;/em&gt; provide a service account email, and the Workload Identity Pool must have &lt;code&gt;roles/iam.workloadIdentityUser&lt;/code&gt; permissions on the target Google Cloud Service Account. Follow the steps for Workload Identity Federation through a Service Account instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to show detailed instructions for configuring GitHub authentication to Google Cloud via a direct Workload Identity Federation.&lt;/summary&gt; &#xA; &lt;p&gt;These instructions use the &lt;a href=&#34;https://cloud.google.com/sdk&#34;&gt;gcloud&lt;/a&gt; command-line tool.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a Workload Identity Pool:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools create &#34;github&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --display-name=&#34;GitHub Actions Pool&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Get the full ID of the Workload Identity &lt;strong&gt;Pool&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools describe &#34;github&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --format=&#34;value(name)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This value should be of the format:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;projects/123456789/locations/global/workloadIdentityPools/github&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a Workload Identity &lt;strong&gt;Provider&lt;/strong&gt; in that pool:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools providers create-oidc &#34;my-repo&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --workload-identity-pool=&#34;github&#34; \&#xA;  --display-name=&#34;My GitHub repo Provider&#34; \&#xA;  --attribute-mapping=&#34;google.subject=assertion.sub,attribute.actor=assertion.actor,attribute.repository=assertion.repository&#34; \&#xA;  --issuer-uri=&#34;https://token.actions.githubusercontent.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The attribute mappings map claims in the GitHub Actions JWT to assertions you can make about the request (like the repository or GitHub username of the principal invoking the GitHub Action). These can be used to further restrict the authentication using &lt;code&gt;--attribute-condition&lt;/code&gt; flags.&lt;/p&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;&lt;strong&gt;❗️ NOTE!&lt;/strong&gt; You must map any claims in the incoming token to attributes before you can assert on those attributes in a CEL expression or IAM policy!**&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Extract the Workload Identity &lt;strong&gt;Provider&lt;/strong&gt; resource name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools providers describe &#34;my-repo&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --workload-identity-pool=&#34;github&#34; \&#xA;  --format=&#34;value(name)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use this value as the &lt;code&gt;workload_identity_provider&lt;/code&gt; value in the GitHub Actions YAML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: &#39;google-github-actions/auth@v2&#39;&#xA;  with:&#xA;    project_id: &#39;my-project&#39;&#xA;    workload_identity_provider: &#39;...&#39; # &#34;projects/123456789/locations/global/workloadIdentityPools/github/providers/my-repo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;&lt;strong&gt;⚠️ NOTE!&lt;/strong&gt; The &lt;code&gt;project_id&lt;/code&gt; input is optional, but may be required by downstream authentication systems such as the &lt;code&gt;gcloud&lt;/code&gt; CLI. Unfortunately we cannot extract the project ID from the Workload Identity Provider, since it requires the project &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt; &#xA;    &lt;p&gt;It is technically possible to convert a project &lt;em&gt;number&lt;/em&gt; into a project &lt;em&gt;ID&lt;/em&gt;, but it requires permissions to call Cloud Resource Manager, and we cannot guarantee that the Workload Identity Pool has those permissions.&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;As needed, allow authentications from the Workload Identity Pool to Google Cloud resources. These can be any Google Cloud resources that support federated ID tokens, and it can be done after the GitHub Action is configured.&lt;/p&gt; &lt;p&gt;The following example shows granting access from a GitHub Action in a specific repository a secret in Google Secret Manager.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# TODO(developer): Update this value to your GitHub repository.&#xA;export REPO=&#34;username/name&#34; # e.g. &#34;google/chrome&#34;&#xA;export WORKLOAD_IDENTITY_POOL_ID=&#34;value/from/above&#34; # e.g. &#34;projects/123456789/locations/global/workloadIdentityPools/github&#34;&#xA;&#xA;gcloud secrets add-iam-policy-binding &#34;my-secret&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --role=&#34;roles/secretmanager.secretAccessor&#34; \&#xA;  --member=&#34;principalSet://iam.googleapis.com/${WORKLOAD_IDENTITY_POOL_ID}/attribute.repository/${REPO}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Review the &lt;a href=&#34;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token&#34;&gt;GitHub documentation&lt;/a&gt; for a complete list of options and values. This GitHub repository does not seek to enumerate every possible combination.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a name=&#34;indirect-wif&#34; id=&#34;indirect-wif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Workload Identity Federation through a Service Account&lt;/h3&gt; &#xA;&lt;p&gt;In this setup, the Workload Identity Pool impersonates a Google Cloud Service Account which has IAM permissions on Google Cloud resources. This exchanges the GitHub Actions OIDC token with a Google Cloud OAuth 2.0 access token by granting GitHub Actions permissions to mint tokens for the given Service Account. Thus GitHub Actions inherits that Service Account&#39;s permissions by proxy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/google-github-actions-auth-workload-identity-federation-through-service-account.svg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/google-github-actions-auth-workload-identity-federation-through-service-account.svg?sanitize=true&#34; alt=&#34;Authenticate to Google Cloud from GitHub Actions with Workload Identity Federation through a Service Account&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to show detailed instructions for configuring GitHub authentication to Google Cloud via a Workload Identity Federation through a Service Account.&lt;/summary&gt; &#xA; &lt;p&gt;These instructions use the &lt;a href=&#34;https://cloud.google.com/sdk&#34;&gt;gcloud&lt;/a&gt; command-line tool.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;(Optional) Create a Google Cloud Service Account. If you already have a Service Account, take note of the email address and skip this step.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam service-accounts create &#34;my-service-account&#34; \&#xA;  --project &#34;${PROJECT_ID}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a Workload Identity Pool:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools create &#34;github&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --display-name=&#34;GitHub Actions Pool&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Get the full ID of the Workload Identity &lt;strong&gt;Pool&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools describe &#34;github&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --format=&#34;value(name)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This value should be of the format:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;projects/123456789/locations/global/workloadIdentityPools/github&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a Workload Identity &lt;strong&gt;Provider&lt;/strong&gt; in that pool:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools providers create-oidc &#34;my-repo&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --workload-identity-pool=&#34;github&#34; \&#xA;  --display-name=&#34;My GitHub repo Provider&#34; \&#xA;  --attribute-mapping=&#34;google.subject=assertion.sub,attribute.actor=assertion.actor,attribute.repository=assertion.repository&#34; \&#xA;  --issuer-uri=&#34;https://token.actions.githubusercontent.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The attribute mappings map claims in the GitHub Actions JWT to assertions you can make about the request (like the repository or GitHub username of the principal invoking the GitHub Action). These can be used to further restrict the authentication using &lt;code&gt;--attribute-condition&lt;/code&gt; flags.&lt;/p&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;&lt;strong&gt;❗️ NOTE!&lt;/strong&gt; You must map any claims in the incoming token to attributes before you can assert on those attributes in a CEL expression or IAM policy!**&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Allow authentications from the Workload Identity Pool to your Google Cloud Service Account.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# TODO(developer): Update this value to your GitHub repository.&#xA;export REPO=&#34;username/name&#34; # e.g. &#34;google/chrome&#34;&#xA;export WORKLOAD_IDENTITY_POOL_ID=&#34;value/from/above&#34; # e.g. &#34;projects/123456789/locations/global/workloadIdentityPools/github&#34;&#xA;&#xA;gcloud iam service-accounts add-iam-policy-binding &#34;my-service-account@${PROJECT_ID}.iam.gserviceaccount.com&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --role=&#34;roles/iam.workloadIdentityUser&#34; \&#xA;  --member=&#34;principalSet://iam.googleapis.com/${WORKLOAD_IDENTITY_POOL_ID}/attribute.repository/${REPO}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Review the &lt;a href=&#34;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token&#34;&gt;GitHub documentation&lt;/a&gt; for a complete list of options and values. This GitHub repository does not seek to enumerate every possible combination.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Extract the Workload Identity &lt;strong&gt;Provider&lt;/strong&gt; resource name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam workload-identity-pools providers describe &#34;my-repo&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --location=&#34;global&#34; \&#xA;  --workload-identity-pool=&#34;github&#34; \&#xA;  --format=&#34;value(name)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use this value as the &lt;code&gt;workload_identity_provider&lt;/code&gt; value in the GitHub Actions YAML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: &#39;google-github-actions/auth@v2&#39;&#xA;  with:&#xA;    workload_identity_provider: &#39;...&#39; # &#34;projects/123456789/locations/global/workloadIdentityPools/github/providers/my-repo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;As needed, grant the Google Cloud Service Account permissions to access Google Cloud resources. This step varies by use case. The following example shows granting access to a secret in Google Secret Manager.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud secrets add-iam-policy-binding &#34;my-secret&#34; \&#xA;  --project=&#34;${PROJECT_ID}&#34; \&#xA;  --role=&#34;roles/secretmanager.secretAccessor&#34; \&#xA;  --member=&#34;serviceAccount:my-service-account@${PROJECT_ID}.iam.gserviceaccount.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a name=&#34;sake&#34; id=&#34;sake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Service Account Key JSON&lt;/h3&gt; &#xA;&lt;p&gt;In this setup, a Service Account has direct IAM permissions on Google Cloud resources. You download a Service Account Key JSON file and upload it to GitHub as a secret.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/google-github-actions-auth-service-account-key-export.svg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google-github-actions/auth/main/docs/google-github-actions-auth-service-account-key-export.svg?sanitize=true&#34; alt=&#34;Authenticate to Google Cloud from GitHub Actions with a Service Account Key&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;❗️ WARNING!&lt;/strong&gt; Google Cloud Service Account Key JSON files must be secured and treated like a password. Anyone with acess to the JSON key can authenticate to Google Cloud as the underlying Service Account. By default, these credentials never expire, which is why the former authentication options are much preferred.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click here to show detailed instructions for configuring GitHub authentication to Google Cloud via a Service Account Key JSON.&lt;/summary&gt; &#xA; &lt;p&gt;These instructions use the &lt;a href=&#34;https://cloud.google.com/sdk&#34;&gt;gcloud&lt;/a&gt; command-line tool.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;(Optional) Create a Google Cloud Service Account. If you already have a Service Account, take note of the email address and skip this step.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam service-accounts create &#34;my-service-account&#34; \&#xA;  --project &#34;${PROJECT_ID}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a Service Account Key JSON for the Service Account.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud iam service-accounts keys create &#34;key.json&#34; \&#xA;  --iam-account &#34;my-service-account@${PROJECT_ID}.iam.gserviceaccount.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Upload the contents of this file as a &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions&#34;&gt;GitHub Actions Secret&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use the name of the GitHub Actios secret as the &lt;code&gt;credentials_json&lt;/code&gt; value in the GitHub Actions YAML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: &#39;google-github-actions/auth@v2&#39;&#xA;  with:&#xA;    credentials_json: &#39;${{ secrets.GOOGLE_CREDENTIALS }}&#39; # Replace with the name of your GitHub Actions secret&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>