<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-28T01:42:33Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ByteGrad/portfolio-website</title>
    <updated>2023-08-28T01:42:33Z</updated>
    <id>tag:github.com,2023-08-28:/ByteGrad/portfolio-website</id>
    <link href="https://github.com/ByteGrad/portfolio-website" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build &amp; Deploy a modern React / Next.js portfolio website from scratch!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://youtu.be/sUKptmUVIBM&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/sUKptmUVIBM/0.jpg&#34; alt=&#34;Watch tutorial here&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://youtu.be/sUKptmUVIBM&#34;&gt;Watch video here&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latest Next.js 13 features&lt;/li&gt; &#xA; &lt;li&gt;Next.js App Router&lt;/li&gt; &#xA; &lt;li&gt;Next.js Server Actions&lt;/li&gt; &#xA; &lt;li&gt;Client &amp;amp; Server Components&lt;/li&gt; &#xA; &lt;li&gt;TypeScript (Beginner &amp;amp; Intermediate)&lt;/li&gt; &#xA; &lt;li&gt;Tailwind CSS&lt;/li&gt; &#xA; &lt;li&gt;Context API&lt;/li&gt; &#xA; &lt;li&gt;Advanced Animations with Framer Motion&lt;/li&gt; &#xA; &lt;li&gt;React.Email &amp;amp; Resend&lt;/li&gt; &#xA; &lt;li&gt;Custom React hooks&lt;/li&gt; &#xA; &lt;li&gt;Fresh, modern UI design&lt;/li&gt; &#xA; &lt;li&gt;Light &amp;amp; Dark mode&lt;/li&gt; &#xA; &lt;li&gt;Responsive website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;If you want to be a professional developer, you have to know the fundamentals like JavaScript and CSS really well. I highly recommend you go through my &lt;a href=&#34;https://www.udemy.com/course/professional-javascript-course/?referralCode=0C1D5752923168BC87C2&#34;&gt;Professional JavaScript&lt;/a&gt; and &lt;a href=&#34;https://www.udemy.com/course/professional-css/?referralCode=4C3C08E82629E6B15752&#34;&gt;Professional CSS&lt;/a&gt; courses.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m close to releasing a complete React &amp;amp; Next.js course. Get on the email list to receive early-bird pricing: &lt;a href=&#34;https://email.bytegrad.com/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add RESEND_API_KEY environment variable in .env.local&lt;/li&gt; &#xA; &lt;li&gt;In the send-email.ts action file, change the &#34;to&#34; email to your own email&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>pezzolabs/pezzo</title>
    <updated>2023-08-28T01:42:33Z</updated>
    <id>tag:github.com,2023-08-28:/pezzolabs/pezzo</id>
    <link href="https://github.com/pezzolabs/pezzo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üïπÔ∏è Open-source LLMOps plaform designed to streamline prompt design, version management, instant delivery, collaboration, troubleshooting, observability and more.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://pezzo.ai/#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.pezzo.ai/logo-light-mode.svg?sanitize=true&#34; alt=&#34;logo&#34; width=&#34;150&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pezzo.ai/#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.pezzo.ai/logo-dark-mode.svg?sanitize=true&#34; &#34; alt=&#34;logo&#34; width=&#34;150&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; Pezzo is the open-source LLMOps platform built for developers and teams. In just two lines of code, you can seamlessly troubleshoot your AI operations, collaborate and manage your prompts in one place, and instantly deploy changes to any environment. &lt;/strong&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://pezzo.cc/discord&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.pezzo.ai/discord-button.png&#34; height=&#34;32&#34;&gt; &lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://pezzo.cc/3qzMpGb&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.pezzo.ai/read-the-docs-button.png&#34; &#34; height=&#34;32&#34;&gt; &lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://pezzo.cc/3qy415j&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.pezzo.ai/pezzo-cloud-button.png&#34; &#34; height=&#34;32&#34;&gt; &lt;/a&gt;&amp;nbsp; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/pezzolabs/pezzo/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pezzolabs/pezzo/main/CODE_OF_CONDUCT.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@pezzo/client&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/npm-@pezzo/client-green&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pezzo.cc/demo-video-gh&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.pezzo.ai/banner-with-play-button.png&#34; width=&#34;900px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;‚ú® Features&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;99%&#34; src=&#34;https://raw.githubusercontent.com/pezzolabs/pezzo/main/.github/assets/features/features-1.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;99%&#34; src=&#34;https://raw.githubusercontent.com/pezzolabs/pezzo/main/.github/assets/features/features-2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;99%&#34; src=&#34;https://raw.githubusercontent.com/pezzolabs/pezzo/main/.github/assets/features/features-3.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.pezzo.ai/&#34;&gt;Click here to navigate to the Official Pezzo Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the documentation, you can find information on how to use Pezzo, its architecture, including tutorials and recipes for varius use cases and LLM providers.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started - Local Development&lt;/h1&gt; &#xA;&lt;p&gt;This section is useful for contributors who want to run Pezzo locally in development mode.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js 18+&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;(Recommended) &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GraphQL.vscode-graphql&#34;&gt;GraphQL Language Feature Support VSCode Extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install NPM dependencies by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spin up development dependencies via Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Pezzo is entirely cloud-native and relies solely on open-source technologies such as &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://github.com/opensearch-project/OpenSearch&#34;&gt;OpenSearch&lt;/a&gt;, and &lt;a href=&#34;https://supertokens.com/&#34;&gt;Supertokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Spin these dependencies up via Docker Compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose -f docker-compose.dev.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Pezzo&lt;/h3&gt; &#xA;&lt;p&gt;Generate the Prisma client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx nx prisma:generate server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy Prisma migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dotenv-cli -e apps/server/.env -- npx prisma migrate deploy --schema apps/server/prisma/schema.prisma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx nx serve server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server is now running. In the background, &lt;a href=&#34;https://www.npmjs.com/package/@graphql-codegen/cli&#34;&gt;graphql-codegen&lt;/a&gt; has generated GraphQL types based on the actual schema. These can be found at &lt;a href=&#34;https://raw.githubusercontent.com/pezzolabs/pezzo/main/libs/graphql/src/@generated&#34;&gt;libs/graphql/src/@generated&lt;/a&gt;. This provides excellent type safety across the monorepo.&lt;/p&gt; &#xA;&lt;p&gt;In development mode, you want to run &lt;code&gt;graphql-codegen&lt;/code&gt; in watch mode, so whenever you make changes to the schema, types are generated automatically. In a separate Terminal tab, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run graphql:codegen:watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you are ready to run the Pezzo Console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx nx serve console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Pezzo is now accessible at &lt;a href=&#34;http://localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt; üöÄ&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We welcome contributions from the community! Please feel free to submit pull requests or create issues for bugs or feature suggestions.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute but not sure how, join our &lt;a href=&#34;https://pezzo.cc/discord&#34;&gt;Discord&lt;/a&gt; and we&#39;ll be happy to help you out!&lt;/p&gt; &#xA;&lt;p&gt;Please check out &lt;a href=&#34;https://raw.githubusercontent.com/pezzolabs/pezzo/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before contributing.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository&#39;s source code is available under the &lt;a href=&#34;https://raw.githubusercontent.com/pezzolabs/pezzo/main/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>makenotion/notion-sdk-js</title>
    <updated>2023-08-28T01:42:33Z</updated>
    <id>tag:github.com,2023-08-28:/makenotion/notion-sdk-js</id>
    <link href="https://github.com/makenotion/notion-sdk-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Notion JavaScript Client&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Notion SDK for JavaScript&lt;/h1&gt; &#xA; &lt;p&gt; &lt;b&gt;A simple and easy to use client for the &lt;a href=&#34;https://developers.notion.com&#34;&gt;Notion API&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/makenotion/notion-sdk-js/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@notionhq/client&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40notionhq%2Fclient.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install @notionhq/client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Use Notion&#39;s &lt;a href=&#34;https://developers.notion.com/docs/getting-started&#34;&gt;Getting Started Guide&lt;/a&gt; to get set up to use Notion&#39;s API.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Import and initialize a client using an &lt;strong&gt;integration token&lt;/strong&gt; or an OAuth &lt;strong&gt;access token&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { Client } = require(&#34;@notionhq/client&#34;)&#xA;&#xA;// Initializing a client&#xA;const notion = new Client({&#xA;  auth: process.env.NOTION_TOKEN,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make a request to any Notion API endpoint.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See the complete list of endpoints in the &lt;a href=&#34;https://developers.notion.com/reference&#34;&gt;API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;;(async () =&amp;gt; {&#xA;  const listUsersResponse = await notion.users.list({})&#xA;})()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each method returns a &lt;code&gt;Promise&lt;/code&gt; which resolves the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(listUsersResponse)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  results: [&#xA;    {&#xA;      object: &#39;user&#39;,&#xA;      id: &#39;d40e767c-d7af-4b18-a86d-55c61f1e39a4&#39;,&#xA;      type: &#39;person&#39;,&#xA;      person: {&#xA;        email: &#39;avo@example.org&#39;,&#xA;      },&#xA;      name: &#39;Avocado Lovelace&#39;,&#xA;      avatar_url: &#39;https://secure.notion-static.com/e6a352a8-8381-44d0-a1dc-9ed80e62b53d.jpg&#39;,&#xA;    },&#xA;    ...&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Endpoint parameters are grouped into a single object. You don&#39;t need to remember which parameters go in the path, query, or body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const myPage = await notion.databases.query({&#xA;  database_id: &#34;897e5a76-ae52-4b48-9fdf-e71f5945d1af&#34;,&#xA;  filter: {&#xA;    property: &#34;Landmark&#34;,&#xA;    rich_text: {&#xA;      contains: &#34;Bridge&#34;,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling errors&lt;/h3&gt; &#xA;&lt;p&gt;If the API returns an unsuccessful response, the returned &lt;code&gt;Promise&lt;/code&gt; rejects with a &lt;code&gt;APIResponseError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The error contains properties from the response, and the most helpful is &lt;code&gt;code&lt;/code&gt;. You can compare &lt;code&gt;code&lt;/code&gt; to the values in the &lt;code&gt;APIErrorCode&lt;/code&gt; object to avoid misspelling error codes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { Client, APIErrorCode } = require(&#34;@notionhq/client&#34;)&#xA;&#xA;try {&#xA;  const notion = new Client({ auth: process.env.NOTION_TOKEN })&#xA;  const myPage = await notion.databases.query({&#xA;    database_id: databaseId,&#xA;    filter: {&#xA;      property: &#34;Landmark&#34;,&#xA;      rich_text: {&#xA;        contains: &#34;Bridge&#34;,&#xA;      },&#xA;    },&#xA;  })&#xA;} catch (error) {&#xA;  if (error.code === APIErrorCode.ObjectNotFound) {&#xA;    //&#xA;    // For example: handle by asking the user to select a different database&#xA;    //&#xA;  } else {&#xA;    // Other error handling code&#xA;    console.error(error)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The client emits useful information to a logger. By default, it only emits warnings and errors.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re debugging an application, and would like the client to log response bodies, set the &lt;code&gt;logLevel&lt;/code&gt; option to &lt;code&gt;LogLevel.DEBUG&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { Client, LogLevel } = require(&#34;@notionhq/client&#34;)&#xA;&#xA;const notion = new Client({&#xA;  auth: process.env.NOTION_TOKEN,&#xA;  logLevel: LogLevel.DEBUG,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also set a custom &lt;code&gt;logger&lt;/code&gt; to emit logs to a destination other than &lt;code&gt;stdout&lt;/code&gt;. A custom logger is a function which is called with 3 parameters: &lt;code&gt;logLevel&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, and &lt;code&gt;extraInfo&lt;/code&gt;. The custom logger should not return a value.&lt;/p&gt; &#xA;&lt;h3&gt;Client options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Client&lt;/code&gt; supports the following options on initialization. These options are all keys in the single constructor parameter.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;auth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bearer token for authentication. If left undefined, the &lt;code&gt;auth&lt;/code&gt; parameter should be set on each request.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;logLevel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LogLevel.WARN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LogLevel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Verbosity of logs the instance will produce. By default, logs are written to &lt;code&gt;stdout&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timeoutMs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;60_000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number of milliseconds to wait before emitting a &lt;code&gt;RequestTimeoutError&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;baseUrl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;https://api.notion.com&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The root URL for sending API requests. This can be changed to test with a mock server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;logger&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Log to console&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A custom logging function. This function is only called when the client emits a log that is equal or greater severity than &lt;code&gt;logLevel&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default node agent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http.Agent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used to control creation of TCP sockets. A common use is to proxy requests with &lt;a href=&#34;https://github.com/TooTallNate/node-https-proxy-agent&#34;&gt;&lt;code&gt;https-proxy-agent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;This package contains type definitions for all request parameters and responses, as well as some useful sub-objects from those entities.&lt;/p&gt; &#xA;&lt;p&gt;Because errors in TypeScript start with type &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;unknown&lt;/code&gt;, you should use the &lt;code&gt;isNotionClientError&lt;/code&gt; type guard to handle them in a type-safe way. Each &lt;code&gt;NotionClientError&lt;/code&gt; type is uniquely identified by its &lt;code&gt;error.code&lt;/code&gt;. Codes in the &lt;code&gt;APIErrorCode&lt;/code&gt; enum are returned from the server. Codes in the &lt;code&gt;ClientErrorCode&lt;/code&gt; enum are produced on the client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;try {&#xA;  const response = await notion.databases.query({&#xA;    /* ... */&#xA;  })&#xA;} catch (error: unknown) {&#xA;  if (isNotionClientError(error)) {&#xA;    // error is now strongly typed to NotionClientError&#xA;    switch (error.code) {&#xA;      case ClientErrorCode.RequestTimeout:&#xA;        // ...&#xA;        break&#xA;      case APIErrorCode.ObjectNotFound:&#xA;        // ...&#xA;        break&#xA;      case APIErrorCode.Unauthorized:&#xA;        // ...&#xA;        break&#xA;      // ...&#xA;      default:&#xA;        // you could even take advantage of exhaustiveness checking&#xA;        assertNever(error.code)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Type guards&lt;/h4&gt; &#xA;&lt;p&gt;There are several &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types&#34;&gt;type guards&lt;/a&gt; provided to distinguish between full and partial API responses.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type guard function&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isFullPage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine whether an object is a full &lt;code&gt;PageObjectResponse&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isFullBlock&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine whether an object is a full &lt;code&gt;BlockObjectResponse&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isFullDatabase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine whether an object is a full &lt;code&gt;DatabaseObjectResponse&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isFullUser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine whether an object is a full &lt;code&gt;UserObjectResponse&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isFullComment&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine whether an object is a full &lt;code&gt;CommentObjectResponse&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here is an example of using a type guard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const fullOrPartialPages = await notion.databases.query({&#xA;  database_id: &#34;897e5a76-ae52-4b48-9fdf-e71f5945d1af&#34;,&#xA;})&#xA;for (const page of fullOrPartialPages.results) {&#xA;  if (!isFullPage(page)) {&#xA;    continue&#xA;  }&#xA;  // The page variable has been narrowed from PageObjectResponse | PartialPageObjectResponse to PageObjectResponse.&#xA;  console.log(&#34;Created at:&#34;, page.created_time)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utility functions&lt;/h3&gt; &#xA;&lt;p&gt;This package also exports a few utility functions that are helpful for dealing with any of our paginated APIs.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;iteratePaginatedAPI(listFn, firstPageArgs)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This utility turns any paginated API into an async iterator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;listFn&lt;/code&gt;: Any function on the Notion client that represents a paginated API (i.e. accepts &lt;code&gt;start_cursor&lt;/code&gt;.) Example: &lt;code&gt;notion.blocks.children.list&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firstPageArgs&lt;/code&gt;: Arguments that should be passed to the API on the first and subsequent calls to the API, for example a &lt;code&gt;block_id&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols&#34;&gt;async iterator&lt;/a&gt; over results from the API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;for await (const block of iteratePaginatedAPI(notion.blocks.children.list, {&#xA;  block_id: parentBlockId,&#xA;})) {&#xA;  // Do something with block.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;collectPaginatedAPI(listFn, firstPageArgs)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This utility accepts the same arguments as &lt;code&gt;iteratePaginatedAPI&lt;/code&gt;, but collects the results into an in-memory array.&lt;/p&gt; &#xA;&lt;p&gt;Before using this utility, check that the data you are dealing with is small enough to fit in memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;listFn&lt;/code&gt;: Any function on the Notion client that represents a paginated API (i.e. accepts &lt;code&gt;start_cursor&lt;/code&gt;.) Example: &lt;code&gt;notion.blocks.children.list&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firstPageArgs&lt;/code&gt;: Arguments that should be passed to the API on the first and subsequent calls to the API, for example a &lt;code&gt;block_id&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;An array with results from the API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const blocks = await collectPaginatedAPI(notion.blocks.children.list, {&#xA;  block_id: parentBlockId,&#xA;})&#xA;// Do something with blocks.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This package supports the following minimum versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runtime: &lt;code&gt;node &amp;gt;= 12&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Type definitions (optional): &lt;code&gt;typescript &amp;gt;= 4.5&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Earlier versions may still work, but we encourage people building new applications to upgrade to the current stable.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you want to submit a feature request for Notion&#39;s API, or are experiencing any issues with the API platform, please email us at &lt;code&gt;developers@makenotion.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To report issues with the SDK, it is possible to &lt;a href=&#34;https://github.com/makenotion/notion-sdk-js/issues&#34;&gt;submit an issue&lt;/a&gt; to this repo. However, we don&#39;t monitor these issues very closely. We recommend you reach out to us at &lt;code&gt;developers@makenotion.com&lt;/code&gt; instead.&lt;/p&gt;</summary>
  </entry>
</feed>