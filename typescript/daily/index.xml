<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-12T01:36:49Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>josdejong/jsonrepair</title>
    <updated>2025-07-12T01:36:49Z</updated>
    <id>tag:github.com,2025-07-12:/josdejong/jsonrepair</id>
    <link href="https://github.com/josdejong/jsonrepair" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repair invalid JSON documents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jsonrepair&lt;/h1&gt; &#xA;&lt;p&gt;Repair invalid JSON documents.&lt;/p&gt; &#xA;&lt;p&gt;Try it out in a minimal demo: &lt;a href=&#34;https://josdejong.github.io/jsonrepair/&#34;&gt;https://josdejong.github.io/jsonrepair/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use it in a full-fledged application: &lt;a href=&#34;https://jsoneditoronline.org&#34;&gt;https://jsoneditoronline.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read the background article &lt;a href=&#34;https://jsoneditoronline.org/indepth/parse/fix-json/&#34;&gt;&#34;How to fix JSON and validate it with ease&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following issues can be fixed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add missing quotes around keys&lt;/li&gt; &#xA; &lt;li&gt;Add missing escape characters&lt;/li&gt; &#xA; &lt;li&gt;Add missing commas&lt;/li&gt; &#xA; &lt;li&gt;Add missing closing brackets&lt;/li&gt; &#xA; &lt;li&gt;Repair truncated JSON&lt;/li&gt; &#xA; &lt;li&gt;Replace single quotes with double quotes&lt;/li&gt; &#xA; &lt;li&gt;Replace special quote characters like &lt;code&gt;“...”&lt;/code&gt; with regular double quotes&lt;/li&gt; &#xA; &lt;li&gt;Replace special white space characters with regular spaces&lt;/li&gt; &#xA; &lt;li&gt;Replace Python constants &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;False&lt;/code&gt; with &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strip trailing commas&lt;/li&gt; &#xA; &lt;li&gt;Strip comments like &lt;code&gt;/* ... */&lt;/code&gt; and &lt;code&gt;// ...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strip fenced code blocks like &lt;code&gt; ```json&lt;/code&gt; and &lt;code&gt;```&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strip ellipsis in arrays and objects like &lt;code&gt;[1, 2, 3, ...]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strip JSONP notation like &lt;code&gt;callback({ ... })&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strip escape characters from an escaped string like &lt;code&gt;{\&#34;stringified\&#34;: \&#34;content\&#34;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strip MongoDB data types like &lt;code&gt;NumberLong(2)&lt;/code&gt; and &lt;code&gt;ISODate(&#34;2012-12-19T06:01:17.171Z&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Concatenate strings like &lt;code&gt;&#34;long text&#34; + &#34;more text on next line&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Turn newline delimited JSON into a valid JSON array, for example: &lt;pre&gt;&lt;code&gt;{ &#34;id&#34;: 1, &#34;name&#34;: &#34;John&#34; }&#xA;{ &#34;id&#34;: 2, &#34;name&#34;: &#34;Sarah&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;jsonrepair&lt;/code&gt; library has streaming support and can handle infinitely large documents.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install jsonrepair&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in the &lt;code&gt;lib&lt;/code&gt; folder, there are builds for ESM, UMD, and CommonJs.&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;h3&gt;ES module&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;jsonrepair&lt;/code&gt; function using an ES modules import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { jsonrepair } from &#39;jsonrepair&#39;&#xA;&#xA;try {&#xA;  // The following is invalid JSON: is consists of JSON contents copied from &#xA;  // a JavaScript code base, where the keys are missing double quotes, &#xA;  // and strings are using single quotes:&#xA;  const json = &#34;{name: &#39;John&#39;}&#34;&#xA;  &#xA;  const repaired = jsonrepair(json)&#xA;  &#xA;  console.log(repaired) // &#39;{&#34;name&#34;: &#34;John&#34;}&#39;&#xA;} catch (err) {&#xA;  console.error(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streaming API&lt;/h3&gt; &#xA;&lt;p&gt;Use the streaming API in Node.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createReadStream, createWriteStream } from &#39;node:fs&#39;&#xA;import { pipeline } from &#39;node:stream&#39;&#xA;import { jsonrepairTransform } from &#39;jsonrepair/stream&#39;&#xA;&#xA;const inputStream = createReadStream(&#39;./data/broken.json&#39;)&#xA;const outputStream = createWriteStream(&#39;./data/repaired.json&#39;)&#xA;&#xA;pipeline(inputStream, jsonrepairTransform(), outputStream, (err) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err)&#xA;  } else {&#xA;    console.log(&#39;done&#39;)&#xA;  }&#xA;})&#xA;&#xA;// or using .pipe() instead of pipeline():&#xA;// inputStream&#xA;//   .pipe(jsonrepairTransform())&#xA;//   .pipe(outputStream)&#xA;//   .on(&#39;error&#39;, (err) =&amp;gt; console.error(err))&#xA;//   .on(&#39;finish&#39;, () =&amp;gt; console.log(&#39;done&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CommonJS&lt;/h3&gt; &#xA;&lt;p&gt;Use in CommonJS (not recommended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { jsonrepair } = require(&#39;jsonrepair&#39;)&#xA;const json = &#34;{name: &#39;John&#39;}&#34;&#xA;console.log(jsonrepair(json)) // &#39;{&#34;name&#34;: &#34;John&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UMD&lt;/h3&gt; &#xA;&lt;p&gt;Use with UMD in the browser (not recommended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;/node_modules/jsonrepair/lib/umd/jsonrepair.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  const { jsonrepair } = JSONRepair&#xA;  const json = &#34;{name: &#39;John&#39;}&#34;&#xA;  console.log(jsonrepair(json)) // &#39;{&#34;name&#34;: &#34;John&#34;}&#39;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;Use in Python via &lt;a href=&#34;https://github.com/Distributive-Network/PythonMonkey#pythonmonkey&#34;&gt;&lt;code&gt;PythonMonkey&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;jsonrepair&lt;/code&gt; via &lt;code&gt;npm install jsonrepair&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;PythonMonkey&lt;/code&gt; via &lt;code&gt;pip install pythonmonkey&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the libraries in a Python script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pythonmonkey&#xA;&#xA;jsonrepair = pythonmonkey.require(&#39;jsonrepair&#39;).jsonrepair&#xA;&#xA;json = &#34;[1,2,3,&#34;&#xA;repaired = jsonrepair(json)&#xA;print(repaired) &#xA;# [1,2,3]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Regular API&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;jsonrepair&lt;/code&gt; as a function or as a streaming transform. Broken JSON is passed to the function, and the function either returns the repaired JSON, or throws an &lt;code&gt;JSONRepairError&lt;/code&gt; exception when an issue is encountered which could not be solved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// @throws JSONRepairError &#xA;jsonrepair(json: string) : string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streaming API&lt;/h3&gt; &#xA;&lt;p&gt;The streaming API is availabe in &lt;code&gt;jsonrepair/stream&lt;/code&gt; and can be used in a &lt;a href=&#34;https://nodejs.org/api/stream.html&#34;&gt;Node.js stream&lt;/a&gt;. It consists of a transform function that can be used in a stream pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;jsonrepairTransform(options?: { chunkSize?: number, bufferSize?: number }) : Transform&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The option &lt;code&gt;chunkSize&lt;/code&gt; determines the size of the chunks that the transform outputs, and is &lt;code&gt;65536&lt;/code&gt; bytes by default. Changing &lt;code&gt;chunkSize&lt;/code&gt; can influcence the performance.&lt;/p&gt; &#xA;&lt;p&gt;The option &lt;code&gt;bufferSize&lt;/code&gt; determines how many bytes of the input and output stream are kept in memory and is also &lt;code&gt;65536&lt;/code&gt; bytes by default. This buffer is used as a &#34;moving window&#34; on the input and output. This is necessary because &lt;code&gt;jsonrepair&lt;/code&gt; must look ahead or look back to see what to fix, and it must sometimes walk back the generated output to insert a missing comma for example. The &lt;code&gt;bufferSize&lt;/code&gt; must be larger than the length of the largest string and whitespace in the JSON data, otherwise, and error is thrown when processing the data. Making &lt;code&gt;bufferSize&lt;/code&gt; very large will result in more memory usage and less performance.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Interface (CLI)&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;jsonrepair&lt;/code&gt; is installed globally using npm, it can be used on the command line. To install &lt;code&gt;jsonrepair&lt;/code&gt; globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g jsonrepair&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ jsonrepair [filename] {OPTIONS}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--version, -v       Show application version&#xA;--help,    -h       Show this message&#xA;--output,  -o       Output file&#xA;--overwrite         Overwrite the input file&#xA;--buffer            Buffer size in bytes, for example 64K (default) or 1M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ jsonrepair broken.json                        # Repair a file, output to console&#xA;$ jsonrepair broken.json &amp;gt; repaired.json        # Repair a file, output to file&#xA;$ jsonrepair broken.json --output repaired.json # Repair a file, output to file&#xA;$ jsonrepair broken.json --overwrite            # Repair a file, replace the file itself&#xA;$ cat broken.json | jsonrepair                  # Repair data from an input stream&#xA;$ cat broken.json | jsonrepair &amp;gt; repaired.json  # Repair data from an input stream, output to file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives:&lt;/h2&gt; &#xA;&lt;p&gt;Similar libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RyanMarcus/dirty-json&#34;&gt;https://github.com/RyanMarcus/dirty-json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;When implementing a fix or a new feature, it important to know that there are currently two implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/regular&lt;/code&gt; This is a non-streaming implementation. The code is small and works for files up to 512MB, ideal for usage in the browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/streaming&lt;/code&gt; A streaming implementation that can be used in Node.js. The code is larger and more complex, and the implementation uses a configurable &lt;code&gt;bufferSize&lt;/code&gt; and &lt;code&gt;chunkSize&lt;/code&gt;. When the parsed document contains a string or number that is longer than the configured &lt;code&gt;bufferSize&lt;/code&gt;, the library will throw an &#34;Index out of range&#34; error since it cannot hold the full string in the buffer. When configured with an infinite buffer size, the streaming implementation works the same as the regular implementation. In that case this out of range error cannot occur, but it makes the performance worse and the application can run out of memory when repairing large documents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both implementations are tested against the same suite of unit tests in &lt;code&gt;src/index.test.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Scripts:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Script&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install the dependencies once&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build the library (ESM, CommonJs, and UMD output in the folder &lt;code&gt;lib&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm test&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run the unit tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run lint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run the linter (eslint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run format&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically fix linter issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run build-and-test&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run the linter, build all, and run unit tests and integration tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run release&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Release a new version. This will lint, test, build, increment the version number, push the changes to git, add a git version tag, and publish the npm package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run release-dry-run&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run all release steps and see the change list without actually publishing:&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the &lt;a href=&#34;https://raw.githubusercontent.com/josdejong/jsonrepair/main/LICENSE.md&#34;&gt;ISC license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>docker/build-push-action</title>
    <updated>2025-07-12T01:36:49Z</updated>
    <id>tag:github.com,2025-07-12:/docker/build-push-action</id>
    <link href="https://github.com/docker/build-push-action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub Action to build and push Docker images with Buildx&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/build-push-action/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/docker/build-push-action.svg?style=flat-square&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/marketplace/actions/build-and-push-docker-images&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/marketplace-build--and--push--docker--images-blue?logo=github&amp;amp;style=flat-square&#34; alt=&#34;GitHub marketplace&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/docker/build-push-action/actions?workflow=ci&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/docker/build-push-action/ci.yml?branch=master&amp;amp;label=ci&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;CI workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/docker/build-push-action/actions?workflow=test&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/docker/build-push-action/test.yml?branch=master&amp;amp;label=test&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Test workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/docker/build-push-action&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/docker/build-push-action?logo=codecov&amp;amp;style=flat-square&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;GitHub Action to build and push Docker images with &lt;a href=&#34;https://github.com/docker/buildx&#34;&gt;Buildx&lt;/a&gt; with full support of the features provided by &lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;Moby BuildKit&lt;/a&gt; builder toolkit. This includes multi-platform build, secrets, remote cache, etc. and different builder deployment/namespacing options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/.github/build-push-action.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#git-context&#34;&gt;Git context&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#path-context&#34;&gt;Path context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#summaries&#34;&gt;Summaries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#customizing&#34;&gt;Customizing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#inputs&#34;&gt;inputs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#outputs&#34;&gt;outputs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#environment-variables&#34;&gt;environment variables&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In the examples below we are also using 3 other actions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/setup-buildx-action&#34;&gt;&lt;code&gt;setup-buildx&lt;/code&gt;&lt;/a&gt; action will create and boot a builder using by default the &lt;a href=&#34;https://docs.docker.com/build/building/drivers/docker-container/&#34;&gt;&lt;code&gt;docker-container&lt;/code&gt; driver&lt;/a&gt;. This is &lt;strong&gt;not required but recommended&lt;/strong&gt; using it to be able to build multi-platform images, export cache, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/setup-qemu-action&#34;&gt;&lt;code&gt;setup-qemu&lt;/code&gt;&lt;/a&gt; action can be useful if you want to add emulation support with QEMU to be able to build against more platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/login-action&#34;&gt;&lt;code&gt;login&lt;/code&gt;&lt;/a&gt; action will take care to log in against a Docker registry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git context&lt;/h3&gt; &#xA;&lt;p&gt;By default, this action uses the &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/#git-repositories&#34;&gt;Git context&lt;/a&gt;, so you don&#39;t need to use the &lt;a href=&#34;https://github.com/actions/checkout/&#34;&gt;&lt;code&gt;actions/checkout&lt;/code&gt;&lt;/a&gt; action to check out the repository as this will be done directly by &lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;BuildKit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The git reference will be based on the &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows&#34;&gt;event that triggered your workflow&lt;/a&gt; and will result in the following context: &lt;code&gt;https://github.com/&amp;lt;owner&amp;gt;/&amp;lt;repo&amp;gt;.git#&amp;lt;ref&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: ci&#xA;&#xA;on:&#xA;  push:&#xA;&#xA;jobs:&#xA;  docker:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      -&#xA;        name: Login to Docker Hub&#xA;        uses: docker/login-action@v3&#xA;        with:&#xA;          username: ${{ vars.DOCKERHUB_USERNAME }}&#xA;          password: ${{ secrets.DOCKERHUB_TOKEN }}&#xA;      -&#xA;        name: Set up QEMU&#xA;        uses: docker/setup-qemu-action@v3&#xA;      -&#xA;        name: Set up Docker Buildx&#xA;        uses: docker/setup-buildx-action@v3&#xA;      -&#xA;        name: Build and push&#xA;        uses: docker/build-push-action@v6&#xA;        with:&#xA;          push: true&#xA;          tags: user/app:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be careful because &lt;strong&gt;any file mutation in the steps that precede the build step will be ignored, including processing of the &lt;code&gt;.dockerignore&lt;/code&gt; file&lt;/strong&gt; since the context is based on the Git reference. However, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#path-context&#34;&gt;Path context&lt;/a&gt; using the &lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#inputs&#34;&gt;&lt;code&gt;context&lt;/code&gt; input&lt;/a&gt; alongside the &lt;a href=&#34;https://github.com/actions/checkout/&#34;&gt;&lt;code&gt;actions/checkout&lt;/code&gt;&lt;/a&gt; action to remove this restriction.&lt;/p&gt; &#xA;&lt;p&gt;Default Git context can also be provided using the &lt;a href=&#34;https://handlebarsjs.com/guide/&#34;&gt;Handlebars template&lt;/a&gt; expression &lt;code&gt;{{defaultContext}}&lt;/code&gt;. Here we can use it to provide a subdirectory to the default Git context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;      -&#xA;        name: Build and push&#xA;        uses: docker/build-push-action@v6&#xA;        with:&#xA;          context: &#34;{{defaultContext}}:mysubdir&#34;&#xA;          push: true&#xA;          tags: user/app:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building from the current repository automatically uses the &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/automatic-token-authentication&#34;&gt;GitHub Token&lt;/a&gt;, so it does not need to be passed. If you want to authenticate against another private repository, you have to use a &lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/secrets&#34;&gt;secret&lt;/a&gt; named &lt;code&gt;GIT_AUTH_TOKEN&lt;/code&gt; to be able to authenticate against it with Buildx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;      -&#xA;        name: Build and push&#xA;        uses: docker/build-push-action@v6&#xA;        with:&#xA;          push: true&#xA;          tags: user/app:latest&#xA;          secrets: |&#xA;            GIT_AUTH_TOKEN=${{ secrets.MYTOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Path context&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: ci&#xA;&#xA;on:&#xA;  push:&#xA;&#xA;jobs:&#xA;  docker:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      -&#xA;        name: Checkout&#xA;        uses: actions/checkout@v4&#xA;      -&#xA;        name: Login to Docker Hub&#xA;        uses: docker/login-action@v3&#xA;        with:&#xA;          username: ${{ vars.DOCKERHUB_USERNAME }}&#xA;          password: ${{ secrets.DOCKERHUB_TOKEN }}&#xA;      -&#xA;        name: Set up QEMU&#xA;        uses: docker/setup-qemu-action@v3&#xA;      -&#xA;        name: Set up Docker Buildx&#xA;        uses: docker/setup-buildx-action@v3&#xA;      -&#xA;        name: Build and push&#xA;        uses: docker/build-push-action@v6&#xA;        with:&#xA;          context: .&#xA;          push: true&#xA;          tags: user/app:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/multi-platform/&#34;&gt;Multi-platform image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/secrets/&#34;&gt;Secrets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/push-multi-registries/&#34;&gt;Push to multi-registries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/manage-tags-labels/&#34;&gt;Manage tags and labels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/cache/&#34;&gt;Cache management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/export-docker/&#34;&gt;Export to Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/test-before-push/&#34;&gt;Test before push&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/checks/&#34;&gt;Validating build configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/local-registry/&#34;&gt;Local registry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/share-image-jobs/&#34;&gt;Share built image between jobs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/named-contexts/&#34;&gt;Named contexts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/copy-image-registries/&#34;&gt;Copy image between registries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/update-dockerhub-desc/&#34;&gt;Update Docker Hub repo description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/attestations/&#34;&gt;SBOM and provenance attestations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/annotations/&#34;&gt;Annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/reproducible-builds/&#34;&gt;Reproducible builds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Summaries&lt;/h2&gt; &#xA;&lt;p&gt;This action generates a &lt;a href=&#34;https://github.blog/2022-05-09-supercharging-github-actions-with-job-summaries/&#34;&gt;job summary&lt;/a&gt; that provides a detailed overview of the build execution. The summary shows an overview of all the steps executed during the build, including the build inputs and eventual errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/.github/build-push-summary.png&#34; alt=&#34;build-push-action job summary&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The summary also includes a link for downloading the build record with additional details about the build, including build stats, logs, outputs, and more. The build record can be imported to Docker Desktop for inspecting the build in greater detail.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;re using the &lt;a href=&#34;https://github.com/actions/download-artifact&#34;&gt;&lt;code&gt;actions/download-artifact&lt;/code&gt;&lt;/a&gt; action in your workflow, you need to ignore the build record artifacts if &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt; inputs are not specified (&lt;a href=&#34;https://github.com/actions/download-artifact?tab=readme-ov-file#download-all-artifacts&#34;&gt;defaults to download all artifacts&lt;/a&gt; of the workflow), otherwise the action will fail:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: actions/download-artifact@v4&#xA;  with:&#xA;    pattern: &#34;!*.dockerbuild&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;More info: &lt;a href=&#34;https://github.com/actions/toolkit/pull/1874&#34;&gt;https://github.com/actions/toolkit/pull/1874&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Summaries are enabled by default, but can be disabled with the &lt;code&gt;DOCKER_BUILD_SUMMARY&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#environment-variables&#34;&gt;environment variable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information about summaries, refer to the &lt;a href=&#34;https://docs.docker.com/go/build-summary/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing&lt;/h2&gt; &#xA;&lt;h3&gt;inputs&lt;/h3&gt; &#xA;&lt;p&gt;The following inputs can be used as &lt;code&gt;step.with&lt;/code&gt; keys:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;List&lt;/code&gt; type is a newline-delimited string&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cache-from: |&#xA;  user/app:cache&#xA;  type=local,src=path/to/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;CSV&lt;/code&gt; type is a comma-delimited string&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tags: name/app:latest,name/app:1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;add-hosts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List/CSV&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/#add-entries-to-container-hosts-file---add-host&#34;&gt;customs host-to-IP mapping&lt;/a&gt; (e.g., &lt;code&gt;docker:10.180.0.1&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List/CSV&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#allow&#34;&gt;extra privileged entitlement&lt;/a&gt; (e.g., &lt;code&gt;network.host,security.insecure&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;annotations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of annotation to set to the image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;attests&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/build/attestations/&#34;&gt;attestation&lt;/a&gt; parameters (e.g., &lt;code&gt;type=sbom,generator=image&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;builder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Builder instance (see &lt;a href=&#34;https://github.com/docker/setup-buildx-action&#34;&gt;setup-buildx&lt;/a&gt; action)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;build-args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#build-arg&#34;&gt;build-time variables&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;build-contexts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of additional &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#build-context&#34;&gt;build contexts&lt;/a&gt; (e.g., &lt;code&gt;name=path&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cache-from&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#cache-from&#34;&gt;external cache sources&lt;/a&gt; (e.g., &lt;code&gt;type=local,src=path/to/dir&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cache-to&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#cache-to&#34;&gt;cache export destinations&lt;/a&gt; (e.g., &lt;code&gt;type=local,dest=path/to/dir&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;call&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Set &lt;a href=&#34;https://docs.docker.com/reference/cli/docker/buildx/build/#call&#34;&gt;method for evaluating build&lt;/a&gt; (e.g., &lt;code&gt;check&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cgroup-parent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Optional &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/#use-a-custom-parent-cgroup---cgroup-parent&#34;&gt;parent cgroup&lt;/a&gt; for the container used in the build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;context&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Build&#39;s context is the set of files located in the specified &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/&#34;&gt;&lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; (default &lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#git-context&#34;&gt;Git context&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Path to the Dockerfile. (default &lt;code&gt;{context}/Dockerfile&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of metadata for an image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#load&#34;&gt;Load&lt;/a&gt; is a shorthand for &lt;code&gt;--output=type=docker&lt;/code&gt; (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;network&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Set the networking mode for the &lt;code&gt;RUN&lt;/code&gt; instructions during build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;no-cache&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Do not use cache when building the image (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;no-cache-filters&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List/CSV&lt;/td&gt; &#xA;   &lt;td&gt;Do not cache specified stages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#output&#34;&gt;output destinations&lt;/a&gt; (format: &lt;code&gt;type=local,dest=path&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;platforms&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List/CSV&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#platform&#34;&gt;target platforms&lt;/a&gt; for build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;provenance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool/String&lt;/td&gt; &#xA;   &lt;td&gt;Generate &lt;a href=&#34;https://docs.docker.com/build/attestations/slsa-provenance/&#34;&gt;provenance&lt;/a&gt; attestation for the build (shorthand for &lt;code&gt;--attest=type=provenance&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pull&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;Always attempt to pull all referenced images (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;push&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#push&#34;&gt;Push&lt;/a&gt; is a shorthand for &lt;code&gt;--output=type=registry&lt;/code&gt; (default &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sbom&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool/String&lt;/td&gt; &#xA;   &lt;td&gt;Generate &lt;a href=&#34;https://docs.docker.com/build/attestations/sbom/&#34;&gt;SBOM&lt;/a&gt; attestation for the build (shorthand for &lt;code&gt;--attest=type=sbom&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#secret&#34;&gt;secrets&lt;/a&gt; to expose to the build (e.g., &lt;code&gt;key=string&lt;/code&gt;, &lt;code&gt;GIT_AUTH_TOKEN=mytoken&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;secret-envs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List/CSV&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#secret&#34;&gt;secret env vars&lt;/a&gt; to expose to the build (e.g., &lt;code&gt;key=envname&lt;/code&gt;, &lt;code&gt;MY_SECRET=MY_ENV_VAR&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;secret-files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#secret&#34;&gt;secret files&lt;/a&gt; to expose to the build (e.g., &lt;code&gt;key=filename&lt;/code&gt;, &lt;code&gt;MY_SECRET=./secret.txt&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shm-size&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Size of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#shm-size&#34;&gt;&lt;code&gt;/dev/shm&lt;/code&gt;&lt;/a&gt; (e.g., &lt;code&gt;2g&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ssh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;List of &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#ssh&#34;&gt;SSH agent socket or keys&lt;/a&gt; to expose to the build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List/CSV&lt;/td&gt; &#xA;   &lt;td&gt;List of tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;target&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Sets the target stage to build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ulimit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_build/#ulimit&#34;&gt;Ulimit&lt;/a&gt; options (e.g., &lt;code&gt;nofile=1024:1024&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;github-token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;GitHub Token used to authenticate against a repository for &lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/#git-context&#34;&gt;Git context&lt;/a&gt; (default &lt;code&gt;${{ github.token }}&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;outputs&lt;/h3&gt; &#xA;&lt;p&gt;The following outputs are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;imageid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Image ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Image digest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;metadata&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;Build result metadata&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;environment variables&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_BUILD_CHECKS_ANNOTATIONS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;false&lt;/code&gt;, GitHub annotations are not generated for &lt;a href=&#34;https://docs.docker.com/build/checks/&#34;&gt;build checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_BUILD_SUMMARY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;false&lt;/code&gt;, &lt;a href=&#34;https://docs.docker.com/build/ci/github-actions/build-summary/&#34;&gt;build summary&lt;/a&gt; generation is disabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_BUILD_RECORD_UPLOAD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;false&lt;/code&gt;, build record upload as &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts&#34;&gt;GitHub artifact&lt;/a&gt; is disabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_BUILD_RECORD_RETENTION_DAYS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Duration after which build record artifact will expire in days. Defaults to repository/org &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#artifact-and-log-retention-policy&#34;&gt;retention settings&lt;/a&gt; if unset or &lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_BUILD_EXPORT_LEGACY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;true&lt;/code&gt;, exports build using legacy export-build tool instead of &lt;a href=&#34;https://docs.docker.com/reference/cli/docker/buildx/history/export/&#34;&gt;&lt;code&gt;buildx history export&lt;/code&gt; command&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/TROUBLESHOOTING.md&#34;&gt;TROUBLESHOOTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Awesome! You can find information about contributing to this project in the &lt;a href=&#34;https://raw.githubusercontent.com/docker/build-push-action/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>