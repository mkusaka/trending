<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-09T01:50:04Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotnet/vscode-csharp</title>
    <updated>2023-06-09T01:50:04Z</updated>
    <id>tag:github.com,2023-06-09:/dotnet/vscode-csharp</id>
    <link href="https://github.com/dotnet/vscode-csharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official C# support for Visual Studio Code&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;C# for Visual Studio Code&lt;/h2&gt; &#xA;&lt;p&gt;C# is the feature-rich, language support for C# in VS Code. This extension is being updated to be powered by a new fully open-source Language Server Protocol (LSP) Host. To use the LSP-powered version, click on the “Switch to Pre-Release Version” or “Install Pre-Release” button above. To use the OmniSharp-powered version, click “Install Release Version” or continuing using the 1.x version you already have installed.&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the C# extension for Visual Studio Code! This extension provides the following features inside VS Code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight development tools for &lt;a href=&#34;https://dotnet.github.io&#34;&gt;.NET Core&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Great C# editing support, including Syntax Highlighting, IntelliSense, Go to Definition, Find All References, etc.&lt;/li&gt; &#xA; &lt;li&gt;Debugging support for .NET Core (CoreCLR). NOTE: Mono debugging is not supported. Desktop CLR debugging has &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/wiki/Desktop-.NET-Framework&#34;&gt;limited support&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for project.json and csproj projects on Windows, macOS and Linux.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The C# extension is powered by &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn&#34;&gt;OmniSharp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/6.0&#34;&gt;.NET 6 SDK&lt;/a&gt; or newer when &lt;code&gt;omnisharp.useModernNet&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (the default value).&lt;/li&gt; &#xA; &lt;li&gt;A Full Framework runtime and MSBuild tooling when &lt;code&gt;omnisharp.useModernNet&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: .NET Framework along with &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022&#34;&gt;MSBuild Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MacOS/Linux: &lt;a href=&#34;https://www.mono-project.com/download/preview/&#34;&gt;Mono with MSBuild&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Started Writing C# in VS Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/languages/csharp&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://channel9.msdn.com/Blogs/dotnet/Get-started-VSCode-Csharp-NET-Core-Windows&#34;&gt;Video Tutorial compiling with .NET Core&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Announcements&lt;/h2&gt; &#xA;&lt;h3&gt;The C# extension no longer ships with an included Mono &amp;amp; MSBuild Tools&lt;/h3&gt; &#xA;&lt;p&gt;.NET Framework builds of OmniSharp no longer ship with Mono or the MSBuild tooling (See announcement &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/issues/2339&#34;&gt;omnisharp-roslyn#2339&lt;/a&gt;). To ensure that the C# extension remains usable out of the box for .NET SDK projects, we have changed the default value of &lt;code&gt;omnisharp.useModernNet&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you still need Unity or .NET Framework support, you can set &lt;code&gt;omnisharp.useModernNet&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your VS Code settings and restart OmniSharp. Please see the &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode#requirements&#34;&gt;Requirements&lt;/a&gt; section above to ensure necessary tooling is installed.&lt;/p&gt; &#xA;&lt;p&gt;See issue &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues/5120&#34;&gt;#5120&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.9&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Readme updates (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5705&#34;&gt;#5705&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.8&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update Razor to 7.0.0-preview.23258.1 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5672&#34;&gt;#5672&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix issue with Razor attribute hover and Go to Definition (PR: &lt;a href=&#34;https://github.com/dotnet/razor/pull/8653&#34;&gt;#8653&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Fix issue with Razor formatting (PR: &lt;a href=&#34;https://github.com/dotnet/razor/pull/8669&#34;&gt;#8669&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Combine test compile step into normal compile (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5666&#34;&gt;#5666&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.7&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update Razor to 7.0.0-preview.23224.3 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5660&#34;&gt;#5660&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix issue with Razor diagnostics (PR: &lt;a href=&#34;https://github.com/dotnet/razor/pull/8622&#34;&gt;#8622&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.6&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update Razor to 7.0.0-preview.23213.4 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5655&#34;&gt;#5655&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix serialization issue with project.razor.json files (PR: &lt;a href=&#34;https://github.com/dotnet/razor/pull/8489&#34;&gt;#8489&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.5&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update Razor to 7.0.0-preview.23124.2 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5604&#34;&gt;#5604&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix colorization when nullable operators are present (&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5570&#34;&gt;#5570&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Add C#/HTML folding range support (&lt;a href=&#34;https://github.com/dotnet/razor/pull/8309&#34;&gt;razor#8309&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Formatting fixes (&lt;a href=&#34;https://github.com/dotnet/razor/pull/8318&#34;&gt;razor#8318&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update OmniSharp to 1.39.6 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5625&#34;&gt;#5625&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use new VS threading version to match with Razor (PR:&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/pull/2518&#34;&gt;#2518&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update OmniSharp to 1.39.5 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5618&#34;&gt;#5618&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Update to Roslyn &lt;code&gt;4.6.0-3.23153.5&lt;/code&gt; (PR:&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/pull/2511&#34;&gt;#2511&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Report to the client if the project being loaded is sdk style (PR:&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/pull/2502&#34;&gt;#2502&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automatically trust ASP.NET Core HTTPS development certificate (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5589&#34;&gt;#5589&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Improve outline to be less verbose (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5536&#34;&gt;#5536&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Update Razor TextMate grammar (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5570&#34;&gt;#5570&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.4&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update OmniSharp to 1.39.4 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5544&#34;&gt;#5544&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disable snippets in sync completion (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/pull/2497&#34;&gt;#2497&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.3&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update Razor to 7.0.0-preview.23067.5 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5543&#34;&gt;#5543&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enables support for arm64&lt;/li&gt; &#xA;   &lt;li&gt;Adds document color and color presentation features&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update Roslyn to 4.5.0-2.22527.10 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/pull/2486&#34;&gt;#2486&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Update dotnet-script dependencies to 1.4.0 (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/pull/2477&#34;&gt;#2477&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Register the LanguageServerLogger only once (PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn/pull/2473&#34;&gt;#2473&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fix extension not finding mono. (&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues/5454&#34;&gt;#5454&lt;/a&gt;, PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5484&#34;&gt;#5484&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Update debugger to 1.25.3. (&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues/5460&#34;&gt;#5460&lt;/a&gt;, PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5489&#34;&gt;#5489&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fix missing fix all commands. (&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues/5474&#34;&gt;#5474&lt;/a&gt;, PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5475&#34;&gt;#5475&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fix failure to parse sdk version and sdk path. (&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues/2412&#34;&gt;#2412&lt;/a&gt;, PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5459&#34;&gt;#5459&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Handle custom OmniSharp launch paths. (&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues/5449&#34;&gt;#5449&lt;/a&gt;, PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5456&#34;&gt;#5456&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 1.25.2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix the MSBuild version check on Unix and Linux platforms. (&lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues/5443&#34;&gt;#5443&lt;/a&gt;, PR: &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/pull/5444&#34;&gt;#5444&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emmet support in Razor files&lt;/h3&gt; &#xA;&lt;p&gt;To enable emmet support, add the following to your settings.json:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;emmet.includeLanguages&#34;: {&#xA;    &#34;aspnetcorerazor&#34;: &#34;html&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Operating Systems for Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the C# debugger officially supports the following operating systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X64 operating systems: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows 7 SP1 and newer&lt;/li&gt; &#xA;   &lt;li&gt;macOS 10.12 (Sierra) and newer&lt;/li&gt; &#xA;   &lt;li&gt;Linux: see &lt;a href=&#34;https://github.com/dotnet/core/raw/master/release-notes/2.2/2.2-supported-os.md#linux&#34;&gt;.NET Core documentation&lt;/a&gt; for the list of supported distributions. Note that other Linux distributions will likely work as well as long as they include glibc and OpenSSL.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ARM operating systems: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux is supported as a remote debugging target&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Found a Bug?&lt;/h3&gt; &#xA;&lt;p&gt;To file a new issue to include all the related config information directly from vscode by entering the command pallette with &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; (&lt;kbd&gt;Cmd&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;P&lt;/kbd&gt; on macOS) and running &lt;code&gt;CSharp: Report an issue&lt;/code&gt; command. This will open a browser window with all the necessary information related to the installed extensions, dotnet version, mono version, etc. Enter all the remaining information and hit submit. More information can be found on the &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/wiki/Reporting-Issues&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you could visit &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/issues&#34;&gt;https://github.com/OmniSharp/omnisharp-vscode/issues&lt;/a&gt; and file a new one.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;First install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js (8.11.1 or later)&lt;/li&gt; &#xA; &lt;li&gt;Npm (5.6.0 or later)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To &lt;strong&gt;run and develop&lt;/strong&gt; do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm ci&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run compile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open in Visual Studio Code (&lt;code&gt;code .&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Optional:&lt;/em&gt; run &lt;code&gt;npm run watch&lt;/code&gt;, make code changes&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to debug&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To &lt;strong&gt;test&lt;/strong&gt; do the following: &lt;code&gt;npm run test&lt;/code&gt; or &lt;kbd&gt;F5&lt;/kbd&gt; in VS Code with the &#34;Launch Tests&#34; debug configuration.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright © .NET Foundation, and contributors.&lt;/p&gt; &#xA;&lt;p&gt;The Microsoft C# extension is subject to &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/vscode-csharp/main/RuntimeLicenses/license.txt&#34;&gt;these license terms&lt;/a&gt;. The source code to this extension is available on &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode&#34;&gt;https://github.com/OmniSharp/omnisharp-vscode&lt;/a&gt; and licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/vscode-csharp/main/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;http://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information see the &lt;a href=&#34;http://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution License Agreement&lt;/h2&gt; &#xA;&lt;p&gt;By signing the &lt;a href=&#34;https://cla.dotnetfoundation.org/OmniSharp/omnisharp-roslyn&#34;&gt;CLA&lt;/a&gt;, the community is free to use your contribution to &lt;a href=&#34;http://www.dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt; projects.&lt;/p&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;This project is supported by the &lt;a href=&#34;http://www.dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vendure-ecommerce/vendure</title>
    <updated>2023-06-09T01:50:04Z</updated>
    <id>tag:github.com,2023-06-09:/vendure-ecommerce/vendure</id>
    <link href="https://github.com/vendure-ecommerce/vendure" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A headless GraphQL ecommerce framework for the modern web&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vendure&lt;/h1&gt; &#xA;&lt;p&gt;An open-source headless commerce platform built on &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt; with &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;, &lt;a href=&#34;https://nestjs.com/&#34;&gt;Nest&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;, with a focus on developer productivity and ease of customization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vendure-ecommerce/vendure/actions&#34;&gt;&lt;img src=&#34;https://github.com/vendure-ecommerce/vendure/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/vendure-ecommerce/vendure/workflows/Publish%20&amp;amp;%20Install/badge.svg?sanitize=true&#34; alt=&#34;Publish &amp;amp; Install&#34;&gt; &lt;a href=&#34;https://lernajs.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg?sanitize=true&#34; alt=&#34;lerna&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.vendure.io/&#34;&gt;www.vendure.io&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.vendure.io/getting-started/&#34;&gt;Getting Started&lt;/a&gt;: Get Vendure up and running locally in a matter of minutes with a single command&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://demo.vendure.io/&#34;&gt;Live Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vendure.io/community&#34;&gt;Vendure Discord&lt;/a&gt; Join us on Discord for support and answers to your questions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt; - The latest stable release, currently the 2.x series.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minor&lt;/code&gt; - The next patch release, including new features&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;major&lt;/code&gt; - The next major release (v3.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1&lt;/code&gt; - The 1.x series, which is no longer actively developed but may still receive critical fixes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;This project is a monorepo managed with &lt;a href=&#34;https://github.com/lerna/lerna&#34;&gt;Lerna&lt;/a&gt;. Several npm packages are published from this repo, which can be found in the &lt;code&gt;packages/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vendure/&#xA;├── docs/           # Documentation source&#xA;├── e2e-common/     # Shared config for package e2e tests&#xA;├── packages/       # Source for the Vendure server, admin-ui &amp;amp; plugin packages&#xA;├── scripts/&#xA;    ├── changelog/  # Scripts used to generate the changelog based on the git history&#xA;    ├── codegen/    # Scripts used to generate TypeScript code from the GraphQL APIs&#xA;    ├── docs/       # Scripts used to generate documentation markdown from the source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The following instructions are for those who want to develop the Vendure core framework or plugins (e.g. if you intend to make a pull request). For instructions on how to build a project &lt;em&gt;using&lt;/em&gt; Vendure, please see the &lt;a href=&#34;https://www.vendure.io/docs/getting-started/&#34;&gt;Getting Started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1. Install top-level dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The root directory has a &lt;code&gt;package.json&lt;/code&gt; which contains build-related dependencies for tasks including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Building &amp;amp; deploying the docs&lt;/li&gt; &#xA; &lt;li&gt;Generating TypeScript types from the GraphQL schema&lt;/li&gt; &#xA; &lt;li&gt;Linting, formatting &amp;amp; testing tasks to run on git commit &amp;amp; push&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: When you do &lt;code&gt;yarn&lt;/code&gt; for the first time, you will need to manually create the &lt;code&gt;package&lt;/code&gt; folder under &lt;a href=&#34;https://raw.githubusercontent.com/vendure-ecommerce/vendure/master/packages/admin-ui&#34;&gt;/packages/admin-ui&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2. Bootstrap the packages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn bootstrap&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This runs the Lerna &#34;bootstrap&#34; command, which cross-links monorepo dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;3. Build all packages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Packages must be built (i.e. TypeScript compiled, admin ui app built, certain assets copied etc.) before being used.&lt;/p&gt; &#xA;&lt;p&gt;Note that this can take a few minutes.&lt;/p&gt; &#xA;&lt;h3&gt;4. Set up the server&lt;/h3&gt; &#xA;&lt;p&gt;The server requires an SQL database to be available. The simplest option is to use SQLite, but if you have Docker available you can use the &lt;a href=&#34;https://raw.githubusercontent.com/vendure-ecommerce/vendure/master/packages/dev-server/docker-compose.yml&#34;&gt;dev-server docker-compose file&lt;/a&gt; which will start up both MariaDB and Postgres as well as their GUI management tools.&lt;/p&gt; &#xA;&lt;p&gt;Vendure uses &lt;a href=&#34;http://typeorm.io&#34;&gt;TypeORM&lt;/a&gt;, and officially supports &lt;strong&gt;MySQL&lt;/strong&gt;, &lt;strong&gt;PostgreSQL&lt;/strong&gt; and &lt;strong&gt;SQLite&lt;/strong&gt;, though other TypeORM-supported databases may work.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure the &lt;a href=&#34;https://raw.githubusercontent.com/vendure-ecommerce/vendure/master/packages/dev-server/dev-config.ts&#34;&gt;dev config&lt;/a&gt;, making sure the connection settings in the &lt;code&gt;getDbConfig()&lt;/code&gt; function are correct for the database type you will be using.&lt;/li&gt; &#xA; &lt;li&gt;Create the database using your DB admin tool of choice (e.g. phpMyAdmin if you are using the docker image suggested above). Name it according to the &lt;code&gt;getDbConfig()&lt;/code&gt; settings. If you are using SQLite, you can skip this step.&lt;/li&gt; &#xA; &lt;li&gt;Populate mock data: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd packages/dev-server&#xA; DB=&amp;lt;mysql|postgres|sqlite&amp;gt; yarn populate&#xA;&lt;/code&gt;&lt;/pre&gt; If you do not specify the &lt;code&gt;DB&lt;/code&gt; variable, it will default to &#34;mysql&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;5. Run the dev server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd packages/dev-server&#xA;DB=&amp;lt;mysql|postgres|sqlite&amp;gt; yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are in the root package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DB=&amp;lt;mysql|postgres|sqlite&amp;gt; yarn dev-server:start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not specify the &lt;code&gt;DB&lt;/code&gt; argument, it will default to &#34;mysql&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Testing admin ui changes locally&lt;/h3&gt; &#xA;&lt;p&gt;If you are making changes to the admin ui, you need to start the admin ui independent from the dev-server:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd packages/admin-ui&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;http://localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt; and log in with &#34;superadmin&#34;, &#34;superadmin&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will auto restart when you make changes to the admin ui. You don&#39;t need this step when you just use the admin ui just to test backend changes.&lt;/p&gt; &#xA;&lt;h3&gt;Testing your changes locally&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to test changes to the &lt;code&gt;payments-plugin&lt;/code&gt; package locally, but it will also work for other packages.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open 2 terminal windows:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Terminal 1 for watching and compiling the changes of the package you are developing&lt;/li&gt; &#xA; &lt;li&gt;Terminal 2 for running the dev-server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Terminal 1&#xA;cd packages/payments-plugin&#xA;yarn watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If you are developing changes for the &lt;code&gt;core&lt;/code&gt;package, you also need to watch the &lt;code&gt;common&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Terminal 1&#xA;# Root of the project&#xA;yarn watch:core-common&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After the changes in your package are compiled you have to stop and restart the dev-server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Terminal 2&#xA;cd packages/dev-server&#xA;DB=sqlite yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;The dev-server will now have your local changes from the changed package.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Lerna links to the &lt;code&gt;dist&lt;/code&gt; folder of the packages, so you &lt;strong&gt;don&#39;t&lt;/strong&gt; need to rerun &#39;yarn bootstrap&#39;&lt;/p&gt; &#xA;&lt;h3&gt;Code generation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotansimha/graphql-code-generator&#34;&gt;graphql-code-generator&lt;/a&gt; is used to automatically create TypeScript interfaces for all GraphQL server operations and admin ui queries. These generated interfaces are used in both the admin ui and the server.&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;yarn codegen&lt;/code&gt; will generate the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vendure-ecommerce/vendure/master/packages/common/src/generated-types.ts&#34;&gt;&lt;code&gt;packages/common/src/generated-types.ts&lt;/code&gt;&lt;/a&gt;: Types, Inputs &amp;amp; resolver args relating to the Admin API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vendure-ecommerce/vendure/master/packages/common/src/generated-shop-types.ts&#34;&gt;&lt;code&gt;packages/common/src/generated-shop-types.ts&lt;/code&gt;&lt;/a&gt;: Types, Inputs &amp;amp; resolver args relating to the Shop API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vendure-ecommerce/vendure/master/packages/admin-ui/src/lib/core/src/common/generated-types.ts&#34;&gt;&lt;code&gt;packages/admin-ui/src/lib/core/src/common/generated-types.ts&lt;/code&gt;&lt;/a&gt;: Types &amp;amp; operations relating to the admin-ui queries &amp;amp; mutations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vendure-ecommerce/vendure/master/packages/admin-ui/src/lib/core/src/common/introspection-result.ts&#34;&gt;&lt;code&gt;packages/admin-ui/src/lib/core/src/common/introspection-result.ts&lt;/code&gt;&lt;/a&gt;: Used by the Apollo Client &lt;a href=&#34;https://www.apollographql.com/docs/react/data/fragments/#fragments-on-unions-and-interfaces&#34;&gt;&lt;code&gt;IntrospectionFragmentMatcher&lt;/code&gt;&lt;/a&gt; to correctly handle fragments in the Admin UI.&lt;/li&gt; &#xA; &lt;li&gt;Also generates types used in e2e tests in those packages which feature e2e tests (core, elasticsearch-plugin, asset-server-plugin etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;h4&gt;Server Unit Tests&lt;/h4&gt; &#xA;&lt;p&gt;The core and several other packages have unit tests which are can be run all together by running &lt;code&gt;yarn test&lt;/code&gt; from the root directory, or individually by running it from the package directory.&lt;/p&gt; &#xA;&lt;p&gt;Unit tests are co-located with the files which they test, and have the suffix &lt;code&gt;.spec.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;End-to-end Tests&lt;/h4&gt; &#xA;&lt;p&gt;Certain packages have e2e tests, which are located at &lt;code&gt;/packages/&amp;lt;name&amp;gt;/e2e/&lt;/code&gt;. All e2e tests can be run by running &lt;code&gt;yarn e2e&lt;/code&gt; from the root directory, or individually by running it from the package directory.&lt;/p&gt; &#xA;&lt;p&gt;e2e tests use the &lt;code&gt;@vendure/testing&lt;/code&gt; package. For details of how the setup works, see the &lt;a href=&#34;https://www.vendure.io/docs/developer-guide/testing/&#34;&gt;Testing docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When &lt;strong&gt;debugging e2e tests&lt;/strong&gt;, set an environment variable &lt;code&gt;E2E_DEBUG=true&lt;/code&gt; which will increase the global Jest timeout and allow you to step through the e2e tests without the tests automatically failing due to timeout.&lt;/p&gt; &#xA;&lt;h3&gt;Release Process&lt;/h3&gt; &#xA;&lt;p&gt;All packages in this repo are released at every version change (using &lt;a href=&#34;https://github.com/lerna/lerna#fixedlocked-mode-default&#34;&gt;Lerna&#39;s fixed mode&lt;/a&gt;). This simplifies both the development (tracking multiple disparate versions is tough) and also the developer experience for users of the framework (it is simple to see that all packages are up-to-date and compatible).&lt;/p&gt; &#xA;&lt;p&gt;To make a release:&lt;/p&gt; &#xA;&lt;h5&gt;1. &lt;code&gt;yarn publish-release&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;It will run &lt;code&gt;lerna publish&lt;/code&gt; which will prompt for which version to update to. Although we are using &lt;a href=&#34;https://www.conventionalcommits.org&#34;&gt;conventional commits&lt;/a&gt;, the version is not automatically being calculated from the commit messages. Therefore the next version should be manually selected.&lt;/p&gt; &#xA;&lt;p&gt;Next it will build all packages to ensure the distributed files are up to date.&lt;/p&gt; &#xA;&lt;p&gt;Finally the command will create changelog entries for this release.&lt;/p&gt; &#xA;&lt;h5&gt;2. &lt;code&gt;git push origin master --follow-tags&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The reason we do not rely on Lerna to push the release to Git is that this repo has a lengthy pre-push hook which runs all tests and builds the admin ui. This long wait then invalidates the npm OTP and the publish will fail. So the solution is to publish first and then push.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>baptisteArno/typebot.io</title>
    <updated>2023-06-09T01:50:04Z</updated>
    <id>tag:github.com,2023-06-09:/baptisteArno/typebot.io</id>
    <link href="https://github.com/baptisteArno/typebot.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💬 Typebot is a powerful chatbot builder that you can self-host.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;a href=&#34;https://typebot.io/#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/baptisteArno/typebot.io/main/.github/images/readme-illustration-light.png&#34; alt=&#34;Typebot illustration&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://typebot.io/#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/baptisteArno/typebot.io/main/.github/images/readme-illustration-dark.png&#34; alt=&#34;Typebot illustration&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/16015833/168876388-0310678d-080b-4eca-8633-e5cc4d7bd5d1.mp4&#34;&gt;https://user-images.githubusercontent.com/16015833/168876388-0310678d-080b-4eca-8633-e5cc4d7bd5d1.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Typebot is an open-source alternative to Landbot. It allows you to create conversational apps/forms (Lead qualification, Product launch, User onboarding, Customer support), embed them anywhere on your web/mobile apps, and collect results in real-time.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text, image, video bubble messages&lt;/li&gt; &#xA; &lt;li&gt;Text, URL, email, phone number, date... input fields&lt;/li&gt; &#xA; &lt;li&gt;Native integrations including Google Sheets, Webhooks, Send email (more to come)&lt;/li&gt; &#xA; &lt;li&gt;Conditional branching, URL redirections&lt;/li&gt; &#xA; &lt;li&gt;Beautiful animations&lt;/li&gt; &#xA; &lt;li&gt;Theme is 100% customizable&lt;/li&gt; &#xA; &lt;li&gt;Embed as a container, popup, or chat bubble easily with the native JS library&lt;/li&gt; &#xA; &lt;li&gt;In-depth analytics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more info, visit the &lt;a href=&#34;https://www.typebot.io&#34;&gt;landing page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stay up-to-date&lt;/h2&gt; &#xA;&lt;p&gt;Lots of new features are being implemented on a day-to-day basis. Make sure to hit the &lt;strong&gt;Star&lt;/strong&gt; button and watch &lt;strong&gt;Releases&lt;/strong&gt; to be notified of future features.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/baptisteArno/typebot.io/main/.github/images/star-project.gif&#34; alt=&#34;Typebot illustration&#34; style=&#34;border-radius: 10px&#34; width=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Getting started with Typebot&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started with Typebot is with &lt;a href=&#34;https://app.typebot.io&#34;&gt;the official managed service in the Cloud&lt;/a&gt;. You&#39;ll have high availability, backups, security, and maintenance all managed for you by me, &lt;a href=&#34;https://twitter.com/baptisteArno&#34;&gt;Baptiste, Typebot&#39;s founder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The cloud version can save a substantial amount of developer time and resources. For most sites this ends up being the best value option and the revenue goes to funding the maintenance and further development of Typebot. So you’ll be supporting open source software and getting a great service! 💙&lt;/p&gt; &#xA;&lt;h2&gt;Self-hosting&lt;/h2&gt; &#xA;&lt;p&gt;Typebot is fully open source and we allow you to self-host your own version as long as you respect the &lt;a href=&#34;https://raw.githubusercontent.com/baptisteArno/typebot.io/main/#license&#34;&gt;License&lt;/a&gt;. Your version would be the same product as Typebot Cloud. There is no limitations in terms of available features.&lt;/p&gt; &#xA;&lt;p&gt;The main difference between the two is that with the self-hosted version you have to install, host and manage yourself on your own infrastructure while the cloud version we manage everything for your ease and convenience. Here&#39;s the overview of all the differences:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://app.typebot.io&#34;&gt;Typebot Cloud&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Self-Hosting&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hosting&lt;/td&gt; &#xA;   &lt;td&gt;Easy and convenient. It takes 1 minute to start building your bots and share them with a worldwide high availability, backups, security and maintenance all done for you by me, &lt;a href=&#34;https://twitter.com/baptisteArno&#34;&gt;Baptiste, Typebot&#39;s founder&lt;/a&gt;. I manage everything so you don’t have to worry about anything and can focus on creating great bot experiences.&lt;/td&gt; &#xA;   &lt;td&gt;You do it all yourself. You need to get a server and you need to manage your infrastructure. You are responsible for installation, maintenance, upgrades, server capacity, uptime, backup, security, stability, consistency, loading time and so on.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Storage&lt;/td&gt; &#xA;   &lt;td&gt;All visitor data is exclusively processed on EU-owned cloud infrastructure. This ensures that your bots data processing complies with GDPR.&lt;/td&gt; &#xA;   &lt;td&gt;You have full control and can host your instance on any server in any country that you wish. Host it on a server in your basement or host it with any cloud provider wherever you want.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Costs&lt;/td&gt; &#xA;   &lt;td&gt;I charge a subscription fee. Whether you&#39;re a solo business owner, a growing startup or a large company, Typebot is here to help you build high-performing chat forms for the right price. Pay for as little or as much usage as you need.&lt;/td&gt; &#xA;   &lt;td&gt;You need to pay for your server, your database, your S3 storage, backups and whatever other cost there is associated with running the infrastructure. You never have to pay any fees to us.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Interested in self-hosting Typebot on your server? Take a look at the &lt;a href=&#34;https://docs.typebot.io/self-hosting&#34;&gt;self-hosting installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Local setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/baptisteArno/typebot.io.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd typebot.io&#xA;pnpm i&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up environment variables&lt;/p&gt; &lt;p&gt;Copy &lt;code&gt;apps/builder/.env.local.example&lt;/code&gt; to &lt;code&gt;apps/builder/.env.local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Copy &lt;code&gt;apps/viewer/.env.local.example&lt;/code&gt; to &lt;code&gt;apps/viewer/.env.local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Copy &lt;code&gt;packages/prisma/.env.example&lt;/code&gt; to &lt;code&gt;packages/prisma/.env&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Check out the &lt;a href=&#34;https://docs.typebot.io/self-hosting/configuration&#34;&gt;Configuration guide&lt;/a&gt; if you want to enable more options&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker&lt;/a&gt; running&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the builder and viewer&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Builder is available at &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Viewer is available at &lt;code&gt;http://localhost:3001&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Database inspector is available at &lt;code&gt;http://localhost:5555&lt;/code&gt;&lt;/p&gt; &lt;p&gt;By default, you can easily authenticate in the builder using the &#34;Github Sign In&#34; button. For other options, check out the &lt;a href=&#34;https://docs.typebot.io/self-hosting/configuration&#34;&gt;Configuration guide&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionnal) Start the landing page&lt;/p&gt; &lt;p&gt;Copy &lt;code&gt;apps/landing-page/.env.local.example&lt;/code&gt; to &lt;code&gt;apps/landing-page/.env.local&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd apps/landing-page&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionnal) Start the docs&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd apps/docs&#xA;pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Another great way to support Typebot is to contribute to the project. Head over to the &lt;a href=&#34;https://github.com/baptisteArno/typebot.io/raw/main/CONTRIBUTING.md&#34;&gt;Contribute guidelines&lt;/a&gt; to get started. 😍&lt;/p&gt; &#xA;&lt;h2&gt;Technology&lt;/h2&gt; &#xA;&lt;p&gt;Typebot is a Monorepo powered by &lt;a href=&#34;https://turborepo.org/&#34;&gt;Turborepo&lt;/a&gt;. It is composed of 2 main applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the builder, where you build your typebots&lt;/li&gt; &#xA; &lt;li&gt;the viewer, where your user answer the typebot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These apps are built with awesome web technologies including &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;Typescript&lt;/a&gt;, &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;, &lt;a href=&#34;https://www.prisma.io/&#34;&gt;Prisma&lt;/a&gt;, &lt;a href=&#34;https://chakra-ui.com/&#34;&gt;Chakra UI&lt;/a&gt;, &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Typebot is open-source under the GNU Affero General Public License Version 3 (AGPLv3). You can find it &lt;a href=&#34;https://raw.githubusercontent.com/baptisteArno/typebot.io/main/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the AGPL license is to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maximize user freedom and to encourage companies to contribute to open source.&lt;/li&gt; &#xA; &lt;li&gt;Prevent corporations from taking the code and using it as part of their closed-source proprietary products&lt;/li&gt; &#xA; &lt;li&gt;Prevent corporations from offering Typebot as a service without contributing to the open source project&lt;/li&gt; &#xA; &lt;li&gt;Prevent corporations from confusing people and making them think that the service they sell is in any shape or form approved by the original team&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are the 3 different possible use cases:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;You&#39;d like to self-host Typebot as-is without modifying the source code and you don&#39;t have the intention on commercializing your version of Typebot.&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;strong&gt;You can host and use Typebot without restrictions. Your contributions to improve Typebot and fix bugs are welcome. 💙&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;You&#39;d like to fork the project to build your own features on top of Typebot and you don&#39;t have the intention on commercializing your version of Typebot.&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;strong&gt;You need to open-source your modifications&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;You&#39;d like to commercialize your own version of Typebot&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;strong&gt;You need to open-source your modifications and after your users registration, they should see a prominent mention and link to the original project (&lt;a href=&#34;https://typebot.io&#34;&gt;https://typebot.io&lt;/a&gt;). You should clearly mention that you provide a modified version. It&#39;s a good place to explain your version advantages comparing to the original project.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>