<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-26T01:37:56Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>subsquid-quests/snapshot-squid</title>
    <updated>2023-10-26T01:37:56Z</updated>
    <id>tag:github.com,2023-10-26:/subsquid-quests/snapshot-squid</id>
    <link href="https://github.com/subsquid-quests/snapshot-squid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Migration of the Snapshot subgraph adapted for use a network launch quest&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;img src=&#34;https://uploads-ssl.webflow.com/63b5a9958fccedcf67d716ac/64662df3a5a568fd99e3600c_Squid_Pose_1_White-transparent-slim%201.png&#34; alt=&#34;Subsquid Logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;&lt;img src=&#34;https://docs.rs/leptos/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://subsquid.io&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://docs.subsquid.io/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/subsquid&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.subsquid.io/subsquid-network/&#34;&gt;Subsquid Network FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deploy a Snapshot squid&lt;/h1&gt; &#xA;&lt;p&gt;This is a quest to run a squid migrated from the &lt;a href=&#34;https://thegraph.com/hosted-service/subgraph/snapshot-labs/snapshot&#34;&gt;Snapshot subgraph&lt;/a&gt; by &lt;a href=&#34;https://github.com/0xNomind/snapshot-squid&#34;&gt;@0xNomind&lt;/a&gt;, one of the winners of the &lt;a href=&#34;https://github.com/subsquid-quests/snapshot-subgraph-migration&#34;&gt;migration quest&lt;/a&gt;. You can find the original repository &lt;a href=&#34;https://github.com/0xNomind/snapshot-squid&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is how to run the squid:&lt;/p&gt; &#xA;&lt;h3&gt;I. Install dependencies: Node.js, Docker, Git.&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Windows&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Enable &lt;a href=&#34;https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v&#34;&gt;Hyper-V&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/desktop/install/windows-install/&#34;&gt;Docker for Windows&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install NodeJS LTS using the &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;official installer&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;In all installs it is OK to leave all the options at their default values. You will need a terminal to complete this tutorial - &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL&lt;/a&gt; bash is the preferred option.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Mac&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/desktop/install/mac-install/&#34;&gt;Docker for Mac&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install Git using the &lt;a href=&#34;https://sourceforge.net/projects/git-osx-installer/&#34;&gt;installer&lt;/a&gt; or by &lt;a href=&#34;https://git-scm.com/download/mac&#34;&gt;other means&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Install NodeJS LTS using the &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;official installer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;We recommend configuring NodeJS to install global packages to a folder owned by an unprivileged account. Create the folder by running&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then configure NodeJS to use it&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make sure that the folder &lt;code&gt;~/global-node-packages/bin&lt;/code&gt; is in &lt;code&gt;PATH&lt;/code&gt;. That allows running globally installed NodeJS executables from any terminal. Here is a one-liner that detects your shell and takes care of setting &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;CURSHELL=`ps -hp $$ | awk &#39;{print $5}&#39;`; case `basename $CURSHELL` in &#39;bash&#39;) DEST=&#34;$HOME/.bash_profile&#34;;; &#39;zsh&#39;) DEST=&#34;$HOME/.zshenv&#34;;; esac; echo &#39;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; &#34;$DEST&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternatively you can add the following line to &lt;code&gt;~/.zshenv&lt;/code&gt; (if you are using zsh) or &lt;code&gt;~/.bash_profile&lt;/code&gt; (if you are using bash) manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Re-open the terminal to apply the changes.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;On Linux&lt;/summary&gt; &#xA; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/package-manager&#34;&gt;NodeJS (v16 or newer)&lt;/a&gt;, Git and Docker using your distro&#39;s package manager.&lt;/p&gt; &#xA; &lt;p&gt;We recommend configuring NodeJS to install global packages to a folder owned by an unprivileged account. Create the folder by running&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then configure NodeJS to use it&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix ~/global-node-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make sure that any executables globally installed by NodeJS are in &lt;code&gt;PATH&lt;/code&gt;. That allows running them from any terminal. Open the &lt;code&gt;~/.bashrc&lt;/code&gt; file in a text editor and add the following line at the end:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;export PATH=&#34;${HOME}/global-node-packages/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Re-open the terminal to apply the changes.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;II. Install Subsquid CLI&lt;/h3&gt; &#xA;&lt;p&gt;Open a terminal and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --global @subsquid/cli@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds the &lt;a href=&#34;https://raw.githubusercontent.com/subsquid-quests/snapshot-squid/master/squid-cli&#34;&gt;&lt;code&gt;sqd&lt;/code&gt; command&lt;/a&gt;. Verify that the installation was successful by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A healthy response should look similar to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@subsquid/cli/2.5.0 linux-x64 node-v20.5.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;III. Run the squid&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a terminal and run the following commands to create the squid and enter its folder:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd init my-snapshot-squid -t https://github.com/subsquid-quests/snapshot-squid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd my-snapshot-squid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can replace &lt;code&gt;my-snapshot-squid&lt;/code&gt; with any name you choose for your squid. If a squid with that name already exists in &lt;a href=&#34;https://docs.subsquid.io/deploy-squid/&#34;&gt;Aquarium&lt;/a&gt;, the first command will throw an error; if that happens simply think of another name and repeat the commands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Press &#34;Get Key&#34; button in the quest card to obtain the &lt;code&gt;snapshot.key&lt;/code&gt; key file. Save it to the &lt;code&gt;./query-gateway/keys&lt;/code&gt; subfolder of the squid folder. The file will be used by the query gateway container.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The template squid uses a PostgreSQL database and a query gateway. Start Docker containers that run these with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wait for about a minute before proceeding to the next step.&lt;/p&gt; &lt;p&gt;If you get an error message about &lt;code&gt;unknown shorthand flag: &#39;d&#39; in -d&lt;/code&gt;, that means that you&#39;re using an old version of &lt;code&gt;docker&lt;/code&gt; that does not support the &lt;code&gt;compose&lt;/code&gt; command yet. Update Docker or edit the &lt;code&gt;commands.json&lt;/code&gt; file as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;         &#34;up&#34;: {&#xA;         &#34;deps&#34;: [&#34;check-key&#34;],&#xA;         &#34;description&#34;: &#34;Start a PG database&#34;,&#xA;-        &#34;cmd&#34;: [&#34;docker&#34;, &#34;compose&#34;, &#34;up&#34;, &#34;-d&#34;]&#xA;+        &#34;cmd&#34;: [&#34;docker-compose&#34;, &#34;up&#34;, &#34;-d&#34;]&#xA;       },&#xA;       &#34;down&#34;: {&#xA;         &#34;description&#34;: &#34;Drop a PG database&#34;,&#xA;-        &#34;cmd&#34;: [&#34;docker&#34;, &#34;compose&#34;, &#34;down&#34;]&#xA;+        &#34;cmd&#34;: [&#34;docker-compose&#34;, &#34;down&#34;]&#xA;       },&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepare the squid for running by installing dependencies, building the source code and creating all the necessary database tables:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;sqd build&#xA;sqd migration:apply&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start your squid with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd run .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command should output lines like these:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[api] 23:33:48 WARN  sqd:graphql-server enabling dumb in-memory cache (size: 100mb, ttl: 1000ms, max-age: 1000ms)&#xA;[api] 23:33:48 INFO  sqd:graphql-server listening on port 4350&#xA;[processor] 23:33:49 INFO  sqd:processor processing blocks from 11000000&#xA;[processor] 23:33:49 INFO  sqd:processor using archive data source&#xA;[processor] 23:33:49 INFO  sqd:processor prometheus metrics are served at port 36935&#xA;[processor] 23:33:52 INFO  sqd:processor 11005159 / 18377705, rate: 1756 blocks/sec, mapping: 352 blocks/sec, 311 items/sec, eta: 1h 10m&#xA;[processor] 23:33:57 INFO  sqd:processor 11010199 / 18377705, rate: 1735 blocks/sec, mapping: 488 blocks/sec, 428 items/sec, eta: 1h 11m&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The squid should sync in about 1.5 hours. When it&#39;s done, stop it with Ctrl-C, then stop and remove the auxiliary containers with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqd down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Quest Info&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Skill Level&lt;/th&gt; &#xA;   &lt;th&gt;Time required (minutes)&lt;/th&gt; &#xA;   &lt;th&gt;Max Participants&lt;/th&gt; &#xA;   &lt;th&gt;Reward&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Squid Deployment&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{green}{\textsf{Simple}}$&lt;/td&gt; &#xA;   &lt;td&gt;~100&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;$\textcolor{red}{\textsf{750tSQD}}$&lt;/td&gt; &#xA;   &lt;td&gt;open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Acceptance critera&lt;/h1&gt; &#xA;&lt;p&gt;Sync this squid using the key from the quest card. The syncing progress is tracked by the amount of data the squid has retrieved from &lt;a href=&#34;https://docs.subsquid.io/subsquid-network&#34;&gt;Subsquid Network&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;About this squid&lt;/h1&gt; &#xA;&lt;p&gt;The Ethereum data ingester (&#34;processor&#34;) is located in &lt;code&gt;src/main.ts&lt;/code&gt;. It can be started with &lt;code&gt;sqd process&lt;/code&gt;. GraphQL server runs as a separate process started by &lt;code&gt;sqd serve&lt;/code&gt;. You can also use &lt;code&gt;sqd run&lt;/code&gt; to run all the services at once.&lt;/p&gt; &#xA;&lt;p&gt;The squid uses &lt;a href=&#34;https://docs.subsquid.io/subsquid-network&#34;&gt;Subsquid Network&lt;/a&gt; as its primary data source.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>anymaniax/orval</title>
    <updated>2023-10-26T01:37:56Z</updated>
    <id>tag:github.com,2023-10-26:/anymaniax/orval</id>
    <link href="https://github.com/anymaniax/orval" rel="alternate"></link>
    <summary type="html">&lt;p&gt;orval is able to generate client with appropriate type-signatures (TypeScript) from any valid OpenAPI v3 or Swagger v2 specification, either in yaml or json formats. 🍺&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/orval&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/orval.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/anymaniax/orval/actions/workflows/tests.yaml&#34;&gt;&lt;img src=&#34;https://github.com/anymaniax/orval/actions/workflows/tests.yaml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/anymaniax/orval/master/logo/orval-logo-horizontal.svg?raw=true&#34; width=&#34;500&#34; height=&#34;160&#34; alt=&#34;orval - Restfull Client Generator&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Visit &lt;a href=&#34;https://orval.dev&#34; target=&#34;_blank&#34;&gt;orval.dev&lt;/a&gt; for docs, guides, API and beer! &lt;/h1&gt; &#xA;&lt;p&gt;⚠️ Actively searching for contributors, if you want to help, please contact me on &lt;a href=&#34;https://discord.gg/6fC2sjDU7w&#34;&gt;discord&lt;/a&gt; ⚠️&lt;/p&gt; &#xA;&lt;h3&gt;Code Generation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;orval&lt;/code&gt; is able to generate client with appropriate type-signatures (TypeScript) from any valid OpenAPI v3 or Swagger v2 specification, either in &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;json&lt;/code&gt; formats.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Generate&lt;/code&gt;, &lt;code&gt;valid&lt;/code&gt;, &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;mock&lt;/code&gt; in your React, Vue, Svelte and Angular applications all with your OpenAPI specification.&lt;/p&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;p&gt;You can find below some samples&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anymaniax/orval/tree/master/samples/react-app&#34;&gt;react app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anymaniax/orval/tree/master/samples/react-query&#34;&gt;react query&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anymaniax/orval/tree/master/samples/svelte-query&#34;&gt;svelte query&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anymaniax/orval/tree/master/samples/vue-query&#34;&gt;vue query&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anymaniax/orval/tree/master/samples/react-app-with-swr&#34;&gt;react app with swr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anymaniax/orval/tree/master/samples/nx-fastify-react&#34;&gt;nx fastify react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anymaniax/orval/tree/master/samples/angular-app&#34;&gt;angular app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>electron-vite/electron-vite-vue</title>
    <updated>2023-10-26T01:37:56Z</updated>
    <id>tag:github.com,2023-10-26:/electron-vite/electron-vite-vue</id>
    <link href="https://github.com/electron-vite/electron-vite-vue" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🥳 Really simple Electron + Vite + Vue boilerplate.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;electron-vite-vue&lt;/h1&gt; &#xA;&lt;p&gt;🥳 Really simple &lt;code&gt;Electron&lt;/code&gt; + &lt;code&gt;Vue&lt;/code&gt; + &lt;code&gt;Vite&lt;/code&gt; boilerplate.&lt;/p&gt; &#xA;&lt;!-- [![awesome-vite](https://awesome.re/mentioned-badge.svg)](https://github.com/vitejs/awesome-vite) --&gt; &#xA;&lt;!-- [![Netlify Status](https://api.netlify.com/api/v1/badges/ae3863e3-1aec-4eb1-8f9f-1890af56929d/deploy-status)](https://app.netlify.com/sites/electron-vite/deploys) --&gt; &#xA;&lt;!-- [![GitHub license](https://img.shields.io/github/license/caoxiemeihao/electron-vite-vue)](https://github.com/electron-vite/electron-vite-vue/blob/main/LICENSE) --&gt; &#xA;&lt;!-- [![GitHub stars](https://img.shields.io/github/stars/caoxiemeihao/electron-vite-vue?color=fa6470)](https://github.com/electron-vite/electron-vite-vue) --&gt; &#xA;&lt;!-- [![GitHub forks](https://img.shields.io/github/forks/caoxiemeihao/electron-vite-vue)](https://github.com/electron-vite/electron-vite-vue) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/electron-vite/electron-vite-vue/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/electron-vite/electron-vite-vue/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/sRqjYpEAUK&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-blue?logo=discord&#34; alt=&#34;GitHub Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;📦 Out of the box&lt;br&gt; 🎯 Based on the official &lt;a href=&#34;https://github.com/vitejs/vite/tree/main/packages/create-vite/template-vue-ts&#34;&gt;template-vue-ts&lt;/a&gt;, less invasive&lt;br&gt; 🌱 Extensible, really simple directory structure&lt;br&gt; 💪 Support using Node.js API in Electron-Renderer&lt;br&gt; 🔩 Support C/C++ native addons&lt;br&gt; 🖥 It&#39;s easy to implement multiple windows&lt;/p&gt; &#xA;&lt;h2&gt;Quick Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# clone the project&#xA;git clone https://github.com/electron-vite/electron-vite-vue.git&#xA;&#xA;# enter the project directory&#xA;cd electron-vite-vue&#xA;&#xA;# install dependency&#xA;npm install&#xA;&#xA;# develop&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/electron-vite/electron-vite-react/raw/main/electron-vite-react-debug.gif?raw=true&#34; alt=&#34;electron-vite-react-debug.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Directory&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+ ├─┬ electron&#xA;+ │ ├─┬ main&#xA;+ │ │ └── index.ts    entry of Electron-Main&#xA;+ │ └─┬ preload&#xA;+ │   └── index.ts    entry of Preload-Scripts&#xA;  ├─┬ src&#xA;  │ └── main.ts       entry of Electron-Renderer&#xA;  ├── index.html&#xA;  ├── package.json&#xA;  └── vite.config.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;## Be aware&#xA;&#xA;🚨 By default, this template integrates Node.js in the Renderer process. If you don&#39;t need it, you just remove the option below. [Because it will modify the default config of Vite](https://github.com/electron-vite/vite-plugin-electron-renderer#config-presets-opinionated).&#xA;&#xA;```diff&#xA;# vite.config.ts&#xA;&#xA;export default {&#xA;  plugins: [&#xA;-   // Use Node.js API in the Renderer-process&#xA;-   renderer({&#xA;-     nodeIntegration: true,&#xA;-   }),&#xA;  ],&#xA;}&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/electron-vite/vite-plugin-electron-renderer#dependency-pre-bundling&#34;&gt;C/C++ addons, Node.js modules - Pre-Bundling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/electron-vite/vite-plugin-electron-renderer#dependencies-vs-devdependencies&#34;&gt;dependencies vs devDependencies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>