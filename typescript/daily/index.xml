<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-04T01:40:30Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yqcs/prismx</title>
    <updated>2024-01-04T01:40:30Z</updated>
    <id>tag:github.com,2024-01-04:/yqcs/prismx</id>
    <link href="https://github.com/yqcs/prismx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;:: 棱镜 X · 一体化的轻量型跨平台渗透系统&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yqcs/prismx/main/public/static/scan.png&#34; alt=&#34;pc_home&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h1&gt;:: 棱镜 X · 一体化的轻量型跨平台渗透系统&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://prismx.io/guide&#34; target=&#34;_blank&#34;&gt;使用文档&lt;/a&gt; · &lt;a href=&#34;&#34;&gt;主机管理&lt;/a&gt; · &lt;a href=&#34;&#34;&gt;风险扫描&lt;/a&gt; · &lt;a href=&#34;&#34;&gt;漏洞利用&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;启动&lt;/h2&gt; &#xA;&lt;h3&gt;· WEB 系统&lt;/h3&gt; &#xA;&lt;p&gt;下载对应 OS ARCH 的软件包 &lt;a href=&#34;https://github.com/yqcs/prismx/releases/&#34;&gt;Prism X releases&lt;/a&gt; ，解压之后赋予可执行权限之后直接运行即可。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yqcs/prismx/main/public/static/pc_home.jpg&#34; alt=&#34;pc_home&#34;&gt; &#xA;&lt;p&gt;Linux Amd64 运行示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://github.com/yqcs/prismx/releases/download/{version}/prismx_linux_amd64.zip&#xA;$ unzip prismx_linux_amd64.zip&#xA;$ cd prismx_linux_amd64&#xA;$ chmod +x prismx&#xA;$ ./prismx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;系统默认账号：&lt;code&gt;prismx/prismx@passw0rd&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;· 界面预览&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yqcs/prismx/main/public/static/view.jpg&#34; alt=&#34;pc_home&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;QQ 安全研究群：&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=azWZhmSy&#34;&gt;点击加入：528118163&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;加群 / 联系（左） | 公众号：遮天实验室（右）&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yqcs/prismx/main/public/static/wx.jpg&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yqcs/prismx/main/public/static/wx_qrcode.jpg&#34; width=&#34;200&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tech-creative-club/disaster-posts</title>
    <updated>2024-01-04T01:40:30Z</updated>
    <id>tag:github.com,2024-01-04:/tech-creative-club/disaster-posts</id>
    <link href="https://github.com/tech-creative-club/disaster-posts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;JP | &lt;a href=&#34;https://raw.githubusercontent.com/tech-creative-club/disaster-posts/main/README.en.md&#34;&gt;EN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://flat.badgen.net/discord/members/SAFv8YkSFm&#34; alt=&#34;Discord Member Count&#34;&gt; &lt;img src=&#34;https://flat.badgen.net/github/stars/tech-creative-club/disaster-posts&#34; alt=&#34;Github Star Count&#34;&gt; &lt;img src=&#34;https://flat.badgen.net/github/commits/tech-creative-club/disaster-posts&#34; alt=&#34;Github Commit Count&#34;&gt; &lt;img src=&#34;https://flat.badgen.net/github/last-commit/tech-creative-club/disaster-posts&#34; alt=&#34;Github Last Commit&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Disaster Posts （仮）&lt;/h1&gt; &#xA;&lt;h2&gt;概要&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;このアプリは、災害時における情報共有を目的としたアプリです。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/invite/SAFv8YkSFm&#34;&gt;技創クラブ&lt;/a&gt; Discordサーバーでの開発を行っています。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;開発方針&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基本的にタスクはIssueベースで管理します&lt;/li&gt; &#xA; &lt;li&gt;作業開始前にIssueを作り、できればその作業が必要かどうか合意を取りましょう&lt;/li&gt; &#xA; &lt;li&gt;Issueにアサインして開発していただきます&lt;/li&gt; &#xA; &lt;li&gt;優先度はProjectsを参照してください&lt;/li&gt; &#xA; &lt;li&gt;議論したい内容が発生したら&lt;a href=&#34;https://github.com/tech-creative-club/disaster-posts/discussions&#34;&gt;Discussion&lt;/a&gt;を立ててください&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;開発環境&lt;/h2&gt; &#xA;&lt;h3&gt;フロントエンド&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mantine.dev/&#34;&gt;Mantine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;バックエンド&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/ecs/&#34;&gt;ECS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.jp/compose/toc.html&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;開発環境構築&lt;/h2&gt; &#xA;&lt;h3&gt;フロントエンド&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;このリポジトリをクローンする &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/tech-creative-club/disaster-posts&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;ディレクトリに移動する &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd disaster-posts&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;パッケージをインストールする &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;開発サーバーを起動する &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; にアクセスする&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;バックエンド&lt;/h3&gt; &#xA;&lt;p&gt;(準備中)&lt;/p&gt; &#xA;&lt;h2&gt;Issue&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;バグ&lt;/li&gt; &#xA; &lt;li&gt;要望&lt;/li&gt; &#xA; &lt;li&gt;改善案&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;があれば、&lt;a href=&#34;https://github.com/tech-creative-club/disaster-posts/issues&#34;&gt;Issue&lt;/a&gt;に投稿してください。&lt;/p&gt; &#xA;&lt;h2&gt;コントリビューター行動規範&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tech-creative-club/disaster-posts/main/CODE_OF_CONDUCT.md&#34;&gt;行動規範&lt;/a&gt;をお読みください。&lt;/p&gt; &#xA;&lt;h2&gt;デプロイ&lt;/h2&gt; &#xA;&lt;p&gt;(準備中)&lt;/p&gt; &#xA;&lt;h2&gt;ライセンス&lt;/h2&gt; &#xA;&lt;p&gt;(準備中)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tokenami/tokenami</title>
    <updated>2024-01-04T01:40:30Z</updated>
    <id>tag:github.com,2024-01-04:/tokenami/tokenami</id>
    <link href="https://github.com/tokenami/tokenami" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Atomic CSS in the style attribute. Type-safe static styles with theming, responsive variant support, and no bundler integration.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/jjenzz/pretty-cache-header/assets/175330/18df3dab-ba82-4fd6-a74b-ec1c4aecc4ab&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Tokenami&lt;/h3&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Atomic CSS in the style attribute. &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Type-safe static styles with theming, responsive variant support, and no bundler integration. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary align=&#34;center&#34;&gt;&lt;h2 id=&#34;user-content-why-another-css-library&#34;&gt;Why another CSS library?&lt;/h2&gt;&lt;/summary&gt; &#xA; &lt;p&gt;CSS-in-JS solutions that rely on style injection &lt;a href=&#34;https://github.com/reactwg/react-18/discussions/110&#34;&gt;won&#39;t be recommended by the React team&lt;/a&gt; going forward, and instead they suggest the following:&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Our preferred solution is to use&amp;nbsp;&lt;a href=&#34;https://github.com/reactwg/react-18/discussions/108&#34;&gt;&lt;code&gt;&amp;lt;link rel=&#34;stylesheet&#34;&amp;gt;&lt;/code&gt;&lt;/a&gt; for statically extracted styles and plain inline styles for dynamic values. E.g.&amp;nbsp;&lt;code&gt;&amp;lt;div style={{...}}&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;In other words—&lt;em&gt;write CSS like we used to&lt;/em&gt;. But what about the benefits that CSS-in-JS gave us?&lt;/p&gt; &#xA; &lt;p&gt;There are CSS-in-JS solutions that extract static rules from your template files into external &lt;code&gt;.css&lt;/code&gt; files, however, these approaches often require &lt;a href=&#34;https://vanilla-extract.style/documentation/integrations/next/&#34;&gt;bundler integration&lt;/a&gt; and come with &lt;a href=&#34;https://panda-css.com/docs/guides/dynamic-styling&#34;&gt;build-time limitations&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;The learning curve can be intimidating but developers invest regardless so they can have type errors and intellisense for their design system tokens as well as style deduping, critical path CSS, scoping, and composition.&lt;/p&gt; &#xA; &lt;p&gt;Tailwind CSS adopts a different strategy to achieve these goals:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;We can style inline to prototype quickly&lt;/li&gt; &#xA;  &lt;li&gt;Editor extensions for intellisense based on your theme&lt;/li&gt; &#xA;  &lt;li&gt;Statically generated styles with a simple CLI script, no bundler integration&lt;/li&gt; &#xA;  &lt;li&gt;Atomic CSS so styles have a cap on how large they can grow&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;On the flip side:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Removing values from your theme won&#39;t flag redundant references&lt;/li&gt; &#xA;  &lt;li&gt;We must memorise Tailwind&#39;s custom class names which spawns things like the &lt;a href=&#34;https://tailwindcomponents.com/cheatsheet/&#34;&gt;Tailwind Cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Specificity issues when composing unless we use third-party packages like &lt;a href=&#34;https://www.npmjs.com/package/tailwind-merge&#34;&gt;tailwind-merge&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Styling inline can be unpleasant to maintain, resulting in third-party packages like &lt;a href=&#34;https://cva.style/docs&#34;&gt;cva&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Classes must exist as &lt;a href=&#34;https://tailwindcss.com/docs/content-configuration#dynamic-class-names&#34;&gt;complete unbroken strings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Debugging in dev tools is tricky because styles are spread across atomic classes&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Introducing Tokenami&lt;/h3&gt; &#xA; &lt;p&gt;Tokenami aims to improve some of these areas by using CSS variables instead of CSS properties in the &lt;code&gt;style&lt;/code&gt; attribute, and bringing all necessary tools under one roof. It features:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Simple naming convention—use the CSS properties you already know, prefixed with double-dash&lt;/li&gt; &#xA;  &lt;li&gt;Smaller stylesheet made possible by atomic CSS variables&lt;/li&gt; &#xA;  &lt;li&gt;Config file for defining your theme&lt;/li&gt; &#xA;  &lt;li&gt;Feature-rich intellisense when authoring styles&lt;/li&gt; &#xA;  &lt;li&gt;Fully typed &lt;code&gt;style&lt;/code&gt; attribute for ad-hoc styles, including media queries and pseudo-classes/selectors&lt;/li&gt; &#xA;  &lt;li&gt;A tiny &lt;code&gt;css&lt;/code&gt; utility with variants, and responsive variants support&lt;/li&gt; &#xA;  &lt;li&gt;Seamless composition across component boundaries using the &lt;code&gt;css&lt;/code&gt; utility&lt;/li&gt; &#xA;  &lt;li&gt;Runtime style support e.g. &lt;code&gt;style={{ &#39;--color&#39;: props.color }}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Aliasable properties e.g. &lt;code&gt;style={{ &#39;--p&#39;: 4 }}&lt;/code&gt; for padding&lt;/li&gt; &#xA;  &lt;li&gt;Custom selector support enabling sibling or descendant selectors&lt;/li&gt; &#xA;  &lt;li&gt;Improved debugging experience in dev tools&lt;/li&gt; &#xA;  &lt;li&gt;Statically generated styles&lt;/li&gt; &#xA;  &lt;li&gt;No bundler integration&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Warning] This is a pre-alpha version of tokenami so there will be bugs and missing features. Please check the &lt;a href=&#34;https://github.com/tokenami/tokenami/issues&#34;&gt;existing issues&lt;/a&gt; for planned features/known bugs before creating new ones.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tokenami/tokenami/assets/175330/77070822-25af-4b06-a92a-965188ed3a62&#34;&gt;https://github.com/tokenami/tokenami/assets/175330/77070822-25af-4b06-a92a-965188ed3a62&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-configure-typescript&#34;&gt;Configure TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-start-the-cli-watch-script&#34;&gt;Start CLI watch script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-use-tokenami&#34;&gt;Use Tokenami&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-core-concepts&#34;&gt;Core concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-theming&#34;&gt;Theming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-styling&#34;&gt;Styling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-responsive-styles&#34;&gt;Responsive styles&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-css-utility&#34;&gt;CSS utility&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-contenty-installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-overrides&#34;&gt;Overrides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-advanced&#34;&gt;Advanced&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-selectors&#34;&gt;Selectors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-aliases&#34;&gt;Aliases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-mapping-properties-to-theme&#34;&gt;Mapping properties to theme&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-browserslist&#34;&gt;Browserslist&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-support&#34;&gt;Support&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-hmr-not-working-as-expected-in-remix&#34;&gt;HMR not working as expected in Remix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-efficiency-of-tokenamis-attribute-substring-selectors&#34;&gt;Efficiency of Tokenami&#39;s attribute substring selectors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-supported-frameworks&#34;&gt;Supported frameworks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Tokenami offers a CLI tool for generating static styles, and a TypeScript plugin to enhance the developer experience. An optional CSS utility is also provided and recommended when composing across component boundaries.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install and initialise using your package manager of choice. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @tokenami/dev @tokenami/ts-plugin -D&#xA;npx tokenami init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;Add Tokenami to &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;plugins&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt; or &lt;code&gt;jsconfig.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;include&#34;: [&#34;.tokenami/tokenami.env.d.ts&#34;, &#34;**/*.ts&#34;, &#34;**/*.tsx&#34;],&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;plugins&#34;: [{ &#34;name&#34;: &#34;@tokenami/ts-plugin&#34; }]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure your editor is configured to use the project&#39;s version of TypeScript. You can find instructions for various editors in their documentation, such as for VSCode &lt;a href=&#34;https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-the-workspace-version-of-typescript&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Start the CLI watch script&lt;/h3&gt; &#xA;&lt;p&gt;Run the CLI tool to scan your template files for tokenami properties and build your CSS. This would usually exist as a script in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx tokenami --output ./public/styles.css --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to adjust the output path to your desired location for styles. It will use &lt;code&gt;./public/tokenami.css&lt;/code&gt; by default if omitted.&lt;/p&gt; &#xA;&lt;h3&gt;Use Tokenami&lt;/h3&gt; &#xA;&lt;p&gt;Reference your output CSS file in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your document and start styling inline with Tokenami properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;h1 style={{ &#39;--margin-top&#39;: 0, &#39;--margin-bottom&#39;: 5 }}&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Core concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;Tokenami relies on your theme to provide design system constraints. Since there&#39;s no predefined theme, you need to add your own to the &lt;code&gt;.tokenami/tokenami.config&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;module.exports = createConfig({&#xA;  // ...&#xA;  responsive: {&#xA;    medium: &#39;@media (min-width: 700px)&#39;,&#xA;    large: &#39;@media (min-width: 1024px)&#39;,&#xA;  },&#xA;  theme: {&#xA;    color: {&#xA;      &#39;slate-100&#39;: &#39;#f1f5f9&#39;,&#xA;      &#39;slate-700&#39;: &#39;#334155&#39;,&#xA;      &#39;sky-500&#39;: &#39;#0ea5e9&#39;,&#xA;    },&#xA;    radii: {&#xA;      rounded: &#39;10px&#39;,&#xA;      circle: &#39;9999px&#39;,&#xA;      none: &#39;none&#39;,&#xA;    },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The keys in your &lt;code&gt;responsive&lt;/code&gt; and &lt;code&gt;theme&lt;/code&gt; objects can be anything you wish. These keys will be used to name your tokens (more on this later).&lt;/p&gt; &#xA;&lt;h3&gt;Styling&lt;/h3&gt; &#xA;&lt;p&gt;With your theme set up, there are only a few rules to remember:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A Tokenami &lt;strong&gt;property&lt;/strong&gt; is any CSS property prefixed with double dash, e.g. &lt;code&gt;--font-size&lt;/code&gt;. Use &lt;code&gt;---&lt;/code&gt; (triple dash) to add custom CSS variables to an element.&lt;/li&gt; &#xA; &lt;li&gt;A Tokenami &lt;strong&gt;token&lt;/strong&gt; is any theme key followed by a value identifier, separated by an underscore. For example, a &lt;code&gt;color&lt;/code&gt; object in theme with a &lt;code&gt;red-100&lt;/code&gt; entry maps to &lt;code&gt;var(--color_red-100)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Properties can include selectors like media queries, pseudo-classes, and pseudo-elements separated with an underscore. For instance, &lt;code&gt;--hover_background-color&lt;/code&gt;, &lt;code&gt;--md_hover_background-color&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Grid values&lt;/h4&gt; &#xA;&lt;p&gt;Tokenami uses a grid value for spacing. Properties like padding and margin are multiples of this when passed a numeric value. For example, with a grid set to &lt;code&gt;4px&lt;/code&gt;, using &lt;code&gt;--padding: 2&lt;/code&gt; adds &lt;code&gt;8px&lt;/code&gt; of padding to your element.&lt;/p&gt; &#xA;&lt;p&gt;By default, Tokenami sets the grid to &lt;code&gt;0.25rem&lt;/code&gt; but you can override it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;module.exports = createConfig({&#xA;  // ...&#xA;  grid: &#39;10px&#39;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arbitrary values&lt;/h4&gt; &#xA;&lt;p&gt;You can avoid TypeScript errors for one-off inline values by using a triple dash fallback. For instance, &lt;code&gt;--padding: var(---, 20px)&lt;/code&gt; prevents errors and sets padding to &lt;code&gt;20px&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tokenami intentionally adds friction to the developer experience here. This is to encourage sticking to your theme guidelines and to help you quickly spot values in your code that don&#39;t.&lt;/p&gt; &#xA;&lt;h3&gt;Responsive styles&lt;/h3&gt; &#xA;&lt;p&gt;Define responsive rules in the &lt;code&gt;responsive&lt;/code&gt; object in your config. This can include &lt;code&gt;@container&lt;/code&gt; queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;module.exports = createConfig({&#xA;  // ...&#xA;  responsive: {&#xA;    medium: &#39;@media (min-width: 1024px)&#39;,&#xA;    &#39;medium-self&#39;: &#39;@container (min-width: 400px)&#39;,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use by following the &lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-styling&#34;&gt;property spec&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;div style={{ &#39;--medium_padding&#39;: 4 }} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Responsive rules can also be combined with &lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-selectors&#34;&gt;selectors&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;div style={{ &#39;--medium_hover_padding&#39;: 4 }} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For documentation on responsive variants, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-css-utility&#34;&gt;CSS utility&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;Animation&lt;/h3&gt; &#xA;&lt;p&gt;Add keyframes to your config and reference them in your theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;module.exports = createConfig({&#xA;  // ...&#xA;  keyframes: {&#xA;    wiggle: {&#xA;      &#39;0%, 100%&#39;: { transform: &#39;rotate(-3deg)&#39; },&#xA;      &#39;50%&#39;: { transform: &#39;rotate(3deg)&#39; },&#xA;    },&#xA;  },&#xA;  theme: {&#xA;    anim: {&#xA;      wiggle: &#39;wiggle 1s ease-in-out infinite&#39;,&#xA;    },&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use by following the &lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-styling&#34;&gt;token spec&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;div style={{ &#39;--animation&#39;: &#39;var(--anim_wiggle)&#39; }} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CSS utility&lt;/h2&gt; &#xA;&lt;p&gt;Tokenami provides a CSS utility to abstract styles from your views and correctly merge styles across component boundaries. It also provides a variants API.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install using your package manager of choice. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @tokenami/css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Import and use the utility directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { css } from &#39;@tokenami/css&#39;;&#xA;&#xA;function Button({ size, style, ...props }) {&#xA;  return &amp;lt;button {...props} style={button({ size }, style)} /&amp;gt;;&#xA;}&#xA;&#xA;const button = css(&#xA;  { &#39;---padding&#39;: 4 },&#xA;  {&#xA;    size: {&#xA;      small: { &#39;--padding&#39;: 2 },&#xA;      large: { &#39;--padding&#39;: 6 },&#xA;    },&#xA;  },&#xA;  { responsive: true }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first parameter passed to the &lt;code&gt;css&lt;/code&gt; utility represents your base styles, the second is for optional variants, and the third enables responsive variants.&lt;/p&gt; &#xA;&lt;p&gt;Responsive variants allow you to prefix the variant name with a responsive key from your configuration. For example, the following button will apply the large &lt;code&gt;size&lt;/code&gt; variant at the medium breakpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function Button() {&#xA;  return &amp;lt;button style={button({ medium_size: &#39;large&#39; })} /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;responsive: true&lt;/code&gt; will generate the atomic CSS for the responsive variants regardless of whether they&#39;re used so this is purposefully opt-in to allow greater control.&lt;/p&gt; &#xA;&lt;h3&gt;Overrides&lt;/h3&gt; &#xA;&lt;p&gt;The function returned by the &lt;code&gt;css&lt;/code&gt; utility accepts your chosen variants as the first parameter, and then any number of overrides as additional parameters. Overrides can be applied conditionally and last override wins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function Button(props) {&#xA;  const { size, style, ...buttonProps } = props;&#xA;  const disabled = props.disabled &amp;amp;&amp;amp; { &#39;--opacity&#39;: 0.5 };&#xA;  return &amp;lt;button {...buttonProps} style={button({ size }, disabled, style)} /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overrides can also be used for compounding variants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function Button(props) {&#xA;  const { variant = &#39;primary&#39;, outline = true, style, ...buttonProps } = props;&#xA;  const isPrimary = variant === &#39;primary&#39;;&#xA;  const primaryOutlined = isPrimary &amp;amp;&amp;amp; outline &amp;amp;&amp;amp; { &#39;--background-color&#39;: &#39;transparent&#39; };&#xA;&#xA;  return &amp;lt;button {...buttonProps} style={button({ size, outline }, primaryOutlined, style)} /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;Variants&lt;/code&gt; type to extend your component prop types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { type Variants, css } from &#39;@tokenami/css&#39;;&#xA;&#xA;type ButtonElementProps = React.ComponentPropsWithoutRef&amp;lt;&#39;button&#39;&amp;gt;;&#xA;interface ButtonProps extends ButtonElementProps, Variants&amp;lt;typeof button&amp;gt; {}&#xA;&#xA;function Button(props: ButtonProps) {&#xA;  const { size = &#39;small&#39;, style, ...buttonProps } = props;&#xA;  return &amp;lt;button {...buttonProps} style={button({ size }, style)} /&amp;gt;;&#xA;}&#xA;&#xA;const button = css(&#xA;  { &#39;---padding&#39;: 4 },&#xA;  {&#xA;    size: {&#xA;      small: { &#39;--padding&#39;: 2 },&#xA;      large: { &#39;--padding&#39;: 6 },&#xA;    },&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Selectors&lt;/h3&gt; &#xA;&lt;p&gt;Tokenami provides some &lt;a href=&#34;https://github.com/tokenami/tokenami/raw/main/packages/config/src/config.default.ts#L9&#34;&gt;common default selectors&lt;/a&gt; for you but you can define your own custom selectors in the &lt;code&gt;selectors&lt;/code&gt; object of your config.&lt;/p&gt; &#xA;&lt;p&gt;Use the ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) to specify where the current element&#39;s selector should be injected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const { createConfig, defaultConfig } = require(&#39;@tokenami/dev&#39;);&#xA;&#xA;module.exports = createConfig({&#xA;  // ...&#xA;  selectors: {&#xA;    ...defaultConfig.selectors,&#xA;    &#39;parent-hover&#39;: &#39;.parent:hover &amp;gt; &amp;amp;&#39;,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use by following the &lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-styling&#34;&gt;property spec&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;div className=&#34;parent&#34;&amp;gt;&#xA;  &amp;lt;img src=&#34;...&#34; alt=&#34;&#34; /&amp;gt;&#xA;  &amp;lt;button style={{ &#39;--parent-hover_font-weight&#39;: &#39;bold&#39; }} /&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Selectors can also be combined with &lt;a href=&#34;https://raw.githubusercontent.com/tokenami/tokenami/main/#user-content-responsive-styles&#34;&gt;responsive rules&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;button style={{ &#39;--medium_parent-hover_font-weight&#39;: &#39;bold&#39; }} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nested selectors&lt;/h4&gt; &#xA;&lt;p&gt;Use an array value for custom selectors to generate nested rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;module.exports = createConfig({&#xA;  // ...&#xA;  selectors: {&#xA;    ...defaultConfig.selectors,&#xA;    hover: [&#39;@media (hover: hover) and (pointer: fine)&#39;, &#39;&amp;amp;:hover&#39;],&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example will apply hover styles for users with a precise pointing device, such as a mouse, when &lt;code&gt;--hover_{property}&lt;/code&gt; is used.&lt;/p&gt; &#xA;&lt;h3&gt;Aliases&lt;/h3&gt; &#xA;&lt;p&gt;Aliases allow you to create shorthand names for properties or other aliases. When using custom aliases, the &lt;code&gt;css&lt;/code&gt; utility is recommended. It ensures properties are merged correctly across component boundaries.&lt;/p&gt; &#xA;&lt;h4&gt;Configure utility&lt;/h4&gt; &#xA;&lt;p&gt;In your &lt;code&gt;.tokenami/tokenami.config&lt;/code&gt; file, change the &lt;code&gt;@tokenami/dev&lt;/code&gt; import to &lt;code&gt;@tokenami/css&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- const { createConfig } = require(&#39;@tokenami/dev&#39;);&#xA;+ const { createConfig } = require(&#39;@tokenami/css&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create a file in your project to configure the utility. You can name this file however you like, e.g. &lt;code&gt;css.ts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// css.ts&#xA;import { createCss } from &#39;@tokenami/css&#39;;&#xA;import config from &#39;../.tokenami/tokenami.config&#39;;&#xA;&#xA;export const css = createCss(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can import the utility from the file you created and it will handle aliases correctly.&lt;/p&gt; &#xA;&lt;h4&gt;Create aliases&lt;/h4&gt; &#xA;&lt;p&gt;The configuration expects the name of your new alias followed by an array of properties or aliases that it should replace when passed as an override to the &lt;code&gt;css&lt;/code&gt; utility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;module.exports = createConfig({&#xA;  // ...&#xA;  aliases: {&#xA;    p: [&#39;pt&#39;, &#39;pr&#39;, &#39;pb&#39;, &#39;pl&#39;, &#39;px&#39;, &#39;py&#39;, &#39;padding&#39;],&#xA;    px: [&#39;pl&#39;, &#39;pr&#39;, &#39;padding-left&#39;, &#39;padding-right&#39;],&#xA;    py: [&#39;pt&#39;, &#39;pb&#39;, &#39;padding-top&#39;, &#39;padding-bottom&#39;],&#xA;    pt: [&#39;padding-top&#39;],&#xA;    pr: [&#39;padding-right&#39;],&#xA;    pb: [&#39;padding-bottom&#39;],&#xA;    pl: [&#39;padding-left&#39;],&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the above config, &lt;code&gt;p&lt;/code&gt; is shorthand for &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;pr&lt;/code&gt;, &lt;code&gt;pb&lt;/code&gt;, &lt;code&gt;pl&lt;/code&gt;, &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;py&lt;/code&gt;, and &lt;code&gt;padding&lt;/code&gt;. This allows the &lt;code&gt;css&lt;/code&gt; utility to remove those properties when &lt;code&gt;--p&lt;/code&gt; is passed as an override:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const button = css({ &#39;--pr&#39;: 4 });&#xA;&#xA;function Button(props) {&#xA;  return &amp;lt;button style={button(null, props.style)} /&amp;gt;;&#xA;}&#xA;&#xA;function App() {&#xA;  return &amp;lt;Button style={{ &#39;--p&#39;: 10 }} /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, &lt;code&gt;Button&lt;/code&gt; will have &lt;code&gt;10&lt;/code&gt; padding on all sides because we configured &lt;code&gt;--p&lt;/code&gt; to take precendence over &lt;code&gt;--pr&lt;/code&gt; when passed as an override. Without this config, the button would have &lt;code&gt;4&lt;/code&gt; padding on the right because longhand properties have higher specificity in the atomic stylesheet.&lt;/p&gt; &#xA;&lt;h3&gt;Mapping properties to theme&lt;/h3&gt; &#xA;&lt;p&gt;Tokenami provides sensible defaults to restrict which values can be passed to properties based on your theme. For instance, &lt;code&gt;--border-color&lt;/code&gt; will only accept tokens from your &lt;code&gt;color&lt;/code&gt; object in theme, &lt;code&gt;--padding&lt;/code&gt; allows multiples of your grid, and &lt;code&gt;--height&lt;/code&gt; expects tokens from a &lt;code&gt;size&lt;/code&gt; key or multiples of your grid.&lt;/p&gt; &#xA;&lt;p&gt;You can customise &lt;a href=&#34;https://github.com/tokenami/tokenami/raw/main/packages/config/src/config.default.ts#L68&#34;&gt;the default configuration&lt;/a&gt; by overriding the &lt;code&gt;properties&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const { createConfig, defaultConfig } = require(&#39;@tokenami/dev&#39;);&#xA;&#xA;module.exports = createConfig({&#xA;  theme: {&#xA;    container: {&#xA;      half: &#39;50%&#39;,&#xA;    },&#xA;    pet: {&#xA;      cat: &#39;&#34;🐱&#34;&#39;,&#xA;      dog: &#39;&#34;🐶&#34;&#39;,&#xA;    },&#xA;  },&#xA;  properties: {&#xA;    ...defaultConfig.properties,&#xA;    width: [&#39;grid&#39;, &#39;container&#39;],&#xA;    height: [&#39;grid&#39;, &#39;container&#39;],&#xA;    content: [&#39;pet&#39;],&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this configuration, using &lt;code&gt;&#39;--content&#39;: &#39;var(--container_half)&#39;&lt;/code&gt; would error because &lt;code&gt;container&lt;/code&gt; does not exist in the property config for &lt;code&gt;content&lt;/code&gt;, but &lt;code&gt;&#39;--content&#39;: &#39;var(--pet_dog)&#39;&lt;/code&gt; would be allowed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;div&#xA;  style={{&#xA;    &#39;--width&#39;: 75 /*  300px with a 4px grid */,&#xA;    &#39;--height&#39;: &#39;var(--container_half)&#39;,&#xA;    &#39;--after_content&#39;: &#39;var(--pet_cat)&#39;,&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browserslist&lt;/h3&gt; &#xA;&lt;p&gt;Tokenami only supports &lt;a href=&#34;https://browsersl.ist/&#34;&gt;browserslist&lt;/a&gt; in your &lt;code&gt;package.json&lt;/code&gt;. You can use it to add autoprefixing to your CSS properties in the generated CSS file. However, it currently doesn&#39;t support vendor-prefixed &lt;strong&gt;values&lt;/strong&gt;, which is being tracked in &lt;a href=&#34;https://github.com/tokenami/tokenami/issues/103&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Continuous Integration&lt;/h3&gt; &#xA;&lt;p&gt;To improve performance during development, Tokenami widens its types and uses the TypeScript plugin for completions. Using &lt;code&gt;tsc&lt;/code&gt; in the command line defaults to these widened types so it will not highlight errors for your properties or tokens. To get accurate types for CI, do the following:&lt;/p&gt; &#xA;&lt;h4&gt;Create a CI project config&lt;/h4&gt; &#xA;&lt;p&gt;Create a file named &lt;code&gt;tsconfig.ci.json&lt;/code&gt; or &lt;code&gt;jsconfig.ci.json&lt;/code&gt;. It should extend your original config and include the CI-specific Tokenami types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;extends&#34;: &#34;./tsconfig.json&#34;,&#xA;  &#34;include&#34;: [&#34;.tokenami/tokenami.env.ci.d.ts&#34;, &#34;**/*.ts&#34;, &#34;**/*.tsx&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reference CI project config&lt;/h4&gt; &#xA;&lt;p&gt;For CI, use &lt;code&gt;tsc&lt;/code&gt; with your new configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tsc --noEmit --project tsconfig.ci.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Before raising a bug, please double-check that it isn&#39;t &lt;a href=&#34;https://github.com/tokenami/tokenami/issues&#34;&gt;already in my todo list&lt;/a&gt;. Some common pitfalls are listed below. If you need additional support or encounter any issues, please don&#39;t hesitate to join the &lt;a href=&#34;https://discord.gg/CAU4HNR4XK&#34;&gt;Tokenami discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;HMR not working as expected in Remix&lt;/h3&gt; &#xA;&lt;p&gt;When adding the stylesheet to the &lt;code&gt;links&lt;/code&gt; export, make sure to import it instead of referencing a path in the &lt;code&gt;href&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import styles from &#39;~/tokenami.css&#39;;&#xA;&#xA;export const links: LinksFunction = () =&amp;gt; [{ rel: &#39;stylesheet&#39;, href: styles }];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your stylesheet is outside the remix &lt;code&gt;app&lt;/code&gt; directory, update &lt;code&gt;remix.config.js&lt;/code&gt; to include it in &lt;a href=&#34;https://remix.run/docs/en/main/file-conventions/remix-config#watchpaths&#34;&gt;&lt;code&gt;watchPaths&lt;/code&gt;&lt;/a&gt; and update the import path appropriately.&lt;/p&gt; &#xA;&lt;h3&gt;Efficiency of Tokenami&#39;s attribute substring selectors&lt;/h3&gt; &#xA;&lt;p&gt;Attribute substring selectors are known for being less efficient than other simpler selectors, however, they are unlikely to significantly impact performance in most cases. Despite being relatively less efficient, modern browsers handle these selectors well enough that the performance impact would be minimal for typical applications.&lt;/p&gt; &#xA;&lt;p&gt;Comparatively, historical CSS-in-JS solutions involved style injection techniques which could significantly hinder performance. In this context, attribute substring selectors will offer a considerable improvement.&lt;/p&gt; &#xA;&lt;h3&gt;Supported frameworks&lt;/h3&gt; &#xA;&lt;p&gt;Tokenami is in early stages of development and currently only supports applications built using React or SolidJS.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;A big thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt; for inspiring most of the features in Tokenami&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stitches.dev/&#34;&gt;Stitches&lt;/a&gt; for variants and responsive variants inspiration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://css-hooks.com/&#34;&gt;CSS Hooks&lt;/a&gt; for custom selectors inspiration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do take the time to check these libraries out if you feel Tokenami isn&#39;t quite right for you.&lt;/p&gt;</summary>
  </entry>
</feed>