<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-15T01:52:15Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yacineMTB/talk</title>
    <updated>2023-06-15T01:52:15Z</updated>
    <id>tag:github.com,2023-06-15:/yacineMTB/talk</id>
    <link href="https://github.com/yacineMTB/talk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Let&#39;s make sand talk&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Talk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/yacineMTB/talk/raw/master/assets/talklogo.png?raw=true&#34; alt=&#34;Talk asset art&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s build a conversational engine so we can talk to our computers! [Demo with audio](&lt;a href=&#34;https://twitter.com/yacineMTB/status/1668432864289882113&#34;&gt;https://twitter.com/yacineMTB/status/1667739001158025216&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Is this project useful to you? Give me a &lt;a href=&#34;https://donate.stripe.com/fZedSC6tOdvF7ew9AD&#34;&gt;&lt;strong&gt;⬆money upvote!⬆&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changelog&lt;/h3&gt; &#xA;&lt;p&gt;Wed Jun 14 2023&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Talk now responds to you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt; - You&#39;re going to have to add piper to your path. See the manual steps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runs completely locally&lt;/li&gt; &#xA; &lt;li&gt;Usuable by my grandmother, if she spoke english&lt;/li&gt; &#xA; &lt;li&gt;Simple to extend&lt;/li&gt; &#xA; &lt;li&gt;Discover little HCI hacks&lt;/li&gt; &#xA; &lt;li&gt;Being able to learn something while driving&lt;/li&gt; &#xA; &lt;li&gt;Clean up the &lt;a href=&#34;https://github.com/yacineMTB/llama.cpp/raw/cf70f603d5a50f553c022a3017ee901afc237236/examples/addon.node/addon.cpp&#34;&gt;LLaMa node cpp binding&lt;/a&gt; I added in my forked submodule enough to merge into mainline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The intended audience for this project at the current state is people who are comfortable with hacking things together&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using bundled bash script (experimental)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;chmod 775 build.sh&lt;/code&gt; &lt;code&gt;./build.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;** WARNING:The bash script will move the existing &lt;code&gt;config.json&lt;/code&gt; file to &lt;code&gt;config.json.bkp&lt;/code&gt; and create a new one instead. ** ** Warning: This script doesn&#39;t install piper **&lt;/p&gt; &#xA;&lt;h3&gt;Using manual steps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get &lt;a href=&#34;https://github.com/rhasspy/piper/&#34;&gt;piper&lt;/a&gt;, and add it to your path. This means calling piper, from anywhere in you system, should work. This is a TTS engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the submodules - &lt;code&gt;git submodule init &amp;amp;&amp;amp; git submodule update --recursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; in &lt;code&gt;whisper.cpp/examples/addon.node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; in &lt;code&gt;llama.cpp/examples/addon.node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build &amp;amp; run them (make sure that whisper.cpp &amp;amp; llama.cpp can run) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd whisper.cpp &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd llama.cpp &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In whisper.cpp git submodule &lt;code&gt;npx cmake-js compile --CDWHISPER_CUBLAS=&#34;ON&#34; -T whisper-addon -B Release &amp;amp;&amp;amp; cp -r ./build/Release /home/kache/attractor/talk/conversation/build/whisper&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Note that the above command has --CDWHISPER_CUBLAS=ON. Change that depending on the build parameters you want for your whisper engine. cmake-js can take cmake flags using --CD{The flag you want}. I&#39;m using CUBLAS=ON because I&#39;m on a 3090. Drop it if you&#39;re on a macbook.&lt;/li&gt; &#xA; &lt;li&gt;Move the created &lt;code&gt;./whisper.cpp/build/Relase contents&lt;/code&gt; to &lt;code&gt;./bindings/whisper/whisper-addon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In llama.cpp git submodule &lt;code&gt;npx cmake-js compile --CDLLAMA_CUBLAS=&#34;ON&#34; -T llama-addon -B Release &amp;amp;&amp;amp; cp -r ./build/Release /home/kache/attractor/talk/conversation/build/llama&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Note, again, this includes LLAMA_CUBLAS flag. You only want this if you know what that flag does! E.g. if you&#39;re on a macbook, you don&#39;t want it.&lt;/li&gt; &#xA; &lt;li&gt;Move the created &lt;code&gt;./llama.cpp/build/Relase contents&lt;/code&gt; to &lt;code&gt;./bindings/llama/llama-addon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get weights! I&#39;m using hermes-13b for LLaMa, and whisper tiny.&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;config.json&lt;/code&gt; to point to the models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the whole package&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change the &lt;code&gt;config.json&lt;/code&gt; to point to &lt;code&gt;record_audio.sh&lt;/code&gt; to listen from mic or &lt;code&gt;sample_audio.sh&lt;/code&gt; for bundled audio examples&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;record_audio.sh&lt;/code&gt; is selected, make sure &lt;code&gt;sox&lt;/code&gt; package is install in your system. You can install it &lt;code&gt;apt install sox libsox-fmt-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the code! Figure out which button you&#39;ll have to press to initiate the response reflex and have the bot respond&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please do&lt;/p&gt; &#xA;&lt;h2&gt;The bindings suck! How do I make them do what i want?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vim ./${llama/whisper}/examples/addon.node/addon.cpp&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nodejs/nodejs.org</title>
    <updated>2023-06-15T01:52:15Z</updated>
    <id>tag:github.com,2023-06-15:/nodejs/nodejs.org</id>
    <link href="https://github.com/nodejs/nodejs.org" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Node.js® Website&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://nodejs.org&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./public/static/images/logos/nodejs-new-pantone-white.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/nodejs/nodejs.org/main/public/static/images/logos/nodejs-new-pantone-black.svg?sanitize=true&#34; width=&#34;200px&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://nodejs.org&#34;&gt;nodejs.org&lt;/a&gt; website built using Nextra (Next.js) with TypeScript, SCSS and MDXv2 &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;CI Status&#34; href=&#34;https://github.com/nodejs/nodejs.org/actions/workflows/github-pages.yml?query=branch%3Amain&#34;&gt; &lt;img src=&#34;https://github.com/nodejs/nodejs.org/actions/workflows/github-pages.yml/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a title=&#34;MIT License&#34; href=&#34;https://raw.githubusercontent.com/nodejs/nodejs.org/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue&#34;&gt; &lt;/a&gt; &lt;a title=&#34;Localised&#34; href=&#34;https://crowdin.com/project/nodejs-website&#34;&gt; &lt;img src=&#34;https://badges.crowdin.net/nodejs-website/localized.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a title=&#34;Follow on Twitter&#34; href=&#34;https://twitter.com/Nodejs&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/Nodejs.svg?style=social&amp;amp;label=Follow%20@Nodejs&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is this repo?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Nodejs.org&lt;/a&gt; by the &lt;a href=&#34;https://openjsf.org/&#34;&gt;OpenJS Foundation&lt;/a&gt; is the official website for the Node.js® JavaScript runtime. This repo is the source code for the website. It is build using &lt;a href=&#34;https://nextra.site&#34;&gt;Nextra&lt;/a&gt;, a Next.js based static site generator.&lt;/p&gt; &#xA;&lt;h3&gt;Quick-Start Locally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci&#xA;npx turbo serve&#xA;# listening at localhost:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Structure of this Repository&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Page templates are in &lt;code&gt;/layouts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Global styles are in &lt;code&gt;/styles&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Public files are in &lt;code&gt;/public&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;i18n configuration is on &lt;code&gt;i18n/config.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Global static files are in &lt;code&gt;/public/static&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Legacy static files are in &lt;code&gt;/public/static/legacy&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;All content is in &lt;code&gt;/pages&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Initial development usually happens in English: &lt;code&gt;/pages/en&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/i18n/locales/{{locale}}.json&lt;/code&gt; is where global localization information lives.&lt;/li&gt; &#xA;   &lt;li&gt;All content is in Markdown and is per locale.&lt;/li&gt; &#xA;   &lt;li&gt;The top of each Markdown file is a block of YAML (Frontmatter) for page specific localization information that is passed to various templates.&lt;/li&gt; &#xA;   &lt;li&gt;The bulk of the Markdown content for each page is referenced as &lt;code&gt;{children}&lt;/code&gt; on their respective JSX Layout (&lt;code&gt;layouts/&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project adopts the Node.js &lt;a href=&#34;https://github.com/nodejs/admin/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any person who wants to contribute to the Website is welcome! Please read &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/nodejs.org/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt; and see the &lt;a href=&#34;https://www.figma.com/file/lOxAGGg5KXb6nwie7zXkz6/NJ---Design-System?node-id=22%3A6086&#34;&gt;Figma Design&lt;/a&gt; to understand better the structure of this repository.&lt;/p&gt; &#xA;&lt;h3&gt;To translate content into other languages&lt;/h3&gt; &#xA;&lt;p&gt;If you want to help translate to other languages or improve existing translations, it isn&#39;t necessary to work from GitHub. You can and should do it through Crowdin, this is the correct workflow.&lt;/p&gt; &#xA;&lt;p&gt;Crowdin is an online tool that facilitates the user experience for the translator, here is more information:&lt;/p&gt; &#xA;&lt;p&gt;Website translations are handled via &lt;a href=&#34;https://crowdin.com/project/nodejs-website&#34;&gt;Crowdin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To help with localization, please read the &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/nodejs.org/main/TRANSLATION.md&#34;&gt;Translation&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;Full setup is in &lt;a href=&#34;https://github.com/nodejs/build/tree/master/ansible/www-standalone&#34;&gt;https://github.com/nodejs/build/tree/master/ansible/www-standalone&lt;/a&gt; minus secrets and certificates. The webhook is setup on GitHub for this project and talks to a small Node server on the host which does the work. See the &lt;a href=&#34;https://github.com/rvagg/github-webhook&#34;&gt;github-webhook&lt;/a&gt; package for this.&lt;/p&gt; &#xA;&lt;h2&gt;Relevant Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nodejs/admin/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/nodejs.org/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/nodejs.org/main/COLLABORATOR_GUIDE.md&#34;&gt;Collaborator Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.figma.com/file/lOxAGGg5KXb6nwie7zXkz6/NJ---Design-System?node-id=22%3A6086&#34;&gt;Figma Design&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/nodejs.org/main/CONTENT_VS_CODE.md&#34;&gt;Content vs Code&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fern-api/fern</title>
    <updated>2023-06-15T01:52:15Z</updated>
    <id>tag:github.com,2023-06-15:/fern-api/fern</id>
    <link href="https://github.com/fern-api/fern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate SDKs (client libraries) for your API&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://www.buildwithfern.com/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/fern-api/fern/main/header.png&#34; alt=&#34;header&#34;&gt; &lt;/a&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.buildwithfern.com/docs/intro&#34; alt=&#34;documentation&#34;&gt;Documentation&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://discord.com/invite/JkkXumPzcG&#34; alt=&#34;discord&#34;&gt;Join the Discord&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Backed by Y Combinator &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fern is an open source format for defining REST APIs.&lt;/strong&gt; You can think of it like a programming language to describe your API: your endpoints, types, errors, and examples.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;strong&gt;Fern compiler.&lt;/strong&gt; The compiler transforms the API description into useful outputs, like:&lt;/p&gt; &#xA;&lt;h3&gt;🌿 SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Client libraries speed up internal development, and help acquire customers who use your API. Our auto-generated SDKs are idiomatic and feel handwritten.&lt;/p&gt; &#xA;&lt;h3&gt;🌿 Server-side code generation&lt;/h3&gt; &#xA;&lt;p&gt;We automatically generate lots of boilerplate on the server side, like Pydantic models for FastAPI and Jersey interfaces for Spring Boot. We also add compile-time validation that all your endpoints are being served correctly.&lt;/p&gt; &#xA;&lt;h3&gt;🌿 Postman Collection&lt;/h3&gt; &#xA;&lt;p&gt;Complete with examples of successful and unsuccessful requests!&lt;/p&gt; &#xA;&lt;h3&gt;🌿 An OpenAPI spec&lt;/h3&gt; &#xA;&lt;p&gt;You can feed the generated OpenAPI into the endless list of tools that support OpenAPI.&lt;/p&gt; &#xA;&lt;h1&gt;Comparison with OpenAPI&lt;/h1&gt; &#xA;&lt;p&gt;OpenAPI is a great tool for documenting APIs, but falls short for code generation use cases.&lt;/p&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://buildwithfern.com/docs/comparison-with-openapi&#34;&gt;Fern vs. OpenAPI&lt;/a&gt; for an in-depth comparison. &lt;strong&gt;TL;DR: we differ from OpenAPI in these areas:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buildwithfern.com/docs/comparison-with-openapi#simplicity&#34;&gt;Simplicity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buildwithfern.com/docs/comparison-with-openapi#new-features-in-specification&#34;&gt;New features in specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buildwithfern.com/docs/comparison-with-openapi#quality-of-code-generation&#34;&gt;Quality of code generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buildwithfern.com/docs/comparison-with-openapi#focus-on-server-side-api-development&#34;&gt;Focus on server-side API development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buildwithfern.com/docs/comparison-with-openapi#change-management&#34;&gt;Change management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buildwithfern.com/docs/comparison-with-openapi#cloud-based-code-generation-and-publishing&#34;&gt;Cloud-based code generation and publishing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Plant Store example&lt;/h1&gt; &#xA;&lt;p&gt;Plant Store is full example of an API defined in Fern.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fern-api/plantstore-api&#34;&gt;API Definition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fern-api/plantstore-node&#34;&gt;Generated TypeScript SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fern-api/plantstore-java&#34;&gt;Generated Java SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fern-api/plantstore-postman&#34;&gt;Generated Postman Collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fern-api/plantstore-openapi&#34;&gt;Generated OpenAPI spec&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Get started&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g fern-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;fern/&lt;/code&gt; directory&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;fern/&lt;/code&gt; directory contains your API definition. This generally lives in your backend repo, but you can also have an independent repo dedicated to your API (like &lt;a href=&#34;https://github.com/ravenappdev/raven-api&#34;&gt;Raven&#39;s&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;In the root of your repo, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fern init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the following folder structure in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;fern/&#xA;├─ fern.config.json # root-level configuration&#xA;└─ api/ # your API&#xA;  ├─ generators.yml # generators you&#39;re using&#xA;  └─ definition/&#xA;    ├─ api.yml  # API-level configuration&#xA;    └─ imdb.yml # endpoints, types, and errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s what the &lt;code&gt;imdb.yml&lt;/code&gt; starter file looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;types:&#xA;  MovieId: string&#xA;&#xA;  Movie:&#xA;    properties:&#xA;      id: MovieId&#xA;      title: string&#xA;      rating:&#xA;        type: double&#xA;        docs: The rating scale is one to five stars&#xA;&#xA;  CreateMovieRequest:&#xA;    properties:&#xA;      title: string&#xA;      rating: double&#xA;&#xA;service:&#xA;  auth: false&#xA;  base-path: /movies&#xA;  endpoints:&#xA;    createMovie:&#xA;      docs: Add a movie to the database&#xA;      method: POST&#xA;      path: /create-movie&#xA;      request: CreateMovieRequest&#xA;      response: MovieId&#xA;&#xA;    getMovie:&#xA;      method: GET&#xA;      path: /{movieId}&#xA;      path-parameters:&#xA;        movieId: MovieId&#xA;      response: Movie&#xA;      errors:&#xA;        - MovieDoesNotExistError&#xA;&#xA;errors:&#xA;  MovieDoesNotExistError:&#xA;    status-code: 404&#xA;    type: MovieId&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating an SDK&lt;/h3&gt; &#xA;&lt;p&gt;To generate SDKs, you can log in with GitHub from the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fern login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add &lt;a href=&#34;https://raw.githubusercontent.com/fern-api/fern/main/compiler/generators&#34;&gt;generators&lt;/a&gt; using &lt;code&gt;fern add&lt;/code&gt;. By default, this will publish your SDK to the Fern npm registry (npm.buildwithfern.com).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fern add fern-typescript-sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate the TypeScript SDK, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fern generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And voila! You just built and published a TypeScript SDK.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Next step:&lt;/strong&gt; define &lt;em&gt;your&lt;/em&gt; API in Fern. Check out our &lt;a href=&#34;https://www.buildwithfern.com/docs/definition&#34;&gt;docs&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h1&gt;CLI reference&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;fern generate [--group &amp;lt;group&amp;gt;] [--version &amp;lt;version&amp;gt;]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fern generate&lt;/code&gt; runs the compiler. It will validate your API and run the generators specified in &lt;code&gt;generators.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have a &lt;code&gt;default-group&lt;/code&gt; specified in &lt;code&gt;generators.yml&lt;/code&gt;, then you must specify a group using the &lt;code&gt;--group&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;You can specify a version using the &lt;code&gt;--version&lt;/code&gt; option. This version string is used when publishing SDKs to registries (e.g. npm).&lt;/p&gt; &#xA;&lt;h4&gt;Running locally&lt;/h4&gt; &#xA;&lt;p&gt;By default, the generation runs in the cloud. If you want to run it on your local machine, you can use the &lt;code&gt;--local&lt;/code&gt; option. This will run each generator in a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;By default, Fern will delete the container after running. To keep the container around (e.g. to look at the generator&#39;s logs), use the &lt;code&gt;--keepDocker&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;fern check&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fern check&lt;/code&gt; will validate that your API is valid.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;fern upgrade&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fern upgrade&lt;/code&gt; will upgrade your compiler version in &lt;code&gt;fern.config.json&lt;/code&gt; to the latest version.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;fern add &amp;lt;generator&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fern add&lt;/code&gt; adds a new generator to your &lt;code&gt;generators.yml&lt;/code&gt;. You can view the full list of supported generators in our &lt;a href=&#34;https://www.buildwithfern.com/docs/compiler/generators&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;fern init&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fern init&lt;/code&gt; adds a new API to your repo.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;fern register&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Advanced feature.&lt;/em&gt; You can register your API so it can be depended on by other APIs. Read more in our &lt;a href=&#34;https://www.buildwithfern.com/docs/advanced/depending-on-other-apis&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;You can view our documentation &lt;a href=&#34;https://www.buildwithfern.com/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/JkkXumPzcG&#34;&gt;Join our Discord!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Attribution&lt;/h1&gt; &#xA;&lt;p&gt;Thanks to the folks at &lt;a href=&#34;https://twemoji.twitter.com&#34;&gt;Twemoji&lt;/a&gt;, an open source project, who created the graphic that we use as our logo.&lt;/p&gt;</summary>
  </entry>
</feed>