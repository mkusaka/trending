<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-16T01:41:09Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coderabbitai/ai-pr-reviewer</title>
    <updated>2023-08-16T01:41:09Z</updated>
    <id>tag:github.com,2023-08-16:/coderabbitai/ai-pr-reviewer</id>
    <link href="https://github.com/coderabbitai/ai-pr-reviewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI-based Pull Request Summarizer and Reviewer with Chat Capabilities.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI-based PR reviewer and summarizer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://github.com/coderabbitai/ai-pr-reviewer)/commits/main&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/last-commit/coderabbitai/ai-pr-reviewer/main?style=for-the-badge&#34; height=&#34;20&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;CodeRabbit &lt;code&gt;ai-pr-reviewer&lt;/code&gt; is an AI-based code reviewer and summarizer for GitHub pull requests using OpenAI&#39;s &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; and &lt;code&gt;gpt-4&lt;/code&gt; models. It is designed to be used as a GitHub Action and can be configured to run on every pull request and review comments&lt;/p&gt; &#xA;&lt;h2&gt;Reviewer Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PR Summarization&lt;/strong&gt;: It generates a summary and release notes of the changes in the pull request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Line-by-line code change suggestions&lt;/strong&gt;: Reviews the changes line by line and provides code change suggestions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Continuous, incremental reviews&lt;/strong&gt;: Reviews are performed on each commit within a pull request, rather than a one-time review on the entire pull request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cost-effective and reduced noise&lt;/strong&gt;: Incremental reviews save on OpenAI costs and reduce noise by tracking changed files between commits and the base of the pull request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;Light&#34; model for summary&lt;/strong&gt;: Designed to be used with a &#34;light&#34; summarization model (e.g. &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;) and a &#34;heavy&#34; review model (e.g. &lt;code&gt;gpt-4&lt;/code&gt;). &lt;em&gt;For best results, use &lt;code&gt;gpt-4&lt;/code&gt; as the &#34;heavy&#34; model, as thorough code review needs strong reasoning abilities.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat with bot&lt;/strong&gt;: Supports conversation with the bot in the context of lines of code or entire files, useful for providing context, generating test cases, and reducing code complexity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart review skipping&lt;/strong&gt;: By default, skips in-depth review for simple changes (e.g. typo fixes) and when changes look good for the most part. It can be disabled by setting &lt;code&gt;review_simple_changes&lt;/code&gt; and &lt;code&gt;review_comment_lgtm&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable prompts&lt;/strong&gt;: Tailor the &lt;code&gt;system_message&lt;/code&gt;, &lt;code&gt;summarize&lt;/code&gt;, and &lt;code&gt;summarize_release_notes&lt;/code&gt; prompts to focus on specific aspects of the review process or even change the review objective.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use this tool, you need to add the provided YAML file to your repository and configure the required environment variables, such as &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; and &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;. For more information on usage, examples, contributing, and FAQs, you can refer to the sections below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#professional-version-of-coderabbit&#34;&gt;Professional Version of CodeRabbit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#reviewer-features&#34;&gt;Reviewer Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#install-instructions&#34;&gt;Install instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#conversation-with-coderabbit&#34;&gt;Conversation with CodeRabbit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/#faqs&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Professional Version of CodeRabbit&lt;/h2&gt; &#xA;&lt;p&gt;The professional version of &lt;code&gt;openai-pr-reviewer&lt;/code&gt; project is now available at &lt;a href=&#34;http://coderabbit.ai&#34;&gt;coderabbit.ai&lt;/a&gt;. Building upon our open-source foundation, CodeRabbit offers premium features including enhanced context and superior noise reduction, dedicated support, and our ongoing commitment to improve code reviews.&lt;/p&gt; &#xA;&lt;h2&gt;Install instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ai-pr-reviewer&lt;/code&gt; runs as a GitHub Action. Add the below file to your repository at &lt;code&gt;.github/workflows/ai-pr-reviewer.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Code Review&#xA;&#xA;permissions:&#xA;  contents: read&#xA;  pull-requests: write&#xA;&#xA;on:&#xA;  pull_request:&#xA;  pull_request_review_comment:&#xA;    types: [created]&#xA;&#xA;concurrency:&#xA;  group:&#xA;    ${{ github.repository }}-${{ github.event.number || github.head_ref ||&#xA;    github.sha }}-${{ github.workflow }}-${{ github.event_name ==&#xA;    &#39;pull_request_review_comment&#39; &amp;amp;&amp;amp; &#39;pr_comment&#39; || &#39;pr&#39; }}&#xA;  cancel-in-progress: ${{ github.event_name != &#39;pull_request_review_comment&#39; }}&#xA;&#xA;jobs:&#xA;  review:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: coderabbitai/ai-pr-reviewer@latest&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}&#xA;        with:&#xA;          debug: false&#xA;          review_simple_changes: false&#xA;          review_comment_lgtm: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environment variables&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_TOKEN&lt;/code&gt;: This should already be available to the GitHub Action environment. This is used to add comments to the pull request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;: use this to authenticate with OpenAI API. You can get one &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;here&lt;/a&gt;. Please add this key to your GitHub Action secrets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_ORG&lt;/code&gt;: (optional) use this to use the specified organization with OpenAI API if you have multiple. Please add this key to your GitHub Action secrets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Models: &lt;code&gt;gpt-4&lt;/code&gt; and &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Recommend using &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; for lighter tasks such as summarizing the changes (&lt;code&gt;openai_light_model&lt;/code&gt; in configuration) and &lt;code&gt;gpt-4&lt;/code&gt; for more complex review and commenting tasks (&lt;code&gt;openai_heavy_model&lt;/code&gt; in configuration).&lt;/p&gt; &#xA;&lt;p&gt;Costs: &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; is dirt cheap. &lt;code&gt;gpt-4&lt;/code&gt; is orders of magnitude more expensive, but the results are vastly superior. We are typically spending $20 a day for a 20 developer team with &lt;code&gt;gpt-4&lt;/code&gt; based review and commenting.&lt;/p&gt; &#xA;&lt;h3&gt;Prompts &amp;amp; Configuration&lt;/h3&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/action.yml&#34;&gt;action.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tip: You can change the bot personality by configuring the &lt;code&gt;system_message&lt;/code&gt; value. For example, to review docs/blog posts, you can use the following prompt:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Blog Reviewer Prompt&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;system_message: |&#xA;  You are `@coderabbitai` (aka `github-actions[bot]`), a language model&#xA;  trained by OpenAI. Your purpose is to act as a highly experienced&#xA;  DevRel (developer relations) professional with focus on cloud-native&#xA;  infrastructure.&#xA;&#xA;  Company context -&#xA;  CodeRabbit is an AI-powered Code reviewer.It boosts code quality and cuts manual effort. Offers context-aware, line-by-line feedback, highlights critical changes,&#xA;  enables bot interaction, and lets you commit suggestions directly from GitHub.&#xA;&#xA;  When reviewing or generating content focus on key areas such as -&#xA;  - Accuracy&#xA;  - Relevance&#xA;  - Clarity&#xA;  - Technical depth&#xA;  - Call-to-action&#xA;  - SEO optimization&#xA;  - Brand consistency&#xA;  - Grammar and prose&#xA;  - Typos&#xA;  - Hyperlink suggestions&#xA;  - Graphics or images (suggest Dall-E image prompts if needed)&#xA;  - Empathy&#xA;  - Engagement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Conversation with CodeRabbit&lt;/h2&gt; &#xA;&lt;p&gt;You can reply to a review comment made by this action and get a response based on the diff context. Additionally, you can invite the bot to a conversation by tagging it in the comment (&lt;code&gt;@coderabbitai&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;@coderabbitai Please generate a test plan for this file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note: A review comment is a comment made on a diff or a file in the pull request.&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring PRs&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it is useful to ignore a PR. For example, if you are using this action to review documentation, you can ignore PRs that only change the documentation. To ignore a PR, add the following keyword in the PR description:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@coderabbitai: ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Some of the reviews done by ai-pr-reviewer&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/docs/images/PRSummary.png&#34; alt=&#34;PR Summary&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/docs/images/ReleaseNotes.png&#34; alt=&#34;PR Release Notes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/docs/images/section-1.png&#34; alt=&#34;PR Review&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coderabbitai/ai-pr-reviewer/main/docs/images/section-3.png&#34; alt=&#34;PR Conversation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any suggestions or pull requests for improving the prompts are highly appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Developing&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;First, you&#39;ll need to have a reasonably modern version of &lt;code&gt;node&lt;/code&gt; handy, tested with node 17+.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install the dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the typescript and package it for distribution&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm run build &amp;amp;&amp;amp; npm run package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;Review pull requests from forks&lt;/h3&gt; &#xA;&lt;p&gt;GitHub Actions limits the access of secrets from forked repositories. To enable this feature, you need to use the &lt;code&gt;pull_request_target&lt;/code&gt; event instead of &lt;code&gt;pull_request&lt;/code&gt; in your workflow file. Note that with &lt;code&gt;pull_request_target&lt;/code&gt;, you need extra configuration to ensure checking out the right commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Code Review&#xA;&#xA;permissions:&#xA;  contents: read&#xA;  pull-requests: write&#xA;&#xA;on:&#xA;  pull_request_target:&#xA;    types: [opened, synchronize, reopened]&#xA;  pull_request_review_comment:&#xA;    types: [created]&#xA;&#xA;concurrency:&#xA;  group:&#xA;    ${{ github.repository }}-${{ github.event.number || github.head_ref ||&#xA;    github.sha }}-${{ github.workflow }}-${{ github.event_name ==&#xA;    &#39;pull_request_review_comment&#39; &amp;amp;&amp;amp; &#39;pr_comment&#39; || &#39;pr&#39; }}&#xA;  cancel-in-progress: ${{ github.event_name != &#39;pull_request_review_comment&#39; }}&#xA;&#xA;jobs:&#xA;  review:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: coderabbitai/ai-pr-reviewer@latest&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}&#xA;        with:&#xA;          debug: false&#xA;          review_simple_changes: false&#xA;          review_comment_lgtm: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target&#34;&gt;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Inspect the messages between OpenAI server&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;debug: true&lt;/code&gt; in the workflow file to enable debug mode, which will show the messages&lt;/p&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your code (files, diff, PR title/description) will be sent to OpenAI&#39;s servers for processing. Please check with your compliance team before using this on your private code repositories.&lt;/li&gt; &#xA; &lt;li&gt;OpenAI&#39;s API is used instead of ChatGPT session on their portal. OpenAI API has a &lt;a href=&#34;https://openai.com/policies/api-data-usage-policies&#34;&gt;more conservative data usage policy&lt;/a&gt; compared to their ChatGPT offering.&lt;/li&gt; &#xA; &lt;li&gt;This action is not affiliated with OpenAI.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sumithemmadi/truecallerjs</title>
    <updated>2023-08-16T01:41:09Z</updated>
    <id>tag:github.com,2023-08-16:/sumithemmadi/truecallerjs</id>
    <link href="https://github.com/sumithemmadi/truecallerjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TruecallerJS: This is a library for retrieving phone number details using the Truecaller API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TruecallerJS&lt;/h1&gt; &#xA;&lt;!-- ![TruecallerJS logo](Screenshot_20230606-183149_Chrome.png) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/truecallerjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/truecallerjs.svg?sanitize=true&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/sumithemmadi/truecallerjs&#34; alt=&#34;GIT Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/truecallerjs.svg?sanitize=true&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/sumithemmadi&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/truecallerjs.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npms-io/maintenance-score/truecallerjs&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/sumithemmadi/truecallerjs&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to TruecallerJS! This is a library for retrieving phone number details using the Truecaller API. It provides a simple and convenient way to access information about phone numbers in your Node.js, JavaScript, and TypeScript projects.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;TruecallerJS is built to simplify the process of fetching phone number details. With this library, you can easily integrate Truecaller functionality into your Node.js, JavaScript, and TypeScript applications. It abstracts the complexities of interacting with the Truecaller API and provides a streamlined interface for fetching and processing phone number information.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Phone Number Lookup&lt;/strong&gt;: Retrieve detailed information about a phone number, including the owner&#39;s name, location, and more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Support for Node.js, JavaScript, and TypeScript&lt;/strong&gt;: TruecallerJS can be used in Node.js projects, as well as in JavaScript and TypeScript applications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simple and Lightweight&lt;/strong&gt;: TruecallerJS is designed to be easy to use and lightweight.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#truecallerjs&#34;&gt;TruecallerJS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#command-line-usage&#34;&gt;Command Line Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#simple-example&#34;&gt;Simple Example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#bulk-search-on-multiple-phone-numbers&#34;&gt;Bulk Search on Multiple Phone Numbers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sumithemmadi/truecallerjs/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install TruecallerJS using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install truecallerjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use TruecallerJS from the command line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g truecallerjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are using a version of &lt;code&gt;truecallerjs&lt;/code&gt; that is older than &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/tree/truecallerjs-v1.1.2&#34;&gt;1.1.2&lt;/a&gt;, we recommend referring to the &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/tree/truecallerjs-v1.1.2&#34;&gt;truecallerjs-v1.1.2&lt;/a&gt; documentation for instructions. &lt;strong&gt;Note&lt;/strong&gt;: If you are using &lt;code&gt;truecallerjs&lt;/code&gt; version from &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/tree/truecallerjs-v1.1.2&#34;&gt;1.1.3&lt;/a&gt; to &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/tree/truecallerjs-v1.1.5&#34;&gt;1.1.5&lt;/a&gt;, please refer to the &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/tree/truecallerjs-v1.1.5&#34;&gt;truecallerjs-v1.1.5&lt;/a&gt; documentation for instructions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use TruecallerJS from the command line, you can run the &lt;code&gt;truecallerjs&lt;/code&gt; command followed by the desired options and arguments.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples of the available options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;truecallerjs login&lt;/code&gt;: Use this command to log in to your Truecaller account.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;truecallerjs -s [number]&lt;/code&gt;: Use this command to search for a phone number and retrieve the caller name and related information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;truecallerjs --bulksearch, --bs&lt;/code&gt; command is used to performing bulk number searches using the Truecaller service. It allows you to search for multiple phone numbers at once, making it convenient for processing large sets of phone numbers in a single request.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;truecallerjs --bulksearch, --bs&lt;/code&gt;: Use this command to perform a bulk number search.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional options include &lt;code&gt;--raw&lt;/code&gt;, &lt;code&gt;--name&lt;/code&gt;, &lt;code&gt;--email&lt;/code&gt;, &lt;code&gt;--json&lt;/code&gt;, &lt;code&gt;--xml&lt;/code&gt;, &lt;code&gt;--yaml&lt;/code&gt;, &lt;code&gt;--text&lt;/code&gt;, &lt;code&gt;--nc&lt;/code&gt;, &lt;code&gt;--installationid&lt;/code&gt;, &lt;code&gt;--verbose&lt;/code&gt;, and &lt;code&gt;--help&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ truecallerjs -s +9199123456789 --json&#xA;{&#xA;     ...&#xA;     &#34;name&#34;:&#34;Sumith Emmadi&#34;&#xA;     ...&#xA;}&#xA;&#xA;~$ truecallerjs -s +9199123456789 --name&#xA;Name : Sumith Emmadi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for bulk search&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;truecallerjs --bulksearch &amp;lt;phone_number_1&amp;gt;,&amp;lt;phone_number_2&amp;gt;,&amp;lt;phone_number_3&amp;gt;,...,&amp;lt;phone_number_n&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;phone_number_1&amp;gt;, &amp;lt;phone_number_2&amp;gt;, ..., &amp;lt;phone_number_n&amp;gt;&lt;/code&gt; with the actual phone numbers you want to search. Separate each phone number with a comma.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ~$ truecallerjs --bs 9912345678,+14051234567,+919987654321&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : If the country code is not specified for a phone number, it will default to using your own country code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Limitations&lt;/h3&gt; &#xA;&lt;p&gt;Please note the following limitations when using the &lt;code&gt;--bulksearch&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Maximum Number of Phone Numbers: The tool supports searching 30 or fewer phone numbers at once in a single request. If you exceed this limit, you may need to split your input into multiple requests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Formatting: Ensure that the phone numbers are correctly formatted and do not contain any additional characters or spaces. The tool expects the phone numbers to be provided in a comma-separated format.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the project, start by installing the &lt;code&gt;truecallerjs&lt;/code&gt; package via npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install truecallerjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple Example&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a basic example of how to perform a normal search for a phone number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import truecallerjs, { SearchData, Format } from &#34;truecallerjs&#34;;&#xA;&#xA;async function performTruecallerSearch(): Promise&amp;lt;void&amp;gt; {&#xA;  const searchData: SearchData = {&#xA;    number: &#34;9912345678&#34;,&#xA;    countryCode: &#34;IN&#34;,&#xA;    installationId: &#34;a1k07--Vgdfyvv_rftf5uuudhuhnkljyvvtfftjuhbuijbhug&#34;,&#xA;  };&#xA;&#xA;  try {&#xA;    const response: Format = await truecallerjs.search(searchData);&#xA;    console.log(response.json());&#xA;&#xA;    // Additional response methods:&#xA;    // console.log(response.xml());&#xA;    // console.log(response.yaml());&#xA;    // console.log(response.text());&#xA;&#xA;    // Example of available data from the response:&#xA;    console.log(response.getName()); // &#34;Sumith Emmadi&#34;&#xA;    console.log(response.getAlternateName()); // &#34;sumith&#34;&#xA;    console.log(response.getAddresses()); // {....}&#xA;    console.log(response.getEmailId()); // example@domain.com&#xA;    console.log(response.getCountryDetails()); // {...}&#xA;  } catch (error) {&#xA;    console.error(&#34;Error occurred:&#34;, error);&#xA;  }&#xA;}&#xA;&#xA;performTruecallerSearch();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, the &lt;code&gt;truecallerjs&lt;/code&gt; package is used to search for a phone number. The &lt;code&gt;search_data&lt;/code&gt; object contains the necessary parameters, including the number, country code, and installation ID. The response from the &lt;code&gt;truecallerjs.search()&lt;/code&gt; function provides various methods to access the returned data.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Make sure to log in using the &lt;code&gt;truecallerjs login&lt;/code&gt; command and obtain your installation ID using the &lt;code&gt;truecallerjs -i&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Bulk Search on Multiple Phone Numbers&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;truecallerjs&lt;/code&gt; package also supports bulk search on multiple phone numbers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import truecallerjs, { BulkSearchData, Format } from &#34;truecallerjs&#34;;&#xA;&#xA;async function performBulkTruecallerSearch(): Promise&amp;lt;void&amp;gt; {&#xA;  const countryCode: string = &#34;IN&#34;;&#xA;  const installationId: string = &#34;a1k07--Vgdfyvv_rftf5uuudhuhnkljyvvtfftjuhbuijbhug&#34;;&#xA;  const phoneNumbers: string = &#34;+9912345678,+14051234567,+919987654321&#34;;&#xA;&#xA;  try {&#xA;    const response: BulkSearchData = await truecallerjs.bulkSearch(phoneNumbers, countryCode, installationId);&#xA;    console.log(response);&#xA;  } catch (error) {&#xA;    console.error(&#34;Error occurred:&#34;, error);&#xA;  }&#xA;}&#xA;&#xA;performBulkTruecallerSearch();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the &lt;code&gt;truecallerjs.bulkSearch()&lt;/code&gt; function is used to perform bulk searches on multiple phone numbers. The &lt;code&gt;phoneNumbers&lt;/code&gt; parameter should contain the phone numbers separated by commas. The &lt;code&gt;countryCode&lt;/code&gt; and &lt;code&gt;installationId&lt;/code&gt; parameters are used to specify the default country code and installation ID, respectively.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Make sure to log in using the &lt;code&gt;truecallerjs login&lt;/code&gt; command and obtain your installation ID using the &lt;code&gt;truecallerjs -i&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more details and additional functionalities, please refer to the &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs/tree/main/docs&#34;&gt;documentation&lt;/a&gt;, including the process for logging in and obtaining the installation ID.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;truecallerjs&lt;/code&gt; tool is not an official Truecaller product. It is a custom script developed by &lt;a href=&#34;https://github.com/sumithemmadi&#34;&gt;Sumith Emmadi&lt;/a&gt;, and its functionality is dependent on the Truecaller service. Please use this tool responsibly and in compliance with the terms of service of Truecaller.&lt;/p&gt; &#xA;&lt;p&gt;For more information and support, please contact &lt;a href=&#34;https://github.com/sumithemmadi&#34;&gt;Sumith Emmadi&lt;/a&gt; at &lt;a href=&#34;mailto:sumithemmadi244@gmail.com&#34;&gt;sumithemmadi244@gmail.com&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to the &lt;code&gt;truecallerjs&lt;/code&gt; are not only welcome but highly encouraged!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository &lt;code&gt;git clone https://github.com/sumithemmadi/truecallerjs.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your contribution.&lt;/li&gt; &#xA; &lt;li&gt;Add your content in the appropriate folder or create a new file.&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes and push them to your forked repository.&lt;/li&gt; &#xA; &lt;li&gt;Open a pull request, explaining the nature of your contribution.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please note that all contributions should align with the spirit of the repository and be suitable for all audiences. Offensive or inappropriate content will not be accepted.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TruecallerJS is open source and licensed under the MIT License. See the LICENSE file for more information.&lt;/p&gt; &#xA;&lt;h2&gt;💝 Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;If you find TruecallerJS helpful or inspiring, consider supporting me through GitHub Sponsors. Your sponsorship helps me dedicate more time and effort to open source development and creating impactful projects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sponsor Me&lt;/strong&gt;: &lt;a href=&#34;https://github.com/sponsors/sumithemmadi/&#34;&gt;https://github.com/sponsors/sumithemmadi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paypal&lt;/strong&gt;: &lt;a href=&#34;https://paypal.me/sumithemmadi&#34;&gt;paypal.me/sumithemmadi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UPI ID&lt;/strong&gt; : sumithemmadi@paytm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;💖 Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/sumithemmadi/&#34;&gt;&lt;img src=&#34;https://sumithemmadi.github.io/sponsor.svg?sanitize=true&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for choosing TruecallerJS! I hope it helps you retrieve phone number details efficiently.&lt;/p&gt; &#xA;&lt;p&gt;Repository: &lt;a href=&#34;https://github.com/sumithemmadi/truecallerjs.git&#34;&gt;https://github.com/sumithemmadi/truecallerjs.git&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>postcss/postcss</title>
    <updated>2023-08-16T01:41:09Z</updated>
    <id>tag:github.com,2023-08-16:/postcss/postcss</id>
    <link href="https://github.com/postcss/postcss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transforming styles with JS plugins&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PostCSS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img align=&#34;right&#34; width=&#34;95&#34; height=&#34;95&#34; alt=&#34;Philosopher’s stone, logo of PostCSS&#34; src=&#34;https://postcss.org/logo.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support&amp;nbsp;variables&amp;nbsp;and&amp;nbsp;mixins, transpile&amp;nbsp;future&amp;nbsp;CSS&amp;nbsp;syntax, inline&amp;nbsp;images, and&amp;nbsp;more.&lt;/p&gt; &#xA;&lt;p&gt;PostCSS is used by industry leaders including Wikipedia, Twitter, Alibaba, and JetBrains. The&amp;nbsp;&lt;a href=&#34;https://github.com/postcss/autoprefixer&#34;&gt;Autoprefixer&lt;/a&gt;&amp;nbsp;PostCSS plugin&amp;nbsp;is&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;most popular CSS processors.&lt;/p&gt; &#xA;&lt;p&gt;PostCSS takes a CSS file and provides an API to analyze and modify its rules (by&amp;nbsp;transforming&amp;nbsp;them&amp;nbsp;into&amp;nbsp;an&amp;nbsp;&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;Abstract&amp;nbsp;Syntax&amp;nbsp;Tree&lt;/a&gt;). This API can then be used by &lt;a href=&#34;https://github.com/postcss/postcss#plugins&#34;&gt;plugins&lt;/a&gt; to&amp;nbsp;do a&amp;nbsp;lot of&amp;nbsp;useful&amp;nbsp;things, e.g.,&amp;nbsp;to&amp;nbsp;find errors automatically, or to insert vendor prefixes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Twitter account:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/postcss&#34;&gt;@postcss&lt;/a&gt;&lt;br&gt; &lt;strong&gt;中文翻译&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/postcss/postcss/main/docs/README-cn.md&#34;&gt;&lt;code&gt;docs/README-cn.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For PostCSS commercial support (consulting, improving the front-end culture of your company, PostCSS plugins), contact&amp;nbsp;&lt;a href=&#34;https://evilmartians.com/?utm_source=postcss&#34;&gt;Evil&amp;nbsp;Martians&lt;/a&gt; at &lt;a href=&#34;mailto:postcss@evilmartians.com&#34;&gt;postcss@evilmartians.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://evilmartians.com/?utm_source=postcss&#34;&gt; &lt;img src=&#34;https://evilmartians.com/badges/sponsored-by-evil-martians.svg?sanitize=true&#34; alt=&#34;Sponsored by Evil Martians&#34; width=&#34;236&#34; height=&#34;54&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;PostCSS needs your support. We are accepting donations &lt;a href=&#34;https://opencollective.com/postcss/&#34;&gt;at Open Collective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt; &lt;img src=&#34;https://refactoringui.nyc3.cdn.digitaloceanspaces.com/tailwind-logo.svg?sanitize=true&#34; alt=&#34;Sponsored by Tailwind CSS&#34; width=&#34;213&#34; height=&#34;50&#34;&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&lt;a href=&#34;https://themeisle.com/&#34;&gt; &lt;img src=&#34;https://mllj2j8xvfl0.i.optimole.com/d0cOXWA.3970~373ad/w:auto/h:auto/q:90/https://s30246.pcdn.co/wp-content/uploads/2019/03/logo.png&#34; alt=&#34;Sponsored by ThemeIsle&#34; width=&#34;171&#34; height=&#34;56&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Currently, PostCSS has more than 200 plugins. You&amp;nbsp;can find all of the plugins in the &lt;a href=&#34;https://github.com/postcss/postcss/raw/main/docs/plugins.md&#34;&gt;plugins list&lt;/a&gt; or in the &lt;a href=&#34;https://www.postcss.parts/&#34;&gt;searchable catalog&lt;/a&gt;. Below is a list of our favorite plugins — the best demonstrations of what can be built on top of PostCSS.&lt;/p&gt; &#xA;&lt;p&gt;If you have any new ideas, &lt;a href=&#34;https://github.com/postcss/postcss/raw/main/docs/writing-a-plugin.md&#34;&gt;PostCSS plugin development&lt;/a&gt; is really easy.&lt;/p&gt; &#xA;&lt;h3&gt;Solve Global CSS Problem&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/postcss-use&#34;&gt;&lt;code&gt;postcss-use&lt;/code&gt;&lt;/a&gt; allows you to explicitly set PostCSS plugins within CSS and execute them only for the current file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/outpunk/postcss-modules&#34;&gt;&lt;code&gt;postcss-modules&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/gajus/react-css-modules&#34;&gt;&lt;code&gt;react-css-modules&lt;/code&gt;&lt;/a&gt; automatically isolate selectors within components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maximkoretskiy/postcss-autoreset&#34;&gt;&lt;code&gt;postcss-autoreset&lt;/code&gt;&lt;/a&gt; is an alternative to using a global reset that is better for isolatable components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maximkoretskiy/postcss-initial&#34;&gt;&lt;code&gt;postcss-initial&lt;/code&gt;&lt;/a&gt; adds &lt;code&gt;all: initial&lt;/code&gt; support, which resets all inherited styles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ausi/cq-prolyfill&#34;&gt;&lt;code&gt;cq-prolyfill&lt;/code&gt;&lt;/a&gt; adds container query support, allowing styles that respond to the width of the parent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Use Future CSS, Today&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/autoprefixer&#34;&gt;&lt;code&gt;autoprefixer&lt;/code&gt;&lt;/a&gt; adds vendor prefixes, using data from Can I Use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env&#34;&gt;&lt;code&gt;postcss-preset-env&lt;/code&gt;&lt;/a&gt; allows you to use future CSS features today.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Better CSS Readability&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/postcss-nested&#34;&gt;&lt;code&gt;postcss-nested&lt;/code&gt;&lt;/a&gt; unwraps nested rules the way Sass does.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hudochenkov/postcss-sorting&#34;&gt;&lt;code&gt;postcss-sorting&lt;/code&gt;&lt;/a&gt; sorts the content of rules and at-rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ismamz/postcss-utilities&#34;&gt;&lt;code&gt;postcss-utilities&lt;/code&gt;&lt;/a&gt; includes the most commonly used shortcuts and helpers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonathantneal/postcss-short&#34;&gt;&lt;code&gt;short&lt;/code&gt;&lt;/a&gt; adds and extends numerous shorthand properties.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Images and Fonts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/postcss-url&#34;&gt;&lt;code&gt;postcss-url&lt;/code&gt;&lt;/a&gt; postcss plugin to rebase url(), inline or copy asset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/2createStudio/postcss-sprites&#34;&gt;&lt;code&gt;postcss-sprites&lt;/code&gt;&lt;/a&gt; generates image sprites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonathantneal/postcss-font-magician&#34;&gt;&lt;code&gt;font-magician&lt;/code&gt;&lt;/a&gt; generates all the &lt;code&gt;@font-face&lt;/code&gt; rules needed in CSS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TrySound/postcss-inline-svg&#34;&gt;&lt;code&gt;postcss-inline-svg&lt;/code&gt;&lt;/a&gt; allows you to inline SVG and customize its styles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonathantneal/postcss-write-svg&#34;&gt;&lt;code&gt;postcss-write-svg&lt;/code&gt;&lt;/a&gt; allows you to write simple SVG directly in your CSS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ai/webp-in-css&#34;&gt;&lt;code&gt;webp-in-css&lt;/code&gt;&lt;/a&gt; to use WebP image format in CSS background.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nucliweb/avif-in-css&#34;&gt;&lt;code&gt;avif-in-css&lt;/code&gt;&lt;/a&gt; to use AVIF image format in CSS background.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;&lt;code&gt;stylelint&lt;/code&gt;&lt;/a&gt; is a modular stylesheet linter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/morishitter/stylefmt&#34;&gt;&lt;code&gt;stylefmt&lt;/code&gt;&lt;/a&gt; is a tool that automatically formats CSS according &lt;code&gt;stylelint&lt;/code&gt; rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anandthakker/doiuse&#34;&gt;&lt;code&gt;doiuse&lt;/code&gt;&lt;/a&gt; lints CSS for browser support, using data from Can I Use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SlexAxton/css-colorguard&#34;&gt;&lt;code&gt;colorguard&lt;/code&gt;&lt;/a&gt; helps you maintain a consistent color palette.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cssnano.co/&#34;&gt;&lt;code&gt;cssnano&lt;/code&gt;&lt;/a&gt; is a modular CSS minifier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterramsing/lost&#34;&gt;&lt;code&gt;lost&lt;/code&gt;&lt;/a&gt; is a feature-rich &lt;code&gt;calc()&lt;/code&gt; grid system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MohammadYounes/rtlcss&#34;&gt;&lt;code&gt;rtlcss&lt;/code&gt;&lt;/a&gt; mirrors styles for right-to-left locales.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Syntaxes&lt;/h2&gt; &#xA;&lt;p&gt;PostCSS can transform styles in any syntax, not just CSS. If there is not yet support for your favorite syntax, you&amp;nbsp;can&amp;nbsp;write&amp;nbsp;a&amp;nbsp;parser and/or stringifier to extend PostCSS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/sugarss&#34;&gt;&lt;code&gt;sugarss&lt;/code&gt;&lt;/a&gt; is a indent-based syntax like Sass or Stylus.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gucong3000/postcss-syntax&#34;&gt;&lt;code&gt;postcss-syntax&lt;/code&gt;&lt;/a&gt; switch syntax automatically by file extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ota-meshi/postcss-html&#34;&gt;&lt;code&gt;postcss-html&lt;/code&gt;&lt;/a&gt; parsing styles in &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags of HTML-like files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ota-meshi/postcss-markdown&#34;&gt;&lt;code&gt;postcss-markdown&lt;/code&gt;&lt;/a&gt; parsing styles in code blocks of Markdown files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hudochenkov/postcss-styled-syntax&#34;&gt;&lt;code&gt;postcss-styled-syntax&lt;/code&gt;&lt;/a&gt; parses styles in template literals CSS-in-JS like styled-components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gucong3000/postcss-jsx&#34;&gt;&lt;code&gt;postcss-jsx&lt;/code&gt;&lt;/a&gt; parsing CSS in template / object literals of source files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gucong3000/postcss-styled&#34;&gt;&lt;code&gt;postcss-styled&lt;/code&gt;&lt;/a&gt; parsing CSS in template literals of source files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/postcss-scss&#34;&gt;&lt;code&gt;postcss-scss&lt;/code&gt;&lt;/a&gt; allows you to work with SCSS &lt;em&gt;(but does not compile SCSS to CSS)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AleshaOleg/postcss-sass&#34;&gt;&lt;code&gt;postcss-sass&lt;/code&gt;&lt;/a&gt; allows you to work with Sass &lt;em&gt;(but does not compile Sass to CSS)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webschik/postcss-less&#34;&gt;&lt;code&gt;postcss-less&lt;/code&gt;&lt;/a&gt; allows you to work with Less &lt;em&gt;(but does not compile LESS to CSS)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Crunch/postcss-less&#34;&gt;&lt;code&gt;postcss-less-engine&lt;/code&gt;&lt;/a&gt; allows you to work with Less &lt;em&gt;(and DOES compile LESS to CSS using true Less.js evaluation)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/postcss-js&#34;&gt;&lt;code&gt;postcss-js&lt;/code&gt;&lt;/a&gt; allows you to write styles in JS or transform React Inline Styles, Radium or JSS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postcss/postcss-safe-parser&#34;&gt;&lt;code&gt;postcss-safe-parser&lt;/code&gt;&lt;/a&gt; finds and fixes CSS syntax errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-eb/midas&#34;&gt;&lt;code&gt;midas&lt;/code&gt;&lt;/a&gt; converts a CSS string to highlighted HTML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.julian.io/articles/postcss.html&#34;&gt;Some things you may think about PostCSS… and you might be wrong&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss/&#34;&gt;What PostCSS Really Is; What It Really Does&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889&#34;&gt;PostCSS Guides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More articles and videos you can find on &lt;a href=&#34;https://github.com/jjaderg/awesome-postcss&#34;&gt;awesome-postcss&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;h2&gt;Books&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/web-development/mastering-postcss-web-design&#34;&gt;Mastering PostCSS for Web Design&lt;/a&gt; by Alex Libby, Packt. (June 2016)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can start using PostCSS in just two steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find and add PostCSS extensions for your build tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postcss.parts/&#34;&gt;Select plugins&lt;/a&gt; and add them to your PostCSS process.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CSS-in-JS&lt;/h3&gt; &#xA;&lt;p&gt;The best way to use PostCSS with CSS-in-JS is &lt;a href=&#34;https://github.com/4Catalyzer/astroturf&#34;&gt;&lt;code&gt;astroturf&lt;/code&gt;&lt;/a&gt;. Add its loader to your &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;  module: {&#xA;    rules: [&#xA;      {&#xA;        test: /\.css$/,&#xA;        use: [&#39;style-loader&#39;, &#39;postcss-loader&#39;],&#xA;      },&#xA;      {&#xA;        test: /\.jsx?$/,&#xA;        use: [&#39;babel-loader&#39;, &#39;astroturf/loader&#39;],&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create &lt;code&gt;postcss.config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/** @type {import(&#39;postcss-load-config&#39;).Config} */&#xA;const config = {&#xA;  plugins: [&#xA;    require(&#39;autoprefixer&#39;),&#xA;    require(&#39;postcss-nested&#39;)&#xA;  ]&#xA;}&#xA;&#xA;module.exports = config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parcel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://parceljs.org&#34;&gt;Parcel&lt;/a&gt; has built-in PostCSS support. It already uses Autoprefixer and cssnano. If you want to change plugins, create &lt;code&gt;postcss.config.js&lt;/code&gt; in project’s root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/** @type {import(&#39;postcss-load-config&#39;).Config} */&#xA;const config = {&#xA;  plugins: [&#xA;    require(&#39;autoprefixer&#39;),&#xA;    require(&#39;postcss-nested&#39;)&#xA;  ]&#xA;}&#xA;&#xA;module.exports = config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parcel will even automatically install these plugins for you.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please, be aware of &lt;a href=&#34;https://github.com/parcel-bundler/parcel/labels/CSS%20Preprocessing&#34;&gt;the several issues in Version 1&lt;/a&gt;. Notice, &lt;a href=&#34;https://github.com/parcel-bundler/parcel/projects/5&#34;&gt;Version 2&lt;/a&gt; may resolve the issues via &lt;a href=&#34;https://github.com/parcel-bundler/parcel/issues/2157&#34;&gt;issue #2157&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Webpack&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/postcss/postcss-loader&#34;&gt;&lt;code&gt;postcss-loader&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;  module: {&#xA;    rules: [&#xA;      {&#xA;        test: /\.css$/,&#xA;        exclude: /node_modules/,&#xA;        use: [&#xA;          {&#xA;            loader: &#39;style-loader&#39;,&#xA;          },&#xA;          {&#xA;            loader: &#39;css-loader&#39;,&#xA;            options: {&#xA;              importLoaders: 1,&#xA;            }&#xA;          },&#xA;          {&#xA;            loader: &#39;postcss-loader&#39;&#xA;          }&#xA;        ]&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create &lt;code&gt;postcss.config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/** @type {import(&#39;postcss-load-config&#39;).Config} */&#xA;const config = {&#xA;  plugins: [&#xA;    require(&#39;autoprefixer&#39;),&#xA;    require(&#39;postcss-nested&#39;)&#xA;  ]&#xA;}&#xA;&#xA;module.exports = config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gulp&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/postcss/gulp-postcss&#34;&gt;&lt;code&gt;gulp-postcss&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/floridoo/gulp-sourcemaps&#34;&gt;&lt;code&gt;gulp-sourcemaps&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;gulp.task(&#39;css&#39;, () =&amp;gt; {&#xA;  const postcss    = require(&#39;gulp-postcss&#39;)&#xA;  const sourcemaps = require(&#39;gulp-sourcemaps&#39;)&#xA;&#xA;  return gulp.src(&#39;src/**/*.css&#39;)&#xA;    .pipe( sourcemaps.init() )&#xA;    .pipe( postcss([ require(&#39;autoprefixer&#39;), require(&#39;postcss-nested&#39;) ]) )&#xA;    .pipe( sourcemaps.write(&#39;.&#39;) )&#xA;    .pipe( gulp.dest(&#39;build/&#39;) )&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;npm Scripts&lt;/h3&gt; &#xA;&lt;p&gt;To use PostCSS from your command-line interface or with npm scripts there is &lt;a href=&#34;https://github.com/postcss/postcss-cli&#34;&gt;&lt;code&gt;postcss-cli&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;postcss --use autoprefixer -o main.css css/*.css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;p&gt;If you want to compile CSS string in browser (for instance, in live edit tools like CodePen), just use &lt;a href=&#34;https://browserify.org/&#34;&gt;Browserify&lt;/a&gt; or &lt;a href=&#34;https://webpack.github.io/&#34;&gt;webpack&lt;/a&gt;. They will pack PostCSS and plugins files into a single file.&lt;/p&gt; &#xA;&lt;p&gt;To apply PostCSS plugins to React Inline Styles, JSS, Radium and other &lt;a href=&#34;https://github.com/MicheleBertoli/css-in-js&#34;&gt;CSS-in-JS&lt;/a&gt;, you can use &lt;a href=&#34;https://github.com/postcss/postcss-js&#34;&gt;&lt;code&gt;postcss-js&lt;/code&gt;&lt;/a&gt; and&amp;nbsp;transforms style objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const postcss  = require(&#39;postcss-js&#39;)&#xA;const prefixer = postcss.sync([ require(&#39;autoprefixer&#39;) ])&#xA;&#xA;prefixer({ display: &#39;flex&#39; }) //=&amp;gt; { display: [&#39;-webkit-box&#39;, &#39;-webkit-flex&#39;, &#39;-ms-flexbox&#39;, &#39;flex&#39;] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Runners&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt;: &lt;a href=&#34;https://github.com/C-Lodder/grunt-postcss&#34;&gt;&lt;code&gt;@lodder/grunt-postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTML&lt;/strong&gt;: &lt;a href=&#34;https://github.com/posthtml/posthtml-postcss&#34;&gt;&lt;code&gt;posthtml-postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stylus&lt;/strong&gt;: &lt;a href=&#34;https://github.com/seaneking/poststylus&#34;&gt;&lt;code&gt;poststylus&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rollup&lt;/strong&gt;: &lt;a href=&#34;https://github.com/egoist/rollup-plugin-postcss&#34;&gt;&lt;code&gt;rollup-plugin-postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brunch&lt;/strong&gt;: &lt;a href=&#34;https://github.com/brunch/postcss-brunch&#34;&gt;&lt;code&gt;postcss-brunch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Broccoli&lt;/strong&gt;: &lt;a href=&#34;https://github.com/jeffjewiss/broccoli-postcss&#34;&gt;&lt;code&gt;broccoli-postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Meteor&lt;/strong&gt;: &lt;a href=&#34;https://atmospherejs.com/juliancwirko/postcss&#34;&gt;&lt;code&gt;postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ENB&lt;/strong&gt;: &lt;a href=&#34;https://github.com/awinogradov/enb-postcss&#34;&gt;&lt;code&gt;enb-postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Taskr&lt;/strong&gt;: &lt;a href=&#34;https://github.com/lukeed/taskr/tree/master/packages/postcss&#34;&gt;&lt;code&gt;taskr-postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start&lt;/strong&gt;: &lt;a href=&#34;https://github.com/start-runner/postcss&#34;&gt;&lt;code&gt;start-postcss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Connect/Express&lt;/strong&gt;: &lt;a href=&#34;https://github.com/jedmao/postcss-middleware&#34;&gt;&lt;code&gt;postcss-middleware&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Svelte Preprocessor&lt;/strong&gt;: &lt;a href=&#34;https://github.com/sveltejs/svelte-preprocess/raw/main/docs/preprocessing.md#postcss-sugarss&#34;&gt;&lt;code&gt;svelte-preprocess&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JS API&lt;/h3&gt; &#xA;&lt;p&gt;For other environments, you can use the JS API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const autoprefixer = require(&#39;autoprefixer&#39;)&#xA;const postcss = require(&#39;postcss&#39;)&#xA;const postcssNested = require(&#39;postcss-nested&#39;)&#xA;const fs = require(&#39;fs&#39;)&#xA;&#xA;fs.readFile(&#39;src/app.css&#39;, (err, css) =&amp;gt; {&#xA;  postcss([autoprefixer, postcssNested])&#xA;    .process(css, { from: &#39;src/app.css&#39;, to: &#39;dest/app.css&#39; })&#xA;    .then(result =&amp;gt; {&#xA;      fs.writeFile(&#39;dest/app.css&#39;, result.css, () =&amp;gt; true)&#xA;      if ( result.map ) {&#xA;        fs.writeFile(&#39;dest/app.css.map&#39;, result.map.toString(), () =&amp;gt; true)&#xA;      }&#xA;    })&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://postcss.org/api/&#34;&gt;PostCSS API documentation&lt;/a&gt; for more details about the JS API.&lt;/p&gt; &#xA;&lt;p&gt;All PostCSS runners should pass &lt;a href=&#34;https://github.com/postcss/postcss/raw/main/docs/guidelines/runner.md&#34;&gt;PostCSS Runner Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Most PostCSS runners accept two parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An array of plugins.&lt;/li&gt; &#xA; &lt;li&gt;An object of options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Common options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;syntax&lt;/code&gt;: an object providing a syntax parser and a stringifier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parser&lt;/code&gt;: a special syntax parser (for example, &lt;a href=&#34;https://github.com/postcss/postcss-scss&#34;&gt;SCSS&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stringifier&lt;/code&gt;: a special syntax output generator (for example, &lt;a href=&#34;https://github.com/ben-eb/midas&#34;&gt;Midas&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;map&lt;/code&gt;: &lt;a href=&#34;https://postcss.org/api/#sourcemapoptions&#34;&gt;source map options&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;from&lt;/code&gt;: the input file name (most runners set it automatically).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;to&lt;/code&gt;: the output file name (most runners set it automatically).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Treat Warnings as Errors&lt;/h3&gt; &#xA;&lt;p&gt;In some situations it might be helpful to fail the build on any warning from PostCSS or one of its plugins. This guarantees that no warnings go unnoticed, and helps to avoid bugs. While there is no option to enable treating warnings as errors, it can easily be done by adding &lt;code&gt;postcss-fail-on-warn&lt;/code&gt; plugin in the end of PostCSS plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;  plugins: [&#xA;    require(&#39;autoprefixer&#39;),&#xA;    require(&#39;postcss-fail-on-warn&#39;)&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Editors &amp;amp; IDE Integration&lt;/h2&gt; &#xA;&lt;h3&gt;VS Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=csstools.postcss&#34;&gt;&lt;code&gt;csstools.postcss&lt;/code&gt;&lt;/a&gt; adds PostCSS support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Atom&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-postcss&#34;&gt;&lt;code&gt;language-postcss&lt;/code&gt;&lt;/a&gt; adds PostCSS and &lt;a href=&#34;https://github.com/postcss/sugarss&#34;&gt;SugarSS&lt;/a&gt; highlight.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atom.io/packages/source-preview-postcss&#34;&gt;&lt;code&gt;source-preview-postcss&lt;/code&gt;&lt;/a&gt; previews your output CSS in a separate, live pane.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sublime Text&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hudochenkov/Syntax-highlighting-for-PostCSS&#34;&gt;&lt;code&gt;Syntax-highlighting-for-PostCSS&lt;/code&gt;&lt;/a&gt; adds PostCSS highlight.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Vim&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stephenway/postcss.vim&#34;&gt;&lt;code&gt;postcss.vim&lt;/code&gt;&lt;/a&gt; adds PostCSS highlight.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WebStorm&lt;/h3&gt; &#xA;&lt;p&gt;To get support for PostCSS in WebStorm and other JetBrains IDEs you need to install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/8578-postcss&#34;&gt;this plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Contact&lt;/h2&gt; &#xA;&lt;p&gt;To report a security vulnerability, please use the &lt;a href=&#34;https://tidelift.com/security&#34;&gt;Tidelift security contact&lt;/a&gt;. Tidelift will coordinate the fix and disclosure.&lt;/p&gt; &#xA;&lt;h2&gt;For Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of &lt;code&gt;postcss&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/npm-postcss?utm_source=npm-postcss&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>