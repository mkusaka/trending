<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-06T01:35:42Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>atinux/nuxt-auth-utils</title>
    <updated>2024-09-06T01:35:42Z</updated>
    <id>tag:github.com,2024-09-06:/atinux/nuxt-auth-utils</id>
    <link href="https://github.com/atinux/nuxt-auth-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal Auth module for Nuxt 3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nuxt Auth Utils&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.com/package/nuxt-auth-utils&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/nuxt-auth-utils/latest.svg?style=flat&amp;amp;colorA=020420&amp;amp;colorB=00DC82&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/nuxt-auth-utils&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/nuxt-auth-utils.svg?style=flat&amp;amp;colorA=020420&amp;amp;colorB=00DC82&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/nuxt-auth-utils&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/nuxt-auth-utils.svg?style=flat&amp;amp;colorA=020420&amp;amp;colorB=00DC82&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuxt.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Nuxt-020420?logo=nuxt.js&#34; alt=&#34;Nuxt&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add Authentication to Nuxt applications with secured &amp;amp; sealed cookies sessions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/CHANGELOG.md&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atinux/nuxt-todos-edge&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - [üèÄ Online playground](https://stackblitz.com/github/your-org/nuxt-auth-utils?file=playground%2Fapp.vue) --&gt; &#xA;&lt;!-- - [üìñ &amp;nbsp;Documentation](https://example.com) --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/#hybrid-rendering&#34;&gt;Hybrid Rendering&lt;/a&gt; support (SSR / CSR / SWR / Prerendering)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/#supported-oauth-providers&#34;&gt;15+ OAuth Providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/#vue-composable&#34;&gt;Vue composable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/#server-utils&#34;&gt;Server utils&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/#authstate-component&#34;&gt;&lt;code&gt;&amp;lt;AuthState&amp;gt;&lt;/code&gt; component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/#extend-session&#34;&gt;Extendable with hooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It has few dependencies (only from &lt;a href=&#34;https://github.com/unjs&#34;&gt;UnJS&lt;/a&gt;), run on multiple JS environments (Node, Deno, Workers) and is fully typed with TypeScript.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This module only works with a Nuxt server running as it uses server API routes (&lt;code&gt;nuxt build&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This means that you cannot use this module with &lt;code&gt;nuxt generate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can anyway use &lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/#hybrid-rendering&#34;&gt;Hybrid Rendering&lt;/a&gt; to pre-render pages of your application or disable server-side rendering completely.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;nuxt-auth-utils&lt;/code&gt; in your Nuxt project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx nuxi@latest module add auth-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;NUXT_SESSION_PASSWORD&lt;/code&gt; env variable with at least 32 characters in the &lt;code&gt;.env&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;NUXT_SESSION_PASSWORD=password-with-at-least-32-characters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nuxt Auth Utils generates one for you when running Nuxt in development the first time if no &lt;code&gt;NUXT_SESSION_PASSWORD&lt;/code&gt; is set.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;That&#39;s it! You can now add authentication to your Nuxt app ‚ú®&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Vue Composable&lt;/h2&gt; &#xA;&lt;p&gt;Nuxt Auth Utils automatically adds some plugins to fetch the current user session to let you access it from your Vue components.&lt;/p&gt; &#xA;&lt;h3&gt;User Session&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script setup&amp;gt;&#xA;const { loggedIn, user, session, fetch, clear } = useUserSession()&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;div v-if=&#34;loggedIn&#34;&amp;gt;&#xA;    &amp;lt;h1&amp;gt;Welcome {{ user.login }}!&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;p&amp;gt;Logged in since {{ session.loggedInAt }}&amp;lt;/p&amp;gt;&#xA;    &amp;lt;button @click=&#34;clear&#34;&amp;gt;Logout&amp;lt;/button&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;  &amp;lt;div v-else&amp;gt;&#xA;    &amp;lt;h1&amp;gt;Not logged in&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;a href=&#34;/auth/github&#34;&amp;gt;Login with GitHub&amp;lt;/a&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;TypeScript Signature:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;interface UserSessionComposable {&#xA;  /**&#xA;   * Computed indicating if the auth session is ready&#xA;   */&#xA;  ready: ComputedRef&amp;lt;boolean&amp;gt;&#xA;  /**&#xA;   * Computed indicating if the user is logged in.&#xA;   */&#xA;  loggedIn: ComputedRef&amp;lt;boolean&amp;gt;&#xA;  /**&#xA;   * The user object if logged in, null otherwise.&#xA;   */&#xA;  user: ComputedRef&amp;lt;User | null&amp;gt;&#xA;  /**&#xA;   * The session object.&#xA;   */&#xA;  session: Ref&amp;lt;UserSession&amp;gt;&#xA;  /**&#xA;   * Fetch the user session from the server.&#xA;   */&#xA;  fetch: () =&amp;gt; Promise&amp;lt;void&amp;gt;&#xA;  /**&#xA;   * Clear the user session and remove the session cookie.&#xA;   */&#xA;  clear: () =&amp;gt; Promise&amp;lt;void&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Server Utils&lt;/h2&gt; &#xA;&lt;p&gt;The following helpers are auto-imported in your &lt;code&gt;server/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Session Management&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Set a user session, note that this data is encrypted in the cookie but can be decrypted with an API call&#xA;// Only store the data that allow you to recognize a user, but do not store sensitive data&#xA;// Merges new data with existing data using defu()&#xA;await setUserSession(event, {&#xA;  user: {&#xA;    // ... user data&#xA;  },&#xA;  loggedInAt: new Date()&#xA;  // Any extra fields&#xA;})&#xA;&#xA;// Replace a user session. Same behaviour as setUserSession, except it does not merge data with existing data&#xA;await replaceUserSession(event, data)&#xA;&#xA;// Get the current user session&#xA;const session = await getUserSession(event)&#xA;&#xA;// Clear the current user session&#xA;await clearUserSession(event)&#xA;&#xA;// Require a user session (send back 401 if no `user` key in session)&#xA;const session = await requireUserSession(event)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define the type for your user session by creating a type declaration file (for example, &lt;code&gt;auth.d.ts&lt;/code&gt;) in your project to augment the &lt;code&gt;UserSession&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// auth.d.ts&#xA;declare module &#39;#auth-utils&#39; {&#xA;  interface User {&#xA;    // Add your own fields&#xA;  }&#xA;&#xA;  interface UserSession {&#xA;    // Add your own fields&#xA;  }&#xA;}&#xA;&#xA;export {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OAuth Event Handlers&lt;/h3&gt; &#xA;&lt;p&gt;All handlers can be auto-imported and used in your server routes or API routes.&lt;/p&gt; &#xA;&lt;p&gt;The pattern is &lt;code&gt;oauth&amp;lt;Provider&amp;gt;EventHandler({ onSuccess, config?, onError? })&lt;/code&gt;, example: &lt;code&gt;oauthGitHubEventHandler&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The helper returns an event handler that automatically redirects to the provider authorization page and then calls &lt;code&gt;onSuccess&lt;/code&gt; or &lt;code&gt;onError&lt;/code&gt; depending on the result.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; can be defined directly from the &lt;code&gt;runtimeConfig&lt;/code&gt; in your &lt;code&gt;nuxt.config.ts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export default defineNuxtConfig({&#xA;  runtimeConfig: {&#xA;    oauth: {&#xA;      // provider in lowercase (github, google, etc.)&#xA;      &amp;lt;provider&amp;gt;: {&#xA;        clientId: &#39;...&#39;,&#xA;        clientSecret: &#39;...&#39;&#xA;      }&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can also be set using environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NUXT_OAUTH_&amp;lt;PROVIDER&amp;gt;_CLIENT_ID&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NUXT_OAUTH_&amp;lt;PROVIDER&amp;gt;_CLIENT_SECRET&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Provider is in uppercase (GITHUB, GOOGLE, etc.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Supported OAuth Providers&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Auth0&lt;/li&gt; &#xA; &lt;li&gt;AWS Cognito&lt;/li&gt; &#xA; &lt;li&gt;Battle.net&lt;/li&gt; &#xA; &lt;li&gt;Discord&lt;/li&gt; &#xA; &lt;li&gt;Facebook&lt;/li&gt; &#xA; &lt;li&gt;GitHub&lt;/li&gt; &#xA; &lt;li&gt;Google&lt;/li&gt; &#xA; &lt;li&gt;Keycloak&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn&lt;/li&gt; &#xA; &lt;li&gt;Microsoft&lt;/li&gt; &#xA; &lt;li&gt;PayPal&lt;/li&gt; &#xA; &lt;li&gt;Spotify&lt;/li&gt; &#xA; &lt;li&gt;Steam&lt;/li&gt; &#xA; &lt;li&gt;TikTok&lt;/li&gt; &#xA; &lt;li&gt;Twitch&lt;/li&gt; &#xA; &lt;li&gt;X (Twitter)&lt;/li&gt; &#xA; &lt;li&gt;XSUAA&lt;/li&gt; &#xA; &lt;li&gt;Yandex&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add your favorite provider by creating a new file in &lt;a href=&#34;https://raw.githubusercontent.com/atinux/nuxt-auth-utils/main/src/runtime/server/lib/oauth/&#34;&gt;src/runtime/server/lib/oauth/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;~/server/routes/auth/github.get.ts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export default oauthGitHubEventHandler({&#xA;  config: {&#xA;    emailRequired: true&#xA;  },&#xA;  async onSuccess(event, { user, tokens }) {&#xA;    await setUserSession(event, {&#xA;      user: {&#xA;        githubId: user.id&#xA;      }&#xA;    })&#xA;    return sendRedirect(event, &#39;/&#39;)&#xA;  },&#xA;  // Optional, will return a json error and 401 status code by default&#xA;  onError(event, error) {&#xA;    console.error(&#39;GitHub OAuth error:&#39;, error)&#xA;    return sendRedirect(event, &#39;/&#39;)&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to set the callback URL in your OAuth app settings as &lt;code&gt;&amp;lt;your-domain&amp;gt;/auth/github&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the redirect URL mismatch in production, this means that the module cannot guess the right redirect URL. You can set the &lt;code&gt;NUXT_OAUTH_&amp;lt;PROVIDER&amp;gt;_REDIRECT_URL&lt;/code&gt; env variable to overwrite the default one.&lt;/p&gt; &#xA;&lt;h3&gt;Extend Session&lt;/h3&gt; &#xA;&lt;p&gt;We leverage hooks to let you extend the session data with your own data or log when the user clears the session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// server/plugins/session.ts&#xA;export default defineNitroPlugin(() =&amp;gt; {&#xA;  // Called when the session is fetched during SSR for the Vue composable (/api/_auth/session)&#xA;  // Or when we call useUserSession().fetch()&#xA;  sessionHooks.hook(&#39;fetch&#39;, async (session, event) =&amp;gt; {&#xA;    // extend User Session by calling your database&#xA;    // or&#xA;    // throw createError({ ... }) if session is invalid for example&#xA;  })&#xA;&#xA;  // Called when we call useUserSession().clear() or clearUserSession(event)&#xA;  sessionHooks.hook(&#39;clear&#39;, async (session, event) =&amp;gt; {&#xA;    // Log that user logged out&#xA;  })&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Server-Side Rendering&lt;/h2&gt; &#xA;&lt;p&gt;You can make authenticated requests both from the client and the server. However, you must use &lt;code&gt;useRequestFetch()&lt;/code&gt; to make authenticated requests during SSR if you are not using &lt;code&gt;useFetch()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script setup lang=&#34;ts&#34;&amp;gt;&#xA;// When using useAsyncData&#xA;const { data } = await useAsyncData(&#39;team&#39;, () =&amp;gt; useRequestFetch()(&#39;/api/protected-endpoint&#39;))&#xA;&#xA;// useFetch will automatically use useRequestFetch during SSR&#xA;const { data } = await useFetch(&#39;/api/protected-endpoint&#39;)&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There&#39;s &lt;a href=&#34;https://github.com/nuxt/nuxt/issues/24813&#34;&gt;an open issue&lt;/a&gt; to include credentials in &lt;code&gt;$fetch&lt;/code&gt; in Nuxt.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Hybrid Rendering&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://nuxt.com/docs/guide/concepts/rendering#hybrid-rendering&#34;&gt;Nuxt &lt;code&gt;routeRules&lt;/code&gt;&lt;/a&gt; to prerender or cache your pages, Nuxt Auth Utils will not fetch the user session during prerendering but instead fetch it on the client-side (after hydration).&lt;/p&gt; &#xA;&lt;p&gt;This is because the user session is stored in a secure cookie and cannot be accessed during prerendering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This means that you should not rely on the user session during prerendering.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;AuthState&amp;gt;&lt;/code&gt; component&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;&amp;lt;AuthState&amp;gt;&lt;/code&gt; component to safely display auth-related data in your components without worrying about the rendering mode.&lt;/p&gt; &#xA;&lt;p&gt;One common use case if the Login button in the header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;header&amp;gt;&#xA;    &amp;lt;AuthState v-slot=&#34;{ loggedIn, clear }&#34;&amp;gt;&#xA;      &amp;lt;button v-if=&#34;loggedIn&#34; @click=&#34;clear&#34;&amp;gt;Logout&amp;lt;/button&amp;gt;&#xA;      &amp;lt;NuxtLink v-else to=&#34;/login&#34;&amp;gt;Login&amp;lt;/NuxtLink&amp;gt;&#xA;    &amp;lt;/AuthState&amp;gt;&#xA;  &amp;lt;/header&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the page is cached or prerendered, nothing will be rendered until the user session is fetched on the client-side.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;placeholder&lt;/code&gt; slot to show a placeholder on server-side and while the user session is being fetched on client-side for the prerendered pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;header&amp;gt;&#xA;    &amp;lt;AuthState&amp;gt;&#xA;      &amp;lt;template #default=&#34;{ loggedIn, clear }&#34;&amp;gt;&#xA;        &amp;lt;button v-if=&#34;loggedIn&#34; @click=&#34;clear&#34;&amp;gt;Logout&amp;lt;/button&amp;gt;&#xA;        &amp;lt;NuxtLink v-else to=&#34;/login&#34;&amp;gt;Login&amp;lt;/NuxtLink&amp;gt;&#xA;      &amp;lt;/template&amp;gt;&#xA;      &amp;lt;template #placeholder&amp;gt;&#xA;        &amp;lt;button disabled&amp;gt;Loading...&amp;lt;/button&amp;gt;&#xA;      &amp;lt;/template&amp;gt;&#xA;    &amp;lt;/AuthState&amp;gt;&#xA;  &amp;lt;/header&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are caching your routes with &lt;code&gt;routeRules&lt;/code&gt;, please make sure to use &lt;a href=&#34;https://github.com/unjs/nitro&#34;&gt;Nitro&lt;/a&gt; &amp;gt;= &lt;code&gt;2.9.7&lt;/code&gt; to support the client-side fetching of the user session.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;We leverage &lt;code&gt;runtimeConfig.session&lt;/code&gt; to give the defaults option to &lt;a href=&#34;https://h3.unjs.io/examples/handle-session&#34;&gt;h3 &lt;code&gt;useSession&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can overwrite the options in your &lt;code&gt;nuxt.config.ts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export default defineNuxtConfig({&#xA;  modules: [&#39;nuxt-auth-utils&#39;],&#xA;  runtimeConfig: {&#xA;    session: {&#xA;      maxAge: 60 * 60 * 24 * 7 // 1 week&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our defaults are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;{&#xA;  name: &#39;nuxt-session&#39;,&#xA;  password: process.env.NUXT_SESSION_PASSWORD || &#39;&#39;,&#xA;  cookie: {&#xA;    sameSite: &#39;lax&#39;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://github.com/unjs/h3/raw/c04c458810e34eb15c1647e1369e7d7ef19f567d/src/utils/session.ts#L20&#34;&gt;&lt;code&gt;SessionConfig&lt;/code&gt;&lt;/a&gt; for all options.&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/barbapapazes/nuxt-authorization&#34;&gt;nuxt-authorization&lt;/a&gt;: Authorization module for managing permissions inside a Nuxt app, compatible with &lt;code&gt;nuxt-auth-utils&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install dependencies&#xA;npm install&#xA;&#xA;# Generate type stubs&#xA;npm run dev:prepare&#xA;&#xA;# Develop with the playground&#xA;npm run dev&#xA;&#xA;# Build the playground&#xA;npm run dev:build&#xA;&#xA;# Run ESLint&#xA;npm run lint&#xA;&#xA;# Run Vitest&#xA;npm run test&#xA;npm run test:watch&#xA;&#xA;# Release new version&#xA;npm run release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- Badges --&gt;</summary>
  </entry>
</feed>