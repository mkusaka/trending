<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:49:16Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>figma/plugin-samples</title>
    <updated>2023-06-24T01:49:16Z</updated>
    <id>tag:github.com,2023-06-24:/figma/plugin-samples</id>
    <link href="https://github.com/figma/plugin-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üîå Sample Figma plugins.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üç± Figma + FigJam Plugin Samples&lt;/h1&gt; &#xA;&lt;p&gt;Sample plugins using the &lt;a href=&#34;https://www.figma.com/plugin-docs/figma-figjam-plugins/&#34;&gt;Figma + FigJam Plugin API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To make a feature request, file a bug report, or ask a question about developing plugins, check out the available &lt;a href=&#34;https://www.figma.com/plugin-docs/get-help&#34;&gt;resources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;These plugins are written using &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; to take advantage of Figma&#39;s typed plugin API. Before installing these samples as development plugins, you&#39;ll need to compile the code using the TypeScript compiler. Typescript can also watch your code for changes as you&#39;re developing, making it easy to test new changes to your code in Figma.&lt;/p&gt; &#xA;&lt;p&gt;To install TypeScript, first &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;install Node.js&lt;/a&gt;. Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install -g typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next install the packages that the samples depend on. Currently, this will only install the lastest version of the Figma typings file. Most of the samples will reference this shared typings file in their &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, to compile the Bar Chart sample plugin (for example):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd barchart&#xA;$ tsc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can import the Bar Chart plugin from within the Figma desktop app (&lt;code&gt;Plugins &amp;gt; Development &amp;gt; Import plugin from manifest...&lt;/code&gt; from the right-click menu)!&lt;/p&gt; &#xA;&lt;p&gt;The code for each plugin is in &lt;code&gt;code.ts&lt;/code&gt; in that plugin&#39;s subdirectory. If a plugin shows some UI, the HTML will be in &lt;code&gt;ui.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the code for the Bar Chart sample plugin is in &lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/barchart/code.ts&#34;&gt;barchart/code.ts&lt;/a&gt;, and the HTML for its UI is in &lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/barchart/ui.html&#34;&gt;barchart/ui.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Styling your plugin UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/#examples-with-a-plugin-ui&#34;&gt;For plugins that have a UI&lt;/a&gt;, we recommend matching the style and behavior of Figma. Many other plugins follow this convention and it helps create consistency in the plugin experience for users as they use different plugins. Here&#39;s a few approaches that can help when styling your UI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomas-lowry/figma-plugin-ds&#34;&gt;Figma Plugin DS&lt;/a&gt; A lightweight UI library for styling Figma plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yuanqing.github.io/create-figma-plugin/#using-the-preact-component-library&#34;&gt;Create Figma Plugin UI&lt;/a&gt; - A library of production-grade &lt;a href=&#34;https://preactjs.com/&#34;&gt;Preact&lt;/a&gt; components that replicate the Figma editor‚Äôs UI design&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FigJam Plugins&lt;/h1&gt; &#xA;&lt;p&gt;The following sample plugins use the new FigJam node types (&lt;a href=&#34;https://www.figma.com/plugin-docs/api/StickyNode/&#34;&gt;stickies&lt;/a&gt;, &lt;a href=&#34;https://www.figma.com/plugin-docs/api/ShapeWithTextNode/&#34;&gt;shapes with text&lt;/a&gt;, &lt;a href=&#34;https://www.figma.com/plugin-docs/api/ConnectorNode/&#34;&gt;connectors&lt;/a&gt;, and &lt;a href=&#34;https://www.figma.com/plugin-docs/api/StampNode/&#34;&gt;stamps&lt;/a&gt;) and so work best &lt;strong&gt;in FigJam&lt;/strong&gt;, i.e. with an editorType of &#39;figjam&#39; in your manifest.json file.&lt;/p&gt; &#xA;&lt;h3&gt;Vote Tally&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/vote-tally.gif&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;This plugin will find all stamps close to a sticky and generate a tally of all the stamps (votes) next to a sticky on the page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/vote-tally/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Create Shapes + Connectors&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/create-shapes-connectors.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;This plugin creates 5 &lt;code&gt;ROUNDED_RECTANGLE&lt;/code&gt; Shapes with Text nodes and adds a Connector node in between each of them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/create-shapes-connectors/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Additional Examples&lt;/h1&gt; &#xA;&lt;p&gt;The following sample plugins work in both Figma and FigJam.&lt;/p&gt; &#xA;&lt;h2&gt;Conditional Plugins&lt;/h2&gt; &#xA;&lt;p&gt;You can create plugins that have conditional logic depending on whether they are run in Figma, or FigJam.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/create-rects-shapes.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;When this plugin runs in Figma, it opens a window to prompt the user to enter a number, and it will then create that many rectangles on the screen.&lt;/p&gt; &#xA;&lt;p&gt;When this plugin runs in FigJam, it opens a window to prompt the user to enter a number, and it will then create that many &lt;code&gt;ROUNDED_RECTANGLE&lt;/code&gt; shapes with text nodes, and also adds a connector node in between each shape.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/create-rects-shapes/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples without a plugin UI&lt;/h2&gt; &#xA;&lt;h3&gt;Circle Text&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/circletext.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Takes a single text node selected by the user and creates a copy with the characters arranged in a circle.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/circletext/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Invert Image Color&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/invert-image.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Takes image fills in the current selection and inverts their colors.&lt;/p&gt; &#xA;&lt;p&gt;This demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;how to read/write images stored in a Figma document, and&lt;/li&gt; &#xA; &lt;li&gt;how to use &lt;code&gt;showUI&lt;/code&gt; to access browser APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/invert-image/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Meta Cards&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/metacards.gif&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;This plugin will find links within a text node and create on canvas meta cards of an image, title, description and link based on the &#xA; &lt;meta&gt; tags in the head of a webpage at the relative links.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/metacards/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sierpinski&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/sierpinski.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Generates a fractal using circles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/sierpinski/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Vector Path&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/vector-path.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Generates a triangle using vector paths.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/vector-path/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples with a plugin UI&lt;/h2&gt; &#xA;&lt;h3&gt;Bar Chart&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/barchart.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Generates a bar chart given user input in a modal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/barchart/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Document Statistics&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/stats.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Computes a count of the nodes of each &lt;code&gt;NodeType&lt;/code&gt; in the current document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/stats/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pie Chart&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/piechart.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Generates a pie chart given user input in a modal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/piechart/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text Search&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/text-search.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Searches for text in the document, given a query by the user in a modal.&lt;/p&gt; &#xA;&lt;p&gt;This demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;advanced message passing between the main code and the plugin UI,&lt;/li&gt; &#xA; &lt;li&gt;how to keep Figma responsive during long-running operations, and&lt;/li&gt; &#xA; &lt;li&gt;how to use the viewport API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/text-search/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Icon Drag-and-Drop&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/icon-drag-and-drop.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Allows drag-and-drop of a simple icon library from a modal to the canvas.&lt;/p&gt; &#xA;&lt;p&gt;This demonstrates registering callbacks for drop events and communicating drop data from the plugin iframe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/icon-drag-and-drop/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Icon Drag-and-Drop Hosted&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/icon-drag-and-drop-hosted.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Allows drag-and-drop of a simple icon library from a modal running an externally-hosted UI to the canvas.&lt;/p&gt; &#xA;&lt;p&gt;This demonstrates registering callbacks for drop events and embedding drop data using the &lt;code&gt;dataTransfer&lt;/code&gt; object in the drop event.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/icon-drag-and-drop-hosted/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PNG Crop&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/png-crop.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Crops PNGs as they are dropped onto the canvas.&lt;/p&gt; &#xA;&lt;p&gt;This demonstrates registering callbacks for drop events and reading bytes from dropped files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/png-crop/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples of plugins for Dev Mode&lt;/h2&gt; &#xA;&lt;h3&gt;Codegen&lt;/h3&gt; &#xA;&lt;p&gt;An example of a plugin for codegen&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/codegen/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dev Mode&lt;/h3&gt; &#xA;&lt;p&gt;An example of a plugin configured to work in Figma design, Dev Mode inspect, &lt;em&gt;and&lt;/em&gt; run codegen.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/dev-mode/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples with variables&lt;/h2&gt; &#xA;&lt;h3&gt;Styles to Variables&lt;/h3&gt; &#xA;&lt;p&gt;An example of a plugin that converts Figma styles to variables&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/styles-to-variables/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Variables Import / Export&lt;/h3&gt; &#xA;&lt;p&gt;An example of a plugin that imports and exports variables&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/variables-import-export/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples with parameters&lt;/h2&gt; &#xA;&lt;h3&gt;Go To&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/goto.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;A plugin to quickly go to any layer or page in the Figma file.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to accept parameters as input to your plugin, take a look at &lt;a href=&#34;https://www.figma.com/plugin-docs/plugin-parameters&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/go-to/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Resizer&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/resizer.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Resizes a selected shape. There are two submenus, allowing for absolute resizing and relative resizing.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to accept parameters as input to your plugin, take a look at &lt;a href=&#34;https://www.figma.com/plugin-docs/plugin-parameters&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/resizer/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SVG Inserter&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/svg-inserter.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Inserts an SVG icon into the canvas.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to accept parameters as input to your plugin, take a look at &lt;a href=&#34;https://www.figma.com/plugin-docs/plugin-parameters&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/svg-inserter/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text Review&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/text-review.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Example of how to use the text review API to suggest and flag changes while editing text nodes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/text-review/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trivia&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/trivia.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Generates a series of trivia questions taken from an external trivia API.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to accept parameters as input to your plugin, take a look at &lt;a href=&#34;https://www.figma.com/plugin-docs/plugin-parameters&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/trivia/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Post Message&lt;/h3&gt; &#xA;&lt;p&gt;A very basic example of how to communicate between a UI and the Figma canvas using postMessage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/post-message/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Capital&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/capital.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Finds the capital city of a country. This demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to make network requests to populate parameter suggestions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information on how to accept parameters as input to your plugin, take a look at &lt;a href=&#34;https://www.figma.com/plugin-docs/plugin-parameters&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/capital/&#34;&gt;Check out the source code.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples with bundling&lt;/h2&gt; &#xA;&lt;h3&gt;React&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/_screenshots/webpack.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;Create rectangles! This demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bundling plugin code using Webpack&lt;/li&gt; &#xA; &lt;li&gt;Using React with TSX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ npm install&#xA;    $ npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/esbuild-react/&#34;&gt;esbuild&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/figma/plugin-samples/master/webpack-react/&#34;&gt;Webpack&lt;/a&gt; examples are great places to start if you are interested in bundling.&lt;/p&gt; &#xA;&lt;h2&gt;Other Figma Plugin Samples + Starters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yuanqing.github.io/create-figma-plugin/&#34;&gt;Create Figma Plugin&lt;/a&gt; - A comprehensive toolkit for developing Figma plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomas-lowry/figma-plugin-boilerplate&#34;&gt;Figma Plugin Boilerplate&lt;/a&gt; - A starter project for creating Figma Plugins with HTML, CSS (+ SCSS) and vanilla Javascript without any frameworks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomas-lowry/figsvelte&#34;&gt;Figsvelte&lt;/a&gt; - A boilerplate for creating Figma plugins using Svelte.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rsms.me/figplug/&#34;&gt;Figplug&lt;/a&gt; - A small program for building Figma plugins. It offers all the things you need for most projects: TypeScript, React/JSX, asset bundling, plugin manifest generation, etc.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>devfullcycle/imersao13</title>
    <updated>2023-06-24T01:49:16Z</updated>
    <id>tag:github.com,2023-06-24:/devfullcycle/imersao13</id>
    <link href="https://github.com/devfullcycle/imersao13" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>a16z-infra/ai-getting-started</title>
    <updated>2023-06-24T01:49:16Z</updated>
    <id>tag:github.com,2023-06-24:/a16z-infra/ai-getting-started</id>
    <link href="https://github.com/a16z-infra/ai-getting-started" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Javascript AI getting started stack for weekend projects, including image/text models, vector stores, auth, and deployment configs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ai-getting-started.com/&#34;&gt;Live Demo (deployed on fly.io)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;1305&#34; alt=&#34;Screen Shot 2023-06-20 at 1 30 56 PM&#34; src=&#34;https://github.com/a16z-infra/ai-getting-started/assets/3489963/bcc762d2-68f5-4c4e-8c49-14602bee4995&#34;&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Auth: &lt;a href=&#34;https://clerk.com/&#34;&gt;Clerk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;App logic: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VectorDB: &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt; / &lt;a href=&#34;https://supabase.com/docs/guides/database/extensions/pgvector&#34;&gt;Supabase pgvector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LLM Orchestration: &lt;a href=&#34;https://js.langchain.com/docs/&#34;&gt;Langchain.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Image Model: &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Text Model: &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Text streaming: &lt;a href=&#34;https://github.com/vercel-labs/ai&#34;&gt;ai sdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deployment: &lt;a href=&#34;https://fly.io/&#34;&gt;Fly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üöÄ &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-getting-started/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíª &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-getting-started/main/#how-to-contribute-to-this-repo&#34;&gt;Contribute to this repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to try out this stack is to test it out locally and traverse through code files to understand how each component work. Here are the steps to get started.&lt;/p&gt; &#xA;&lt;h3&gt;1. Fork and Clone repo&lt;/h3&gt; &#xA;&lt;p&gt;Fork the repo to your Github account, then run the following command to clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:[YOUR_GITHUB_ACCOUNT_NAME]/ai-getting-started.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ai-getting-started&#xA;npm install &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Fill out secrets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.local.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;a. &lt;strong&gt;Clerk Secrets&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://dashboard.clerk.com/&#34;&gt;https://dashboard.clerk.com/&lt;/a&gt; -&amp;gt; &#34;Add Application&#34; -&amp;gt; Fill in Application name/select how your users should sign in -&amp;gt; Create Application Now you should see both &lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; on the screen &lt;img width=&#34;1011&#34; alt=&#34;clerk&#34; src=&#34;https://github.com/a16z-infra/ai-getting-started/assets/3489963/6ce72263-4e83-406d-838e-08a95ea79023&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;b. &lt;strong&gt;OpenAI API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt; to get your OpenAI API key&lt;/p&gt; &#xA;&lt;p&gt;c. &lt;strong&gt;Replicate API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://replicate.com/account/api-tokens&#34;&gt;https://replicate.com/account/api-tokens&lt;/a&gt; to get your Replicate API key&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; By default, this template uses Pinecone as vector store, but you can turn on Supabase pgvector easily. This means you only need to fill out either Pinecone API key &lt;em&gt;or&lt;/em&gt; Supabase API key.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;d. &lt;strong&gt;Pinecone API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Pinecone index by visiting &lt;a href=&#34;https://app.pinecone.io/&#34;&gt;https://app.pinecone.io/&lt;/a&gt; and click on &#34;Create Index&#34;&lt;/li&gt; &#xA; &lt;li&gt;Give it an index name (this will be the environment variable &lt;code&gt;PINECONE_INDEX&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fill in Dimension as &lt;code&gt;1536&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once the index is successfully created, click on &#34;API Keys&#34; on the left side nav and create an API key: copy &#34;Environment&#34; value to &lt;code&gt;PINECONE_ENVIRONMENT&lt;/code&gt; variable, and &#34;Value&#34; to &lt;code&gt;PINECONE_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;e. &lt;strong&gt;Supabase API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Supabase instance &lt;a href=&#34;https://supabase.com/dashboard/projects&#34;&gt;here&lt;/a&gt;; then go to Project Settings -&amp;gt; API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_URL&lt;/code&gt; is the URL value under &#34;Project URL&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_PRIVATE_KEY&lt;/code&gt; is the key starts with &lt;code&gt;ey&lt;/code&gt; under Project API Keys&lt;/li&gt; &#xA; &lt;li&gt;Now, you should enable pgvector on Supabase and create a schema. You can do this easily by clicking on &#34;SQL editor&#34; on the left hand side on supabase UI and then clicking on &#34;+New Query&#34;. Copy paste &lt;a href=&#34;https://github.com/a16z-infra/ai-getting-started/raw/main/pgvector.sql&#34;&gt;this code snippet&lt;/a&gt; in the SQL editor and click &#34;Run&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Generate embeddings&lt;/h3&gt; &#xA;&lt;p&gt;There are a few markdown files under &lt;code&gt;/blogs&lt;/code&gt; directory as examples so you can do Q&amp;amp;A on them. To generate embeddings and store them in the vector database for future queries, you can run the following command:&lt;/p&gt; &#xA;&lt;h4&gt;If using Pinecone&lt;/h4&gt; &#xA;&lt;p&gt;Run the following command to generate embeddings and store them in Pinecone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run generate-embeddings-pinecone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;If using Supabase pgvector&lt;/h4&gt; &#xA;&lt;p&gt;In &lt;code&gt;QAModel.tsx&lt;/code&gt;, replace &lt;code&gt;/api/qa-pinecone&lt;/code&gt; with &lt;code&gt;/api/qa-pg-vector&lt;/code&gt;. Then run the following command to generate embeddings and store them in Supabase pgvector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run generate-embeddings-supabase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Run app locally&lt;/h3&gt; &#xA;&lt;p&gt;Now you are ready to test out the app locally! To do this, simply run &lt;code&gt;npm run dev&lt;/code&gt; under the project root.&lt;/p&gt; &#xA;&lt;h3&gt;6. Deploy the app&lt;/h3&gt; &#xA;&lt;h4&gt;Deploy to fly.io&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register an account on fly.io and then &lt;a href=&#34;https://fly.io/docs/hands-on/install-flyctl/&#34;&gt;install flyctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;fly launch&lt;/code&gt; under project root -- this will generate a &lt;code&gt;fly.toml&lt;/code&gt; that includes all the configurations you will need&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;fly deploy -ha=false&lt;/code&gt; to deploy the app -- the -ha flag makes sure fly only spins up one instance, which is included in the free plan. You also want to run &lt;code&gt;fly scale memory 512&lt;/code&gt; to scale up the fly vm memory for this app.&lt;/li&gt; &#xA; &lt;li&gt;For any other non-localhost environment, the existing Clerk development instance should continue to work. You can upload the secrets to Fly by running &lt;code&gt;cat .env.local | fly secrets import&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you are ready to deploy to production, you should create a prod environment under the &lt;a href=&#34;https://dashboard.clerk.com/&#34;&gt;current Clerk instance&lt;/a&gt;. For more details on deploying a production app with Clerk, check out their documentation &lt;a href=&#34;https://clerk.com/docs/deployments/overview&#34;&gt;here&lt;/a&gt;. &lt;strong&gt;Note that you will likely need to manage your own domain and do domain verification as part of the process.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new file &lt;code&gt;.env.prod&lt;/code&gt; locally and fill in all the production-environment secrets. Remember to update &lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; by copying secrets from Clerk&#39;s production instance -&lt;code&gt;cat .env.prod | fly secrets import&lt;/code&gt; to upload secrets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other deployment options&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to contribute to this repo&lt;/h2&gt; &#xA;&lt;h3&gt;Code contribution workflow&lt;/h3&gt; &#xA;&lt;p&gt;You can fork this repo, make changes, and create a PR. Add &lt;strong&gt;@ykhli or @timqian&lt;/strong&gt; as reviewers.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to contributing on github, here is a step-by-step guide:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clcik on &lt;code&gt;Fork&lt;/code&gt; on the top right of this page&lt;/li&gt; &#xA; &lt;li&gt;Work on your change and push it to your forked repo. Now when you navigate to the forked repo&#39;s UI, you should see something like the following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;904&#34; alt=&#34;pr-preview&#34; src=&#34;https://github.com/a16z-infra/ai-getting-started/assets/3489963/631e5f45-39ec-4b54-b9d1-b963e279dcc6&#34;&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Click on &#34;Contribute&#34; -&amp;gt; &#34;Open Pull Request&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Once you have a PR, you can add reviewers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other contributions&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to open feature requests, bug reports etc under Issues.&lt;/p&gt; &#xA;&lt;h2&gt;Refs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pinecone&#34;&gt;https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pinecone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/models/llms/integrations#replicate&#34;&gt;https://js.langchain.com/docs/modules/models/llms/integrations#replicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/chains/index_related_chains/retrieval_qa&#34;&gt;https://js.langchain.com/docs/modules/chains/index_related_chains/retrieval_qa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>