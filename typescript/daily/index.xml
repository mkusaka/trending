<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-11T01:57:32Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>webfansplz/temir</title>
    <updated>2022-08-11T01:57:32Z</updated>
    <id>tag:github.com,2022-08-11:/webfansplz/temir</id>
    <link href="https://github.com/webfansplz/temir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vue for interactive command-line apps&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;img width=&#34;240&#34; alt=&#34;Ink&#34; src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/logo.svg?sanitize=true&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; English | &lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/README.zh-CN.md&#34;&gt;ç®€ä½“ä¸­æ–‡&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Vue for CLIs. Build your CLI output using components.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Temir provides the same component-based UI building experience that Vue offers in the browser, but for command-line apps.&lt;/p&gt; &#xA;&lt;p&gt;It uses &lt;a href=&#34;https://github.com/facebook/yoga&#34;&gt;Yoga&lt;/a&gt; to build Flexbox layouts in the terminal, so most CSS-like props are available in Temir as well. If you are already familiar with Vue, you already know Temir.&lt;/p&gt; &#xA;&lt;p&gt;Since Temir is a Vue renderer, it means that most of the features of Vue are supported. Head over to &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue&lt;/a&gt; website for documentation on how to use it. Only Temir&#39;s methods will be documented in this readme.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @temir/core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script lang=&#34;ts&#34; setup&amp;gt;&#xA;import { ref } from &#39;@vue/runtime-core&#39;&#xA;import { TBox, TText } from &#39;@temir/core&#39;&#xA;const counter = ref(0)&#xA;setInterval(() =&amp;gt; {&#xA;  counter.value++&#xA;}, 100)&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox&amp;gt;&#xA;    &amp;lt;TText color=&#34;green&#34;&amp;gt;&#xA;      {{ counter }} tests passed&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-demo.gif&#34;&gt; &#xA;&lt;h2&gt;HMR Support&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-hmr.gif&#34;&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/#components&#34;&gt;Components&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/#text&#34;&gt;&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/#box&#34;&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/#newline&#34;&gt;&lt;code&gt;&amp;lt;Newline&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/#spacer&#34;&gt;&lt;code&gt;&amp;lt;Spacer&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/packages/temir-link&#34;&gt;&lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/packages/temir-tab&#34;&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/packages/temir-spinner&#34;&gt;&lt;code&gt;&amp;lt;Spinner&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/packages/temir-select-input&#34;&gt;&lt;code&gt;&amp;lt;SelectInput&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ðŸ’» Still working and welcome to contribute.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/hi-temir&#34;&gt;hi-temir&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/hi-temir.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/borders&#34;&gt;borders&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-borders.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/table&#34;&gt;table&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-table.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/temir-link&#34;&gt;temir-link&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/packages/temir-link/media/temir-link.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/temir-spinner&#34;&gt;temir-spinner&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/packages/temir-spinner/media/temir-spinner.gif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/temir-tab&#34;&gt;temir-tab&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/packages/temir-tab/media/temir-tab.gif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/temir-select-input&#34;&gt;temir-select-input&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/packages/temir-select-input/media/temir-select-input.gif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/vitest&#34;&gt;Vitest&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-vitest.gif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;@temir/cli&lt;/code&gt; to quickly scaffold a new Temir-based CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&#xA;mkdir my-temir-cli&#xA;&#xA;cd my-temir-cli&#xA;&#xA;touch main.ts&#xA;&#xA;npm install @temir/cli&#xA;&#xA;# Dev&#xA;&#xA;temir main.ts&#xA;&#xA;# Build&#xA;&#xA;temir build main.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also check it out this &lt;a href=&#34;https://github.com/webfansplz/temir/tree/main/examples/hi-temir&#34;&gt;example&lt;/a&gt; to get started.Feel free to play around with the example and fork this repl at &lt;a href=&#34;https://replit.com/@webfansplz/hi-temir?v=1&#34;&gt;repl.it sandbox&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Temir uses Yoga - a Flexbox layout engine to build great user interfaces for your CLIs using familiar CSS-like props you&#39;ve used when building apps for the browser. It&#39;s important to remember that each element is a Flexbox container. Think of it as if each &lt;/p&gt;&#xA;&lt;div&gt;&#xA;  in the browser had display: flex. See &#xA; &lt;box&gt;&#xA;   built-in component below for documentation on how to use Flexbox layouts in Ink. Note that all text must be wrapped in a &#xA;  &lt;text&gt;&#xA;    component.&#xA;   &lt;p&gt;&lt;/p&gt; &#xA;   &lt;h2&gt;Components&lt;/h2&gt; &#xA;   &lt;h3&gt;&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;p&gt;This component can display text, and change its style to make it bold, underline, italic or strikethrough.&lt;/p&gt; &#xA;   &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-text-props.png&#34; alt=&#34;temir-text-props&#34;&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;TText color=&#34;green&#34;&amp;gt;&#xA;  I am green&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&amp;lt;TText color=&#34;black&#34; background-color=&#34;white&#34;&amp;gt;&#xA;  I am black on white&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&amp;lt;TText color=&#34;white&#34;&amp;gt;&#xA;  I am white&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&amp;lt;TText :bold=&#34;true&#34;&amp;gt;&#xA;  I am bold&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&amp;lt;TText :italic=&#34;true&#34;&amp;gt;&#xA;  I am italic&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&amp;lt;TText :underline=&#34;true&#34;&amp;gt;&#xA;  I am underline&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&amp;lt;TText :strikethrough=&#34;true&#34;&amp;gt;&#xA;  I am strikethrough&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&amp;lt;TText :inverse=&#34;true&#34;&amp;gt;&#xA;  I am inversed&#xA;&amp;lt;/TText&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; allows only text nodes and nested &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; components inside of it. For example, &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; component can&#39;t be used inside &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;h4&gt;color&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Change text color. Temir uses &lt;a href=&#34;https://github.com/chalk/chalk&#34;&gt;chalk&lt;/a&gt; under the hood, so all its functionality is supported.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;TBox flex-direction=&#34;column&#34;&amp;gt;&#xA;  &amp;lt;TText color=&#34;green&#34;&amp;gt;&#xA;    Green&#xA;  &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;TText color=&#34;blue&#34;&amp;gt;&#xA;    Blue&#xA;  &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;TText color=&#34;red&#34;&amp;gt;&#xA;    Red&#xA;  &amp;lt;/TText&amp;gt;&#xA;&amp;lt;/TBox&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-text-props-color.png&#34;&gt; &#xA;   &lt;h4&gt;backgroundColor&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Same as &lt;code&gt;color&lt;/code&gt; above, but for background.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;TBox flex-direction=&#34;column&#34;&amp;gt;&#xA;  &amp;lt;TText background-color=&#34;green&#34;&amp;gt;&#xA;    Green&#xA;  &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;TText background-color=&#34;blue&#34;&amp;gt;&#xA;    Blue&#xA;  &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;TText background-color=&#34;red&#34;&amp;gt;&#xA;    Red&#xA;  &amp;lt;/TText&amp;gt;&#xA;&amp;lt;/TBox&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-text-bg-color.png&#34;&gt; &#xA;   &lt;h4&gt;dimColor&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Dim the color (emit a small amount of light).&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;Text color=&#34;red&#34; dimColor&amp;gt;&#xA;&#x9;Dimmed Red&#xA;&amp;lt;/Text&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/temir-text-props-dimmed-color.png&#34;&gt; &#xA;   &lt;h4&gt;bold&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Make the text bold.&lt;/p&gt; &#xA;   &lt;h4&gt;italic&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Make the text italic.&lt;/p&gt; &#xA;   &lt;h4&gt;underline&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Make the text underlined.&lt;/p&gt; &#xA;   &lt;h4&gt;strikethrough&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Make the text crossed with a line.&lt;/p&gt; &#xA;   &lt;h4&gt;inverse&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Inverse background and foreground colors.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;TText color=&#34;yellow&#34; :inverse=&#34;true&#34;&amp;gt;&#xA;  Inversed Yellow&#xA;&amp;lt;/TText&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/media/text-inverse.png&#34;&gt; &#xA;   &lt;h4&gt;wrap&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;wrap&lt;/code&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;code&gt;truncate-start&lt;/code&gt; &lt;code&gt;truncate-middle&lt;/code&gt; &lt;code&gt;truncate-end&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;wrap&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;This property tells Temir to wrap or truncate text if its width is larger than container. If &lt;code&gt;wrap&lt;/code&gt; is passed (by default), Temir will wrap text and split it into multiple lines. If &lt;code&gt;truncate-*&lt;/code&gt; is passed, Temir will truncate text instead, which will result in one line of text with the rest cut off.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :width=&#34;7&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Hello World&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;Hello\nWorld&#39;&#xA;&#xA;  // `truncate` is an alias to `truncate-end`&#xA;  &amp;lt;TBox :width=&#34;7&#34;&amp;gt;&#xA;    &amp;lt;TText wrap=&#34;truncate&#34;&amp;gt;&#xA;      Hello World&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;Helloâ€¦&#39;&#xA;&#xA;  &amp;lt;TBox :width=&#34;7&#34;&amp;gt;&#xA;    &amp;lt;TText wrap=&#34;truncate-middle&#34;&amp;gt;&#xA;      Hello World&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;Heâ€¦ld&#39;&#xA;&#xA;  &amp;lt;TBox :width=&#34;7&#34;&amp;gt;&#xA;    &amp;lt;TText wrap=&#34;truncate-start&#34;&amp;gt;&#xA;      Hello World&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;â€¦World&#39;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h3&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;p&gt;&lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; is an essential Temir component to build your layout. It&#39;s like &lt;code&gt;&amp;lt;div style=&#34;display: flex&#34;&amp;gt;&lt;/code&gt; in the browser.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script&amp;gt;&#xA;import { TBox, TText } from &#39;@temir/core&#39;&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :margin=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;This is a box with margin&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h4&gt;Dimensions&lt;/h4&gt; &#xA;   &lt;h5&gt;width&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Width of the element in spaces. You can also set it in percent, which will calculate the width based on the width of parent element.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :width=&#34;4&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  //=&amp;gt; &#39;X   &#39;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :width=&#34;10&#34;&amp;gt;&#xA;    &amp;lt;TBox width=&#34;50%&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      Y&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  //=&amp;gt; &#39;X    Y&#39;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;height&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Height of the element in lines (rows). You can also set it in percent, which will calculate the height based on the height of parent element.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :height=&#34;4&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;X\n\n\n&#39;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :height=&#34;6&#34; flex-direction=&#34;column&#34;&amp;gt;&#xA;    &amp;lt;TBox height=&#34;50%&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      Y&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;X\n\n\nY\n\n&#39;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;minWidth&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Sets a minimum width of the element. Percentages aren&#39;t supported yet, see &lt;a href=&#34;https://github.com/facebook/yoga/issues/872&#34;&gt;https://github.com/facebook/yoga/issues/872&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;h5&gt;minHeight&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Sets a minimum height of the element. Percentages aren&#39;t supported yet, see &lt;a href=&#34;https://github.com/facebook/yoga/issues/872&#34;&gt;https://github.com/facebook/yoga/issues/872&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;h4&gt;Padding&lt;/h4&gt; &#xA;   &lt;h5&gt;paddingTop&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Top padding.&lt;/p&gt; &#xA;   &lt;h5&gt;paddingBottom&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Bottom padding.&lt;/p&gt; &#xA;   &lt;h5&gt;paddingLeft&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Left padding.&lt;/p&gt; &#xA;   &lt;h5&gt;paddingRight&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Right padding.&lt;/p&gt; &#xA;   &lt;h5&gt;paddingX&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Horizontal padding. Equivalent to setting &lt;code&gt;paddingLeft&lt;/code&gt; and &lt;code&gt;paddingRight&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;h5&gt;paddingY&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Vertical padding. Equivalent to setting &lt;code&gt;paddingTop&lt;/code&gt; and &lt;code&gt;paddingBottom&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;h5&gt;padding&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Padding on all sides. Equivalent to setting &lt;code&gt;paddingTop&lt;/code&gt;, &lt;code&gt;paddingBottom&lt;/code&gt;, &lt;code&gt;paddingLeft&lt;/code&gt; and &lt;code&gt;paddingRight&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :padding-top=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Top&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :padding-bottom=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Bottom&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :padding-left=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Left&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :padding-right=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Right&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :padding-x=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Left and right&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :padding-y=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Top and bottom&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :padding=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Top, bottom, left and right&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h4&gt;Margin&lt;/h4&gt; &#xA;   &lt;h5&gt;marginTop&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Top margin.&lt;/p&gt; &#xA;   &lt;h5&gt;marginBottom&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Bottom margin.&lt;/p&gt; &#xA;   &lt;h5&gt;marginLeft&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Left margin.&lt;/p&gt; &#xA;   &lt;h5&gt;marginRight&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Right margin.&lt;/p&gt; &#xA;   &lt;h5&gt;marginX&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Horizontal margin. Equivalent to setting &lt;code&gt;marginLeft&lt;/code&gt; and &lt;code&gt;marginRight&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;h5&gt;marginY&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Vertical margin. Equivalent to setting &lt;code&gt;marginTop&lt;/code&gt; and &lt;code&gt;marginBottom&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;h5&gt;margin&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Margin on all sides. Equivalent to setting &lt;code&gt;marginTop&lt;/code&gt;, &lt;code&gt;marginBottom&lt;/code&gt;, &lt;code&gt;marginLeft&lt;/code&gt; and &lt;code&gt;marginRight&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :margin-top=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Top&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :margin-bottom=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Bottom&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :margin-left=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Left&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :margin-right=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Right&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :margin-x=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Left and right&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :margin-y=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Top and bottom&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&#xA;  &amp;lt;TBox :margin=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Top, bottom, left and right&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h4&gt;Flex&lt;/h4&gt; &#xA;   &lt;h5&gt;flexGrow&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-grow/&#34;&gt;flex-grow&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Label:&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TBox :flex-grow=&#34;1&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;Fills all remaining space&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;flexShrink&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;1&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-shrink/&#34;&gt;flex-shrink&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :width=&#34;20&#34;&amp;gt;&#xA;    &amp;lt;TBox :flex-shrink=&#34;2&#34; :width=&#34;10&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;Will be 1/4&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TBox :width=&#34;10&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;Will be 3/4&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;flexBasis&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-basis/&#34;&gt;flex-basis&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :width=&#34;6&#34;&amp;gt;&#xA;    &amp;lt;TBox :flex-basis=&#34;3&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      Y&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;X  Y&#39;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :width=&#34;6&#34;&amp;gt;&#xA;    &amp;lt;TBox flex-basis=&#34;50%&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      Y&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //=&amp;gt; &#39;X  Y&#39;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;flexDirection&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;row&lt;/code&gt; &lt;code&gt;row-reverse&lt;/code&gt; &lt;code&gt;column&lt;/code&gt; &lt;code&gt;column-reverse&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/f/flex-direction/&#34;&gt;flex-direction&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox&amp;gt;&#xA;    &amp;lt;TBox :margin-right=&#34;1&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      Y&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // X Y&#xA;&#xA;  &amp;lt;TBox flex-direction=&#34;row-reverse&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TBox :margin-right=&#34;1&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;Y&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // Y X&#xA;&#xA;  &amp;lt;TBox flex-direction=&#34;column&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Y&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // X&#xA;  // Y&#xA;&#xA;  &amp;lt;TBox flex-direction=&#34;column-reverse&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Y&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // Y&#xA;  // X&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;alignItems&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;flex-start&lt;/code&gt; &lt;code&gt;center&lt;/code&gt; &lt;code&gt;flex-end&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/a/align-items/&#34;&gt;align-items&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox align-items=&#34;flex-start&#34;&amp;gt;&#xA;    &amp;lt;TBox :margin-right=&#34;1&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      A&#xA;      &amp;lt;TNewline /&amp;gt;&#xA;      B&#xA;      &amp;lt;TNewline /&amp;gt;&#xA;      C&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // X A&#xA;  //   B&#xA;  //   C&#xA;&#xA;  &amp;lt;TBox align-items=&#34;center&#34;&amp;gt;&#xA;    &amp;lt;TBox margin-right=&#34;1&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      A&#xA;      &amp;lt;TNewline /&amp;gt;&#xA;      B&#xA;      &amp;lt;TNewline /&amp;gt;&#xA;      C&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //   A&#xA;  // X B&#xA;  //   C&#xA;&#xA;  &amp;lt;TBox align-items=&#34;flex-end&#34;&amp;gt;&#xA;    &amp;lt;TBox margin-right=&#34;1&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TText&amp;gt;&#xA;      A&#xA;      &amp;lt;TNewline /&amp;gt;&#xA;      B&#xA;      &amp;lt;TNewline /&amp;gt;&#xA;      C&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //   A&#xA;  //   B&#xA;  // X C&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;alignSelf&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;auto&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;auto&lt;/code&gt; &lt;code&gt;flex-start&lt;/code&gt; &lt;code&gt;center&lt;/code&gt; &lt;code&gt;flex-end&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/a/align-self/&#34;&gt;align-self&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox :height=&#34;3&#34;&amp;gt;&#xA;    &amp;lt;TBox align-self=&#34;flex-start&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // X&#xA;  //&#xA;  //&#xA;&#xA;  &amp;lt;TBox :height=&#34;3&#34;&amp;gt;&#xA;    &amp;lt;TBox align-self=&#34;center&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //&#xA;  // X&#xA;  //&#xA;&#xA;  &amp;lt;TBox :height=&#34;3&#34;&amp;gt;&#xA;    &amp;lt;TBox align-self=&#34;flex-end&#34;&amp;gt;&#xA;      &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  //&#xA;  //&#xA;  // X&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;justifyContent&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;flex-start&lt;/code&gt; &lt;code&gt;center&lt;/code&gt; &lt;code&gt;flex-end&lt;/code&gt; &lt;code&gt;space-between&lt;/code&gt; &lt;code&gt;space-around&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://css-tricks.com/almanac/properties/j/justify-content/&#34;&gt;justify-content&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox justify-content=&#34;flex-start&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // [X      ]&#xA;&#xA;  &amp;lt;TBox justify-content=&#34;center&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // [   X   ]&#xA;&#xA;  &amp;lt;TBox justify-content=&#34;flex-end&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // [      X]&#xA;&#xA;  &amp;lt;TBox justify-content=&#34;space-between&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Y&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // [X      Y]&#xA;&#xA;  &amp;lt;TBox justify-content=&#34;space-around&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;X&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Y&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;  // [  X   Y  ]&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h4&gt;Visibility&lt;/h4&gt; &#xA;   &lt;h5&gt;display&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;flex&lt;/code&gt; &lt;code&gt;none&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;flex&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Set this property to &lt;code&gt;none&lt;/code&gt; to hide the element.&lt;/p&gt; &#xA;   &lt;h4&gt;Borders&lt;/h4&gt; &#xA;   &lt;h5&gt;borderStyle&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Allowed values: &lt;code&gt;single&lt;/code&gt; &lt;code&gt;double&lt;/code&gt; &lt;code&gt;round&lt;/code&gt; &lt;code&gt;bold&lt;/code&gt; &lt;code&gt;singleDouble&lt;/code&gt; &lt;code&gt;doubleSingle&lt;/code&gt; &lt;code&gt;classic&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Add a border with a specified style. If &lt;code&gt;borderStyle&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; (which it is by default), no border will be added. Temir uses border styles from &lt;a href=&#34;https://github.com/sindresorhus/cli-boxes&#34;&gt;&lt;code&gt;cli-boxes&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox flex-direction=&#34;column&#34;&amp;gt;&#xA;    &amp;lt;TBox&amp;gt;&#xA;      &amp;lt;TBox border-style=&#34;single&#34; :margin-right=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;TText&amp;gt;single&amp;lt;/TText&amp;gt;&#xA;      &amp;lt;/TBox&amp;gt;&#xA;&#xA;      &amp;lt;TBox border-style=&#34;double&#34; :margin-right=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;TText&amp;gt;double&amp;lt;/TText&amp;gt;&#xA;      &amp;lt;/TBox&amp;gt;&#xA;&#xA;      &amp;lt;TBox border-style=&#34;round&#34; :margin-right=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;TText&amp;gt;round&amp;lt;/TText&amp;gt;&#xA;      &amp;lt;/TBox&amp;gt;&#xA;&#xA;      &amp;lt;TBox border-style=&#34;bold&#34;&amp;gt;&#xA;        &amp;lt;TText&amp;gt;bold&amp;lt;/TText&amp;gt;&#xA;      &amp;lt;/TBox&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;&#xA;    &amp;lt;TBox :margin-top=&#34;1&#34;&amp;gt;&#xA;      &amp;lt;TBox border-style=&#34;singleDouble&#34; :margin-right=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;TText&amp;gt;singleDouble&amp;lt;/TText&amp;gt;&#xA;      &amp;lt;/TBox&amp;gt;&#xA;&#xA;      &amp;lt;TBox border-style=&#34;doubleSingle&#34; :margin-right=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;TText&amp;gt;doubleSingle&amp;lt;/TText&amp;gt;&#xA;      &amp;lt;/TBox&amp;gt;&#xA;&#xA;      &amp;lt;TBox border-style=&#34;classic&#34;&amp;gt;&#xA;        &amp;lt;TText&amp;gt;classic&amp;lt;/TText&amp;gt;&#xA;      &amp;lt;/TBox&amp;gt;&#xA;    &amp;lt;/TBox&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;borderColor&lt;/h5&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Change border color. Accepts the same values as &lt;a href=&#34;https://raw.githubusercontent.com/webfansplz/temir/main/#color&#34;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox border-style=&#34;round&#34; border-color=&#34;green&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Green Rounded Box&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h3&gt;&lt;code&gt;&amp;lt;Newline&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;p&gt;Adds one or more newline (&lt;code&gt;\n&lt;/code&gt;) characters. Must be used within &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; components.&lt;/p&gt; &#xA;   &lt;h4&gt;count&lt;/h4&gt; &#xA;   &lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;1&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Number of newlines to insert.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script&amp;gt;&#xA;import { TBox, TNewline, TText } from &#39;@temir/core&#39;&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox&amp;gt;&#xA;    &amp;lt;TText&amp;gt;&#xA;      &amp;lt;TText color=&#34;green&#34;&amp;gt;&#xA;        Hello&#xA;      &amp;lt;/TText&amp;gt;&#xA;      &amp;lt;TNewline /&amp;gt;&#xA;      &amp;lt;TText color=&#34;red&#34;&amp;gt;&#xA;        World&#xA;      &amp;lt;/TText&amp;gt;&#xA;    &amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Output:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code&gt;Hello&#xA;World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h3&gt;&lt;code&gt;&amp;lt;Spacer&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;p&gt;A flexible space that expands along the major axis of its containing layout. It&#39;s useful as a shortcut for filling all the available spaces between elements.&lt;/p&gt; &#xA;   &lt;p&gt;For example, using &lt;code&gt;&amp;lt;Spacer&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; with default flex direction (&lt;code&gt;row&lt;/code&gt;) will position &#34;Left&#34; on the left side and will push &#34;Right&#34; to the right side.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script lang=&#34;ts&#34; setup&amp;gt;&#xA;import { TBox, TSpacer, TText } from &#39;@temir/core&#39;&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Left&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TSpacer /&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Right&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;In a vertical flex direction (&lt;code&gt;column&lt;/code&gt;), it will position &#34;Top&#34; to the top of the container and push &#34;Bottom&#34; to the bottom of it. Note, that container needs to be tall to enough to see this in effect.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script lang=&#34;ts&#34; setup&amp;gt;&#xA;import { TBox, TSpacer, TText } from &#39;@temir/core&#39;&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;TBox flex-direction=&#34;column&#34; :height=&#34;10&#34;&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Top&amp;lt;/TText&amp;gt;&#xA;    &amp;lt;TSpacer /&amp;gt;&#xA;    &amp;lt;TText&amp;gt;Bottom&amp;lt;/TText&amp;gt;&#xA;  &amp;lt;/TBox&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h2&gt;Credits&lt;/h2&gt; &#xA;   &lt;p&gt;This project is highly inspired by &lt;a href=&#34;https://github.com/vadimdemedes/ink&#34;&gt;ink&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://github.com/antfu/vite-node&#34;&gt;vite-node&lt;/a&gt; made the HMR support easily&lt;/p&gt; &#xA;  &lt;/text&gt;&#xA; &lt;/box&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>pacocoursey/cmdk</title>
    <updated>2022-08-11T01:57:32Z</updated>
    <id>tag:github.com,2022-08-11:/pacocoursey/cmdk</id>
    <link href="https://github.com/pacocoursey/cmdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, unstyled command menu React component.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pacocoursey/cmdk/main/website/public/og.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;âŒ˜K &lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/cmdk&#34; alt=&#34;cmdk minzip package size&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/cmdk.svg?colorB=green&#34; alt=&#34;cmdk package version&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;âŒ˜K is a command menu React component that can also be used as an accessible combobox. You render items, it filters and sorts them automatically. âŒ˜K supports a fully composable API &lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pacocoursey/cmdk/main/ARCHITECTURE.md&#34;&gt;How?&lt;/a&gt;&lt;/sup&gt;, so you can wrap items in other components or even as static JSX.&lt;/p&gt; &#xA;&lt;p&gt;Demo and examples: &lt;a href=&#34;https://cmdk.paco.me&#34;&gt;cmdk.paco.me&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install cmdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { Command } from &#39;cmdk&#39;&#xA;&#xA;const CommandMenu = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;Command label=&#34;Command Menu&#34;&amp;gt;&#xA;      &amp;lt;Command.Input /&amp;gt;&#xA;      &amp;lt;Command.List&amp;gt;&#xA;        &amp;lt;Command.Empty&amp;gt;No results found.&amp;lt;/Command.Empty&amp;gt;&#xA;&#xA;        &amp;lt;Command.Group heading=&#34;Letters&#34;&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;a&amp;lt;/Command.Item&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;b&amp;lt;/Command.Item&amp;gt;&#xA;          &amp;lt;Command.Separator /&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;c&amp;lt;/Command.Item&amp;gt;&#xA;        &amp;lt;/Command.Group&amp;gt;&#xA;&#xA;        &amp;lt;Command.Item&amp;gt;Apple&amp;lt;/Command.Item&amp;gt;&#xA;      &amp;lt;/Command.List&amp;gt;&#xA;    &amp;lt;/Command&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in a dialog:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { Command } from &#39;cmdk&#39;&#xA;&#xA;const CommandMenu = () =&amp;gt; {&#xA;  const [open, setOpen] = React.useState(false)&#xA;&#xA;  // Toggle the menu when âŒ˜K is pressed&#xA;  React.useEffect(() =&amp;gt; {&#xA;    const down = (e) =&amp;gt; {&#xA;      if (e.key === &#39;k&#39; &amp;amp;&amp;amp; e.metaKey) {&#xA;        setOpen((open) =&amp;gt; !open)&#xA;      }&#xA;    }&#xA;&#xA;    document.addEventListener(&#39;keydown&#39;, down)&#xA;    return () =&amp;gt; document.removeEventListener(&#39;keydown&#39;, down)&#xA;  }, [])&#xA;&#xA;  return (&#xA;    &amp;lt;Command.Dialog open={open} onOpenChange={setOpen} label=&#34;Global Command Menu&#34;&amp;gt;&#xA;      &amp;lt;Command.Input /&amp;gt;&#xA;      &amp;lt;Command.List&amp;gt;&#xA;        &amp;lt;Command.Empty&amp;gt;No results found.&amp;lt;/Command.Empty&amp;gt;&#xA;&#xA;        &amp;lt;Command.Group heading=&#34;Letters&#34;&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;a&amp;lt;/Command.Item&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;b&amp;lt;/Command.Item&amp;gt;&#xA;          &amp;lt;Command.Separator /&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;c&amp;lt;/Command.Item&amp;gt;&#xA;        &amp;lt;/Command.Group&amp;gt;&#xA;&#xA;        &amp;lt;Command.Item&amp;gt;Apple&amp;lt;/Command.Item&amp;gt;&#xA;      &amp;lt;/Command.List&amp;gt;&#xA;    &amp;lt;/Command.Dialog&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parts and styling&lt;/h2&gt; &#xA;&lt;p&gt;All parts forward props, including &lt;code&gt;ref&lt;/code&gt;, to an appropriate element. Each part has a specific data-attribute (starting with &lt;code&gt;cmdk-&lt;/code&gt;) that can be used for styling.&lt;/p&gt; &#xA;&lt;h3&gt;Command &lt;code&gt;[cmdk-root]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Render this to show the command menu inline, or use &lt;a href=&#34;https://raw.githubusercontent.com/pacocoursey/cmdk/main/#dialog-cmdk-dialog-cmdk-overlay&#34;&gt;Dialog&lt;/a&gt; to render in a elevated context. Can be controlled with the &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onValueChange&lt;/code&gt; props.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Values are always converted to lowercase and trimmed. Use &lt;code&gt;apple&lt;/code&gt;, not &lt;code&gt;Apple&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const [value, setValue] = React.useState(&#39;apple&#39;)&#xA;&#xA;return (&#xA;  &amp;lt;Command value={value} onValueChange={setValue}&amp;gt;&#xA;    &amp;lt;Command.Input /&amp;gt;&#xA;    &amp;lt;Command.List&amp;gt;&#xA;      &amp;lt;Command.Item&amp;gt;Orange&amp;lt;/Command.Item&amp;gt;&#xA;      &amp;lt;Command.Item&amp;gt;Apple&amp;lt;/Command.Item&amp;gt;&#xA;    &amp;lt;/Command.List&amp;gt;&#xA;  &amp;lt;/Command&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide a custom &lt;code&gt;filter&lt;/code&gt; function that is called to rank each item. Both strings are normalized as lowercase and trimmed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Command&#xA;  filter={(value, search) =&amp;gt; {&#xA;    if (value.includes(search)) return 1&#xA;    return 0&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or disable filtering and sorting entirely:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Command shouldFilter={false}&amp;gt;&#xA;  &amp;lt;Command.List&amp;gt;&#xA;    {filteredItems.map((item) =&amp;gt; {&#xA;      return (&#xA;        &amp;lt;Command.Item key={item} value={item}&amp;gt;&#xA;          {item}&#xA;        &amp;lt;/Command.Item&amp;gt;&#xA;      )&#xA;    })}&#xA;  &amp;lt;/Command.List&amp;gt;&#xA;&amp;lt;/Command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dialog &lt;code&gt;[cmdk-dialog]&lt;/code&gt; &lt;code&gt;[cmdk-overlay]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Props are forwarded to &lt;a href=&#34;https://raw.githubusercontent.com/pacocoursey/cmdk/main/#command-cmdk-root&#34;&gt;Command&lt;/a&gt;. Composes Radix UI&#39;s Dialog component. The overlay is always rendered. See the &lt;a href=&#34;https://www.radix-ui.com/docs/primitives/components/dialog&#34;&gt;Radix Documentation&lt;/a&gt; for more information. Can be controlled with the &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;onOpenChange&lt;/code&gt; props.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const [open, setOpen] = React.useState(false)&#xA;&#xA;return (&#xA;  &amp;lt;Command.Dialog open={open} onOpenChange={setOpen}&amp;gt;&#xA;    ...&#xA;  &amp;lt;/Command.Dialog&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Input &lt;code&gt;[cmdk-input]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;All props are forwarded to the underlying &lt;code&gt;input&lt;/code&gt; element. Can be controlled with the &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onValueChange&lt;/code&gt; props.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const [search, setSearch] = React.useState(&#39;&#39;)&#xA;&#xA;return &amp;lt;Command.Input value={search} onValueChange={setSearch} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List &lt;code&gt;[cmdk-list]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Contains items and groups. Animate height using the &lt;code&gt;--cmdk-list-height&lt;/code&gt; CSS variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;[cmdk-list] {&#xA;  min-height: 300px;&#xA;  height: var(--cmdk-list-height);&#xA;  max-height: 500px;&#xA;  transition: height 100ms ease;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To scroll item into view earlier near the edges of the viewport, use scroll-padding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;[cmdk-list] {&#xA;  scroll-padding-block-start: 8px;&#xA;  scroll-padding-block-end: 8px;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Item &lt;code&gt;[cmdk-item]&lt;/code&gt; &lt;code&gt;[aria-disabled?]&lt;/code&gt; &lt;code&gt;[aria-selected?]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Item that becomes active on pointer enter. You should provide a unique &lt;code&gt;value&lt;/code&gt; for each item, but it will be automatically inferred from the &lt;code&gt;.textContent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Command.Item&#xA;  onSelect={(value) =&amp;gt; console.log(&#39;Selected&#39;, value)}&#xA;  // Value is implicity &#34;apple&#34; because of the provided text content&#xA;&amp;gt;&#xA;  Apple&#xA;&amp;lt;/Command.Item&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Group &lt;code&gt;[cmdk-group]&lt;/code&gt; &lt;code&gt;[hidden?]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Groups items together with the given &lt;code&gt;heading&lt;/code&gt; (&lt;code&gt;[cmdk-group-heading]&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Command.Group heading=&#34;Fruit&#34;&amp;gt;&#xA;  &amp;lt;Command.Item&amp;gt;Apple&amp;lt;/Command.Item&amp;gt;&#xA;&amp;lt;/Command.Group&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Groups will not unmount from the DOM, rather the &lt;code&gt;hidden&lt;/code&gt; attribute is applied to hide it from view. This may be relevant in your styling.&lt;/p&gt; &#xA;&lt;h3&gt;Separator &lt;code&gt;[cmdk-separator]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Visible when the search query is empty or &lt;code&gt;alwaysRender&lt;/code&gt; is true, hidden otherwise.&lt;/p&gt; &#xA;&lt;h3&gt;Empty &lt;code&gt;[cmdk-empty]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Automatically renders when there are no results for the search query.&lt;/p&gt; &#xA;&lt;h3&gt;Loading &lt;code&gt;[cmdk-loading]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You should conditionally render this with &lt;code&gt;progress&lt;/code&gt; while loading asynchronous items.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const [loading, setLoading] = React.useState(false)&#xA;&#xA;return &amp;lt;Command.List&amp;gt;{loading &amp;amp;&amp;amp; &amp;lt;Command.Loading&amp;gt;Hang onâ€¦&amp;lt;/Command.Loading&amp;gt;}&amp;lt;/Command.List&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;useCmdk(state =&amp;gt; state.selectedField)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Hook that composes &lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore&#34;&gt;&lt;code&gt;useSyncExternalStore&lt;/code&gt;&lt;/a&gt;. Pass a function that returns a slice of the command menu state to re-render when that slice changes. This hook is provided for advanced use cases and should not be commonly used.&lt;/p&gt; &#xA;&lt;p&gt;A good use case would be to render a more detailed empty state, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const search = useCmdk((state) =&amp;gt; state.search)&#xA;return &amp;lt;Command.Empty&amp;gt;No results found for &#34;{search}&#34;.&amp;lt;/Command.Empty&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Code snippets for common use cases.&lt;/p&gt; &#xA;&lt;h3&gt;Nested items&lt;/h3&gt; &#xA;&lt;p&gt;Often selecting one item should navigate deeper, with a more refined set of items. For example selecting &#34;Change themeâ€¦&#34; should show new items &#34;Dark theme&#34; and &#34;Light theme&#34;. We call these sets of items &#34;pages&#34;, and they can be implemented with simple state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const ref = React.useRef(null)&#xA;const [open, setOpen] = React.useState(false)&#xA;const [search, setSearch] = React.useState(&#39;&#39;)&#xA;const [pages, setPages] = React.useState([])&#xA;const page = pages[pages.length - 1]&#xA;&#xA;return (&#xA;  &amp;lt;Command&#xA;    onKeyDown={(e) =&amp;gt; {&#xA;      // Escape goes to previous page&#xA;      // Backspace goes to previous page when search is empty&#xA;      if (e.key === &#39;Escape&#39; || (e.key === &#39;Backspace&#39; &amp;amp;&amp;amp; !search)) {&#xA;        e.preventDefault()&#xA;        setPages((pages) =&amp;gt; pages.slice(0, -1))&#xA;      }&#xA;    }}&#xA;  &amp;gt;&#xA;    &amp;lt;Command.Input value={search} onValueChange={setSearch} /&amp;gt;&#xA;    &amp;lt;Command.List&amp;gt;&#xA;      {!page &amp;amp;&amp;amp; (&#xA;        &amp;lt;&amp;gt;&#xA;          &amp;lt;Command.Item onSelect={() =&amp;gt; setPages([...pages, &#39;projects&#39;])}&amp;gt;Search projectsâ€¦&amp;lt;/Command.Item&amp;gt;&#xA;          &amp;lt;Command.Item onSelect={() =&amp;gt; setPages([...pages, &#39;teams&#39;])}&amp;gt;Join a teamâ€¦&amp;lt;/Command.Item&amp;gt;&#xA;        &amp;lt;/&amp;gt;&#xA;      )}&#xA;&#xA;      {page === &#39;projects&#39; &amp;amp;&amp;amp; (&#xA;        &amp;lt;&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;Project A&amp;lt;/Command.Item&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;Project B&amp;lt;/Command.Item&amp;gt;&#xA;        &amp;lt;/&amp;gt;&#xA;      )}&#xA;&#xA;      {page === &#39;teams&#39; &amp;amp;&amp;amp; (&#xA;        &amp;lt;&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;Team 1&amp;lt;/Command.Item&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;Team 2&amp;lt;/Command.Item&amp;gt;&#xA;        &amp;lt;/&amp;gt;&#xA;      )}&#xA;    &amp;lt;/Command.List&amp;gt;&#xA;  &amp;lt;/Command&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show sub-items when searching&lt;/h3&gt; &#xA;&lt;p&gt;If your items have nested sub-items that you only want to reveal when searching, render based on the search state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const SubItem = (props) =&amp;gt; {&#xA;  const search = useCmdk((state) =&amp;gt; state.search)&#xA;  if (!search) return null&#xA;  return &amp;lt;Command.Item {...props} /&amp;gt;&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;Command&amp;gt;&#xA;    &amp;lt;Command.Input /&amp;gt;&#xA;    &amp;lt;Command.List&amp;gt;&#xA;      &amp;lt;Command.Item&amp;gt;Change themeâ€¦&amp;lt;/Command.Item&amp;gt;&#xA;      &amp;lt;SubItem&amp;gt;Change theme to dark&amp;lt;/SubItem&amp;gt;&#xA;      &amp;lt;SubItem&amp;gt;Change theme to light&amp;lt;/SubItem&amp;gt;&#xA;    &amp;lt;/Command.List&amp;gt;&#xA;  &amp;lt;/Command&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Asynchronous results&lt;/h3&gt; &#xA;&lt;p&gt;Render the items as they become available. Filtering and sorting will happen automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const [loading, setLoading] = React.useState(false)&#xA;const [items, setItems] = React.useState([])&#xA;&#xA;React.useEffect(() =&amp;gt; {&#xA;  async function getItems() {&#xA;    setLoading(true)&#xA;    const res = await api.get(&#39;/dictionary&#39;)&#xA;    setItems(res)&#xA;    setLoading(false)&#xA;  }&#xA;&#xA;  getItems()&#xA;}, [])&#xA;&#xA;return (&#xA;  &amp;lt;Command&amp;gt;&#xA;    &amp;lt;Command.Input /&amp;gt;&#xA;    &amp;lt;Command.List&amp;gt;&#xA;      {loading &amp;amp;&amp;amp; &amp;lt;Command.Loading&amp;gt;Fetching wordsâ€¦&amp;lt;/Command.Loading&amp;gt;}&#xA;      {items.map((item) =&amp;gt; {&#xA;        return (&#xA;          &amp;lt;Command.Item key={`word-${item}`} value={item}&amp;gt;&#xA;            {item}&#xA;          &amp;lt;/Command.Item&amp;gt;&#xA;        )&#xA;      })}&#xA;    &amp;lt;/Command.List&amp;gt;&#xA;  &amp;lt;/Command&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use inside Popover&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using the &lt;a href=&#34;https://www.radix-ui.com/docs/primitives/components/popover&#34;&gt;Radix UI popover&lt;/a&gt; component. âŒ˜K relies on the Radix UI Dialog component, so this will reduce your bundle size a bit due to shared dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install @radix-ui/react-popover&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Render &lt;code&gt;Command&lt;/code&gt; inside of the popover content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import * as Popover from &#39;@radix-ui/react-popover&#39;&#xA;&#xA;return (&#xA;  &amp;lt;Popover.Root&amp;gt;&#xA;    &amp;lt;Popover.Trigger&amp;gt;Toggle popover&amp;lt;/Popover.Trigger&amp;gt;&#xA;&#xA;    &amp;lt;Popover.Content&amp;gt;&#xA;      &amp;lt;Command&amp;gt;&#xA;        &amp;lt;Command.Input /&amp;gt;&#xA;        &amp;lt;Command.List&amp;gt;&#xA;          &amp;lt;Command.Item&amp;gt;Apple&amp;lt;/Command.Item&amp;gt;&#xA;        &amp;lt;/Command.List&amp;gt;&#xA;      &amp;lt;/Command&amp;gt;&#xA;    &amp;lt;/Popover.Content&amp;gt;&#xA;  &amp;lt;/Popover.Root&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Drop in stylesheets&lt;/h3&gt; &#xA;&lt;p&gt;You can find global stylesheets to drop in as a starting point for styling. See &lt;a href=&#34;https://raw.githubusercontent.com/pacocoursey/cmdk/main/website/styles/cmdk&#34;&gt;website/styles/cmdk&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accessible?&lt;/strong&gt; Yes. Labeling, aria attributes, and DOM ordering tested with Voice Over and Chrome DevTools. &lt;a href=&#34;https://raw.githubusercontent.com/pacocoursey/cmdk/main/#dialog-cmdk-dialog-cmdk-overlay&#34;&gt;Dialog&lt;/a&gt; composes an accessible Dialog implementation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Virtualization?&lt;/strong&gt; No. Good performance up to 2,000-3,000 items, though. Read below to bring your own.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Filter/sort items manually?&lt;/strong&gt; Yes. Pass &lt;code&gt;shouldFilter={false}&lt;/code&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/pacocoursey/cmdk/main/#command-cmdk-root&#34;&gt;Command&lt;/a&gt;. Better memory usage and performance. Bring your own virtualization this way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;React 18 safe?&lt;/strong&gt; Yes, required. Uses React 18 hooks like &lt;code&gt;useId&lt;/code&gt; and &lt;code&gt;useSyncExternalStore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unstyled?&lt;/strong&gt; Yes, use the listed CSS selectors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hydration mismatch?&lt;/strong&gt; No, likely a bug in your code. Ensure the &lt;code&gt;open&lt;/code&gt; prop to &lt;code&gt;Command.Dialog&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; on the server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;React strict mode safe?&lt;/strong&gt; Yes. Open an issue if you notice an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Weird/wrong behavior?&lt;/strong&gt; Make sure your &lt;code&gt;Command.Item&lt;/code&gt; has a &lt;code&gt;key&lt;/code&gt; and unique &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Concurrent mode safe?&lt;/strong&gt; Maybe, but concurrent mode is not yet real. Uses risky approaches like manual DOM ordering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;React server component?&lt;/strong&gt; No, it&#39;s a client component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Listen for âŒ˜K automatically?&lt;/strong&gt; No, do it yourself to have full control over keybind context.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;React Native?&lt;/strong&gt; No, and no plans to support it. If you build a React Native version, let us know and we&#39;ll link your repository here.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;Written in 2019 by Paco (&lt;a href=&#34;https://twitter.com/pacocoursey&#34;&gt;@pacocoursey&lt;/a&gt;) to see if a composable combobox API was possible. Used for the Vercel command menu and autocomplete by Rauno (&lt;a href=&#34;https://twitter.com/raunofreiberg&#34;&gt;@raunofreiberg&lt;/a&gt;) in 2020. Re-written independently in 2022 with a simpler and more performant approach. Ideas and help from Shu (&lt;a href=&#34;https://twitter.com/shuding_&#34;&gt;@shuding_&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pacocoursey/use-descendants&#34;&gt;use-descendants&lt;/a&gt; was extracted from the 2019 version.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bufbuild/connect-web</title>
    <updated>2022-08-11T01:57:32Z</updated>
    <id>tag:github.com,2022-08-11:/bufbuild/connect-web</id>
    <link href="https://github.com/bufbuild/connect-web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, reliable, interoperable. A better gRPC-Web.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Connect-Web&lt;/h1&gt; &#xA;&lt;p&gt;Connect-Web is a simple library to call remote procedures from a web browser. Unlike REST, you get a type-safe client and never have to think about serialization again.&lt;/p&gt; &#xA;&lt;p&gt;The procedures are defined in a &lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;Protocol Buffer&lt;/a&gt; schema implemented by your backend, and Connect-Web generates the clients and related types to access the backend. The clients support two protocols: gRPC-web, and Connect&#39;s own protocol.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://connect.build/docs/protocol/&#34;&gt;Connect protocol&lt;/a&gt; is a simple, POST-only protocol that works over HTTP/1.1 or HTTP/2. It supports server-streaming methods just like gRPC-Web, but is easy to debug in the network inspector. Calling a Connect API is easy enough just with the fetch API. Try it with our live demo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const res = await fetch(&#34;https://demo.connect.build/buf.connect.demo.eliza.v1.ElizaService/Say&#34;, {&#xA;  method: &#34;POST&#34;,&#xA;  headers: {&#34;content-type&#34;: &#34;application/json&#34;},&#xA;  body: `{&#34;sentence&#34;: &#34;I feel happy.&#34;}`&#xA;});&#xA;const answer = res.json();&#xA;console.log(answer);&#xA;// {sentence: &#39;When you feel happy, what do you do?&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the client generated by Connect-Web, the same call becomes quite a bit simpler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const answer = await eliza.say({sentence: &#34;I feel happy.&#34;});&#xA;console.log(answer);&#xA;// {sentence: &#39;When you feel happy, what do you do?&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started, head over to the &lt;a href=&#34;https://connect.build/docs/web/getting-started&#34;&gt;docs&lt;/a&gt; for a tutorial, or take a look at &lt;a href=&#34;https://github.com/bufbuild/connect-web-integration&#34;&gt;our examples&lt;/a&gt; for integration with various frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Browsers&lt;/h2&gt; &#xA;&lt;p&gt;Connect-Web supports all modern web browsers that implement the widely available &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&#34;&gt;fetch API&lt;/a&gt; and the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API&#34;&gt;Encoding API&lt;/a&gt;. The library and the generated code are compatible with ES2017 and TypeScript 4.1.&lt;/p&gt; &#xA;&lt;p&gt;Node.js is not supported. We are working on Connect for Node.js - if you are interested, let us know on &lt;a href=&#34;https://join.slack.com/t/bufbuild/shared_invite/zt-f5k547ki-VDs_iC4TblNCu7ubhRD17w&#34;&gt;Slack&lt;/a&gt; or on &lt;a href=&#34;https://github.com/bufbuild/connect-web/discussions&#34;&gt;GitHub discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@bufbuild/connect-web&#34;&gt;@bufbuild/connect-web&lt;/a&gt;: Implements the Connect and gRPC-web protocols (&lt;a href=&#34;https://raw.githubusercontent.com/bufbuild/connect-web/main/packages/connect-web&#34;&gt;source code&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@bufbuild/protoc-gen-connect-web&#34;&gt;@bufbuild/protoc-gen-connect-web&lt;/a&gt;: Code generator plugin for the services in your schema (&lt;a href=&#34;https://raw.githubusercontent.com/bufbuild/connect-web/main/packages/protoc-gen-connect-web&#34;&gt;source code&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bufbuild/connect-web-integration&#34;&gt;connect-web-integration&lt;/a&gt;: Example projects using Connect-Web with various JS frameworks and tooling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bufbuild/connect-go&#34;&gt;connect-go&lt;/a&gt;: Go implementation of gRPC, gRPC-Web, and Connect&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bufbuild/connect-demo&#34;&gt;connect-demo&lt;/a&gt;: demonstration service powering demo.connect.build&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://studio.buf.build/&#34;&gt;Buf Studio&lt;/a&gt;: web UI for ad-hoc RPCs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bufbuild/connect-crosstest&#34;&gt;connect-crosstest&lt;/a&gt;: gRPC-Web and Connect interoperability tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is a beta: we rely on it in production, but we may make a few changes as we gather feedback from early adopters. We&#39;re planning to release a stable v1 later this year.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;Offered under the &lt;a href=&#34;https://raw.githubusercontent.com/bufbuild/connect-web/main/LICENSE&#34;&gt;Apache 2 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>