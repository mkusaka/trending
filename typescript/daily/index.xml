<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-04T01:44:03Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alphardex/su7-replica</title>
    <updated>2024-04-04T01:44:03Z</updated>
    <id>tag:github.com,2024-04-04:/alphardex/su7-replica</id>
    <link href="https://github.com/alphardex/su7-replica" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;小米 SU7 网站特效解析 demo&lt;/h1&gt; &#xA;&lt;p&gt;demo 地址：&lt;a href=&#34;https://su7-replica.netlify.app/&#34;&gt;https://su7-replica.netlify.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;demo（芙宁娜版）地址：&lt;a href=&#34;https://su7-replica.netlify.app/#furina&#34;&gt;https://su7-replica.netlify.app/#furina&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;原网站地址：&lt;a href=&#34;https://gamemcu.com/su7/&#34;&gt;https://gamemcu.com/su7/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;食用方法&lt;/h2&gt; &#xA;&lt;p&gt;安装依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;本地调试&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;构建&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;预览&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run preview&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ixartz/SaaS-Boilerplate</title>
    <updated>2024-04-04T01:44:03Z</updated>
    <id>tag:github.com,2024-04-04:/ixartz/SaaS-Boilerplate</id>
    <link href="https://github.com/ixartz/SaaS-Boilerplate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀🎉📚 SaaS Boilerplate built with Next.js + Tailwind CSS + Shadcn UI + TypeScript. ⚡️ Full-stack React application with Auth, Multi-tenancy, Roles &amp; Permissions, i18n, Landing Page, DB, Logging, Testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Boilerplate and Starter for Next JS 14+, Tailwind CSS 3.4 and TypeScript&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://creativedesignsguru.com/demo/Nextjs-Boilerplate/&#34;&gt;&lt;img height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/ixartz/SaaS-Boilerplate/main/public/assets/images/nextjs-starter-banner.png?raw=true&#34; alt=&#34;Next js starter banner&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;🚀 Boilerplate and Starter for Next.js with App Router support, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, Jest, Testing Library, Commitlint, VSCode, PostCSS, Tailwind CSS, Authentication with &lt;a href=&#34;https://go.clerk.com/zGlzydF&#34;&gt;Clerk&lt;/a&gt;, Database with DrizzleORM (SQLite, PostgreSQL, and MySQL) and &lt;a href=&#34;https://turso.tech/?utm_source=nextjsstarterbp&#34;&gt;Turso&lt;/a&gt;, Error Monitoring with &lt;a href=&#34;https://sentry.io/for/nextjs/?utm_source=github&amp;amp;utm_medium=paid-community&amp;amp;utm_campaign=general-fy25q1-nextjs&amp;amp;utm_content=github-banner-nextjsboilerplate-logo&#34;&gt;Sentry&lt;/a&gt;, Logging with Pino.js and Log Management with &lt;a href=&#34;https://betterstack.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;Better Stack&lt;/a&gt;, Monitoring as Code with &lt;a href=&#34;https://www.checklyhq.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;Checkly&lt;/a&gt;, Storybook, Multi-language (i18n), and more.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr height=&#34;187px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;33%&#34;&gt; &lt;a href=&#34;https://go.clerk.com/zGlzydF&#34;&gt; &#xA;     &lt;picture&gt; &#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/6fb61971-3bf1-4580-98a0-10bd3f1040a2&#34;&gt; &#xA;      &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/f80a8bb5-66da-4772-ad36-5fabc5b02c60&#34;&gt; &#xA;      &lt;img alt=&#34;Clerk – Authentication &amp;amp; User Management for Next.js&#34; src=&#34;https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/6fb61971-3bf1-4580-98a0-10bd3f1040a2&#34;&gt; &#xA;     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;33%&#34;&gt; &lt;a href=&#34;mailto:contact@creativedesignsguru.com&#34;&gt; Add your logo here &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;Developer experience first, extremely flexible code structure and only keep what you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚡ &lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt; with App Router support&lt;/li&gt; &#xA; &lt;li&gt;🔥 Type checking &lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💎 Integrate with &lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwind CSS&lt;/a&gt; and Shadcn UI&lt;/li&gt; &#xA; &lt;li&gt;✅ Strict Mode for TypeScript and React 18&lt;/li&gt; &#xA; &lt;li&gt;🔒 Authentication with &lt;a href=&#34;https://go.clerk.com/zGlzydF&#34;&gt;Clerk&lt;/a&gt;: Sign up, Sign in, Sign out, Forgot password, Reset password, and more.&lt;/li&gt; &#xA; &lt;li&gt;👥 Multi-tenancy &amp;amp; team support: create, switch, update organization and invite team members&lt;/li&gt; &#xA; &lt;li&gt;📝 Role-based access control and permissions&lt;/li&gt; &#xA; &lt;li&gt;👤 Multi-Factor Auth (MFA), Social Auth (Google, Facebook, Twitter, GitHub, Apple, and more), User Impersonation&lt;/li&gt; &#xA; &lt;li&gt;📦 Type-safe ORM with DrizzleORM, compatible with SQLite, PostgreSQL, and MySQL&lt;/li&gt; &#xA; &lt;li&gt;💽 Global Database with &lt;a href=&#34;https://turso.tech/?utm_source=nextjsstarterbp&#34;&gt;Turso&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🌐 Multi-language (i18n) with &lt;a href=&#34;https://next-intl-docs.vercel.app/&#34;&gt;next-intl&lt;/a&gt; and &lt;a href=&#34;https://l.crowdin.com/next-js&#34;&gt;Crowdin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;♻️ Type-safe environment variables with T3 Env&lt;/li&gt; &#xA; &lt;li&gt;⌨️ Form with React Hook From&lt;/li&gt; &#xA; &lt;li&gt;🔴 Validation library with Zod&lt;/li&gt; &#xA; &lt;li&gt;📏 Linter with &lt;a href=&#34;https://eslint.org&#34;&gt;ESLint&lt;/a&gt; (default NextJS, NextJS Core Web Vitals, Tailwind CSS and Airbnb configuration)&lt;/li&gt; &#xA; &lt;li&gt;💖 Code Formatter with &lt;a href=&#34;https://prettier.io&#34;&gt;Prettier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🦊 Husky for Git Hooks&lt;/li&gt; &#xA; &lt;li&gt;🚫 Lint-staged for running linters on Git staged files&lt;/li&gt; &#xA; &lt;li&gt;🚓 Lint git commit with Commitlint&lt;/li&gt; &#xA; &lt;li&gt;📓 Write standard compliant commit messages with Commitizen&lt;/li&gt; &#xA; &lt;li&gt;🦺 Unit Testing with Jest and React Testing Library&lt;/li&gt; &#xA; &lt;li&gt;🧪 Integration and E2E Testing with Playwright&lt;/li&gt; &#xA; &lt;li&gt;👷 Run tests on pull request with GitHub Actions&lt;/li&gt; &#xA; &lt;li&gt;🎉 Storybook for UI development&lt;/li&gt; &#xA; &lt;li&gt;🚨 Error Monitoring with &lt;a href=&#34;https://sentry.io/for/nextjs/?utm_source=github&amp;amp;utm_medium=paid-community&amp;amp;utm_campaign=general-fy25q1-nextjs&amp;amp;utm_content=github-banner-nextjsboilerplate-logo&#34;&gt;Sentry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;☂️ Code coverage with &lt;a href=&#34;https://about.codecov.io/codecov-free-trial/?utm_source=github&amp;amp;utm_medium=paid-community&amp;amp;utm_campaign=general-fy25q1-nextjs&amp;amp;utm_content=github-banner-nextjsboilerplate-logo&#34;&gt;Codecov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📝 Logging with Pino.js and Log Management with &lt;a href=&#34;https://betterstack.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;Better Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🖥️ Monitoring as Code with &lt;a href=&#34;https://www.checklyhq.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;Checkly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎁 Automatic changelog generation with Semantic Release&lt;/li&gt; &#xA; &lt;li&gt;🔍 Visual testing with Percy (Optional)&lt;/li&gt; &#xA; &lt;li&gt;💡 Absolute Imports using &lt;code&gt;@&lt;/code&gt; prefix&lt;/li&gt; &#xA; &lt;li&gt;🗂 VSCode configuration: Debug, Settings, Tasks and Extensions&lt;/li&gt; &#xA; &lt;li&gt;🤖 SEO metadata, JSON-LD and Open Graph tags&lt;/li&gt; &#xA; &lt;li&gt;🗺️ Sitemap.xml and robots.txt with next-sitemap&lt;/li&gt; &#xA; &lt;li&gt;⌘ Database exploration with Drizzle Studio and CLI migration tool with Drizzle Kit&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://www.npmjs.com/package/@next/bundle-analyzer&#34;&gt;Bundler Analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🌈 Include a FREE minimalist theme&lt;/li&gt; &#xA; &lt;li&gt;💯 Maximize lighthouse score&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Built-in feature from Next.js:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;☕ Minify HTML &amp;amp; CSS&lt;/li&gt; &#xA; &lt;li&gt;💨 Live reload&lt;/li&gt; &#xA; &lt;li&gt;✅ Cache busting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Philosophy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nothing is hidden from you, so you have the freedom to make the necessary adjustments to fit your needs and preferences.&lt;/li&gt; &#xA; &lt;li&gt;Easy to customize&lt;/li&gt; &#xA; &lt;li&gt;Minimal code&lt;/li&gt; &#xA; &lt;li&gt;SEO-friendly&lt;/li&gt; &#xA; &lt;li&gt;🚀 Production-ready&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js 18+ and npm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command on your local environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth=1 https://github.com/ixartz/SaaS-Boilerplate.git my-project-name&#xA;cd my-project-name&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can run locally in development mode with live reload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your favorite browser to see your project.&lt;/p&gt; &#xA;&lt;h3&gt;Set up authentication&lt;/h3&gt; &#xA;&lt;p&gt;Create a Clerk account at &lt;a href=&#34;https://go.clerk.com/zGlzydF&#34;&gt;Clerk.com&lt;/a&gt; and create a new application in Clerk Dashboard. Then, copy &lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; into &lt;code&gt;.env.local&lt;/code&gt; file (not tracked by Git):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_pub_key&#xA;CLERK_SECRET_KEY=your_clerk_secret_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can a fully working authentication system with Next.js: Sign up, Sign in, Sign out, Forgot password, Reset password, Update profile, Update password, Update email, Delete account, and more.&lt;/p&gt; &#xA;&lt;h3&gt;Set up remote database&lt;/h3&gt; &#xA;&lt;p&gt;The project uses DrizzleORM, a type-safe ORM compatible with SQLite, PostgreSQL, and MySQL databases. By default, the project is set up to work seamlessly with libSQL, and for production purposes, it&#39;s integrated with &lt;a href=&#34;https://turso.tech/?utm_source=nextjsstarterbp&#34;&gt;Turso&lt;/a&gt;. The Next.js Boilerplate also enables a smooth transition to an alternative database provider if your project requires it.&lt;/p&gt; &#xA;&lt;p&gt;First, you need to create a Turso account at &lt;a href=&#34;https://turso.tech/?utm_source=nextjsstarterbp&#34;&gt;Turso.tech&lt;/a&gt; and install the Turso CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install tursodatabase/tap/turso&#xA;turso auth signup # Sign up to Turso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, create a new database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;turso db create nextjs-boilerplate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you need to update the &lt;code&gt;DATABASE_URL&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt; file with the database URL provided by Turso:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;turso db show nextjs-boilerplate --url&#xA;&#xA;# .env&#xA;# DATABASE_URL=libsql://[RANDOM-CHARS]-[DB-NAME]-[ORG-NAME].turso.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you also need to create a new environement variable &lt;code&gt;DATABASE_AUTH_TOKEN&lt;/code&gt; in &lt;code&gt;.env.local&lt;/code&gt; (not tracked by Git) with the auth token provided by Turso:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;turso db tokens create nextjs-boilerplate&#xA;&#xA;# .env.local&#xA;# DATABASE_AUTH_TOKEN=[your-auth-token]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Translation (i18n) setup&lt;/h3&gt; &#xA;&lt;p&gt;For translation, the project uses &lt;code&gt;next-intl&lt;/code&gt; combined with &lt;a href=&#34;https://l.crowdin.com/next-js&#34;&gt;Crowdin&lt;/a&gt;. As a developer, you only need to take care of the English (or another default language) version. Other languages are automatically generated and handled by Crowdin. You can use Crowdin to collaborate with your translation team or translate the messages yourself with the help of machine translation.&lt;/p&gt; &#xA;&lt;p&gt;To set up translation (i18n), create an account at &lt;a href=&#34;https://l.crowdin.com/next-js&#34;&gt;Crowdin.com&lt;/a&gt; and create a new project. In the newly created project, you will able to find the project ID. You&#39;ll also require to create a new Personal Access Tokens by going to Account Settings &amp;gt; API. Then, in your GitHub Actions, you need to define the following environment variables &lt;code&gt;CROWDIN_PROJECT_ID&lt;/code&gt; and &lt;code&gt;CROWDIN_PERSONAL_TOKEN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After defining the environment variables in your GitHub Actions, your localization files will be synchronized with Crowdin everytime you push a new commit to the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h3&gt;Project structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.&#xA;├── README.md                       # README file&#xA;├── .github                         # GitHub folder&#xA;├── .husky                          # Husky configuration&#xA;├── .storybook                      # Storybook folder&#xA;├── .vscode                         # VSCode configuration&#xA;├── migrations                      # Database migrations&#xA;├── public                          # Public assets folder&#xA;├── scripts                         # Scripts folder&#xA;├── src&#xA;│   ├── app                         # Next JS App (App Router)&#xA;│   ├── components                  # Reusable components&#xA;│   ├── features                    # Components specific to a feature&#xA;│   ├── libs                        # 3rd party libraries configuration&#xA;│   ├── locales                     # Locales folder (i18n messages)&#xA;│   ├── models                      # Database models&#xA;│   ├── styles                      # Styles folder&#xA;│   ├── templates                   # Templates folder&#xA;│   ├── types                       # Type definitions&#xA;│   └── utils                       # Utilities folder&#xA;├── tests&#xA;│   └── e2e                         # E2E tests, also includes Monitoring as Code&#xA;├── tailwind.config.js              # Tailwind CSS configuration&#xA;└── tsconfig.json                   # TypeScript configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;You can easily configure Next js Boilerplate by making a search in the whole project with &lt;code&gt;FIXME:&lt;/code&gt; for making quick customization. Here is some of the most important files to customize:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;public/apple-touch-icon.png&lt;/code&gt;, &lt;code&gt;public/favicon.ico&lt;/code&gt;, &lt;code&gt;public/favicon-16x16.png&lt;/code&gt; and &lt;code&gt;public/favicon-32x32.png&lt;/code&gt;: your website favicon, you can generate from &lt;a href=&#34;https://favicon.io/favicon-converter/&#34;&gt;https://favicon.io/favicon-converter/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/utils/AppConfig.ts&lt;/code&gt;: configuration file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/templates/BaseTemplate.tsx&lt;/code&gt;: default theme&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;next.config.mjs&lt;/code&gt;: Next.js configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;next-sitemap.config.js&lt;/code&gt;: sitemap configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.env&lt;/code&gt;: default environment variables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You have access to the whole code source if you need further customization. The provided code is only example for you to start your project. The sky is the limit 🚀.&lt;/p&gt; &#xA;&lt;h3&gt;Commit Message Format&lt;/h3&gt; &#xA;&lt;p&gt;The project enforces &lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;Conventional Commits&lt;/a&gt; specification. This means that all your commit messages must be formatted according to the specification. To help you write commit messages, the project uses &lt;a href=&#34;https://github.com/commitizen/cz-cli&#34;&gt;Commitizen&lt;/a&gt;, an interactive CLI that guides you through the commit process. To use it, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One of the benefits of using Conventional Commits is that it allows us to automatically generate a &lt;code&gt;CHANGELOG&lt;/code&gt; file. It also allows us to automatically determine the next version number based on the types of commits that are included in a release.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;All unit tests are located with the source code inside the same directory. So, it makes it easier to find them. The project uses Jest and React Testing Library for unit testing. You can run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration &amp;amp; E2E Testing&lt;/h3&gt; &#xA;&lt;p&gt;The project uses Playwright for Integration and E2E testing. You can run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx playwright install # Only for the first time in a new environment&#xA;npm run test:e2e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enable Edge runtime (optional)&lt;/h3&gt; &#xA;&lt;p&gt;The App Router folder is compatible with the Edge runtime. You can enable it by uncommenting the following lines &lt;code&gt;src/app/layouts.tsx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// export const runtime = &#39;edge&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For your information, the database migration is not compatible with the Edge runtime. So, you need to disable the automatic migration in &lt;code&gt;src/libs/DB.ts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;if (process.env.NODE_ENV !== &#39;production&#39;) {&#xA;  await migrate(db, { migrationsFolder: &#39;./migrations&#39; });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After disabling it, you are required to run the migration manually with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also require to run the command each time you want to update the database schema.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy to production&lt;/h3&gt; &#xA;&lt;p&gt;During the build process, the database migration is automatically executed. So, you don&#39;t need to run the migration manually. But, in your environment variable, &lt;code&gt;DATABASE_URL&lt;/code&gt; and &lt;code&gt;DATABASE_AUTH_TOKEN&lt;/code&gt; need to be defined.&lt;/p&gt; &#xA;&lt;p&gt;Then, you can generate a production build with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It generates an optimized production build of the boilerplate. For testing the generated build, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to defined the environment variables &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; using your own key.&lt;/p&gt; &#xA;&lt;p&gt;The command starts a local server with the production build. Then, you can now open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your favorite browser to see the project.&lt;/p&gt; &#xA;&lt;h3&gt;Error Monitoring&lt;/h3&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://sentry.io/for/nextjs/?utm_source=github&amp;amp;utm_medium=paid-community&amp;amp;utm_campaign=general-fy25q1-nextjs&amp;amp;utm_content=github-banner-nextjsboilerplate-logo&#34;&gt;Sentry&lt;/a&gt; to monitor errors. For development environment, you don&#39;t need to do anything: NextJS Boilerplate is already configured to use Sentry and Spotlight (Sentry for Development). All errors will be automatically sent to your local Spotlight instance. So, you can try the Sentry experience locally.&lt;/p&gt; &#xA;&lt;p&gt;For production environment, you need to create a Sentry account and create a new project. Then, in &lt;code&gt;next.config.mjs&lt;/code&gt;, you need to update the &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;project&lt;/code&gt; attribute in &lt;code&gt;withSentryConfig&lt;/code&gt; function. You also need to add your Sentry DSN in &lt;code&gt;sentry.client.config.ts&lt;/code&gt;, &lt;code&gt;sentry.edge.config.ts&lt;/code&gt; and &lt;code&gt;sentry.server.config.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Code coverage&lt;/h3&gt; &#xA;&lt;p&gt;NextJS Boilerplate relies on &lt;a href=&#34;https://about.codecov.io/codecov-free-trial/?utm_source=github&amp;amp;utm_medium=paid-community&amp;amp;utm_campaign=general-fy25q1-nextjs&amp;amp;utm_content=github-banner-nextjsboilerplate-logo&#34;&gt;Codecov&lt;/a&gt; for code coverage reporting solution. To use Codecov, create a Codecov account and connect it to your GitHub account. On your Codecov dashboard, it should display a list of your repositories. Select the repository you want to enable Codecov for and copy the token. Then, in your GitHub Actions, you need to define the &lt;code&gt;CODECOV_TOKEN&lt;/code&gt; environment variable and paste the token you copied.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to create the &lt;code&gt;CODECOV_TOKEN&lt;/code&gt; as a Github Actions secret, do not paste it directly into your source code.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The project uses Pino.js for logging. By default, for development environment, the logs are displayed in the console.&lt;/p&gt; &#xA;&lt;p&gt;For production environment, the project is already integrated with &lt;a href=&#34;https://betterstack.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;Better Stack&lt;/a&gt; to manage and query your logs using SQL. To use Better Stack, you need to create a &lt;a href=&#34;https://betterstack.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;Better Stack&lt;/a&gt; account and create a new source: go to your Better Stack Logs Dashboard &amp;gt; Sources &amp;gt; Connect source. Then, you need to give a name to your source and select Node.js as the platform.&lt;/p&gt; &#xA;&lt;p&gt;After creating the source, you able to see your source token and copy it. Then, in your environment variabless, you can paste the token in &lt;code&gt;LOGTAIL_SOURCE_TOKEN&lt;/code&gt; variable. Now, all your logs will be automatically sent and ingested by Better Stack.&lt;/p&gt; &#xA;&lt;h3&gt;Checkly monitoring&lt;/h3&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://www.checklyhq.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;Checkly&lt;/a&gt; to ensure that your production environment is always up and running. At regular intervals, Checkly runs the tests ending with &lt;code&gt;*.check.spec.ts&lt;/code&gt; extension and notifies you if any of the tests fail. Additionally, you have the flexibility to execute tests across multiple locations to ensure that your application is available worldwide.&lt;/p&gt; &#xA;&lt;p&gt;To use Checkly, you must first create an account on &lt;a href=&#34;https://www.checklyhq.com/?utm_source=github&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=next-js-boilerplate&#34;&gt;their website&lt;/a&gt;. Once you have an account, you can set the &lt;code&gt;CHECKLY_API_KEY&lt;/code&gt; environment variable in GitHub Actions by generating a new API key in the Checkly Dashboard. Additionally, you will need to define the &lt;code&gt;CHECKLY_ACCOUNT_ID&lt;/code&gt;, which can also be found in your Checkly Dashboard under User Settings &amp;gt; General.&lt;/p&gt; &#xA;&lt;p&gt;To complete the setup, make sure to update the &lt;code&gt;checkly.config.ts&lt;/code&gt; file with your own email address and production URL.&lt;/p&gt; &#xA;&lt;h3&gt;Useful commands&lt;/h3&gt; &#xA;&lt;h4&gt;Bundle Analyzer&lt;/h4&gt; &#xA;&lt;p&gt;NextJS Boilerplate comes with a built-in bundle analyzer. It can be used to analyze the size of your JavaScript bundles. To begin, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run build-stats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By running the command, it&#39;ll automatically open a new browser window with the results.&lt;/p&gt; &#xA;&lt;h4&gt;Database Studio&lt;/h4&gt; &#xA;&lt;p&gt;The project is already configured with Drizzle Studio to explore the database. You can run the following command to open the database studio:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run db:studio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can open &lt;a href=&#34;https://local.drizzle.studio&#34;&gt;https://local.drizzle.studio&lt;/a&gt; with your favorite browser to explore your database.&lt;/p&gt; &#xA;&lt;h3&gt;Known warnings&lt;/h3&gt; &#xA;&lt;h4&gt;webpack.cache.PackFileCacheStrategy&lt;/h4&gt; &#xA;&lt;p&gt;Warning: webpack.cache.PackFileCacheStrategy Serializing big strings (104kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)&lt;/p&gt; &#xA;&lt;p&gt;This warning is caused by using &lt;code&gt;Clerk&lt;/code&gt; and &lt;code&gt;next-intl&lt;/code&gt; middlewares. It only happens when both middlewares are used together.&lt;/p&gt; &#xA;&lt;h3&gt;VSCode information (optional)&lt;/h3&gt; &#xA;&lt;p&gt;If you are VSCode users, you can have a better integration with VSCode by installing the suggested extension in &lt;code&gt;.vscode/extension.json&lt;/code&gt;. The starter code comes up with Settings for a seamless integration with VSCode. The Debug configuration is also provided for frontend and backend debugging experience.&lt;/p&gt; &#xA;&lt;p&gt;With the plugins installed on your VSCode, ESLint and Prettier can automatically fix the code and show you the errors. Same goes for testing, you can install VSCode Jest extension to automatically run your tests and it also show the code coverage in context.&lt;/p&gt; &#xA;&lt;p&gt;Pro tips: if you need a project wide type checking with TypeScript, you can run a build with &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;B&lt;/kbd&gt; on Mac.&lt;/p&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;p&gt;Everyone is welcome to contribute to this project. Feel free to open an issue if you have question or found a bug. Totally open to any suggestions and improvements.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Licensed under the MIT License, Copyright © 2024&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ixartz/SaaS-Boilerplate/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr height=&#34;187px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;33%&#34;&gt; &lt;a href=&#34;https://go.clerk.com/zGlzydF&#34;&gt; &#xA;     &lt;picture&gt; &#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/6fb61971-3bf1-4580-98a0-10bd3f1040a2&#34;&gt; &#xA;      &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/f80a8bb5-66da-4772-ad36-5fabc5b02c60&#34;&gt; &#xA;      &lt;img alt=&#34;Clerk – Authentication &amp;amp; User Management for Next.js&#34; src=&#34;https://github.com/ixartz/SaaS-Boilerplate/assets/1328388/6fb61971-3bf1-4580-98a0-10bd3f1040a2&#34;&gt; &#xA;     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;33%&#34;&gt; &lt;a href=&#34;mailto:contact@creativedesignsguru.com&#34;&gt; Add your logo here &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Made with ♥ by &lt;a href=&#34;https://creativedesignsguru.com&#34;&gt;CreativeDesignsGuru&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ixartz&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/cloudposse.svg?style=social&amp;amp;label=Follow%20%40Ixartz&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/ixartz&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-red.png&#34; alt=&#34;Sponsor Next JS Boilerplate&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PawanOsman/ChatGPT</title>
    <updated>2024-04-04T01:44:03Z</updated>
    <id>tag:github.com,2024-04-04:/PawanOsman/ChatGPT</id>
    <link href="https://github.com/PawanOsman/ChatGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI API Free Reverse Proxy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT API Free Reverse Proxy&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the &lt;strong&gt;ChatGPT API Free Reverse Proxy&lt;/strong&gt; project, a complimentary resource allowing seamless access to OpenAI&#39;s API. This project mirrors the official OpenAI API endpoints, enabling users to leverage OpenAI functionalities without direct cost. Dive into our documentation to discover how to set up your reverse proxy or connect with our hosted service for an even smoother experience.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.pawan.krd&#34;&gt;Join our Discord Community&lt;/a&gt; for support and questions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Option 1: &lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/#self-hosting-guide&#34;&gt;Installing/Self-Hosting Guide&lt;/a&gt; (Without using any API key) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/#your-pcserver&#34;&gt;Your PC/Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/#termux-on-android-phones&#34;&gt;Termux on Android Phones&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Option 2: &lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/#accessing-our-hosted-api&#34;&gt;Accessing Our Hosted API&lt;/a&gt; (Free)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Streaming Response&lt;/strong&gt;: The API supports streaming response, so you can get the response as soon as it&#39;s available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Endpoint Compatibility&lt;/strong&gt;: Full alignment with official OpenAI API endpoints, ensuring hassle-free integration with existing OpenAI libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complimentary Access&lt;/strong&gt;: No charges for API usage, making advanced AI accessible to everyone even &lt;strong&gt;without an API key&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing/Self-Hosting Guide&lt;/h2&gt; &#xA;&lt;h3&gt;Your PC/Server&lt;/h3&gt; &#xA;&lt;p&gt;To install and run the ChatGPT API Reverse Proxy on your PC/Server by following these steps:&lt;/p&gt; &#xA;&lt;p&gt;Note: This option is not available to all countries yet. if you are from a country that is not supported, you can use a &lt;strong&gt;U.S. VPN&lt;/strong&gt; or use &lt;strong&gt;our hosted API&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure NodeJs (v19+) is installed: &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Download NodeJs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/PawanOsman/ChatGPT.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;start.bat&lt;/code&gt; (Windows) or &lt;code&gt;start.sh&lt;/code&gt; (Linux with &lt;code&gt;bash start.sh&lt;/code&gt; command) to install dependencies and launch the server.&lt;/li&gt; &#xA; &lt;li&gt;Done, you can connect to your local server&#39;s API at: &lt;pre&gt;&lt;code&gt;http://localhost:3040/v1/chat/completions&#xA;&lt;/code&gt;&lt;/pre&gt; Note that the base url will be &lt;code&gt;http://localhost:3040/v1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To include installation instructions for Termux on Android devices, you can add the following section right after the instructions for Linux in the &lt;strong&gt;Installing/Self-Hosting Guide&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Termux on Android Phones&lt;/h3&gt; &#xA;&lt;p&gt;To install and run the ChatGPT API Reverse Proxy on Android using Termux, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;Termux&lt;/a&gt; from the Play Store.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update Termux packages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Upgrade Termux packages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install git, Node.js, and npm:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install -y git nodejs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/PawanOsman/ChatGPT.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the cloned directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ChatGPT&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the server with:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash start.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your local server will now be running and accessible at:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;http://localhost:3040/v1/chat/completions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the base url will be &lt;code&gt;http://localhost:3040/v1&lt;/code&gt;&lt;/p&gt; &lt;p&gt;You can now use this address to connect to your self-hosted ChatGPT API Reverse Proxy from Android applications/websites that support reverse proxy configurations, on the same device.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Accessing Our Hosted API&lt;/h2&gt; &#xA;&lt;p&gt;Utilize our pre-hosted ChatGPT-like API for free by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Joining our &lt;a href=&#34;https://discord.pawan.krd&#34;&gt;Discord server&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Obtaining an API key from the &lt;code&gt;#Bot&lt;/code&gt; channel with the &lt;code&gt;/key&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;Incorporating the API key into your requests to: &lt;pre&gt;&lt;code&gt;https://api.pawan.krd/v1/chat/completions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage Examples&lt;/h2&gt; &#xA;&lt;p&gt;Leverage the same integration code as OpenAI&#39;s official libraries by simply adjusting the API key and base URL in your requests. For self-hosted setups, ensure to switch the base URL to your local server&#39;s address as mentioned above.&lt;/p&gt; &#xA;&lt;h3&gt;Example Usage with OpenAI Libraries&lt;/h3&gt; &#xA;&lt;h4&gt;Python Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import openai&#xA;&#xA;openai.api_key = &#39;pk-**********************************************&#39; # For self-hosted version you can put anything&#xA;openai.base_url = &#34;https://api.pawan.krd/v1/&#34;  # For self-hosted version, use &#34;http://localhost:3040/v1/&#34;&#xA;&#xA;completion = openai.chat.completions.create(&#xA;    model=&#34;gpt-3.5-turbo&#34;,&#xA;    messages=[&#xA;        {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;How do I list all files in a directory using Python?&#34;},&#xA;    ],&#xA;)&#xA;&#xA;print(completion.choices[0].message.content)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Node.js Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import OpenAI from &#39;openai&#39;;&#xA;&#xA;const openai = new OpenAI({&#xA;&#x9;apiKey: &#34;pk-**********************************************&#34;, // For self-hosted version you can put anything&#xA;&#x9;baseURL: &#34;https://api.pawan.krd/v1&#34;, // For self-hosted version, use &#34;http://localhost:3040/v1&#34;&#xA;});&#xA;&#xA;const chatCompletion = await openai.chat.completions.create({&#xA;  messages: [{ role: &#39;user&#39;, content: &#39;Say this is a test&#39; }],&#xA;  model: &#39;gpt-3.5-turbo&#39;,&#xA;});&#xA;&#xA;console.log(chatCompletion.choices[0].message.content);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is under the AGPL-3.0 License. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/PawanOsman/ChatGPT/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for detailed information.&lt;/p&gt;</summary>
  </entry>
</feed>