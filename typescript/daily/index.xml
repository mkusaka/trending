<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-25T01:35:58Z</updated>
  <subtitle>Daily Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anti-work/shortest</title>
    <updated>2024-12-25T01:35:58Z</updated>
    <id>tag:github.com,2024-12-25:/anti-work/shortest</id>
    <link href="https://github.com/anti-work/shortest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QA via natural language AI tests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shortest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://shortest.com&#34;&gt;shortest.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;AI-powered natural language end-to-end testing framework.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Natural language E2E testing framework&lt;/li&gt; &#xA; &lt;li&gt;AI-powered test execution using Anthropic Claude API&lt;/li&gt; &#xA; &lt;li&gt;Built on Playwright&lt;/li&gt; &#xA; &lt;li&gt;GitHub integration with 2FA support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -D @antiwork/shortest&#xA;# or&#xA;pnpm add -D @antiwork/shortest&#xA;# or&#xA;yarn add -D @antiwork/shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;.shortest/&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; (where Shortest stores screenshots of each test run):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;.shortest/&#34; &amp;gt;&amp;gt; .gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;If you installed shortest without &lt;code&gt;-g&lt;/code&gt; flag, you can run tests as follows:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx shortest    # for npm&#xA;pnpm shortest   # for pnpm&#xA;yarn shortest   # for yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Determine your test entry and add your Anthropic API key in config file: &lt;code&gt;shortest.config.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import type { ShortestConfig } from &#39;@antiwork/shortest&#39;;&#xA;&#xA;export default {&#xA;  headless: false,&#xA;  baseUrl: &#39;http://localhost:3000&#39;,&#xA;  testDir: &#39;app/__tests__&#39;,&#xA;  anthropicKey: process.env.ANTHROPIC_API_KEY&#xA;} satisfies ShortestConfig; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Write your test in your test directory: &lt;code&gt;app/__tests__/login.test.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#39;@antiwork/shortest&#39;&#xA;&#xA;shortest(&#39;Login to the app using email and password&#39;, { username: process.env.GITHUB_USERNAME, password: process.env.GITHUB_PASSWORD })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using callback functions&lt;/h2&gt; &#xA;&lt;p&gt;You can also use callback functions to add additoinal assertions and other logic. AI will execute the callback function after the test execution in browser is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#39;@antiwork/shortest&#39;;&#xA;import { db } from &#39;@/lib/db/drizzle&#39;;&#xA;import { users } from &#39;@/lib/db/schema&#39;;&#xA;import { eq } from &#39;drizzle-orm&#39;;&#xA;&#xA;shortest(&#39;Login to the app using username and password&#39;, {&#xA;  username: process.env.USERNAME,&#xA;  password: process.env.PASSWORD&#xA;}).after(async ({ page }) =&amp;gt; {    &#xA;  // Get current user&#39;s clerk ID from the page&#xA;  const clerkId = await page.evaluate(() =&amp;gt; {&#xA;    return window.localStorage.getItem(&#39;clerk-user&#39;);&#xA;  }); &#xA;&#xA;  if (!clerkId) {&#xA;    throw new Error(&#39;User not found in database&#39;);&#xA;  }&#xA;&#xA;  // Query the database&#xA;  const [user] = await db&#xA;    .select()&#xA;    .from(users)&#xA;    .where(eq(users.clerkId, clerkId))&#xA;    .limit(1);&#xA;&#xA;  expect(user).toBeDefined();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lifecycle hooks&lt;/h2&gt; &#xA;&lt;p&gt;You can use lifecycle hooks to run code before and after the test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#39;@antiwork/shortest&#39;;&#xA;&#xA;shortest.beforeAll(async ({ page }) =&amp;gt; {&#xA;  await clerkSetup({&#xA;    frontendApiUrl: process.env.PLAYWRIGHT_TEST_BASE_URL ?? &#34;http://localhost:3000&#34;,&#xA;  });&#xA;});&#xA;&#xA;shortest.beforeEach(async ({ page }) =&amp;gt; {&#xA;  await clerk.signIn({&#xA;    page,&#xA;    signInParams: { &#xA;      strategy: &#34;email_code&#34;, &#xA;      identifier: &#34;iffy+clerk_test@example.com&#34; &#xA;    },&#xA;  });&#xA;});&#xA;&#xA;shortest.afterEach(async ({ page }) =&amp;gt; {&#xA;  await page.close();&#xA;});&#xA;&#xA;shortest.afterAll(async ({ page }) =&amp;gt; {&#xA;  await clerk.signOut({ page });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shortest                    # Run all tests&#xA;shortest login.test.ts     # Run specific test&#xA;shortest --headless        # Run in headless mode using cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you&#39;re done!&lt;/p&gt; &#xA;&lt;h2&gt;GitHub 2FA Login Setup&lt;/h2&gt; &#xA;&lt;p&gt;Shortest currently supports login using Github 2FA. For GitHub authentication tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to your repository settings&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &#34;Password and Authentication&#34;&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Authenticator App&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Use your authenticator app&#34;&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Setup key&#34; to obtain the OTP secret&lt;/li&gt; &#xA; &lt;li&gt;Add the OTP secret to your &lt;code&gt;.env.local&lt;/code&gt; file or use the Shortest CLI to add it&lt;/li&gt; &#xA; &lt;li&gt;Enter the 2FA code displayed in your terminal into Github&#39;s Authenticator setup page to complete the process&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shortest --github-code --secret=&amp;lt;OTP_SECRET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;p&gt;Required in &lt;code&gt;.env.local&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ANTHROPIC_API_KEY=your_api_key&#xA;GITHUB_TOTP_SECRET=your_secret  # Only for GitHub auth tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CI Setup&lt;/h2&gt; &#xA;&lt;p&gt;You can run shortest in your CI/CD pipeline by running tests in headless mode. Make sure to add your Anthropic API key to your CI/CD pipeline secrets.&lt;/p&gt; &#xA;&lt;h1&gt;Local Development Setup Guide&lt;/h1&gt; &#xA;&lt;p&gt;This guide will help you set up the Shortest web app for local development.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React &amp;gt;=19.0.0 (if using with Next.js 14+ or Server Actions)&lt;/li&gt; &#xA; &lt;li&gt;Next.js &amp;gt;=14.0.0 (if using Server Components/Actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Known Issues&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using this package with React 18 in Next.js 14+ projects may cause type conflicts with Server Actions and &lt;code&gt;useFormStatus&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you encounter type errors with form actions or React hooks, ensure you&#39;re using React 19&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/anti-work/shortest.git&#xA;cd shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g pnpm&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;For Gumroad Vercel Team Members:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;vercel env pull&lt;/code&gt; to get the latest environment variables&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com/docs/deployments/local-env#environment-variables-for-local-development&#34;&gt;https://vercel.com/docs/deployments/local-env#environment-variables-for-local-development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;For Other Contributors:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm run setup&lt;/code&gt; to configure the environment variables.&lt;/li&gt; &#xA; &lt;li&gt;The setup wizard will ask you for information. Refer to &#34;Services Configuration&#34; section below for more details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Set up the database:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm drizzle-kit generate&#xA;pnpm db:migrate&#xA;pnpm db:seed # creates stripe products, currently unused&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Services Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to set up the following services for local development. If you&#39;re not a Gumroad Vercel team member, you&#39;ll need to either run the setup wizard &lt;code&gt;pnpm run setup&lt;/code&gt; or manually configure each of these services and add the corresponding environment variables to your &lt;code&gt;.env.local&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Clerk&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to &lt;a href=&#34;https://clerk.com&#34;&gt;clerk.com&lt;/a&gt; and create a new app.&lt;/li&gt; &#xA;  &lt;li&gt;Name it whatever you like and &lt;strong&gt;disable all login methods except GitHub&lt;/strong&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/1de7aebc-8e9d-431a-ae13-af60635307a1&#34; alt=&#34;Clerk App Login&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Once created, copy the environment variables to your &lt;code&gt;.env.local&lt;/code&gt; file. &lt;img src=&#34;https://github.com/user-attachments/assets/df3381e6-017a-4e01-8bd3-5793e5f5d31e&#34; alt=&#34;Clerk Env Variables&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vercel Postgres&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your dashboard at &lt;a href=&#34;https://vercel.com&#34;&gt;vercel.com&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Navigate to the Storage tab and click the &lt;code&gt;Create Database&lt;/code&gt; button. &lt;img src=&#34;https://github.com/user-attachments/assets/acdf3ba7-31a6-498b-860c-171018d5ba02&#34; alt=&#34;Vercel Create Database&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Choose &lt;code&gt;Postgres&lt;/code&gt; from the &lt;code&gt;Browse Storage&lt;/code&gt; menu. &lt;img src=&#34;https://github.com/user-attachments/assets/9ad2a391-5213-4f31-a6c3-b9e54c69bb2e&#34; alt=&#34;Neon Postgres&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Copy your environment variables from the &lt;code&gt;Quickstart&lt;/code&gt; &lt;code&gt;.env.local&lt;/code&gt; tab. &lt;img src=&#34;https://github.com/user-attachments/assets/e48f1d96-2fd6-4e2e-aaa6-eeb5922cc521&#34; alt=&#34;Vercel Postgres .env.local&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Anthropic&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your dashboard at &lt;a href=&#34;https://anthropic.com&#34;&gt;anthropic.com&lt;/a&gt; and grab your API Key. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Note: If you&#39;ve never done this before, you will need to answer some questions and likely load your account with a balance. Not much is needed to test the app. &lt;img src=&#34;https://github.com/user-attachments/assets/0905ed4b-5815-4d50-bf43-8713a4397674&#34; alt=&#34;Anthropic API Key&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Stripe&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your &lt;code&gt;Developers&lt;/code&gt; dashboard at &lt;a href=&#34;https://stripe.com&#34;&gt;stripe.com&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Turn on &lt;code&gt;Test mode&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Go to the &lt;code&gt;API Keys&lt;/code&gt; tab and copy your &lt;code&gt;Secret key&lt;/code&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/0830b226-f2c2-4b92-a28f-f4682ad03ec0&#34; alt=&#34;Stripe Secret Key&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Go to the terminal of your project and type &lt;code&gt;pnpm run stripe:webhooks&lt;/code&gt;. It will prompt you to login with a code then give you your &lt;code&gt;STRIPE_WEBHOOK_SECRET&lt;/code&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/b02531ed-5c31-40ba-8483-32880aa3ca36&#34; alt=&#34;Stripe Webhook Secret&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GitHub OAuth&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a GitHub OAuth App:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Go to your GitHub account settings.&lt;/li&gt; &#xA;    &lt;li&gt;Navigate to &lt;code&gt;Developer settings&lt;/code&gt; &amp;gt; &lt;code&gt;OAuth Apps&lt;/code&gt; &amp;gt; &lt;code&gt;New OAuth App&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;Fill in the application details: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Application name&lt;/strong&gt;: Choose any name for your app&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Homepage URL&lt;/strong&gt;: Set to &lt;code&gt;http://localhost:3000&lt;/code&gt; for local development&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Authorization callback URL&lt;/strong&gt;: Use the Clerk-provided callback URL (found in below image) &lt;img src=&#34;https://github.com/user-attachments/assets/1af635fd-dedc-401c-a45a-159cb20bb209&#34; alt=&#34;Github OAuth App&#34;&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Configure Clerk with GitHub OAuth:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Go to your Clerk dashboard.&lt;/li&gt; &#xA;    &lt;li&gt;Navigate to &lt;code&gt;Configure&lt;/code&gt; &amp;gt; &lt;code&gt;SSO Connections&lt;/code&gt; &amp;gt; &lt;code&gt;GitHub&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;Select &lt;code&gt;Use custom credentials&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Enter your &lt;code&gt;Client ID&lt;/code&gt; and &lt;code&gt;Client Secret&lt;/code&gt; from the GitHub OAuth app you just created.&lt;/li&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;repo&lt;/code&gt; to the &lt;code&gt;Scopes&lt;/code&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/31d414e1-4e1e-4725-8649-ec1826c6e53e&#34; alt=&#34;Clerk Custom Credentials&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Running the Application&lt;/h3&gt; &#xA;&lt;p&gt;Once you have set up the environment variables and installed dependencies, run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to see the app in action.&lt;/p&gt; &#xA;&lt;h2&gt;Building Shortest Package Locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm build:pkg&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Shortest CLI for local development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# packages/shortest&#xA;cd packages/shortest&#xA;pnpm link --global&#xA;&#xA;# root&#xA;cd ../..&#xA;pnpm link --global shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Cli Locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a temporary test directory outside your project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/shortest-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Pack shortest package locally:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /packages/shortest&#xA;pnpm pack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install the packed tarball in your test directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/test-cli&#xA;npm init -y&#xA;npm install ../packages/shortest/antiwork-shortest-{version}.tgz&#xA;# or to run globally&#xA;npm install -g ../packages/shortest/antiwork-shortest-{version}.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Try cli&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx shortest -h&#xA;# or&#xA;./node_modules/.bin/shortest -h&#xA;# or if you have installed shortest globally&#xA;shortest -h&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>usual2970/certimate</title>
    <updated>2024-12-25T01:35:58Z</updated>
    <id>tag:github.com,2024-12-25:/usual2970/certimate</id>
    <link href="https://github.com/usual2970/certimate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;开源的SSL证书管理工具，可以帮助你自动申请、部署SSL证书，并在证书即将过期时自动续期。An open-source SSL certificate management tool that helps you automatically apply for and deploy SSL certificates, as well as automatically renew them when they are about to expire.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/next/README.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/next/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] 当前分支为 &lt;code&gt;next&lt;/code&gt;，是 v0.3.x 的开发分支，目前还没有稳定，请勿在生产环境中使用。&lt;/p&gt; &#xA; &lt;p&gt;如需访问之前的版本，请切换至 &lt;code&gt;main&lt;/code&gt; 分支。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;🔒Certimate&lt;/h1&gt; &#xA;&lt;p&gt;做个人产品或在小企业负责运维的同学，需要管理多个域名，要给域名申请证书。但手动申请证书有以下缺点：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;😱 麻烦：申请、部署证书虽不困难，但也挺麻烦的，尤其是维护多个域名的时候。&lt;/li&gt; &#xA; &lt;li&gt;😭 易忘：当前免费证书有效期仅 90 天，这就要求定期操作，增加工作量的同时，也很容易忘掉，导致网站无法访问。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Certimate 就是为了解决上述问题而产生的，它具有以下特点：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;操作简单：自动申请、部署、续期 SSL 证书，全程无需人工干预。&lt;/li&gt; &#xA; &lt;li&gt;支持私有部署：部署方法简单，只需下载二进制文件执行即可。二进制文件、Docker 镜像全部用 Github Actions 生成，过程透明，可自行审计。&lt;/li&gt; &#xA; &lt;li&gt;数据安全：由于是私有部署，所有数据均存储在本地，不会保存在服务商的服务器，确保数据的安全性。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;相关文章：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/v0.2.0&#34;&gt;⚠️⚠️⚠️V0.2.0-第一个不向后兼容的版本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/why-certimate&#34;&gt;Why Certimate?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/multi-deployer&#34;&gt;域名变量及部署授权组介绍&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Certimate 旨在为用户提供一个安全、简便的 SSL 证书管理解决方案。使用文档请访问 &lt;a href=&#34;https://docs.certimate.me&#34;&gt;https://docs.certimate.me&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;一、安装&lt;/h2&gt; &#xA;&lt;p&gt;安装 Certimate 非常简单，你可以选择以下方式之一进行安装：&lt;/p&gt; &#xA;&lt;h3&gt;1. 二进制文件&lt;/h3&gt; &#xA;&lt;p&gt;你可以直接从&lt;a href=&#34;https://github.com/usual2970/certimate/releases&#34;&gt;Releases 页&lt;/a&gt;下载预先编译好的二进制文件，解压后执行:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./certimate serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或运行以下命令自动给 Certimate 自身添加证书&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./certimate serve 你的域名&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] MacOS 在执行二进制文件时会提示：无法打开“Certimate”，因为 Apple 无法检查其是否包含恶意软件。可在“系统设置 &amp;gt; 隐私与安全性 &amp;gt; 安全性”中点击“仍然允许”，然后再次尝试执行二进制文件。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2. Docker 安装&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;mkdir -p ~/.certimate &amp;amp;&amp;amp; cd ~/.certimate &amp;amp;&amp;amp; curl -O https://raw.githubusercontent.com/usual2970/certimate/refs/heads/main/docker/docker-compose.yml &amp;amp;&amp;amp; docker compose up -d&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. 源代码安装&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone EMAIL:usual2970/certimate.git&#xA;cd certimate&#xA;make local.run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;二、使用&lt;/h2&gt; &#xA;&lt;p&gt;执行完上述安装操作后，在浏览器中访问 &lt;code&gt;http://127.0.0.1:8090&lt;/code&gt; 即可访问 Certimate 管理页面。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;用户名：admin@certimate.fun&#xA;密码：1234567890&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zpCoLVM.gif&#34; alt=&#34;usage.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;三、支持的服务商列表&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;服务商&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;支持申请证书&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;支持部署证书&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;阿里云&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可签发在阿里云注册的域名；可部署到阿里云 OSS、CDN、SLB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;腾讯云&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可签发在腾讯云注册的域名；可部署到腾讯云 COS、CDN、ECDN、CLB、TEO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;百度智能云&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可部署到百度智能云 CDN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;华为云&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可签发在华为云注册的域名；可部署到华为云 CDN、ELB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;七牛云&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可部署到七牛云 CDN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;多吉云&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可部署到多吉云 CDN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;火山引擎&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可签发在火山引擎注册的域名；可部署到火山引擎 Live、CDN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AWS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可签发在 AWS Route53 托管的域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CloudFlare&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可签发在 CloudFlare 注册的域名；CloudFlare 服务自带 SSL 证书&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GoDaddy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可签发在 GoDaddy 注册的域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;NameSilo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可签发在 NameSilo 注册的域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PowerDNS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可签发在 PowerDNS 托管的域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HTTP 请求&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;可签发允许通过 HTTP 请求修改 DNS 的域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;本地部署&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可部署到本地服务器&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SSH&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可部署到 SSH 服务器&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Webhook&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可部署时回调到 Webhook&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Kubernetes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√&lt;/td&gt; &#xA;   &lt;td&gt;可部署到 Kubernetes Secret&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;四、系统截图&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/SYjjbql.jpeg&#34; title=&#34;Login page&#34; width=&#34;95%&#34;&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/WMVbBId.jpeg&#34; title=&#34;Dashboard page&#34; width=&#34;47%&#34;&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/8wit3ZA.jpeg&#34; title=&#34;Domains page&#34; width=&#34;47%&#34;&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/EWtOoJ0.jpeg&#34; title=&#34;Accesses page&#34; width=&#34;47%&#34;&gt; &#xA; &lt;img src=&#34;https://i.imgur.com/aaPtSW7.jpeg&#34; title=&#34;History page&#34; width=&#34;47%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;五、概念&lt;/h2&gt; &#xA;&lt;p&gt;Certimate 的工作流程如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用户通过 Certimate 管理页面填写申请证书的信息，包括域名、DNS 服务商的授权信息、以及要部署到的服务商的授权信息。&lt;/li&gt; &#xA; &lt;li&gt;Certimate 向证书厂商的 API 发起申请请求，获取 SSL 证书。&lt;/li&gt; &#xA; &lt;li&gt;Certimate 存储证书信息，包括证书内容、私钥、证书有效期等，并在证书即将过期时自动续期。&lt;/li&gt; &#xA; &lt;li&gt;Certimate 向服务商的 API 发起部署请求，将证书部署到服务商的服务器上。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这就涉及域名、DNS 服务商的授权信息、部署服务商的授权信息等。&lt;/p&gt; &#xA;&lt;h3&gt;1. 域名&lt;/h3&gt; &#xA;&lt;p&gt;就是要申请证书的域名。&lt;/p&gt; &#xA;&lt;h3&gt;2. DNS 服务商授权信息&lt;/h3&gt; &#xA;&lt;p&gt;给域名申请证书需要证明域名是你的，所以我们手动申请证书的时候一般需要在域名服务商的控制台解析记录中添加一个 TXT 域名解析记录。&lt;/p&gt; &#xA;&lt;p&gt;Certimate 会自动添加一个 TXT 域名解析记录，你只需要在 Certimate 后台中填写你的域名服务商的授权信息即可。&lt;/p&gt; &#xA;&lt;p&gt;比如你在阿里云购买的域名，授权信息如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;accessKeyId: your-access-key-id&#xA;accessKeySecret: your-access-key-secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在腾讯云购买的域名，授权信息如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;secretId: your-secret-id&#xA;secretKey: your-secret-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注意，此授权信息需具有访问域名及 DNS 解析的管理权限，具体的权限清单请参阅各服务商自己的技术文档。&lt;/p&gt; &#xA;&lt;h3&gt;3. 部署服务商授权信息&lt;/h3&gt; &#xA;&lt;p&gt;Certimate 申请证书后，会自动将证书部署到你指定的目标上，比如阿里云 CDN，Certimate 会根据你填写的授权信息及域名找到对应的 CDN 服务，并将证书部署到对应的 CDN 服务上。&lt;/p&gt; &#xA;&lt;p&gt;部署服务商授权信息和 DNS 服务商授权信息基本一致，区别在于 DNS 服务商授权信息用于证明域名是你的，部署服务商授权信息用于提供证书部署的授权信息。&lt;/p&gt; &#xA;&lt;p&gt;注意，此授权信息需具有访问部署目标服务的相关管理权限，具体的权限清单请参阅各服务商自己的技术文档。&lt;/p&gt; &#xA;&lt;h2&gt;六、常见问题&lt;/h2&gt; &#xA;&lt;p&gt;Q: 提供 SaaS 服务吗？&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: 不提供，目前仅支持 self-hosted（私有部署）。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Q: 数据安全？&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: 由于仅支持私有部署，各种数据都保存在用户的服务器上。另外 Certimate 源码也开源，二进制包及 Docker 镜像打包过程全部使用 Github Actions 进行，过程透明可见，可自行审计。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Q: 自动续期证书？&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: 已经申请的证书会在&lt;strong&gt;过期前 10 天&lt;/strong&gt;自动续期。每天会检查一次证书是否快要过期，快要过期时会自动重新申请证书并部署到目标服务上。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;七、贡献&lt;/h2&gt; &#xA;&lt;p&gt;Certimate 是一个免费且开源的项目，采用 &lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/next/LICENSE.md&#34;&gt;MIT 开源协议&lt;/a&gt;。你可以使用它做任何你想做的事，甚至把它当作一个付费服务提供给用户。&lt;/p&gt; &#xA;&lt;p&gt;你可以通过以下方式来支持 Certimate 的开发：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;提交代码：如果你发现了 Bug 或有新的功能需求，而你又有相关经验，可以&lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/next/CONTRIBUTING.md&#34;&gt;提交代码&lt;/a&gt;给我们。&lt;/li&gt; &#xA; &lt;li&gt;提交 Issue：功能建议或者 Bug 可以&lt;a href=&#34;https://github.com/usual2970/certimate/issues&#34;&gt;提交 Issue&lt;/a&gt; 给我们。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;支持更多服务商、UI 的优化改进、Bug 修复、文档完善等，欢迎大家提交 PR。&lt;/p&gt; &#xA;&lt;h2&gt;八、免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本软件依据 MIT 许可证（MIT License）发布，免费提供，旨在“按现状”供用户使用。作者及贡献者不对使用本软件所产生的任何直接或间接后果承担责任，包括但不限于性能下降、数据丢失、服务中断、或任何其他类型的损害。&lt;/p&gt; &#xA;&lt;p&gt;无任何保证：本软件不提供任何明示或暗示的保证，包括但不限于对特定用途的适用性、无侵权性、商用性及可靠性的保证。&lt;/p&gt; &#xA;&lt;p&gt;用户责任：使用本软件即表示您理解并同意承担由此产生的一切风险及责任。&lt;/p&gt; &#xA;&lt;h2&gt;九、加入社区&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/+ZXphsppxUg41YmVl&#34;&gt;Telegram-a new era of messaging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微信群聊（超 200 人需邀请入群，可先加作者好友）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://i.imgur.com/8xwsLTA.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;h2&gt;十、Star 趋势图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://starchart.cc/usual2970/certimate.svg?variant=adaptive&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>