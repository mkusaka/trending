<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T02:07:26Z</updated>
  <subtitle>Monthly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shadcn/taxonomy</title>
    <updated>2022-12-01T02:07:26Z</updated>
    <id>tag:github.com,2022-12-01:/shadcn/taxonomy</id>
    <link href="https://github.com/shadcn/taxonomy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source application built using the new router, server components and everything new in Next.js 13.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Taxonomy&lt;/h1&gt; &#xA;&lt;p&gt;An open source application built using the new router, server components and everything new in Next.js 13.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; This app is a work in progress. I&#39;m building this in public. You can follow the progress on Twitter &lt;a href=&#34;https://twitter.com/shadcn&#34;&gt;@shadcn&lt;/a&gt;. See the roadmap below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/124599/198038921-2b16b18b-cb4d-44b1-bd1d-6419d4a8d92c.png&#34; alt=&#34;screenshot-2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About this project&lt;/h2&gt; &#xA;&lt;p&gt;Right now, I&#39;m using this project as an experiment to see how a modern app (with features like authentication, subscriptions, API routes, static pages for docs ...etc) would work in Next.js 13 and server components.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ll be posting updates and issues here.&lt;/p&gt; &#xA;&lt;p&gt;A few people have asked me to turn this into a starter. I think we could do that once the new features are out of beta.&lt;/p&gt; &#xA;&lt;h2&gt;Note on Performance&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; This app is using the canary releases for Next.js 13 and React 18. The new router and app dir is still in beta and not production-ready. NextAuth.js, which is used for authentication, is also not fully supported in Next.js 13 and RSC. &lt;strong&gt;Expect some performance hits when testing the dashboard&lt;/strong&gt;. If you see something broken, you can ping me &lt;a href=&#34;https://twitter.com/shadcn&#34;&gt;@shadcn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New &lt;code&gt;/app&lt;/code&gt; dir,&lt;/li&gt; &#xA; &lt;li&gt;Routing, Layouts, Nested Layouts and Layout Groups&lt;/li&gt; &#xA; &lt;li&gt;Data Fetching, Caching and Mutation&lt;/li&gt; &#xA; &lt;li&gt;Loading UI&lt;/li&gt; &#xA; &lt;li&gt;Server and Client Components&lt;/li&gt; &#xA; &lt;li&gt;API Routes and Middlewares&lt;/li&gt; &#xA; &lt;li&gt;Authentication using &lt;strong&gt;NextAuth.js&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ORM using &lt;strong&gt;Prisma&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Database on &lt;strong&gt;PlanetScale&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;UI Components built using &lt;strong&gt;Radix UI&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation and blog using &lt;strong&gt;MDX&lt;/strong&gt; and &lt;strong&gt;Contentlayer&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Subscriptions using &lt;strong&gt;Stripe&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Styled using &lt;strong&gt;Tailwind CSS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Validations using &lt;strong&gt;Zod&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in &lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add MDX support for basic pages&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Build marketing pages&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Subscriptions using Stripe&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Responsive styles&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add OG image for blog using @vercel/og&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Dark mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;A list of things not working right now:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;del&gt;GitHub authentication (use email)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/prisma/prisma/issues/16117&#34;&gt;Prisma: Error: ENOENT: no such file or directory, open &#39;/var/task/.next/server/chunks/schema.prisma&#39;&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/vercel/next.js/issues/42414&#34;&gt;Next.js 13: Client side navigation does not update head&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Why not tRPC, Turborepo or X?&lt;/h2&gt; &#xA;&lt;p&gt;I might add this later. For now, I want to see how far we can get using Next.js only.&lt;/p&gt; &#xA;&lt;p&gt;If you have some suggestions, feel free to create an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependencies using pnpm:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env.local&lt;/code&gt; and update the variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the development server:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://github.com/reflexjs/reflex/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>balena-io/etcher</title>
    <updated>2022-12-01T02:07:26Z</updated>
    <id>tag:github.com,2022-12-01:/balena-io/etcher</id>
    <link href="https://github.com/balena-io/etcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flash OS images to SD cards &amp; USB drives, safely and easily.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Etcher&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Flash OS images to SD cards &amp;amp; USB drives, safely and easily.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Etcher is a powerful OS image flasher built with web technologies to ensure flashing an SDCard or USB drive is a pleasant and safe experience. It protects you from accidentally writing to your hard-drives, ensures every byte of data was written correctly, and much more. It can also directly flash Raspberry Pi devices that support &lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#usb-device-boot-mode&#34;&gt;USB device boot mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://balena.io/etcher&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/balena-io/etcher.svg?style=flat-square&#34; alt=&#34;Current Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/balena-io/etcher.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forums.balena.io/c/etcher&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/forums.balena.io/topics.svg?style=flat-square&amp;amp;label=balena.io%20forums&#34; alt=&#34;Balena.io Forums&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://balena.io/etcher&#34;&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/SUPPORT.md&#34;&gt;&lt;strong&gt;Support&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/docs/USER-DOCUMENTATION.md&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/docs/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/balena-io/etcher/milestones&#34;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Operating Systems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (most distros)&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.10 (Yosemite) and later&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Windows 7 and later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Etcher will run on any platform officially supported by &lt;a href=&#34;https://electronjs.org/&#34;&gt;Electron&lt;/a&gt;. Read more in their &lt;a href=&#34;https://electronjs.org/docs/tutorial/support#supported-platforms&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installers&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://balena.io/etcher&#34;&gt;downloads page&lt;/a&gt; for the latest pre-made installers for all supported operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://cloudsmith.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OSS%20hosting%20by-cloudsmith-blue?logo=cloudsmith&amp;amp;style=for-the-badge&#34; alt=&#34;Hosted By: Cloudsmith&#34;&gt;&lt;/a&gt; &lt;br&gt; Package repository hosting is graciously provided by &lt;a href=&#34;https://cloudsmith.com&#34;&gt;Cloudsmith&lt;/a&gt;. Cloudsmith is the only fully hosted, cloud-native, universal package management solution, that enables your organization to create, store and share packages in any format, to any place, with total confidence.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Debian and Ubuntu based Package Repository (GNU/Linux x86/x64)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Detailed or alternative steps in the &lt;a href=&#34;https://cloudsmith.io/~balena/repos/etcher/setup/#formats-deb&#34;&gt;instructions by Cloudsmith&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Etcher Debian repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;   &#39;https://dl.cloudsmith.io/public/balena/etcher/setup.deb.sh&#39; \&#xA;   | sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update&#xA;sudo apt-get install balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get remove balena-etcher-electron&#xA;rm /etc/apt/sources.list.d/balena-etcher.list&#xA;apt-get clean&#xA;rm -rf /var/lib/apt/lists/*&#xA;apt-get update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redhat (RHEL) and Fedora-based Package Repository (GNU/Linux x86/x64)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Detailed or alternative steps in the &lt;a href=&#34;https://cloudsmith.io/~balena/repos/etcher/setup/#formats-rpm&#34;&gt;instructions by Cloudsmith&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;DNF&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Etcher rpm repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;   &#39;https://dl.cloudsmith.io/public/balena/etcher/setup.rpm.sh&#39; \&#xA;   | sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install -y balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h6&gt;Uninstall&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm /etc/yum.repos.d/balena-etcher.repo&#xA;rm /etc/yum.repos.d/balena-etcher-source.repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Yum&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Etcher rpm repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;   &#39;https://dl.cloudsmith.io/public/balena/etcher/setup.rpm.sh&#39; \&#xA;   | sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum install -y balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h6&gt;Uninstall&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum remove -y balena-etcher-electron&#xA;rm /etc/yum.repos.d/balena-etcher.repo&#xA;rm /etc/yum.repos.d/balena-etcher-source.repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenSUSE LEAP &amp;amp; Tumbleweed install (zypper)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -1sLf \&#xA;&#39;https://dl.cloudsmith.io/public/balena/etcher/setup.rpm.sh&#39; \&#xA;| sudo -E bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update and install&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo zypper up&#xA;sudo zypper install balena-etcher-electron&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo zypper rm balena-etcher-electron&#xA;# remove the repo&#xA;sudo zypper rr balena-etcher&#xA;sudo zypper rr balena-etcher-source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Solus (GNU/Linux x64)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo eopkg it etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo eopkg rm etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch/Manjaro Linux (GNU/Linux x64)&lt;/h4&gt; &#xA;&lt;p&gt;Etcher is offered through the Arch User Repository and can be installed on both Manjaro and Arch systems. You can compile it from the source code in this repository using &lt;a href=&#34;https://aur.archlinux.org/packages/balena-etcher/&#34;&gt;&lt;code&gt;balena-etcher&lt;/code&gt;&lt;/a&gt;. The following example uses a common AUR helper to install the latest release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S balena-etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -R balena-etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Brew (macOS)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Etcher has to be updated manually to point to new versions, so it might not refer to the latest version immediately after an Etcher release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install balenaetcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew uninstall balenaetcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Chocolatey (Windows)&lt;/h4&gt; &#xA;&lt;p&gt;This package is maintained by &lt;a href=&#34;https://github.com/majkinetor&#34;&gt;@majkinetor&lt;/a&gt;, and is kept up to date automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Uninstall&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco uninstall etcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re having any problem, please &lt;a href=&#34;https://github.com/balena-io/etcher/issues/new&#34;&gt;raise an issue&lt;/a&gt; on GitHub, and the balena.io team will be happy to help.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Etcher is free software and may be redistributed under the terms specified in the &lt;a href=&#34;https://github.com/balena-io/etcher/raw/master/LICENSE&#34;&gt;license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>solidjs/solid-start</title>
    <updated>2022-12-01T02:07:26Z</updated>
    <id>tag:github.com,2022-12-01:/solidjs/solid-start</id>
    <link href="https://github.com/solidjs/solid-start" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SolidStart, the Solid app framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;img width=&#34;100%&#34; src=&#34;https://assets.solidjs.com/banner?project=Start&amp;amp;type=core&#34; alt=&#34;Solid Docs&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;SolidStart&lt;/h1&gt; &#xA;&lt;p&gt;This is the home of the Solid app framework. This is still a &lt;strong&gt;work in progress&lt;/strong&gt;. Many features are missing or incomplete. Experimental status does not even mean beta status. Patch releases will break everything.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File-system based routing&lt;/li&gt; &#xA; &lt;li&gt;Supports all rendering modes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Server-side rendering (SSR)&lt;/li&gt; &#xA;   &lt;li&gt;Streaming SSR&lt;/li&gt; &#xA;   &lt;li&gt;Client-side rendering (CSR)&lt;/li&gt; &#xA;   &lt;li&gt;Static Site Generation (SSG)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Streaming&lt;/li&gt; &#xA; &lt;li&gt;Build optimizations with Code splitting, tree shaking and dead code elimination&lt;/li&gt; &#xA; &lt;li&gt;API Routes&lt;/li&gt; &#xA; &lt;li&gt;Built on Web standards like Fetch, Streams, and WebCrypto&lt;/li&gt; &#xA; &lt;li&gt;Adapters for deployment to all popular platforms&lt;/li&gt; &#xA; &lt;li&gt;CSS Modules, SASS/SCSS Support&lt;/li&gt; &#xA; &lt;li&gt;TypeScript-first&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir my-app&#xA;cd my-app&#xA;npm init solid&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;The monorepo uses &lt;code&gt;pnpm&lt;/code&gt; as the package manager. To install &lt;code&gt;pnpm&lt;/code&gt;, run the following command in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g pnpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pnpm install&lt;/code&gt; to install all the dependencies for the packages and examples in your monorepo.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;Monorepo &amp;amp; &lt;code&gt;project.json&lt;/code&gt; &lt;code&gt;&#34;workspace&#34;&lt;/code&gt; support&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you are using Solid Start within a monorepo that takes advantage of the &lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;&#34;workspaces&#34;&lt;/code&gt; property (e.g. &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/workspaces/&#34;&gt;yarn workspaces&lt;/a&gt;) with hoisted dependencies (the default for yarn), you must include &lt;code&gt;solid-start&lt;/code&gt; within the optional &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; (for yarn v2 or higher, see further down for instructions) workspaces property.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;In the following, &#34;workspace root&#34; refers to the root of your repository while &#34;project root&#34; refers to the root of a child package within your repository&lt;/em&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;For example, if specifying &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; options from the workspace root (i.e. for all packages):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in workspace root&#xA;{&#xA;  &#34;workspaces&#34;: {&#xA;    &#34;packages&#34;: [&#xA;      /* ... */&#xA;    ],&#xA;    &#34;nohoist&#34;: [&#34;**/solid-start&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If specifying &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; options for a specific package using &lt;code&gt;solid-start&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in project root of a workspace child&#xA;{&#xA;  &#34;workspaces&#34;: {&#xA;    &#34;nohoist&#34;: [&#34;solid-start&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Regardless of where you specify the &lt;code&gt;nohoist&lt;/code&gt; option, you also need to include &lt;code&gt;solid-start&lt;/code&gt; as a &lt;code&gt;devDependency&lt;/code&gt; in the child &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;The reason why this is necessary is because &lt;code&gt;solid-start&lt;/code&gt; creates an &lt;code&gt;index.html&lt;/code&gt; file within your project which expects to load a script located in &lt;code&gt;/node_modules/solid-start/runtime/entry.jsx&lt;/code&gt; (where &lt;code&gt;/&lt;/code&gt; is the path of your project root). By default, if you hoist the &lt;code&gt;solid-start&lt;/code&gt; dependency into the workspace root then that script will not be available within the package&#39;s &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Yarn v2 or higher&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;nohoist&lt;/code&gt; option is no longer available in Yarn v2+. In this case, we can use the &lt;code&gt;installConfig&lt;/code&gt; property in the &lt;code&gt;package.json&lt;/code&gt; (either workspace package or a specific project package) to make sure our deps are not hoisted.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in project root of a workspace child&#xA;{&#xA;  &#34;installConfig&#34;: {&#xA;    &#34;hoistingLimits&#34;: &#34;dependencies&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;[0.1.6]&lt;/h3&gt; &#xA;&lt;p&gt;Renamed API Routes exports from lower case to upper case method names to match closely how people see those functions in the spec and in usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- export function get() {&#xA;+ export function GET() {&#xA;  return new Response();&#xA;}&#xA;&#xA;- export function post() {&#xA;+ export function POST() {&#xA;&#xA;  return new Response();&#xA;}&#xA;&#xA;- export function patch() {&#xA;+ export function PATCH() {&#xA;  return new Response();&#xA;}&#xA;&#xA;- export function del() {&#xA;+ export function DELETE() {&#xA;  return new Response();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[0.1.0-alpha.104]&lt;/h3&gt; &#xA;&lt;p&gt;Changed grouped routes from &lt;code&gt;__name&lt;/code&gt; syntax to &lt;code&gt;(name)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;[0.1.0-alpha.103]&lt;/h3&gt; &#xA;&lt;p&gt;Changed special compiled functions like &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;createServerData&lt;/code&gt;, &lt;code&gt;createServerAction$&lt;/code&gt;, &lt;code&gt;createServerMultiAction$&lt;/code&gt;. to have a postfix &lt;code&gt;$&lt;/code&gt; to indicate their special compiled (hoisted behavior).&lt;/p&gt; &#xA;&lt;p&gt;Also moved the optional first argument of &lt;code&gt;createServerData$&lt;/code&gt; under &lt;code&gt;key&lt;/code&gt; option. While this hides a very important option it makes the signatures more similar, so it is clear it is the main (first) function that is running on the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const data = createServerData$(&#xA;  async pathname =&amp;gt; {&#xA;    let mod = mods[`./docs${pathname}.mdx`] ?? mods[`./docs${pathname}.md`];&#xA;    return mod.getHeadings().filter(h =&amp;gt; h.depth &amp;gt; 1 &amp;amp;&amp;amp; h.depth &amp;lt;= 3);&#xA;  },&#xA;  {&#xA;    key: () =&amp;gt; path.pathname&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[0.1.0-alpha.??] - Moving towards beta&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    vite.config.ts&#xA;   &lt;/mono&gt;&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import solid from &#39;solid-start&#39;;&#xA;+ import solid from &#39;solid-start/vite&#39;;&#xA;import { defineConfig } from &#39;vite&#39;;&#xA;&#xA;export default defineConfig({&#xA;  plugins: [solid()]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;p&gt;We wanted to use the main entry point of &lt;code&gt;solid-start&lt;/code&gt; for use within the app where you are spending most of your time. And for the &lt;code&gt;vite&lt;/code&gt; config, we use the &lt;code&gt;solid-start/vite&lt;/code&gt; entrypoint.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    entry-server.tsx&#xA;   &lt;/mono&gt;&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;import { createHandler, renderAsync, StartServer } from &#34;solid-start/entry-server&#34;;&#xA;&#xA;- export default createHandler(renderAsync(context =&amp;gt; &amp;lt;StartServer context={context} /&amp;gt;));&#xA;+ export default createHandler(renderAsync(event =&amp;gt; &amp;lt;StartServer event={event} /&amp;gt;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;p&gt;The prop received by &lt;code&gt;StartServer&lt;/code&gt;, and given to you by &lt;code&gt;createHandler&lt;/code&gt; is called &lt;code&gt;event&lt;/code&gt; instead of &lt;code&gt;context&lt;/code&gt;. It represents a &lt;code&gt;PageEvent&lt;/code&gt; which is a &lt;code&gt;FetchEvent&lt;/code&gt; that the server decided should be rendered by our components as a &lt;code&gt;Page&lt;/code&gt;. We adopted the &lt;code&gt;event&lt;/code&gt; terminology to represent the input that our server handlers received.&lt;/p&gt; &#xA; &lt;p&gt;For example, the input to our top-level server handler is a &lt;code&gt;FetchEvent&lt;/code&gt;. It can then be routed to a server function and be passed as a &lt;code&gt;ServerFunctionEvent&lt;/code&gt; or to an API Endpoint as an &lt;code&gt;ApiEvent&lt;/code&gt;. This terminology is adopted from the ServiceWorker API and Cloudflare Workers API.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    entry-client.tsx&#xA;   &lt;/mono&gt;&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you were using SSR:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import { hydrate } from &#34;solid-js&#34;;&#xA;- import { StartClient } from &#34;solid-start/entry-client&#34;;&#xA;+ import { mount, StartClient } from &#34;solid-start/entry-client&#34;;&#xA;&#xA;- hydrate(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document);&#xA;+ mount(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you were not using SSR and rendering your app client-side:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import { render } from &#34;solid-js&#34;;&#xA;- import { StartClient } from &#34;solid-start/entry-client&#34;;&#xA;+ import { mount, StartClient } from &#34;solid-start/entry-client&#34;;&#xA;&#xA;- render(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document.body);&#xA;+ mount(() =&amp;gt; &amp;lt;StartClient /&amp;gt;, document);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;p&gt;Earlier, you called &lt;code&gt;hydrate(document)&lt;/code&gt; or &lt;code&gt;render(document.body)&lt;/code&gt; here based on what kind of rendering mode you had selected and whether you had SSR turned on. We felt this was slightly annoying to change if you wanted to switch between the modes and error prone if you are not careful and end up passing &lt;code&gt;document&lt;/code&gt; to &lt;code&gt;render&lt;/code&gt; instead.&lt;/p&gt; &#xA; &lt;p&gt;We still wanted to expose &lt;code&gt;entry-client.tsx&lt;/code&gt; to the user so that they can take over and do their own thing here if they want. We made a helper function called &lt;code&gt;mount&lt;/code&gt; that embeds the logic for deciding how to interact with the app we get from the server, be it &lt;code&gt;hydrate&lt;/code&gt; or &lt;code&gt;render&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;&#xA;   &lt;mono&gt;&#xA;    root.tsx&#xA;   &lt;/mono&gt;&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;// @refresh reload&#xA;import { Suspense } from &#34;solid-js&#34;;&#xA;- import { Meta, Link, Routes, Scripts } from &#34;solid-start/root&#34;;&#xA;+ import { FileRoutes, Scripts, Html, Head, Body, Routes, Meta, ErrorBoundary, A } from &#34;solid-start&#34;;&#xA;&#xA;export default function Root() {&#xA;  return (&#xA;-    &amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;+    &amp;lt;Html lang=&#34;en&#34;&amp;gt;&#xA;-      &amp;lt;head&amp;gt;&#xA;+      &amp;lt;Head&amp;gt;&#xA;&#xA;-        &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;&#xA;+        &amp;lt;Meta charset=&#34;utf-8&#34; /&amp;gt;&#xA;-        &amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34; /&amp;gt;&#xA;+        &amp;lt;Meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34; /&amp;gt;&#xA;&#xA;-        &amp;lt;Meta /&amp;gt; // already exists inside `Head`&#xA;-        &amp;lt;Links /&amp;gt; // already exists inside `Head`&#xA;&#xA;-      &amp;lt;/head&amp;gt;&#xA;+      &amp;lt;/Head&amp;gt;&#xA;-      &amp;lt;body&amp;gt;&#xA;+      &amp;lt;Body&amp;gt;&#xA;         &amp;lt;Suspense&amp;gt;&#xA;           &amp;lt;ErrorBoundary&amp;gt;&#xA;             &amp;lt;A href=&#34;/&#34;&amp;gt;Index&amp;lt;/A&amp;gt;&#xA;             &amp;lt;A href=&#34;/about&#34;&amp;gt;About&amp;lt;/A&amp;gt;&#xA;-            &amp;lt;Routes /&amp;gt;&#xA;+            &amp;lt;Routes&amp;gt;&#xA;+              &amp;lt;FileRoutes /&amp;gt;&#xA;+            &amp;lt;/Routes&amp;gt;&#xA;           &amp;lt;/ErrorBoundary&amp;gt;&#xA;         &amp;lt;/Suspense&amp;gt;&#xA;         &amp;lt;Scripts /&amp;gt;&#xA;-     &amp;lt;/body&amp;gt;&#xA;+     &amp;lt;/Body&amp;gt;&#xA;-   &amp;lt;/html&amp;gt;&#xA;+   &amp;lt;/Html&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;p&gt;We changed how we declare our routes to make it more flexible. Earlier we gave you a &lt;code&gt;Routes&lt;/code&gt; component from &lt;code&gt;solid-start&lt;/code&gt; that was equivalent to rendering a &lt;code&gt;Routes&lt;/code&gt; from &lt;code&gt;@solidjs/router&lt;/code&gt; (yeah we know its confusing, that&#39;s why we are changing it) and filling it with the routes from the file system. The opt-in to the file-system routing was all-in or nothing.&lt;/p&gt; &#xA; &lt;p&gt;You didn&#39;t have an opportunity to add more &lt;code&gt;Route&lt;/code&gt;s. We now export &lt;code&gt;FileRoutes&lt;/code&gt; from &lt;code&gt;solid-start&lt;/code&gt; that represents the route config based on the file-system. It is meant to be passed to the &lt;code&gt;Routes&lt;/code&gt; component from &lt;code&gt;solid-start&lt;/code&gt; or wherever you want to use the file-system routes config.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;You can use it together with other &lt;code&gt;Route&lt;/code&gt; components.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Routes&amp;gt;&#xA;  &amp;lt;FileRoutes /&amp;gt;&#xA;  &amp;lt;Route path=&#34;/somewhere&#34; component={SomeComponent} /&amp;gt;&#xA;&amp;lt;/Routes&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Also for quickly starting an app without creating a bunch of files, you can define your routes in a single file. We generally don&#39;t recommend this since it&#39;s a good idea to code split your app along your routes, but its a neat trick.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Routes&amp;gt;&#xA;  &amp;lt;Route path=&#34;/somewhere&#34; component={SomeComponent} /&amp;gt;&#xA;&amp;lt;/Routes&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For consistency between the SSR and client-side rendering modes, we needed to take more control of &lt;code&gt;root.tsx&lt;/code&gt; specifically, we couldn&#39;t just take &lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tags and allow them to be part of the component tree since we can&#39;t client-side render the whole document.&lt;/p&gt; &#xA; &lt;p&gt;We only really get to take over &lt;code&gt;document.body&lt;/code&gt;. We needed to ship with special &lt;code&gt;Html&lt;/code&gt;, &lt;code&gt;Head&lt;/code&gt;, and &lt;code&gt;Body&lt;/code&gt; components that you use in &lt;code&gt;root.tsx&lt;/code&gt; instead of the lower-case counterparts. These document flow components know what to do whether you are in SSR mode on or off.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;We can avoid you having to include &lt;code&gt;Meta&lt;/code&gt; and &lt;code&gt;Links&lt;/code&gt; from &lt;code&gt;solid-start/root&lt;/code&gt; in your &lt;code&gt;head&lt;/code&gt; since we do it by default.&lt;/li&gt; &#xA;  &lt;li&gt;We will always use the title-case variants of the tags used in &lt;code&gt;head&lt;/code&gt; (eg. &lt;code&gt;Link&lt;/code&gt; &amp;gt; &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;Style&lt;/code&gt; &amp;gt; &lt;code&gt;style&lt;/code&gt;, &lt;code&gt;Meta&lt;/code&gt; &amp;gt; &lt;code&gt;meta&lt;/code&gt;) for consistency throughout the app.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;solid-meta&lt;/code&gt; is renamed to &lt;code&gt;@solidjs/meta&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;solid-app-router&lt;/code&gt; is renamed to &lt;code&gt;@solidjs/router&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;solid-start&lt;/code&gt; exports all the components meant to be used in your app and these components work on the client and server. Sometimes they are the same on both, and other times they coordinate between the two.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Now, our &lt;code&gt;root.tsx&lt;/code&gt; even more closely replicates how you would be writing your &lt;code&gt;index.html&lt;/code&gt;. And this was intentionally done so that we could enable an SPA mode for you that used the same code as the SSR mode without changing anything.&lt;/p&gt; &#xA; &lt;p&gt;How do we do this? At build time for SPA mode, we quickly run the vite server and make a request for your app&#39;s index. We tell our &lt;code&gt;Body&lt;/code&gt; component not to render anything.&lt;/p&gt; &#xA; &lt;p&gt;So, the &lt;code&gt;index.html&lt;/code&gt; we get is the one you would have written. We then use that &lt;code&gt;index.html&lt;/code&gt; as your entrypoint. You can still write your own &lt;code&gt;index.html&lt;/code&gt; if you don&#39;t want to use this functionality.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;createServerResource -&amp;gt; createServerData$&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Renamed &lt;code&gt;createServerResource&lt;/code&gt; to &lt;code&gt;createServerData$&lt;/code&gt;, and &lt;code&gt;createRouteResource&lt;/code&gt; to &lt;code&gt;createRouteData&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;export function routeData() {&#xA;-  return createServerResource(async (_, { request }) =&amp;gt; {&#xA;+  return createServerData$(async (_, { request }) =&amp;gt; {&#xA;    const user = await getUser(request);&#xA;&#xA;    if (!user) {&#xA;      throw redirect(&#34;/login&#34;);&#xA;    }&#xA;&#xA;    return user;&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;p&gt;We renamed &lt;code&gt;createServerResource&lt;/code&gt; to &lt;code&gt;createServerData$&lt;/code&gt; because we were not using the &lt;code&gt;createResource&lt;/code&gt; signature. That was confusing so we needed to indicate the function was compiled. We just return one single signal from &lt;code&gt;createServerData$&lt;/code&gt; instead of a tuple like &lt;code&gt;createResource&lt;/code&gt; does. And we have moved the source into the options as &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;createServerAction$, createServerMultiAction$&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- const logoutAction = createServerAction(() =&amp;gt; logout(server.request));&#xA;+ const [logginOut, logOut] = createServerAction$((_, { request }) =&amp;gt; logout(request));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Why?&lt;/h4&gt; &#xA; &lt;p&gt;We pass in a &lt;code&gt;ServerFunctionEvent&lt;/code&gt; which has a &lt;code&gt;request&lt;/code&gt; field as the second argument to server actions. You can use this to access to the HTTP Request sent for your action and get the headers from it for things like auth.&lt;/p&gt; &#xA; &lt;p&gt;We now return a tuple where the first argument is the current submission, and the second is the submit function it also has a progressive enhanceable form attached to it &lt;code&gt;logout.Form&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🆕 HttpStatusCode, HttpHeader&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;export default function NotFound() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;HttpStatusCode code={404} /&amp;gt;&#xA;      &amp;lt;HttpHeader name=&#34;my-header&#34; value=&#34;header-value&#34; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;p&gt;All credit for the work on Forms and Sessions goes to the @remix-run team, MIT License, Copyright 2021 Remix Software Inc.&lt;/p&gt;</summary>
  </entry>
</feed>