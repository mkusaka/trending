<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-23T01:50:07Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mastra-ai/mastra</title>
    <updated>2025-02-23T01:50:07Z</updated>
    <id>tag:github.com,2025-02-23:/mastra-ai/mastra</id>
    <link href="https://github.com/mastra-ai/mastra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the TypeScript AI agent framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mastra &lt;img align=&#34;cener&#34; alt=&#34;Project Status: Beta&#34; src=&#34;https://img.shields.io/badge/beta-status-blue&#34;&gt; &lt;img align=&#34;cener&#34; alt=&#34;Project Status: Alpha&#34; src=&#34;https://img.shields.io/badge/Y%20Combinator-W25-orange?style=flat-square&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Mastra is an opinionated Typescript framework that helps you build AI applications and features quickly. It gives you the set of primitives you need: workflows, agents, RAG, integrations and evals. You can run Mastra on your local machine, or deploy to a serverless cloud.&lt;/p&gt; &#xA;&lt;p&gt;The main Mastra features are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLM Models&lt;/td&gt; &#xA;   &lt;td&gt;Mastra uses the &lt;a href=&#34;https://sdk.vercel.ai/docs/introduction&#34;&gt;Vercel AI SDK&lt;/a&gt; for model routing, providing a unified interface to interact with any LLM provider including OpenAI, Anthropic, and Google Gemini. You can choose the specific model and provider, and decide whether to stream the response.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mastra.ai/docs/agents/00-overview&#34;&gt;Agents&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Agents are systems where the language model chooses a sequence of actions. In Mastra, agents provide LLM models with tools, workflows, and synced data. Agents can call your own functions or APIs of third-party integrations and access knowledge bases you build.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mastra.ai/docs/agents/02-adding-tools&#34;&gt;Tools&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tools are typed functions that can be executed by agents or workflows, with built-in integration access and parameter validation. Each tool has a schema that defines its inputs, an executor function that implements its logic, and access to configured integrations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mastra.ai/docs/workflows/00-overview&#34;&gt;Workflows&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workflows are durable graph-based state machines. They have loops, branching, wait for human input, embed other workflows, do error handling, retries, parsing and so on. They can be built in code or with a visual editor. Each step in a workflow has built-in OpenTelemetry tracing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mastra.ai/docs/rag/overview&#34;&gt;RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Retrieval-augemented generation (RAG) lets you construct a knowledge base for agents. RAG is an ETL pipeline with specific querying techniques, including chunking, embedding, and vector search.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mastra.ai/docs/local-dev/integrations&#34;&gt;Integrations&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;In Mastra, integrations are auto-generated, type-safe API clients for third-party services that can be used as tools for agents or steps in workflows.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mastra.ai/docs/08-running-evals&#34;&gt;Evals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Evals are automated tests that evaluate LLM outputs using model-graded, rule-based, and statistical methods. Each eval returns a normalized score between 0-1 that can be logged and compared. Evals can be customized with your own prompts and scoring functions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js (v20.0+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get an LLM provider API key&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t have an API key for an LLM provider, you can get one from the following services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://console.anthropic.com/settings/keys&#34;&gt;Anthropic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.google.dev/gemini-api/docs&#34;&gt;Google Gemini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t have an account with these providers, you can sign up and get an API key. Anthropic require a credit card to get an API key. Some OpenAI models and Gemini do not and have a generous free tier for its API.&lt;/p&gt; &#xA;&lt;h2&gt;Create a new project&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started with Mastra is by using &lt;code&gt;create-mastra&lt;/code&gt;. This CLI tool enables you to quickly start building a new Mastra application, with everything set up for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-mastra@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the script&lt;/h3&gt; &#xA;&lt;p&gt;Finally, run &lt;code&gt;mastra dev&lt;/code&gt; to open the Mastra playground.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using Anthropic, set the &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;. If you&#39;re using Gemini, set the &lt;code&gt;GOOGLE_GENERATIVE_AI_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Looking to contribute? All types of help are appreciated, from coding to testing and feature specification.&lt;/p&gt; &#xA;&lt;p&gt;If you are a developer and would like to contribute with code, please open an issue to discuss before opening a Pull Request.&lt;/p&gt; &#xA;&lt;p&gt;Information about the project setup can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/mastra-ai/mastra/main/DEVELOPMENT.md&#34;&gt;development documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;We have an &lt;a href=&#34;https://discord.gg/BTYqqHKUrf&#34;&gt;open community Discord&lt;/a&gt;. Come and say hello and let us know if you have any questions or need any help getting things running.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also super helpful if you leave the project a star here at the &lt;a href=&#34;https://github.com/mastra-ai/mastra&#34;&gt;top of the page&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chatchat-space/Langchain-Chatchat</title>
    <updated>2025-02-23T01:50:07Z</updated>
    <id>tag:github.com,2025-02-23:/chatchat-space/Langchain-Chatchat</id>
    <link href="https://github.com/chatchat-space/Langchain-Chatchat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Langchain-Chatchat（原Langchain-ChatGLM）基于 Langchain 与 ChatGLM, Qwen 与 Llama 等语言模型的 RAG 与 Agent 应用 | Langchain-Chatchat (formerly langchain-ChatGLM), local knowledge based LLM (like ChatGLM, Qwen and Llama) RAG and Agent app with langchain&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/img/logo-long-chatchat-trans-v2.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://trendshift.io/repositories/329&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/329&#34; alt=&#34;chatchat-space%2FLangchain-Chatchat | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shields.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/langchain-chatchat.svg?sanitize=true&#34; alt=&#34;pypi badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pypiserver/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.8%7C3.9%7C3.10%7C3.11-blue.svg?sanitize=true&#34; alt=&#34;Generic badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🌍 &lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README_en.md&#34;&gt;READ THIS IN ENGLISH&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📃 &lt;strong&gt;LangChain-Chatchat&lt;/strong&gt; (原 Langchain-ChatGLM)&lt;/p&gt; &#xA;&lt;p&gt;基于 ChatGLM 等大语言模型与 Langchain 等应用框架实现，开源、可离线部署的 RAG 与 Agent 应用项目。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#%E6%A6%82%E8%BF%B0&#34;&gt;概述&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D&#34;&gt;功能介绍&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#03x-%E7%89%88%E6%9C%AC%E5%8A%9F%E8%83%BD%E4%B8%80%E8%A7%88&#34;&gt;0.3.x 功能一览&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#%E5%B7%B2%E6%94%AF%E6%8C%81%E7%9A%84%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%A1%86%E6%9E%B6%E4%B8%8E%E6%A8%A1%E5%9E%8B&#34;&gt;已支持的模型推理框架与模型&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B&#34;&gt;快速上手&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#pip-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2&#34;&gt;pip 安装部署&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2&#34;&gt;源码安装部署/开发部署&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#docker-%E9%83%A8%E7%BD%B2&#34;&gt;Docker 部署&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%A8%8B%E7%A2%91&#34;&gt;项目里程碑&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/README.md#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC&#34;&gt;联系我们&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;概述&lt;/h2&gt; &#xA;&lt;p&gt;🤖️ 一种利用 &lt;a href=&#34;https://github.com/langchain-ai/langchain&#34;&gt;langchain&lt;/a&gt; 思想实现的基于本地知识库的问答应用，目标期望建立一套对中文场景与开源模型支持友好、可离线运行的知识库问答解决方案。&lt;/p&gt; &#xA;&lt;p&gt;💡 受 &lt;a href=&#34;https://github.com/GanymedeNil&#34;&gt;GanymedeNil&lt;/a&gt; 的项目 &lt;a href=&#34;https://github.com/GanymedeNil/document.ai&#34;&gt;document.ai&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/AlexZhangji&#34;&gt;AlexZhangji&lt;/a&gt; 创建的 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B/pull/216&#34;&gt;ChatGLM-6B Pull Request&lt;/a&gt; 启发，建立了全流程可使用开源模型实现的本地知识库问答应用。本项目的最新版本中可使用 &lt;a href=&#34;https://github.com/xorbitsai/inference&#34;&gt;Xinference&lt;/a&gt;、&lt;a href=&#34;https://github.com/ollama/ollama&#34;&gt;Ollama&lt;/a&gt; 等框架接入 &lt;a href=&#34;https://github.com/THUDM/GLM-4&#34;&gt;GLM-4-Chat&lt;/a&gt;、 &lt;a href=&#34;https://github.com/QwenLM/Qwen2&#34;&gt;Qwen2-Instruct&lt;/a&gt;、 &lt;a href=&#34;https://github.com/meta-llama/llama3&#34;&gt;Llama3&lt;/a&gt; 等模型，依托于 &lt;a href=&#34;https://github.com/langchain-ai/langchain&#34;&gt;langchain&lt;/a&gt; 框架支持通过基于 &lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;FastAPI&lt;/a&gt; 提供的 API 调用服务，或使用基于 &lt;a href=&#34;https://github.com/streamlit/streamlit&#34;&gt;Streamlit&lt;/a&gt; 的 WebUI 进行操作。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/img/langchain_chatchat_0.3.0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;✅ 本项目支持市面上主流的开源 LLM、 Embedding 模型与向量数据库，可实现全部使用&lt;strong&gt;开源&lt;/strong&gt;模型&lt;strong&gt;离线私有部署&lt;/strong&gt;。与此同时，本项目也支持 OpenAI GPT API 的调用，并将在后续持续扩充对各类模型及模型 API 的接入。&lt;/p&gt; &#xA;&lt;p&gt;⛓️ 本项目实现原理如下图所示，过程包括加载文件 -&amp;gt; 读取文本 -&amp;gt; 文本分割 -&amp;gt; 文本向量化 -&amp;gt; 问句向量化 -&amp;gt; 在文本向量中匹配出与问句向量最相似的 &lt;code&gt;top k&lt;/code&gt;个 -&amp;gt; 匹配出的文本作为上下文和问题一起添加到 &lt;code&gt;prompt&lt;/code&gt;中 -&amp;gt; 提交给 &lt;code&gt;LLM&lt;/code&gt;生成回答。&lt;/p&gt; &#xA;&lt;p&gt;📺 &lt;a href=&#34;https://www.bilibili.com/video/BV13M4y1e7cN/?share_source=copy_web&amp;amp;vd_source=e6c5aafe684f30fbe41925d61ca6d514&#34;&gt;原理介绍视频&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/img/langchain+chatglm.png&#34; alt=&#34;实现原理图&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;从文档处理角度来看，实现流程如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/img/langchain+chatglm2.png&#34; alt=&#34;实现原理图2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🚩 本项目未涉及微调、训练过程，但可利用微调或训练对本项目效果进行优化。&lt;/p&gt; &#xA;&lt;p&gt;🌐 &lt;a href=&#34;https://www.codewithgpu.com/i/chatchat-space/Langchain-Chatchat/Langchain-Chatchat&#34;&gt;AutoDL 镜像&lt;/a&gt; 中 &lt;code&gt;0.3.0&lt;/code&gt; 版本所使用代码已更新至本项目 &lt;code&gt;v0.3.0&lt;/code&gt; 版本。&lt;/p&gt; &#xA;&lt;p&gt;🐳 Docker 镜像将会在近期更新。&lt;/p&gt; &#xA;&lt;p&gt;🧑‍💻 如果你想对本项目做出贡献，欢迎移步&lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/contributing/README_dev.md&#34;&gt;开发指南&lt;/a&gt; 获取更多开发部署相关信息。&lt;/p&gt; &#xA;&lt;h2&gt;功能介绍&lt;/h2&gt; &#xA;&lt;h3&gt;0.3.x 版本功能一览&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;0.2.x&lt;/th&gt; &#xA;   &lt;th&gt;0.3.x&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;模型接入&lt;/td&gt; &#xA;   &lt;td&gt;本地：fastchat&lt;br&gt;在线：XXXModelWorker&lt;/td&gt; &#xA;   &lt;td&gt;本地：model_provider,支持大部分主流模型加载框架&lt;br&gt;在线：oneapi&lt;br&gt;所有模型接入均兼容openai sdk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Agent&lt;/td&gt; &#xA;   &lt;td&gt;❌不稳定&lt;/td&gt; &#xA;   &lt;td&gt;✅针对ChatGLM3和Qwen进行优化,Agent能力显著提升&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLM对话&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;知识库对话&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;搜索引擎对话&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;文件对话&lt;/td&gt; &#xA;   &lt;td&gt;✅仅向量检索&lt;/td&gt; &#xA;   &lt;td&gt;✅统一为File RAG功能,支持BM25+KNN等多种检索方式&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;数据库对话&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;多模态图片对话&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅ 推荐使用 qwen-vl-chat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARXIV文献对话&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wolfram对话&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;文生图&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;本地知识库管理&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WEBUI&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅更好的多会话支持,自定义系统提示词...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;0.3.x 版本的核心功能由 Agent 实现,但用户也可以手动实现工具调用:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;操作方式&lt;/th&gt; &#xA;   &lt;th&gt;实现的功能&lt;/th&gt; &#xA;   &lt;th&gt;适用场景&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;选中&#34;启用Agent&#34;,选择多个工具&lt;/td&gt; &#xA;   &lt;td&gt;由LLM自动进行工具调用&lt;/td&gt; &#xA;   &lt;td&gt;使用ChatGLM3/Qwen或在线API等具备Agent能力的模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;选中&#34;启用Agent&#34;,选择单个工具&lt;/td&gt; &#xA;   &lt;td&gt;LLM仅解析工具参数&lt;/td&gt; &#xA;   &lt;td&gt;使用的模型Agent能力一般,不能很好的选择工具&lt;br&gt;想手动选择功能&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;不选中&#34;启用Agent&#34;,选择单个工具&lt;/td&gt; &#xA;   &lt;td&gt;不使用Agent功能的情况下,手动填入参数进行工具调用&lt;/td&gt; &#xA;   &lt;td&gt;使用的模型不具备Agent能力&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;不选中任何工具，上传一个图片&lt;/td&gt; &#xA;   &lt;td&gt;图片对话&lt;/td&gt; &#xA;   &lt;td&gt;使用 qwen-vl-chat 等多模态模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;更多功能和更新请实际部署体验.&lt;/p&gt; &#xA;&lt;h3&gt;已支持的模型部署框架与模型&lt;/h3&gt; &#xA;&lt;p&gt;本项目中已经支持市面上主流的如 &lt;a href=&#34;https://github.com/THUDM/GLM-4&#34;&gt;GLM-4-Chat&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/QwenLM/Qwen2&#34;&gt;Qwen2-Instruct&lt;/a&gt; 等新近开源大语言模型和 Embedding 模型，这些模型需要用户自行启动模型部署框架后，通过修改配置信息接入项目，本项目已支持的本地模型部署框架如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型部署框架&lt;/th&gt; &#xA;   &lt;th&gt;Xinference&lt;/th&gt; &#xA;   &lt;th&gt;LocalAI&lt;/th&gt; &#xA;   &lt;th&gt;Ollama&lt;/th&gt; &#xA;   &lt;th&gt;FastChat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenAI API 接口对齐&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;加速推理引擎&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ, GGML, vLLM, TensorRT, mlx&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ, GGML, vLLM, TensorRT&lt;/td&gt; &#xA;   &lt;td&gt;GGUF, GGML&lt;/td&gt; &#xA;   &lt;td&gt;vLLM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;接入模型类型&lt;/td&gt; &#xA;   &lt;td&gt;LLM, Embedding, Rerank, Text-to-Image, Vision, Audio&lt;/td&gt; &#xA;   &lt;td&gt;LLM, Embedding, Rerank, Text-to-Image, Vision, Audio&lt;/td&gt; &#xA;   &lt;td&gt;LLM, Text-to-Image, Vision&lt;/td&gt; &#xA;   &lt;td&gt;LLM, Vision&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Function Call&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;更多平台支持(CPU, Metal)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;异构&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;集群&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;操作文档链接&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://inference.readthedocs.io/zh-cn/latest/models/builtin/index.html&#34;&gt;Xinference 文档&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://localai.io/model-compatibility/&#34;&gt;LocalAI 文档&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ollama/ollama?tab=readme-ov-file#model-library&#34;&gt;Ollama 文档&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lm-sys/FastChat#install&#34;&gt;FastChat 文档&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;可用模型&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://inference.readthedocs.io/en/latest/models/builtin/index.html&#34;&gt;Xinference 已支持模型&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://localai.io/model-compatibility/#/&#34;&gt;LocalAI 已支持模型&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ollama.com/library#/&#34;&gt;Ollama 已支持模型&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lm-sys/FastChat/raw/main/docs/model_support.md&#34;&gt;FastChat 已支持模型&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;除上述本地模型加载框架外，项目中也为可接入在线 API 的 &lt;a href=&#34;https://github.com/songquanpeng/one-api&#34;&gt;One API&lt;/a&gt; 框架接入提供了支持，支持包括 &lt;a href=&#34;https://platform.openai.com/docs/guides/gpt/chat-completions-api&#34;&gt;OpenAI ChatGPT&lt;/a&gt;、&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/reference&#34;&gt;Azure OpenAI API&lt;/a&gt;、&lt;a href=&#34;https://anthropic.com/&#34;&gt;Anthropic Claude&lt;/a&gt;、&lt;a href=&#34;https://bigmodel.cn/&#34;&gt;智谱清言&lt;/a&gt;、&lt;a href=&#34;https://platform.baichuan-ai.com/&#34;&gt;百川&lt;/a&gt; 等常用在线 API 的接入使用。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] 关于 Xinference 加载本地模型: Xinference 内置模型会自动下载,如果想让它加载本机下载好的模型,可以在启动 Xinference 服务后,到项目 tools/model_loaders 目录下执行 &lt;code&gt;streamlit run xinference_manager.py&lt;/code&gt;,按照页面提示为指定模型设置本地路径即可.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;快速上手&lt;/h2&gt; &#xA;&lt;h3&gt;pip 安装部署&lt;/h3&gt; &#xA;&lt;h4&gt;0. 软硬件要求&lt;/h4&gt; &#xA;&lt;p&gt;💡 软件方面，本项目已支持在 Python 3.8-3.11 环境中进行使用，并已在 Windows、macOS、Linux 操作系统中进行测试。&lt;/p&gt; &#xA;&lt;p&gt;💻 硬件方面，因 0.3.0 版本已修改为支持不同模型部署框架接入，因此可在 CPU、GPU、NPU、MPS 等不同硬件条件下使用。&lt;/p&gt; &#xA;&lt;h4&gt;1. 安装 Langchain-Chatchat&lt;/h4&gt; &#xA;&lt;p&gt;从 0.3.0 版本起，Langchain-Chatchat 提供以 Python 库形式的安装方式，具体安装请执行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install langchain-chatchat -U&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!important] 为确保所使用的 Python 库为最新版，建议使用官方 Pypi 源或清华源。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] 因模型部署框架 Xinference 接入 Langchain-Chatchat 时需要额外安装对应的 Python 依赖库，因此如需搭配 Xinference 框架使用时，建议使用如下安装方式：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install &#34;langchain-chatchat[xinference]&#34; -U&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;2. 模型推理框架并加载模型&lt;/h4&gt; &#xA;&lt;p&gt;从 0.3.0 版本起，Langchain-Chatchat 不再根据用户输入的本地模型路径直接进行模型加载，涉及到的模型种类包括 LLM、Embedding、Reranker 及后续会提供支持的多模态模型等，均改为支持市面常见的各大模型推理框架接入，如 &lt;a href=&#34;https://github.com/xorbitsai/inference&#34;&gt;Xinference&lt;/a&gt;、&lt;a href=&#34;https://github.com/ollama/ollama&#34;&gt;Ollama&lt;/a&gt;、&lt;a href=&#34;https://github.com/mudler/LocalAI&#34;&gt;LocalAI&lt;/a&gt;、&lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;FastChat&lt;/a&gt;、&lt;a href=&#34;https://github.com/songquanpeng/one-api&#34;&gt;One API&lt;/a&gt; 等。&lt;/p&gt; &#xA;&lt;p&gt;因此，请确认在启动 Langchain-Chatchat 项目前，首先进行模型推理框架的运行，并加载所需使用的模型。&lt;/p&gt; &#xA;&lt;p&gt;这里以 Xinference 举例, 请参考 &lt;a href=&#34;https://inference.readthedocs.io/zh-cn/latest/getting_started/installation.html&#34;&gt;Xinference文档&lt;/a&gt; 进行框架部署与模型加载。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; 为避免依赖冲突，请将 Langchain-Chatchat 和模型部署框架如 Xinference 等放在不同的 Python 虚拟环境中, 比如 conda, venv, virtualenv 等。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3. 初始化项目配置与数据目录&lt;/h4&gt; &#xA;&lt;p&gt;从 0.3.1 版本起，Langchain-Chatchat 使用本地 &lt;code&gt;yaml&lt;/code&gt; 文件的方式进行配置，用户可以直接查看并修改其中的内容，服务器会自动更新无需重启。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;设置 Chatchat 存储配置文件和数据文件的根目录（可选）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# on linux or macos&#xA;export CHATCHAT_ROOT=/path/to/chatchat_data&#xA;&#xA;# on windows&#xA;set CHATCHAT_ROOT=/path/to/chatchat_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若不设置该环境变量，则自动使用当前目录。&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;执行初始化&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chatchat init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;该命令会执行以下操作：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;创建所有需要的数据目录&lt;/li&gt; &#xA; &lt;li&gt;复制 samples 知识库内容&lt;/li&gt; &#xA; &lt;li&gt;生成默认 &lt;code&gt;yaml&lt;/code&gt; 配置文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;修改配置文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;配置模型（model_settings.yaml）&lt;br&gt; 需要根据步骤 &lt;strong&gt;2. 模型推理框架并加载模型&lt;/strong&gt; 中选用的模型推理框架与加载的模型进行模型接入配置，具体参考 &lt;code&gt;model_settings.yaml&lt;/code&gt; 中的注释。主要修改以下内容：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 默认选用的 LLM 名称&#xA; DEFAULT_LLM_MODEL: qwen1.5-chat&#xA;&#xA; # 默认选用的 Embedding 名称&#xA; DEFAULT_EMBEDDING_MODEL: bge-large-zh-v1.5&#xA;&#xA;# 将 `LLM_MODEL_CONFIG` 中 `llm_model, action_model` 的键改成对应的 LLM 模型&#xA;# 在 `MODEL_PLATFORMS` 中修改对应模型平台信息&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;配置知识库路径（basic_settings.yaml）（可选）&lt;br&gt; 默认知识库位于 &lt;code&gt;CHATCHAT_ROOT/data/knowledge_base&lt;/code&gt;，如果你想把知识库放在不同的位置，或者想连接现有的知识库，可以在这里修改对应目录即可。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 知识库默认存储路径&#xA; KB_ROOT_PATH: D:\chatchat-test\data\knowledge_base&#xA;&#xA; # 数据库默认存储路径。如果使用sqlite，可以直接修改DB_ROOT_PATH；如果使用其它数据库，请直接修改SQLALCHEMY_DATABASE_URI。&#xA; DB_ROOT_PATH: D:\chatchat-test\data\knowledge_base\info.db&#xA;&#xA; # 知识库信息数据库连接URI&#xA; SQLALCHEMY_DATABASE_URI: sqlite:///D:\chatchat-test\data\knowledge_base\info.db&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;配置知识库（kb_settings.yaml）（可选）&lt;/p&gt; &lt;p&gt;默认使用 &lt;code&gt;FAISS&lt;/code&gt; 知识库，如果想连接其它类型的知识库，可以修改 &lt;code&gt;DEFAULT_VS_TYPE&lt;/code&gt; 和 &lt;code&gt;kbs_config&lt;/code&gt;。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4. 初始化知识库&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; 进行知识库初始化前，请确保已经启动模型推理框架及对应 &lt;code&gt;embedding&lt;/code&gt; 模型，且已按照上述&lt;strong&gt;步骤3&lt;/strong&gt;完成模型接入配置。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chatchat kb -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更多功能可以查看 &lt;code&gt;chatchat kb --help&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;出现以下日志即为成功:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#xA;----------------------------------------------------------------------------------------------------&#xA;知识库名称      ：samples&#xA;知识库类型      ：faiss&#xA;向量模型：      ：bge-large-zh-v1.5&#xA;知识库路径      ：/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/knowledge_base/samples&#xA;文件总数量      ：47&#xA;入库文件数      ：42&#xA;知识条目数      ：740&#xA;用时            ：0:02:29.701002&#xA;----------------------------------------------------------------------------------------------------&#xA;&#xA;总计用时        ：0:02:33.414425&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] 知识库初始化的常见问题&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;h5&gt;1. Windows 下重建知识库或添加知识文件时卡住不动&lt;/h5&gt; &#xA;  &lt;p&gt;此问题常出现于新建虚拟环境中，可以通过以下方式确认：&lt;/p&gt; &#xA;  &lt;p&gt;&lt;code&gt;from unstructured.partition.auto import partition&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;如果该语句卡住无法执行，可以执行以下命令：&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip uninstall python-magic-bin&#xA;# check the version of the uninstalled package&#xA;pip install &#39;python-magic-bin=={version}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;然后按照本节指引重新创建知识库即可。&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;5. 启动项目&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chatchat start -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;出现以下界面即为启动成功:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/img/langchain_chatchat_webui.png&#34; alt=&#34;WebUI界面&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; 由于 chatchat 配置默认监听地址 &lt;code&gt;DEFAULT_BIND_HOST&lt;/code&gt; 为 127.0.0.1, 所以无法通过其他 ip 进行访问。&lt;/p&gt; &#xA; &lt;p&gt;如需通过机器ip 进行访问(如 Linux 系统), 需要到 &lt;code&gt;basic_settings.yaml&lt;/code&gt; 中将监听地址修改为 0.0.0.0。&lt;/p&gt;  &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;其它配置&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据库对话配置请移步这里 &lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/install/README_text2sql.md&#34;&gt;数据库对话配置说明&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;源码安装部署/开发部署&lt;/h3&gt; &#xA;&lt;p&gt;源码安装部署请参考 &lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/contributing/README_dev.md&#34;&gt;开发指南&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker 部署&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull chatimage/chatchat:0.3.1.3-93e2c87-20240829&#xA;&#xA;docker pull ccr.ccs.tencentyun.com/langchain-chatchat/chatchat:0.3.1.3-93e2c87-20240829 # 国内镜像&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!important] 强烈建议: 使用 docker-compose 部署, 具体参考 &lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/install/README_docker.md&#34;&gt;README_docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;旧版本迁移&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0.3.x 结构改变很大,强烈建议您按照文档重新部署. 以下指南不保证100%兼容和成功. 记得提前备份重要数据!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;首先按照 &lt;code&gt;安装部署&lt;/code&gt; 中的步骤配置运行环境，修改配置文件&lt;/li&gt; &#xA; &lt;li&gt;将 0.2.x 项目的 knowledge_base 目录拷贝到配置的 &lt;code&gt;DATA&lt;/code&gt; 目录下&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;项目里程碑&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;2023年4月&lt;/code&gt;: &lt;code&gt;Langchain-ChatGLM 0.1.0&lt;/code&gt; 发布，支持基于 ChatGLM-6B 模型的本地知识库问答。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;2023年8月&lt;/code&gt;: &lt;code&gt;Langchain-ChatGLM&lt;/code&gt; 改名为 &lt;code&gt;Langchain-Chatchat&lt;/code&gt;，发布 &lt;code&gt;0.2.0&lt;/code&gt; 版本，使用 &lt;code&gt;fastchat&lt;/code&gt; 作为模型加载方案，支持更多的模型和数据库。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;2023年10月&lt;/code&gt;: &lt;code&gt;Langchain-Chatchat 0.2.5&lt;/code&gt; 发布，推出 Agent 内容，开源项目在&lt;code&gt;Founder Park &amp;amp; Zhipu AI &amp;amp; Zilliz&lt;/code&gt; 举办的黑客马拉松获得三等奖。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;2023年12月&lt;/code&gt;: &lt;code&gt;Langchain-Chatchat&lt;/code&gt; 开源项目获得超过 &lt;strong&gt;20K&lt;/strong&gt; stars.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;2024年6月&lt;/code&gt;: &lt;code&gt;Langchain-Chatchat 0.3.0&lt;/code&gt; 发布，带来全新项目架构。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🔥 让我们一起期待未来 Chatchat 的故事 ···&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;p&gt;本项目代码遵循 &lt;a href=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt; 协议。&lt;/p&gt; &#xA;&lt;h2&gt;联系我们&lt;/h2&gt; &#xA;&lt;h3&gt;Telegram&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/+RjliQ3jnJ1YyN2E9&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;Telegram&#34; title=&#34;langchain-chatchat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;项目交流群&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/img/qr_code_117_2.jpg&#34; alt=&#34;二维码&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;🎉 Langchain-Chatchat 项目微信交流群，如果你也对本项目感兴趣，欢迎加入群聊参与讨论交流。&lt;/p&gt; &#xA;&lt;h3&gt;公众号&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/chatchat-space/Langchain-Chatchat/master/docs/img/official_wechat_mp_account.png&#34; alt=&#34;二维码&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;🎉 Langchain-Chatchat 项目官方公众号，欢迎扫码关注。&lt;/p&gt; &#xA;&lt;h2&gt;引用&lt;/h2&gt; &#xA;&lt;p&gt;如果本项目有帮助到您的研究，请引用我们：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{langchain_chatchat,&#xA;    title        = {{langchain-chatchat}},&#xA;    author       = {Liu, Qian and Song, Jinke, and Huang, Zhiguo, and Zhang, Yuxuan, and glide-the, and liunux4odoo},&#xA;    year         = 2024,&#xA;    journal      = {GitHub repository},&#xA;    publisher    = {GitHub},&#xA;    howpublished = {\url{https://github.com/chatchat-space/Langchain-Chatchat}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Nutlope/logocreator</title>
    <updated>2025-02-23T01:50:07Z</updated>
    <id>tag:github.com,2025-02-23:/Nutlope/logocreator</id>
    <link href="https://github.com/Nutlope/logocreator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A free + OSS logo generator powered by Flux on Together AI&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://www.logo-creator.io&#34;&gt; &lt;img alt=&#34;AI Logo Generator&#34; src=&#34;https://raw.githubusercontent.com/Nutlope/logocreator/main/public/og-image.png&#34;&gt; &lt;h1 align=&#34;center&#34;&gt;AI Logo Generator&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p align=&#34;center&#34;&gt; An open source logo generator – create professional logos in seconds with customizable styles. &lt;/p&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://togetherai.link/flux-playground&#34;&gt;Flux Pro 1.1&lt;/a&gt; on &lt;a href=&#34;https://togetherai.link/&#34;&gt;Together AI&lt;/a&gt; for logo generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; with TypeScript for the app framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ui.shadcn.com/&#34;&gt;Shadcn&lt;/a&gt; for UI components &amp;amp; &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind&lt;/a&gt; for styling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://upstash.com/&#34;&gt;Upstash Redis&lt;/a&gt; for rate limiting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clerk.com/&#34;&gt;Clerk&lt;/a&gt; for authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plausible.io/&#34;&gt;Plausible&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://helicone.ai/&#34;&gt;Helicone&lt;/a&gt; for analytics &amp;amp; observability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cloning &amp;amp; running&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/Nutlope/logocreator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file and add your &lt;a href=&#34;https://api.together.xyz/settings/api-keys&#34;&gt;Together AI API key&lt;/a&gt;: &lt;code&gt;TOGETHER_API_KEY=&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run dev&lt;/code&gt; to install dependencies and run locally.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Future Tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a dashboard with a user&#39;s logo history&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support SVG exports instead of just PNG&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for additional styles&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a dropdown for image size (can do up to 1440x1440)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show approximate price when using your own Together AI key&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allow the ability to upload a reference logo (use vision model to read it)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Redesign popular brand’s logos with my logo maker and have it in a showcase&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>