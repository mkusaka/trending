<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-08T01:48:02Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>didi/LogicFlow</title>
    <updated>2024-09-08T01:48:02Z</updated>
    <id>tag:github.com,2024-09-08:/didi/LogicFlow</id>
    <link href="https://github.com/didi/LogicFlow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;专注于业务自定义的流程图编辑框架，支持实现脑图、ER图、UML、工作流等各种图编辑场景。A flow chart editing framework focusing on business customization.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://site.logic-flow.cn&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://site.logic-flow.cn/logo.png&#34; alt=&#34;LogicFlow logo&#34; width=&#34;100&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@logicflow/core&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@logicflow/core&#34; alt=&#34;Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@logicflow/core&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/@logicflow/core&#34; alt=&#34;Download&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/didi/LogicFlow/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/l/@logicflow/core&#34; alt=&#34;LICENSE&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/didi/LogicFlow/master/README.en-US.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LogicFlow 是一款流程图编辑框架，提供了一系列流程图交互、编辑所必需的功能和简单灵活的节点自定义、插件等拓展机制，方便我们快速在业务系统内满足类流程图的需求。&lt;/p&gt; &#xA;&lt;h2&gt;核心能力&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可视化模型：通过 LogicFlow 提供的直观可视化界面，用户可以轻松创建、编辑和管理复杂的逻辑流程图。&lt;/li&gt; &#xA; &lt;li&gt;高可定制性：用户可以根据自己的需要定制节点、连接器和样式，创建符合特定用例的定制逻辑流程图。&lt;/li&gt; &#xA; &lt;li&gt;灵活易拓展: 内置提供丰富的插件，用户也可根据自身需求定制复杂插件实现业务需求。&lt;/li&gt; &#xA; &lt;li&gt;自执行引擎: 执行引擎支持浏览器端执行流程图逻辑，为无代码执行提供新思路。&lt;/li&gt; &#xA; &lt;li&gt;数据可转换：支持 LogicFlow 数据与 BPMN、Turbo 等各种后端执行引擎数据结构转换能力。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# npm&#xA;$ npm install @logicflow/core @logicflow/extension --save&#xA;&#xA;# yarn&#xA;$ yarn add @logicflow/core @logicflow/extension&#xA;&#xA;# pnpm&#xA;$ pnpm add @logicflow/core @logicflow/extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;快速上手&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- LogicFlow 容器 DOM--&amp;gt;&#xA;&amp;lt;div id=&#34;container&#34;&amp;gt;&amp;lt;/div&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// 准备数据&#xA;const data = {&#xA;  // 节点&#xA;  nodes: [&#xA;    {&#xA;      id: &#39;21&#39;,&#xA;      type: &#39;rect&#39;,&#xA;      x: 100,&#xA;      y: 200,&#xA;      text: &#39;矩形节点&#39;,&#xA;    },&#xA;    {&#xA;      id: &#39;50&#39;,&#xA;      type: &#39;circle&#39;,&#xA;      x: 300,&#xA;      y: 400,&#xA;      text: &#39;圆形节点&#39;,&#xA;    },&#xA;  ],&#xA;  // 边&#xA;  edges: [&#xA;    {&#xA;      type: &#39;polyline&#39;,&#xA;      sourceNodeId: &#39;50&#39;,&#xA;      targetNodeId: &#39;21&#39;,&#xA;    },&#xA;  ],&#xA;};&#xA;// 渲染画布&#xA;const lf = new LogicFlow({&#xA;  container: document.querySelector(&#39;#container&#39;),&#xA;  width: 700,&#xA;  height: 600,&#xA;});&#xA;&#xA;lf.render(data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;相关文档&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://site.logic-flow.cn/&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://site.logic-flow.cn/tutorial/get-started&#34;&gt;快速上手&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://site.logic-flow.cn/examples&#34;&gt;图表示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://site.logic-flow.cn/article/architecture-of-logicflow&#34;&gt;相关文章&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/didi/LogicFlow/releases&#34;&gt;更新日志&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/didi/LogicFlow/issues/new/choose&#34;&gt;issue模板&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/didi/LogicFlow/master/CONTRIBUTING.md&#34;&gt;本地开发&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 安装项目依赖和初始化构建&#xA;$ pnpm install&#xA;&#xA;# 进入到指定项目开发和调试&#xA;cd packages/core&#xA;pnpm run build:watch&#xA;&#xA;# 启动 example 查看效果&#xA;cd examples/feature-examples&#xA;pnpm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;参与共建&lt;/h2&gt; &#xA;&lt;p&gt;如果希望参与到 LogicFlow 的开发中，请遵从我们的&lt;a href=&#34;https://raw.githubusercontent.com/didi/LogicFlow/master/CONTRIBUTING.md&#34;&gt;贡献指南&lt;/a&gt;。如果你贡献度足够活跃，你可以申请成为社区协作者。&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/didi/LogicFlow/graphs/contributors&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/didi/LogicFlow/master/CONTRIBUTORS.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;开源协议&lt;/h2&gt; &#xA;&lt;p&gt;该项目的代码和文档基于 &lt;a href=&#34;https://raw.githubusercontent.com/didi/LogicFlow/master/LICENSE&#34;&gt;Apache-2.0 License&lt;/a&gt; 开源协议。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/lexical</title>
    <updated>2024-09-08T01:48:02Z</updated>
    <id>tag:github.com,2024-09-08:/facebook/lexical</id>
    <link href="https://github.com/facebook/lexical" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lexical is an extensible text editor framework that provides excellent reliability, accessibility and performance.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://lexical.dev&#34;&gt;Lexical&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/facebook/lexical/tests.yml&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/lexical&#34;&gt; &lt;img alt=&#34;Visit the NPM page&#34; src=&#34;https://img.shields.io/npm/v/lexical&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/KmG4wQnnD9&#34;&gt; &lt;img alt=&#34;Add yourself to our Discord&#34; src=&#34;https://img.shields.io/discord/953974421008293909&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=lexicaljs&#34;&gt; &lt;img alt=&#34;Follow us on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/lexicaljs?style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Lexical is an extensible JavaScript web text-editor framework with an emphasis on reliability, accessibility, and performance. Lexical aims to provide a best-in-class developer experience, so you can easily prototype and build features with confidence. Combined with a highly extensible architecture, Lexical allows developers to create unique text editing experiences that scale in size and functionality.&lt;/p&gt; &#xA;&lt;p&gt;For documentation and more information about Lexical, be sure to &lt;a href=&#34;https://lexical.dev&#34;&gt;visit the Lexical website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples of what you can do with Lexical:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playground.lexical.dev&#34;&gt;Lexical Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackblitz.com/github/facebook/lexical/tree/main/examples/react-plain-text?embed=1&amp;amp;file=src%2FApp.tsx&amp;amp;terminalHeight=0&amp;amp;ctl=1&amp;amp;showSidebar=0&amp;amp;devtoolsheight=0&amp;amp;view=preview&#34;&gt;Plain text sandbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackblitz.com/github/facebook/lexical/tree/main/examples/react-rich?embed=1&amp;amp;file=src%2FApp.tsx&amp;amp;terminalHeight=0&amp;amp;ctl=1&amp;amp;showSidebar=0&amp;amp;devtoolsheight=0&amp;amp;view=preview&#34;&gt;Rich text sandbox&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overview:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#getting-started-with-react&#34;&gt;Getting started with React&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#lexical-is-a-framework&#34;&gt;Lexical is a framework&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#working-with-lexical&#34;&gt;Working with Lexical&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/lexical/main/#contributing-to-lexical&#34;&gt;Contributing to Lexical&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting started with React&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Lexical is not only limited to React. Lexical can support any underlying DOM based library once bindings for that library have been created.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install &lt;code&gt;lexical&lt;/code&gt; and &lt;code&gt;@lexical/react&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install --save lexical @lexical/react&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is an example of a basic plain text editor using &lt;code&gt;lexical&lt;/code&gt; and &lt;code&gt;@lexical/react&lt;/code&gt; (&lt;a href=&#34;https://stackblitz.com/github/facebook/lexical/tree/main/examples/react-plain-text?embed=1&amp;amp;file=src%2FApp.tsx&amp;amp;terminalHeight=0&amp;amp;ctl=1&amp;amp;showSidebar=0&amp;amp;devtoolsheight=0&amp;amp;view=preview&#34;&gt;try it yourself&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import {$getRoot, $getSelection} from &#39;lexical&#39;;&#xA;import {useEffect} from &#39;react&#39;;&#xA;&#xA;import {LexicalComposer} from &#39;@lexical/react/LexicalComposer&#39;;&#xA;import {PlainTextPlugin} from &#39;@lexical/react/LexicalPlainTextPlugin&#39;;&#xA;import {ContentEditable} from &#39;@lexical/react/LexicalContentEditable&#39;;&#xA;import {HistoryPlugin} from &#39;@lexical/react/LexicalHistoryPlugin&#39;;&#xA;import {OnChangePlugin} from &#39;@lexical/react/LexicalOnChangePlugin&#39;;&#xA;import {useLexicalComposerContext} from &#39;@lexical/react/LexicalComposerContext&#39;;&#xA;import {LexicalErrorBoundary} from &#39;@lexical/react/LexicalErrorBoundary&#39;;&#xA;&#xA;const theme = {&#xA;  // Theme styling goes here&#xA;  // ...&#xA;}&#xA;&#xA;// When the editor changes, you can get notified via the&#xA;// LexicalOnChangePlugin!&#xA;function onChange(editorState) {&#xA;  editorState.read(() =&amp;gt; {&#xA;    // Read the contents of the EditorState here.&#xA;    const root = $getRoot();&#xA;    const selection = $getSelection();&#xA;&#xA;    console.log(root, selection);&#xA;  });&#xA;}&#xA;&#xA;// Lexical React plugins are React components, which makes them&#xA;// highly composable. Furthermore, you can lazy load plugins if&#xA;// desired, so you don&#39;t pay the cost for plugins until you&#xA;// actually use them.&#xA;function MyCustomAutoFocusPlugin() {&#xA;  const [editor] = useLexicalComposerContext();&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    // Focus the editor when the effect fires!&#xA;    editor.focus();&#xA;  }, [editor]);&#xA;&#xA;  return null;&#xA;}&#xA;&#xA;// Catch any errors that occur during Lexical updates and log them&#xA;// or throw them as needed. If you don&#39;t throw them, Lexical will&#xA;// try to recover gracefully without losing user data.&#xA;function onError(error) {&#xA;  console.error(error);&#xA;}&#xA;&#xA;function Editor() {&#xA;  const initialConfig = {&#xA;    namespace: &#39;MyEditor&#39;,&#xA;    theme,&#xA;    onError,&#xA;  };&#xA;&#xA;  return (&#xA;    &amp;lt;LexicalComposer initialConfig={initialConfig}&amp;gt;&#xA;      &amp;lt;PlainTextPlugin&#xA;        contentEditable={&amp;lt;ContentEditable /&amp;gt;}&#xA;        placeholder={&amp;lt;div&amp;gt;Enter some text...&amp;lt;/div&amp;gt;}&#xA;        ErrorBoundary={LexicalErrorBoundary}&#xA;      /&amp;gt;&#xA;      &amp;lt;OnChangePlugin onChange={onChange} /&amp;gt;&#xA;      &amp;lt;HistoryPlugin /&amp;gt;&#xA;      &amp;lt;MyCustomAutoFocusPlugin /&amp;gt;&#xA;    &amp;lt;/LexicalComposer&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lexical is a framework&lt;/h2&gt; &#xA;&lt;p&gt;The core of Lexical is a dependency-free text editor framework that allows developers to build powerful, simple and complex, editor surfaces. Lexical has a few concepts that are worth exploring:&lt;/p&gt; &#xA;&lt;h3&gt;Editor instances&lt;/h3&gt; &#xA;&lt;p&gt;Editor instances are the core thing that wires everything together. You can attach a contenteditable DOM element to editor instances, and also register listeners and commands. Most importantly, the editor allows for updates to its &lt;code&gt;EditorState&lt;/code&gt;. You can create an editor instance using the &lt;code&gt;createEditor()&lt;/code&gt; API, however you normally don&#39;t have to worry when using framework bindings such as &lt;code&gt;@lexical/react&lt;/code&gt; as this is handled for you.&lt;/p&gt; &#xA;&lt;h3&gt;Editor States&lt;/h3&gt; &#xA;&lt;p&gt;An Editor State is the underlying data model that represents what you want to show on the DOM. Editor States contain two parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a Lexical node tree&lt;/li&gt; &#xA; &lt;li&gt;a Lexical selection object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Editor States are immutable once created, and in order to create one, you must do so via &lt;code&gt;editor.update(() =&amp;gt; {...})&lt;/code&gt;. However, you can also &#34;hook&#34; into an existing update using node transforms or command handlers – which are invoked as part of an existing update workflow to prevent cascading/waterfalling of updates. You can retrieve the current editor state using &lt;code&gt;editor.getEditorState()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Editor States are also fully serializable to JSON and can easily be serialized back into the editor using &lt;code&gt;editor.parseEditorState()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reading and Updating Editor State&lt;/h3&gt; &#xA;&lt;p&gt;When you want to read and/or update the Lexical node tree, you must do it via &lt;code&gt;editor.update(() =&amp;gt; {...})&lt;/code&gt;. You may also do read-only operations with the editor state via &lt;code&gt;editor.read(() =&amp;gt; {...})&lt;/code&gt; or &lt;code&gt;editor.getEditorState().read(() =&amp;gt; {...})&lt;/code&gt;. The closure passed to the update or read call is important, and must be synchronous. It&#39;s the only place where you have full &#34;lexical&#34; context of the active editor state, and providing you with access to the Editor State&#39;s node tree. We promote using the convention of using &lt;code&gt;$&lt;/code&gt; prefixed functions (such as &lt;code&gt;$getRoot()&lt;/code&gt;) to convey that these functions must be called in this context. Attempting to use them outside of a read or update will trigger a runtime error.&lt;/p&gt; &#xA;&lt;p&gt;For those familiar with React Hooks, you can think of these $functions as having similar functionality:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Feature&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;React Hooks&lt;/th&gt; &#xA;   &lt;th&gt;Lexical $functions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Naming Convention&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;useFunction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$function&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Context Required&lt;/td&gt; &#xA;   &lt;td&gt;Can only be called while rendering&lt;/td&gt; &#xA;   &lt;td&gt;Can only be called while in an update or read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Can be composed&lt;/td&gt; &#xA;   &lt;td&gt;Hooks can call other hooks&lt;/td&gt; &#xA;   &lt;td&gt;$functions can call other $functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Must be synchronous&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Other rules&lt;/td&gt; &#xA;   &lt;td&gt;❌ Must be called unconditionally in the same order&lt;/td&gt; &#xA;   &lt;td&gt;✅ None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Node Transforms and Command Listeners are called with an implicit &lt;code&gt;editor.update(() =&amp;gt; {...})&lt;/code&gt; context.&lt;/p&gt; &#xA;&lt;p&gt;It is permitted to do nested updates, or nested reads, but an update should not be nested in a read or vice versa. For example, &lt;code&gt;editor.update(() =&amp;gt; editor.update(() =&amp;gt; {...}))&lt;/code&gt; is allowed. It is permitted to nest nest an &lt;code&gt;editor.read&lt;/code&gt; at the end of an &lt;code&gt;editor.update&lt;/code&gt;, but this will immediately flush the update and any additional update in that callback will throw an error.&lt;/p&gt; &#xA;&lt;p&gt;All Lexical Nodes are dependent on the associated Editor State. With few exceptions, you should only call methods and access properties of a Lexical Node while in a read or update call (just like &lt;code&gt;$&lt;/code&gt; functions). Methods on Lexical Nodes will first attempt to locate the latest (and possibly a writable) version of the node from the active editor state using the node&#39;s unique key. All versions of a logical node have the same key. These keys are managed by the Editor, are only present at runtime (not serialized), and should be considered to be random and opaque (do not write tests that assume hard-coded values for keys).&lt;/p&gt; &#xA;&lt;p&gt;This is done because the editor state&#39;s node tree is recursively frozen after reconciliation to support efficient time travel (undo/redo and similar use cases). Methods that update nodes first call &lt;code&gt;node.getWritable()&lt;/code&gt;, which will create a writable clone of a frozen node. This would normally mean that any existing references (such as local variables) would refer to a stale version of the node, but having Lexical Nodes always refer to the editor state allows for a simpler and less error-prone data model.&lt;/p&gt; &#xA;&lt;p&gt;:::tip&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;editor.read(() =&amp;gt; { /* callback */ })&lt;/code&gt; it will first flush any pending updates, so you will always see a consistent state. When you are in an &lt;code&gt;editor.update&lt;/code&gt;, you will always be working with the pending state, where node transforms and DOM reconciliation may not have run yet. &lt;code&gt;editor.getEditorState().read()&lt;/code&gt; will use the latest reconciled &lt;code&gt;EditorState&lt;/code&gt; (after any node transforms, DOM reconciliation, etc. have already run), any pending &lt;code&gt;editor.update&lt;/code&gt; mutations will not yet be visible.&lt;/p&gt; &#xA;&lt;p&gt;:::&lt;/p&gt; &#xA;&lt;h3&gt;DOM Reconciler&lt;/h3&gt; &#xA;&lt;p&gt;Lexical has its own DOM reconciler that takes a set of Editor States (always the &#34;current&#34; and the &#34;pending&#34;) and applies a &#34;diff&#34; on them. It then uses this diff to update only the parts of the DOM that need changing. You can think of this as a kind-of virtual DOM, except Lexical is able to skip doing much of the diffing work, as it knows what was mutated in a given update. The DOM reconciler adopts performance optimizations that benefit the typical heuristics of a content editable – and is able to ensure consistency for LTR and RTL languages automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Listeners, Node Transforms and Commands&lt;/h3&gt; &#xA;&lt;p&gt;Outside of invoking updates, the bulk of work done with Lexical is via listeners, node transforms and commands. These all stem from the editor and are prefixed with &lt;code&gt;register&lt;/code&gt;. Another important feature is that all the register methods return a function to easily unsubscribe them. For example here is how you listen to an update to a Lexical editor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const unregisterListener = editor.registerUpdateListener(({editorState}) =&amp;gt; {&#xA;  // An update has occurred!&#xA;  console.log(editorState);&#xA;});&#xA;&#xA;// Ensure we remove the listener later!&#xA;unregisterListener();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commands are the communication system used to wire everything together in Lexical. Custom commands can be created using &lt;code&gt;createCommand()&lt;/code&gt; and dispatched to an editor using &lt;code&gt;editor.dispatchCommand(command, payload)&lt;/code&gt;. Lexical dispatches commands internally when key presses are triggered and when other important signals occur. Commands can also be handled using &lt;code&gt;editor.registerCommand(handler, priority)&lt;/code&gt;, and incoming commands are propagated through all handlers by priority until a handler stops the propagation (in a similar way to event propagation in the browser).&lt;/p&gt; &#xA;&lt;h2&gt;Working with Lexical&lt;/h2&gt; &#xA;&lt;p&gt;This section covers how to use Lexical, independently of any framework or library. For those intending to use Lexical in their React applications, it&#39;s advisable to &lt;a href=&#34;https://github.com/facebook/lexical/tree/main/packages/lexical-react/src&#34;&gt;check out the source-code for the hooks that are shipped in &lt;code&gt;@lexical/react&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Creating an editor and using it&lt;/h3&gt; &#xA;&lt;p&gt;When you work with Lexical, you normally work with a single editor instance. An editor instance can be thought of as the one responsible for wiring up an EditorState with the DOM. The editor is also the place where you can register custom nodes, add listeners, and transforms.&lt;/p&gt; &#xA;&lt;p&gt;An editor instance can be created from the &lt;code&gt;lexical&lt;/code&gt; package and accepts an optional configuration object that allows for theming and other options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {createEditor} from &#39;lexical&#39;;&#xA;&#xA;const config = {&#xA;  namespace: &#39;MyEditor&#39;,&#xA;  theme: {&#xA;    ...&#xA;  },&#xA;};&#xA;&#xA;const editor = createEditor(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have an editor instance, when ready, you can associate the editor instance with a content editable &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element in your document:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const contentEditableElement = document.getElementById(&#39;editor&#39;);&#xA;&#xA;editor.setRootElement(contentEditableElement);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to clear the editor instance from the element, you can pass &lt;code&gt;null&lt;/code&gt;. Alternatively, you can switch to another element if need be, just pass an alternative element reference to &lt;code&gt;setRootElement()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Working with Editor States&lt;/h3&gt; &#xA;&lt;p&gt;With Lexical, the source of truth is not the DOM, but rather an underlying state model that Lexical maintains and associates with an editor instance. You can get the latest editor state from an editor by calling &lt;code&gt;editor.getEditorState()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Editor states are serializable to JSON, and the editor instance provides a useful method to deserialize stringified editor states.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const stringifiedEditorState = JSON.stringify(editor.getEditorState().toJSON());&#xA;&#xA;const newEditorState = editor.parseEditorState(stringifiedEditorState);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating an editor&lt;/h3&gt; &#xA;&lt;p&gt;There are a few ways to update an editor instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trigger an update with &lt;code&gt;editor.update()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setting the editor state via &lt;code&gt;editor.setEditorState()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Applying a change as part of an existing update via &lt;code&gt;editor.registerNodeTransform()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using a command listener with &lt;code&gt;editor.registerCommand(EXAMPLE_COMMAND, () =&amp;gt; {...}, priority)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The most common way to update the editor is to use &lt;code&gt;editor.update()&lt;/code&gt;. Calling this function requires a function to be passed in that will provide access to mutate the underlying editor state. When starting a fresh update, the current editor state is cloned and used as the starting point. From a technical perspective, this means that Lexical leverages a technique called double-buffering during updates. There&#39;s an editor state to represent what is current on the screen, and another work-in-progress editor state that represents future changes.&lt;/p&gt; &#xA;&lt;p&gt;Reconciling an update is typically an async process that allows Lexical to batch multiple synchronous updates of the editor state together in a single update to the DOM – improving performance. When Lexical is ready to commit the update to the DOM, the underlying mutations and changes in the update batch will form a new immutable editor state. Calling &lt;code&gt;editor.getEditorState()&lt;/code&gt; will then return the latest editor state based on the changes from the update.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how you can update an editor instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {$getRoot, $getSelection, $createParagraphNode} from &#39;lexical&#39;;&#xA;&#xA;// Inside the `editor.update` you can use special $ prefixed helper functions.&#xA;// These functions cannot be used outside the closure, and will error if you try.&#xA;// (If you&#39;re familiar with React, you can imagine these to be a bit like using a hook&#xA;// outside of a React function component).&#xA;editor.update(() =&amp;gt; {&#xA;  // Get the RootNode from the EditorState&#xA;  const root = $getRoot();&#xA;&#xA;  // Get the selection from the EditorState&#xA;  const selection = $getSelection();&#xA;&#xA;  // Create a new ParagraphNode&#xA;  const paragraphNode = $createParagraphNode();&#xA;&#xA;  // Create a new TextNode&#xA;  const textNode = $createTextNode(&#39;Hello world&#39;);&#xA;&#xA;  // Append the text node to the paragraph&#xA;  paragraphNode.append(textNode);&#xA;&#xA;  // Finally, append the paragraph to the root&#xA;  root.append(paragraphNode);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to know when the editor updates so you can react to the changes, you can add an update listener to the editor, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;editor.registerUpdateListener(({editorState}) =&amp;gt; {&#xA;  // The latest EditorState can be found as `editorState`.&#xA;  // To read the contents of the EditorState, use the following API:&#xA;&#xA;  editorState.read(() =&amp;gt; {&#xA;    // Just like editor.update(), .read() expects a closure where you can use&#xA;    // the $ prefixed helper functions.&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to Lexical&lt;/h2&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/facebook/lexical/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Optional but recommended, use VSCode for development&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and install VSCode&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download from &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;here&lt;/a&gt; (it’s recommended to use the unmodified version)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install extensions&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode&#34;&gt;Flow Language Support&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Make sure to follow the setup steps in the README&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34;&gt;Prettier&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Set prettier as the default formatter in &lt;code&gt;editor.defaultFormatter&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Optional: set format on save &lt;code&gt;editor.formatOnSave&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&#34;&gt;ESlint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lexical.dev/docs/intro&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lexical.dev/docs/concepts/editor-state&#34;&gt;Concepts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lexical.dev/docs/design&#34;&gt;How Lexical was designed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lexical.dev/docs/testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lexical.dev/docs/maintainers-guide&#34;&gt;Maintainers&#39; Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firefox 52+&lt;/li&gt; &#xA; &lt;li&gt;Chrome 49+&lt;/li&gt; &#xA; &lt;li&gt;Edge 79+ (when Edge switched to Chromium)&lt;/li&gt; &#xA; &lt;li&gt;Safari 11+&lt;/li&gt; &#xA; &lt;li&gt;iOS 11+ (Safari)&lt;/li&gt; &#xA; &lt;li&gt;iPad OS 13+ (Safari)&lt;/li&gt; &#xA; &lt;li&gt;Android Chrome 72+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Lexical does not support Internet Explorer or legacy versions of Edge.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new branch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git checkout -b my-new-branch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Commit your changes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git commit -a -m &#39;Description of the changes&#39;&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;There are many ways of doing this and this is just a suggestion&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Push your branch to GitHub &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git push origin my-new-branch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go to the repository page in GitHub and click on &#34;Compare &amp;amp; pull request&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://cli.github.com/manual/gh_pr_create&#34;&gt;GitHub CLI&lt;/a&gt; allows you to skip the web interface for this step (and much more)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions about Lexical, would like to discuss a bug report, or have questions about new integrations, feel free to join us at &lt;a href=&#34;https://discord.gg/KmG4wQnnD9&#34;&gt;our Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lexical engineers are checking this regularly.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-unit&lt;/code&gt; runs only unit tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-e2e-chromium&lt;/code&gt; runs only chromium e2e tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run debug-test-e2e-chromium&lt;/code&gt; runs only chromium e2e tests in head mode for debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-e2e-firefox&lt;/code&gt; runs only firefox e2e tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run debug-test-e2e-firefox&lt;/code&gt; runs only firefox e2e tests in head mode for debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-e2e-webkit&lt;/code&gt; runs only webkit e2e tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run debug-test-e2e-webkit&lt;/code&gt; runs only webkit e2e tests in head mode for debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Lexical is &lt;a href=&#34;https://github.com/facebook/lexical/raw/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bluesky-social/social-app</title>
    <updated>2024-09-08T01:48:02Z</updated>
    <id>tag:github.com,2024-09-08:/bluesky-social/social-app</id>
    <link href="https://github.com/bluesky-social/social-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Bluesky Social application for Web, iOS, and Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bluesky Social App&lt;/h1&gt; &#xA;&lt;p&gt;Welcome friends! This is the codebase for the Bluesky Social app.&lt;/p&gt; &#xA;&lt;p&gt;Get the app itself:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web: &lt;a href=&#34;https://bsky.app&#34;&gt;bsky.app&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS: &lt;a href=&#34;https://apps.apple.com/us/app/bluesky-social/id6444370199&#34;&gt;App Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=xyz.blueskyweb.app&#34;&gt;Play Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Resources&lt;/h2&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;https://reactnative.dev/&#34;&gt;React Native&lt;/a&gt; application, written in the TypeScript programming language. It builds on the &lt;code&gt;atproto&lt;/code&gt; TypeScript packages (like &lt;a href=&#34;https://www.npmjs.com/package/@atproto/api&#34;&gt;&lt;code&gt;@atproto/api&lt;/code&gt;&lt;/a&gt;), code for which is also open source, but in &lt;a href=&#34;https://github.com/bluesky-social/atproto&#34;&gt;a different git repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a small amount of Go language source code (in &lt;code&gt;./bskyweb/&lt;/code&gt;), for a web service that returns the React Native Web application.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/bluesky-social/social-app/main/docs/build.md&#34;&gt;Build Instructions&lt;/a&gt; are a good place to get started with the app itself.&lt;/p&gt; &#xA;&lt;p&gt;The Authenticated Transfer Protocol (&#34;AT Protocol&#34; or &#34;atproto&#34;) is a decentralized social media protocol. You don&#39;t &lt;em&gt;need&lt;/em&gt; to understand AT Protocol to work with this application, but it can help. Learn more at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atproto.com/guides/overview&#34;&gt;Overview and Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluesky-social/atproto/discussions&#34;&gt;Github Discussions&lt;/a&gt; 👈 Great place to ask questions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atproto.com/specs/atp&#34;&gt;Protocol Specifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bsky.social/about/blog/3-6-2022-a-self-authenticating-social-protocol&#34;&gt;Blogpost on self-authenticating data structures&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Bluesky Social application encompasses a set of schemas and APIs built in the overall AT Protocol framework. The namespace for these &#34;Lexicons&#34; is &lt;code&gt;app.bsky.*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;While we do accept contributions, we prioritize high quality issues and pull requests. Adhering to the below guidelines will ensure a more timely review.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We may not respond to your issue or PR.&lt;/li&gt; &#xA; &lt;li&gt;We may close an issue or PR without much feedback.&lt;/li&gt; &#xA; &lt;li&gt;We may lock discussions or contributions if our attention is getting DDOSed.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;re not going to provide support for build issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Guidelines:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check for existing issues before filing a new one please.&lt;/li&gt; &#xA; &lt;li&gt;Open an issue and give some time for discussion before submitting a PR.&lt;/li&gt; &#xA; &lt;li&gt;Stay away from PRs like... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Changing &#34;Post&#34; to &#34;Skeet.&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Refactoring the codebase, e.g., to replace MobX with Redux or something.&lt;/li&gt; &#xA;   &lt;li&gt;Adding entirely new features without prior discussion.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Remember, we serve a wide community of users. Our day-to-day involves us constantly asking &#34;which top priority is our top priority.&#34; If you submit well-written PRs that solve problems concisely, that&#39;s an awesome contribution. Otherwise, as much as we&#39;d love to accept your ideas and contributions, we really don&#39;t have the bandwidth. That&#39;s what forking is for!&lt;/p&gt; &#xA;&lt;h2&gt;Forking guidelines&lt;/h2&gt; &#xA;&lt;p&gt;You have our blessing 🪄✨ to fork this application! However, it&#39;s very important to be clear to users when you&#39;re giving them a fork.&lt;/p&gt; &#xA;&lt;p&gt;Please be sure to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change all branding in the repository and UI to clearly differentiate from Bluesky.&lt;/li&gt; &#xA; &lt;li&gt;Change any support links (feedback, email, terms of service, etc) to your own systems.&lt;/li&gt; &#xA; &lt;li&gt;Replace any analytics or error-collection systems with your own so we don&#39;t get super confused.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security disclosures&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any security issues, please send an email to &lt;a href=&#34;mailto:security@bsky.app&#34;&gt;security@bsky.app&lt;/a&gt;. The email is automatically CCed to the entire team and we&#39;ll respond promptly.&lt;/p&gt; &#xA;&lt;h2&gt;Are you a developer interested in building on atproto?&lt;/h2&gt; &#xA;&lt;p&gt;Bluesky is an open social network built on the AT Protocol, a flexible technology that will never lock developers out of the ecosystems that they help build. With atproto, third-party integration can be as seamless as first-party through custom feeds, federated services, clients, and more.&lt;/p&gt; &#xA;&lt;h2&gt;License (MIT)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bluesky-social/social-app/main/LICENSE&#34;&gt;./LICENSE&lt;/a&gt; for the full license.&lt;/p&gt; &#xA;&lt;h2&gt;P.S.&lt;/h2&gt; &#xA;&lt;p&gt;We ❤️ you and all of the ways you support us. Thank you for making Bluesky a great place!&lt;/p&gt;</summary>
  </entry>
</feed>