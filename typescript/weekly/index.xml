<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-03T01:47:52Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Jas-SinghFSU/HyprPanel</title>
    <updated>2024-11-03T01:47:52Z</updated>
    <id>tag:github.com,2024-11-03:/Jas-SinghFSU/HyprPanel</id>
    <link href="https://github.com/Jas-SinghFSU/HyprPanel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Bar/Panel for Hyprland with extensive customizability.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hyprpanel.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img width=&#34;180&#34; src=&#34;https://raw.githubusercontent.com/Jas-SinghFSU/HyprPanel/master/assets/hyprpanel.png&#34; alt=&#34;Hyprpanel logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hyprpanel.com/getting_started/installation.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Wiki-hyprpanel-orange?style=flat&amp;amp;logo=wiki&#34; alt=&#34;wiki&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/MNpg7Z2b3a&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-blue?style=flat&amp;amp;logo=discord&#34; alt=&#34;discord chat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;HyprPanel 🚀&lt;/h1&gt; &#xA;&lt;p&gt;A panel built for Hyprland with &lt;a href=&#34;https://github.com/Aylur/ags&#34;&gt;AGS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Jas-SinghFSU/HyprPanel/master/assets/hp1.png&#34; alt=&#34;HyprPanel1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Jas-SinghFSU/HyprPanel/master/assets/hp2.png&#34; alt=&#34;HyprPanel2&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: If you would like to support the project, please instead &lt;a href=&#34;https://ko-fi.com/aylur&#34;&gt;donate to Aylur&lt;/a&gt; who put in tremendous effort to build AGS. Hyprpanel likely wouldn&#39;t exist without it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://hyprpanel.com/getting_started/installation.html&#34;&gt;HyprPanel Wiki&lt;/a&gt; contains in depth instructions for installing the panel and all of its dependencies. The instructions below are general instructions for installing the panel.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Bun&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://bun.sh/install | bash &amp;amp;&amp;amp; \&#xA;  sudo ln -s $HOME/.bun/bin/bun /usr/local/bin/bun&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pipewire&#xA;&#xA;## Resource monitoring modules&#xA;libgtop&#xA;&#xA;## Bluetooth menu utilities&#xA;bluez&#xA;bluez-utils&#xA;&#xA;## Copy/Paste utilities&#xA;wl-clipboard&#xA;&#xA;## Compiler for sass/scss&#xA;dart-sass&#xA;&#xA;## Brightness module for OSD&#xA;brightnessctl&#xA;&#xA;## AGS requirements&#xA;networkmanager&#xA;gnome-bluetooth-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;::: warning HyprPanel will not run without the required dependencies. :::&lt;/p&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Used for Tracking GPU Usage in your Dashboard (NVidia only)&#xA;python&#xA;python-gpustat&#xA;&#xA;## Only if a pywal hook from wallpaper changes applied through settings is desired&#xA;pywal&#xA;&#xA;## To check for pacman updates in the default script used in the updates module&#xA;pacman-contrib&#xA;&#xA;## To switch between power profiles in the battery module&#xA;power-profiles-daemon&#xA;&#xA;## To take snapshots with the default snapshot shortcut in the dashboard&#xA;grimblast&#xA;&#xA;## To record screen through the dashboard record shortcut&#xA;gpu-screen-recorder&#xA;&#xA;## To enable the eyedropper color picker with the default snapshot shortcut in the dashboard&#xA;hyprpicker&#xA;&#xA;## To click resource/stat bars in the dashboard and open btop&#xA;btop&#xA;&#xA;## To enable matugen based color theming&#xA;matugen&#xA;&#xA;## To enable matugen based color theming and setting wallpapers&#xA;swww&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch&lt;/h3&gt; &#xA;&lt;p&gt;pacman:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S pipewire libgtop bluez bluez-utils btop networkmanager dart-sass wl-clipboard brightnessctl swww python gnome-bluetooth-3.0 pacman-contrib power-profiles-daemon gvfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AUR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yay -S grimblast-git gpu-screen-recorder hyprpicker matugen-bin python-gpustat aylurs-gtk-shell-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;p&gt;COPR - Add &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/solopasha/hyprland/&#34;&gt;solopasha/hyprland&lt;/a&gt; for most hyprland-related dependencies, and &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/heus-sueh/packages/&#34;&gt;hues-sueh/packages&lt;/a&gt; for matugen. Both provide the &lt;code&gt;swww&lt;/code&gt; package, so prioritise the former repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf copr enable solopasha/hyprland&#xA;sudo dnf copr enable heus-sueh/packages&#xA;sudo dnf config-manager --save --setopt=copr:copr.fedorainfracloud.org:heus-sueh:packages.priority=200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DNF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install pipewire libgtop2 bluez bluez-tools grimblast hyprpicker btop NetworkManager  wl-clipboard swww brightnessctl gnome-bluetooth aylurs-gtk-shell power-profiles-daemon gvfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;bun:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun install -g sass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;flatpak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flatpak install flathub --system com.dec05eba.gpu_screen_recorder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optional Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install python python3-pip; pip install gpustat pywal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NixOS&lt;/h3&gt; &#xA;&lt;p&gt;For NixOS/Home-Manager, see &lt;a href=&#34;https://raw.githubusercontent.com/Jas-SinghFSU/HyprPanel/master/#nixos--home-manager&#34;&gt;NixOS &amp;amp; Home-Manager instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;AGS&lt;/h3&gt; &#xA;&lt;p&gt;Once everything is installed you need to put the contents of this repo in &lt;code&gt;~/.config/ags&lt;/code&gt;. If you already have something in &lt;code&gt;~/.config/ags&lt;/code&gt;, it&#39;s recommended that you back it up with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv $HOME/.config/ags $HOME/.config/ags.bkup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise you can use this command to install the panel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Jas-SinghFSU/HyprPanel.git &amp;amp;&amp;amp; \&#xA;  ln -s $(pwd)/HyprPanel $HOME/.config/ags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nerd Fonts&lt;/h3&gt; &#xA;&lt;p&gt;Additionally, you need to ensure that you have a &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Font&lt;/a&gt; installed for your icons to render properly.&lt;/p&gt; &#xA;&lt;h3&gt;Launch the panel&lt;/h3&gt; &#xA;&lt;p&gt;Afterwards you can run the panel with the following command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can add it to your Hyprland config (hyprland.conf) to auto-start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;exec-once = ags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NixOS &amp;amp; Home-Manager&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, if you&#39;re using NixOS and/or Home-Manager, you can setup AGS using the provided Nix Flake. First, add the repository to your Flake&#39;s inputs, and enable the overlay.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# flake.nix&#xA;&#xA;{&#xA;  inputs.hyprpanel.url = &#34;github:Jas-SinghFSU/HyprPanel&#34;;&#xA;  # ...&#xA;&#xA;  outputs = { self, nixpkgs, ... }@inputs:&#xA;  let&#xA;    # ...&#xA;&#x9;system = &#34;x86_64-linux&#34;; # change to whatever your system should be.&#xA;    pkgs = import nixpkgs {&#xA;&#x9;  inherit system;&#xA;&#x9;  # ...&#xA;&#x9;  overlays = [&#xA;        inputs.hyprpanel.overlay&#xA;&#x9;  ];&#xA;&#x9;};&#xA;  in {&#xA;    # ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve set up the overlay, you can reference HyprPanel with &lt;code&gt;pkgs.hyprpanel&lt;/code&gt; as if it were any other Nix package. This means you can reference it as a NixOS system/user package, a Home-Manager user package, or as a direct reference in your Hyprland configuration (if your configuration is managed by Home-Manager). The first three methods will add it to your &lt;code&gt;$PATH&lt;/code&gt; (first globally, second two user-only), however the final will not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# configuration.nix&#xA;&#xA;# install it as a system package&#xA;environment.systemPackages = with pkgs; [&#xA;  # ...&#xA;  hyprpanel&#xA;  # ...&#xA;];&#xA;&#xA;# or install it as a user package&#xA;users.users.&amp;lt;username&amp;gt;.packages = with pkgs; [&#xA;  # ...&#xA;  hyprpanel&#xA;  # ...&#xA;];&#xA;&#xA;&#xA;# home.nix&#xA;&#xA;# install it as a user package with home-manager&#xA;home.packages = with pkgs; [&#xA;  # ...&#xA;  hyprpanel&#xA;  # ...&#xA;];&#xA;&#xA;# or reference it directly in your Hyprland configuration&#xA;wayland.windowManager.hyprland.settings.exec-once = [&#xA;  &#34;${pkgs.hyprpanel}/bin/hyprpanel&#34;&#xA;];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notifications&lt;/h3&gt; &#xA;&lt;p&gt;HyprPanel handles notifications through the AGS built-in notification service. If you&#39;re already using a notification daemon such as Dunst or Mako, you may have to stop them to prevent conflicts with HyprPanel.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: If your system is in a language other than English, the resource monitor in the dashboard may not work properly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The HyprPanel comes with a configuration menu which is available by opening the Dashboard menu (click the button in the bar with the default - Arch - icon) and then clicking the Gear icon.&lt;/p&gt; &#xA;&lt;h3&gt;Size&lt;/h3&gt; &#xA;&lt;p&gt;The panel is automatically scaled based on your font size in &lt;code&gt;Configuration &amp;gt; General&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying bar layouts per monitor&lt;/h3&gt; &#xA;&lt;p&gt;To specify layouts for each monitor you can create a JSON object such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;    &#34;0&#34;: {&#xA;        &#34;left&#34;: [&#xA;            &#34;dashboard&#34;,&#xA;            &#34;workspaces&#34;,&#xA;            &#34;windowtitle&#34;&#xA;        ],&#xA;        &#34;middle&#34;: [&#xA;            &#34;media&#34;&#xA;        ],&#xA;        &#34;right&#34;: [&#xA;            &#34;volume&#34;,&#xA;            &#34;clock&#34;,&#xA;            &#34;notifications&#34;&#xA;        ]&#xA;    },&#xA;    &#34;1&#34;: {&#xA;        &#34;left&#34;: [&#xA;            &#34;dashboard&#34;,&#xA;            &#34;workspaces&#34;,&#xA;            &#34;windowtitle&#34;&#xA;        ],&#xA;        &#34;middle&#34;: [&#xA;            &#34;media&#34;&#xA;        ],&#xA;        &#34;right&#34;: [&#xA;            &#34;volume&#34;,&#xA;            &#34;clock&#34;,&#xA;            &#34;notifications&#34;&#xA;        ]&#xA;    },&#xA;    &#34;2&#34;: {&#xA;        &#34;left&#34;: [&#xA;            &#34;dashboard&#34;,&#xA;            &#34;workspaces&#34;,&#xA;            &#34;windowtitle&#34;&#xA;        ],&#xA;        &#34;middle&#34;: [&#xA;            &#34;media&#34;&#xA;        ],&#xA;        &#34;right&#34;: [&#xA;            &#34;volume&#34;,&#xA;            &#34;network&#34;,&#xA;            &#34;bluetooth&#34;,&#xA;            &#34;systray&#34;,&#xA;            &#34;clock&#34;,&#xA;            &#34;notifications&#34;&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where each monitor is defined by its index (0, 1, 2 in this case) and each section (left, middle, right) contains one or more of the following modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;battery&#39;;&#xA;&#39;dashboard&#39;;&#xA;&#39;workspaces&#39;;&#xA;&#39;windowtitle&#39;;&#xA;&#39;media&#39;;&#xA;&#39;notifications&#39;;&#xA;&#39;volume&#39;;&#xA;&#39;network&#39;;&#xA;&#39;bluetooth&#39;;&#xA;&#39;clock&#39;;&#xA;&#39;systray&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the text-box in the options dialog isn&#39;t sufficient, it is recommended that you create this JSON configuration in a text editor elsewhere and paste it into the layout text-box under Configuration &amp;gt; Bar &amp;gt; &#34;Bar Layouts for Monitors&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;GPU Tracking&lt;/h4&gt; &#xA;&lt;p&gt;If you have an NVidia GPU, you can track your GPU usage in your Dashboard by going to your &lt;code&gt;Settings &amp;gt; Configuration &amp;gt; Dashboard Menu &amp;gt; Track GPU&lt;/code&gt; and turning it on.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yamadashy/repomix</title>
    <updated>2024-11-03T01:47:52Z</updated>
    <id>tag:github.com,2024-11-03:/yamadashy/repomix</id>
    <link href="https://github.com/yamadashy/repomix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📦 Repomix (formerly Repopack) is a powerful tool that packs your entire repository into a single, AI-friendly file. Perfect for when you need to feed your codebase to Large Language Models (LLMs) or other AI tools like Claude, ChatGPT, and Gemini.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📦 Repomix (formerly Repopack)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yamadashy/repomix/actions?query=workflow%3A%22ci%22&#34;&gt;&lt;img src=&#34;https://github.com/yamadashy/repomix/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/repomix&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/repomix.svg?maxAge=1000&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/repomix&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/d18m/repomix&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yamadashy/repomix/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/repomix.svg?maxAge=1000&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/repomix&#34;&gt;&lt;img src=&#34;https://img.shields.io/node/v/repomix.svg?maxAge=1000&#34; alt=&#34;node&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Repomix is a powerful tool that packs your entire repository into a single, AI-friendly file.&lt;br&gt; It is perfect for when you need to feed your codebase to Large Language Models (LLMs) or other AI tools like Claude, ChatGPT, and Gemini.&lt;/p&gt; &#xA;&lt;h2&gt;📢 Important Notice: Project Renamed to Repomix&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Due to legal considerations, this project has been renamed from &#34;Repopack&#34; to &#34;Repomix&#34;. Only the name is changing; Repomix all functionality and maintainer (&lt;a href=&#34;https://github.com/yamadashy&#34;&gt;@yamadashy&lt;/a&gt;) remain the same. We are committed to ensuring a smooth transition for all users.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Migration Guide&lt;/h3&gt; &#xA;&lt;p&gt;To continue using the tool, simply install the new package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install new package&#xA;npm install -g repomix&#xA;&#xA;# Or use directly with npx&#xA;npx repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can also uninstall the old package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm uninstall -g repopack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration Files&lt;/h4&gt; &#xA;&lt;p&gt;Your existing configuration files (&lt;code&gt;repopack.config.json&lt;/code&gt; and &lt;code&gt;.repopackignore&lt;/code&gt;) will continue to work during the transition period.&lt;br&gt; &lt;code&gt;repomix&lt;/code&gt; will automatically detect these files and offer to migrate them to the new format (&lt;code&gt;repomix.config.json&lt;/code&gt; and &lt;code&gt;.repomixignore&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Timeline&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Current: Transition period begins&lt;/li&gt; &#xA; &lt;li&gt;December 1st, 2024: Ownership of the &lt;a href=&#34;https://npmjs.com/repopack&#34;&gt;repopack npm package&lt;/a&gt; will be transferred to another party. The repomix package will continue to be maintained as usual&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We appreciate your understanding and cooperation during this transition.&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI-Optimized&lt;/strong&gt;: Formats your codebase in a way that&#39;s easy for AI to understand and process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Token Counting&lt;/strong&gt;: Provides token counts for each file and the entire repository, useful for LLM context limits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple to Use&lt;/strong&gt;: You need just one command to pack your entire repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Easily configure what to include or exclude.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git-Aware&lt;/strong&gt;: Automatically respects your .gitignore files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security-Focused&lt;/strong&gt;: Incorporates &lt;a href=&#34;https://github.com/secretlint/secretlint&#34;&gt;Secretlint&lt;/a&gt; for robust security checks to detect and prevent inclusion of sensitive information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;You can try Repomix instantly in your project directory without installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install globally for repeated use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install using npm&#xA;npm install -g repomix&#xA;&#xA;# Alternatively using yarn&#xA;yarn global add repomix&#xA;&#xA;# Then run in any project directory&#xA;repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Repomix will generate a &lt;code&gt;repomix-output.txt&lt;/code&gt; file in your current directory, containing your entire repository in an AI-friendly format.&lt;/p&gt; &#xA;&lt;h2&gt;📊 Usage&lt;/h2&gt; &#xA;&lt;p&gt;To pack your entire repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pack a specific directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix path/to/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pack specific files or directories using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --include &#34;src/**/*.ts,**/*.md&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To exclude specific files or directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --ignore &#34;**/*.log,tmp/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pack a remote repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --remote https://github.com/yamadashy/repomix&#xA;&#xA;# You can also use GitHub shorthand:&#xA;repomix --remote yamadashy/repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To initialize a new configuration file (&lt;code&gt;repomix.config.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have generated the packed file, you can use it with Generative AI tools like Claude, ChatGPT, and Gemini.&lt;/p&gt; &#xA;&lt;h3&gt;Prompt Examples&lt;/h3&gt; &#xA;&lt;p&gt;Once you have generated the packed file with Repomix, you can use it with AI tools like Claude, ChatGPT, and Gemini. Here are some example prompts to get you started:&lt;/p&gt; &#xA;&lt;h4&gt;Code Review and Refactoring&lt;/h4&gt; &#xA;&lt;p&gt;For a comprehensive code review and refactoring suggestions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This file contains my entire codebase. Please review the overall structure and suggest any improvements or refactoring opportunities, focusing on maintainability and scalability.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Documentation Generation&lt;/h4&gt; &#xA;&lt;p&gt;To generate project documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Based on the codebase in this file, please generate a detailed README.md that includes an overview of the project, its main features, setup instructions, and usage examples.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test Case Generation&lt;/h4&gt; &#xA;&lt;p&gt;For generating test cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Analyze the code in this file and suggest a comprehensive set of unit tests for the main functions and classes. Include edge cases and potential error scenarios.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Code Quality Assessment&lt;/h4&gt; &#xA;&lt;p&gt;Evaluate code quality and adherence to best practices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Review the codebase for adherence to coding best practices and industry standards. Identify areas where the code could be improved in terms of readability, maintainability, and efficiency. Suggest specific changes to align the code with best practices.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Library Overview&lt;/h4&gt; &#xA;&lt;p&gt;Get a high-level understanding of the library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This file contains the entire codebase of library. Please provide a comprehensive overview of the library, including its main purpose, key features, and overall architecture.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to modify these prompts based on your specific needs and the capabilities of the AI tool you&#39;re using.&lt;/p&gt; &#xA;&lt;h3&gt;Output File Format&lt;/h3&gt; &#xA;&lt;p&gt;Repomix generates a single file with clear separators between different parts of your codebase.&lt;br&gt; To enhance AI comprehension, the output file begins with an AI-oriented explanation, making it easier for AI models to understand the context and structure of the packed repository.&lt;/p&gt; &#xA;&lt;h4&gt;Plain Text Format (default)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;This file is a merged representation of the entire codebase, combining all repository files into a single document.&#xA;&#xA;================================================================&#xA;File Summary&#xA;================================================================&#xA;(Metadata and usage AI instructions)&#xA;&#xA;================================================================&#xA;Repository Structure&#xA;================================================================&#xA;src/&#xA;  cli/&#xA;    cliOutput.ts&#xA;    index.ts&#xA;  config/&#xA;    configLoader.ts&#xA;&#xA;(...remaining directories)&#xA;&#xA;================================================================&#xA;Repository Files&#xA;================================================================&#xA;&#xA;================&#xA;File: src/index.js&#xA;================&#xA;// File contents here&#xA;&#xA;================&#xA;File: src/utils.js&#xA;================&#xA;// File contents here&#xA;&#xA;(...remaining files)&#xA;&#xA;================================================================&#xA;Instruction&#xA;================================================================&#xA;(Custom instructions from `output.instructionFilePath`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;XML Format&lt;/h4&gt; &#xA;&lt;p&gt;To generate output in XML format, use the &lt;code&gt;--style xml&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --style xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The XML format structures the content in a hierarchical manner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;This file is a merged representation of the entire codebase, combining all repository files into a single document.&#xA;&#xA;&amp;lt;file_summary&amp;gt;&#xA;(Metadata and usage AI instructions)&#xA;&amp;lt;/file_summary&amp;gt;&#xA;&#xA;&amp;lt;repository_structure&amp;gt;&#xA;src/&#xA;  cli/&#xA;    cliOutput.ts&#xA;    index.ts&#xA;&#xA;(...remaining directories)&#xA;&amp;lt;/repository_structure&amp;gt;&#xA;&#xA;&amp;lt;repository_files&amp;gt;&#xA;&amp;lt;file path=&#34;src/index.js&#34;&amp;gt;&#xA;// File contents here&#xA;&amp;lt;/file&amp;gt;&#xA;&#xA;(...remaining files)&#xA;&amp;lt;/repository_files&amp;gt;&#xA;&#xA;&amp;lt;instruction&amp;gt;&#xA;(Custom instructions from `output.instructionFilePath`)&#xA;&amp;lt;/instruction&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For those interested in the potential of XML tags in AI contexts:&lt;br&gt; &lt;a href=&#34;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags&#34;&gt;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When your prompts involve multiple components like context, instructions, and examples, XML tags can be a game-changer. They help Claude parse your prompts more accurately, leading to higher-quality outputs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This means that the XML output from Repomix is not just a different format, but potentially a more effective way to feed your codebase into AI systems for analysis, code review, or other tasks.&lt;/p&gt; &#xA;&lt;h4&gt;Markdown Format&lt;/h4&gt; &#xA;&lt;p&gt;To generate output in Markdown format, use the &lt;code&gt;--style markdown&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --style markdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Markdown format structures the content in a hierarchical manner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;This file is a merged representation of the entire codebase, combining all repository files into a single document.&#xA;&#xA;# File Summary&#xA;(Metadata and usage AI instructions)&#xA;&#xA;# Repository Structure&#xA;```&#xA;src/&#xA;  cli/&#xA;    cliOutput.ts&#xA;    index.ts&#xA;```&#xA;(...remaining directories)&#xA;&#xA;# Repository Files&#xA;&#xA;## File: src/index.js&#xA;```&#xA;// File contents here&#xA;```&#xA;&#xA;(...remaining files)&#xA;&#xA;# Instruction&#xA;(Custom instructions from `output.instructionFilePath`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This format provides a clean, readable structure that is both human-friendly and easily parseable by AI systems.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-v, --version&lt;/code&gt;: Show tool version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-o, --output &amp;lt;file&amp;gt;&lt;/code&gt;: Specify the output file name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--include &amp;lt;patterns&amp;gt;&lt;/code&gt;: List of include patterns (comma-separated)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-i, --ignore &amp;lt;patterns&amp;gt;&lt;/code&gt;: Additional ignore patterns (comma-separated)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-c, --config &amp;lt;path&amp;gt;&lt;/code&gt;: Path to a custom config file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--style &amp;lt;style&amp;gt;&lt;/code&gt;: Specify the output style (&lt;code&gt;plain&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--top-files-len &amp;lt;number&amp;gt;&lt;/code&gt;: Number of top files to display in the summary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output-show-line-numbers&lt;/code&gt;: Show line numbers in the output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--remote &amp;lt;url&amp;gt;&lt;/code&gt;: Process a remote Git repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt;: Enable verbose logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix -o custom-output.txt&#xA;repomix -i &#34;*.log,tmp&#34; -v&#xA;repomix -c ./custom-config.json&#xA;repomix --style xml&#xA;repomix --remote https://github.com/user/repo.git&#xA;npx repomix src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating Repomix&lt;/h3&gt; &#xA;&lt;p&gt;To update a globally installed Repomix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using npm&#xA;npm update -g repomix&#xA;&#xA;# Using yarn&#xA;yarn global upgrade repomix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;npx repomix&lt;/code&gt; is generally more convenient as it always uses the latest version.&lt;/p&gt; &#xA;&lt;h3&gt;Remote Repository Processing&lt;/h3&gt; &#xA;&lt;p&gt;Repomix supports processing remote Git repositories without the need for manual cloning. This feature allows you to quickly analyze any public Git repository with a single command.&lt;/p&gt; &#xA;&lt;p&gt;To process a remote repository, use the &lt;code&gt;--remote&lt;/code&gt; option followed by the repository URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --remote https://github.com/user/repo.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use GitHub&#39;s shorthand format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --remote user/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;repomix.config.json&lt;/code&gt; file in your project root for custom configurations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an explanation of the configuration options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.filePath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the output file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;repomix-output.txt&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The style of the output (&lt;code&gt;plain&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;plain&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.headerText&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom text to include in the file header&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.instructionFilePath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to a file containing detailed custom instructions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.removeComments&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to remove comments from supported file types&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.removeEmptyLines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to remove empty lines from the output&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.showLineNumbers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to add line numbers to each line in the output&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output.topFilesLength&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number of top files to display in the summary. If set to 0, no summary will be displayed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;include&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Patterns of files to include (using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore.useGitignore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to use patterns from the project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore.useDefaultPatterns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to use default ignore patterns&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore.customPatterns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional patterns to ignore (using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;security.enableSecurityCheck&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to perform security checks on files&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;output&#34;: {&#xA;    &#34;filePath&#34;: &#34;repomix-output.xml&#34;,&#xA;    &#34;style&#34;: &#34;xml&#34;,&#xA;    &#34;headerText&#34;: &#34;Custom header information for the packed file.&#34;,&#xA;    &#34;removeComments&#34;: false,&#xA;    &#34;removeEmptyLines&#34;: false,&#xA;    &#34;showLineNumbers&#34;: false,&#xA;    &#34;topFilesLength&#34;: 5&#xA;  },&#xA;  &#34;include&#34;: [&#34;**/*&#34;],&#xA;  &#34;ignore&#34;: {&#xA;    &#34;useGitignore&#34;: true,&#xA;    &#34;useDefaultPatterns&#34;: true,&#xA;    &#34;customPatterns&#34;: [&#34;additional-folder&#34;, &#34;**/*.log&#34;]&#xA;  },&#xA;  &#34;security&#34;: {&#xA;    &#34;enableSecurityCheck&#34;: true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global Configuration&lt;/h3&gt; &#xA;&lt;p&gt;To create a global configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repomix --init --global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The global configuration file will be created in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;%LOCALAPPDATA%\Repomix\repomix.config.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS/Linux: &lt;code&gt;$XDG_CONFIG_HOME/repomix/repomix.config.json&lt;/code&gt; or &lt;code&gt;~/.config/repomix/repomix.config.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Local configuration (if present) takes precedence over global configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Include and Ignore&lt;/h3&gt; &#xA;&lt;h4&gt;Include Patterns&lt;/h4&gt; &#xA;&lt;p&gt;Repomix now supports specifying files to include using &lt;a href=&#34;https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax&#34;&gt;glob patterns&lt;/a&gt;. This allows for more flexible and powerful file selection:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;**/*.js&lt;/code&gt; to include all JavaScript files in any directory&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;src/**/*&lt;/code&gt; to include all files within the &lt;code&gt;src&lt;/code&gt; directory and its subdirectories&lt;/li&gt; &#xA; &lt;li&gt;Combine multiple patterns like &lt;code&gt;[&#34;src/**/*.js&#34;, &#34;**/*.md&#34;]&lt;/code&gt; to include JavaScript files in &lt;code&gt;src&lt;/code&gt; and all Markdown files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ignore Patterns&lt;/h4&gt; &#xA;&lt;p&gt;Repomix offers multiple methods to set ignore patterns for excluding specific files or directories during the packing process:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;.gitignore&lt;/strong&gt;: By default, patterns listed in your project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file are used. This behavior can be controlled with the &lt;code&gt;ignore.useGitignore&lt;/code&gt; setting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default patterns&lt;/strong&gt;: Repomix includes a default list of commonly excluded files and directories (e.g., node_modules, .git, binary files). This feature can be controlled with the &lt;code&gt;ignore.useDefaultPatterns&lt;/code&gt; setting. Please see &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/src/config/defaultIgnore.ts&#34;&gt;defaultIgnore.ts&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.repomixignore&lt;/strong&gt;: You can create a &lt;code&gt;.repomixignore&lt;/code&gt; file in your project root to define Repomix-specific ignore patterns. This file follows the same format as &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom patterns&lt;/strong&gt;: Additional ignore patterns can be specified using the &lt;code&gt;ignore.customPatterns&lt;/code&gt; option in the configuration file. You can overwrite this setting with the &lt;code&gt;-i, --ignore&lt;/code&gt; command line option.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Priority Order (from highest to lowest):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Custom patterns &lt;code&gt;ignore.customPatterns&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.repomixignore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt; (if &lt;code&gt;ignore.useGitignore&lt;/code&gt; is true)&lt;/li&gt; &#xA; &lt;li&gt;Default patterns (if &lt;code&gt;ignore.useDefaultPatterns&lt;/code&gt; is true)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This approach allows for flexible file exclusion configuration based on your project&#39;s needs. It helps optimize the size of the generated pack file by ensuring the exclusion of security-sensitive files and large binary files, while preventing the leakage of confidential information.&lt;/p&gt; &#xA;&lt;p&gt;Note: Binary files are not included in the packed output by default, but their paths are listed in the &#34;Repository Structure&#34; section of the output file. This provides a complete overview of the repository structure while keeping the packed file efficient and text-based.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Instruction&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;output.instructionFilePath&lt;/code&gt; option allows you to specify a separate file containing detailed instructions or context about your project. This allows AI systems to understand the specific context and requirements of your project, potentially leading to more relevant and tailored analysis or suggestions.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how you might use this feature:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a file named &lt;code&gt;repomix-instruction.md&lt;/code&gt; in your project root:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Coding Guidelines&#xA;- Follow the Airbnb JavaScript Style Guide&#xA;- Suggest splitting files into smaller, focused units when appropriate&#xA;- Add comments for non-obvious logic. Keep all text in English&#xA;- All new features should have corresponding unit tests&#xA;&#xA;# Generate Comprehensive Output&#xA;- Include all content without abbreviation, unless specified otherwise&#xA;- Optimize for handling large codebases while maintaining output quality&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In your &lt;code&gt;repomix.config.json&lt;/code&gt;, add the &lt;code&gt;instructionFilePath&lt;/code&gt; option:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json5&#34;&gt;{&#xA;  &#34;output&#34;: {&#xA;    &#34;instructionFilePath&#34;: &#34;repomix-instruction.md&#34;,&#xA;    // other options...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When Repomix generates the output, it will include the contents of &lt;code&gt;repomix-instruction.md&lt;/code&gt; in a dedicated section.&lt;/p&gt; &#xA;&lt;p&gt;Note: The instruction content is appended at the end of the output file. This placement can be particularly effective for AI systems. For those interested in understanding why this might be beneficial, Anthropic provides some insights in their documentation:&lt;br&gt; &lt;a href=&#34;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips&#34;&gt;https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/long-context-tips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Put long-form data at the top: Place your long documents and inputs (~20K+ tokens) near the top of your prompt, above your query, instructions, and examples. This can significantly improve Claude&#39;s performance across all models. Queries at the end can improve response quality by up to 30% in tests, especially with complex, multi-document inputs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Comment Removal&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;output.removeComments&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, Repomix will attempt to remove comments from supported file types. This feature can help reduce the size of the output file and focus on the essential code content.&lt;/p&gt; &#xA;&lt;p&gt;Supported languages include:&lt;br&gt; HTML, CSS, JavaScript, TypeScript, Vue, Svelte, Python, PHP, Ruby, C, C#, Java, Go, Rust, Swift, Kotlin, Dart, Shell, and YAML.&lt;/p&gt; &#xA;&lt;p&gt;Note: The comment removal process is conservative to avoid accidentally removing code. In complex cases, some comments might be retained.&lt;/p&gt; &#xA;&lt;h2&gt;🔍 Security Check&lt;/h2&gt; &#xA;&lt;p&gt;Repomix includes a security check feature that uses &lt;a href=&#34;https://github.com/secretlint/secretlint&#34;&gt;Secretlint&lt;/a&gt; to detect potentially sensitive information in your files. This feature helps you identify possible security risks before sharing your packed repository.&lt;/p&gt; &#xA;&lt;p&gt;The security check results will be displayed in the CLI output after the packing process is complete. If any suspicious files are detected, you&#39;ll see a list of these files along with a warning message.&lt;/p&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;🔍 Security Check:&#xA;──────────────────&#xA;2 suspicious file(s) detected:&#xA;1. src/utils/test.txt&#xA;2. tests/utils/secretLintUtils.test.ts&#xA;&#xA;Please review these files for potentially sensitive information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Repomix&#39;s security check feature is enabled. You can disable it by setting &lt;code&gt;security.enableSecurityCheck&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;security&#34;: {&#xA;    &#34;enableSecurityCheck&#34;: false&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤝 Contribution&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community! To get started, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/yamadashy/repomix/graphs/contributors&#34;&gt; &lt;img alt=&#34;contributors&#34; src=&#34;https://contrib.rocks/image?repo=yamadashy/repomix&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/yamadashy/repomix/main/#-repomix&#34; target=&#34;_blank&#34;&gt; Back To Top &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cline/cline</title>
    <updated>2024-11-03T01:47:52Z</updated>
    <id>tag:github.com,2024-11-03:/cline/cline</id>
    <link href="https://github.com/cline/cline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Autonomous coding agent right in your IDE, capable of creating/editing files, executing commands, using the browser, and more with your permission every step of the way.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cline (prev. Claude Dev) – #1 on OpenRouter&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://media.githubusercontent.com/media/cline/cline/main/assets/docs/demo.gif&#34; width=&#34;100%&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt;&#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Download on VS Marketplace&lt;/strong&gt;&lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/cline&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Join the Discord&lt;/strong&gt;&lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/cline/cline/wiki&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/cline/cline/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Feature Requests&lt;/strong&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;/tr&gt;&#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Meet Cline, an AI assistant that can use your &lt;strong&gt;CLI&lt;/strong&gt; a&lt;strong&gt;N&lt;/strong&gt;d &lt;strong&gt;E&lt;/strong&gt;ditor.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to&amp;nbsp;&lt;a href=&#34;https://www-cdn.anthropic.com/fed9cc193a14b84131812372d8d5857f8f304c52/Model_Card_Claude_3_Addendum.pdf&#34;&gt;Claude 3.5 Sonnet&#39;s agentic coding capabilities&lt;/a&gt;,&amp;nbsp;Cline can handle complex software development tasks step-by-step. With tools that let him create &amp;amp; edit files, explore large projects, use the browser, and execute terminal commands (after you grant permission), he can assist you in ways that go beyond code completion or tech support. While autonomous AI scripts traditionally run in sandboxed environments, this extension provides a human-in-the-loop GUI to approve every file change and terminal command, providing a safe and accessible way to explore the potential of agentic AI.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enter your task and add images to convert mockups into functional apps or fix bugs with screenshots.&lt;/li&gt; &#xA; &lt;li&gt;Cline starts by analyzing your file structure &amp;amp; source code ASTs, running regex searches, and reading relevant files to get up to speed in existing projects. By carefully managing what information is added to context, Cline can provide valuable assistance even for large, complex projects without overwhelming the context window.&lt;/li&gt; &#xA; &lt;li&gt;Once Cline has the information he needs, he can: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create and edit files + monitor linter/compiler errors along the way, letting him proactively fix issues like missing imports and syntax errors on his own.&lt;/li&gt; &#xA;   &lt;li&gt;Execute commands directly in your terminal and monitor their output as he works, letting him e.g., react to dev server issues after editing a file.&lt;/li&gt; &#xA;   &lt;li&gt;For web development tasks, Cline can launch the site in a headless browser, click, type, scroll, and capture screenshots + console logs, allowing him to fix runtime errors and visual bugs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When a task is completed, Cline will present the result to you with a terminal command like&amp;nbsp;&lt;code&gt;open -a &#34;Google Chrome&#34; index.html&lt;/code&gt;, which you run with a click of a button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Use the&amp;nbsp;&lt;code&gt;CMD/CTRL + Shift + P&lt;/code&gt;&amp;nbsp;shortcut to open the command palette and type&amp;nbsp;&#34;Cline: Open In New Tab&#34;&amp;nbsp;to open the extension as a tab in your editor. This lets you use Cline side-by-side with your file explorer, and see how he changes your workspace more clearly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;340&#34; src=&#34;https://github.com/user-attachments/assets/3cf21e04-7ce9-4d22-a7b9-ba2c595e88a4&#34;&gt; &#xA;&lt;h3&gt;Use any API and Model&lt;/h3&gt; &#xA;&lt;p&gt;Cline supports API providers like OpenRouter, Anthropic, OpenAI, Google Gemini, AWS Bedrock, Azure, and GCP Vertex. You can also configure any OpenAI compatible API, or use a local model through Ollama. If you&#39;re using OpenRouter, the extension fetches their latest model list, allowing you to use the newest models as soon as they&#39;re available.&lt;/p&gt; &#xA;&lt;p&gt;The extension also keeps track of total tokens and API usage cost for the entire task loop and individual requests, keeping you informed of spend every step of the way.&lt;/p&gt; &#xA;&lt;!-- Transparent pixel to create line break after floating image --&gt; &#xA;&lt;p&gt;&lt;img width=&#34;2000&#34; height=&#34;0&#34; src=&#34;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;370&#34; src=&#34;https://github.com/user-attachments/assets/81be79a8-1fdb-4028-9129-5fe055e01e76&#34;&gt; &#xA;&lt;h3&gt;Run Commands in Terminal&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to the new &lt;a href=&#34;https://code.visualstudio.com/updates/v1_93#_terminal-shell-integration-api&#34;&gt;shell integration updates in VSCode v1.93&lt;/a&gt;, Cline can execute commands directly in your terminal and receive the output. This allows him to perform a wide range of tasks, from installing packages and running build scripts to deploying applications, managing databases, and executing tests, all while adapting to your dev environment &amp;amp; toolchain to get the job done right.&lt;/p&gt; &#xA;&lt;p&gt;For long running processes like dev servers, use the &#34;Proceed While Running&#34; button to let Cline continue in the task while the command runs in the background. As Cline works he’ll be notified of any new terminal output along the way, letting him react to issues that may come up, such as compile-time errors when editing files.&lt;/p&gt; &#xA;&lt;!-- Transparent pixel to create line break after floating image --&gt; &#xA;&lt;p&gt;&lt;img width=&#34;2000&#34; height=&#34;0&#34; src=&#34;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;400&#34; src=&#34;https://github.com/user-attachments/assets/c5977833-d9b8-491e-90f9-05f9cd38c588&#34;&gt; &#xA;&lt;h3&gt;Create and Edit Files&lt;/h3&gt; &#xA;&lt;p&gt;Cline can create and edit files directly in your editor, presenting you a diff view of the changes. You can edit or revert Cline&#39;s changes directly in the diff view editor, or provide feedback in chat until you&#39;re satisfied with the result. Cline also monitors linter/compiler errors (missing imports, syntax errors, etc.) so he can fix issues that come up along the way on his own.&lt;/p&gt; &#xA;&lt;p&gt;All changes made by Cline are recorded in your file&#39;s Timeline, providing an easy way to track and revert modifications if needed.&lt;/p&gt; &#xA;&lt;!-- Transparent pixel to create line break after floating image --&gt; &#xA;&lt;p&gt;&lt;img width=&#34;2000&#34; height=&#34;0&#34; src=&#34;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;370&#34; src=&#34;https://github.com/user-attachments/assets/bc2e85ba-dfeb-4fe6-9942-7cfc4703cbe5&#34;&gt; &#xA;&lt;h3&gt;Use the Browser&lt;/h3&gt; &#xA;&lt;p&gt;With Claude 3.5 Sonnet&#39;s new &lt;a href=&#34;https://www.anthropic.com/news/3-5-models-and-computer-use&#34;&gt;Computer Use&lt;/a&gt; capability, Cline can launch a browser, click elements, type text, and scroll, capturing screenshots and console logs at each step. This allows for interactive debugging, end-to-end testing, and even general web use! This gives him autonomy to fixing visual bugs and runtime issues without you needing to handhold and copy-pasting error logs yourself.&lt;/p&gt; &#xA;&lt;p&gt;Try asking Cline to &#34;test the app&#34;, and watch as he runs a command like &lt;code&gt;npm run dev&lt;/code&gt;, launches your locally running dev server in a browser, and performs a series of tests to confirm that everything works. &lt;a href=&#34;https://x.com/sdrzn/status/1850880547825823989&#34;&gt;See a demo here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Transparent pixel to create line break after floating image --&gt; &#xA;&lt;p&gt;&lt;img width=&#34;2000&#34; height=&#34;0&#34; src=&#34;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;360&#34; src=&#34;https://github.com/user-attachments/assets/7fdf41e6-281a-4b4b-ac19-020b838b6970&#34;&gt; &#xA;&lt;h3&gt;Add Context&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;@url&lt;/code&gt;:&lt;/strong&gt;&amp;nbsp;Paste in a URL for the extension to fetch and convert to markdown, useful when you want to give Cline the latest docs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;@problems&lt;/code&gt;:&lt;/strong&gt;&amp;nbsp;Add workspace errors and warnings (&#39;Problems&#39; panel) for Cline to fix&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;@file&lt;/code&gt;:&lt;/strong&gt;&amp;nbsp;Adds a file&#39;s contents so you don&#39;t have to waste API requests approving read file (+ type to search files)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;@folder&lt;/code&gt;:&lt;/strong&gt;&amp;nbsp;Adds folder&#39;s files all at once to speed up your workflow even more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute to the project, start by exploring &lt;a href=&#34;https://github.com/cline/cline/issues&#34;&gt;open issues&lt;/a&gt; or checking our &lt;a href=&#34;https://github.com/cline/cline/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop&#34;&gt;feature request board&lt;/a&gt;. We&#39;d also love to have you join our &lt;a href=&#34;https://discord.gg/cline&#34;&gt;Discord&lt;/a&gt; to share ideas and connect with other contributors.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Local Development Instructions&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Clone the repository: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/cline/cline.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Open the project in VSCode: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;code cline&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Install the necessary dependencies for the extension and webview-gui: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run install:all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Launch by pressing &lt;code&gt;F5&lt;/code&gt; (or &lt;code&gt;Run&lt;/code&gt;-&amp;gt;&lt;code&gt;Start Debugging&lt;/code&gt;) to open a new VSCode window with the extension loaded. (You may need to install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=connor4312.esbuild-problem-matchers&#34;&gt;esbuild problem matchers extension&lt;/a&gt; if you run into issues building the project.)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cline/cline/main/LICENSE&#34;&gt;Apache 2.0 © 2024 Cline Bot Inc.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>