<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:42:57Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sadmann7/shadcn-table</title>
    <updated>2024-04-28T01:42:57Z</updated>
    <id>tag:github.com,2024-04-28:/sadmann7/shadcn-table</id>
    <link href="https://github.com/sadmann7/shadcn-table" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A shadcn table component with server-side sorting, filtering, and pagination.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://table.sadmn.com&#34;&gt;Shadcn Table&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is a shadcn table component with server-side sorting, filtering, and pagination. It is bootstrapped with &lt;code&gt;create-t3-app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://table.sadmn.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sadmann7/shadcn-table/main/public/images/screenshot.png&#34; alt=&#34;Shadcn Table&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; This project is still in development and is not ready for production use.&lt;/p&gt; &#xA; &lt;p&gt;It uses new technologies (ppr, and drizzle ORM) which are subject to change and may break your application.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Tech Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Framework:&lt;/strong&gt; &lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Styling:&lt;/strong&gt; &lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UI Components:&lt;/strong&gt; &lt;a href=&#34;https://ui.shadcn.com&#34;&gt;shadcn/ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Table package:&lt;/strong&gt; &lt;a href=&#34;https://tanstack.com/table/latest&#34;&gt;TanStack/react-table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database:&lt;/strong&gt; &lt;a href=&#34;https://neon.tech&#34;&gt;Neon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ORM:&lt;/strong&gt; &lt;a href=&#34;https://orm.drizzle.team&#34;&gt;Drizzle ORM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Validation:&lt;/strong&gt; &lt;a href=&#34;https://zod.dev&#34;&gt;Zod&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Server-side pagination, sorting, and filtering (via &lt;code&gt;useDataTable&lt;/code&gt; hook)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizable columns (&lt;code&gt;dataTable&lt;/code&gt; and &lt;code&gt;columns&lt;/code&gt; props)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dynamic debounced search filters, and faceted filters (&lt;code&gt;filterFields&lt;/code&gt; prop)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dynamic &lt;code&gt;Data-Table-Toolbar&lt;/code&gt; with search, filters, and actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optional &lt;code&gt;Notion&lt;/code&gt; like advanced filtering (&lt;code&gt;enableAdvancedFilter&lt;/code&gt; prop)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optional &lt;code&gt;Linear&lt;/code&gt; like floating bar on row selection (&lt;code&gt;floatingBar&lt;/code&gt; prop)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sadmann7/shadcn-table&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies using pnpm&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and update the variables.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the development server&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push the database schema&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm run db:push&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build your own Table&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the following folders and files into your project (configured with ) at the exact specific locations&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;src/components/data-table&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;src/db/index.ts&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;src/hooks&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;src/lib&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;src/types&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Also install the required shadcn components and other required packages with the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dlx shadcn-ui@latest init&#xA;&#xA;pnpm dlx shadcn-ui@latest add badge button calendar checkbox command dialog dropdown-menu form input label popover select separator skeleton sonner table toggle-group tooltip&#xA;&#xA;pnpm add drizzle-orm postgres @tanstack/react-table zod @t3-oss/env-nextjs&#xA;pnpm add -D drizzle-kit dotenv-cli pg tsx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure your Environment Variables Then set up the Database URL, for this example, we&#39;re using PlanetScale MySQL2 Database. Our schemas will also be made using this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Database Actions: For this you can use any ORM of your choice, but for the sake of this particular example, we&#39;re using &lt;a href=&#34;https://orm.drizzle.team&#34;&gt;Drizzle ORM&lt;/a&gt; and &lt;a href=&#34;https://neon.tech/&#34;&gt;Neon&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As an example, lets use the &lt;code&gt;tasks&lt;/code&gt; table.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create the Table Schema at &lt;code&gt;@/db/schema.ts&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create the associated zod validations &lt;code&gt;@/lib/validations/tasks.ts&lt;/code&gt; file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setting up the Table&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Create Files&lt;/strong&gt;: Create &lt;code&gt;page.tsx&lt;/code&gt; and, if needed, &lt;code&gt;layout.tsx&lt;/code&gt; in your app directory.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Copy Directories&lt;/strong&gt;: Copy &lt;code&gt;./_components&lt;/code&gt; and &lt;code&gt;./_lib&lt;/code&gt; directories into your project.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Update Queries/Mutations&lt;/strong&gt;: Modify &lt;code&gt;./_lib/queries.ts&lt;/code&gt;, &lt;code&gt;./_lib/actions.ts&lt;/code&gt;, and &lt;code&gt;./_lib/client-actions.ts&lt;/code&gt; to match your database operations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Update Floating Bar&lt;/strong&gt;: Update &lt;code&gt;./_components/tasks-table-floating-bar.tsx&lt;/code&gt; to match your table&#39;s actions (optional).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Define Table Columns&lt;/strong&gt;: Update &lt;code&gt;./_components/tasks-table-columns.tsx&lt;/code&gt; to define column headers, actions, searchable and filterable columns.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Setup Data Fetching&lt;/strong&gt;: In &lt;code&gt;./page.tsx&lt;/code&gt;, define &lt;code&gt;getTasksPromise&lt;/code&gt;, &lt;code&gt;getTaskCountByStatus&lt;/code&gt;, and &lt;code&gt;getTaskCountByPriority&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Fetch Data&lt;/strong&gt;: In &lt;code&gt;./_components/tasks-table.tsx&lt;/code&gt;, consume the &lt;code&gt;getTasksPromise&lt;/code&gt; promise using the &lt;code&gt;React.use&lt;/code&gt; hook. The promise is passed to trigger the &lt;code&gt;suspense&lt;/code&gt; boundary.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Memoize Table Columns&lt;/strong&gt;: In &lt;code&gt;./_components/tasks-table.tsx&lt;/code&gt;, memoize columns defined in &lt;code&gt;./_components/tasks-table-columns.tsx&lt;/code&gt; using &lt;code&gt;React.useMemo&lt;/code&gt; hook to prevent unnecessary re-renders.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Use Data Table Hook&lt;/strong&gt;: In &lt;code&gt;./_components/tasks-table.tsx&lt;/code&gt;, call &lt;code&gt;./hooks/useTasksTable.tsx&lt;/code&gt; hook to handle server-side pagination, sorting, and filtering.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Remove Tasks Table Provider&lt;/strong&gt;: Make sure to remove the provider from &lt;code&gt;./components/tasks-table-provider.tsx&lt;/code&gt;. The provider is used to showcase some additional features like floating bar and advanced filters.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Codebase Overview&lt;/h2&gt; &#xA;&lt;p&gt;Watch the codebase overview video on &lt;a href=&#34;https://www.youtube.com/watch?v=BsvjF5Y6-C8&amp;amp;t=1s&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Consider subscribing to Kavin Desi Valli&#39;s &lt;a href=&#34;https://www.youtube.com/@livecode247&#34;&gt;YouTube channel&lt;/a&gt; for more videos.&lt;/p&gt; &#xA;&lt;h2&gt;How do I deploy this?&lt;/h2&gt; &#xA;&lt;p&gt;Follow the deployment guides for &lt;a href=&#34;https://create.t3.gg/en/deployment/vercel&#34;&gt;Vercel&lt;/a&gt;, &lt;a href=&#34;https://create.t3.gg/en/deployment/netlify&#34;&gt;Netlify&lt;/a&gt; and &lt;a href=&#34;https://create.t3.gg/en/deployment/docker&#34;&gt;Docker&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Effect-TS/effect</title>
    <updated>2024-04-28T01:42:57Z</updated>
    <id>tag:github.com,2024-04-28:/Effect-TS/effect</id>
    <link href="https://github.com/Effect-TS/effect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fully-fledged functional effect system for TypeScript with a rich standard library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Effect&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to Effect, a powerful TypeScript framework that provides a fully-fledged functional effect system with a rich standard library.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TypeScript 5.4 or newer&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;strict&lt;/code&gt; flag enabled in your &lt;code&gt;tsconfig.json&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;  // ...&#xA;  &#34;compilerOptions&#34;: {&#xA;    // ...&#xA;    &#34;strict&#34;: true,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information and usage examples, please visit the &lt;a href=&#34;https://www.effect.website/&#34;&gt;Effect website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction to Effect&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Effect, watch our introductory video on YouTube. This video provides an overview of Effect and its key features, making it a great starting point for newcomers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ViSiXfBKElQ&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/ViSiXfBKElQ/maxresdefault.jpg&#34; alt=&#34;Introduction to Effect&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Connect with Our Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our vibrant community on Discord to interact with fellow developers, ask questions, and share your experiences. Here&#39;s the invite link to our Discord server: &lt;a href=&#34;https://discord.gg/hdt7t7jpvn&#34;&gt;Join Effect&#39;s Discord Community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information on the Effect API, please refer to our &lt;a href=&#34;https://effect-ts.github.io/effect/&#34;&gt;API Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions via pull requests! Here are some guidelines to help you get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository and clone it to your local machine.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your changes: &lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ensure you have the required dependencies installed by running: &lt;code&gt;pnpm install&lt;/code&gt; (assuming pnpm version &lt;code&gt;8.x&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Make your desired changes and, if applicable, include tests to validate your modifications.&lt;/li&gt; &#xA; &lt;li&gt;Run the following commands to ensure the integrity of your changes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pnpm codegen&lt;/code&gt;: Re-generate the package entrypoints in case you have changed the structure of a package or introduced a new module.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pnpm check&lt;/code&gt;: Verify that the code compiles.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pnpm test&lt;/code&gt;: Execute the tests.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pnpm circular&lt;/code&gt;: Confirm there are no circular imports.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pnpm lint&lt;/code&gt;: Check for code style adherence (if you happen to encounter any errors during this process, you can use &lt;code&gt;pnpm lint-fix&lt;/code&gt; to automatically fix some of these style issues).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pnpm dtslint&lt;/code&gt;: Run type-level tests.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pnpm docgen&lt;/code&gt;: Check the integrity of the generated documentation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a changeset for your changes: before committing your changes, create a changeset to document the modifications. This helps in tracking and communicating the changes effectively. To create a changeset, run the following command: &lt;code&gt;pnpm changeset&lt;/code&gt;. Always choose the &lt;code&gt;patch&lt;/code&gt; option when prompted (please note that we are currently in pre-release mode).&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes: after creating the changeset, commit your changes with a descriptive commit message: &lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Push your changes to your fork: &lt;code&gt;git push origin my-new-feature&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a pull request against our &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Pull Request Guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please make sure your changes are consistent with the project&#39;s existing style and conventions.&lt;/li&gt; &#xA; &lt;li&gt;Please write clear commit messages and include a summary of your changes in the pull request description.&lt;/li&gt; &#xA; &lt;li&gt;Please make sure all tests pass and add new tests as necessary.&lt;/li&gt; &#xA; &lt;li&gt;If your change requires documentation, please update the relevant documentation.&lt;/li&gt; &#xA; &lt;li&gt;Please be patient! We will do our best to review your pull request as soon as possible.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>code100x/chess</title>
    <updated>2024-04-28T01:42:57Z</updated>
    <id>tag:github.com,2024-04-28:/code100x/chess</id>
    <link href="https://github.com/code100x/chess" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multiplayer chess platform&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Chess&lt;/h2&gt; &#xA;&lt;p&gt;Building a platform where people can&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign up&lt;/li&gt; &#xA; &lt;li&gt;Create a new match/get connected to an existing match&lt;/li&gt; &#xA; &lt;li&gt;During the match, let users play moves&lt;/li&gt; &#xA; &lt;li&gt;Have a rating system that goes up and down similar to standard chess rating&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s keep it simple&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;React for Frontend&lt;/li&gt; &#xA; &lt;li&gt;Node.js for Backend&lt;/li&gt; &#xA; &lt;li&gt;Typescript as the language&lt;/li&gt; &#xA; &lt;li&gt;Separate Websocket servers for handling real time games&lt;/li&gt; &#xA; &lt;li&gt;Redis for storing all moves of a game in a queue&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>