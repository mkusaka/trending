<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:27:51Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nativefier/nativefier</title>
    <updated>2022-06-04T02:27:51Z</updated>
    <id>tag:github.com,2022-06-04:/nativefier/nativefier</id>
    <link href="https://github.com/nativefier/nativefier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make any web page a desktop application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nativefier&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/.github/dock-screenshot.png&#34; alt=&#34;Example of Nativefier app in the macOS dock&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You want to make a native-looking wrapper for WhatsApp Web (or any web page).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nativefier &#39;web.whatsapp.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/.github/nativefier-walkthrough.gif&#34; alt=&#34;Walkthrough animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re done.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Nativefier is a command-line tool to easily create a “desktop app” for any web site with minimal fuss. Apps are wrapped by &lt;a href=&#34;https://www.electronjs.org/&#34;&gt;Electron&lt;/a&gt; (which uses Chromium under the hood) in an OS executable (&lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.exe&lt;/code&gt;, etc) usable on Windows, macOS and Linux.&lt;/p&gt; &#xA;&lt;p&gt;I built this because I grew tired of having to Alt-Tab to my browser and then search through numerous open tabs when using Messenger or Whatsapp Web (&lt;a href=&#34;https://news.ycombinator.com/item?id=10930718&#34;&gt;HN thread&lt;/a&gt;). Nativefier features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically retrieval of app icon / name&lt;/li&gt; &#xA; &lt;li&gt;Injection of custom JS &amp;amp; CSS&lt;/li&gt; &#xA; &lt;li&gt;Many more, see the &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/API.md&#34;&gt;API docs&lt;/a&gt; or &lt;code&gt;nativefier --help&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Nativefier globally with &lt;code&gt;npm install -g nativefier&lt;/code&gt; . Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 10.10+ / Windows / Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; ≥ 12.9 and npm ≥ 6.9&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt; or &lt;a href=&#34;http://www.graphicsmagick.org/&#34;&gt;GraphicsMagick&lt;/a&gt; to convert icons. Be sure &lt;code&gt;convert&lt;/code&gt; + &lt;code&gt;identify&lt;/code&gt; or &lt;code&gt;gm&lt;/code&gt; are in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.winehq.org/&#34;&gt;Wine&lt;/a&gt; to build Windows apps from non-Windows platforms. Be sure &lt;code&gt;wine&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Or install with Docker (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pull the image from &lt;a href=&#34;https://hub.docker.com/r/nativefier/nativefier&#34;&gt;Docker Hub&lt;/a&gt;: &lt;code&gt;docker pull nativefier/nativefier&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;... or build it yourself: &lt;code&gt;docker build -t local/nativefier .&lt;/code&gt; (in this case, replace &lt;code&gt;nativefier/&lt;/code&gt; in the below examples with &lt;code&gt;local/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;By default, &lt;code&gt;nativefier --help&lt;/code&gt; will be executed. To build e.g. a Gmail app into &lt;code&gt;~/nativefier-apps&lt;/code&gt;,&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v ~/nativefier-apps:/target/ nativefier/nativefier https://mail.google.com/ /target/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass Nativefier flags, and mount volumes to pass local files. E.g. to use an icon,&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v ~/my-icons-folder/:/src -v $TARGET-PATH:/target nativefier/nativefier --icon /src/icon.png --name whatsApp -p linux -a x64 https://web.whatsapp.com/ /target/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Or install with Snap &amp;amp; AUR (click to expand)&lt;/summary&gt; &#xA; &lt;p&gt;These repos are &lt;em&gt;not&lt;/em&gt; managed by Nativefier maintainers; use at your own risk. If using them, for your security, please inspect the build script.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://snapcraft.io/nativefier&#34;&gt;Snap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/nodejs-nativefier&#34;&gt;AUR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To create an app for medium.com, simply &lt;code&gt;nativefier &#39;medium.com&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nativefier will try to determine the app name, and well as other options that you can override. For example, to override the name, &lt;code&gt;nativefier --name &#39;My Medium App&#39; &#39;medium.com&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/API.md&#34;&gt;API docs&lt;/a&gt; or run &lt;code&gt;nativefier --help&lt;/code&gt;&lt;/strong&gt; to learn about command-line flags and configure your app.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/CATALOG.md&#34;&gt;CATALOG.md&lt;/a&gt; for site-specific ideas &amp;amp; workarounds contributed by the community&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this doesn’t help, go look at our &lt;a href=&#34;https://github.com/nativefier/nativefier/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Help welcome on &lt;a href=&#34;https://github.com/nativefier/nativefier/issues?q=is%3Aopen+is%3Aissue+label%3Abug&#34;&gt;bugs&lt;/a&gt; and &lt;a href=&#34;https://github.com/nativefier/nativefier/issues?q=is%3Aopen+is%3Aissue+label%3Afeature-request&#34;&gt;feature requests&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Docs: &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/HACKING.md&#34;&gt;Developer / build / hacking&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/API.md&#34;&gt;API / flags&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;License: &lt;a href=&#34;https://raw.githubusercontent.com/nativefier/nativefier/master/LICENSE.md&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mswjs/msw</title>
    <updated>2022-06-04T02:27:51Z</updated>
    <id>tag:github.com,2022-06-04:/mswjs/msw</id>
    <link href="https://github.com/mswjs/msw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seamless REST/GraphQL API mocking library for browser and Node.js.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/msw-logo.svg?sanitize=true&#34; width=&#34;100&#34; alt=&#34;Mock Service Worker logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Mock Service Worker&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Mock Service Worker (MSW) is an API mocking library for browser and Node.js.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/msw&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/msw.svg?style=for-the-badge&amp;amp;label=Latest&amp;amp;color=black&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/mswjs/msw&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/circleci/project/github/mswjs/msw/master.svg?style=for-the-badge&amp;amp;color=black&#34; alt=&#34;Build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/msw&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/msw?style=for-the-badge&amp;amp;color=black&#34; alt=&#34;Downloads per month&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kcd.im/discord&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-online-green?style=for-the-badge&amp;amp;color=black&#34; alt=&#34;Discord server&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Seamless&lt;/strong&gt;. A dedicated layer of requests interception at your disposal. Keep your application&#39;s code and tests unaware of whether something is mocked or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deviation-free&lt;/strong&gt;. Request the same production resources and test the actual behavior of your app. Augment an existing API, or design it as you go, when there is none.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Familiar &amp;amp; Powerful&lt;/strong&gt;. Use &lt;a href=&#34;https://github.com/expressjs/express&#34;&gt;Express&lt;/a&gt;-like routing syntax to capture outgoing requests. Use parameters, wildcards, and regular expressions to match requests, and respond with necessary status codes, headers, cookies, delays, or completely custom resolvers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;&lt;em&gt;I found MSW and was thrilled that not only could I still see the mocked responses in my DevTools, but that the mocks didn&#39;t have to be written in a Service Worker and could instead live alongside the rest of my app. This made it silly easy to adopt. The fact that I can use it for testing as well makes MSW a huge productivity booster.&lt;/em&gt;&#34;&lt;/p&gt; &#xA; &lt;p&gt;– &lt;a href=&#34;https://twitter.com/kentcdodds&#34;&gt;Kent C. Dodds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/getting-started/install&#34;&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/recipes&#34;&gt;Recipes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the list of &lt;a href=&#34;https://github.com/mswjs/examples&#34;&gt;&lt;strong&gt;Usage examples&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Browser&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/getting-started/integrate/browser&#34;&gt;Learn more about using MSW in a browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/api/setup-worker&#34;&gt;&lt;code&gt;setupWorker&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Browser usage is what sets Mock Service Worker apart from other tools. Utilizing the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&#34;&gt;Service Worker API&lt;/a&gt;, which can intercept requests for the purpose of caching, Mock Service Worker responds to captured requests with your mock definition on the network level. This way your application knows nothing about the mocking.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Watch a 30 seconds explanation on how Mock Service Worker works in a browser:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/HcQCqboatZk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/msw-video-thumbnail.jpg&#34; alt=&#34;What is Mock Service Worker?&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How is it different?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intercepts requests on the network level, not the application level.&lt;/li&gt; &#xA; &lt;li&gt;If you think of your application as a box, Mock Service Worker lives in its own box next to yours, instead of opening and altering it for the purpose of mocking.&lt;/li&gt; &#xA; &lt;li&gt;Agnostic of request-issuing libraries, so you can use it with &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;axios&lt;/code&gt;, &lt;code&gt;react-query&lt;/code&gt;, you-name-it.&lt;/li&gt; &#xA; &lt;li&gt;The same mock definition can be reused for unit, integration, E2E testing, and debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// src/mocks.js&#xA;// 1. Import mocking utils.&#xA;import { setupWorker, rest } from &#39;msw&#39;&#xA;&#xA;// 2. Define request handlers and response resolvers.&#xA;const worker = setupWorker(&#xA;  rest.get(&#39;https://github.com/octocat&#39;, (req, res, ctx) =&amp;gt; {&#xA;    return res(&#xA;      ctx.delay(1500),&#xA;      ctx.status(202, &#39;Mocked status&#39;),&#xA;      ctx.json({&#xA;        message: &#39;Mocked response JSON body&#39;,&#xA;      }),&#xA;    )&#xA;  }),&#xA;)&#xA;&#xA;// 3. Start the Service Worker.&#xA;worker.start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;GET https://github.com/octocat&lt;/code&gt; request in your application will result into a mocked response that you can inspect in your browser&#39;s &#34;Network&#34; tab:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mswjs/msw/raw/main/media/msw-quick-look-network.png?raw=true&#34; alt=&#34;Chrome DevTools Network screenshot with the request mocked&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Did you know that although Service Worker runs in a separate thread, your mock definition executes on the client-side? That way you can use the same languages (i.e. TypeScript), third-party libraries, and internal logic in mocks.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Node&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/getting-started/integrate/node&#34;&gt;Learn more about using MSW in Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mswjs.io/docs/api/setup-server&#34;&gt;&lt;code&gt;setupServer&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Although Service Worker is a browser-specific API, this library allows reusing of the same mock definition to have API mocking in Node.js through augmenting native request issuing modules.&lt;/p&gt; &#xA;&lt;h3&gt;How is it different?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prevents from stubbing &lt;code&gt;fetch&lt;/code&gt;/&lt;code&gt;axios&lt;/code&gt;/etc. as a part of your test, allowing you to treat API mocking as a pre-requisite and focus on what actually matters during testing.&lt;/li&gt; &#xA; &lt;li&gt;The same mock definition you use for local development can be reused for testing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage example&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s an example of an actual integration test in Jest that uses &lt;a href=&#34;https://github.com/testing-library/react-testing-library&#34;&gt;React Testing Library&lt;/a&gt; and Mock Service Worker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// test/LoginForm.test.js&#xA;import &#39;@testing-library/jest-dom&#39;&#xA;import React from &#39;react&#39;&#xA;import { rest } from &#39;msw&#39;&#xA;import { setupServer } from &#39;msw/node&#39;&#xA;import { render, screen } from &#39;@testing-library/react&#39;&#xA;import userEvent from &#39;@testing-library/user-event&#39;&#xA;import Login from &#39;../src/components/Login&#39;&#xA;&#xA;const server = setupServer(&#xA;  rest.post(&#39;/login&#39;, (req, res, ctx) =&amp;gt; {&#xA;    // Respond with a mocked user token that gets persisted&#xA;    // in the `sessionStorage` by the `Login` component.&#xA;    return res(ctx.json({ token: &#39;mocked_user_token&#39; }))&#xA;  }),&#xA;)&#xA;&#xA;// Enable API mocking before tests.&#xA;beforeAll(() =&amp;gt; server.listen())&#xA;&#xA;// Reset any runtime request handlers we may add during the tests.&#xA;afterEach(() =&amp;gt; server.resetHandlers())&#xA;&#xA;// Disable API mocking after the tests are done.&#xA;afterAll(() =&amp;gt; server.close())&#xA;&#xA;test(&#39;allows the user to log in&#39;, async () =&amp;gt; {&#xA;  render(&amp;lt;Login /&amp;gt;)&#xA;  userEvent.type(&#xA;    screen.getByRole(&#39;textbox&#39;, { name: /username/i }),&#xA;    &#39;john.maverick&#39;,&#xA;  )&#xA;  userEvent.type(&#xA;    screen.getByRole(&#39;textbox&#39;, { name: /password/i }),&#xA;    &#39;super-secret&#39;,&#xA;  )&#xA;  userEvent.click(screen.getByText(/submit/i))&#xA;  const alert = await screen.findByRole(&#39;alert&#39;)&#xA;&#xA;  // Assert successful login state&#xA;  expect(alert).toHaveTextContent(/welcome/i)&#xA;  expect(window.sessionStorage.getItem(&#39;token&#39;)).toEqual(fakeUserResponse.token)&#xA;})&#xA;&#xA;test(&#39;handles login exception&#39;, () =&amp;gt; {&#xA;  server.use(&#xA;    rest.post(&#39;/login&#39;, (req, res, ctx) =&amp;gt; {&#xA;      // Respond with &#34;500 Internal Server Error&#34; status for this test.&#xA;      return res(&#xA;        ctx.status(500),&#xA;        ctx.json({ message: &#39;Internal Server Error&#39; }),&#xA;      )&#xA;    }),&#xA;  )&#xA;&#xA;  render(&amp;lt;Login /&amp;gt;)&#xA;  userEvent.type(&#xA;    screen.getByRole(&#39;textbox&#39;, { name: /username/i }),&#xA;    &#39;john.maverick&#39;,&#xA;  )&#xA;  userEvent.type(&#xA;    screen.getByRole(&#39;textbox&#39;, { name: /password/i }),&#xA;    &#39;super-secret&#39;,&#xA;  )&#xA;  userEvent.click(screen.getByText(/submit/i))&#xA;&#xA;  // Assert meaningful error message shown to the user&#xA;  expect(alert).toHaveTextContent(/sorry, something went wrong/i)&#xA;  expect(window.sessionStorage.getItem(&#39;token&#39;)).toBeNull()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Did you know that although the API is called &lt;code&gt;setupServer&lt;/code&gt;, there are no actual servers involved? The name is chosen for familiarity, and the API is designed to resemble operating with an actual server.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;h3&gt;Golden Sponsors&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become our first golden sponsor and get featured right here, enjoying other perks like issue prioritization and a personal consulting session with us.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Learn more on our &lt;a href=&#34;https://github.com/sponsors/mswjs&#34;&gt;GitHub Sponsors profile&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Silver Sponsors&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become our &lt;em&gt;silver sponsor&lt;/em&gt; and get your profile image and link featured right here.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Learn more on our &lt;a href=&#34;https://github.com/sponsors/mswjs&#34;&gt;GitHub Sponsors profile&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://www.chromatic.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/sponsors/chromatic.svg#1&#34; alt=&#34;Chromatic&#34; width=&#34;75&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Bronze Sponsors&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become our first &lt;em&gt;bronze sponsor&lt;/em&gt; and get your profile image and link featured in this section.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Learn more on our &lt;a href=&#34;https://github.com/sponsors/mswjs&#34;&gt;GitHub Sponsors profile&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Awards &amp;amp; Mentions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr valign=&#34;middle&#34;&gt; &#xA;   &lt;td width=&#34;124&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/tech-radar.png&#34; width=&#34;124&#34; alt=&#34;Technology Radar&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;h4&gt;Solution Worth Pursuing&lt;/h4&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.thoughtworks.com/radar/languages-and-frameworks/mock-service-worker&#34;&gt;Technology Radar&lt;/a&gt; (2020–2021)&lt;/em&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;124&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mswjs/msw/main/media/os-awards.png&#34; width=&#34;124&#34; alt=&#34;Open Source Awards 2020&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;h4&gt;The Most Exciting Use of Technology&lt;/h4&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://osawards.com/javascript/2020&#34;&gt;Open Source Awards&lt;/a&gt; (2020)&lt;/em&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>facebook/docusaurus</title>
    <updated>2022-06-04T02:27:51Z</updated>
    <id>tag:github.com,2022-06-04:/facebook/docusaurus</id>
    <link href="https://github.com/facebook/docusaurus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to maintain open source documentation websites.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;p align=&#34;center&#34;&gt;Docusaurus&lt;/p&gt; &lt;a href=&#34;https://docusaurus.io&#34;&gt;&lt;img src=&#34;https://docusaurus.io/img/slash-introducing.svg?sanitize=true&#34; alt=&#34;Docusaurus&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/docusaurus&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/docusaurus.svg?style=social&#34; align=&#34;right&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/#backers&#34; alt=&#34;sponsors on Open Collective&#34;&gt;&lt;img src=&#34;https://opencollective.com/Docusaurus/backers/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/#sponsors&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;img src=&#34;https://opencollective.com/Docusaurus/sponsors/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@docusaurus/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@docusaurus/core.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebook/docusaurus/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/facebook/docusaurus/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/CONTRIBUTING.md#pull-requests&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/docusaurus&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/102860784329052160.svg?sanitize=true&#34; align=&#34;right&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;&lt;img alt=&#34;code style: prettier&#34; src=&#34;https://img.shields.io/badge/code_style-prettier-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/sourcerer-io/hall-of-fame.svg?colorB=ff0000&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebook/jest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested_with-jest-99424f.svg?sanitize=true&#34; alt=&#34;Tested with Jest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/facebook/docusaurus&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.netlify.com/sites/docusaurus-2/deploys&#34;&gt;&lt;img src=&#34;https://api.netlify.com/api/v1/badges/9e1ff559-4405-4ebe-8718-5e21c0774bc8/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://meercode.io/facebook/docusaurus&#34;&gt;&lt;img src=&#34;https://meercode.io/badge/facebook/docusaurus?type=ci-score&#34; alt=&#34;CI Score&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Ffacebook%2Fdocusaurus%2Ftree%2Fmain%2Fexamples%2Fclassic&amp;amp;project-name=my-docusaurus-site&amp;amp;repo-name=my-docusaurus-site&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.netlify.com/start/deploy?repository=https://github.com/slorber/docusaurus-starter&#34;&gt;&lt;img src=&#34;https://www.netlify.com/img/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Netlify&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;We are working hard on Docusaurus v2. If you are new to Docusaurus, try using the new version instead of v1. See the &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus v2 website&lt;/a&gt; for more details.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Docusaurus v1 doc is available at &lt;a href=&#34;https://v1.docusaurus.io&#34;&gt;v1.docusaurus.io&lt;/a&gt; and code is available on branch &lt;a href=&#34;https://github.com/facebook/docusaurus/tree/docusaurus-v1&#34;&gt;docusaurus-v1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Docusaurus is a project for building, deploying, and maintaining open source project websites easily.&lt;/p&gt; &#xA;&lt;p&gt;Short on time? Check out our &lt;a href=&#34;https://tutorial.docusaurus.io&#34;&gt;5-minute tutorial ⏱️&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: use &lt;strong&gt;&lt;a href=&#34;https://docusaurus.new&#34;&gt;docusaurus.new&lt;/a&gt;&lt;/strong&gt; to test Docusaurus immediately in a playground.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple to Start&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Docusaurus is built in a way so that it can &lt;a href=&#34;https://docusaurus.io/docs/installation&#34;&gt;get running&lt;/a&gt; in as little time as possible. We&#39;ve built Docusaurus to handle the website build process so you can focus on your project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Localizable&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Docusaurus ships with &lt;a href=&#34;https://docusaurus.io/docs/i18n/introduction&#34;&gt;localization support&lt;/a&gt; via CrowdIn. Empower and grow your international community by translating your documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;While Docusaurus ships with the key pages and sections you need to get started, including a home page, a docs section, a &lt;a href=&#34;https://docusaurus.io/docs/blog&#34;&gt;blog&lt;/a&gt;, and additional support pages, it is also &lt;a href=&#34;https://docusaurus.io/docs/creating-pages&#34;&gt;customizable&lt;/a&gt; as well to ensure you have a site that is &lt;a href=&#34;https://docusaurus.io/docs/styling-layout&#34;&gt;uniquely yours&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use the initialization CLI to create your site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm init docusaurus@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docusaurus.io/docs/installation&#34;&gt;Read the docs&lt;/a&gt; for any further information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve released Docusaurus because it helps us better scale and supports the many OSS projects at Facebook. We hope that other organizations can benefit from the project. We are thankful for any contributions from the community.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://code.fb.com/codeofconduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read &lt;a href=&#34;https://code.fb.com/codeofconduct&#34;&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing guide&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://github.com/facebook/docusaurus/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Docusaurus.&lt;/p&gt; &#xA;&lt;h3&gt;Beginner-friendly bugs&lt;/h3&gt; &#xA;&lt;p&gt;To help you get your feet wet and get you familiar with our contribution process, we have a list of &lt;a href=&#34;https://github.com/facebook/docusaurus/labels/good%20first%20issue&#34;&gt;beginner-friendly bugs&lt;/a&gt; that might contain smaller issues to tackle first. This is a great place to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;We have a few channels for contact:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/docusaurus&#34;&gt;Discord&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;#general&lt;/code&gt; for those using Docusaurus.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;#contributors&lt;/code&gt; for those wanting to contribute to the Docusaurus core.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/docusaurus&#34;&gt;@docusaurus&lt;/a&gt; on Twitter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/docusaurus/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/facebook/docusaurus/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/Docusaurus/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 &lt;a href=&#34;https://opencollective.com/Docusaurus#backer&#34;&gt;Become a backer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/Docusaurus#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Docusaurus/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. &lt;a href=&#34;https://opencollective.com/Docusaurus#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/Docusaurus/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Docusaurus/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/Docusaurus/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/Docusaurus/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Docusaurus is &lt;a href=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Docusaurus documentation (e.g., &lt;code&gt;.md&lt;/code&gt; files in the &lt;code&gt;/docs&lt;/code&gt; folder) is &lt;a href=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/LICENSE-docs&#34;&gt;Creative Commons licensed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.browserstack.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/admin/img/browserstack-logo.png&#34; alt=&#34;BrowserStack logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.browserstack.com/&#34;&gt;BrowserStack&lt;/a&gt; supports us with &lt;a href=&#34;https://www.browserstack.com/open-source&#34;&gt;free access for open source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rocketvalidator.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/docusaurus/main/admin/img/rocketvalidator-logo.png&#34; alt=&#34;Rocket Validator logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rocketvalidator.com/&#34;&gt;Rocket Validator&lt;/a&gt; helps us find HTML markup or accessibility issues.&lt;/p&gt;</summary>
  </entry>
</feed>