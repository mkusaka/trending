<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-21T03:37:18Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>recharts/recharts</title>
    <updated>2024-04-21T03:37:18Z</updated>
    <id>tag:github.com,2024-04-21:/recharts/recharts</id>
    <link href="https://github.com/recharts/recharts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Redefined chart library built with React and D3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Recharts&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://release--63da8268a0da9970db6992aa.chromatic.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/storybooks/brand/master/badge/badge-storybook.svg?sanitize=true&#34; alt=&#34;storybook&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/recharts/recharts/actions&#34;&gt;&lt;img src=&#34;https://github.com/recharts/recharts/workflows/Node.js%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/recharts/recharts&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/recharts/recharts/graph/badge.svg?token=Bn6L2hrl8T&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/js/recharts&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/recharts.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/recharts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/recharts.svg?style=flat-square&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/recharts/recharts/3.x/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Recharts is a &lt;strong&gt;Redefined&lt;/strong&gt; chart library built with &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;http://d3js.org&#34;&gt;D3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main purpose of this library is to help you to write charts in React applications without any pain. Main principles of Recharts are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simply&lt;/strong&gt; deploy with React components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native&lt;/strong&gt; SVG support, lightweight depending only on some D3 submodules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative&lt;/strong&gt; components, components of charts are purely presentational.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Documentation at &lt;a href=&#34;https://recharts.org&#34;&gt;recharts.org&lt;/a&gt; and our &lt;a href=&#34;https://release--63da8268a0da9970db6992aa.chromatic.com/&#34;&gt;storybook (WIP)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/recharts/recharts/wiki&#34;&gt;the wiki&lt;/a&gt; for FAQ.&lt;/p&gt; &#xA;&lt;p&gt;All development is done on the &lt;code&gt;master&lt;/code&gt; branch. The current latest release and storybook documentation reflects what is on the &lt;code&gt;release&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;LineChart width={400} height={400} data={data} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}&amp;gt;&#xA;  &amp;lt;XAxis dataKey=&#34;name&#34; /&amp;gt;&#xA;  &amp;lt;Tooltip /&amp;gt;&#xA;  &amp;lt;CartesianGrid stroke=&#34;#f5f5f5&#34; /&amp;gt;&#xA;  &amp;lt;Line type=&#34;monotone&#34; dataKey=&#34;uv&#34; stroke=&#34;#ff7300&#34; yAxisId={0} /&amp;gt;&#xA;  &amp;lt;Line type=&#34;monotone&#34; dataKey=&#34;pv&#34; stroke=&#34;#387908&#34; yAxisId={1} /&amp;gt;&#xA;&amp;lt;/LineChart&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the components of Recharts are clearly separated. The lineChart is composed of x axis, tooltip, grid, and line items, and each of them is an independent React Component. The clear separation and composition of components is one of the principle Recharts follows.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;p&gt;NPM is the easiest and fastest way to get started using Recharts. It is also the recommended installation method when building single-page applications (SPAs). It pairs nicely with a CommonJS module bundler such as Webpack.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# latest stable&#xA;$ npm install recharts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;umd&lt;/h3&gt; &#xA;&lt;p&gt;The UMD build is also available on unpkg.com:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/react/umd/react.production.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;https://unpkg.com/react-dom/umd/react-dom.production.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;https://unpkg.com/recharts/umd/Recharts.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can find the library on &lt;code&gt;window.Recharts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;dev build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/recharts/recharts.git&#xA;$ cd recharts&#xA;$ npm install&#xA;$ npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;To examine the demos in your local build, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm run[-script] demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then browse to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Storybook&lt;/h2&gt; &#xA;&lt;p&gt;We are in the process of unifying documentation and examples in storybook. To run it locally, execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm run[-script] storybook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then browse to &lt;a href=&#34;http://localhost:6006&#34;&gt;http://localhost:6006&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/recharts/recharts/releases&#34;&gt;Releases&lt;/a&gt; are automated via GH Actions - when a new release is created in GH, CI will trigger that:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Runs a build&lt;/li&gt; &#xA; &lt;li&gt;Runs tests&lt;/li&gt; &#xA; &lt;li&gt;Runs &lt;code&gt;npm publish&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Version increments and tagging are not automated at this time.&lt;/p&gt; &#xA;&lt;h3&gt;Release testing&lt;/h3&gt; &#xA;&lt;p&gt;Until we can automate more, it should be preferred to test as close to the results of &lt;code&gt;npm publish&lt;/code&gt; as we possibly can. This ensures we don&#39;t publish unintended breaking changes. One way to do that is using &lt;code&gt;yalc&lt;/code&gt; - &lt;code&gt;npm i -g yalc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make your changes in recharts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yalc publish&lt;/code&gt; in recharts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yalc add recharts&lt;/code&gt; in your test package (ex: in a vite or webpack reach app with recharts installed, imported, and your recent changes used)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test a local run, a build, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Module Formats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/recharts/babel-plugin-recharts&#34;&gt;babel-plugin-recharts&lt;/a&gt; A simple transform to cherry-pick Recharts modules so you don’t have to. &lt;strong&gt;Note: this plugin is out of date and may not work with 2.x&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.chromatic.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/321738/84662277-e3db4f80-af1b-11ea-88f5-91d67a5e59f6.png&#34; width=&#34;153&#34; height=&#34;30&#34; alt=&#34;Chromatic&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.chromatic.com/&#34;&gt;Chromatic&lt;/a&gt; for providing the visual testing platform that helps us review UI changes and catch visual regressions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2015-2023 Recharts Group.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eknkc/ssr-benchmark</title>
    <updated>2024-04-21T03:37:18Z</updated>
    <id>tag:github.com,2024-04-21:/eknkc/ssr-benchmark</id>
    <link href="https://github.com/eknkc/ssr-benchmark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Benchmarking JS web framework SSR performance&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SSR Framework Benchmark&lt;/h1&gt; &#xA;&lt;p&gt;This is an experiment in response to &lt;a href=&#34;https://twitter.com/thdxr/status/1777782835249553517&#34;&gt;https://twitter.com/thdxr/status/1777782835249553517&lt;/a&gt; where it is stated that Next.JS is a lot slower on server side rendering compared to Vanilla React.&lt;/p&gt; &#xA;&lt;p&gt;This is not a comprehensive or scientific test. Just wanted to compare each in a setup a little complex than just printing &lt;code&gt;hello world&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;(index)&lt;/th&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;ops/sec&lt;/th&gt; &#xA;   &lt;th&gt;average (ms)&lt;/th&gt; &#xA;   &lt;th&gt;samples&lt;/th&gt; &#xA;   &lt;th&gt;body (kb)&lt;/th&gt; &#xA;   &lt;th&gt;duplication&lt;/th&gt; &#xA;   &lt;th&gt;relative to react&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&#39;react&#39;&lt;/td&gt; &#xA;   &lt;td&gt;766&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.305&#39;&lt;/td&gt; &#xA;   &lt;td&gt;7663&lt;/td&gt; &#xA;   &lt;td&gt;&#39;97.28&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&#39;sveltekit&#39;&lt;/td&gt; &#xA;   &lt;td&gt;589&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.696&#39;&lt;/td&gt; &#xA;   &lt;td&gt;5898&lt;/td&gt; &#xA;   &lt;td&gt;&#39;184.46&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x2.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.30 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&#39;remix&#39;&lt;/td&gt; &#xA;   &lt;td&gt;449&lt;/td&gt; &#xA;   &lt;td&gt;&#39;2.224&#39;&lt;/td&gt; &#xA;   &lt;td&gt;4497&lt;/td&gt; &#xA;   &lt;td&gt;&#39;189.10&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x2.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.71 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&#39;nuxt&#39;&lt;/td&gt; &#xA;   &lt;td&gt;381&lt;/td&gt; &#xA;   &lt;td&gt;&#39;2.622&#39;&lt;/td&gt; &#xA;   &lt;td&gt;3814&lt;/td&gt; &#xA;   &lt;td&gt;&#39;201.12&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x2.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;2.01 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&#39;qwik-city&#39;&lt;/td&gt; &#xA;   &lt;td&gt;278&lt;/td&gt; &#xA;   &lt;td&gt;&#39;3.584&#39;&lt;/td&gt; &#xA;   &lt;td&gt;2790&lt;/td&gt; &#xA;   &lt;td&gt;&#39;139.21&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;2.76 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&#39;next-pages&#39;&lt;/td&gt; &#xA;   &lt;td&gt;104&lt;/td&gt; &#xA;   &lt;td&gt;&#39;9.590&#39;&lt;/td&gt; &#xA;   &lt;td&gt;1043&lt;/td&gt; &#xA;   &lt;td&gt;&#39;187.67&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x2.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;7.37 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&#39;astro&#39;&lt;/td&gt; &#xA;   &lt;td&gt;99&lt;/td&gt; &#xA;   &lt;td&gt;&#39;10.077&#39;&lt;/td&gt; &#xA;   &lt;td&gt;993&lt;/td&gt; &#xA;   &lt;td&gt;&#39;99.91&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;7.74 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&#39;mfng&#39;&lt;/td&gt; &#xA;   &lt;td&gt;69&lt;/td&gt; &#xA;   &lt;td&gt;&#39;14.372&#39;&lt;/td&gt; &#xA;   &lt;td&gt;696&lt;/td&gt; &#xA;   &lt;td&gt;&#39;317.31&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x2.50&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;11.10 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&#39;next&#39;&lt;/td&gt; &#xA;   &lt;td&gt;53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;18.673&#39;&lt;/td&gt; &#xA;   &lt;td&gt;536&lt;/td&gt; &#xA;   &lt;td&gt;&#39;284.64&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x2.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;14.45 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;react&lt;/strong&gt; is here only as a baseline renderer to compare framework performance with.&lt;/li&gt; &#xA; &lt;li&gt;⚠️ &lt;strong&gt;duplication&lt;/strong&gt; is the data duplication factor. 2x means each rendered data item has been observed twice in the response. It is required for hydration to work. For those it is 1x, the hydration data is missing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Renderers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;(index)&lt;/th&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;ops/sec&lt;/th&gt; &#xA;   &lt;th&gt;average (ms)&lt;/th&gt; &#xA;   &lt;th&gt;samples&lt;/th&gt; &#xA;   &lt;th&gt;body (kb)&lt;/th&gt; &#xA;   &lt;th&gt;duplication&lt;/th&gt; &#xA;   &lt;th&gt;relative to marko&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&#39;marko&#39;&lt;/td&gt; &#xA;   &lt;td&gt;6675&lt;/td&gt; &#xA;   &lt;td&gt;&#39;0.150&#39;&lt;/td&gt; &#xA;   &lt;td&gt;66759&lt;/td&gt; &#xA;   &lt;td&gt;&#39;96.74&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&#39;kita&#39;&lt;/td&gt; &#xA;   &lt;td&gt;3074&lt;/td&gt; &#xA;   &lt;td&gt;&#39;0.325&#39;&lt;/td&gt; &#xA;   &lt;td&gt;30742&lt;/td&gt; &#xA;   &lt;td&gt;&#39;97.34&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;2.17 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&#39;hono&#39;&lt;/td&gt; &#xA;   &lt;td&gt;945&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.058&#39;&lt;/td&gt; &#xA;   &lt;td&gt;9452&lt;/td&gt; &#xA;   &lt;td&gt;&#39;97.15&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;7.06 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&#39;vue&#39;&lt;/td&gt; &#xA;   &lt;td&gt;897&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.114&#39;&lt;/td&gt; &#xA;   &lt;td&gt;8977&lt;/td&gt; &#xA;   &lt;td&gt;&#39;96.72&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;7.44 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&#39;react&#39;&lt;/td&gt; &#xA;   &lt;td&gt;764&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.308&#39;&lt;/td&gt; &#xA;   &lt;td&gt;7649&lt;/td&gt; &#xA;   &lt;td&gt;&#39;97.28&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;8.74 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&#39;qwik&#39;&lt;/td&gt; &#xA;   &lt;td&gt;622&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.605&#39;&lt;/td&gt; &#xA;   &lt;td&gt;6230&lt;/td&gt; &#xA;   &lt;td&gt;&#39;137.88&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x1.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;10.73 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&#39;solid&#39;&lt;/td&gt; &#xA;   &lt;td&gt;613&lt;/td&gt; &#xA;   &lt;td&gt;&#39;1.630&#39;&lt;/td&gt; &#xA;   &lt;td&gt;6137&lt;/td&gt; &#xA;   &lt;td&gt;&#39;215.93&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;x2.00&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;10.89 x slower&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;solid&lt;/strong&gt; is here but it also carries hydration data for client side hydration, it is more comparable to frameworks in that way.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;body&lt;/strong&gt; is the response body length in kb&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Table has been updated thanks to &lt;a href=&#34;https://github.com/kiliman&#34;&gt;kiliman&lt;/a&gt;. Remix now uses &lt;a href=&#34;https://remix.run/docs/en/main/utils/defer&#34;&gt;defer&lt;/a&gt; yielding much better results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;mfng&lt;/strong&gt; is a minimal RSC implementation. Important to see its results compared to Next as they both reflect the RSC rendering performance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test Environment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only SSR. We do not even build the client bundles for most of the modules.&lt;/li&gt; &#xA; &lt;li&gt;Next.JS route cache is disabled using &lt;code&gt;const dynamic = &#39;force-dynamic&#39;&lt;/code&gt;. (Otherwise we would be benchmarking a static http server because there is no dynamic code like accessing cookies.)&lt;/li&gt; &#xA; &lt;li&gt;Instead of going through the http server, the benchmark code creates mock http requests and responses. This ensures that we do not pay for tcp overhead.&lt;/li&gt; &#xA; &lt;li&gt;Tests ran on Node.JS &lt;code&gt;v20.6.1&lt;/code&gt; on my Macbook Pro M1 Pro&lt;/li&gt; &#xA; &lt;li&gt;Each framework renders a table of 1000 rows, each containing two uuid columns.&lt;/li&gt; &#xA; &lt;li&gt;The table data is emulated as async and requires Suspense on react, solid and vue. On Next it is loaded in an async RSC component. On Remix it is loaded in a route &lt;code&gt;loader&lt;/code&gt; function.&lt;/li&gt; &#xA; &lt;li&gt;Streaming rendering used on solid, react and vue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install&#xA;$ npm run build&#xA;$ npm start&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>miurla/morphic</title>
    <updated>2024-04-21T03:37:18Z</updated>
    <id>tag:github.com,2024-04-21:/miurla/morphic</id>
    <link href="https://github.com/miurla/morphic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI-powered answer engine with a generative UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Morphic&lt;/h1&gt; &#xA;&lt;p&gt;An AI-powered answer engine with a generative UI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/miurla/morphic/main/public/capture-240404_blk.png&#34; alt=&#34;capture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔍 Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🧱 &lt;a href=&#34;https://raw.githubusercontent.com/miurla/morphic/main/#-stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://raw.githubusercontent.com/miurla/morphic/main/#-quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🌐 &lt;a href=&#34;https://raw.githubusercontent.com/miurla/morphic/main/#-deploy&#34;&gt;Deploy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;a href=&#34;https://raw.githubusercontent.com/miurla/morphic/main/#-vertified-models&#34;&gt;Verified models&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🧱 Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;App framework: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Text streaming / Generative UI: &lt;a href=&#34;https://sdk.vercel.ai/docs&#34;&gt;Vercel AI SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generative Model: &lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search API: &lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Component library: &lt;a href=&#34;https://ui.shadcn.com/&#34;&gt;shadcn/ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Headless component primitives: &lt;a href=&#34;https://www.radix-ui.com/&#34;&gt;Radix UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Styling: &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;1. Fork and Clone repo&lt;/h3&gt; &#xA;&lt;p&gt;Fork the repo to your Github account, then run the following command to clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:[YOUR_GITHUB_ACCOUNT]/morphic.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd morphic&#xA;bun i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Fill out secrets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.local.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your .env.local file should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Used to set the base URL path for OpenAI API requests.&#xA;# If you need to set a BASE URL, uncomment and set the following:&#xA;# OPENAI_API_BASE=&#xA;&#xA;# Used to set the model for OpenAI API requests.&#xA;# If not set, the default is gpt-4-turbo.&#xA;# OPENAI_API_MODEL=&#39;gpt-4-turbo&#39;&#xA;&#xA;# OpenAI API key retrieved here: https://platform.openai.com/api-keys&#xA;OPENAI_API_KEY=[YOUR_OPENAI_API_KEY]&#xA;&#xA;# Tavily API Key retrieved here: https://app.tavily.com/home&#xA;TAVILY_API_KEY=[YOUR_TAVILY_API_KEY]&#xA;&#xA;# Only writers can set a specific model. It must be compatible with the OpenAI API.&#xA;# USE_SPECIFIC_API_FOR_WRITER=true&#xA;# SPECIFIC_API_BASE=&#xA;# SPECIFIC_API_KEY=&#xA;# SPECIFIC_API_MODEL=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**Note: This project focuses on Generative UI and requires complex output from LLMs. Currently, it&#39;s assumed that the official OpenAI models will be used. Although it&#39;s possible to set up other models, if you use an OpenAI-compatible model, but we don&#39;t guarantee that it&#39;ll work. **&lt;/p&gt; &#xA;&lt;h3&gt;4. Run app locally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;bun dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now visit &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🌐 Deploy&lt;/h2&gt; &#xA;&lt;p&gt;Host your own live version of Morphic with Vercel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fmiurla%2Fmorphic&amp;amp;env=OPENAI_API_KEY,TAVILY_API_KEY&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✅ Verified models&lt;/h2&gt; &#xA;&lt;p&gt;List of verified models that can be specified to writers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;Groq&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LLaMA3 8b&lt;/li&gt; &#xA;   &lt;li&gt;LLaMA3 70b&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>