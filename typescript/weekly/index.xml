<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:50:38Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>codestoryai/aide</title>
    <updated>2024-12-01T01:50:38Z</updated>
    <id>tag:github.com,2024-12-01:/codestoryai/aide</id>
    <link href="https://github.com/codestoryai/aide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The open-source AI-native IDE&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;vscodium-logo&#34; align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/codestoryai/aide/cs-main/media/logo.svg?sanitize=true&#34; alt=&#34;VSCodium Logo&#34; width=&#34;200&#34;&gt; &#xA; &lt;h1&gt;Aide&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Aide is the Open Source AI-native code editor. It is a fork of VS Code, and integrates tightly with &lt;a href=&#34;https://github.com/codestoryai/sidecar&#34;&gt;the leading agentic framework&lt;/a&gt; on swebench-lite.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/codestoryai/binaries?label=version&#34; alt=&#34;Latest release&#34;&gt; &lt;img src=&#34;https://discord.com/api/guilds/1138070673756004464/widget.png?style=shield&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/codestoryai/aide/cs-main/media/hero_video.gif&#34; alt=&#34;Aide in action&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Aide combines the powerful features of VS Code with advanced AI capabilities to provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A combined chat + edit flow&lt;/strong&gt; - Brainstorm a problem in chat by referencing files and jump into edits (which can happen across multiple files).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proactive agents&lt;/strong&gt; - AI iterates on linter errors (provided by the Language Server) and pulls in relevant context using go-to-definitions, go-to-references, etc to propose fixes or ask for more context from you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inline editing widget&lt;/strong&gt; - Similar to the macos spotlight widget, press Ctrl/Cmd+K at any point to give instructions to AI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intelligent Code Completion&lt;/strong&gt; - Context-aware code suggestions powered by state-of-the-art AI models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AST navigation&lt;/strong&gt; - Quickly navigate files in blocks rather than line-by-line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Aide is designed to be your intelligent coding companion, helping you write better code faster while maintaining full control over your development process.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways in which you can participate in this project, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/issues&#34;&gt;Submit bugs and feature requests&lt;/a&gt;, and help us verify as they are checked in&lt;/li&gt; &#xA; &lt;li&gt;Review &lt;a href=&#34;https://github.com/codestoryai/aide/pulls&#34;&gt;source code changes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are interested in fixing issues and contributing directly to the code base, please see the document &lt;strong&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/raw/cs-main/HOW_TO_CONTRIBUTE.md&#34;&gt;How to Contribute&lt;/a&gt;&lt;/strong&gt;, which covers the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/raw/cs-main/HOW_TO_CONTRIBUTE.md&#34;&gt;How to build and run from source&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/raw/cs-main/HOW_TO_CONTRIBUTE.md#debugging&#34;&gt;The development workflow, including debugging and running tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/wiki/Coding-Guidelines&#34;&gt;Coding guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/raw/cs-main/HOW_TO_CONTRIBUTE.md#pull-requests&#34;&gt;Submitting pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/raw/cs-main/HOW_TO_CONTRIBUTE.md#where-to-contribute&#34;&gt;Finding an issue to work on&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codestoryai/aide/issues&#34;&gt;File an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codestoryai/aide/cs-main/CONTRIBUTING.md&#34;&gt;Request a new feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upvote &lt;a href=&#34;https://github.com/codestoryai/aide/issues?q=is%3Aopen+is%3Aissue+label%3Afeature-request+sort%3Areactions-%2B1-desc&#34;&gt;popular feature requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join our community: &lt;a href=&#34;https://discord.gg/mtgrhXM5Xf&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://raw.githubusercontent.com/codestoryai/aide/cs-main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;. Please read the Code of Conduct before contributing to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We would like to acknowledge &lt;a href=&#34;https://github.com/sourcegraph/cody&#34;&gt;Cody&lt;/a&gt; for Open Sourcing and creating the inline completion bit. This is one of those parts of the codebase where we borrowed heavily from Cody&#39;s work and we are grateful for that. We added our own necessities on top of this to make it work with the &lt;code&gt;sidecar&lt;/code&gt;. This part of the codebase is no longer maintained, we have since moved forward our focus to working on agentic workflows and if you want to revamp this part, please let us know! We believe inline completion UX is ripe for innovation and there are many directions we can take this.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2024 CodeStory AI. All rights reserved. Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/codestoryai/aide/cs-main/LICENSE.md&#34;&gt;GNU Affero General Public License v3.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>remix-run/react-router</title>
    <updated>2024-12-01T01:50:38Z</updated>
    <id>tag:github.com,2024-12-01:/remix-run/react-router</id>
    <link href="https://github.com/remix-run/react-router" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Declarative routing for React&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/react-router-dom&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-router-dom.svg?style=flat-square&#34; alt=&#34;npm package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/remix-run/react-router/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/remix-run/react-router/test.yml?branch=dev&amp;amp;style=square&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;React Router is a multi-strategy router for React bridging the gap from React 18 to React 19. You can use it maximally as a React framework or minimally as a library with your own architecture.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactrouter.com/start/framework/installation&#34;&gt;Getting Started - Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactrouter.com/start/library/installation&#34;&gt;Getting Started - Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactrouter.com/upgrading/v6&#34;&gt;Upgrade from v6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactrouter.com/upgrading/remix&#34;&gt;Upgrade from Remix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remix-run/react-router/raw/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remix-run/react-router/main/packages/react-router&#34;&gt;&lt;code&gt;react-router&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remix-run/react-router/main/packages/react-router-dev&#34;&gt;&lt;code&gt;@react-router/dev&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remix-run/react-router/main/packages/react-router-node&#34;&gt;&lt;code&gt;@react-router/node&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remix-run/react-router/main/packages/react-router-cloudflare&#34;&gt;&lt;code&gt;@react-router/cloudflare&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remix-run/react-router/main/packages/react-router-serve&#34;&gt;&lt;code&gt;@react-router/serve&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remix-run/react-router/main/packages/react-router-fs-routes&#34;&gt;&lt;code&gt;@react-router/fs-routes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Previous Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactrouter.com/v6&#34;&gt;v6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v5.reactrouter.com/&#34;&gt;v5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rckprtr/pumpdotfun-sdk</title>
    <updated>2024-12-01T01:50:38Z</updated>
    <id>tag:github.com,2024-12-01:/rckprtr/pumpdotfun-sdk</id>
    <link href="https://github.com/rckprtr/pumpdotfun-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PumpDotFun SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PumpFunSDK README&lt;/h1&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;Never click links in this repository leaving github, never click links in Issues, don&#39;t run code that others post without reading it, this software is provided &#34;as is,&#34; without warranty.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;PumpDotFunSDK&lt;/code&gt; is designed to interact with the Pump.fun decentralized application. It provides methods for creating, buying, and selling tokens using the Solana blockchain. The SDK handles the necessary transactions and interactions with the Pump.fun program.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;npm i pumpdotfun-sdk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage Example&lt;/h2&gt; &#xA;&lt;p&gt;First you need to create a &lt;code&gt;.env&lt;/code&gt; file and set your RPC URL like in the &lt;code&gt;.env.example&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you need to fund an account with atleast 0.004 SOL that is generated when running the command below&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;npx ts-node example/basic/index.ts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import dotenv from &#34;dotenv&#34;;&#xA;import { Connection, Keypair, LAMPORTS_PER_SOL } from &#34;@solana/web3.js&#34;;&#xA;import { DEFAULT_DECIMALS, PumpFunSDK } from &#34;pumpdotfun-sdk&#34;;&#xA;import NodeWallet from &#34;@coral-xyz/anchor/dist/cjs/nodewallet&#34;;&#xA;import { AnchorProvider } from &#34;@coral-xyz/anchor&#34;;&#xA;import {&#xA;  getOrCreateKeypair,&#xA;  getSPLBalance,&#xA;  printSOLBalance,&#xA;  printSPLBalance,&#xA;} from &#34;./util&#34;;&#xA;&#xA;dotenv.config();&#xA;&#xA;const KEYS_FOLDER = __dirname + &#34;/.keys&#34;;&#xA;const SLIPPAGE_BASIS_POINTS = 100n;&#xA;&#xA;const getProvider = () =&amp;gt; {&#xA;  if (!process.env.HELIUS_RPC_URL) {&#xA;    throw new Error(&#34;Please set HELIUS_RPC_URL in .env file&#34;);&#xA;  }&#xA;&#xA;  const connection = new Connection(process.env.HELIUS_RPC_URL || &#34;&#34;);&#xA;  const wallet = new NodeWallet(new Keypair());&#xA;  return new AnchorProvider(connection, wallet, { commitment: &#34;finalized&#34; });&#xA;};&#xA;&#xA;const createAndBuyToken = async (sdk, testAccount, mint) =&amp;gt; {&#xA;  const tokenMetadata = {&#xA;    name: &#34;TST-7&#34;,&#xA;    symbol: &#34;TST-7&#34;,&#xA;    description: &#34;TST-7: This is a test token&#34;,&#xA;    filePath: &#34;example/basic/random.png&#34;,&#xA;  };&#xA;&#xA;  const createResults = await sdk.createAndBuy(&#xA;    testAccount,&#xA;    mint,&#xA;    tokenMetadata,&#xA;    BigInt(0.0001 * LAMPORTS_PER_SOL),&#xA;    SLIPPAGE_BASIS_POINTS,&#xA;    {&#xA;      unitLimit: 250000,&#xA;      unitPrice: 250000,&#xA;    }&#xA;  );&#xA;&#xA;  if (createResults.success) {&#xA;    console.log(&#34;Success:&#34;, `https://pump.fun/${mint.publicKey.toBase58()}`);&#xA;    printSPLBalance(sdk.connection, mint.publicKey, testAccount.publicKey);&#xA;  } else {&#xA;    console.log(&#34;Create and Buy failed&#34;);&#xA;  }&#xA;};&#xA;&#xA;const buyTokens = async (sdk, testAccount, mint) =&amp;gt; {&#xA;  const buyResults = await sdk.buy(&#xA;    testAccount,&#xA;    mint.publicKey,&#xA;    BigInt(0.0001 * LAMPORTS_PER_SOL),&#xA;    SLIPPAGE_BASIS_POINTS,&#xA;    {&#xA;      unitLimit: 250000,&#xA;      unitPrice: 250000,&#xA;    }&#xA;  );&#xA;&#xA;  if (buyResults.success) {&#xA;    printSPLBalance(sdk.connection, mint.publicKey, testAccount.publicKey);&#xA;    console.log(&#34;Bonding curve after buy&#34;, await sdk.getBondingCurveAccount(mint.publicKey));&#xA;  } else {&#xA;    console.log(&#34;Buy failed&#34;);&#xA;  }&#xA;};&#xA;&#xA;const sellTokens = async (sdk, testAccount, mint) =&amp;gt; {&#xA;  const currentSPLBalance = await getSPLBalance(&#xA;    sdk.connection,&#xA;    mint.publicKey,&#xA;    testAccount.publicKey&#xA;  );&#xA;  console.log(&#34;currentSPLBalance&#34;, currentSPLBalance);&#xA;&#xA;  if (currentSPLBalance) {&#xA;    const sellResults = await sdk.sell(&#xA;      testAccount,&#xA;      mint.publicKey,&#xA;      BigInt(currentSPLBalance * Math.pow(10, DEFAULT_DECIMALS)),&#xA;      SLIPPAGE_BASIS_POINTS,&#xA;      {&#xA;        unitLimit: 250000,&#xA;        unitPrice: 250000,&#xA;      }&#xA;    );&#xA;&#xA;    if (sellResults.success) {&#xA;      await printSOLBalance(sdk.connection, testAccount.publicKey, &#34;Test Account keypair&#34;);&#xA;      printSPLBalance(sdk.connection, mint.publicKey, testAccount.publicKey, &#34;After SPL sell all&#34;);&#xA;      console.log(&#34;Bonding curve after sell&#34;, await sdk.getBondingCurveAccount(mint.publicKey));&#xA;    } else {&#xA;      console.log(&#34;Sell failed&#34;);&#xA;    }&#xA;  }&#xA;};&#xA;&#xA;const main = async () =&amp;gt; {&#xA;  try {&#xA;    const provider = getProvider();&#xA;    const sdk = new PumpFunSDK(provider);&#xA;    const connection = provider.connection;&#xA;&#xA;    const testAccount = getOrCreateKeypair(KEYS_FOLDER, &#34;test-account&#34;);&#xA;    const mint = getOrCreateKeypair(KEYS_FOLDER, &#34;mint&#34;);&#xA;&#xA;    await printSOLBalance(connection, testAccount.publicKey, &#34;Test Account keypair&#34;);&#xA;&#xA;    const globalAccount = await sdk.getGlobalAccount();&#xA;    console.log(globalAccount);&#xA;&#xA;    const currentSolBalance = await connection.getBalance(testAccount.publicKey);&#xA;    if (currentSolBalance === 0) {&#xA;      console.log(&#34;Please send some SOL to the test-account:&#34;, testAccount.publicKey.toBase58());&#xA;      return;&#xA;    }&#xA;&#xA;    console.log(await sdk.getGlobalAccount());&#xA;&#xA;    let bondingCurveAccount = await sdk.getBondingCurveAccount(mint.publicKey);&#xA;    if (!bondingCurveAccount) {&#xA;      await createAndBuyToken(sdk, testAccount, mint);&#xA;      bondingCurveAccount = await sdk.getBondingCurveAccount(mint.publicKey);&#xA;    }&#xA;&#xA;    if (bondingCurveAccount) {&#xA;      await buyTokens(sdk, testAccount, mint);&#xA;      await sellTokens(sdk, testAccount, mint);&#xA;    }&#xA;  } catch (error) {&#xA;    console.error(&#34;An error occurred:&#34;, error);&#xA;  }&#xA;};&#xA;&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PumpDotFunSDK Class&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;PumpDotFunSDK&lt;/code&gt; class provides methods to interact with the PumpFun protocol. Below are the method signatures and their descriptions.&lt;/p&gt; &#xA;&lt;h4&gt;createAndBuy&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;async createAndBuy(&#xA;  creator: Keypair,&#xA;  mint: Keypair,&#xA;  createTokenMetadata: CreateTokenMetadata,&#xA;  buyAmountSol: bigint,&#xA;  slippageBasisPoints: bigint = 500n,&#xA;  priorityFees?: PriorityFee,&#xA;  commitment: Commitment = DEFAULT_COMMITMENT,&#xA;  finality: Finality = DEFAULT_FINALITY&#xA;): Promise&amp;lt;TransactionResult&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creates a new token and buys it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;creator&lt;/code&gt;: The keypair of the token creator.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mint&lt;/code&gt;: The keypair of the mint account.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createTokenMetadata&lt;/code&gt;: Metadata for the token.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buyAmountSol&lt;/code&gt;: Amount of SOL to buy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;slippageBasisPoints&lt;/code&gt;: Slippage in basis points (default: 500).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;priorityFees&lt;/code&gt;: Priority fees (optional).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;commitment&lt;/code&gt;: Commitment level (default: DEFAULT_COMMITMENT).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;finality&lt;/code&gt;: Finality level (default: DEFAULT_FINALITY).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Returns&lt;/strong&gt;: A promise that resolves to a &lt;code&gt;TransactionResult&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;buy&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;async buy(&#xA;  buyer: Keypair,&#xA;  mint: PublicKey,&#xA;  buyAmountSol: bigint,&#xA;  slippageBasisPoints: bigint = 500n,&#xA;  priorityFees?: PriorityFee,&#xA;  commitment: Commitment = DEFAULT_COMMITMENT,&#xA;  finality: Finality = DEFAULT_FINALITY&#xA;): Promise&amp;lt;TransactionResult&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Buys a specified amount of tokens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;buyer&lt;/code&gt;: The keypair of the buyer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mint&lt;/code&gt;: The public key of the mint account.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buyAmountSol&lt;/code&gt;: Amount of SOL to buy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;slippageBasisPoints&lt;/code&gt;: Slippage in basis points (default: 500).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;priorityFees&lt;/code&gt;: Priority fees (optional).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;commitment&lt;/code&gt;: Commitment level (default: DEFAULT_COMMITMENT).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;finality&lt;/code&gt;: Finality level (default: DEFAULT_FINALITY).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Returns&lt;/strong&gt;: A promise that resolves to a &lt;code&gt;TransactionResult&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;sell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;async sell(&#xA;  seller: Keypair,&#xA;  mint: PublicKey,&#xA;  sellTokenAmount: bigint,&#xA;  slippageBasisPoints: bigint = 500n,&#xA;  priorityFees?: PriorityFee,&#xA;  commitment: Commitment = DEFAULT_COMMITMENT,&#xA;  finality: Finality = DEFAULT_FINALITY&#xA;): Promise&amp;lt;TransactionResult&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sells a specified amount of tokens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;seller&lt;/code&gt;: The keypair of the seller.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mint&lt;/code&gt;: The public key of the mint account.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sellTokenAmount&lt;/code&gt;: Amount of tokens to sell.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;slippageBasisPoints&lt;/code&gt;: Slippage in basis points (default: 500).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;priorityFees&lt;/code&gt;: Priority fees (optional).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;commitment&lt;/code&gt;: Commitment level (default: DEFAULT_COMMITMENT).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;finality&lt;/code&gt;: Finality level (default: DEFAULT_FINALITY).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Returns&lt;/strong&gt;: A promise that resolves to a &lt;code&gt;TransactionResult&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;addEventListener&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;addEventListener&amp;lt;T extends PumpFunEventType&amp;gt;(&#xA;  eventType: T,&#xA;  callback: (event: PumpFunEventHandlers[T], slot: number, signature: string) =&amp;gt; void&#xA;): number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adds an event listener for the specified event type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;eventType&lt;/code&gt;: The type of event to listen for.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;callback&lt;/code&gt;: The callback function to execute when the event occurs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Returns&lt;/strong&gt;: An identifier for the event listener.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;removeEventListener&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;removeEventListener(eventId: number): void&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Removes the event listener with the specified identifier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;eventId&lt;/code&gt;: The identifier of the event listener to remove.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Basic Example&lt;/h4&gt; &#xA;&lt;p&gt;To run the basic example for creating, buying, and selling tokens, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx ts-node example/basic/index.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Event Subscription Example&lt;/h4&gt; &#xA;&lt;p&gt;This example demonstrates how to set up event subscriptions using the PumpFun SDK.&lt;/p&gt; &#xA;&lt;h4&gt;Script: &lt;code&gt;example/events/events.ts&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import dotenv from &#34;dotenv&#34;;&#xA;import { Connection, Keypair } from &#34;@solana/web3.js&#34;;&#xA;import { PumpFunSDK } from &#34;pumpdotfun-sdk&#34;;&#xA;import NodeWallet from &#34;@coral-xyz/anchor/dist/cjs/nodewallet&#34;;&#xA;import { AnchorProvider } from &#34;@coral-xyz/anchor&#34;;&#xA;&#xA;dotenv.config();&#xA;&#xA;const getProvider = () =&amp;gt; {&#xA;  if (!process.env.HELIUS_RPC_URL) {&#xA;    throw new Error(&#34;Please set HELIUS_RPC_URL in .env file&#34;);&#xA;  }&#xA;&#xA;  const connection = new Connection(process.env.HELIUS_RPC_URL || &#34;&#34;);&#xA;  const wallet = new NodeWallet(new Keypair());&#xA;  return new AnchorProvider(connection, wallet, { commitment: &#34;finalized&#34; });&#xA;};&#xA;&#xA;const setupEventListeners = async (sdk) =&amp;gt; {&#xA;  const createEventId = sdk.addEventListener(&#34;createEvent&#34;, (event, slot, signature) =&amp;gt; {&#xA;    console.log(&#34;createEvent&#34;, event, slot, signature);&#xA;  });&#xA;  console.log(&#34;Subscribed to createEvent with ID:&#34;, createEventId);&#xA;&#xA;  const tradeEventId = sdk.addEventListener(&#34;tradeEvent&#34;, (event, slot, signature) =&amp;gt; {&#xA;    console.log(&#34;tradeEvent&#34;, event, slot, signature);&#xA;  });&#xA;  console.log(&#34;Subscribed to tradeEvent with ID:&#34;, tradeEventId);&#xA;&#xA;  const completeEventId = sdk.addEventListener(&#34;completeEvent&#34;, (event, slot, signature) =&amp;gt; {&#xA;    console.log(&#34;completeEvent&#34;, event, slot, signature);&#xA;  });&#xA;  console.log(&#34;Subscribed to completeEvent with ID:&#34;, completeEventId);&#xA;};&#xA;&#xA;const main = async () =&amp;gt; {&#xA;  try {&#xA;    const provider = getProvider();&#xA;    const sdk = new PumpFunSDK(provider);&#xA;&#xA;    // Set up event listeners&#xA;    await setupEventListeners(sdk);&#xA;  } catch (error) {&#xA;    console.error(&#34;An error occurred:&#34;, error);&#xA;  }&#xA;};&#xA;&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Event Subscription Example&lt;/h4&gt; &#xA;&lt;p&gt;To run the event subscription example, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx ts-node example/events/events.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Please submit a pull request or open an issue to discuss any changes.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/rckprtr/pumpdotfun-sdk/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample &#34;Use at Your Own Risk&#34; disclaimer for a GitHub repository:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This software is provided &#34;as is,&#34; without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the software or the use or other dealings in the software.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use at your own risk.&lt;/strong&gt; The authors take no responsibility for any harm or damage caused by the use of this software. Users are responsible for ensuring the suitability and safety of this software for their specific use cases.&lt;/p&gt; &#xA;&lt;p&gt;By using this software, you acknowledge that you have read, understood, and agree to this disclaimer.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Feel free to customize it further to suit the specific context and requirements of your project.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;By following this README, you should be able to install the PumpDotFun SDK, run the provided examples, and understand how to set up event listeners and perform token operations.&lt;/p&gt;</summary>
  </entry>
</feed>