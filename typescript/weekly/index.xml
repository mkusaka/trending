<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T02:24:28Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fantasticit/think</title>
    <updated>2022-06-19T02:24:28Z</updated>
    <id>tag:github.com,2022-06-19:/fantasticit/think</id>
    <link href="https://github.com/fantasticit/think" rel="alternate"></link>
    <summary type="html">&lt;p&gt;云策文档是一款开源知识管理工具。通过独立的知识库空间，结构化地组织在线协作文档，实现知识的积累与沉淀，促进知识的复用与流通。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;think&lt;/h1&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;Think 是一款开源知识管理工具。通过独立的知识库空间，结构化地组织在线协作文档，实现知识的积累与沉淀，促进知识的复用与流通。同时支持多人协作文档。使用的技术如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MySQL&lt;/code&gt;：数据存储&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;next.js&lt;/code&gt;：前端页面框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nest.js&lt;/code&gt;：服务端框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tiptap&lt;/code&gt;：编辑器及文档协作&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;可访问&lt;a href=&#34;https://think.codingit.cn/share/wiki/eb520cdf-aa4b-4af2-ae4a-7140e21403ab&#34;&gt;云策文档帮助中心&lt;/a&gt;，查看更多功能文档。&lt;/p&gt; &#xA;&lt;h2&gt;链接&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://think.codingit.cn&#34;&gt;云策文档&lt;/a&gt;已经部署上线，可前往注册使用。&lt;/p&gt; &#xA;&lt;h2&gt;预览&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://wipi.oss-cn-shanghai.aliyuncs.com/2022-02-20/YN67GM4VQMBTZFZ88TYP8X/image.png&#34; alt=&#34;知识库&#34;&gt; &lt;img src=&#34;http://wipi.oss-cn-shanghai.aliyuncs.com/2022-02-20/YN67GM4VQMBTZFZ88TYPQX/image.png&#34; alt=&#34;新建文档&#34;&gt; &lt;img src=&#34;http://wipi.oss-cn-shanghai.aliyuncs.com/2022-02-20/YN67GM4VQMBTZFZ88TYPZX/image.png&#34; alt=&#34;编辑器&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目结构&lt;/h2&gt; &#xA;&lt;p&gt;本项目依赖 pnpm 使用 monorepo 形式进行代码组织，分包如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@think/config&lt;/code&gt;: 客户端、服务端、OSS、MySQL、Redis 等配置管理&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@think/domains&lt;/code&gt;：领域模型数据定义&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@think/constants&lt;/code&gt;：常量配置&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@think/server&lt;/code&gt;：服务端&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@think/client&lt;/code&gt;：客户端&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目依赖&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nodejs ≥ 16.5&lt;/li&gt; &#xA; &lt;li&gt;pnpm&lt;/li&gt; &#xA; &lt;li&gt;pm2&lt;/li&gt; &#xA; &lt;li&gt;mysql ≥ 5.7&lt;/li&gt; &#xA; &lt;li&gt;redis (可选)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;依赖安装命令: &lt;code&gt;npm i -g pm2 @nestjs/cli pnpm&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;数据库&lt;/h4&gt; &#xA;&lt;p&gt;首先安装 &lt;code&gt;MySQL&lt;/code&gt;，推荐使用 docker 进行安装。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image pull mysql:5.7&#xA;# m1 的 mac 可以用：docker image pull --platform linux/x86_64 mysql:5.7&#xA;docker run -d --restart=always --name think -p 3306:3306 -e MYSQL_DATABASE=think -e MYSQL_ROOT_PASSWORD=root mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;可选：Redis&lt;/h4&gt; &#xA;&lt;p&gt;如果需要文档版本服务，请在根目录 &lt;code&gt;yaml&lt;/code&gt; 配置中进行 &lt;code&gt;db.redis&lt;/code&gt; 的配置。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull redis:latest&#xA;docker run --name think-redis -p 6379:6379 -d redis --appendonly yes --requirepass &#34;root&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker-compose 一键构建安装&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实测腾讯轻量云 2C4G 机器构建需 8 分钟左右&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;请注意修改 &lt;code&gt;docker-compose.yml&lt;/code&gt; 中的 &lt;code&gt;EIP&lt;/code&gt; 参数,否则无法正常使用!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 首次安装&#xA;git clone  https://github.com/fantasticit/think.git&#xA;cd think&#xA;docker-compose up -d&#xA;&#xA;# 二次更新升级&#xA;cd think&#xA;git pull&#xA;docker-compose build&#xA;docker-compose up -d&#xA;&#xA;# FAQ&#xA;如遇二次更新有问题,请更新代码重新构建,然后删除本地配置文件并重启容器.&#xA;如果还不能解决,1.有能力可自行解决|2.等待更新|3.去mrdoc.fun站点留言&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后访问 &lt;code&gt;http://ip:5001&lt;/code&gt; 即可.&lt;/p&gt; &#xA;&lt;h2&gt;手动安装教程&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;前台页面地址：&lt;code&gt;http://localhost:5001&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;服务接口地址：&lt;code&gt;http://localhost:5002&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;协作接口地址：&lt;code&gt;http://localhost:5003&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如需修改配置，开发环境编辑 &lt;code&gt;config/dev.yaml&lt;/code&gt;。生产环境编辑 &lt;code&gt;config/prod.yaml&lt;/code&gt; (如没有,可复制开发环境的配置修改即可.)&lt;/p&gt; &#xA;&lt;h3&gt;本地源代码运行(开发环境)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone  https://github.com/fantasticit/think.git&#xA;cd think&#xA;pnpm install&#xA;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后访问 &lt;code&gt;http://ip:5001&lt;/code&gt; 即可.&lt;/p&gt; &#xA;&lt;h3&gt;本地源代码运行(生产环境)&lt;/h3&gt; &#xA;&lt;p&gt;生产环境部署的脚本如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone  https://github.com/fantasticit/think.git&#xA;cd think&#xA;pnpm install&#xA;pnpm run build&#xA;pnpm run pm2&#xA;&#xA;pm2 startup&#xA;pm2 save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nginx 配置参考&lt;/h3&gt; &#xA;&lt;p&gt;采用反向代理进行 &lt;code&gt;nginx&lt;/code&gt; 配置，&lt;strong&gt;同时设置 &lt;code&gt;proxy_set_header X-Real-IP $remote_addr;&lt;/code&gt; 以便服务端获取到真实 ip 地址&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;upstream wipi_client {&#xA;  server 127.0.0.1:3000;&#xA;  keepalive 64;&#xA;}&#xA;&#xA;# http -&amp;gt; https 重定向&#xA;server {&#xA;  listen  80;&#xA;  server_name 域名;&#xA;  rewrite ^(.*)$  https://$host$1 permanent;&#xA;}&#xA;&#xA;server {&#xA;  listen 443 ssl;&#xA;  server_name 域名;&#xA;  ssl_certificate      证书存放路径;&#xA;  ssl_certificate_key  证书存放路径;&#xA;&#xA;  location / {&#xA;    proxy_http_version 1.1;&#xA;    proxy_set_header Upgrade $http_upgrade;&#xA;    proxy_set_header Connection &#34;upgrade&#34;;&#xA;    proxy_set_header Host $host;&#xA;    proxy_set_header X-Nginx-Proxy true;&#xA;    proxy_cache_bypass $http_upgrade;&#xA;    proxy_pass http://wipi_client; #反向代理&#xA;    proxy_set_header X-Real-IP $remote_addr;&#xA;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;自动化部署&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;思路：在服务器部署 webhook，然后在 github setting 中配置相应钩子，实现自动化部署&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;参考：&lt;a href=&#34;https://github.com/adnanh/webhook/raw/master/docs/Hook-Examples.md#incoming-github-webhook&#34;&gt;webhook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;商用&lt;/h2&gt; &#xA;&lt;p&gt;如需商用，请联系作者，取得授权后可商用。&lt;/p&gt; &#xA;&lt;h2&gt;赞助&lt;/h2&gt; &#xA;&lt;p&gt;如果这个项目对您有帮助，并且您希望支持该项目的开发和维护，请随时扫描一下二维码进行捐赠。非常感谢您的捐款，谢谢！&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex;&#34;&gt; &#xA; &lt;img width=&#34;300&#34; alt=&#34;alipay&#34; src=&#34;https://think-1256095494.cos.ap-shanghai.myqcloud.com/think-alipay.jpg&#34;&gt; &#xA; &lt;img width=&#34;300&#34; alt=&#34;wechat&#34; src=&#34;https://think-1256095494.cos.ap-shanghai.myqcloud.com/think-wechat.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;资料&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;next.js 源码：&lt;a href=&#34;https://github.com/vercel/next.js&#34;&gt;https://github.com/vercel/next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;next.js 文档：&lt;a href=&#34;https://nextjs.org/&#34;&gt;https://nextjs.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;nest.js 源码：&lt;a href=&#34;https://github.com/nestjs/nest&#34;&gt;https://github.com/nestjs/nest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;nest.js 文档：&lt;a href=&#34;https://nestjs.com/&#34;&gt;https://nestjs.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alan2207/bulletproof-react</title>
    <updated>2022-06-19T02:24:28Z</updated>
    <id>tag:github.com,2022-06-19:/alan2207/bulletproof-react</id>
    <link href="https://github.com/alan2207/bulletproof-react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛡️ ⚛️ A simple, scalable, and powerful architecture for building production ready React applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bulletproof React 🛡️ ⚛️&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alan2207/bulletproof-react/raw/master/LICENCE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/alan2207/bulletproof-react&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alan2207/bulletproof-react/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/alan2207/bulletproof-react/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple, scalable, and powerful architecture for building production ready React applications.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;React is a great tool for building frontend applications. It has a very diverse ecosystem with hundreds of great libraries for literally anything you might need. However, it can be overwhelming to be forced to make so many choices. It is also very flexible, you can write React applications in any way you like but that flexibility comes with a cost. Since there is no pre-defined architecture developers can follow, it often leads to messy, inconsistent, or over-complicated codebases.&lt;/p&gt; &#xA;&lt;p&gt;This is an attempt to present a way of creating React applications using the best tools in the ecosystem with a good project structure that scales very well. It is based on the experience of working with many different codebases, and this architecture turns out to be the most effective one.&lt;/p&gt; &#xA;&lt;p&gt;The goal of this repo is to serve as a collection of resources and good practices when developing React applications. It is supposed to showcase solving most of the real-world problems of an application in a practical way and help developers writing better applications.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to explore the codebase to get the most value out of the repo.&lt;/p&gt; &#xA;&lt;h4&gt;Disclaimer:&lt;/h4&gt; &#xA;&lt;p&gt;This is not supposed to be a template, boilerplate or a framework. It is an opinionated guide that shows how to do some things in a certain way. You are not forced to do everything exactly as it is shown here, decide what works best for you and your team and stay consistent with your style.&lt;/p&gt; &#xA;&lt;h2&gt;Table Of Contents:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/application-overview.md&#34;&gt;💻 Application Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/project-configuration.md&#34;&gt;⚙️ Project Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/style-guide.md&#34;&gt;👁️ Style Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/project-structure.md&#34;&gt;🗄️ Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/components-and-styling.md&#34;&gt;🧱 Components And Styling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/api-layer.md&#34;&gt;📡 API Layer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/state-management.md&#34;&gt;🗃️ State Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/testing.md&#34;&gt;🧪 Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/error-handling.md&#34;&gt;⚠️ Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/security.md&#34;&gt;🔐 Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/performance.md&#34;&gt;🚄 Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/deployment.md&#34;&gt;🌐 Deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alan2207/bulletproof-react/master/docs/additional-resources.md&#34;&gt;📚 Additional Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! If you have any ideas, suggestions, fixes, feel free to contribute. You can do that by going through the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo&lt;/li&gt; &#xA; &lt;li&gt;Create a branch: &lt;code&gt;git checkout -b your-feature&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make some changes&lt;/li&gt; &#xA; &lt;li&gt;Test your changes&lt;/li&gt; &#xA; &lt;li&gt;Push your branch and open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>antfu/unplugin-vue-components</title>
    <updated>2022-06-19T02:24:28Z</updated>
    <id>tag:github.com,2022-06-19:/antfu/unplugin-vue-components</id>
    <link href="https://github.com/antfu/unplugin-vue-components" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📲 On-demand components auto importing for Vue&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;unplugin-vue-components&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/unplugin-vue-components&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/unplugin-vue-components?color=a1b858&amp;amp;label=&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On-demand components auto importing for Vue.&lt;/p&gt; &#xA;&lt;h6&gt;Features&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💚 Supports both Vue 2 and Vue 3 out-of-the-box.&lt;/li&gt; &#xA; &lt;li&gt;✨ Supports both components and directives.&lt;/li&gt; &#xA; &lt;li&gt;⚡️ Supports Vite, Webpack, Vue CLI, Rollup, esbuild and more, powered by &lt;a href=&#34;https://github.com/unjs/unplugin&#34;&gt;unplugin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🏝 Tree-shakable, only registers the components you use.&lt;/li&gt; &#xA; &lt;li&gt;🪐 Folder names as namespaces.&lt;/li&gt; &#xA; &lt;li&gt;🦾 Full TypeScript support.&lt;/li&gt; &#xA; &lt;li&gt;🌈 &lt;a href=&#34;https://raw.githubusercontent.com/antfu/unplugin-vue-components/main/#importing-from-ui-libraries&#34;&gt;Built-in resolvers&lt;/a&gt; for popular UI libraries.&lt;/li&gt; &#xA; &lt;li&gt;😃 Works perfectly with &lt;a href=&#34;https://github.com/antfu/unplugin-icons&#34;&gt;unplugin-icons&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i unplugin-vue-components -D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;code&gt;vite-plugin-components&lt;/code&gt; has been renamed to &lt;code&gt;unplugin-vue-components&lt;/code&gt;&lt;/strong&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/antfu/unplugin-vue-components/main/#migrate-from-vite-plugin-components&#34;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vite&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vite.config.ts&#xA;import Components from &#39;unplugin-vue-components/vite&#39;&#xA;&#xA;export default defineConfig({&#xA;  plugins: [&#xA;    Components({ /* options */ }),&#xA;  ],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rollup&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// rollup.config.js&#xA;import Components from &#39;unplugin-vue-components/rollup&#39;&#xA;&#xA;export default {&#xA;  plugins: [&#xA;    Components({ /* options */ }),&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Webpack&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// webpack.config.js&#xA;module.exports = {&#xA;  /* ... */&#xA;  plugins: [&#xA;    require(&#39;unplugin-vue-components/webpack&#39;)({ /* options */ }),&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Nuxt&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;p&gt;You might not need this plugin for Nuxt. Use &lt;a href=&#34;https://github.com/nuxt/components&#34;&gt;&lt;code&gt;@nuxt/components&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vue CLI&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vue.config.js&#xA;module.exports = {&#xA;  configureWebpack: {&#xA;    plugins: [&#xA;      require(&#39;unplugin-vue-components/webpack&#39;)({ /* options */ }),&#xA;    ],&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;esbuild&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// esbuild.config.js&#xA;import { build } from &#39;esbuild&#39;&#xA;&#xA;build({&#xA;  /* ... */&#xA;  plugins: [&#xA;    require(&#39;unplugin-vue-components/esbuild&#39;)({&#xA;      /* options */&#xA;    }),&#xA;  ],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use components in templates as you would usually do, it will import components on demand, and there is no &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;component registration&lt;/code&gt; required anymore! If you register the parent component asynchronously (or lazy route), the auto-imported components will be code-split along with their parent.&lt;/p&gt; &#xA;&lt;p&gt;It will automatically turn this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;HelloWorld msg=&#34;Hello Vue 3.0 + Vite&#34; /&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;export default {&#xA;  name: &#39;App&#39;&#xA;}&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;into this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;HelloWorld msg=&#34;Hello Vue 3.0 + Vite&#34; /&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;import HelloWorld from &#39;./src/components/HelloWorld.vue&#39;&#xA;&#xA;export default {&#xA;  name: &#39;App&#39;,&#xA;  components: {&#xA;    HelloWorld&#xA;  }&#xA;}&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;To get TypeScript support for auto-imported components, there is &lt;a href=&#34;https://github.com/vuejs/core/pull/3399&#34;&gt;a PR&lt;/a&gt; to Vue 3 extending the interface of global components. Currently, &lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;Volar&lt;/a&gt; has supported this usage already. If you are using Volar, you can change the config as following to get the support.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;Components({&#xA;  dts: true, // enabled by default if `typescript` is installed&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the setup is done, a &lt;code&gt;components.d.ts&lt;/code&gt; will be generated and updates automatically with the type definitions. Feel free to commit it into git or not as you want.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Make sure you also add &lt;code&gt;components.d.ts&lt;/code&gt; to your &lt;code&gt;tsconfig.json&lt;/code&gt; under &lt;code&gt;includes&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Importing from UI Libraries&lt;/h2&gt; &#xA;&lt;p&gt;We have several built-in resolvers for popular UI libraries like &lt;strong&gt;Vuetify&lt;/strong&gt;, &lt;strong&gt;Ant Design Vue&lt;/strong&gt;, and &lt;strong&gt;Element Plus&lt;/strong&gt;, where you can enable them by:&lt;/p&gt; &#xA;&lt;p&gt;Supported Resolvers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/antdv.ts&#34;&gt;Ant Design Vue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/arco.ts&#34;&gt;Arco Design Vue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/element-plus.ts&#34;&gt;Element Plus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/element-ui.ts&#34;&gt;Element UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/headless-ui.ts&#34;&gt;Headless UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/idux.ts&#34;&gt;IDux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/inkline.ts&#34;&gt;Inkline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/naive-ui.ts&#34;&gt;Naive UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/prime-vue.ts&#34;&gt;Prime Vue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/vant.ts&#34;&gt;Vant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/veui.ts&#34;&gt;VEUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/varlet-ui.ts&#34;&gt;Varlet UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/view-ui.ts&#34;&gt;View UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/vuetify.ts&#34;&gt;Vuetify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/vueuse.ts&#34;&gt;VueUse Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/quasar.ts&#34;&gt;Quasar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antfu/unplugin-vue-components/raw/main/src/core/resolvers/tdesign.ts&#34;&gt;TDesign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// vite.config.js&#xA;import Components from &#39;unplugin-vue-components/vite&#39;&#xA;import {&#xA;  AntDesignVueResolver,&#xA;  ElementPlusResolver,&#xA;  VantResolver,&#xA;} from &#39;unplugin-vue-components/resolvers&#39;&#xA;&#xA;// your plugin installation&#xA;Components({&#xA;  resolvers: [&#xA;    AntDesignVueResolver(),&#xA;    ElementPlusResolver(),&#xA;    VantResolver(),&#xA;  ],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also write your own resolver quickly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;Components({&#xA;  resolvers: [&#xA;    // example of importing Vant&#xA;    (componentName) =&amp;gt; {&#xA;      // where `componentName` is always CapitalCase&#xA;      if (componentName.startsWith(&#39;Van&#39;))&#xA;        return { name: componentName.slice(3), from: &#39;vant&#39; }&#xA;    },&#xA;  ],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you successfully configured other UI libraries, please feel free to contribute and help others using them out-of-box. Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Types for global registered components&lt;/h2&gt; &#xA;&lt;p&gt;Some libraries might register some global components for you to use anywhere (e.g. Vue Router provides &lt;code&gt;&amp;lt;RouterLink&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;RouterView&amp;gt;&lt;/code&gt;). Since they are global available, there is no need for this plugin to import them. However, those are commonly not TypeScript friendly, and you might need to register their types manually.&lt;/p&gt; &#xA;&lt;p&gt;Thus &lt;code&gt;unplugin-vue-components&lt;/code&gt; provided a way to only register types for global components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;Components({&#xA;  dts: true,&#xA;  types: [{&#xA;    from: &#39;vue-router&#39;,&#xA;    names: [&#39;RouterLink&#39;, &#39;RouterView&#39;],&#xA;  }],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So the &lt;code&gt;RouterLink&lt;/code&gt; and &lt;code&gt;RouterView&lt;/code&gt; will be presented in &lt;code&gt;components.d.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;unplugin-vue-components&lt;/code&gt; detects supported libraries automatically (e.g. &lt;code&gt;vue-router&lt;/code&gt;) when they are installed in the workspace. If you want to disable it completely, you can pass an empty array to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;Components({&#xA;  // Disable type only registration&#xA;  types: [],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Migrate from &lt;code&gt;vite-plugin-components&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;{&#xA;  &#34;devDependencies&#34;: {&#xA;-   &#34;vite-plugin-components&#34;: &#34;*&#34;,&#xA;+   &#34;unplugin-vue-components&#34;: &#34;^0.14.0&#34;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;vite.config.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import Components, { ElementPlusResolver } from &#39;vite-plugin-components&#39;&#xA;+ import Components from &#39;unplugin-vue-components/vite&#39;&#xA;+ import { ElementPlusResolver } from &#39;unplugin-vue-components/resolvers&#39;&#xA;&#xA;export default {&#xA;  plugins: [&#xA;    /* ... */&#xA;    Components({&#xA;      /* ... */&#xA;&#xA;      // `customComponentsResolvers` has renamed to `resolver`&#xA;-     customComponentsResolvers: [&#xA;+     resolvers: [&#xA;        ElementPlusResolver(),&#xA;      ],&#xA;&#xA;      // `globalComponentsDeclaration` has renamed to `dts`&#xA;-     globalComponentsDeclaration: true,&#xA;+     dts: true,&#xA;&#xA;      // `customLoaderMatcher` is depreacted, use `include` instead&#xA;-     customLoaderMatcher: id =&amp;gt; id.endsWith(&#39;.md&#39;),&#xA;+     include: [/\.vue$/, /\.vue\?vue/, /\.md$/],&#xA;    }),&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The following show the default values of the configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;Components({&#xA;  // relative paths to the directory to search for components.&#xA;  dirs: [&#39;src/components&#39;],&#xA;&#xA;  // valid file extensions for components.&#xA;  extensions: [&#39;vue&#39;],&#xA;  // search for subdirectories&#xA;  deep: true,&#xA;  // resolvers for custom components&#xA;  resolvers: [],&#xA;&#xA;  // generate `components.d.ts` global declarations,&#xA;  // also accepts a path for custom filename&#xA;  // default: `true` if package typescript is installed&#xA;  dts: false,&#xA;&#xA;  // Allow subdirectories as namespace prefix for components.&#xA;  directoryAsNamespace: false,&#xA;  // Subdirectory paths for ignoring namespace prefixes&#xA;  // works when `directoryAsNamespace: true`&#xA;  globalNamespaces: [],&#xA;&#xA;  // auto import for directives&#xA;  // default: `true` for Vue 3, `false` for Vue 2&#xA;  // Babel is needed to do the transformation for Vue 2, it&#39;s disabled by default for performance concerns.&#xA;  // To install Babel, run: `npm install -D @babel/parser`&#xA;  directives: true,&#xA;&#xA;  // Transform path before resolving&#xA;  importPathTransform: v =&amp;gt; v,&#xA;&#xA;  // Allow for components to override other components with the same name&#xA;  allowOverrides: false,&#xA;&#xA;  // filters for transforming targets&#xA;  include: [/\.vue$/, /\.vue\?vue/],&#xA;  exclude: [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/, /[\\/]\.nuxt[\\/]/],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/antfu/vitesse&#34;&gt;Vitesse&lt;/a&gt; starter template.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/brattonross&#34;&gt;@brattonross&lt;/a&gt;, this project is heavily inspired by &lt;a href=&#34;https://github.com/vamplate/vite-plugin-voie&#34;&gt;vite-plugin-voie&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License © 2020-PRESENT &lt;a href=&#34;https://github.com/antfu&#34;&gt;Anthony Fu&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>