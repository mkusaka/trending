<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-04T01:48:46Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apify/crawlee</title>
    <updated>2022-09-04T01:48:46Z</updated>
    <id>tag:github.com,2022-09-04:/apify/crawlee</id>
    <link href="https://github.com/apify/crawlee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Crawlee‚ÄîA web scraping and browser automation library for Node.js that helps you build reliable crawlers. Fast.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://crawlee.dev&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/apify/crawlee/master/website/static/img/crawlee-dark.svg?sanitize=true&#34;&gt; &#xA;   &lt;img alt=&#34;Crawlee&#34; src=&#34;https://raw.githubusercontent.com/apify/crawlee/master/website/static/img/crawlee-light.svg?sanitize=true&#34; width=&#34;500&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;br&gt; &lt;small&gt;A web scraping and browser automation library&lt;/small&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@crawlee/core&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@crawlee/core.svg?sanitize=true&#34; alt=&#34;NPM latest version&#34; data-canonical-src=&#34;https://img.shields.io/npm/v/@crawlee/core/next.svg&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@crawlee/core&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@crawlee/core.svg?sanitize=true&#34; alt=&#34;Downloads&#34; data-canonical-src=&#34;https://img.shields.io/npm/dm/@crawlee/core.svg&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/jyEM2PRvMU&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/801163717915574323?label=discord&#34; alt=&#34;Chat on discord&#34; data-canonical-src=&#34;https://img.shields.io/discord/801163717915574323?label=discord&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apify/crawlee/actions/workflows/test-and-release.yml&#34;&gt;&lt;img src=&#34;https://github.com/apify/crawlee/actions/workflows/test-and-release.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è Crawlee is the successor to &lt;a href=&#34;https://sdk.apify.com&#34;&gt;Apify SDK&lt;/a&gt;. üéâ Fully rewritten in &lt;strong&gt;TypeScript&lt;/strong&gt; for a better developer experience, and with even more powerful anti-blocking features. The interface is almost the same as Apify SDK so upgrading is a breeze. Read &lt;a href=&#34;https://crawlee.dev/docs/upgrading/upgrading-to-v3&#34;&gt;the upgrading guide&lt;/a&gt; to learn about the changes. ‚ÑπÔ∏è&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Crawlee covers your crawling and scraping end-to-end and &lt;strong&gt;helps you build reliable scrapers. Fast.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your crawlers will appear human-like and fly under the radar of modern bot protections even with the default configuration. Crawlee gives you the tools to crawl the web for links, scrape data, and store it to disk or cloud while staying configurable to suit your project&#39;s needs.&lt;/p&gt; &#xA;&lt;p&gt;Crawlee is available as the &lt;a href=&#34;https://www.npmjs.com/package/crawlee&#34;&gt;&lt;code&gt;crawlee&lt;/code&gt;&lt;/a&gt; NPM package.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üëâ &lt;strong&gt;View full documentation, guides and examples on the &lt;a href=&#34;https://crawlee.dev&#34;&gt;Crawlee project website&lt;/a&gt;&lt;/strong&gt; üëà&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We recommend visiting the &lt;a href=&#34;https://crawlee.dev/docs/introduction&#34;&gt;Introduction tutorial&lt;/a&gt; in Crawlee documentation for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Crawlee requires &lt;strong&gt;Node.js 16 or higher&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;With Crawlee CLI&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to try Crawlee out is to use the &lt;strong&gt;Crawlee CLI&lt;/strong&gt; and choose the &lt;strong&gt;Getting started example&lt;/strong&gt;. The CLI will install all the necessary dependencies and add boilerplate code for you to play with.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx crawlee create my-crawler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd my-crawler&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer adding Crawlee &lt;strong&gt;into your own project&lt;/strong&gt;, try the example below. Because it uses &lt;code&gt;PlaywrightCrawler&lt;/code&gt; we also need to install &lt;a href=&#34;https://playwright.dev&#34;&gt;Playwright&lt;/a&gt;. It&#39;s not bundled with Crawlee to reduce install size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install crawlee playwright&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { PlaywrightCrawler, Dataset } from &#39;crawlee&#39;;&#xA;&#xA;// PlaywrightCrawler crawls the web using a headless&#xA;// browser controlled by the Playwright library.&#xA;const crawler = new PlaywrightCrawler({&#xA;    // Use the requestHandler to process each of the crawled pages.&#xA;    async requestHandler({ request, page, enqueueLinks, log }) {&#xA;        const title = await page.title();&#xA;        log.info(`Title of ${request.loadedUrl} is &#39;${title}&#39;`);&#xA;&#xA;        // Save results as JSON to ./storage/datasets/default&#xA;        await Dataset.pushData({ title, url: request.loadedUrl });&#xA;&#xA;        // Extract links from the current page&#xA;        // and add them to the crawling queue.&#xA;        await enqueueLinks();&#xA;    },&#xA;    // Uncomment this option to see the browser window.&#xA;    // headless: false,&#xA;});&#xA;&#xA;// Add first URL to the queue and start the crawl.&#xA;await crawler.run([&#39;https://crawlee.dev&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Crawlee stores data to &lt;code&gt;./storage&lt;/code&gt; in the current working directory. You can override this directory via Crawlee configuration. For details, see &lt;a href=&#34;https://crawlee.dev/docs/guides/configuration&#34;&gt;Configuration guide&lt;/a&gt;, &lt;a href=&#34;https://crawlee.dev/docs/guides/request-storage&#34;&gt;Request storage&lt;/a&gt; and &lt;a href=&#34;https://crawlee.dev/docs/guides/result-storage&#34;&gt;Result storage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üõ† Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Single interface for &lt;strong&gt;HTTP and headless browser&lt;/strong&gt; crawling&lt;/li&gt; &#xA; &lt;li&gt;Persistent &lt;strong&gt;queue&lt;/strong&gt; for URLs to crawl (breadth &amp;amp; depth first)&lt;/li&gt; &#xA; &lt;li&gt;Pluggable &lt;strong&gt;storage&lt;/strong&gt; of both tabular data and files&lt;/li&gt; &#xA; &lt;li&gt;Automatic &lt;strong&gt;scaling&lt;/strong&gt; with available system resources&lt;/li&gt; &#xA; &lt;li&gt;Integrated &lt;strong&gt;proxy rotation&lt;/strong&gt; and session management&lt;/li&gt; &#xA; &lt;li&gt;Lifecycles customizable with &lt;strong&gt;hooks&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLI&lt;/strong&gt; to bootstrap your projects&lt;/li&gt; &#xA; &lt;li&gt;Configurable &lt;strong&gt;routing&lt;/strong&gt;, &lt;strong&gt;error handling&lt;/strong&gt; and &lt;strong&gt;retries&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dockerfiles&lt;/strong&gt; ready to deploy&lt;/li&gt; &#xA; &lt;li&gt;Written in &lt;strong&gt;TypeScript&lt;/strong&gt; with generics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üëæ HTTP crawling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zero config &lt;strong&gt;HTTP2 support&lt;/strong&gt;, even for proxies&lt;/li&gt; &#xA; &lt;li&gt;Automatic generation of &lt;strong&gt;browser-like headers&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replication of browser &lt;strong&gt;TLS fingerprints&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integrated fast &lt;strong&gt;HTML parsers&lt;/strong&gt;. Cheerio and JSDOM&lt;/li&gt; &#xA; &lt;li&gt;Yes, you can scrape &lt;strong&gt;JSON APIs&lt;/strong&gt; as well&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üíª Real browser crawling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JavaScript &lt;strong&gt;rendering&lt;/strong&gt; and &lt;strong&gt;screenshots&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Headless&lt;/strong&gt; and &lt;strong&gt;headful&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Zero-config generation of &lt;strong&gt;human-like fingerprints&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Automatic &lt;strong&gt;browser management&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;strong&gt;Playwright&lt;/strong&gt; and &lt;strong&gt;Puppeteer&lt;/strong&gt; with the same interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt;, &lt;strong&gt;Firefox&lt;/strong&gt;, &lt;strong&gt;Webkit&lt;/strong&gt; and many others&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage on the Apify platform&lt;/h2&gt; &#xA;&lt;p&gt;Crawlee is open-source and runs anywhere, but since it&#39;s developed by &lt;a href=&#34;https://apify.com&#34;&gt;Apify&lt;/a&gt;, it&#39;s easy to set up on the Apify platform and run in the cloud. Visit the &lt;a href=&#34;https://sdk.apify.com&#34;&gt;Apify SDK website&lt;/a&gt; to learn more about deploying Crawlee to the Apify platform.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you find any bug or issue with Crawlee, please &lt;a href=&#34;https://github.com/apify/crawlee/issues&#34;&gt;submit an issue on GitHub&lt;/a&gt;. For questions, you can ask on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/apify&#34;&gt;Stack Overflow&lt;/a&gt;, in GitHub Discussions or you can join our &lt;a href=&#34;https://discord.com/invite/jyEM2PRvMU&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Your code contributions are welcome, and you&#39;ll be praised to eternity! If you have any ideas for improvements, either submit an issue or create a pull request. For contribution guidelines and the code of conduct, see &lt;a href=&#34;https://github.com/apify/crawlee/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache License 2.0 - see the &lt;a href=&#34;https://github.com/apify/crawlee/raw/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joeyballentine/chaiNNer</title>
    <updated>2022-09-04T01:48:46Z</updated>
    <id>tag:github.com,2022-09-04:/joeyballentine/chaiNNer</id>
    <link href="https://github.com/joeyballentine/chaiNNer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flowchart/node-based image processing GUI aimed at making chaining image processing tasks (especially those done by neural networks) easy, intuitive, and customizable.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chaiNNer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/joeyballentine/chaiNNer/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/joeyballentine/chaiNNer&#34; alt=&#34;GitHub Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/joeyballentine/chaiNNer/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/joeyballentine/chaiNNer/total&#34; alt=&#34;GitHub Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/joeyballentine/chaiNNer/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/joeyballentine/chaiNNer&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/pzvAKPKyHM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/930865462852591648?label=Discord&amp;amp;logo=Discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/joeyballentine/chaiNNer/releases&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/joeyballentine/chaiNNer/main/src/public/banner.png&#34; width=&#34;720&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A flowchart/node-based image processing GUI aimed at making chaining image processing tasks (especially upscaling done by neural networks) easy, intuitive, and customizable.&lt;/p&gt; &#xA;&lt;p&gt;No existing upscaling GUI gives you the level of customization of your image processing workflow that chaiNNer does. Not only do you have full control over your processing pipeline, you can do incredibly complex tasks just by connecting a few nodes together.&lt;/p&gt; &#xA;&lt;p&gt;chaiNNer is also cross-platform, meaning you can run it on Windows, MacOS, and Linux.&lt;/p&gt; &#xA;&lt;p&gt;For help, suggestions, or just to hang out, you can join the &lt;a href=&#34;https://discord.gg/pzvAKPKyHM&#34;&gt;chaiNNer Discord server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Remember: chaiNNer is still a work in progress and in alpha. While it is slowly getting more to where we want it, it is going to take quite some time to have every possible feature we want to add. If you&#39;re knowledgeable in TypeScript, React, or Python, feel free to contribute to this project and help us get closer to that goal.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest release from the &lt;a href=&#34;https://github.com/joeyballentine/chaiNNer/releases&#34;&gt;Github releases page&lt;/a&gt; and run the installer best suited for your system. Simple as that.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t even need to have Python installed, as chaiNNer will download an isolated integrated Python build on startup. From there, you can install all the other dependencies via the Dependency Manager.&lt;/p&gt; &#xA;&lt;p&gt;If you do wish to use your system Python installation still, you can turn the system Python setting on. However, it is much more recommended to use the integrated Python. If you do wish to use your system Python, make sure the Python version you are using is either 3.8 or 3.9. 3.10 also should work for the most part, but it is not fully supported at this time.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the provided .zip portable version of chaiNNer, please be aware that the integrated Python it uses is not portable like the rest of it.&lt;/p&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;While it might seem intimidating at first due to all the possible options, chaiNNer is pretty simple to use. For example, this is all you need to do in order to perform an upscale:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/joeyballentine/chaiNNer/main/src/public/simple_screenshot.png&#34; width=&#34;480&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Before you get to this point though, you&#39;ll need to install one of the neural network frameworks from the dependency manager. You can access this via the button in the upper-right-hand corner. ChaiNNer offers support for PyTorch (with select model architectures), NCNN, and ONNX. For Nvidia users, PyTorch will be the preferred way to upscale. For AMD users, NCNN will be the preferred way to upscale.&lt;/p&gt; &#xA;&lt;p&gt;All the other Python dependencies are automatically installed, and chaiNNer even carries its own integrated Python support so that you do not have to modify your existing Python configuration.&lt;/p&gt; &#xA;&lt;p&gt;Then, all you have to do is drag and drop (or double click) node names in the selection panel to bring them into the editor. Then, drag from one node handle to another to connect the nodes. Each handle is color-coded to its specific type, and while connecting will show you only the compatible connections. This makes it very easy to know what to connect where.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a working chain set up in the editor, you can press the green &#34;run&#34; button in the top bar to run the chain you have made. You will see the connections between nodes become animated, and start to un-animate as they finish processing. You can stop or pause processing with the red &#34;stop&#34; and yellow &#34;pause&#34; buttons respectively. Note: pressing stop is usually unable to kill an in-progress upscale during the actual upscaling step. This is a known issue without a workaround at the moment, so just be patient and wait for it to finish or restart chaiNNer.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/joeyballentine/chaiNNer/main/src/public/screenshot.png&#34; width=&#34;540&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Tips &amp;amp; Tricks&lt;/h3&gt; &#xA;&lt;p&gt;To select multiple nodes, hold down shift and drag around all the nodes you want selected. You can also select an individual node by just clicking on it. When nodes are selected, you can press backspace or delete to delete them from the editor.&lt;/p&gt; &#xA;&lt;p&gt;To batch upscale, create an Image Iterator node and drag the nodes you want to use into the iterator&#39;s editor area. You can expand the iterator by clicking and dragging the bottom right corner outwards (like you would a UI window). Simply wire up a chain in an iterator the same as you would normally, and when you click run it will run on every image in the folder you chose. You also can select an entire existing chain, and drag it into the iterator&#39;s editor area to essentially convert the entire thing into an iterable chain.&lt;/p&gt; &#xA;&lt;p&gt;You can right-click in the editor viewport to show an inline nodes list to select from. You also can get this menu by dragging a connection out to the editor rather than making an actual connection, and it will show compatible nodes to automatically create a connection with.&lt;/p&gt; &#xA;&lt;h3&gt;Helpful Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kimberly990/kim-chaiNNer-Templates/&#34;&gt;Kim&#39;s chaiNNer Templates&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A collection of useful chain templates that can quickly get you started if you are still new to using chaiNNer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://upscale.wiki/wiki/Model_Database&#34;&gt;Upscale Wiki Model Database&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A very nice collection of mostly ESRGAN models that have been trained for various tasks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Arch Linux users may need to manually install libxcrypt before chaiNner&#39;s integrated Python will correctly start up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apple M1 laptops are mostly untested, though they are theoretically supported.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GPU Support&lt;/h2&gt; &#xA;&lt;p&gt;For PyTorch inference, only Nvidia GPUs are supported. If you do not have an Nvidia GPU, you will have to use PyTorch in CPU mode. This is because PyTorch only support&#39;s Nvidia&#39;s CUDA. MacOS also does not support CUDA at all, so PyTorch will only work in CPU mode on MacOS.&lt;/p&gt; &#xA;&lt;p&gt;If you have an AMD or Intel GPU that supports NCNN however, chaiNNer now supports NCNN inference. You can use any existing NCNN .bin/.param model files (only ESRGAN-related SR models have been tested), or use chaiNNer to convert a PyTorch model to ONNX, and then convert that to NCNN (via convertmodel.com). Conversion straight from PyTorch to NCNN may come in the future, however I currently have no easy way of doing this.&lt;/p&gt; &#xA;&lt;p&gt;For Nvidia GPUs, ONNX is also an option to be used. ONNX will use CPU mode on non-Nvidia GPUs, similar to PyTorch.&lt;/p&gt; &#xA;&lt;h2&gt;Model Architecture Support&lt;/h2&gt; &#xA;&lt;p&gt;chaiNNer currently supports a limited amount of neural network architectures. More architectures will be supported in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Pytorch&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xinntao/ESRGAN&#34;&gt;ESRGAN&lt;/a&gt; (RRDBNet) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This includes regular &lt;a href=&#34;https://github.com/xinntao/ESRGAN&#34;&gt;ESRGAN&lt;/a&gt;, &lt;a href=&#34;https://github.com/ncarraz/ESRGANplus&#34;&gt;ESRGAN+&lt;/a&gt;, &#34;new-arch ESRGAN&#34; (&lt;a href=&#34;https://github.com/jixiaozhong/RealSR&#34;&gt;RealSR&lt;/a&gt;, &lt;a href=&#34;https://github.com/cszn/BSRGAN&#34;&gt;BSRGAN&lt;/a&gt;), &lt;a href=&#34;https://github.com/Maclory/SPSR&#34;&gt;SPSR&lt;/a&gt;, and &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;Real-ESRGAN&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;Real-ESRGAN Compact&lt;/a&gt; (SRVGGNet)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Koushik0901/Swift-SRGAN&#34;&gt;Swift-SRGAN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NCNN&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Technically, almost any SR model should work assuming they follow a typical CNN-based SR structure, however I have only tested with ESRGAN (and its variants) and with Waifu2x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ONNX&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Similarly to NCNN, technically almost any SR model should work assuming they follow a typical CNN-based SR structure, however I have only tested with ESRGAN.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building chaiNNer Yourself&lt;/h2&gt; &#xA;&lt;p&gt;I provide pre-built versions of chaiNNer here on GitHub. However, if you would like to build chaiNNer yourself, simply run &lt;code&gt;npm install&lt;/code&gt; (make sure that you have at least npm v7 installed) to install all the nodejs dependencies, and &lt;code&gt;npm run make&lt;/code&gt; to build the application.&lt;/p&gt; &#xA;&lt;h2&gt;Planned Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the Discord server for a list of planned features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;What does the name mean?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chaiNNer is a play on the fact that you can &#34;chain&#34; different tasks together, with the NN in the name being a common abbreviation for Neural Networks. This is following the brilliant naming scheme of victorca25&#39;s machine learning tools (traiNNer, iNNfer, augmeNNt) which he granted me permission to use for this as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why not just use Cupscale/IEU/CLI?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All of these tools are viable options, but as anyone who has used them before knows they can be limited in what they can do. Many features like chaining or interpolating models are hardcoded in and provide little flexibility. Certain features that would be useful, like being able to use a separate model on the alpha layer of an image for example, just do not exist in Cupscale. Inversely, you can pretty much do whatever you want with chaiNNer provided there are nodes implemented. Whatever weird feature you want implemented, you can implement yourself by connecting nodes however you want. Cupscale also does not have other image processing abilities like chaiNNer does, such as adjusting contrast.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This all being said however, Cupscale, IEU, CLI, or other tools are still useful for things chaiNNer currently cannot do, like converting PyTorch models to NCNN without jumping through hoops. (That&#39;s pretty much it though)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wouldn&#39;t this make it more difficult to do things?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In a way, yes. Similarly to how programming your own script to do this stuff is more difficult, chaiNNer will also be a bit more difficult than simply dragging and dropping an image and messing with some sliders and pressing an upscale button. However, this gives you a lot more flexibility in what you can do. The added complexity is really just connecting some dots together to do what you want. That doesn&#39;t sound that bad, right?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;What platforms are supported?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows, Linux, and MacOS are all supported by chaiNNer. However, MacOS currently lacks GPU support for pytorch, so I highly recommend using another OS if you need that functionality. M1 MacBooks also are not very well tested, but should work now.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ritwickdey/vscode-live-server</title>
    <updated>2022-09-04T01:48:46Z</updated>
    <id>tag:github.com,2022-09-04:/ritwickdey/vscode-live-server</id>
    <link href="https://github.com/ritwickdey/vscode-live-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Launch a development local Server with live reload feature for static &amp; dynamic pages.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;[Wanna try &lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server-plus-plus&#34;&gt;LIVE SERVER++&lt;/a&gt; (BETA) ? It&#39;ll enable live changes without saving file. &lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server-plus-plus&#34;&gt;https://github.com/ritwickdey/vscode-live-server-plus-plus&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Live Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Live Server loves&lt;/strong&gt; üíò &lt;strong&gt;your multi-root workspace&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Live Server for server side pages like PHP. &lt;a href=&#34;https://github.com/ritwickdey/live-server-web-extension&#34;&gt;Check Here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;[For &#39;command not found error&#39; &lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/issues/78&#34;&gt;#78&lt;/a&gt;]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&#34;&gt;&lt;img src=&#34;https://img.shields.io/vscode-marketplace/v/ritwickdey.LiveServer.svg?style=flat-square&amp;amp;label=vscode%20marketplace&#34; alt=&#34;VSCode Marketplace&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&#34;&gt;&lt;img src=&#34;https://img.shields.io/vscode-marketplace/d/ritwickdey.LiveServer.svg?style=flat-square&#34; alt=&#34;Total Installs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&#34;&gt;&lt;img src=&#34;https://img.shields.io/vscode-marketplace/r/ritwickdey.LiveServer.svg?style=flat-square&#34; alt=&#34;Avarage Rating&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://travis-ci.org/ritwickdey/vscode-live-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/ritwickdey/vscode-live-server/master.svg?style=flat-square&amp;amp;label=travis%20branch&#34; alt=&#34;Travis branch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/ritwickdey/vscode-live-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/ritwickdey/vscode-live-server.svg?style=flat-square&amp;amp;label=appveyor%20branch&#34; alt=&#34;Appveyor branch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Launch a local development server with live reload feature for static &amp;amp; dynamic pages.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/images/Screenshot/vscode-live-server-animated-demo.gif&#34; alt=&#34;Live Server Demo VSCode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Shortcuts to Start/Stop Server&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;[NOTE: In case if you don&#39;t have any &lt;code&gt;.html&lt;/code&gt; or &lt;code&gt;.htm&lt;/code&gt; file in your workspace then you have to follow method no 4 &amp;amp; 5 to start server.]&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a project and click to &lt;code&gt;Go Live&lt;/code&gt; from the status bar to turn the server on/off. &lt;img src=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/images/Screenshot/vscode-live-server-statusbar-3.jpg&#34; alt=&#34;Go Live Control Preview&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Right click on a &lt;code&gt;HTML&lt;/code&gt; file from Explorer Window and click on &lt;code&gt;Open with Live Server&lt;/code&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/images/Screenshot/vscode-live-server-explorer-menu-demo-1.gif&#34; alt=&#34;Explorer Window Control&#34;&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a HTML file and right-click on the editor and click on &lt;code&gt;Open with Live Server&lt;/code&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/images/Screenshot/vscode-live-server-editor-menu-3.jpg&#34; alt=&#34;Edit Menu Option Preview&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hit &lt;code&gt;(alt+L, alt+O)&lt;/code&gt; to Open the Server and &lt;code&gt;(alt+L, alt+C)&lt;/code&gt; to Stop the server (You can change the shortcut form keybinding). &lt;em&gt;[On MAC, &lt;code&gt;cmd+L, cmd+O&lt;/code&gt; and &lt;code&gt;cmd+L, cmd+C&lt;/code&gt;]&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Command Pallete by pressing &lt;code&gt;F1&lt;/code&gt; or &lt;code&gt;ctrl+shift+P&lt;/code&gt; and type &lt;code&gt;Live Server: Open With Live Server &lt;/code&gt; to start a server or type &lt;code&gt;Live Server: Stop Live Server&lt;/code&gt; to stop a server.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Quick Development Live Server with live browser reload.&lt;/li&gt; &#xA; &lt;li&gt;Start or Stop server by a single click from status bar.&lt;/li&gt; &#xA; &lt;li&gt;Open a HTML file to browser from Explorer menu.[&lt;a href=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/images/Screenshot/vscode-live-server-explorer-menu-demo-1.gif?raw=true&#34;&gt;Quick Gif Demo&lt;/a&gt;].&lt;/li&gt; &#xA; &lt;li&gt;Support for excluding files for change detection.&lt;/li&gt; &#xA; &lt;li&gt;Hot Key control.&lt;/li&gt; &#xA; &lt;li&gt;Customizable Port Number, Server Root, default browser.&lt;/li&gt; &#xA; &lt;li&gt;Support for any browser &lt;em&gt;(Eg: Firefox Nightly)&lt;/em&gt; using advance Command Line.&lt;/li&gt; &#xA; &lt;li&gt;Support for Chrome Debugging Attachment (&lt;em&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome&#34;&gt;More Info&lt;/a&gt;&lt;/em&gt;). [&lt;a href=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/images/Screenshot/ChromeDebugging.gif?raw=true&#34;&gt;Quick Gif Demo&lt;/a&gt;].&lt;/li&gt; &#xA; &lt;li&gt;Remote Connect through WLAN (E.g.: Connect with mobile) &lt;em&gt;[Need Help? See FAQ Section]&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use preferable host name &lt;em&gt;(localhost or 127.0.0.1)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Customizable Supporting Tag for Live Reload feature. (Default is &lt;code&gt;Body&lt;/code&gt; or &lt;code&gt;head&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SVG Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;https&lt;/code&gt; Support.&lt;/li&gt; &#xA; &lt;li&gt;Support for proxy.&lt;/li&gt; &#xA; &lt;li&gt;CORS Enabled&lt;/li&gt; &#xA; &lt;li&gt;Multi-root workspace supported.&lt;/li&gt; &#xA; &lt;li&gt;Support for any file even dynamic pages through &lt;em&gt;&lt;a href=&#34;https://github.com/ritwickdey/live-server-web-extension&#34;&gt;Live Server Web Extension&lt;/a&gt;&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Open VSCode and type &lt;code&gt;ctrl+P&lt;/code&gt;, type &lt;code&gt;ext install ritwickdey.liveserver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;All settings are now listed here &lt;a href=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/docs/settings.md&#34;&gt;Settings Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;All FAQs are now listed here &lt;a href=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/docs/faqs.md&#34;&gt;FAQ Docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s new ?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Version 5.6.1 (17.04.19)&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fixed &lt;code&gt;Extension host terminated unexpectedly&lt;/code&gt; &lt;em&gt;[&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/issues/431&#34;&gt;#431&lt;/a&gt;]&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Version 5.6.0 (17.04.19)&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;[NEW]&lt;/strong&gt;&lt;/em&gt; Intregation of &lt;code&gt;Browser Preview&lt;/code&gt; with &lt;code&gt;Live Server&lt;/code&gt; &lt;em&gt;[&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/pull/352&#34;&gt;#352&lt;/a&gt; - Thanks to &lt;a href=&#34;https://github.com/auchenberg&#34;&gt;Kenneth Auchenberg&lt;/a&gt;]&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;[NEW]&lt;/strong&gt;&lt;/em&gt; Fallback to random port If given port is busy. &lt;em&gt;[&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/pull/330&#34;&gt;#330&lt;/a&gt; - Thanks to &lt;a href=&#34;https://github.com/Almo7aya&#34;&gt;Ali Almohaya&lt;/a&gt; ]&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;[FIXES]&lt;/strong&gt;&lt;/em&gt; Moved to &lt;code&gt;vscode-chokidar&lt;/code&gt; lib for &lt;em&gt;&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/issues/285&#34;&gt;#285&lt;/a&gt;&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Doc Fixes &lt;em&gt;[&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/pull/388&#34;&gt;#388&lt;/a&gt; - Thanks to &lt;a href=&#34;https://github.com/tedsilb&#34;&gt;Ted Silbernagel&lt;/a&gt;]&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Version 5.5.1 (12.02.19)&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;[Fixes]&lt;/strong&gt;&lt;/em&gt; Fixed &lt;code&gt;Extension host terminated unexpectedly&lt;/code&gt; for MacOS. [&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/issues/285&#34;&gt;#285&lt;/a&gt;]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Version 5.5.0 (12.02.19)&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;&lt;strong&gt;[Fixes]&lt;/strong&gt;&lt;/em&gt; Fixed &lt;code&gt;ignoreFiles&lt;/code&gt; settings [&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/issues/255&#34;&gt;#255&lt;/a&gt;]&lt;/li&gt; &#xA;   &lt;li&gt;Attempt to fix &lt;code&gt;high cpu load&lt;/code&gt; [&lt;a href=&#34;https://github.com/ritwickdey/vscode-live-server/issues/278&#34;&gt;#278&lt;/a&gt;]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;To check full changelog &lt;a href=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/CHANGELOG.md&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks To Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;A special thanks to &lt;a href=&#34;https://github.com/mxschmitt&#34;&gt;Max Schmitt&lt;/a&gt;, &lt;a href=&#34;https://github.com/rjoydip&#34;&gt;Joydip Roy&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/adesugbaa&#34;&gt;Ayo Adesugba&lt;/a&gt; for contributing their valueable time on this project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mxschmitt&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/17984549?s=64&#34; alt=&#34;Max Schmitt&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rjoydip&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/15318294?s=64&#34; alt=&#34;Joydip Roy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/adesugbaa&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/55943?s=64&#34; alt=&#34;Ayo Adesugba&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;This extension is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/ritwickdey/vscode-live-server/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>