<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-05T01:42:23Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>elizaOS/eliza</title>
    <updated>2025-01-05T01:42:23Z</updated>
    <id>tag:github.com,2025-01-05:/elizaOS/eliza</id>
    <link href="https://github.com/elizaOS/eliza" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Autonomous agents for everyone&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eliza 🤖&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/docs/static/img/eliza_banner.jpg&#34; alt=&#34;Eliza Banner&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;📖 &lt;a href=&#34;https://elizaos.github.io/eliza/&#34;&gt;Documentation&lt;/a&gt; | 🎯 &lt;a href=&#34;https://github.com/thejoven/awesome-eliza&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🌍 README Translations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_CN.md&#34;&gt;中文说明&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_JA.md&#34;&gt;日本語の説明&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_KOR.md&#34;&gt;한국어 설명&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_FR.md&#34;&gt;Français&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_PTBR.md&#34;&gt;Português&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_TR.md&#34;&gt;Türkçe&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_RU.md&#34;&gt;Русский&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_ES.md&#34;&gt;Español&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_IT.md&#34;&gt;Italiano&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_TH.md&#34;&gt;ไทย&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_DE.md&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_VI.md&#34;&gt;Tiếng Việt&lt;/a&gt; | &lt;a href=&#34;https://github.com/elizaos/Elisa/raw/main/README_HE.md&#34;&gt;עִברִית&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_TG.md&#34;&gt;Tagalog&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_PL.md&#34;&gt;Polski&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_AR.md&#34;&gt;Arabic&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_HU.md&#34;&gt;Hungarian&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/README_RS.md&#34;&gt;Srpski&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚩 Overview&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/elizaOS/eliza/main/docs/static/img/eliza_diagram.jpg&#34; alt=&#34;Eliza Diagram&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🛠️ Full-featured Discord, Twitter and Telegram connectors&lt;/li&gt; &#xA; &lt;li&gt;🔗 Support for every model (Llama, Grok, OpenAI, Anthropic, etc.)&lt;/li&gt; &#xA; &lt;li&gt;👥 Multi-agent and room support&lt;/li&gt; &#xA; &lt;li&gt;📚 Easily ingest and interact with your documents&lt;/li&gt; &#xA; &lt;li&gt;💾 Retrievable memory and document store&lt;/li&gt; &#xA; &lt;li&gt;🚀 Highly extensible - create your own actions and clients&lt;/li&gt; &#xA; &lt;li&gt;☁️ Supports many models (local Llama, OpenAI, Anthropic, Groq, etc.)&lt;/li&gt; &#xA; &lt;li&gt;📦 Just works!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Video Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ArptLpQiKfI&amp;amp;list=PLx5pnFXdPTRzWla0RaOxALTSTnVq53fKL&#34;&gt;AI Agent Dev School&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎯 Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🤖 Chatbots&lt;/li&gt; &#xA; &lt;li&gt;🕵️ Autonomous Agents&lt;/li&gt; &#xA; &lt;li&gt;📈 Business Process Handling&lt;/li&gt; &#xA; &lt;li&gt;🎮 Video Game NPCs&lt;/li&gt; &#xA; &lt;li&gt;🧠 Trading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 2.7+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;Node.js 23+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note for Windows Users:&lt;/strong&gt; &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install-manual&#34;&gt;WSL 2&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Use the Starter (Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/elizaos/eliza-starter.git&#xA;cd eliza-starter&#xA;cp .env.example .env&#xA;pnpm i &amp;amp;&amp;amp; pnpm build &amp;amp;&amp;amp; pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the agent is running, you should see the message to run &#34;pnpm start:client&#34; at the end. Open another terminal and move to same directory and then run below command and follow the URL to chat to your agent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm start:client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then read the &lt;a href=&#34;https://elizaos.github.io/eliza/&#34;&gt;Documentation&lt;/a&gt; to learn how to customize your Eliza.&lt;/p&gt; &#xA;&lt;h3&gt;Manually Start Eliza (Only recommended if you know what you are doing)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repository&#xA;git clone https://github.com/elizaos/eliza.git&#xA;&#xA;# Checkout the latest release&#xA;# This project iterates fast, so we recommend checking out the latest release&#xA;git checkout $(git describe --tags --abbrev=0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Eliza with Gitpod&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/elizaos/eliza/tree/main&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Edit the .env file&lt;/h3&gt; &#xA;&lt;p&gt;Copy .env.example to .env and fill in the appropriate values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: .env is optional. If you&#39;re planning to run multiple distinct agents, you can pass secrets through the character JSON Note: .env is optional. If you&#39;re planning to run multiple distinct agents, you can pass secrets through the character JSON&lt;/p&gt; &#xA;&lt;h3&gt;Automatically Start Eliza&lt;/h3&gt; &#xA;&lt;p&gt;This will run everything to set up the project and start the bot with the default character.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh scripts/start.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit the character file&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;packages/core/src/defaultCharacter.ts&lt;/code&gt; to modify the default character. Uncomment and edit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To load custom characters:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;pnpm start --characters=&#34;path/to/your/character.json&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Multiple character files can be loaded simultaneously&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect with X (Twitter)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;change &lt;code&gt;&#34;clients&#34;: []&lt;/code&gt; to &lt;code&gt;&#34;clients&#34;: [&#34;twitter&#34;]&lt;/code&gt; in the character file to connect with X&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manually Start Eliza&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm i&#xA;pnpm build&#xA;pnpm start&#xA;&#xA;# The project iterates fast, sometimes you need to clean the project if you are coming back to the project&#xA;pnpm clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Additional Requirements&lt;/h4&gt; &#xA;&lt;p&gt;You may need to install Sharp. If you see an error when starting up, try installing it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm install --include=optional sharp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Community &amp;amp; contact&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elizaos/eliza/issues&#34;&gt;GitHub Issues&lt;/a&gt;. Best for: bugs you encounter using Eliza, and feature proposals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/ai16z&#34;&gt;Discord&lt;/a&gt;. Best for: sharing your applications and hanging out with the community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/elizaos/eliza/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=elizaos/eliza&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#elizaos/eliza&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=elizaos/eliza&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>anti-work/shortest</title>
    <updated>2025-01-05T01:42:23Z</updated>
    <id>tag:github.com,2025-01-05:/anti-work/shortest</id>
    <link href="https://github.com/anti-work/shortest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QA via natural language AI tests&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/57d23950-206b-4640-a649-66a175660ade&#34; alt=&#34;Shortest logo&#34; width=&#34;128&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Shortest&lt;/h1&gt; &#xA;&lt;p&gt;AI-powered natural language end-to-end testing framework.&lt;/p&gt; &#xA;&lt;video src=&#34;https://github.com/user-attachments/assets/d443279e-7364-452b-9f50-0c8dd0cf55fc&#34; controls autoplay loop muted&gt;&#xA;  Your browser does not support the video tag. &#xA;&lt;/video&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Natural language E2E testing framework&lt;/li&gt; &#xA; &lt;li&gt;AI-powered test execution using Anthropic Claude API&lt;/li&gt; &#xA; &lt;li&gt;Built on Playwright&lt;/li&gt; &#xA; &lt;li&gt;GitHub integration with 2FA support&lt;/li&gt; &#xA; &lt;li&gt;Email validation with Mailosaur&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Shortest in your project&lt;/h2&gt; &#xA;&lt;p&gt;If helpful, &lt;a href=&#34;https://github.com/anti-work/shortest/issues/143#issuecomment-2564488173&#34;&gt;here&#39;s a short video&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -D @antiwork/shortest&#xA;# or&#xA;pnpm add -D @antiwork/shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;.shortest/&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; (where Shortest stores screenshots and caching of each test run):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;.shortest/&#34; &amp;gt;&amp;gt; .gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Determine your test entry and add your Anthropic API key in config file: &lt;code&gt;shortest.config.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import type { ShortestConfig } from &#34;@antiwork/shortest&#34;;&#xA;&#xA;export default {&#xA;  headless: false,&#xA;  baseUrl: &#34;http://localhost:3000&#34;,&#xA;  testPattern: &#34;**/*.test.ts&#34;,&#xA;  anthropicKey: process.env.ANTHROPIC_API_KEY,&#xA;} satisfies ShortestConfig;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Write your test in your test directory: &lt;code&gt;app/__tests__/login.test.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#34;@antiwork/shortest&#34;;&#xA;&#xA;shortest(&#34;Login to the app using email and password&#34;, {&#xA;  username: process.env.GITHUB_USERNAME,&#xA;  password: process.env.GITHUB_PASSWORD,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using callback functions&lt;/h3&gt; &#xA;&lt;p&gt;You can also use callback functions to add additional assertions and other logic. AI will execute the callback function after the test execution in browser is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#34;@antiwork/shortest&#34;;&#xA;import { db } from &#34;@/lib/db/drizzle&#34;;&#xA;import { users } from &#34;@/lib/db/schema&#34;;&#xA;import { eq } from &#34;drizzle-orm&#34;;&#xA;&#xA;shortest(&#34;Login to the app using username and password&#34;, {&#xA;  username: process.env.USERNAME,&#xA;  password: process.env.PASSWORD,&#xA;}).after(async ({ page }) =&amp;gt; {&#xA;  // Get current user&#39;s clerk ID from the page&#xA;  const clerkId = await page.evaluate(() =&amp;gt; {&#xA;    return window.localStorage.getItem(&#34;clerk-user&#34;);&#xA;  });&#xA;&#xA;  if (!clerkId) {&#xA;    throw new Error(&#34;User not found in database&#34;);&#xA;  }&#xA;&#xA;  // Query the database&#xA;  const [user] = await db&#xA;    .select()&#xA;    .from(users)&#xA;    .where(eq(users.clerkId, clerkId))&#xA;    .limit(1);&#xA;&#xA;  expect(user).toBeDefined();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lifecycle hooks&lt;/h3&gt; &#xA;&lt;p&gt;You can use lifecycle hooks to run code before and after the test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#34;@antiwork/shortest&#34;;&#xA;&#xA;shortest.beforeAll(async ({ page }) =&amp;gt; {&#xA;  await clerkSetup({&#xA;    frontendApiUrl:&#xA;      process.env.PLAYWRIGHT_TEST_BASE_URL ?? &#34;http://localhost:3000&#34;,&#xA;  });&#xA;});&#xA;&#xA;shortest.beforeEach(async ({ page }) =&amp;gt; {&#xA;  await clerk.signIn({&#xA;    page,&#xA;    signInParams: {&#xA;      strategy: &#34;email_code&#34;,&#xA;      identifier: &#34;iffy+clerk_test@example.com&#34;,&#xA;    },&#xA;  });&#xA;});&#xA;&#xA;shortest.afterEach(async ({ page }) =&amp;gt; {&#xA;  await page.close();&#xA;});&#xA;&#xA;shortest.afterAll(async ({ page }) =&amp;gt; {&#xA;  await clerk.signOut({ page });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chaining tests&lt;/h3&gt; &#xA;&lt;p&gt;Shortest supports flexible test chaining patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// Sequential test chain&#xA;shortest([&#xA;  &#34;user can login with email and password&#34;,&#xA;  &#34;user can modify their account-level refund policy&#34;,&#xA;]);&#xA;&#xA;// Reusable test flows&#xA;const loginAsLawyer = &#34;login as lawyer with valid credentials&#34;;&#xA;const loginAsContractor = &#34;login as contractor with valid credentials&#34;;&#xA;const allAppActions = [&#34;send invoice to company&#34;, &#34;view invoices&#34;];&#xA;&#xA;// Combine flows with spread operator&#xA;shortest([loginAsLawyer, ...allAppActions]);&#xA;shortest([loginAsContractor, ...allAppActions]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API Testing&lt;/h3&gt; &#xA;&lt;p&gt;Test API endpoints using natural language&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;const req = new APIRequest({&#xA;  baseURL: API_BASE_URI,&#xA;});&#xA;&#xA;shortest(&#xA;  &#34;Ensure the response contains only active users&#34;,&#xA;  req.fetch({&#xA;    url: &#34;/users&#34;,&#xA;    method: &#34;GET&#34;,&#xA;    params: new URLSearchParams({&#xA;      active: true,&#xA;    }),&#xA;  }),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;shortest(`&#xA;  Test the API GET endpoint ${API_BASE_URI}/users with query parameter { &#34;active&#34;: true }&#xA;  Expect the response to contain only active users&#xA;`);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm shortest                              # Run all tests&#xA;pnpm shortest __tests__/login.test.ts      # Run specific test&#xA;pnpm shortest --headless                   # Run in headless mode using cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find example tests in the &lt;a href=&#34;https://raw.githubusercontent.com/anti-work/shortest/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub 2FA login setup&lt;/h3&gt; &#xA;&lt;p&gt;Shortest currently supports login using Github 2FA. For GitHub authentication tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to your repository settings&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &#34;Password and Authentication&#34;&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Authenticator App&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Use your authenticator app&#34;&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Setup key&#34; to obtain the OTP secret&lt;/li&gt; &#xA; &lt;li&gt;Add the OTP secret to your &lt;code&gt;.env.local&lt;/code&gt; file or use the Shortest CLI to add it&lt;/li&gt; &#xA; &lt;li&gt;Enter the 2FA code displayed in your terminal into Github&#39;s Authenticator setup page to complete the process&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shortest --github-code --secret=&amp;lt;OTP_SECRET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment setup&lt;/h3&gt; &#xA;&lt;p&gt;Required in &lt;code&gt;.env.local&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ANTHROPIC_API_KEY=your_api_key&#xA;GITHUB_TOTP_SECRET=your_secret  # Only for GitHub auth tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CI setup&lt;/h3&gt; &#xA;&lt;p&gt;You can run Shortest in your CI/CD pipeline by running tests in headless mode. Make sure to add your Anthropic API key to your CI/CD pipeline secrets.&lt;/p&gt; &#xA;&lt;h2&gt;Web app development&lt;/h2&gt; &#xA;&lt;p&gt;This guide will help you set up the Shortest web app for local development.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React &amp;gt;=19.0.0 (if using with Next.js 14+ or Server Actions)&lt;/li&gt; &#xA; &lt;li&gt;Next.js &amp;gt;=14.0.0 (if using Server Components/Actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Using this package with React 18 in Next.js 14+ projects may cause type conflicts with Server Actions and &lt;code&gt;useFormStatus&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you encounter type errors with form actions or React hooks, ensure you&#39;re using React 19&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/anti-work/shortest.git&#xA;cd shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g pnpm&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Environment setup&lt;/h3&gt; &#xA;&lt;h4&gt;For Anti-Work team members&lt;/h4&gt; &#xA;&lt;p&gt;Pull Vercel env vars:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm i -g vercel&#xA;vercel link&#xA;vercel env pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For other contributors&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm run setup&lt;/code&gt; to configure the environment variables.&lt;/li&gt; &#xA; &lt;li&gt;The setup wizard will ask you for information. Refer to &#34;Services Configuration&#34; section below for more details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Set up the database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm drizzle-kit generate&#xA;pnpm db:migrate&#xA;pnpm db:seed # creates stripe products, currently unused&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Services configuration&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to set up the following services for local development. If you&#39;re not a Anti-Work Vercel team member, you&#39;ll need to either run the setup wizard &lt;code&gt;pnpm run setup&lt;/code&gt; or manually configure each of these services and add the corresponding environment variables to your &lt;code&gt;.env.local&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Clerk&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to &lt;a href=&#34;https://clerk.com&#34;&gt;clerk.com&lt;/a&gt; and create a new app.&lt;/li&gt; &#xA;  &lt;li&gt;Name it whatever you like and &lt;strong&gt;disable all login methods except GitHub&lt;/strong&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/1de7aebc-8e9d-431a-ae13-af60635307a1&#34; alt=&#34;Clerk App Login&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Once created, copy the environment variables to your &lt;code&gt;.env.local&lt;/code&gt; file. &lt;img src=&#34;https://github.com/user-attachments/assets/df3381e6-017a-4e01-8bd3-5793e5f5d31e&#34; alt=&#34;Clerk Env Variables&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;In the Clerk dashboard, disable the &#34;Require the same device and browser&#34; setting to ensure tests with Mailosaur work properly.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vercel Postgres&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your dashboard at &lt;a href=&#34;https://vercel.com&#34;&gt;vercel.com&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Navigate to the Storage tab and click the &lt;code&gt;Create Database&lt;/code&gt; button. &lt;img src=&#34;https://github.com/user-attachments/assets/acdf3ba7-31a6-498b-860c-171018d5ba02&#34; alt=&#34;Vercel Create Database&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Choose &lt;code&gt;Postgres&lt;/code&gt; from the &lt;code&gt;Browse Storage&lt;/code&gt; menu. &lt;img src=&#34;https://github.com/user-attachments/assets/9ad2a391-5213-4f31-a6c3-b9e54c69bb2e&#34; alt=&#34;Neon Postgres&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Copy your environment variables from the &lt;code&gt;Quickstart&lt;/code&gt; &lt;code&gt;.env.local&lt;/code&gt; tab. &lt;img src=&#34;https://github.com/user-attachments/assets/e48f1d96-2fd6-4e2e-aaa6-eeb5922cc521&#34; alt=&#34;Vercel Postgres .env.local&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Anthropic&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your dashboard at &lt;a href=&#34;https://anthropic.com&#34;&gt;anthropic.com&lt;/a&gt; and grab your API Key. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Note: If you&#39;ve never done this before, you will need to answer some questions and likely load your account with a balance. Not much is needed to test the app. &lt;img src=&#34;https://github.com/user-attachments/assets/0905ed4b-5815-4d50-bf43-8713a4397674&#34; alt=&#34;Anthropic API Key&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Stripe&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your &lt;code&gt;Developers&lt;/code&gt; dashboard at &lt;a href=&#34;https://stripe.com&#34;&gt;stripe.com&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Turn on &lt;code&gt;Test mode&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Go to the &lt;code&gt;API Keys&lt;/code&gt; tab and copy your &lt;code&gt;Secret key&lt;/code&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/0830b226-f2c2-4b92-a28f-f4682ad03ec0&#34; alt=&#34;Stripe Secret Key&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Go to the terminal of your project and type &lt;code&gt;pnpm run stripe:webhooks&lt;/code&gt;. It will prompt you to login with a code then give you your &lt;code&gt;STRIPE_WEBHOOK_SECRET&lt;/code&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/b02531ed-5c31-40ba-8483-32880aa3ca36&#34; alt=&#34;Stripe Webhook Secret&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GitHub OAuth&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a GitHub OAuth App:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Go to your GitHub account settings.&lt;/li&gt; &#xA;    &lt;li&gt;Navigate to &lt;code&gt;Developer settings&lt;/code&gt; &amp;gt; &lt;code&gt;OAuth Apps&lt;/code&gt; &amp;gt; &lt;code&gt;New OAuth App&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;Fill in the application details: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Application name&lt;/strong&gt;: Choose any name for your app&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Homepage URL&lt;/strong&gt;: Set to &lt;code&gt;http://localhost:3000&lt;/code&gt; for local development&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Authorization callback URL&lt;/strong&gt;: Use the Clerk-provided callback URL (found in below image) &lt;img src=&#34;https://github.com/user-attachments/assets/1af635fd-dedc-401c-a45a-159cb20bb209&#34; alt=&#34;Github OAuth App&#34;&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Configure Clerk with GitHub OAuth:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Go to your Clerk dashboard.&lt;/li&gt; &#xA;    &lt;li&gt;Navigate to &lt;code&gt;Configure&lt;/code&gt; &amp;gt; &lt;code&gt;SSO Connections&lt;/code&gt; &amp;gt; &lt;code&gt;GitHub&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;Select &lt;code&gt;Use custom credentials&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Enter your &lt;code&gt;Client ID&lt;/code&gt; and &lt;code&gt;Client Secret&lt;/code&gt; from the GitHub OAuth app you just created.&lt;/li&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;repo&lt;/code&gt; to the &lt;code&gt;Scopes&lt;/code&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/31d414e1-4e1e-4725-8649-ec1826c6e53e&#34; alt=&#34;Clerk Custom Credentials&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt;&#xA; &lt;/ol&gt;&#xA;&lt;/details&gt;   &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Mailosaur&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to &lt;a href=&#34;https://mailosaur.com&#34;&gt;mailosaur.com&lt;/a&gt; and create an account.&lt;/li&gt; &#xA;  &lt;li&gt;Create a new server and copy the Server ID.&lt;/li&gt; &#xA;  &lt;li&gt;Go to your API settings and copy your API key. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;You&#39;ll need both the Server ID and API key for your environment variables: - &lt;code&gt;MAILOSAUR_API_KEY&lt;/code&gt;: Your API key - &lt;code&gt;MAILOSAUR_SERVER_ID&lt;/code&gt;: Your server ID&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt;&#xA; &lt;/ol&gt;&#xA;&lt;/details&gt;   &#xA;&lt;h3&gt;Running locally&lt;/h3&gt; &#xA;&lt;p&gt;Run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to see the app in action.&lt;/p&gt; &#xA;&lt;h2&gt;Shortest CLI development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make changes to the package source code in &lt;code&gt;packages/shortest/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test changes instantly during development (no build needed):&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm shortest:dev -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To test the actual built package:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm build:pkg&#xA;pnpm shortest --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;To test in another project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# In Shortest package directory&#xA;cd packages/shortest&#xA;pnpm pack&#xA;&#xA;# In your test project&#xA;npm install /path/to/antiwork-shortest-{version}.tgz.tgz&#xA;npx shortest -h&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>