<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-24T01:44:03Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>blakeblackshear/frigate</title>
    <updated>2024-11-24T01:44:03Z</updated>
    <id>tag:github.com,2024-11-24:/blakeblackshear/frigate</id>
    <link href="https://github.com/blakeblackshear/frigate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NVR with realtime local object detection for IP cameras&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/blakeblackshear/frigate/dev/docs/static/img/frigate.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Frigate - NVR With Realtime Object Detection for IP Cameras&lt;/h1&gt; &#xA;&lt;p&gt;A complete and local NVR designed for &lt;a href=&#34;https://www.home-assistant.io&#34;&gt;Home Assistant&lt;/a&gt; with AI object detection. Uses OpenCV and Tensorflow to perform realtime object detection locally for IP cameras.&lt;/p&gt; &#xA;&lt;p&gt;Use of a &lt;a href=&#34;https://coral.ai/products/&#34;&gt;Google Coral Accelerator&lt;/a&gt; is optional, but highly recommended. The Coral will outperform even the best CPUs and can process 100+ FPS with very little overhead.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tight integration with Home Assistant via a &lt;a href=&#34;https://github.com/blakeblackshear/frigate-hass-integration&#34;&gt;custom component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Designed to minimize resource use and maximize performance by only looking for objects when and where it is necessary&lt;/li&gt; &#xA; &lt;li&gt;Leverages multiprocessing heavily with an emphasis on realtime over processing every frame&lt;/li&gt; &#xA; &lt;li&gt;Uses a very low overhead motion detection to determine where to run object detection&lt;/li&gt; &#xA; &lt;li&gt;Object detection with TensorFlow runs in separate processes for maximum FPS&lt;/li&gt; &#xA; &lt;li&gt;Communicates over MQTT for easy integration into other systems&lt;/li&gt; &#xA; &lt;li&gt;Records video with retention settings based on detected objects&lt;/li&gt; &#xA; &lt;li&gt;24/7 recording&lt;/li&gt; &#xA; &lt;li&gt;Re-streaming via RTSP to reduce the number of connections to your camera&lt;/li&gt; &#xA; &lt;li&gt;WebRTC &amp;amp; MSE support for low-latency live view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;View the documentation at &lt;a href=&#34;https://docs.frigate.video&#34;&gt;https://docs.frigate.video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to make a donation to support development, please use &lt;a href=&#34;https://github.com/sponsors/blakeblackshear&#34;&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Live dashboard&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img width=&#34;800&#34; alt=&#34;Live dashboard&#34; src=&#34;https://github.com/blakeblackshear/frigate/assets/569905/5e713cb9-9db5-41dc-947a-6937c3bc376e&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Streamlined review workflow&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img width=&#34;800&#34; alt=&#34;Streamlined review workflow&#34; src=&#34;https://github.com/blakeblackshear/frigate/assets/569905/6fed96e8-3b18-40e5-9ddc-31e6f3c9f2ff&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Multi-camera scrubbing&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img width=&#34;800&#34; alt=&#34;Multi-camera scrubbing&#34; src=&#34;https://github.com/blakeblackshear/frigate/assets/569905/d6788a15-0eeb-4427-a8d4-80b93cae3d74&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Built-in mask and zone editor&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img width=&#34;800&#34; alt=&#34;Multi-camera scrubbing&#34; src=&#34;https://github.com/blakeblackshear/frigate/assets/569905/d7885fc3-bfe6-452f-b7d0-d957cb3e31f5&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>awslabs/multi-agent-orchestrator</title>
    <updated>2024-11-24T01:44:03Z</updated>
    <id>tag:github.com,2024-11-24:/awslabs/multi-agent-orchestrator</id>
    <link href="https://github.com/awslabs/multi-agent-orchestrator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible and powerful framework for managing multiple AI agents and handling complex conversations&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt;Multi-Agent Orchestrator&amp;nbsp;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Flexible and powerful framework for managing multiple AI agents and handling complex conversations.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/awslabs/multi-agent-orchestrator&#34;&gt;&lt;img alt=&#34;GitHub Repo&#34; src=&#34;https://img.shields.io/badge/GitHub-Repo-green.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/multi-agent-orchestrator&#34;&gt;&lt;img alt=&#34;npm&#34; src=&#34;https://img.shields.io/npm/v/multi-agent-orchestrator.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/multi-agent-orchestrator/&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/multi-agent-orchestrator.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://awslabs.github.io/multi-agent-orchestrator/&#34;&gt;&lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/badge/docs-book-blue.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üîñ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üß† &lt;strong&gt;Intelligent intent classification&lt;/strong&gt; ‚Äî Dynamically route queries to the most suitable agent based on context and content.&lt;/li&gt; &#xA; &lt;li&gt;üî§ &lt;strong&gt;Dual language support&lt;/strong&gt; ‚Äî Fully implemented in both &lt;strong&gt;Python&lt;/strong&gt; and &lt;strong&gt;TypeScript&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üåä &lt;strong&gt;Flexible agent responses&lt;/strong&gt; ‚Äî Support for both streaming and non-streaming responses from different agents.&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;Context management&lt;/strong&gt; ‚Äî Maintain and utilize conversation context across multiple agents for coherent interactions.&lt;/li&gt; &#xA; &lt;li&gt;üîß &lt;strong&gt;Extensible architecture&lt;/strong&gt; ‚Äî Easily integrate new agents or customize existing ones to fit your specific needs.&lt;/li&gt; &#xA; &lt;li&gt;üåê &lt;strong&gt;Universal deployment&lt;/strong&gt; ‚Äî Run anywhere - from AWS Lambda to your local environment or any cloud platform.&lt;/li&gt; &#xA; &lt;li&gt;üì¶ &lt;strong&gt;Pre-built agents and classifiers&lt;/strong&gt; ‚Äî A variety of ready-to-use agents and multiple classifier implementations available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s the Multi-Agent Orchestrator ‚ùì&lt;/h2&gt; &#xA;&lt;p&gt;The Multi-Agent Orchestrator is a flexible framework for managing multiple AI agents and handling complex conversations. It intelligently routes queries and maintains context across interactions.&lt;/p&gt; &#xA;&lt;p&gt;The system offers pre-built components for quick deployment, while also allowing easy integration of custom agents and conversation messages storage solutions.&lt;/p&gt; &#xA;&lt;p&gt;This adaptability makes it suitable for a wide range of applications, from simple chatbots to sophisticated AI systems, accommodating diverse requirements and scaling efficiently.&lt;/p&gt; &#xA;&lt;h2&gt;üèóÔ∏è High-level architecture flow diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/img/flow.jpg&#34; alt=&#34;High-level architecture flow diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The process begins with user input, which is analyzed by a Classifier.&lt;/li&gt; &#xA; &lt;li&gt;The Classifier leverages both Agents&#39; Characteristics and Agents&#39; Conversation history to select the most appropriate agent for the task.&lt;/li&gt; &#xA; &lt;li&gt;Once an agent is selected, it processes the user input.&lt;/li&gt; &#xA; &lt;li&gt;The orchestrator then saves the conversation, updating the Agents&#39; Conversation history, before delivering the response back to the user.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üí¨ Demo App&lt;/h2&gt; &#xA;&lt;p&gt;To quickly get a feel for the Multi-Agent Orchestrator, we&#39;ve provided a Demo App with a few basic agents. This interactive demo showcases the orchestrator&#39;s capabilities in a user-friendly interface. To learn more about setting up and running the demo app, please refer to our &lt;a href=&#34;https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/&#34;&gt;Demo App&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;In the screen recording below, we demonstrate an extended version of the demo app that uses 6 specialized agents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Travel Agent&lt;/strong&gt;: Powered by an Amazon Lex Bot&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Weather Agent&lt;/strong&gt;: Utilizes a Bedrock LLM Agent with a tool to query the open-meteo API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Restaurant Agent&lt;/strong&gt;: Implemented as an Amazon Bedrock Agent&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Math Agent&lt;/strong&gt;: Utilizes a Bedrock LLM Agent with two tools for executing mathematical operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tech Agent&lt;/strong&gt;: A Bedrock LLM Agent designed to answer questions on technical topics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Health Agent&lt;/strong&gt;: A Bedrock LLM Agent focused on addressing health-related queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Watch as the system seamlessly switches context between diverse topics, from booking flights to checking weather, solving math problems, and providing health information. Notice how the appropriate agent is selected for each query, maintaining coherence even with brief follow-up inputs.&lt;/p&gt; &#xA;&lt;p&gt;The demo highlights the system&#39;s ability to handle complex, multi-turn conversations while preserving context and leveraging specialized agents across various domains.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/img/demo-app.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To quickly get a feel for the Multi-Agent Orchestrator, check out our &lt;a href=&#34;https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/&#34;&gt;Demo App&lt;/a&gt;. Additional code examples are available in both the documentation and the &lt;code&gt;examples&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;üéØ Examples &amp;amp; Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Get hands-on experience with the Multi-Agent Orchestrator through our diverse set of examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ready-to-run Scripts&lt;/strong&gt;: Start locally with our collection of standalone scripts in both Python and TypeScript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Demo Applications&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/&#34;&gt;Chat Demo App&lt;/a&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Explore multiple specialized agents handling various domains like travel, weather, math, and health&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/ecommerce-support-simulator/&#34;&gt;E-commerce Support Simulator&lt;/a&gt;: Experience AI-powered customer support with: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Automated response generation for common queries&lt;/li&gt; &#xA;     &lt;li&gt;Intelligent routing of complex issues to human support&lt;/li&gt; &#xA;     &lt;li&gt;Real-time chat and email-style communication&lt;/li&gt; &#xA;     &lt;li&gt;Human-in-the-loop interactions for complex cases&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sample Projects&lt;/strong&gt;: Explore our example implementations in the &lt;code&gt;examples&lt;/code&gt; folder: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/chat-demo-app&#34;&gt;&lt;code&gt;chat-demo-app&lt;/code&gt;&lt;/a&gt;: Web-based chat interface with multiple specialized agents&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/ecommerce-support-simulator&#34;&gt;&lt;code&gt;ecommerce-support-simulator&lt;/code&gt;&lt;/a&gt;: AI-powered customer support system&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/chat-chainlit-app&#34;&gt;&lt;code&gt;chat-chainlit-app&lt;/code&gt;&lt;/a&gt;: Chat application built with Chainlit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/fast-api-streaming&#34;&gt;&lt;code&gt;fast-api-streaming&lt;/code&gt;&lt;/a&gt;: FastAPI implementation with streaming support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/text-2-structured-output&#34;&gt;&lt;code&gt;text-2-structured-output&lt;/code&gt;&lt;/a&gt;: Natural Language to Structured Data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All examples are available in both Python and TypeScript implementations. Check out our &lt;a href=&#34;https://awslabs.github.io/multi-agent-orchestrator/&#34;&gt;documentation&lt;/a&gt; for comprehensive guides on setting up and using the Multi-Agent Orchestrator!&lt;/p&gt; &#xA;&lt;h2&gt;üåü Use cases and implementations&lt;/h2&gt; &#xA;&lt;p&gt;Discover creative implementations and diverse applications of the Multi-Agent Orchestrator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://community.aws/content/2lCi8jEKydhDm8eE8QFIQ5K23pF/from-bonjour-to-boarding-pass-multilingual-ai-chatbot-for-flight-reservations&#34;&gt;From &#39;Bonjour&#39; to &#39;Boarding Pass&#39;: Multilingual AI Chatbot for Flight Reservations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This article demonstrates how to build a multilingual chatbot using the Multi-Agent Orchestrator framework. The article explains how to use an &lt;strong&gt;Amazon Lex&lt;/strong&gt; bot as an agent, along with 2 other new agents to make it work in many languages with just a few lines of code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://community.aws/content/2lq6cYYwTYGc7S3Zmz28xZoQNQj/beyond-auto-replies-building-an-ai-powered-e-commerce-support-system&#34;&gt;Beyond Auto-Replies: Building an AI-Powered E-commerce Support system&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This article demonstrates how to build an AI-driven multi-agent system for automated e-commerce customer email support. It covers the architecture and setup of specialized AI agents using the Multi-Agent Orchestrator framework, integrating automated processing with human-in-the-loop oversight. The guide explores email ingestion, intelligent routing, automated response generation, and human verification, providing a comprehensive approach to balancing AI efficiency with human expertise in customer support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://community.aws/content/2mt7CFG7xg4yw6GRHwH9akhg0oD/speak-up-ai-voicing-your-agents-with-amazon-connect-lex-and-bedrock&#34;&gt;Speak Up, AI: Voicing Your Agents with Amazon Connect, Lex, and Bedrock&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This article demonstrates how to build an AI customer call center. It covers the architecture and setup of specialized AI agents using the Multi-Agent Orchestrator framework interacting with voice via &lt;strong&gt;Amazon Connect&lt;/strong&gt; and &lt;strong&gt;Amazon Lex&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TypeScript Version&lt;/h3&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install multi-agent-orchestrator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;The following example demonstrates how to use the Multi-Agent Orchestrator with two different types of agents: a Bedrock LLM Agent with Converse API support and a Lex Bot Agent. This showcases the flexibility of the system in integrating various AI services.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { MultiAgentOrchestrator, BedrockLLMAgent, LexBotAgent } from &#34;multi-agent-orchestrator&#34;;&#xA;&#xA;const orchestrator = new MultiAgentOrchestrator();&#xA;&#xA;// Add a Bedrock LLM Agent with Converse API support&#xA;orchestrator.addAgent(&#xA;  new BedrockLLMAgent({&#xA;      name: &#34;Tech Agent&#34;,&#xA;      description:&#xA;        &#34;Specializes in technology areas including software development, hardware, AI, cybersecurity, blockchain, cloud computing, emerging tech innovations, and pricing/costs related to technology products and services.&#34;,&#xA;      streaming: true&#xA;  })&#xA;);&#xA;&#xA;// Add a Lex Bot Agent for handling travel-related queries&#xA;orchestrator.addAgent(&#xA;  new LexBotAgent({&#xA;    name: &#34;Travel Agent&#34;,&#xA;    description: &#34;Helps users book and manage their flight reservations&#34;,&#xA;    botId: process.env.LEX_BOT_ID,&#xA;    botAliasId: process.env.LEX_BOT_ALIAS_ID,&#xA;    localeId: &#34;en_US&#34;,&#xA;  })&#xA;);&#xA;&#xA;// Example usage&#xA;const response = await orchestrator.routeRequest(&#xA;  &#34;I want to book a flight&#34;,&#xA;  &#39;user123&#39;,&#xA;  &#39;session456&#39;&#xA;);&#xA;&#xA;// Handle the response (streaming or non-streaming)&#xA;if (response.streaming == true) {&#xA;    console.log(&#34;\n** RESPONSE STREAMING ** \n&#34;);&#xA;    // Send metadata immediately&#xA;    console.log(`&amp;gt; Agent ID: ${response.metadata.agentId}`);&#xA;    console.log(`&amp;gt; Agent Name: ${response.metadata.agentName}`);&#xA;    console.log(`&amp;gt; User Input: ${response.metadata.userInput}`);&#xA;    console.log(`&amp;gt; User ID: ${response.metadata.userId}`);&#xA;    console.log(`&amp;gt; Session ID: ${response.metadata.sessionId}`);&#xA;    console.log(&#xA;      `&amp;gt; Additional Parameters:`,&#xA;      response.metadata.additionalParams&#xA;    );&#xA;    console.log(`\n&amp;gt; Response: `);&#xA;&#xA;    // Stream the content&#xA;    for await (const chunk of response.output) {&#xA;      if (typeof chunk === &#34;string&#34;) {&#xA;        process.stdout.write(chunk);&#xA;      } else {&#xA;        console.error(&#34;Received unexpected chunk type:&#34;, typeof chunk);&#xA;      }&#xA;    }&#xA;&#xA;} else {&#xA;    // Handle non-streaming response (AgentProcessingResult)&#xA;    console.log(&#34;\n** RESPONSE ** \n&#34;);&#xA;    console.log(`&amp;gt; Agent ID: ${response.metadata.agentId}`);&#xA;    console.log(`&amp;gt; Agent Name: ${response.metadata.agentName}`);&#xA;    console.log(`&amp;gt; User Input: ${response.metadata.userInput}`);&#xA;    console.log(`&amp;gt; User ID: ${response.metadata.userId}`);&#xA;    console.log(`&amp;gt; Session ID: ${response.metadata.sessionId}`);&#xA;    console.log(&#xA;      `&amp;gt; Additional Parameters:`,&#xA;      response.metadata.additionalParams&#xA;    );&#xA;    console.log(`\n&amp;gt; Response: ${response.output}`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python Version&lt;/h3&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Optional: Set up a virtual environment&#xA;python -m venv venv&#xA;source venv/bin/activate  # On Windows use `venv\Scripts\activate`&#xA;pip install multi-agent-orchestrator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;Here&#39;s an equivalent Python example demonstrating the use of the Multi-Agent Orchestrator with a Bedrock LLM Agent and a Lex Bot Agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;import asyncio&#xA;from multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator&#xA;from multi_agent_orchestrator.agents import BedrockLLMAgent, LexBotAgent, BedrockLLMAgentOptions, LexBotAgentOptions, AgentCallbacks&#xA;&#xA;orchestrator = MultiAgentOrchestrator()&#xA;&#xA;class BedrockLLMAgentCallbacks(AgentCallbacks):&#xA;    def on_llm_new_token(self, token: str) -&amp;gt; None:&#xA;        # handle response streaming here&#xA;        print(token, end=&#39;&#39;, flush=True)&#xA;&#xA;tech_agent = BedrockLLMAgent(BedrockLLMAgentOptions(&#xA;  name=&#34;Tech Agent&#34;,&#xA;  streaming=True,&#xA;  description=&#34;Specializes in technology areas including software development, hardware, AI, \&#xA;  cybersecurity, blockchain, cloud computing, emerging tech innovations, and pricing/costs \&#xA;  related to technology products and services.&#34;,&#xA;  model_id=&#34;anthropic.claude-3-sonnet-20240229-v1:0&#34;,&#xA;  callbacks=BedrockLLMAgentCallbacks()&#xA;))&#xA;orchestrator.add_agent(tech_agent)&#xA;&#xA;&#xA;# Add a Lex Bot Agent for handling travel-related queries&#xA;orchestrator.add_agent(&#xA;    LexBotAgent(LexBotAgentOptions(&#xA;        name=&#34;Travel Agent&#34;,&#xA;        description=&#34;Helps users book and manage their flight reservations&#34;,&#xA;        bot_id=os.environ.get(&#39;LEX_BOT_ID&#39;),&#xA;        bot_alias_id=os.environ.get(&#39;LEX_BOT_ALIAS_ID&#39;),&#xA;        locale_id=&#34;en_US&#34;,&#xA;    ))&#xA;)&#xA;&#xA;async def main():&#xA;    # Example usage&#xA;    response = await orchestrator.route_request(&#xA;        &#34;I want to book a flight&#34;,&#xA;        &#39;user123&#39;,&#xA;        &#39;session456&#39;&#xA;    )&#xA;&#xA;    # Handle the response (streaming or non-streaming)&#xA;    if response.streaming:&#xA;        print(&#34;\n** RESPONSE STREAMING ** \n&#34;)&#xA;        # Send metadata immediately&#xA;        print(f&#34;&amp;gt; Agent ID: {response.metadata.agent_id}&#34;)&#xA;        print(f&#34;&amp;gt; Agent Name: {response.metadata.agent_name}&#34;)&#xA;        print(f&#34;&amp;gt; User Input: {response.metadata.user_input}&#34;)&#xA;        print(f&#34;&amp;gt; User ID: {response.metadata.user_id}&#34;)&#xA;        print(f&#34;&amp;gt; Session ID: {response.metadata.session_id}&#34;)&#xA;        print(f&#34;&amp;gt; Additional Parameters: {response.metadata.additional_params}&#34;)&#xA;        print(&#34;\n&amp;gt; Response: &#34;)&#xA;&#xA;        # Stream the content&#xA;        async for chunk in response.output:&#xA;            if isinstance(chunk, str):&#xA;                print(chunk, end=&#39;&#39;, flush=True)&#xA;            else:&#xA;                print(f&#34;Received unexpected chunk type: {type(chunk)}&#34;, file=sys.stderr)&#xA;&#xA;    else:&#xA;        # Handle non-streaming response (AgentProcessingResult)&#xA;        print(&#34;\n** RESPONSE ** \n&#34;)&#xA;        print(f&#34;&amp;gt; Agent ID: {response.metadata.agent_id}&#34;)&#xA;        print(f&#34;&amp;gt; Agent Name: {response.metadata.agent_name}&#34;)&#xA;        print(f&#34;&amp;gt; User Input: {response.metadata.user_input}&#34;)&#xA;        print(f&#34;&amp;gt; User ID: {response.metadata.user_id}&#34;)&#xA;        print(f&#34;&amp;gt; Session ID: {response.metadata.session_id}&#34;)&#xA;        print(f&#34;&amp;gt; Additional Parameters: {response.metadata.additional_params}&#34;)&#xA;        print(f&#34;\n&amp;gt; Response: {response.output.content}&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    asyncio.run(main())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These examples showcase:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The use of a Bedrock LLM Agent with Converse API support, allowing for multi-turn conversations.&lt;/li&gt; &#xA; &lt;li&gt;Integration of a Lex Bot Agent for specialized tasks (in this case, travel-related queries).&lt;/li&gt; &#xA; &lt;li&gt;The orchestrator&#39;s ability to route requests to the most appropriate agent based on the input.&lt;/li&gt; &#xA; &lt;li&gt;Handling of both streaming and non-streaming responses from different types of agents.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/corneliucroitoru/&#34;&gt;Corneliu Croitoru&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/anthonybernabeu/&#34;&gt;Anthony Bernabeu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üë• Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Big shout out to our awesome contributors! Thank you for making this project better! üåü ‚≠ê üöÄ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/multi-agent-orchestrator/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=awslabs/multi-agent-orchestrator&amp;amp;max=2000&amp;amp;time=1700573333&#34; alt=&#34;contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for guidelines on how to propose bugfixes and improvements.&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache 2.0 licence - see the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/multi-agent-orchestrator/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ Font License&lt;/h2&gt; &#xA;&lt;p&gt;This project uses the JetBrainsMono NF font, licensed under the SIL Open Font License 1.1. For full license details, see &lt;a href=&#34;https://github.com/JetBrains/JetBrainsMono/raw/master/OFL.txt&#34;&gt;FONT-LICENSE.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gitroomhq/postiz-app</title>
    <updated>2024-11-24T01:44:03Z</updated>
    <id>tag:github.com,2024-11-24:/gitroomhq/postiz-app</id>
    <link href="https://github.com/gitroomhq/postiz-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì® The ultimate social media scheduling tool, with a bunch of AI ü§ñ&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; Please help us out on Product Hunt,&lt;br&gt;to give you the best open-source&lt;br&gt;social media scheduling tool in the world üåéüëá &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.producthunt.com/posts/postiz?embed=true&amp;amp;utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-postiz&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=606350&amp;amp;theme=light&#34; alt=&#34;Postiz - Your ultimate AI social media scheduling tool  | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://postiz.com&#34; target=&#34;_blank&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/user-attachments/assets/765e9d72-3ee7-4a56-9d59-a2c9befe2311&#34;&gt; &#xA;   &lt;img alt=&#34;Postiz Logo&#34; src=&#34;https://github.com/user-attachments/assets/f0d30d70-dddb-4142-8876-e9aa6ed1cb99&#34; width=&#34;280&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;strong&gt; &lt;h2&gt;Your ultimate AI social media scheduling tool&lt;/h2&gt;&lt;br&gt; &lt;a href=&#34;https://postiz.com&#34;&gt;Postiz&lt;/a&gt;: An alternative to: Buffer.com, Hypefury, Twitter Hunter, Etc...&lt;br&gt;&lt;br&gt; &lt;/strong&gt; Postiz offers everything you need to manage your social media posts,&#xA; &lt;br&gt;build an audience, capture leads, and grow your business. &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;flex&#34; align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;img alt=&#34;Instagram&#34; src=&#34;https://postiz.com/svgs/socials/Instagram.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;Youtube&#34; src=&#34;https://postiz.com/svgs/socials/Youtube.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;Dribbble&#34; src=&#34;https://postiz.com/svgs/socials/Dribbble.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;Linkedin&#34; src=&#34;https://postiz.com/svgs/socials/Linkedin.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;Reddit&#34; src=&#34;https://postiz.com/svgs/socials/Reddit.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;TikTok&#34; src=&#34;https://postiz.com/svgs/socials/TikTok.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;Facebook&#34; src=&#34;https://postiz.com/svgs/socials/Facebook.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;Pinterest&#34; src=&#34;https://postiz.com/svgs/socials/Pinterest.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;Threads&#34; src=&#34;https://postiz.com/svgs/socials/Threads.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;X&#34; src=&#34;https://postiz.com/svgs/socials/X.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;X&#34; src=&#34;https://postiz.com/svgs/socials/Slack.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;X&#34; src=&#34;https://postiz.com/svgs/socials/Discord.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;X&#34; src=&#34;https://postiz.com/svgs/socials/Mastodon.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA; &lt;img alt=&#34;X&#34; src=&#34;https://postiz.com/svgs/socials/Bluesky.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://docs.postiz.com&#34; rel=&#34;dofollow&#34;&gt;&lt;strong&gt;Explore the docs ¬ª&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://platform.postiz.com&#34;&gt;Register&lt;/a&gt; ¬∑ &lt;a href=&#34;https://discord.postiz.com&#34;&gt;Join Our Discord&lt;/a&gt; ¬∑ &lt;a href=&#34;https://twitter.com/nevodavid&#34;&gt;X&lt;/a&gt; ¬∑ &lt;a href=&#34;https://gitroom.com&#34;&gt;Gitroom&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://github.com/user-attachments/assets/05436a01-19c8-4827-b57f-05a5e7637a67&#34; width=&#34;100%&#34;&gt;&lt;/video&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/a27ee220-beb7-4c7e-8c1b-2c44301f82ef&#34; alt=&#34;Image 1&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/eb5f5f15-ed90-47fc-811c-03ccba6fa8a2&#34; alt=&#34;Image 2&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/d51786ee-ddd8-4ef8-8138-5192e9cfe7c3&#34; alt=&#34;Image 3&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/91f83c89-22f6-43d6-b7aa-d2d3378289fb&#34; alt=&#34;Image 4&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Schedule all your social media posts (many AI features)&lt;/li&gt; &#xA; &lt;li&gt;Measure your work with analytics.&lt;/li&gt; &#xA; &lt;li&gt;Collaborate with other team members to exchange or buy posts.&lt;/li&gt; &#xA; &lt;li&gt;Invite your team members to collaborate, comment, and schedule posts.&lt;/li&gt; &#xA; &lt;li&gt;At the moment there is no difference between the hosted version to the self-hosted version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tech Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NX (Monorepo)&lt;/li&gt; &#xA; &lt;li&gt;NextJS (React)&lt;/li&gt; &#xA; &lt;li&gt;NestJS&lt;/li&gt; &#xA; &lt;li&gt;Prisma (Default to PostgreSQL)&lt;/li&gt; &#xA; &lt;li&gt;Redis (BullMQ)&lt;/li&gt; &#xA; &lt;li&gt;Resend (email notifications)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To have the project up and running, please follow the &lt;a href=&#34;https://docs.postiz.com/quickstart&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository&#39;s source code is available under the &lt;a href=&#34;https://raw.githubusercontent.com/gitroomhq/postiz-app/main/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.g2.com/products/postiz/take_survey&#34; target=&#34;blank&#34;&gt;&lt;img alt=&#34;g2&#34; src=&#34;https://github.com/user-attachments/assets/892cb74c-0b49-4589-b2f5-fbdbf7a98f66&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>