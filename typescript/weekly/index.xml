<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T02:04:34Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>c121914yu/FastGPT</title>
    <updated>2023-05-21T02:04:34Z</updated>
    <id>tag:github.com,2023-05-21:/c121914yu/FastGPT</id>
    <link href="https://github.com/c121914yu/FastGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A platform that uses the OpenAI API to quickly build an AI knowledge base, supporting many-to-many relationships.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fast GPT&lt;/h1&gt; &#xA;&lt;p&gt;Fast GPT 允许你使用自己的 openai API KEY 来快速的调用 openai 接口，目前集成了 gpt35 和 embedding. 可构建自己的知识库。&lt;/p&gt; &#xA;&lt;h2&gt;🛸 在线体验&lt;/h2&gt; &#xA;&lt;p&gt;🎉 &lt;a href=&#34;https://fastgpt.run/&#34;&gt;fastgpt.run&lt;/a&gt; （国内版）&lt;br&gt; 🎉 &lt;a href=&#34;https://ai.fastgpt.run/&#34;&gt;ai.fastgpt.run&lt;/a&gt; （海外版）&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/c121914yu/FastGPT/main/docs/imgs/demo.png?raw=true&#34; alt=&#34;Demo&#34; title=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;知识库原理图&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/c121914yu/FastGPT/main/docs/imgs/KBProcess.jpg?raw=true&#34; alt=&#34;KBProcess&#34; title=&#34;KBProcess&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👨‍💻 开发&lt;/h2&gt; &#xA;&lt;p&gt;项目技术栈: NextJs + TS + ChakraUI + Mongo + Postgres（Vector 插件）&lt;br&gt; 这是一个平台项目，非单机项目，除了模型调用外还涉及非常多用户的内容。&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/c121914yu/FastGPT/main/docs/dev/README.md&#34;&gt;本地开发 Quick Start&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 私有化部署&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/c121914yu/FastGPT/main/docs/deploy/docker.md&#34;&gt;docker-compose 部署教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/431177525/channel/collectiondetail?sid=1370663&#34;&gt;由社区贡献的宝塔部署和本地运行教程&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;👉&lt;/span&gt; RoadMap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kjqvjse66l.feishu.cn/docx/RVUxdqE2WolDYyxEKATcM0XXnte&#34;&gt;FastGpt RoadMap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏘️ 交流群&lt;/h2&gt; &#xA;&lt;p&gt;添加 wx 进入：&lt;br&gt; &lt;img src=&#34;https://otnvvf-imgs.oss.laf.run/wx300.png&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👀 其他&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kjqvjse66l.feishu.cn/docx/HtrgdT0pkonP4kxGx8qcu6XDnGh&#34;&gt;FastGpt 常见问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://b4jky7-fastgpt.oss.laf.run/lafercode.png&#34;&gt;FastGpt + Laf 最佳实践，将知识库装入公众号，点击去 Laf 公众号体验效果&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Lo4y147Qh/?vd_source=92041a1a395f852f9d89158eaa3f61b4&#34;&gt;FastGpt V3.4 更新集合&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Wo4y1p7i1/&#34;&gt;FastGpt 知识库演示&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌟 Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#c121914yu/FastGPT&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=c121914yu/FastGPT&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>liou666/polyglot</title>
    <updated>2023-05-21T02:04:34Z</updated>
    <id>tag:github.com,2023-05-21:/liou666/polyglot</id>
    <link href="https://github.com/liou666/polyglot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖️ 桌面端AI语言练习应用&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/public/favicon.ico&#34; width=&#34;60px&#34; align=&#34;center&#34; alt=&#34;Polyglot icon&#34;&gt; Polyglot&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AI语言练习应用&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Polyglot是一款多平台的桌面端应用程序。基于ChatGPT和Azure人工智能语言模型作为底层服务，使用Vue3+TS技术栈构建，旨在提供一个易于使用的语言练习平台，方便进行多语种的口语练习。 &lt;a href=&#34;https://www.bilibili.com/video/BV16L411h7kS/&#34;&gt;（📺B站链接）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;&#34; alt=&#34;Screenshot: Polyglot App running&#34; src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/screenshot/0.2.1.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;a href=&#34;https://github.com/liou666/polyglot/releases/download/v0.2.1/Polyglot_0.2.1.dmg&#34;&gt;点击下载&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href=&#34;https://github.com/liou666/polyglot/releases/download/v0.2.1/Polyglot_0.2.1.exe&#34;&gt;点击下载&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;软件截图&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;展开&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;&#34; alt=&#34;Screenshot: Polyglot App running&#34; src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/screenshot/new_chat.png&#34;&gt; &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;&#34; alt=&#34;Screenshot: Polyglot App running&#34; src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/screenshot/voice.png&#34;&gt; &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;&#34; alt=&#34;Screenshot: Polyglot App running&#34; src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/screenshot/setting.png&#34;&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 多国语言口语练习 （&lt;del&gt;目前内置四个不同国家的AI人物，分别来自美国、日本、韩国和法国。后续将考虑增加更多的语种。&lt;/del&gt;）（内置了英语，其他语言现在支持自定义）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 智能语音合成（目前基于Azure TTS服务，后续考虑接入可以本地部署的语音模型）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 智能对话功能（基于chatGPT服务）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持暗黑模式&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入文字翻译功能&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持用户自定义语种和AI人物&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 用户自定义配置Azure key&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自定义头像&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 语音识别支持快捷键操作(按住空格键开始语音识别，放开空格键结束语音识别)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持用户配置自定义对话场景&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 自身语音支持回听&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 支持Azure openai api、claude api服务&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;设置&lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI Key&lt;/a&gt;（兼容api2d格式）&lt;/li&gt; &#xA; &lt;li&gt;设置代理（非必须）&lt;/li&gt; &#xA; &lt;li&gt;设置&lt;a href=&#34;https://portal.azure.com/&#34;&gt;azure key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;新建AI角色进行对话；&lt;/li&gt; &#xA; &lt;li&gt;与AI人物进行对话练习口语。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;本地启动&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1.克隆本仓库；&#xA;git clone https://github.com/liou666/polyglot.git&#xA;&#xA;# 2.安装依赖；&#xA;cd polyglot&#xA;pnpm install &#xA;# 安装 electron 失败时尝试使用淘宝镜像源安装👇：&#xA;# export ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/ &amp;amp;&amp;amp; pnpm i&#xA;&#xA;# 3. 根据注释提示配置相关的环境变量&#xA;mv .env.example .env&#xA;&#xA;# 4. 启动服务&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;贡献&lt;/h2&gt; &#xA;&lt;p&gt;如果您有任何建议或意见，欢迎提出 &lt;a href=&#34;https://github.com/liou666/polyglot/issues&#34;&gt;Issues&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/liou666/polyglot/pulls&#34;&gt; Pull Request&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;贡献者&lt;/h1&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://github.com/liou666/polyglot/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=liou666/polyglot&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;1. 我所在的地区有网络限制，怎么正常使用？&lt;/summary&gt; &#xA; &lt;p&gt;v0.2.0版本已兼容了api2d的接口，可以考虑使用&lt;a href=&#34;https://api2d.com/&#34;&gt;api2d&lt;/a&gt;的国内接口。另外项目支持设置代理，也可以通过自己搭建国内代理进行使用。&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;2. MacOS 提示无法打开“Polyglot”，因为Apple无法检查其是否包含恶意软件。&lt;/summary&gt; &#xA; &lt;p&gt;这个错误因为 macOS 操作系统中的 Gatekeeper 安全功能阻止了应用程序的运行。 要解决此问题，请按照以下步骤操作：&lt;/p&gt; &#xA; &lt;p&gt;打开“系统偏好设置”并点击“安全性与隐私”。 在“通用”选项卡中，您将看到一个消息：“Polyglot”已被阻止。单击“仍要打开”。 或者，你可以单击“打开任何方式”以打开你的应用程序。 （可能需要使用管理员权限来打开应用程序。）&lt;/p&gt; &#xA; &lt;p&gt;如果不想在每次打开应用程序时都执行这些步骤，则可以的应用程序添加到白名单中，以便在不受阻止的情况下运行。要将您的应用程序添加到白名单中，请执行以下操作：&lt;/p&gt; &#xA; &lt;p&gt;打开终端并输入以下命令：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xattr -rd com.apple.quarantine /path/to/Polyglot.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;其中，/path/to/Polyglot.app 是你的应用程序的完整路径。&lt;/p&gt; &#xA; &lt;p&gt;运行命令后，应用程序将被添加到白名单中，Gatekeeper 将不再阻止其运行。&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;3. azure语音服务如何申请？&lt;/summary&gt; &#xA; &lt;p&gt;要申请 Azure 语音服务的 API 密钥，可以按照以下步骤进行：&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;登录 Azure 门户 （&lt;a href=&#34;https://portal.azure.com/%EF%BC%89&#34;&gt;https://portal.azure.com/）&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;转到“Azure 语音服务”页面并单击“添加”按钮&lt;/li&gt; &#xA;  &lt;li&gt;在“创建 Azure 语音服务”窗口中，选择订阅、资源组、区域，并为新服务指定名称&lt;/li&gt; &#xA;  &lt;li&gt;选择“F0”价格层，并单击“创建”&lt;/li&gt; &#xA;  &lt;li&gt;创建完成后，转到新服务的“概述”页面，即可查看密钥和终结点&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;捐赠&lt;/h2&gt; &#xA;&lt;p&gt;如果觉的项目对你有帮助的话，欢迎请我喝杯奶茶😊。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;微信&lt;/th&gt; &#xA;   &lt;th&gt;支付宝&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;200&#34; height=&#34;300&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/public/donate/weixin.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;200&#34; height=&#34;300&#34; alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/public/donate/zhifubao.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;讨论与交流&lt;/h2&gt; &#xA;&lt;img width=&#34;200&#34; alt=&#34;Screenshot: Polyglot App running&#34; src=&#34;https://raw.githubusercontent.com/liou666/polyglot/main/screenshot/chat.JPG&#34;&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/playwright</title>
    <updated>2023-05-21T02:04:34Z</updated>
    <id>tag:github.com,2023-05-21:/microsoft/playwright</id>
    <link href="https://github.com/microsoft/playwright" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎭 Playwright&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/playwright&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/playwright.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- GEN:chromium-version-badge --&gt;&lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chromium-114.0.5735.35-blue.svg?logo=google-chrome&#34; alt=&#34;Chromium version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt; &#xA; &lt;!-- GEN:firefox-version-badge --&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/firefox-113.0-blue.svg?logo=firefoxbrowser&#34; alt=&#34;Firefox version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt; &#xA; &lt;!-- GEN:webkit-version-badge --&gt;&lt;a href=&#34;https://webkit.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/webkit-16.4-blue.svg?logo=safari&#34; alt=&#34;WebKit version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://playwright.dev&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://playwright.dev/docs/api/class-playwright&#34;&gt;API reference&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Playwright is a framework for Web Testing and Automation. It allows testing &lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;Chromium&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox&lt;/a&gt; and &lt;a href=&#34;https://webkit.org/&#34;&gt;WebKit&lt;/a&gt; with a single API. Playwright is built to enable cross-browser web automation that is &lt;strong&gt;ever-green&lt;/strong&gt;, &lt;strong&gt;capable&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Chromium &#xA;    &lt;!-- GEN:chromium-version --&gt;114.0.5735.35&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WebKit &#xA;    &lt;!-- GEN:webkit-version --&gt;16.4&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Firefox &#xA;    &lt;!-- GEN:firefox-version --&gt;113.0&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Headless execution is supported for all browsers on all platforms. Check out &lt;a href=&#34;https://playwright.dev/docs/troubleshooting#system-requirements&#34;&gt;system requirements&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Looking for Playwright for &lt;a href=&#34;https://playwright.dev/python/docs/intro&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/dotnet/docs/intro&#34;&gt;.NET&lt;/a&gt;, or &lt;a href=&#34;https://playwright.dev/java/docs/intro&#34;&gt;Java&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Playwright has its own test runner for end-to-end tests, we call it Playwright Test.&lt;/p&gt; &#xA;&lt;h3&gt;Using init command&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get started with Playwright Test is to run the init command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;# Run from your project&#39;s root directory&#xA;npm init playwright@latest&#xA;# Or create a new project&#xA;npm init playwright@latest new-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a configuration file, optionally add examples, a GitHub Action workflow and a first test example.spec.ts. You can now jump directly to writing assertions section.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Add dependency and install browsers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;npm i -D @playwright/test&#xA;# install supported browsers&#xA;npx playwright install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally install only selected browsers, see &lt;a href=&#34;https://playwright.dev/docs/cli#install-browsers&#34;&gt;install browsers&lt;/a&gt; for more details. Or you can install no browsers at all and use existing &lt;a href=&#34;https://playwright.dev/docs/browsers&#34;&gt;browser channels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/installation&#34;&gt;Installation configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/api/class-playwright&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Capabilities&lt;/h2&gt; &#xA;&lt;h3&gt;Resilient • No flaky tests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Auto-wait&lt;/strong&gt;. Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - a primary cause of flaky tests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Web-first assertions&lt;/strong&gt;. Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tracing&lt;/strong&gt;. Configure test retry strategy, capture execution trace, videos and screenshots to eliminate flakes.&lt;/p&gt; &#xA;&lt;h3&gt;No trade-offs • No limits&lt;/h3&gt; &#xA;&lt;p&gt;Browsers run web content belonging to different origins in different processes. Playwright is aligned with the architecture of the modern browsers and runs tests out-of-process. This makes Playwright free of the typical in-process test runner limitations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multiple everything&lt;/strong&gt;. Test scenarios that span multiple tabs, multiple origins and multiple users. Create scenarios with different contexts for different users and run them against your server, all in one test.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Trusted events&lt;/strong&gt;. Hover elements, interact with dynamic controls and produce trusted events. Playwright uses real browser input pipeline indistinguishable from the real user.&lt;/p&gt; &#xA;&lt;p&gt;Test frames, pierce Shadow DOM. Playwright selectors pierce shadow DOM and allow entering frames seamlessly.&lt;/p&gt; &#xA;&lt;h3&gt;Full isolation • Fast execution&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Browser contexts&lt;/strong&gt;. Playwright creates a browser context for each test. Browser context is equivalent to a brand new browser profile. This delivers full test isolation with zero overhead. Creating a new browser context only takes a handful of milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Log in once&lt;/strong&gt;. Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests.&lt;/p&gt; &#xA;&lt;h3&gt;Powerful Tooling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://playwright.dev/docs/codegen&#34;&gt;Codegen&lt;/a&gt;&lt;/strong&gt;. Generate tests by recording your actions. Save them into any language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://playwright.dev/docs/inspector&#34;&gt;Playwright inspector&lt;/a&gt;&lt;/strong&gt;. Inspect page, generate selectors, step through the test execution, see click points and explore execution logs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://playwright.dev/docs/trace-viewer&#34;&gt;Trace Viewer&lt;/a&gt;&lt;/strong&gt;. Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source and many more.&lt;/p&gt; &#xA;&lt;p&gt;Looking for Playwright for &lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;TypeScript&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/python/docs/intro&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/dotnet/docs/intro&#34;&gt;.NET&lt;/a&gt;, or &lt;a href=&#34;https://playwright.dev/java/docs/intro&#34;&gt;Java&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To learn how to run these Playwright Test examples, check out our &lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;getting started docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Page screenshot&lt;/h4&gt; &#xA;&lt;p&gt;This code snippet navigates to whatsmyuseragent.org and saves a screenshot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test } from &#39;@playwright/test&#39;;&#xA;&#xA;test(&#39;Page Screenshot&#39;, async ({ page }) =&amp;gt; {&#xA;  await page.goto(&#39;http://whatsmyuseragent.org/&#39;);&#xA;  await page.screenshot({ path: `example.png` });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mobile and geolocation&lt;/h4&gt; &#xA;&lt;p&gt;This snippet emulates Mobile Safari on a device at given geolocation, navigates to maps.google.com, performs the action and takes a screenshot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test, devices } from &#39;@playwright/test&#39;;&#xA;&#xA;test.use({&#xA;  ...devices[&#39;iPhone 13 Pro&#39;],&#xA;  locale: &#39;en-US&#39;,&#xA;  geolocation: { longitude: 12.492507, latitude: 41.889938 },&#xA;  permissions: [&#39;geolocation&#39;],&#xA;})&#xA;&#xA;test(&#39;Mobile and geolocation&#39;, async ({ page }) =&amp;gt; {&#xA;  await page.goto(&#39;https://maps.google.com&#39;);&#xA;  await page.getByText(&#39;Your location&#39;).click();&#xA;  await page.waitForRequest(/.*preview\/pwa/);&#xA;  await page.screenshot({ path: &#39;colosseum-iphone.png&#39; });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Evaluate in browser context&lt;/h4&gt; &#xA;&lt;p&gt;This code snippet navigates to example.com, and executes a script in the page context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test } from &#39;@playwright/test&#39;;&#xA;&#xA;test(&#39;Evaluate in browser context&#39;, async ({ page }) =&amp;gt; {&#xA;  await page.goto(&#39;https://www.example.com/&#39;);&#xA;  const dimensions = await page.evaluate(() =&amp;gt; {&#xA;    return {&#xA;      width: document.documentElement.clientWidth,&#xA;      height: document.documentElement.clientHeight,&#xA;      deviceScaleFactor: window.devicePixelRatio&#xA;    }&#xA;  });&#xA;  console.log(dimensions);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Intercept network requests&lt;/h4&gt; &#xA;&lt;p&gt;This code snippet sets up request routing for a page to log all network requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test } from &#39;@playwright/test&#39;;&#xA;&#xA;test(&#39;Intercept network requests&#39;, async ({ page }) =&amp;gt; {&#xA;  // Log and continue all network requests&#xA;  await page.route(&#39;**&#39;, route =&amp;gt; {&#xA;    console.log(route.request().url());&#xA;    route.continue();&#xA;  });&#xA;  await page.goto(&#39;http://todomvc.com&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/api/class-playwright/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/playwright/main/CONTRIBUTING.md&#34;&gt;Contribution guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/playwright/releases&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>