<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TypeScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T02:03:53Z</updated>
  <subtitle>Weekly Trending of TypeScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Blazity/next-enterprise</title>
    <updated>2023-06-11T02:03:53Z</updated>
    <id>tag:github.com,2023-06-11:/Blazity/next-enterprise</id>
    <link href="https://github.com/Blazity/next-enterprise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💼 An enterprise-grade Next.js boilerplate for high-performance, maintainable apps. Packed with features like Tailwind CSS, TypeScript, ESLint, Prettier, testing tools, and more to accelerate your development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Next.js Enterprise Boilerplate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/project-logo.png&#34; alt=&#34;Project intro image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the &lt;em&gt;Next.js Enterprise Boilerplate&lt;/em&gt;, an open-source template for enterprise projects! It&#39;s loaded with features that&#39;ll help you build a high-performance, maintainable, and enjoyable app. We&#39;ve done all the heavy lifting for you, so sit back, relax, and get ready to conquer the world with your incredible app! 🌍&lt;/p&gt; &#xA;&lt;h2&gt;📚 Features&lt;/h2&gt; &#xA;&lt;p&gt;With this template, you get all the awesomeness you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🏎️ &lt;strong&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/strong&gt; - Fast by default, with config optimized for performance&lt;/li&gt; &#xA; &lt;li&gt;💅 &lt;strong&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/strong&gt; - A utility-first CSS framework for rapid UI development&lt;/li&gt; &#xA; &lt;li&gt;✨ &lt;strong&gt;&lt;a href=&#34;https://eslint.org/&#34;&gt;ESlint&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;&lt;/strong&gt; - For clean, consistent, and error-free code&lt;/li&gt; &#xA; &lt;li&gt;🛠️ &lt;strong&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;Extremely strict TypeScript&lt;/a&gt;&lt;/strong&gt; - With &lt;a href=&#34;https://github.com/total-typescript/ts-reset&#34;&gt;&lt;code&gt;ts-reset&lt;/code&gt;&lt;/a&gt; library for ultimate type safety&lt;/li&gt; &#xA; &lt;li&gt;📊 &lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/package/@next/bundle-analyzer&#34;&gt;Bundle analyzer plugin&lt;/a&gt;&lt;/strong&gt; - Keep an eye on your bundle size&lt;/li&gt; &#xA; &lt;li&gt;🧪 &lt;strong&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://testing-library.com/react&#34;&gt;React Testing Library&lt;/a&gt;&lt;/strong&gt; - For rock-solid unit and integration tests&lt;/li&gt; &#xA; &lt;li&gt;🎭 &lt;strong&gt;&lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt;&lt;/strong&gt; - Write end-to-end tests like a pro&lt;/li&gt; &#xA; &lt;li&gt;📕 &lt;strong&gt;&lt;a href=&#34;https://storybook.js.org/&#34;&gt;Storybook&lt;/a&gt;&lt;/strong&gt; - Create, test, and showcase your components&lt;/li&gt; &#xA; &lt;li&gt;🌬️ &lt;strong&gt;Smoke Testing&lt;/strong&gt; and &lt;strong&gt;Acceptance Tests&lt;/strong&gt; - For confidence in your deployments&lt;/li&gt; &#xA; &lt;li&gt;📝 &lt;strong&gt;&lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;Conventional commits git hook&lt;/a&gt;&lt;/strong&gt; - Keep your commit history neat and tidy&lt;/li&gt; &#xA; &lt;li&gt;🔍 &lt;strong&gt;&lt;a href=&#34;https://opentelemetry.io/&#34;&gt;Observability&lt;/a&gt;&lt;/strong&gt; - Open Telemetry integration for seamless monitoring&lt;/li&gt; &#xA; &lt;li&gt;🎯 &lt;strong&gt;&lt;a href=&#34;https://nextjs.org/docs/advanced-features/module-path-aliases&#34;&gt;Absolute imports&lt;/a&gt;&lt;/strong&gt; - No more spaghetti imports&lt;/li&gt; &#xA; &lt;li&gt;⚕️ &lt;strong&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&#34;&gt;Health checks&lt;/a&gt;&lt;/strong&gt; - Kubernetes-compatible for robust deployments&lt;/li&gt; &#xA; &lt;li&gt;🧩 &lt;strong&gt;&lt;a href=&#34;https://www.radix-ui.com/&#34;&gt;Radix UI&lt;/a&gt;&lt;/strong&gt; - Headless UI components for endless customization&lt;/li&gt; &#xA; &lt;li&gt;💎 &lt;strong&gt;&lt;a href=&#34;http://cva.style/&#34;&gt;CVA&lt;/a&gt;&lt;/strong&gt; - Create a consistent, reusable, and atomic design system&lt;/li&gt; &#xA; &lt;li&gt;🤖 &lt;strong&gt;&lt;a href=&#34;https://www.whitesourcesoftware.com/free-developer-tools/renovate&#34;&gt;Renovate BOT&lt;/a&gt;&lt;/strong&gt; - Auto-updating dependencies, so you can focus on coding&lt;/li&gt; &#xA; &lt;li&gt;🩹 &lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/package/patch-package&#34;&gt;Patch-package&lt;/a&gt;&lt;/strong&gt; - Fix external dependencies without losing your mind&lt;/li&gt; &#xA; &lt;li&gt;📈 &lt;strong&gt;Components coupling and cohesion graph&lt;/strong&gt; - A tool for managing component relationships&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;strong&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/strong&gt; - Pre-configured actions for smooth workflows, including Bundle Size and performance stats&lt;/li&gt; &#xA; &lt;li&gt;🤖🧠 &lt;strong&gt;&lt;a href=&#34;https://openai.com/chatgpt&#34;&gt;Automated ChatGPT Code Reviews&lt;/a&gt;&lt;/strong&gt; - &lt;strong&gt;Stay on the cutting edge with AI-powered code reviews!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;💯 &lt;strong&gt;Perfect Lighthouse score&lt;/strong&gt; - Because performance matters&lt;/li&gt; &#xA; &lt;li&gt;🚢 &lt;strong&gt;&lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;Semantic Release&lt;/a&gt;&lt;/strong&gt; - for automatic changelog&lt;/li&gt; &#xA; &lt;li&gt;💻 &lt;strong&gt;&lt;a href=&#34;https://env.t3.gg/&#34;&gt;T3 Env&lt;/a&gt;&lt;/strong&gt; - Manage your environment variables with ease&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#nextjs-enterprise-boilerplate&#34;&gt;Next.js Enterprise Boilerplate&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-features&#34;&gt;📚 Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-getting-started&#34;&gt;🎯 Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-deployment&#34;&gt;🚀 Deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-scripts-overview&#34;&gt;📃 Scripts Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-coupling-graph&#34;&gt;🔗 Coupling Graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-testing&#34;&gt;🧪 Testing&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#running-tests&#34;&gt;Running Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#acceptance-tests&#34;&gt;Acceptance Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#smoke-testing&#34;&gt;Smoke Testing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-styling-and-design-system&#34;&gt;🎨 Styling and Design System&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#cva---a-new-approach-to-variants&#34;&gt;CVA - A New Approach to Variants&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-state-management&#34;&gt;💾 State Management&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#zustand&#34;&gt;Zustand&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#jotai&#34;&gt;Jotai&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#recoil&#34;&gt;Recoil&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-chatgpt-code-review&#34;&gt;🤖 ChatGPT Code Review&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-environment-variables-handling&#34;&gt;💻 Environment Variables handling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-contribution&#34;&gt;🤝 Contribution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#support&#34;&gt;💌 Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#-license&#34;&gt;📜 License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎯 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with this boilerplate, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork &amp;amp; clone repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## Don&#39;t forget to ⭐ star and fork it first :)&#xA;git clone https://github.com/&amp;lt;your_username)/next-enterprise.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install the dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install --frozen-lockfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the development server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This project uses a git hook to enforce &lt;a href=&#34;https://github.com/qoomon/git-conventional-commits&#34;&gt;conventional commits&lt;/a&gt;. To install the git hook, run the following command in the root directory of the project:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install pre-commit&#xA;pre-commit install -t commit-msg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Easily deploy your Next.js app with &lt;a href=&#34;https://vercel.com/new?utm_medium=default-template&amp;amp;filter=next.js&amp;amp;utm_source=github&amp;amp;utm_campaign=next-enterprise&#34;&gt;Vercel&lt;/a&gt; by clicking the button below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/git/external?repository-url=https://github.com/Blazity/next-enterprise&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📃 Scripts Overview&lt;/h2&gt; &#xA;&lt;p&gt;The following scripts are available in the &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: Starts the development server with colorized output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: Builds the app for production&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;start&lt;/code&gt;: Starts the production server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lint&lt;/code&gt;: Lints the code using ESLint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lint:fix&lt;/code&gt;: Automatically fixes linting errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prettier&lt;/code&gt;: Checks the code for proper formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prettier:fix&lt;/code&gt;: Automatically fixes formatting issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;analyze&lt;/code&gt;: Analyzes the bundle sizes for Client, Server and Edge environments&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;storybook&lt;/code&gt;: Starts the Storybook server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build-storybook&lt;/code&gt;: Builds the Storybook for deployment&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Runs unit and integration tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;e2e:headless&lt;/code&gt;: Runs end-to-end tests in headless mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;e2e:ui&lt;/code&gt;: Runs end-to-end tests with UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;format&lt;/code&gt;: Formats the code with Prettier&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;postinstall&lt;/code&gt;: Applies patches to external dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;preinstall&lt;/code&gt;: Ensures the project is installed with Yarn&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;coupling-graph&lt;/code&gt;: &lt;strong&gt;Generates a coupling and cohesion graph for the components&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔗 Coupling Graph&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;coupling-graph&lt;/code&gt; script is a useful tool that helps visualize the coupling and connections between your project&#39;s internal modules. It&#39;s built using the &lt;a href=&#34;https://github.com/pahen/madge&#34;&gt;Madge&lt;/a&gt; library. To generate the graph, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn coupling-graph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;graph.svg&lt;/code&gt; file, which contains a graphical representation of the connections between your components. You can open the file with any SVG-compatible viewer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/28964599/233662744-3ba89713-8466-49cd-9be7-e6fb38191f58.png&#34; alt=&#34;graph&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🧪 Testing&lt;/h2&gt; &#xA;&lt;p&gt;This boilerplate comes with various testing setups to ensure your application&#39;s reliability and robustness.&lt;/p&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unit and integration tests&lt;/strong&gt;: Run Jest tests using &lt;code&gt;yarn test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End-to-end tests (headless mode)&lt;/strong&gt;: Run Playwright tests in headless mode with &lt;code&gt;yarn e2e:headless&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End-to-end tests (UI mode)&lt;/strong&gt;: Run Playwright tests with UI using &lt;code&gt;yarn e2e:ui&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1392&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/28964599/233666655-93b7d08b-2fd8-406a-b43c-44d4d96cf387.png&#34;&gt; &#xA;&lt;h3&gt;Acceptance Tests&lt;/h3&gt; &#xA;&lt;p&gt;To write acceptance tests, we leverage Storybook&#39;s &lt;a href=&#34;https://storybook.js.org/docs/react/writing-stories/play-function#writing-stories-with-the-play-function&#34;&gt;&lt;code&gt;play&lt;/code&gt; function&lt;/a&gt;. This allows you to interact with your components and test various user flows within Storybook.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;/*&#xA; * See https://storybook.js.org/docs/react/writing-stories/play-function#working-with-the-canvas&#xA; * to learn more about using the canvasElement to query the DOM&#xA; */&#xA;export const FilledForm: Story = {&#xA;  play: async ({ canvasElement }) =&amp;gt; {&#xA;    const canvas = within(canvasElement)&#xA;&#xA;    const emailInput = canvas.getByLabelText(&#34;email&#34;, {&#xA;      selector: &#34;input&#34;,&#xA;    })&#xA;&#xA;    await userEvent.type(emailInput, &#34;example-email@email.com&#34;, {&#xA;      delay: 100,&#xA;    })&#xA;&#xA;    const passwordInput = canvas.getByLabelText(&#34;password&#34;, {&#xA;      selector: &#34;input&#34;,&#xA;    })&#xA;&#xA;    await userEvent.type(passwordInput, &#34;ExamplePassword&#34;, {&#xA;      delay: 100,&#xA;    })&#xA;    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel&#xA;    const submitButton = canvas.getByRole(&#34;button&#34;)&#xA;&#xA;    await userEvent.click(submitButton)&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Smoke Testing&lt;/h3&gt; &#xA;&lt;p&gt;In this boilerplate, we use Storybook&#39;s out-of-the-box support for smoke testing to verify that components render correctly without any errors. Just run &lt;code&gt;yarn test-storybook&lt;/code&gt; to perform smoke testing. Remember to write stories in JSX or TSX format only. Smoke testing and a lot of other functionalities dont work well with MDX stories.&lt;/p&gt; &#xA;&lt;h2&gt;🎨 Styling and Design System&lt;/h2&gt; &#xA;&lt;p&gt;This boilerplate uses Tailwind CSS for styling and CVA for creating a powerful, easy-to-use design system. If you want to learn more about the setup, check out this fantastic video by Vercel:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=T-Zv73yZ_QI&amp;amp;ab_channel=Vercel&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/T-Zv73yZ_QI/0.jpg&#34; alt=&#34;Styling and Design System&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CVA - A New Approach to Variants&lt;/h3&gt; &#xA;&lt;p&gt;While CSS-in-TS libraries such as &lt;a href=&#34;https://stitches.dev/&#34;&gt;Stitches&lt;/a&gt; and &lt;a href=&#34;https://vanilla-extract.style/&#34;&gt;Vanilla Extract&lt;/a&gt; are great for building type-safe UI components, they might not be the perfect fit for everyone. You may prefer more control over your stylesheets, need to use a framework like Tailwind CSS, or simply enjoy writing your own CSS.&lt;/p&gt; &#xA;&lt;p&gt;Creating variants using traditional CSS can be a tedious task, requiring you to manually match classes to props and add types. CVA is here to take that pain away, allowing you to focus on the enjoyable aspects of UI development. By providing an easy and type-safe way to create variants, CVA simplifies the process and helps you create powerful design systems without compromising on the flexibility and control of CSS.&lt;/p&gt; &#xA;&lt;h2&gt;💾 State Management&lt;/h2&gt; &#xA;&lt;p&gt;While this boilerplate doesn&#39;t include a specific state management library, we believe it&#39;s essential for you to choose the one that best suits your project&#39;s needs. Here are some libraries we recommend for state management:&lt;/p&gt; &#xA;&lt;h3&gt;Zustand&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pmndrs/zustand&#34;&gt;Zustand&lt;/a&gt; is a small, fast, and scalable state management library. It&#39;s designed to be simple and intuitive, making it a great choice for small to medium-sized projects. It&#39;s also optimized for bundle size, ensuring minimal impact on your app&#39;s performance.&lt;/p&gt; &#xA;&lt;h3&gt;Jotai&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pmndrs/jotai&#34;&gt;Jotai&lt;/a&gt; is an atom-based state management library for React that focuses on providing a minimal and straightforward API. Its atom-based approach allows you to manage your state in a granular way while still being highly optimized for bundle size.&lt;/p&gt; &#xA;&lt;h3&gt;Recoil&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://recoiljs.org/&#34;&gt;Recoil&lt;/a&gt; is a state management library developed by Facebook, specifically designed for React applications. By utilizing atoms and selectors, Recoil allows you to efficiently manage state and derived state. Its key benefit is the ability to update components only when the state they&#39;re subscribed to changes, reducing unnecessary re-renders and keeping your application fast and efficient. Recoil also offers great developer experience with built-in debugging tools.&lt;/p&gt; &#xA;&lt;p&gt;Choose the library that best fits your requirements and project structure to ensure an efficient state management solution for your application.&lt;/p&gt; &#xA;&lt;h2&gt;🤖 ChatGPT Code Review&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve integrated the innovative &lt;a href=&#34;https://github.com/anc95/ChatGPT-CodeReview&#34;&gt;ChatGPT Code Review&lt;/a&gt; for AI-powered, automated code reviews. This feature provides real-time feedback on your code, helping improve code quality and catch potential issues.&lt;/p&gt; &#xA;&lt;p&gt;To use ChatGPT Code Review, add an &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable with an appropriate key from the OpenAI platform. For setup details, refer to the &lt;a href=&#34;https://github.com/anc95/ChatGPT-CodeReview#using-github-actions&#34;&gt;Using GitHub Actions&lt;/a&gt; section in the documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/28964599/233685071-e1371edf-6359-41c3-a989-335d6ee09cb7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💻 Environment Variables handling&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://env.t3.gg/&#34;&gt;T3 Env&lt;/a&gt; is a library that provides environmental variables checking at build time, type validation and transforming. It ensures that your application is using the correct environment variables and their values are of the expected type. You’ll never again struggle with runtime errors caused by incorrect environment variable usage.&lt;/p&gt; &#xA;&lt;p&gt;Config file is located at &lt;code&gt;env.mjs&lt;/code&gt;. Simply set your client and server variables and import &lt;code&gt;env&lt;/code&gt; from any file in your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export const env = createEnv({&#xA;  server: {&#xA;    // Server variables&#xA;    SECRET_KEY: z.string(),&#xA;  },&#xA;  client: {&#xA;    // Client variables&#xA;    API_URL: z.string().url(),&#xA;  },&#xA;  runtimeEnv: {&#xA;    // Assign runtime variables&#xA;    SECRET_KEY: process.env.SECRET_KEY,&#xA;    API_URL: process.env.NEXT_PUBLIC_API_URL,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the required environment variables are not set, you&#39;ll get an error message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  ❌ Invalid environment variables: { SECRET_KEY: [ &#39;Required&#39; ] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤝 Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! To contribute, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch with a descriptive name.&lt;/li&gt; &#xA; &lt;li&gt;Make your changes, and commit them using the &lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;Conventional Commits&lt;/a&gt; format.&lt;/li&gt; &#xA; &lt;li&gt;Push your changes to the forked repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request, and we&#39;ll review your changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking for help or simply want to share your thoughts about the project, we encourage you to join our Discord community. Here&#39;s the link: &lt;a href=&#34;https://blazity.com/discord&#34;&gt;https://blazity.com/discord&lt;/a&gt;. It&#39;s a space where we exchange ideas and help one another. Everyone&#39;s input is appreciated, and we look forward to welcoming you.&lt;/p&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License. For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://bstefanski.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/28964599?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Bart Stefanski&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Bart Stefanski&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Blazity/next-enterprise/commits?author=bmstefanski&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/jjablonski-it&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/51968772?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Jakub Jabłoński&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jakub Jabłoński&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Blazity/next-enterprise/main/#infra-jjablonski-it&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;🚇&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA; &lt;tfoot&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; size=&#34;13px&#34; colspan=&#34;7&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/all-contributors/all-contributors-cli/1b8533af435da9854653492b1327a23a4dbd0a10/assets/logo-small.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://all-contributors.js.org/docs/en/bot/usage&#34;&gt;Add your contributions&lt;/a&gt;  &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tfoot&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;</summary>
  </entry>
  <entry>
    <title>AntonioErdeljac/next13-spotify</title>
    <updated>2023-06-11T02:03:53Z</updated>
    <id>tag:github.com,2023-06-11:/AntonioErdeljac/next13-spotify</id>
    <link href="https://github.com/AntonioErdeljac/next13-spotify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Full Stack Spotify Clone with Next.js 13.4 App Router: React, Tailwind, Supabase, PostgreSQL, Stripe&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AntonioErdeljac/next13-spotify/assets/23248726/2722c7bd-2d8f-44a9-97b9-f2711a8d8b64&#34; alt=&#34;Copy of Copy of Fullstack Twitter Clone&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For DEMO, use &lt;a href=&#34;https://stripe.com/docs/testing&#34;&gt;Stripe Testing Cards&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a repository for a Full Stack Spotify Clone with Next.js 13.4 App Router: React, Tailwind, Supabase, PostgreSQL, Stripe&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/2aeMRB8LL4o&#34;&gt;VIDEO TUTORIAL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Key Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Song upload&lt;/li&gt; &#xA; &lt;li&gt;Stripe integration&lt;/li&gt; &#xA; &lt;li&gt;Tailwind design for sleek UI&lt;/li&gt; &#xA; &lt;li&gt;Tailwind animations and transition effects&lt;/li&gt; &#xA; &lt;li&gt;Full responsiveness for all devices&lt;/li&gt; &#xA; &lt;li&gt;Credential authentication with Supabase&lt;/li&gt; &#xA; &lt;li&gt;Github authentication integration&lt;/li&gt; &#xA; &lt;li&gt;File and image upload using Supabase storage&lt;/li&gt; &#xA; &lt;li&gt;Client form validation and handling using react-hook-form&lt;/li&gt; &#xA; &lt;li&gt;Server error handling with react-toast&lt;/li&gt; &#xA; &lt;li&gt;Play song audio&lt;/li&gt; &#xA; &lt;li&gt;Favorites system&lt;/li&gt; &#xA; &lt;li&gt;Playlists / Liked songs system&lt;/li&gt; &#xA; &lt;li&gt;Advanced Player component&lt;/li&gt; &#xA; &lt;li&gt;Stripe recurring payment integration&lt;/li&gt; &#xA; &lt;li&gt;How to write POST, GET, and DELETE routes in route handlers (app/api)&lt;/li&gt; &#xA; &lt;li&gt;How to fetch data in server React components by directly accessing the database (WITHOUT API! like Magic!)&lt;/li&gt; &#xA; &lt;li&gt;Handling relations between Server and Child components in a real-time environment&lt;/li&gt; &#xA; &lt;li&gt;Cancelling Stripe subscriptions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Node version 14.x&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cloning the repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/AntonioErdeljac/next13-spotify.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install packages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup .env file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;NEXT_PUBLIC_SUPABASE_URL=&#xA;NEXT_PUBLIC_SUPABASE_ANON_KEY=&#xA;SUPABASE_SERVICE_ROLE_KEY=&#xA;&#xA;NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=&#xA;STRIPE_SECRET_KEY=&#xA;STRIPE_WEBHOOK_SECRET=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add SQL Tables&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;database.sql&lt;/code&gt; file, create songs and liked_songs table (there is a video tutorial)&lt;/p&gt; &#xA;&lt;h3&gt;Start the app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available commands&lt;/h2&gt; &#xA;&lt;p&gt;Running commands with npm &lt;code&gt;npm run [command]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;command&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Starts a development instance of the app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>josStorer/RWKV-Runner</title>
    <updated>2023-06-11T02:03:53Z</updated>
    <id>tag:github.com,2023-06-11:/josStorer/RWKV-Runner</id>
    <link href="https://github.com/josStorer/RWKV-Runner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A RWKV management and startup tool, full automation, only 8MB. And provides an interface compatible with the OpenAI API. RWKV is a large language model that is fully open source and available for commercial use.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/d24834b0-265d-45f5-93c0-fac1e19562af&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;RWKV Runner&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;This project aims to eliminate the barriers of using large language models by automating everything for you. All you need is a lightweight executable program of just a few megabytes. Additionally, this project provides an interface compatible with the OpenAI API, which means that every ChatGPT client is an RWKV client.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/josStorer/RWKV-Runner.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/josStorer/RWKV-Runner/master/README_ZH.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Install&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/raw/master/build/windows/Readme_Install.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Windows-blue?logo=windows&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/raw/master/build/darwin/Readme_Install.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-MacOS-black?logo=apple&#34; alt=&#34;MacOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/raw/master/build/linux/Readme_Install.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Linux-black?logo=linux&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/wiki/FAQs&#34;&gt;FAQs&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/josStorer/RWKV-Runner/master/#Preview&#34;&gt;Preview&lt;/a&gt; | &lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/releases&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/tree/master/deploy-examples&#34;&gt;Server-Deploy-Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Default configs has enabled custom CUDA kernel acceleration, which is much faster and consumes much less VRAM. If you encounter possible compatibility issues, go to the Configs page and turn off &lt;code&gt;Use Custom CUDA kernel to Accelerate&lt;/code&gt;.&lt;/h4&gt; &#xA;&lt;h4&gt;If Windows Defender claims this is a virus, you can try downloading &lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/releases/tag/v1.0.8&#34;&gt;v1.0.8&lt;/a&gt;/&lt;a href=&#34;https://github.com/josStorer/RWKV-Runner/releases/tag/v1.0.9&#34;&gt;v1.0.9&lt;/a&gt; and letting it update automatically to the latest version, or add it to the trusted list.&lt;/h4&gt; &#xA;&lt;h4&gt;For different tasks, adjusting API parameters can achieve better results. For example, for translation tasks, you can try setting Temperature to 1 and Top_P to 0.3.&lt;/h4&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RWKV model management and one-click startup&lt;/li&gt; &#xA; &lt;li&gt;Fully compatible with the OpenAI API, making every ChatGPT client an RWKV client. After starting the model, open &lt;a href=&#34;http://127.0.0.1:8000/docs&#34;&gt;http://127.0.0.1:8000/docs&lt;/a&gt; to view more details.&lt;/li&gt; &#xA; &lt;li&gt;Automatic dependency installation, requiring only a lightweight executable program&lt;/li&gt; &#xA; &lt;li&gt;Configs with 2G to 32G VRAM are included, works well on almost all computers&lt;/li&gt; &#xA; &lt;li&gt;User-friendly chat and completion interaction interface included&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-understand and operate parameter configuration&lt;/li&gt; &#xA; &lt;li&gt;Built-in model conversion tool&lt;/li&gt; &#xA; &lt;li&gt;Built-in download management and remote model inspection&lt;/li&gt; &#xA; &lt;li&gt;Multilingual localization&lt;/li&gt; &#xA; &lt;li&gt;Theme switching&lt;/li&gt; &#xA; &lt;li&gt;Automatic updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Concurrency Stress Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ab -p body.json -T application/json -c 20 -n 100 -l http://127.0.0.1:8000/chat/completions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;body.json:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;messages&#34;: [&#xA;    {&#xA;      &#34;role&#34;: &#34;user&#34;,&#xA;      &#34;content&#34;: &#34;Hello&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Model training functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CUDA operator int8 acceleration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; macOS support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Local State Cache DB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Repositories:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RWKV-4-Raven: &lt;a href=&#34;https://huggingface.co/BlinkDL/rwkv-4-raven/tree/main&#34;&gt;https://huggingface.co/BlinkDL/rwkv-4-raven/tree/main&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ChatRWKV: &lt;a href=&#34;https://github.com/BlinkDL/ChatRWKV&#34;&gt;https://github.com/BlinkDL/ChatRWKV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RWKV-LM: &lt;a href=&#34;https://github.com/BlinkDL/RWKV-LM&#34;&gt;https://github.com/BlinkDL/RWKV-LM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;h3&gt;Homepage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/60efbb65-29e3-4346-a597-5bdcd099251c&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chat&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/6cde9c45-51bb-4dee-b1fe-746862448520&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Completion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/52f47f92-d21d-4cd7-b04e-d6f9af937a97&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/93270a68-9d6d-4247-b6a3-e543c65a876b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Model Management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/6f96fdd3-fdf5-4b78-af80-2afbd1ad173b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Download Management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/6982e7ee-bace-4a88-bb47-92379185bf9d&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/josStorer/RWKV-Runner/assets/13366013/b3b2ab46-344c-4f04-b066-1503f776eeb9&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>