<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:12:52Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bmild/nerf</title>
    <updated>2022-06-03T02:12:52Z</updated>
    <id>tag:github.com,2022-06-03:/bmild/nerf</id>
    <link href="https://github.com/bmild/nerf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code release for NeRF (Neural Radiance Fields)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NeRF: Neural Radiance Fields&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://tancik.com/nerf&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/JuH79E8rdKc&#34;&gt;Video&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2003.08934&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/drive/folders/128yBriW1IG_3NJ5Rp7APSTZsJqdJdfc1&#34;&gt;Data&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/bmild/nerf/blob/master/tiny_nerf.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open Tiny-NeRF in Colab&#34;&gt;&lt;/a&gt;&lt;br&gt; Tensorflow implementation of optimizing a neural representation for a single scene and rendering new views.&lt;br&gt;&lt;br&gt; &lt;a href=&#34;http://tancik.com/nerf&#34;&gt;NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://people.eecs.berkeley.edu/~bmild/&#34;&gt;Ben Mildenhall&lt;/a&gt;*&lt;sup&gt;1&lt;/sup&gt;, &lt;a href=&#34;https://people.eecs.berkeley.edu/~pratul/&#34;&gt;Pratul P. Srinivasan&lt;/a&gt;*&lt;sup&gt;1&lt;/sup&gt;, &lt;a href=&#34;http://tancik.com/&#34;&gt;Matthew Tancik&lt;/a&gt;*&lt;sup&gt;1&lt;/sup&gt;, &lt;a href=&#34;http://jonbarron.info/&#34;&gt;Jonathan T. Barron&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;http://cseweb.ucsd.edu/~ravir/&#34;&gt;Ravi Ramamoorthi&lt;/a&gt;&lt;sup&gt;3&lt;/sup&gt;, &lt;a href=&#34;https://www2.eecs.berkeley.edu/Faculty/Homepages/yirenng.html&#34;&gt;Ren Ng&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;br&gt; &lt;sup&gt;1&lt;/sup&gt;UC Berkeley, &lt;sup&gt;2&lt;/sup&gt;Google Research, &lt;sup&gt;3&lt;/sup&gt;UC San Diego&lt;br&gt; *denotes equal contribution&lt;br&gt; in ECCV 2020 (Oral Presentation, Best Paper Honorable Mention)&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/bmild/nerf/master/imgs/pipeline.jpg&#34;&gt; &#xA;&lt;h2&gt;TL;DR quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To setup a conda environment, download example training data, begin the training process, and launch Tensorboard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yml&#xA;conda activate nerf&#xA;bash download_example_data.sh&#xA;python run_nerf.py --config config_fern.txt&#xA;tensorboard --logdir=logs/summaries --port=6006&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything works without errors, you can now go to &lt;code&gt;localhost:6006&lt;/code&gt; in your browser and watch the &#34;Fern&#34; scene train.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Python 3 dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tensorflow 1.15&lt;/li&gt; &#xA; &lt;li&gt;matplotlib&lt;/li&gt; &#xA; &lt;li&gt;numpy&lt;/li&gt; &#xA; &lt;li&gt;imageio&lt;/li&gt; &#xA; &lt;li&gt;configargparse&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The LLFF data loader requires ImageMagick.&lt;/p&gt; &#xA;&lt;p&gt;We provide a conda environment setup file including all of the above dependencies. Create the conda environment &lt;code&gt;nerf&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need the &lt;a href=&#34;http://github.com/fyusion/llff&#34;&gt;LLFF code&lt;/a&gt; (and COLMAP) set up to compute poses if you want to run on your own real data.&lt;/p&gt; &#xA;&lt;h2&gt;What is a NeRF?&lt;/h2&gt; &#xA;&lt;p&gt;A neural radiance field is a simple fully connected network (weights are ~5MB) trained to reproduce input views of a single scene using a rendering loss. The network directly maps from spatial location and viewing direction (5D input) to color and opacity (4D output), acting as the &#34;volume&#34; so we can use volume rendering to differentiably render new views.&lt;/p&gt; &#xA;&lt;p&gt;Optimizing a NeRF takes between a few hours and a day or two (depending on resolution) and only requires a single GPU. Rendering an image from an optimized NeRF takes somewhere between less than a second and ~30 seconds, again depending on resolution.&lt;/p&gt; &#xA;&lt;h2&gt;Running code&lt;/h2&gt; &#xA;&lt;p&gt;Here we show how to run our code on two example scenes. You can download the rest of the synthetic and real data used in the paper &lt;a href=&#34;https://drive.google.com/drive/folders/128yBriW1IG_3NJ5Rp7APSTZsJqdJdfc1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Optimizing a NeRF&lt;/h3&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash download_example_data.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get the our synthetic Lego dataset and the LLFF Fern dataset.&lt;/p&gt; &#xA;&lt;p&gt;To optimize a low-res Fern NeRF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python run_nerf.py --config config_fern.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After 200k iterations (about 15 hours), you should get a video like this at &lt;code&gt;logs/fern_test/fern_test_spiral_200000_rgb.mp4&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://people.eecs.berkeley.edu/~bmild/nerf/fern_200k_256w.gif&#34; alt=&#34;ferngif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To optimize a low-res Lego NeRF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python run_nerf.py --config config_lego.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After 200k iterations, you should get a video like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://people.eecs.berkeley.edu/~bmild/nerf/lego_200k_256w.gif&#34; alt=&#34;legogif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a NeRF&lt;/h3&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash download_example_weights.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get a pretrained high-res NeRF for the Fern dataset. Now you can use &lt;a href=&#34;https://github.com/bmild/nerf/raw/master/render_demo.ipynb&#34;&gt;&lt;code&gt;render_demo.ipynb&lt;/code&gt;&lt;/a&gt; to render new views.&lt;/p&gt; &#xA;&lt;h3&gt;Replicating the paper results&lt;/h3&gt; &#xA;&lt;p&gt;The example config files run at lower resolutions than the quantitative/qualitative results in the paper and video. To replicate the results from the paper, start with the config files in &lt;a href=&#34;https://github.com/bmild/nerf/tree/master/paper_configs&#34;&gt;&lt;code&gt;paper_configs/&lt;/code&gt;&lt;/a&gt;. Our synthetic Blender data and LLFF scenes are hosted &lt;a href=&#34;https://drive.google.com/drive/folders/128yBriW1IG_3NJ5Rp7APSTZsJqdJdfc1&#34;&gt;here&lt;/a&gt; and the DeepVoxels data is hosted by Vincent Sitzmann &lt;a href=&#34;https://drive.google.com/open?id=1lUvJWB6oFtT8EQ_NzBrXnmi25BufxRfl&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Extracting geometry from a NeRF&lt;/h3&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/bmild/nerf/raw/master/extract_mesh.ipynb&#34;&gt;&lt;code&gt;extract_mesh.ipynb&lt;/code&gt;&lt;/a&gt; for an example of running marching cubes to extract a triangle mesh from a trained NeRF network. You&#39;ll need the install the &lt;a href=&#34;https://github.com/pmneila/PyMCubes&#34;&gt;PyMCubes&lt;/a&gt; package for marching cubes plus the &lt;a href=&#34;https://github.com/mikedh/trimesh&#34;&gt;trimesh&lt;/a&gt; and &lt;a href=&#34;https://github.com/mmatl/pyrender&#34;&gt;pyrender&lt;/a&gt; packages if you want to render the mesh inside the notebook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install trimesh pyrender PyMCubes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generating poses for your own scenes&lt;/h2&gt; &#xA;&lt;h3&gt;Don&#39;t have poses?&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using the &lt;code&gt;imgs2poses.py&lt;/code&gt; script from the &lt;a href=&#34;https://github.com/fyusion/llff&#34;&gt;LLFF code&lt;/a&gt;. Then you can pass the base scene directory into our code using &lt;code&gt;--datadir &amp;lt;myscene&amp;gt;&lt;/code&gt; along with &lt;code&gt;-dataset_type llff&lt;/code&gt;. You can take a look at the &lt;code&gt;config_fern.txt&lt;/code&gt; config file for example settings to use for a forward facing scene. For a spherically captured 360 scene, we recomment adding the &lt;code&gt;--no_ndc --spherify --lindisp&lt;/code&gt; flags.&lt;/p&gt; &#xA;&lt;h3&gt;Already have poses!&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;run_nerf.py&lt;/code&gt; and all other code, we use the same pose coordinate system as in OpenGL: the local camera coordinate system of an image is defined in a way that the X axis points to the right, the Y axis upwards, and the Z axis backwards as seen from the image.&lt;/p&gt; &#xA;&lt;p&gt;Poses are stored as 3x4 numpy arrays that represent camera-to-world transformation matrices. The other data you will need is simple pinhole camera intrinsics (&lt;code&gt;hwf = [height, width, focal length]&lt;/code&gt;) and near/far scene bounds. Take a look at &lt;a href=&#34;https://github.com/bmild/nerf/raw/master/run_nerf.py#L406&#34;&gt;our data loading code&lt;/a&gt; to see more.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{mildenhall2020nerf,&#xA;  title={NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis},&#xA;  author={Ben Mildenhall and Pratul P. Srinivasan and Matthew Tancik and Jonathan T. Barron and Ravi Ramamoorthi and Ren Ng},&#xA;  year={2020},&#xA;  booktitle={ECCV},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/EconML</title>
    <updated>2022-06-03T02:12:52Z</updated>
    <id>tag:github.com,2022-06-03:/microsoft/EconML</id>
    <link href="https://github.com/microsoft/EconML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ALICE (Automated Learning and Intelligence for Causation and Economics) is a Microsoft Research project aimed at applying Artificial Intelligence concepts to economic decision making. One of its goals is to build a toolkit that combines state-of-the-art machine learning techniques with econometrics in order to bring automation to complex causal …&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/ms/EconML/_build/latest?definitionId=49&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/ms/EconML/_apis/build/status/Microsoft.EconML?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/econml/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/econml.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/econml/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/wheel/econml.svg?sanitize=true&#34; alt=&#34;PyPI wheel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/econml/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/econml.svg?sanitize=true&#34; alt=&#34;Supported Python versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/doc/econml-logo-icon.png&#34; width=&#34;80px&#34; align=&#34;left&#34; style=&#34;margin-right: 10px;&#34;&gt; EconML: A Python Package for ML-Based Heterogeneous Treatment Effects Estimation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;EconML&lt;/strong&gt; is a Python package for estimating heterogeneous treatment effects from observational data via machine learning. This package was designed and built as part of the &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/alice/&#34;&gt;ALICE project&lt;/a&gt; at Microsoft Research with the goal to combine state-of-the-art machine learning techniques with econometrics to bring automation to complex causal inference problems. The promise of EconML:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement recent techniques in the literature at the intersection of econometrics and machine learning&lt;/li&gt; &#xA; &lt;li&gt;Maintain flexibility in modeling the effect heterogeneity (via techniques such as random forests, boosting, lasso and neural nets), while preserving the causal interpretation of the learned model and often offering valid confidence intervals&lt;/li&gt; &#xA; &lt;li&gt;Use a unified API&lt;/li&gt; &#xA; &lt;li&gt;Build on standard Python packages for Machine Learning and Data Analysis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One of the biggest promises of machine learning is to automate decision making in a multitude of domains. At the core of many data-driven personalized decision scenarios is the estimation of heterogeneous treatment effects: what is the causal effect of an intervention on an outcome of interest for a sample with a particular set of features? In a nutshell, this toolkit is designed to measure the causal effect of some treatment variable(s) &lt;code&gt;T&lt;/code&gt; on an outcome variable &lt;code&gt;Y&lt;/code&gt;, controlling for a set of features &lt;code&gt;X, W&lt;/code&gt; and how does that effect vary as a function of &lt;code&gt;X&lt;/code&gt;. The methods implemented are applicable even with observational (non-experimental or historical) datasets. For the estimation results to have a causal interpretation, some methods assume no unobserved confounders (i.e. there is no unobserved variable not included in &lt;code&gt;X, W&lt;/code&gt; that simultaneously has an effect on both &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;), while others assume access to an instrument &lt;code&gt;Z&lt;/code&gt; (i.e. an observed variable &lt;code&gt;Z&lt;/code&gt; that has an effect on the treatment &lt;code&gt;T&lt;/code&gt; but no direct effect on the outcome &lt;code&gt;Y&lt;/code&gt;). Most methods provide confidence intervals and inference results.&lt;/p&gt; &#xA;&lt;p&gt;For detailed information about the package, consult the documentation at &lt;a href=&#34;https://econml.azurewebsites.net/&#34;&gt;https://econml.azurewebsites.net/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For information on use cases and background material on causal inference and heterogeneous treatment effects see our webpage at &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/econml/&#34;&gt;https://www.microsoft.com/en-us/research/project/econml/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;em&gt;Table of Contents&lt;/em&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#news&#34;&gt;News&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#usage-examples&#34;&gt;Usage Examples&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#estimation-methods&#34;&gt;Estimation Methods&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#interpretability&#34;&gt;Interpretability&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#causal-model-selection-and-cross-validation&#34;&gt;Causal Model Selection and Cross-Validation&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#inference&#34;&gt;Inference&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#policy-learning&#34;&gt;Policy Learning&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#for-developers&#34;&gt;For Developers&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#running-the-tests&#34;&gt;Running the tests&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#generating-the-documentation&#34;&gt;Generating the documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#blogs-and-publications&#34;&gt;Blogs and Publications&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#contributing-and-feedback&#34;&gt;Contributing and Feedback&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;News&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;March 11, 2022:&lt;/strong&gt; Call for Content&lt;/p&gt; &#xA;&lt;p&gt;Hello everyone, Microsoft will be hosting a workshop to explore current and future applications for our EconML and DoWhy packages on Tuesday, May 3, 2022. So far, our goal has been to make cutting-edge methods for causal treatment effect estimation as accessible as machine learning models for prediction or classification. We’re charting the course for future development of EconML and need your help.&lt;/p&gt; &#xA;&lt;p&gt;What more would you like to see in the library? New kinds of tasks, better functionality for the core tasks? Let us know! We are also looking for stories of problems you have solved using DoWhy and/or EconML to highlight in the workshop. If you have one, please reach out to &lt;a href=&#34;mailto:econml@microsoft.com&#34;&gt;econml@microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;January 31, 2022:&lt;/strong&gt; Release v0.13.0, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.13.0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Previous releases&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;August 13, 2021:&lt;/strong&gt; Release v0.12.0, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.12.0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;August 5, 2021:&lt;/strong&gt; Release v0.12.0b6, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.12.0b6&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;August 3, 2021:&lt;/strong&gt; Release v0.12.0b5, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.12.0b5&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;July 9, 2021:&lt;/strong&gt; Release v0.12.0b4, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.12.0b4&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;June 25, 2021:&lt;/strong&gt; Release v0.12.0b3, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.12.0b3&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;June 18, 2021:&lt;/strong&gt; Release v0.12.0b2, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.12.0b2&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;June 7, 2021:&lt;/strong&gt; Release v0.12.0b1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.12.0b1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;May 18, 2021:&lt;/strong&gt; Release v0.11.1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.11.1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;May 8, 2021:&lt;/strong&gt; Release v0.11.0, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.11.0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;March 22, 2021:&lt;/strong&gt; Release v0.10.0, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.10.0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;March 11, 2021:&lt;/strong&gt; Release v0.9.2, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.9.2&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;March 3, 2021:&lt;/strong&gt; Release v0.9.1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.9.1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;February 20, 2021:&lt;/strong&gt; Release v0.9.0, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.9.0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;January 20, 2021:&lt;/strong&gt; Release v0.9.0b1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.9.0b1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;November 20, 2020:&lt;/strong&gt; Release v0.8.1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.8.1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;November 18, 2020:&lt;/strong&gt; Release v0.8.0, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.8.0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;September 4, 2020:&lt;/strong&gt; Release v0.8.0b1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.8.0b1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;March 6, 2020:&lt;/strong&gt; Release v0.7.0, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.7.0&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;February 18, 2020:&lt;/strong&gt; Release v0.7.0b1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.7.0b1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;January 10, 2020:&lt;/strong&gt; Release v0.6.1, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.6.1&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;December 6, 2019:&lt;/strong&gt; Release v0.6, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.6&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;November 21, 2019:&lt;/strong&gt; Release v0.5, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.5&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;June 3, 2019:&lt;/strong&gt; Release v0.4, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.4&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;May 3, 2019:&lt;/strong&gt; Release v0.3, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.3&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;April 10, 2019:&lt;/strong&gt; Release v0.2, see release notes &lt;a href=&#34;https://github.com/Microsoft/EconML/releases/tag/v0.2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;March 6, 2019:&lt;/strong&gt; Release v0.1, welcome to have a try and provide feedback.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the latest release from &lt;a href=&#34;https://pypi.org/project/econml/&#34;&gt;PyPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install econml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install from source, see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#for-developers&#34;&gt;For Developers&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;Usage Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Estimation Methods&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Double Machine Learning (aka RLearner) (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Linear final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dml import LinearDML&#xA;from sklearn.linear_model import LassoCV&#xA;from econml.inference import BootstrapInference&#xA;&#xA;est = LinearDML(model_y=LassoCV(), model_t=LassoCV())&#xA;### Estimate with OLS confidence intervals&#xA;est.fit(Y, T, X=X, W=W) # W -&amp;gt; high-dimensional confounders, X -&amp;gt; features&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals&#xA;&#xA;### Estimate with bootstrap confidence intervals&#xA;est.fit(Y, T, X=X, W=W, inference=&#39;bootstrap&#39;)  # with default bootstrap parameters&#xA;est.fit(Y, T, X=X, W=W, inference=BootstrapInference(n_bootstrap_samples=100))  # or customized&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) # Bootstrap confidence intervals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Sparse linear final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dml import SparseLinearDML&#xA;from sklearn.linear_model import LassoCV&#xA;&#xA;est = SparseLinearDML(model_y=LassoCV(), model_t=LassoCV())&#xA;est.fit(Y, T, X=X, W=W) # X -&amp;gt; high dimensional features&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) # Confidence intervals via debiased lasso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Generic Machine Learning last stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dml import NonParamDML&#xA;from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier&#xA;&#xA;est = NonParamDML(model_y=RandomForestRegressor(),&#xA;                  model_t=RandomForestClassifier(),&#xA;                  model_final=RandomForestRegressor(),&#xA;                  discrete_treatment=True)&#xA;est.fit(Y, T, X=X, W=W) &#xA;treatment_effects = est.effect(X_test)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Dynamic Double Machine Learning (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dynamic.dml import DynamicDML&#xA;# Use defaults&#xA;est = DynamicDML()&#xA;# Or specify hyperparameters&#xA;est = DynamicDML(model_y=LassoCV(cv=3), &#xA;                 model_t=LassoCV(cv=3), &#xA;                 cv=3)&#xA;est.fit(Y, T, X=X, W=None, groups=groups, inference=&#34;auto&#34;)&#xA;# Effects&#xA;treatment_effects = est.effect(X_test)&#xA;# Confidence intervals&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Causal Forests (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dml import CausalForestDML&#xA;from sklearn.linear_model import LassoCV&#xA;# Use defaults&#xA;est = CausalForestDML()&#xA;# Or specify hyperparameters&#xA;est = CausalForestDML(criterion=&#39;het&#39;, n_estimators=500,       &#xA;                      min_samples_leaf=10, &#xA;                      max_depth=10, max_samples=0.5,&#xA;                      discrete_treatment=False,&#xA;                      model_t=LassoCV(), model_y=LassoCV())&#xA;est.fit(Y, T, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;# Confidence intervals via Bootstrap-of-Little-Bags for forests&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Orthogonal Random Forests (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.orf import DMLOrthoForest, DROrthoForest&#xA;from econml.sklearn_extensions.linear_model import WeightedLasso, WeightedLassoCV&#xA;# Use defaults&#xA;est = DMLOrthoForest()&#xA;est = DROrthoForest()&#xA;# Or specify hyperparameters&#xA;est = DMLOrthoForest(n_trees=500, min_leaf_size=10,&#xA;                     max_depth=10, subsample_ratio=0.7,&#xA;                     lambda_reg=0.01,&#xA;                     discrete_treatment=False,&#xA;                     model_T=WeightedLasso(alpha=0.01), model_Y=WeightedLasso(alpha=0.01),&#xA;                     model_T_final=WeightedLassoCV(cv=3), model_Y_final=WeightedLassoCV(cv=3))&#xA;est.fit(Y, T, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;# Confidence intervals via Bootstrap-of-Little-Bags for forests&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Meta-Learners (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;XLearner&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.metalearners import XLearner&#xA;from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor&#xA;&#xA;est = XLearner(models=GradientBoostingRegressor(),&#xA;              propensity_model=GradientBoostingClassifier(),&#xA;              cate_models=GradientBoostingRegressor())&#xA;est.fit(Y, T, X=np.hstack([X, W]))&#xA;treatment_effects = est.effect(np.hstack([X_test, W_test]))&#xA;&#xA;# Fit with bootstrap confidence interval construction enabled&#xA;est.fit(Y, T, X=np.hstack([X, W]), inference=&#39;bootstrap&#39;)&#xA;treatment_effects = est.effect(np.hstack([X_test, W_test]))&#xA;lb, ub = est.effect_interval(np.hstack([X_test, W_test]), alpha=0.05) # Bootstrap CIs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;SLearner&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.metalearners import SLearner&#xA;from sklearn.ensemble import GradientBoostingRegressor&#xA;&#xA;est = SLearner(overall_model=GradientBoostingRegressor())&#xA;est.fit(Y, T, X=np.hstack([X, W]))&#xA;treatment_effects = est.effect(np.hstack([X_test, W_test]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;TLearner&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.metalearners import TLearner&#xA;from sklearn.ensemble import GradientBoostingRegressor&#xA;&#xA;est = TLearner(models=GradientBoostingRegressor())&#xA;est.fit(Y, T, X=np.hstack([X, W]))&#xA;treatment_effects = est.effect(np.hstack([X_test, W_test]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Doubly Robust Learners (click to expand) &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Linear final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dr import LinearDRLearner&#xA;from sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier&#xA;&#xA;est = LinearDRLearner(model_propensity=GradientBoostingClassifier(),&#xA;                      model_regression=GradientBoostingRegressor())&#xA;est.fit(Y, T, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Sparse linear final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dr import SparseLinearDRLearner&#xA;from sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier&#xA;&#xA;est = SparseLinearDRLearner(model_propensity=GradientBoostingClassifier(),&#xA;                            model_regression=GradientBoostingRegressor())&#xA;est.fit(Y, T, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Nonparametric final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dr import ForestDRLearner&#xA;from sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier&#xA;&#xA;est = ForestDRLearner(model_propensity=GradientBoostingClassifier(),&#xA;                      model_regression=GradientBoostingRegressor())&#xA;est.fit(Y, T, X=X, W=W) &#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Double Machine Learning with Instrumental Variables (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Orthogonal instrumental variable learner&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.iv.dml import OrthoIV&#xA;&#xA;est = OrthoIV(projection=False, &#xA;              discrete_treatment=True, &#xA;              discrete_instrument=True)&#xA;est.fit(Y, T, Z=Z, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Nonparametric double machine learning with instrumental variable&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.iv.dml import NonParamDMLIV&#xA;&#xA;est = NonParamDMLIV(projection=False, &#xA;                    discrete_treatment=True, &#xA;                    discrete_instrument=True)&#xA;est.fit(Y, T, Z=Z, X=X, W=W) # no analytical confidence interval available&#xA;treatment_effects = est.effect(X_test)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Doubly Robust Machine Learning with Instrumental Variables (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Linear final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.iv.dr import LinearDRIV&#xA;&#xA;est = LinearDRIV(discrete_instrument=True, discrete_treatment=True)&#xA;est.fit(Y, T, Z=Z, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Sparse linear final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.iv.dr import SparseLinearDRIV&#xA;&#xA;est = SparseLinearDRIV(discrete_instrument=True, discrete_treatment=True)&#xA;est.fit(Y, T, Z=Z, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) # Debiased lasso confidence intervals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Nonparametric final stage&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.iv.dr import ForestDRIV&#xA;&#xA;est = ForestDRIV(discrete_instrument=True, discrete_treatment=True)&#xA;est.fit(Y, T, Z=Z, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;# Confidence intervals via Bootstrap-of-Little-Bags for forests&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Linear intent-to-treat (discrete instrument, discrete treatment)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.iv.dr import LinearIntentToTreatDRIV&#xA;from sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier&#xA;&#xA;est = LinearIntentToTreatDRIV(model_y_xw=GradientBoostingRegressor(),&#xA;                              model_t_xwz=GradientBoostingClassifier(),&#xA;                              flexible_model_effect=GradientBoostingRegressor())&#xA;est.fit(Y, T, Z=Z, X=X, W=W)&#xA;treatment_effects = est.effect(X_test)&#xA;lb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Deep Instrumental Variables (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import keras&#xA;from econml.iv.nnet import DeepIV&#xA;&#xA;treatment_model = keras.Sequential([keras.layers.Dense(128, activation=&#39;relu&#39;, input_shape=(2,)),&#xA;                                    keras.layers.Dropout(0.17),&#xA;                                    keras.layers.Dense(64, activation=&#39;relu&#39;),&#xA;                                    keras.layers.Dropout(0.17),&#xA;                                    keras.layers.Dense(32, activation=&#39;relu&#39;),&#xA;                                    keras.layers.Dropout(0.17)])&#xA;response_model = keras.Sequential([keras.layers.Dense(128, activation=&#39;relu&#39;, input_shape=(2,)),&#xA;                                  keras.layers.Dropout(0.17),&#xA;                                  keras.layers.Dense(64, activation=&#39;relu&#39;),&#xA;                                  keras.layers.Dropout(0.17),&#xA;                                  keras.layers.Dense(32, activation=&#39;relu&#39;),&#xA;                                  keras.layers.Dropout(0.17),&#xA;                                  keras.layers.Dense(1)])&#xA;est = DeepIV(n_components=10, # Number of gaussians in the mixture density networks)&#xA;             m=lambda z, x: treatment_model(keras.layers.concatenate([z, x])), # Treatment model&#xA;             h=lambda t, x: response_model(keras.layers.concatenate([t, x])), # Response model&#xA;             n_samples=1 # Number of samples used to estimate the response&#xA;             )&#xA;est.fit(Y, T, X=X, Z=Z) # Z -&amp;gt; instrumental variables&#xA;treatment_effects = est.effect(X_test)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/#references&#34;&gt;References&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Interpretability&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tree Interpreter of the CATE model (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.cate_interpreter import SingleTreeCateInterpreter&#xA;intrp = SingleTreeCateInterpreter(include_model_uncertainty=True, max_depth=2, min_samples_leaf=10)&#xA;# We interpret the CATE model&#39;s behavior based on the features used for heterogeneity&#xA;intrp.interpret(est, X)&#xA;# Plot the tree&#xA;plt.figure(figsize=(25, 5))&#xA;intrp.plot(feature_names=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;], fontsize=12)&#xA;plt.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/dr_cate_tree.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Policy Interpreter of the CATE model (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.cate_interpreter import SingleTreePolicyInterpreter&#xA;# We find a tree-based treatment policy based on the CATE model&#xA;intrp = SingleTreePolicyInterpreter(risk_level=0.05, max_depth=2, min_samples_leaf=1,min_impurity_decrease=.001)&#xA;intrp.interpret(est, X, sample_treatment_costs=0.2)&#xA;# Plot the tree&#xA;plt.figure(figsize=(25, 5))&#xA;intrp.plot(feature_names=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;], fontsize=12)&#xA;plt.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/dr_policy_tree.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHAP values for the CATE model (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import shap&#xA;from econml.dml import CausalForestDML&#xA;est = CausalForestDML()&#xA;est.fit(Y, T, X=X, W=W)&#xA;shap_values = est.shap_values(X)&#xA;shap.summary_plot(shap_values[&#39;Y0&#39;][&#39;T0&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Causal Model Selection and Cross-Validation&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Causal model selection with the `RScorer` (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.score import Rscorer&#xA;&#xA;# split data in train-validation&#xA;X_train, X_val, T_train, T_val, Y_train, Y_val = train_test_split(X, T, y, test_size=.4)&#xA;&#xA;# define list of CATE estimators to select among&#xA;reg = lambda: RandomForestRegressor(min_samples_leaf=20)&#xA;clf = lambda: RandomForestClassifier(min_samples_leaf=20)&#xA;models = [(&#39;ldml&#39;, LinearDML(model_y=reg(), model_t=clf(), discrete_treatment=True,&#xA;                             linear_first_stages=False, cv=3)),&#xA;          (&#39;xlearner&#39;, XLearner(models=reg(), cate_models=reg(), propensity_model=clf())),&#xA;          (&#39;dalearner&#39;, DomainAdaptationLearner(models=reg(), final_models=reg(), propensity_model=clf())),&#xA;          (&#39;slearner&#39;, SLearner(overall_model=reg())),&#xA;          (&#39;drlearner&#39;, DRLearner(model_propensity=clf(), model_regression=reg(),&#xA;                                  model_final=reg(), cv=3)),&#xA;          (&#39;rlearner&#39;, NonParamDML(model_y=reg(), model_t=clf(), model_final=reg(),&#xA;                                   discrete_treatment=True, cv=3)),&#xA;          (&#39;dml3dlasso&#39;, DML(model_y=reg(), model_t=clf(),&#xA;                             model_final=LassoCV(cv=3, fit_intercept=False),&#xA;                             discrete_treatment=True,&#xA;                             featurizer=PolynomialFeatures(degree=3),&#xA;                             linear_first_stages=False, cv=3))&#xA;]&#xA;&#xA;# fit cate models on train data&#xA;models = [(name, mdl.fit(Y_train, T_train, X=X_train)) for name, mdl in models]&#xA;&#xA;# score cate models on validation data&#xA;scorer = RScorer(model_y=reg(), model_t=clf(),&#xA;                 discrete_treatment=True, cv=3, mc_iters=2, mc_agg=&#39;median&#39;)&#xA;scorer.fit(Y_val, T_val, X=X_val)&#xA;rscore = [scorer.score(mdl) for _, mdl in models]&#xA;# select the best model&#xA;mdl, _ = scorer.best_model([mdl for _, mdl in models])&#xA;# create weighted ensemble model based on score performance&#xA;mdl, _ = scorer.ensemble([mdl for _, mdl in models])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;First Stage Model Selection (click to expand)&lt;/summary&gt; &#xA; &lt;p&gt;First stage models can be selected either by passing in cross-validated models (e.g. &lt;code&gt;sklearn.linear_model.LassoCV&lt;/code&gt;) to EconML&#39;s estimators or perform the first stage model selection outside of EconML and pass in the selected model. Unless selecting among a large set of hyperparameters, choosing first stage models externally is the preferred method due to statistical and computational advantages.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dml import LinearDML&#xA;from sklearn import clone&#xA;from sklearn.ensemble import RandomForestRegressor&#xA;from sklearn.model_selection import GridSearchCV&#xA;&#xA;cv_model = GridSearchCV(&#xA;              estimator=RandomForestRegressor(),&#xA;              param_grid={&#xA;                  &#34;max_depth&#34;: [3, None],&#xA;                  &#34;n_estimators&#34;: (10, 30, 50, 100, 200),&#xA;                  &#34;max_features&#34;: (2, 4, 6),&#xA;              },&#xA;              cv=5,&#xA;           )&#xA;# First stage model selection within EconML&#xA;# This is more direct, but computationally and statistically less efficient&#xA;est = LinearDML(model_y=cv_model, model_t=cv_model)&#xA;# First stage model selection ouside of EconML&#xA;# This is the most efficient, but requires boilerplate code&#xA;model_t = clone(cv_model).fit(W, T).best_estimator_&#xA;model_y = clone(cv_model).fit(W, Y).best_estimator_&#xA;est = LinearDML(model_y=model_t, model_t=model_y)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Inference&lt;/h3&gt; &#xA;&lt;p&gt;Whenever inference is enabled, then one can get a more structure &lt;code&gt;InferenceResults&lt;/code&gt; object with more elaborate inference information, such as p-values and z-statistics. When the CATE model is linear and parametric, then a &lt;code&gt;summary()&lt;/code&gt; method is also enabled. For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.dml import LinearDML&#xA;# Use defaults&#xA;est = LinearDML()&#xA;est.fit(Y, T, X=X, W=W)&#xA;# Get the effect inference summary, which includes the standard error, z test score, p value, and confidence interval given each sample X[i]&#xA;est.effect_inference(X_test).summary_frame(alpha=0.05, value=0, decimals=3)&#xA;# Get the population summary for the entire sample X&#xA;est.effect_inference(X_test).population_summary(alpha=0.1, value=0, decimals=3, tol=0.001)&#xA;#  Get the parameter inference summary for the final model&#xA;est.summary()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example Output (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# Get the effect inference summary, which includes the standard error, z test score, p value, and confidence interval given each sample X[i]&#xA;est.effect_inference(X_test).summary_frame(alpha=0.05, value=0, decimals=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/summary_frame.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# Get the population summary for the entire sample X&#xA;est.effect_inference(X_test).population_summary(alpha=0.1, value=0, decimals=3, tol=0.001)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/population_summary.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;#  Get the parameter inference summary for the final model&#xA;est.summary()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/summary.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Policy Learning&lt;/h3&gt; &#xA;&lt;p&gt;You can also perform direct policy learning from observational data, using the doubly robust method for offline policy learning. These methods directly predict a recommended treatment, without internally fitting an explicit model of the conditional average treatment effect.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Doubly Robust Policy Learning (click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from econml.policy import DRPolicyTree, DRPolicyForest&#xA;from sklearn.ensemble import RandomForestRegressor&#xA;&#xA;# fit a single binary decision tree policy&#xA;policy = DRPolicyTree(max_depth=1, min_impurity_decrease=0.01, honest=True)&#xA;policy.fit(y, T, X=X, W=W)&#xA;# predict the recommended treatment&#xA;recommended_T = policy.predict(X)&#xA;# plot the binary decision tree&#xA;plt.figure(figsize=(10,5))&#xA;policy.plot()&#xA;# get feature importances&#xA;importances = policy.feature_importances_&#xA;&#xA;# fit a binary decision forest&#xA;policy = DRPolicyForest(max_depth=1, min_impurity_decrease=0.01, honest=True)&#xA;policy.fit(y, T, X=X, W=W)&#xA;# predict the recommended treatment&#xA;recommended_T = policy.predict(X)&#xA;# plot the first tree in the ensemble&#xA;plt.figure(figsize=(10,5))&#xA;policy.plot(0)&#xA;# get feature importances&#xA;importances = policy.feature_importances_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EconML/main/images/policy_tree.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To see more complex examples, go to the &lt;a href=&#34;https://github.com/Microsoft/EconML/tree/main/notebooks&#34;&gt;notebooks&lt;/a&gt; section of the repository. For a more detailed description of the treatment effect estimation algorithms, see the EconML &lt;a href=&#34;https://econml.azurewebsites.net/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;For Developers&lt;/h1&gt; &#xA;&lt;p&gt;You can get started by cloning this repository. We use &lt;a href=&#34;https://setuptools.readthedocs.io/en/latest/index.html&#34;&gt;setuptools&lt;/a&gt; for building and distributing our package. We rely on some recent features of setuptools, so make sure to upgrade to a recent version with &lt;code&gt;pip install setuptools --upgrade&lt;/code&gt;. Then from your local copy of the repository you can run &lt;code&gt;pip install -e .&lt;/code&gt; to get started (but depending on what you&#39;re doing you might want to install with extras instead, like &lt;code&gt;pip install -e .[plt]&lt;/code&gt; if you want to use matplotlib integration, or you can use &lt;code&gt;pip install -e .[all]&lt;/code&gt; to include all extras).&lt;/p&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://docs.pytest.org/&#34;&gt;pytest&lt;/a&gt; for testing. To run tests locally after installing the package, you can use &lt;code&gt;pip install pytest-runner&lt;/code&gt; followed by &lt;code&gt;python setup.py pytest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have added pytest marks to some tests to make it easier to run a subset, and you can set the PYTEST_ADDOPTS environment variable to take advantage of this. For instance, you can set it to &lt;code&gt;-m &#34;not (notebook or automl)&#34;&lt;/code&gt; to skip notebook and automl tests that have some additional dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Generating the documentation&lt;/h2&gt; &#xA;&lt;p&gt;This project&#39;s documentation is generated via &lt;a href=&#34;https://www.sphinx-doc.org/en/main/index.html&#34;&gt;Sphinx&lt;/a&gt;. Note that we use &lt;a href=&#34;https://graphviz.org/&#34;&gt;graphviz&lt;/a&gt;&#39;s &lt;code&gt;dot&lt;/code&gt; application to produce some of the images in our documentation, so you should make sure that &lt;code&gt;dot&lt;/code&gt; is installed and in your path.&lt;/p&gt; &#xA;&lt;p&gt;To generate a local copy of the documentation from a clone of this repository, just run &lt;code&gt;python setup.py build_sphinx -W -E -a&lt;/code&gt;, which will build the documentation and place it under the &lt;code&gt;build/sphinx/html&lt;/code&gt; path.&lt;/p&gt; &#xA;&lt;p&gt;The reStructuredText files that make up the documentation are stored in the &lt;a href=&#34;https://github.com/Microsoft/EconML/tree/main/doc&#34;&gt;docs directory&lt;/a&gt;; module documentation is automatically generated by the Sphinx build process.&lt;/p&gt; &#xA;&lt;h1&gt;Blogs and Publications&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;June 2019: &lt;a href=&#34;https://arxiv.org/pdf/1905.10176.pdf&#34;&gt;Treatment Effects with Instruments paper&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;May 2019: &lt;a href=&#34;https://odsc.com/speakers/machine-learning-estimation-of-heterogeneous-treatment-effect-the-microsoft-econml-library/&#34;&gt;Open Data Science Conference Workshop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2018: &lt;a href=&#34;http://proceedings.mlr.press/v97/oprescu19a.html&#34;&gt;Orthogonal Random Forests paper&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2017: &lt;a href=&#34;http://proceedings.mlr.press/v70/hartford17a/hartford17a.pdf&#34;&gt;DeepIV paper&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;If you use EconML in your research, please cite us as follows:&lt;/p&gt; &#xA;&lt;p&gt;Keith Battocchi, Eleanor Dillon, Maggie Hei, Greg Lewis, Paul Oka, Miruna Oprescu, Vasilis Syrgkanis. &lt;strong&gt;EconML: A Python Package for ML-Based Heterogeneous Treatment Effects Estimation.&lt;/strong&gt; &lt;a href=&#34;https://github.com/microsoft/EconML&#34;&gt;https://github.com/microsoft/EconML&lt;/a&gt;, 2019. Version 0.x.&lt;/p&gt; &#xA;&lt;p&gt;BibTex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{econml,&#xA;  author={Keith Battocchi, Eleanor Dillon, Maggie Hei, Greg Lewis, Paul Oka, Miruna Oprescu, Vasilis Syrgkanis},&#xA;  title={{EconML}: {A Python Package for ML-Based Heterogeneous Treatment Effects Estimation}},&#xA;  howpublished={https://github.com/microsoft/EconML},&#xA;  note={Version 0.x},&#xA;  year={2019}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing and Feedback&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;p&gt;Athey, Susan, and Stefan Wager. &lt;strong&gt;Policy learning with observational data.&lt;/strong&gt; Econometrica 89.1 (2021): 133-161.&lt;/p&gt; &#xA;&lt;p&gt;X Nie, S Wager. &lt;strong&gt;Quasi-Oracle Estimation of Heterogeneous Treatment Effects.&lt;/strong&gt; &lt;a href=&#34;https://doi.org/10.1093/biomet/asaa076&#34;&gt;&lt;em&gt;Biometrika&lt;/em&gt;&lt;/a&gt;, 2020&lt;/p&gt; &#xA;&lt;p&gt;V. Syrgkanis, V. Lei, M. Oprescu, M. Hei, K. Battocchi, G. Lewis. &lt;strong&gt;Machine Learning Estimation of Heterogeneous Treatment Effects with Instruments.&lt;/strong&gt; &lt;a href=&#34;https://arxiv.org/abs/1905.10176&#34;&gt;&lt;em&gt;Proceedings of the 33rd Conference on Neural Information Processing Systems (NeurIPS)&lt;/em&gt;&lt;/a&gt;, 2019 &lt;strong&gt;(Spotlight Presentation)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;D. Foster, V. Syrgkanis. &lt;strong&gt;Orthogonal Statistical Learning.&lt;/strong&gt; &lt;a href=&#34;https://arxiv.org/pdf/1901.09036.pdf&#34;&gt;&lt;em&gt;Proceedings of the 32nd Annual Conference on Learning Theory (COLT)&lt;/em&gt;&lt;/a&gt;, 2019 &lt;strong&gt;(Best Paper Award)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;M. Oprescu, V. Syrgkanis and Z. S. Wu. &lt;strong&gt;Orthogonal Random Forest for Causal Inference.&lt;/strong&gt; &lt;a href=&#34;http://proceedings.mlr.press/v97/oprescu19a.html&#34;&gt;&lt;em&gt;Proceedings of the 36th International Conference on Machine Learning (ICML)&lt;/em&gt;&lt;/a&gt;, 2019.&lt;/p&gt; &#xA;&lt;p&gt;S. Künzel, J. Sekhon, J. Bickel and B. Yu. &lt;strong&gt;Metalearners for estimating heterogeneous treatment effects using machine learning.&lt;/strong&gt; &lt;a href=&#34;https://www.pnas.org/content/116/10/4156&#34;&gt;&lt;em&gt;Proceedings of the national academy of sciences, 116(10), 4156-4165&lt;/em&gt;&lt;/a&gt;, 2019.&lt;/p&gt; &#xA;&lt;p&gt;S. Athey, J. Tibshirani, S. Wager. &lt;strong&gt;Generalized random forests.&lt;/strong&gt; &lt;a href=&#34;https://projecteuclid.org/euclid.aos/1547197251&#34;&gt;&lt;em&gt;Annals of Statistics, 47, no. 2, 1148--1178&lt;/em&gt;&lt;/a&gt;, 2019.&lt;/p&gt; &#xA;&lt;p&gt;V. Chernozhukov, D. Nekipelov, V. Semenova, V. Syrgkanis. &lt;strong&gt;Plug-in Regularized Estimation of High-Dimensional Parameters in Nonlinear Semiparametric Models.&lt;/strong&gt; &lt;a href=&#34;https://arxiv.org/abs/1806.04823&#34;&gt;&lt;em&gt;Arxiv preprint arxiv:1806.04823&lt;/em&gt;&lt;/a&gt;, 2018.&lt;/p&gt; &#xA;&lt;p&gt;S. Wager, S. Athey. &lt;strong&gt;Estimation and Inference of Heterogeneous Treatment Effects using Random Forests.&lt;/strong&gt; &lt;a href=&#34;https://www.tandfonline.com/doi/citedby/10.1080/01621459.2017.1319839&#34;&gt;&lt;em&gt;Journal of the American Statistical Association, 113:523, 1228-1242&lt;/em&gt;&lt;/a&gt;, 2018.&lt;/p&gt; &#xA;&lt;p&gt;Jason Hartford, Greg Lewis, Kevin Leyton-Brown, and Matt Taddy. &lt;strong&gt;Deep IV: A flexible approach for counterfactual prediction.&lt;/strong&gt; &lt;a href=&#34;http://proceedings.mlr.press/v70/hartford17a/hartford17a.pdf&#34;&gt;&lt;em&gt;Proceedings of the 34th International Conference on Machine Learning, ICML&#39;17&lt;/em&gt;&lt;/a&gt;, 2017.&lt;/p&gt; &#xA;&lt;p&gt;V. Chernozhukov, D. Chetverikov, M. Demirer, E. Duflo, C. Hansen, and a. W. Newey. &lt;strong&gt;Double Machine Learning for Treatment and Causal Parameters.&lt;/strong&gt; &lt;a href=&#34;https://arxiv.org/abs/1608.00060&#34;&gt;&lt;em&gt;ArXiv preprint arXiv:1608.00060&lt;/em&gt;&lt;/a&gt;, 2016.&lt;/p&gt; &#xA;&lt;p&gt;Dudik, M., Erhan, D., Langford, J., &amp;amp; Li, L. &lt;strong&gt;Doubly robust policy evaluation and optimization.&lt;/strong&gt; Statistical Science, 29(4), 485-511, 2014.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure/Azure-Sentinel</title>
    <updated>2022-06-03T02:12:52Z</updated>
    <id>tag:github.com,2022-06-03:/Azure/Azure-Sentinel</id>
    <link href="https://github.com/Azure/Azure-Sentinel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cloud-native SIEM for intelligent security analytics for your entire enterprise.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft Sentinel and Microsoft 365 Defender&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the unified Microsoft Sentinel and Microsoft 365 Defender repository! This repository contains out of the box detections, exploration queries, hunting queries, workbooks, playbooks and much more to help you get ramped up with Microsoft Sentinel and provide you security content to secure your environment and hunt for threats. The hunting queries also include Microsoft 365 Defender hunting queries for advanced hunting scenarios in both Microsoft 365 Defender and Microsoft Sentinel. You can also submit to &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/issues&#34;&gt;issues&lt;/a&gt; for any samples or resources you would like to see here as you onboard to Microsoft Sentinel. This repository welcomes contributions and refer to this repository&#39;s &lt;a href=&#34;https://aka.ms/threathunters&#34;&gt;wiki&lt;/a&gt; to get started. For questions and feedback, please contact &lt;a href=&#34;https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/AzureSentinel@microsoft.com&#34;&gt;AzureSentinel@microsoft.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.microsoft.com/fwlink/?linkid=2073774&amp;amp;clcid=0x409&#34;&gt;Microsoft Sentinel documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/microsoft-365/security/defender/microsoft-365-defender?view=o365-worldwide&#34;&gt;Microsoft 365 Defender documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/securitywebinars&#34;&gt;Security Community Webinars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.github.com/en#dotcom&#34;&gt;Getting started with GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We value your feedback. Here are some channels to help surface your questions or feedback:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;General product specific Q&amp;amp;A for SIEM and SOAR - Join in the &lt;a href=&#34;https://techcommunity.microsoft.com/t5/microsoft-sentinel/bd-p/MicrosoftSentinel&#34;&gt;Microsoft Sentinel Tech Community conversations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;General product specific Q&amp;amp;A for XDR - Join in the &lt;a href=&#34;https://techcommunity.microsoft.com/t5/microsoft-365-defender/bd-p/MicrosoftThreatProtection&#34;&gt;Microsoft 365 Defender Tech Community conversations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Product specific feature requests - Upvote or post new on &lt;a href=&#34;https://feedback.azure.com/d365community/forum/37638d17-0625-ec11-b6e6-000d3a4f07b8&#34;&gt;Microsoft Sentinel feedback forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Report product or contribution bugs - File a GitHub Issue using &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/issues/new?assignees=&amp;amp;labels=&amp;amp;template=bug_report.md&amp;amp;title=&#34;&gt;Bug template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;General feedback on community and contribution process - File a GitHub Issue using &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/issues/new?assignees=&amp;amp;labels=&amp;amp;template=feature_request.md&amp;amp;title=&#34;&gt;Feature Request template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Add in your new or updated contributions to GitHub&lt;/h2&gt; &#xA;&lt;p&gt;Note: If you are a first time contributor to this repository, &lt;a href=&#34;https://docs.github.com/github/getting-started-with-github/fork-a-repo&#34;&gt;General GitHub Fork the repo guidance&lt;/a&gt; before cloning or &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/raw/master/GettingStarted.md&#34;&gt;Specific steps for the Sentinel repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;General Steps&lt;/h2&gt; &#xA;&lt;p&gt;Brand new or update to a contribution via these methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Submit for review directly on GitHub website &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Browse to the folder you want to upload your file to&lt;/li&gt; &#xA;   &lt;li&gt;Choose Upload Files and browse to your file.&lt;/li&gt; &#xA;   &lt;li&gt;You will be required to create your own branch and then submit the Pull Request for review.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://help.github.com/en/desktop/getting-started-with-github-desktop&#34;&gt;GitHub Desktop&lt;/a&gt; or &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;Visual Studio&lt;/a&gt; or &lt;a href=&#34;https://code.visualstudio.com/?wt.mc_id=DX_841432&#34;&gt;VSCode&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.github.com/github/getting-started-with-github/fork-a-repo&#34;&gt;Fork the repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository&#34;&gt;Clone the repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.github.com/en/desktop/contributing-to-projects/creating-a-branch-for-your-work&#34;&gt;Create your own branch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Do your additions/updates in GitHub Desktop&lt;/li&gt; &#xA;   &lt;li&gt;Be sure to merge master back to your branch before you push.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.github.com/en/github/using-git/pushing-commits-to-a-remote-repository&#34;&gt;Push your changes to GitHub&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pull Request&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After you push your changes, you will need to submit the &lt;a href=&#34;https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests&#34;&gt;Pull Request (PR)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Details about the Proposed Changes are required, be sure to include a minimal level of detail so a review can clearly understand the reason for the change and what he change is related to in the code.&lt;/li&gt; &#xA; &lt;li&gt;After submission, check the &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/pulls&#34;&gt;Pull Request&lt;/a&gt; for comments&lt;/li&gt; &#xA; &lt;li&gt;Make changes as suggested and update your branch or explain why no change is needed. Resolve the comment when done.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pull Request Detection Template Structure Validation Check&lt;/h3&gt; &#xA;&lt;p&gt;As part of the PR checks we run a structure validation to make sure all required parts of the YAML structure are included. For Detections, there is a new section that must be included. See the &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/wiki/Contribute-to-Sentinel-GitHub-Community-of-Queries#now-onto-the-how&#34;&gt;contribution guidelines&lt;/a&gt; for more information. If this section or any other required section is not included, then a validation error will occur similar to the below. The example is specifically if the YAML is missing the entityMappings section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;A total of 1 test files matched the specified pattern.&#xA;[xUnit.net 00:00:00.95]     Kqlvalidations.Tests.DetectionTemplateStructureValidationTests.Validate_DetectionTemplates_HaveValidTemplateStructure(detectionsYamlFileName: &#34;ExcessiveBlockedTrafficGeneratedbyUser.yaml&#34;) [FAIL]&#xA;  X Kqlvalidations.Tests.DetectionTemplateStructureValidationTests.Validate_DetectionTemplates_HaveValidTemplateStructure(detectionsYamlFileName: &#34;ExcessiveBlockedTrafficGeneratedbyUser.yaml&#34;) [104ms]&#xA;  Error Message:&#xA;   Expected object to be &amp;lt;null&amp;gt;, but found System.ComponentModel.DataAnnotations.ValidationException with message &#34;An old mapping for entity &#39;AccountCustomEntity&#39; does not have a matching new mapping entry.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pull Request Kql Validation Check&lt;/h3&gt; &#xA;&lt;p&gt;As part of the PR checks we run a syntax validation of the kql queries defined in the template. If this check fails go to Azure Pipeline (by pressing on the errors link on the checks tab in your PR) &lt;img src=&#34;https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.github/Media/Azurepipeline.png&#34; alt=&#34;Azurepipeline&#34;&gt; In the pipeline you can see which test failed and what is the cause: &lt;img src=&#34;https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/.github/Media/PipelineTestsTab.png&#34; alt=&#34;Pipeline Tests Tab&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example error message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;A total of 1 test files matched the specified pattern.&#xA;[xUnit.net 00:00:01.81]     Kqlvalidations.Tests.KqlValidationTests.Validate_DetectionQueries_HaveValidKql(detectionsYamlFileName: &#34;ExcessiveBlockedTrafficGeneratedbyUser.yaml&#34;) [FAIL]&#xA;  X Kqlvalidations.Tests.KqlValidationTests.Validate_DetectionQueries_HaveValidKql(detectionsYamlFileName: &#34;ExcessiveBlockedTrafficGeneratedbyUser.yaml&#34;) [21ms]&#xA;  Error Message:&#xA;   Template Id:fa0ab69c-7124-4f62-acdd-61017cf6ce89 is not valid Errors:The name &#39;SymantecEndpointProtection&#39; does not refer to any known table, tabular variable or function., Code: &#39;KS204&#39;, Severity: &#39;Error&#39;, Location: &#39;67..93&#39;,The name &#39;SymantecEndpointProtection&#39; does not refer to any known table, tabular variable or function., Code: &#39;KS204&#39;, Severity: &#39;Error&#39;, Location: &#39;289..315&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using custom logs table (a table which is not defined on all workspaces by default) you should verify your table schema is defined in json file in the folder &lt;em&gt;Azure-Sentinel\.script\tests\KqlvalidationsTests\CustomTables&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example for table tablexyz.json&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Name&#34;: &#34;tablexyz&#34;,&#xA;  &#34;Properties&#34;: [&#xA;    {&#xA;      &#34;Name&#34;: &#34;SomeDateTimeColumn&#34;,&#xA;      &#34;Type&#34;: &#34;DateTime&#34;&#xA;    },&#xA;    {&#xA;      &#34;Name&#34;: &#34;SomeStringColumn&#34;,&#xA;      &#34;Type&#34;: &#34;String&#34;&#xA;    },&#xA;    {&#xA;      &#34;Name&#34;: &#34;SomeDynamicColumn&#34;,&#xA;      &#34;Type&#34;: &#34;Dynamic&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Kql Validation Locally&lt;/h3&gt; &#xA;&lt;p&gt;In order to run the kql validation before submitting Pull Request in you local machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to have &lt;strong&gt;.Net Core 3.1 SDK&lt;/strong&gt; installed &lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;How to download .Net&lt;/a&gt; (Supports all platforms)&lt;/li&gt; &#xA; &lt;li&gt;Open Shell and navigate to &lt;code&gt;Azure-Sentinel\\.script\tests\KqlvalidationsTests\&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;dotnet test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of output (in Ubuntu):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Welcome to .NET Core 3.1!&#xA;---------------------&#xA;SDK Version: 3.1.403&#xA;&#xA;Telemetry&#xA;---------&#xA;The .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous. It is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to &#39;1&#39; or &#39;true&#39; using your favorite shell.&#xA;&#xA;Read more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry&#xA;&#xA;----------------&#xA;Explore documentation: https://aka.ms/dotnet-docs&#xA;Report issues and find source on GitHub: https://github.com/dotnet/core&#xA;Find out what&#39;s new: https://aka.ms/dotnet-whats-new&#xA;Learn about the installed HTTPS developer cert: https://aka.ms/aspnet-core-https&#xA;Use &#39;dotnet --help&#39; to see available commands or visit: https://aka.ms/dotnet-cli-docs&#xA;Write your first app: https://aka.ms/first-net-core-app&#xA;--------------------------------------------------------------------------------------&#xA;Test run for /mnt/c/git/Azure-Sentinel/.script/tests/KqlvalidationsTests/bin/Debug/netcoreapp3.1/Kqlvalidations.Tests.dll(.NETCoreApp,Version=v3.1)&#xA;Microsoft (R) Test Execution Command Line Tool Version 16.7.0&#xA;Copyright (c) Microsoft Corporation.  All rights reserved.&#xA;&#xA;Starting test execution, please wait...&#xA;&#xA;A total of 1 test files matched the specified pattern.&#xA;&#xA;Test Run Successful.&#xA;Total tests: 171&#xA;     Passed: 171&#xA; Total time: 25.7973 Seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Detection schema validation tests&lt;/h3&gt; &#xA;&lt;p&gt;Similarly to KQL Validation, there is an automatic validation of the schema of a detection. The schema validation includes the detection&#39;s frequency and period, the detection&#39;s trigger type and threshold, validity of connectors Ids (&lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/raw/master/.script/tests/detectionTemplateSchemaValidation/ValidConnectorIds.json&#34;&gt;valid connectors Ids list&lt;/a&gt;), etc. A wrong format or missing attributes will result with an informative check failure, which should guide you through the resolution of the issue, but make sure to look into the format of already approved detection.&lt;/p&gt; &#xA;&lt;h3&gt;Run Detection Schema Validation Locally&lt;/h3&gt; &#xA;&lt;p&gt;In order to run the kql validation before submitting Pull Request in you local machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to have &lt;strong&gt;.Net Core 3.1 SDK&lt;/strong&gt; installed &lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;How to download .Net&lt;/a&gt; (Supports all platforms)&lt;/li&gt; &#xA; &lt;li&gt;Open Shell and navigate to &lt;code&gt;Azure-Sentinel\\.script\tests\DetectionTemplateSchemaValidation\&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;dotnet test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;p&gt;For information on what you can contribute and further details, refer to the &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/wiki#get-started&#34;&gt;&#34;get started&#34;&lt;/a&gt; section on the project&#39;s &lt;a href=&#34;https://aka.ms/threathunters&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dsacademybr/PythonFundamentos</title>
    <updated>2022-06-03T02:12:52Z</updated>
    <id>tag:github.com,2022-06-03:/dsacademybr/PythonFundamentos</id>
    <link href="https://github.com/dsacademybr/PythonFundamentos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repositório do Curso Online Python Fundamentos Para Análise de Dados.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Python Fundamentos Para Análise de Dados 3.0&lt;/h1&gt; &#xA;&lt;p&gt;Data Science Academy - Repositório dos Arquivos do Curso Gratuito Python Fundamentos Para Análise de Dados, Versão 3.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.datascienceacademy.com.br&#34;&gt;https://www.datascienceacademy.com.br&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>