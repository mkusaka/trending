<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-22T01:39:49Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>robertmartin8/PyPortfolioOpt</title>
    <updated>2024-09-22T01:39:49Z</updated>
    <id>tag:github.com,2024-09-22:/robertmartin8/PyPortfolioOpt</id>
    <link href="https://github.com/robertmartin8/PyPortfolioOpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Financial portfolio optimisation in python, including classical efficient frontier, Black-Litterman, Hierarchical Risk Parity&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://github.com/robertmartin8/PyPortfolioOpt/raw/master/media/logo_v1.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;!-- buttons --&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.python.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/PyPortfolioOpt.svg?sanitize=true&#34; alt=&#34;python&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://www.python.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platforms-linux--64,win--64,osx--64-orange.svg?style=flat-square&#34; alt=&#34;platforms&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://pypi.org/project/PyPortfolioOpt/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/pypi-v1.5.5-brightgreen.svg?sanitize=true&#34; alt=&#34;pypi&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;MIT license&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/robertmartin8/PyPortfolioOpt/actions&#34;&gt; &lt;img src=&#34;https://github.com/robertmartin8/PyPortfolioOpt/workflows/pytest/badge.svg?branch=master&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://app.codecov.io/gh/robertmartin8/PyPortfolioOpt&#34;&gt; &lt;img src=&#34;https://codecov.io/github/robertmartin8/PyPortfolioOpt/coverage.svg?branch=main&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://pepy.tech/project/pyportfolioopt&#34;&gt; &lt;img src=&#34;https://pepy.tech/badge/pyportfolioopt&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://mybinder.org/v2/gh/robertmartin8/pyportfolioopt/master/?filepath=cookbook&#34;&gt; &lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;binder&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;/p&gt; &#xA;&lt;!-- content --&gt; &#xA;&lt;p&gt;PyPortfolioOpt is a library that implements portfolio optimization methods, including classical mean-variance optimization techniques and Black-Litterman allocation, as well as more recent developments in the field like shrinkage and Hierarchical Risk Parity.&lt;/p&gt; &#xA;&lt;p&gt;It is &lt;strong&gt;extensive&lt;/strong&gt; yet easily &lt;strong&gt;extensible&lt;/strong&gt;, and can be useful for either a casual investors, or a professional looking for an easy prototyping tool. Whether you are a fundamentals-oriented investor who has identified a handful of undervalued picks, or an algorithmic trader who has a basket of strategies, PyPortfolioOpt can help you combine your alpha sources in a risk-efficient way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PyPortfolioOpt has been &lt;a href=&#34;https://joss.theoj.org/papers/10.21105/joss.03066&#34;&gt;published&lt;/a&gt; in the Journal of Open Source Software 🎉&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PyPortfolioOpt is now being maintained by &lt;a href=&#34;https://github.com/88d52bdba0366127fffca9dfa93895&#34;&gt;Tuan Tran&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Head over to the &lt;strong&gt;&lt;a href=&#34;https://pyportfolioopt.readthedocs.io/en/latest/&#34;&gt;documentation on ReadTheDocs&lt;/a&gt;&lt;/strong&gt; to get an in-depth look at the project, or check out the &lt;a href=&#34;https://github.com/robertmartin8/PyPortfolioOpt/tree/master/cookbook&#34;&gt;cookbook&lt;/a&gt; to see some examples showing the full process from downloading data to building a portfolio.&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://github.com/robertmartin8/PyPortfolioOpt/raw/master/media/conceptual_flowchart_v2.png?raw=true&#34; style=&#34;width:70%;&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#table-of-contents&#34;&gt;Table of contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#for-development&#34;&gt;For development&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#a-quick-example&#34;&gt;A quick example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#an-overview-of-classical-portfolio-optimization-methods&#34;&gt;An overview of classical portfolio optimization methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#expected-returns&#34;&gt;Expected returns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#risk-models-covariance&#34;&gt;Risk models (covariance)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#objective-functions&#34;&gt;Objective functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#adding-constraints-or-different-objectives&#34;&gt;Adding constraints or different objectives&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#black-litterman-allocation&#34;&gt;Black-Litterman allocation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#other-optimizers&#34;&gt;Other optimizers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#advantages-over-existing-implementations&#34;&gt;Advantages over existing implementations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#project-principles-and-design-decisions&#34;&gt;Project principles and design decisions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#citing-pyportfolioopt&#34;&gt;Citing PyPortfolioOpt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/robertmartin8/PyPortfolioOpt/master/#getting-in-touch&#34;&gt;Getting in touch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to play with PyPortfolioOpt interactively in your browser, you may launch Binder &lt;a href=&#34;https://mybinder.org/v2/gh/robertmartin8/pyportfolioopt/master&#34;&gt;here&lt;/a&gt;. It takes a while to set up, but it lets you try out the cookbook recipes without having to deal with all of the requirements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: macOS users will need to install &lt;a href=&#34;https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/&#34;&gt;Command Line Tools&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: if you are on windows, you first need to installl C++. (&lt;a href=&#34;https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view&#34;&gt;install instructions&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is available on PyPI, meaning that you can just:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install PyPortfolioOpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(you may need to follow separate installation instructions for &lt;a href=&#34;https://cvxopt.org/install/index.html#&#34;&gt;cvxopt&lt;/a&gt; and &lt;a href=&#34;https://www.cvxpy.org/install/&#34;&gt;cvxpy&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;However, it is best practice to use a dependency manager within a virtual environment. My current recommendation is to get yourself set up with &lt;a href=&#34;https://github.com/sdispater/poetry&#34;&gt;poetry&lt;/a&gt; then just run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry add PyPortfolioOpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, clone/download the project and in the project directory run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PyPortfolioOpt supports Docker. Build your first container with &lt;code&gt;docker build -f docker/Dockerfile . -t pypfopt&lt;/code&gt;. You can use the image to run tests or even launch a Jupyter server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# iPython interpreter:&#xA;docker run -it pypfopt poetry run ipython&#xA;&#xA;# Jupyter notebook server:&#xA;docker run -it -p 8888:8888 pypfopt poetry run jupyter notebook --allow-root --no-browser --ip 0.0.0.0&#xA;# click on http://127.0.0.1:8888/?token=xxx&#xA;&#xA;# Pytest&#xA;docker run -t pypfopt poetry run pytest&#xA;&#xA;# Bash&#xA;docker run -it pypfopt bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, please read &lt;a href=&#34;https://docker-curriculum.com/#introduction&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;For development&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to make major changes to integrate this with your proprietary system, it probably makes sense to clone this repository and to just use the source code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/robertmartin8/PyPortfolioOpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you could try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e git+https://github.com/robertmartin8/PyPortfolioOpt.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A quick example&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example on real life stock data, demonstrating how easy it is to find the long-only portfolio that maximises the Sharpe ratio (a measure of risk-adjusted returns).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;from pypfopt import EfficientFrontier&#xA;from pypfopt import risk_models&#xA;from pypfopt import expected_returns&#xA;&#xA;# Read in price data&#xA;df = pd.read_csv(&#34;tests/resources/stock_prices.csv&#34;, parse_dates=True, index_col=&#34;date&#34;)&#xA;&#xA;# Calculate expected returns and sample covariance&#xA;mu = expected_returns.mean_historical_return(df)&#xA;S = risk_models.sample_cov(df)&#xA;&#xA;# Optimize for maximal Sharpe ratio&#xA;ef = EfficientFrontier(mu, S)&#xA;raw_weights = ef.max_sharpe()&#xA;cleaned_weights = ef.clean_weights()&#xA;ef.save_weights_to_file(&#34;weights.csv&#34;)  # saves to file&#xA;print(cleaned_weights)&#xA;ef.portfolio_performance(verbose=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This outputs the following weights:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;{&#39;GOOG&#39;: 0.03835,&#xA; &#39;AAPL&#39;: 0.0689,&#xA; &#39;FB&#39;: 0.20603,&#xA; &#39;BABA&#39;: 0.07315,&#xA; &#39;AMZN&#39;: 0.04033,&#xA; &#39;GE&#39;: 0.0,&#xA; &#39;AMD&#39;: 0.0,&#xA; &#39;WMT&#39;: 0.0,&#xA; &#39;BAC&#39;: 0.0,&#xA; &#39;GM&#39;: 0.0,&#xA; &#39;T&#39;: 0.0,&#xA; &#39;UAA&#39;: 0.0,&#xA; &#39;SHLD&#39;: 0.0,&#xA; &#39;XOM&#39;: 0.0,&#xA; &#39;RRC&#39;: 0.0,&#xA; &#39;BBY&#39;: 0.01324,&#xA; &#39;MA&#39;: 0.35349,&#xA; &#39;PFE&#39;: 0.1957,&#xA; &#39;JPM&#39;: 0.0,&#xA; &#39;SBUX&#39;: 0.01082}&#xA;&#xA;Expected annual return: 30.5%&#xA;Annual volatility: 22.2%&#xA;Sharpe Ratio: 1.28&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is interesting but not useful in itself. However, PyPortfolioOpt provides a method which allows you to convert the above continuous weights to an actual allocation that you could buy. Just enter the most recent prices, and the desired portfolio size ($10,000 in this example):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices&#xA;&#xA;&#xA;latest_prices = get_latest_prices(df)&#xA;&#xA;da = DiscreteAllocation(weights, latest_prices, total_portfolio_value=10000)&#xA;allocation, leftover = da.greedy_portfolio()&#xA;print(&#34;Discrete allocation:&#34;, allocation)&#xA;print(&#34;Funds remaining: ${:.2f}&#34;.format(leftover))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;12 out of 20 tickers were removed&#xA;Discrete allocation: {&#39;GOOG&#39;: 1, &#39;AAPL&#39;: 4, &#39;FB&#39;: 12, &#39;BABA&#39;: 4, &#39;BBY&#39;: 2,&#xA;                      &#39;MA&#39;: 20, &#39;PFE&#39;: 54, &#39;SBUX&#39;: 1}&#xA;Funds remaining: $11.89&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer: nothing about this project constitues investment advice, and the author bears no responsibiltiy for your subsequent investment decisions. Please refer to the &lt;a href=&#34;https://github.com/robertmartin8/PyPortfolioOpt/raw/master/LICENSE.txt&#34;&gt;license&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;An overview of classical portfolio optimization methods&lt;/h2&gt; &#xA;&lt;p&gt;Harry Markowitz&#39;s 1952 paper is the undeniable classic, which turned portfolio optimization from an art into a science. The key insight is that by combining assets with different expected returns and volatilities, one can decide on a mathematically optimal allocation which minimises the risk for a target return – the set of all such optimal portfolios is referred to as the &lt;strong&gt;efficient frontier&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://github.com/robertmartin8/PyPortfolioOpt/raw/master/media/efficient_frontier_white.png?raw=true&#34; style=&#34;width:60%;&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;p&gt;Although much development has been made in the subject, more than half a century later, Markowitz&#39;s core ideas are still fundamentally important and see daily use in many portfolio management firms. The main drawback of mean-variance optimization is that the theoretical treatment requires knowledge of the expected returns and the future risk-characteristics (covariance) of the assets. Obviously, if we knew the expected returns of a stock life would be much easier, but the whole game is that stock returns are notoriously hard to forecast. As a substitute, we can derive estimates of the expected return and covariance based on historical data – though we do lose the theoretical guarantees provided by Markowitz, the closer our estimates are to the real values, the better our portfolio will be.&lt;/p&gt; &#xA;&lt;p&gt;Thus this project provides four major sets of functionality (though of course they are intimately related)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Estimates of expected returns&lt;/li&gt; &#xA; &lt;li&gt;Estimates of risk (i.e covariance of asset returns)&lt;/li&gt; &#xA; &lt;li&gt;Objective functions to be optimized&lt;/li&gt; &#xA; &lt;li&gt;Optimizers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A key design goal of PyPortfolioOpt is &lt;strong&gt;modularity&lt;/strong&gt; – the user should be able to swap in their components while still making use of the framework that PyPortfolioOpt provides.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;In this section, we detail some of PyPortfolioOpt&#39;s available functionality. More examples are offered in the Jupyter notebooks &lt;a href=&#34;https://github.com/robertmartin8/PyPortfolioOpt/tree/master/cookbook&#34;&gt;here&lt;/a&gt;. Another good resource is the &lt;a href=&#34;https://github.com/robertmartin8/PyPortfolioOpt/tree/master/tests&#34;&gt;tests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A far more comprehensive version of this can be found on &lt;a href=&#34;https://pyportfolioopt.readthedocs.io/en/latest/&#34;&gt;ReadTheDocs&lt;/a&gt;, as well as possible extensions for more advanced users.&lt;/p&gt; &#xA;&lt;h3&gt;Expected returns&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mean historical returns: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the simplest and most common approach, which states that the expected return of each asset is equal to the mean of its historical returns.&lt;/li&gt; &#xA;   &lt;li&gt;easily interpretable and very intuitive&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Exponentially weighted mean historical returns: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;similar to mean historical returns, except it gives exponentially more weight to recent prices&lt;/li&gt; &#xA;   &lt;li&gt;it is likely the case that an asset&#39;s most recent returns hold more weight than returns from 10 years ago when it comes to estimating future returns.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Capital Asset Pricing Model (CAPM): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;a simple model to predict returns based on the beta to the market&lt;/li&gt; &#xA;   &lt;li&gt;this is used all over finance!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Risk models (covariance)&lt;/h3&gt; &#xA;&lt;p&gt;The covariance matrix encodes not just the volatility of an asset, but also how it correlated to other assets. This is important because in order to reap the benefits of diversification (and thus increase return per unit risk), the assets in the portfolio should be as uncorrelated as possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sample covariance matrix: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;an unbiased estimate of the covariance matrix&lt;/li&gt; &#xA;   &lt;li&gt;relatively easy to compute&lt;/li&gt; &#xA;   &lt;li&gt;the de facto standard for many years&lt;/li&gt; &#xA;   &lt;li&gt;however, it has a high estimation error, which is particularly dangerous in mean-variance optimization because the optimizer is likely to give excess weight to these erroneous estimates.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Semicovariance: a measure of risk that focuses on downside variation.&lt;/li&gt; &#xA; &lt;li&gt;Exponential covariance: an improvement over sample covariance that gives more weight to recent data&lt;/li&gt; &#xA; &lt;li&gt;Covariance shrinkage: techniques that involve combining the sample covariance matrix with a structured estimator, to reduce the effect of erroneous weights. PyPortfolioOpt provides wrappers around the efficient vectorised implementations provided by &lt;code&gt;sklearn.covariance&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;manual shrinkage&lt;/li&gt; &#xA;   &lt;li&gt;Ledoit Wolf shrinkage, which chooses an optimal shrinkage parameter. We offer three shrinkage targets: &lt;code&gt;constant_variance&lt;/code&gt;, &lt;code&gt;single_factor&lt;/code&gt;, and &lt;code&gt;constant_correlation&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Oracle Approximating Shrinkage&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Minimum Covariance Determinant: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;a robust estimate of the covariance&lt;/li&gt; &#xA;   &lt;li&gt;implemented in &lt;code&gt;sklearn.covariance&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://github.com/robertmartin8/PyPortfolioOpt/raw/master/media/corrplot_white.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;(This plot was generated using &lt;code&gt;plotting.plot_covariance&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Objective functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maximum Sharpe ratio: this results in a &lt;em&gt;tangency portfolio&lt;/em&gt; because on a graph of returns vs risk, this portfolio corresponds to the tangent of the efficient frontier that has a y-intercept equal to the risk-free rate. This is the default option because it finds the optimal return per unit risk.&lt;/li&gt; &#xA; &lt;li&gt;Minimum volatility. This may be useful if you&#39;re trying to get an idea of how low the volatility &lt;em&gt;could&lt;/em&gt; be, but in practice it makes a lot more sense to me to use the portfolio that maximises the Sharpe ratio.&lt;/li&gt; &#xA; &lt;li&gt;Efficient return, a.k.a. the Markowitz portfolio, which minimises risk for a given target return – this was the main focus of Markowitz 1952&lt;/li&gt; &#xA; &lt;li&gt;Efficient risk: the Sharpe-maximising portfolio for a given target risk.&lt;/li&gt; &#xA; &lt;li&gt;Maximum quadratic utility. You can provide your own risk-aversion level and compute the appropriate portfolio.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Adding constraints or different objectives&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Long/short: by default all of the mean-variance optimization methods in PyPortfolioOpt are long-only, but they can be initialised to allow for short positions by changing the weight bounds:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ef = EfficientFrontier(mu, S, weight_bounds=(-1, 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Market neutrality: for the &lt;code&gt;efficient_risk&lt;/code&gt; and &lt;code&gt;efficient_return&lt;/code&gt; methods, PyPortfolioOpt provides an option to form a market-neutral portfolio (i.e weights sum to zero). This is not possible for the max Sharpe portfolio and the min volatility portfolio because in those cases because they are not invariant with respect to leverage. Market neutrality requires negative weights:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ef = EfficientFrontier(mu, S, weight_bounds=(-1, 1))&#xA;ef.efficient_return(target_return=0.2, market_neutral=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimum/maximum position size: it may be the case that you want no security to form more than 10% of your portfolio. This is easy to encode:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ef = EfficientFrontier(mu, S, weight_bounds=(0, 0.1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One issue with mean-variance optimization is that it leads to many zero-weights. While these are &#34;optimal&#34; in-sample, there is a large body of research showing that this characteristic leads mean-variance portfolios to underperform out-of-sample. To that end, I have introduced an objective function that can reduce the number of negligible weights for any of the objective functions. Essentially, it adds a penalty (parameterised by &lt;code&gt;gamma&lt;/code&gt;) on small weights, with a term that looks just like L2 regularisation in machine learning. It may be necessary to try several &lt;code&gt;gamma&lt;/code&gt; values to achieve the desired number of non-negligible weights. For the test portfolio of 20 securities, &lt;code&gt;gamma ~ 1&lt;/code&gt; is sufficient&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ef = EfficientFrontier(mu, S)&#xA;ef.add_objective(objective_functions.L2_reg, gamma=1)&#xA;ef.max_sharpe()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Black-Litterman allocation&lt;/h3&gt; &#xA;&lt;p&gt;As of v0.5.0, we now support Black-Litterman asset allocation, which allows you to combine a prior estimate of returns (e.g the market-implied returns) with your own views to form a posterior estimate. This results in much better estimates of expected returns than just using the mean historical return. Check out the &lt;a href=&#34;https://pyportfolioopt.readthedocs.io/en/latest/BlackLitterman.html&#34;&gt;docs&lt;/a&gt; for a discussion of the theory, as well as advice on formatting inputs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;S = risk_models.sample_cov(df)&#xA;viewdict = {&#34;AAPL&#34;: 0.20, &#34;BBY&#34;: -0.30, &#34;BAC&#34;: 0, &#34;SBUX&#34;: -0.2, &#34;T&#34;: 0.131321}&#xA;bl = BlackLittermanModel(S, pi=&#34;equal&#34;, absolute_views=viewdict, omega=&#34;default&#34;)&#xA;rets = bl.bl_returns()&#xA;&#xA;ef = EfficientFrontier(rets, S)&#xA;ef.max_sharpe()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other optimizers&lt;/h3&gt; &#xA;&lt;p&gt;The features above mostly pertain to solving mean-variance optimization problems via quadratic programming (though this is taken care of by &lt;code&gt;cvxpy&lt;/code&gt;). However, we offer different optimizers as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mean-semivariance optimization&lt;/li&gt; &#xA; &lt;li&gt;Mean-CVaR optimization&lt;/li&gt; &#xA; &lt;li&gt;Hierarchical Risk Parity, using clustering algorithms to choose uncorrelated assets&lt;/li&gt; &#xA; &lt;li&gt;Markowitz&#39;s critical line algorithm (CLA)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://pyportfolioopt.readthedocs.io/en/latest/OtherOptimizers.html&#34;&gt;documentation&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;Advantages over existing implementations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Includes both classical methods (Markowitz 1952 and Black-Litterman), suggested best practices (e.g covariance shrinkage), along with many recent developments and novel features, like L2 regularisation, shrunk covariance, hierarchical risk parity.&lt;/li&gt; &#xA; &lt;li&gt;Native support for pandas dataframes: easily input your daily prices data.&lt;/li&gt; &#xA; &lt;li&gt;Extensive practical tests, which use real-life data.&lt;/li&gt; &#xA; &lt;li&gt;Easy to combine with your proprietary strategies and models.&lt;/li&gt; &#xA; &lt;li&gt;Robust to missing data, and price-series of different lengths (e.g FB data only goes back to 2012 whereas AAPL data goes back to 1980).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project principles and design decisions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It should be easy to swap out individual components of the optimization process with the user&#39;s proprietary improvements.&lt;/li&gt; &#xA; &lt;li&gt;Usability is everything: it is better to be self-explanatory than consistent.&lt;/li&gt; &#xA; &lt;li&gt;There is no point in portfolio optimization unless it can be practically applied to real asset prices.&lt;/li&gt; &#xA; &lt;li&gt;Everything that has been implemented should be tested.&lt;/li&gt; &#xA; &lt;li&gt;Inline documentation is good: dedicated (separate) documentation is better. The two are not mutually exclusive.&lt;/li&gt; &#xA; &lt;li&gt;Formatting should never get in the way of coding: because of this, I have deferred &lt;strong&gt;all&lt;/strong&gt; formatting decisions to &lt;a href=&#34;https://github.com/ambv/black&#34;&gt;Black&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Tests are written in pytest (much more intuitive than &lt;code&gt;unittest&lt;/code&gt; and the variants in my opinion), and I have tried to ensure close to 100% coverage. Run the tests by navigating to the package directory and simply running &lt;code&gt;pytest&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;PyPortfolioOpt provides a test dataset of daily returns for 20 tickers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;GOOG&#39;, &#39;AAPL&#39;, &#39;FB&#39;, &#39;BABA&#39;, &#39;AMZN&#39;, &#39;GE&#39;, &#39;AMD&#39;, &#39;WMT&#39;, &#39;BAC&#39;, &#39;GM&#39;,&#xA;&#39;T&#39;, &#39;UAA&#39;, &#39;SHLD&#39;, &#39;XOM&#39;, &#39;RRC&#39;, &#39;BBY&#39;, &#39;MA&#39;, &#39;PFE&#39;, &#39;JPM&#39;, &#39;SBUX&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These tickers have been informally selected to meet several criteria:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;reasonably liquid&lt;/li&gt; &#xA; &lt;li&gt;different performances and volatilities&lt;/li&gt; &#xA; &lt;li&gt;different amounts of data to test robustness&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, the tests have not explored all of the edge cases and combinations of objective functions and parameters. However, each method and parameter has been tested to work as intended.&lt;/p&gt; &#xA;&lt;h2&gt;Citing PyPortfolioOpt&lt;/h2&gt; &#xA;&lt;p&gt;If you use PyPortfolioOpt for published work, please cite the &lt;a href=&#34;https://joss.theoj.org/papers/10.21105/joss.03066&#34;&gt;JOSS paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Citation string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Martin, R. A., (2021). PyPortfolioOpt: portfolio optimization in Python. Journal of Open Source Software, 6(61), 3066, https://doi.org/10.21105/joss.03066&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BibTex::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Martin2021,&#xA;  doi = {10.21105/joss.03066},&#xA;  url = {https://doi.org/10.21105/joss.03066},&#xA;  year = {2021},&#xA;  publisher = {The Open Journal},&#xA;  volume = {6},&#xA;  number = {61},&#xA;  pages = {3066},&#xA;  author = {Robert Andrew Martin},&#xA;  title = {PyPortfolioOpt: portfolio optimization in Python},&#xA;  journal = {Journal of Open Source Software}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are &lt;em&gt;most welcome&lt;/em&gt;. Have a look at the &lt;a href=&#34;https://github.com/robertmartin8/PyPortfolioOpt/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d like to thank all of the people who have contributed to PyPortfolioOpt since its release in 2018. Special shout-outs to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tuan Tran (who is now the primary maintainer!)&lt;/li&gt; &#xA; &lt;li&gt;Philipp Schiele&lt;/li&gt; &#xA; &lt;li&gt;Carl Peasnell&lt;/li&gt; &#xA; &lt;li&gt;Felipe Schneider&lt;/li&gt; &#xA; &lt;li&gt;Dingyuan Wang&lt;/li&gt; &#xA; &lt;li&gt;Pat Newell&lt;/li&gt; &#xA; &lt;li&gt;Aditya Bhutra&lt;/li&gt; &#xA; &lt;li&gt;Thomas Schmelzer&lt;/li&gt; &#xA; &lt;li&gt;Rich Caputo&lt;/li&gt; &#xA; &lt;li&gt;Nicolas Knudde&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting in touch&lt;/h2&gt; &#xA;&lt;p&gt;If you are having a problem with PyPortfolioOpt, please raise a GitHub issue. For anything else, you can reach me at:&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://github.com/robertmartin8/ReasonableDeviations/raw/gh-pages/assets/images/contact.png?raw=true&#34; style=&#34;width:60%;&#34;&gt; &#xA;&lt;/center&gt;</summary>
  </entry>
  <entry>
    <title>onnx/models</title>
    <updated>2024-09-22T01:39:49Z</updated>
    <id>tag:github.com,2024-09-22:/onnx/models</id>
    <link href="https://github.com/onnx/models" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of pre-trained, state-of-the-art models in the ONNX format&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ONNX Model Zoo&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the ONNX Model Zoo! The Open Neural Network Exchange (ONNX) is an open standard format created to represent machine learning models. Supported by a robust community of partners, ONNX defines a common set of operators and a common file format to enable AI developers to use models with a variety of frameworks, tools, runtimes, and compilers.&lt;/p&gt; &#xA;&lt;p&gt;This repository is a curated collection of pre-trained, state-of-the-art models in the ONNX format. These models are sourced from prominent open-source repositories and have been contributed by a diverse group of community members. Our aim is to facilitate the spread and usage of machine learning models among a wider audience of developers, researchers, and enthusiasts.&lt;/p&gt; &#xA;&lt;p&gt;To handle ONNX model files, which can be large, we use Git LFS (Large File Storage).&lt;/p&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;Currently, we are expanding the ONNX Model Zoo by incorporating additional models from the following categories. As we are rigorously validating the new models for accuracy, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#validated-models&#34;&gt;validated models&lt;/a&gt; below that have been successfully validated for accuracy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Computer Vision&lt;/li&gt; &#xA; &lt;li&gt;Natural Language Processing (NLP)&lt;/li&gt; &#xA; &lt;li&gt;Generative AI&lt;/li&gt; &#xA; &lt;li&gt;Graph Machine Learning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These models are sourced from prominent open-source repositories such as &lt;a href=&#34;https://github.com/huggingface/pytorch-image-models&#34;&gt;timm&lt;/a&gt;, &lt;a href=&#34;https://github.com/pytorch/vision&#34;&gt;torchvision&lt;/a&gt;, &lt;a href=&#34;https://pytorch.org/hub/&#34;&gt;torch_hub&lt;/a&gt;, and &lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;transformers&lt;/a&gt;, and exported into the ONNX format using the open-source &lt;a href=&#34;https://github.com/onnx/turnkeyml&#34;&gt;TurnkeyML toolchain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Validated Models&lt;/h2&gt; &#xA;&lt;h4&gt;Vision&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#image_classification&#34;&gt;Image Classification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#object_detection&#34;&gt;Object Detection &amp;amp; Image Segmentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#body_analysis&#34;&gt;Body, Face &amp;amp; Gesture Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#image_manipulation&#34;&gt;Image Manipulation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Language&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#machine_comprehension&#34;&gt;Machine Comprehension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#machine_translation&#34;&gt;Machine Translation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#language_modelling&#34;&gt;Language Modelling&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#visual_qna&#34;&gt;Visual Question Answering &amp;amp; Dialog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#speech&#34;&gt;Speech &amp;amp; Audio Processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#others&#34;&gt;Other interesting models&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#usage-&#34;&gt;Usage&lt;/a&gt; section below for more details on the file formats in the ONNX Model Zoo (.onnx, .pb, .npz), downloading multiple ONNX models through &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/#gitlfs-&#34;&gt;Git LFS command line&lt;/a&gt;, and starter Python code for validating your ONNX model using test data.&lt;/p&gt; &#xA;&lt;p&gt;INT8 models are generated by &lt;a href=&#34;https://github.com/intel/neural-compressor&#34;&gt;Intel® Neural Compressor&lt;/a&gt;. &lt;a href=&#34;https://github.com/intel/neural-compressor&#34;&gt;Intel® Neural Compressor&lt;/a&gt; is an open-source Python library which supports automatic accuracy-driven tuning strategies to help user quickly find out the best quantized model. It implements dynamic and static quantization for ONNX models and can represent quantized ONNX models with operator oriented as well as tensor oriented (QDQ) ways. Users can use web-based UI service or python code to do quantization. Read the &lt;a href=&#34;https://github.com/intel/neural-compressor/raw/master/README.md&#34;&gt;Introduction&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Image Classification &lt;a name=&#34;image_classification&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This collection of models take images as input, then classifies the major objects in the images into 1000 object categories such as keyboard, mouse, pencil, and many animals.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Huggingface Spaces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/mobilenet&#34;&gt;MobileNet&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1801.04381&#34;&gt;Sandler et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Light-weight deep neural network best suited for mobile and embedded vision applications. &lt;br&gt;Top-5 error from paper - ~10%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/resnet&#34;&gt;ResNet&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;He et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A CNN model (up to 152 layers). Uses shortcut connections to achieve higher accuracy when classifying images. &lt;br&gt; Top-5 error from paper - ~3.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/ResNet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/squeezenet&#34;&gt;SqueezeNet&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1602.07360&#34;&gt;Iandola et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A light-weight CNN model providing AlexNet level accuracy with 50x fewer parameters. &lt;br&gt;Top-5 error from paper - ~20%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/SqueezeNet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/vgg&#34;&gt;VGG&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1409.1556&#34;&gt;Simonyan et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN model(up to 19 layers). Similar to AlexNet but uses multiple smaller kernel-sized filters that provides more accuracy when classifying images. &lt;br&gt;Top-5 error from paper - ~8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/VGG&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/alexnet&#34;&gt;AlexNet&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf&#34;&gt;Krizhevsky et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Deep CNN model (up to 8 layers) where the input is an image and the output is a vector of 1000 numbers. &lt;br&gt; Top-5 error from paper - ~15%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/AlexNet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/inception_and_googlenet/googlenet&#34;&gt;GoogleNet&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1409.4842.pdf&#34;&gt;Szegedy et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN model(up to 22 layers). Comparatively smaller and faster than VGG and more accurate in detailing than AlexNet. &lt;br&gt; Top-5 error from paper - ~6.7%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/GoogleNet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/caffenet&#34;&gt;CaffeNet&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ucb-icsi-vision-group.github.io/caffe-paper/caffe.pdf&#34;&gt;Krizhevsky et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN variation of AlexNet for Image Classification in Caffe where the max pooling precedes the local response normalization (LRN) so that the LRN takes less compute and memory.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/CaffeNet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/rcnn_ilsvrc13&#34;&gt;RCNN_ILSVRC13&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1311.2524&#34;&gt;Girshick et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pure Caffe implementation of R-CNN for image classification. This model uses localization of regions to classify and extract features from images.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/densenet-121&#34;&gt;DenseNet-121&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1608.06993&#34;&gt;Huang et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Model that has every layer connected to every other layer and passes on its own feature providing strong gradient flow and more diversified features.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/DenseNet-121&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/inception_and_googlenet/inception_v1&#34;&gt;Inception_V1&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1409.4842&#34;&gt;Szegedy et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This model is same as GoogLeNet, implemented through Caffe2 that has improved utilization of the computing resources inside the network and helps with the vanishing gradient problem. &lt;br&gt; Top-5 error from paper - ~6.7%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/Inception_v1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/inception_and_googlenet/inception_v2&#34;&gt;Inception_V2&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1512.00567&#34;&gt;Szegedy et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN model for Image Classification as an adaptation to Inception v1 with batch normalization. This model has reduced computational cost and improved image resolution compared to Inception v1. &lt;br&gt; Top-5 error from paper ~4.82%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/shufflenet&#34;&gt;ShuffleNet_V1&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1707.01083&#34;&gt;Zhang et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Extremely computation efficient CNN model that is designed specifically for mobile devices. This model greatly reduces the computational cost and provides a ~13x speedup over AlexNet on ARM-based mobile devices. Compared to MobileNet, ShuffleNet achieves superior performance by a significant margin due to it&#39;s efficient structure. &lt;br&gt; Top-1 error from paper - ~32.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/shufflenet&#34;&gt;ShuffleNet_V2&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1807.11164&#34;&gt;Zhang et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Extremely computation efficient CNN model that is designed specifically for mobile devices. This network architecture design considers direct metric such as speed, instead of indirect metric like FLOP. &lt;br&gt; Top-1 error from paper - ~30.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/zfnet-512&#34;&gt;ZFNet-512&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1311.2901&#34;&gt;Zeiler et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN model (up to 8 layers) that increased the number of features that the network is capable of detecting that helps to pick image features at a finer level of resolution. &lt;br&gt; Top-5 error from paper - ~14.3%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/ZFNet-512&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/efficientnet-lite4&#34;&gt;EfficientNet-Lite4&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1905.11946&#34;&gt;Tan et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CNN model with an order of magnitude of few computations and parameters, while still acheiving state-of-the-art accuracy and better efficiency than previous ConvNets. &lt;br&gt; Top-5 error from paper - ~2.9%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/EfficientNet-Lite4&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Domain-based Image Classification &lt;a name=&#34;domain_based_image&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This subset of models classify images for specific domains and datasets.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/classification/mnist&#34;&gt;MNIST-Handwritten Digit Recognition&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Microsoft/CNTK/raw/master/Tutorials/CNTK_103D_MNIST_ConvolutionalNeuralNetwork.ipynb&#34;&gt;Convolutional Neural Network with MNIST&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN model for handwritten digit identification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Object Detection &amp;amp; Image Segmentation &lt;a name=&#34;object_detection&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Object detection models detect the presence of multiple objects in an image and segment out areas of the image where the objects are detected. Semantic segmentation models partition an input image by labeling each pixel into a set of pre-defined categories.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Hugging Face Spaces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/tiny-yolov2&#34;&gt;Tiny YOLOv2&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1612.08242.pdf&#34;&gt;Redmon et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A real-time CNN for object detection that detects 20 different classes. A smaller version of the more complex full YOLOv2 network.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/ssd&#34;&gt;SSD&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1512.02325&#34;&gt;Liu et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Single Stage Detector: real-time CNN for object detection that detects 80 different classes.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/ssd-mobilenetv1&#34;&gt;SSD-MobileNetV1&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1704.04861&#34;&gt;Howard et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A variant of MobileNet that uses the Single Shot Detector (SSD) model framework. The model detects 80 different object classes and locates up to 10 objects in an image.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/faster-rcnn&#34;&gt;Faster-RCNN&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1506.01497&#34;&gt;Ren et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increases efficiency from R-CNN by connecting a RPN with a CNN to create a single, unified network for object detection that detects 80 different classes.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/faster-rcnn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/mask-rcnn&#34;&gt;Mask-RCNN&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1703.06870&#34;&gt;He et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A real-time neural network for object instance segmentation that detects 80 different classes. Extends Faster R-CNN as each of the 300 elected ROIs go through 3 parallel branches of the network: label prediction, bounding box prediction and mask prediction.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/mask-rcnn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/retinanet&#34;&gt;RetinaNet&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1708.02002&#34;&gt;Lin et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A real-time dense detector network for object detection that addresses class imbalance through Focal Loss. RetinaNet is able to match the speed of previous one-stage detectors and defines the state-of-the-art in two-stage detectors (surpassing R-CNN).&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/yolov2-coco&#34;&gt;YOLO v2-coco&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1612.08242&#34;&gt;Redmon et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A CNN model for real-time object detection system that can detect over 9000 object categories. It uses a single network evaluation, enabling it to be more than 1000x faster than R-CNN and 100x faster than Faster R-CNN. This model is trained with COCO dataset and contains 80 classes.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/yolov3&#34;&gt;YOLO v3&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1804.02767.pdf&#34;&gt;Redmon et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A deep CNN model for real-time object detection that detects 80 different classes. A little bigger than YOLOv2 but still very fast. As accurate as SSD but 3 times faster.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/tiny-yolov3&#34;&gt;Tiny YOLOv3&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1804.02767.pdf&#34;&gt;Redmon et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A smaller version of YOLOv3 model.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/yolov4&#34;&gt;YOLOv4&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2004.10934&#34;&gt;Bochkovskiy et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optimizes the speed and accuracy of object detection. Two times faster than EfficientDet. It improves YOLOv3&#39;s AP and FPS by 10% and 12%, respectively, with mAP50 of 52.32 on the COCO 2017 dataset and FPS of 41.7 on a Tesla V100.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/yolov4&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/duc&#34;&gt;DUC&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1702.08502&#34;&gt;Wang et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN based pixel-wise semantic segmentation model with &amp;gt;80% &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/models/semantic_segmentation/DUC/README.md/#metric&#34;&gt;mIOU&lt;/a&gt; (mean Intersection Over Union). Trained on cityscapes dataset, which can be effectively implemented in self driving vehicle systems.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/DUC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/object_detection_segmentation/fcn&#34;&gt;FCN&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf&#34;&gt;Long et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN based segmentation model trained end-to-end, pixel-to-pixel that produces efficient inference and learning. Built off of AlexNet, VGG net, GoogLeNet classification methods. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/FCN&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Body, Face &amp;amp; Gesture Analysis &lt;a name=&#34;body_analysis&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Face detection models identify and/or recognize human faces and emotions in given images. Body and Gesture Analysis models identify gender and age in given image.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Hugging Face Spaces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/body_analysis/arcface&#34;&gt;ArcFace&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1801.07698&#34;&gt;Deng et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A CNN based model for face recognition which learns discriminative features of faces and produces embeddings for input face images.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/ArcFace&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/body_analysis/ultraface&#34;&gt;UltraFace&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB&#34;&gt;Ultra-lightweight face detection model&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This model is a lightweight facedetection model designed for edge computing devices.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/ultraface&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/body_analysis/emotion_ferplus&#34;&gt;Emotion FerPlus&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1608.01041&#34;&gt;Barsoum et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep CNN for emotion recognition trained on images of faces.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/body_analysis/age_gender&#34;&gt;Age and Gender Classification using Convolutional Neural Networks&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://data.vision.ee.ethz.ch/cvl/publications/papers/proceedings/eth_biwi_01229.pdf&#34;&gt;Rothe et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This model accurately classifies gender and age even the amount of learning data is limited.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Image Manipulation &lt;a name=&#34;image_manipulation&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Image manipulation models use neural networks to transform input images to modified output images. Some popular models in this category involve style transfer or enhancing images by increasing resolution.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Hugging Face Spaces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unpaired Image to Image Translation using Cycle consistent Adversarial Network&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1703.10593&#34;&gt;Zhu et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The model uses learning to translate an image from a source domain X to a target domain Y in the absence of paired examples. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/super_resolution/sub_pixel_cnn_2016&#34;&gt;Super Resolution with sub-pixel CNN&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1609.05158&#34;&gt;Shi et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A deep CNN that uses sub-pixel convolution layers to upscale the input image.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/sub_pixel_cnn_2016&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/vision/style_transfer/fast_neural_style&#34;&gt;Fast Neural Style Transfer&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1603.08155&#34;&gt;Johnson et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This method uses a loss network pretrained for image classification to define perceptual loss functions that measure perceptual differences in content and style between images. The loss network remains fixed during the training process.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Speech &amp;amp; Audio Processing &lt;a name=&#34;speech&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This class of models uses audio data to train models that can identify voice, generate music, or even read text out loud.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Speech recognition with deep recurrent neural networks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cs.toronto.edu/~fritz/absps/RNN13.pdf&#34;&gt;Graves et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A RNN model for sequential data for speech recognition. Labels problems where the input-output alignment is unknown&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deep voice: Real time neural text to speech&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1702.07825&#34;&gt;Arik et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A DNN model that performs end-to-end neural speech synthesis. Requires fewer parameters and it is faster than other systems. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sound Generative models&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1609.03499&#34;&gt;WaveNet: A Generative Model for Raw Audio &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A CNN model that generates raw audio waveforms. Has predictive distribution for each audio sample. Generates realistic music fragments. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Machine Comprehension &lt;a name=&#34;machine_comprehension&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This subset of natural language processing models that answer questions about a given context paragraph.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Hugging Face Spaces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/text/machine_comprehension/bidirectional_attention_flow&#34;&gt;Bidirectional Attention Flow&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1611.01603&#34;&gt;Seo et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A model that answers a query about a given context paragraph.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/BiDAF&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/text/machine_comprehension/bert-squad&#34;&gt;BERT-Squad&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1810.04805.pdf&#34;&gt;Devlin et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This model answers questions based on the context of the given input paragraph.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/BERT-Squad&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/text/machine_comprehension/roberta&#34;&gt;RoBERTa&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1907.11692.pdf&#34;&gt;Liu et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A large transformer-based model that predicts sentiment based on given input text.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/RoBERTa&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/text/machine_comprehension/gpt-2&#34;&gt;GPT-2&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf&#34;&gt;Radford et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A large transformer-based language model that given a sequence of words within some text, predicts the next word.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/GPT-2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/validated/text/machine_comprehension/t5&#34;&gt;T5&lt;/a&gt;&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1910.10683&#34;&gt;Raffel et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A large transformer-based language model trained on multiple tasks at once to achieve better semantic understanding of the prompt, capable of sentiment-analysis, question-answering, similarity-detection, translation, summarization, etc.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/onnx/T5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Machine Translation &lt;a name=&#34;machine_translation&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This class of natural language processing models learns how to translate input text to another language.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Neural Machine Translation by jointly learning to align and translate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1409.0473&#34;&gt;Bahdanau et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Aims to build a single neural network that can be jointly tuned to maximize the translation performance. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google&#39;s Neural Machine Translation System&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1609.08144&#34;&gt;Wu et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This model helps to improve issues faced by the Neural Machine Translation (NMT) systems like parallelism that helps accelerate the final translation speed.&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Language Modelling &lt;a name=&#34;language_modelling&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This subset of natural language processing models learns representations of language from large corpuses of text.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deep Neural Network Language Models&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pdfs.semanticscholar.org/a177/45f1d7045636577bcd5d513620df5860e9e5.pdf&#34;&gt;Arisoy et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A DNN acoustic model. Used in many natural language technologies. Represents a probability distribution over all possible word strings in a language. &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Visual Question Answering &amp;amp; Dialog &lt;a name=&#34;visual_qna&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This subset of natural language processing models uses input images to answer questions about those images.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQA: Visual Question Answering&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1505.00468v6.pdf&#34;&gt;Agrawal et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A model that takes an image and a free-form, open-ended natural language question about the image and outputs a natural-language answer. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yin and Yang: Balancing and Answering Binary Visual Questions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1511.05099.pdf&#34;&gt;Zhang et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Addresses VQA by converting the question to a tuple that concisely summarizes the visual concept to be detected in the image. Next, if the concept can be found in the image, it provides a “yes” or “no” answer. Its performance matches the traditional VQA approach on unbalanced dataset, and outperforms it on the balanced dataset. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Making the V in VQA Matter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1612.00837.pdf&#34;&gt;Goyal et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Balances the VQA dataset by collecting complementary images such that every question is associated with a pair of similar images that result in two different answers to the question, providing a unique interpretable model that provides a counter-example based explanation. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visual Dialog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1611.08669&#34;&gt;Das et al.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An AI agent that holds a meaningful dialog with humans in natural, conversational language about visual content. Curates a large-scale Visual Dialog dataset (VisDial). &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Other interesting models &lt;a name=&#34;others&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There are many interesting deep learning models that do not fit into the categories described above. The ONNX team would like to highly encourage users and researchers to &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt; their models to the growing model zoo.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Class&lt;/th&gt; &#xA;   &lt;th&gt;Reference&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text to Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1605.05396&#34;&gt;Generative Adversarial Text to image Synthesis &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Effectively bridges the advances in text and image modeling, translating visual concepts from characters to pixels. Generates plausible images of birds and flowers from detailed text descriptions. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Time Series Forecasting&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1703.07015.pdf&#34;&gt;Modeling Long- and Short-Term Temporal Patterns with Deep Neural Networks &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The model extracts short-term local dependency patterns among variables and to discover long-term patterns for time series trends. It helps to predict solar plant energy output, electricity consumption, and traffic jam situations. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Recommender systems&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.cs.toronto.edu/~mvolkovs/nips2017_deepcf.pdf&#34;&gt;DropoutNet: Addressing Cold Start in Recommender Systems&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A collaborative filtering method that makes predictions about an individual’s preference based on preference information from other users.&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Collaborative filtering&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1708.05031.pdf&#34;&gt;Neural Collaborative Filtering&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A DNN model based on the interaction between user and item features using matrix factorization. &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Autoencoders&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1506.01057&#34;&gt;A Hierarchical Neural Autoencoder for Paragraphs and Documents&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An LSTM (long-short term memory) auto-encoder to preserve and reconstruct multi-sentence paragraphs.&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribute&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage &lt;a name=&#34;usage-&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Every ONNX backend should support running the models out of the box. After downloading and extracting the tarball of each model, you will find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A protobuf file &lt;code&gt;model.onnx&lt;/code&gt; that represents the serialized ONNX model.&lt;/li&gt; &#xA; &lt;li&gt;Test data (in the form of serialized protobuf TensorProto files or serialized NumPy archives).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage - Test data starter code&lt;/h3&gt; &#xA;&lt;p&gt;The test data files can be used to validate ONNX models from the Model Zoo. We have provided the following interface examples for you to get started. Please replace &lt;code&gt;onnx_backend&lt;/code&gt; in your code with the appropriate framework of your choice that provides ONNX inferencing support, and likewise replace &lt;code&gt;backend.run_model&lt;/code&gt; with the framework&#39;s model evaluation logic.&lt;/p&gt; &#xA;&lt;p&gt;There are two different formats for the test data files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serialized protobuf TensorProtos (.pb), stored in folders with the naming convention &lt;code&gt;test_data_set_*&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np&#xA;import onnx&#xA;import os&#xA;import glob&#xA;import onnx_backend as backend&#xA;&#xA;from onnx import numpy_helper&#xA;&#xA;model = onnx.load(&#39;model.onnx&#39;)&#xA;test_data_dir = &#39;test_data_set_0&#39;&#xA;&#xA;# Load inputs&#xA;inputs = []&#xA;inputs_num = len(glob.glob(os.path.join(test_data_dir, &#39;input_*.pb&#39;)))&#xA;for i in range(inputs_num):&#xA;    input_file = os.path.join(test_data_dir, &#39;input_{}.pb&#39;.format(i))&#xA;    tensor = onnx.TensorProto()&#xA;    with open(input_file, &#39;rb&#39;) as f:&#xA;        tensor.ParseFromString(f.read())&#xA;    inputs.append(numpy_helper.to_array(tensor))&#xA;&#xA;# Load reference outputs&#xA;ref_outputs = []&#xA;ref_outputs_num = len(glob.glob(os.path.join(test_data_dir, &#39;output_*.pb&#39;)))&#xA;for i in range(ref_outputs_num):&#xA;    output_file = os.path.join(test_data_dir, &#39;output_{}.pb&#39;.format(i))&#xA;    tensor = onnx.TensorProto()&#xA;    with open(output_file, &#39;rb&#39;) as f:&#xA;        tensor.ParseFromString(f.read())&#xA;    ref_outputs.append(numpy_helper.to_array(tensor))&#xA;&#xA;# Run the model on the backend&#xA;outputs = list(backend.run_model(model, inputs))&#xA;&#xA;# Compare the results with reference outputs.&#xA;for ref_o, o in zip(ref_outputs, outputs):&#xA;    np.testing.assert_almost_equal(ref_o, o)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serialized Numpy archives, stored in files with the naming convention &lt;code&gt;test_data_*.npz&lt;/code&gt;. Each file contains one set of test inputs and outputs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np&#xA;import onnx&#xA;import onnx_backend as backend&#xA;&#xA;# Load the model and sample inputs and outputs&#xA;model = onnx.load(model_pb_path)&#xA;sample = np.load(npz_path, encoding=&#39;bytes&#39;)&#xA;inputs = list(sample[&#39;inputs&#39;])&#xA;outputs = list(sample[&#39;outputs&#39;])&#xA;&#xA;# Run the model with an onnx backend and verify the results&#xA;np.testing.assert_almost_equal(outputs, backend.run_model(model, inputs))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage - Model quantization&lt;/h3&gt; &#xA;&lt;p&gt;You can get quantized ONNX models by using &lt;a href=&#34;https://github.com/intel/neural-compressor&#34;&gt;Intel® Neural Compressor&lt;/a&gt;. It provides web-based UI service to make quantization easier and supports code-based usage for more abundant quantization settings. Refer to &lt;a href=&#34;https://github.com/intel/neural-compressor/raw/master/docs/bench.md&#34;&gt;bench document&lt;/a&gt; for how to use web-based UI service and &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/resource/docs/INC_code.md&#34;&gt;example document&lt;/a&gt; for a simple code-based demo. &lt;img src=&#34;https://raw.githubusercontent.com/onnx/models/main/resource/images/INC_GUI.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to access the ONNX Model Zoo:&lt;/p&gt; &#xA;&lt;h3&gt;Git Clone (Not Recommended)&lt;/h3&gt; &#xA;&lt;p&gt;Cloning the repository using git won&#39;t automatically download the ONNX models due to their size. To manage these files, first, install Git LFS by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git-lfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download a specific model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git lfs pull --include=&#34;[path to model].onnx&#34; --exclude=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download all models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git lfs pull --include=&#34;*&#34; --exclude=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub UI&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can download models directly from GitHub. Navigate to the model&#39;s page and click the &#34;Download&#34; button on the top right corner.&lt;/p&gt; &#xA;&lt;h2&gt;Model Visualization&lt;/h2&gt; &#xA;&lt;p&gt;For a graphical representation of each model&#39;s architecture, we recommend using &lt;a href=&#34;https://github.com/lutzroeder/netron&#34;&gt;Netron&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to the ONNX Model Zoo are welcome! Please check our &lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/contribute.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information on how you can contribute to the growth and improvement of this resource.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your interest in the ONNX Model Zoo, and we look forward to your participation in our community!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/models/main/LICENSE&#34;&gt;Apache License v2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>