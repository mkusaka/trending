<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T01:54:40Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guochengqian/Magic123</title>
    <updated>2023-08-06T01:54:40Z</updated>
    <id>tag:github.com,2023-08-06:/guochengqian/Magic123</id>
    <link href="https://github.com/guochengqian/Magic123" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official PyTorch Implementation of Magic123: One Image to High-Quality 3D Object Generation Using Both 2D and 3D Diffusion Priors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Magic123: One Image to High-Quality 3D Object Generation Using Both 2D and 3D Diffusion Priors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2306.17843&#34;&gt;arXiv&lt;/a&gt; | &lt;a href=&#34;https://guochengqian.github.io/project/magic123/&#34;&gt;webpage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/guochengqian/Magic123/main/docs/static/magic123.gif&#34; width=&#34;800&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://guochengqian.github.io/&#34;&gt;Guocheng Qian&lt;/a&gt; &lt;sup&gt;1,2&lt;/sup&gt;, &lt;a href=&#34;https://cemse.kaust.edu.sa/people/person/jinjie-mai&#34;&gt;Jinjie Mai&lt;/a&gt; &lt;sup&gt;1&lt;/sup&gt;, &lt;a href=&#34;https://abdullahamdi.com/&#34;&gt;Abdullah Hamdi&lt;/a&gt; &lt;sup&gt;3&lt;/sup&gt;, &lt;a href=&#34;https://alanspike.github.io/&#34;&gt;Jian Ren&lt;/a&gt; &lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;https://aliaksandrsiarohin.github.io/aliaksandr-siarohin-website/&#34;&gt;Aliaksandr Siarohin&lt;/a&gt; &lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;https://cemse.kaust.edu.sa/people/person/bing-li&#34;&gt;Bing Li&lt;/a&gt; &lt;sup&gt;1&lt;/sup&gt;, &lt;a href=&#34;http://hsinyinglee.com/&#34;&gt;Hsin-Ying Lee&lt;/a&gt; &lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;https://universome.github.io/&#34;&gt;Ivan Skorokhodov&lt;/a&gt; &lt;sup&gt;1,2&lt;/sup&gt;, &lt;a href=&#34;https://peterwonka.net/&#34;&gt;Peter Wonka&lt;/a&gt; &lt;sup&gt;1&lt;/sup&gt;, &lt;a href=&#34;http://www.stulyakov.com/&#34;&gt;Sergey Tulyakov&lt;/a&gt; &lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;https://www.bernardghanem.com/&#34;&gt;Bernard Ghanem&lt;/a&gt; &lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;a href=&#34;https://www.kaust.edu.sa/&#34;&gt;King Abdullah University of Science and Technology (KAUST)&lt;/a&gt;, &lt;sup&gt;2&lt;/sup&gt; &lt;a href=&#34;https://www.snap.com/&#34;&gt;Snap Inc.&lt;/a&gt;, &lt;sup&gt;3&lt;/sup&gt; &lt;a href=&#34;http://www.robots.ox.ac.uk/~vgg/&#34;&gt;Visual Geometry Group, University of Oxford&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Training convergence of a demo example: &lt;img src=&#34;https://raw.githubusercontent.com/guochengqian/Magic123/main/docs/static/ironman-val-magic123.gif&#34; width=&#34;800&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compare Magic123 without textual inversion with abaltions using only 2D prior (SDS) or using only 3D prior (Zero123):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guochengqian/Magic123/assets/48788073/e5a3c3cb-bcb1-4b10-8bfb-2c2eb79a9289&#34;&gt;https://github.com/guochengqian/Magic123/assets/48788073/e5a3c3cb-bcb1-4b10-8bfb-2c2eb79a9289&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Effects of Joint Prior. Increasing the strength of 2D prior leads to more imagination, more details, and less 3D consistencies.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/guochengqian/Magic123/main/docs/static/2d_3d.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;p&gt;Official PyTorch Implementation of Magic123: One Image to High-Quality 3D Object Generation Using Both 2D and 3D Diffusion Priors. Code is built upon &lt;a href=&#34;https://github.com/ashawkey/stable-dreamfusion&#34;&gt;Stable-DreamFusion&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h1&gt;NEWS:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2023/07/25] Code is available at &lt;a href=&#34;https://github.com/guochengqian/Magic123&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2023/07/03] Paper is available at &lt;a href=&#34;https://arxiv.org/abs/2306.17843&#34;&gt;arXiv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2023/06/25] Much better performance than the submitted version is achieved by 1）reimplementing Magic123 using &lt;a href=&#34;https://github.com/ashawkey/stable-dreamfusion&#34;&gt;Stable DreamFusion code&lt;/a&gt;, 2）fixing some gradient issues, 3）leveraging the &lt;a href=&#34;https://raw.githubusercontent.com/guochengqian/Magic123/main/#tips-and-tricks&#34;&gt;tricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2023] Initial version of Magic123 submitted to conference&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h3&gt;Install Environment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download pre-trained models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cvlab-columbia/zero123&#34;&gt;Zero-1-to-3&lt;/a&gt; for 3D diffusion prior. We use &lt;code&gt;105000.ckpt&lt;/code&gt; by default, reimplementation borrowed from Stable Diffusion repo, and is available in &lt;code&gt;guidance/zero123_utils.py&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd pretrained/zero123&#xA;wget https://huggingface.co/cvlab/zero123-weights/resolve/main/105000.ckpt&#xA;cd .../../&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/isl-org/MiDaS&#34;&gt;MiDaS&lt;/a&gt; for depth estimation. We use &lt;code&gt;dpt_beit_large_512.pt&lt;/code&gt;. Put it in folder &lt;code&gt;pretrained/midas/&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p pretrained/midas&#xA;cd pretrained/midas&#xA;wget https://github.com/isl-org/MiDaS/releases/download/v3_1/dpt_beit_large_512.pt&#xA;cd ../../&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Preprocess [Optional]&lt;/h2&gt; &#xA;&lt;p&gt;We have included all preprocessed files in &lt;code&gt;./data&lt;/code&gt; directory. Preprocessing is only necessary if you want to test on your own examples.&lt;/p&gt; &#xA;&lt;h3&gt;Step1: Extract depth&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;python preprocess_image.py --path /path/to/image &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: Textural inversion [Optional]&lt;/h3&gt; &#xA;&lt;p&gt;Magic123 uses the defualt &lt;a href=&#34;https://huggingface.co/docs/diffusers/training/text_inversion&#34;&gt;textural inversion&lt;/a&gt; from diffuers, which consumes around 2.5 hours on a 32G V100. If you do not want to spend time in this textural inversion, you can: (1) study whether there is other faster textural inversion; or (2) do not use textural inversion in the loss of texture and shape consistencies. To run textural inversion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/texural_inversion/textural_inversion.sh $GPU_IDX runwayml/stable-diffusion-v1-5 /path/to/example/rgba.png /path/to/save $token_name $init_token --max_train_steps 5000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$token_name is a the special token, usually name that by &lt;em&gt;examplename&lt;/em&gt; $init_token is a single token to describe the image using natural language&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/texural_inversion/textural_inversion.sh runwayml/stable-diffusion-v1-5 data/demo/ironman/rgba.png out/textual_inversion/ironman _ironman_ ironman --max_train_steps 3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget to move the final &lt;code&gt;learned_embeds.bin&lt;/code&gt; under data/demo/ironman/&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;h3&gt;Run Magic123 for a single example&lt;/h3&gt; &#xA;&lt;p&gt;Takes ~40 mins for the coarse stage and ~20 mins for the second stage on a 32G V100.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/magic123/run_both_priors.sh $GPU_NO $JOBNAME_First_Stage $JOBNAME_Second_Stage $PATH_to_Example_Directory $IMAGE_BASE_NAME $Enable_First_Stage $Enable_Second_Stage {More_Arugments}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example, run Magic123 in the dragon example using both stages in GPU 0 and set the jobname for the first stage as &lt;code&gt;default&lt;/code&gt; and the jobname for the second stage as &lt;code&gt;dmtet&lt;/code&gt;, by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/magic123/run_both_priors.sh 0 default dmtet data/realfusion15/metal_dragon_statue rgba.png 1 1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More arguments (e.g. &lt;code&gt;--lambda_guidance 1 40&lt;/code&gt;) can be appended to the command line such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/magic123/run_both_priors.sh 0 default dmtet data/realfusion15/metal_dragon_statue rgba.png 1 1 --lambda_guidance 1 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Magic123 for a group of examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run all examples in a folder, check the scripts &lt;code&gt;scripts/magic123/run_folder_both_priors.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run all examples in a given list, check the scripts &lt;code&gt;scripts/magic123/run_list_both_priors.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run Magic123 on a single example without textural inversion&lt;/h3&gt; &#xA;&lt;p&gt;Textural inversion is tedious (requires ~2.5 hours optimization), if you want to test Magic123 quickly on your own example without texural inversion (might degrade the performance), try the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;first, foreground and depth estimation&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python preprocess_image.py --path data/demo/ironman/ironman.png&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Magic123 coarse stage without textural inversion, takes ~40 mins&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export RUN_ID=&#39;default-a-full-body-ironman&#39;&#xA;export DATA_DIR=&#39;data/demo/ironman&#39;&#xA;export IMAGE_NAME=&#39;rgba.png&#39;&#xA;export FILENAME=$(basename $DATA_DIR)&#xA;export dataset=$(basename $(dirname $DATA_DIR))&#xA;CUDA_VISIBLE_DEVICES=0 python main.py -O \&#xA;--text &#34;A high-resolution DSLR image of a full body ironman&#34; \&#xA;--sd_version 1.5 \&#xA;--image ${DATA_DIR}/${IMAGE_NAME} \&#xA;--workspace out/magic123-${RUN_ID}-coarse/$dataset/magic123_${FILENAME}_${RUN_ID}_coarse \&#xA;--optim adam \&#xA;--iters 5000 \&#xA;--guidance SD zero123 \&#xA;--lambda_guidance 1.0 40 \&#xA;--guidance_scale 100 5 \&#xA;--latent_iter_ratio 0 \&#xA;--normal_iter_ratio 0.2 \&#xA;--t_range 0.2 0.6 \&#xA;--bg_radius -1 \&#xA;--save_mesh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Magic123 fine stage without textural inversion, takes around ~20 mins&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export RUN_ID=&#39;default-a-full-body-ironman&#39;&#xA;export RUN_ID2=&#39;dmtet&#39;&#xA;export DATA_DIR=&#39;data/demo/ironman&#39;&#xA;export IMAGE_NAME=&#39;rgba.png&#39;&#xA;export FILENAME=$(basename $DATA_DIR)&#xA;export dataset=$(basename $(dirname $DATA_DIR))&#xA;CUDA_VISIBLE_DEVICES=0 python main.py -O \&#xA;--text &#34;A high-resolution DSLR image of a full body ironman&#34; \&#xA;--sd_version 1.5 \&#xA;--image ${DATA_DIR}/${IMAGE_NAME} \&#xA;--workspace out/magic123-${RUN_ID}-${RUN_ID2}/$dataset/magic123_${FILENAME}_${RUN_ID}_${RUN_ID2} \&#xA;--dmtet --init_ckpt out/magic123-${RUN_ID}-coarse/$dataset/magic123_${FILENAME}_${RUN_ID}_coarse/checkpoints/magic123_${FILENAME}_${RUN_ID}_coarse.pth \&#xA;--iters 5000 \&#xA;--optim adam \&#xA;--known_view_interval 4 \&#xA;--latent_iter_ratio 0 \&#xA;--guidance SD zero123 \&#xA;--lambda_guidance 1e-3 0.01 \&#xA;--guidance_scale 100 5 \&#xA;--rm_edge \&#xA;--bg_radius -1 \&#xA;--save_mesh &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run ablation studies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Magic123 with only 2D prior &lt;em&gt;with&lt;/em&gt; textural inversion (Like RealFusion but we achieve much better performance through training stragies and the coarse-to-fine pipeline)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash scripts/magic123/run_2dprior.sh 0 default dmtet data/realfusion15/metal_dragon_statue rgba.png 1 1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Magic123 with only 2D prior &lt;em&gt;without&lt;/em&gt; textural inversion (Like RealFusion but we achieve much better performance through training stragies and the coarse-to-fine pipeline)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash scripts/magic123/run_2dprior_notextinv_ironman.sh 0 default 1 1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;note: change the path and the text prompt inside the script if you wana test another example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Magic123 with only 3D prior (Like Zero-1-to-3 but we achieve much better performance through training stragies and the coarse-to-fine pipeline)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash scripts/magic123/run_3dprior.sh 0 default dmtet data/demo/ironman rgba.png 1 1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tips and Tricks&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fix camera distance (&lt;em&gt;radius_range&lt;/em&gt;) and FOV (&lt;em&gt;fovy_range&lt;/em&gt;) and tune the camera polar range (&lt;em&gt;theta_range&lt;/em&gt;). Note it is better to keep camera jittering to reduce grid artifacts.&lt;/li&gt; &#xA; &lt;li&gt;Smaller range of time steps for the defusion noise (t_range). We find &lt;em&gt;[0.2, 0.6]&lt;/em&gt; gives better performance for image-to-3D tasks.&lt;/li&gt; &#xA; &lt;li&gt;Using normals as latent in the first 2000 improves generated geometry a bit gernerally (but not always). We turn on this for Magic123 corase stage in the script &lt;code&gt;--normal_iter_ratio 0.2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;We erode segmentation edges (makes the segmentation map 2 pixels shrinked towards internal side) to remove artifacts due to segmentation erros. This is turned on in the fine stage in magic123 in the script through &lt;code&gt;--rm_edge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other general tricks such as improved texural inversion, advanced diffusion prior (DeepFloyd, SD-XL), stronger 3D prior (Zero123-XL), and larger batch size can be adopted as well but not studied in this work.&lt;/li&gt; &#xA; &lt;li&gt;textural inversion is not very necessary for well-known things (e.g. ironman) and easily described textures and geoemtries, since pure texts contains these texture information and will be understood by diffusion models. We use textural inversion by default in all experiments.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Acknowledgement&lt;/h1&gt; &#xA;&lt;p&gt;This work is build upon Stable DreamFusion, many thanks to the author &lt;a href=&#34;https://github.com/ashawkey&#34;&gt;Kiui Jiaxiang Tang&lt;/a&gt; and many other contributors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ashawkey/stable-dreamfusion&#34;&gt;Stable DreamFusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{stable-dreamfusion,&#xA;    Author = {Jiaxiang Tang},&#xA;    Year = {2022},&#xA;    Note = {https://github.com/ashawkey/stable-dreamfusion},&#xA;    Title = {Stable-dreamfusion: Text-to-3D with Stable-diffusion}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also get inspirations from a list of amazing research works and open-source projects, thanks a lot to all the authors for sharing!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dreamfusion3d.github.io/&#34;&gt;DreamFusion: Text-to-3D using 2D Diffusion&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@article{poole2022dreamfusion,&#xA;    author = {Poole, Ben and Jain, Ajay and Barron, Jonathan T. and Mildenhall, Ben},&#xA;    title = {DreamFusion: Text-to-3D using 2D Diffusion},&#xA;    journal = {arXiv},&#xA;    year = {2022},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://research.nvidia.com/labs/dir/magic3d/&#34;&gt;Magic3D: High-Resolution Text-to-3D Content Creation&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@inproceedings{lin2023magic3d,&#xA;   title={Magic3D: High-Resolution Text-to-3D Content Creation},&#xA;   author={Lin, Chen-Hsuan and Gao, Jun and Tang, Luming and Takikawa, Towaki and Zeng, Xiaohui and Huang, Xun and Kreis, Karsten and Fidler, Sanja and Liu, Ming-Yu and Lin, Tsung-Yi},&#xA;   booktitle={IEEE Conference on Computer Vision and Pattern Recognition ({CVPR})},&#xA;   year={2023}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cvlab-columbia/zero123&#34;&gt;Zero-1-to-3: Zero-shot One Image to 3D Object&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@misc{liu2023zero1to3,&#xA;    title={Zero-1-to-3: Zero-shot One Image to 3D Object},&#xA;    author={Ruoshi Liu and Rundi Wu and Basile Van Hoorick and Pavel Tokmakov and Sergey Zakharov and Carl Vondrick},&#xA;    year={2023},&#xA;    eprint={2303.11328},&#xA;    archivePrefix={arXiv},&#xA;    primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/lukemelas/realfusion&#34;&gt;RealFusion: 360° Reconstruction of Any Object from a Single Image&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@inproceedings{melaskyriazi2023realfusion,&#xA;    author = {Melas-Kyriazi, Luke and Rupprecht, Christian and Laina, Iro and Vedaldi, Andrea},&#xA;    title = {RealFusion: 360 Reconstruction of Any Object from a Single Image},&#xA;    booktitle={CVPR}&#xA;    year = {2023},&#xA;    url = {https://arxiv.org/abs/2302.10663},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2303.14184&#34;&gt;Make-it-3d: High-fidelity 3d creation from a single image with diffusion prior&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@article{tang2023make-it-3d,&#xA;    title={Make-it-3d: High-fidelity 3d creation from a single image with diffusion prior},&#xA;    author={Tang, Junshu and Wang, Tengfei and Zhang, Bo and Zhang, Ting and Yi, Ran and Ma, Lizhuang and Chen, Dong},&#xA;    journal={arXiv preprint arXiv:2303.14184},&#xA;    year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt; and the &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt; library.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@misc{rombach2021highresolution,&#xA;    title={High-Resolution Image Synthesis with Latent Diffusion Models},&#xA;    author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Björn Ommer},&#xA;    year={2021},&#xA;    eprint={2112.10752},&#xA;    archivePrefix={arXiv},&#xA;    primaryClass={cs.CV}&#xA;}&#xA;&#xA;@misc{von-platen-etal-2022-diffusers,&#xA;    author = {Patrick von Platen and Suraj Patil and Anton Lozhkov and Pedro Cuenca and Nathan Lambert and Kashif Rasul and Mishig Davaadorj and Thomas Wolf},&#xA;    title = {Diffusers: State-of-the-art diffusion models},&#xA;    year = {2022},&#xA;    publisher = {GitHub},&#xA;    journal = {GitHub repository},&#xA;    howpublished = {\url{https://github.com/huggingface/diffusers}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Cite&lt;/h1&gt; &#xA;&lt;p&gt;If you find this work useful, a citation will be appreciated via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{qian2023magic123,&#xA;  title={Magic123: One Image to High-Quality 3D Object Generation Using Both 2D and 3D Diffusion Priors},&#xA;  author={Qian, Guocheng and Mai, Jinjie and Hamdi, Abdullah and Ren, Jian and Siarohin, Aliaksandr and Li, Bing and Lee, Hsin-Ying and Skorokhodov, Ivan and Wonka, Peter and Tulyakov, Sergey and others},&#xA;  journal={arXiv preprint arXiv:2306.17843},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>promptslab/Promptify</title>
    <updated>2023-08-06T01:54:40Z</updated>
    <id>tag:github.com,2023-08-06:/promptslab/Promptify</id>
    <link href="https://github.com/promptslab/Promptify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prompt Engineering | Prompt Versioning | Use GPT or other prompt based models to get structured output. Join our discord for Prompt-Engineering, LLMs and other latest research&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;110px&#34; src=&#34;https://raw.githubusercontent.com/promptslab/Promptify/main/assets/logo.png&#34;&gt; &#xA; &lt;h1&gt;Promptify&lt;/h1&gt;&#xA;&lt;/div&gt; &#xA;&lt;!-- &#xA;&lt;h2 align=&#34;center&#34;&gt;Promptify&lt;/h2&gt; --&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Prompt Engineering, Solve NLP Problems with LLM&#39;s &amp;amp; Easily generate different NLP Task prompts for popular generative models like GPT, PaLM, and more with Promptify &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/promptslab/Promptify/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;Promptify is released under the Apache 2.0 license.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/promptify/&#34;&gt; &lt;img src=&#34;https://badge.fury.io/py/Promptify.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;http://makeapullrequest.com&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/m88xfYMbK6&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Discord-Community-orange&#34; alt=&#34;Community&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/promptslab/Promptify/main/#&#34;&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;colab&#34;&gt; &lt;/a&gt; &lt;/h4&gt; &#xA;&lt;img width=&#34;910px&#34; src=&#34;https://raw.githubusercontent.com/promptslab/Promptify/main/assets/dark.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;With pip&lt;/h3&gt; &#xA;&lt;p&gt;This repository is tested on Python 3.7+, openai 0.25+.&lt;/p&gt; &#xA;&lt;p&gt;You should install Promptify using Pip command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install promptify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install git+https://github.com/promptslab/Promptify.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick tour&lt;/h2&gt; &#xA;&lt;p&gt;To immediately use a LLM model for your NLP task, we provide the &lt;code&gt;Pipeline&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from promptify import Prompter,OpenAI, Pipeline&#xA;&#xA;sentence     =  &#34;&#34;&#34;The patient is a 93-year-old female with a medical  &#x9;&#x9;&#x9;&#x9; &#xA;                history of chronic right hip pain, osteoporosis,&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;                hypertension, depression, and chronic atrial&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;                fibrillation admitted for evaluation and management&#x9;&#x9;&#x9;&#x9;&#xA;                of severe nausea and vomiting and urinary tract&#x9;&#x9;&#x9;&#x9;&#xA;                infection&#34;&#34;&#34;&#xA;&#xA;model        = OpenAI(api_key) # or `HubModel()` for Huggingface-based inference or &#39;Azure&#39; etc&#xA;prompter     = Prompter(&#39;ner.jinja&#39;) # select a template or provide custom template&#xA;pipe         = Pipeline(prompter , model)&#xA;&#xA;&#xA;result = pipe.fit(sentence, domain=&#34;medical&#34;, labels=None)&#xA;&#xA;&#xA;### Output&#xA;&#xA;[&#xA;    {&#34;E&#34;: &#34;93-year-old&#34;, &#34;T&#34;: &#34;Age&#34;},&#xA;    {&#34;E&#34;: &#34;chronic right hip pain&#34;, &#34;T&#34;: &#34;Medical Condition&#34;},&#xA;    {&#34;E&#34;: &#34;osteoporosis&#34;, &#34;T&#34;: &#34;Medical Condition&#34;},&#xA;    {&#34;E&#34;: &#34;hypertension&#34;, &#34;T&#34;: &#34;Medical Condition&#34;},&#xA;    {&#34;E&#34;: &#34;depression&#34;, &#34;T&#34;: &#34;Medical Condition&#34;},&#xA;    {&#34;E&#34;: &#34;chronic atrial fibrillation&#34;, &#34;T&#34;: &#34;Medical Condition&#34;},&#xA;    {&#34;E&#34;: &#34;severe nausea and vomiting&#34;, &#34;T&#34;: &#34;Symptom&#34;},&#xA;    {&#34;E&#34;: &#34;urinary tract infection&#34;, &#34;T&#34;: &#34;Medical Condition&#34;},&#xA;    {&#34;Branch&#34;: &#34;Internal Medicine&#34;, &#34;Group&#34;: &#34;Geriatrics&#34;},&#xA;]&#xA; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/promptslab/Promptify/main/assets/ner.png&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/promptslab/Promptify/main/assets/multilabel.png&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/promptslab/Promptify/main/assets/qa_gen.png&#34; width=&#34;250&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;GPT-3 Example with NER, MultiLabel, Question Generation Task&lt;/h4&gt; &#xA;&lt;h2&gt;Features 🎮 &lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; Perform NLP tasks (such as NER and classification) in just 2 lines of code, with no training data required&lt;/li&gt; &#xA; &lt;li&gt; Easily add one shot, two shot, or few shot examples to the prompt&lt;/li&gt; &#xA; &lt;li&gt; Handling out-of-bounds prediction from LLMS (GPT, t5, etc.)&lt;/li&gt; &#xA; &lt;li&gt; Output always provided as a Python object (e.g. list, dictionary) for easy parsing and filtering. This is a major advantage over LLMs generated output, whose unstructured and raw output makes it difficult to use in business or other applications.&lt;/li&gt; &#xA; &lt;li&gt; Custom examples and samples can be easily added to the prompt&lt;/li&gt; &#xA; &lt;li&gt; 🤗 Run inference on any model stored on the Huggingface Hub (see &lt;a href=&#34;https://github.com/promptslab/Promptify/raw/main/notebooks/huggingface.ipynb&#34;&gt;notebook guide&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt; Optimized prompts to reduce OpenAI token costs (coming soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supporting wide-range of Prompt-Based NLP tasks :&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Task Name&lt;/th&gt; &#xA;   &lt;th&gt;Colab Notebook&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Named Entity Recognition&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/16DUUV72oQPxaZdGMH9xH1WbHYu6Jqk9Q?usp=sharing&#34;&gt;NER Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multi-Label Text Classification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1gNqDxNyMMUO67DxigzRAOa7C_Tcr2g6M?usp=sharing&#34;&gt;Classification Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multi-Class Text Classification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1gNqDxNyMMUO67DxigzRAOa7C_Tcr2g6M?usp=sharing&#34;&gt;Classification Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Text Classification&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1gNqDxNyMMUO67DxigzRAOa7C_Tcr2g6M?usp=sharing&#34;&gt;Classification Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Question-Answering&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1Yhl7iFb7JF0x89r1L3aDuufydVWX_VrL?usp=sharing&#34;&gt;QA Task Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Question-Answer Generation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1Yhl7iFb7JF0x89r1L3aDuufydVWX_VrL?usp=sharing&#34;&gt;QA Task Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Relation-Extraction&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1iW4QNjllc8ktaQBWh3_04340V-tap1co?usp=sharing&#34;&gt;Relation-Extraction Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Summarization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1PlXIAMDtrK-RyVdDhiSZy6ztcDWsNPNw?usp=sharing&#34;&gt;Summarization Task Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Explanation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1PlXIAMDtrK-RyVdDhiSZy6ztcDWsNPNw?usp=sharing&#34;&gt;Explanation Task Examples with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL Writer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1JNUYCTdqkdeIAxiX-NzR-4dngdmWj0rV?usp=sharing&#34;&gt;SQL Writer Example with GPT-3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tabular Data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image Data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;More Prompts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://promptify.readthedocs.io/&#34;&gt;Promptify Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  If you are interested in Prompt-Engineering, LLMs, ChatGPT and other latest research discussions, please consider joining &#xA; &lt;a href=&#34;https://discord.gg/m88xfYMbK6&#34;&gt;PromptsLab&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;Join us on Discord&#34; src=&#34;https://img.shields.io/discord/1069129502472556587?color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;@misc{Promptify2022,&#xA;  title = {Promptify: Structured Output from LLMs},&#xA;  author = {Pal, Ankit},&#xA;  year = {2022},&#xA;  howpublished = {\url{https://github.com/promptslab/Promptify}},&#xA;  note = {Prompt-Engineering components for NLP tasks in Python}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💁 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any contributions to our open source project, including new features, improvements to infrastructure, and more comprehensive documentation. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/promptslab/Promptify/main/contribute.md&#34;&gt;contributing guidelines&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>suno-ai/bark</title>
    <updated>2023-08-06T01:54:40Z</updated>
    <id>tag:github.com,2023-08-06:/suno-ai/bark</id>
    <link href="https://github.com/suno-ai/bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔊 Text-Prompted Generative Audio Model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐶 Bark&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/J2B2vsjKuE?style=flat&amp;amp;compact=True&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/OnusFM.svg?style=social&amp;amp;label=@OnusFM&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;http://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🔗 &lt;a href=&#34;https://suno-ai.notion.site/Bark-Examples-5edae8b02a604b54a42244ba45ebc2e2&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;Suno Studio Waitlist&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-updates&#34;&gt;Updates&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-usage-in-python&#34;&gt;How to Use&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5068315/235310676-a4b3b511-90ec-4edf-8153-7ccf14905d73.png&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Bark is a transformer-based text-to-audio model created by &lt;a href=&#34;https://suno.ai&#34;&gt;Suno&lt;/a&gt;. Bark can generate highly realistic, multilingual speech as well as other audio - including music, background noise and simple sound effects. The model can also produce nonverbal communications like laughing, sighing and crying. To support the research community, we are providing access to pretrained model checkpoints, which are ready for inference and available for commercial use.&lt;/p&gt; &#xA;&lt;h2&gt;⚠ Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Bark was developed for research purposes. It is not a conventional text-to-speech model but instead a fully generative text-to-audio model, which can deviate in unexpected ways from provided prompts. Suno does not take responsibility for any output generated. Use at your own risk, and please act responsibly.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Quick Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-updates&#34;&gt;🚀 Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-installation&#34;&gt;💻 Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-usage-in-python&#34;&gt;🐍 Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://suno-ai.notion.site/Bark-Examples-5edae8b02a604b54a42244ba45ebc2e2&#34;&gt;🌀 Live Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-faq&#34;&gt;❓ FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎧 Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/suno/bark&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-Open%20in%20Spaces-blue.svg?sanitize=true&#34; alt=&#34;Open in Spaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://replicate.com/suno-ai/bark&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%C2%AE%EF%B8%8F-Open%20on%20Replicate-blue.svg?sanitize=true&#34; alt=&#34;Open on Replicate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1eJfA2XUa-mXwdMy7DoYKVYHI1iTd9Vkt?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023.05.01&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;©️ Bark is now licensed under the MIT License, meaning it&#39;s now available for commercial use!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;⚡ 2x speed-up on GPU. 10x speed-up on CPU. We also added an option for a smaller version of Bark, which offers additional speed-up with the trade-off of slightly lower quality.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;📕 &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/notebooks/long_form_generation.ipynb&#34;&gt;Long-form generation&lt;/a&gt;, voice consistency enhancements and other examples are now documented in a new &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/notebooks&#34;&gt;notebooks&lt;/a&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;👥 We created a &lt;a href=&#34;https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c&#34;&gt;voice prompt library&lt;/a&gt;. We hope this resource helps you find useful prompts for your use cases! You can also join us on &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;, where the community actively shares useful prompts in the &lt;strong&gt;#audio-prompts&lt;/strong&gt; channel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;💬 Growing community support and access to new features here:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/J2B2vsjKuE&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;💾 You can now use Bark with GPUs that have low VRAM (&amp;lt;4GB).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023.04.20&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🐶 Bark release!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🐍 Usage in Python&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🪑 Basics&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bark import SAMPLE_RATE, generate_audio, preload_models&#xA;from scipy.io.wavfile import write as write_wav&#xA;from IPython.display import Audio&#xA;&#xA;# download and load all models&#xA;preload_models()&#xA;&#xA;# generate audio from text&#xA;text_prompt = &#34;&#34;&#34;&#xA;     Hello, my name is Suno. And, uh — and I like pizza. [laughs] &#xA;     But I also have other interests such as playing tic tac toe.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&#xA;# save audio to disk&#xA;write_wav(&#34;bark_generation.wav&#34;, SAMPLE_RATE, audio_array)&#xA;  &#xA;# play text in notebook&#xA;Audio(audio_array, rate=SAMPLE_RATE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/34592747/cfa98e54-721c-4b9c-b962-688e09db684f.webm&#34;&gt;pizza1.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🌎 Foreign Language&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;br&gt; Bark supports various languages out-of-the-box and automatically determines language from input text. When prompted with code-switched text, Bark will attempt to employ the native accent for the respective languages. English quality is best for the time being, and we expect other languages to further improve with scaling. &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;text_prompt = &#34;&#34;&#34;&#xA;    추석은 내가 가장 좋아하는 명절이다. 나는 며칠 동안 휴식을 취하고 친구 및 가족과 시간을 보낼 수 있습니다.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/32879321/235313033-dc4477b9-2da0-4b94-9c8b-a8c2d8f5bb5e.webm&#34;&gt;suno_korean.webm&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Note: since Bark recognizes languages automatically from input text, it is possible to use, for example, a german history prompt with english text. This usually leads to english audio with a german accent.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    Der Dreißigjährige Krieg (1618-1648) war ein verheerender Konflikt, der Europa stark geprägt hat.&#xA;    This is a beginning of the history. If you want to hear more, please continue.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/34592747/3f96ab3e-02ec-49cb-97a6-cf5af0b3524a.webm&#34;&gt;suno_german_accent.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🎶 Music&lt;/h3&gt;&lt;/summary&gt; Bark can generate all types of audio, and, in principle, doesn&#39;t see a difference between speech and music. Sometimes Bark chooses to generate text as music, but you can help it out by adding music notes around your lyrics. &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    ♪ In the jungle, the mighty jungle, the lion barks tonight ♪&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684766-97f5ea23-ad99-473c-924b-66b6fab24289.webm&#34;&gt;lion.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🎤 Voice Presets&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Bark supports 100+ speaker presets across &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#supported-languages&#34;&gt;supported languages&lt;/a&gt;. You can browse the library of supported voice presets &lt;a href=&#34;https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c&#34;&gt;HERE&lt;/a&gt;, or in the &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/bark/assets/prompts&#34;&gt;code&lt;/a&gt;. The community also often shares presets in &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Bark tries to match the tone, pitch, emotion and prosody of a given preset, but does not currently support custom voice cloning. The model also attempts to preserve music, ambient noise, etc.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    I have a silky smooth voice, and today I will tell you about &#xA;    the exercise regimen of the common sloth.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt, history_prompt=&#34;v2/en_speaker_1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684883-a344c619-a560-4ff5-8b99-b4463a34487b.webm&#34;&gt;sloth.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;📃 Generating Longer Audio&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;generate_audio&lt;/code&gt; works well with around 13 seconds of spoken text. For an example of how to do long-form generation, see 👉 &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/notebooks/long_form_generation.ipynb&#34;&gt;Notebook&lt;/a&gt;&lt;/strong&gt; 👈&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to toggle example long-form generations (from the example notebook)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2565833/235463539-f57608da-e4cb-4062-8771-148e29512b01.webm&#34;&gt;dialog.webm&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2565833/235463547-1c0d8744-269b-43fe-9630-897ea5731652.webm&#34;&gt;longform_advanced.webm&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2565833/235463559-87efe9f8-a2db-4d59-b764-57db83f95270.webm&#34;&gt;longform_basic.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Command line&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;python -m bark --text &#34;Hello, my name is Suno.&#34; --output_filename &#34;example.wav&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💻 Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;‼️ CAUTION ‼️ Do NOT use &lt;code&gt;pip install bark&lt;/code&gt;. It installs a different package, which is not managed by Suno.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/suno-ai/bark.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/suno-ai/bark&#xA;cd bark &amp;amp;&amp;amp; pip install . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤗 Transformers Usage&lt;/h2&gt; &#xA;&lt;p&gt;Bark is available in the 🤗 Transformers library from version 4.31.0 onwards, requiring minimal dependencies and additional packages. Steps to get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First install the 🤗 &lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Transformers library&lt;/a&gt; from main:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/huggingface/transformers.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run the following Python code to generate speech samples:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from transformers import AutoProcessor, BarkModel&#xA;&#xA;processor = AutoProcessor.from_pretrained(&#34;suno/bark&#34;)&#xA;model = BarkModel.from_pretrained(&#34;suno/bark&#34;)&#xA;&#xA;voice_preset = &#34;v2/en_speaker_6&#34;&#xA;&#xA;inputs = processor(&#34;Hello, my dog is cute&#34;, voice_preset=voice_preset)&#xA;&#xA;audio_array = model.generate(**inputs)&#xA;audio_array = audio_array.cpu().numpy().squeeze()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Listen to the audio samples either in an ipynb notebook:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from IPython.display import Audio&#xA;&#xA;sample_rate = model.generation_config.sample_rate&#xA;Audio(audio_array, rate=sample_rate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or save them as a &lt;code&gt;.wav&lt;/code&gt; file using a third-party library, e.g. &lt;code&gt;scipy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import scipy&#xA;&#xA;sample_rate = model.generation_config.sample_rate&#xA;scipy.io.wavfile.write(&#34;bark_out.wav&#34;, rate=sample_rate, data=audio_array)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on using the Bark model for inference using the 🤗 Transformers library, refer to the &lt;a href=&#34;https://huggingface.co/docs/transformers/main/en/model_doc/bark&#34;&gt;Bark docs&lt;/a&gt; or the hands-on &lt;a href=&#34;https://colab.research.google.com/drive/1dWWkZzvu7L9Bunq9zvD-W02RFUXoW-Pd?usp=sharing&#34;&gt;Google Colab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🛠️ Hardware and Inference Speed&lt;/h2&gt; &#xA;&lt;p&gt;Bark has been tested and works on both CPU and GPU (&lt;code&gt;pytorch 2.0+&lt;/code&gt;, CUDA 11.7 and CUDA 12.0).&lt;/p&gt; &#xA;&lt;p&gt;On enterprise GPUs and PyTorch nightly, Bark can generate audio in roughly real-time. On older GPUs, default colab, or CPU, inference time might be significantly slower. For older GPUs or CPU you might want to consider using smaller models. Details can be found in out tutorial sections here.&lt;/p&gt; &#xA;&lt;p&gt;The full version of Bark requires around 12GB of VRAM to hold everything on GPU at the same time. To use a smaller version of the models, which should fit into 8GB VRAM, set the environment flag &lt;code&gt;SUNO_USE_SMALL_MODELS=True&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have hardware available or if you want to play with bigger versions of our models, you can also sign up for early access to our model playground &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Details&lt;/h2&gt; &#xA;&lt;p&gt;Bark is fully generative text-to-audio model devolved for research and demo purposes. It follows a GPT style architecture similar to &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt; and a quantized Audio representation from &lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec&lt;/a&gt;. It is not a conventional TTS model, but instead a fully generative text-to-audio model capable of deviating in unexpected ways from any given script. Different to previous approaches, the input text prompt is converted directly to audio without the intermediate use of phonemes. It can therefore generalize to arbitrary instructions beyond speech such as music lyrics, sound effects or other non-speech sounds.&lt;/p&gt; &#xA;&lt;p&gt;Below is a list of some known non-speech sounds, but we are finding more every day. Please let us know if you find patterns that work particularly well on &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughter]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[sighs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[music]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[gasps]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[clears throat]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;—&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt; for hesitations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;♪&lt;/code&gt; for song lyrics&lt;/li&gt; &#xA; &lt;li&gt;CAPITALIZATION for emphasis of a word&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[MAN]&lt;/code&gt; and &lt;code&gt;[WOMAN]&lt;/code&gt; to bias Bark toward male and female speakers, respectively&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Languages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English (en)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German (de)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish (es)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French (fr)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi (hi)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Italian (it)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese (ja)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Korean (ko)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Polish (pl)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese (pt)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian (ru)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turkish (tr)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese, simplified (zh)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Requests for future language support &lt;a href=&#34;https://github.com/suno-ai/bark/discussions/111&#34;&gt;here&lt;/a&gt; or in the &lt;strong&gt;#forums&lt;/strong&gt; channel on &lt;a href=&#34;https://discord.com/invite/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🙏 Appreciation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karpathy/nanoGPT&#34;&gt;nanoGPT&lt;/a&gt; for a dead-simple and blazing fast implementation of GPT-style models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec&lt;/a&gt; for a state-of-the-art implementation of a fantastic audio codec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucidrains/audiolm-pytorch&#34;&gt;AudioLM&lt;/a&gt; for related training and inference code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt; and many other ground-breaking papers that enabled the development of Bark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;© License&lt;/h2&gt; &#xA;&lt;p&gt;Bark is licensed under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;Please contact us at 📧 &lt;a href=&#34;mailto:bark@suno.ai&#34;&gt;bark@suno.ai&lt;/a&gt; to request access to a larger version of the model.&lt;/p&gt; &#xA;&lt;h2&gt;📱&amp;nbsp;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎧&amp;nbsp;Suno Studio (Early Access)&lt;/h2&gt; &#xA;&lt;p&gt;We’re developing a playground for our models, including Bark.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested, you can sign up for early access &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;❓ FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;How do I specify where models are downloaded and cached?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark uses Hugging Face to download and store models. You can see find more info &lt;a href=&#34;https://huggingface.co/docs/huggingface_hub/package_reference/environment_variables#hfhome&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bark&#39;s generations sometimes differ from my prompts. What&#39;s happening?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark is a GPT-style model. As such, it may take some creative liberties in its generations, resulting in higher-variance model outputs than traditional text-to-speech approaches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;What voices are supported by Bark?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark supports 100+ speaker presets across &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#supported-languages&#34;&gt;supported languages&lt;/a&gt;. You can browse the library of speaker presets &lt;a href=&#34;https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c&#34;&gt;here&lt;/a&gt;. The community also shares presets in &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;. Bark also supports generating unique random voices that fit the input text. Bark does not currently support custom voice cloning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Why is the output limited to ~13-14 seconds?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark is a GPT-style model, and its architecture/context window is optimized to output generations with roughly this length.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How much VRAM do I need?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The full version of Bark requires around 12Gb of memory to hold everything on GPU at the same time. However, even smaller cards down to ~2Gb work with some additional settings. Simply add the following code snippet before your generation:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;os.environ[&#34;SUNO_OFFLOAD_CPU&#34;] = &#34;True&#34;&#xA;os.environ[&#34;SUNO_USE_SMALL_MODELS&#34;] = &#34;True&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;My generated audio sounds like a 1980s phone call. What&#39;s happening?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark generates audio from scratch. It is not meant to create only high-fidelity, studio-quality speech. Rather, outputs could be anything from perfect speech to multiple people arguing at a baseball game recorded with bad microphones.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>