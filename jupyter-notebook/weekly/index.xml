<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-14T01:58:24Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>1rgs/jsonformer</title>
    <updated>2023-05-14T01:58:24Z</updated>
    <id>tag:github.com,2023-05-14:/1rgs/jsonformer</id>
    <link href="https://github.com/1rgs/jsonformer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Bulletproof Way to Generate Structured JSON from Language Models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jsonformer: A Bulletproof Way to Generate Structured JSON from Language Models.&lt;/h1&gt; &#xA;&lt;h3&gt;Problem: Getting models to output structured JSON is hard&lt;/h3&gt; &#xA;&lt;h3&gt;Solution: Only generate the content tokens and fill in the fixed tokens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/1rgs/jsonformer/blob/main/Jsonformer_example.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/1rgs/jsonformer/main/img/cover4.png&#34; alt=&#34;cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generating structured JSON from language models is a challenging task. The generated JSON must be syntactically correct, and it must conform to a schema that specifies the structure of the JSON.&lt;/p&gt; &#xA;&lt;p&gt;Current approaches to this problem are brittle and error-prone. They rely on prompt engineering, fine-tuning, and post-processing, but they still fail to generate syntactically correct JSON in many cases.&lt;/p&gt; &#xA;&lt;p&gt;Jsonformer is a new approach to this problem. In structured data, many tokens are fixed and predictable. Jsonformer is a wrapper around Hugging Face models that fills in the fixed tokens during the generation process, and only delegates the generation of content tokens to the language model. This makes it more efficient and bulletproof than existing approaches.&lt;/p&gt; &#xA;&lt;p&gt;This currently supports a subset of JSON Schema. Below is a list of the supported schema types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;number&lt;/li&gt; &#xA; &lt;li&gt;boolean&lt;/li&gt; &#xA; &lt;li&gt;string&lt;/li&gt; &#xA; &lt;li&gt;array&lt;/li&gt; &#xA; &lt;li&gt;object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jsonformer import Jsonformer&#xA;from transformers import AutoModelForCausalLM, AutoTokenizer&#xA;&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;databricks/dolly-v2-12b&#34;)&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;databricks/dolly-v2-12b&#34;)&#xA;&#xA;json_schema = {&#xA;    &#34;type&#34;: &#34;object&#34;,&#xA;    &#34;properties&#34;: {&#xA;        &#34;name&#34;: {&#34;type&#34;: &#34;string&#34;},&#xA;        &#34;age&#34;: {&#34;type&#34;: &#34;number&#34;},&#xA;        &#34;is_student&#34;: {&#34;type&#34;: &#34;boolean&#34;},&#xA;        &#34;courses&#34;: {&#xA;            &#34;type&#34;: &#34;array&#34;,&#xA;            &#34;items&#34;: {&#34;type&#34;: &#34;string&#34;}&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;prompt = &#34;Generate a person&#39;s information based on the following schema:&#34;&#xA;jsonformer = Jsonformer(model, tokenizer, json_schema, prompt)&#xA;generated_data = jsonformer()&#xA;&#xA;print(generated_data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jsonformer works on complex schemas, even with tiny models. Here is an example of a schema with nested objects and arrays, generated by a 3B parameter model.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#34;type&#34;: &#34;object&#34;, &#34;properties&#34;: {&#34;car&#34;: {&#34;type&#34;: &#34;object&#34;, &#34;properties&#34;: {&#34;make&#34;: {&#34;type&#34;: &#34;string&#34;}, &#34;model&#34;: {&#34;type&#34;: &#34;string&#34;}, &#34;year&#34;: {&#34;type&#34;: &#34;number&#34;}, &#34;colors&#34;: {&#34;type&#34;: &#34;array&#34;, &#34;items&#34;: {&#34;type&#34;: &#34;string&#34;}}, &#34;features&#34;: {&#34;type&#34;: &#34;object&#34;, &#34;properties&#34;: {&#34;audio&#34;: {&#34;type&#34;: &#34;object&#34;, &#34;properties&#34;: {&#34;brand&#34;: {&#34;type&#34;: &#34;string&#34;}, &#34;speakers&#34;: {&#34;type&#34;: &#34;number&#34;}, &#34;hasBluetooth&#34;: {&#34;type&#34;: &#34;boolean&#34;}}}, &#34;safety&#34;: {&#34;type&#34;: &#34;object&#34;, &#34;properties&#34;: {&#34;airbags&#34;: {&#34;type&#34;: &#34;number&#34;}, &#34;parkingSensors&#34;: {&#34;type&#34;: &#34;boolean&#34;}, &#34;laneAssist&#34;: {&#34;type&#34;: &#34;boolean&#34;}}}, &#34;performance&#34;: {&#34;type&#34;: &#34;object&#34;, &#34;properties&#34;: {&#34;engine&#34;: {&#34;type&#34;: &#34;string&#34;}, &#34;horsepower&#34;: {&#34;type&#34;: &#34;number&#34;}, &#34;topSpeed&#34;: {&#34;type&#34;: &#34;number&#34;}}}}}}}, &#34;owner&#34;: {&#34;type&#34;: &#34;object&#34;, &#34;properties&#34;: {&#34;firstName&#34;: {&#34;type&#34;: &#34;string&#34;}, &#34;lastName&#34;: {&#34;type&#34;: &#34;string&#34;}, &#34;age&#34;: {&#34;type&#34;: &#34;number&#34;}}}}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#xA;  car: {&#xA;    make: &#34;audi&#34;,&#xA;    model: &#34;model A8&#34;,&#xA;    year: 2016.0,&#xA;    colors: [&#xA;      &#34;blue&#34;&#xA;    ],&#xA;    features: {&#xA;      audio: {&#xA;        brand: &#34;sony&#34;,&#xA;        speakers: 2.0,&#xA;        hasBluetooth: True&#xA;      },&#xA;      safety: {&#xA;        airbags: 2.0,&#xA;        parkingSensors: True,&#xA;        laneAssist: True&#xA;      },&#xA;      performance: {&#xA;        engine: &#34;4.0&#34;,&#xA;        horsepower: 220.0,&#xA;        topSpeed: 220.0&#xA;      }&#xA;    }&#xA;  },&#xA;  owner: {&#xA;    firstName: &#34;John&#34;,&#xA;    lastName: &#34;Doe&#34;,&#xA;    age: 40.0&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bulletproof JSON generation: Jsonformer ensures that the generated JSON is always syntactically correct and conforms to the specified schema.&lt;/li&gt; &#xA; &lt;li&gt;Efficiency: By generating only the content tokens and filling in the fixed tokens, Jsonformer is more efficient than generating a full JSON string and parsing it.&lt;/li&gt; &#xA; &lt;li&gt;Flexible and extendable: Jsonformer is built on top of the Hugging Face transformers library, making it compatible with any model that supports the Hugging Face interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install jsonformer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://python-poetry.org/docs/#installation&#34;&gt;Poetry&lt;/a&gt; is used for dependency management.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python -m jsonformer.example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Jsonformer is released under the MIT License. You are free to use, modify, and distribute this software for any purpose, commercial or non-commercial, as long as the original copyright and license notice are included.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>datawhalechina/prompt-engineering-for-developers</title>
    <updated>2023-05-14T01:58:24Z</updated>
    <id>tag:github.com,2023-05-14:/datawhalechina/prompt-engineering-for-developers</id>
    <link href="https://github.com/datawhalechina/prompt-engineering-for-developers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;吴恩达《ChatGPT Prompt Engineering for Developers》课程中文版，视频地址：https://www.bilibili.com/video/BV1Bo4y1A7FU&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/datawhalechina/prompt-engineering-for-developers/raw/main/figures/readme.jpeg&#34; alt=&#34;figures/readme.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;prompt-engineering-for-developers&lt;/h1&gt; &#xA;&lt;h3&gt;项目简介&lt;/h3&gt; &#xA;&lt;p&gt;吴恩达《ChatGPT Prompt Engineering for Developers》课程中文版，主要内容为指导开发者如何构建 Prompt 并基于 OpenAI API 构建新的、基于 LLM 的应用，包括：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;书写 Prompt 的原则; 文本总结（如总结用户评论）； 文本推断（如情感分类、主题提取）； 文本转换（如翻译、自动纠错）； 扩展（如书写邮件）;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;英文原版地址：&lt;a href=&#34;https://learn.deeplearning.ai&#34;&gt;ChatGPT Prompt Engineering for Developers&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;中文字幕视频地址：&lt;a href=&#34;https://www.bilibili.com/video/BV1Bo4y1A7FU/?share_source=copy_web&#34;&gt;吴恩达 x OpenAI的Prompt Engineering课程专业翻译版&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;中英双语字幕下载：&lt;a href=&#34;https://github.com/GitHubDaily/ChatGPT-Prompt-Engineering-for-Developers-in-Chinese&#34;&gt;《ChatGPT提示工程》非官方版中英双语字幕&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;项目意义&lt;/h3&gt; &#xA;&lt;p&gt;LLM 正在逐步改变人们的生活，而对于开发者，如何基于 LLM 提供的 API 快速、便捷地开发一些具备更强能力、集成LLM 的应用，来便捷地实现一些更新颖、更实用的能力，是一个急需学习的重要能力。由吴恩达老师与 OpenAI 合作推出的 《ChatGPT Prompt Engineering for Developers》教程面向入门 LLM 的开发者，深入浅出地介绍了对于开发者，如何构造 Prompt 并基于 OpenAI 提供的 API 实现包括总结、推断、转换等多种常用功能，是入门 LLM 开发的经典教程。因此，我们将该课程翻译为中文，并复现其范例代码，也为原视频增加了中文字幕，支持国内中文学习者直接使用，以帮助中文学习者更好地学习 LLM 开发。&lt;/p&gt; &#xA;&lt;h3&gt;项目受众&lt;/h3&gt; &#xA;&lt;p&gt;适用于所有具备基础 Python 能力，想要入门 LLM 的开发者。&lt;/p&gt; &#xA;&lt;h3&gt;项目亮点&lt;/h3&gt; &#xA;&lt;p&gt;《ChatGPT Prompt Engineering for Developers》作为由吴恩达老师与 OpenAI 联合推出的官方教程，在可预见的未来会成为 LLM 的重要入门教程，但是目前还只支持英文版且国内访问受限，打造中文版且国内流畅访问的教程具有重要意义。&lt;/p&gt; &#xA;&lt;h3&gt;内容大纲&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;目录：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;简介 Introduction @邹雨衡&lt;/li&gt; &#xA; &lt;li&gt;Prompt 的构建原则 Guidelines @邹雨衡&lt;/li&gt; &#xA; &lt;li&gt;如何迭代优化 Prompt Itrative @邹雨衡&lt;/li&gt; &#xA; &lt;li&gt;文本总结 Summarizing @玉琳&lt;/li&gt; &#xA; &lt;li&gt;文本推断 Inferring @长琴&lt;/li&gt; &#xA; &lt;li&gt;文本转换 Transforming @玉琳&lt;/li&gt; &#xA; &lt;li&gt;文本扩展 Expanding @邹雨衡&lt;/li&gt; &#xA; &lt;li&gt;聊天机器人 Chatbot @长琴&lt;/li&gt; &#xA; &lt;li&gt;总结 @长琴&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;中文字幕视频：&lt;a href=&#34;https://www.bilibili.com/video/BV1Bo4y1A7FU/?share_source=copy_web&#34;&gt;吴恩达 x OpenAI的Prompt Engineering课程专业翻译版&lt;/a&gt; @万礼行&lt;/p&gt; &#xA;&lt;h3&gt;致谢&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;核心贡献者&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nowadays0421&#34;&gt;邹雨衡-项目负责人&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yam.gift/&#34;&gt;长琴&lt;/a&gt;（内容创作者-Datawhale成员-AI算法工程师）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sophia-Huang&#34;&gt;玉琳&lt;/a&gt;（内容创作者-Datawhale成员）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leason-wan&#34;&gt;万礼行&lt;/a&gt;（视频翻译者）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;特别感谢 &lt;a href=&#34;https://github.com/Sm1les&#34;&gt;@Sm1les&lt;/a&gt;、&lt;a href=&#34;https://github.com/LSGOMYP&#34;&gt;@LSGOMYP&lt;/a&gt; 对本项目的帮助与支持；&lt;/li&gt; &#xA; &lt;li&gt;如果有任何想法可以联系我们DataWhale也欢迎大家多多提出issue。&lt;/li&gt; &#xA; &lt;li&gt;特别感谢以下为教程做出贡献的同学！&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;a href=&#34;https://github.com/datawhalechina/prompt-engineering-for-developers/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=datawhalechina/prompt-engineering-for-developers&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;关注我们&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;扫描下方二维码关注公众号：Datawhale&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/datawhalechina/prompt-engineering-for-developers/main/figures/qrcode.jpeg&#34; width=&#34;180&#34; height=&#34;180&#34;&gt; &#xA;&lt;/div&gt; Datawhale 是一个专注于数据科学与 AI 领域的开源组织，汇集了众多领域院校和知名企业的优秀学习者，聚合了一群有开源精神和探索精神的团队成员。微信搜索公众号Datawhale可以加入我们。 &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://img.shields.io/badge/license-CC%20BY--NC--SA%204.0-lightgrey&#34;&gt;&lt;/a&gt;&lt;br&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googlesamples/mediapipe</title>
    <updated>2023-05-14T01:58:24Z</updated>
    <id>tag:github.com,2023-05-14:/googlesamples/mediapipe</id>
    <link href="https://github.com/googlesamples/mediapipe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repo hosts the official MediaPipe samples with a goal of showing the fundamental steps involved to create apps with our machine learning platform.&lt;/p&gt; &#xA;&lt;p&gt;External PRs for fixes are welcome, however new sample/demo PRs will likely be rejected to maintain the simplicity of this repo for ongoing maintenance. It is strongly recommended that contributors who are interested in submitting more complex samples or demos host their samples in their own public repos and create written tutorials to share with the community. Contributors can also submit these projects and tutorials to the &lt;a href=&#34;https://devlibrary.withgoogle.com/&#34;&gt;Google DevLibrary&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MediaPipe Solutions streamlines on-device ML development and deployment with flexible low-code / no-code tools that provide the modular building blocks for creating custom high-performance solutions for cross-platform deployment. It consists of the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MediaPipe Tasks (low-code): create and deploy custom e2e ML solution pipelines&lt;/li&gt; &#xA; &lt;li&gt;MediaPipe Model Maker (low-code): create custom ML models from advanced solutions&lt;/li&gt; &#xA; &lt;li&gt;MediaPipe Studio (no-code): create, evaluate, debug, benchmark, prototype, deploy advanced production-level solutions&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>