<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:54:18Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openai/openai-cookbook</title>
    <updated>2023-03-05T01:54:18Z</updated>
    <id>tag:github.com,2023-03-05:/openai/openai-cookbook</id>
    <link href="https://github.com/openai/openai-cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples and guides for using the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Cookbook&lt;/h1&gt; &#xA;&lt;p&gt;The OpenAI Cookbook shares example code for accomplishing common tasks with the &lt;a href=&#34;https://openai.com/api/&#34;&gt;OpenAI API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run these examples, you&#39;ll need an OpenAI account and associated API key (&lt;a href=&#34;https://beta.openai.com/signup&#34;&gt;create a free account&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Most code examples are written in Python, though the concepts can be applied in any language.&lt;/p&gt; &#xA;&lt;h2&gt;Recently added ðŸ†• âœ¨&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb&#34;&gt;How to format inputs to ChatGPT models&lt;/a&gt; [Mar 1st, 2023]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/redis&#34;&gt;Using Vector Databases for Embeddings Search with Redis&lt;/a&gt; [Feb 15th, 2023]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/openai-cookbook/tree/main/apps/web-crawl-q-and-a&#34;&gt;Website Q&amp;amp;A with Embeddings&lt;/a&gt; [Feb 11th, 2023]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/openai-cookbook/tree/main/apps/file-q-and-a&#34;&gt;File Q&amp;amp;A with Embeddings&lt;/a&gt; [Feb 11th, 2023]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/openai-cookbook/raw/main/examples/Visualizing_embeddings_in_W%26B.ipynb&#34;&gt;Visualize Embeddings in Weights &amp;amp; Biases&lt;/a&gt; [Feb 9th, 2023]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/openai-cookbook/raw/main/examples/vector_databases/pinecone/Gen_QA.ipynb&#34;&gt;Retrieval Enhanced Generative Question Answering with Pinecone&lt;/a&gt; [Feb 8th, 2023]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Guides &amp;amp; examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API usage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/How_to_handle_rate_limits.ipynb&#34;&gt;How to handle rate limits&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/api_request_parallel_processor.py&#34;&gt;Example parallel processing script that avoids hitting rate limits&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/How_to_count_tokens_with_tiktoken.ipynb&#34;&gt;How to count tokens with tiktoken&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/How_to_stream_completions.ipynb&#34;&gt;How to stream completions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ChatGPT &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb&#34;&gt;How to format inputs to ChatGPT models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GPT-3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/how_to_work_with_large_language_models.md&#34;&gt;Guide: How to work with large language models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/techniques_to_improve_reliability.md&#34;&gt;Guide: Techniques to improve reliability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Unit_test_writing_using_a_multi-step_prompt.ipynb&#34;&gt;How to use a multi-step prompt to write unit tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/text_writing_examples.md&#34;&gt;Text writing examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/text_explanation_examples.md&#34;&gt;Text explanation examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/text_editing_examples.md&#34;&gt;Text editing examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/code_writing_examples.md&#34;&gt;Code writing examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/code_explanation_examples.md&#34;&gt;Code explanation examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/code_editing_examples.md&#34;&gt;Code editing examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Embeddings &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/text_comparison_examples.md&#34;&gt;Text comparison examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Get_embeddings.ipynb&#34;&gt;How to get embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Question_answering_using_embeddings.ipynb&#34;&gt;Question answering using embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Semantic_text_search_using_embeddings.ipynb&#34;&gt;Semantic search using embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Recommendation_using_embeddings.ipynb&#34;&gt;Recommendations using embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Clustering.ipynb&#34;&gt;Clustering embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Visualizing_embeddings_in_2D.ipynb&#34;&gt;Visualizing embeddings in 2D&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Visualizing_embeddings_in_3D.ipynb&#34;&gt;3D&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Embedding_long_inputs.ipynb&#34;&gt;Embedding long texts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fine-tuning GPT-3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1rqj7dkuvl7Byd5KQPUJRxc19BJt8wo0yHNwK84KfU3Q/edit&#34;&gt;Guide: best practices for fine-tuning GPT-3 to classify text&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/Fine-tuned_classification.ipynb&#34;&gt;Fine-tuned classification&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DALL-E &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/dalle/Image_generations_edits_and_variations_with_DALL-E.ipynb&#34;&gt;How to generate and edit images with DALL-E&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Azure OpenAI (alternative API from Microsoft Azure) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/azure/completions.ipynb&#34;&gt;How to get completions from Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/azure/embeddings.ipynb&#34;&gt;How to get embeddings from Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/examples/azure/finetuning.ipynb&#34;&gt;How to fine-tune GPT-3 with Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apps &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/apps/file-q-and-a/&#34;&gt;File Q and A&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-cookbook/main/apps/web-crawl-q-and-a&#34;&gt;Web Crawl Q and A&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related resources&lt;/h2&gt; &#xA;&lt;p&gt;Beyond the code examples here, you can learn about the &lt;a href=&#34;https://openai.com/api/&#34;&gt;OpenAI API&lt;/a&gt; from the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try out the API in the &lt;a href=&#34;https://beta.openai.com/playground&#34;&gt;OpenAI Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read about the API in the &lt;a href=&#34;https://beta.openai.com/docs/introduction&#34;&gt;OpenAI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discuss the API in the &lt;a href=&#34;https://community.openai.com/top?period=monthly&#34;&gt;OpenAI Community Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Look for help in the &lt;a href=&#34;https://help.openai.com/en/&#34;&gt;OpenAI Help Center&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See example prompts in the &lt;a href=&#34;https://beta.openai.com/examples&#34;&gt;OpenAI Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Play with a free research preview of &lt;a href=&#34;https://chat.openai.com/&#34;&gt;ChatGPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stay up to date with the &lt;a href=&#34;https://openai.com/blog/&#34;&gt;OpenAI Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If there are examples or guides you&#39;d like to see, feel free to suggest them on the &lt;a href=&#34;https://github.com/openai/openai-cookbook/issues&#34;&gt;issues page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>runwayml/stable-diffusion</title>
    <updated>2023-03-05T01:54:18Z</updated>
    <id>tag:github.com,2023-03-05:/runwayml/stable-diffusion</id>
    <link href="https://github.com/runwayml/stable-diffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Latent Text-to-Image Diffusion&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Stable Diffusion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/compvis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt; builds upon our previous work with the &lt;a href=&#34;https://ommer-lab.com/&#34;&gt;CompVis group&lt;/a&gt;:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ommer-lab.com/research/latent-diffusion-models/&#34;&gt;&lt;strong&gt;High-Resolution Image Synthesis with Latent Diffusion Models&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/rromb&#34;&gt;Robin Rombach&lt;/a&gt;*, &lt;a href=&#34;https://github.com/ablattmann&#34;&gt;Andreas Blattmann&lt;/a&gt;*, &lt;a href=&#34;https://github.com/qp-qp&#34;&gt;Dominik Lorenz&lt;/a&gt;, &lt;a href=&#34;https://github.com/pesser&#34;&gt;Patrick Esser&lt;/a&gt;, &lt;a href=&#34;https://hci.iwr.uni-heidelberg.de/Staff/bommer&#34;&gt;BjÃ¶rn Ommer&lt;/a&gt;&lt;br&gt; &lt;em&gt;&lt;a href=&#34;https://openaccess.thecvf.com/content/CVPR2022/html/Rombach_High-Resolution_Image_Synthesis_With_Latent_Diffusion_Models_CVPR_2022_paper.html&#34;&gt;CVPR &#39;22 Oral&lt;/a&gt; | &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2112.10752&#34;&gt;arXiv&lt;/a&gt; | &lt;a href=&#34;https://ommer-lab.com/research/latent-diffusion-models/&#34;&gt;Project page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/stable-samples/txt2img/merged-0006.png&#34; alt=&#34;txt2img-stable2&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/#stable-diffusion-v1&#34;&gt;Stable Diffusion&lt;/a&gt; is a latent text-to-image diffusion model. Thanks to a generous compute donation from &lt;a href=&#34;https://stability.ai/&#34;&gt;Stability AI&lt;/a&gt; and support from &lt;a href=&#34;https://laion.ai/&#34;&gt;LAION&lt;/a&gt;, we were able to train a Latent Diffusion Model on 512x512 images from a subset of the &lt;a href=&#34;https://laion.ai/blog/laion-5b/&#34;&gt;LAION-5B&lt;/a&gt; database. Similar to Google&#39;s &lt;a href=&#34;https://arxiv.org/abs/2205.11487&#34;&gt;Imagen&lt;/a&gt;, this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/#stable-diffusion-v1&#34;&gt;this section&lt;/a&gt; below and the &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion&#34;&gt;model card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-10-20&lt;/em&gt; &lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-v1-5&#34;&gt;v1.5 Text-to-Image Checkpoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-10-18&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/#inpainting-with-stable-diffusion&#34;&gt;Inpainting Model&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/inpaintingbanner.png&#34; alt=&#34;Inpainting Banner&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A suitable &lt;a href=&#34;https://conda.io/&#34;&gt;conda&lt;/a&gt; environment named &lt;code&gt;ldm&lt;/code&gt; can be created and activated with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate ldm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also update an existing &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;latent diffusion&lt;/a&gt; environment by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install pytorch torchvision -c pytorch&#xA;pip install transformers==4.19.2 diffusers invisible-watermark&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stable Diffusion v1&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/Stable_Diffusion_v1_Model_Card.md&#34;&gt;model card&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The weights are available via &lt;a href=&#34;https://huggingface.co/CompVis&#34;&gt;the CompVis&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/runwayml&#34;&gt;Runway organization at Hugging Face&lt;/a&gt; under &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/LICENSE&#34;&gt;a license which contains specific use-based restrictions to prevent misuse and harm as informed by the model card, but otherwise remains permissive&lt;/a&gt;. While commercial use is permitted under the terms of the license, &lt;strong&gt;we do not recommend using the provided weights for services or products without additional safety mechanisms and considerations&lt;/strong&gt;, since there are &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/Stable_Diffusion_v1_Model_Card.md#limitations-and-bias&#34;&gt;known limitations and biases&lt;/a&gt; of the weights, and research on safe and ethical deployment of general text-to-image models is an ongoing effort. &lt;strong&gt;The weights are research artifacts and should be treated as such.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/LICENSE&#34;&gt;The CreativeML OpenRAIL M license&lt;/a&gt; is an &lt;a href=&#34;https://www.licenses.ai/blog/2022/8/18/naming-convention-of-responsible-ai-licenses&#34;&gt;Open RAIL M license&lt;/a&gt;, adapted from the work that &lt;a href=&#34;https://bigscience.huggingface.co/&#34;&gt;BigScience&lt;/a&gt; and &lt;a href=&#34;https://www.licenses.ai/&#34;&gt;the RAIL Initiative&lt;/a&gt; are jointly carrying in the area of responsible AI licensing. See also &lt;a href=&#34;https://bigscience.huggingface.co/blog/the-bigscience-rail-license&#34;&gt;the article about the BLOOM Open RAIL license&lt;/a&gt; on which our license is based.&lt;/p&gt; &#xA;&lt;h3&gt;Weights&lt;/h3&gt; &#xA;&lt;p&gt;We currently provide the following checkpoints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/compvis&#34;&gt;&lt;code&gt;sd-v1-1.ckpt&lt;/code&gt;&lt;/a&gt;: 237k steps at resolution &lt;code&gt;256x256&lt;/code&gt; on &lt;a href=&#34;https://huggingface.co/datasets/laion/laion2B-en&#34;&gt;laion2B-en&lt;/a&gt;. 194k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &lt;a href=&#34;https://huggingface.co/datasets/laion/laion-high-resolution&#34;&gt;laion-high-resolution&lt;/a&gt; (170M examples from LAION-5B with resolution &lt;code&gt;&amp;gt;= 1024x1024&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/compvis&#34;&gt;&lt;code&gt;sd-v1-2.ckpt&lt;/code&gt;&lt;/a&gt;: Resumed from &lt;code&gt;sd-v1-1.ckpt&lt;/code&gt;. 515k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &lt;a href=&#34;https://laion.ai/blog/laion-aesthetics/&#34;&gt;laion-aesthetics v2 5+&lt;/a&gt; (a subset of laion2B-en with estimated aesthetics score &lt;code&gt;&amp;gt; 5.0&lt;/code&gt;, and additionally filtered to images with an original size &lt;code&gt;&amp;gt;= 512x512&lt;/code&gt;, and an estimated watermark probability &lt;code&gt;&amp;lt; 0.5&lt;/code&gt;. The watermark estimate is from the &lt;a href=&#34;https://laion.ai/blog/laion-5b/&#34;&gt;LAION-5B&lt;/a&gt; metadata, the aesthetics score is estimated using the &lt;a href=&#34;https://github.com/christophschuhmann/improved-aesthetic-predictor&#34;&gt;LAION-Aesthetics Predictor V2&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/compvis&#34;&gt;&lt;code&gt;sd-v1-3.ckpt&lt;/code&gt;&lt;/a&gt;: Resumed from &lt;code&gt;sd-v1-2.ckpt&lt;/code&gt;. 195k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &#34;laion-aesthetics v2 5+&#34; and 10% dropping of the text-conditioning to improve &lt;a href=&#34;https://arxiv.org/abs/2207.12598&#34;&gt;classifier-free guidance sampling&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/compvis&#34;&gt;&lt;code&gt;sd-v1-4.ckpt&lt;/code&gt;&lt;/a&gt;: Resumed from &lt;code&gt;sd-v1-2.ckpt&lt;/code&gt;. 225k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &#34;laion-aesthetics v2 5+&#34; and 10% dropping of the text-conditioning to improve &lt;a href=&#34;https://arxiv.org/abs/2207.12598&#34;&gt;classifier-free guidance sampling&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-v1-5&#34;&gt;&lt;code&gt;sd-v1-5.ckpt&lt;/code&gt;&lt;/a&gt;: Resumed from &lt;code&gt;sd-v1-2.ckpt&lt;/code&gt;. 595k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &#34;laion-aesthetics v2 5+&#34; and 10% dropping of the text-conditioning to improve &lt;a href=&#34;https://arxiv.org/abs/2207.12598&#34;&gt;classifier-free guidance sampling&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-inpainting&#34;&gt;&lt;code&gt;sd-v1-5-inpainting.ckpt&lt;/code&gt;&lt;/a&gt;: Resumed from &lt;code&gt;sd-v1-5.ckpt&lt;/code&gt;. 440k steps of inpainting training at resolution &lt;code&gt;512x512&lt;/code&gt; on &#34;laion-aesthetics v2 5+&#34; and 10% dropping of the text-conditioning to improve &lt;a href=&#34;https://arxiv.org/abs/2207.12598&#34;&gt;classifier-free guidance sampling&lt;/a&gt;. For inpainting, the UNet has 5 additional input channels (4 for the encoded masked-image and 1 for the mask itself) whose weights were zero-initialized after restoring the non-inpainting checkpoint. During training, we generate synthetic masks and in 25% mask everything.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints: &lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/v1-1-to-v1-5.png&#34; alt=&#34;sd evaluation results&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text-to-Image with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/stable-samples/txt2img/merged-0005.png&#34; alt=&#34;txt2img-stable2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/stable-samples/txt2img/merged-0007.png&#34; alt=&#34;txt2img-stable2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder. We provide a &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/#reference-sampling-script&#34;&gt;reference script for sampling&lt;/a&gt;, but there also exists a &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/#diffusers-integration&#34;&gt;diffusers integration&lt;/a&gt;, which we expect to see more active community development.&lt;/p&gt; &#xA;&lt;h4&gt;Reference Sampling Script&lt;/h4&gt; &#xA;&lt;p&gt;We provide a reference sampling script, which incorporates&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://github.com/CompVis/stable-diffusion/pull/36&#34;&gt;Safety Checker Module&lt;/a&gt;, to reduce the probability of explicit outputs,&lt;/li&gt; &#xA; &lt;li&gt;an &lt;a href=&#34;https://github.com/ShieldMnt/invisible-watermark&#34;&gt;invisible watermarking&lt;/a&gt; of the outputs, to help viewers &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/scripts/tests/test_watermark.py&#34;&gt;identify the images as machine-generated&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/#weights&#34;&gt;obtaining the &lt;code&gt;stable-diffusion-v1-*-original&lt;/code&gt; weights&lt;/a&gt;, link them&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p models/ldm/stable-diffusion-v1/&#xA;ln -s &amp;lt;path/to/model.ckpt&amp;gt; models/ldm/stable-diffusion-v1/model.ckpt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and sample with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/txt2img.py --prompt &#34;a photograph of an astronaut riding a horse&#34; --plms &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this uses a guidance scale of &lt;code&gt;--scale 7.5&lt;/code&gt;, &lt;a href=&#34;https://github.com/CompVis/latent-diffusion/pull/51&#34;&gt;Katherine Crowson&#39;s implementation&lt;/a&gt; of the &lt;a href=&#34;https://arxiv.org/abs/2202.09778&#34;&gt;PLMS&lt;/a&gt; sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type &lt;code&gt;python scripts/txt2img.py --help&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA]&#xA;                  [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS] [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT]&#xA;                  [--seed SEED] [--precision {full,autocast}]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  --prompt [PROMPT]     the prompt to render&#xA;  --outdir [OUTDIR]     dir to write results to&#xA;  --skip_grid           do not save a grid, only individual samples. Helpful when evaluating lots of samples&#xA;  --skip_save           do not save individual samples. For speed measurements.&#xA;  --ddim_steps DDIM_STEPS&#xA;                        number of ddim sampling steps&#xA;  --plms                use plms sampling&#xA;  --laion400m           uses the LAION400M model&#xA;  --fixed_code          if enabled, uses the same starting code across samples&#xA;  --ddim_eta DDIM_ETA   ddim eta (eta=0.0 corresponds to deterministic sampling&#xA;  --n_iter N_ITER       sample this often&#xA;  --H H                 image height, in pixel space&#xA;  --W W                 image width, in pixel space&#xA;  --C C                 latent channels&#xA;  --f F                 downsampling factor&#xA;  --n_samples N_SAMPLES&#xA;                        how many samples to produce for each given prompt. A.k.a. batch size&#xA;  --n_rows N_ROWS       rows in the grid (default: n_samples)&#xA;  --scale SCALE         unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty))&#xA;  --from-file FROM_FILE&#xA;                        if specified, load prompts from this file&#xA;  --config CONFIG       path to config which constructs model&#xA;  --ckpt CKPT           path to checkpoint of model&#xA;  --seed SEED           the seed (for reproducible sampling)&#xA;  --precision {full,autocast}&#xA;                        evaluate at this precision&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason &lt;code&gt;use_ema=False&lt;/code&gt; is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide &#34;full&#34; checkpoints which contain both types of weights. For these, &lt;code&gt;use_ema=False&lt;/code&gt; will load and use the non-EMA weights.&lt;/p&gt; &#xA;&lt;h4&gt;Diffusers Integration&lt;/h4&gt; &#xA;&lt;p&gt;A simple way to download and sample Stable Diffusion is by using the &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main#new--stable-diffusion-is-now-fully-compatible-with-diffusers&#34;&gt;diffusers library&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from diffusers import StableDiffusionPipeline&#xA;&#xA;model_id = &#34;runwayml/stable-diffusion-v1-5&#34;&#xA;pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16, revision=&#34;fp16&#34;)&#xA;pipe = pipe.to(device)&#xA;&#xA;prompt = &#34;a photo of an astronaut riding a horse on mars&#34;&#xA;image = pipe(prompt).images[0]&#xA;    &#xA;image.save(&#34;astronaut_rides_horse.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image Modification with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;By using a diffusion-denoising mechanism as first proposed by &lt;a href=&#34;https://arxiv.org/abs/2108.01073&#34;&gt;SDEdit&lt;/a&gt;, the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion.&lt;/p&gt; &#xA;&lt;p&gt;The following describes an example where a rough sketch made in &lt;a href=&#34;https://www.pinta-project.com/&#34;&gt;Pinta&lt;/a&gt; is converted into a detailed artwork.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/img2img.py --prompt &#34;A fantasy landscape, trending on artstation&#34; --init-img &amp;lt;path-to-img.jpg&amp;gt; --strength 0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg&#34; alt=&#34;sketch-in&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Outputs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/stable-samples/img2img/mountains-3.png&#34; alt=&#34;out3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/stable-samples/img2img/mountains-2.png&#34; alt=&#34;out2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This procedure can, for example, also be used to upscale samples from the base model.&lt;/p&gt; &#xA;&lt;h3&gt;Inpainting with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/assets/stable-inpainting/merged-bench.png&#34; alt=&#34;txt2img-stable2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We provide a checkpoint finetuned for inpainting to perform text-based erase &amp;amp; replace functionality.&lt;/p&gt; &#xA;&lt;h4&gt;Quick Start&lt;/h4&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/#Requirements&#34;&gt;creating a suitable environment&lt;/a&gt;, download the &lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-inpainting&#34;&gt;checkpoint finetuned for inpainting&lt;/a&gt; and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/inpaint_st.py -- configs/stable-diffusion/v1-inpainting-inference.yaml &amp;lt;path-to-checkpoint&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for a streamlit demo of the inpainting model. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding &lt;a href=&#34;https://raw.githubusercontent.com/runwayml/stable-diffusion/main/Stable_Diffusion_v1_Model_Card.md&#34;&gt;model card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Diffusers Integration&lt;/h4&gt; &#xA;&lt;p&gt;Another simple way to use the inpainting model is via the &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers library&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from diffusers import StableDiffusionInpaintPipeline&#xA;&#xA;pipe = StableDiffusionInpaintPipeline.from_pretrained(&#xA;    &#34;runwayml/stable-diffusion-inpainting&#34;,&#xA;    revision=&#34;fp16&#34;,&#xA;    torch_dtype=torch.float16,&#xA;)&#xA;prompt = &#34;Face of a yellow cat, high resolution, sitting on a park bench&#34;&#xA;#image and mask_image should be PIL images.&#xA;#The mask structure is white for inpainting and black for keeping as is&#xA;image = pipe(prompt=prompt, image=image, mask_image=mask_image).images[0]&#xA;image.save(&#34;./yellow_cat_on_park_bench.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Evaluation&lt;/h4&gt; &#xA;&lt;p&gt;To assess the performance of the inpainting model, we used the same evaluation protocol as in our &lt;a href=&#34;https://arxiv.org/abs/2112.10752&#34;&gt;LDM paper&lt;/a&gt;. Since the Stable Diffusion Inpainting Model acccepts a text input, we simply used a fixed prompt of &lt;code&gt;photograph of a beautiful empty scene, highest quality settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;FID&lt;/th&gt; &#xA;   &lt;th&gt;LPIPS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable Diffusion Inpainting&lt;/td&gt; &#xA;   &lt;td&gt;1.00&lt;/td&gt; &#xA;   &lt;td&gt;0.141 (+- 0.082)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Latent Diffusion Inpainting&lt;/td&gt; &#xA;   &lt;td&gt;1.50&lt;/td&gt; &#xA;   &lt;td&gt;0.137 (+- 0.080)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CoModGAN&lt;/td&gt; &#xA;   &lt;td&gt;1.82&lt;/td&gt; &#xA;   &lt;td&gt;0.15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaMa&lt;/td&gt; &#xA;   &lt;td&gt;2.21&lt;/td&gt; &#xA;   &lt;td&gt;0.134 (+- 0.080)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Online Demo&lt;/h4&gt; &#xA;&lt;p&gt;If you want to try the model without setting things up locally, you can try the &lt;a href=&#34;https://app.runwayml.com/ai-tools/erase-and-replace&#34;&gt;Erase &amp;amp; Replace&lt;/a&gt; tool at &lt;a href=&#34;https://runwayml.com/&#34;&gt;Runway&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2175508/196499595-d8194abf-fec4-4927-bf14-af106fe4fa40.mp4&#34;&gt;https://user-images.githubusercontent.com/2175508/196499595-d8194abf-fec4-4927-bf14-af106fe4fa40.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Our codebase for the diffusion models builds heavily on &lt;a href=&#34;https://github.com/openai/guided-diffusion&#34;&gt;OpenAI&#39;s ADM codebase&lt;/a&gt; and &lt;a href=&#34;https://github.com/lucidrains/denoising-diffusion-pytorch&#34;&gt;https://github.com/lucidrains/denoising-diffusion-pytorch&lt;/a&gt;. Thanks for open-sourcing!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The implementation of the transformer encoder is from &lt;a href=&#34;https://github.com/lucidrains/x-transformers&#34;&gt;x-transformers&lt;/a&gt; by &lt;a href=&#34;https://github.com/lucidrains?tab=repositories&#34;&gt;lucidrains&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{rombach2021highresolution,&#xA;      title={High-Resolution Image Synthesis with Latent Diffusion Models}, &#xA;      author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and BjÃ¶rn Ommer},&#xA;      year={2021},&#xA;      eprint={2112.10752},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>google-research/google-research</title>
    <updated>2023-03-05T01:54:18Z</updated>
    <id>tag:github.com,2023-03-05:/google-research/google-research</id>
    <link href="https://github.com/google-research/google-research" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Research&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Research&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains code released by &lt;a href=&#34;https://research.google&#34;&gt;Google Research&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All datasets in this repository are released under the CC BY 4.0 International license, which can be found here: &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;. All source files in this repository are released under the Apache 2.0 license, the text of which can be found in the LICENSE file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Because the repo is large, we recommend you download only the subdirectory of interest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SUBDIR=foo&#xA;svn export https://github.com/google-research/google-research/trunk/$SUBDIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to submit a pull request, you&#39;ll need to clone the repository; we recommend making a shallow clone (without history).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:google-research/google-research.git --depth=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer: This is not an official Google product.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>