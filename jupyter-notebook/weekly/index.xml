<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-05T01:55:00Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ashishpatel26/LLM-Finetuning</title>
    <updated>2023-11-05T01:55:00Z</updated>
    <id>tag:github.com,2023-11-05:/ashishpatel26/LLM-Finetuning</id>
    <link href="https://github.com/ashishpatel26/LLM-Finetuning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LLM Finetuning with peft&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLM-Finetuning&lt;/h1&gt; &#xA;&lt;h1&gt;PEFT Fine-Tuning Project üöÄ&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the PEFT (Pretraining-Evaluation Fine-Tuning) project repository! This project focuses on efficiently fine-tuning large language models using LoRA and Hugging Face&#39;s transformers library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://huggingface.co/datasets/trl-internal-testing/example-images/resolve/main/images/trl_overview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Fine Tuning Notebook Table üìë&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Notebook Title&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Colab Badge&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1. Efficiently Train Large Language Models with LoRA and Hugging Face&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Details and code for efficient training of large language models using LoRA and Hugging Face.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/1.Efficiently_train_Large_Language_Models_with_LoRA_and_Hugging_Face.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2. Fine-Tune Your Own Llama 2 Model in a Colab Notebook&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Guide to fine-tuning your Llama 2 model using Colab.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/2.Fine_Tune_Your_Own_Llama_2_Model_in_a_Colab_Notebook.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3. Guanaco Chatbot Demo with LLaMA-7B Model&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Showcase of a chatbot demo powered by LLaMA-7B model.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/3.Guanaco%20Chatbot%20Demo%20with%20LLaMA-7B%20Model.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;4. PEFT Finetune-Bloom-560m-tagger&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Project details for PEFT Finetune-Bloom-560m-tagger.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/4.PEFT%20Finetune-Bloom-560m-tagger.ipynb#scrollTo=MDqJWba-tpnv&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;5. Finetune_Meta_OPT-6-1b_Model_bnb_peft&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Details and guide for finetuning the Meta OPT-6-1b Model using PEFT and Bloom-560m-tagger.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/5.Finetune_Meta_OPT-6-1b_Model_bnb_peft.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;6.Finetune Falcon-7b with BNB Self Supervised Training&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Guide for finetuning Falcon-7b using BNB self-supervised training.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/6.Finetune%20Falcon-7b%20with%20BNB%20Self%20Supervised%20Training.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7.FineTune LLaMa2 with QLoRa&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Guide to fine-tune the Llama 2 7B pre-trained model using the PEFT library and QLoRa method&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/7.FineTune_LLAMA2_with_QLORA.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;8.Stable_Vicuna13B_8bit_in_Colab&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Guide of Fine Tuning Vecuna 13B_8bit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/8.Stable_Vicuna13B_8bit_in_Colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;9. GPT-Neo-X-20B-bnb2bit_training&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Guide How to train the GPT-NeoX-20B model using bfloat16 precision&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/9.GPT-neo-x-20B-bnb_4bit_training.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;10. MPT-Instruct-30B Model Training&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MPT-Instruct-30B is a large language model from MosaicML that is trained on a dataset of short-form instructions. It can be used to follow instructions, answer questions, and generate text.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/10.MPT_Instruct_30B.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;11.RLHF_Training_for_CustomDataset_for_AnyModel&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How train a Model with RLHF training on any LLM model with custom dataset&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/11_RLHF_Training_for_CustomDataset_for_AnyModel.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;12.Fine_tuning_Microsoft_Phi_1_5b_on_custom_dataset(dialogstudio)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How train a model with trl SFT Training on Microsoft Phi 1.5 with custom&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/12_Fine_tuning_Microsoft_Phi_1_5b_on_custom_dataset(dialogstudio).ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;13. Finetuning OpenAI GPT3.5 Turbo&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How to finetune GPT 3.5 on your own data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/13.Fine_tuning_OpenAI_GPT_3_5_turbo.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;14. Finetuning Mistral-7b FineTuning Model using Autotrain-advanced&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How to finetune Mistral-7b using autotrained-advanced&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/14.Finetuning_Mistral_7b_Using_AutoTrain.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;15. RAG LangChain Tutorial&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How to Use RAG using LangChain&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/ashishpatel26/LLM-Finetuning/blob/main/15.RAG_LangChain.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing ü§ù&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you&#39;d like to contribute to this project, feel free to open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License üìù&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/ashishpatel26/LLM-Finetuning/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Created with ‚ù§Ô∏è by &lt;a href=&#34;https://github.com/ashishpatel26/&#34;&gt;Ashish&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookresearch/llama-recipes</title>
    <updated>2023-11-05T01:55:00Z</updated>
    <id>tag:github.com,2023-11-05:/facebookresearch/llama-recipes</id>
    <link href="https://github.com/facebookresearch/llama-recipes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples and recipes for Llama 2 model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Llama 2 Fine-tuning / Inference Recipes, Examples and Demo Apps&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;[Update Oct. 20, 2023] We have just released a series of Llama 2 demo apps &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/demo_apps&#34;&gt;here&lt;/a&gt;. These apps show how to run Llama 2 locally and in the cloud to chat about data (PDF, DB, or live) and generate video summary.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &#39;llama-recipes&#39; repository is a companion to the &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;Llama 2 model&lt;/a&gt;. The goal of this repository is to provide examples to quickly get started with fine-tuning for domain adaptation and how to run inference for the fine-tuned models. For ease of use, the examples use Hugging Face converted versions of the models. See steps for conversion of the model &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#model-conversion-to-hugging-face&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition, we also provide a number of demo apps, to showcase the Llama2 usage along with other ecosystem solutions to run Llama2 locally on your mac and on cloud.&lt;/p&gt; &#xA;&lt;p&gt;Llama 2 is a new technology that carries potential risks with use. Testing conducted to date has not ‚Äî and could not ‚Äî cover all scenarios. In order to help developers address these risks, we have created the &lt;a href=&#34;https://github.com/facebookresearch/llama/raw/main/Responsible-Use-Guide.pdf&#34;&gt;Responsible Use Guide&lt;/a&gt;. More details can be found in our research paper as well. For downloading the models, follow the instructions on &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;Llama 2 repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#model-conversion-to-hugging-face&#34;&gt;Model Conversion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#fine-tuning&#34;&gt;Fine-tuning&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#single-gpu&#34;&gt;Single GPU&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#multiple-gpus-one-node&#34;&gt;Multi GPU One Node&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#multi-gpu-multi-node&#34;&gt;Multi GPU Multi Node&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/inference.md&#34;&gt;Inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#demo-apps&#34;&gt;Demo Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#repository-organization&#34;&gt;Repository Organization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/#license&#34;&gt;License and Acceptable Use Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/examples/quickstart.ipynb&#34;&gt;Llama 2 Jupyter Notebook&lt;/a&gt;: This jupyter notebook steps you through how to finetune a Llama 2 model on the text summarization task using the &lt;a href=&#34;https://huggingface.co/datasets/samsum&#34;&gt;samsum&lt;/a&gt;. The notebook uses parameter efficient finetuning (PEFT) and int8 quantization to finetune a 7B on a single GPU like an A10 with 24GB gpu memory.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Llama-recipes provides a pip distribution for easy install and usage in other projects. Alternatively, it can be installed from source.&lt;/p&gt; &#xA;&lt;h2&gt;Install with pip&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install --extra-index-url https://download.pytorch.org/whl/test/cu118 llama-recipes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install from source&lt;/h2&gt; &#xA;&lt;p&gt;To install from source e.g. for development use this command. We&#39;re using hatchling as our build backend which requires an up-to-date pip as well as setuptools package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -U pip setuptools&#xA;pip install --extra-index-url https://download.pytorch.org/whl/test/cu118 -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For development and contributing to llama-recipes please install all optional dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -U pip setuptools&#xA;pip install --extra-index-url https://download.pytorch.org/whl/test/cu118 -e .[tests,auditnlg,vllm]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install with optional dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Llama-recipes offers the installation of optional packages. There are three optional dependency groups. To run the unit tests we can install the required dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install --extra-index-url https://download.pytorch.org/whl/test/cu118 llama-recipes[tests]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the vLLM example we need additional requirements that can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install --extra-index-url https://download.pytorch.org/whl/test/cu118 llama-recipes[vllm]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the sensitive topics safety checker install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install --extra-index-url https://download.pytorch.org/whl/test/cu118 llama-recipes[auditnlg]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional dependencies can also be combines with [option1,option2].&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Note&lt;/strong&gt; ‚ö†Ô∏è Some features (especially fine-tuning with FSDP + PEFT) currently require PyTorch nightlies to be installed. Please make sure to install the nightlies if you&#39;re using these features following &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; All the setting defined in &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/configs/&#34;&gt;config files&lt;/a&gt; can be passed as args through CLI when running the script, there is no need to change from config files directly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; In case need to run PEFT model with FSDP, please make sure to use the PyTorch Nightlies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more in depth information checkout the following:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/single_gpu.md&#34;&gt;Single GPU Fine-tuning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/multi_gpu.md&#34;&gt;Multi-GPU Fine-tuning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/LLM_finetuning.md&#34;&gt;LLM Fine-tuning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/Dataset.md&#34;&gt;Adding custom datasets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/inference.md&#34;&gt;Inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/FAQ.md&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Where to find the models?&lt;/h1&gt; &#xA;&lt;p&gt;You can find llama v2 models on HuggingFace hub &lt;a href=&#34;https://huggingface.co/meta-llama&#34;&gt;here&lt;/a&gt;, where models with &lt;code&gt;hf&lt;/code&gt; in the name are already converted to HuggingFace checkpoints so no further conversion is needed. The conversion step below is only for original model weights from Meta that are hosted on HuggingFace model hub as well.&lt;/p&gt; &#xA;&lt;h1&gt;Model conversion to Hugging Face&lt;/h1&gt; &#xA;&lt;p&gt;The recipes and notebooks in this folder are using the Llama 2 model definition provided by Hugging Face&#39;s transformers library.&lt;/p&gt; &#xA;&lt;p&gt;Given that the original checkpoint resides under models/7B you can install all requirements and convert the checkpoint with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## Install HuggingFace Transformers from source&#xA;pip freeze | grep transformers ## verify it is version 4.31.0 or higher&#xA;&#xA;git clone git@github.com:huggingface/transformers.git&#xA;cd transformers&#xA;pip install protobuf&#xA;python src/transformers/models/llama/convert_llama_weights_to_hf.py \&#xA;   --input_dir /path/to/downloaded/llama/weights --model_size 7B --output_dir /output/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Fine-tuning&lt;/h1&gt; &#xA;&lt;p&gt;For fine-tuning Llama 2 models for your domain-specific use cases recipes for PEFT, FSDP, PEFT+FSDP have been included along with a few test datasets. For details see &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/LLM_finetuning.md&#34;&gt;LLM Fine-tuning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Single and Multi GPU Finetune&lt;/h2&gt; &#xA;&lt;p&gt;If you want to dive right into single or multi GPU fine-tuning, run the examples below on a single GPU like A10, T4, V100, A100 etc. All the parameters in the examples and recipes below need to be further tuned to have desired results based on the model, method, data and task at hand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To change the dataset in the commands below pass the &lt;code&gt;dataset&lt;/code&gt; arg. Current options for integrated dataset are &lt;code&gt;grammar_dataset&lt;/code&gt;, &lt;code&gt;alpaca_dataset&lt;/code&gt;and &lt;code&gt;samsum_dataset&lt;/code&gt;. Additionally, we integrate the OpenAssistant/oasst1 dataset as an &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/examples/custom_dataset.py&#34;&gt;example for a custom dataset&lt;/a&gt;. A description of how to use your own dataset and how to add custom datasets can be found in &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/Dataset.md#using-custom-datasets&#34;&gt;Dataset.md&lt;/a&gt;. For &lt;code&gt;grammar_dataset&lt;/code&gt;, &lt;code&gt;alpaca_dataset&lt;/code&gt; please make sure you use the suggested instructions from &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/single_gpu.md#how-to-run-with-different-datasets&#34;&gt;here&lt;/a&gt; to set them up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Default dataset and other LORA config has been set to &lt;code&gt;samsum_dataset&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure to set the right path to the model in the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/configs/training.py&#34;&gt;training config&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Single GPU:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#if running on multi-gpu machine&#xA;export CUDA_VISIBLE_DEVICES=0&#xA;&#xA;python -m llama_recipes.finetuning  --use_peft --peft_method lora --quantization --model_name /patht_of_model_folder/7B --output_dir Path/to/save/PEFT/model&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we make use of Parameter Efficient Methods (PEFT) as described in the next section. To run the command above make sure to pass the &lt;code&gt;peft_method&lt;/code&gt; arg which can be set to &lt;code&gt;lora&lt;/code&gt;, &lt;code&gt;llama_adapter&lt;/code&gt; or &lt;code&gt;prefix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; if you are running on a machine with multiple GPUs please make sure to only make one of them visible using &lt;code&gt;export CUDA_VISIBLE_DEVICES=GPU:id&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make sure you set &lt;code&gt;save_model&lt;/code&gt; parameter to save the model. Be sure to check the other training parameter in &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/configs/training.py&#34;&gt;train config&lt;/a&gt; as well as others in the config folder as needed. All parameter can be passed as args to the training script. No need to alter the config files.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multiple GPUs One Node:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; please make sure to use PyTorch Nightlies for using PEFT+FSDP. Also, note that int8 quantization from bit&amp;amp;bytes currently is not supported in FSDP.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;torchrun --nnodes 1 --nproc_per_node 4  examples/finetuning.py --enable_fsdp --use_peft --peft_method lora --model_name /patht_of_model_folder/7B --fsdp_config.pure_bf16 --output_dir Path/to/save/PEFT/model&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we use FSDP as discussed in the next section which can be used along with PEFT methods. To make use of PEFT methods with FSDP make sure to pass &lt;code&gt;use_peft&lt;/code&gt; and &lt;code&gt;peft_method&lt;/code&gt; args along with &lt;code&gt;enable_fsdp&lt;/code&gt;. Here we are using &lt;code&gt;BF16&lt;/code&gt; for training.&lt;/p&gt; &#xA;&lt;h2&gt;Flash Attention and Xformer Memory Efficient Kernels&lt;/h2&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;use_fast_kernels&lt;/code&gt; will enable using of Flash Attention or Xformer memory-efficient kernels based on the hardware being used. This would speed up the fine-tuning job. This has been enabled in &lt;code&gt;optimum&lt;/code&gt; library from HuggingFace as a one-liner API, please read more &lt;a href=&#34;https://pytorch.org/blog/out-of-the-box-acceleration/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nnodes 1 --nproc_per_node 4  examples/finetuning.py --enable_fsdp --use_peft --peft_method lora --model_name /patht_of_model_folder/7B --fsdp_config.pure_bf16 --output_dir Path/to/save/PEFT/model --use_fast_kernels&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fine-tuning using FSDP Only&lt;/h3&gt; &#xA;&lt;p&gt;If you are interested in running full parameter fine-tuning without making use of PEFT methods, please use the following command. Make sure to change the &lt;code&gt;nproc_per_node&lt;/code&gt; to your available GPUs. This has been tested with &lt;code&gt;BF16&lt;/code&gt; on 8xA100, 40GB GPUs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;torchrun --nnodes 1 --nproc_per_node 8  examples/finetuning.py --enable_fsdp --model_name /patht_of_model_folder/7B --dist_checkpoint_root_folder model_checkpoints --dist_checkpoint_folder fine-tuned --use_fast_kernels&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fine-tuning using FSDP on 70B Model&lt;/h3&gt; &#xA;&lt;p&gt;If you are interested in running full parameter fine-tuning on the 70B model, you can enable &lt;code&gt;low_cpu_fsdp&lt;/code&gt; mode as the following command. This option will load model on rank0 only before moving model to devices to construct FSDP. This can dramatically save cpu memory when loading large models like 70B (on a 8-gpu node, this reduces cpu memory from 2+T to 280G for 70B model). This has been tested with &lt;code&gt;BF16&lt;/code&gt; on 16xA100, 80GB GPUs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;torchrun --nnodes 1 --nproc_per_node 8 examples/finetuning.py --enable_fsdp --low_cpu_fsdp --fsdp_config.pure_bf16 --model_name /patht_of_model_folder/70B --batch_size_training 1 --dist_checkpoint_root_folder model_checkpoints --dist_checkpoint_folder fine-tuned&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multi GPU Multi Node:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;sbatch multi_node.slurm&#xA;# Change the num nodes and GPU per nodes in the script before running.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about our fine-tuning strategies &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/LLM_finetuning.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Demo Apps&lt;/h1&gt; &#xA;&lt;p&gt;This folder contains a series of Llama2-powered apps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quickstart Llama deployments and basic interactions with Llama&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Llama on your Mac and ask Llama general questions&lt;/li&gt; &#xA;   &lt;li&gt;Llama on Google Colab&lt;/li&gt; &#xA;   &lt;li&gt;Llama on Cloud and ask Llama questions about unstructured data in a PDF&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specialized Llama use cases:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Ask Llama to summarize a video content&lt;/li&gt; &#xA;   &lt;li&gt;Ask Llama questions about structured data in a DB&lt;/li&gt; &#xA;   &lt;li&gt;Ask Llama questions about live data on the web&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Repository Organization&lt;/h1&gt; &#xA;&lt;p&gt;This repository is organized in the following way:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/configs/&#34;&gt;configs&lt;/a&gt;: Contains the configuration files for PEFT methods, FSDP, Datasets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/docs/&#34;&gt;docs&lt;/a&gt;: Example recipes for single and multi-gpu fine-tuning recipes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/datasets/&#34;&gt;datasets&lt;/a&gt;: Contains individual scripts for each dataset to download and process. Note: Use of any of the datasets should be in compliance with the dataset&#39;s underlying licenses (including but not limited to non-commercial uses)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/demo_apps&#34;&gt;demo_apps&lt;/a&gt; contains a series of Llama2-powered apps, from quickstart deployments to how to ask Llama questions about unstructured data, structured data, live data, and video summary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/examples/&#34;&gt;examples&lt;/a&gt;: Contains examples script for finetuning and inference of the Llama 2 model as well as how to use them safely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/inference/&#34;&gt;inference&lt;/a&gt;: Includes modules for inference for the fine-tuned models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/model_checkpointing/&#34;&gt;model_checkpointing&lt;/a&gt;: Contains FSDP checkpoint handlers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/policies/&#34;&gt;policies&lt;/a&gt;: Contains FSDP scripts to provide different policies, such as mixed precision, transformer wrapping policy and activation checkpointing along with any precision optimizer (used for running FSDP with pure bf16 mode).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/src/llama_recipes/utils/&#34;&gt;utils&lt;/a&gt;: Utility files for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;train_utils.py&lt;/code&gt; provides training/eval loop and more train utils.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dataset_utils.py&lt;/code&gt; to get preprocessed datasets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;config_utils.py&lt;/code&gt; to override the configs received from CLI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fsdp_utils.py&lt;/code&gt; provides FSDP wrapping policy for PEFT methods.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;memory_utils.py&lt;/code&gt; context manager to track different memory stats in train loop.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;See the License file &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/LICENSE&#34;&gt;here&lt;/a&gt; and Acceptable Use Policy &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/llama-recipes/main/USE_POLICY.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>campusx-official/100-days-of-machine-learning</title>
    <updated>2023-11-05T01:55:00Z</updated>
    <id>tag:github.com,2023-11-05:/campusx-official/100-days-of-machine-learning</id>
    <link href="https://github.com/campusx-official/100-days-of-machine-learning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>