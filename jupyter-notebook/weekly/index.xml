<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:58:05Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>probml/pyprobml</title>
    <updated>2023-08-27T01:58:05Z</updated>
    <id>tag:github.com,2023-08-27:/probml/pyprobml</id>
    <link href="https://github.com/probml/pyprobml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python code for &#34;Probabilistic Machine learning&#34; book by Kevin Murphy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pyprobml&lt;/h1&gt; &#xA;&lt;img src=&#34;https://img.shields.io/github/stars/probml/pyprobml?style=social&#34;&gt; &#xA;&lt;p&gt;Python 3 code to reproduce the figures in the books &lt;a href=&#34;https://probml.github.io/pml-book/book1.html&#34;&gt;Probabilistic Machine Learning: An Introduction&lt;/a&gt; (aka &#34;book 1&#34;) and &lt;a href=&#34;https://probml.github.io/pml-book/book2.html&#34;&gt;Probabilistic Machine Learning: Advanced Topics&lt;/a&gt; (aka &#34;book 2&#34;). The code uses the standard Python libraries, such as numpy, scipy, matplotlib, sklearn, etc. Some of the code (especially in book 2) also uses &lt;a href=&#34;https://github.com/google/jax&#34;&gt;JAX&lt;/a&gt;, and in some parts of book 1, we also use &lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;Tensorflow 2&lt;/a&gt; and a little bit of &lt;a href=&#34;https://github.com/pytorch&#34;&gt;Torch&lt;/a&gt;. See also &lt;a href=&#34;https://github.com/probml/probml-utils&#34;&gt;probml-utils&lt;/a&gt; for some utility code that is shared across multiple notebooks.&lt;/p&gt; &#xA;&lt;p&gt;For the latest status of the code, see &lt;a href=&#34;https://github.com/probml/pyprobml/raw/workflow_testing_indicator/dashboard_figures_book1.md&#34;&gt;Book 1 dashboard&lt;/a&gt; and &lt;a href=&#34;https://github.com/probml/pyprobml/raw/workflow_testing_indicator/dashboard_figures_book2.md&#34;&gt;Book 2 dashboard&lt;/a&gt;. As of September 2022, this code is now in maintenance mode.&lt;/p&gt; &#xA;&lt;h2&gt;Running the notebooks&lt;/h2&gt; &#xA;&lt;p&gt;The notebooks needed to make all the figures are available at the following locations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://probml.github.io/notebooks&#34;&gt;All notebooks (sorted by filename)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/probml/pyprobml/tree/master/notebooks/book1&#34;&gt;Book 1 notebooks (sorted by chaper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/probml/pyprobml/tree/master/notebooks/book2&#34;&gt;Book 2 notebooks (sorted by chapter)&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running notebooks in colab&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/notebooks/intro.ipynb&#34;&gt;Colab&lt;/a&gt; has most of the libraries you will need (e.g., scikit-learn, JAX) pre-installed, and gives you access to a free GPU and TPU. We have a created a &lt;a href=&#34;https://colab.research.google.com/github/probml/pyprobml/blob/master/notebooks/tutorials/colab_intro.ipynb&#34;&gt;colab intro&lt;/a&gt; notebook with more details. To run the notebooks on colab in any browser, you can go to a particular notebook on GitHub and change the domain from &lt;code&gt;github.com&lt;/code&gt; to &lt;code&gt;githubtocolab.com&lt;/code&gt; as suggested &lt;a href=&#34;https://stackoverflow.com/a/67344477/13330701&#34;&gt;here&lt;/a&gt;. If you are using Google Chrome browser, you can use &lt;a href=&#34;https://chrome.google.com/webstore/detail/open-in-colab/iogfkhleblhcpcekbiedikdehleodpjo&#34;&gt;&#34;Open in Colab&#34; Chrome extension&lt;/a&gt; to do the same with a single click.&lt;/p&gt; &#xA;&lt;h2&gt;Running the notebooks locally&lt;/h2&gt; &#xA;&lt;p&gt;We assume you have already installed &lt;a href=&#34;https://github.com/google/jax#installation&#34;&gt;JAX&lt;/a&gt; and &lt;a href=&#34;https://www.tensorflow.org/install&#34;&gt;Tensorflow&lt;/a&gt; and &lt;a href=&#34;https://pytorch.org/&#34;&gt;Torch&lt;/a&gt;, since the details on how to do this depend on whether you have a CPU, GPU, etc.&lt;/p&gt; &#xA;&lt;p&gt;You can use any of the following options to install the other requirements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r https://raw.githubusercontent.com/probml/pyprobml/master/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option 2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/probml/pyprobml/raw/master/requirements.txt&#34;&gt;requirements.txt&lt;/a&gt; locally to your path and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 https://github.com/probml/pyprobml.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install manually.&lt;/p&gt; &#xA;&lt;h2&gt;GCP, TPUs, and all that&lt;/h2&gt; &#xA;&lt;p&gt;When you want more power or control than colab gives you, you should get a Google Cloud Platform (GCP) account (or you can use some other cloud provider, like Paperspace) to get a virtual machine with GPUs or TPUs. You can then use this as a virtual desktop which you can access via ssh from inside VScode. We have created &lt;a href=&#34;https://github.com/probml/pyprobml/raw/master/notebooks/tutorials/colab_gcp_tpu_tutorial.md&#34;&gt;a short tutorial on Colab, GCP and TPUs&lt;/a&gt; with more information.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/probml/pyprobml/raw/master/CONTRIBUTING.md&#34;&gt;this guide&lt;/a&gt; for how to contribute code. Please follow &lt;a href=&#34;https://github.com/probml/pyprobml/raw/master/notebooks/README.md&#34;&gt;these guidelines&lt;/a&gt; to contribute new notebooks to the notebooks directory.&lt;/p&gt; &#xA;&lt;h2&gt;Metrics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/probml/pyprobml&#34;&gt;&lt;img src=&#34;https://starchart.cc/probml/pyprobml.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GSOC&lt;/h2&gt; &#xA;&lt;p&gt;For a summary of some of the contributions to this codebase during Google Summer of Code (GSOC), see these links: &lt;a href=&#34;https://probml.github.io/pml-book/gsoc/gsoc2021.html&#34;&gt;2021&lt;/a&gt; and &lt;a href=&#34;https://probml.github.io/pml-book/gsoc/gsoc2022.html&#34;&gt;2022&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;acknowledgements&#34;&gt;&lt;/a&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;For a list of contributors, see &lt;a href=&#34;https://github.com/probml/pyprobml/graphs/contributors&#34;&gt;this list&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookresearch/segment-anything</title>
    <updated>2023-08-27T01:58:05Z</updated>
    <id>tag:github.com,2023-08-27:/facebookresearch/segment-anything</id>
    <link href="https://github.com/facebookresearch/segment-anything" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The repository provides code for running inference with the SegmentAnything Model (SAM), links for downloading the trained model checkpoints, and example notebooks that show how to use the model.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Segment Anything&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ai.facebook.com/research/&#34;&gt;Meta AI Research, FAIR&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://alexander-kirillov.github.io/&#34;&gt;Alexander Kirillov&lt;/a&gt;, &lt;a href=&#34;https://ericmintun.github.io/&#34;&gt;Eric Mintun&lt;/a&gt;, &lt;a href=&#34;https://nikhilaravi.com/&#34;&gt;Nikhila Ravi&lt;/a&gt;, &lt;a href=&#34;https://hanzimao.me/&#34;&gt;Hanzi Mao&lt;/a&gt;, Chloe Rolland, Laura Gustafson, &lt;a href=&#34;https://tetexiao.com&#34;&gt;Tete Xiao&lt;/a&gt;, &lt;a href=&#34;https://www.spencerwhitehead.com/&#34;&gt;Spencer Whitehead&lt;/a&gt;, Alex Berg, Wan-Yen Lo, &lt;a href=&#34;https://pdollar.github.io/&#34;&gt;Piotr Dollar&lt;/a&gt;, &lt;a href=&#34;https://www.rossgirshick.info/&#34;&gt;Ross Girshick&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://ai.facebook.com/research/publications/segment-anything/&#34;&gt;&lt;code&gt;Paper&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://segment-anything.com/&#34;&gt;&lt;code&gt;Project&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://segment-anything.com/demo&#34;&gt;&lt;code&gt;Demo&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://segment-anything.com/dataset/index.html&#34;&gt;&lt;code&gt;Dataset&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://ai.facebook.com/blog/segment-anything-foundation-model-image-segmentation/&#34;&gt;&lt;code&gt;Blog&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/#citing-segment-anything&#34;&gt;&lt;code&gt;BibTeX&lt;/code&gt;&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/model_diagram.png?raw=true&#34; alt=&#34;SAM design&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Segment Anything Model (SAM)&lt;/strong&gt; produces high quality object masks from input prompts such as points or boxes, and it can be used to generate masks for all objects in an image. It has been trained on a &lt;a href=&#34;https://segment-anything.com/dataset/index.html&#34;&gt;dataset&lt;/a&gt; of 11 million images and 1.1 billion masks, and has strong zero-shot performance on a variety of segmentation tasks.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/masks1.png?raw=true&#34; width=&#34;37.25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/masks2.jpg?raw=true&#34; width=&#34;61.5%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The code requires &lt;code&gt;python&amp;gt;=3.8&lt;/code&gt;, as well as &lt;code&gt;pytorch&amp;gt;=1.7&lt;/code&gt; and &lt;code&gt;torchvision&amp;gt;=0.8&lt;/code&gt;. Please follow the instructions &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;here&lt;/a&gt; to install both PyTorch and TorchVision dependencies. Installing both PyTorch and TorchVision with CUDA support is strongly recommended.&lt;/p&gt; &#xA;&lt;p&gt;Install Segment Anything:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/facebookresearch/segment-anything.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or clone the repository locally and install with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:facebookresearch/segment-anything.git&#xA;cd segment-anything; pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following optional dependencies are necessary for mask post-processing, saving masks in COCO format, the example notebooks, and exporting the model in ONNX format. &lt;code&gt;jupyter&lt;/code&gt; is also required to run the example notebooks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install opencv-python pycocotools matplotlib onnxruntime onnx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;GettingStarted&#34;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;First download a &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/#model-checkpoints&#34;&gt;model checkpoint&lt;/a&gt;. Then the model can be used in just a few lines to get masks from a given prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from segment_anything import SamPredictor, sam_model_registry&#xA;sam = sam_model_registry[&#34;&amp;lt;model_type&amp;gt;&#34;](checkpoint=&#34;&amp;lt;path/to/checkpoint&amp;gt;&#34;)&#xA;predictor = SamPredictor(sam)&#xA;predictor.set_image(&amp;lt;your_image&amp;gt;)&#xA;masks, _, _ = predictor.predict(&amp;lt;input_prompts&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or generate masks for an entire image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from segment_anything import SamAutomaticMaskGenerator, sam_model_registry&#xA;sam = sam_model_registry[&#34;&amp;lt;model_type&amp;gt;&#34;](checkpoint=&#34;&amp;lt;path/to/checkpoint&amp;gt;&#34;)&#xA;mask_generator = SamAutomaticMaskGenerator(sam)&#xA;masks = mask_generator.generate(&amp;lt;your_image&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, masks can be generated for images from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/amg.py --checkpoint &amp;lt;path/to/checkpoint&amp;gt; --model-type &amp;lt;model_type&amp;gt; --input &amp;lt;image_or_folder&amp;gt; --output &amp;lt;path/to/output&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the examples notebooks on &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/predictor_example.ipynb&#34;&gt;using SAM with prompts&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/automatic_mask_generator_example.ipynb&#34;&gt;automatically generating masks&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/notebook1.png?raw=true&#34; width=&#34;49.1%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/notebook2.png?raw=true&#34; width=&#34;48.9%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;ONNX Export&lt;/h2&gt; &#xA;&lt;p&gt;SAM&#39;s lightweight mask decoder can be exported to ONNX format so that it can be run in any environment that supports ONNX runtime, such as in-browser as showcased in the &lt;a href=&#34;https://segment-anything.com/demo&#34;&gt;demo&lt;/a&gt;. Export the model with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/export_onnx_model.py --checkpoint &amp;lt;path/to/checkpoint&amp;gt; --model-type &amp;lt;model_type&amp;gt; --output &amp;lt;path/to/output&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/facebookresearch/segment-anything/raw/main/notebooks/onnx_model_example.ipynb&#34;&gt;example notebook&lt;/a&gt; for details on how to combine image preprocessing via SAM&#39;s backbone with mask prediction using the ONNX model. It is recommended to use the latest stable version of PyTorch for ONNX export.&lt;/p&gt; &#xA;&lt;h3&gt;Web demo&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;demo/&lt;/code&gt; folder has a simple one page React app which shows how to run mask prediction with the exported ONNX model in a web browser with multithreading. Please see &lt;a href=&#34;https://github.com/facebookresearch/segment-anything/raw/main/demo/README.md&#34;&gt;&lt;code&gt;demo/README.md&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;Models&#34;&gt;&lt;/a&gt;Model Checkpoints&lt;/h2&gt; &#xA;&lt;p&gt;Three model versions of the model are available with different backbone sizes. These models can be instantiated by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from segment_anything import sam_model_registry&#xA;sam = sam_model_registry[&#34;&amp;lt;model_type&amp;gt;&#34;](checkpoint=&#34;&amp;lt;path/to/checkpoint&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Click the links below to download the checkpoint for the corresponding model type.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;default&lt;/code&gt; or &lt;code&gt;vit_h&lt;/code&gt;: &lt;a href=&#34;https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth&#34;&gt;ViT-H SAM model.&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vit_l&lt;/code&gt;: &lt;a href=&#34;https://dl.fbaipublicfiles.com/segment_anything/sam_vit_l_0b3195.pth&#34;&gt;ViT-L SAM model.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vit_b&lt;/code&gt;: &lt;a href=&#34;https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth&#34;&gt;ViT-B SAM model.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dataset&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ai.facebook.com/datasets/segment-anything/&#34;&gt;here&lt;/a&gt; for an overview of the datastet. The dataset can be downloaded &lt;a href=&#34;https://ai.facebook.com/datasets/segment-anything-downloads/&#34;&gt;here&lt;/a&gt;. By downloading the datasets you agree that you have read and accepted the terms of the SA-1B Dataset Research License.&lt;/p&gt; &#xA;&lt;p&gt;We save masks per image as a json file. It can be loaded as a dictionary in python in the below format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#xA;    &#34;image&#34;                 : image_info,&#xA;    &#34;annotations&#34;           : [annotation],&#xA;}&#xA;&#xA;image_info {&#xA;    &#34;image_id&#34;              : int,              # Image id&#xA;    &#34;width&#34;                 : int,              # Image width&#xA;    &#34;height&#34;                : int,              # Image height&#xA;    &#34;file_name&#34;             : str,              # Image filename&#xA;}&#xA;&#xA;annotation {&#xA;    &#34;id&#34;                    : int,              # Annotation id&#xA;    &#34;segmentation&#34;          : dict,             # Mask saved in COCO RLE format.&#xA;    &#34;bbox&#34;                  : [x, y, w, h],     # The box around the mask, in XYWH format&#xA;    &#34;area&#34;                  : int,              # The area in pixels of the mask&#xA;    &#34;predicted_iou&#34;         : float,            # The model&#39;s own prediction of the mask&#39;s quality&#xA;    &#34;stability_score&#34;       : float,            # A measure of the mask&#39;s quality&#xA;    &#34;crop_box&#34;              : [x, y, w, h],     # The crop of the image used to generate the mask, in XYWH format&#xA;    &#34;point_coords&#34;          : [[x, y]],         # The point coordinates input to the model to generate the mask&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Image ids can be found in sa_images_ids.txt which can be downloaded using the above &lt;a href=&#34;https://ai.facebook.com/datasets/segment-anything-downloads/&#34;&gt;link&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;To decode a mask in COCO RLE format into binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from pycocotools import mask as mask_utils&#xA;mask = mask_utils.decode(annotation[&#34;segmentation&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/cocodataset/cocoapi/raw/master/PythonAPI/pycocotools/mask.py&#34;&gt;here&lt;/a&gt; for more instructions to manipulate masks stored in RLE format.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The model is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/segment-anything/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;The Segment Anything project was made possible with the help of many contributors (alphabetical):&lt;/p&gt; &#xA;&lt;p&gt;Aaron Adcock, Vaibhav Aggarwal, Morteza Behrooz, Cheng-Yang Fu, Ashley Gabriel, Ahuva Goldstand, Allen Goodman, Sumanth Gurram, Jiabo Hu, Somya Jain, Devansh Kukreja, Robert Kuo, Joshua Lane, Yanghao Li, Lilian Luong, Jitendra Malik, Mallika Malhotra, William Ngan, Omkar Parkhi, Nikhil Raina, Dirk Rowe, Neil Sejoor, Vanessa Stark, Bala Varadarajan, Bram Wasti, Zachary Winstrom&lt;/p&gt; &#xA;&lt;h2&gt;Citing Segment Anything&lt;/h2&gt; &#xA;&lt;p&gt;If you use SAM or SA-1B in your research, please use the following BibTeX entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{kirillov2023segany,&#xA;  title={Segment Anything},&#xA;  author={Kirillov, Alexander and Mintun, Eric and Ravi, Nikhila and Mao, Hanzi and Rolland, Chloe and Gustafson, Laura and Xiao, Tete and Whitehead, Spencer and Berg, Alexander C. and Lo, Wan-Yen and Doll{\&#39;a}r, Piotr and Girshick, Ross},&#xA;  journal={arXiv:2304.02643},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>langchain-ai/langsmith-cookbook</title>
    <updated>2023-08-27T01:58:05Z</updated>
    <id>tag:github.com,2023-08-27:/langchain-ai/langsmith-cookbook</id>
    <link href="https://github.com/langchain-ai/langsmith-cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LangSmith Cookbook&lt;/h1&gt; &#xA;&lt;p&gt;This repository stores code tutorials showing different ways to get more out of &lt;a href=&#34;https://smith.langchain.com/&#34;&gt;LangSmith&lt;/a&gt;. LangSmith is a platform that helps you debug, test, evaluate, and monitor your LLM applications.&lt;/p&gt; &#xA;&lt;p&gt;These cookbook recipes are meant to complement the &lt;a href=&#34;https://docs.smith.langchain.com/&#34;&gt;LangSmith Documentation&lt;/a&gt; by showing common use cases and tactics within &#34;end-to-end&#34; examples, which you can take and adapt to your needs.&lt;/p&gt; &#xA;&lt;p&gt;If you have any specific requests or common patterns you&#39;d like to see highlighted, create a GitHub issue or let one of the core LangChain devs know. We also welcome contributions!&lt;/p&gt; &#xA;&lt;h2&gt;Using Feedback&lt;/h2&gt; &#xA;&lt;p&gt;The following walkthroughs show ways to capture and use &lt;a href=&#34;https://docs.smith.langchain.com/evaluation/capturing-feedback&#34;&gt;feedback&lt;/a&gt; on runs using LangSmith. This is useful for anything from app monitoring, to personalization, to evaluation and finetuning.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/feedback-examples/streamlit/README.md&#34;&gt;Streamlit Chat App&lt;/a&gt; contains a minimal example of a Chat application that captures user feedback and shares traces of the chat application. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/feedback-examples/streamlit/vanilla_chain.py&#34;&gt;vanilla_chain.py&lt;/a&gt; contains an LLMChain that powers the chat application.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/feedback-examples/streamlit/expression_chain.py&#34;&gt;expression_chain.py&lt;/a&gt; contains an equivalent chat chain defined exclusively with &lt;a href=&#34;https://python.langchain.com/docs/guides/expression_language/&#34;&gt;LangChain expressions&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/feedback-examples/nextjs/README.md&#34;&gt;Next.js Chat App&lt;/a&gt; contains a TypeScript tracing and user feedback example. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can &lt;a href=&#34;https://langsmith-cookbook.vercel.app/&#34;&gt;check out a deployed demo version here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing &amp;amp; Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;The following walkthroughs demonstrate ways to evaluate common application scenarios.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/testing-examples/qa-correctness/qa-correctness.ipynb&#34;&gt;Q&amp;amp;A System Correctness&lt;/a&gt; notebook walks through creating a dataset for a retrieval-augmented Q&amp;amp;A pipeline, evaluating the responses for correctness, and using LangSmith to iterate and improve.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/testing-examples/dynamic-data/testing_dynamic_data.ipynb&#34;&gt;Evaluating Q&amp;amp;A Systems with Dynamic Data&lt;/a&gt; notebook shows how to evaluate a Q&amp;amp;A pipeline when the underlying data may change over time by using an evaluator that dereferences a label at evaluation time.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/testing-examples/comparing-runs/comparing-qa.ipynb&#34;&gt;Comparison Evals&lt;/a&gt; notebook shows how to use labeled preference scoring to help compare two versions of a system and choose the preferred outputs.&lt;/li&gt; &#xA; &lt;li&gt;For examples using LangSmith in your testing framework, such as with pytest, you can reference the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/testing-examples/pytest/&#34;&gt;LangSmith in Pytest&lt;/a&gt; recipe shows how to directly evaluate your chain or LLM on a dataset and then define your own pass/fail criteria.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/testing-examples/pytest-ut/&#34;&gt;Unit Testing with Pytest&lt;/a&gt; recipe shows how to write individual unit tests so that feedback and traces are all organized by test suite.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tracing your code&lt;/h2&gt; &#xA;&lt;p&gt;Setting up tracing in LangChain is as simple as setting a couple environment variables. We&#39;ve also added support through the LangSmith SDK to trace applications that don&#39;t rely on LangChain. The following walkthroughs address common questions around tracing your code!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/tracing-examples/traceable/tracing_without_langchain.ipynb&#34;&gt;Tracing without LangChain&lt;/a&gt; notebook uses the Python SDK&#39;s &lt;code&gt;@traceable&lt;/code&gt; decorator to trace and tag run in an app that does not use depend on LangChain.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langsmith-cookbook/main/tracing-examples/rest/rest.ipynb&#34;&gt;REST API&lt;/a&gt; notebook walks through logging runs to LangSmith directly using the REST API, covering how to log LLM and chat model runs for token counting, and how to nest runs. The run logging spec can be found in the &lt;a href=&#34;https://github.com/langchain-ai/langsmith-sdk/raw/main/openapi/openapi.yaml&#34;&gt;LangSmith SDK repository&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>