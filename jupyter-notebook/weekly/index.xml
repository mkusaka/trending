<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-08T01:54:59Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/autogen</title>
    <updated>2023-10-08T01:54:59Z</updated>
    <id>tag:github.com,2023-10-08:/microsoft/autogen</id>
    <link href="https://github.com/microsoft/autogen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enable Next-Gen Large Language Model Applications. Join our Discord: https://discord.gg/pAbnFJrkgZ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/pyautogen&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/pyautogen.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/autogen/actions/workflows/python-package.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/autogen/actions/workflows/python-package.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/3.8%20%7C%203.9%20%7C%203.10%20%7C%203.11-blue&#34; alt=&#34;Python Version&#34;&gt; &lt;a href=&#34;https://discord.gg/pAbnFJrkgZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1153072414184452236?logo=discord&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is a spinoff from &lt;a href=&#34;https://github.com/microsoft/FLAML&#34;&gt;FLAML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;AutoGen&lt;/h1&gt; &#xA;&lt;!-- &lt;p align=&#34;center&#34;&gt;&#xA;    &lt;img src=&#34;https://github.com/microsoft/autogen/blob/main/website/static/img/flaml.svg&#34;  width=200&gt;&#xA;    &lt;br&gt;&#xA;&lt;/p&gt; --&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; autogen has graduated from &lt;a href=&#34;https://github.com/microsoft/FLAML&#34;&gt;FLAML&lt;/a&gt; into a new project.&lt;/p&gt; &#xA;&lt;!-- &lt;span&gt;ðŸ”¥&lt;/span&gt; Heads-up: We&#39;re preparing to migrate [autogen](https://microsoft.github.io/FLAML/docs/Use-Cases/Autogen) into a dedicated Github repository. Alongside this move, we&#39;ll also launch a dedicated Discord server and a website for comprehensive documentation.&#xA;&#xA;&lt;span&gt;ðŸ”¥&lt;/span&gt; FLAML is highlighted in OpenAI&#39;s [cookbook](https://github.com/openai/openai-cookbook#related-resources-from-around-the-web).&#xA;&#xA;&lt;span&gt;ðŸ”¥&lt;/span&gt; [autogen](https://microsoft.github.io/autogen/) is released with support for ChatGPT and GPT-4, based on [Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference](https://arxiv.org/abs/2303.04673).&#xA;&#xA;&lt;span&gt;ðŸ”¥&lt;/span&gt; FLAML supports Code-First AutoML &amp; Tuning â€“ Private Preview in [Microsoft Fabric Data Science](https://learn.microsoft.com/en-us/fabric/data-science/). --&gt; &#xA;&lt;h2&gt;What is AutoGen&lt;/h2&gt; &#xA;&lt;p&gt;AutoGen is a framework that enables the development of LLM applications using multiple agents that can converse with each other to solve tasks. AutoGen agents are customizable, conversable, and seamlessly allow human participation. They can operate in various modes that employ combinations of LLMs, human inputs, and tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/autogen/raw/main/website/static/img/autogen_agentchat.png&#34; alt=&#34;AutoGen Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AutoGen enables building next-gen LLM applications based on &lt;strong&gt;multi-agent conversations&lt;/strong&gt; with minimal effort. It simplifies the orchestration, automation, and optimization of a complex LLM workflow. It maximizes the performance of LLM models and overcomes their weaknesses.&lt;/li&gt; &#xA; &lt;li&gt;It supports &lt;strong&gt;diverse conversation patterns&lt;/strong&gt; for complex workflows. With customizable and conversable agents, developers can use AutoGen to build a wide range of conversation patterns concerning conversation autonomy, the number of agents, and agent conversation topology.&lt;/li&gt; &#xA; &lt;li&gt;It provides a collection of working systems with different complexities. These systems span a &lt;strong&gt;wide range of applications&lt;/strong&gt; from various domains and complexities. This demonstrates how AutoGen can easily support diverse conversation patterns.&lt;/li&gt; &#xA; &lt;li&gt;AutoGen provides a drop-in replacement of &lt;code&gt;openai.Completion&lt;/code&gt; or &lt;code&gt;openai.ChatCompletion&lt;/code&gt; as an &lt;strong&gt;enhanced inference API&lt;/strong&gt;. It allows easy performance tuning, utilities like API unification and caching, and advanced usage patterns, such as error handling, multi-config inference, context programming, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AutoGen is powered by collaborative &lt;a href=&#34;https://microsoft.github.io/autogen/docs/Research&#34;&gt;research studies&lt;/a&gt; from Microsoft, Penn State University, and the University of Washington.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;AutoGen requires &lt;strong&gt;Python version &amp;gt;= 3.8&lt;/strong&gt;. It can be installed from pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pyautogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Minimal dependencies are installed without extra options. You can install extra options based on the feature you need.&lt;/p&gt; &#xA;&lt;!-- For example, use the following to install the dependencies needed by the [`blendsearch`](https://microsoft.github.io/FLAML/docs/Use-Cases/Tune-User-Defined-Function#blendsearch-economical-hyperparameter-optimization-with-blended-search-strategy) option.&#xA;```bash&#xA;pip install &#34;pyautogen[blendsearch]&#34;&#xA;``` --&gt; &#xA;&lt;p&gt;Find more options in &lt;a href=&#34;https://microsoft.github.io/autogen/docs/Installation&#34;&gt;Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- Each of the [`notebook examples`](https://github.com/microsoft/autogen/tree/main/notebook) may require a specific option to be installed. --&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://microsoft.github.io/autogen/docs/FAQ/#code-execution&#34;&gt;code execution&lt;/a&gt;, we strongly recommend installing the python docker package, and using docker.&lt;/p&gt; &#xA;&lt;p&gt;For LLM inference configurations, check the &lt;a href=&#34;https://microsoft.github.io/autogen/docs/FAQ#set-your-api-endpoints&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h2&gt;Multi-Agent Conversation Framework&lt;/h2&gt; &#xA;&lt;p&gt;Autogen enables the next-gen LLM applications with a generic multi-agent conversation framework. It offers customizable and conversable agents that integrate LLMs, tools, and humans. By automating chat among multiple capable agents, one can easily make them collectively perform tasks autonomously or with human feedback, including tasks that require using tools via code.&lt;/p&gt; &#xA;&lt;p&gt;Features of this use case include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-agent conversations&lt;/strong&gt;: AutoGen agents can communicate with each other to solve tasks. This allows for more complex and sophisticated applications than would be possible with a single LLM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt;: AutoGen agents can be customized to meet the specific needs of an application. This includes the ability to choose the LLMs to use, the types of human input to allow, and the tools to employ.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Human participation&lt;/strong&gt;: AutoGen seamlessly allows human participation. This means that humans can provide input and feedback to the agents as needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/microsoft/autogen/raw/main/test/twoagent.py&#34;&gt;example&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from autogen import AssistantAgent, UserProxyAgent, config_list_from_json&#xA;# Load LLM inference endpoints from an env variable or a file&#xA;# See https://microsoft.github.io/autogen/docs/FAQ#set-your-api-endpoints&#xA;# and OAI_CONFIG_LIST_sample&#xA;config_list = config_list_from_json(env_or_file=&#34;OAI_CONFIG_LIST&#34;)&#xA;assistant = AssistantAgent(&#34;assistant&#34;, llm_config={&#34;config_list&#34;: config_list})&#xA;user_proxy = UserProxyAgent(&#34;user_proxy&#34;, code_execution_config={&#34;work_dir&#34;: &#34;coding&#34;})&#xA;user_proxy.initiate_chat(assistant, message=&#34;Plot a chart of NVDA and TESLA stock price change YTD.&#34;)&#xA;# This initiates an automated chat between the two agents to solve the task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example can be run with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python test/twoagent.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the repo is cloned. The figure below shows an example conversation flow with AutoGen. &lt;img src=&#34;https://github.com/microsoft/autogen/raw/main/website/static/img/chat_example.png&#34; alt=&#34;Agent Chat Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please find more &lt;a href=&#34;https://microsoft.github.io/autogen/docs/Examples/AutoGen-AgentChat&#34;&gt;code examples&lt;/a&gt; for this feature.&lt;/p&gt; &#xA;&lt;h2&gt;Enhanced LLM Inferences&lt;/h2&gt; &#xA;&lt;p&gt;Autogen also helps maximize the utility out of the expensive LLMs such as ChatGPT and GPT-4. It offers a drop-in replacement of &lt;code&gt;openai.Completion&lt;/code&gt; or &lt;code&gt;openai.ChatCompletion&lt;/code&gt; adding powerful functionalities like tuning, caching, error handling, and templating. For example, you can optimize generations by LLM with your own tuning data, success metrics, and budgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# perform tuning&#xA;config, analysis = autogen.Completion.tune(&#xA;    data=tune_data,&#xA;    metric=&#34;success&#34;,&#xA;    mode=&#34;max&#34;,&#xA;    eval_func=eval_func,&#xA;    inference_budget=0.05,&#xA;    optimization_budget=3,&#xA;    num_samples=-1,&#xA;)&#xA;# perform inference for a test instance&#xA;response = autogen.Completion.create(context=test_instance, **config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please find more &lt;a href=&#34;https://microsoft.github.io/autogen/docs/Examples/AutoGen-Inference&#34;&gt;code examples&lt;/a&gt; for this feature.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find detailed documentation about AutoGen &lt;a href=&#34;https://microsoft.github.io/autogen/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition, you can find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/autogen/docs/Research&#34;&gt;Research&lt;/a&gt; and &lt;a href=&#34;https://microsoft.github.io/autogen/blog&#34;&gt;blogposts&lt;/a&gt; around AutoGen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://discord.gg/pAbnFJrkgZ&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/autogen/docs/Contribute&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to GitHub &lt;a href=&#34;https://help.github.com/categories/collaborating-with-issues-and-pull-requests/&#34;&gt;here&lt;/a&gt; is a detailed help source on getting involved with development on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information, see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h1&gt;Legal Notices&lt;/h1&gt; &#xA;&lt;p&gt;Microsoft and any contributors grant you a license to the Microsoft documentation and other content in this repository under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;Creative Commons Attribution 4.0 International Public License&lt;/a&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/autogen/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file, and grant you a license to any code in the repository under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/autogen/main/LICENSE-CODE&#34;&gt;LICENSE-CODE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft, Windows, Microsoft Azure, and/or other Microsoft products and services referenced in the documentation may be either trademarks or registered trademarks of Microsoft in the United States and/or other countries. The licenses for this project do not grant you rights to use any Microsoft names, logos, or trademarks. Microsoft&#39;s general trademark guidelines can be found at &lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkID=254653&#34;&gt;http://go.microsoft.com/fwlink/?LinkID=254653&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Privacy information can be found at &lt;a href=&#34;https://privacy.microsoft.com/en-us/&#34;&gt;https://privacy.microsoft.com/en-us/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft and any contributors reserve all other rights, whether under their respective copyrights, patents, or trademarks, whether by implication, estoppel, or otherwise.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2308.08155&#34;&gt;AutoGen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{wu2023autogen,&#xA;      title={AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation Framework},&#xA;      author={Qingyun Wu and Gagan Bansal and Jieyu Zhang and Yiran Wu and Shaokun Zhang and Erkang Zhu and Beibin Li and Li Jiang and Xiaoyun Zhang and Chi Wang},&#xA;      year={2023},&#xA;      eprint={2308.08155},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.AI}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2303.04673&#34;&gt;EcoOptiGen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{wang2023EcoOptiGen,&#xA;    title={Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference},&#xA;    author={Chi Wang and Susan Xueqing Liu and Ahmed H. Awadallah},&#xA;    year={2023},&#xA;    booktitle={AutoML&#39;23},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2306.01337&#34;&gt;MathChat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{wu2023empirical,&#xA;    title={An Empirical Study on Challenging Math Problem Solving with GPT-4},&#xA;    author={Yiran Wu and Feiran Jia and Shaokun Zhang and Hangyu Li and Erkang Zhu and Yue Wang and Yin Tat Lee and Richard Peng and Qingyun Wu and Chi Wang},&#xA;    year={2023},&#xA;    booktitle={ArXiv preprint arXiv:2306.01337},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/FLAML</title>
    <updated>2023-10-08T01:54:59Z</updated>
    <id>tag:github.com,2023-10-08:/microsoft/FLAML</id>
    <link href="https://github.com/microsoft/FLAML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast library for AutoML and tuning. Join our Discord: https://discord.gg/Cppx2vSPVP.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/FLAML&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/FLAML.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/conda/vn/conda-forge/flaml&#34; alt=&#34;Conda version&#34;&gt; &lt;a href=&#34;https://github.com/microsoft/FLAML/actions/workflows/python-package.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/FLAML/actions/workflows/python-package.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/3.8%20%7C%203.9%20%7C%203.10-blue&#34; alt=&#34;Python Version&#34;&gt; &lt;a href=&#34;https://pepy.tech/project/flaml&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/flaml&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Cppx2vSPVP&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1025786666260111483?logo=discord&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![Join the chat at https://gitter.im/FLAMLer/community](https://badges.gitter.im/FLAMLer/community.svg)](https://gitter.im/FLAMLer/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge) --&gt; &#xA;&lt;h1&gt;A Fast Library for Automated Machine Learning &amp;amp; Tuning&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/microsoft/FLAML/raw/main/website/static/img/flaml.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; Heads-up: We&#39;re preparing to migrate &lt;a href=&#34;https://microsoft.github.io/autogen/&#34;&gt;AutoGen&lt;/a&gt; into a dedicated github repository. Alongside this move, we&#39;ll also launch a dedicated Discord server and a website for comprehensive documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; The automated multi-agent chat framework in &lt;a href=&#34;https://microsoft.github.io/autogen/&#34;&gt;AutoGen&lt;/a&gt; is in preview from v2.0.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; FLAML is highlighted in OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/openai-cookbook#related-resources-from-around-the-web&#34;&gt;cookbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; &lt;a href=&#34;https://microsoft.github.io/autogen/&#34;&gt;autogen&lt;/a&gt; is released with support for ChatGPT and GPT-4, based on &lt;a href=&#34;https://arxiv.org/abs/2303.04673&#34;&gt;Cost-Effective Hyperparameter Optimization for Large Language Model Generation Inference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; FLAML supports Code-First AutoML &amp;amp; Tuning â€“ Private Preview in &lt;a href=&#34;https://learn.microsoft.com/en-us/fabric/data-science/&#34;&gt;Microsoft Fabric Data Science&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is FLAML&lt;/h2&gt; &#xA;&lt;p&gt;FLAML is a lightweight Python library for efficient automation of machine learning and AI operations. It automates workflow based on large language models, machine learning models, etc. and optimizes their performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FLAML enables building next-gen GPT-X applications based on multi-agent conversations with minimal effort. It simplifies the orchestration, automation and optimization of a complex GPT-X workflow. It maximizes the performance of GPT-X models and augments their weakness.&lt;/li&gt; &#xA; &lt;li&gt;For common machine learning tasks like classification and regression, it quickly finds quality models for user-provided data with low computational resources. It is easy to customize or extend. Users can find their desired customizability from a smooth range.&lt;/li&gt; &#xA; &lt;li&gt;It supports fast and economical automatic tuning (e.g., inference hyperparameters for foundation models, configurations in MLOps/LMOps workflows, pipelines, mathematical/statistical models, algorithms, computing experiments, software configurations), capable of handling large search space with heterogeneous evaluation cost and complex constraints/guidance/early stopping.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FLAML is powered by a series of &lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Research/&#34;&gt;research studies&lt;/a&gt; from Microsoft Research and collaborators such as Penn State University, Stevens Institute of Technology, University of Washington, and University of Waterloo.&lt;/p&gt; &#xA;&lt;p&gt;FLAML has a .NET implementation in &lt;a href=&#34;http://dot.net/ml&#34;&gt;ML.NET&lt;/a&gt;, an open-source, cross-platform machine learning framework for .NET.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;FLAML requires &lt;strong&gt;Python version &amp;gt;= 3.8&lt;/strong&gt;. It can be installed from pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install flaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Minimal dependencies are installed without extra options. You can install extra options based on the feature you need. For example, use the following to install the dependencies needed by the &lt;a href=&#34;https://microsoft.github.io/autogen/&#34;&gt;&lt;code&gt;autogen&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#34;flaml[autogen]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find more options in &lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Installation&#34;&gt;Installation&lt;/a&gt;. Each of the &lt;a href=&#34;https://github.com/microsoft/FLAML/tree/main/notebook&#34;&gt;&lt;code&gt;notebook examples&lt;/code&gt;&lt;/a&gt; may require a specific option to be installed.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(New) The &lt;a href=&#34;https://microsoft.github.io/autogen/&#34;&gt;autogen&lt;/a&gt; package enables the next-gen GPT-X applications with a generic multi-agent conversation framework. It offers customizable and conversable agents which integrate LLMs, tools and human. By automating chat among multiple capable agents, one can easily make them collectively perform tasks autonomously or with human feedback, including tasks that require using tools via code. For example,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flaml import autogen&#xA;assistant = autogen.AssistantAgent(&#34;assistant&#34;)&#xA;user_proxy = autogen.UserProxyAgent(&#34;user_proxy&#34;)&#xA;user_proxy.initiate_chat(assistant, message=&#34;Show me the YTD gain of 10 largest technology companies as of today.&#34;)&#xA;# This initiates an automated chat between the two agents to solve the task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Autogen also helps maximize the utility out of the expensive LLMs such as ChatGPT and GPT-4. It offers a drop-in replacement of &lt;code&gt;openai.Completion&lt;/code&gt; or &lt;code&gt;openai.ChatCompletion&lt;/code&gt; with powerful functionalites like tuning, caching, templating, filtering. For example, you can optimize generations by LLM with your own tuning data, success metrics and budgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# perform tuning&#xA;config, analysis = autogen.Completion.tune(&#xA;    data=tune_data,&#xA;    metric=&#34;success&#34;,&#xA;    mode=&#34;max&#34;,&#xA;    eval_func=eval_func,&#xA;    inference_budget=0.05,&#xA;    optimization_budget=3,&#xA;    num_samples=-1,&#xA;)&#xA;# perform inference for a test instance&#xA;response = autogen.Completion.create(context=test_instance, **config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With three lines of code, you can start using this economical and fast AutoML engine as a &lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Use-Cases/Task-Oriented-AutoML&#34;&gt;scikit-learn style estimator&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flaml import AutoML&#xA;automl = AutoML()&#xA;automl.fit(X_train, y_train, task=&#34;classification&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can restrict the learners and use FLAML as a fast hyperparameter tuning tool for XGBoost, LightGBM, Random Forest etc. or a &lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Use-Cases/Task-Oriented-AutoML#estimator-and-search-space&#34;&gt;customized learner&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;automl.fit(X_train, y_train, task=&#34;classification&#34;, estimator_list=[&#34;lgbm&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also run generic hyperparameter tuning for a &lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Use-Cases/Tune-User-Defined-Function&#34;&gt;custom function&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flaml import tune&#xA;tune.run(evaluation_function, config={â€¦}, low_cost_partial_config={â€¦}, time_budget_s=3600)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Use-Cases/Zero-Shot-AutoML&#34;&gt;Zero-shot AutoML&lt;/a&gt; allows using the existing training API from lightgbm, xgboost etc. while getting the benefit of AutoML in choosing high-performance hyperparameter configurations per task.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flaml.default import LGBMRegressor&#xA;&#xA;# Use LGBMRegressor in the same way as you use lightgbm.LGBMRegressor.&#xA;estimator = LGBMRegressor()&#xA;# The hyperparameters are automatically set according to the training data.&#xA;estimator.fit(X_train, y_train)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find a detailed documentation about FLAML &lt;a href=&#34;https://microsoft.github.io/FLAML/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition, you can find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Research&#34;&gt;Research&lt;/a&gt; and &lt;a href=&#34;https://microsoft.github.io/FLAML/blog&#34;&gt;blogposts&lt;/a&gt; around FLAML.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://discord.gg/Cppx2vSPVP&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/FLAML/docs/Contribute&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ML.NET documentation and tutorials for &lt;a href=&#34;https://learn.microsoft.com/dotnet/machine-learning/tutorials/predict-prices-with-model-builder&#34;&gt;Model Builder&lt;/a&gt;, &lt;a href=&#34;https://learn.microsoft.com/dotnet/machine-learning/tutorials/sentiment-analysis-cli&#34;&gt;ML.NET CLI&lt;/a&gt;, and &lt;a href=&#34;https://learn.microsoft.com/dotnet/machine-learning/how-to-guides/how-to-use-the-automl-api&#34;&gt;AutoML API&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to GitHub &lt;a href=&#34;https://help.github.com/categories/collaborating-with-issues-and-pull-requests/&#34;&gt;here&lt;/a&gt; is a detailed help source on getting involved with development on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CoreyMSchafer/code_snippets</title>
    <updated>2023-10-08T01:54:59Z</updated>
    <id>tag:github.com,2023-10-08:/CoreyMSchafer/code_snippets</id>
    <link href="https://github.com/CoreyMSchafer/code_snippets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;code_snippets&lt;/h1&gt;</summary>
  </entry>
</feed>