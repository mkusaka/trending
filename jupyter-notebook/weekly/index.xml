<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:47:25Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openai/whisper</title>
    <updated>2022-11-13T01:47:25Z</updated>
    <id>tag:github.com,2022-11-13:/openai/whisper</id>
    <link href="https://github.com/openai/whisper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Robust Speech Recognition via Large-Scale Weak Supervision&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Whisper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openai.com/blog/whisper&#34;&gt;[Blog]&lt;/a&gt; &lt;a href=&#34;https://cdn.openai.com/papers/whisper.pdf&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/openai/whisper/main/model-card.md&#34;&gt;[Model card]&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/openai/whisper/blob/master/notebooks/LibriSpeech.ipynb&#34;&gt;[Colab example]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whisper is a general-purpose speech recognition model. It is trained on a large dataset of diverse audio and is also a multi-task model that can perform multilingual speech recognition as well as speech translation and language identification.&lt;/p&gt; &#xA;&lt;h2&gt;Approach&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openai/whisper/main/approach.png&#34; alt=&#34;Approach&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Transformer sequence-to-sequence model is trained on various speech processing tasks, including multilingual speech recognition, speech translation, spoken language identification, and voice activity detection. All of these tasks are jointly represented as a sequence of tokens to be predicted by the decoder, allowing for a single model to replace many different stages of a traditional speech processing pipeline. The multitask training format uses a set of special tokens that serve as task specifiers or classification targets.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;We used Python 3.9.9 and &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt; 1.10.1 to train and test our models, but the codebase is expected to be compatible with Python 3.7 or later and recent PyTorch versions. The codebase also depends on a few Python packages, most notably &lt;a href=&#34;https://huggingface.co/docs/transformers/index&#34;&gt;HuggingFace Transformers&lt;/a&gt; for their fast tokenizer implementation and &lt;a href=&#34;https://github.com/kkroening/ffmpeg-python&#34;&gt;ffmpeg-python&lt;/a&gt; for reading audio files. The following command will pull and install the latest commit from this repository, along with its Python dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/openai/whisper.git &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also requires the command-line tool &lt;a href=&#34;https://ffmpeg.org/&#34;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; to be installed on your system, which is available from most package managers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on Ubuntu or Debian&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install ffmpeg&#xA;&#xA;# on Arch Linux&#xA;sudo pacman -S ffmpeg&#xA;&#xA;# on MacOS using Homebrew (https://brew.sh/)&#xA;brew install ffmpeg&#xA;&#xA;# on Windows using Chocolatey (https://chocolatey.org/)&#xA;choco install ffmpeg&#xA;&#xA;# on Windows using Scoop (https://scoop.sh/)&#xA;scoop install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need &lt;a href=&#34;http://rust-lang.org&#34;&gt;&lt;code&gt;rust&lt;/code&gt;&lt;/a&gt; installed as well, in case &lt;a href=&#34;https://pypi.org/project/tokenizers/&#34;&gt;tokenizers&lt;/a&gt; does not provide a pre-built wheel for your platform. If you see installation errors during the &lt;code&gt;pip install&lt;/code&gt; command above, please follow the &lt;a href=&#34;https://www.rust-lang.org/learn/get-started&#34;&gt;Getting started page&lt;/a&gt; to install Rust development environment. Additionally, you may need to configure the &lt;code&gt;PATH&lt;/code&gt; environment variable, e.g. &lt;code&gt;export PATH=&#34;$HOME/.cargo/bin:$PATH&#34;&lt;/code&gt;. If the installation fails with &lt;code&gt;No module named &#39;setuptools_rust&#39;&lt;/code&gt;, you need to install &lt;code&gt;setuptools_rust&lt;/code&gt;, e.g. by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install setuptools-rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available models and languages&lt;/h2&gt; &#xA;&lt;p&gt;There are five model sizes, four with English-only versions, offering speed and accuracy tradeoffs. Below are the names of the available models and their approximate memory requirements and relative speed.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Size&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameters&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;English-only model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Multilingual model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Required VRAM&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Relative speed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;tiny&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;39 M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;tiny.en&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;tiny&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~1 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~32x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;base&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;74 M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;base.en&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~1 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~16x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;244 M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;small.en&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;small&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~2 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~6x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;medium&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;769 M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;medium.en&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;medium&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~5 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~2x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1550 M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;large&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;~10 GB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For English-only applications, the &lt;code&gt;.en&lt;/code&gt; models tend to perform better, especially for the &lt;code&gt;tiny.en&lt;/code&gt; and &lt;code&gt;base.en&lt;/code&gt; models. We observed that the difference becomes less significant for the &lt;code&gt;small.en&lt;/code&gt; and &lt;code&gt;medium.en&lt;/code&gt; models.&lt;/p&gt; &#xA;&lt;p&gt;Whisper&#39;s performance varies widely depending on the language. The figure below shows a WER breakdown by languages of Fleurs dataset, using the &lt;code&gt;large&lt;/code&gt; model. More WER and BLEU scores corresponding to the other models and datasets can be found in Appendix D in &lt;a href=&#34;https://cdn.openai.com/papers/whisper.pdf&#34;&gt;the paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openai/whisper/main/language-breakdown.svg?sanitize=true&#34; alt=&#34;WER breakdown by language&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Command-line usage&lt;/h2&gt; &#xA;&lt;p&gt;The following command will transcribe speech in audio files, using the &lt;code&gt;medium&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whisper audio.flac audio.mp3 audio.wav --model medium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default setting (which selects the &lt;code&gt;small&lt;/code&gt; model) works well for transcribing English. To transcribe an audio file containing non-English speech, you can specify the language using the &lt;code&gt;--language&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whisper japanese.wav --language Japanese&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;--task translate&lt;/code&gt; will translate the speech into English:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whisper japanese.wav --language Japanese --task translate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to view all available options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whisper --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openai/whisper/main/whisper/tokenizer.py&#34;&gt;tokenizer.py&lt;/a&gt; for the list of all available languages.&lt;/p&gt; &#xA;&lt;h2&gt;Python usage&lt;/h2&gt; &#xA;&lt;p&gt;Transcription can also be performed within Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import whisper&#xA;&#xA;model = whisper.load_model(&#34;base&#34;)&#xA;result = model.transcribe(&#34;audio.mp3&#34;)&#xA;print(result[&#34;text&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Internally, the &lt;code&gt;transcribe()&lt;/code&gt; method reads the entire file and processes the audio with a sliding 30-second window, performing autoregressive sequence-to-sequence predictions on each window.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example usage of &lt;code&gt;whisper.detect_language()&lt;/code&gt; and &lt;code&gt;whisper.decode()&lt;/code&gt; which provide lower-level access to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import whisper&#xA;&#xA;model = whisper.load_model(&#34;base&#34;)&#xA;&#xA;# load audio and pad/trim it to fit 30 seconds&#xA;audio = whisper.load_audio(&#34;audio.mp3&#34;)&#xA;audio = whisper.pad_or_trim(audio)&#xA;&#xA;# make log-Mel spectrogram and move to the same device as the model&#xA;mel = whisper.log_mel_spectrogram(audio).to(model.device)&#xA;&#xA;# detect the spoken language&#xA;_, probs = model.detect_language(mel)&#xA;print(f&#34;Detected language: {max(probs, key=probs.get)}&#34;)&#xA;&#xA;# decode the audio&#xA;options = whisper.DecodingOptions()&#xA;result = whisper.decode(model, mel, options)&#xA;&#xA;# print the recognized text&#xA;print(result.text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/openai/whisper/discussions/categories/show-and-tell&#34;&gt;🙌 Show and tell&lt;/a&gt; category in Discussions for sharing more example usages of Whisper and third-party extensions such as web demos, integrations with other tools, ports for different platforms, etc.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code and the model weights of Whisper are released under the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/openai/whisper/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MubertAI/Mubert-Text-to-Music</title>
    <updated>2022-11-13T01:47:25Z</updated>
    <id>tag:github.com,2022-11-13:/MubertAI/Mubert-Text-to-Music</id>
    <link href="https://github.com/MubertAI/Mubert-Text-to-Music" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple notebook demonstrating prompt-based music generation via Mubert API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mubert-Text-to-Music&lt;/h1&gt; &#xA;&lt;p&gt;Colab notebooks demonstrating prompt-based music generation via Mubert API&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/YJu0iXn-T_U&#34;&gt;&lt;strong&gt;WATCH DEMO&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MubertAI/Mubert-Text-to-Music/main/Mubert_Text_to_Music.ipynb&#34;&gt;Mubert Text-to-Music&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A simple demo offering music generation by prompt and duration&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MubertAI/Mubert-Text-to-Music/main/Deforum_Stable_Diffusion_Mubert.ipynb&#34;&gt;Stable Diffusion + Mubert&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A demo of instant prompt-based music video generation based on Deforum Stable Diffusion colab&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;All music is generated by Mubert API – &lt;a href=&#34;http://www.mubert.com/&#34;&gt;www.mubert.com/&lt;/a&gt;. If you want to use it for free – please, tag us on Twitter (&lt;a href=&#34;https://twitter.com/mubertapp&#34;&gt;https://twitter.com/mubertapp&lt;/a&gt;) and include hashtag #mubert.&lt;/p&gt; &#xA;&lt;p&gt;We’re glad to present you our new Text-to-Music demo interface. Now as a Google Colab, and soon we’ll add this feature as a simple form on our website. This has already gone viral, so the community has questions about how everything works&lt;/p&gt; &#xA;&lt;p&gt;People ask how generative this music really is. Each time you send a request, our API generates a unique combination of sounds. The probability of repetition is extremely small. Music is not taken from the database of finished tracks, it is created at the time of the request.&lt;/p&gt; &#xA;&lt;p&gt;How are sounds selected for generation? The input prompt and Mubert API tags are both encoded to latent space vectors of a transformer neural network. Then the closest tags vector is selected for each prompt and corresponding tags are sent to our API for music generation.&lt;/p&gt; &#xA;&lt;p&gt;All sounds (separate loops for bass, leads etc.) are created by musicians and sound designers, they are not synthesized by any neural network. Our paradigm is &#34;from creators to creators&#34;. We are musicians ourselves and it is important for us that musicians stay in the equation.&lt;/p&gt; &#xA;&lt;p&gt;Our proprietary technology is able to analyze and select relevant sounds, as well as build arrangements and compositions from them. In this demo, you can set up what you need, a looped track or a track with a start and end.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A custom license works for colab. You can use the music for free with attribution to sync with images and videos, but you can&#39;t release it on DSPs (Spotify, Apple Music, Deezer etc.) as your own. We also ask you to mention @mubertapp and hashtag #mubert. If you need a commercial license — please contact us.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is our first step towards creating a more complex and accurate generation algorithm, but for this we will need time and resources. All your feedback will be very useful, so feel free to write us in the replies or in a PM about your user experience. Have fun!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>afizs/be-theboss-in-python</title>
    <updated>2022-11-13T01:47:25Z</updated>
    <id>tag:github.com,2022-11-13:/afizs/be-theboss-in-python</id>
    <link href="https://github.com/afizs/be-theboss-in-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo helps you to be the boss in Python.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Be The Boss in Python&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deepnote.com/launch?url=https%3A%2F%2Fgithub.com%2Fafizs%2Fbe-theboss-in-python&#34;&gt;&lt;img src=&#34;https://deepnote.com/buttons/launch-in-deepnote.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✅ This repository contains all the programs of my Python Tutorials, which I shared on Twitter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5618143/191779394-0b7eb060-9351-4a73-bc3c-a3a475f4c5e6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>