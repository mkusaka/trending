<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-17T02:04:05Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iamvaibhavmehra/LangGraph-Course-freeCodeCamp</title>
    <updated>2025-08-17T02:04:05Z</updated>
    <id>tag:github.com,2025-08-17:/iamvaibhavmehra/LangGraph-Course-freeCodeCamp</id>
    <link href="https://github.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for all of the code that was written for the FreeCodeCamp Course and the answers for all of the exercises.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LangGraph Course&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Video:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=jGg_1h0qzaM&#34;&gt;https://www.youtube.com/watch?v=jGg_1h0qzaM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Repository for all of the code written for the FreeCodeCamp LangGraph Course, including solutions for all exercises. This repo provides practical examples of using &lt;a href=&#34;https://github.com/langchain-ai/langgraph&#34;&gt;LangGraph&lt;/a&gt; for building agent-based applications through Python scripts and interactive Jupyter notebooks.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp/main/#repository-structure&#34;&gt;Repository Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp/main/#getting-started-zshmac&#34;&gt;Getting Started (zsh/Mac)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp/main/#using-pyenv-and-uv&#34;&gt;Using pyenv and uv&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp/main/#exercises&#34;&gt;Exercises&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamvaibhavmehra/LangGraph-Course-freeCodeCamp/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;LangGraph is a Python framework for designing and managing the flow of tasks in your application using graph structures. This course demonstrates LangGraph concepts through step-by-step exercises, agent implementations, and Jupyter notebooks.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;LangGraph-Course/&#xA;├── Agents/            # Python agents for various tasks (e.g., RAG_Agent, Drafter)&#xA;├── Exercises/         # Jupyter notebooks with exercise solutions&#xA;├── Graphs/            # Jupyter notebooks illustrating LangGraph concepts&#xA;├── requirements.txt   # Python dependencies&#xA;└── README.md          # This file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notable Directories:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agents/&lt;/strong&gt;: Python scripts for agents such as Retrieval-Augmented Generation (RAG) and document drafting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercises/&lt;/strong&gt;: Jupyter notebooks for each exercise (e.g. &lt;code&gt;Exercise_Graph1.ipynb&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Graphs/&lt;/strong&gt;: Notebooks demonstrating LangGraph patterns (e.g., Hello World, Looping).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Getting Started (zsh/Mac)&lt;/h2&gt; &#xA;&lt;h3&gt;Using pyenv and uv&lt;/h3&gt; &#xA;&lt;h4&gt;1. Clone the Repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone https://github.com/rdtiv/LangGraph-Course.git&#xA;cd LangGraph-Course&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Install pyenv (if not already installed)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew update&#xA;brew install pyenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.zshrc&lt;/code&gt; if it&#39;s not already there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;export PYENV_ROOT=&#34;$HOME/.pyenv&#34;&#xA;export PATH=&#34;$PYENV_ROOT/bin:$PATH&#34;&#xA;eval &#34;$(pyenv init --path)&#34;&#xA;eval &#34;$(pyenv init -)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart your terminal or source your &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;source ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Install Python Version&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;pyenv install 3.12.6&#xA;pyenv local 3.12.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Install uv&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;pipx install uv           # Recommended, or:&#xA;pip install --user uv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have pipx, install it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew install pipx&#xA;pipx ensurepath&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Set Up Virtual Environment with uv&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;uv venv .venv&#xA;source .venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. Install Dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;uv pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. (Optional) Set up Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;If you need API keys (such as for OpenAI), create a &lt;code&gt;.env&lt;/code&gt; file in the root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;echo &#34;OPENAI_API_KEY=your_openai_key&#34; &amp;gt; .env&#xA;# Add other variables as needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;8. Start JupyterLab&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;uv pip install jupyterlab  # Only if not already installed&#xA;jupyter lab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open and run Jupyter notebooks in &lt;code&gt;Graphs/&lt;/code&gt; and &lt;code&gt;Exercises/&lt;/code&gt; for hands-on practice and exploration.&lt;/li&gt; &#xA; &lt;li&gt;Run agent scripts in &lt;code&gt;Agents/&lt;/code&gt; for more advanced experiments.&lt;/li&gt; &#xA; &lt;li&gt;All code is designed to work in a local, isolated Python environment managed by pyenv and uv.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Exercises&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explore the &lt;code&gt;Exercises/&lt;/code&gt; directory for self-contained solutions to LangGraph problems.&lt;/li&gt; &#xA; &lt;li&gt;Example notebooks: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Exercise_Graph1.ipynb&lt;/code&gt;: Agent state and basic graph usage.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Exercise_Graph2.ipynb&lt;/code&gt;: User input and graph visualization.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Exercise_Graph3.ipynb&lt;/code&gt;: Personalization and skills-based responses.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Exercise_Graph4.ipynb&lt;/code&gt;, &lt;code&gt;Exercise_Graph5.ipynb&lt;/code&gt;: Advanced graph operations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Core dependencies (see &lt;code&gt;requirements.txt&lt;/code&gt; for full list):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;langgraph&lt;/li&gt; &#xA; &lt;li&gt;langchain&lt;/li&gt; &#xA; &lt;li&gt;ipython&lt;/li&gt; &#xA; &lt;li&gt;langchain_openai&lt;/li&gt; &#xA; &lt;li&gt;langchain_community&lt;/li&gt; &#xA; &lt;li&gt;dotenv&lt;/li&gt; &#xA; &lt;li&gt;typing&lt;/li&gt; &#xA; &lt;li&gt;chromadb&lt;/li&gt; &#xA; &lt;li&gt;langchain_chroma&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install all dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;uv pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#iamvaibhavmehra/LangGraph-Course-freeCodeCamp&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=iamvaibhavmehra/LangGraph-Course-freeCodeCamp&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trycua/cua</title>
    <updated>2025-08-17T02:04:05Z</updated>
    <id>tag:github.com,2025-08-17:/trycua/cua</id>
    <link href="https://github.com/trycua/cua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cua is the Docker Container for Computer-Use AI Agents.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; alt=&#34;Cua logo&#34; height=&#34;150&#34; srcset=&#34;img/logo_white.png&#34; /&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; alt=&#34;Cua logo&#34; height=&#34;150&#34; srcset=&#34;img/logo_black.png&#34; /&gt; &#xA;  &lt;img alt=&#34;Cua logo&#34; height=&#34;150&#34; src=&#34;https://raw.githubusercontent.com/trycua/cua/main/img/logo_black.png&#34; /&gt; &#xA; &lt;/picture&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-333333?logo=python&amp;amp;logoColor=white&amp;amp;labelColor=333333&#34; alt=&#34;Python&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-F05138?logo=swift&amp;amp;logoColor=white&#34; alt=&#34;Swift&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/macOS-000000?logo=apple&amp;amp;logoColor=F0F0F0&#34; alt=&#34;macOS&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/mVnXXpdE85&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34; /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href=&#34;https://trendshift.io/repositories/13685&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/13685&#34; alt=&#34;trycua%2Fcua | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;cua&lt;/strong&gt; (&#34;koo-ah&#34;) is Docker for &lt;a href=&#34;https://www.oneusefulthing.org/p/when-you-give-a-claude-a-mouse&#34;&gt;Computer-Use Agents&lt;/a&gt; - it enables AI agents to control full operating systems in virtual containers and deploy them locally or to the cloud.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://github.com/user-attachments/assets/c619b4ea-bb8e-4382-860e-f3757e36af20&#34; width=&#34;600&#34; controls&gt;&lt;/video&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;With the Computer SDK, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;automate Windows, Linux, and macOS VMs with a consistent, &lt;a href=&#34;https://docs.trycua.com/docs/libraries/computer#interface-actions&#34;&gt;pyautogui-like API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;create &amp;amp; manage VMs &lt;a href=&#34;https://docs.trycua.com/docs/computer-sdk/computers#cua-local-containers&#34;&gt;locally&lt;/a&gt; or using &lt;a href=&#34;https://www.trycua.com/&#34;&gt;cua cloud&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With the Agent SDK, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run computer-use models with a &lt;a href=&#34;https://docs.trycua.com/docs/agent-sdk/chat-history#message-array-structure&#34;&gt;consistent output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;run composed agents using UI grounding models and any LLM&lt;/li&gt; &#xA; &lt;li&gt;use any liteLLM provider (&lt;code&gt;openai/&lt;/code&gt;, &lt;code&gt;openrouter/&lt;/code&gt;, etc.) or our included local providers (&lt;code&gt;huggingface-local/&lt;/code&gt;, &lt;code&gt;mlx/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;quickly evaluate new UI agent models and UI grounding models &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;anthropic/claude-opus-4-1-20250805&lt;/code&gt; (using &lt;a href=&#34;https://docs.trycua.com/docs/agent-sdk/supported-agents/computer-use-agents&#34;&gt;Computer-Use Models&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;openai/computer-use-preview&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;openrouter/z-ai/glm-4.5v&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;huggingface-local/ByteDance-Seed/UI-TARS-1.5-7B&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;omniparser+{any LLM}&lt;/code&gt; (using &lt;a href=&#34;https://docs.trycua.com/docs/agent-sdk/supported-agents/composed-agents&#34;&gt;Composed Agents&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;huggingface-local/HelloKKMe/GTA1-7B+{any LLM}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;huggingface/HelloKKMe/GTA1-32B+{any LLM}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vllm_hosted/HelloKKMe/GTA1-72B+{any LLM}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;human/human&lt;/code&gt; (using &lt;a href=&#34;https://docs.trycua.com/docs/agent-sdk/supported-agents/human-in-the-loop&#34;&gt;Human-in-the-Loop&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;benchmark on OSWorld-Verified, SheetBench-V2, and more &lt;a href=&#34;https://docs.trycua.com/docs/agent-sdk/integrations/hud&#34;&gt;with a single line of code using HUD&lt;/a&gt; (&lt;a href=&#34;https://github.com/trycua/cua/raw/main/notebooks/eval_osworld.ipynb&#34;&gt;Notebook&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Missing a model? &lt;a href=&#34;https://github.com/trycua/cua/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;projects=&amp;amp;title=%5BAgent%5D%3A+Add+model+support+for+&#34;&gt;Raise a feature request&lt;/a&gt; or &lt;a href=&#34;https://github.com/trycua/cua/raw/main/CONTRIBUTING.md&#34;&gt;contribute&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.trycua.com/docs/quickstart-ui&#34;&gt;Get started with a Computer-Use Agent UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.trycua.com/docs/quickstart-cli&#34;&gt;Get started with the Computer-Use Agent CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.trycua.com/docs/quickstart-devs&#34;&gt;Get Started with the Python SDKs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br /&gt; &#xA;&lt;h1&gt;Usage (&lt;a href=&#34;https://docs.trycua.com/docs&#34;&gt;Docs&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install cua-agent[all]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agent import ComputerAgent&#xA;&#xA;agent = ComputerAgent(&#xA;    model=&#34;anthropic/claude-3-5-sonnet-20241022&#34;,&#xA;    tools=[computer],&#xA;    max_trajectory_budget=5.0&#xA;)&#xA;&#xA;messages = [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Take a screenshot and tell me what you see&#34;}]&#xA;&#xA;async for result in agent.run(messages):&#xA;    for item in result[&#34;output&#34;]:&#xA;        if item[&#34;type&#34;] == &#34;message&#34;:&#xA;            print(item[&#34;content&#34;][0][&#34;text&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Output format (OpenAI Agent Responses Format):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#xA;  &#34;output&#34;: [&#xA;    # user input&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;go to trycua on gh&#34;&#xA;    },&#xA;    # first agent turn adds the model output to the history&#xA;    {&#xA;        &#34;summary&#34;: [&#xA;            {&#xA;                &#34;text&#34;: &#34;Searching Firefox for Trycua GitHub&#34;,&#xA;                &#34;type&#34;: &#34;summary_text&#34;&#xA;            }&#xA;        ],&#xA;        &#34;type&#34;: &#34;reasoning&#34;&#xA;    },&#xA;    {&#xA;        &#34;action&#34;: {&#xA;            &#34;text&#34;: &#34;Trycua GitHub&#34;,&#xA;            &#34;type&#34;: &#34;type&#34;&#xA;        },&#xA;        &#34;call_id&#34;: &#34;call_QI6OsYkXxl6Ww1KvyJc4LKKq&#34;,&#xA;        &#34;status&#34;: &#34;completed&#34;,&#xA;        &#34;type&#34;: &#34;computer_call&#34;&#xA;    },&#xA;    # second agent turn adds the computer output to the history&#xA;    {&#xA;        &#34;type&#34;: &#34;computer_call_output&#34;,&#xA;        &#34;call_id&#34;: &#34;call_QI6OsYkXxl6Ww1KvyJc4LKKq&#34;,&#xA;        &#34;output&#34;: {&#xA;            &#34;type&#34;: &#34;input_image&#34;,&#xA;            &#34;image_url&#34;: &#34;data:image/png;base64,...&#34;&#xA;        }&#xA;    },&#xA;    # final agent turn adds the agent output text to the history&#xA;    {&#xA;        &#34;type&#34;: &#34;message&#34;,&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: [&#xA;          {&#xA;            &#34;text&#34;: &#34;Success! The Trycua GitHub page has been opened.&#34;,&#xA;            &#34;type&#34;: &#34;output_text&#34;&#xA;          }&#xA;        ]&#xA;    }&#xA;  ], &#xA;  &#34;usage&#34;: {&#xA;      &#34;prompt_tokens&#34;: 150,&#xA;      &#34;completion_tokens&#34;: 75,&#xA;      &#34;total_tokens&#34;: 225,&#xA;      &#34;response_cost&#34;: 0.01,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Computer (&lt;a href=&#34;https://docs.trycua.com/docs/computer-sdk/computers&#34;&gt;Docs&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install cua-computer[all]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from computer import Computer&#xA;&#xA;async with Computer(&#xA;    os_type=&#34;linux&#34;,&#xA;    provider_type=&#34;cloud&#34;,&#xA;    name=&#34;your-container-name&#34;,&#xA;    api_key=&#34;your-api-key&#34;&#xA;) as computer:&#xA;    # Take screenshot&#xA;    screenshot = await computer.interface.screenshot()&#xA;&#xA;    # Click and type&#xA;    await computer.interface.left_click(100, 100)&#xA;    await computer.interface.type(&#34;Hello!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/mcp-server/README.md&#34;&gt;How to use the MCP Server with Claude Desktop or other MCP clients&lt;/a&gt; - One of the easiest ways to get started with Cua&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/agent/README.md&#34;&gt;How to use OpenAI Computer-Use, Anthropic, OmniParser, or UI-TARS for your Computer-Use Agent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/lume/README.md&#34;&gt;How to use Lume CLI for managing desktops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trycua.com/blog/training-computer-use-models-trajectories-1&#34;&gt;Training Computer-Use Models: Collecting Human Trajectories with Cua (Part 1)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Installation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/lume/README.md&#34;&gt;&lt;strong&gt;Lume&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VM management for macOS/Linux using Apple&#39;s Virtualization.Framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/trycua/cua/main/libs/lume/scripts/install.sh | bash&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/lumier/README.md&#34;&gt;&lt;strong&gt;Lumier&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Docker interface for macOS and Linux VMs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;docker pull trycua/lumier:latest&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/computer/README.md&#34;&gt;&lt;strong&gt;Computer (Python)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python Interface for controlling virtual machines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install &#34;cua-computer[all]&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/typescript/computer/README.md&#34;&gt;&lt;strong&gt;Computer (Typescript)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Typescript Interface for controlling virtual machines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm install @trycua/computer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/agent/README.md&#34;&gt;&lt;strong&gt;Agent&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AI agent framework for automating tasks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install &#34;cua-agent[all]&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/mcp-server/README.md&#34;&gt;&lt;strong&gt;MCP Server&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MCP server for using CUA with Claude Desktop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cua-mcp-server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/som/README.md&#34;&gt;&lt;strong&gt;SOM&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Self-of-Mark library for Agent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cua-som&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/computer-server/README.md&#34;&gt;&lt;strong&gt;Computer Server&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Server component for Computer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cua-computer-server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/python/core/README.md&#34;&gt;&lt;strong&gt;Core (Python)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python Core utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cua-core&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/libs/typescript/core/README.md&#34;&gt;&lt;strong&gt;Core (Typescript)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Typescript Core utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm install @trycua/core&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://discord.com/invite/mVnXXpdE85&#34;&gt;Discord community&lt;/a&gt; to discuss ideas, get assistance, or share your demos!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Cua is open-sourced under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft&#39;s OmniParser, which is used in this project, is licensed under the Creative Commons Attribution 4.0 International License (CC-BY-4.0) - see the &lt;a href=&#34;https://github.com/microsoft/OmniParser/raw/master/LICENSE&#34;&gt;OmniParser LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to CUA! Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;Apple, macOS, and Apple Silicon are trademarks of Apple Inc. Ubuntu and Canonical are registered trademarks of Canonical Ltd. Microsoft is a registered trademark of Microsoft Corporation. This project is not affiliated with, endorsed by, or sponsored by Apple Inc., Canonical Ltd., or Microsoft Corporation.&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our supporters!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/trycua/cua&#34;&gt;&lt;img src=&#34;https://starchart.cc/trycua/cua.svg?variant=adaptive&#34; alt=&#34;Stargazers over time&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/f-trycua&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/195596869?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;f-trycua&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;f-trycua&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-f-trycua&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://pepicrft.me&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/663605?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Pedro Piñera Buendía&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Pedro Piñera Buendía&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-pepicrft&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://iamit.in&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5647941?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Amit Kumar&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Amit Kumar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-aktech&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://productsway.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/870029?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Dung Duc Huynh (Kaka)&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Dung Duc Huynh (Kaka)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-jellydn&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://zaydkrunz.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/70227235?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Zayd Krunz&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Zayd Krunz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-ShrootBuck&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/PrashantRaj18198&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/23168997?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Prashant Raj&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Prashant Raj&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-PrashantRaj18198&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://www.mobile.dev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/847683?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Leland Takamine&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Leland Takamine&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-Leland-Takamine&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/ddupont808&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3820588?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;ddupont&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;ddupont&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-ddupont808&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/Lizzard1123&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/46036335?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Ethan Gutierrez&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ethan Gutierrez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-Lizzard1123&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://ricterz.me&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5282759?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Ricter Zheng&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ricter Zheng&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-RicterZ&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://www.trytruffle.ai/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/50844303?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Rahul Karajgikar&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Rahul Karajgikar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-rahulkarajgikar&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/trospix&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/81363696?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;trospix&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;trospix&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-trospix&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/evnsnclr&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/139897548?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Evan smith&#34; /&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Evan smith&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trycua/cua/main/#code-evnsnclr&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;</summary>
  </entry>
  <entry>
    <title>Marktechpost/AI-Tutorial-Codes-Included</title>
    <updated>2025-08-17T02:04:05Z</updated>
    <id>tag:github.com,2025-08-17:/Marktechpost/AI-Tutorial-Codes-Included</id>
    <link href="https://github.com/Marktechpost/AI-Tutorial-Codes-Included" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notebooks for Tutorials from Marktechpost&lt;/p&gt;&lt;hr&gt;&lt;p&gt;🤝 Show your support - give a ⭐️ if you liked the content&lt;/p&gt; &#xA;&lt;h1&gt;AI-Tutorials/Implementations and Notebooks&lt;/h1&gt; &#xA;&lt;h3&gt;Index&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks?tab=readme-ov-file#agentic-ai-and-agents&#34;&gt;Agentic AI and Agents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks?tab=readme-ov-file#mcps-guides&#34;&gt;MCPs Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks?tab=readme-ov-file#llms-and-other-ai-section&#34;&gt;LLMs and Other AI Section&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h3&gt;Agentic AI and Agents&lt;/h3&gt; &#xA;&lt;p&gt;▶ An Implementation Guide to Build a Modular Conversational AI Agent with Pipecat and HuggingFace &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/pipecat_huggingface_implementation_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/13/an-implementation-guide-to-build-a-modular-conversational-ai-agent-with-pipecat-and-huggingface/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building a Secure and Memory-Enabled Cipher Workflow for AI Agents with Dynamic LLM Selection and API Integration &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/cipher_memory_agent_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/11/building-a-secure-and-memory-enabled-cipher-workflow-for-ai-agents-with-dynamic-llm-selection-and-api-integration/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Developer’s Guide to OpenAI’s GPT-5 Model Capabilities &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/GPT-5/GPT_5.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/08/a-developers-guide-to-openais-gpt-5-model-capabilities/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building an Advanced PaperQA2 Research Agent with Google Gemini for Scientific Literature Analysis &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/paperqa2_gemini_research_agent_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/09/building-an-advanced-paperqa2-research-agent-with-google-gemini-for-scientific-literature-analysis/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Code Implementation to Build a Multi-Agent Research System with OpenAI Agents, Function Tools, Handoffs, and Session Memory &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/openai_agents_multiagent_research_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/08/a-code-implementation-to-build-a-multi-agent-research-system-with-openai-agents-function-tools-handoffs-and-session-memory/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Implementation to Build a Self-Adaptive Goal-Oriented AI Agent Using Google Gemini and the SAGE Framework &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/sage_ai_agent_gemini_implementation_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/06/a-coding-implementation-to-build-a-self-adaptive-goal-oriented-ai-agent-using-google-gemini-and-the-sage-framework/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building a Multi-Agent Conversational AI Framework with Microsoft AutoGen and Gemini API &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/gemini_autogen_multiagent_framework_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/04/building-a-multi-agent-conversational-ai-framework-with-microsoft-autogen-and-gemini-api/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide to Build an Intelligent Conversational AI Agent with Agent Memory Using Cognee and Free Hugging Face Models &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/Cognee_Agent_Tutorial_with_HuggingFace_Integration_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/31/a-coding-guide-to-build-an-intelligent-conversational-ai-agent-with-agent-memory-using-cognee-and-free-hugging-face-models/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide to Build a Scalable Multi-Agent System with Google ADK &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/advanced_google_adk_multi_agent_tutorial_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/30/a-coding-guide-to-build-a-scalable-multi-agent-system-with-google-adk/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide to Build a Tool-Calling ReAct Agent Fusing Prolog Logic with Gemini and LangGraph &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/prolog_gemini_langgraph_react_agent_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/24/a-coding-guide-to-build-a-tool-calling-react-agent-fusing-prolog-logic-with-gemini-and-langgraph/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide to Build an AI Code-Analysis Agent with Griffe &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/griffe_ai_code_analyzer_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/16/a-coding-guide-to-build-an-ai-code-analysis-agent-with-griffe/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Code Implementation for Designing Intelligent Multi-Agent Workflows with the BeeAI Framework &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/beeai_multi_agent_workflow_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/07/a-code-implementation-for-designing-intelligent-multi-agent-workflows-with-the-beeai-framework/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Implementing a Tool-Enabled Multi-Agent Workflow with Python, OpenAI API, and PrimisAI Nexus &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/primisai_nexus_multi_agent_workflow_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/07/implementing-a-tool-enabled-multi-agent-workflow-with-python-openai-api-and-primisai-nexus/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Getting Started with Agent Communication Protocol (ACP): Build a Weather Agent with Python &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/tree/main/Agent%20Communication%20Protocol/Getting%20Started&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/06/getting-started-with-agent-communication-protocol-acp-build-a-weather-agent-with-python/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Build a Powerful Multi-Tool AI Agent Using Nebius with Llama 3 and Real-Time Reasoning Tools &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/nebius_llama3_multitool_agent_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/27/build-a-powerful-multi-tool-ai-agent-using-nebius-with-llama-3-and-real-time-reasoning-tools/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building Production-Ready Custom AI Agents for Enterprise Workflows with Monitoring, Orchestration, and Scalability &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/production_ready_custom_ai_agents_workflows_Marktechpost.ipynb&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/22/building-production-ready-custom-ai-agents-for-enterprise-workflows-with-monitoring-orchestration-and-scalability/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building an A2A-Compliant Random Number Agent: A Step-by-Step Guide to Implementing the Low-Level Executor Pattern with Python &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/tree/main/A2A_Simple_Agent&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/21/building-an-a2a-compliant-random-number-agent-a-step-by-step-guide-to-implementing-the-low-level-executor-pattern-with-python/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Build a Low-Footprint AI Coding Assistant with Mistral Devstral &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/mistral_devstral_compact_loading_marktechpost.py&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/25/build-a-low-footprint-ai-coding-assistant-with-mistral-devstral/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ How to Build an Advanced BrightData Web Scraper with Google Gemini for AI-Powered Data Extraction &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Enhanced_BrightData_Gemini_Scraper_Tutorial_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/18/how-to-build-an-advanced-brightdata-web-scraper-with-google-gemini-for-ai-powered-data-extraction/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Build an Intelligent Multi-Tool AI Agent Interface Using Streamlit for Seamless Real-Time Interaction &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/streamlit_ai_agent_multitool_interface_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/20/build-an-intelligent-multi-tool-ai-agent-interface-using-streamlit-for-seamless-real-time-interaction/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ How to Use python-A2A to Create and Connect Financial Agents with Google’s Agent-to-Agent (A2A) Protocol &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/inflation_agent.py&#34;&gt;Notebook-inflation_agent.py&lt;/a&gt; &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/network.ipynb&#34;&gt;Notebook-network.ipynb&lt;/a&gt; &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/emi_agent.py&#34;&gt;Notebook-emi_agent.py&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/16/how-to-use-python-a2a-to-create-and-connect-financial-agents-with-googles-agent-to-agent-a2a-protocol/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Develop a Multi-Tool AI Agent with Secure Python Execution using Riza and Gemini &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/Agents/Agentic-AI/Riza_Gemini_Agent_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/11/develop-a-multi-tool-ai-agent-with-secure-python-execution-using-riza-and-gemini/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Build a Gemini-Powered DataFrame Agent for Natural Language Data Analysis with Pandas and LangChain &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Gemini_Pandas_Agent_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/10/build-a-gemini-powered-dataframe-agent-for-natural-language-data-analysis-with-pandas-and-langchain/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ How to Build an Asynchronous AI Agent Network Using Gemini for Research, Analysis, and Validation Tasks &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/gemini_agent_network_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/08/how-to-build-an-asynchronous-ai-agent-network-using-gemini-for-research-analysis-and-validation-tasks/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ How to Create Smart Multi-Agent Workflows Using the Mistral Agents API’s Handoffs Feature &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/agent_orchestration_with_mistral_agents_api.py&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/09/how-to-create-smart-multi-agent-workflows-using-the-mistral-agents-apis-handoffs-feature/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ How to Enable Function Calling in Mistral Agents Using the Standard JSON Schema Format &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/how%20to%20enable%20function%20calling%20in%20Mistral%20Agents.py&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/08/how-to-enable-function-calling-in-mistral-agents-using-the-standard-json-schema-format/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Step-by-Step Coding Guide to Building an Iterative AI Workflow Agent Using LangGraph and Gemini &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/GraphAIAgent_LangGraph_Gemini_Workflow_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/05/a-step-by-step-coding-guide-to-building-an-iterative-ai-workflow-agent-using-langgraph-and-gemini/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Implementation to Build an Advanced Web Intelligence Agent with Tavily and Gemini AI &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/smartwebagent_tavily_gemini_webintelligence_marktechpost2.py&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/03/a-coding-implementation-to-build-an-advanced-web-intelligence-agent-with-tavily-and-gemini-ai/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Hands-On Guide: Getting started with Mistral Agents API &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Getting_Started_with_Mistral_Agents_API.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/03/hands-on-guide-getting-started-with-mistral-agents-api/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide to Building a Scalable Multi-Agent Communication Systems Using Agent Communication Protocol (ACP) &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/A_Coding_Guide_to_ACP_Systems_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/31/a-coding-guide-to-building-a-scalable-multi-agent-communication-systems-using-agent-communication-protocol-acp/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide for Building a Self-Improving AI Agent Using Google’s Gemini API with Intelligent Adaptation Features &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Self_Improving_AI_Agent_with_Gemini_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/29/a-coding-guide-for-building-a-self-improving-ai-agent-using-googles-gemini-api-with-intelligent-adaptation-features/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Step-by-Step Coding Implementation of an Agent2Agent Framework for Collaborative and Critique-Driven AI Problem Solving with Consensus-Building &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/agent2agent_collaboration_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/27/a-step-by-step-coding-implementation-of-an-agent2agent-framework-for-collaborative-and-critique-driven-ai-problem-solving-with-consensus-building/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide to Building a Customizable Multi-Tool AI Agent with LangGraph and Claude for Dynamic Agent Creation &lt;a href=&#34;https://github.com/Marktechpost/AINotebooks/raw/main/Customizable_MultiTool_AI_Agent_with_Claude_Marktechpost%20(1).ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/24/step-by-step-guide-to-build-a-customizable-multi-tool-ai-agent-with-langgraph-and-claude-for-dynamic-agent-creation/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Implementation to Build an AI Agent with Live Python Execution and Automated Validation &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Live_Python_Execution_and_Validation_Agent_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/25/a-coding-implementation-to-build-an-ai-agent-with-live-python-execution-and-automated-validation/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Comprehensive Coding Guide to Crafting Advanced Round-Robin Multi-Agent Workflows with Microsoft AutoGen &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Synthetic_Data_Creation.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/23/a-comprehensive-coding-guide-to-crafting-advanced-round-robin-multi-agent-workflows-with-microsoft-autogen/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Implementation of an Intelligent AI Assistant with Jina Search, LangChain, and Gemini for Real-Time Information Retrieval &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Jina_LangChain_Gemini_AI_Assistant_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/01/a-coding-implementation-of-an-intelligent-ai-assistant-with-jina-search-langchain-and-gemini-for-real-time-information-retrieval/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h3&gt;MCPs Guides&lt;/h3&gt; &#xA;&lt;p&gt;▶ A Step-by-Step Coding Guide to Defining Custom Model Context Protocol (MCP) Server and Client Tools with FastMCP and Integrating Them into Google Gemini 2.0’s Function‑Calling Workflow &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/custom_mcp_tools_integration_with_fastmcp_marktechpost.py&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/04/21/a-step-by-step-coding-guide-to-defining-custom-model-context-protocol-mcp-server-and-client-tools-with-fastmcp-and-integrating-them-into-google-gemini-2-0s-function%e2%80%91calling-workflow/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Code Implementation to Building a Context-Aware AI Assistant in Google Colab Using LangChain, LangGraph, Gemini Pro, and Model Context Protocol (MCP) Principles with Tool Integration Support &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Context_Aware_Assistant_MCP_Gemini_LangChain_LangGraph_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/04/04/a-code-implementation-to-building-a-context-aware-ai-assistant-in-google-colab-using-langchain-langgraph-gemini-pro-and-model-context-protocol-mcp-principles-with-tool-integration-support/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Guide to Using the Desktop Commander MCP Server &lt;a href=&#34;https://www.marktechpost.com/2025/06/01/guide-to-using-the-desktop-commander-mcp-server/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h3&gt;LLMs and Other AI Section&lt;/h3&gt; &#xA;&lt;p&gt;▶ Using RouteLLM to Optimize LLM Usage &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/GPT-5/RouteLLM.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/10/using-routellm-to-optimize-llm-usage/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Tutorial: Exploring SHAP-IQ Visualizations&lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/SHAP-IQ/SHAP_IQ_Visuals.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/03/tutorial-exploring-shap-iq-visualizations/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building an End-to-End Object Tracking and Analytics System with Roboflow Supervision &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/raw/main/roboflow_supervision_advanced_tracking_analytics_pipeline_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/08/03/building-an-end-to-end-object-tracking-and-analytics-system-with-roboflow-supervision/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Getting Started with Microsoft’s Presidio: A Step-by-Step Guide to Detecting and Anonymizing Personally Identifiable Information PII in Text &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Presidio.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/24/getting-started-with-microsofts-presidio-a-step-by-step-guide-to-detecting-and-anonymizing-personally-identifiable-information-pii-in-text/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Build a Groundedness Verification Tool Using Upstage API and LangChain &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Upstage_Groundedness_Check_Tutorial_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/24/build-a-groundedness-verification-tool-using-upstage-api-and-langchain/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide to Build a Production-Ready Asynchronous Python SDK with Rate Limiting, In-Memory Caching, and Authentication &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/advanced_async_python_sdk_tutorial_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/23/a-coding-guide-to-build-a-production-ready-asynchronous-python-sdk-with-rate-limiting-in-memory-caching-and-authentication/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building High-Performance Financial Analytics Pipelines with Polars: Lazy Evaluation, Advanced Expressions, and SQL Integration &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/polars_sql_analytics_pipeline_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/17/building-high-performance-financial-analytics-pipelines-with-polars-lazy-evaluation-advanced-expressions-and-sql-integration/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Building AI-Powered Applications Using the Plan → Files → Code Workflow in TinyDev &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/tinydev_gemini_implementation_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/14/building-ai-powered-applications-using-the-plan-%e2%86%92-files-%e2%86%92-code-workflow-in-tinydev/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Comprehensive Coding Tutorial for Advanced SerpAPI Integration with Google Gemini-1.5-Flash for Advanced Analytics &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/advanced_serpapi_tutorial_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/06/a-comprehensive-coding-tutorial-for-advanced-serpapi-integration-with-google-gemini-1-5-flash-for-advanced-analytics/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Build a Secure AI Code Execution Workflow Using Daytona SDK &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/daytona_secure_ai_code_execution_tutorial_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/12/build-a-secure-ai-code-execution-workflow-using-daytona-sdk/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Guide Implementing ScrapeGraph and Gemini AI for an Automated, Scalable, Insight-Driven Competitive Intelligence and Market Analysis Workflow &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Competitive_Analysis_with_ScrapeGraph_Gemini_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/06/02/a-coding-guide-implementing-scrapegraph-and-gemini-ai-for-an-automated-scalable-insight-driven-competitive-intelligence-and-market-analysis-workflow/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ A Coding Implementation to Build an Interactive Transcript and PDF Analysis with Lyzr Chatbot Framework &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/Lyzr_Chatbot_Framework_Implementation_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/27/a-coding-implementation-to-build-an-interactive-transcript-and-pdf-analysis-with-lyzr-chatbot-framework/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Step-by-Step Guide to Creating Synthetic Data Using the Synthetic Data Vault (SDV) &lt;a href=&#34;https://github.com/Marktechpost/AI-Notebooks/raw/main/AutoGen_TeamTool_RoundRobin_Marktechpost.ipynb&#34;&gt;Notebook&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/05/25/step-by-step-guide-to-creating-synthetic-data-using-the-synthetic-data-vault-sdv/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;▶ Creating a Knowledge Graph Using an LLM &lt;a href=&#34;https://github.com/Marktechpost/AI-Tutorial-Codes-Included/tree/main/Mirascope&#34;&gt;Codes&lt;/a&gt; &lt;a href=&#34;https://www.marktechpost.com/2025/07/28/creating-a-knowledge-graph-using-an-llm/&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>