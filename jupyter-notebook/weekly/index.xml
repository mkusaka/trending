<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-29T01:55:30Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GeostatsGuy/PythonNumericalDemos</title>
    <updated>2023-10-29T01:55:30Z</updated>
    <id>tag:github.com,2023-10-29:/GeostatsGuy/PythonNumericalDemos</id>
    <link href="https://github.com/GeostatsGuy/PythonNumericalDemos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Well-documented Python demonstrations for spatial data analytics, geostatistical and machine learning to support my courses.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;img src=&#34;https://github.com/GeostatsGuy/GeostatsPy/raw/master/TCG_color_logo.png&#34; width=&#34;220&#34; height=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;PythonNumericalDemos: Educational Data Science Demonstrations Repository (1.0.0)&lt;/h1&gt; &#xA;&lt;h2&gt;Professor Michael Pyrcz, The University of Texas at Austin&lt;/h2&gt; &#xA;&lt;p&gt;A collection of Python demos for spatial data analytics, geostatistics and machine learning methods.&lt;/p&gt; &#xA;&lt;p&gt;Please cite as:&lt;/p&gt; &#xA;&lt;p&gt;Pyrcz, Michael J. (2021). PythonNumericalDemos: Educational Data Science Demonstrations Repository (1.0.0). Zenodo. &lt;a href=&#34;https://doi.org/10.5281/zenodo.5564991&#34;&gt;https://doi.org/10.5281/zenodo.5564991&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I use these demonstrations for:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;in-lecture walkthroughs&lt;/li&gt; &#xA; &lt;li&gt;hands-on experiential learning with specific tasks suggested in the accompanying lecture notes&lt;/li&gt; &#xA; &lt;li&gt;example workflows to support my students&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Other resources that you might be interested in include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GeostatsGuy/geostatsr&#34;&gt;R workflow repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GeostatsGuy/ExcelNumericalDemos&#34;&gt;Excel workflow repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GeostatsGuy/GeostatsPy&#34;&gt;GeostatsPy package&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While I have more than 20 years experience coding in FORTRAN, C++ and VBA, I just started with Python a couple of years ago. I love it. I code less and get more done! I recommend Python to any engineers or scientists. Here&#39;s some reasons to learn to code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Transparency&lt;/strong&gt; – no compiler accepts hand waiving! Coding forces your logic to be uncovered for any other scientist or engineer to review.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reproducibility&lt;/strong&gt; – run it, get an answer, hand it over, run it, get the same answer. This is a main principle of the scientific method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quantification&lt;/strong&gt; – programs need numbers. Feed the program and discover new ways to look at the world.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open-source&lt;/strong&gt; – leverage a world of brilliance. Check out packages, snippets and be amazed with what great minds have freely shared.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Break Down Barriers&lt;/strong&gt; – don’t throw it over the fence. Sit at the table with the developers and share more of your subject matter expertise for a better product.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt; – share it with others and multiply the impact. Performance metrics or altruism, your good work benefits many others.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficiency&lt;/strong&gt; – minimize the boring parts of the job. Build a suite of scripts for automation of common tasks and spend more time doing science and engineering!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Always Time to Do it Again!&lt;/strong&gt; – how many times did you only do it once? It probably takes 2-4 times as long to script and automate a workflow. Usually worth it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Be Like Us&lt;/strong&gt; – it will change you. Users feel limited, programmers truly harness the power of their applications and hardware.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Alright, that is enough of my ranting. Especially, since I haven&#39;t even introduced myself yet!&lt;/p&gt; &#xA;&lt;h4&gt;The Author:&lt;/h4&gt; &#xA;&lt;h3&gt;Michael Pyrcz, Associate Professor, University of Texas at Austin&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Novel Data Analytics, Geostatistics and Machine Learning Subsurface Solutions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;With over 17 years of experience in subsurface consulting, research and development, Michael has returned to academia driven by his passion for teaching and enthusiasm for enhancing engineers&#39; and geoscientists&#39; impact in subsurface resource development.&lt;/p&gt; &#xA;&lt;p&gt;For more about Michael check out these links:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://twitter.com/geostatsguy&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/GeostatsGuy&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;http://michaelpyrcz.com&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://scholar.google.com/citations?user=QVZ20eQAAAAJ&amp;amp;hl=en&amp;amp;oi=ao&#34;&gt;GoogleScholar&lt;/a&gt; | &lt;a href=&#34;https://www.amazon.com/Geostatistical-Reservoir-Modeling-Michael-Pyrcz/dp/0199731446&#34;&gt;Book&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/channel/UCLqEr-xV-ceHdXXXrTId5ig&#34;&gt;YouTube&lt;/a&gt; | &lt;a href=&#34;https://www.linkedin.com/in/michael-pyrcz-61a648a1&#34;&gt;LinkedIn&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Want to Work Together?&lt;/h4&gt; &#xA;&lt;p&gt;I hope this content is helpful to those that want to learn more about subsurface modeling, data analytics and machine learning. Students and working professionals are welcome to participate.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Want to invite me to visit your company for training, mentoring, project review, workflow design and / or consulting? I&#39;d be happy to drop by and work with you!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interested in partnering, supporting my graduate student research or my Subsurface Data Analytics and Machine Learning consortium (co-PIs including Profs. Foster, Torres-Verdin and van Oort)? My research combines data analytics, stochastic modeling and machine learning theory with practice to develop novel methods and workflows to add value. We are solving challenging subsurface problems!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I can be reached at &lt;a href=&#34;mailto:mpyrcz@austin.utexas.edu&#34;&gt;mpyrcz@austin.utexas.edu&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;m always happy to discuss,&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Michael&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Michael Pyrcz, Ph.D., P.Eng. Associate Professor The Hildebrand Department of Petroleum and Geosystems Engineering, Bureau of Economic Geology, The Jackson School of Geosciences, The University of Texas at Austin&lt;/p&gt; &#xA;&lt;h4&gt;More Resources Available at: &lt;a href=&#34;https://twitter.com/geostatsguy&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/GeostatsGuy&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;http://michaelpyrcz.com&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://scholar.google.com/citations?user=QVZ20eQAAAAJ&amp;amp;hl=en&amp;amp;oi=ao&#34;&gt;GoogleScholar&lt;/a&gt; | &lt;a href=&#34;https://www.amazon.com/Geostatistical-Reservoir-Modeling-Michael-Pyrcz/dp/0199731446&#34;&gt;Book&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/channel/UCLqEr-xV-ceHdXXXrTId5ig&#34;&gt;YouTube&lt;/a&gt; | &lt;a href=&#34;https://www.linkedin.com/in/michael-pyrcz-61a648a1&#34;&gt;LinkedIn&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>Deci-AI/super-gradients</title>
    <updated>2023-10-29T01:55:30Z</updated>
    <id>tag:github.com,2023-10-29:/Deci-AI/super-gradients</id>
    <link href="https://github.com/Deci-AI/super-gradients" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily train or fine-tune SOTA computer vision models with one open source training library. The home of Yolo-NAS.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; markdown=&#34;1&#34;&gt; &#xA; &lt;img src=&#34;documentation/assets/SG_img/SG - Horizontal Glow 2.png&#34; width=&#34;600&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;strong&gt;Build, train, and fine-tune production-ready deep learning SOTA vision models&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=Easily%20train%20or%20fine-tune%20SOTA%20computer%20vision%20models%20from%20one%20training%20repository&amp;amp;url=https://github.com/Deci-AI/super-gradients&amp;amp;via=deci_ai&amp;amp;hashtags=AI,deeplearning,computervision,training,opensource&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h4&gt;Version 3 is out! Notebooks have been updated!&lt;/h4&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.supergradients.com/&#34;&gt;Website&lt;/a&gt; • &lt;a href=&#34;https://docs.deci.ai/super-gradients/documentation/source/welcome.html&#34;&gt;Docs&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#implemented-model-architectures&#34;&gt;Pretrained Models&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#community&#34;&gt;Community&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#license&#34;&gt;License&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#deci-platform&#34;&gt;Deci Platform&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Deci-AI/super-gradients#prerequisites&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9-blue&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients#prerequisites&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pytorch-1.9%20%7C%201.10-blue&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://pypi.org/project/super-gradients/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/super-gradients&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients#computer-vision-models-pretrained-checkpoints&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pre--trained%20models-34-brightgreen&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Deci-AI/super-gradients&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://join.slack.com/t/supergradients-comm52/shared_invite/zt-10vz6o1ia-b_0W5jEPEnuHXm087K~t8Q&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-community-blueviolet&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-blue&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://docs.deci.ai/super-gradients/documentation/source/welcome.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-mkdocs-brightgreen&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Build with SuperGradients&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Support various computer vision tasks&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/Deci-AI/super-gradients/raw/master/documentation/assets/SG_img/Segmentation 1500x900 .png&#34; width=&#34;250px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/Deci-AI/super-gradients/raw/master/documentation/assets/SG_img/Object detection 1500X900.png&#34; width=&#34;250px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/Deci-AI/super-gradients/raw/master/documentation/assets/SG_img/Classification 1500x900.png&#34; width=&#34;250px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/Deci-AI/super-gradients/raw/master/documentation/assets/SG_img/PoseEstimation.jpg&#34; width=&#34;250px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Ready to deploy pre-trained SOTA models&lt;/h3&gt; &#xA;&lt;p&gt;YOLO-NAS architecture is out! The new YOLO-NAS delivers state-of-the-art performance with the unparalleled accuracy-speed performance, outperforming other models such as YOLOv5, YOLOv6, YOLOv7 and YOLOv8. Check it out here: &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/YOLONAS.md&#34;&gt;YOLO-NAS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/source/images/yolo_nas_frontier.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load model with pretrained weights&#xA;from super_gradients.training import models&#xA;from super_gradients.common.object_names import Models&#xA;&#xA;model = models.get(Models.YOLO_NAS_M, pretrained_weights=&#34;coco&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;All Computer Vision Models - Pretrained Checkpoints can be found in the &lt;a href=&#34;http://bit.ly/41dkt89&#34;&gt;Model Zoo&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Classification&lt;/h4&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/Classification@2xDark.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Semantic Segmentation&lt;/h4&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;./documentation/assets/SG_img/Semantic Segmentation@2xDark.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Object Detection&lt;/h4&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;./documentation/assets/SG_img/Object Detection@2xDark.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Easy to train SOTA Models&lt;/h3&gt; &#xA;&lt;p&gt;Easily load and fine-tune production-ready, pre-trained SOTA models that incorporate best practices and validated hyper-parameters for achieving best-in-class accuracy. For more information on how to do it go to &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Plug and play recipes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m super_gradients.train_from_recipe architecture=regnetY800 dataset_interface.data_dir=&amp;lt;YOUR_Imagenet_LOCAL_PATH&amp;gt; ckpt_root_dir=&amp;lt;CHEKPOINT_DIRECTORY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More example on how and why to use recipes can be found in &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#recipes&#34;&gt;Recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Production readiness&lt;/h3&gt; &#xA;&lt;p&gt;All SuperGradients models’ are production ready in the sense that they are compatible with deployment tools such as TensorRT (Nvidia) and OpenVINO (Intel) and can be easily taken into production. With a few lines of code you can easily integrate the models into your codebase.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load model with pretrained weights&#xA;from super_gradients.training import models&#xA;from super_gradients.common.object_names import Models&#xA;&#xA;model = models.get(Models.YOLO_NAS_M, pretrained_weights=&#34;coco&#34;)&#xA;&#xA;# Prepare model for conversion&#xA;# Input size is in format of [Batch x Channels x Width x Height] where 640 is the standard COCO dataset dimensions&#xA;model.eval()&#xA;model.prep_model_for_conversion(input_size=[1, 3, 640, 640])&#xA;    &#xA;# Create dummy_input&#xA;&#xA;# Convert model to onnx&#xA;torch.onnx.export(model, dummy_input,  &#34;yolo_nas_m.onnx&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information on how to take your model to production can be found in &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; notebooks&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install super-gradients&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What&#39;s New&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Version 3.1.3 (July 19, 2023)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.deci.ai/super-gradients/documentation/source/PoseEstimation.html&#34;&gt;Pose Estimation Task Support&lt;/a&gt; - Check out fine-tuning &lt;a href=&#34;https://colab.research.google.com/drive/1NMGzx8NdycIZqnRlZKJZrIOqyj0MFzJE#scrollTo=3UZJqTehg0On&#34;&gt;notebook example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pre-trained modified &lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/recipes/coco2017_pose_dekr_w32_no_dc.yaml&#34;&gt;DEKR&lt;/a&gt; model for pose estimation (TensorRT-compatible)&lt;/li&gt; &#xA; &lt;li&gt;Support for Python 3.10&lt;/li&gt; &#xA; &lt;li&gt;Support for torch.compile&lt;/li&gt; &#xA; &lt;li&gt;Other bugfixes &amp;amp; minor improvements. Check out &lt;a href=&#34;https://github.com/Deci-AI/super-gradients/releases/tag/3.1.3&#34;&gt;release notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;30th of May&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/3MIKdTy&#34;&gt;Quantization Aware Training YoloNAS on Custom Dataset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 3.1.1 (May 3rd)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/41WeNPZ&#34;&gt;YOLO-NAS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;New &lt;a href=&#34;https://bit.ly/3oZfaea&#34;&gt;predict function&lt;/a&gt; (predict on any image, video, url, path, stream)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/40YOJ5z&#34;&gt;RoboFlow100&lt;/a&gt; datasets integration&lt;/li&gt; &#xA; &lt;li&gt;A new &lt;a href=&#34;https://docs.deci.ai/super-gradients/documentation/source/welcome.html&#34;&gt;Documentation Hub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://bit.ly/3ALFUkQ&#34;&gt;DagsHub for experiment monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;a href=&#34;https://bit.ly/41VX6Qu&#34;&gt;Darknet/Yolo format detection dataset&lt;/a&gt; (used by Yolo v5, v6, v7, v8)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/3oYu6Jp&#34;&gt;Segformer&lt;/a&gt; model and recipe&lt;/li&gt; &#xA; &lt;li&gt;Post Training Quantization and Quantization Aware Training - &lt;a href=&#34;http://bit.ly/3KrN6an&#34;&gt;notebooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out SG full &lt;a href=&#34;https://github.com/Deci-AI/super-gradients/releases&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Coming soon&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pre-trained pose estimation model&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test Time Augmentations (TTA)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Recipe to train DEKR model(convertable to TRT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Key-points Rescoring for Pose estimation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; LR finder&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Data analysis tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Content&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#advanced-features&#34;&gt;Advanced Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#installation-methods&#34;&gt;Installation Methods&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#quick-installation&#34;&gt;Quick Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#implemented-model-architectures&#34;&gt;Implemented Model Architectures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/#deci-platform&#34;&gt;Deci Platform&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Start Training with Just 1 Command Line&lt;/h3&gt; &#xA;&lt;p&gt;The most simple and straightforward way to start training SOTA performance models with SuperGradients reproducible recipes. Just define your dataset path and where you want your checkpoints to be saved and you are good to go from your terminal!&lt;/p&gt; &#xA;&lt;p&gt;Just make sure that you &lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/Dataset_Setup_Instructions.md&#34;&gt;setup your dataset&lt;/a&gt; according to the data dir specified in the recipe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m super_gradients.train_from_recipe --config-name=imagenet_regnetY architecture=regnetY800 dataset_interface.data_dir=&amp;lt;YOUR_Imagenet_LOCAL_PATH&amp;gt; ckpt_root_dir=&amp;lt;CHEKPOINT_DIRECTORY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quickly Load Pre-Trained Weights for Your Desired Model with SOTA Performance&lt;/h3&gt; &#xA;&lt;p&gt;Want to try our pre-trained models on your machine? Import SuperGradients, initialize your Trainer, and load your desired architecture and pre-trained weights from our &lt;a href=&#34;http://bit.ly/41dkt89&#34;&gt;SOTA model zoo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# The pretrained_weights argument will load a pre-trained architecture on the provided dataset&#xA;    &#xA;import super_gradients&#xA;&#xA;model = models.get(&#34;model-name&#34;, pretrained_weights=&#34;pretrained-model-name&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Classification&lt;/h3&gt; &#xA;&lt;h4&gt;Transfer Learning&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3xzIutb&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Classification Transfer Learning&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;200&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3xwYEn1&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/GitHub_logo.png&#34;&gt; GitHub source&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h3&gt;Semantic Segmentation&lt;/h3&gt; &#xA;&lt;h4&gt;Quick Start&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3qKx9m8&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Segmentation Quick Start&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h4&gt;Transfer Learning&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3qKwMbe&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Segmentation Transfer Learning&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h4&gt;How to Connect Custom Dataset&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3QQBVJp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Segmentation How to Connect Custom Dataset&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h3&gt;Pose Estimation&lt;/h3&gt; &#xA;&lt;h4&gt;Transfer Learning&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://colab.research.google.com/drive/1NMGzx8NdycIZqnRlZKJZrIOqyj0MFzJE#scrollTo=3UZJqTehg0On&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Pose Estimation Transfer Learning &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h3&gt;Object Detection&lt;/h3&gt; &#xA;&lt;h4&gt;Transfer Learning&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3SkMohx&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Detection Transfer Learning&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h4&gt;How to Connect Custom Dataset&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3dqDlg3&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Detection How to Connect Custom Dataset&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h3&gt;How to Predict Using Pre-trained Model&lt;/h3&gt; &#xA;&lt;h4&gt;Segmentation, Detection and Classification Prediction&lt;/h4&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3f4mssd&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; How to Predict Using Pre-trained Model&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h2&gt;Advanced Features&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Post Training Quantization and Quantization Aware Training&lt;/h3&gt; &#xA;&lt;p&gt;Quantization involves representing weights and biases in lower precision, resulting in reduced memory and computational requirements, making it useful for deploying models on devices with limited resources. The process can be done during training, called Quantization aware training, or after training, called post-training quantization. A full tutorial can be found &lt;a href=&#34;http://bit.ly/41hC8uI&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table class=&#34;“tfo-notebook-buttons”&#34; align=&#34;“left”&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;“500”&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://bit.ly/3KrN6an&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Post Training Quantization and Quantization Aware Training&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Quantization Aware Training YoloNAS on Custom Dataset&lt;/h3&gt; &#xA;&lt;p&gt;This tutorial provides a comprehensive guide on how to fine-tune a YoloNAS model using a custom dataset. It also demonstrates how to utilize SG&#39;s QAT (Quantization-Aware Training) support. Additionally, it offers step-by-step instructions on deploying the model and performing benchmarking.&lt;/p&gt; &#xA;&lt;table class=&#34;“tfo-notebook-buttons”&#34; align=&#34;“left”&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;“500”&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3MIKdTy&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Quantization Aware Training YoloNAS on Custom Dataset&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Knowledge Distillation Training&lt;/h3&gt; &#xA;&lt;p&gt;Knowledge Distillation is a training technique that uses a large model, teacher model, to improve the performance of a smaller model, the student model. Learn more about SuperGradients knowledge distillation training with our pre-trained BEiT base teacher model and Resnet18 student model on CIFAR10 example notebook on Google Colab for an easy to use tutorial using free GPU hardware&lt;/p&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3BLA5oR&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; Knowledge Distillation Training&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h3&gt;Recipes&lt;/h3&gt; &#xA;&lt;p&gt;To train a model, it is necessary to configure 4 main components. These components are aggregated into a single &#34;main&#34; recipe &lt;code&gt;.yaml&lt;/code&gt; file that inherits the aforementioned dataset, architecture, raining and checkpoint params. It is also possible (and recomended for flexibility) to override default settings with custom ones. All recipes can be found &lt;a href=&#34;http://bit.ly/3gfLw07&#34;&gt;here&lt;/a&gt; &lt;br&gt; Recipes support out of the box every model, metric or loss that is implemented in SuperGradients, but you can easily extend this to any custom object that you need by &#34;registering it&#34;. Check out &lt;a href=&#34;http://bit.ly/3TQ4iZB&#34;&gt;this&lt;/a&gt; tutorial for more information.&lt;/p&gt; &#xA;&lt;table class=&#34;tfo-notebook-buttons&#34; align=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td width=&#34;500&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://bit.ly/3UiY5ab&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/documentation/assets/SG_img/colab_logo.png&#34;&gt; How to Use Recipes&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Using Distributed Data Parallel (DDP) &lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Why use DDP ?&lt;/h4&gt; &#xA; &lt;p&gt;Recent Deep Learning models are growing larger and larger to an extent that training on a single GPU can take weeks. In order to train models in a timely fashion, it is necessary to train them with multiple GPUs. Using 100s GPUs can reduce training time of a model from a week to less than an hour.&lt;/p&gt; &#xA; &lt;h4&gt;How does it work ?&lt;/h4&gt; &#xA; &lt;p&gt;Each GPU has its own process, which controls a copy of the model and which loads its own mini-batch from disk and sends it to its GPU during training. After the forward pass is completed on every GPU, the gradient is reduced across all GPUs, yielding to all the GPUs having the same gradient locally. This leads to the model weights to stay synchronized across all GPUs after the backward pass.&lt;/p&gt; &#xA; &lt;h4&gt;How to use it ?&lt;/h4&gt; &#xA; &lt;p&gt;You can use SuperGradients to train your model with DDP in just a few lines.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;main.py&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients import init_trainer, Trainer&#xA;from super_gradients.common import MultiGPUMode&#xA;from super_gradients.training.utils.distributed_training_utils import setup_device&#xA;&#xA;# Initialize the environment&#xA;init_trainer()&#xA;&#xA;# Launch DDP on 4 GPUs&#39;&#xA;setup_device(multi_gpu=MultiGPUMode.DISTRIBUTED_DATA_PARALLEL, num_gpus=4)&#xA;&#xA;# Call the trainer&#xA;Trainer(expriment_name=...)&#xA;&#xA;# Everything you do below will run on 4 gpus&#xA;&#xA;...&#xA;&#xA;Trainer.train(...)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Finally, you can launch your distributed training with a simple python call.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Please note that if you work with &lt;code&gt;torch&amp;lt;1.9.0&lt;/code&gt; (deprecated), you will have to launch your training with either &lt;code&gt;torch.distributed.launch&lt;/code&gt; or &lt;code&gt;torchrun&lt;/code&gt;, in which case &lt;code&gt;nproc_per_node&lt;/code&gt; will overwrite the value set with &lt;code&gt;gpu_mode&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m torch.distributed.launch --nproc_per_node=4 main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc_per_node=4 main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Calling functions on a single node&lt;/h4&gt; &#xA; &lt;p&gt;It is often in DDP training that we want to execute code on the master rank (i.e rank 0). In SG, users usually execute their own code by triggering &#34;Phase Callbacks&#34; (see &#34;Using phase callbacks&#34; section below). One can make sure the desired code will only be ran on rank 0, using ddp_silent_mode or the multi_process_safe decorator. For example, consider the simple phase callback below, that uploads the first 3 images of every batch during training to the Tensorboard:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients.training.utils.callbacks import PhaseCallback, PhaseContext, Phase&#xA;from super_gradients.common.environment.env_helpers import multi_process_safe&#xA;&#xA;class Upload3TrainImagesCalbback(PhaseCallback):&#xA;    def __init__(&#xA;        self,&#xA;    ):&#xA;        super().__init__(phase=Phase.TRAIN_BATCH_END)&#xA;    &#xA;    @multi_process_safe&#xA;    def __call__(self, context: PhaseContext):&#xA;        batch_imgs = context.inputs.cpu().detach().numpy()&#xA;        tag = &#34;batch_&#34; + str(context.batch_idx) + &#34;_images&#34;&#xA;        context.sg_logger.add_images(tag=tag, images=batch_imgs[: 3], global_step=context.epoch)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The @multi_process_safe decorator ensures that the callback will only be triggered by rank 0. Alternatively, this can also be done by the SG trainer boolean attribute (which the phase context has access to), ddp_silent_mode, which is set to False iff the current process rank is zero (even after the process group has been killed):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients.training.utils.callbacks import PhaseCallback, PhaseContext, Phase&#xA;&#xA;class Upload3TrainImagesCalbback(PhaseCallback):&#xA;    def __init__(&#xA;        self,&#xA;    ):&#xA;        super().__init__(phase=Phase.TRAIN_BATCH_END)&#xA;&#xA;    def __call__(self, context: PhaseContext):&#xA;        if not context.ddp_silent_mode:&#xA;            batch_imgs = context.inputs.cpu().detach().numpy()&#xA;            tag = &#34;batch_&#34; + str(context.batch_idx) + &#34;_images&#34;&#xA;            context.sg_logger.add_images(tag=tag, images=batch_imgs[: 3], global_step=context.epoch)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note that ddp_silent_mode can be accessed through SgTrainer.ddp_silent_mode. Hence, it can be used in scripts after calling SgTrainer.train() when some part of it should be ran on rank 0 only.&lt;/p&gt; &#xA; &lt;h4&gt;Good to know&lt;/h4&gt; &#xA; &lt;p&gt;Your total batch size will be (number of gpus x batch size), so you might want to increase your learning rate. There is no clear rule, but a rule of thumb seems to be to &lt;a href=&#34;https://arxiv.org/pdf/1706.02677.pdf&#34;&gt;linearly increase the learning rate with the number of gpus&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;&lt;h3&gt; Easily change architectures parameters &lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients.training import models&#xA;&#xA;# instantiate default pretrained resnet18&#xA;default_resnet18 = models.get(model_name=&#34;resnet18&#34;, num_classes=100, pretrained_weights=&#34;imagenet&#34;)&#xA;&#xA;# instantiate pretrained resnet18, turning DropPath on with probability 0.5&#xA;droppath_resnet18 = models.get(model_name=&#34;resnet18&#34;, arch_params={&#34;droppath_prob&#34;: 0.5}, num_classes=100, pretrained_weights=&#34;imagenet&#34;)&#xA;&#xA;# instantiate pretrained resnet18, without classifier head. Output will be from the last stage before global pooling&#xA;backbone_resnet18 = models.get(model_name=&#34;resnet18&#34;, arch_params={&#34;backbone_mode&#34;: True}, pretrained_weights=&#34;imagenet&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;&lt;h3&gt; Using phase callbacks &lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients import Trainer&#xA;from torch.optim.lr_scheduler import ReduceLROnPlateau&#xA;from super_gradients.training.utils.callbacks import Phase, LRSchedulerCallback&#xA;from super_gradients.training.metrics.classification_metrics import Accuracy&#xA;&#xA;# define PyTorch train and validation loaders and optimizer&#xA;&#xA;# define what to be called in the callback&#xA;rop_lr_scheduler = ReduceLROnPlateau(optimizer, mode=&#34;max&#34;, patience=10, verbose=True)&#xA;&#xA;# define phase callbacks, they will fire as defined in Phase&#xA;phase_callbacks = [LRSchedulerCallback(scheduler=rop_lr_scheduler,&#xA;                                       phase=Phase.VALIDATION_EPOCH_END,&#xA;                                       metric_name=&#34;Accuracy&#34;)]&#xA;&#xA;# create a trainer object, look the declaration for more parameters&#xA;trainer = Trainer(&#34;experiment_name&#34;)&#xA;&#xA;# define phase_callbacks as part of the training parameters&#xA;train_params = {&#34;phase_callbacks&#34;: phase_callbacks}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;&lt;h3&gt; Integration to DagsHub &lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/11fW56pMpwOMHQSbQW6xxMRYvw1mEC-t-?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients import Trainer&#xA;&#xA;trainer = Trainer(&#34;experiment_name&#34;)&#xA;model = ...&#xA;&#xA;training_params = { ...  # Your training params&#xA;                   &#34;sg_logger&#34;: &#34;dagshub_sg_logger&#34;,  # DagsHub Logger, see class super_gradients.common.sg_loggers.dagshub_sg_logger.DagsHubSGLogger for details&#xA;                   &#34;sg_logger_params&#34;:  # Params that will be passes to __init__ of the logger super_gradients.common.sg_loggers.dagshub_sg_logger.DagsHubSGLogger&#xA;                     {&#xA;                       &#34;dagshub_repository&#34;: &#34;&amp;lt;REPO_OWNER&amp;gt;/&amp;lt;REPO_NAME&amp;gt;&#34;, # Optional: Your DagsHub project name, consisting of the owner name, followed by &#39;/&#39;, and the repo name. If this is left empty, you&#39;ll be prompted in your run to fill it in manually.&#xA;                       &#34;log_mlflow_only&#34;: False, # Optional: Change to true to bypass logging to DVC, and log all artifacts only to MLflow  &#xA;                       &#34;save_checkpoints_remote&#34;: True,&#xA;                       &#34;save_tensorboard_remote&#34;: True,&#xA;                       &#34;save_logs_remote&#34;: True,&#xA;                     }&#xA;                   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt; Integration to Weights and Biases &lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients import Trainer&#xA;&#xA;# create a trainer object, look the declaration for more parameters&#xA;trainer = Trainer(&#34;experiment_name&#34;)&#xA;&#xA;train_params = { ... # training parameters&#xA;                &#34;sg_logger&#34;: &#34;wandb_sg_logger&#34;, # Weights&amp;amp;Biases Logger, see class WandBSGLogger for details&#xA;                &#34;sg_logger_params&#34;: # paramenters that will be passes to __init__ of the logger &#xA;                  {&#xA;                    &#34;project_name&#34;: &#34;project_name&#34;, # W&amp;amp;B project name&#xA;                    &#34;save_checkpoints_remote&#34;: True&#xA;                    &#34;save_tensorboard_remote&#34;: True&#xA;                    &#34;save_logs_remote&#34;: True&#xA;                  } &#xA;               }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;&lt;h3&gt; Integration to ClearML &lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from super_gradients import Trainer&#xA;&#xA;# create a trainer object, look the declaration for more parameters&#xA;trainer = Trainer(&#34;experiment_name&#34;)&#xA;&#xA;train_params = { ... # training parameters&#xA;                &#34;sg_logger&#34;: &#34;clearml_sg_logger&#34;, # ClearML Logger, see class ClearMLSGLogger for details&#xA;                &#34;sg_logger_params&#34;: # paramenters that will be passes to __init__ of the logger &#xA;                  {&#xA;                    &#34;project_name&#34;: &#34;project_name&#34;, # ClearML project name&#xA;                    &#34;save_checkpoints_remote&#34;: True,&#xA;                    &#34;save_tensorboard_remote&#34;: True,&#xA;                    &#34;save_logs_remote&#34;: True,&#xA;                  } &#xA;               }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installation Methods&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;General requirements&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Python 3.7, 3.8 or 3.9 installed.&lt;/li&gt; &#xA;  &lt;li&gt;1.9.0 &amp;lt;= torch &amp;lt; 1.14 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;The python packages that are specified in requirements.txt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;To train on nvidia GPUs&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-11.2.0-download-archive?target_os=Linux&amp;amp;target_arch=x86_64&amp;amp;target_distro=Ubuntu&#34;&gt;Nvidia CUDA Toolkit &amp;gt;= 11.2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;CuDNN &amp;gt;= 8.1.x&lt;/li&gt; &#xA;  &lt;li&gt;Nvidia Driver with CUDA &amp;gt;= 11.2 support (≥460.x)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Quick Installation&lt;/h3&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;Install stable version using PyPi&lt;/summary&gt; &#xA; &lt;p&gt;See in &lt;a href=&#34;https://pypi.org/project/super-gradients/&#34;&gt;PyPi&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install super-gradients&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;That&#39;s it !&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;Install using GitHub&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/Deci-AI/super-gradients.git@stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Implemented Model Architectures&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;All Computer Vision Models - Pretrained Checkpoints can be found in the &lt;a href=&#34;http://bit.ly/41dkt89&#34;&gt;Model Zoo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image Classification&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/densenet.py&#34;&gt;DensNet (Densely Connected Convolutional Networks)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/dpn.py&#34;&gt;DPN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/efficientnet.py&#34;&gt;EfficientNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/lenet.py&#34;&gt;LeNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/mobilenet.py&#34;&gt;MobileNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/mobilenetv2.py&#34;&gt;MobileNet v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/mobilenetv3.py&#34;&gt;MobileNet v3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/pnasnet.py&#34;&gt;PNASNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/preact_resnet.py&#34;&gt;Pre-activation ResNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/regnet.py&#34;&gt;RegNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/repvgg.py&#34;&gt;RepVGG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/resnet.py&#34;&gt;ResNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/resnext.py&#34;&gt;ResNeXt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/senet.py&#34;&gt;SENet &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/shufflenet.py&#34;&gt;ShuffleNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/shufflenetv2.py&#34;&gt;ShuffleNet v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/classification_models/vgg.py&#34;&gt;VGG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Semantic Segmentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/3RrtMMO&#34;&gt;PP-LiteSeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/segmentation_models/ddrnet.py&#34;&gt;DDRNet (Deep Dual-resolution Networks)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/segmentation_models/laddernet.py&#34;&gt;LadderNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/segmentation_models/regseg.py&#34;&gt;RegSeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/segmentation_models/shelfnet.py&#34;&gt;ShelfNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/segmentation_models/stdc.py&#34;&gt;STDC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Object Detection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/detection_models/csp_darknet53.py&#34;&gt;CSP DarkNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/detection_models/darknet53.py&#34;&gt;DarkNet-53&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/detection_models/ssd.py&#34;&gt;SSD (Single Shot Detector)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/detection_models/yolox.py&#34;&gt;YOLOX&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pose Estimation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/models/pose_estimation_models/dekr_hrnet.py&#34;&gt;DEKR-W32-NO-DC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Implemented Datasets&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Deci provides implementation for various datasets. If you need to download any of the dataset, you can &lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/Dataset_Setup_Instructions.md&#34;&gt;find instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Classification&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/classification_datasets/cifar.py&#34;&gt;Cifar10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/classification_datasets/imagenet_dataset.py&#34;&gt;ImageNet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Semantic Segmentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/segmentation_datasets/cityscape_segmentation.py&#34;&gt;Cityscapes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/segmentation_datasets/coco_segmentation.py&#34;&gt;Coco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/segmentation_datasets/pascal_voc_segmentation.py&#34;&gt;PascalVOC 2012 / PascalAUG 2012&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/segmentation_datasets/supervisely_persons_segmentation.py&#34;&gt;SuperviselyPersons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/segmentation_datasets/mapillary_dataset.py&#34;&gt;Mapillary Vistas Dataset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Object Detection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/detection_datasets/coco_detection.py&#34;&gt;Coco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/master/src/super_gradients/training/datasets/detection_datasets/pascal_voc_detection.py&#34;&gt;PascalVOC 2007 &amp;amp; 2012&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pose Estimation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/raw/cadcfdd64e7808d21cccddbfaeb26acb8267699b/src/super_gradients/recipes/dataset_params/coco_pose_estimation_dekr_dataset_params.yaml&#34;&gt;COCO&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check SuperGradients &lt;a href=&#34;https://docs.deci.ai/super-gradients/documentation/source/welcome.html&#34;&gt;Docs&lt;/a&gt; for full documentation, user guide, and examples.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To learn about making a contribution to SuperGradients, please see our &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/CONTRIBUTING.md&#34;&gt;Contribution page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our awesome contributors:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/Deci-AI/super-gradients/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=Deci-AI/super-gradients&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;br&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you are using SuperGradients library or benchmarks in your research, please cite SuperGradients deep learning training library.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;If you want to be a part of SuperGradients growing community, hear about all the exciting news and updates, need help, request for advanced features, or want to file a bug or issue report, we would love to welcome you aboard!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Discord is the place to be and ask questions about SuperGradients and get support. &lt;a href=&#34;https://discord.gg/2v6cEGMREN&#34;&gt;Click here to join our Discord Community&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To report a bug, &lt;a href=&#34;https://github.com/Deci-AI/super-gradients/issues&#34;&gt;file an issue&lt;/a&gt; on GitHub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Join the &lt;a href=&#34;https://www.supergradients.com/#Newsletter&#34;&gt;SG Newsletter&lt;/a&gt; for staying up to date with new features and models, important announcements, and upcoming events.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For a short meeting with us, use this &lt;a href=&#34;https://calendly.com/ofer-baratz-deci/15min&#34;&gt;link&lt;/a&gt; and choose your preferred time.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is released under the &lt;a href=&#34;https://raw.githubusercontent.com/Deci-AI/super-gradients/master/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citing&lt;/h2&gt; &#xA;&lt;h3&gt;BibTeX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;&#xA;@misc{supergradients,&#xA;  doi = {10.5281/ZENODO.7789328},&#xA;  url = {https://zenodo.org/record/7789328},&#xA;  author = {Aharon,  Shay and {Louis-Dupont} and {Ofri Masad} and Yurkova,  Kate and {Lotem Fridman} and {Lkdci} and Khvedchenya,  Eugene and Rubin,  Ran and Bagrov,  Natan and Tymchenko,  Borys and Keren,  Tomer and Zhilko,  Alexander and {Eran-Deci}},&#xA;  title = {Super-Gradients},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  year = {2021},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Latest DOI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doi.org/10.5281/zenodo.7789328&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.7789328.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deci Platform&lt;/h2&gt; &#xA;&lt;p&gt;Deci Platform is our end to end platform for building, optimizing and deploying deep learning models to production.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bit.ly/3qO3icq&#34;&gt;Request free trial&lt;/a&gt; to enjoy immediate improvement in throughput, latency, memory footprint and model size.&lt;/p&gt; &#xA;&lt;p&gt;Features&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically compile and quantize your models with just a few clicks (TensorRT, OpenVINO).&lt;/li&gt; &#xA; &lt;li&gt;Gain up to 10X improvement in throughput, latency, memory and model size.&lt;/li&gt; &#xA; &lt;li&gt;Easily benchmark your models’ performance on different hardware and batch sizes.&lt;/li&gt; &#xA; &lt;li&gt;Invite co-workers to collaborate on models and communicate your progress.&lt;/li&gt; &#xA; &lt;li&gt;Deci supports all common frameworks and Hardware, from Intel CPUs to Nvidia&#39;s GPUs and Jetsons. ֿ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Request free trial &lt;a href=&#34;https://bit.ly/3qO3icq&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MahmoudAshraf97/whisper-diarization</title>
    <updated>2023-10-29T01:55:30Z</updated>
    <id>tag:github.com,2023-10-29:/MahmoudAshraf97/whisper-diarization</id>
    <link href="https://github.com/MahmoudAshraf97/whisper-diarization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic Speech Recognition with Speaker Diarization based on OpenAI Whisper&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Speaker Diarization Using OpenAI Whisper&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/MahmoudAshraf97/whisper-diarization/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/MahmoudAshraf97/whisper-diarization.svg?colorA=orange&amp;amp;colorB=orange&amp;amp;logo=github&#34; alt=&#34;GitHub stars&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/MahmoudAshraf97/whisper-diarization/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/MahmoudAshraf97/whisper-diarization.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/MahmoudAshraf97/whisper-diarization/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/MahmoudAshraf97/whisper-diarization.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=&amp;amp;url=https%3A%2F%2Fgithub.com%2FMahmoudAshraf97%2Fwhisper-diarization&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/url/https/github.com/MahmoudAshraf97/whisper-diarization.svg?style=social&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt;  &lt;a href=&#34;https://colab.research.google.com/github/MahmoudAshraf97/whisper-diarization/blob/main/Whisper_Transcription_%2B_NeMo_Diarization.ipynb&#34;&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Speaker Diarization pipeline based on OpenAI Whisper I&#39;d like to thank &lt;a href=&#34;https://github.com/m-bain&#34;&gt;@m-bain&lt;/a&gt; for Wav2Vec2 forced alignment, &lt;a href=&#34;https://github.com/mu4farooqi&#34;&gt;@mu4farooqi&lt;/a&gt; for punctuation realignment algorithm&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.blog/wp-content/uploads/2020/09/github-stars-logo_Color.png&#34; alt=&#34;drawing&#34; width=&#34;25&#34;&gt; &lt;strong&gt;Please, star the project on github (see top-right corner) if you appreciate my contribution to the community!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it&lt;/h2&gt; &#xA;&lt;p&gt;This repository combines Whisper ASR capabilities with Voice Activity Detection (VAD) and Speaker Embedding to identify the speaker for each sentence in the transcription generated by Whisper. First, the vocals are extracted from the audio to increase the speaker embedding accuracy, then the transcription is generated using Whisper, then the timestamps are corrected and aligned using WhisperX to help minimize diarization error due to time shift. The audio is then passed into MarbleNet for VAD and segmentation to exclude silences, TitaNet is then used to extract speaker embeddings to identify the speaker for each segment, the result is then associated with the timestamps generated by WhisperX to detect the speaker for each word based on timestamps and then realigned using punctuation models to compensate for minor time shifts.&lt;/p&gt; &#xA;&lt;p&gt;Whisper, WhisperX and NeMo parameters are coded into diarize.py and helpers.py, I will add the CLI arguments to change them later&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;FFMPEG&lt;/code&gt; and &lt;code&gt;Cython&lt;/code&gt; are needed as prerquisites to install the requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install cython&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install cython3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# on Ubuntu or Debian&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install ffmpeg&#xA;&#xA;# on Arch Linux&#xA;sudo pacman -S ffmpeg&#xA;&#xA;# on MacOS using Homebrew (https://brew.sh/)&#xA;brew install ffmpeg&#xA;&#xA;# on Windows using Chocolatey (https://chocolatey.org/)&#xA;choco install ffmpeg&#xA;&#xA;# on Windows using Scoop (https://scoop.sh/)&#xA;scoop install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python diarize.py -a AUDIO_FILE_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your system has enough VRAM (&amp;gt;=10GB), you can use &lt;code&gt;diarize_parallel.py&lt;/code&gt; instead, the difference is that it runs NeMo in parallel with Whisper, this can be benifecial in some cases and the result is the same since the two models are nondependent on each other. This is still experimental, so expect errors and sharp edges. Your feedback is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-a AUDIO_FILE_NAME&lt;/code&gt;: The name of the audio file to be processed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-stem&lt;/code&gt;: Disables source separation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--whisper-model&lt;/code&gt;: The model to be used for ASR, default is &lt;code&gt;medium.en&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--suppress_numerals&lt;/code&gt;: Transcribes numbers in their pronounced letters instead of digits, improves alignment accuracy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overlapping speakers are yet to be addressed, a possible approach would be to separate the audio file and isolate only one speaker, then feed it into the pipeline but this will need much more computation&lt;/li&gt; &#xA; &lt;li&gt;There might be some errors, please raise an issue if you encounter any.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Future Improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement a maximum length per sentence for SRT&lt;/li&gt; &#xA; &lt;li&gt;Improve Batch Processing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Special Thanks for &lt;a href=&#34;https://github.com/adamjonas&#34;&gt;@adamjonas&lt;/a&gt; for supporting this project This work is based on &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;OpenAI&#39;s Whisper&lt;/a&gt; , &lt;a href=&#34;https://github.com/guillaumekln/faster-whisper&#34;&gt;Faster Whisper&lt;/a&gt; , &lt;a href=&#34;https://github.com/NVIDIA/NeMo&#34;&gt;Nvidia NeMo&lt;/a&gt; , and &lt;a href=&#34;https://github.com/facebookresearch/demucs&#34;&gt;Facebook&#39;s Demucs&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>