<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T02:11:37Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guipsamora/pandas_exercises</title>
    <updated>2022-06-12T02:11:37Z</updated>
    <id>tag:github.com,2022-06-12:/guipsamora/pandas_exercises</id>
    <link href="https://github.com/guipsamora/pandas_exercises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Practice your pandas skills!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pandas Exercises&lt;/h1&gt; &#xA;&lt;p&gt;Fed up with a ton of tutorials but no easy way to find exercises I decided to create a repo just with exercises to practice pandas. Don&#39;t get me wrong, tutorials are great resources, but to learn is to do. So unless you practice you won&#39;t learn.&lt;/p&gt; &#xA;&lt;p&gt;There will be three different types of files:&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. Exercise instructions&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. Solutions without code&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. Solutions with code and comments&lt;/p&gt; &#xA;&lt;p&gt;My suggestion is that you learn a topic in a tutorial, video or documentation and then do the first exercises. Learn one more topic and do more exercises. If you are stuck, don&#39;t go directly to the solution with code files. Check the solutions only and try to get the correct answer.&lt;/p&gt; &#xA;&lt;p&gt;Suggestions and collaborations are more than welcome.ðŸ™‚ Please open an issue or make a PR indicating the exercise and your problem/solution.&lt;/p&gt; &#xA;&lt;h1&gt;Lessons&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#getting-and-knowing&#34;&gt;Getting and knowing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#merge&#34;&gt;Merge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#time-series&#34;&gt;Time Series&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#filtering-and-sorting&#34;&gt;Filtering and Sorting&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#stats&#34;&gt;Stats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#deleting&#34;&gt;Deleting&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#grouping&#34;&gt;Grouping&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#visualization&#34;&gt;Visualization&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Indexing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#apply&#34;&gt;Apply&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/#creating-series-and-dataframes&#34;&gt;Creating Series and DataFrames&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exporting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/01_Getting_%26_Knowing_Your_Data&#34;&gt;Getting and knowing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/01_Getting_%26_Knowing_Your_Data/Chipotle&#34;&gt;Chipotle&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/01_Getting_%26_Knowing_Your_Data/Occupation&#34;&gt;Occupation&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/01_Getting_%26_Knowing_Your_Data/World%20Food%20Facts&#34;&gt;World Food Facts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/02_Filtering_%26_Sorting&#34;&gt;Filtering and Sorting&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/02_Filtering_%26_Sorting/Chipotle&#34;&gt;Chipotle&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/02_Filtering_%26_Sorting/Euro12&#34;&gt;Euro12&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/02_Filtering_%26_Sorting/Fictional%20Army&#34;&gt;Fictional Army&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/03_Grouping&#34;&gt;Grouping&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/03_Grouping/Alcohol_Consumption&#34;&gt;Alcohol Consumption&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/03_Grouping/Occupation&#34;&gt;Occupation&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/03_Grouping/Regiment&#34;&gt;Regiment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/04_Apply&#34;&gt;Apply&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/04_Apply/Students_Alcohol_Consumption&#34;&gt;Students Alcohol Consumption&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/04_Apply/US_Crime_Rates&#34;&gt;US_Crime_Rates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/05_Merge&#34;&gt;Merge&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/05_Merge/Auto_MPG&#34;&gt;Auto_MPG&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/05_Merge/Fictitous%20Names&#34;&gt;Fictitious Names&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/05_Merge/Housing%20Market&#34;&gt;House Market&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/06_Stats&#34;&gt;Stats&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/06_Stats/US_Baby_Names&#34;&gt;US_Baby_Names&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/06_Stats/Wind_Stats&#34;&gt;Wind_Stats&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/07_Visualization&#34;&gt;Visualization&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/07_Visualization/Chipotle&#34;&gt;Chipotle&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/07_Visualization/Titanic_Desaster&#34;&gt;Titanic Disaster&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/07_Visualization/Scores&#34;&gt;Scores&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/07_Visualization/Online_Retail&#34;&gt;Online Retail&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/07_Visualization/Tips&#34;&gt;Tips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/08_Creating_Series_and_DataFrames&#34;&gt;Creating Series and DataFrames&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/08_Creating_Series_and_DataFrames/Pokemon&#34;&gt;Pokemon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/09_Time_Series&#34;&gt;Time Series&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/09_Time_Series/Apple_Stock&#34;&gt;Apple_Stock&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/09_Time_Series/Getting_Financial_Data&#34;&gt;Getting_Financial_Data&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/09_Time_Series/Getting_Financial_Data&#34;&gt;Investor_Flow_of_Funds_US&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/10_Deleting&#34;&gt;Deleting&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/10_Deleting/Iris&#34;&gt;Iris&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/guipsamora/pandas_exercises/tree/master/10_Deleting/Wine&#34;&gt;Wine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Video Solutions&lt;/h1&gt; &#xA;&lt;p&gt;Video tutorials of data scientists working through the above exercises:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pu3IpU937xs&amp;amp;list=PLgJhDSE2ZLxaY_DigHeiIDC1cD09rXgJv&#34;&gt;Data Talks - Pandas Learning By Doing&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AliaksandrSiarohin/first-order-model</title>
    <updated>2022-06-12T02:11:37Z</updated>
    <id>tag:github.com,2022-06-12:/AliaksandrSiarohin/first-order-model</id>
    <link href="https://github.com/AliaksandrSiarohin/first-order-model" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the source code for the paper First Order Motion Model for Image Animation&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;!!! Check out our new &lt;a href=&#34;https://arxiv.org/pdf/2104.11280.pdf&#34;&gt;paper&lt;/a&gt; and &lt;a href=&#34;https://github.com/snap-research/articulated-animation&#34;&gt;framework&lt;/a&gt; improved for articulated objects&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h1&gt;First Order Motion Model for Image Animation&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for the paper &lt;a href=&#34;https://papers.nips.cc/paper/8935-first-order-motion-model-for-image-animation&#34;&gt;First Order Motion Model for Image Animation&lt;/a&gt; by Aliaksandr Siarohin, &lt;a href=&#34;http://stelat.eu&#34;&gt;StÃ©phane LathuiliÃ¨re&lt;/a&gt;, &lt;a href=&#34;http://stulyakov.com&#34;&gt;Sergey Tulyakov&lt;/a&gt;, &lt;a href=&#34;http://elisaricci.eu/&#34;&gt;Elisa Ricci&lt;/a&gt; and &lt;a href=&#34;http://disi.unitn.it/~sebe/&#34;&gt;Nicu Sebe&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example animations&lt;/h2&gt; &#xA;&lt;p&gt;The videos on the left show the driving videos. The first row on the right for each dataset shows the source videos. The bottom row contains the animated sequences with motion transferred from the driving video and object taken from the source image. We trained a separate network for each task.&lt;/p&gt; &#xA;&lt;h3&gt;VoxCeleb Dataset&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AliaksandrSiarohin/first-order-model/master/sup-mat/vox-teaser.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fashion Dataset&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AliaksandrSiarohin/first-order-model/master/sup-mat/fashion-teaser.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MGIF Dataset&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AliaksandrSiarohin/first-order-model/master/sup-mat/mgif-teaser.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;We support &lt;code&gt;python3&lt;/code&gt;. To install the dependencies run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;YAML configs&lt;/h3&gt; &#xA;&lt;p&gt;There are several configuration (&lt;code&gt;config/dataset_name.yaml&lt;/code&gt;) files one for each &lt;code&gt;dataset&lt;/code&gt;. See &lt;code&gt;config/taichi-256.yaml&lt;/code&gt; to get description of each parameter.&lt;/p&gt; &#xA;&lt;h3&gt;Pre-trained checkpoint&lt;/h3&gt; &#xA;&lt;p&gt;Checkpoints can be found under following link: &lt;a href=&#34;https://drive.google.com/open?id=1PyQJmkdCsAkOYwUyaj_l-l0as-iLDgeH&#34;&gt;google-drive&lt;/a&gt; or &lt;a href=&#34;https://yadi.sk/d/lEw8uRm140L_eQ&#34;&gt;yandex-disk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Animation Demo&lt;/h3&gt; &#xA;&lt;p&gt;To run a demo, download checkpoint and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python demo.py  --config config/dataset_name.yaml --driving_video path/to/driving --source_image path/to/source --checkpoint path/to/checkpoint --relative --adapt_scale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result will be stored in &lt;code&gt;result.mp4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The driving videos and source images should be cropped before it can be used in our method. To obtain some semi-automatic crop suggestions you can use &lt;code&gt;python crop-video.py --inp some_youtube_video.mp4&lt;/code&gt;. It will generate commands for crops using ffmpeg. In order to use the script, face-alligment library is needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/1adrianb/face-alignment&#xA;cd face-alignment&#xA;pip install -r requirements.txt&#xA;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animation demo with Docker&lt;/h3&gt; &#xA;&lt;p&gt;If you are having trouble getting the demo to work because of library compatibility issues, and you&#39;re running Linux, you might try running it inside a Docker container, which would give you better control over the execution environment.&lt;/p&gt; &#xA;&lt;p&gt;Requirements: Docker 19.03+ and &lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34;&gt;nvidia-docker&lt;/a&gt; installed and able to successfully run the &lt;code&gt;nvidia-docker&lt;/code&gt; usage tests.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll first build the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t first-order-model .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now that we have the container available locally, we can use it to run the demo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm --gpus all \&#xA;       -v $HOME/first-order-model:/app first-order-model \&#xA;       python3 demo.py --config config/vox-256.yaml \&#xA;           --driving_video driving.mp4 \&#xA;           --source_image source.png  \ &#xA;           --checkpoint vox-cpk.pth.tar \ &#xA;           --result_video result.mp4 \&#xA;           --relative --adapt_scale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Colab Demo&lt;/h3&gt; &#xA;&lt;p&gt;@graphemecluster prepared a gui-demo for the google-colab see: &lt;code&gt;demo.ipynb&lt;/code&gt;. To run press &lt;code&gt;Open In Colab&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;p&gt;For old demo, see &lt;code&gt;old-demo.ipynb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Face-swap&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to modify the method to perform face-swap using supervised segmentation masks. &lt;img src=&#34;https://raw.githubusercontent.com/AliaksandrSiarohin/first-order-model/master/sup-mat/face-swap.gif&#34; alt=&#34;Screenshot&#34;&gt; For both unsupervised and supervised video editing, such as face-swap, please refer to &lt;a href=&#34;https://github.com/AliaksandrSiarohin/motion-cosegmentation&#34;&gt;Motion Co-Segmentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;To train a model on specific dataset run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0,1,2,3 python run.py --config config/dataset_name.yaml --device_ids 0,1,2,3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code will create a folder in the log directory (each run will create a time-stamped new directory). Checkpoints will be saved to this folder. To check the loss values during training see &lt;code&gt;log.txt&lt;/code&gt;. You can also check training data reconstructions in the &lt;code&gt;train-vis&lt;/code&gt; subfolder. By default the batch size is tunned to run on 2 or 4 Titan-X gpu (appart from speed it does not make much difference). You can change the batch size in the train_params in corresponding &lt;code&gt;.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation on video reconstruction&lt;/h3&gt; &#xA;&lt;p&gt;To evaluate the reconstruction performance run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0 python run.py --config config/dataset_name.yaml --mode reconstruction --checkpoint path/to/checkpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to specify the path to the checkpoint, the &lt;code&gt;reconstruction&lt;/code&gt; subfolder will be created in the checkpoint folder. The generated video will be stored to this folder, also generated videos will be stored in &lt;code&gt;png&lt;/code&gt; subfolder in loss-less &#39;.png&#39; format for evaluation. Instructions for computing metrics from the paper can be found: &lt;a href=&#34;https://github.com/AliaksandrSiarohin/pose-evaluation&#34;&gt;https://github.com/AliaksandrSiarohin/pose-evaluation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image animation&lt;/h3&gt; &#xA;&lt;p&gt;In order to animate videos run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0 python run.py --config config/dataset_name.yaml --mode animate --checkpoint path/to/checkpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to specify the path to the checkpoint, the &lt;code&gt;animation&lt;/code&gt; subfolder will be created in the same folder as the checkpoint. You can find the generated video there and its loss-less version in the &lt;code&gt;png&lt;/code&gt; subfolder. By default video from test set will be randomly paired, but you can specify the &#34;source,driving&#34; pairs in the corresponding &lt;code&gt;.csv&lt;/code&gt; files. The path to this file should be specified in corresponding &lt;code&gt;.yaml&lt;/code&gt; file in pairs_list setting.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 different ways of performing animation: by using &lt;strong&gt;absolute&lt;/strong&gt; keypoint locations or by using &lt;strong&gt;relative&lt;/strong&gt; keypoint locations.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;i&gt;Animation using absolute coordinates:&lt;/i&gt; the animation is performed using the absolute postions of the driving video and appearance of the source image. In this way there are no specific requirements for the driving video and source appearance that is used. However this usually leads to poor performance since unrelevant details such as shape is transfered. Check animate parameters in &lt;code&gt;taichi-256.yaml&lt;/code&gt; to enable this mode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AliaksandrSiarohin/first-order-model/master/sup-mat/absolute-demo.gif&#34; width=&#34;512&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;i&gt;Animation using relative coordinates:&lt;/i&gt; from the driving video we first estimate the relative movement of each keypoint, then we add this movement to the absolute position of keypoints in the source image. This keypoint along with source image is used for animation. This usually leads to better performance, however this requires that the object in the first frame of the video and in the source image have the same pose&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AliaksandrSiarohin/first-order-model/master/sup-mat/relative-demo.gif&#34; width=&#34;512&#34;&gt; &#xA;&lt;h3&gt;Datasets&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bair&lt;/strong&gt;. This dataset can be directly &lt;a href=&#34;https://yadi.sk/d/Rr-fjn-PdmmqeA&#34;&gt;downloaded&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mgif&lt;/strong&gt;. This dataset can be directly &lt;a href=&#34;https://yadi.sk/d/5VdqLARizmnj3Q&#34;&gt;downloaded&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fashion&lt;/strong&gt;. Follow the instruction on dataset downloading &lt;a href=&#34;https://vision.cs.ubc.ca/datasets/fashion/&#34;&gt;from&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Taichi&lt;/strong&gt;. Follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/AliaksandrSiarohin/first-order-model/master/data/taichi-loading/README.md&#34;&gt;data/taichi-loading&lt;/a&gt; or instructions from &lt;a href=&#34;https://github.com/AliaksandrSiarohin/video-preprocessing&#34;&gt;https://github.com/AliaksandrSiarohin/video-preprocessing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nemo&lt;/strong&gt;. Please follow the &lt;a href=&#34;https://www.uva-nemo.org/&#34;&gt;instructions&lt;/a&gt; on how to download the dataset. Then the dataset should be preprocessed using scripts from &lt;a href=&#34;https://github.com/AliaksandrSiarohin/video-preprocessing&#34;&gt;https://github.com/AliaksandrSiarohin/video-preprocessing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;VoxCeleb&lt;/strong&gt;. Please follow the instruction from &lt;a href=&#34;https://github.com/AliaksandrSiarohin/video-preprocessing&#34;&gt;https://github.com/AliaksandrSiarohin/video-preprocessing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Training on your own dataset&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Resize all the videos to the same size e.g 256x256, the videos can be in &#39;.gif&#39;, &#39;.mp4&#39; or folder with images. We recommend the later, for each video make a separate folder with all the frames in &#39;.png&#39; format. This format is loss-less, and it has better i/o performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a folder &lt;code&gt;data/dataset_name&lt;/code&gt; with 2 subfolders &lt;code&gt;train&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt;, put training videos in the &lt;code&gt;train&lt;/code&gt; and testing in the &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a config &lt;code&gt;config/dataset_name.yaml&lt;/code&gt;, in dataset_params specify the root dir the &lt;code&gt;root_dir: data/dataset_name&lt;/code&gt;. Also adjust the number of epoch in train_params.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Additional notes&lt;/h4&gt; &#xA;&lt;p&gt;Citation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@InProceedings{Siarohin_2019_NeurIPS,&#xA;  author={Siarohin, Aliaksandr and LathuiliÃ¨re, StÃ©phane and Tulyakov, Sergey and Ricci, Elisa and Sebe, Nicu},&#xA;  title={First Order Motion Model for Image Animation},&#xA;  booktitle = {Conference on Neural Information Processing Systems (NeurIPS)},&#xA;  month = {December},&#xA;  year = {2019}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>slundberg/shap</title>
    <updated>2022-06-12T02:11:37Z</updated>
    <id>tag:github.com,2022-06-12:/slundberg/shap</id>
    <link href="https://github.com/slundberg/shap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A game theoretic approach to explain the output of any machine learning model.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/shap_header.svg?sanitize=true&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/slundberg/shap/actions/workflows/run_tests.yml/badge.svg?sanitize=true&#34; alt=&#34;example workflow&#34;&gt; &lt;a href=&#34;https://mybinder.org/v2/gh/slundberg/shap/master&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shap.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/shap/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SHAP (SHapley Additive exPlanations)&lt;/strong&gt; is a game theoretic approach to explain the output of any machine learning model. It connects optimal credit allocation with local explanations using the classic Shapley values from game theory and their related extensions (see &lt;a href=&#34;https://raw.githubusercontent.com/slundberg/shap/master/#citations&#34;&gt;papers&lt;/a&gt; for details and citations).&lt;/p&gt; &#xA;&lt;!--**SHAP (SHapley Additive exPlanations)** is a unified approach to explain the output of any machine learning model. SHAP connects game theory with local explanations, uniting several previous methods [1-7] and representing the only possible consistent and locally accurate additive feature attribution method based on expectations (see our [papers](#citations) for details and citations).--&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;SHAP can be installed from either &lt;a href=&#34;https://pypi.org/project/shap&#34;&gt;PyPI&lt;/a&gt; or &lt;a href=&#34;https://anaconda.org/conda-forge/shap&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;pip install shap&#xA;&lt;i&gt;or&lt;/i&gt;&#xA;conda install -c conda-forge shap&#xA;&lt;/pre&gt; &#xA;&lt;h2&gt;Tree ensemble example (XGBoost/LightGBM/CatBoost/scikit-learn/pyspark models)&lt;/h2&gt; &#xA;&lt;p&gt;While SHAP can explain the output of any machine learning model, we have developed a high-speed exact algorithm for tree ensemble methods (see our &lt;a href=&#34;https://rdcu.be/b0z70&#34;&gt;Nature MI paper&lt;/a&gt;). Fast C++ implementations are supported for &lt;em&gt;XGBoost&lt;/em&gt;, &lt;em&gt;LightGBM&lt;/em&gt;, &lt;em&gt;CatBoost&lt;/em&gt;, &lt;em&gt;scikit-learn&lt;/em&gt; and &lt;em&gt;pyspark&lt;/em&gt; tree models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xgboost&#xA;import shap&#xA;&#xA;# train an XGBoost model&#xA;X, y = shap.datasets.boston()&#xA;model = xgboost.XGBRegressor().fit(X, y)&#xA;&#xA;# explain the model&#39;s predictions using SHAP&#xA;# (same syntax works for LightGBM, CatBoost, scikit-learn, transformers, Spark, etc.)&#xA;explainer = shap.Explainer(model)&#xA;shap_values = explainer(X)&#xA;&#xA;# visualize the first prediction&#39;s explanation&#xA;shap.plots.waterfall(shap_values[0])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;616&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/boston_waterfall.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The above explanation shows features each contributing to push the model output from the base value (the average model output over the training dataset we passed) to the model output. Features pushing the prediction higher are shown in red, those pushing the prediction lower are in blue. Another way to visualize the same explanation is to use a force plot (these are introduced in our &lt;a href=&#34;https://rdcu.be/baVbR&#34;&gt;Nature BME paper&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# visualize the first prediction&#39;s explanation with a force plot&#xA;shap.plots.force(shap_values[0])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;811&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/boston_instance.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;If we take many force plot explanations such as the one shown above, rotate them 90 degrees, and then stack them horizontally, we can see explanations for an entire dataset (in the notebook this plot is interactive):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# visualize all the training set predictions&#xA;shap.plots.force(shap_values)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;811&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/boston_dataset.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;To understand how a single feature effects the output of the model we can plot the SHAP value of that feature vs. the value of the feature for all the examples in a dataset. Since SHAP values represent a feature&#39;s responsibility for a change in the model output, the plot below represents the change in predicted house price as RM (the average number of rooms per house in an area) changes. Vertical dispersion at a single value of RM represents interaction effects with other features. To help reveal these interactions we can color by another feature. If we pass the whole explanation tensor to the &lt;code&gt;color&lt;/code&gt; argument the scatter plot will pick the best feature to color by. In this case it picks RAD (index of accessibility to radial highways) since that highlights that the average number of rooms per house has less impact on home price for areas with a high RAD value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create a dependence scatter plot to show the effect of a single feature across the whole dataset&#xA;shap.plots.scatter(shap_values[:,&#34;RM&#34;], color=shap_values)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;544&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/boston_scatter.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;To get an overview of which features are most important for a model we can plot the SHAP values of every feature for every sample. The plot below sorts features by the sum of SHAP value magnitudes over all samples, and uses SHAP values to show the distribution of the impacts each feature has on the model output. The color represents the feature value (red high, blue low). This reveals for example that a high LSTAT (% lower status of the population) lowers the predicted home price.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# summarize the effects of all the features&#xA;shap.plots.beeswarm(shap_values)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;583&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/boston_beeswarm.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;We can also just take the mean absolute value of the SHAP values for each feature to get a standard bar plot (produces stacked bars for multi-class outputs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shap.plots.bar(shap_values)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;570&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/boston_global_bar.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Natural language example (transformers)&lt;/h2&gt; &#xA;&lt;p&gt;SHAP has specific support for natural language models like those in the Hugging Face transformers library. By adding coalitional rules to traditional Shapley values we can form games that explain large modern NLP model using very few function evaluations. Using this functionality is as simple as passing a supported transformers pipeline to SHAP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import transformers&#xA;import shap&#xA;&#xA;# load a transformers pipeline model&#xA;model = transformers.pipeline(&#39;sentiment-analysis&#39;, return_all_scores=True)&#xA;&#xA;# explain the model on two sample inputs&#xA;explainer = shap.Explainer(model) &#xA;shap_values = explainer([&#34;What a great movie! ...if you have no taste.&#34;])&#xA;&#xA;# visualize the first prediction&#39;s explanation for the POSITIVE output class&#xA;shap.plots.text(shap_values[0, :, &#34;POSITIVE&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;811&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/sentiment_analysis_plot.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Deep learning example with DeepExplainer (TensorFlow/Keras models)&lt;/h2&gt; &#xA;&lt;p&gt;Deep SHAP is a high-speed approximation algorithm for SHAP values in deep learning models that builds on a connection with &lt;a href=&#34;https://arxiv.org/abs/1704.02685&#34;&gt;DeepLIFT&lt;/a&gt; described in the SHAP NIPS paper. The implementation here differs from the original DeepLIFT by using a distribution of background samples instead of a single reference value, and using Shapley equations to linearize components such as max, softmax, products, divisions, etc. Note that some of these enhancements have also been since integrated into DeepLIFT. TensorFlow models and Keras models using the TensorFlow backend are supported (there is also preliminary support for PyTorch):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# ...include code from https://github.com/keras-team/keras/blob/master/examples/mnist_cnn.py&#xA;&#xA;import shap&#xA;import numpy as np&#xA;&#xA;# select a set of background examples to take an expectation over&#xA;background = x_train[np.random.choice(x_train.shape[0], 100, replace=False)]&#xA;&#xA;# explain predictions of the model on four images&#xA;e = shap.DeepExplainer(model, background)&#xA;# ...or pass tensors directly&#xA;# e = shap.DeepExplainer((model.layers[0].input, model.layers[-1].output), background)&#xA;shap_values = e.shap_values(x_test[1:5])&#xA;&#xA;# plot the feature attributions&#xA;shap.image_plot(shap_values, -x_test[1:5])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;820&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/mnist_image_plot.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The plot above explains ten outputs (digits 0-9) for four different images. Red pixels increase the model&#39;s output while blue pixels decrease the output. The input images are shown on the left, and as nearly transparent grayscale backings behind each of the explanations. The sum of the SHAP values equals the difference between the expected model output (averaged over the background dataset) and the current model output. Note that for the &#39;zero&#39; image the blank middle is important, while for the &#39;four&#39; image the lack of a connection on top makes it a four instead of a nine.&lt;/p&gt; &#xA;&lt;h2&gt;Deep learning example with GradientExplainer (TensorFlow/Keras/PyTorch models)&lt;/h2&gt; &#xA;&lt;p&gt;Expected gradients combines ideas from &lt;a href=&#34;https://arxiv.org/abs/1703.01365&#34;&gt;Integrated Gradients&lt;/a&gt;, SHAP, and &lt;a href=&#34;https://arxiv.org/abs/1706.03825&#34;&gt;SmoothGrad&lt;/a&gt; into a single expected value equation. This allows an entire dataset to be used as the background distribution (as opposed to a single reference value) and allows local smoothing. If we approximate the model with a linear function between each background data sample and the current input to be explained, and we assume the input features are independent then expected gradients will compute approximate SHAP values. In the example below we have explained how the 7th intermediate layer of the VGG16 ImageNet model impacts the output probabilities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from keras.applications.vgg16 import VGG16&#xA;from keras.applications.vgg16 import preprocess_input&#xA;import keras.backend as K&#xA;import numpy as np&#xA;import json&#xA;import shap&#xA;&#xA;# load pre-trained model and choose two images to explain&#xA;model = VGG16(weights=&#39;imagenet&#39;, include_top=True)&#xA;X,y = shap.datasets.imagenet50()&#xA;to_explain = X[[39,41]]&#xA;&#xA;# load the ImageNet class names&#xA;url = &#34;https://s3.amazonaws.com/deep-learning-models/image-models/imagenet_class_index.json&#34;&#xA;fname = shap.datasets.cache(url)&#xA;with open(fname) as f:&#xA;    class_names = json.load(f)&#xA;&#xA;# explain how the input to the 7th layer of the model explains the top two classes&#xA;def map2layer(x, layer):&#xA;    feed_dict = dict(zip([model.layers[0].input], [preprocess_input(x.copy())]))&#xA;    return K.get_session().run(model.layers[layer].input, feed_dict)&#xA;e = shap.GradientExplainer(&#xA;    (model.layers[7].input, model.layers[-1].output),&#xA;    map2layer(X, 7),&#xA;    local_smoothing=0 # std dev of smoothing noise&#xA;)&#xA;shap_values,indexes = e.shap_values(map2layer(to_explain, 7), ranked_outputs=2)&#xA;&#xA;# get the names for the classes&#xA;index_names = np.vectorize(lambda x: class_names[str(x)][1])(indexes)&#xA;&#xA;# plot the explanations&#xA;shap.image_plot(shap_values, to_explain, index_names)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/gradient_imagenet_plot.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Predictions for two input images are explained in the plot above. Red pixels represent positive SHAP values that increase the probability of the class, while blue pixels represent negative SHAP values the reduce the probability of the class. By using &lt;code&gt;ranked_outputs=2&lt;/code&gt; we explain only the two most likely classes for each input (this spares us from explaining all 1,000 classes).&lt;/p&gt; &#xA;&lt;h2&gt;Model agnostic example with KernelExplainer (explains any function)&lt;/h2&gt; &#xA;&lt;p&gt;Kernel SHAP uses a specially-weighted local linear regression to estimate SHAP values for any model. Below is a simple example for explaining a multi-class SVM on the classic iris dataset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sklearn&#xA;import shap&#xA;from sklearn.model_selection import train_test_split&#xA;&#xA;# print the JS visualization code to the notebook&#xA;shap.initjs()&#xA;&#xA;# train a SVM classifier&#xA;X_train,X_test,Y_train,Y_test = train_test_split(*shap.datasets.iris(), test_size=0.2, random_state=0)&#xA;svm = sklearn.svm.SVC(kernel=&#39;rbf&#39;, probability=True)&#xA;svm.fit(X_train, Y_train)&#xA;&#xA;# use Kernel SHAP to explain test set predictions&#xA;explainer = shap.KernelExplainer(svm.predict_proba, X_train, link=&#34;logit&#34;)&#xA;shap_values = explainer.shap_values(X_test, nsamples=100)&#xA;&#xA;# plot the SHAP values for the Setosa output of the first instance&#xA;shap.force_plot(explainer.expected_value[0], shap_values[0][0,:], X_test.iloc[0,:], link=&#34;logit&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;810&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/iris_instance.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The above explanation shows four features each contributing to push the model output from the base value (the average model output over the training dataset we passed) towards zero. If there were any features pushing the class label higher they would be shown in red.&lt;/p&gt; &#xA;&lt;p&gt;If we take many explanations such as the one shown above, rotate them 90 degrees, and then stack them horizontally, we can see explanations for an entire dataset. This is exactly what we do below for all the examples in the iris test set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# plot the SHAP values for the Setosa output of all instances&#xA;shap.force_plot(explainer.expected_value[0], shap_values[0], X_test, link=&#34;logit&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;813&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/iris_dataset.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;SHAP Interaction Values&lt;/h2&gt; &#xA;&lt;p&gt;SHAP interaction values are a generalization of SHAP values to higher order interactions. Fast exact computation of pairwise interactions are implemented for tree models with &lt;code&gt;shap.TreeExplainer(model).shap_interaction_values(X)&lt;/code&gt;. This returns a matrix for every prediction, where the main effects are on the diagonal and the interaction effects are off-diagonal. These values often reveal interesting hidden relationships, such as how the increased risk of death peaks for men at age 60 (see the NHANES notebook for details):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;483&#34; src=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/artwork/nhanes_age_sex_interaction.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Sample notebooks&lt;/h2&gt; &#xA;&lt;p&gt;The notebooks below demonstrate different use cases for SHAP. Look inside the notebooks directory of the repository if you want to try playing with the original notebooks yourself.&lt;/p&gt; &#xA;&lt;h3&gt;TreeExplainer&lt;/h3&gt; &#xA;&lt;p&gt;An implementation of Tree SHAP, a fast and exact algorithm to compute SHAP values for trees and ensembles of trees.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/NHANES%20I%20Survival%20Model.html&#34;&gt;&lt;strong&gt;NHANES survival model with XGBoost and SHAP interaction values&lt;/strong&gt;&lt;/a&gt; - Using mortality data from 20 years of followup this notebook demonstrates how to use XGBoost and &lt;code&gt;shap&lt;/code&gt; to uncover complex risk factor relationships.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/tree_explainer/Census%20income%20classification%20with%20LightGBM.html&#34;&gt;&lt;strong&gt;Census income classification with LightGBM&lt;/strong&gt;&lt;/a&gt; - Using the standard adult census income dataset, this notebook trains a gradient boosting tree model with LightGBM and then explains predictions using &lt;code&gt;shap&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/League%20of%20Legends%20Win%20Prediction%20with%20XGBoost.html&#34;&gt;&lt;strong&gt;League of Legends Win Prediction with XGBoost&lt;/strong&gt;&lt;/a&gt; - Using a Kaggle dataset of 180,000 ranked matches from League of Legends we train and explain a gradient boosting tree model with XGBoost to predict if a player will win their match.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DeepExplainer&lt;/h3&gt; &#xA;&lt;p&gt;An implementation of Deep SHAP, a faster (but only approximate) algorithm to compute SHAP values for deep learning models that is based on connections between SHAP and the DeepLIFT algorithm.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/deep_explainer/Front%20Page%20DeepExplainer%20MNIST%20Example.html&#34;&gt;&lt;strong&gt;MNIST Digit classification with Keras&lt;/strong&gt;&lt;/a&gt; - Using the MNIST handwriting recognition dataset, this notebook trains a neural network with Keras and then explains predictions using &lt;code&gt;shap&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/deep_explainer/Keras%20LSTM%20for%20IMDB%20Sentiment%20Classification.html&#34;&gt;&lt;strong&gt;Keras LSTM for IMDB Sentiment Classification&lt;/strong&gt;&lt;/a&gt; - This notebook trains an LSTM with Keras on the IMDB text sentiment analysis dataset and then explains predictions using &lt;code&gt;shap&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GradientExplainer&lt;/h3&gt; &#xA;&lt;p&gt;An implementation of expected gradients to approximate SHAP values for deep learning models. It is based on connections between SHAP and the Integrated Gradients algorithm. GradientExplainer is slower than DeepExplainer and makes different approximation assumptions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/gradient_explainer/Explain%20an%20Intermediate%20Layer%20of%20VGG16%20on%20ImageNet.html&#34;&gt;&lt;strong&gt;Explain an Intermediate Layer of VGG16 on ImageNet&lt;/strong&gt;&lt;/a&gt; - This notebook demonstrates how to explain the output of a pre-trained VGG16 ImageNet model using an internal convolutional layer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LinearExplainer&lt;/h3&gt; &#xA;&lt;p&gt;For a linear model with independent features we can analytically compute the exact SHAP values. We can also account for feature correlation if we are willing to estimate the feature covariance matrix. LinearExplainer supports both of these options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/linear_explainer/Sentiment%20Analysis%20with%20Logistic%20Regression.html&#34;&gt;&lt;strong&gt;Sentiment Analysis with Logistic Regression&lt;/strong&gt;&lt;/a&gt; - This notebook demonstrates how to explain a linear logistic regression sentiment analysis model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;KernelExplainer&lt;/h3&gt; &#xA;&lt;p&gt;An implementation of Kernel SHAP, a model agnostic method to estimate SHAP values for any model. Because it makes no assumptions about the model type, KernelExplainer is slower than the other model type specific algorithms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/Census%20income%20classification%20with%20scikit-learn.html&#34;&gt;&lt;strong&gt;Census income classification with scikit-learn&lt;/strong&gt;&lt;/a&gt; - Using the standard adult census income dataset, this notebook trains a k-nearest neighbors classifier using scikit-learn and then explains predictions using &lt;code&gt;shap&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/ImageNet%20VGG16%20Model%20with%20Keras.html&#34;&gt;&lt;strong&gt;ImageNet VGG16 Model with Keras&lt;/strong&gt;&lt;/a&gt; - Explain the classic VGG16 convolutional nerual network&#39;s predictions for an image. This works by applying the model agnostic Kernel SHAP method to a super-pixel segmented image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/Iris%20classification%20with%20scikit-learn.html&#34;&gt;&lt;strong&gt;Iris classification&lt;/strong&gt;&lt;/a&gt; - A basic demonstration using the popular iris species dataset. It explains predictions from six different models in scikit-learn using &lt;code&gt;shap&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation notebooks&lt;/h2&gt; &#xA;&lt;p&gt;These notebooks comprehensively demonstrate how to use specific functions and objects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/plots/decision_plot.html&#34;&gt;&lt;code&gt;shap.decision_plot&lt;/code&gt; and &lt;code&gt;shap.multioutput_decision_plot&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://slundberg.github.io/shap/notebooks/plots/dependence_plot.html&#34;&gt;&lt;code&gt;shap.dependence_plot&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Methods Unified by SHAP&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;LIME:&lt;/em&gt; Ribeiro, Marco Tulio, Sameer Singh, and Carlos Guestrin. &#34;Why should i trust you?: Explaining the predictions of any classifier.&#34; Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. ACM, 2016.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Shapley sampling values:&lt;/em&gt; Strumbelj, Erik, and Igor Kononenko. &#34;Explaining prediction models and individual predictions with feature contributions.&#34; Knowledge and information systems 41.3 (2014): 647-665.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;DeepLIFT:&lt;/em&gt; Shrikumar, Avanti, Peyton Greenside, and Anshul Kundaje. &#34;Learning important features through propagating activation differences.&#34; arXiv preprint arXiv:1704.02685 (2017).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;QII:&lt;/em&gt; Datta, Anupam, Shayak Sen, and Yair Zick. &#34;Algorithmic transparency via quantitative input influence: Theory and experiments with learning systems.&#34; Security and Privacy (SP), 2016 IEEE Symposium on. IEEE, 2016.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Layer-wise relevance propagation:&lt;/em&gt; Bach, Sebastian, et al. &#34;On pixel-wise explanations for non-linear classifier decisions by layer-wise relevance propagation.&#34; PloS one 10.7 (2015): e0130140.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Shapley regression values:&lt;/em&gt; Lipovetsky, Stan, and Michael Conklin. &#34;Analysis of regression in game theory approach.&#34; Applied Stochastic Models in Business and Industry 17.4 (2001): 319-330.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Tree interpreter:&lt;/em&gt; Saabas, Ando. Interpreting random forests. &lt;a href=&#34;http://blog.datadive.net/interpreting-random-forests/&#34;&gt;http://blog.datadive.net/interpreting-random-forests/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;p&gt;The algorithms and visualizations used in this package came primarily out of research in &lt;a href=&#34;https://suinlee.cs.washington.edu&#34;&gt;Su-In Lee&#39;s lab&lt;/a&gt; at the University of Washington, and Microsoft Research. If you use SHAP in your research we would appreciate a citation to the appropriate paper(s):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For general use of SHAP you can read/cite our &lt;a href=&#34;http://papers.nips.cc/paper/7062-a-unified-approach-to-interpreting-model-predictions&#34;&gt;NeurIPS paper&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/references/shap_nips.bib&#34;&gt;bibtex&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;For TreeExplainer you can read/cite our &lt;a href=&#34;https://www.nature.com/articles/s42256-019-0138-9&#34;&gt;Nature Machine Intelligence paper&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/references/tree_explainer.bib&#34;&gt;bibtex&lt;/a&gt;; &lt;a href=&#34;https://rdcu.be/b0z70&#34;&gt;free access&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;For GPUTreeExplainer you can read/cite &lt;a href=&#34;https://arxiv.org/abs/2010.13972&#34;&gt;this article&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;force_plot&lt;/code&gt; visualizations and medical applications you can read/cite our &lt;a href=&#34;https://www.nature.com/articles/s41551-018-0304-0&#34;&gt;Nature Biomedical Engineering paper&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/slundberg/shap/master/docs/references/nature_bme.bib&#34;&gt;bibtex&lt;/a&gt;; &lt;a href=&#34;https://rdcu.be/baVbR&#34;&gt;free access&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img height=&#34;1&#34; width=&#34;1&#34; style=&#34;display:none&#34; src=&#34;https://www.facebook.com/tr?id=189147091855991&amp;amp;ev=PageView&amp;amp;noscript=1&#34;&gt;</summary>
  </entry>
</feed>