<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-27T01:46:54Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ageron/handson-ml</title>
    <updated>2022-11-27T01:46:54Z</updated>
    <id>tag:github.com,2022-11-27:/ageron/handson-ml</id>
    <link href="https://github.com/ageron/handson-ml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚õîÔ∏è DEPRECATED ‚Äì See https://github.com/ageron/handson-ml3 instead.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Machine Learning Notebooks&lt;/h1&gt; &#xA;&lt;h1&gt;‚ö† THE &lt;a href=&#34;https://github.com/ageron/handson-ml3&#34;&gt;THIRD EDITION OF MY BOOK&lt;/a&gt; IS NOW AVAILABLE.&lt;/h1&gt; &#xA;&lt;p&gt;This project is for the first edition, which is now outdated.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;This project aims at teaching you the fundamentals of Machine Learning in python. It contains the example code and solutions to the exercises in my O&#39;Reilly book &lt;a href=&#34;https://learning.oreilly.com/library/view/hands-on-machine-learning/9781491962282/&#34;&gt;Hands-on Machine Learning with Scikit-Learn and TensorFlow&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/hands-on-machine-learning/9781491962282/&#34;&gt;&lt;img src=&#34;http://akamaicovers.oreilly.com/images/9781491962282/cat.gif&#34; alt=&#34;book&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;Quick Start&lt;/h2&gt; &#xA; &lt;h3&gt;Want to play with these notebooks online without having to install anything?&lt;/h3&gt; &#xA; &lt;p&gt;Use any of the following services.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Please be aware that these services provide temporary environments: anything you do will be deleted after a while, so make sure you download any data you care about.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: open this repository in &lt;a href=&#34;https://colab.research.google.com/github/ageron/handson-ml/blob/master/&#34;&gt;Colaboratory&lt;/a&gt;: &lt;a href=&#34;https://colab.research.google.com/github/ageron/handson-ml/blob/master/&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/img/colab_favicon.ico&#34; width=&#34;90&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Or open it in &lt;a href=&#34;https://mybinder.org/v2/gh/ageron/handson-ml/master&#34;&gt;Binder&lt;/a&gt;: &lt;a href=&#34;https://mybinder.org/v2/gh/ageron/handson-ml/master&#34;&gt;&lt;img src=&#34;https://matthiasbussonnier.com/posts/img/binder_logo_128x128.png&#34; width=&#34;90&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: Most of the time, Binder starts up quickly and works great, but when handson-ml is updated, Binder creates a new environment from scratch, and this can take quite some time.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Or open it in &lt;a href=&#34;https://beta.deepnote.com/launch?template=data-science&amp;amp;url=https%3A//github.com/ageron/handson-ml/blob/master/index.ipynb&#34;&gt;Deepnote&lt;/a&gt;: &lt;a href=&#34;https://beta.deepnote.com/launch?template=data-science&amp;amp;url=https%3A//github.com/ageron/handson-ml/blob/master/index.ipynb&#34;&gt;&lt;img src=&#34;https://www.deepnote.com/static/illustration.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Just want to quickly look at some notebooks, without executing any code?&lt;/h3&gt; &#xA; &lt;p&gt;Browse this repository using &lt;a href=&#34;https://nbviewer.jupyter.org/github/ageron/handson-ml/blob/master/index.ipynb&#34;&gt;jupyter.org&#39;s notebook viewer&lt;/a&gt;: &lt;a href=&#34;https://nbviewer.jupyter.org/github/ageron/handson-ml/blob/master/index.ipynb&#34;&gt;&lt;img src=&#34;https://jupyter.org/assets/logos/rectanglelogo-greytext-orangebody-greymoons.svg?sanitize=true&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ageron/handson-ml/master/index.ipynb&#34;&gt;github.com&#39;s notebook viewer&lt;/a&gt; also works but it is slower and the math equations are not always displayed correctly.&lt;/p&gt; &#xA; &lt;h3&gt;Want to run this project using a Docker image?&lt;/h3&gt; &#xA; &lt;p&gt;Read the &lt;a href=&#34;https://github.com/ageron/handson-ml/tree/master/docker&#34;&gt;Docker instructions&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h3&gt;Want to install this project on your own machine?&lt;/h3&gt; &#xA; &lt;p&gt;Start by installing &lt;a href=&#34;https://www.anaconda.com/distribution/&#34;&gt;Anaconda&lt;/a&gt; (or &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;Miniconda&lt;/a&gt;), &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt;, and if you have a TensorFlow-compatible GPU, install the &lt;a href=&#34;https://www.nvidia.com/Download/index.aspx&#34;&gt;GPU driver&lt;/a&gt;, as well as the appropriate version of CUDA and cuDNN (see TensorFlow&#39;s documentation for more details).&lt;/p&gt; &#xA; &lt;p&gt;Next, clone this project by opening a terminal and typing the following commands (do not type the first &lt;code&gt;$&lt;/code&gt; signs on each line, they just indicate that these are terminal commands):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ageron/handson-ml.git&#xA;$ cd handson-ml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Next, run the following commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;$ conda env create -f environment.yml&#xA;$ conda activate tf1&#xA;$ python -m ipykernel install --user --name=python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Finally, start Jupyter:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;$ jupyter notebook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you need further instructions, read the &lt;a href=&#34;https://raw.githubusercontent.com/ageron/handson-ml/master/INSTALL.md&#34;&gt;detailed installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h1&gt;FAQ&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;Which Python version should I use?&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;I recommend Python 3.7. If you follow the installation instructions above, that&#39;s the version you will get. Most code will work with other versions of Python 3, but some libraries do not support Python 3.8 or 3.9 yet, which is why I recommend Python 3.7.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;I&#39;m getting an error when I call &lt;code&gt;load_housing_data()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Make sure you call &lt;code&gt;fetch_housing_data()&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; you call &lt;code&gt;load_housing_data()&lt;/code&gt;. If you&#39;re getting an HTTP error, make sure you&#39;re running the exact same code as in the notebook (copy/paste it if needed). If the problem persists, please check your network configuration.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;I&#39;m getting an SSL error on MacOSX&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;You probably need to install the SSL certificates (see this &lt;a href=&#34;https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error&#34;&gt;StackOverflow question&lt;/a&gt;). If you downloaded Python from the official website, then run &lt;code&gt;/Applications/Python\ 3.7/Install\ Certificates.command&lt;/code&gt; in a terminal (change &lt;code&gt;3.7&lt;/code&gt; to whatever version you installed). If you installed Python using MacPorts, run &lt;code&gt;sudo port install curl-ca-bundle&lt;/code&gt; in a terminal.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;I&#39;ve installed this project locally. How do I update it to the latest version?&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ageron/handson-ml/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;How do I update my Python libraries to the latest versions, when using Anaconda?&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ageron/handson-ml/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;Contributors&lt;/h2&gt; &#xA; &lt;p&gt;I would like to thank everyone &lt;a href=&#34;https://github.com/ageron/handson-ml/graphs/contributors&#34;&gt;who contributed to this project&lt;/a&gt;, either by providing useful feedback, filing issues or submitting Pull Requests. Special thanks go to Haesun Park and Ian Beauregard who reviewed every notebook and submitted many PRs, including help on some of the exercise solutions. Thanks as well to Steven Bunkley and Ziembla who created the &lt;code&gt;docker&lt;/code&gt; directory, and to github user SuperYorio who helped on some exercise solutions.&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/deep-rl-class</title>
    <updated>2022-11-27T01:46:54Z</updated>
    <id>tag:github.com,2022-11-27:/huggingface/deep-rl-class</id>
    <link href="https://github.com/huggingface/deep-rl-class" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo contain the syllabus of the Hugging Face Deep Reinforcement Learning Class.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Hugging Face Deep Reinforcement Learning Class ü§ó&lt;/h1&gt; &#xA;&lt;p&gt;In this free course, you will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üìñ Study Deep Reinforcement Learning in &lt;strong&gt;theory and practice&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üßë‚Äçüíª Learn to &lt;strong&gt;use famous Deep RL libraries&lt;/strong&gt; such as Stable Baselines3, RL Baselines3 Zoo, and RLlib.&lt;/li&gt; &#xA; &lt;li&gt;ü§ñ Train agents in &lt;strong&gt;unique environments&lt;/strong&gt; such as SnowballFight, Huggy the Doggo üê∂, and classical ones such as Space Invaders and PyBullet.&lt;/li&gt; &#xA; &lt;li&gt;üíæ &lt;strong&gt;Publish your trained agents in one line of code to the Hugging Face Hub&lt;/strong&gt;. But also &lt;strong&gt;download powerful agents from the community&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üèÜ &lt;strong&gt;Participate in challenges&lt;/strong&gt; where you will evaluate your agents against other teams.&lt;/li&gt; &#xA; &lt;li&gt;üñåÔ∏èüé® &lt;strong&gt;Learn to share your own environments made with Unity and Godot&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è Don&#39;t forget to sign up here: &lt;a href=&#34;http://eepurl.com/h1pElX&#34;&gt;http://eepurl.com/h1pElX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way to keep in touch is to &lt;strong&gt;join our discord server to exchange with the community and with us&lt;/strong&gt; üëâüèª &lt;a href=&#34;https://discord.gg/aYka4Yhff9&#34;&gt;https://discord.gg/aYka4Yhff9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Are you new to Discord? Check our &lt;strong&gt;discord 101 to get the best practices&lt;/strong&gt; üëâ &lt;a href=&#34;https://github.com/huggingface/deep-rl-class/raw/main/DISCORD.Md&#34;&gt;https://github.com/huggingface/deep-rl-class/blob/main/DISCORD.Md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And don&#39;t forget to share with your friends who want to learn ü§ó!&lt;/p&gt; &#xA;&lt;h2&gt;The Syllabus üèóÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;This course is &lt;strong&gt;self-paced&lt;/strong&gt; you can start when you want ü•≥.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;üìÜ Publishing date&lt;/th&gt; &#xA;   &lt;th&gt;üìò Unit&lt;/th&gt; &#xA;   &lt;th&gt;üë©‚Äçüíª Hands-on&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit1#unit-1-introduction-to-deep-reinforcement-learning&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit1&#34;&gt;An Introduction to Deep Reinforcement Learning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/raw/main/unit1/unit1.ipynb&#34;&gt;Train a Deep Reinforcement Learning lander agent to land correctly on the Moon üåï using Stable-Baselines3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit1/unit1-bonus&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit1/unit1-bonus&#34;&gt;Bonus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/raw/main/unit2/README.md&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/raw/main/unit2/README.md&#34;&gt;Q-Learning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/raw/main/unit2/unit2.ipynb&#34;&gt;Train an agent to cross a Frozen lake ‚õÑ and train an autonomous taxi üöñ&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit3#unit-3-deep-q-learning-with-atari-games-&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit3#unit-3-deep-q-learning-with-atari-games-&#34;&gt;Deep Q-Learning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Train a Deep Q-Learning agent to play Space Invaders using &lt;a href=&#34;https://github.com/DLR-RM/rl-baselines3-zoo&#34;&gt;RL-Baselines3-Zoo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/raw/main/unit3/bonus.md&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/raw/main/unit3/bonus.md&#34;&gt;Bonus: Automatic Hyperparameter Tuning using Optuna&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit4#unit-4-an-introduction-to-unity-mlagents-with-hugging-face-&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit4#unit-4-an-introduction-to-unity-mlagents-with-hugging-face-&#34;&gt;üéÅ Learn to train your first Unity MLAgent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit4/unit4.ipynb&#34;&gt;Train a curious agent to destroy Pyramids üí•&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit5#unit-5-policy-gradient-with-pytorch&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/blog/deep-rl-pg&#34;&gt;Policy Gradient with PyTorch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit5/unit5.ipynb&#34;&gt;Code a Reinforce agent from scratch using PyTorch and train it to play Pong üéæ, CartPole and Pixelcopter üöÅ&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit6#towards-better-explorations-methods-with-curiosity&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit6#towards-better-explorations-methods-with-curiosity&#34;&gt;Towards better explorations methods with Curiosity&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit7#unit-7-advantage-actor-critic-a2c-using-robotics-simulations-with-pybullet-&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit7#unit-7-advantage-actor-critic-a2c-using-robotics-simulations-with-pybullet-&#34;&gt;Advantage Actor Critic (A2C)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit7#unit-7-advantage-actor-critic-a2c-using-robotics-simulations-with-pybullet-&#34;&gt;Train a bipedal walker and a spider to learn to walk using A2C&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit8#unit-8-proximal-policy-optimization-ppo-with-pytorch&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit8#unit-8-proximal-policy-optimization-ppo-with-pytorch&#34;&gt;Proximal Policy Optimization (PPO)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/huggingface/deep-rl-class/blob/main/unit8/unit8.ipynb&#34;&gt;Code a PPO agent from scratch using PyTorch and bulletproof it with Classical Control Environments&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit9#unit-9-decision-transformers-and-offline-reinforcement-learning-&#34;&gt;Published ü•≥&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/deep-rl-class/tree/main/unit9#unit-9-decision-transformers-and-offline-reinforcement-learning-&#34;&gt;Decision Transformers and offline Reinforcement Learning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/blog/raw/main/notebooks/101_train-decision-transformers.ipynb&#34;&gt;Train your first Offline Decision Transformer model from scratch to make a half-cheetah run &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;The library you&#39;ll learn during this course&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.0 (current):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DLR-RM/stable-baselines3&#34;&gt;Stable-Baselines3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DLR-RM/rl-baselines3-zoo&#34;&gt;RL Baselines3 Zoo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vwxyzjn/cleanrl&#34;&gt;CleanRL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 2.0 (in addition to SB3, RL-Baselines3-Zoo and CleanRL):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ray.io/en/latest/rllib/index.html&#34;&gt;RLlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alex-petrenko/sample-factory&#34;&gt;Sample Factory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/blog/decision-transformers&#34;&gt;Hugging Face Decision Transformers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More to come üèóÔ∏è&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Environments you&#39;ll use&lt;/h2&gt; &#xA;&lt;h3&gt;Custom environments made by the Hugging Face Team using Unity and Godot&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Huggy the Doggo üê∂ (Based on &lt;a href=&#34;https://blog.unity.com/technology/puppo-the-corgi-cuteness-overload-with-the-unity-ml-agents-toolkit&#34;&gt;Unity&#39;s Puppo the Corgi work&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/huggy.jpg&#34; alt=&#34;lunarlander.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SnowballFight ‚òÉÔ∏è üëâ Play it here: &lt;a href=&#34;https://huggingface.co/spaces/ThomasSimonini/SnowballFight&#34;&gt;https://huggingface.co/spaces/ThomasSimonini/SnowballFight&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/snowballfight.gif&#34; alt=&#34;snowballfight.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Gym classic and controls environments üïπÔ∏è&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lunar Lander üöÄüåô&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/lunarlander.gif&#34; alt=&#34;lunarlander.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Frozen Lake ‚õÑ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/frozenlake.gif&#34; alt=&#34;frozenlake.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Taxi üöñ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/taxi.gif&#34; alt=&#34;taxi.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cartpole&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/cartpole.jpg&#34; alt=&#34;cartpole.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pong üéæ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/pong.jpg&#34; alt=&#34;pong.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pixelcopter üöÅ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/pixelcopter.jpg&#34; alt=&#34;pong.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Gym Atari environments üëæ&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Space Invaders üëæ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/spaceinvaders.gif&#34; alt=&#34;spaceinvaders.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Breakout&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/breakout.gif&#34; alt=&#34;breakout.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qbert&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/qbert.gif&#34; alt=&#34;qbert.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Seaquest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/seaquest.gif&#34; alt=&#34;seaquest.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;PyBullet ü§ñ&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ant Bullet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/antbullet.gif&#34; alt=&#34;antbullet.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Walker 2D Bullet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/deep-rl-class/main/assets/img/walker2d.gif&#34; alt=&#34;walker2d.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;MLAgents environments üñåÔ∏è&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;More to come üöß&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;More to come üöß&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Good skills in Python üêç&lt;/li&gt; &#xA; &lt;li&gt;Basics in Deep Learning and Pytorch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If it&#39;s not the case yet, you can check these free resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://www.udacity.com/course/introduction-to-python--ud1110&#34;&gt;https://www.udacity.com/course/introduction-to-python--ud1110&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intro to Deep Learning with PyTorch: &lt;a href=&#34;https://www.udacity.com/course/deep-learning-pytorch--ud188&#34;&gt;https://www.udacity.com/course/deep-learning-pytorch--ud188&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyTorch in 60min: &lt;a href=&#34;https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html&#34;&gt;https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Is this class free?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes, totally free ü•≥.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do I need to have a Hugging Face account to follow the course?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes, to push your trained agents during the hands-on, you need an account (it&#39;s free) ü§ó.&lt;/p&gt; &#xA;&lt;p&gt;You can create one here üëâ &lt;a href=&#34;https://huggingface.co/join&#34;&gt;https://huggingface.co/join&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What‚Äôs the format of the class?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The course consists of&amp;nbsp;&lt;strong&gt;8 Units.&lt;/strong&gt;&amp;nbsp;In each of the Units, we&#39;ll have:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A theory explained part&lt;/strong&gt;: an article and a video (based on Deep Reinforcement Learning Course)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A hands-on Google Colab&lt;/strong&gt; where you&#39;ll learn to use famous Deep RL libraries such as Stable Baselines3, RL Baselines3 Zoo, and RLlib to train your agents in unique environments such as SnowballFight, Huggy the Doggo üê∂, and classical ones such as Space Invaders and PyBullet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Some optional challenges&lt;/strong&gt;: train an agent in another environment, and try to beat the results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s not a live course video, so you can watch and read each unit when you want ü§ó You can check the syllabus here üëâ &lt;a href=&#34;https://github.com/huggingface/deep-rl-class&#34;&gt;https://github.com/huggingface/deep-rl-class&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What I will do during this course?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this free course, you will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üìñ Study Deep Reinforcement Learning in theory and practice.&lt;/li&gt; &#xA; &lt;li&gt;üßë‚Äçüíª Learn to use famous Deep RL libraries such as Stable Baselines3, RL Baselines3 Zoo, and RLlib.&lt;/li&gt; &#xA; &lt;li&gt;ü§ñ Train agents in unique environments such as SnowballFight, Huggy the Doggo üê∂, and classical ones such as Space Invaders and PyBullet.&lt;/li&gt; &#xA; &lt;li&gt;üíæ Publish your trained agents in one line of code to the Hub. But also download powerful agents from the community.&lt;/li&gt; &#xA; &lt;li&gt;üèÜ Participate in challenges where you will evaluate your agents against other teams.&lt;/li&gt; &#xA; &lt;li&gt;üñåÔ∏èüé® Learn to share your own environments made with Unity and Godot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where do I sign up?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here üëâ &lt;a href=&#34;http://eepurl.com/h1pElX&#34;&gt;http://eepurl.com/h1pElX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where can I find the course?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;On this repository&lt;/strong&gt;, we&#39;ll publish every week the links (chapters, hands-ons, videos).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where can I exchange with my classmates and with you?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have a discord server where you &lt;strong&gt;can exchange with the community and with us&lt;/strong&gt; üëâüèª &lt;a href=&#34;https://discord.gg/aYka4Yhff9&#34;&gt;https://discord.gg/aYka4Yhff9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Don‚Äôt forget to &lt;strong&gt;introduce yourself when you sign up ü§ó&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I have some feedback&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We want to improve and update the course iteratively with your feedback. If you have some, please fill this form üëâ &lt;a href=&#34;https://forms.gle/3HgA7bEHwAmmLfwh9&#34;&gt;https://forms.gle/3HgA7bEHwAmmLfwh9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How much background knowledge is needed?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some prerequisites:&lt;/p&gt; &#xA;&lt;p&gt;Good skills in &lt;strong&gt;Python&lt;/strong&gt; üêç Basics in &lt;strong&gt;Deep Learning and Pytorch&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If it&#39;s not the case yet, you can check these free resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://www.udacity.com/course/introduction-to-python--ud1110&#34;&gt;https://www.udacity.com/course/introduction-to-python--ud1110&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intro to Deep Learning with PyTorch: &lt;a href=&#34;https://www.udacity.com/course/deep-learning-pytorch--ud188&#34;&gt;https://www.udacity.com/course/deep-learning-pytorch--ud188&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyTorch in 60min: &lt;a href=&#34;https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html&#34;&gt;https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Is there a certificate?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes üéâ. You&#39;ll &lt;strong&gt;need to upload the eight models with the eight hands-on.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citing the project&lt;/h2&gt; &#xA;&lt;p&gt;To cite this repository in publications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{deep-rl-class,&#xA;  author = {Simonini, Thomas and Sanseviero, Omar},&#xA;  title = {The Hugging Face Deep Reinforcement Learning Class},&#xA;  year = {2022},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  howpublished = {\url{https://github.com/huggingface/deep-rl-class}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>zju3dv/LoFTR</title>
    <updated>2022-11-27T01:46:54Z</updated>
    <id>tag:github.com,2022-11-27:/zju3dv/LoFTR</id>
    <link href="https://github.com/zju3dv/LoFTR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for &#34;LoFTR: Detector-Free Local Feature Matching with Transformers&#34;, CVPR 2021&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LoFTR: Detector-Free Local Feature Matching with Transformers&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://zju3dv.github.io/loftr&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/pdf/2104.00680.pdf&#34;&gt;Paper&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;LoFTR: Detector-Free Local Feature Matching with Transformers&lt;br&gt; &lt;a href=&#34;https://jiamingsun.ml&#34;&gt;Jiaming Sun&lt;/a&gt;&lt;sup&gt;*&lt;/sup&gt;, &lt;a href=&#34;https://zehongs.github.io/&#34;&gt;Zehong Shen&lt;/a&gt;&lt;sup&gt;*&lt;/sup&gt;, &lt;a href=&#34;https://github.com/angshine&#34;&gt;Yu&#39;ang Wang&lt;/a&gt;&lt;sup&gt;*&lt;/sup&gt;, &lt;a href=&#34;http://www.cad.zju.edu.cn/home/bao/&#34;&gt;Hujun Bao&lt;/a&gt;, &lt;a href=&#34;http://www.cad.zju.edu.cn/home/xzhou/&#34;&gt;Xiaowei Zhou&lt;/a&gt;&lt;br&gt; CVPR 2021&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zju3dv/LoFTR/master/assets/loftr-github-demo.gif&#34; alt=&#34;demo_vid&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO List and ETA&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inference code and pretrained models (DS and OT) (2021-4-7)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code for reproducing the test-set results (2021-4-7)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Webcam demo to reproduce the result shown in the GIF above (2021-4-13)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Training code and training data preparation (expected 2021-6-10)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Discussions about the paper are welcomed in the &lt;a href=&#34;https://github.com/zju3dv/LoFTR/discussions&#34;&gt;discussion panel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ü§î&lt;/span&gt; &lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Undistorted images from D2Net are not available anymore.&lt;br&gt; For a temporal alternative, please use the undistorted images provided by the MegaDepth_v1 (should be downloaded along with the required depth files). We numerically compared these images and only found very subtle difference.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;üö©&lt;/span&gt; &lt;strong&gt;Updates&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://github.com/Tangshitao/QuadTreeAttention&#34;&gt;QuadTreeAttention&lt;/a&gt;, a new attention machanism that improves the efficiency and performance of LoFTR with less demanding GPU requirements for training.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Integrated to &lt;a href=&#34;https://huggingface.co/spaces&#34;&gt;Huggingface Spaces&lt;/a&gt; with &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;. See &lt;a href=&#34;https://huggingface.co/spaces/akhaliq/Kornia-LoFTR&#34;&gt;Gradio Web Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Colab demo&lt;/h2&gt; &#xA;&lt;p&gt;Want to run LoFTR with custom image pairs without configuring your own GPU environment? Try the Colab demo: &lt;a href=&#34;https://colab.research.google.com/drive/1BgNIOjFHauFoNB95LGesHBIjioX74USW?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using from kornia&lt;/h2&gt; &#xA;&lt;p&gt;LoFTR is integrated into &lt;a href=&#34;https://github.com/kornia/kornia&#34;&gt;kornia&lt;/a&gt; library since version 0.5.11.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install kornia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can import it as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;from kornia.feature import LoFTR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See tutorial on using LoFTR from kornia &lt;a href=&#34;https://kornia-tutorials.readthedocs.io/en/latest/image_matching.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# For full pytorch-lightning trainer features (recommended)&#xA;conda env create -f environment.yaml&#xA;conda activate loftr&#xA;&#xA;# For the LoFTR matcher only&#xA;pip install torch einops yacs kornia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We provide the &lt;a href=&#34;https://drive.google.com/drive/folders/1DOcOPZb3-5cWxLqn256AhwUVjBPifhuf?usp=sharing&#34;&gt;download link&lt;/a&gt; to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the scannet-1500-testset (~1GB).&lt;/li&gt; &#xA; &lt;li&gt;the megadepth-1500-testset (~600MB).&lt;/li&gt; &#xA; &lt;li&gt;4 pretrained models of indoor-ds, indoor-ot, outdoor-ds and outdoor-ot (each ~45MB).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By now, the environment is all set and the LoFTR-DS model is ready to go! If you want to run LoFTR-OT, some extra steps are needed:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;[Requirements for LoFTR-OT]&lt;/summary&gt; &#xA; &lt;p&gt;We use the code from &lt;a href=&#34;https://github.com/magicleap/SuperGluePretrainedNetwork&#34;&gt;SuperGluePretrainedNetwork&lt;/a&gt; for optimal transport. However, we can&#39;t provide the code directly due its strict LICENSE requirements. We recommend downloading it with the following command instead.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd src/loftr/utils  &#xA;wget https://raw.githubusercontent.com/magicleap/SuperGluePretrainedNetwork/master/models/superglue.py &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Run LoFTR demos&lt;/h2&gt; &#xA;&lt;h3&gt;Match image pairs with LoFTR&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;[code snippets]&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from src.loftr import LoFTR, default_cfg&#xA;&#xA;# Initialize LoFTR&#xA;matcher = LoFTR(config=default_cfg)&#xA;matcher.load_state_dict(torch.load(&#34;weights/indoor_ds.ckpt&#34;)[&#39;state_dict&#39;])&#xA;matcher = matcher.eval().cuda()&#xA;&#xA;# Inference&#xA;with torch.no_grad():&#xA;    matcher(batch)    # batch = {&#39;image0&#39;: img0, &#39;image1&#39;: img1}&#xA;    mkpts0 = batch[&#39;mkpts0_f&#39;].cpu().numpy()&#xA;    mkpts1 = batch[&#39;mkpts1_f&#39;].cpu().numpy()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;An example is given in &lt;code&gt;notebooks/demo_single_pair.ipynb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Online demo&lt;/h3&gt; &#xA;&lt;p&gt;Run the online demo with a webcam or video to reproduce the result shown in the GIF above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd demo&#xA;./run_demo.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;[run_demo.sh]&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;set -e&#xA;# set -x&#xA;&#xA;if [ ! -f utils.py ]; then&#xA;    echo &#34;Downloading utils.py from the SuperGlue repo.&#34;&#xA;    echo &#34;We cannot provide this file directly due to its strict licence.&#34;&#xA;    wget https://raw.githubusercontent.com/magicleap/SuperGluePretrainedNetwork/master/models/utils.py&#xA;fi&#xA;&#xA;# Use webcam 0 as input source. &#xA;input=0&#xA;# or use a pre-recorded video given the path.&#xA;# input=/home/sunjiaming/Downloads/scannet_test/$scene_name.mp4&#xA;&#xA;# Toggle indoor/outdoor model here.&#xA;model_ckpt=../weights/indoor_ds.ckpt&#xA;# model_ckpt=../weights/outdoor_ds.ckpt&#xA;&#xA;# Optionally assign the GPU ID.&#xA;# export CUDA_VISIBLE_DEVICES=0&#xA;&#xA;echo &#34;Running LoFTR demo..&#34;&#xA;eval &#34;$(conda shell.bash hook)&#34;&#xA;conda activate loftr&#xA;python demo_loftr.py --weight $model_ckpt --input $input&#xA;# To save the input video and output match visualizations.&#xA;# python demo_loftr.py --weight $model_ckpt --input $input --save_video --save_input&#xA;&#xA;# Running on remote GPU servers with no GUI.&#xA;# Save images first.&#xA;# python demo_loftr.py --weight $model_ckpt --input $input --no_display --output_dir=&#34;./demo_images/&#34;&#xA;# Then convert them to a video.&#xA;# ffmpeg -framerate 15 -pattern_type glob -i &#39;*.png&#39; -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Reproduce the testing results with pytorch-lightning&lt;/h3&gt; &#xA;&lt;p&gt;You need to setup the testing subsets of ScanNet and MegaDepth first. We create symlinks from the previously downloaded datasets to &lt;code&gt;data/{{dataset}}/test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# set up symlinks&#xA;ln -s /path/to/scannet-1500-testset/* /path/to/LoFTR/data/scannet/test&#xA;ln -s /path/to/megadepth-1500-testset/* /path/to/LoFTR/data/megadepth/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda activate loftr&#xA;# with shell script&#xA;bash ./scripts/reproduce_test/indoor_ds.sh&#xA;&#xA;# or&#xA;python test.py configs/data/scannet_test_1500.py configs/loftr/loftr_ds.py --ckpt_path weights/indoor_ds.ckpt --profiler_name inference --gpus=1 --accelerator=&#34;ddp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For visualizing the results, please refer to &lt;code&gt;notebooks/visualize_dump_results.ipynb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- ### Image pair info for training on ScanNet&#xA;You can download the data at [here](https://drive.google.com/file/d/1fC2BezUSsSQy7_H65A0ZfrYK0RB3TXXj/view?usp=sharing).&#xA;&#xA;&lt;details&gt;&#xA;  &lt;summary&gt;[data format]&lt;/summary&gt;&#xA;&#xA;```python&#xA;In [14]: npz_path = &#39;./cfg_1513_-1_0.2_0.8_0.15/scene_data/train/scene0000_01.npz&#39;&#xA;&#xA;In [15]: data = np.load(npz_path)&#xA;&#xA;In [16]: data[&#39;name&#39;]&#xA;Out[16]:&#xA;array([[   0,    1,  276,  567],&#xA;       [   0,    1, 1147, 1170],&#xA;       [   0,    1,  541, 5757],&#xA;       ...,&#xA;       [   0,    1, 5366, 5393],&#xA;       [   0,    1, 2607, 5278],&#xA;       [   0,    1,  736, 5844]], dtype=uint16)&#xA;&#xA;In [17]: data[&#39;score&#39;]&#xA;Out[17]: array([0.2903, 0.7715, 0.5986, ..., 0.7227, 0.5527, 0.4148], dtype=float16)&#xA;&#xA;In [18]: len(data[&#39;name&#39;])&#xA;Out[18]: 1684276&#xA;&#xA;In [19]: len(data[&#39;score&#39;])&#xA;Out[19]: 1684276&#xA;```&#xA;`data[&#39;name&#39;]` is the image pair info, organized as [`scene_id`, `seq_id`, `image0_id`, `image1_id`].&#xA;&#xA;`data[&#39;score&#39;]` is the overlapping score defined in [SuperGlue](https://arxiv.org/pdf/1911.11763) (Page 12).&#xA;&lt;/details&gt; --&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/LoFTR/master/docs/TRAINING.md&#34;&gt;Training LoFTR&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this code useful for your research, please use the following BibTeX entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{sun2021loftr,&#xA;  title={{LoFTR}: Detector-Free Local Feature Matching with Transformers},&#xA;  author={Sun, Jiaming and Shen, Zehong and Wang, Yuang and Bao, Hujun and Zhou, Xiaowei},&#xA;  journal={{CVPR}},&#xA;  year={2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;This work is affiliated with ZJU-SenseTime Joint Lab of 3D Vision, and its intellectual property belongs to SenseTime Group Ltd.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright SenseTime. All Rights Reserved.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>