<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-31T01:49:37Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>williamyang1991/FRESCO</title>
    <updated>2024-03-31T01:49:37Z</updated>
    <id>tag:github.com,2024-03-31:/williamyang1991/FRESCO</id>
    <link href="https://github.com/williamyang1991/FRESCO" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[CVPR 2024] FRESCO: Spatial-Temporal Correspondence for Zero-Shot Video Translation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FRESCO - Official PyTorch Implementation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;FRESCO: Spatial-Temporal Correspondence for Zero-Shot Video Translation&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://williamyang1991.github.io/&#34;&gt;Shuai Yang&lt;/a&gt;, &lt;a href=&#34;https://zhouyifan.net/&#34;&gt;Yifan Zhou&lt;/a&gt;, &lt;a href=&#34;https://liuziwei7.github.io/&#34;&gt;Ziwei Liu&lt;/a&gt; and &lt;a href=&#34;https://www.mmlab-ntu.com/person/ccloy/&#34;&gt;Chen Change Loy&lt;/a&gt;&lt;br&gt; in CVPR 2024 &lt;br&gt; &lt;a href=&#34;https://www.mmlab-ntu.com/project/fresco/&#34;&gt;&lt;strong&gt;Project Page&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2403.12962&#34;&gt;&lt;strong&gt;Paper&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/jLnGx5H-wLw&#34;&gt;&lt;strong&gt;Supplementary Video&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/file/d/12BFx3hp8_jp9m0EmKpw-cus2SABPQx2Q/view?usp=sharing&#34;&gt;&lt;strong&gt;Input Data and Video Results&lt;/strong&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt; &lt;em&gt;The remarkable efficacy of text-to-image diffusion models has motivated extensive exploration of their potential application in video domains. Zero-shot methods seek to extend image diffusion models to videos without necessitating model training. Recent methods mainly focus on incorporating inter-frame correspondence into attention mechanisms. However, the soft constraint imposed on determining where to attend to valid features can sometimes be insufficient, resulting in temporal inconsistency. In this paper, we introduce FRESCO, intra-frame correspondence alongside inter-frame correspondence to establish a more robust spatial-temporal constraint. This enhancement ensures a more consistent transformation of semantically similar content across frames. Beyond mere attention guidance, our approach involves an explicit update of features to achieve high spatial-temporal consistency with the input video, significantly improving the visual coherence of the resulting translated videos. Extensive experiments demonstrate the effectiveness of our proposed framework in producing high-quality, coherent videos, marking a notable improvement over existing zero-shot methods.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Temporal consistency&lt;/strong&gt;: use intra-and inter-frame constraint with better consistency and coverage than optical flow alone. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Compared with our previous work &lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video&#34;&gt;Rerender-A-Video&lt;/a&gt;, FRESCO is more robust to large and quick motion.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zero-shot&lt;/strong&gt;: no training or fine-tuning required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: compatible with off-the-shelf models (e.g., &lt;a href=&#34;https://github.com/lllyasviel/ControlNet&#34;&gt;ControlNet&lt;/a&gt;, &lt;a href=&#34;https://civitai.com/&#34;&gt;LoRA&lt;/a&gt;) for customized translation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/aad358af-4d27-4f18-b069-89a1abd94d38&#34;&gt;https://github.com/williamyang1991/FRESCO/assets/18130694/aad358af-4d27-4f18-b069-89a1abd94d38&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[03/2023] Paper is released.&lt;/li&gt; &#xA; &lt;li&gt;[03/2023] Code is released.&lt;/li&gt; &#xA; &lt;li&gt;[03/2024] This website is created.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate into Diffusers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Huggingface web demo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add webUI.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Update readme&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Upload paper to arXiv, release related material&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/williamyang1991/FRESCO.git&#xA;cd FRESCO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;You can simply set up the environment with pip based on &lt;a href=&#34;https://github.com/williamyang1991/FRESCO/raw/main/requirements.txt&#34;&gt;requirements.txt&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a conda environment and install torch &amp;gt;= 2.0.0. Here is an example script to install torch 2.0.0 + CUDA 11.8 :&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;conda create --name diffusers python==3.8.5&#xA;conda activate diffusers&#xA;pip install torch==2.0.0 torchvision==0.15.1 --index-url https://download.pytorch.org/whl/cu118&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;pip install -r requirments.txt&lt;/code&gt; in an environment where torch is installed.&lt;/li&gt; &#xA;   &lt;li&gt;We have tested on torch 2.0.0/2.1.0 and diffusers 0.19.3&lt;/li&gt; &#xA;   &lt;li&gt;If you use new versions of diffusers, you need to modify &lt;a href=&#34;https://github.com/williamyang1991/FRESCO/raw/fb991262615665de88f7a8f2cc903d9539e1b234/src/diffusion_hacked.py#L496&#34;&gt;my_forward()&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the installation script. The required models will be downloaded in &lt;code&gt;./model&lt;/code&gt;, &lt;code&gt;./src/ControlNet/annotator&lt;/code&gt; and &lt;code&gt;./src/ebsynth/deps/ebsynth/bin&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Requires access to huggingface.co&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python install.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;You can run the demo with &lt;code&gt;run_fresco.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_fresco.py ./config/config_music.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;For issues with Ebsynth, please refer to &lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video#issues&#34;&gt;issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;(1) Inference&lt;/h2&gt; &#xA;&lt;h3&gt;WebUI (recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;python webUI.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gradio app also allows you to flexibly change the inference options. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Upload your video, input the prompt, select the model and seed, and hit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Key Frames&lt;/strong&gt;: detect keyframes, translate all keyframes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Propagation&lt;/strong&gt;: propagate the keyframes to other frames for full video translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run All&lt;/strong&gt;: &lt;strong&gt;Run Key Frames&lt;/strong&gt; and &lt;strong&gt;Run Propagation&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Select the model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Base model&lt;/strong&gt;: base Stable Diffusion model (SD 1.5) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stable Diffusion 1.5: official model&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stablediffusionapi/rev-animated&#34;&gt;rev-Animated&lt;/a&gt;: a semi-realistic (2.5D) model&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/SG161222/Realistic_Vision_V2.0&#34;&gt;realistic-Vision&lt;/a&gt;: a photo-realistic model&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stablediffusionapi/flat-2d-animerge&#34;&gt;flat2d-animerge&lt;/a&gt;: a cartoon model&lt;/li&gt; &#xA;   &lt;li&gt;You can add other models on huggingface.co by modifying this &lt;a href=&#34;https://github.com/williamyang1991/FRESCO/raw/1afcca9c7b1bc1ac68254f900be9bd768fbb6988/webUI.py#L362&#34;&gt;line&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/6ce5d54e-b020-4e43-95e7-72ab1783f482&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We provide abundant advanced options to play with&lt;/p&gt;  &#xA;&lt;details id=&#34;option1&#34;&gt; &#xA; &lt;summary&gt; &lt;b&gt;Advanced options for single frame processing&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Frame resolution&lt;/strong&gt;: resize the short side of the video to 512.&lt;/li&gt; &#xA;  &lt;li&gt;ControlNet related: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;ControlNet strength&lt;/strong&gt;: how well the output matches the input control edges&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Control type&lt;/strong&gt;: HED edge, Canny edge, Depth map&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Canny low/high threshold&lt;/strong&gt;: low values for more edge details&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;SDEdit related: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Denoising strength&lt;/strong&gt;: repaint degree (low value to make the output look more like the original video)&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Preserve color&lt;/strong&gt;: preserve the color of the original video&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;SD related: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;: denoising step&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;CFG scale&lt;/strong&gt;: how well the output matches the prompt&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Added prompt/Negative prompt&lt;/strong&gt;: supplementary prompts&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;FreeU related: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;FreeU first/second-stage backbone factor&lt;/strong&gt;: =1 do nothing; &amp;gt;1 enhance output color and details&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;FreeU first/second-stage skip factor&lt;/strong&gt;: =1 do nothing; &amp;lt;1 enhance output color and details&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details id=&#34;option2&#34;&gt; &#xA; &lt;summary&gt; &lt;b&gt;Advanced options for FRESCO constraints&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Keyframe related &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Number of frames&lt;/strong&gt;: Total frames to be translated&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Number of frames in a batch&lt;/strong&gt;: To avoid out-of-memory, use small batch size&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Min keyframe interval (s_min)&lt;/strong&gt;: The keyframes will be detected at least every s_min frames&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Max keyframe interval (s_max)&lt;/strong&gt;: The keyframes will be detected at most every s_max frames&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;FRESCO constraints &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;FRESCO-guided Attention: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;spatial-guided attention&lt;/strong&gt;: Check to enable spatial-guided attention&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;cross-frame attention&lt;/strong&gt;: Check to enable efficient cross-frame attention&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;temporal-guided attention&lt;/strong&gt;: Check to enable temporal-guided attention&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;FRESCO-guided optimization: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;spatial-guided optimization&lt;/strong&gt;: Check to enable spatial-guided optimization&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;temporal-guided optimization&lt;/strong&gt;: Check to enable temporal-guided optimization&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Background smoothing&lt;/strong&gt;: Check to enable background smoothing (best for static background)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details id=&#34;option3&#34;&gt; &#xA; &lt;summary&gt; &lt;b&gt;Advanced options for the full video translation&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Gradient blending&lt;/strong&gt;: apply Poisson Blending to reduce ghosting artifacts. May slow the process and increase flickers.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Number of parallel processes&lt;/strong&gt;: multiprocessing to speed up the process. Large value (4) is recommended.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/72600758-1dff-4b7c-8f3f-65ee3909f8f6&#34; alt=&#34;option&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;We provide a flexible script &lt;code&gt;run_fresco.py&lt;/code&gt; to run our method.&lt;/p&gt; &#xA;&lt;p&gt;Set the options via a config file. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_fresco.py ./config/config_music.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We provide some examples of the config in &lt;code&gt;config&lt;/code&gt; directory. Most options in the config is the same as those in WebUI. Please check the explanations in the WebUI section.&lt;/p&gt; &#xA;&lt;p&gt;We provide a separate Ebsynth python script &lt;code&gt;video_blend.py&lt;/code&gt; with the temporal blending algorithm introduced in &lt;a href=&#34;https://dcgi.fel.cvut.cz/home/sykorad/ebsynth.html&#34;&gt;Stylizing Video by Example&lt;/a&gt; for interpolating style between key frames. It can work on your own stylized key frames independently of our FRESCO algorithm. For the details, please refer to our previous work &lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/tree/main?tab=readme-ov-file#our-ebsynth-implementation&#34;&gt;Rerender-A-Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;(2) Results&lt;/h2&gt; &#xA;&lt;h3&gt;Key frame translation&lt;/h3&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/e8d5776a-37c5-49ae-8ab4-15669df6f572&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/8a792af6-555c-4e82-ac1e-5c2e1ee35fdb&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/10f9a964-85ac-4433-84c5-1611a6c2c434&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/0ec0fbf9-90dd-4d8b-964d-945b5f6687c2&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;26.5%&#34; align=&#34;center&#34;&gt;a red car turns in the winter&lt;/td&gt; &#xA;   &lt;td width=&#34;26.5%&#34; align=&#34;center&#34;&gt;an African American boxer wearing black boxing gloves punches towards the camera, cartoon style&lt;/td&gt; &#xA;   &lt;td width=&#34;26.5%&#34; align=&#34;center&#34;&gt;a cartoon spiderman in black suit, black shoes and white gloves is dancing&lt;/td&gt; &#xA;   &lt;td width=&#34;20.5%&#34; align=&#34;center&#34;&gt;a beautiful woman holding her glasses in CG style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Full video translation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/williamyang1991/FRESCO/assets/18130694/bf8bfb82-5cb7-4b2f-8169-cf8dbf408b54&#34;&gt;https://github.com/williamyang1991/FRESCO/assets/18130694/bf8bfb82-5cb7-4b2f-8169-cf8dbf408b54&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this work useful for your research, please consider citing our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{yang2024fresco,&#xA; title = {FRESCO: Spatial-Temporal Correspondence for Zero-Shot Video Translation},&#xA; author = {Yang, Shuai and Zhou, Yifan and Liu, Ziwei and and Loy, Chen Change},&#xA; booktitle = {CVPR},&#xA; year = {2024},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The code is mainly developed based on &lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video&#34;&gt;Rerender-A-Video&lt;/a&gt;, &lt;a href=&#34;https://github.com/lllyasviel/ControlNet&#34;&gt;ControlNet&lt;/a&gt;, &lt;a href=&#34;https://github.com/Stability-AI/stablediffusion&#34;&gt;Stable Diffusion&lt;/a&gt;, &lt;a href=&#34;https://github.com/haofeixu/gmflow&#34;&gt;GMFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/jamriska/ebsynth&#34;&gt;Ebsynth&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jasonppy/VoiceCraft</title>
    <updated>2024-03-31T01:49:37Z</updated>
    <id>tag:github.com,2024-03-31:/jasonppy/VoiceCraft</id>
    <link href="https://github.com/jasonppy/VoiceCraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero-Shot Speech Editing and Text-to-Speech in the Wild&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VoiceCraft: Zero-Shot Speech Editing and Text-to-Speech in the Wild&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jasonppy.github.io/VoiceCraft_web&#34;&gt;Demo&lt;/a&gt; &lt;a href=&#34;https://jasonppy.github.io/assets/pdfs/VoiceCraft.pdf&#34;&gt;Paper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;VoiceCraft is a token infilling neural codec language model, that achieves state-of-the-art performance on both &lt;strong&gt;speech editing&lt;/strong&gt; and &lt;strong&gt;zero-shot text-to-speech (TTS)&lt;/strong&gt; on in-the-wild data including audiobooks, internet videos, and podcasts.&lt;/p&gt; &#xA;&lt;p&gt;To clone or edit an unseen voice, VoiceCraft needs only a few seconds of reference.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; 03/28/2024: Model weights are up on HuggingFace🤗 &lt;a href=&#34;https://huggingface.co/pyp1/VoiceCraft/tree/main&#34;&gt;here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Codebase upload&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Environment setup&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inference demo for speech editing and TTS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Training guidance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RealEdit dataset and training manifest&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Model weights (both 330M and 830M, the former seems to be just as good)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write colab notebooks for better hands-on experience&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; HuggingFace Spaces demo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better guidance on training&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to run TTS inference&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;with docker. see &lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/#quickstart&#34;&gt;quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;without docker. see &lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/#environment-setup&#34;&gt;envrionment setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you are inside the docker image or you have installed all dependencies, Checkout &lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/inference_tts.ipynb&#34;&gt;&lt;code&gt;inference_tts.ipynb&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;QuickStart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; To try out TTS inference with VoiceCraft, the best way is using docker. Thank &lt;a href=&#34;https://github.com/ubergarm&#34;&gt;@ubergarm&lt;/a&gt; and &lt;a href=&#34;https://github.com/jay-c88&#34;&gt;@jayc88&lt;/a&gt; for making this happen.&lt;/p&gt; &#xA;&lt;p&gt;Tested on Linux and Windows and should work with any host with docker installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. clone the repo on in a directory on a drive with plenty of free space&#xA;git clone git@github.com:jasonppy/VoiceCraft.git&#xA;cd VoiceCraft&#xA;&#xA;# 2. assumes you have docker installed with nvidia container container-toolkit (windows has this built into the driver)&#xA;# https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/1.13.5/install-guide.html&#xA;# sudo apt-get install -y nvidia-container-toolkit-base || yay -Syu nvidia-container-toolkit || echo etc...&#xA;&#xA;# 3. Try to start an existing container otherwise create a new one passing in all GPUs&#xA;./start-jupyter.sh  # linux&#xA;start-jupyter.bat   # windows&#xA;&#xA;# 4. now open a webpage on the host box to the URL shown at the bottom of:&#xA;docker logs jupyter&#xA;&#xA;# 5. optionally look inside from another terminal&#xA;docker exec -it jupyter /bin/bash&#xA;export USER=(your_linux_username_used_above)&#xA;export HOME=/home/$USER&#xA;sudo apt-get update&#xA;&#xA;# 6. confirm video card(s) are visible inside container&#xA;nvidia-smi&#xA;&#xA;# 7. Now in browser, open inference_tts.ipynb and work through one cell at a time&#xA;echo GOOD LUCK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n voicecraft python=3.9.16&#xA;conda activate voicecraft&#xA;&#xA;pip install torch==2.0.1 # this assumes your system is compatible with CUDA 11.7, otherwise checkout https://pytorch.org/get-started/previous-versions/#v201&#xA;apt-get install ffmpeg # if you don&#39;t already have ffmpeg installed&#xA;pip install -e git+https://github.com/facebookresearch/audiocraft.git@c5157b5bf14bf83449c17ea1eeb66c19fb4bc7f0#egg=audiocraft&#xA;apt-get install espeak-ng # backend for the phonemizer installed below&#xA;pip install tensorboard==2.16.2&#xA;pip install phonemizer==3.2.1&#xA;pip install torchaudio==2.0.2&#xA;pip install datasets==2.16.0&#xA;pip install torchmetrics==0.11.1&#xA;# install MFA for getting forced-alignment, this could take a few minutes&#xA;conda install -c conda-forge montreal-forced-aligner=2.2.17 openfst=1.8.2 kaldi=5.5.1068&#xA;# conda install pocl # above gives an warning for installing pocl, not sure if really need this&#xA;&#xA;# to run ipynb&#xA;conda install -n voicecraft ipykernel --update-deps --force-reinstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have encountered version issues when running things, checkout &lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/environment.yml&#34;&gt;environment.yml&lt;/a&gt; for exact matching.&lt;/p&gt; &#xA;&lt;h2&gt;Inference Examples&lt;/h2&gt; &#xA;&lt;p&gt;Checkout &lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/inference_speech_editing.ipynb&#34;&gt;&lt;code&gt;inference_speech_editing.ipynb&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/inference_tts.ipynb&#34;&gt;&lt;code&gt;inference_tts.ipynb&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;To train an VoiceCraft model, you need to prepare the following parts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;utterances and their transcripts&lt;/li&gt; &#xA; &lt;li&gt;encode the utterances into codes using e.g. Encodec&lt;/li&gt; &#xA; &lt;li&gt;convert transcripts into phoneme sequence, and a phoneme set (we named it vocab.txt)&lt;/li&gt; &#xA; &lt;li&gt;manifest (i.e. metadata)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Step 1,2,3 are handled in &lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/data/phonemize_encodec_encode_hf.py&#34;&gt;./data/phonemize_encodec_encode_hf.py&lt;/a&gt;, where&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Gigaspeech is downloaded through HuggingFace. Note that you need to sign an agreement in order to download the dataset (it needs your auth token)&lt;/li&gt; &#xA; &lt;li&gt;phoneme sequence and encodec codes are also extracted using the script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;An example run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda activate voicecraft&#xA;export CUDA_VISIBLE_DEVICES=0&#xA;cd ./data&#xA;python phonemize_encodec_encode_hf.py \&#xA;--dataset_size xs \&#xA;--download_to path/to/store_huggingface_downloads \&#xA;--save_dir path/to/store_extracted_codes_and_phonemes \&#xA;--encodec_model_path path/to/encodec_model \&#xA;--mega_batch_size 120 \&#xA;--batch_size 32 \&#xA;--max_len 30000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where encodec_model_path is avaliable &lt;a href=&#34;https://huggingface.co/pyp1/VoiceCraft&#34;&gt;here&lt;/a&gt;. This model is trained on Gigaspeech XL, it has 56M parameters, 4 codebooks, each codebook has 2048 codes. Details are described in our &lt;a href=&#34;https://jasonppy.github.io/assets/pdfs/VoiceCraft.pdf&#34;&gt;paper&lt;/a&gt;. If you encounter OOM during extraction, try decrease the batch_size and/or max_len. The extracted codes, phonemes, and vocab.txt will be stored at &lt;code&gt;path/to/store_extracted_codes_and_phonemes/${dataset_size}/{encodec_16khz_4codebooks,phonemes,vocab.txt}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As for manifest, please download train.txt and validation.txt from &lt;a href=&#34;https://huggingface.co/datasets/pyp1/VoiceCraft_RealEdit/tree/main&#34;&gt;here&lt;/a&gt;, and put them under &lt;code&gt;path/to/store_extracted_codes_and_phonemes/manifest/&lt;/code&gt;. Please also download vocab.txt from &lt;a href=&#34;https://huggingface.co/datasets/pyp1/VoiceCraft_RealEdit/tree/main&#34;&gt;here&lt;/a&gt; if you want to use our pretrained VoiceCraft model (so that the phoneme-to-token matching is the same).&lt;/p&gt; &#xA;&lt;p&gt;Now, you are good to start training!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda activate voicecraft&#xA;cd ./z_scripts&#xA;bash e830M.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The codebase is under CC BY-NC-SA 4.0 (&lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/LICENSE-CODE&#34;&gt;LICENSE-CODE&lt;/a&gt;), and the model weights are under Coqui Public Model License 1.0.0 (&lt;a href=&#34;https://raw.githubusercontent.com/jasonppy/VoiceCraft/master/LICENSE-MODEL&#34;&gt;LICENSE-MODEL&lt;/a&gt;). Note that we use some of the code from other repository that are under different licenses: &lt;code&gt;./models/codebooks_patterns.py&lt;/code&gt; is under MIT license; &lt;code&gt;./models/modules&lt;/code&gt;, &lt;code&gt;./steps/optim.py&lt;/code&gt;, &lt;code&gt;data/tokenizer.py&lt;/code&gt; are under Apache License, Version 2.0; the phonemizer we used is under GNU 3.0 License. For drop-in replacement of the phonemizer (i.e. text to IPA phoneme mapping), try &lt;a href=&#34;https://github.com/roedoejet/g2p&#34;&gt;g2p&lt;/a&gt; (MIT License) or &lt;a href=&#34;https://github.com/NeuralVox/OpenPhonemizer&#34;&gt;OpenPhonemizer&lt;/a&gt; (BSD-3-Clause Clear), although these are not tested.&lt;/p&gt; &#xA;&lt;!-- How to use g2p to convert english text into IPA phoneme sequence&#xA;first install it with `pip install g2p`&#xA;```python&#xA;from g2p import make_g2p&#xA;transducer = make_g2p(&#39;eng&#39;, &#39;eng-ipa&#39;)&#xA;transducer(&#34;hello&#34;).output_string &#xA;# it will output: &#39;hʌloʊ&#39;&#xA;``` --&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We thank Feiteng for his &lt;a href=&#34;https://github.com/lifeiteng/vall-e&#34;&gt;VALL-E reproduction&lt;/a&gt;, and we thank audiocraft team for open-sourcing &lt;a href=&#34;https://github.com/facebookresearch/audiocraft&#34;&gt;encodec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{peng2024voicecraft,&#xA;  author    = {Peng, Puyuan and Huang, Po-Yao and Li, Daniel and Mohamed, Abdelrahman and Harwath, David},&#xA;  title     = {VoiceCraft: Zero-Shot Speech Editing and Text-to-Speech in the Wild},&#xA;  journal   = {arXiv},&#xA;  year      = {2024},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Any organization or individual is prohibited from using any technology mentioned in this paper to generate or edit someone&#39;s speech without his/her consent, including but not limited to government leaders, political figures, and celebrities. If you do not comply with this item, you could be in violation of copyright laws.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MetaGLM/glm-cookbook</title>
    <updated>2024-03-31T01:49:37Z</updated>
    <id>tag:github.com,2024-03-31:/MetaGLM/glm-cookbook</id>
    <link href="https://github.com/MetaGLM/glm-cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples and guides for using the GLM-4 API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MetaGLM/glm-cookbook/main/asset/glm.png&#34; alt=&#34;glm&#34; style=&#34;height: 1.5em; vertical-align: bottom;&#34;&gt; glm-cookbook &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MetaGLM/glm-cookbook/main/README_en.md&#34;&gt;Read this in English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;欢迎来到 GLM API 模型入门仓库📘。这是一本开源的 GLM API 入门代码教材。&lt;/p&gt; &#xA;&lt;p&gt;在这里，你会发现丰富的 &lt;strong&gt;代码示例👨‍&lt;/strong&gt;、&lt;strong&gt;实用指南🗺&lt;/strong&gt;️ 以及 &lt;strong&gt;资源链接🔗&lt;/strong&gt;，或许能帮助你轻松掌握 GLM API 的使用！&lt;/p&gt; &#xA;&lt;h2&gt;更新情况 🔥&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥 2024-03-18: 仓库开始更新 &lt;a href=&#34;https://raw.githubusercontent.com/MetaGLM/glm-cookbook/main/Users/zr/Code/glm-cookbook/glms&#34;&gt;智谱清言&lt;/a&gt; 基础开发者教学文档，基础提示词文档 和 智能体文档 已经在 &lt;a href=&#34;https://zhipu-ai.feishu.cn/wiki/SPyFwjSI7iOCoCksq2sc3Eb7nXd&#34;&gt;技术文档&lt;/a&gt; 推出，欢迎体验和留言，我们将继续快速迭代！&lt;/li&gt; &#xA; &lt;li&gt;🔥 2024-03-06: 仓库所在组织 &lt;a href=&#34;https://github.com/MetaGLM&#34;&gt;MetaGLM&lt;/a&gt; 更新了4门语言 (Python, Java,C#,Node.js) 的SDK，欢迎提出意见和对项目进行PR！&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;快速开始 🚀&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;要开始使用GLM API，你首先需要一个 GLM API 账户和相应的 API 密钥。 如果你还没有账户，可以在 &lt;a href=&#34;https://open.bigmodel.cn/&#34;&gt;这里&lt;/a&gt; 免费注册。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;我的代码以 &lt;strong&gt;Python, Jupyter Note&lt;/strong&gt; 为主，但同样的概念也可以应用于其他编程语言（不过这可能要你们自己实现咯）。 这些代码示例旨在帮助我（或许也能对你）如何高效地使用 GLM API 完成常见的简单任务。 推荐使用&lt;code&gt;Python 3.9 - 3.12&lt;/code&gt; 的版本（我自己是Python 3.10）。你需要安装必须的依赖，才能更好的使用 Demo。你可以使用以下命令来安装总的依赖：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;对了，我一般使用 ✅GLM4 来完成任务，我也推荐你使用这个模型哦！&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;仓库文件 📂&lt;/h2&gt; &#xA;&lt;p&gt;我已经分类好了多个文件夹，这些文件夹都有自己的内容，你可以根据自己的需求来查看！&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;🌱&lt;code&gt;basic&lt;/code&gt; 最基础的内容，帮助你熟悉基本的 API 调用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;👁️&lt;code&gt;vision&lt;/code&gt; 关于视觉模型和绘图模型的调用和基本应用。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🔧&lt;code&gt;finetune&lt;/code&gt; 或许可以来这里找找微调的内容？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🎉&lt;code&gt;demo&lt;/code&gt; 一些有趣的小项目，或许可以激发点灵感。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;🤖&lt;code&gt;agent&lt;/code&gt; 看看发布会的智能体有多厉害！&lt;/li&gt; &#xA;   &lt;li&gt;📚&lt;code&gt;data&lt;/code&gt; 运行demo所需要的数据。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;📊&lt;code&gt;glms&lt;/code&gt; 智能体 (智谱清言) 专区，即使你不会代码，也能快速上手！&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🏠&lt;code&gt;asset&lt;/code&gt; 一些相关的图片资料&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;你可以通过以下图片快速了解本仓库构成, 我将尽快同步更新 Zhipu AI SDK的最新实验和教学内容。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MetaGLM/glm-cookbook/main/asset/plan.png&#34; alt=&#34;实现原理图&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;开源SDK&lt;/h2&gt; &#xA;&lt;p&gt;GLM-4系列SDK已经开源，如果你想直接在我们的SDK上进行修改，可以按照以下地址进行需改：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetaGLM/zhipuai-sdk-python-v4&#34;&gt;Python SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetaGLM/zhipuai-sdk-java-v4&#34;&gt;Java SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetaGLM/zhipuai-sdk-csharp-v4&#34;&gt;C# SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetaGLM/zhipuai-sdk-nodejs-v4&#34;&gt;Node.js SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果你有其他语言的SDK想贡献到官方仓库，欢迎提出PR。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献指南 🤝&lt;/h2&gt; &#xA;&lt;p&gt;欢迎大家贡献自己的想法和代码！如果你有任何建议或想添加自己的代码，请随时提交 Pull Request 或开 Issue 讨论。 如果你喜欢这个仓库，欢迎给它一个 ⭐，这将对我有很大帮助！&lt;/p&gt;</summary>
  </entry>
</feed>