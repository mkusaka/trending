<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-09T01:42:34Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>patchy631/ai-engineering-hub</title>
    <updated>2025-03-09T01:42:34Z</updated>
    <id>tag:github.com,2025-03-09:/patchy631/ai-engineering-hub</id>
    <link href="https://github.com/patchy631/ai-engineering-hub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Engineering Hub 🚀&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the &lt;strong&gt;AI Engineering Hub&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Why This Repo?&lt;/h2&gt; &#xA;&lt;p&gt;AI Engineering is advancing rapidly, and staying at the forefront requires both deep understanding and hands-on experience. Here, you will find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In-depth tutorials on &lt;strong&gt;LLMs and RAGs&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Real-world &lt;strong&gt;AI agent&lt;/strong&gt; applications&lt;/li&gt; &#xA; &lt;li&gt;Examples to implement, adapt, and scale in your projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Whether you’re a beginner, practitioner, or researcher, this repo provides resources for all skill levels to experiment and succeed in AI engineering.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📬 Stay Updated with Our Newsletter!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get a FREE Data Science eBook&lt;/strong&gt; 📖 with 150+ essential lessons in Data Science when you subscribe to our newsletter! Stay in the loop with the latest tutorials, insights, and exclusive resources. &lt;a href=&#34;https://join.dailydoseofds.com&#34;&gt;Subscribe now!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.dailydoseofds.com&#34;&gt;&lt;img src=&#34;https://github.com/patchy631/ai-engineering/raw/main/resources/join_ddods.png&#34; alt=&#34;Daily Dose of Data Science Newsletter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📢 Contribute to the AI Engineering Hub!&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributors! Whether you want to add new tutorials, improve existing code, or report issues, your contributions make this community thrive. Here’s how to get involved:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fork&lt;/strong&gt; the repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your contribution.&lt;/li&gt; &#xA; &lt;li&gt;Submit a &lt;strong&gt;Pull Request&lt;/strong&gt; and describe the improvements.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/patchy631/ai-engineering-hub/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;💬 Connect&lt;/h2&gt; &#xA;&lt;p&gt;For discussions, suggestions, and more, feel free to &lt;a href=&#34;https://github.com/patchy631/ai-engineering/issues&#34;&gt;create an issue&lt;/a&gt; or reach out directly!&lt;/p&gt; &#xA;&lt;p&gt;Happy Coding! 🎉&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jackfrued/Python-100-Days</title>
    <updated>2025-03-09T01:42:34Z</updated>
    <id>tag:github.com,2025-03-09:/jackfrued/Python-100-Days</id>
    <link href="https://github.com/jackfrued/Python-100-Days" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python - 100天从新手到大师&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Python - 100天从新手到大师&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：骆昊&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果访问 GitHub 比较慢的话，可以关注我的知乎号（&lt;a href=&#34;https://www.zhihu.com/people/jackfrued&#34;&gt;&lt;strong&gt;Python-Jack&lt;/strong&gt;&lt;/a&gt;），上面的&lt;a href=&#34;https://zhuanlan.zhihu.com/c_1216656665569013760&#34;&gt;“&lt;strong&gt;从零开始学Python&lt;/strong&gt;”&lt;/a&gt;专栏（对应本项目前 20 天的内容）比较适合初学者，其他的专栏如“&lt;a href=&#34;https://www.zhihu.com/column/c_1620074540456964096&#34;&gt;&lt;strong&gt;数据思维和统计思维&lt;/strong&gt;&lt;/a&gt;”、“&lt;a href=&#34;https://www.zhihu.com/column/c_1217746527315496960&#34;&gt;&lt;strong&gt;基于Python的数据分析&lt;/strong&gt;&lt;/a&gt;”、“&lt;a href=&#34;https://www.zhihu.com/column/c_1628900668109946880&#34;&gt;&lt;strong&gt;说走就走的AI之旅&lt;/strong&gt;&lt;/a&gt;”等也在持续创作和更新中，欢迎大家关注、点赞和评论。如果希望结伴学习或者讨论问题，可以加入下面的 QQ 交流群（三个群加一个即可），请不要重复加群，也不要在群里发布广告和其他色情、低俗或敏感内容。如果遇到解决不了的问题，可以添加我的私人微信（微信号：&lt;strong&gt;jackfrued&lt;/strong&gt;），备注好自己的称呼和需求，我会为大家提供力所能及的帮助。&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/python_study_qq_group.png&#34; style=&#34;zoom:30%;&#34;&gt; &#xA; &lt;p&gt;本项目对应的部分视频在B站（账号：&lt;a href=&#34;https://space.bilibili.com/1177252794&#34;&gt;&lt;strong&gt;骆昊jackfrued&lt;/strong&gt;&lt;/a&gt;）可以找到，有兴趣的小伙伴可以关注一下，刚刚起号还希望大家多多支持！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Python应用领域和职业发展分析&lt;/h3&gt; &#xA;&lt;p&gt;简单的说，Python是一个“优雅”、“明确”、“简单”的编程语言。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;学习曲线低，非专业人士也能上手&lt;/li&gt; &#xA; &lt;li&gt;开源系统，拥有强大的生态圈&lt;/li&gt; &#xA; &lt;li&gt;解释型语言，完美的平台可移植性&lt;/li&gt; &#xA; &lt;li&gt;动态类型语言，支持面向对象和函数式编程&lt;/li&gt; &#xA; &lt;li&gt;代码规范程度高，可读性强&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Python在以下领域都有用武之地。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;后端开发 - Python / Java / Go / PHP&lt;/li&gt; &#xA; &lt;li&gt;DevOps - Python / Shell / Ruby&lt;/li&gt; &#xA; &lt;li&gt;数据采集 - Python / C++ / Java&lt;/li&gt; &#xA; &lt;li&gt;量化交易 - Python / C++ / R&lt;/li&gt; &#xA; &lt;li&gt;数据科学 - Python / R / Julia / Matlab&lt;/li&gt; &#xA; &lt;li&gt;机器学习 - Python / R / C++ / Julia&lt;/li&gt; &#xA; &lt;li&gt;自动化测试 - Python / Shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;作为一名Python开发者，根据个人的喜好和职业规划，可以选择的就业领域也非常多。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python后端开发工程师（服务器、云平台、数据接口）&lt;/li&gt; &#xA; &lt;li&gt;Python运维工程师（自动化运维、SRE、DevOps）&lt;/li&gt; &#xA; &lt;li&gt;Python数据分析师（数据分析、商业智能、数字化运营）&lt;/li&gt; &#xA; &lt;li&gt;Python数据科学家（机器学习、深度学习、算法专家）&lt;/li&gt; &#xA; &lt;li&gt;Python爬虫工程师（不推荐此赛道！！！）&lt;/li&gt; &#xA; &lt;li&gt;Python测试工程师（自动化测试、测试开发）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：目前，&lt;strong&gt;数据科学赛道是非常热门的方向&lt;/strong&gt;，因为不管是互联网行业还是传统行业都已经积累了大量的数据，各行各业都需要数据科学家从已有的数据中发现更多的商业价值，从而为企业的决策提供数据的支撑，这就是所谓的数据驱动决策。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;给初学者的几个建议：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make English as your working language.&lt;/strong&gt; （让英语成为你的工作语言）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Practice makes perfect.&lt;/strong&gt; （熟能生巧）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;All experience comes from the mistakes you&#39;ve made.&lt;/strong&gt; （所有的经验都源于你犯过的错误）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Don&#39;t be a freeloader.&lt;/strong&gt; （不要当伸手党）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Either outstanding or out.&lt;/strong&gt; （要么出众，要么出局）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day01~20 - Python语言基础&lt;/h3&gt; &#xA;&lt;h4&gt;Day01 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/01.%E5%88%9D%E8%AF%86Python.md&#34;&gt;初识Python&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Python简介 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python编年史&lt;/li&gt; &#xA;   &lt;li&gt;Python优缺点&lt;/li&gt; &#xA;   &lt;li&gt;Python应用领域&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;安装Python环境 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows环境&lt;/li&gt; &#xA;   &lt;li&gt;macOS环境&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day02 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/02.%E7%AC%AC%E4%B8%80%E4%B8%AAPython%E7%A8%8B%E5%BA%8F.md&#34;&gt;第一个Python程序&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;编写代码的工具&lt;/li&gt; &#xA; &lt;li&gt;你好世界&lt;/li&gt; &#xA; &lt;li&gt;注释你的代码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day03 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/03.Python%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F.md&#34;&gt;Python语言中的变量&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;一些常识&lt;/li&gt; &#xA; &lt;li&gt;变量和类型&lt;/li&gt; &#xA; &lt;li&gt;变量命名&lt;/li&gt; &#xA; &lt;li&gt;变量的使用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day04 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/04.Python%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6.md&#34;&gt;Python语言中的运算符&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;算术运算符&lt;/li&gt; &#xA; &lt;li&gt;赋值运算符&lt;/li&gt; &#xA; &lt;li&gt;比较运算符和逻辑运算符&lt;/li&gt; &#xA; &lt;li&gt;运算符和表达式应用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;华氏和摄氏温度转换&lt;/li&gt; &#xA;   &lt;li&gt;计算圆的周长和面积&lt;/li&gt; &#xA;   &lt;li&gt;判断闰年&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day05 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/05.%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.md&#34;&gt;分支结构&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用if和else构造分支结构&lt;/li&gt; &#xA; &lt;li&gt;使用match和case构造分支结构&lt;/li&gt; &#xA; &lt;li&gt;分支结构的应用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;分段函数求值&lt;/li&gt; &#xA;   &lt;li&gt;百分制成绩转换成等级&lt;/li&gt; &#xA;   &lt;li&gt;计算三角形的周长和面积&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day06 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/06.%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.md&#34;&gt;循环结构&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;for-in循环&lt;/li&gt; &#xA; &lt;li&gt;while循环&lt;/li&gt; &#xA; &lt;li&gt;break和continue&lt;/li&gt; &#xA; &lt;li&gt;嵌套的循环结构&lt;/li&gt; &#xA; &lt;li&gt;循环结构的应用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;判断素数&lt;/li&gt; &#xA;   &lt;li&gt;最大公约数&lt;/li&gt; &#xA;   &lt;li&gt;猜数字游戏&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day07 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/07.%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E5%AE%9E%E6%88%98.md&#34;&gt;分支和循环结构实战&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;例子1：100以内的素数&lt;/li&gt; &#xA; &lt;li&gt;例子2：斐波那契数列&lt;/li&gt; &#xA; &lt;li&gt;例子3：寻找水仙花数&lt;/li&gt; &#xA; &lt;li&gt;例子4：百钱百鸡问题&lt;/li&gt; &#xA; &lt;li&gt;例子5：CRAPS赌博游戏&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day08 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/08.%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%88%97%E8%A1%A8-1.md&#34;&gt;常用数据结构之列表-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建列表&lt;/li&gt; &#xA; &lt;li&gt;列表的运算&lt;/li&gt; &#xA; &lt;li&gt;元素的遍历&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day09 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/09.%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%88%97%E8%A1%A8-2.md&#34;&gt;常用数据结构之列表-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;列表的方法 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;添加和删除元素&lt;/li&gt; &#xA;   &lt;li&gt;元素位置和频次&lt;/li&gt; &#xA;   &lt;li&gt;元素排序和反转&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;列表生成式&lt;/li&gt; &#xA; &lt;li&gt;嵌套列表&lt;/li&gt; &#xA; &lt;li&gt;列表的应用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day10 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/10.%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%85%83%E7%BB%84.md&#34;&gt;常用数据结构之元组&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;元组的定义和运算&lt;/li&gt; &#xA; &lt;li&gt;打包和解包操作&lt;/li&gt; &#xA; &lt;li&gt;交换变量的值&lt;/li&gt; &#xA; &lt;li&gt;元组和列表的比较&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day11 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/11.%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2.md&#34;&gt;常用数据结构之字符串&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;字符串的定义 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;转义字符&lt;/li&gt; &#xA;   &lt;li&gt;原始字符串&lt;/li&gt; &#xA;   &lt;li&gt;字符的特殊表示&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;字符串的运算 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;拼接和重复&lt;/li&gt; &#xA;   &lt;li&gt;比较运算&lt;/li&gt; &#xA;   &lt;li&gt;成员运算&lt;/li&gt; &#xA;   &lt;li&gt;获取字符串长度&lt;/li&gt; &#xA;   &lt;li&gt;索引和切片&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;字符的遍历&lt;/li&gt; &#xA; &lt;li&gt;字符串的方法 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;大小写相关操作&lt;/li&gt; &#xA;   &lt;li&gt;查找操作&lt;/li&gt; &#xA;   &lt;li&gt;性质判断&lt;/li&gt; &#xA;   &lt;li&gt;格式化&lt;/li&gt; &#xA;   &lt;li&gt;修剪操作&lt;/li&gt; &#xA;   &lt;li&gt;替换操作&lt;/li&gt; &#xA;   &lt;li&gt;拆分与合并&lt;/li&gt; &#xA;   &lt;li&gt;编码与解码&lt;/li&gt; &#xA;   &lt;li&gt;其他方法&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day12 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/12.%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9B%86%E5%90%88.md&#34;&gt;常用数据结构之集合&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建集合&lt;/li&gt; &#xA; &lt;li&gt;元素的变量&lt;/li&gt; &#xA; &lt;li&gt;集合的运算 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;成员运算&lt;/li&gt; &#xA;   &lt;li&gt;二元运算&lt;/li&gt; &#xA;   &lt;li&gt;比较运算&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;集合的方法&lt;/li&gt; &#xA; &lt;li&gt;不可变集合&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day13 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/13.%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%97%E5%85%B8.md&#34;&gt;常用数据结构之字典&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建和使用字典&lt;/li&gt; &#xA; &lt;li&gt;字典的运算&lt;/li&gt; &#xA; &lt;li&gt;字典的方法&lt;/li&gt; &#xA; &lt;li&gt;字典的应用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day14 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/14.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97.md&#34;&gt;函数和模块&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;定义函数&lt;/li&gt; &#xA; &lt;li&gt;函数的参数 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;位置参数和关键字参数&lt;/li&gt; &#xA;   &lt;li&gt;参数的默认值&lt;/li&gt; &#xA;   &lt;li&gt;可变参数&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;用模块管理函数&lt;/li&gt; &#xA; &lt;li&gt;标准库中的模块和函数&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day15 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/15.%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98.md&#34;&gt;函数应用实战&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;例子1：随机验证码&lt;/li&gt; &#xA; &lt;li&gt;例子2：判断素数&lt;/li&gt; &#xA; &lt;li&gt;例子3：最大公约数和最小公倍数&lt;/li&gt; &#xA; &lt;li&gt;例子4：数据统计&lt;/li&gt; &#xA; &lt;li&gt;例子5：双色球随机选号&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day16 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/16.%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%BF%9B%E9%98%B6.md&#34;&gt;函数使用进阶&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;高阶函数&lt;/li&gt; &#xA; &lt;li&gt;Lambda函数&lt;/li&gt; &#xA; &lt;li&gt;偏函数&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day17 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/17.%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8.md&#34;&gt;函数高级应用&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;装饰器&lt;/li&gt; &#xA; &lt;li&gt;递归调用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day18 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/18.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8.md&#34;&gt;面向对象编程入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;类和对象&lt;/li&gt; &#xA; &lt;li&gt;定义类&lt;/li&gt; &#xA; &lt;li&gt;创建和使用对象&lt;/li&gt; &#xA; &lt;li&gt;初始化方法&lt;/li&gt; &#xA; &lt;li&gt;面向对象的支柱&lt;/li&gt; &#xA; &lt;li&gt;面向对象案例 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例子1：数字时钟&lt;/li&gt; &#xA;   &lt;li&gt;例子2：平面上的点&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day19 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/19.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6.md&#34;&gt;面向对象编程进阶&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;可见性和属性装饰器&lt;/li&gt; &#xA; &lt;li&gt;动态属性&lt;/li&gt; &#xA; &lt;li&gt;静态方法和类方法&lt;/li&gt; &#xA; &lt;li&gt;继承和多态&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day20 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-20/20.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8.md&#34;&gt;面向对象编程应用&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;扑克游戏&lt;/li&gt; &#xA; &lt;li&gt;工资结算系统&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day21~30 - Python语言应用&lt;/h3&gt; &#xA;&lt;h4&gt;Day21 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/21.%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md&#34;&gt;文件读写和异常处理&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;打开和关闭文件&lt;/li&gt; &#xA; &lt;li&gt;读写文本文件&lt;/li&gt; &#xA; &lt;li&gt;异常处理机制&lt;/li&gt; &#xA; &lt;li&gt;上下文管理器语法&lt;/li&gt; &#xA; &lt;li&gt;读写二进制文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day22 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/22.%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.md&#34;&gt;对象的序列化和反序列化&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;JSON概述&lt;/li&gt; &#xA; &lt;li&gt;读写JSON格式的数据&lt;/li&gt; &#xA; &lt;li&gt;包管理工具pip&lt;/li&gt; &#xA; &lt;li&gt;使用网络API获取数据&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day23 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/23.Python%E8%AF%BB%E5%86%99CSV%E6%96%87%E4%BB%B6.md&#34;&gt;Python读写CSV文件&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;CSV文件介绍&lt;/li&gt; &#xA; &lt;li&gt;将数据写入CSV文件&lt;/li&gt; &#xA; &lt;li&gt;从CSV文件读取数据&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day24 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/24.%E7%94%A8Python%E8%AF%BB%E5%86%99Excel%E6%96%87%E4%BB%B6-1.md&#34;&gt;Python读写Excel文件-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Excel简介&lt;/li&gt; &#xA; &lt;li&gt;读Excel文件&lt;/li&gt; &#xA; &lt;li&gt;写Excel文件&lt;/li&gt; &#xA; &lt;li&gt;调整样式&lt;/li&gt; &#xA; &lt;li&gt;公式计算&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day25 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/25.Python%E8%AF%BB%E5%86%99Excel%E6%96%87%E4%BB%B6-2.md&#34;&gt;Python读写Excel文件-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Excel简介&lt;/li&gt; &#xA; &lt;li&gt;读Excel文件&lt;/li&gt; &#xA; &lt;li&gt;写Excel文件&lt;/li&gt; &#xA; &lt;li&gt;调整样式&lt;/li&gt; &#xA; &lt;li&gt;生成统计图表&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day26 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/26.Python%E6%93%8D%E4%BD%9CWord%E5%92%8CPowerPoint%E6%96%87%E4%BB%B6.md&#34;&gt;Python操作Word和PowerPoint文件&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;操作Word文档&lt;/li&gt; &#xA; &lt;li&gt;生成PowerPoint&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day27 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/27.Python%E6%93%8D%E4%BD%9CPDF%E6%96%87%E4%BB%B6.md&#34;&gt;Python操作PDF文件&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;从PDF中提取文本&lt;/li&gt; &#xA; &lt;li&gt;旋转和叠加页面&lt;/li&gt; &#xA; &lt;li&gt;加密PDF文件&lt;/li&gt; &#xA; &lt;li&gt;批量添加水印&lt;/li&gt; &#xA; &lt;li&gt;创建PDF文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day28 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/28.Python%E5%A4%84%E7%90%86%E5%9B%BE%E5%83%8F.md&#34;&gt;Python处理图像&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;入门知识&lt;/li&gt; &#xA; &lt;li&gt;用Pillow处理图像&lt;/li&gt; &#xA; &lt;li&gt;使用Pillow绘图&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day29 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/29.Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%92%8C%E7%9F%AD%E4%BF%A1.md&#34;&gt;Python发送邮件和短信&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;发送电子邮件&lt;/li&gt; &#xA; &lt;li&gt;发送短信&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day30 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/30.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8.md&#34;&gt;正则表达式的应用&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;正则表达式相关知识&lt;/li&gt; &#xA; &lt;li&gt;Python对正则表达式的支持 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例子1：输入验证&lt;/li&gt; &#xA;   &lt;li&gt;例子2：内容提取&lt;/li&gt; &#xA;   &lt;li&gt;例子3：内容替换&lt;/li&gt; &#xA;   &lt;li&gt;例子4：长句拆分&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day31~35 - 其他相关内容&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day31-35/31.Python%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6.md&#34;&gt;Python语言进阶&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;重要知识点&lt;/li&gt; &#xA; &lt;li&gt;数据结构和算法&lt;/li&gt; &#xA; &lt;li&gt;函数的使用方式&lt;/li&gt; &#xA; &lt;li&gt;面向对象相关知识&lt;/li&gt; &#xA; &lt;li&gt;迭代器和生成器&lt;/li&gt; &#xA; &lt;li&gt;并发编程&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day31-35/32-33.Web%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8.md&#34;&gt;Web前端入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;用HTML标签承载页面内容&lt;/li&gt; &#xA; &lt;li&gt;用CSS渲染页面&lt;/li&gt; &#xA; &lt;li&gt;用JavaScript处理交互式行为&lt;/li&gt; &#xA; &lt;li&gt;Vue.js入门&lt;/li&gt; &#xA; &lt;li&gt;Element的使用&lt;/li&gt; &#xA; &lt;li&gt;Bootstrap的使用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day31-35/34-35.%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md&#34;&gt;玩转Linux操作系统&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;操作系统发展史和Linux概述&lt;/li&gt; &#xA; &lt;li&gt;Linux基础命令&lt;/li&gt; &#xA; &lt;li&gt;Linux中的实用程序&lt;/li&gt; &#xA; &lt;li&gt;Linux的文件系统&lt;/li&gt; &#xA; &lt;li&gt;Vim编辑器的应用&lt;/li&gt; &#xA; &lt;li&gt;环境变量和Shell编程&lt;/li&gt; &#xA; &lt;li&gt;软件的安装和服务的配置&lt;/li&gt; &#xA; &lt;li&gt;网络访问和管理&lt;/li&gt; &#xA; &lt;li&gt;其他相关内容&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day36~45 - 数据库基础和进阶&lt;/h3&gt; &#xA;&lt;h4&gt;Day36 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/36.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CMySQL%E6%A6%82%E8%BF%B0.md&#34;&gt;关系型数据库和MySQL概述&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;关系型数据库概述&lt;/li&gt; &#xA; &lt;li&gt;MySQL简介&lt;/li&gt; &#xA; &lt;li&gt;安装MySQL&lt;/li&gt; &#xA; &lt;li&gt;MySQL基本命令&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day37 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/37.SQL%E8%AF%A6%E8%A7%A3%E4%B9%8BDDL.md&#34;&gt;SQL详解之DDL&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;建库建表&lt;/li&gt; &#xA; &lt;li&gt;删除表和修改表&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day38 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/38.SQL%E8%AF%A6%E8%A7%A3%E4%B9%8BDML.md&#34;&gt;SQL详解之DML&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;insert操作&lt;/li&gt; &#xA; &lt;li&gt;delete操作&lt;/li&gt; &#xA; &lt;li&gt;update操作&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day39 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/39.SQL%E8%AF%A6%E8%A7%A3%E4%B9%8BDQL.md&#34;&gt;SQL详解之DQL&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;投影和别名&lt;/li&gt; &#xA; &lt;li&gt;筛选数据&lt;/li&gt; &#xA; &lt;li&gt;空值处理&lt;/li&gt; &#xA; &lt;li&gt;去重&lt;/li&gt; &#xA; &lt;li&gt;排序&lt;/li&gt; &#xA; &lt;li&gt;聚合函数&lt;/li&gt; &#xA; &lt;li&gt;嵌套查询&lt;/li&gt; &#xA; &lt;li&gt;分组操作&lt;/li&gt; &#xA; &lt;li&gt;表连接 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;笛卡尔积&lt;/li&gt; &#xA;   &lt;li&gt;内连接&lt;/li&gt; &#xA;   &lt;li&gt;自然连接&lt;/li&gt; &#xA;   &lt;li&gt;外连接&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;窗口函数 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;定义窗口&lt;/li&gt; &#xA;   &lt;li&gt;排名函数&lt;/li&gt; &#xA;   &lt;li&gt;取数函数&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day40 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/40.SQL%E8%AF%A6%E8%A7%A3%E4%B9%8BDCL.md&#34;&gt;SQL详解之DCL&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建用户&lt;/li&gt; &#xA; &lt;li&gt;授予权限&lt;/li&gt; &#xA; &lt;li&gt;召回权限&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day41 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/41.MySQL%E6%96%B0%E7%89%B9%E6%80%A7.md&#34;&gt;MySQL新特性&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSON类型&lt;/li&gt; &#xA; &lt;li&gt;窗口函数&lt;/li&gt; &#xA; &lt;li&gt;公共表表达式&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day42 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/42.%E8%A7%86%E5%9B%BE%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E8%BF%87%E7%A8%8B.md&#34;&gt;视图、函数和过程&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;视图 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;使用场景&lt;/li&gt; &#xA;   &lt;li&gt;创建视图&lt;/li&gt; &#xA;   &lt;li&gt;使用限制&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;函数 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;内置函数&lt;/li&gt; &#xA;   &lt;li&gt;用户自定义函数（UDF）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;过程 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;创建过程&lt;/li&gt; &#xA;   &lt;li&gt;调用过程&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day43 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/43.%E7%B4%A2%E5%BC%95.md&#34;&gt;索引&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;执行计划&lt;/li&gt; &#xA; &lt;li&gt;索引的原理&lt;/li&gt; &#xA; &lt;li&gt;创建索引 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;普通索引&lt;/li&gt; &#xA;   &lt;li&gt;唯一索引&lt;/li&gt; &#xA;   &lt;li&gt;前缀索引&lt;/li&gt; &#xA;   &lt;li&gt;复合索引&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;注意事项&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day44 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/44.Python%E6%8E%A5%E5%85%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93.md&#34;&gt;Python接入MySQL数据库&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装三方库&lt;/li&gt; &#xA; &lt;li&gt;创建连接&lt;/li&gt; &#xA; &lt;li&gt;获取游标&lt;/li&gt; &#xA; &lt;li&gt;执行SQL语句&lt;/li&gt; &#xA; &lt;li&gt;通过游标抓取数据&lt;/li&gt; &#xA; &lt;li&gt;事务提交和回滚&lt;/li&gt; &#xA; &lt;li&gt;释放连接&lt;/li&gt; &#xA; &lt;li&gt;编写ETL脚本&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day45 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-45/45.%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E5%92%8CHiveSQL.md&#34;&gt;大数据平台和HiveSQL&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hadoop生态圈&lt;/li&gt; &#xA; &lt;li&gt;Hive概述&lt;/li&gt; &#xA; &lt;li&gt;准备工作&lt;/li&gt; &#xA; &lt;li&gt;数据类型&lt;/li&gt; &#xA; &lt;li&gt;DDL操作&lt;/li&gt; &#xA; &lt;li&gt;DML操作&lt;/li&gt; &#xA; &lt;li&gt;数据查询&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day46~60 - 实战Django&lt;/h3&gt; &#xA;&lt;h4&gt;Day46 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/46.Django%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.md&#34;&gt;Django快速上手&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Web应用工作机制&lt;/li&gt; &#xA; &lt;li&gt;HTTP请求和响应&lt;/li&gt; &#xA; &lt;li&gt;Django框架概述&lt;/li&gt; &#xA; &lt;li&gt;5分钟快速上手&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day47 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/47.%E6%B7%B1%E5%85%A5%E6%A8%A1%E5%9E%8B.md&#34;&gt;深入模型&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;关系型数据库配置&lt;/li&gt; &#xA; &lt;li&gt;使用ORM完成对模型的CRUD操作&lt;/li&gt; &#xA; &lt;li&gt;管理后台的使用&lt;/li&gt; &#xA; &lt;li&gt;Django模型最佳实践&lt;/li&gt; &#xA; &lt;li&gt;模型定义参考&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day48 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/48.%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8CAjax%E8%AF%B7%E6%B1%82.md&#34;&gt;静态资源和Ajax请求&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;加载静态资源&lt;/li&gt; &#xA; &lt;li&gt;Ajax概述&lt;/li&gt; &#xA; &lt;li&gt;用Ajax实现投票功能&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day49 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/49.Cookie%E5%92%8CSession.md&#34;&gt;Cookie和Session&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;实现用户跟踪&lt;/li&gt; &#xA; &lt;li&gt;cookie和session的关系&lt;/li&gt; &#xA; &lt;li&gt;Django框架对session的支持&lt;/li&gt; &#xA; &lt;li&gt;视图函数中的cookie读写操作&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day50 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/50.%E5%88%B6%E4%BD%9C%E6%8A%A5%E8%A1%A8.md&#34;&gt;报表和日志&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;通过&lt;code&gt;HttpResponse&lt;/code&gt;修改响应头&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;StreamingHttpResponse&lt;/code&gt;处理大文件&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;xlwt&lt;/code&gt;生成Excel报表&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;reportlab&lt;/code&gt;生成PDF报表&lt;/li&gt; &#xA; &lt;li&gt;使用ECharts生成前端图表&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day51 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/51.%E6%97%A5%E5%BF%97%E5%92%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F.md&#34;&gt;日志和调试工具栏&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;配置日志&lt;/li&gt; &#xA; &lt;li&gt;配置Django-Debug-Toolbar&lt;/li&gt; &#xA; &lt;li&gt;优化ORM代码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day52 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/52.%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8.md&#34;&gt;中间件的应用&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;什么是中间件&lt;/li&gt; &#xA; &lt;li&gt;Django框架内置的中间件&lt;/li&gt; &#xA; &lt;li&gt;自定义中间件及其应用场景&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day53 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/53.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8.md&#34;&gt;前后端分离开发入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;返回JSON格式的数据&lt;/li&gt; &#xA; &lt;li&gt;用Vue.js渲染页面&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day54 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/54.RESTful%E6%9E%B6%E6%9E%84%E5%92%8CDRF%E5%85%A5%E9%97%A8.md&#34;&gt;RESTful架构和DRF入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;REST概述&lt;/li&gt; &#xA; &lt;li&gt;DRF库使用入门&lt;/li&gt; &#xA; &lt;li&gt;前后端分离开发&lt;/li&gt; &#xA; &lt;li&gt;JWT的应用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day55 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/55.RESTful%E6%9E%B6%E6%9E%84%E5%92%8CDRF%E8%BF%9B%E9%98%B6.md&#34;&gt;RESTful架构和DRF进阶&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用CBV&lt;/li&gt; &#xA; &lt;li&gt;数据分页&lt;/li&gt; &#xA; &lt;li&gt;数据筛选&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day56 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/56.%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98.md&#34;&gt;使用缓存&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;网站优化第一定律&lt;/li&gt; &#xA; &lt;li&gt;在Django项目中使用Redis提供缓存服务&lt;/li&gt; &#xA; &lt;li&gt;在视图函数中读写缓存&lt;/li&gt; &#xA; &lt;li&gt;使用装饰器实现页面缓存&lt;/li&gt; &#xA; &lt;li&gt;为数据接口提供缓存服务&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day57 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/57.%E6%8E%A5%E5%85%A5%E4%B8%89%E6%96%B9%E5%B9%B3%E5%8F%B0.md&#34;&gt;接入三方平台&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;文件上传表单控件和图片文件预览&lt;/li&gt; &#xA; &lt;li&gt;服务器端如何处理上传的文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day58 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/58.%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.md&#34;&gt;异步任务和定时任务&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;网站优化第二定律&lt;/li&gt; &#xA; &lt;li&gt;配置消息队列服务&lt;/li&gt; &#xA; &lt;li&gt;在项目中使用Celery实现任务异步化&lt;/li&gt; &#xA; &lt;li&gt;在项目中使用Celery实现定时任务&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day59 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/59.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md&#34;&gt;单元测试&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day60 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day46-60/60.%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF.md&#34;&gt;项目上线&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Python中的单元测试&lt;/li&gt; &#xA; &lt;li&gt;Django框架对单元测试的支持&lt;/li&gt; &#xA; &lt;li&gt;使用版本控制系统&lt;/li&gt; &#xA; &lt;li&gt;配置和使用uWSGI&lt;/li&gt; &#xA; &lt;li&gt;动静分离和Nginx配置&lt;/li&gt; &#xA; &lt;li&gt;配置HTTPS&lt;/li&gt; &#xA; &lt;li&gt;配置域名解析&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day61~65 - 网络数据采集&lt;/h3&gt; &#xA;&lt;h4&gt;Day61 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/61.%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%A6%82%E8%BF%B0.md&#34;&gt;网络数据采集概述&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;网络爬虫的概念及其应用领域&lt;/li&gt; &#xA; &lt;li&gt;网络爬虫的合法性探讨&lt;/li&gt; &#xA; &lt;li&gt;开发网络爬虫的相关工具&lt;/li&gt; &#xA; &lt;li&gt;一个爬虫程序的构成&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day62 - 数据抓取和解析&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/62.%E7%94%A8Python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90-1.md&#34;&gt;使用&lt;code&gt;requests&lt;/code&gt;三方库实现数据抓取&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/62.%E7%94%A8Python%E8%A7%A3%E6%9E%90HTML%E9%A1%B5%E9%9D%A2-2.md&#34;&gt;页面解析的三种方式&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;正则表达式解析&lt;/li&gt; &#xA;   &lt;li&gt;XPath解析&lt;/li&gt; &#xA;   &lt;li&gt;CSS选择器解析&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day63 - Python中的并发编程&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1.md&#34;&gt;多线程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-2.md&#34;&gt;多进程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-3.md&#34;&gt;异步I/O&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day64 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/64.%E4%BD%BF%E7%94%A8Selenium%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9.md&#34;&gt;使用Selenium抓取网页动态内容&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装Selenium&lt;/li&gt; &#xA; &lt;li&gt;加载页面&lt;/li&gt; &#xA; &lt;li&gt;查找元素和模拟用户行为&lt;/li&gt; &#xA; &lt;li&gt;隐式等待和显示等待&lt;/li&gt; &#xA; &lt;li&gt;执行JavaScript代码&lt;/li&gt; &#xA; &lt;li&gt;Selenium反爬破解&lt;/li&gt; &#xA; &lt;li&gt;设置无头浏览器&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day65 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/65.%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6Scrapy%E7%AE%80%E4%BB%8B.md&#34;&gt;爬虫框架Scrapy简介&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Scrapy核心组件&lt;/li&gt; &#xA; &lt;li&gt;Scrapy工作流程&lt;/li&gt; &#xA; &lt;li&gt;安装Scrapy和创建项目&lt;/li&gt; &#xA; &lt;li&gt;编写蜘蛛程序&lt;/li&gt; &#xA; &lt;li&gt;编写中间件和管道程序&lt;/li&gt; &#xA; &lt;li&gt;Scrapy配置文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day66~80 - Python数据分析&lt;/h3&gt; &#xA;&lt;h4&gt;Day66 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/66.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0.md&#34;&gt;数据分析概述&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据分析师的职责&lt;/li&gt; &#xA; &lt;li&gt;数据分析师的技能栈&lt;/li&gt; &#xA; &lt;li&gt;数据分析相关库&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day67 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/67.%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.md&#34;&gt;环境准备&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装和使用anaconda &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;conda相关命令&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;安装和使用jupyter-lab &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;安装和启动&lt;/li&gt; &#xA;   &lt;li&gt;使用小技巧&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day68 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/68.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-1.md&#34;&gt;NumPy的应用-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建数组对象&lt;/li&gt; &#xA; &lt;li&gt;数组对象的属性&lt;/li&gt; &#xA; &lt;li&gt;数组对象的索引运算 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;普通索引&lt;/li&gt; &#xA;   &lt;li&gt;花式索引&lt;/li&gt; &#xA;   &lt;li&gt;布尔索引&lt;/li&gt; &#xA;   &lt;li&gt;切片索引&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;案例：使用数组处理图像&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day69 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/69.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-2.md&#34;&gt;NumPy的应用-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数组对象的相关方法 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;获取描述性统计信息&lt;/li&gt; &#xA;   &lt;li&gt;其他相关方法&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day70 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/70.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-3.md&#34;&gt;NumPy的应用-3&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数组的运算 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;数组跟标量的运算&lt;/li&gt; &#xA;   &lt;li&gt;数组跟数组的运算&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;通用一元函数&lt;/li&gt; &#xA; &lt;li&gt;通用二元函数&lt;/li&gt; &#xA; &lt;li&gt;广播机制&lt;/li&gt; &#xA; &lt;li&gt;Numpy常用函数&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day71 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/71.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-4.md&#34;&gt;NumPy的应用-4&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;向量&lt;/li&gt; &#xA; &lt;li&gt;行列式&lt;/li&gt; &#xA; &lt;li&gt;矩阵&lt;/li&gt; &#xA; &lt;li&gt;多项式&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day72 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/72.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-1.md&#34;&gt;深入浅出pandas-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建Series对象&lt;/li&gt; &#xA; &lt;li&gt;Series对象的运算&lt;/li&gt; &#xA; &lt;li&gt;Series对象的属性和方法&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day73 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/73.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-2.md&#34;&gt;深入浅出pandas-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建DataFrame对象&lt;/li&gt; &#xA; &lt;li&gt;DataFrame对象的属性和方法&lt;/li&gt; &#xA; &lt;li&gt;读写DataFrame中的数据&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day74 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/74.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-3.md&#34;&gt;深入浅出pandas-3&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据重塑 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;数据拼接&lt;/li&gt; &#xA;   &lt;li&gt;数据合并&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;数据清洗 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;缺失值&lt;/li&gt; &#xA;   &lt;li&gt;重复值&lt;/li&gt; &#xA;   &lt;li&gt;异常值&lt;/li&gt; &#xA;   &lt;li&gt;预处理&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day75 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/75.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-4.md&#34;&gt;深入浅出pandas-4&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据透视 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;获取描述性统计信息&lt;/li&gt; &#xA;   &lt;li&gt;排序和头部值&lt;/li&gt; &#xA;   &lt;li&gt;分组聚合&lt;/li&gt; &#xA;   &lt;li&gt;透视表和交叉表&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;数据呈现&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day76 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/76.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-5.md&#34;&gt;深入浅出pandas-5&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;计算同比环比&lt;/li&gt; &#xA; &lt;li&gt;窗口计算&lt;/li&gt; &#xA; &lt;li&gt;相关性判定&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day77 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/77.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-6.md&#34;&gt;深入浅出pandas-6&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;索引的使用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;范围索引&lt;/li&gt; &#xA;   &lt;li&gt;分类索引&lt;/li&gt; &#xA;   &lt;li&gt;多级索引&lt;/li&gt; &#xA;   &lt;li&gt;间隔索引&lt;/li&gt; &#xA;   &lt;li&gt;日期时间索引&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day78 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/78.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-1.md&#34;&gt;数据可视化-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装和导入matplotlib&lt;/li&gt; &#xA; &lt;li&gt;创建画布&lt;/li&gt; &#xA; &lt;li&gt;创建坐标系&lt;/li&gt; &#xA; &lt;li&gt;绘制图表 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;折线图&lt;/li&gt; &#xA;   &lt;li&gt;散点图&lt;/li&gt; &#xA;   &lt;li&gt;柱状图&lt;/li&gt; &#xA;   &lt;li&gt;饼状图&lt;/li&gt; &#xA;   &lt;li&gt;直方图&lt;/li&gt; &#xA;   &lt;li&gt;箱线图&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;显示和保存图表&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day79 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/79.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-2.md&#34;&gt;数据可视化-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;高阶图表 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;气泡图&lt;/li&gt; &#xA;   &lt;li&gt;面积图&lt;/li&gt; &#xA;   &lt;li&gt;雷达图&lt;/li&gt; &#xA;   &lt;li&gt;玫瑰图&lt;/li&gt; &#xA;   &lt;li&gt;3D图表&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day80 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/80.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-3.md&#34;&gt;数据可视化-3&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Seaborn&lt;/li&gt; &#xA; &lt;li&gt;Pyecharts&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day81~90 - 机器学习&lt;/h3&gt; &#xA;&lt;h4&gt;Day81 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/81.%E6%B5%85%E8%B0%88%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.md&#34;&gt;浅谈机器学习&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;人工智能发展史&lt;/li&gt; &#xA; &lt;li&gt;什么是机器学习&lt;/li&gt; &#xA; &lt;li&gt;机器学习应用领域&lt;/li&gt; &#xA; &lt;li&gt;机器学习的分类&lt;/li&gt; &#xA; &lt;li&gt;机器学习的步骤&lt;/li&gt; &#xA; &lt;li&gt;第一次机器学习&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day82 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/82.k%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.md&#34;&gt;k最近邻算法&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;距离的度量&lt;/li&gt; &#xA; &lt;li&gt;数据集介绍&lt;/li&gt; &#xA; &lt;li&gt;kNN分类的实现&lt;/li&gt; &#xA; &lt;li&gt;模型评估&lt;/li&gt; &#xA; &lt;li&gt;参数调优&lt;/li&gt; &#xA; &lt;li&gt;kNN回归的实现&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day83 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/83.%E5%86%B3%E7%AD%96%E6%A0%91%E5%92%8C%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97.md&#34;&gt;决策树和随机森林&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;决策树的构建 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;特征选择&lt;/li&gt; &#xA;   &lt;li&gt;数据分裂&lt;/li&gt; &#xA;   &lt;li&gt;树的剪枝&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;实现决策树模型&lt;/li&gt; &#xA; &lt;li&gt;随机森林概述&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day84 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/84.%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95.md&#34;&gt;朴素贝叶斯算法&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;贝叶斯定理&lt;/li&gt; &#xA; &lt;li&gt;朴素贝叶斯&lt;/li&gt; &#xA; &lt;li&gt;算法原理 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;训练阶段&lt;/li&gt; &#xA;   &lt;li&gt;预测阶段&lt;/li&gt; &#xA;   &lt;li&gt;代码实现&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;算法优缺点&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day85 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/85.%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B.md&#34;&gt;回归模型&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;回归模型的分类&lt;/li&gt; &#xA; &lt;li&gt;回归系数的计算&lt;/li&gt; &#xA; &lt;li&gt;新数据集介绍&lt;/li&gt; &#xA; &lt;li&gt;线性回归代码实现&lt;/li&gt; &#xA; &lt;li&gt;回归模型的评估&lt;/li&gt; &#xA; &lt;li&gt;引入正则化项&lt;/li&gt; &#xA; &lt;li&gt;线性回归另一种实现&lt;/li&gt; &#xA; &lt;li&gt;多项式回归&lt;/li&gt; &#xA; &lt;li&gt;逻辑回归&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day86 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/86.K-Means%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95.md&#34;&gt;K-Means聚类算法&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;算法原理&lt;/li&gt; &#xA; &lt;li&gt;数学描述&lt;/li&gt; &#xA; &lt;li&gt;代码实现&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day87 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/87.%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95.md&#34;&gt;集成学习算法&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;算法分类&lt;/li&gt; &#xA; &lt;li&gt;AdaBoost&lt;/li&gt; &#xA; &lt;li&gt;GBDT&lt;/li&gt; &#xA; &lt;li&gt;XGBoost&lt;/li&gt; &#xA; &lt;li&gt;LightGBM&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day88 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/88.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.md&#34;&gt;神经网络模型&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基本构成&lt;/li&gt; &#xA; &lt;li&gt;工作原理&lt;/li&gt; &#xA; &lt;li&gt;代码实现&lt;/li&gt; &#xA; &lt;li&gt;模型优缺点&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day89 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/89.%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8.md&#34;&gt;自然语言处理入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;词袋模型&lt;/li&gt; &#xA; &lt;li&gt;词向量&lt;/li&gt; &#xA; &lt;li&gt;NPLM和RNN&lt;/li&gt; &#xA; &lt;li&gt;Seq2Seq&lt;/li&gt; &#xA; &lt;li&gt;Transformer&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Day90 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/90.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98.md&#34;&gt;机器学习实战&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据探索&lt;/li&gt; &#xA; &lt;li&gt;特征工程&lt;/li&gt; &#xA; &lt;li&gt;模型训练&lt;/li&gt; &#xA; &lt;li&gt;模型评估&lt;/li&gt; &#xA; &lt;li&gt;模型部署&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Day91~99 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100&#34;&gt;团队项目开发&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;第91天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/91.%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md&#34;&gt;团队项目开发的问题和解决方案&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;软件过程模型&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;经典过程模型（瀑布模型）&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;可行性分析（研究做还是不做），输出《可行性分析报告》。&lt;/li&gt; &#xA;     &lt;li&gt;需求分析（研究做什么），输出《需求规格说明书》和产品界面原型图。&lt;/li&gt; &#xA;     &lt;li&gt;概要设计和详细设计，输出概念模型图（ER图）、物理模型图、类图、时序图等。&lt;/li&gt; &#xA;     &lt;li&gt;编码 / 测试。&lt;/li&gt; &#xA;     &lt;li&gt;上线 / 维护。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;瀑布模型最大的缺点是无法拥抱需求变化，整套流程结束后才能看到产品，团队士气低落。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;敏捷开发（Scrum）- 产品所有者、Scrum Master、研发人员 - Sprint&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;产品的Backlog（用户故事、产品原型）。&lt;/li&gt; &#xA;     &lt;li&gt;计划会议（评估和预算）。&lt;/li&gt; &#xA;     &lt;li&gt;日常开发（站立会议、番茄工作法、结对编程、测试先行、代码重构……）。&lt;/li&gt; &#xA;     &lt;li&gt;修复bug（问题描述、重现步骤、测试人员、被指派人）。&lt;/li&gt; &#xA;     &lt;li&gt;发布版本。&lt;/li&gt; &#xA;     &lt;li&gt;评审会议（Showcase，用户需要参与）。&lt;/li&gt; &#xA;     &lt;li&gt;回顾会议（对当前迭代周期做一个总结）。&lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;补充：敏捷软件开发宣言&lt;/p&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;个体和互动&lt;/strong&gt; 高于 流程和工具&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;工作的软件&lt;/strong&gt; 高于 详尽的文档&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;客户合作&lt;/strong&gt; 高于 合同谈判&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;响应变化&lt;/strong&gt; 高于 遵循计划&lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/agile-scrum-sprint-cycle.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;角色：产品所有者（决定做什么，能对需求拍板的人）、团队负责人（解决各种问题，专注如何更好的工作，屏蔽外部对开发团队的影响）、开发团队（项目执行人员，具体指开发人员和测试人员）。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;准备工作：商业案例和资金、合同、憧憬、初始产品需求、初始发布计划、入股、组建团队。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;敏捷团队通常人数为8-10人。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;工作量估算：将开发任务量化，包括原型、Logo设计、UI设计、前端开发等，尽量把每个工作分解到最小任务量，最小任务量标准为工作时间不能超过两天，然后估算总体项目时间。把每个任务都贴在看板上面，看板上分三部分：to do（待完成）、in progress（进行中）和done（已完成）。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;项目团队组建&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;团队的构成和角色&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/company_architecture.png&#34; alt=&#34;company_architecture&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;编程规范和代码审查（&lt;code&gt;flake8&lt;/code&gt;、&lt;code&gt;pylint&lt;/code&gt;）&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/pylint.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Python中的一些“惯例”（请参考&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/%E7%95%AA%E5%A4%96%E7%AF%87/Python%E7%BC%96%E7%A8%8B%E6%83%AF%E4%BE%8B.md&#34;&gt;《Python惯例-如何编写Pythonic的代码》&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;影响代码可读性的原因：&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;代码注释太少或者没有注释&lt;/li&gt; &#xA;     &lt;li&gt;代码破坏了语言的最佳实践&lt;/li&gt; &#xA;     &lt;li&gt;反模式编程（意大利面代码、复制-黏贴编程、自负编程、……）&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;团队开发工具介绍&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;版本控制：Git、Mercury&lt;/li&gt; &#xA;   &lt;li&gt;缺陷管理：&lt;a href=&#34;https://about.gitlab.com/&#34;&gt;Gitlab&lt;/a&gt;、&lt;a href=&#34;http://www.redmine.org.cn/&#34;&gt;Redmine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;敏捷闭环工具：&lt;a href=&#34;https://www.zentao.net/&#34;&gt;禅道&lt;/a&gt;、&lt;a href=&#34;https://www.atlassian.com/software/jira/features&#34;&gt;JIRA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;持续集成：&lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;、&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis-CI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;请参考&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/91.%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md&#34;&gt;《团队项目开发的问题和解决方案》&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;项目选题和理解业务&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;选题范围设定&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;CMS（用户端）：新闻聚合网站、问答/分享社区、影评/书评网站等。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;MIS（用户端+管理端）：KMS、KPI考核系统、HRS、CRM系统、供应链系统、仓储管理系统等。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;App后台（管理端+数据接口）：二手交易类、报刊杂志类、小众电商类、新闻资讯类、旅游类、社交类、阅读类等。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;其他类型：自身行业背景和工作经验、业务容易理解和把控。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;需求理解、模块划分和任务分配&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;需求理解：头脑风暴和竞品分析。&lt;/li&gt; &#xA;   &lt;li&gt;模块划分：画思维导图（XMind），每个模块是一个枝节点，每个具体的功能是一个叶节点（用动词表述），需要确保每个叶节点无法再生出新节点，确定每个叶子节点的重要性、优先级和工作量。&lt;/li&gt; &#xA;   &lt;li&gt;任务分配：由项目负责人根据上面的指标为每个团队成员分配任务。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/requirements_by_xmind.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;制定项目进度表（每日更新）&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;模块&lt;/th&gt; &#xA;     &lt;th&gt;功能&lt;/th&gt; &#xA;     &lt;th&gt;人员&lt;/th&gt; &#xA;     &lt;th&gt;状态&lt;/th&gt; &#xA;     &lt;th&gt;完成&lt;/th&gt; &#xA;     &lt;th&gt;工时&lt;/th&gt; &#xA;     &lt;th&gt;计划开始&lt;/th&gt; &#xA;     &lt;th&gt;实际开始&lt;/th&gt; &#xA;     &lt;th&gt;计划结束&lt;/th&gt; &#xA;     &lt;th&gt;实际结束&lt;/th&gt; &#xA;     &lt;th&gt;备注&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;评论&lt;/td&gt; &#xA;     &lt;td&gt;添加评论&lt;/td&gt; &#xA;     &lt;td&gt;王大锤&lt;/td&gt; &#xA;     &lt;td&gt;正在进行&lt;/td&gt; &#xA;     &lt;td&gt;50%&lt;/td&gt; &#xA;     &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;删除评论&lt;/td&gt; &#xA;     &lt;td&gt;王大锤&lt;/td&gt; &#xA;     &lt;td&gt;等待&lt;/td&gt; &#xA;     &lt;td&gt;0%&lt;/td&gt; &#xA;     &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;查看评论&lt;/td&gt; &#xA;     &lt;td&gt;白元芳&lt;/td&gt; &#xA;     &lt;td&gt;正在进行&lt;/td&gt; &#xA;     &lt;td&gt;20%&lt;/td&gt; &#xA;     &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;需要进行代码审查&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;评论投票&lt;/td&gt; &#xA;     &lt;td&gt;白元芳&lt;/td&gt; &#xA;     &lt;td&gt;等待&lt;/td&gt; &#xA;     &lt;td&gt;0%&lt;/td&gt; &#xA;     &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/8&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/8&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;OOAD和数据库设计&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;UML（统一建模语言）的类图&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/uml-class-diagram.png&#34; alt=&#34;uml&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通过模型创建表（正向工程），例如在Django项目中可以通过下面的命令创建二维表。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python manage.py makemigrations app&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用PowerDesigner绘制物理模型图。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/power-designer-pdm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通过数据表创建模型（反向工程），例如在Django项目中可以通过下面的命令生成模型。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python manage.py inspectdb &amp;gt; app/models.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;第92天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/92.Docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3.md&#34;&gt;Docker容器技术详解&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Docker简介&lt;/li&gt; &#xA; &lt;li&gt;安装Docker&lt;/li&gt; &#xA; &lt;li&gt;使用Docker创建容器（Nginx、MySQL、Redis、Gitlab、Jenkins）&lt;/li&gt; &#xA; &lt;li&gt;构建Docker镜像（Dockerfile的编写和相关指令）&lt;/li&gt; &#xA; &lt;li&gt;容器编排（Docker-compose）&lt;/li&gt; &#xA; &lt;li&gt;集群管理（Kubernetes）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第93天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/93.MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md&#34;&gt;MySQL性能优化&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基本原则&lt;/li&gt; &#xA; &lt;li&gt;InnoDB引擎&lt;/li&gt; &#xA; &lt;li&gt;索引的使用和注意事项&lt;/li&gt; &#xA; &lt;li&gt;数据分区&lt;/li&gt; &#xA; &lt;li&gt;SQL优化&lt;/li&gt; &#xA; &lt;li&gt;配置优化&lt;/li&gt; &#xA; &lt;li&gt;架构优化&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第94天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/94.%E7%BD%91%E7%BB%9CAPI%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.md&#34;&gt;网络API接口设计&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;设计原则 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;关键问题&lt;/li&gt; &#xA;   &lt;li&gt;其他问题&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;文档撰写&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第95天：[使用Django开发商业项目](./Day91-100/95.使用Django开发商业项 目.md)&lt;/h4&gt; &#xA;&lt;h5&gt;项目开发中的公共问题&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据库的配置（多数据库、主从复制、数据库路由）&lt;/li&gt; &#xA; &lt;li&gt;缓存的配置（分区缓存、键设置、超时设置、主从复制、故障恢复（哨兵））&lt;/li&gt; &#xA; &lt;li&gt;日志的配置&lt;/li&gt; &#xA; &lt;li&gt;分析和调试（Django-Debug-ToolBar）&lt;/li&gt; &#xA; &lt;li&gt;好用的Python模块（日期计算、图像处理、数据加密、三方API）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;REST API设计&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;RESTful架构 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/09/restful.html&#34;&gt;理解RESTful架构&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&#34;&gt;RESTful API设计指南&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html&#34;&gt;RESTful API最佳实践&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;API接口文档的撰写 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://rap2.taobao.org/&#34;&gt;RAP2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://yapi.demo.qunar.com/&#34;&gt;YAPI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.django-rest-framework.org/&#34;&gt;django-REST-framework&lt;/a&gt;的应用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;项目中的重点难点剖析&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用缓存缓解数据库压力 - Redis&lt;/li&gt; &#xA; &lt;li&gt;使用消息队列做解耦合和削峰 - Celery + RabbitMQ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第96天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/96.%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95.md&#34;&gt;软件测试和自动化测试&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h5&gt;单元测试&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;测试的种类&lt;/li&gt; &#xA; &lt;li&gt;编写单元测试（&lt;code&gt;unittest&lt;/code&gt;、&lt;code&gt;pytest&lt;/code&gt;、&lt;code&gt;nose2&lt;/code&gt;、&lt;code&gt;tox&lt;/code&gt;、&lt;code&gt;ddt&lt;/code&gt;、……）&lt;/li&gt; &#xA; &lt;li&gt;测试覆盖率（&lt;code&gt;coverage&lt;/code&gt;）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Django项目部署&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;部署前的准备工作 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;关键设置（SECRET_KEY / DEBUG / ALLOWED_HOSTS / 缓存 / 数据库）&lt;/li&gt; &#xA;   &lt;li&gt;HTTPS / CSRF_COOKIE_SECUR / SESSION_COOKIE_SECURE&lt;/li&gt; &#xA;   &lt;li&gt;日志相关配置&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux常用命令回顾&lt;/li&gt; &#xA; &lt;li&gt;Linux常用服务的安装和配置&lt;/li&gt; &#xA; &lt;li&gt;uWSGI/Gunicorn和Nginx的使用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gunicorn和uWSGI的比较 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;对于不需要大量定制化的简单应用程序，Gunicorn是一个不错的选择，uWSGI的学习曲线比Gunicorn要陡峭得多，Gunicorn的默认参数就已经能够适应大多数应用程序。&lt;/li&gt; &#xA;     &lt;li&gt;uWSGI支持异构部署。&lt;/li&gt; &#xA;     &lt;li&gt;由于Nginx本身支持uWSGI，在线上一般都将Nginx和uWSGI捆绑在一起部署，而且uWSGI属于功能齐全且高度定制的WSGI中间件。&lt;/li&gt; &#xA;     &lt;li&gt;在性能上，Gunicorn和uWSGI其实表现相当。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;使用虚拟化技术（Docker）部署测试环境和生产环境&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;性能测试&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;AB的使用&lt;/li&gt; &#xA; &lt;li&gt;SQLslap的使用&lt;/li&gt; &#xA; &lt;li&gt;sysbench的使用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;自动化测试&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用Shell和Python进行自动化测试&lt;/li&gt; &#xA; &lt;li&gt;使用Selenium实现自动化测试 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Selenium IDE&lt;/li&gt; &#xA;   &lt;li&gt;Selenium WebDriver&lt;/li&gt; &#xA;   &lt;li&gt;Selenium Remote Control&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;测试工具Robot Framework介绍&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第97天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/97.%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9%E5%89%96%E6%9E%90.md&#34;&gt;电商网站技术要点剖析&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;商业模式和需求要点&lt;/li&gt; &#xA; &lt;li&gt;物理模型设计&lt;/li&gt; &#xA; &lt;li&gt;第三方登录&lt;/li&gt; &#xA; &lt;li&gt;缓存预热和查询缓存&lt;/li&gt; &#xA; &lt;li&gt;购物车的实现&lt;/li&gt; &#xA; &lt;li&gt;支付功能集成&lt;/li&gt; &#xA; &lt;li&gt;秒杀和超卖问题&lt;/li&gt; &#xA; &lt;li&gt;静态资源管理&lt;/li&gt; &#xA; &lt;li&gt;全文检索方案&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第98天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/98.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md&#34;&gt;项目部署上线和性能调优&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MySQL数据库调优&lt;/li&gt; &#xA; &lt;li&gt;Web服务器性能优化 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Nginx负载均衡配置&lt;/li&gt; &#xA;   &lt;li&gt;Keepalived实现高可用&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;代码性能调优 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;多线程&lt;/li&gt; &#xA;   &lt;li&gt;异步化&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;静态资源访问优化 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;云存储&lt;/li&gt; &#xA;   &lt;li&gt;CDN&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第99天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/99.%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%85%AC%E5%85%B1%E9%97%AE%E9%A2%98.md&#34;&gt;面试中的公共问题&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;计算机基础&lt;/li&gt; &#xA; &lt;li&gt;Python基础&lt;/li&gt; &#xA; &lt;li&gt;Web框架相关&lt;/li&gt; &#xA; &lt;li&gt;爬虫相关问题&lt;/li&gt; &#xA; &lt;li&gt;数据分析&lt;/li&gt; &#xA; &lt;li&gt;项目相关&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;第100天 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/100.%E8%A1%A5%E5%85%85%E5%86%85%E5%AE%B9.md&#34;&gt;补充内容&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;面试宝典&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python 面试宝典&lt;/li&gt; &#xA;   &lt;li&gt;SQL 面试宝典（数据分析师）&lt;/li&gt; &#xA;   &lt;li&gt;商业分析面试宝典&lt;/li&gt; &#xA;   &lt;li&gt;机器学习面试宝典&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;机器学习数学基础&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;深度学习&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;计算机视觉&lt;/li&gt; &#xA;   &lt;li&gt;大语言模型&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>panaversity/learn-agentic-ai</title>
    <updated>2025-03-09T01:42:34Z</updated>
    <id>tag:github.com,2025-03-09:/panaversity/learn-agentic-ai</id>
    <link href="https://github.com/panaversity/learn-agentic-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn Agentic AI using Autogen, CrewAI, LangGraph, and Knowledge Graphs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn Agentic AI&lt;/h1&gt; &#xA;&lt;p&gt;This repo is part of the &lt;a href=&#34;https://docs.google.com/document/d/15usu1hkrrRLRjcq_3nCTT-0ljEcgiC44iSdvdqrCprk/edit?usp=sharing&#34;&gt;Panaversity Certified Agentic and Robotic AI Engineer&lt;/a&gt; program. It covers AI-201 and AI-202 courses.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panaversity/learn-agentic-ai/main/toptrend.webp&#34; alt=&#34;Agentic AI Top Trend&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Watch The NVIDIA CEO Jensen Huang Keynote at CES 2025&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k82RwXqZHY8&#34; title=&#34;NVIDIA CEO Jensen Huang Keynote at CES 2025&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panaversity/learn-agentic-ai/main/hr.jpeg&#34; alt=&#34;HR for Agents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/posts/alexwang2911_aiagents-robotics-technology-activity-7282829390445453314-QLeS&#34;&gt;https://www.linkedin.com/posts/alexwang2911_aiagents-robotics-technology-activity-7282829390445453314-QLeS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AI-201: Fundamentals of Agentic AI&lt;/h3&gt; &#xA;&lt;p&gt;Covers Chapters from -01 to 11&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL0vKVrkG4hWpDokw004ujFI6U_58WChPl&#34;&gt;AI-201 Video Playlist&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: These videos are for additional learning, and do not cover all the material taught in the onsite classes.&lt;/p&gt; &#xA;&lt;h3&gt;Projects for AI-201 Students&lt;/h3&gt; &#xA;&lt;p&gt;To begin with all AI-201 students will complete these projects:&lt;/p&gt; &#xA;&lt;p&gt;Generative AI Projects: &lt;a href=&#34;https://github.com/panaversity/learn-agentic-ai/tree/main/02_generative_ai_for_beginners/PROJECTS&#34;&gt;https://github.com/panaversity/learn-agentic-ai/tree/main/02_generative_ai_for_beginners/PROJECTS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Agentic AI Projects: &lt;a href=&#34;https://github.com/panaversity/learn-agentic-ai/tree/main/05_crew_ai/PROJECTS&#34;&gt;https://github.com/panaversity/learn-agentic-ai/tree/main/05_crew_ai/PROJECTS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Checking: Your Instructors will check your project on the due date in class. You will be removed from the class until you successfully complete your project and submit it.&lt;/p&gt; &#xA;&lt;p&gt;All AI-201 students will complete these projects (links included in form) and submit them in this form: &lt;a href=&#34;https://forms.gle/VSZaLDBwCHNPzY5Z6&#34;&gt;https://forms.gle/VSZaLDBwCHNPzY5Z6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Checking: Your Instructors will check your project on the due date in class. You will be removed from the class until you successfully complete your project and submit it.&lt;/p&gt; &#xA;&lt;h3&gt;AI-202: Advanced Agentic AI Engineering&lt;/h3&gt; &#xA;&lt;p&gt;Covers Chapters 12 and onwards&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL0vKVrkG4hWoHDg46N85-9NDhmOaPWEwA&#34;&gt;AI-202 Video Playlist&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: These videos are for additional learning, and do not cover all the material taught in the onsite classes.&lt;/p&gt; &#xA;&lt;h3&gt;Projects for AI-202 Students&lt;/h3&gt; &#xA;&lt;p&gt;All AI-202 students will complete these projects (links included in form) and submit them in this form: &lt;a href=&#34;https://forms.gle/Zfp2CWSmp9e91Wkk9&#34;&gt;https://forms.gle/Zfp2CWSmp9e91Wkk9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Checking: Your Instructors will check your project on the due date in class. You will be removed from the class until you successfully complete your project and submit it.&lt;/p&gt; &#xA;&lt;h2&gt;Which is the Best Agentic Framework?&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s break down CrewAI, Autogen, and LangGraph for agentic development to help you decide which might be &#34;better&#34; for your needs. There isn&#39;t a single &#34;best&#34; – it highly depends on what you prioritize in your agentic development project.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a comparative look across several key dimensions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Core Philosophy &amp;amp; Structure:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; &lt;strong&gt;Focuses on structured teams of agents with specialized roles.&lt;/strong&gt; It&#39;s designed to mimic human teams, where each agent (&#34;crew member&#34;) has a specific task and collaborates towards a common goal. Think of it as organizing agents into a well-defined project team.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Key Concept:&lt;/strong&gt; Crews, Agents with Roles, Tasks, Collaboration within teams.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Analogy:&lt;/strong&gt; Building a small company with specialized departments working together.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; &lt;strong&gt;Emphasizes conversational agents and flexible, dynamic multi-agent conversations.&lt;/strong&gt; It&#39;s about creating agents that can fluidly interact, debate, and refine ideas through natural language conversations. Think of it as setting up a dynamic forum or discussion group of agents.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Key Concept:&lt;/strong&gt; Conversational Agents, Multi-Agent Chat, Dynamic Interaction, Flexibility.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Analogy:&lt;/strong&gt; Setting up a lively debate or brainstorming session among experts.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; &lt;strong&gt;Prioritizes building robust, stateful, and reliable agentic workflows as graphs.&lt;/strong&gt; It offers a more programmatic and state-centric approach, allowing you to define complex workflows and manage state transitions explicitly. Think of it as architecting a complex, reliable system with agents as nodes in a workflow graph.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Key Concept:&lt;/strong&gt; Workflows as Graphs, Stateful Agents, Robustness, Reliability, Explicit State Management.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Analogy:&lt;/strong&gt; Designing a complex assembly line or a robust data processing pipeline with agent components.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Ease of Use &amp;amp; Learning Curve:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; &lt;strong&gt;Relatively easy to get started with, especially if you understand the concept of teams and roles.&lt;/strong&gt; The API is designed to be intuitive for defining agents, tasks, and crews. Good for beginners wanting to structure agent collaborations quickly.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Learning Curve:&lt;/strong&gt; Gentle to Moderate. Focuses on team structure, which is conceptually straightforward.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; &lt;strong&gt;Also relatively easy to begin with, particularly for conversational scenarios.&lt;/strong&gt; Setting up basic agent chats is straightforward. Complexity increases as you dive deeper into more nuanced agent behavior and conversation management.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Learning Curve:&lt;/strong&gt; Gentle to Moderate. Easy start, but mastering complex conversations requires more effort.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; &lt;strong&gt;Steeper learning curve initially.&lt;/strong&gt; The graph-based workflow approach is more programmatic and requires understanding state management and graph concepts. Offers more control but demands a more engineering-oriented mindset.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Learning Curve:&lt;/strong&gt; Moderate to Steep. Requires understanding graph workflows and state management.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Flexibility &amp;amp; Customization:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; &lt;strong&gt;Structured but offers good flexibility within its team-based paradigm.&lt;/strong&gt; You can customize agent roles, tasks, tools, and collaboration strategies within a crew. Less flexible if you want to deviate significantly from the team structure.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Medium. Excellent within its team-based structure, less so outside of it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; &lt;strong&gt;Highly flexible and customizable for conversational flows.&lt;/strong&gt; You have a lot of control over agent behavior, prompts, conversation styles, and integration of tools. Adaptable to a wide range of conversational and interactive agent scenarios.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; High. Very adaptable for diverse conversational and interactive agent needs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; &lt;strong&gt;Extremely flexible and highly customizable for workflow design.&lt;/strong&gt; You have granular control over every node (agentic step) in the graph, state transitions, error handling, and more. Best for building very specific and complex agentic workflows with precise control.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Very High. Offers the most granular control over complex workflow design.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Complexity Handling:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; &lt;strong&gt;Good for managing moderate complexity, especially in task delegation and team coordination.&lt;/strong&gt; The crew structure helps break down complex projects into manageable agent tasks within a team. Can become less manageable for very intricate workflows beyond team interactions.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Complexity Handling:&lt;/strong&gt; Moderate. Effective for team-based project breakdown, less so for highly intricate workflows.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; &lt;strong&gt;Handles conversational complexity well, especially in dynamic multi-agent discussions.&lt;/strong&gt; Can manage complex interactions and idea refinement through conversation. May become challenging to track state and manage long, branching conversations without explicit state management.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Complexity Handling:&lt;/strong&gt; Moderate to High for conversational complexity. Can become complex to manage state in long conversations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; &lt;strong&gt;Designed explicitly for handling high complexity in workflows and state management.&lt;/strong&gt; The graph structure allows you to model and manage intricate, multi-step agentic processes with clear state transitions, error handling, and branching logic. Best for truly complex, production-ready agent systems.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Complexity Handling:&lt;/strong&gt; High to Very High. Excellent for managing intricate workflows, state, and complex system architectures.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Collaboration &amp;amp; Teamwork (Agentic):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; &lt;strong&gt;Strongest focus on agent collaboration and teamwork.&lt;/strong&gt; It&#39;s built around the concept of crews working together, making it ideal for scenarios where agents need to collaborate closely to achieve a shared objective.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Collaboration Focus:&lt;/strong&gt; Very High. Core strength is team-based agent collaboration.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; &lt;strong&gt;Supports multi-agent conversations and collaboration, but more in a dynamic, less structured way.&lt;/strong&gt; Agents can debate, discuss, and refine ideas, but the collaboration is driven by conversation rather than a predefined team structure.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Collaboration Focus:&lt;/strong&gt; Medium to High. Supports conversation-driven collaboration in a flexible manner.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; &lt;strong&gt;Supports collaboration implicitly through workflow design.&lt;/strong&gt; You can design workflows where agents interact and exchange information as part of a larger process. Collaboration is defined programmatically within the graph, rather than being the central organizing principle like in CrewAI.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Collaboration Focus:&lt;/strong&gt; Medium. Collaboration is supported as part of workflow design, not the primary focus.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Scalability &amp;amp; Robustness:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; &lt;strong&gt;Scalability and robustness depend on how well you design your crews and agents.&lt;/strong&gt; Can scale if you effectively parallelize tasks and manage resource usage within your crews. Robustness needs to be considered in agent design and task handling.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Scalability/Robustness:&lt;/strong&gt; Medium. Requires design considerations for scalability and robustness.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; &lt;strong&gt;Scalability depends on conversation management and resource usage.&lt;/strong&gt; Handling very large numbers of concurrent conversations or very long conversations might require careful management. Robustness depends on agent behavior and error handling in conversations.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Scalability/Robustness:&lt;/strong&gt; Medium. Scalability and robustness require management of conversational complexity.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; &lt;strong&gt;Designed with scalability and robustness in mind.&lt;/strong&gt; The graph-based approach allows for building more robust and maintainable agentic workflows. Explicit state management, error handling, and observability features contribute to building reliable systems.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Scalability/Robustness:&lt;/strong&gt; High. Designed for building robust and scalable agentic systems.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;7. Specific Use Cases:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Project-based agentic tasks:&lt;/strong&gt; Research projects, content creation, structured problem-solving where tasks can be delegated to specialized agents within a team.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Simulating human teams:&lt;/strong&gt; Scenarios where you want to mimic the workflow of a human project team with specialized roles.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Learning about structured agent collaboration:&lt;/strong&gt; Good starting point for understanding agentic teamwork.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Autogen:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Conversational agents and assistants:&lt;/strong&gt; Building chatbots, interactive agents, agents for debate, brainstorming, and idea generation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multi-agent simulations and games:&lt;/strong&gt; Scenarios where you want to simulate dynamic interactions between agents.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Exploring emergent behavior in agent conversations:&lt;/strong&gt; Researching how agents interact and evolve ideas through dialogue.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Complex, production-ready agentic systems:&lt;/strong&gt; Building robust applications requiring intricate workflows, state management, and reliability (e.g., complex automation, data processing pipelines).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Systems with well-defined workflows:&lt;/strong&gt; Applications where the agentic process can be clearly modeled as a workflow graph with distinct steps and state transitions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Applications needing strong state management and error handling:&lt;/strong&gt; Scenarios requiring precise control over state and robust error recovery in agentic workflows.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary Table:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;CrewAI&lt;/th&gt; &#xA;   &lt;th&gt;Autogen&lt;/th&gt; &#xA;   &lt;th&gt;LangGraph&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core Philosophy&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Structured Teams&lt;/td&gt; &#xA;   &lt;td&gt;Conversational Agents&lt;/td&gt; &#xA;   &lt;td&gt;Workflow Graphs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ease of Use&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Moderate&lt;/td&gt; &#xA;   &lt;td&gt;Moderate&lt;/td&gt; &#xA;   &lt;td&gt;Moderate to Steep&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Medium (Team-centric)&lt;/td&gt; &#xA;   &lt;td&gt;High (Conversation-centric)&lt;/td&gt; &#xA;   &lt;td&gt;Very High (Workflow-centric)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Complexity Handling&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Moderate (Team-based)&lt;/td&gt; &#xA;   &lt;td&gt;Moderate to High (Conversation-based)&lt;/td&gt; &#xA;   &lt;td&gt;High to Very High (Workflow &amp;amp; State-based)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Very High (Teamwork)&lt;/td&gt; &#xA;   &lt;td&gt;Medium to High (Conversational)&lt;/td&gt; &#xA;   &lt;td&gt;Medium (Workflow-integrated)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Scalability/Robustness&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Medium (Design-dependent)&lt;/td&gt; &#xA;   &lt;td&gt;Medium (Conversation Management)&lt;/td&gt; &#xA;   &lt;td&gt;High (Designed for Robustness)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Best For&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Team-based Projects, Structured Tasks&lt;/td&gt; &#xA;   &lt;td&gt;Conversational Agents, Dynamic Interaction&lt;/td&gt; &#xA;   &lt;td&gt;Complex Workflows, Production Systems&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which is &#34;Better&#34;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There&#39;s no universally &#34;better&#34; choice.&lt;/strong&gt; It boils down to your specific project goals and priorities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Choose CrewAI if:&lt;/strong&gt; You want to build agents that work together as structured teams to solve problems, and you value clear roles and team-based collaboration. It&#39;s a good entry point to structured agentic development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Choose Autogen if:&lt;/strong&gt; You are focused on creating conversational agents that can interact dynamically, debate, and refine ideas through natural language. It excels in building interactive and conversational AI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Choose LangGraph if:&lt;/strong&gt; You are building complex, production-grade agentic systems that require robust workflows, explicit state management, and high reliability. It&#39;s the best choice for intricate, scalable, and dependable agentic applications.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start with CrewAI or Autogen if you are new to agentic development and want a quicker ramp-up.&lt;/strong&gt; Experiment with their more intuitive APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consider LangGraph if you anticipate building complex, production-ready systems from the outset, or if you find the need for robust state management and workflow control becomes critical as your projects evolve.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ultimately, the best way to decide is to &lt;strong&gt;experiment with each framework&lt;/strong&gt; on a small project relevant to your needs. Try building a simple application with each to get a feel for their strengths and weaknesses in practice. You might even find that a combination of these frameworks could be beneficial for certain complex projects.&lt;/p&gt; &#xA;&lt;h2&gt;Which Agentic Framework is Being Used the Most?&lt;/h2&gt; &#xA;&lt;p&gt;Determining which of these frameworks is &#34;used the most&#34; is tricky and depends on how we define &#34;used.&#34; There isn&#39;t a single, definitive public dashboard that tracks usage across all these tools perfectly. However, we can use several indicators to get a reasonable picture.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an analysis based on publicly available data and general observations in the AI agent development community:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Indicators of Usage &amp;amp; Popularity (and what they suggest):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GitHub Stars and Forks:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generally reflects community interest and adoption.&lt;/strong&gt; Higher stars often correlate with broader awareness and usage, though it&#39;s not a perfect measure of active deployments.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Likely Ranking (based on current GitHub numbers, which fluctuate):&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; Likely to be highest. Autogen, being backed by Microsoft and focusing on flexible conversation-based agents, has garnered significant attention and a large number of GitHub stars and forks.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; Likely to be second highest and rapidly growing. CrewAI, while newer, has a very clear and appealing concept (team-based agents), which resonates strongly, leading to rapid growth in GitHub stars.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; Likely to be lower than Autogen and CrewAI, but still significant. LangGraph is more specialized and targets robust, production-ready systems, which might appeal to a slightly more niche but serious developer audience.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;PyPI Download Statistics:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Shows how often the libraries are being installed.&lt;/strong&gt; Higher downloads can suggest broader usage, but also include installations for experimentation, tutorials, and CI/CD.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Likely Ranking (Less publicly available real-time data, but general trends suggest):&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; Likely to be highest download count. Broader appeal and more introductory tutorials might lead to more initial installations.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; Likely to be second highest and growing fast. Increasing popularity means more installations for projects and experimentation.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; Likely to be lower, potentially reflecting its more specialized use case and potentially later entry to the scene compared to Autogen.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Community Activity (Discord, Forums, Social Media):&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Indicates active user base, support network, and general buzz.&lt;/strong&gt; Larger and more active communities often suggest wider adoption and support.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Likely Ranking (Qualitative observation):&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; Likely to have a very large and active community. Being from Microsoft and targeting a broad audience, it likely benefits from a larger initial community and resources.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; Likely to have a rapidly growing and very engaged community. The focused nature of CrewAI attracts developers interested in structured agentic teams, creating a strong community.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; Likely to have a smaller but potentially very focused and technically deep community. Its more specialized nature might lead to a community of developers tackling complex, production-oriented problems.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mentions in Tutorials, Blog Posts, and Courses:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reflects educational resources and ease of learning, which can drive adoption.&lt;/strong&gt; More readily available learning materials can lower the barrier to entry.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Likely Ranking (Observation based on online content search):&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; Likely to have the most tutorials and online content. Its broader appeal and conversational focus make it a popular topic for demos and tutorials.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; Likely to have a rapidly increasing number of tutorials. Its straightforward concept makes it easy to demonstrate and teach.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; Likely to have fewer introductory tutorials compared to Autogen and CrewAI but more in-depth, technically focused documentation and examples aimed at production use cases.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Anecdotal Evidence &amp;amp; General Perception in the AI Community:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Informal understanding based on conversations, online discussions, and industry trends.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Likely Perception:&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Autogen:&lt;/strong&gt; Widely recognized and talked about, often seen as a versatile framework for various agentic tasks, especially conversational.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;CrewAI:&lt;/strong&gt; Gaining significant momentum and being recognized as a powerful and intuitive framework for structured agentic collaboration and team-based tasks.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;LangGraph:&lt;/strong&gt; Perceived as the go-to choice for more complex, robust, and production-ready agent systems, though perhaps less widely adopted &lt;em&gt;initially&lt;/em&gt; due to its steeper learning curve and specialized focus.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overall Conclusion based on Indicators:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Based on the available indicators, it&#39;s highly likely that Autogen is currently the most &#34;used&#34; in terms of sheer number of projects and broader initial adoption.&lt;/strong&gt; This is likely due to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Microsoft backing and visibility.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Focus on conversational agents, a very popular and accessible area in AI.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Versatility and flexibility for a wide range of agentic tasks.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strong initial community and resources.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;However, CrewAI is rapidly gaining popularity and momentum.&lt;/strong&gt; It&#39;s likely to be the fastest-growing framework in terms of adoption, especially for projects focused on structured agentic collaboration and team-based workflows. Its clear and intuitive concept makes it very appealing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LangGraph, while likely having a smaller overall user base currently, is strategically positioned for serious, production-oriented agent development.&lt;/strong&gt; Its focus on robustness, state management, and complex workflows makes it essential for building reliable and scalable agentic systems, even if its initial adoption numbers might be lower compared to Autogen and CrewAI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important Nuances:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;Most Used&#34; can change quickly.&lt;/strong&gt; The AI agent landscape is rapidly evolving. Popularity can shift as frameworks mature and new needs emerge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Different Use Cases:&lt;/strong&gt; Each framework excels in different areas. &#34;Most used overall&#34; doesn&#39;t mean &#34;best for every use case.&#34; LangGraph might be &#34;most used&#34; for production systems needing robustness, even if Autogen is &#34;most used&#34; in general experimentation and tutorials.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maturity:&lt;/strong&gt; Autogen has been around longer in the open-source space, giving it a head start. CrewAI and LangGraph are newer but quickly catching up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If we had to rank them by current likely &lt;em&gt;broadest&lt;/em&gt; usage, it would probably be:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Autogen&lt;/strong&gt; (Likely broadest current adoption)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CrewAI&lt;/strong&gt; (Rapidly growing, catching up fast, very strong momentum)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LangGraph&lt;/strong&gt; (More specialized, solid adoption for production systems, but potentially smaller overall user base currently)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;It&#39;s crucial to choose the framework that best aligns with &lt;em&gt;your specific project requirements&lt;/em&gt; rather than just chasing &#34;the most popular&#34; one.&lt;/strong&gt; Each of these frameworks offers unique strengths for different types of agentic development.&lt;/p&gt;</summary>
  </entry>
</feed>