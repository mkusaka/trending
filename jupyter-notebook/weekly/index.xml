<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T02:14:27Z</updated>
  <subtitle>Weekly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WongKinYiu/yolov7</title>
    <updated>2022-07-17T02:14:27Z</updated>
    <id>tag:github.com,2022-07-17:/WongKinYiu/yolov7</id>
    <link href="https://github.com/WongKinYiu/yolov7" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of paper - YOLOv7: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Official YOLOv7&lt;/h1&gt; &#xA;&lt;p&gt;Implementation of paper - &lt;a href=&#34;https://arxiv.org/abs/2207.02696&#34;&gt;YOLOv7: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/figure/performance.png&#34; width=&#34;79%&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Web Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrated into &lt;a href=&#34;https://huggingface.co/spaces/akhaliq/yolov7&#34;&gt;Huggingface Spaces 🤗&lt;/a&gt; using &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;. Try out the Web Demo &lt;a href=&#34;https://huggingface.co/spaces/akhaliq/yolov7&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;MS COCO&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Test Size&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AP&lt;sup&gt;test&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AP&lt;sub&gt;50&lt;/sub&gt;&lt;sup&gt;test&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AP&lt;sub&gt;75&lt;/sub&gt;&lt;sup&gt;test&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;batch 1 fps&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;batch 32 average time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt&#34;&gt;&lt;strong&gt;YOLOv7&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;640&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;51.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;69.7%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;55.9%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;161 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.8 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7x.pt&#34;&gt;&lt;strong&gt;YOLOv7-X&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;640&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;53.1%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;71.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;57.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;114 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.3 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-w6.pt&#34;&gt;&lt;strong&gt;YOLOv7-W6&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;54.9%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;72.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;60.1%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;84 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7.6 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6.pt&#34;&gt;&lt;strong&gt;YOLOv7-E6&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;56.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;73.5%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;61.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12.3 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-d6.pt&#34;&gt;&lt;strong&gt;YOLOv7-D6&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;56.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;74.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;61.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15.0 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6e.pt&#34;&gt;&lt;strong&gt;YOLOv7-E6E&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;56.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;74.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;62.1%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;36 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18.7 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Docker environment (recommended)&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Expand&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create the docker container, you can change the share memory size if you have more.&#xA;nvidia-docker run --name yolov7 -it -v your_coco_path/:/coco/ -v your_code_path/:/yolov7 --shm-size=64g nvcr.io/nvidia/pytorch:21.08-py3&#xA;&#xA;# apt install required packages&#xA;apt update&#xA;apt install -y zip htop screen libgl1-mesa-glx&#xA;&#xA;# pip install required packages&#xA;pip install seaborn thop&#xA;&#xA;# go to code folder&#xA;cd /yolov7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt&#34;&gt;&lt;code&gt;yolov7.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7x.pt&#34;&gt;&lt;code&gt;yolov7x.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-w6.pt&#34;&gt;&lt;code&gt;yolov7-w6.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6.pt&#34;&gt;&lt;code&gt;yolov7-e6.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-d6.pt&#34;&gt;&lt;code&gt;yolov7-d6.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6e.pt&#34;&gt;&lt;code&gt;yolov7-e6e.pt&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python test.py --data data/coco.yaml --img 640 --batch 32 --conf 0.001 --iou 0.65 --device 0 --weights yolov7.pt --name yolov7_640_val&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will get the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51206&#xA; Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.69730&#xA; Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.55521&#xA; Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.35247&#xA; Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55937&#xA; Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.66693&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.38453&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.63765&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.68772&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.53766&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.73549&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.83868&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To measure accuracy, download &lt;a href=&#34;http://images.cocodataset.org/annotations/annotations_trainval2017.zip&#34;&gt;COCO-annotations for Pycocotools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;Data preparation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/get_coco.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download MS COCO dataset images (&lt;a href=&#34;http://images.cocodataset.org/zips/train2017.zip&#34;&gt;train&lt;/a&gt;, &lt;a href=&#34;http://images.cocodataset.org/zips/val2017.zip&#34;&gt;val&lt;/a&gt;, &lt;a href=&#34;http://images.cocodataset.org/zips/test2017.zip&#34;&gt;test&lt;/a&gt;) and &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/coco2017labels-segments.zip&#34;&gt;labels&lt;/a&gt;. If you have previously used a different version of YOLO, we strongly recommend that you delete &lt;code&gt;train2017.cache&lt;/code&gt; and &lt;code&gt;val2017.cache&lt;/code&gt; files, and redownload &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/coco2017labels-segments.zip&#34;&gt;labels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Single GPU training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# train p5 models&#xA;python train.py --workers 8 --device 0 --batch-size 32 --data data/coco.yaml --img 640 640 --cfg cfg/training/yolov7.yaml --weights &#39;&#39; --name yolov7 --hyp data/hyp.scratch.p5.yaml&#xA;&#xA;# train p6 models&#xA;python train_aux.py --workers 8 --device 0 --batch-size 16 --data data/coco.yaml --img 1280 1280 --cfg cfg/training/yolov7-w6.yaml --weights &#39;&#39; --name yolov7-w6 --hyp data/hyp.scratch.p6.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple GPU training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# train p5 models&#xA;python -m torch.distributed.launch --nproc_per_node 4 --master_port 9527 train.py --workers 8 --device 0,1,2,3 --sync-bn --batch-size 128 --data data/coco.yaml --img 640 640 --cfg cfg/training/yolov7.yaml --weights &#39;&#39; --name yolov7 --hyp data/hyp.scratch.p5.yaml&#xA;&#xA;# train p6 models&#xA;python -m torch.distributed.launch --nproc_per_node 8 --master_port 9527 train_aux.py --workers 8 --device 0,1,2,3,4,5,6,7 --sync-bn --batch-size 128 --data data/coco.yaml --img 1280 1280 --cfg cfg/training/yolov7-w6.yaml --weights &#39;&#39; --name yolov7-w6 --hyp data/hyp.scratch.p6.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transfer learning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7_training.pt&#34;&gt;&lt;code&gt;yolov7_training.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7x_training.pt&#34;&gt;&lt;code&gt;yolov7x_training.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-w6_training.pt&#34;&gt;&lt;code&gt;yolov7-w6_training.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6_training.pt&#34;&gt;&lt;code&gt;yolov7-e6_training.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-d6_training.pt&#34;&gt;&lt;code&gt;yolov7-d6_training.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6e_training.pt&#34;&gt;&lt;code&gt;yolov7-e6e_training.pt&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Single GPU finetuning for custom dataset&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# finetune p5 models&#xA;python train.py --workers 8 --device 0 --batch-size 32 --data data/custom.yaml --img 640 640 --cfg cfg/training/yolov7-custom.yaml --weights &#39;yolov7_training.pt&#39; --name yolov7-custom --hyp data/hyp.scratch.custom.yaml&#xA;&#xA;# finetune p6 models&#xA;python train_aux.py --workers 8 --device 0 --batch-size 16 --data data/custom.yaml --img 1280 1280 --cfg cfg/training/yolov7-w6-custom.yaml --weights &#39;yolov7-w6_training.pt&#39; --name yolov7-w6-custom --hyp data/hyp.scratch.custom.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Re-parameterization&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/tools/reparameterization.ipynb&#34;&gt;reparameterization.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python detect.py --weights yolov7.pt --conf 0.25 --img-size 640 --source inference/images/horses.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/figure/horses_prediction.jpg&#34; width=&#34;59%&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{wang2022yolov7,&#xA;  title={{YOLOv7}: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors},&#xA;  author={Wang, Chien-Yao and Bochkovskiy, Alexey and Liao, Hong-Yuan Mark},&#xA;  journal={arXiv preprint arXiv:2207.02696},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Teaser&lt;/h2&gt; &#xA;&lt;p&gt;Yolov7-mask &amp;amp; YOLOv7-pose&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/figure/mask.png&#34; width=&#34;56%&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/figure/pose.png&#34; width=&#34;42%&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Expand&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/AlexeyAB/darknet&#34;&gt;https://github.com/AlexeyAB/darknet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolor&#34;&gt;https://github.com/WongKinYiu/yolor&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/WongKinYiu/PyTorch_YOLOv4&#34;&gt;https://github.com/WongKinYiu/PyTorch_YOLOv4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/WongKinYiu/ScaledYOLOv4&#34;&gt;https://github.com/WongKinYiu/ScaledYOLOv4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Megvii-BaseDetection/YOLOX&#34;&gt;https://github.com/Megvii-BaseDetection/YOLOX&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ultralytics/yolov3&#34;&gt;https://github.com/ultralytics/yolov3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ultralytics/yolov5&#34;&gt;https://github.com/ultralytics/yolov5&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/DingXiaoH/RepVGG&#34;&gt;https://github.com/DingXiaoH/RepVGG&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/JUGGHM/OREPA_CVPR2022&#34;&gt;https://github.com/JUGGHM/OREPA_CVPR2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>openai/CLIP</title>
    <updated>2022-07-17T02:14:27Z</updated>
    <id>tag:github.com,2022-07-17:/openai/CLIP</id>
    <link href="https://github.com/openai/CLIP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Contrastive Language-Image Pretraining&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CLIP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openai.com/blog/clip/&#34;&gt;[Blog]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2103.00020&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/openai/CLIP/main/model-card.md&#34;&gt;[Model Card]&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/openai/clip/blob/master/notebooks/Interacting_with_CLIP.ipynb&#34;&gt;[Colab]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CLIP (Contrastive Language-Image Pre-Training) is a neural network trained on a variety of (image, text) pairs. It can be instructed in natural language to predict the most relevant text snippet, given an image, without directly optimizing for the task, similarly to the zero-shot capabilities of GPT-2 and 3. We found CLIP matches the performance of the original ResNet50 on ImageNet “zero-shot” without using any of the original 1.28M labeled examples, overcoming several major challenges in computer vision.&lt;/p&gt; &#xA;&lt;h2&gt;Approach&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openai/CLIP/main/CLIP.png&#34; alt=&#34;CLIP&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;install PyTorch 1.7.1&lt;/a&gt; (or later) and torchvision, as well as small additional dependencies, and then install this repo as a Python package. On a CUDA GPU machine, the following will do the trick:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ conda install --yes -c pytorch pytorch=1.7.1 torchvision cudatoolkit=11.0&#xA;$ pip install ftfy regex tqdm&#xA;$ pip install git+https://github.com/openai/CLIP.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;cudatoolkit=11.0&lt;/code&gt; above with the appropriate CUDA version on your machine or &lt;code&gt;cpuonly&lt;/code&gt; when installing on a machine without a GPU.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;import clip&#xA;from PIL import Image&#xA;&#xA;device = &#34;cuda&#34; if torch.cuda.is_available() else &#34;cpu&#34;&#xA;model, preprocess = clip.load(&#34;ViT-B/32&#34;, device=device)&#xA;&#xA;image = preprocess(Image.open(&#34;CLIP.png&#34;)).unsqueeze(0).to(device)&#xA;text = clip.tokenize([&#34;a diagram&#34;, &#34;a dog&#34;, &#34;a cat&#34;]).to(device)&#xA;&#xA;with torch.no_grad():&#xA;    image_features = model.encode_image(image)&#xA;    text_features = model.encode_text(text)&#xA;    &#xA;    logits_per_image, logits_per_text = model(image, text)&#xA;    probs = logits_per_image.softmax(dim=-1).cpu().numpy()&#xA;&#xA;print(&#34;Label probs:&#34;, probs)  # prints: [[0.9927937  0.00421068 0.00299572]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The CLIP module &lt;code&gt;clip&lt;/code&gt; provides the following methods:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;clip.available_models()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns the names of the available CLIP models.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;clip.load(name, device=..., jit=False)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns the model and the TorchVision transform needed by the model, specified by the model name returned by &lt;code&gt;clip.available_models()&lt;/code&gt;. It will download the model as necessary. The &lt;code&gt;name&lt;/code&gt; argument can also be a path to a local checkpoint.&lt;/p&gt; &#xA;&lt;p&gt;The device to run the model can be optionally specified, and the default is to use the first CUDA device if there is any, otherwise the CPU. When &lt;code&gt;jit&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, a non-JIT version of the model will be loaded.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;clip.tokenize(text: Union[str, List[str]], context_length=77)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns a LongTensor containing tokenized sequences of given text input(s). This can be used as the input to the model&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The model returned by &lt;code&gt;clip.load()&lt;/code&gt; supports the following methods:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;model.encode_image(image: Tensor)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Given a batch of images, returns the image features encoded by the vision portion of the CLIP model.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;model.encode_text(text: Tensor)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Given a batch of text tokens, returns the text features encoded by the language portion of the CLIP model.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;model(image: Tensor, text: Tensor)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Given a batch of images and a batch of text tokens, returns two Tensors, containing the logit scores corresponding to each image and text input. The values are cosine similarities between the corresponding image and text features, times 100.&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Zero-Shot Prediction&lt;/h3&gt; &#xA;&lt;p&gt;The code below performs zero-shot prediction using CLIP, as shown in Appendix B in the paper. This example takes an image from the &lt;a href=&#34;https://www.cs.toronto.edu/~kriz/cifar.html&#34;&gt;CIFAR-100 dataset&lt;/a&gt;, and predicts the most likely labels among the 100 textual labels from the dataset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;import clip&#xA;import torch&#xA;from torchvision.datasets import CIFAR100&#xA;&#xA;# Load the model&#xA;device = &#34;cuda&#34; if torch.cuda.is_available() else &#34;cpu&#34;&#xA;model, preprocess = clip.load(&#39;ViT-B/32&#39;, device)&#xA;&#xA;# Download the dataset&#xA;cifar100 = CIFAR100(root=os.path.expanduser(&#34;~/.cache&#34;), download=True, train=False)&#xA;&#xA;# Prepare the inputs&#xA;image, class_id = cifar100[3637]&#xA;image_input = preprocess(image).unsqueeze(0).to(device)&#xA;text_inputs = torch.cat([clip.tokenize(f&#34;a photo of a {c}&#34;) for c in cifar100.classes]).to(device)&#xA;&#xA;# Calculate features&#xA;with torch.no_grad():&#xA;    image_features = model.encode_image(image_input)&#xA;    text_features = model.encode_text(text_inputs)&#xA;&#xA;# Pick the top 5 most similar labels for the image&#xA;image_features /= image_features.norm(dim=-1, keepdim=True)&#xA;text_features /= text_features.norm(dim=-1, keepdim=True)&#xA;similarity = (100.0 * image_features @ text_features.T).softmax(dim=-1)&#xA;values, indices = similarity[0].topk(5)&#xA;&#xA;# Print the result&#xA;print(&#34;\nTop predictions:\n&#34;)&#xA;for value, index in zip(values, indices):&#xA;    print(f&#34;{cifar100.classes[index]:&amp;gt;16s}: {100 * value.item():.2f}%&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will look like the following (the exact numbers may be slightly different depending on the compute device):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Top predictions:&#xA;&#xA;           snake: 65.31%&#xA;          turtle: 12.29%&#xA;    sweet_pepper: 3.83%&#xA;          lizard: 1.88%&#xA;       crocodile: 1.75%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this example uses the &lt;code&gt;encode_image()&lt;/code&gt; and &lt;code&gt;encode_text()&lt;/code&gt; methods that return the encoded features of given inputs.&lt;/p&gt; &#xA;&lt;h3&gt;Linear-probe evaluation&lt;/h3&gt; &#xA;&lt;p&gt;The example below uses &lt;a href=&#34;https://scikit-learn.org/&#34;&gt;scikit-learn&lt;/a&gt; to perform logistic regression on image features.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;import clip&#xA;import torch&#xA;&#xA;import numpy as np&#xA;from sklearn.linear_model import LogisticRegression&#xA;from torch.utils.data import DataLoader&#xA;from torchvision.datasets import CIFAR100&#xA;from tqdm import tqdm&#xA;&#xA;# Load the model&#xA;device = &#34;cuda&#34; if torch.cuda.is_available() else &#34;cpu&#34;&#xA;model, preprocess = clip.load(&#39;ViT-B/32&#39;, device)&#xA;&#xA;# Load the dataset&#xA;root = os.path.expanduser(&#34;~/.cache&#34;)&#xA;train = CIFAR100(root, download=True, train=True, transform=preprocess)&#xA;test = CIFAR100(root, download=True, train=False, transform=preprocess)&#xA;&#xA;&#xA;def get_features(dataset):&#xA;    all_features = []&#xA;    all_labels = []&#xA;    &#xA;    with torch.no_grad():&#xA;        for images, labels in tqdm(DataLoader(dataset, batch_size=100)):&#xA;            features = model.encode_image(images.to(device))&#xA;&#xA;            all_features.append(features)&#xA;            all_labels.append(labels)&#xA;&#xA;    return torch.cat(all_features).cpu().numpy(), torch.cat(all_labels).cpu().numpy()&#xA;&#xA;# Calculate the image features&#xA;train_features, train_labels = get_features(train)&#xA;test_features, test_labels = get_features(test)&#xA;&#xA;# Perform logistic regression&#xA;classifier = LogisticRegression(random_state=0, C=0.316, max_iter=1000, verbose=1)&#xA;classifier.fit(train_features, train_labels)&#xA;&#xA;# Evaluate using the logistic regression classifier&#xA;predictions = classifier.predict(test_features)&#xA;accuracy = np.mean((test_labels == predictions).astype(np.float)) * 100.&#xA;print(f&#34;Accuracy = {accuracy:.3f}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;C&lt;/code&gt; value should be determined via a hyperparameter sweep using a validation split.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kaieye/2022-Machine-Learning-Specialization</title>
    <updated>2022-07-17T02:14:27Z</updated>
    <id>tag:github.com,2022-07-17:/kaieye/2022-Machine-Learning-Specialization</id>
    <link href="https://github.com/kaieye/2022-Machine-Learning-Specialization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;2022-Machine-Learning-Specialization&lt;/h1&gt; &#xA;&lt;p&gt;吴恩达2022新版机器学习 machine learning specialization&lt;br&gt; 课程官网：&lt;a href=&#34;https://www.coursera.org/specializations/machine-learning-introduction&#34;&gt;https://www.coursera.org/specializations/machine-learning-introduction&lt;/a&gt;&lt;br&gt; bilibili:&lt;a href=&#34;https://www.bilibili.com/video/BV19B4y1W76i&#34;&gt;https://www.bilibili.com/video/BV19B4y1W76i&lt;/a&gt;&lt;br&gt; github:&lt;a href=&#34;https://github.com/kaieye/2022-Machine-Learning-Specialization&#34;&gt;https://github.com/kaieye/2022-Machine-Learning-Specialization&lt;/a&gt;&lt;br&gt; 课程代码及测验内容已更新完毕&lt;br&gt; 欢迎pull request，无论是补充学习文件还是优化md笔记&lt;br&gt; 交流群：484266833&lt;/p&gt; &#xA;&lt;h2&gt;课程大纲&lt;/h2&gt; &#xA;&lt;p&gt;Machine learning specialization课程共分为三部分&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;第一部分：Supervised Machine Learning:Regression and Classification&lt;/li&gt; &#xA; &lt;li&gt;第二部分：Advanced Learning Algorithms&lt;/li&gt; &#xA; &lt;li&gt;第三部分：Unsupervised Learning:Recommenders, Reinforcement Learning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;目前上传的是第二部分,course1的sildes(ppt)已更新完毕&lt;/p&gt; &#xA;&lt;p&gt;Machine Learning Specialization by Andrew Ng in 2022&lt;br&gt; Course website:&lt;a href=&#34;https://www.coursera.org/specializations/machine-learning-introduction&#34;&gt;https://www.coursera.org/specializations/machine-learning-introduction&lt;/a&gt;&lt;br&gt; bilibili:&lt;a href=&#34;https://www.bilibili.com/video/BV19B4y1W76i&#34;&gt;https://www.bilibili.com/video/BV19B4y1W76i&lt;/a&gt;&lt;br&gt; github:&lt;a href=&#34;https://github.com/kaieye/2022-Machine-Learning-Specialization&#34;&gt;https://github.com/kaieye/2022-Machine-Learning-Specialization&lt;/a&gt;&lt;br&gt; Course code and test content have been updated&lt;br&gt; welcome to pull request, whether it is to supplement learning files or markdown notes&lt;/p&gt; &#xA;&lt;h2&gt;Course Outline&lt;/h2&gt; &#xA;&lt;p&gt;Machine learning specialization is divided into 3 parts&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Part 1：Supervised Machine Learning:Regression and Classification&lt;/li&gt; &#xA; &lt;li&gt;Part 2：Advanced Learning Algorithms&lt;/li&gt; &#xA; &lt;li&gt;Part 3：Unsupervised Learning:Recommenders, Reinforcement Learning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The second part is currently Uploaded&lt;br&gt; the slides of course1 have been updated&lt;/p&gt;</summary>
  </entry>
</feed>