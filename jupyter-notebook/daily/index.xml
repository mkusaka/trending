<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-11T01:38:35Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jvns/dns-weekend</title>
    <updated>2023-07-11T01:38:35Z</updated>
    <id>tag:github.com,2023-07-11:/jvns/dns-weekend</id>
    <link href="https://github.com/jvns/dns-weekend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for Implement DNS in a Weekend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;implement DNS in a weekend&lt;/h1&gt; &#xA;&lt;p&gt;The code for Implement DNS in a Weekend. The project&#39;s homepage is &lt;a href=&#34;https://implement-dns.wizardzines.com&#34;&gt;https://implement-dns.wizardzines.com&lt;/a&gt;, you should start there instead of here.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lyhue1991/torchkeras</title>
    <updated>2023-07-11T01:38:35Z</updated>
    <id>tag:github.com,2023-07-11:/lyhue1991/torchkeras</id>
    <link href="https://github.com/lyhue1991/torchkeras" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pytorch❤️ Keras 😋😋&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;炼丹师，这是你的梦中情炉吗?🌹🌹&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/README_en.md&#34;&gt;English&lt;/a&gt; | 简体中文&lt;/p&gt; &#xA;&lt;p&gt;torchkeras 是一个通用的pytorch模型训练模版工具，按照如下目标进行设计和实现：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;好看&lt;/strong&gt; (代码优雅，日志美丽，自带可视化)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;好用&lt;/strong&gt; (使用方便，支持 进度条、评估指标、early-stopping等常用功能，支持tensorboard，wandb回调函数等扩展功能)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;好改&lt;/strong&gt; (修改简单，核心代码模块化，仅约200行，并提供丰富的修改使用案例)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1，炼丹之痛 😭😭&lt;/h2&gt; &#xA;&lt;p&gt;无论是学术研究还是工业落地，pytorch几乎都是目前炼丹的首选框架。&lt;/p&gt; &#xA;&lt;p&gt;pytorch的胜出不仅在于其简洁一致的api设计，更在于其生态中丰富和强大的模型库。&lt;/p&gt; &#xA;&lt;p&gt;但是我们会发现不同的pytorch模型库提供的训练和验证代码非常不一样。&lt;/p&gt; &#xA;&lt;p&gt;torchvision官方提供的范例代码主要是一个关联了非常多依赖函数的train_one_epoch和evaluate函数，针对检测和分割各有一套。&lt;/p&gt; &#xA;&lt;p&gt;yolo系列的主要是支持ddp模式的各种风格迥异的Trainer，每个不同的yolo版本都会改动很多导致不同yolo版本之间都难以通用。&lt;/p&gt; &#xA;&lt;p&gt;抱抱脸的transformers库在借鉴了pytorch_lightning的基础上也搞了一个自己的Trainer，但与pytorch_lightning并不兼容。&lt;/p&gt; &#xA;&lt;p&gt;非常有名的facebook的目标检测库detectron2, 也是搞了一个它自己的Trainer，配合一个全局的cfg参数设置对象来训练模型。&lt;/p&gt; &#xA;&lt;p&gt;还有我用的比较多的语义分割的segmentation_models.pytorch这个库，设计了一个TrainEpoch和一个ValidEpoch来做训练和验证。&lt;/p&gt; &#xA;&lt;p&gt;在学习和使用这些不同的pytorch模型库时，尝试阅读理解和改动这些训练和验证相关的代码让我受到了一万点伤害。&lt;/p&gt; &#xA;&lt;p&gt;有些设计非常糟糕，嵌套了十几层，有些实现非常dirty，各种带下划线的私有变量满天飞。&lt;/p&gt; &#xA;&lt;p&gt;让你每次想要改动一下加入一些自己想要的功能时就感到望而却步。&lt;/p&gt; &#xA;&lt;p&gt;我不就想finetune一下模型嘛，何必拿这么多垃圾代码搞我？&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2，梦中情炉 🤗🤗&lt;/h2&gt; &#xA;&lt;p&gt;这一切的苦不由得让我怀念起tensorflow中keras的美好了。&lt;/p&gt; &#xA;&lt;p&gt;还记得keras那compile, fit, evalute三连击吗？一切都像行云流水般自然，真正的for humans。&lt;/p&gt; &#xA;&lt;p&gt;而且你看任何用keras实现的模型库，训练和验证都几乎可以用这一套相同的接口，没有那么多莫名奇妙的野生Trainer。&lt;/p&gt; &#xA;&lt;p&gt;我能否基于pytorch打造一个接口和keras一样简洁易用，功能强大，但是实现代码非常简短易懂，便于修改的模型训练工具呢？&lt;/p&gt; &#xA;&lt;p&gt;从2020年7月左右发布1.0版本到最近发布的3.86版本，我陆陆续续在工作中一边使用一边打磨一个工具，总共提交修改了70多次。&lt;/p&gt; &#xA;&lt;p&gt;现在我感觉我细心雕琢的这个作品终于长成了我心目中接近完美的样子。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;她有一个美丽的名字：torchkeras.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;是的，她兼具torch的灵动，也有keras的优雅~&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;并且她的美丽，无与伦比~&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;她，就是我的梦中情炉~ 🤗🤗&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/data/torchkeras.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3，使用方法 🍊🍊&lt;/h2&gt; &#xA;&lt;p&gt;安装torchkeras&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install torchkeras&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过使用torchkeras，你不需要写自己的pytorch模型训练循环。你只要做这样两步就可以了。&lt;/p&gt; &#xA;&lt;p&gt;(1) 创建你的模型结构net,然后把它和损失函数传入torchkeras.KerasModel构建一个model。&lt;/p&gt; &#xA;&lt;p&gt;(2) 使用model的fit方法在你的训练数据和验证数据上进行训练，训练数据和验证数据需要封装成两个DataLoader.&lt;/p&gt; &#xA;&lt;p&gt;核心使用代码就像下面这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch &#xA;import torchkeras&#xA;import torchmetrics&#xA;model = torchkeras.KerasModel(net,&#xA;                              loss_fn = nn.BCEWithLogitsLoss(),&#xA;                              optimizer= torch.optim.Adam(net.parameters(),lr = 1e-4),&#xA;                              metrics_dict = {&#34;acc&#34;:torchmetrics.Accuracy(task=&#39;binary&#39;)}&#xA;                             )&#xA;dfhistory=model.fit(train_data=dl_train, &#xA;                    val_data=dl_val, &#xA;                    epochs=20, &#xA;                    patience=3, &#xA;                    ckpt_path=&#39;checkpoint.pt&#39;,&#xA;                    monitor=&#34;val_acc&#34;,&#xA;                    mode=&#34;max&#34;,&#xA;                    plot=True,&#xA;                    &#xA;                   )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在jupyter notebook中执行训练代码，你将看到类似下面的训练可视化图像和训练日志进度条。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/data/torchkeras_plot.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4，主要特性 🍉🍉&lt;/h2&gt; &#xA;&lt;p&gt;torchkeras 支持以下这些功能特性，稳定支持这些功能的起始版本以及这些功能借鉴或者依赖的库的来源见下表。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;稳定支持起始版本&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;依赖或借鉴库&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ 训练进度条&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;依赖tqdm,借鉴keras&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ 训练评估指标&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;借鉴pytorch_lightning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ notebook中训练自带可视化&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.8.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;借鉴fastai&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ early stopping&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;借鉴keras&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ gpu training&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;依赖accelerate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ multi-gpus training(ddp)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.6.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;依赖accelerate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ fp16/bf16 training&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.6.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;依赖accelerate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ tensorboard callback&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.7.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;依赖tensorboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅ wandb callback&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.7.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;依赖wandb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5，基本范例 🌰🌰&lt;/h2&gt; &#xA;&lt;p&gt;以下范例是torchkeras的基础范例，演示了torchkeras的主要功能。&lt;/p&gt; &#xA;&lt;p&gt;包括基础训练，使用wandb可视化，使用wandb调参，使用tensorboard可视化，使用多GPU的ddp模式训练等。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;example&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;notebook&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;kaggle链接&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;①基础范例 🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/01%EF%BC%8Ckerasmodel_example.ipynb&#34;&gt;&lt;strong&gt;basic example&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;br&gt;&#xA;    &lt;div&gt;&#xA;     &lt;a href=&#34;https://www.kaggle.com/lyhue1991/kerasmodel-example&#34;&gt;&lt;img src=&#34;https://kaggle.com/static/images/open-in-kaggle.svg?sanitize=true&#34; alt=&#34;Open In Kaggle&#34;&gt;&lt;/a&gt;&#xA;    &lt;/div&gt;&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;②wandb可视化 🔥🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/02%EF%BC%8Ckerasmodel_wandb_demo.ipynb&#34;&gt;&lt;strong&gt;wandb demo&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;br&gt;&#xA;    &lt;div&gt;&#xA;     &lt;a href=&#34;https://www.kaggle.com/lyhue1991/kerasmodel-wandb-example&#34;&gt;&lt;img src=&#34;https://kaggle.com/static/images/open-in-kaggle.svg?sanitize=true&#34; alt=&#34;Open In Kaggle&#34;&gt;&lt;/a&gt;&#xA;    &lt;/div&gt;&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;③wandb自动化调参🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/03%EF%BC%8Ckerasmodel_tuning_demo.ipynb&#34;&gt;&lt;strong&gt;wandb sweep demo&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;br&gt;&#xA;    &lt;div&gt;&#xA;     &lt;a href=&#34;https://www.kaggle.com/lyhue1991/torchkeras-loves-wandb-sweep&#34;&gt;&lt;img src=&#34;https://kaggle.com/static/images/open-in-kaggle.svg?sanitize=true&#34; alt=&#34;Open In Kaggle&#34;&gt;&lt;/a&gt;&#xA;    &lt;/div&gt;&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;④tensorboard可视化&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/04%EF%BC%8Ckerasmodel_tensorboard_demo.ipynb&#34;&gt;&lt;strong&gt;tensorboard example&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⑤ddp/tpu训练范例&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.kaggle.com/code/lyhue1991/torchkeras-ddp-tpu-examples&#34;&gt;&lt;strong&gt;ddp tpu examples&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;br&gt;&#xA;    &lt;div&gt;&#xA;     &lt;a href=&#34;https://www.kaggle.com/lyhue1991/torchkeras-ddp-tpu-examples&#34;&gt;&lt;img src=&#34;https://kaggle.com/static/images/open-in-kaggle.svg?sanitize=true&#34; alt=&#34;Open In Kaggle&#34;&gt;&lt;/a&gt;&#xA;    &lt;/div&gt;&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;6，进阶范例 🔥🔥&lt;/h2&gt; &#xA;&lt;p&gt;在炼丹实践中，遇到的数据集结构或者训练推理逻辑往往会千差万别。&lt;/p&gt; &#xA;&lt;p&gt;例如我们可能会遇到多输入多输出结构，或者希望在训练过程中计算并打印一些特定的指标等等。&lt;/p&gt; &#xA;&lt;p&gt;这时候炼丹师可能会倾向于使用最纯粹的pytorch编写自己的训练循环。&lt;/p&gt; &#xA;&lt;p&gt;实际上，torchkeras提供了极致的灵活性来让炼丹师掌控训练过程的每个细节。&lt;/p&gt; &#xA;&lt;p&gt;从这个意义上说，torchkeras更像是一个训练代码模版。&lt;/p&gt; &#xA;&lt;p&gt;这个模版由低到高由StepRunner，EpochRunner 和 KerasModel 三个类组成。&lt;/p&gt; &#xA;&lt;p&gt;在绝大多数场景下，用户只需要在StepRunner上稍作修改并覆盖掉，就可以实现自己想要的训练推理逻辑。&lt;/p&gt; &#xA;&lt;p&gt;就像下面这段代码范例，这是一个多输入的例子，并且嵌入了特定的accuracy计算逻辑。&lt;/p&gt; &#xA;&lt;p&gt;这段代码的完整范例，见examples下的CRNN_CTC验证码识别。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import torch.nn.functional as F &#xA;from torchkeras import KerasModel&#xA;from accelerate import Accelerator&#xA;&#xA;#我们覆盖KerasModel的StepRunner以实现自定义训练逻辑。&#xA;#注意这里把acc指标的结果写在了step_losses中以便和loss一样在Epoch上求平均，这是一个非常灵活而且有用的写法。&#xA;&#xA;class StepRunner:&#xA;    def __init__(self, net, loss_fn, accelerator=None, stage = &#34;train&#34;, metrics_dict = None, &#xA;                 optimizer = None, lr_scheduler = None&#xA;                 ):&#xA;        self.net,self.loss_fn,self.metrics_dict,self.stage = net,loss_fn,metrics_dict,stage&#xA;        self.optimizer,self.lr_scheduler = optimizer,lr_scheduler&#xA;        self.accelerator = accelerator if accelerator is not None else Accelerator()&#xA;        if self.stage==&#39;train&#39;:&#xA;            self.net.train() &#xA;        else:&#xA;            self.net.eval()&#xA;    &#xA;    def __call__(self, batch):&#xA;        &#xA;        images, targets, input_lengths, target_lengths = batch&#xA;        &#xA;        #loss&#xA;        preds = self.net(images)&#xA;        preds_log_softmax = F.log_softmax(preds, dim=-1)&#xA;        loss = F.ctc_loss(preds_log_softmax, targets, input_lengths, target_lengths)&#xA;        acc = eval_acc(targets,preds)&#xA;            &#xA;&#xA;        #backward()&#xA;        if self.optimizer is not None and self.stage==&#34;train&#34;:&#xA;            self.accelerator.backward(loss)&#xA;            self.optimizer.step()&#xA;            if self.lr_scheduler is not None:&#xA;                self.lr_scheduler.step()&#xA;            self.optimizer.zero_grad()&#xA;            &#xA;            &#xA;        all_loss = self.accelerator.gather(loss).sum()&#xA;        &#xA;        #losses （or plain metric that can be averaged）&#xA;        step_losses = {self.stage+&#34;_loss&#34;:all_loss.item(),&#xA;                       self.stage+&#39;_acc&#39;:acc}&#xA;        &#xA;        #metrics (stateful metric)&#xA;        step_metrics = {}&#xA;        if self.stage==&#34;train&#34;:&#xA;            if self.optimizer is not None:&#xA;                step_metrics[&#39;lr&#39;] = self.optimizer.state_dict()[&#39;param_groups&#39;][0][&#39;lr&#39;]&#xA;            else:&#xA;                step_metrics[&#39;lr&#39;] = 0.0&#xA;        return step_losses,step_metrics&#xA;    &#xA;#覆盖掉默认StepRunner &#xA;KerasModel.StepRunner = StepRunner &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以看到，这种修改实际上是非常简单并且灵活的，保持每个模块的输出与原始实现格式一致就行，中间处理逻辑根据需要灵活调整。&lt;/p&gt; &#xA;&lt;p&gt;同理，用户也可以修改并覆盖EpochRunner来实现自己的特定逻辑，但我一般很少遇到有这样需求的场景。&lt;/p&gt; &#xA;&lt;p&gt;examples目录下的范例库包括了使用torchkeras对一些非常常用的库中的模型进行训练的例子。&lt;/p&gt; &#xA;&lt;p&gt;例如：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;torchvision&lt;/li&gt; &#xA; &lt;li&gt;transformers&lt;/li&gt; &#xA; &lt;li&gt;segmentation_models_pytorch&lt;/li&gt; &#xA; &lt;li&gt;ultralytics&lt;/li&gt; &#xA; &lt;li&gt;timm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果你想掌握一个东西，那么就去使用它，如果你想真正理解一个东西，那么尝试去改变它。 ———— 爱因斯坦&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;example&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;使用模型库&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;notebook&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;图片分类——Resnet&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/ResNet.ipynb&#34;&gt;Resnet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;语义分割——UNet&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/UNet.ipynb&#34;&gt;UNet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;目标检测——SSD&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/SSD.ipynb&#34;&gt;SSD&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;文字识别——CRNN 🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/CRNN_CTC.ipynb&#34;&gt;CRNN-CTC&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;强化学习——Q-Learning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/Q-learning.ipynb&#34;&gt;Q-learning&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;强化学习——DQN&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/DQN.ipynb&#34;&gt;DQN&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;目标检测——FasterRCNN&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;torchvision&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/FasterRCNN%E2%80%94%E2%80%94vision.ipynb&#34;&gt;FasterRCNN&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;语义分割——DeepLabV3++ 🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;segmentation_models_pytorch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/Deeplabv3plus%E2%80%94%E2%80%94smp.ipynb&#34;&gt;Deeplabv3++&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;实例分割——MaskRCNN 🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;detectron2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/MaskRCNN%E2%80%94%E2%80%94detectron2.ipynb&#34;&gt;MaskRCNN&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;目标检测——YOLOv8 🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ultralytics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/YOLOv8%E2%80%94%E2%80%94ultralytics.ipynb&#34;&gt;YOLOv8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;文本分类——BERT 🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;transformers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/BERT%E2%80%94%E2%80%94transformers.ipynb&#34;&gt;BERT&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;命名实体识别——BERT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;transformers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/BERT_NER%E2%80%94%E2%80%94transformers.ipynb&#34;&gt;BERT_NER&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LLM微调——ChatGLM2_LoRA 🔥🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;transformers,peft&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/ChatGLM2_LoRA%E2%80%94%E2%80%94transformers.ipynb&#34;&gt;ChatGLM2_LoRA&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LLM微调——ChatGLM2_AdaLoRA 🔥🔥🔥&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;transformers,peft&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/ChatGLM2_AdaLoRA%E2%80%94%E2%80%94transformers.ipynb&#34;&gt;ChatGLM2_AdaLoRA&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;图片分类——SwinTransformer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;timm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyhue1991/torchkeras/master/examples/SwinTransformer%E2%80%94%E2%80%94timm.ipynb&#34;&gt;Swin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;7，鼓励和联系作者 🎈🎈&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果本项目对你有所帮助，想鼓励一下作者，记得给本项目加一颗星星star⭐️，并分享给你的朋友们喔😊!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果在torchkeras的使用中遇到问题，可以在项目中提交issue。&lt;/p&gt; &#xA;&lt;p&gt;如果想要获得更快的反馈或者与其他torchkeras用户小伙伴进行交流，&lt;/p&gt; &#xA;&lt;p&gt;可以在公众号算法美食屋后台回复关键字：&lt;strong&gt;加群&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/e6c9d24egy1h41m2zugguj20k00b9q46.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>