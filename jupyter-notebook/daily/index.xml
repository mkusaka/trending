<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:44:56Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FinanceData/FinanceDataReader</title>
    <updated>2022-07-11T01:44:56Z</updated>
    <id>tag:github.com,2022-07-11:/FinanceData/FinanceDataReader</id>
    <link href="https://github.com/FinanceData/FinanceDataReader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Financial data reader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FinanceDataReader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://financedata.github.io/&#34;&gt;FinanceData.KR&lt;/a&gt; Open Source Financial data reader&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The FinanceDataReader is financial data reader(crawler) for finance. &lt;br&gt; The main functions are as follows.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KRX Stock Symbol listings: &#39;KRX&#39;, &#39;KOSPI&#39;, &#39;KODAQ&#39;, &#39;KONEX&#39;&lt;/li&gt; &#xA; &lt;li&gt;Global Stock Symbol listings: &#39;NASDAQ&#39;, &#39;NYSE&#39;, &#39;AMEX&#39; and &#39;S&amp;amp;P500&#39;, &#39;SSE&#39;(상해), &#39;SZSE&#39;(심천), &#39;HKEX&#39;(홍콩), &#39;TSE&#39;(도쿄)&lt;/li&gt; &#xA; &lt;li&gt;KRX delistings: &#39;KRX-DELISTING&#39;(상장폐지종목), &#39;KRX-ADMINISTRATIVE&#39; (관리종목)&lt;/li&gt; &#xA; &lt;li&gt;ETF Symbol listings(for multiple countries): &#39;KR&#39;, &#39;US&#39;, &#39;JP&#39;&lt;/li&gt; &#xA; &lt;li&gt;Stock price(KRX): &#39;005930&#39;(Samsung), &#39;091990&#39;(Celltrion Healthcare) ...&lt;/li&gt; &#xA; &lt;li&gt;Stock price(Word wide): &#39;AAPL&#39;, &#39;AMZN&#39;, &#39;GOOG&#39; ... (you can specify exchange(market) and symbol)&lt;/li&gt; &#xA; &lt;li&gt;Indexes: &#39;KS11&#39;(코스피지수), &#39;KQ11&#39;(코스닥지수), &#39;DJI&#39;(다우존스지수), &#39;IXIC&#39;(나스닥지수), &#39;US500&#39;(S&amp;amp;P 500지수) ...&lt;/li&gt; &#xA; &lt;li&gt;Exchanges: &#39;USD/KRX&#39;, &#39;USD/EUR&#39;, &#39;CNY/KRW&#39; ... (조합가능한 화폐별 환율 데이터 일자별)&lt;/li&gt; &#xA; &lt;li&gt;Cryptocurrency price data: &#39;BTC/USD&#39; (Bitfinex), &#39;BTC/KRW&#39; (Bithumb)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install finance-datareader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import FinanceDataReader as fdr&#xA;&#xA;# 삼성전자(005930) 전체 (1996-11-05 ~ 현재)&#xA;df = fdr.DataReader(&#39;005930&#39;)&#xA;&#xA;# Apple(AAPL), 2017-01-01 ~ Now&#xA;df = fdr.DataReader(&#39;AAPL&#39;, &#39;2017&#39;)&#xA;&#xA;# Ford(F), 1980-01-01 ~ 2019-12-30 (40년 데이터)&#xA;df = fdr.DataReader(&#39;F&#39;, &#39;1980-01-01&#39;, &#39;2019-12-30&#39;)&#xA;&#xA;# AMAZON(AMZN), 2017 (1년)&#xA;df = fdr.DataReader(&#39;AMZN&#39;, &#39;2017-01-01&#39;, &#39;2019-12-31&#39;)&#xA;&#xA;# Samsung(005930), 2000-01-01 ~ 2019-12-31&#xA;df = fdr.DataReader(&#39;068270&#39;, &#39;2000-01-01&#39;, &#39;2019-12-31&#39;)&#xA;&#xA;# country code: ex) 000150: Doosan(KR), Yihua Healthcare(CN)&#xA;df = fdr.DataReader(&#39;000150&#39;, &#39;2018-01-01&#39;, &#39;2019-10-30&#39;) # KRX&#xA;df = fdr.DataReader(&#39;000150&#39;, &#39;2018-01-01&#39;, &#39;2019-10-30&#39;, exchange=&#39;KRX&#39;) # KRX (위와 동일)&#xA;df = fdr.DataReader(&#39;000150&#39;, &#39;2018-01-01&#39;, &#39;2019-10-30&#39;, exchange=&#39;SZSE&#39;) # SZSE&#xA;df = fdr.DataReader(&#39;000150&#39;, &#39;2018-01-01&#39;, &#39;2019-10-30&#39;, exchange=&#39;심천&#39;) # SZSE&#xA;&#xA;# TSE (도쿄증권거래소)&#xA;fdr.DataReader(&#39;7203&#39;, &#39;2020-01-01&#39;, exchange=&#39;TSE&#39;) # 토요타 자동차(7203)&#xA;fdr.DataReader(&#39;7203&#39;, &#39;2020-01-01&#39;, exchange=&#39;TSE&#39;) # 소프트뱅크그룹(7203)&#xA;&#xA;# HOSE (호치민증권거래소)&#xA;fdr.DataReader(&#39;VCB&#39;, &#39;2020-01-01&#39;, exchange=&#39;HOSE&#39;) # 베트남 무역은행(VCB)&#xA;fdr.DataReader(&#39;VIC&#39;, &#39;2020-01-01&#39;, exchange=&#39;HOSE&#39;) # Vingroup (JSC)&#xA;&#xA;# AMEX(아메리카증권거래소)&#xA;fdr.DataReader(&#39;LNG&#39;, &#39;2020-01-01&#39;, exchange=&#39;AMEX&#39;) # Cheniere Energy (LNG)&#xA;fdr.DataReader(&#39;CBOE&#39;, &#39;2020-01-01&#39;, exchange=&#39;AMEX&#39;) # Cboe Global Markets (CBOE)&#xA;&#xA;# KRX delisting stock data 상장폐지된 종목 가격 데이터 (상장일~상장폐지일)&#xA;df = fdr.DataReader(&#39;036360&#39;, exchange=&#39;KRX-DELISTING&#39;)&#xA;&#xA;# KOSPI index, 2015 ~ Now&#xA;ks11 = fdr.DataReader(&#39;KS11&#39;, &#39;2015-01-01&#39;)&#xA;&#xA;# Indexes, 2015 ~ Now&#xA;dji = fdr.DataReader(&#39;DJI&#39;, &#39;2015-01-01&#39;) # Dow Jones Industrial(DJI)&#xA;sp = fdr.DataReader(&#39;US500&#39;, &#39;2015-01-01&#39;) # S&amp;amp;P 500 지수 (NYSE)&#xA;&#xA;# FX 환율, 1995 ~ 현재&#xA;usdkrw = fdr.DataReader(&#39;USD/KRW&#39;, &#39;1995-01-01&#39;) # 달러 원화&#xA;usdeur = fdr.DataReader(&#39;USD/EUR&#39;, &#39;1995-01-01&#39;) # 달러 유로화&#xA;usdcny = fdr.DataReader(&#39;USD/CNY&#39;, &#39;1995-01-01&#39;) # 달러 위엔화&#xA;&#xA;# 상품 선물 가격 데이터&#xA;df = fdr.DataReader(&#39;NG&#39;) # NG 천연가스 선물 (NYMEX)&#xA;df = fdr.DataReader(&#39;ZG&#39;) # 금 선물 (ICE)&#xA;df = fdr.DataReader(&#39;ZI&#39;) # 은 선물 (ICE)&#xA;df = fdr.DataReader(&#39;HG&#39;) # 구리 선물 (COMEX)&#xA;&#xA;# Bitcoin KRW price (Bithumbs), 2016 ~ Now&#xA;btc = fdr.DataReader(&#39;BTC/KRW&#39;, &#39;2016-01-01&#39;)&#xA;&#xA;# 채권 수익률&#xA;df = fdr.DataReader(&#39;KR1YT=RR&#39;) # 1년만기 한국국채 수익률&#xA;df = fdr.DataReader(&#39;KR10YT=RR&#39;) # 10년만기 한국국채 수익률&#xA;&#xA;df = fdr.DataReader(&#39;US1MT=X&#39;) # 1개월 만기 미국국채 수익률&#xA;df = fdr.DataReader(&#39;US10YT=X&#39;) # 10년 만기 미국국채 수익률&#xA;&#xA;# KRX stock symbol list&#xA;stocks = fdr.StockListing(&#39;KRX&#39;) # 코스피, 코스닥, 코넥스 전체&#xA;stocks = fdr.StockListing(&#39;KOSPI&#39;) # 코스피&#xA;stocks = fdr.StockListing(&#39;KOSDAQ&#39;) # 코스닥&#xA;stocks = fdr.StockListing(&#39;KONEX&#39;) # 코넥스&#xA;&#xA;# NYSE, NASDAQ, AMEX stock symbol list&#xA;stocks = fdr.StockListing(&#39;NYSE&#39;)   # 뉴욕거래소&#xA;stocks = fdr.StockListing(&#39;NASDAQ&#39;) # 나스닥&#xA;stocks = fdr.StockListing(&#39;AMEX&#39;)   # 아멕스&#xA;&#xA;# S&amp;amp;P 500 symbol list&#xA;sp500 = fdr.StockListing(&#39;S&amp;amp;P500&#39;)&#xA;&#xA;# 기타 주요 거래소 상장종목 리스트&#xA;stocks = fdr.StockListing(&#39;SSE&#39;) # 상해 거래소&#xA;stocks = fdr.StockListing(&#39;SZSE&#39;) # 신천 거래소&#xA;stocks = fdr.StockListing(&#39;HKEX&#39;) # 홍콩거래소&#xA;stocks = fdr.StockListing(&#39;TSE&#39;) # 도쿄 증권거래소&#xA;stocks = fdr.StockListing(&#39;HOSE&#39;) # 호치민 증권거래소&#xA;&#xA;# KRX stock delisting symbol list 상장폐지 종목 전체 리스트&#xA;krx_delisting = fdr.StockListing(&#39;KRX-DELISTING&#39;)&#xA;&#xA;# KRX stock delisting symbol list and names 관리종목 리스트&#xA;krx_adm = fdr.StockListing(&#39;KRX-ADMINISTRATIVE&#39;) # 관리종목&#xA;&#xA;&#xA;# FRED 데이터&#xA;m2 = fdr.DataReader(&#39;M2&#39;, data_source=&#39;fred&#39;) #  M2통화량&#xA;nq = fdr.DataReader(&#39;NASDAQCOM&#39;, data_source=&#39;fred&#39;) # NASDAQCOM 나스닥종합지수&#xA;hou_nas = fdr.DataReader([&#39;HSN1F&#39;, &#39;NASDAQCOM&#39;], data_source=&#39;fred&#39;) # HSN1F 주택판매지수, NASDAQCOM 나스닥종합지수 &#xA;&#xA;# 캔들차트 그리기&#xA;df = fdr.DataReader(&#39;005930&#39;, &#39;2021-01-01&#39;, &#39;2021-02-15&#39;)&#xA;&#xA;fdr.chart.plot(df)&#xA;fdr.chart.plot(df, title=&#39;삼성전자(005930)&#39;)&#xA;&#xA;# 차트 설정&#xA;config = {&#39;title&#39;:&#39;fdr.chart.config()를 사용하여 설정을 한번에 지정할 수 있습니다&#39;, &#xA;          &#39;width&#39;: 600, &#xA;          &#39;height&#39;: 300,&#xA;          &#39;volume&#39;: True,&#xA;}&#xA;&#xA;fdr.chart.config(config=config)&#xA;fdr.chart.plot(df)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using FinanceDataReader&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FinanceData/FinanceDataReader/wiki/Users-Guide&#34;&gt;Users-Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FinanceData/FinanceDataReader/wiki/Quick-Reference&#34;&gt;Quick-Reference (Symbol List)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/FinanceData/FinanceDataReader/blob/master/tutorial/FinanceDataReader%20Tutorial%20-%20FRED%20%EA%B2%BD%EA%B8%B0%20%EC%84%A0%ED%96%89%20%EC%A7%80%ED%91%9C.ipynb&#34;&gt;FRED 주요 경기 선행 지표&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/FinanceData/FinanceDataReader/blob/master/tutorial/FinanceDataReader%20Tutorial%20-%20%EC%88%98%EC%A0%95%EC%A3%BC%EA%B0%80.ipynb&#34;&gt;수정주가(Adjusted Price)란?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/FinanceData/FinanceDataReader/blob/master/tutorial/FinanceDataReader%20Tutorial%20-%20%EC%97%AC%EB%9F%AC%20%EC%A2%85%EB%AA%A9%EC%9D%98%20%EA%B0%80%EA%B2%A9%EC%9D%84%20%ED%95%9C%EB%B2%88%EC%97%90.ipynb&#34;&gt;여러 종목 가격을 한번에&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/FinanceData/FinanceDataReader/blob/master/tutorial/FinanceDataReader%20Tutorial%20-%20VIX%20%EC%A7%80%EC%88%98%EC%99%80%20%EA%B4%80%EB%A0%A8%20%EC%A2%85%EB%AA%A9.ipynb&#34;&gt;VIX 지수와 관련 종목&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/FinanceData/FinanceDataReader/blob/master/tutorial/FinanceDataReader%20Tutorial%20-%20%EC%84%B9%ED%84%B0%20%ED%8F%89%EA%B7%A0%20%EC%88%98%EC%9D%B5%EB%A5%A0%EA%B3%BC%20%EA%B0%9C%EB%B3%84%20%EC%A2%85%EB%AA%A9%EC%9D%98%20%EC%88%98%EC%9D%B5%EB%A5%A0.ipynb&#34;&gt;섹터 평균 수익률과 개별 종목의 수익률 구하기&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nbviewer.jupyter.org/c6c336c4727386810bec9264e81f6bba&#34;&gt;차트 그리기와 활용하기&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FinanceDataReader Notebooks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/710b8f0a4bd9a8df91ae1be6c7e838b1&#34;&gt;S&amp;amp;P500 가격 데이터 수집과 수익률 분석&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/35a1b0d5248bc9b09513e53be437ac42&#34;&gt;S&amp;amp;P500 팩터 데이터 수집과 분석&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2018-2020 &lt;a href=&#34;http://financedata.kr&#34;&gt;FinanceData.KR&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>tg-bomze/Face-Depixelizer</title>
    <updated>2022-07-11T01:44:56Z</updated>
    <id>tag:github.com,2022-07-11:/tg-bomze/Face-Depixelizer</id>
    <link href="https://github.com/tg-bomze/Face-Depixelizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Face Depixelizer based on &#34;PULSE: Self-Supervised Photo Upsampling via Latent Space Exploration of Generative Models&#34; repository.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;NOTE&lt;/h2&gt; &#xA;&lt;p&gt;We have noticed a lot of concern that PULSE will be used to identify individuals whose faces have been blurred out. We want to emphasize that this is impossible - &lt;strong&gt;PULSE makes imaginary faces of people who do not exist, which should not be confused for real people.&lt;/strong&gt; It will &lt;strong&gt;not&lt;/strong&gt; help identify or reconstruct the original image.&lt;/p&gt; &#xA;&lt;p&gt;We also want to address concerns of bias in PULSE. &lt;strong&gt;We have now included a new section in the &lt;a href=&#34;https://drive.google.com/file/d/1fV7FsmunjDuRrsn4KYf2Efwp0FNBtcR4/view&#34;&gt;paper&lt;/a&gt; and an accompanying model card directly addressing this bias.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are interested more about the topic, you can read this &lt;a href=&#34;https://spectrum.ieee.org/tech-talk/computing/software/making-blurry-faces-photorealistic-goes-only-so-far&#34;&gt;IEEE Tech Talk about PULSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Face-Depixelizer&lt;/h1&gt; &#xA;&lt;p&gt;Face Depixelizer based on &#34;PULSE: Self-Supervised Photo Upsampling via Latent Space Exploration of Generative Models&#34; repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tg-bomze/Face-Depixelizer/raw/master/transformation.gif&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Given a low-resolution input image, Face Depixelizer searches the outputs of a generative model (here, &lt;a href=&#34;https://github.com/NVlabs/stylegan&#34;&gt;StyleGAN&lt;/a&gt;) for high-resolution images that are perceptually realistic and downscale correctly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Check how it works on Google Colab:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Russian Language &lt;a href=&#34;https://colab.research.google.com/github/tg-bomze/Face-Depixelizer/blob/master/Face_Depixelizer_Rus.ipynb&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/52feade06f2fecbf006889a904d221e6a730c194/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;English Language &lt;a href=&#34;https://colab.research.google.com/github/tg-bomze/Face-Depixelizer/blob/master/Face_Depixelizer_Eng.ipynb&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/52feade06f2fecbf006889a904d221e6a730c194/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Based on:&lt;/strong&gt; &lt;a href=&#34;https://github.com/adamian98/pulse&#34;&gt;PULSE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Article&lt;/strong&gt;: &lt;a href=&#34;https://arxiv.org/abs/2003.03808&#34;&gt;PULSE: Self-Supervised Photo Upsampling via Latent Space Exploration of Generative Models&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Currently using Google Drive to store model weights and it has a daily cap on downloads, therefore, you may receive an error message saying &#34;&lt;em&gt;Google Drive Quota Exceeded&lt;/em&gt;&#34; or &#34;&lt;em&gt;No such file or directory: &#39;/content/pulse/runs/face.png&#39;&lt;/em&gt;&#34;. If you are experiencing this error please try again later in the day or come back tomorrow.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks for the help in fixing the errors: &lt;a href=&#34;https://github.com/AlrasheedA&#34;&gt;AlrasheedA&lt;/a&gt;, &lt;a href=&#34;https://github.com/kuanhulio&#34;&gt;kuanhulio&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/tg-bomze/Face-Depixelizer/master/t.me/DevMentor&#34;&gt;DevMentor&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fchollet/deep-learning-with-python-notebooks</title>
    <updated>2022-07-11T01:44:56Z</updated>
    <id>tag:github.com,2022-07-11:/fchollet/deep-learning-with-python-notebooks</id>
    <link href="https://github.com/fchollet/deep-learning-with-python-notebooks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jupyter notebooks for the code samples of the book &#34;Deep Learning with Python&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Companion Jupyter notebooks for the book &#34;Deep Learning with Python&#34;&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains Jupyter notebooks implementing the code samples found in the book &lt;a href=&#34;https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&amp;amp;a_bid=76564dff&#34;&gt;Deep Learning with Python, 2nd Edition (Manning Publications)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For readability, these notebooks only contain runnable code blocks and section titles, and omit everything else in the book: text paragraphs, figures, and pseudocode. &lt;strong&gt;If you want to be able to follow what&#39;s going on, I recommend reading the notebooks side by side with your copy of the book.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;These notebooks use TensorFlow 2.6.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter02_mathematical-building-blocks.ipynb&#34;&gt;Chapter 2: The mathematical building blocks of neural networks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter03_introduction-to-keras-and-tf.ipynb&#34;&gt;Chapter 3: Introduction to Keras and TensorFlow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter04_getting-started-with-neural-networks.ipynb&#34;&gt;Chapter 4: Getting started with neural networks: classification and regression&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter05_fundamentals-of-ml.ipynb&#34;&gt;Chapter 5: Fundamentals of machine learning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter07_working-with-keras.ipynb&#34;&gt;Chapter 7: Working with Keras: a deep dive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter08_intro-to-dl-for-computer-vision.ipynb&#34;&gt;Chapter 8: Introduction to deep learning for computer vision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chapter 9: Advanced deep learning for computer vision &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter09_part01_image-segmentation.ipynb&#34;&gt;Part 1: Image segmentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter09_part02_modern-convnet-architecture-patterns.ipynb&#34;&gt;Part 2: Modern convnet architecture patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter09_part03_interpreting-what-convnets-learn.ipynb&#34;&gt;Part 3: Interpreting what convnets learn&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter10_dl-for-timeseries.ipynb&#34;&gt;Chapter 10: Deep learning for timeseries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chapter 11: Deep learning for text &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter11_part01_introduction.ipynb&#34;&gt;Part 1: Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter11_part02_sequence-models.ipynb&#34;&gt;Part 2: Sequence models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter11_part03_transformer.ipynb&#34;&gt;Part 3: Transformer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter11_part04_sequence-to-sequence-learning.ipynb&#34;&gt;Part 4: Sequence-to-sequence learning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Chapter 12: Generative deep learning &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter12_part01_text-generation.ipynb&#34;&gt;Part 1: Text generation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter12_part02_deep-dream.ipynb&#34;&gt;Part 2: Deep Dream&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter12_part03_neural-style-transfer.ipynb&#34;&gt;Part 3: Neural style transfer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter12_part04_variational-autoencoders.ipynb&#34;&gt;Part 4: Variational autoencoders&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter12_part05_gans.ipynb&#34;&gt;Part 5: Generative adversarial networks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter13_best-practices-for-the-real-world.ipynb&#34;&gt;Chapter 13: Best practices for the real world&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/fchollet/deep-learning-with-python-notebooks/blob/master/chapter14_conclusions.ipynb&#34;&gt;Chapter 14: Conclusions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>