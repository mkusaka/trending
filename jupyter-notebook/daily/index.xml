<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:43:23Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Pegah-Ardehkhani/Statistics-and-Probability-in-Python</title>
    <updated>2022-07-20T01:43:23Z</updated>
    <id>tag:github.com,2022-07-20:/Pegah-Ardehkhani/Statistics-and-Probability-in-Python</id>
    <link href="https://github.com/Pegah-Ardehkhani/Statistics-and-Probability-in-Python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository aims to explore &#34;Statistics&#34; and &#34;Probability Theory&#34; concepts and their implementations in &#34;Python&#34;.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Statistics and Probability in Python üìä üìà &lt;img src=&#34;https://img.shields.io/github/license/Pegah-Ardehkhani/Statistics-and-Probability-in-Python.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/Pegah-Ardehkhani/Statistics-and-Probability-in-Python.svg?sanitize=true&#34; alt=&#34;releases&#34;&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Note&lt;/code&gt;&lt;/strong&gt;: This repository is still developing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500&#34; height=&#34;350&#34; src=&#34;https://cdn.dribbble.com/users/962944/screenshots/14138307/media/ca3377660c3d2053c9d91ac175871429.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of content ‚úçÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chapter 1: Special Continuous Random Variables&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%201%20Special%20Continuous%20Random%20Variables.ipynb&#34; target=&#34;_parent\&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nbviewer.org/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%201%20Special%20Continuous%20Random%20Variables.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg?sanitize=true&#34; alt=&#34;nbviewer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.1. Normal (Gaussian) Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.2. Chi-square Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.3. T-student Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.4. Fisher Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.5. Continuous Uniform Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.6. Exponential Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.7. Gamma Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.8. Beta Distribution&lt;/li&gt; &#xA; &lt;li&gt;1.9. Weibull Distribution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chapter 2: Special Discrete Random Variables&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%202%20Special%20Discrete%20Random%20Variables.ipynb&#34; target=&#34;_parent\&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nbviewer.org/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%202%20Special%20Discrete%20Random%20Variables.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg?sanitize=true&#34; alt=&#34;nbviewer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.1. Bernoulli Distribution&lt;/li&gt; &#xA; &lt;li&gt;2.2. Binomial Distribution&lt;/li&gt; &#xA; &lt;li&gt;2.3. Geometric Distribution&lt;/li&gt; &#xA; &lt;li&gt;2.4. Poisson Distribution&lt;/li&gt; &#xA; &lt;li&gt;2.5. Discrete Uniform Distribution&lt;/li&gt; &#xA; &lt;li&gt;2.6. Hypergeometric Distribution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chapter 3: Confidence Intervals&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%203%20Confidence%20Intervals.ipynb&#34; target=&#34;_parent\&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nbviewer.org/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%203%20Confidence%20Intervals.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg?sanitize=true&#34; alt=&#34;nbviewer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3.1. Confidence Interval for the Mean of a Normal Population &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;3.1.1. Known Standard Deviation&lt;/li&gt; &#xA;   &lt;li&gt;3.1.2. Unknown Standard Deviation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;3.2. Confidence Interval for the Variance of a Normal Population &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;3.2.1. Unknown Mean of the Population&lt;/li&gt; &#xA;   &lt;li&gt;3.2.2. Known Mean of the Population&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;3.3. Confidence Interval for the Difference in Means of Two Normal Population &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;3.3.1. Known Variances&lt;/li&gt; &#xA;   &lt;li&gt;3.3.2. Unknown but Equal Variances&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;3.4. Confidence Interval for the Ratio of Variances of Two Normal Populations&lt;/li&gt; &#xA; &lt;li&gt;3.5. Confidence Interval for the Mean of a Bernoulli Random Variable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chapter 4: Parametric Hypothesis Testing&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%204%20Parametric%20Hypothesis%20Testing.ipynb&#34; target=&#34;_parent\&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nbviewer.org/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%204%20Parametric%20Hypothesis%20Testing.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg?sanitize=true&#34; alt=&#34;nbviewer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4.1. Introduction&lt;/li&gt; &#xA; &lt;li&gt;4.2. Test Concerning the Mean of a Normal Population &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4.2.1. Known Standard Deviation&lt;/li&gt; &#xA;   &lt;li&gt;4.2.2. Unknown Standard Deviation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;4.3. Test Concerning the Equality of Means of Two Normal Populations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4.3.1. Known Variances&lt;/li&gt; &#xA;   &lt;li&gt;4.3.2. Unknown but Equal Variances&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;4.4. Paired t-test&lt;/li&gt; &#xA; &lt;li&gt;4.5. Test Concerning the Variance of a Normal Population&lt;/li&gt; &#xA; &lt;li&gt;4.6. Test Concerning the Equality of Variances of Two Normal Populations&lt;/li&gt; &#xA; &lt;li&gt;4.7. Test Concerning P in Bernoulli Populations&lt;/li&gt; &#xA; &lt;li&gt;4.8. Test Concerning the Equality of P in Two Bernoulli Populations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chapter 5: Statistical Hypothesis Testing&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%205%20Statistical%20Hypothesis%20Testing.ipynb&#34; target=&#34;_parent\&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nbviewer.org/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%205%20Statistical%20Hypothesis%20Testing.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg?sanitize=true&#34; alt=&#34;nbviewer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;5.1. Normality Tests &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;5.1.1. Shapiro-Wilk Test&lt;/li&gt; &#xA;   &lt;li&gt;5.1.2. D‚ÄôAgostino‚Äôs Test&lt;/li&gt; &#xA;   &lt;li&gt;5.1.3. Anderson-Darling Test&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;5.2. Correlation Tests &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;5.2.1. Pearson‚Äôs Correlation Coefficient&lt;/li&gt; &#xA;   &lt;li&gt;5.2.2. Spearman‚Äôs Rank Correlation&lt;/li&gt; &#xA;   &lt;li&gt;5.2.3. Kendall‚Äôs Rank Correlation&lt;/li&gt; &#xA;   &lt;li&gt;5.2.4. Chi-Squared Test&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;5.3. Stationary Tests &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;5.3.1. Augmented Dickey-Fuller Unit Root Test&lt;/li&gt; &#xA;   &lt;li&gt;5.3.2. Kwiatkowski-Phillips-Schmidt-Shin Test&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;5.4. Other Tests &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;5.4.1. Mann-Whitney U-Test&lt;/li&gt; &#xA;   &lt;li&gt;5.4.2. Wilcoxon Signed-Rank Test&lt;/li&gt; &#xA;   &lt;li&gt;5.4.3. Kruskal-Wallis H Test&lt;/li&gt; &#xA;   &lt;li&gt;5.4.4. Friedman Test&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chapter 6: Regression&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%206%20Regression.ipynb&#34; target=&#34;_parent\&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nbviewer.org/github/Pegah-Ardehkhani/Statistics-and-Probability-in-Python/blob/main/Chapter%206%20Regression.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg?sanitize=true&#34; alt=&#34;nbviewer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;6.1. Introduction&lt;/li&gt; &#xA; &lt;li&gt;6.2. Least Squares Estimators of the Regression Parameters&lt;/li&gt; &#xA; &lt;li&gt;6.3. Statistical Inferences about the Regression Parameters &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;6.3.1. Inferences Concerning B &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;6.3.1.1. Known Variance&lt;/li&gt; &#xA;     &lt;li&gt;6.3.1.2. Unknown Variance&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;6.3.2. Inferences Concerning A &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;6.3.2.1. Unknown Variance&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;6.3.3. T-tests for Regression Parameters with statsmodels&lt;/li&gt; &#xA;   &lt;li&gt;6.3.4. F-statistic for Overall Significance in Regression&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;6.4. Confidence Intervals Concerning Regression Models &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;6.4.1. Confidence Interval for B &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;6.4.1.1. Known Variance&lt;/li&gt; &#xA;     &lt;li&gt;6.4.1.2. Unknown Variance&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;6.4.2. Confidence Interval for A &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;6.4.2.1. Unknown Variance&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;6.4.3. Confidence Interval for A+Bx &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;6.4.3.1. Unknown Variance&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;6.4.4. Prediction Interval of a Future Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;6.5. Residuals &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;6.5.1. Regression Diagnostic&lt;/li&gt; &#xA;   &lt;li&gt;6.5.2. Multicolinearity&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>CompVis/taming-transformers</title>
    <updated>2022-07-20T01:43:23Z</updated>
    <id>tag:github.com,2022-07-20:/CompVis/taming-transformers</id>
    <link href="https://github.com/CompVis/taming-transformers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Taming Transformers for High-Resolution Image Synthesis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Taming Transformers for High-Resolution Image Synthesis&lt;/h1&gt; &#xA;&lt;h5&gt;CVPR 2021 (Oral)&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/mountain.jpeg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://compvis.github.io/taming-transformers/&#34;&gt;&lt;strong&gt;Taming Transformers for High-Resolution Image Synthesis&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/pesser&#34;&gt;Patrick Esser&lt;/a&gt;*, &lt;a href=&#34;https://github.com/rromb&#34;&gt;Robin Rombach&lt;/a&gt;*, &lt;a href=&#34;https://hci.iwr.uni-heidelberg.de/Staff/bommer&#34;&gt;Bj√∂rn Ommer&lt;/a&gt;&lt;br&gt; * equal contribution&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; We combine the efficiancy of convolutional approaches with the expressivity of transformers by introducing a convolutional VQGAN, which learns a codebook of context-rich visual parts, whose composition is modeled with an autoregressive transformer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/teaser.png&#34; alt=&#34;teaser&#34;&gt; &lt;a href=&#34;https://arxiv.org/abs/2012.09841&#34;&gt;arXiv&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#bibtex&#34;&gt;BibTeX&lt;/a&gt; | &lt;a href=&#34;https://compvis.github.io/taming-transformers/&#34;&gt;Project Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;News&lt;/h3&gt; &#xA;&lt;h4&gt;2022&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More pretrained VQGANs (e.g. a f8-model with only 256 codebook entries) are available in our new work on &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;Latent Diffusion Models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Added scene synthesis models as proposed in the paper &lt;a href=&#34;https://arxiv.org/abs/2105.06458&#34;&gt;High-Resolution Complex Scene Synthesis with Transformers&lt;/a&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#scene-image-synthesis&#34;&gt;this section&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2021&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/rom1504&#34;&gt;rom1504&lt;/a&gt; it is now easy to &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#training-on-custom-data&#34;&gt;train a VQGAN on your own datasets&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Included a bugfix for the quantizer. For backward compatibility it is disabled by default (which corresponds to always training with &lt;code&gt;beta=1.0&lt;/code&gt;). Use &lt;code&gt;legacy=False&lt;/code&gt; in the quantizer config to enable it. Thanks &lt;a href=&#34;https://github.com/richcmwang&#34;&gt;richcmwang&lt;/a&gt; and &lt;a href=&#34;https://github.com/wcshin-git&#34;&gt;wcshin-git&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Our paper received an update: See &lt;a href=&#34;https://arxiv.org/abs/2012.09841v3&#34;&gt;https://arxiv.org/abs/2012.09841v3&lt;/a&gt; and the corresponding changelog.&lt;/li&gt; &#xA; &lt;li&gt;Added a pretrained, &lt;a href=&#34;https://k00.fr/s511rwcv&#34;&gt;1.4B transformer model&lt;/a&gt; trained for class-conditional ImageNet synthesis, which obtains state-of-the-art FID scores among autoregressive approaches and outperforms BigGAN.&lt;/li&gt; &#xA; &lt;li&gt;Added pretrained, unconditional models on &lt;a href=&#34;https://k00.fr/yndvfu95&#34;&gt;FFHQ&lt;/a&gt; and &lt;a href=&#34;https://k00.fr/2xkmielf&#34;&gt;CelebA-HQ&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Added accelerated sampling via caching of keys/values in the self-attention operation, used in &lt;code&gt;scripts/sample_fast.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Added a checkpoint of a &lt;a href=&#34;https://heibox.uni-heidelberg.de/d/2e5662443a6b4307b470/&#34;&gt;VQGAN&lt;/a&gt; trained with f8 compression and Gumbel-Quantization. See also our updated &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;reconstruction notebook&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We added a &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;colab notebook&lt;/a&gt; which compares two VQGANs and OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;DALL-E&lt;/a&gt;. See also &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#more-resources&#34;&gt;this section&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We now include an overview of pretrained models in &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#overview-of-pretrained-models&#34;&gt;Tab.1&lt;/a&gt;. We added models for &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#coco&#34;&gt;COCO&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#ade20k&#34;&gt;ADE20k&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The streamlit demo now supports image completions.&lt;/li&gt; &#xA; &lt;li&gt;We now include a couple of examples from the D-RIN dataset so you can run the &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#d-rin&#34;&gt;D-RIN demo&lt;/a&gt; without preparing the dataset first.&lt;/li&gt; &#xA; &lt;li&gt;You can now jump right into sampling with our &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/taming-transformers.ipynb&#34;&gt;Colab quickstart notebook&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A suitable &lt;a href=&#34;https://conda.io/&#34;&gt;conda&lt;/a&gt; environment named &lt;code&gt;taming&lt;/code&gt; can be created and activated with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate taming&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview of pretrained models&lt;/h2&gt; &#xA;&lt;p&gt;The following table provides an overview of all models that are currently available. FID scores were evaluated using &lt;a href=&#34;https://github.com/toshas/torch-fidelity&#34;&gt;torch-fidelity&lt;/a&gt;. For reference, we also include a link to the recently released autoencoder of the &lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;DALL-E&lt;/a&gt; model. See the corresponding &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;colab notebook&lt;/a&gt; for a comparison and discussion of reconstruction capabilities.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dataset&lt;/th&gt; &#xA;   &lt;th&gt;FID vs train&lt;/th&gt; &#xA;   &lt;th&gt;FID vs val&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Samples (256x256)&lt;/th&gt; &#xA;   &lt;th&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FFHQ (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;9.6&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/yndvfu95&#34;&gt;ffhq_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;ffhq_samples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CelebA-HQ (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;10.2&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/2xkmielf&#34;&gt;celebahq_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;celebahq_samples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ADE20K (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;35.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/ot46cksa&#34;&gt;ade20k_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/f/70bb78cbaf844501b8fb/&#34;&gt;ade20k_samples.zip&lt;/a&gt; [2k]&lt;/td&gt; &#xA;   &lt;td&gt;evaluated on val split (2k images)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;COCO-Stuff (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;20.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/2zz6i2ce&#34;&gt;coco_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/f/a395a9be612f4a7a8054/&#34;&gt;coco_samples.zip&lt;/a&gt; [5k]&lt;/td&gt; &#xA;   &lt;td&gt;evaluated on val split (5k images)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ImageNet (cIN) (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;15.98/15.78/6.59/5.88/5.20&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/s511rwcv&#34;&gt;cin_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;cin_samples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;different decoding hyperparameters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FacesHQ (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/qqfl2do8&#34;&gt;faceshq_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S-FLCKR (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/73487ab6e5314cb5adba/&#34;&gt;sflckr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D-RIN (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/39jcugc5&#34;&gt;drin_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN ImageNet (f=16), 1024&lt;/td&gt; &#xA;   &lt;td&gt;10.54&lt;/td&gt; &#xA;   &lt;td&gt;7.94&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/8088892a516d4e3baf92/&#34;&gt;vqgan_imagenet_f16_1024&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;reconstructions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN ImageNet (f=16), 16384&lt;/td&gt; &#xA;   &lt;td&gt;7.41&lt;/td&gt; &#xA;   &lt;td&gt;4.98&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/a7530b09fed84f80a887/&#34;&gt;vqgan_imagenet_f16_16384&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;reconstructions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN OpenImages (f=8), 256&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;1.49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ommer-lab.com/files/latent-diffusion/vq-f8-n256.zip&#34;&gt;https://ommer-lab.com/files/latent-diffusion/vq-f8-n256.zip&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs. Available via &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;latent diffusion&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN OpenImages (f=8), 16384&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;1.14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ommer-lab.com/files/latent-diffusion/vq-f8.zip&#34;&gt;https://ommer-lab.com/files/latent-diffusion/vq-f8.zip&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs. Available via &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;latent diffusion&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN OpenImages (f=8), 8192, GumbelQuantization&lt;/td&gt; &#xA;   &lt;td&gt;3.24&lt;/td&gt; &#xA;   &lt;td&gt;1.49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/2e5662443a6b4307b470/&#34;&gt;vqgan_gumbel_f8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DALL-E dVAE (f=8), 8192, GumbelQuantization&lt;/td&gt; &#xA;   &lt;td&gt;33.88&lt;/td&gt; &#xA;   &lt;td&gt;32.01&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;https://github.com/openai/DALL-E&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;reconstructions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Running pretrained models&lt;/h2&gt; &#xA;&lt;p&gt;The commands below will start a streamlit demo which supports sampling at different resolutions and image completions. To run a non-interactive version of the sampling process, replace &lt;code&gt;streamlit run scripts/sample_conditional.py --&lt;/code&gt; by &lt;code&gt;python scripts/make_samples.py --outdir &amp;lt;path_to_write_samples_to&amp;gt;&lt;/code&gt; and keep the remaining command line arguments.&lt;/p&gt; &#xA;&lt;p&gt;To sample from unconditional or class-conditional models, run &lt;code&gt;python scripts/sample_fast.py -r &amp;lt;path/to/config_and_checkpoint&amp;gt;&lt;/code&gt;. We describe below how to use this script to sample from the ImageNet, FFHQ, and CelebA-HQ models, respectively.&lt;/p&gt; &#xA;&lt;h3&gt;S-FLCKR&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/sunset_and_ocean.jpg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/taming-transformers.ipynb&#34;&gt;run this model in a Colab notebook&lt;/a&gt;, which includes all necessary steps to start sampling.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://heibox.uni-heidelberg.de/d/73487ab6e5314cb5adba/&#34;&gt;2020-11-09T13-31-51_sflckr&lt;/a&gt; folder and place it into &lt;code&gt;logs&lt;/code&gt;. Then, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-09T13-31-51_sflckr/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ImageNet&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/imagenet.png&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://k00.fr/s511rwcv&#34;&gt;2021-04-03T19-39-50_cin_transformer&lt;/a&gt; folder and place it into logs. Sampling from the class-conditional ImageNet model does not require any data preparation. To produce 50 samples for each of the 1000 classes of ImageNet, with k=600 for top-k sampling, p=0.92 for nucleus sampling and temperature t=1.0, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-03T19-39-50_cin_transformer/ -n 50 -k 600 -t 1.0 -p 0.92 --batch_size 25   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To restrict the model to certain classes, provide them via the &lt;code&gt;--classes&lt;/code&gt; argument, separated by commas. For example, to sample 50 &lt;em&gt;ostriches&lt;/em&gt;, &lt;em&gt;border collies&lt;/em&gt; and &lt;em&gt;whiskey jugs&lt;/em&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-03T19-39-50_cin_transformer/ -n 50 -k 600 -t 1.0 -p 0.92 --batch_size 25 --classes 9,232,901   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommended to experiment with the autoregressive decoding parameters (top-k, top-p and temperature) for best results.&lt;/p&gt; &#xA;&lt;h3&gt;FFHQ/CelebA-HQ&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://k00.fr/yndvfu95&#34;&gt;2021-04-23T18-19-01_ffhq_transformer&lt;/a&gt; and &lt;a href=&#34;https://k00.fr/2xkmielf&#34;&gt;2021-04-23T18-11-19_celebahq_transformer&lt;/a&gt; folders and place them into logs. Again, sampling from these unconditional models does not require any data preparation. To produce 50000 samples, with k=250 for top-k sampling, p=1.0 for nucleus sampling and temperature t=1.0, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-23T18-19-01_ffhq_transformer/   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for FFHQ and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-23T18-11-19_celebahq_transformer/   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to sample from the CelebA-HQ model. For both models it can be advantageous to vary the top-k/top-p parameters for sampling.&lt;/p&gt; &#xA;&lt;h3&gt;FacesHQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/faceshq.jpg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/qqfl2do8&#34;&gt;2020-11-13T21-41-45_faceshq_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. Follow the data preparation steps for &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#celeba-hq&#34;&gt;CelebA-HQ&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#ffhq&#34;&gt;FFHQ&lt;/a&gt;. Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-13T21-41-45_faceshq_transformer/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D-RIN&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/drin.jpg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/39jcugc5&#34;&gt;2020-11-20T12-54-32_drin_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. To run the demo on a couple of example depth maps included in the repository, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T12-54-32_drin_transformer/ --ignore_base_data data=&#34;{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.imagenet.DRINExamples}}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the demo on the complete validation set, first follow the data preparation steps for &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#imagenet&#34;&gt;ImageNet&lt;/a&gt; and then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T12-54-32_drin_transformer/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;COCO&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/2zz6i2ce&#34;&gt;2021-01-20T16-04-20_coco_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. To run the demo on a couple of example segmentation maps included in the repository, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2021-01-20T16-04-20_coco_transformer/ --ignore_base_data data=&#34;{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.coco.Examples}}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ADE20k&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/ot46cksa&#34;&gt;2020-11-20T21-45-44_ade20k_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. To run the demo on a couple of example segmentation maps included in the repository, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T21-45-44_ade20k_transformer/ --ignore_base_data data=&#34;{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.ade20k.Examples}}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scene Image Synthesis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/scene_images_samples.svg?sanitize=true&#34; alt=&#34;teaser&#34;&gt; Scene image generation based on bounding box conditionals as done in our CVPR2021 AI4CC workshop paper &lt;a href=&#34;https://arxiv.org/abs/2105.06458&#34;&gt;High-Resolution Complex Scene Synthesis with Transformers&lt;/a&gt; (see talk on &lt;a href=&#34;https://visual.cs.brown.edu/workshops/aicc2021/#awards&#34;&gt;workshop page&lt;/a&gt;). Supporting the datasets COCO and Open Images.&lt;/p&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;Download first-stage models &lt;a href=&#34;https://heibox.uni-heidelberg.de/f/78dea9589974474c97c1/&#34;&gt;COCO-8k-VQGAN&lt;/a&gt; for COCO or &lt;a href=&#34;https://heibox.uni-heidelberg.de/f/461d9a9f4fcf48ab84f4/&#34;&gt;COCO/Open-Images-8k-VQGAN&lt;/a&gt; for Open Images. Change &lt;code&gt;ckpt_path&lt;/code&gt; in &lt;code&gt;data/coco_scene_images_transformer.yaml&lt;/code&gt; and &lt;code&gt;data/open_images_scene_images_transformer.yaml&lt;/code&gt; to point to the downloaded first-stage models. Download the full COCO/OI datasets and adapt &lt;code&gt;data_path&lt;/code&gt; in the same files, unless working with the 100 files provided for training and validation suits your needs already.&lt;/p&gt; &#xA;&lt;p&gt;Code can be run with &lt;code&gt;python main.py --base configs/coco_scene_images_transformer.yaml -t True --gpus 0,&lt;/code&gt; or &lt;code&gt;python main.py --base configs/open_images_scene_images_transformer.yaml -t True --gpus 0,&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sampling&lt;/h3&gt; &#xA;&lt;p&gt;Train a model as described above or download a pre-trained model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1FEK-Z7hyWJBvFWQF50pzSK9y1W_CJEig/view?usp=sharing&#34;&gt;Open Images 1 billion parameter model&lt;/a&gt; available that trained 100 epochs. On 256x256 pixels, FID 41.48¬±0.21, SceneFID 14.60¬±0.15, Inception Score 18.47¬±0.27. The model was trained with 2d crops of images and is thus well-prepared for the task of generating high-resolution images, e.g. 512x512.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1xf89g0mc78J3d8Bx5YhbK4tNRNlOoYaO&#34;&gt;Open Images distilled version of the above model with 125 million parameters&lt;/a&gt; allows for sampling on smaller GPUs (4 GB is enough for sampling 256x256 px images). Model was trained for 60 epochs with 10% soft loss, 90% hard loss. On 256x256 pixels, FID 43.07¬±0.40, SceneFID 15.93¬±0.19, Inception Score 17.23¬±0.11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/f/0d0b2594e9074c7e9a33/&#34;&gt;COCO 30 epochs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1bInd49g2YulTJBjU32Awyt5qnzxxG5U9/&#34;&gt;COCO 60 epochs&lt;/a&gt; (find model statistics for both COCO versions in &lt;code&gt;assets/coco_scene_images_training.svg&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When downloading a pre-trained model, remember to change &lt;code&gt;ckpt_path&lt;/code&gt; in &lt;code&gt;configs/*project.yaml&lt;/code&gt; to point to your downloaded first-stage model (see -&amp;gt;Training).&lt;/p&gt; &#xA;&lt;p&gt;Scene image generation can be run with &lt;code&gt;python scripts/make_scene_samples.py --outdir=/some/outdir -r /path/to/pretrained/model --resolution=512,512&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Training on custom data&lt;/h2&gt; &#xA;&lt;p&gt;Training on your own dataset can be beneficial to get better tokens and hence better images for your domain. Those are the steps to follow to make this work:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;install the repo with &lt;code&gt;conda env create -f environment.yaml&lt;/code&gt;, &lt;code&gt;conda activate taming&lt;/code&gt; and &lt;code&gt;pip install -e .&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;put your .jpg files in a folder &lt;code&gt;your_folder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;create 2 text files a &lt;code&gt;xx_train.txt&lt;/code&gt; and &lt;code&gt;xx_test.txt&lt;/code&gt; that point to the files in your training and test set respectively (for example &lt;code&gt;find $(pwd)/your_folder -name &#34;*.jpg&#34; &amp;gt; train.txt&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;adapt &lt;code&gt;configs/custom_vqgan.yaml&lt;/code&gt; to point to these 2 files&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;python main.py --base configs/custom_vqgan.yaml -t True --gpus 0,1&lt;/code&gt; to train on two GPUs. Use &lt;code&gt;--gpus 0,&lt;/code&gt; (with a trailing comma) to train on a single GPU.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Data Preparation&lt;/h2&gt; &#xA;&lt;h3&gt;ImageNet&lt;/h3&gt; &#xA;&lt;p&gt;The code will try to download (through &lt;a href=&#34;http://academictorrents.com/&#34;&gt;Academic Torrents&lt;/a&gt;) and prepare ImageNet the first time it is used. However, since ImageNet is quite large, this requires a lot of disk space and time. If you already have ImageNet on your disk, you can speed things up by putting the data into &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/&lt;/code&gt; (which defaults to &lt;code&gt;~/.cache/autoencoders/data/ILSVRC2012_{split}/data/&lt;/code&gt;), where &lt;code&gt;{split}&lt;/code&gt; is one of &lt;code&gt;train&lt;/code&gt;/&lt;code&gt;validation&lt;/code&gt;. It should have the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/&#xA;‚îú‚îÄ‚îÄ n01440764&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01440764_10026.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01440764_10027.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ ...&#xA;‚îú‚îÄ‚îÄ n01443537&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01443537_10007.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01443537_10014.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ ...&#xA;‚îú‚îÄ‚îÄ ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you haven&#39;t extracted the data, you can also place &lt;code&gt;ILSVRC2012_img_train.tar&lt;/code&gt;/&lt;code&gt;ILSVRC2012_img_val.tar&lt;/code&gt; (or symlinks to them) into &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_train/&lt;/code&gt; / &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_validation/&lt;/code&gt;, which will then be extracted into above structure without downloading it again. Note that this will only happen if neither a folder &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/&lt;/code&gt; nor a file &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/.ready&lt;/code&gt; exist. Remove them if you want to force running the dataset preparation again.&lt;/p&gt; &#xA;&lt;p&gt;You will then need to prepare the depth data using &lt;a href=&#34;https://github.com/intel-isl/MiDaS&#34;&gt;MiDaS&lt;/a&gt;. Create a symlink &lt;code&gt;data/imagenet_depth&lt;/code&gt; pointing to a folder with two subfolders &lt;code&gt;train&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt;, each mirroring the structure of the corresponding ImageNet folder described above and containing a &lt;code&gt;png&lt;/code&gt; file for each of ImageNet&#39;s &lt;code&gt;JPEG&lt;/code&gt; files. The &lt;code&gt;png&lt;/code&gt; encodes &lt;code&gt;float32&lt;/code&gt; depth values obtained from MiDaS as RGBA images. We provide the script &lt;code&gt;scripts/extract_depth.py&lt;/code&gt; to generate this data. &lt;strong&gt;Please note&lt;/strong&gt; that this script uses &lt;a href=&#34;https://pytorch.org/hub/intelisl_midas_v2/&#34;&gt;MiDaS via PyTorch Hub&lt;/a&gt;. When we prepared the data, the hub provided the &lt;a href=&#34;https://github.com/intel-isl/MiDaS/releases/tag/v2&#34;&gt;MiDaS v2.0&lt;/a&gt; version, but now it provides a v2.1 version. We haven&#39;t tested our models with depth maps obtained via v2.1 and if you want to make sure that things work as expected, you must adjust the script to make sure it explicitly uses &lt;a href=&#34;https://github.com/intel-isl/MiDaS/releases/tag/v2&#34;&gt;v2.0&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;CelebA-HQ&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/celebahq&lt;/code&gt; pointing to a folder containing the &lt;code&gt;.npy&lt;/code&gt; files of CelebA-HQ (instructions to obtain them can be found in the &lt;a href=&#34;https://github.com/tkarras/progressive_growing_of_gans&#34;&gt;PGGAN repository&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;FFHQ&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/ffhq&lt;/code&gt; pointing to the &lt;code&gt;images1024x1024&lt;/code&gt; folder obtained from the &lt;a href=&#34;https://github.com/NVlabs/ffhq-dataset&#34;&gt;FFHQ repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;S-FLCKR&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately, we are not allowed to distribute the images we collected for the S-FLCKR dataset and can therefore only give a description how it was produced. There are many resources on &lt;a href=&#34;https://github.com/adrianmrit/flickrdatasets&#34;&gt;collecting images from the web&lt;/a&gt; to get started. We collected sufficiently large images from &lt;a href=&#34;https://www.flickr.com&#34;&gt;flickr&lt;/a&gt; (see &lt;code&gt;data/flickr_tags.txt&lt;/code&gt; for a full list of tags used to find images) and various &lt;a href=&#34;https://www.reddit.com/r/sfwpornnetwork/wiki/network&#34;&gt;subreddits&lt;/a&gt; (see &lt;code&gt;data/subreddits.txt&lt;/code&gt; for all subreddits that were used). Overall, we collected 107625 images, and split them randomly into 96861 training images and 10764 validation images. We then obtained segmentation masks for each image using &lt;a href=&#34;https://arxiv.org/abs/1606.00915&#34;&gt;DeepLab v2&lt;/a&gt; trained on &lt;a href=&#34;https://arxiv.org/abs/1612.03716&#34;&gt;COCO-Stuff&lt;/a&gt;. We used a &lt;a href=&#34;https://github.com/kazuto1011/deeplab-pytorch&#34;&gt;PyTorch reimplementation&lt;/a&gt; and include an example script for this process in &lt;code&gt;scripts/extract_segmentation.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;COCO&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/coco&lt;/code&gt; containing the images from the 2017 split in &lt;code&gt;train2017&lt;/code&gt; and &lt;code&gt;val2017&lt;/code&gt;, and their annotations in &lt;code&gt;annotations&lt;/code&gt;. Files can be obtained from the &lt;a href=&#34;https://cocodataset.org/&#34;&gt;COCO webpage&lt;/a&gt;. In addition, we use the &lt;a href=&#34;http://calvin.inf.ed.ac.uk/wp-content/uploads/data/cocostuffdataset/stuffthingmaps_trainval2017.zip&#34;&gt;Stuff+thing PNG-style annotations on COCO 2017 trainval&lt;/a&gt; annotations from &lt;a href=&#34;https://github.com/nightrome/cocostuff&#34;&gt;COCO-Stuff&lt;/a&gt;, which should be placed under &lt;code&gt;data/cocostuffthings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ADE20k&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/ade20k_root&lt;/code&gt; containing the contents of &lt;a href=&#34;http://data.csail.mit.edu/places/ADEchallenge/ADEChallengeData2016.zip&#34;&gt;ADEChallengeData2016.zip&lt;/a&gt; from the &lt;a href=&#34;http://sceneparsing.csail.mit.edu/&#34;&gt;MIT Scene Parsing Benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training models&lt;/h2&gt; &#xA;&lt;h3&gt;FacesHQ&lt;/h3&gt; &#xA;&lt;p&gt;Train a VQGAN with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/faceshq_vqgan.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, adjust the checkpoint path of the config key &lt;code&gt;model.params.first_stage_config.params.ckpt_path&lt;/code&gt; in &lt;code&gt;configs/faceshq_transformer.yaml&lt;/code&gt; (or download &lt;a href=&#34;https://k00.fr/uxy5usa9&#34;&gt;2020-11-09T13-33-36_faceshq_vqgan&lt;/a&gt; and place into &lt;code&gt;logs&lt;/code&gt;, which corresponds to the preconfigured checkpoint path), then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/faceshq_transformer.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D-RIN&lt;/h3&gt; &#xA;&lt;p&gt;Train a VQGAN on ImageNet with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/imagenet_vqgan.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download a pretrained one from &lt;a href=&#34;https://k00.fr/u0j2dtac&#34;&gt;2020-09-23T17-56-33_imagenet_vqgan&lt;/a&gt; and place under &lt;code&gt;logs&lt;/code&gt;. If you trained your own, adjust the path in the config key &lt;code&gt;model.params.first_stage_config.params.ckpt_path&lt;/code&gt; of &lt;code&gt;configs/drin_transformer.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Train a VQGAN on Depth Maps of ImageNet with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/imagenetdepth_vqgan.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download a pretrained one from &lt;a href=&#34;https://k00.fr/55rlxs6i&#34;&gt;2020-11-03T15-34-24_imagenetdepth_vqgan&lt;/a&gt; and place under &lt;code&gt;logs&lt;/code&gt;. If you trained your own, adjust the path in the config key &lt;code&gt;model.params.cond_stage_config.params.ckpt_path&lt;/code&gt; of &lt;code&gt;configs/drin_transformer.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To train the transformer, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/drin_transformer.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Comparing Different First Stage Models&lt;/h3&gt; &#xA;&lt;p&gt;The reconstruction and compression capabilities of different fist stage models can be analyzed in this &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;colab notebook&lt;/a&gt;. In particular, the notebook compares two VQGANs with a downsampling factor of f=16 for each and codebook dimensionality of 1024 and 16384, a VQGAN with f=8 and 8192 codebook entries and the discrete autoencoder of OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;DALL-E&lt;/a&gt; (which has f=8 and 8192 codebook entries). &lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/first_stage_squirrels.png&#34; alt=&#34;firststages1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/first_stage_mushrooms.png&#34; alt=&#34;firststages2&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=o7dqGcLDf0A&amp;amp;feature=emb_imp_woyt&#34;&gt;video summary&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCbfYPyITQ-7l4upoX8nvctg&#34;&gt;Two Minute Papers&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=-wDSDtIAyWQ&#34;&gt;video summary&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/c/GradientDude/about&#34;&gt;Gradient Dude&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://wandb.ai/ayush-thakur/taming-transformer/reports/-Overview-Taming-Transformers-for-High-Resolution-Image-Synthesis---Vmlldzo0NjEyMTY&#34;&gt;weights and biases report summarizing the paper&lt;/a&gt; by &lt;a href=&#34;https://github.com/ayulockin&#34;&gt;ayulockin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=JfUTd8fjtX8&amp;amp;feature=emb_imp_woyt&#34;&gt;video summary&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCUzGQrN-lyyc0BWTYoJM_Sg&#34;&gt;What&#39;s AI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at &lt;a href=&#34;https://github.com/ak9250/taming-transformers/raw/master/tamingtransformerscolab.ipynb&#34;&gt;ak9250&#39;s notebook&lt;/a&gt; if you want to run the streamlit demos on Colab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Text-to-Image Optimization via CLIP&lt;/h3&gt; &#xA;&lt;p&gt;VQGAN has been successfully used as an image generator guided by the &lt;a href=&#34;https://github.com/openai/CLIP&#34;&gt;CLIP&lt;/a&gt; model, both for pure image generation from scratch and image-to-image translation. We recommend the following notebooks/videos/resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/advadnoun/status/1389316507134357506&#34;&gt;Advadnouns&lt;/a&gt; Patreon and corresponding LatentVision notebooks: &lt;a href=&#34;https://www.patreon.com/patronizeme&#34;&gt;https://www.patreon.com/patronizeme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://colab.research.google.com/drive/1L8oL-vLJXVcRzCFbPwOoMkPKJ8-aYdPN&#34;&gt;notebook&lt;/a&gt; of &lt;a href=&#34;https://twitter.com/RiversHaveWings&#34;&gt;Rivers Have Wings&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=90QDe6DQXF4&amp;amp;t=12s&#34;&gt;video&lt;/a&gt; explanation by &lt;a href=&#34;https://www.youtube.com/channel/UCy5znSnfMsDwaLlROnZ7Qbg&#34;&gt;Dot CSV&lt;/a&gt; (in Spanish, but English subtitles are available)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/birddrawnbyachild.png&#34; alt=&#34;txt2img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Text prompt: &lt;em&gt;&#39;A bird drawn by a child&#39;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Shout-outs&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who makes their code and models available. In particular,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The architecture of our VQGAN is inspired by &lt;a href=&#34;https://github.com/hojonathanho/diffusion&#34;&gt;Denoising Diffusion Probabilistic Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The very hackable transformer implementation &lt;a href=&#34;https://github.com/karpathy/minGPT&#34;&gt;minGPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The good ol&#39; &lt;a href=&#34;https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix&#34;&gt;PatchGAN&lt;/a&gt; and &lt;a href=&#34;https://github.com/richzhang/PerceptualSimilarity&#34;&gt;Learned Perceptual Similarity (LPIPS)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{esser2020taming,&#xA;      title={Taming Transformers for High-Resolution Image Synthesis}, &#xA;      author={Patrick Esser and Robin Rombach and Bj√∂rn Ommer},&#xA;      year={2020},&#xA;      eprint={2012.09841},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/tacotron2</title>
    <updated>2022-07-20T01:43:23Z</updated>
    <id>tag:github.com,2022-07-20:/NVIDIA/tacotron2</id>
    <link href="https://github.com/NVIDIA/tacotron2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tacotron 2 - PyTorch implementation with faster-than-realtime inference&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tacotron 2 (without wavenet)&lt;/h1&gt; &#xA;&lt;p&gt;PyTorch implementation of &lt;a href=&#34;https://arxiv.org/pdf/1712.05884.pdf&#34;&gt;Natural TTS Synthesis By Conditioning Wavenet On Mel Spectrogram Predictions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This implementation includes &lt;strong&gt;distributed&lt;/strong&gt; and &lt;strong&gt;automatic mixed precision&lt;/strong&gt; support and uses the &lt;a href=&#34;https://keithito.com/LJ-Speech-Dataset/&#34;&gt;LJSpeech dataset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Distributed and Automatic Mixed Precision support relies on NVIDIA&#39;s &lt;a href=&#34;https://github.com/nvidia/apex&#34;&gt;Apex&lt;/a&gt; and &lt;a href=&#34;https://github.com/NVIDIA/apex/tree/master/apex/amp&#34;&gt;AMP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;https://nv-adlr.github.io/WaveGlow&#34;&gt;website&lt;/a&gt; for audio samples using our published &lt;a href=&#34;https://drive.google.com/file/d/1c5ZTuT7J08wLUoVZ2KkUs_VdZuJ86ZqA/view?usp=sharing&#34;&gt;Tacotron 2&lt;/a&gt; and &lt;a href=&#34;https://drive.google.com/open?id=1rpK8CzAAirq9sWZhe9nlfvxMF1dRgFbF&#34;&gt;WaveGlow&lt;/a&gt; models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIA/tacotron2/master/tensorboard.png&#34; alt=&#34;Alignment, Predicted Mel Spectrogram, Target Mel Spectrogram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pre-requisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;NVIDIA GPU + CUDA cuDNN&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and extract the &lt;a href=&#34;https://keithito.com/LJ-Speech-Dataset/&#34;&gt;LJ Speech dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo: &lt;code&gt;git clone https://github.com/NVIDIA/tacotron2.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;CD into this repo: &lt;code&gt;cd tacotron2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Initialize submodule: &lt;code&gt;git submodule init; git submodule update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update .wav paths: &lt;code&gt;sed -i -- &#39;s,DUMMY,ljs_dataset_folder/wavs,g&#39; filelists/*.txt&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alternatively, set &lt;code&gt;load_mel_from_disk=True&lt;/code&gt; in &lt;code&gt;hparams.py&lt;/code&gt; and update mel-spectrogram paths&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/pytorch/pytorch#installation&#34;&gt;PyTorch 1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/nvidia/apex&#34;&gt;Apex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install python requirements or build docker image &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install python requirements: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;python train.py --output_directory=outdir --log_directory=logdir&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(OPTIONAL) &lt;code&gt;tensorboard --logdir=outdir/logdir&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Training using a pre-trained model&lt;/h2&gt; &#xA;&lt;p&gt;Training using a pre-trained model can lead to faster convergence&lt;br&gt; By default, the dataset dependent text embedding layers are &lt;a href=&#34;https://github.com/NVIDIA/tacotron2/raw/master/hparams.py#L22&#34;&gt;ignored&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download our published &lt;a href=&#34;https://drive.google.com/file/d/1c5ZTuT7J08wLUoVZ2KkUs_VdZuJ86ZqA/view?usp=sharing&#34;&gt;Tacotron 2&lt;/a&gt; model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python train.py --output_directory=outdir --log_directory=logdir -c tacotron2_statedict.pt --warm_start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Multi-GPU (distributed) and Automatic Mixed Precision Training&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;python -m multiproc train.py --output_directory=outdir --log_directory=logdir --hparams=distributed_run=True,fp16_run=True&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Inference demo&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download our published &lt;a href=&#34;https://drive.google.com/file/d/1c5ZTuT7J08wLUoVZ2KkUs_VdZuJ86ZqA/view?usp=sharing&#34;&gt;Tacotron 2&lt;/a&gt; model&lt;/li&gt; &#xA; &lt;li&gt;Download our published &lt;a href=&#34;https://drive.google.com/open?id=1rpK8CzAAirq9sWZhe9nlfvxMF1dRgFbF&#34;&gt;WaveGlow&lt;/a&gt; model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jupyter notebook --ip=127.0.0.1 --port=31337&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Load inference.ipynb&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;N.b. When performing Mel-Spectrogram to Audio synthesis, make sure Tacotron 2 and the Mel decoder were trained on the same mel-spectrogram representation.&lt;/p&gt; &#xA;&lt;h2&gt;Related repos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NVIDIA/WaveGlow&#34;&gt;WaveGlow&lt;/a&gt; Faster than real time Flow-based Generative Network for Speech Synthesis&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NVIDIA/nv-wavenet/&#34;&gt;nv-wavenet&lt;/a&gt; Faster than real time WaveNet.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This implementation uses code from the following repos: &lt;a href=&#34;https://github.com/keithito/tacotron/&#34;&gt;Keith Ito&lt;/a&gt;, &lt;a href=&#34;https://github.com/pseeth/pytorch-stft&#34;&gt;Prem Seetharaman&lt;/a&gt; as described in our code.&lt;/p&gt; &#xA;&lt;p&gt;We are inspired by &lt;a href=&#34;https://github.com/r9y9/tacotron_pytorch&#34;&gt;Ryuchi Yamamoto&#39;s&lt;/a&gt; Tacotron PyTorch implementation.&lt;/p&gt; &#xA;&lt;p&gt;We are thankful to the Tacotron 2 paper authors, specially Jonathan Shen, Yuxuan Wang and Zongheng Yang.&lt;/p&gt;</summary>
  </entry>
</feed>