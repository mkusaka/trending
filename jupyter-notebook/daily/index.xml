<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-08T01:36:06Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cfahlgren1/natural-sql</title>
    <updated>2024-02-08T01:36:06Z</updated>
    <id>tag:github.com,2024-02-08:/cfahlgren1/natural-sql</id>
    <link href="https://github.com/cfahlgren1/natural-sql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A series of top performing Text to SQL LLMs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NaturalSQL by ChatDB&lt;/h1&gt; &#xA;&lt;p&gt;NaturalSQL by &lt;a href=&#34;https://chatdb.ai&#34;&gt;ChatDB&lt;/a&gt; is a series of models with state-of-the-art performance on Text to SQL instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/chatdb/natural-sql-7b&#34;&gt;HuggingFace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introducing NaturalSQL-7B&lt;/h2&gt; &#xA;&lt;h4&gt;Percentage of Correct SQL Queries on Novel Schemas&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Big thanks to the folks at Defog for open sourcing the &lt;a href=&#34;https://github.com/defog-ai/sql-eval&#34;&gt;SQL-Eval&lt;/a&gt; framework&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn-uploads.huggingface.co/production/uploads/648a374f00f7a3374ee64b99/5ynfoKPzI3_-WasQQt7qR.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;NaturalSQL-7B is the leading model for it&#39;s size, benchmarked on SQL-Eval.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; &lt;code&gt;Determine the customer with the largest total order value last month, and list all the products and their quantities they ordered.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;WITH&#xA;  LastMonthOrders AS (&#xA;    SELECT&#xA;      o.customerid,&#xA;      o.orderid,&#xA;      op.productid,&#xA;      op.quantity,&#xA;      p.productname,&#xA;      op.quantity * p.unitprice AS total_order_value&#xA;    FROM&#xA;      orders o&#xA;      JOIN order_details op ON o.orderid = op.orderid&#xA;      JOIN products p ON op.productid = p.productid&#xA;    WHERE&#xA;      o.orderdate &amp;gt;= date_trunc(&#39;month&#39;, CURRENT_DATE) - INTERVAL &#39;1 month&#39;&#xA;      AND o.orderdate &amp;lt; date_trunc(&#39;month&#39;, CURRENT_DATE)&#xA;  ),&#xA;  CustomerTotalOrderValue AS (&#xA;    SELECT&#xA;      customerid,&#xA;      SUM(total_order_value) AS total_value&#xA;    FROM&#xA;      LastMonthOrders&#xA;    GROUP BY&#xA;      customerid&#xA;    ORDER BY&#xA;      total_value DESC&#xA;    LIMIT&#xA;      1&#xA;  )&#xA;SELECT&#xA;  c.customerid,&#xA;  c.companyname,&#xA;  lm.productid,&#xA;  lm.productname,&#xA;  lm.quantity&#xA;FROM&#xA;  CustomerTotalOrderValue ctov&#xA;  JOIN LastMonthOrders lm ON ctov.customerid = lm.customerid&#xA;  JOIN customers c ON c.customerid = lm.customerid;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NaturalQuery performs really well with subqueries, ratios, and complex questions like above.&lt;/p&gt;</summary>
  </entry>
</feed>