<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:35:29Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy</title>
    <updated>2023-10-22T01:35:29Z</updated>
    <id>tag:github.com,2023-10-22:/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy</id>
    <link href="https://github.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Providing the solutions for high-frequency trading (HFT) strategies using data science approaches (Machine Learning) on Full Orderbook Tick Data.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Modeling High-Frequency Limit Order Book Dynamics Using Machine Learning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Framework to capture the dynamics of high-frequency limit order books.&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy/master/Graph/pipline.png&#34; width=&#34;650&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Overview&lt;/h4&gt; &#xA;&lt;p&gt;In this project I used machine learning methods to capture the high-frequency limit order book dynamics and simple trading strategy to get the P&amp;amp;L outcomes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Feature Extractor&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Rise Ratio&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy/master/Graph/Price_B1A1.png&#34; width=&#34;650&#34;&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Depth Ratio&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy/master/Graph/depth.png&#34; width=&#34;650&#34;&gt; &lt;p&gt;[Note] : [Feature_Selection] (Feature_Selection)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Learning Model Trainer&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RandomForestClassifier&lt;/li&gt; &#xA;   &lt;li&gt;ExtraTreesClassifier&lt;/li&gt; &#xA;   &lt;li&gt;AdaBoostClassifier&lt;/li&gt; &#xA;   &lt;li&gt;GradientBoostingClassifier&lt;/li&gt; &#xA;   &lt;li&gt;SVM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use best model to predict next 10 seconds&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy/master/Graph/CV_Best_Model.png&#34; width=&#34;650&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prediction outcome&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy/master/Graph/prediction.png&#34; width=&#34;650&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Profit &amp;amp; Loss&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy/master/Graph/P_L.png&#34; width=&#34;650&#34;&gt; &lt;p&gt;[Note] : [Model_Selection] (Model_Selection)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/brax</title>
    <updated>2023-10-22T01:35:29Z</updated>
    <id>tag:github.com,2023-10-22:/google/brax</id>
    <link href="https://github.com/google/brax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Massively parallel rigidbody physics simulation on accelerator hardware.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/google/brax/raw/main/docs/img/brax_logo.gif&#34; width=&#34;336&#34; height=&#34;80&#34; alt=&#34;BRAX&#34;&gt; &#xA;&lt;p&gt;Brax is a fast and fully differentiable physics engine used for research and development of robotics, human perception, materials science, reinforcement learning, and other simulation-heavy applications.&lt;/p&gt; &#xA;&lt;p&gt;Brax is written in &lt;a href=&#34;https://github.com/google/jax&#34;&gt;JAX&lt;/a&gt; and is designed for use on acceleration hardware. It is both efficient for single-device simulation, and scalable to massively parallel simulation on multiple devices, without the need for pesky datacenters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/brax/raw/main/docs/img/humanoid_v2.gif&#34; width=&#34;160&#34; height=&#34;160&#34;&gt;&lt;img src=&#34;https://github.com/google/brax/raw/main/docs/img/a1.gif&#34; width=&#34;160&#34; height=&#34;160&#34;&gt;&lt;img src=&#34;https://github.com/google/brax/raw/main/docs/img/ant_v2.gif&#34; width=&#34;160&#34; height=&#34;160&#34;&gt;&lt;img src=&#34;https://github.com/google/brax/raw/main/docs/img/ur5e.gif&#34; width=&#34;160&#34; height=&#34;160&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Brax simulates environments at millions of physics steps per second on TPU, and includes a suite of learning algorithms that train agents in seconds to minutes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Baseline learning algorithms such as &lt;a href=&#34;https://github.com/google/brax/raw/main/brax/training/agents/ppo&#34;&gt;PPO&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/brax/raw/main/brax/training/agents/sac&#34;&gt;SAC&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/brax/raw/main/brax/training/agents/ars&#34;&gt;ARS&lt;/a&gt;, and &lt;a href=&#34;https://github.com/google/brax/raw/main/brax/training/agents/es&#34;&gt;evolutionary strategies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learning algorithms that leverage the differentiability of the simulator, such as &lt;a href=&#34;https://github.com/google/brax/raw/main/brax/training/agents/apg&#34;&gt;analytic policy gradients&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;One API, Three Pipelines&lt;/h2&gt; &#xA;&lt;p&gt;Brax offers three distinct physics pipelines that are easy to swap:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/google/brax/raw/main/brax/v2/generalized/&#34;&gt;Generalized&lt;/a&gt; calculates motion in &lt;a href=&#34;https://en.wikipedia.org/wiki/Generalized_coordinates&#34;&gt;generalized coordinates&lt;/a&gt; using the same accurate robot dynamics algorithms as &lt;a href=&#34;https://mujoco.org/&#34;&gt;MuJoCo&lt;/a&gt; and &lt;a href=&#34;https://github.com/erwincoumans/tiny-differentiable-simulator&#34;&gt;TDS&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;NOTE: We plan to import &lt;a href=&#34;https://mujoco.readthedocs.io/en/stable/mjx.html&#34;&gt;MuJoCo XLA - MJX&lt;/a&gt; as another physics backend, eventually replacing &lt;code&gt;generalized&lt;/code&gt;. Check out our recent &lt;a href=&#34;https://github.com/google/brax/discussions/409&#34;&gt;announcement&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/google/brax/raw/main/brax/v2/positional/&#34;&gt;Positional&lt;/a&gt; uses &lt;a href=&#34;https://matthias-research.github.io/pages/publications/posBasedDyn.pdf&#34;&gt;Position Based Dynamics&lt;/a&gt;, a fast but stable method of resolving joint and collision constraints.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/google/brax/raw/main/brax/v2/spring/&#34;&gt;Spring&lt;/a&gt; provides fast and cheap simulation for rapid experimentation, using simple impulse-based methods often found in video games.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These pipelines share the same API and can run side-by-side within the same simulation. This makes Brax well suited for experiments in transfer learning and closing the gap between simulation and the real world.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart: Colab in the Cloud&lt;/h2&gt; &#xA;&lt;p&gt;Explore Brax easily and quickly through a series of colab notebooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/brax/blob/main/notebooks/basics.ipynb&#34;&gt;Brax Basics&lt;/a&gt; introduces the Brax API, and shows how to simulate basic physics primitives.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/brax/blob/main/notebooks/training.ipynb&#34;&gt;Brax Training&lt;/a&gt; introduces Brax&#39;s training algorithms, and lets you train your own policies directly within the colab. It also demonstrates loading and saving policies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.sandbox.google.com/github/google-deepmind/mujoco/blob/main/mjx/tutorial.ipynb&#34;&gt;Brax Training with MuJoCo XLA - MJX&lt;/a&gt; demonstrates training in Brax using the &lt;code&gt;MJX&lt;/code&gt; physics simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/brax/blob/main/notebooks/training_torch.ipynb&#34;&gt;Brax Training with PyTorch on GPU&lt;/a&gt; demonstrates how Brax can be used in other ML frameworks for fast training, in this case PyTorch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Brax Locally&lt;/h2&gt; &#xA;&lt;p&gt;To install Brax from pypi, install it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv env&#xA;source env/bin/activate&#xA;pip install --upgrade pip&#xA;pip install brax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also install from &lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;Conda&lt;/a&gt; or &lt;a href=&#34;https://github.com/mamba-org/mamba&#34;&gt;Mamba&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge brax  # s/conda/mamba for mamba&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, to install Brax from source, clone this repo, &lt;code&gt;cd&lt;/code&gt; to it, and then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv env&#xA;source env/bin/activate&#xA;pip install --upgrade pip&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To train a model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;learn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Training on NVidia GPU is supported, but you must first install &lt;a href=&#34;https://github.com/google/jax#installation&#34;&gt;CUDA, CuDNN, and JAX with GPU support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;For a deep dive into Brax&#39;s design and performance characteristics, please see our paper, &lt;a href=&#34;https://arxiv.org/abs/2106.13281&#34;&gt;Brax -- A Differentiable Physics Engine for Large Scale Rigid Body Simulation &lt;/a&gt;, which appeared in the &lt;a href=&#34;https://neurips.cc/Conferences/2021/CallForDatasetsBenchmarks&#34;&gt;Datasets and Benchmarks Track&lt;/a&gt; at &lt;a href=&#34;https://nips.cc/Conferences/2021&#34;&gt;NeurIPS 2021&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citing Brax&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to reference Brax in a publication, please use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{brax2021github,&#xA;  author = {C. Daniel Freeman and Erik Frey and Anton Raichuk and Sertan Girgin and Igor Mordatch and Olivier Bachem},&#xA;  title = {Brax - A Differentiable Physics Engine for Large Scale Rigid Body Simulation},&#xA;  url = {http://github.com/google/brax},&#xA;  version = {0.9.3},&#xA;  year = {2021},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Brax has come a long way since its original publication. We offer gratitude and effusive praise to the following people:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manu Orsini and Nikola Momchev who provided a major refactor of Brax&#39;s training algorithms to make them more accessible and reusable.&lt;/li&gt; &#xA; &lt;li&gt;Erwin Coumans who has graciously offered advice and mentorship, and many useful references from &lt;a href=&#34;https://github.com/erwincoumans/tiny-differentiable-simulator&#34;&gt;Tiny Differentiable Simulator&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Baruch Tabanpour, a colleague who helped launch brax v2 and overhauled the contact library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sites.google.com/corp/view/gugurus&#34;&gt;Shixiang Shane Gu&lt;/a&gt; and &lt;a href=&#34;https://frt03.github.io/&#34;&gt;Hiroki Furuta&lt;/a&gt;, who contributed BIG-Gym and Braxlines, and a scene composer to Brax.&lt;/li&gt; &#xA; &lt;li&gt;Our awesome &lt;a href=&#34;https://github.com/google/brax/graphs/contributors&#34;&gt;open source collaborators and contributors&lt;/a&gt;. Thank you!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>