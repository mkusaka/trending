<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-18T01:29:52Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hunkim/SolarLLMZeroToAll</title>
    <updated>2024-05-18T01:29:52Z</updated>
    <id>tag:github.com,2024-05-18:/hunkim/SolarLLMZeroToAll</id>
    <link href="https://github.com/hunkim/SolarLLMZeroToAll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full Stack SolarLLM Zero to All&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SolarLLMZeroToAll&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunkim/SolarLLMZeroToAll/main/figures/overview.png&#34; alt=&#34;Overview&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZiyaoLi/fast-kan</title>
    <updated>2024-05-18T01:29:52Z</updated>
    <id>tag:github.com,2024-05-18:/ZiyaoLi/fast-kan</id>
    <link href="https://github.com/ZiyaoLi/fast-kan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FastKAN: Very Fast Implementation of Kolmogorov-Arnold Networks (KAN)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FastKAN: Very Fast Implementation (Approximation) of Kolmogorov-Arnold Network&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Work in progress&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a very fast implementation of Kolmogorov-Arnold Network (KAN). The forward time of FaskKAN is 3.33x faster than &lt;a href=&#34;https://github.com/Blealtan/efficient-kan&#34;&gt;efficient KAN&lt;/a&gt;, and the implementation is a LOT easier.&lt;/p&gt; &#xA;&lt;p&gt;The original implementation of KAN is &lt;a href=&#34;https://github.com/KindXiaoming/pykan&#34;&gt;pykan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;One can install fast-kan via pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ZiyaoLi/fast-kan&#xA;cd fast-kan&#xA;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run an example training of FastKAN network on MNIST:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python examples/train_mnist.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What FastKAN Does&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Used Gaussian Radial Basis Functions to approximate the B-spline basis, which is the bottleneck of KAN and efficient KAN:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;$$b_{i}(u)=\exp\left(-\left(\frac{u-u_i}{h}\right)^2\right)$$&lt;/p&gt; &#xA;&lt;p&gt;The rationale of doing so is that these RBF functions well approximate the B-spline basis (up to a linear transformation) and are very easy to calculate (as long as the grids are uniform). Results are shown in the figure below (code in &lt;a href=&#34;https://raw.githubusercontent.com/ZiyaoLi/fast-kan/master/notebooks/draw_spline_basis.ipynb&#34;&gt;notebook&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiyaoLi/fast-kan/master/img/compare_basis.png&#34; alt=&#34;RBF well approximates 3-order B-spline basis.&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Used LayerNorm to scale inputs to the range of spline grids, so there is no need to adjust the grids.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FastKAN is 3.33x compared with efficient_kan in forward speed. (see &lt;a href=&#34;https://raw.githubusercontent.com/ZiyaoLi/fast-kan/master/notebooks/test_running_time.ipynb&#34;&gt;notebook&lt;/a&gt;, 742us -&amp;gt; 223us on V100)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Accuracy on MNIST is equivalent / slightly improved.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiyaoLi/fast-kan/master/img/val_curves.png&#34; alt=&#34;Validation accuracy across different training epochs on MNIST&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;More importantly, the approximation made in FastKAN suggests that KAN is equivalent to a certain RBF Network. This finding bridges between RBF Networks and KANs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Cite This Work&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2024 Li, Ziyao. Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{li2024kolmogorovarnold,&#xA;      title={Kolmogorov-Arnold Networks are Radial Basis Function Networks}, &#xA;      author={Ziyao Li},&#xA;      year={2024},&#xA;      eprint={2405.06721},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>