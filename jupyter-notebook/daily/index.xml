<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-25T01:43:37Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marceloprates/prettymaps</title>
    <updated>2022-06-25T01:43:37Z</updated>
    <id>tag:github.com,2022-06-25:/marceloprates/prettymaps</id>
    <link href="https://github.com/marceloprates/prettymaps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small set of Python functions to draw pretty maps from OpenStreetMap data. Based on osmnx, matplotlib and shapely libraries.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;prettymaps&lt;/h1&gt; &#xA;&lt;p&gt;A minimal Python library to draw customized maps from &lt;a href=&#34;https://www.openstreetmap.org/#map=12/11.0733/106.3078&#34;&gt;OpenStreetMap&lt;/a&gt; created using the &lt;a href=&#34;https://github.com/gboeing/osmnx&#34;&gt;osmnx&lt;/a&gt;, &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt;, &lt;a href=&#34;https://shapely.readthedocs.io/en/stable/index.html&#34;&gt;shapely&lt;/a&gt; and &lt;a href=&#34;https://github.com/abey79/vsketch&#34;&gt;vsketch&lt;/a&gt; libraries.&lt;/p&gt; &#xA;&lt;p&gt;This work is &lt;a href=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/LICENSE&#34;&gt;licensed&lt;/a&gt; under a GNU Affero General Public License v3.0 (you can make commercial use, distribute and modify this project, but must &lt;strong&gt;disclose&lt;/strong&gt; the source code with the license and copyright notice)&lt;/p&gt; &#xA;&lt;h2&gt;Note about crediting and NFTs:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please keep the printed message on the figures crediting my repository and OpenStreetMap (&lt;a href=&#34;https://www.openstreetmap.org/copyright&#34;&gt;mandatory by their license&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;I am personally &lt;strong&gt;against&lt;/strong&gt; NFTs for their &lt;a href=&#34;https://earth.org/nfts-environmental-impact/&#34;&gt;environmental impact&lt;/a&gt;, the fact that they&#39;re a &lt;a href=&#34;https://twitter.com/smdiehl/status/1445795667826208770&#34;&gt;giant money-laundering pyramid scheme&lt;/a&gt; and the structural incentives they create for &lt;a href=&#34;https://twitter.com/NFTtheft&#34;&gt;theft&lt;/a&gt; in the open source and generative art communities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I do not authorize in any way this project to be used for selling NFTs&lt;/strong&gt;, although I cannot legally enforce it. &lt;strong&gt;Respect the creator&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://magiceden.io/marketplace/aeterna_civitas&#34;&gt;AeternaCivitas&lt;/a&gt; and &lt;a href=&#34;https://www.geo-nft.com/&#34;&gt;geoartnft&lt;/a&gt; projects have used this work to sell NFTs and refused to credit it. See how they reacted after being exposed: &lt;a href=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/etc/NFT_theft_AeternaCivitas.jpg&#34;&gt;AeternaCivitas&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/etc/NFT_theft_geoart.jpg&#34;&gt;geoartnft&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I have closed my other generative art projects on Github and won&#39;t be sharing new ones as open source to protect me from the NFT community&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/marceloprates_&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://cdn.ko-fi.com/cdn/kofi1.png?v=3&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;As seen on &lt;a href=&#34;https://web.archive.org/web/20210825160918/https://news.ycombinator.com/news&#34;&gt;Hacker News&lt;/a&gt;:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/prints/hackernews-prettymaps.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Read the &lt;a href=&#34;https://prettymaps.readthedocs.io/en/latest/prettymaps.html#module-prettymaps&#34;&gt;docs&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.reddit.com/r/prettymaps_/&#34;&gt;prettymaps subreddit&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://colab.research.google.com/github/marceloprates/prettymaps/blob/master/notebooks/examples.ipynb&#34;&gt;Google Colaboratory Demo&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;PIP&lt;/h3&gt; &#xA;&lt;p&gt;Install with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install prettymaps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://aur.archlinux.org/packages/python-prettymaps/&#34;&gt;AUR&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yay -S python-prettymaps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage example (For more examples, see &lt;a href=&#34;https://nbviewer.jupyter.org/github/marceloprates/prettymaps/blob/main/notebooks/examples.ipynb&#34;&gt;this Jupyter Notebook&lt;/a&gt;):&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Init matplotlib figure&#xA;fig, ax = plt.subplots(figsize = (12, 12), constrained_layout = True)&#xA;&#xA;backup = plot(&#xA;    # Address:&#xA;    &#39;Pra√ßa Ferreira do Amaral, Macau&#39;,&#xA;    # Plot geometries in a circle of radius:&#xA;    radius = 1100,&#xA;    # Matplotlib axis&#xA;    ax = ax,&#xA;    # Which OpenStreetMap layers to plot and their parameters:&#xA;    layers = {&#xA;            # Perimeter (in this case, a circle)&#xA;            &#39;perimeter&#39;: {},&#xA;            # Streets and their widths&#xA;            &#39;streets&#39;: {&#xA;                &#39;width&#39;: {&#xA;                    &#39;motorway&#39;: 5,&#xA;                    &#39;trunk&#39;: 5,&#xA;                    &#39;primary&#39;: 4.5,&#xA;                    &#39;secondary&#39;: 4,&#xA;                    &#39;tertiary&#39;: 3.5,&#xA;                    &#39;residential&#39;: 3,&#xA;                    &#39;service&#39;: 2,&#xA;                    &#39;unclassified&#39;: 2,&#xA;                    &#39;pedestrian&#39;: 2,&#xA;                    &#39;footway&#39;: 1,&#xA;                }&#xA;            },&#xA;            # Other layers:&#xA;            #   Specify a name (for example, &#39;building&#39;) and which OpenStreetMap tags to fetch&#xA;            &#39;building&#39;: {&#39;tags&#39;: {&#39;building&#39;: True, &#39;landuse&#39;: &#39;construction&#39;}, &#39;union&#39;: False},&#xA;            &#39;water&#39;: {&#39;tags&#39;: {&#39;natural&#39;: [&#39;water&#39;, &#39;bay&#39;]}},&#xA;            &#39;green&#39;: {&#39;tags&#39;: {&#39;landuse&#39;: &#39;grass&#39;, &#39;natural&#39;: [&#39;island&#39;, &#39;wood&#39;], &#39;leisure&#39;: &#39;park&#39;}},&#xA;            &#39;forest&#39;: {&#39;tags&#39;: {&#39;landuse&#39;: &#39;forest&#39;}},&#xA;            &#39;parking&#39;: {&#39;tags&#39;: {&#39;amenity&#39;: &#39;parking&#39;, &#39;highway&#39;: &#39;pedestrian&#39;, &#39;man_made&#39;: &#39;pier&#39;}}&#xA;        },&#xA;        # drawing_kwargs:&#xA;        #   Reference a name previously defined in the &#39;layers&#39; argument and specify matplotlib parameters to draw it&#xA;        drawing_kwargs = {&#xA;            &#39;background&#39;: {&#39;fc&#39;: &#39;#F2F4CB&#39;, &#39;ec&#39;: &#39;#dadbc1&#39;, &#39;hatch&#39;: &#39;ooo...&#39;, &#39;zorder&#39;: -1},&#xA;            &#39;perimeter&#39;: {&#39;fc&#39;: &#39;#F2F4CB&#39;, &#39;ec&#39;: &#39;#dadbc1&#39;, &#39;lw&#39;: 0, &#39;hatch&#39;: &#39;ooo...&#39;,  &#39;zorder&#39;: 0},&#xA;            &#39;green&#39;: {&#39;fc&#39;: &#39;#D0F1BF&#39;, &#39;ec&#39;: &#39;#2F3737&#39;, &#39;lw&#39;: 1, &#39;zorder&#39;: 1},&#xA;            &#39;forest&#39;: {&#39;fc&#39;: &#39;#64B96A&#39;, &#39;ec&#39;: &#39;#2F3737&#39;, &#39;lw&#39;: 1, &#39;zorder&#39;: 1},&#xA;            &#39;water&#39;: {&#39;fc&#39;: &#39;#a1e3ff&#39;, &#39;ec&#39;: &#39;#2F3737&#39;, &#39;hatch&#39;: &#39;ooo...&#39;, &#39;hatch_c&#39;: &#39;#85c9e6&#39;, &#39;lw&#39;: 1, &#39;zorder&#39;: 2},&#xA;            &#39;parking&#39;: {&#39;fc&#39;: &#39;#F2F4CB&#39;, &#39;ec&#39;: &#39;#2F3737&#39;, &#39;lw&#39;: 1, &#39;zorder&#39;: 3},&#xA;            &#39;streets&#39;: {&#39;fc&#39;: &#39;#2F3737&#39;, &#39;ec&#39;: &#39;#475657&#39;, &#39;alpha&#39;: 1, &#39;lw&#39;: 0, &#39;zorder&#39;: 3},&#xA;            &#39;building&#39;: {&#39;palette&#39;: [&#39;#FFC857&#39;, &#39;#E9724C&#39;, &#39;#C5283D&#39;], &#39;ec&#39;: &#39;#2F3737&#39;, &#39;lw&#39;: .5, &#39;zorder&#39;: 4},&#xA;        }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/prints/macao.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Gallery:&lt;/h2&gt; &#xA;&lt;h3&gt;Barcelona:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/prints/barcelona.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Heerhugowaard:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/prints/heerhugowaard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Barra da Tijuca:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/prints/tijuca.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Porto Alegre:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marceloprates/prettymaps/main/prints/bomfim-farroupilha-cidadebaixa.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cocodataset/cocoapi</title>
    <updated>2022-06-25T01:43:37Z</updated>
    <id>tag:github.com,2022-06-25:/cocodataset/cocoapi</id>
    <link href="https://github.com/cocodataset/cocoapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;COCO API - Dataset @ http://cocodataset.org/&lt;/p&gt;&lt;hr&gt;&lt;p&gt;COCO API - &lt;a href=&#34;http://cocodataset.org/&#34;&gt;http://cocodataset.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;COCO is a large image dataset designed for object detection, segmentation, person keypoints detection, stuff segmentation, and caption generation. This package provides Matlab, Python, and Lua APIs that assists in loading, parsing, and visualizing the annotations in COCO. Please visit &lt;a href=&#34;http://cocodataset.org/&#34;&gt;http://cocodataset.org/&lt;/a&gt; for more information on COCO, including for the data, paper, and tutorials. The exact format of the annotations is also described on the COCO website. The Matlab and Python APIs are complete, the Lua API provides only basic functionality.&lt;/p&gt; &#xA;&lt;p&gt;In addition to this API, please download both the COCO images and annotations in order to run the demos and use the API. Both are available on the project website. -Please download, unzip, and place the images in: coco/images/ -Please download and place the annotations in: coco/annotations/ For substantially more details on the API please see &lt;a href=&#34;http://cocodataset.org/#download&#34;&gt;http://cocodataset.org/#download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After downloading the images and annotations, run the Matlab, Python, or Lua demos for example usage.&lt;/p&gt; &#xA;&lt;p&gt;To install: -For Matlab, add coco/MatlabApi to the Matlab path (OSX/Linux binaries provided) -For Python, run &#34;make&#34; under coco/PythonAPI -For Lua, run ‚Äúluarocks make LuaAPI/rocks/coco-scm-1.rockspec‚Äù under coco/&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>codebasics/data-structures-algorithms-python</title>
    <updated>2022-06-25T01:43:37Z</updated>
    <id>tag:github.com,2022-06-25:/codebasics/data-structures-algorithms-python</id>
    <link href="https://github.com/codebasics/data-structures-algorithms-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This tutorial playlist covers data structures and algorithms in python. Every tutorial has theory behind data structure or an algorithm, BIG O Complexity analysis and exercises that you can practice on.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data Structure &amp;amp; Algorithms using Python&lt;/h1&gt; &#xA;&lt;p&gt;This tutorial covers data structures and algorithms in python. Every tutorial has theory behind data structure or an algorithm, BIG O Complexity analysis and exercises that you can practice on.&lt;/p&gt; &#xA;&lt;p&gt;To watch the videos, you can go check the playlist out at: &lt;a href=&#34;https://www.youtube.com/playlist?list=PLeo1K3hjS3uu_n_a__MI_KktGTLYopZ12&#34;&gt;https://www.youtube.com/playlist?list=PLeo1K3hjS3uu_n_a__MI_KktGTLYopZ12&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To subscribe to codebasics youtube channel: &lt;a href=&#34;https://www.youtube.com/c/codebasics&#34;&gt;https://www.youtube.com/c/codebasics&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>