<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:47:45Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sentdex/BLOOM_Examples</title>
    <updated>2022-08-17T01:47:45Z</updated>
    <id>tag:github.com,2022-08-17:/Sentdex/BLOOM_Examples</id>
    <link href="https://github.com/Sentdex/BLOOM_Examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some quick BLOOM LLM examples&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>skorch-dev/skorch</title>
    <updated>2022-08-17T01:47:45Z</updated>
    <id>tag:github.com,2022-08-17:/skorch-dev/skorch</id>
    <link href="https://github.com/skorch-dev/skorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scikit-learn compatible neural network library that wraps PyTorch&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/skorch-dev/skorch/raw/master/assets/skorch_bordered.svg&#34;&gt;https://github.com/skorch-dev/skorch/blob/master/assets/skorch_bordered.svg&lt;/a&gt; :width: 30%&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;|build| |coverage| |docs| |powered|&lt;/p&gt; &#xA;&lt;p&gt;A scikit-learn compatible neural network library that wraps PyTorch.&lt;/p&gt; &#xA;&lt;p&gt;.. |build| image:: &lt;a href=&#34;https://github.com/skorch-dev/skorch/workflows/tests/badge.svg&#34;&gt;https://github.com/skorch-dev/skorch/workflows/tests/badge.svg&lt;/a&gt; :alt: Test Status :scale: 100%&lt;/p&gt; &#xA;&lt;p&gt;.. |coverage| image:: &lt;a href=&#34;https://github.com/skorch-dev/skorch/raw/master/assets/coverage.svg&#34;&gt;https://github.com/skorch-dev/skorch/blob/master/assets/coverage.svg&lt;/a&gt; :alt: Test Coverage :scale: 100%&lt;/p&gt; &#xA;&lt;p&gt;.. |docs| image:: &lt;a href=&#34;https://readthedocs.org/projects/skorch/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/skorch/badge/?version=latest&lt;/a&gt; :alt: Documentation Status :scale: 100% :target: &lt;a href=&#34;https://skorch.readthedocs.io/en/latest/?badge=latest&#34;&gt;https://skorch.readthedocs.io/en/latest/?badge=latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |powered| image:: &lt;a href=&#34;https://github.com/skorch-dev/skorch/raw/master/assets/powered.svg&#34;&gt;https://github.com/skorch-dev/skorch/blob/master/assets/powered.svg&lt;/a&gt; :alt: Powered by :scale: 100% :target: &lt;a href=&#34;https://github.com/ottogroup/&#34;&gt;https://github.com/ottogroup/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;========= Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Documentation &amp;lt;https://skorch.readthedocs.io/en/latest/?badge=latest&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Source Code &amp;lt;https://github.com/skorch-dev/skorch/&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Installation &amp;lt;https://github.com/skorch-dev/skorch#installation&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;======== Examples&lt;/h1&gt; &#xA;&lt;p&gt;To see more elaborate examples, look &lt;code&gt;here &amp;lt;https://github.com/skorch-dev/skorch/tree/master/notebooks/README.md&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import numpy as np&#xA;from sklearn.datasets import make_classification&#xA;from torch import nn&#xA;&#xA;from skorch import NeuralNetClassifier&#xA;&#xA;&#xA;X, y = make_classification(1000, 20, n_informative=10, random_state=0)&#xA;X = X.astype(np.float32)&#xA;y = y.astype(np.int64)&#xA;&#xA;class MyModule(nn.Module):&#xA;    def __init__(self, num_units=10, nonlin=nn.ReLU()):&#xA;        super(MyModule, self).__init__()&#xA;&#xA;        self.dense0 = nn.Linear(20, num_units)&#xA;        self.nonlin = nonlin&#xA;        self.dropout = nn.Dropout(0.5)&#xA;        self.dense1 = nn.Linear(num_units, num_units)&#xA;        self.output = nn.Linear(num_units, 2)&#xA;        self.softmax = nn.Softmax(dim=-1)&#xA;&#xA;    def forward(self, X, **kwargs):&#xA;        X = self.nonlin(self.dense0(X))&#xA;        X = self.dropout(X)&#xA;        X = self.nonlin(self.dense1(X))&#xA;        X = self.softmax(self.output(X))&#xA;        return X&#xA;&#xA;&#xA;net = NeuralNetClassifier(&#xA;    MyModule,&#xA;    max_epochs=10,&#xA;    lr=0.1,&#xA;    # Shuffle training data on each epoch&#xA;    iterator_train__shuffle=True,&#xA;)&#xA;&#xA;net.fit(X, y)&#xA;y_proba = net.predict_proba(X)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In an &lt;code&gt;sklearn Pipeline &amp;lt;https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html&amp;gt;&lt;/code&gt;_:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from sklearn.pipeline import Pipeline&#xA;from sklearn.preprocessing import StandardScaler&#xA;&#xA;&#xA;pipe = Pipeline([&#xA;    (&#39;scale&#39;, StandardScaler()),&#xA;    (&#39;net&#39;, net),&#xA;])&#xA;&#xA;pipe.fit(X, y)&#xA;y_proba = pipe.predict_proba(X)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;grid search &amp;lt;https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html&amp;gt;&lt;/code&gt;_:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from sklearn.model_selection import GridSearchCV&#xA;&#xA;&#xA;# deactivate skorch-internal train-valid split and verbose logging&#xA;net.set_params(train_split=False, verbose=0)&#xA;params = {&#xA;    &#39;lr&#39;: [0.01, 0.02],&#xA;    &#39;max_epochs&#39;: [10, 20],&#xA;    &#39;module__num_units&#39;: [10, 20],&#xA;}&#xA;gs = GridSearchCV(net, params, refit=False, cv=3, scoring=&#39;accuracy&#39;, verbose=2)&#xA;&#xA;gs.fit(X, y)&#xA;print(&#34;best score: {:.3f}, best params: {}&#34;.format(gs.best_score_, gs.best_params_))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;skorch also provides many convenient features, among others:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Learning rate schedulers &amp;lt;https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.LRScheduler&amp;gt;&lt;/code&gt;_ (Warm restarts, cyclic LR and many more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Scoring using sklearn (and custom) scoring functions &amp;lt;https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.EpochScoring&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Early stopping &amp;lt;https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.EarlyStopping&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Checkpointing &amp;lt;https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.Checkpoint&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Parameter freezing/unfreezing &amp;lt;https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.Freezer&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Progress bar &amp;lt;https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.ProgressBar&amp;gt;&lt;/code&gt;_ (for CLI as well as jupyter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Automatic inference of CLI parameters &amp;lt;https://github.com/skorch-dev/skorch/tree/master/examples/cli&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Integration with GPyTorch for Gaussian Processes &amp;lt;https://skorch.readthedocs.io/en/latest/user/probabilistic.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;============ Installation&lt;/h1&gt; &#xA;&lt;p&gt;skorch requires Python 3.6 or higher.&lt;/p&gt; &#xA;&lt;h1&gt;conda installation&lt;/h1&gt; &#xA;&lt;p&gt;You need a working conda installation. Get the correct miniconda for your system from &lt;code&gt;here &amp;lt;https://conda.io/miniconda.html&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;To install skorch, you need to use the conda-forge channel:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge skorch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend to use a &lt;code&gt;conda virtual environment &amp;lt;https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The conda channel is &lt;em&gt;not&lt;/em&gt; managed by the skorch maintainers. More information is available &lt;code&gt;here &amp;lt;https://github.com/conda-forge/skorch-feedstock&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;h1&gt;pip installation&lt;/h1&gt; &#xA;&lt;p&gt;To install with pip, run:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pip install -U skorch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Again, we recommend to use a &lt;code&gt;virtual environment &amp;lt;https://docs.python.org/3/tutorial/venv.html&amp;gt;&lt;/code&gt;_ for this.&lt;/p&gt; &#xA;&lt;h1&gt;From source&lt;/h1&gt; &#xA;&lt;p&gt;If you would like to use the most recent additions to skorch or help development, you should install skorch from source.&lt;/p&gt; &#xA;&lt;h2&gt;Using conda&lt;/h2&gt; &#xA;&lt;p&gt;To install skorch from source using conda, proceed as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/skorch-dev/skorch.git&#xA;cd skorch&#xA;conda env create&#xA;source activate skorch&#xA;python -m pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to help developing, run:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/skorch-dev/skorch.git&#xA;cd skorch&#xA;conda env create&#xA;source activate skorch&#xA;python -m pip install -e .&#xA;&#xA;py.test  # unit tests&#xA;pylint skorch  # static code checks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using pip&lt;/h2&gt; &#xA;&lt;p&gt;For pip, follow these instructions instead:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/skorch-dev/skorch.git&#xA;cd skorch&#xA;# create and activate a virtual environment&#xA;python -m pip install -r requirements.txt&#xA;# install pytorch version for your system (see below)&#xA;python -m pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to help developing, run:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/skorch-dev/skorch.git&#xA;cd skorch&#xA;# create and activate a virtual environment&#xA;python -m pip install -r requirements.txt&#xA;# install pytorch version for your system (see below)&#xA;python -m pip install -r requirements-dev.txt&#xA;python -m pip install -e .&#xA;&#xA;py.test  # unit tests&#xA;pylint skorch  # static code checks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;PyTorch&lt;/h1&gt; &#xA;&lt;p&gt;PyTorch is not covered by the dependencies, since the PyTorch version you need is dependent on your OS and device. For installation instructions for PyTorch, visit the &lt;code&gt;PyTorch website &amp;lt;http://pytorch.org/&amp;gt;&lt;/code&gt;__. skorch officially supports the last four minor PyTorch versions, which currently are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.9.1&lt;/li&gt; &#xA; &lt;li&gt;1.10.2&lt;/li&gt; &#xA; &lt;li&gt;1.11.0&lt;/li&gt; &#xA; &lt;li&gt;1.12.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, that doesn&#39;t mean that older versions don&#39;t work, just that they aren&#39;t tested. Since skorch mostly relies on the stable part of the PyTorch API, older PyTorch versions should work fine.&lt;/p&gt; &#xA;&lt;p&gt;In general, running this to install PyTorch should work (assuming CUDA 11.1):&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# using conda:&#xA;conda install pytorch cudatoolkit==11.1 -c pytorch&#xA;# using pip&#xA;python -m pip install torch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;================== External resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@jakubczakon: &lt;code&gt;blog post &amp;lt;https://neptune.ai/blog/model-training-libraries-pytorch-ecosystem&amp;gt;&lt;/code&gt;_ &#34;8 Creators and Core Contributors Talk About Their Model Training Libraries From PyTorch Ecosystem&#34; 2020&lt;/li&gt; &#xA; &lt;li&gt;@BenjaminBossan: &lt;code&gt;talk 1 &amp;lt;https://www.youtube.com/watch?v=Qbu_DCBjVEk&amp;gt;&lt;/code&gt;_ &#34;skorch: A scikit-learn compatible neural network library&#34; at PyCon/PyData 2019&lt;/li&gt; &#xA; &lt;li&gt;@githubnemo: &lt;code&gt;poster &amp;lt;https://github.com/githubnemo/skorch-poster&amp;gt;&lt;/code&gt;_ for the PyTorch developer conference 2019&lt;/li&gt; &#xA; &lt;li&gt;@thomasjpfan: &lt;code&gt;talk 2 &amp;lt;https://www.youtube.com/watch?v=0J7FaLk0bmQ&amp;gt;&lt;/code&gt;_ &#34;Skorch: A Union of Scikit learn and PyTorch&#34; at SciPy 2019&lt;/li&gt; &#xA; &lt;li&gt;@thomasjpfan: &lt;code&gt;talk 3 &amp;lt;https://www.youtube.com/watch?v=yAXsxf2CQ8M&amp;gt;&lt;/code&gt;_ &#34;Skorch - A Union of Scikit-learn and PyTorch&#34; at PyData 2018&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;============= Communication&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GitHub issues &amp;lt;https://github.com/skorch-dev/skorch/issues&amp;gt;&lt;/code&gt;_: bug reports, feature requests, install issues, RFCs, thoughts, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slack: We run the #skorch channel on the &lt;code&gt;PyTorch Slack server &amp;lt;https://pytorch.slack.com/&amp;gt;&lt;/code&gt;&lt;em&gt;, for which you can &lt;code&gt;request access here &amp;lt;https://bit.ly/ptslack&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fengdu78/lihang-code</title>
    <updated>2022-08-17T01:47:45Z</updated>
    <id>tag:github.com,2022-08-17:/fengdu78/lihang-code</id>
    <link href="https://github.com/fengdu78/lihang-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《统计学习方法》的代码实现&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;《统计学习方法》第二版的代码实现&lt;/h1&gt; &#xA;&lt;p&gt;李航老师编写的《统计学习方法》全面系统地介绍了统计学习的主要方法，特别是监督学习方法，包括感知机、k近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归与支持向量机、提升方法、em算法、隐马尔可夫模型和条件随机场等。除第1章概论和最后一章总结外，每章介绍一种方法。叙述从具体问题或实例入手，由浅入深，阐明思路，给出必要的数学推导，便于读者掌握统计学习方法的实质，学会运用。&lt;/p&gt; &#xA;&lt;p&gt;《统计学习方法》可以说是机器学习的入门宝典，许多机器学习培训班、互联网企业的面试、笔试题目，很多都参考这本书。&lt;/p&gt; &#xA;&lt;p&gt;今天我们将李航老师的《统计学习方法》第二版的代码进行了整理，并提供下载。&lt;/p&gt; &#xA;&lt;p&gt;非常感谢各位朋友贡献的自己的笔记、代码！&lt;/p&gt; &#xA;&lt;p&gt;2020年6月7日&lt;/p&gt; &#xA;&lt;h2&gt;代码目录&lt;/h2&gt; &#xA;&lt;p&gt;第1章 统计学习方法概论&lt;/p&gt; &#xA;&lt;p&gt;第2章 感知机&lt;/p&gt; &#xA;&lt;p&gt;第3章 k近邻法&lt;/p&gt; &#xA;&lt;p&gt;第4章 朴素贝叶斯&lt;/p&gt; &#xA;&lt;p&gt;第5章 决策树&lt;/p&gt; &#xA;&lt;p&gt;第6章 逻辑斯谛回归&lt;/p&gt; &#xA;&lt;p&gt;第7章 支持向量机&lt;/p&gt; &#xA;&lt;p&gt;第8章 提升方法&lt;/p&gt; &#xA;&lt;p&gt;第9章 EM算法及其推广&lt;/p&gt; &#xA;&lt;p&gt;第10章 隐马尔可夫模型&lt;/p&gt; &#xA;&lt;p&gt;第11章 条件随机场&lt;/p&gt; &#xA;&lt;p&gt;第12章 监督学习方法总结&lt;/p&gt; &#xA;&lt;p&gt;第13章 无监督学习概论&lt;/p&gt; &#xA;&lt;p&gt;第14章 聚类方法&lt;/p&gt; &#xA;&lt;p&gt;第15章 奇异值分解&lt;/p&gt; &#xA;&lt;p&gt;第16章 主成分分析&lt;/p&gt; &#xA;&lt;p&gt;第17章 潜在语义分析&lt;/p&gt; &#xA;&lt;p&gt;第18章 概率潜在语义分析&lt;/p&gt; &#xA;&lt;p&gt;第19章 马尔可夫链蒙特卡洛法&lt;/p&gt; &#xA;&lt;p&gt;第20章 潜在狄利克雷分配&lt;/p&gt; &#xA;&lt;p&gt;第21章 PageRank算法&lt;/p&gt; &#xA;&lt;p&gt;第22章 无监督学习方法总结&lt;/p&gt; &#xA;&lt;h2&gt;参考&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wzyonggege/statistical-learning-method&#34;&gt;https://github.com/wzyonggege/statistical-learning-method&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WenDesi/lihang_book_algorithm&#34;&gt;https://github.com/WenDesi/lihang_book_algorithm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/tudaodiaozhale&#34;&gt;https://blog.csdn.net/tudaodiaozhale&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hktxt/Learn-Statistical-Learning-Method&#34;&gt;https://github.com/hktxt/Learn-Statistical-Learning-Method&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;代码整理和修改：机器学习初学者（公众号） &lt;img src=&#34;https://raw.githubusercontent.com/fengdu78/lihang-code/master/images/gongzhong.jpg&#34; alt=&#34;gongzhong&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;知识星球：黄博的机器学习圈子&lt;img src=&#34;https://raw.githubusercontent.com/fengdu78/lihang-code/master/images/zhishixingqiu1.jpg&#34; alt=&#34;xingqiu&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/people/fengdu78&#34;&gt;知乎&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>