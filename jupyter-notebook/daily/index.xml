<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-07T01:44:32Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google-research/vision_transformer</title>
    <updated>2022-07-07T01:44:32Z</updated>
    <id>tag:github.com,2022-07-07:/google-research/vision_transformer</id>
    <link href="https://github.com/google-research/vision_transformer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vision Transformer and MLP-Mixer Architectures&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (9.6.2022)&lt;/strong&gt;: Added the ResNet, ViT, and MLP-Mixer checkpoints optimized using &#34;Surrogate Gap Minimization Improves Sharpness-Aware Training&#34; (a.k.a. GSAM) paper (Table 1).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (14.4.2022)&lt;/strong&gt;: Added models and Colab for &lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#lit-models&#34;&gt;LiT models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (2.7.2021)&lt;/strong&gt;: Added the &#34;When Vision Transformers Outperform ResNets...&#34; paper, and &lt;a href=&#34;https://arxiv.org/abs/2010.01412&#34;&gt;SAM&lt;/a&gt; (Sharpness-Aware Minimization) optimized ViT and MLP-Mixer checkpoints.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (20.6.2021)&lt;/strong&gt;: Added the &#34;How to train your ViT? ...&#34; paper, and a new Colab to explore the &amp;gt;50k pre-trained and fine-tuned checkpoints mentioned in the paper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (18.6.2021)&lt;/strong&gt;: This repository was rewritten to use Flax Linen API and &lt;code&gt;ml_collections.ConfigDict&lt;/code&gt; for configuration.&lt;/p&gt; &#xA;&lt;p&gt;In this repository we release models from the papers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2010.11929&#34;&gt;An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2105.01601&#34;&gt;MLP-Mixer: An all-MLP Architecture for Vision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2106.10270&#34;&gt;How to train your ViT? Data, Augmentation, and Regularization in Vision Transformers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2106.01548&#34;&gt;When Vision Transformers Outperform ResNets without Pretraining or Strong Data Augmentations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2203.08065&#34;&gt;Surrogate Gap Minimization Improves Sharpness-Aware Training&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The models were pre-trained on the &lt;a href=&#34;http://www.image-net.org/&#34;&gt;ImageNet&lt;/a&gt; and &lt;a href=&#34;http://www.image-net.org/&#34;&gt;ImageNet-21k&lt;/a&gt; datasets. We provide the code for fine-tuning the released models in &lt;a href=&#34;https://jax.readthedocs.io&#34;&gt;JAX&lt;/a&gt;/&lt;a href=&#34;http://flax.readthedocs.io&#34;&gt;Flax&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Table of contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#vision-transformer-and-mlp-mixer-architectures&#34;&gt;Vision Transformer and MLP-Mixer Architectures&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#colab&#34;&gt;Colab&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#fine-tuning-a-model&#34;&gt;Fine-tuning a model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#vision-transformer&#34;&gt;Vision Transformer&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#available-vit-models&#34;&gt;Available ViT models&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#expected-vit-results&#34;&gt;Expected ViT results&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#mlp-mixer&#34;&gt;MLP-Mixer&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#available-mixer-models&#34;&gt;Available Mixer models&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#expected-mixer-results&#34;&gt;Expected Mixer results&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#lit-models&#34;&gt;LiT models&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#running-on-cloud&#34;&gt;Running on cloud&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#create-a-vm&#34;&gt;Create a VM&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#setup-vm&#34;&gt;Setup VM&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#bibtex&#34;&gt;Bibtex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#disclaimers&#34;&gt;Disclaimers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Colab&lt;/h2&gt; &#xA;&lt;p&gt;Below Colabs run both with GPUs, and TPUs (8 cores, data parallelism).&lt;/p&gt; &#xA;&lt;p&gt;The first Colab demonstrates the JAX code of Vision Transformers and MLP Mixers. This Colab allows you to edit the files from the repository directly in the Colab UI and has annotated Colab cells that walk you through the code step by step, and lets you interact with the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax.ipynb&#34;&gt;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The second Colab allows you to explore the &amp;gt;50k Vision Transformer and hybrid checkpoints that were used to generate the data of the third paper &#34;How to train your ViT? ...&#34;. The Colab includes code to explore and select checkpoints, and to do inference both using the JAX code from this repo, and also using the popular &lt;a href=&#34;https://github.com/rwightman/pytorch-image-models&#34;&gt;&lt;code&gt;timm&lt;/code&gt;&lt;/a&gt; PyTorch library that can directly load these checkpoints as well. Note that a handful of models are also available directly from TF-Hub: &lt;a href=&#34;https://tfhub.dev/sayakpaul/collections/vision_transformer&#34;&gt;sayakpaul/collections/vision_transformer&lt;/a&gt; (external contribution by &lt;a href=&#34;https://github.com/sayakpaul&#34;&gt;Sayak Paul&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The second Colab also lets you fine-tune the checkpoints on any tfds dataset and your own dataset with examples in individual JPEG files (optionally directly reading from Google Drive).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax_augreg.ipynb&#34;&gt;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax_augreg.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: As for now (6/20/21) Google Colab only supports a single GPU (Nvidia Tesla T4), and TPUs (currently TPUv2-8) are attached indirectly to the Colab VM and communicate over slow network, which leads to pretty bad training speed. You would usually want to set up a dedicated machine if you have a non-trivial amount of data to fine-tune on. For details see the &lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#running-on-cloud&#34;&gt;Running on cloud&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;code&gt;Python&amp;gt;=3.6&lt;/code&gt; installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;Install JAX and python dependencies by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# If using GPU:&#xA;pip install -r vit_jax/requirements.txt&#xA;&#xA;# If using TPU:&#xA;pip install -r vit_jax/requirements-tpu.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For newer versions of &lt;a href=&#34;https://github.com/google/jax&#34;&gt;JAX&lt;/a&gt;, follow the instructions provided in the corresponding repository linked here. Note that installation instructions for CPU, GPU and TPU differs slightly.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/google/flaxformer&#34;&gt;Flaxformer&lt;/a&gt;, follow the instructions provided in the corresponding repository linked here.&lt;/p&gt; &#xA;&lt;p&gt;For more details refer to the section &lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#running-on-cloud&#34;&gt;Running on cloud&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Fine-tuning a model&lt;/h2&gt; &#xA;&lt;p&gt;You can run fine-tuning of the downloaded model on your dataset of interest. All models share the same command line interface.&lt;/p&gt; &#xA;&lt;p&gt;For example for fine-tuning a ViT-B/16 (pre-trained on imagenet21k) on CIFAR10 (note how we specify &lt;code&gt;b16,cifar10&lt;/code&gt; as arguments to the config, and how we instruct the code to access the models directly from a GCS bucket instead of first downloading them into the local directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \&#xA;    --config=$(pwd)/vit_jax/configs/vit.py:b16,cifar10 \&#xA;    --config.pretrained_dir=&#39;gs://vit_models/imagenet21k&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to fine-tune a Mixer-B/16 (pre-trained on imagenet21k) on CIFAR10:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \&#xA;    --config=$(pwd)/vit_jax/configs/mixer_base16_cifar10.py \&#xA;    --config.pretrained_dir=&#39;gs://mixer_models/imagenet21k&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;How to train your ViT? ...&#34; paper added &amp;gt;50k checkpoints that you can fine-tune with the &lt;a href=&#34;https://github.com/google-research/vision_transformer/raw/main/vit_jax/configs/augreg.py&#34;&gt;&lt;code&gt;configs/augreg.py&lt;/code&gt;&lt;/a&gt; config. When you only specify the model name (the &lt;code&gt;config.name&lt;/code&gt; value from &lt;a href=&#34;https://github.com/google-research/vision_transformer/raw/main/vit_jax/configs/models.py&#34;&gt;&lt;code&gt;configs/model.py&lt;/code&gt;&lt;/a&gt;), then the best i21k checkpoint by upstream validation accuracy (&#34;recommended&#34; checkpoint, see section 4.5 of the paper) is chosen. To make up your mind which model you want to use, have a look at Figure 3 in the paper. It&#39;s also possible to choose a different checkpoint (see Colab &lt;a href=&#34;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax_augreg.ipynb&#34;&gt;&lt;code&gt;vit_jax_augreg.ipynb&lt;/code&gt;&lt;/a&gt;) and then specify the value from the &lt;code&gt;filename&lt;/code&gt; or &lt;code&gt;adapt_filename&lt;/code&gt; column, which correspond to the filenames without &lt;code&gt;.npz&lt;/code&gt; from the &lt;a href=&#34;https://console.cloud.google.com/storage/browser/vit_models/augreg/&#34;&gt;&lt;code&gt;gs://vit_models/augreg&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \&#xA;    --config=$(pwd)/vit_jax/configs/augreg.py:R_Ti_16 \&#xA;    --config.dataset=oxford_iiit_pet \&#xA;    --config.base_lr=0.01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, the code will automatically download CIFAR-10 and CIFAR-100 datasets. Other public or custom datasets can be easily integrated, using &lt;a href=&#34;https://github.com/tensorflow/datasets/&#34;&gt;tensorflow datasets library&lt;/a&gt;. Note that you will also need to update &lt;code&gt;vit_jax/input_pipeline.py&lt;/code&gt; to specify some parameters about any added dataset.&lt;/p&gt; &#xA;&lt;p&gt;Note that our code uses all available GPUs/TPUs for fine-tuning.&lt;/p&gt; &#xA;&lt;p&gt;To see a detailed list of all available flags, run &lt;code&gt;python3 -m vit_jax.train --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notes on memory:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Different models require different amount of memory. Available memory also depends on the accelerator configuration (both type and count). If you encounter an out-of-memory error you can increase the value of &lt;code&gt;--config.accum_steps=8&lt;/code&gt; -- alternatively, you could also decrease the &lt;code&gt;--config.batch=512&lt;/code&gt; (and decrease &lt;code&gt;--config.base_lr&lt;/code&gt; accordingly).&lt;/li&gt; &#xA; &lt;li&gt;The host keeps a shuffle buffer in memory. If you encounter a host OOM (as opposed to an accelerator OOM), you can decrease the default &lt;code&gt;--config.shuffle_buffer=50000&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vision Transformer&lt;/h2&gt; &#xA;&lt;p&gt;by Alexey Dosovitskiy*†, Lucas Beyer*, Alexander Kolesnikov*, Dirk Weissenborn*, Xiaohua Zhai*, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit and Neil Houlsby*†.&lt;/p&gt; &#xA;&lt;p&gt;(*) equal technical contribution, (†) equal advising.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/vit_figure.png&#34; alt=&#34;Figure 1 from paper&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overview of the model: we split an image into fixed-size patches, linearly embed each of them, add position embeddings, and feed the resulting sequence of vectors to a standard Transformer encoder. In order to perform classification, we use the standard approach of adding an extra learnable &#34;classification token&#34; to the sequence.&lt;/p&gt; &#xA;&lt;h3&gt;Available ViT models&lt;/h3&gt; &#xA;&lt;p&gt;We provide models pre-trained on ImageNet-21k for the following architectures: ViT-B/16, ViT-B/32, ViT-L/16 and ViT-L/32. We provide the same models pre-trained on ImageNet-21k &lt;em&gt;and&lt;/em&gt; fine-tuned on ImageNet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (9.6.2022)&lt;/strong&gt;: We added the ViT models trained from scratch using &lt;a href=&#34;https://arxiv.org/abs/2203.08065&#34;&gt;GSAM&lt;/a&gt; on ImageNet without strong data augmentations. The resultant ViTs outperform those of similar sizes trained using AdamW optimizer or the original &lt;a href=&#34;https://arxiv.org/abs/2010.01412&#34;&gt;SAM&lt;/a&gt; algorithm, or with strong data augmentations. To use those models, you can simply replace the model path in &lt;a href=&#34;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax.ipynb&#34;&gt;&lt;code&gt;vit_jax.ipynb&lt;/code&gt;&lt;/a&gt; with &lt;a href=&#34;https://console.cloud.google.com/storage/browser/vit_models/gsam/&#34;&gt;&lt;code&gt;gs://vit_models/gsam&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (29.7.2021)&lt;/strong&gt;: Added ViT-B/8 AugReg models (3 upstream checkpoints and adaptations with resolution=224).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (2.7.2021)&lt;/strong&gt;: We added the ViT models trained from scratch with &lt;a href=&#34;https://arxiv.org/abs/2010.01412&#34;&gt;SAM&lt;/a&gt; optimizer on ImageNet (with basic Inception-style preprocessing). The resultant ViTs outperform ResNets of similar size and throughput without large-scale pre-training or strong data augmentations. They also possess more perceptive attention maps. To use those models, you can simply replace the model path in &lt;a href=&#34;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax.ipynb&#34;&gt;&lt;code&gt;vit_jax.ipynb&lt;/code&gt;&lt;/a&gt; with &lt;a href=&#34;https://console.cloud.google.com/storage/browser/vit_models/sam/&#34;&gt;&lt;code&gt;gs://vit_models/sam&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (19.5.2021)&lt;/strong&gt;: With publication of the &#34;How to train your ViT? ...&#34; paper, we added more than 50k ViT and hybrid models pre-trained on ImageNet and ImageNet-21k with various degrees of data augmentation and model regularization, and fine-tuned on ImageNet, Pets37, Kitti-distance, CIFAR-100, and Resisc45. Check out &lt;a href=&#34;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax_augreg.ipynb&#34;&gt;&lt;code&gt;vit_jax_augreg.ipynb&lt;/code&gt;&lt;/a&gt; to navigate this treasure trove of models! For example, you can use that Colab to fetch the filenames of recommended pre-trained and fine-tuned checkpoints from the &lt;code&gt;i21k_300&lt;/code&gt; column of Table 3 in the paper:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Pre-trained checkpoint&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Size&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Fine-tuned checkpoint&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Resolution&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Img/sec&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Imagenet accuracy&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;L/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/L_16-i21k-300ep-lr_0.001-aug_strong1-wd_0.1-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1243 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/L_16-i21k-300ep-lr_0.001-aug_strong1-wd_0.1-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.01-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;50&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;85.59%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;B/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/B_16-i21k-300ep-lr_0.001-aug_medium1-wd_0.1-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;391 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/B_16-i21k-300ep-lr_0.001-aug_medium1-wd_0.1-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.03-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;138&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;85.49%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;S/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/S_16-i21k-300ep-lr_0.001-aug_light1-wd_0.03-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;115 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/S_16-i21k-300ep-lr_0.001-aug_light1-wd_0.03-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.03-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;300&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;83.73%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R50+L/32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/R50_L_32-i21k-300ep-lr_0.001-aug_medium1-wd_0.1-do_0.1-sd_0.1.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1337 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/R50_L_32-i21k-300ep-lr_0.001-aug_medium1-wd_0.1-do_0.1-sd_0.1--imagenet2012-steps_20k-lr_0.01-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;327&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;85.99%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R26+S/32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/R26_S_32-i21k-300ep-lr_0.001-aug_light1-wd_0.1-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;170 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/R26_S_32-i21k-300ep-lr_0.001-aug_light1-wd_0.1-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.01-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;560&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;83.85%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ti/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/Ti_16-i21k-300ep-lr_0.001-aug_none-wd_0.03-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;37 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/Ti_16-i21k-300ep-lr_0.001-aug_none-wd_0.03-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.03-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;610&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;78.22%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;B/32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/B_32-i21k-300ep-lr_0.001-aug_light1-wd_0.1-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;398 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/B_32-i21k-300ep-lr_0.001-aug_light1-wd_0.1-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.01-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;955&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;83.59%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;S/32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/S_32-i21k-300ep-lr_0.001-aug_none-wd_0.1-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;118 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/S_32-i21k-300ep-lr_0.001-aug_none-wd_0.1-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.01-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2154&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;79.58%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R+Ti/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/R_Ti_16-i21k-300ep-lr_0.001-aug_none-wd_0.03-do_0.0-sd_0.0.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40 MiB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gs://vit_models/augreg/R_Ti_16-i21k-300ep-lr_0.001-aug_none-wd_0.03-do_0.0-sd_0.0--imagenet2012-steps_20k-lr_0.03-res_384.npz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2426&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;75.40%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (1.12.2020)&lt;/strong&gt;: We have added the R50+ViT-B/16 hybrid model (ViT-B/16 on top of a Resnet-50 backbone). When pretrained on imagenet21k, this model achieves almost the performance of the L/16 model with less than half the computational finetuning cost. Note that &#34;R50&#34; is somewhat modified for the B/16 variant: The original ResNet-50 has [3,4,6,3] blocks, each reducing the resolution of the image by a factor of two. In combination with the ResNet stem this would result in a reduction of 32x so even with a patch size of (1,1) the ViT-B/16 variant cannot be realized anymore. For this reason we instead use [3,4,9] blocks for the R50+B/16 variant.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (9.11.2020)&lt;/strong&gt;: We have also added the ViT-L/16 model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (29.10.2020)&lt;/strong&gt;: We have added ViT-B/16 and ViT-L/16 models pretrained on ImageNet-21k and then fine-tuned on ImageNet at 224x224 resolution (instead of default 384x384). These models have the suffix &#34;-224&#34; in their name. They are expected to achieve 81.2% and 82.7% top-1 accuracies respectively.&lt;/p&gt; &#xA;&lt;p&gt;You can find all these models in the following storage bucket:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/storage/browser/vit_models/&#34;&gt;https://console.cloud.google.com/storage/browser/vit_models/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, if you would like to download the ViT-B/16 pre-trained on imagenet21k run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://storage.googleapis.com/vit_models/imagenet21k/ViT-B_16.npz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expected ViT results&lt;/h3&gt; &#xA;&lt;p&gt;Table below runs experiments both with &lt;code&gt;transformer.dropout_rate=0.1&lt;/code&gt; (as in the ViT paper), and with &lt;code&gt;transformer.dropout_rate=0.0&lt;/code&gt;, which improves results somewhat for models B=16, B/32, and L/32. The better setting was chosen for the default config of the models in this repository. Note also that all these models have &lt;code&gt;representation_size=None&lt;/code&gt;, i.e. the last layer before the classification layer is dropped for fine-tuning.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;model&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;dataset&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;dropout=0.0&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;dropout=0.1&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R50+ViT-B_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;98.72%, 3.9h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5ER50.ViT-B_16/cifar10/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;98.94%, 10.1h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5ER50.ViT-B_16/cifar10/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R50+ViT-B_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar100&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;90.88%, 4.1h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5ER50.ViT-B_16/cifar100/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;92.30%, 10.1h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5ER50.ViT-B_16/cifar100/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R50+ViT-B_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;imagenet2012&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;83.72%, 9.9h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5ER50.ViT-B_16/imagenet2012/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;85.08%, 24.2h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5ER50.ViT-B_16/imagenet2012/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-B_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;99.02%, 2.2h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_16/cifar10/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;98.76%, 7.8h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_16/cifar10/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-B_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar100&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;92.06%, 2.2h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_16/cifar100/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;91.92%, 7.8h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_16/cifar100/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-B_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;imagenet2012&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;84.53%, 6.5h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_16/imagenet2012/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;84.12%, 19.3h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_16/imagenet2012/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-B_32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;98.88%, 0.8h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_32/cifar10/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;98.75%, 1.8h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_32/cifar10/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-B_32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar100&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;92.31%, 0.8h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_32/cifar100/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;92.05%, 1.8h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_32/cifar100/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-B_32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;imagenet2012&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;81.66%, 3.3h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_32/imagenet2012/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;81.31%, 4.9h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-B_32/imagenet2012/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-L_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;99.13%, 6.9h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_16/cifar10/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;99.14%, 24.7h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_16/cifar10/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-L_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar100&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;92.91%, 7.1h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_16/cifar100/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;93.22%, 24.4h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_16/cifar100/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-L_16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;imagenet2012&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;84.47%, 16.8h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_16/imagenet2012/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;85.05%, 59.7h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_16/imagenet2012/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-L_32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;99.06%, 1.9h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_32/cifar10/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;99.09%, 6.1h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_32/cifar10/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-L_32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar100&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;93.29%, 1.9h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_32/cifar100/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;93.34%, 6.2h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_32/cifar100/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ViT-L_32&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;imagenet2012&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;81.89%, 7.5h (A100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_32/imagenet2012/do_0.0&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;81.13%, 15.0h (V100), &lt;a href=&#34;https://tensorboard.dev/experiment/nwXQNjudRJW3dtQzhPZwwA/#scalars&amp;amp;regexInput=%5EViT-L_32/imagenet2012/do_0.1&amp;amp;_smoothingWeight=0&#34;&gt;tb.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We also would like to emphasize that high-quality results can be achieved with shorter training schedules and encourage users of our code to play with hyper-parameters to trade-off accuracy and computational budget. Some examples for CIFAR-10/100 datasets are presented in the table below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;upstream&lt;/th&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;dataset&lt;/th&gt; &#xA;   &lt;th&gt;total_steps / warmup_steps&lt;/th&gt; &#xA;   &lt;th&gt;accuracy&lt;/th&gt; &#xA;   &lt;th&gt;wall-clock time&lt;/th&gt; &#xA;   &lt;th&gt;link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imagenet21k&lt;/td&gt; &#xA;   &lt;td&gt;ViT-B_16&lt;/td&gt; &#xA;   &lt;td&gt;cifar10&lt;/td&gt; &#xA;   &lt;td&gt;500 / 50&lt;/td&gt; &#xA;   &lt;td&gt;98.59%&lt;/td&gt; &#xA;   &lt;td&gt;17m&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/QgkpiW53RPmjkabe1ME31g/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imagenet21k&lt;/td&gt; &#xA;   &lt;td&gt;ViT-B_16&lt;/td&gt; &#xA;   &lt;td&gt;cifar10&lt;/td&gt; &#xA;   &lt;td&gt;1000 / 100&lt;/td&gt; &#xA;   &lt;td&gt;98.86%&lt;/td&gt; &#xA;   &lt;td&gt;39m&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/w8DQkDeJTOqJW5js80gOQg/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imagenet21k&lt;/td&gt; &#xA;   &lt;td&gt;ViT-B_16&lt;/td&gt; &#xA;   &lt;td&gt;cifar100&lt;/td&gt; &#xA;   &lt;td&gt;500 / 50&lt;/td&gt; &#xA;   &lt;td&gt;89.17%&lt;/td&gt; &#xA;   &lt;td&gt;17m&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/5hM4GrnAR0KEZg725Ewnqg/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imagenet21k&lt;/td&gt; &#xA;   &lt;td&gt;ViT-B_16&lt;/td&gt; &#xA;   &lt;td&gt;cifar100&lt;/td&gt; &#xA;   &lt;td&gt;1000 / 100&lt;/td&gt; &#xA;   &lt;td&gt;91.15%&lt;/td&gt; &#xA;   &lt;td&gt;39m&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/QLQTaaIoT9uEcAjtA0eRwg/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;MLP-Mixer&lt;/h2&gt; &#xA;&lt;p&gt;by Ilya Tolstikhin*, Neil Houlsby*, Alexander Kolesnikov*, Lucas Beyer*, Xiaohua Zhai, Thomas Unterthiner, Jessica Yung, Andreas Steiner, Daniel Keysers, Jakob Uszkoreit, Mario Lucic, Alexey Dosovitskiy.&lt;/p&gt; &#xA;&lt;p&gt;(*) equal contribution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/mixer_figure.png&#34; alt=&#34;Figure 1 from paper&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;MLP-Mixer (&lt;em&gt;Mixer&lt;/em&gt; for short) consists of per-patch linear embeddings, Mixer layers, and a classifier head. Mixer layers contain one token-mixing MLP and one channel-mixing MLP, each consisting of two fully-connected layers and a GELU nonlinearity. Other components include: skip-connections, dropout, and linear classifier head.&lt;/p&gt; &#xA;&lt;p&gt;For installation follow &lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#installation&#34;&gt;the same steps&lt;/a&gt; as above.&lt;/p&gt; &#xA;&lt;h3&gt;Available Mixer models&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (9.6.2022)&lt;/strong&gt;: We added the MLP-Mixer models (&lt;a href=&#34;https://console.cloud.google.com/storage/mixer_models/gsam/&#34;&gt;&lt;code&gt;gs://mixer_models/gsam&lt;/code&gt;&lt;/a&gt;) trained from scratch with &lt;a href=&#34;https://arxiv.org/abs/2203.08065&#34;&gt;GSAM&lt;/a&gt; on ImageNet without strong augmentations. The resultant MLP-Mixers outperform those of similar sizes trained with AdamW optimizer or with the original &lt;a href=&#34;https://arxiv.org/abs/2010.01412&#34;&gt;SAM&lt;/a&gt; algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (2.7.2021)&lt;/strong&gt;: We added the MLP-Mixer models trained with &lt;a href=&#34;https://arxiv.org/abs/2010.01412&#34;&gt;SAM&lt;/a&gt; on ImageNet without strong augmentations (&lt;a href=&#34;https://console.cloud.google.com/storage/mixer_models/sam/&#34;&gt;&lt;code&gt;gs://mixer_models/sam&lt;/code&gt;&lt;/a&gt;). The loss landscapes become much smoother, and we found that the activated neurons for the first few layers decrease dramatically after SAM, indicating the potential redundency of image patches.&lt;/p&gt; &#xA;&lt;p&gt;We provide the Mixer-B/16 and Mixer-L/16 models pre-trained on the ImageNet and ImageNet-21k datasets. Details can be found in Table 3 of the Mixer paper. All the models can be found at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/storage/mixer_models/&#34;&gt;https://console.cloud.google.com/storage/mixer_models/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that these models are also available directly from TF-Hub: &lt;a href=&#34;https://tfhub.dev/sayakpaul/collections/mlp-mixer&#34;&gt;sayakpaul/collections/mlp-mixer&lt;/a&gt; (external contribution by &lt;a href=&#34;https://github.com/sayakpaul&#34;&gt;Sayak Paul&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Expected Mixer results&lt;/h3&gt; &#xA;&lt;p&gt;We ran the fine-tuning code on Google Cloud machine with four V100 GPUs with the default adaption parameters from this repository. Here are the results:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;upstream&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;model&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;dataset&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;accuracy&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;wall_clock_time&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ImageNet&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixer-B/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;96.72%&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.0h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/j9zCYt9yQVm93nqnsDZayA/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ImageNet&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixer-L/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;96.59%&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.0h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/Q4feeErzRGGop5XzAvYj2g/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ImageNet-21k&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixer-B/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;96.82%&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9.6h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/mvP4McV2SEGFeIww20ie5Q/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ImageNet-21k&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixer-L/16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cifar10&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;98.34%&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10.0h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://tensorboard.dev/experiment/dolAJyQYTYmudytjalF6Jg/&#34;&gt;tensorboard.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;LiT models&lt;/h2&gt; &#xA;&lt;p&gt;We have just published a post on the Google AI blog &lt;a href=&#34;http://ai.googleblog.com/2022/04/locked-image-tuning-adding-language.html&#34;&gt;LiT: adding language understanding to image models&lt;/a&gt; about our new CVPR paper &#34;LiT: Zero-Shot Transfer with Locked-image text Tuning&#34; (&lt;a href=&#34;https://arxiv.org/abs/2111.07991&#34;&gt;https://arxiv.org/abs/2111.07991&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;We provide a in-browser demo with small text encoders for interactive use (the smallest models should even run on a modern cell phone):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://google-research.github.io/vision_transformer/lit/&#34;&gt;https://google-research.github.io/vision_transformer/lit/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And finally a Colab to use the JAX models with both image and text encoders:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/lit.ipynb&#34;&gt;https://colab.research.google.com/github/google-research/vision_transformer/blob/main/lit.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that none of above models support multi-lingual inputs yet, but we&#39;re working on publishing such models and will update this repository once they become available.&lt;/p&gt; &#xA;&lt;h2&gt;Running on cloud&lt;/h2&gt; &#xA;&lt;p&gt;While above &lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#colab&#34;&gt;colabs&lt;/a&gt; are pretty useful to get started, you would usually want to train on a larger machine with more powerful accelerators.&lt;/p&gt; &#xA;&lt;h3&gt;Create a VM&lt;/h3&gt; &#xA;&lt;p&gt;You can use the following commands to setup a VM with GPUs on Google Cloud:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set variables used by all commands below.&#xA;# Note that project must have accounting set up.&#xA;# For a list of zones with GPUs refer to&#xA;# https://cloud.google.com/compute/docs/gpus/gpu-regions-zones&#xA;PROJECT=my-awesome-gcp-project  # Project must have billing enabled.&#xA;VM_NAME=vit-jax-vm-gpu&#xA;ZONE=europe-west4-b&#xA;&#xA;# Below settings have been tested with this repository. You can choose other&#xA;# combinations of images &amp;amp; machines (e.g.), refer to the corresponding gcloud commands:&#xA;# gcloud compute images list --project ml-images&#xA;# gcloud compute machine-types list&#xA;# etc.&#xA;gcloud compute instances create $VM_NAME \&#xA;    --project=$PROJECT --zone=$ZONE \&#xA;    --image=c1-deeplearning-tf-2-5-cu110-v20210527-debian-10 \&#xA;    --image-project=ml-images --machine-type=n1-standard-96 \&#xA;    --scopes=cloud-platform,storage-full --boot-disk-size=256GB \&#xA;    --boot-disk-type=pd-ssd --metadata=install-nvidia-driver=True \&#xA;    --maintenance-policy=TERMINATE \&#xA;    --accelerator=type=nvidia-tesla-v100,count=8&#xA;&#xA;# Connect to VM (after some minutes needed to setup &amp;amp; start the machine).&#xA;gcloud compute ssh --project $PROJECT --zone $ZONE $VM_NAME&#xA;&#xA;# Stop the VM after use (only storage is billed for a stopped VM).&#xA;gcloud compute instances stop --project $PROJECT --zone $ZONE $VM_NAME&#xA;&#xA;# Delete VM after use (this will also remove all data stored on VM).&#xA;gcloud compute instances delete --project $PROJECT --zone $ZONE $VM_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the following similar commands to set up a Cloud VM with TPUs attached to them (below commands copied from the &lt;a href=&#34;https://cloud.google.com/tpu/docs/jax-quickstart-tpu-vm&#34;&gt;TPU tutorial&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PROJECT=my-awesome-gcp-project  # Project must have billing enabled.&#xA;VM_NAME=vit-jax-vm-tpu&#xA;ZONE=europe-west4-a&#xA;&#xA;# Required to set up service identity initially.&#xA;gcloud beta services identity create --service tpu.googleapis.com&#xA;&#xA;# Create a VM with TPUs directly attached to it.&#xA;gcloud alpha compute tpus tpu-vm create $VM_NAME \&#xA;    --project=$PROJECT --zone=$ZONE \&#xA;    --accelerator-type v3-8 \&#xA;    --version tpu-vm-base&#xA;&#xA;# Connect to VM (after some minutes needed to setup &amp;amp; start the machine).&#xA;gcloud alpha compute tpus tpu-vm ssh --project $PROJECT --zone $ZONE $VM_NAME&#xA;&#xA;# Stop the VM after use (only storage is billed for a stopped VM).&#xA;gcloud alpha compute tpus tpu-vm stop --project $PROJECT --zone $ZONE $VM_NAME&#xA;&#xA;# Delete VM after use (this will also remove all data stored on VM).&#xA;gcloud alpha compute tpus tpu-vm delete --project $PROJECT --zone $ZONE $VM_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup VM&lt;/h3&gt; &#xA;&lt;p&gt;And then fetch the repository and the install dependencies (including &lt;code&gt;jaxlib&lt;/code&gt; with TPU support) as usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth=1 --branch=master https://github.com/google-research/vision_transformer&#xA;cd vision_transformer&#xA;&#xA;# optional: install virtualenv&#xA;pip3 install virtualenv&#xA;python3 -m virtualenv env&#xA;. env/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re connected to a VM with GPUs attached, install JAX and other dependencies with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r vit_jax/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re connected to a VM with TPUs attached, install JAX and other dependencies with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r vit_jax/requirements-tpu.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/google/flaxformer&#34;&gt;Flaxformer&lt;/a&gt;, follow the instructions provided in the corresponding repository linked here.&lt;/p&gt; &#xA;&lt;p&gt;For both GPUs and TPUs, Check that JAX can connect to attached accelerators with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -c &#39;import jax; print(jax.devices())&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally execute one of the commands mentioned in the section &lt;a href=&#34;https://raw.githubusercontent.com/google-research/vision_transformer/main/#fine-tuning-a-model&#34;&gt;fine-tuning a model&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bibtex&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{dosovitskiy2020vit,&#xA;  title={An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale},&#xA;  author={Dosovitskiy, Alexey and Beyer, Lucas and Kolesnikov, Alexander and Weissenborn, Dirk and Zhai, Xiaohua and Unterthiner, Thomas and  Dehghani, Mostafa and Minderer, Matthias and Heigold, Georg and Gelly, Sylvain and Uszkoreit, Jakob and Houlsby, Neil},&#xA;  journal={ICLR},&#xA;  year={2021}&#xA;}&#xA;&#xA;@article{tolstikhin2021mixer,&#xA;  title={MLP-Mixer: An all-MLP Architecture for Vision},&#xA;  author={Tolstikhin, Ilya and Houlsby, Neil and Kolesnikov, Alexander and Beyer, Lucas and Zhai, Xiaohua and Unterthiner, Thomas and Yung, Jessica and Steiner, Andreas and Keysers, Daniel and Uszkoreit, Jakob and Lucic, Mario and Dosovitskiy, Alexey},&#xA;  journal={arXiv preprint arXiv:2105.01601},&#xA;  year={2021}&#xA;}&#xA;&#xA;@article{steiner2021augreg,&#xA;  title={How to train your ViT? Data, Augmentation, and Regularization in Vision Transformers},&#xA;  author={Steiner, Andreas and Kolesnikov, Alexander and and Zhai, Xiaohua and Wightman, Ross and Uszkoreit, Jakob and Beyer, Lucas},&#xA;  journal={arXiv preprint arXiv:2106.10270},&#xA;  year={2021}&#xA;}&#xA;&#xA;@article{chen2021outperform,&#xA;  title={When Vision Transformers Outperform ResNets without Pretraining or Strong Data Augmentations},&#xA;  author={Chen, Xiangning and Hsieh, Cho-Jui and Gong, Boqing},&#xA;  journal={arXiv preprint arXiv:2106.01548},&#xA;  year={2021},&#xA;}&#xA;&#xA;@article{zhuang2022gsam,&#xA;  title={Surrogate Gap Minimization Improves Sharpness-Aware Training},&#xA;  author={Zhuang, Juntang and Gong, Boqing and Yuan, Liangzhe and Cui, Yin and Adam, Hartwig and Dvornek, Nicha and Tatikonda, Sekhar and Duncan, James and Liu, Ting},&#xA;  journal={ICLR},&#xA;  year={2022},&#xA;}&#xA;&#xA;@article{zhai2022lit,&#xA;  title={LiT: Zero-Shot Transfer with Locked-image Text Tuning},&#xA;  author={Zhai, Xiaohua and Wang, Xiao and Mustafa, Basil and Steiner, Andreas and Keysers, Daniel and Kolesnikov, Alexander and Beyer, Lucas},&#xA;  journal={CVPR},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;p&gt;Open source release prepared by Andreas Steiner.&lt;/p&gt; &#xA;&lt;p&gt;Note: This repository was forked and modified from &lt;a href=&#34;https://github.com/google-research/big_transfer&#34;&gt;google-research/big_transfer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is not an official Google product.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lanl/quantum_algorithms</title>
    <updated>2022-07-07T01:44:32Z</updated>
    <id>tag:github.com,2022-07-07:/lanl/quantum_algorithms</id>
    <link href="https://github.com/lanl/quantum_algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Codes accompanying the paper &#34;Quantum algorithm implementations for beginners&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quantum Algorithms&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains codes accompanying the paper &#34;Quantum algorithm implementations for beginners&#34;, including circuit representations using OpenQASM (Open Quantum Assembly Language) that can be run on IBM Quantum Experience, as well as implementation of additional subroutines.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;If you find this code useful in your work, we kindly request that you cite the following &lt;a href=&#34;https://arxiv.org/abs/1804.03719&#34;&gt;paper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Abhijith J. et al. (2020). Quantum Algorithm Implementations for Beginners. arXiv preprint arXiv:1804.03719.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{coles2018quantum,&#xA;  title={Quantum algorithm implementations for beginners},&#xA;  author={Coles, Patrick J and Eidenbenz, Stephan and Pakin, Scott and Adedoyin, Adetokunbo and Ambrosiano, John and Anisimov, Petr and Casper, William and Chennupati, Gopinath and Coffrin, Carleton and Djidjev, Hristo and others},&#xA;  journal={arXiv preprint arXiv:1804.03719},&#xA;  year={2018}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is provided under a BSD license as part of the Hybrid Quantum-Classical Computing suite, known internally as LA-CC-16-032.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>milaan9/Machine_Learning_Algorithms_from_Scratch</title>
    <updated>2022-07-07T01:44:32Z</updated>
    <id>tag:github.com,2022-07-07:/milaan9/Machine_Learning_Algorithms_from_Scratch</id>
    <link href="https://github.com/milaan9/Machine_Learning_Algorithms_from_Scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository explores the variety of techniques and algorithms commonly used in machine learning and the implementation in MATLAB and PYTHON.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/milaan9&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?logo=github&amp;amp;label=maintainer&amp;amp;message=milaan9&amp;amp;color=ff3300&#34; alt=&#34;Last Commit&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://badges.pufler.dev/created/milaan9/Machine_Learning_Algorithms_from_Scratch&#34; alt=&#34;Created&#34;&gt; &lt;a href=&#34;https://github.com/milaan9/Machine_Learning_Algorithms_from_Scratch/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/milaan9/Python_Machine_Learning.svg?colorB=ff8000&amp;amp;style=flat&#34; alt=&#34;Last Commit&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/milaan9/Python_Machine_Learning/pulse&#34; alt=&#34;Activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/milaan9/Machine_Learning_Algorithms_from_Scratch.svg?colorB=teal&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fmilaan9%2FMachine_Learning_Algorithms_from_Scratch&amp;amp;count_bg=%231DC92C&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=views&amp;amp;edge_flat=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/milaan9/Machine_Learning_Algorithms_from_Scratch/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/milaan9/Python_Machine_Learning.svg?colorB=1a53ff&#34; alt=&#34;Stars Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/milaan9/Machine_Learning_Algorithms_from_Scratch/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/milaan9/Python_Machine_Learning&#34; alt=&#34;Forks Badge&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/milaan9/Machine_Learning_Algorithms_from_Scratch.svg?colorB=CC66FF&amp;amp;style=flat&#34; alt=&#34;Size&#34;&gt; &lt;a href=&#34;https://github.com/milaan9/Machine_Learning_Algorithms_from_Scratch/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/milaan9/Machine_Learning_Algorithms_from_Scratch.svg?colorB=yellow&amp;amp;style=flat&#34; alt=&#34;Pull Requests Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/milaan9/Machine_Learning_Algorithms_from_Scratch/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/milaan9/Machine_Learning_Algorithms_from_Scratch.svg?colorB=yellow&amp;amp;style=flat&#34; alt=&#34;Issues Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/milaan9/Machine_Learning_Algorithms_from_Scratch.svg?colorB=996600&amp;amp;style=flat&#34; alt=&#34;Language&#34;&gt; &lt;a href=&#34;https://github.com/milaan9/Machine_Learning_Algorithms_from_Scratch/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blueviolet.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!--&lt;img src=&#34;https://badges.pufler.dev/contributors/milaan9/01_Python_Introduction?size=50&amp;padding=5&amp;bots=true&#34; alt=&#34;milaan9&#34;/&gt;--&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://mybinder.org/v2/gh/milaan9/Machine_Learning_Algorithms_from_Scratch/HEAD&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;binder&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://githubtocolab.com/milaan9/Machine_Learning_Algorithms_from_Scratch&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;colab&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Python_Machine_Learning_Algorithms_from_Scratch&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction 👋&lt;/h2&gt; &#xA;&lt;p&gt;This repository explores the variety of techniques anf alorithm commonly used in machine learning and the implementation in MATLAB and PYTHON.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of contents 📋&lt;/h2&gt; &#xA;&lt;p&gt;Alogrithm used are :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Decision Trees and Random Forest Classifier&lt;/li&gt; &#xA; &lt;li&gt;Naive Bayes Classifier&lt;/li&gt; &#xA; &lt;li&gt;Gaussian Naive Bayes Calssifier&lt;/li&gt; &#xA; &lt;li&gt;Mixture Of Gaussians using EM Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Neural Network&lt;/li&gt; &#xA; &lt;li&gt;Singular Value Decomposition&lt;/li&gt; &#xA; &lt;li&gt;Principal Component Analysis&lt;/li&gt; &#xA; &lt;li&gt;Fitting the data to a 1D Gaussian&lt;/li&gt; &#xA; &lt;li&gt;Fitting the data to a 2D Gaussian&lt;/li&gt; &#xA; &lt;li&gt;K Nearest Neighbours&lt;/li&gt; &#xA; &lt;li&gt;Linear Regression&lt;/li&gt; &#xA; &lt;li&gt;Logistic Regression&lt;/li&gt; &#xA; &lt;li&gt;K-Mean Clustering&lt;/li&gt; &#xA; &lt;li&gt;Value-Iteration-Method&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Time Warping&lt;/li&gt; &#xA; &lt;li&gt;Error Function and Regularisation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These are online &lt;strong&gt;read-only&lt;/strong&gt; versions. However you can &lt;strong&gt;&lt;code&gt;Run ▶&lt;/code&gt;&lt;/strong&gt; all the codes &lt;strong&gt;online&lt;/strong&gt; by clicking here ➞ &lt;a href=&#34;https://mybinder.org/v2/gh/milaan9/Machine_Learning_Algorithms_from_Scratch/HEAD&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;binder&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommendation for ML Enthusiasts: &lt;strong&gt;&lt;a href=&#34;https://www.udemy.com/machinelearning/&#34;&gt;Machine Learning A-Z™: Hands-On Python &amp;amp; R In Data Science&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Frequently asked questions ❔&lt;/h2&gt; &#xA;&lt;h3&gt;How can I thank you for writing and sharing this tutorial? 🌷&lt;/h3&gt; &#xA;&lt;p&gt;You can &lt;img src=&#34;https://img.shields.io/static/v1?label=%E2%AD%90 Star &amp;amp;message=if%20useful&amp;amp;style=style=flat&amp;amp;color=blue&#34; alt=&#34;Star Badge&#34;&gt; and &lt;img src=&#34;https://img.shields.io/static/v1?label=%E2%B5%96 Fork &amp;amp;message=if%20useful&amp;amp;style=style=flat&amp;amp;color=blue&#34; alt=&#34;Fork Badge&#34;&gt; Starring and Forking is free for you, but it tells me and other people that it was helpful and you like this tutorial.&lt;/p&gt; &#xA;&lt;p&gt;Go &lt;a href=&#34;https://github.com/milaan9/Python_Machine_Learning&#34;&gt;&lt;strong&gt;&lt;code&gt;here&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; if you aren&#39;t here already and click ➞ &lt;strong&gt;&lt;code&gt;✰ Star&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;ⵖ Fork&lt;/code&gt;&lt;/strong&gt; button in the top right corner. You will be asked to create a GitHub account if you don&#39;t already have one.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;How can I read this tutorial without an Internet connection? &lt;img alt=&#34;GIF&#34; src=&#34;https://github.com/TheDudeThatCode/TheDudeThatCode/raw/master/Assets/hmm.gif&#34; width=&#34;20&#34;&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Go &lt;a href=&#34;https://github.com/milaan9/Python_Machine_Learning&#34;&gt;&lt;strong&gt;&lt;code&gt;here&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; and click the big green ➞ &lt;strong&gt;&lt;code&gt;Code&lt;/code&gt;&lt;/strong&gt; button in the top right of the page, then click ➞ &lt;a href=&#34;https://github.com/milaan9/Python_Machine_Learning/archive/refs/heads/main.zip&#34;&gt;&lt;strong&gt;&lt;code&gt;Download ZIP&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milaan9/Machine_Learning_Algorithms_from_Scratch/master/img/dnld_rep.png&#34; alt=&#34;Download ZIP&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the ZIP and open it. Unfortunately I don&#39;t have any more specific instructions because how exactly this is done depends on which operating system you run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch ipython notebook from the folder which contains the notebooks. Open each one of them&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Kernel &amp;gt; Restart &amp;amp; Clear Output&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will clear all the outputs and now you can understand each statement and learn interactively.&lt;/p&gt; &#xA;&lt;p&gt;If you have git and you know how to use it, you can also clone the repository instead of downloading a zip and extracting it. An advantage with doing it this way is that you don&#39;t need to download the whole tutorial again to get the latest version of it, all you need to do is to pull with git and run ipython notebook again.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Authors ✍️&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m Dr. Milaan Parmar and I have written this tutorial. If you think you can add/correct/edit and enhance this tutorial you are most welcome🙏&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/milaan9/Python_Machine_Learning/graphs/contributors&#34;&gt;github&#39;s contributors page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;If you have trouble with this tutorial please tell me about it by &lt;a href=&#34;https://github.com/milaan9/Python_Machine_Learning/issues/new&#34;&gt;Create an issue on GitHub&lt;/a&gt;. and I&#39;ll make this tutorial better. This is probably the best choice if you had trouble following the tutorial, and something in it should be explained better. You will be asked to create a GitHub account if you don&#39;t already have one.&lt;/p&gt; &#xA;&lt;p&gt;If you like this tutorial, please &lt;a href=&#34;https://github.com/milaan9/Python_Machine_Learning&#34;&gt;give it a ⭐ star&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Licence 📜&lt;/h2&gt; &#xA;&lt;p&gt;You may use this tutorial freely at your own risk. See &lt;a href=&#34;https://raw.githubusercontent.com/milaan9/Machine_Learning_Algorithms_from_Scratch/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;. Copyright (c) 2020 Dr. Milan Parmar&lt;/p&gt;</summary>
  </entry>
</feed>