<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-02T01:28:31Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nimashahbazi/optiver-trading-close</title>
    <updated>2024-05-02T01:28:31Z</updated>
    <id>tag:github.com,2024-05-02:/nimashahbazi/optiver-trading-close</id>
    <link href="https://github.com/nimashahbazi/optiver-trading-close" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Optiver Trading at the Close Analysis with LSTM and ConvNet&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains two machine learning models developed for analyzing Optiver trading at the close on Kaggle &lt;a href=&#34;https://www.kaggle.com/competitions/optiver-trading-at-the-close/overview&#34;&gt;Optiver Trading at the Close Competition Overview&lt;/a&gt;: a Long Short-Term Memory (LSTM) model and a Convolutional Neural Network (ConvNet) model. Both models are designed to predict stock return using raw features without any feature engineering and a small set of imbalance features only.&lt;/p&gt; &#xA;&lt;h2&gt;LSTM Model&lt;/h2&gt; &#xA;&lt;p&gt;The LSTM model is built using raw features along with target lag. This model emphasizes the temporal sequence of the data, capturing patterns over time without extensive feature engineering.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: The model achieved a score of 5.3508 on the public leaderboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: Utilizes raw features and target lag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notebook&lt;/strong&gt;: The model&#39;s implementation can be found on Kaggle under the username &lt;code&gt;nimashahbazi&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ConvNet Model&lt;/h2&gt; &#xA;&lt;p&gt;The ConvNet model, in contrast, incorporates imbalance features only with raw feature&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: This model scored 5.3439 on the public leaderboard, the key performace comes from the residual part.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: Includes imbalance features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Improvement Suggestion&lt;/strong&gt;: By adding couple more features like global stock mapping, the performance could easily reach 5.33X.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notebook&lt;/strong&gt;: The ConvNet model&#39;s implementation is also available on Kaggle under the username &lt;code&gt;nimashahbazi&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;These models are publicly available for review and improvement. To access the notebooks and explore the models:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit the Kaggle platform.&lt;/li&gt; &#xA; &lt;li&gt;Search for the username &lt;code&gt;nimashahbazi&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the respective notebooks for the LSTM and ConvNet models.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>