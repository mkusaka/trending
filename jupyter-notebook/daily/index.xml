<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-07T01:39:28Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mlfoundations/open_clip</title>
    <updated>2023-05-07T01:39:28Z</updated>
    <id>tag:github.com,2023-05-07:/mlfoundations/open_clip</id>
    <link href="https://github.com/mlfoundations/open_clip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source implementation of CLIP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenCLIP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2212.07143&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/Interacting_with_open_clip.ipynb&#34;&gt;[Clip Colab]&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/Interacting_with_open_coca.ipynb&#34;&gt;[Coca Colab]&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/open_clip_torch&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/open_clip_torch.svg?sanitize=true&#34; alt=&#34;pypi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to an open source implementation of OpenAI&#39;s &lt;a href=&#34;https://arxiv.org/abs/2103.00020&#34;&gt;CLIP&lt;/a&gt; (Contrastive Language-Image Pre-training).&lt;/p&gt; &#xA;&lt;p&gt;The goal of this repository is to enable training models with contrastive image-text supervision, and to investigate their properties such as robustness to distribution shift. Our starting point is an implementation of CLIP that matches the accuracy of the original CLIP models when trained on the same dataset. Specifically, a ResNet-50 model trained with our codebase on OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/CLIP/raw/main/data/yfcc100m.md&#34;&gt;15 million image subset of YFCC&lt;/a&gt; achieves &lt;strong&gt;32.7%&lt;/strong&gt; top-1 accuracy on ImageNet. OpenAI&#39;s CLIP model reaches &lt;strong&gt;31.3%&lt;/strong&gt; when trained on the same subset of YFCC. For ease of experimentation, we also provide code for training on the 3 million images in the &lt;a href=&#34;https://ai.google.com/research/ConceptualCaptions/download&#34;&gt;Conceptual Captions&lt;/a&gt; dataset, where a ResNet-50x4 trained with our codebase reaches 22.2% top-1 ImageNet accuracy.&lt;/p&gt; &#xA;&lt;p&gt;We further this with a replication study on a dataset of comparable size to OpenAI&#39;s, &lt;a href=&#34;https://arxiv.org/abs/2111.02114&#34;&gt;LAION-400M&lt;/a&gt;, and with larger datasets such as &lt;a href=&#34;https://laion.ai/blog/laion-5b/&#34;&gt;LAION-2B&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2304.14108&#34;&gt;DataComp-1B&lt;/a&gt; datasets. In addition, we study scaling behavior in a paper on &lt;a href=&#34;https://arxiv.org/abs/2212.07143&#34;&gt;reproducible scaling laws for contrastive language-image learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have trained the following ViT CLIP models:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ViT-B/32 on LAION-400M with a accuracy of &lt;strong&gt;62.9%&lt;/strong&gt;, comparable to OpenAI&#39;s &lt;strong&gt;63.2%&lt;/strong&gt;, zero-shot top-1 on ImageNet-1k&lt;/li&gt; &#xA; &lt;li&gt;ViT-B/32 on LAION-2B with a accuracy of &lt;strong&gt;66.6%&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ViT-B/16 on LAION-400M achieving an accuracy of &lt;strong&gt;67.1%&lt;/strong&gt;, lower than OpenAI&#39;s &lt;strong&gt;68.3%&lt;/strong&gt; (as measured here, 68.6% in paper)&lt;/li&gt; &#xA; &lt;li&gt;ViT-B/16+ 240x240 (~50% more FLOPS than B/16 224x224) on LAION-400M achieving an accuracy of &lt;strong&gt;69.2%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ViT-B/16 on LAION-2B with a accuracy of &lt;strong&gt;70.2%&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ViT-L/14 on LAION-400M with an accuracy of &lt;strong&gt;72.77%&lt;/strong&gt;, vs OpenAI&#39;s &lt;strong&gt;75.5%&lt;/strong&gt; (as measured here, 75.3% in paper)&lt;/li&gt; &#xA; &lt;li&gt;ViT-L/14 on LAION-2B with an accuracy of &lt;strong&gt;75.3%&lt;/strong&gt;, vs OpenAI&#39;s &lt;strong&gt;75.5%&lt;/strong&gt; (as measured here, 75.3% in paper)&lt;/li&gt; &#xA; &lt;li&gt;ViT-L/14 on &lt;a href=&#34;https://github.com/mlfoundations/datacomp&#34;&gt;DataComp-1B&lt;/a&gt; with an accuracy of &lt;strong&gt;79.2%&lt;/strong&gt;. Our best ViT-L/14 so far, trained with a 13B samples seen schedule.&lt;/li&gt; &#xA; &lt;li&gt;CoCa ViT-L/14 on LAION-2B with an accuracy of &lt;strong&gt;75.5%&lt;/strong&gt; (currently only 13B samples seen) vs. CLIP ViT-L/14 73.1% (on the same dataset and samples seen)&lt;/li&gt; &#xA; &lt;li&gt;ViT-H/14 on LAION-2B with an accuracy of &lt;strong&gt;78.0%&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ViT-g/14 on LAION-2B with an accuracy of &lt;strong&gt;76.6%&lt;/strong&gt;. This was trained on reduced 12B samples seen schedule, same samples seen as 400M models.&lt;/li&gt; &#xA; &lt;li&gt;ViT-g/14 on LAION-2B with an accuracy of &lt;strong&gt;78.5%&lt;/strong&gt;. Full 34B samples seen schedule.&lt;/li&gt; &#xA; &lt;li&gt;ViT-G/14 on LAION-2B with an accuracy of &lt;strong&gt;80.1%&lt;/strong&gt;. The best in1k zero-shot for released, open-source weights thus far.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the following ConvNeXt CLIP models:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ConvNext-Base @ 224x224 on LAION-400M with an ImageNet-1k zero-shot top-1 of &lt;strong&gt;66.3%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Base (W) @ 256x256 on LAION-2B with an ImageNet-1k zero-shot top-1 of &lt;strong&gt;70.8%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Base (W) @ 256x256 /w augreg (extra augmentation + regularization) on LAION-2B with a top-1 of &lt;strong&gt;71.5%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Base (W) @ 256x256 on LAION-A (900M sample aesthetic subset of 2B) with a top-1 of &lt;strong&gt;71.0%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Base (W) @ 320x320 on LAION-A with a top-1 of &lt;strong&gt;71.7%&lt;/strong&gt; (eval at 384x384 is &lt;strong&gt;71.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Base (W) @ 320x320 /w augreg on LAION-A with a top-1 of &lt;strong&gt;71.3%&lt;/strong&gt; (eval at 384x384 is &lt;strong&gt;72.2%&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Large (D) @ 256x256 /w augreg on LAION-2B with a top-1 of &lt;strong&gt;75.9%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Large (D) @ 320x320 fine-tune of 256x256 weights above for ~2.5B more samples on LAION-2B, top-1 of &lt;strong&gt;76.6%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-Large (D) @ 320x320 soup of 3 fine-tunes of 256x256 weights above on LAION-2B, top-1 of &lt;strong&gt;76.9%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-XXLarge @ 256x256 original run &lt;strong&gt;79.1%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-XXLarge @ 256x256 rewind of last 10% &lt;strong&gt;79.3%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNext-XXLarge @ 256x256 soup of original + rewind &lt;strong&gt;79.4%&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Model cards w/ additional model specific details can be found on the Hugging Face Hub under the OpenCLIP library tag: &lt;a href=&#34;https://huggingface.co/models?library=open_clip&#34;&gt;https://huggingface.co/models?library=open_clip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As we describe in more detail &lt;a href=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/#why-are-low-accuracy-clip-models-interesting&#34;&gt;below&lt;/a&gt;, CLIP models in a medium accuracy regime already allow us to draw conclusions about the robustness of larger CLIP models since the models follow &lt;a href=&#34;https://arxiv.org/abs/2107.04649&#34;&gt;reliable scaling laws&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This codebase is work in progress, and we invite all to contribute in making it more accessible and useful. In the future, we plan to add support for TPU training and release larger models. We hope this codebase facilitates and promotes further research in contrastive image-text learning. Please submit an issue or send an email if you have any other requests or suggestions.&lt;/p&gt; &#xA;&lt;p&gt;Note that portions of &lt;code&gt;src/open_clip/&lt;/code&gt; modelling and tokenizer code are adaptations of OpenAI&#39;s official &lt;a href=&#34;https://github.com/openai/CLIP&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Approach&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/CLIP.png&#34; alt=&#34;CLIP&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Image Credit: &lt;a href=&#34;https://github.com/openai/CLIP&#34;&gt;https://github.com/openai/CLIP&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install open_clip_torch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from PIL import Image&#xA;import open_clip&#xA;&#xA;model, _, preprocess = open_clip.create_model_and_transforms(&#39;ViT-B-32&#39;, pretrained=&#39;laion2b_s34b_b79k&#39;)&#xA;tokenizer = open_clip.get_tokenizer(&#39;ViT-B-32&#39;)&#xA;&#xA;image = preprocess(Image.open(&#34;CLIP.png&#34;)).unsqueeze(0)&#xA;text = tokenizer([&#34;a diagram&#34;, &#34;a dog&#34;, &#34;a cat&#34;])&#xA;&#xA;with torch.no_grad(), torch.cuda.amp.autocast():&#xA;    image_features = model.encode_image(image)&#xA;    text_features = model.encode_text(text)&#xA;    image_features /= image_features.norm(dim=-1, keepdim=True)&#xA;    text_features /= text_features.norm(dim=-1, keepdim=True)&#xA;&#xA;    text_probs = (100.0 * image_features @ text_features.T).softmax(dim=-1)&#xA;&#xA;print(&#34;Label probs:&#34;, text_probs)  # prints: [[1., 0., 0.]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also this &lt;a href=&#34;https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/Interacting_with_open_clip.ipynb&#34;&gt;[Clip Colab]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To compute billions of embeddings efficiently, you can use &lt;a href=&#34;https://github.com/rom1504/clip-retrieval&#34;&gt;clip-retrieval&lt;/a&gt; which has openclip support.&lt;/p&gt; &#xA;&lt;h2&gt;Fine-tuning on classification tasks&lt;/h2&gt; &#xA;&lt;p&gt;This repository is focused on training CLIP models. To fine-tune a &lt;em&gt;trained&lt;/em&gt; zero-shot model on a downstream classification task such as ImageNet, please see &lt;a href=&#34;https://github.com/mlfoundations/wise-ft&#34;&gt;our other repository: WiSE-FT&lt;/a&gt;. The &lt;a href=&#34;https://github.com/mlfoundations/wise-ft&#34;&gt;WiSE-FT repository&lt;/a&gt; contains code for our paper on &lt;a href=&#34;https://arxiv.org/abs/2109.01903&#34;&gt;Robust Fine-tuning of Zero-shot Models&lt;/a&gt;, in which we introduce a technique for fine-tuning zero-shot models while preserving robustness under distribution shift.&lt;/p&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;To download datasets as webdataset, we recommend &lt;a href=&#34;https://github.com/rom1504/img2dataset&#34;&gt;img2dataset&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Conceptual Captions&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rom1504/img2dataset/raw/main/dataset_examples/cc3m.md&#34;&gt;cc3m img2dataset example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;YFCC and other datasets&lt;/h3&gt; &#xA;&lt;p&gt;In addition to specifying the training data via CSV files as mentioned above, our codebase also supports &lt;a href=&#34;https://github.com/webdataset/webdataset&#34;&gt;webdataset&lt;/a&gt;, which is recommended for larger scale datasets. The expected format is a series of &lt;code&gt;.tar&lt;/code&gt; files. Each of these &lt;code&gt;.tar&lt;/code&gt; files should contain two files for each training example, one for the image and one for the corresponding text. Both files should have the same name but different extensions. For instance, &lt;code&gt;shard_001.tar&lt;/code&gt; could contain files such as &lt;code&gt;abc.jpg&lt;/code&gt; and &lt;code&gt;abc.txt&lt;/code&gt;. You can learn more about &lt;code&gt;webdataset&lt;/code&gt; at &lt;a href=&#34;https://github.com/webdataset/webdataset&#34;&gt;https://github.com/webdataset/webdataset&lt;/a&gt;. We use &lt;code&gt;.tar&lt;/code&gt; files with 1,000 data points each, which we create using &lt;a href=&#34;https://github.com/webdataset/tarp&#34;&gt;tarp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can download the YFCC dataset from &lt;a href=&#34;http://mmcommons.org/&#34;&gt;Multimedia Commons&lt;/a&gt;. Similar to OpenAI, we used a subset of YFCC to reach the aforementioned accuracy numbers. The indices of images in this subset are in &lt;a href=&#34;https://github.com/openai/CLIP/raw/main/data/yfcc100m.md&#34;&gt;OpenAI&#39;s CLIP repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training CLIP&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;We advise you first create a virtual environment with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv .env&#xA;source .env/bin/activate&#xA;pip install -U pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then install openclip for training with &lt;code&gt;pip install &#39;open_clip_torch[training]&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Development&lt;/h4&gt; &#xA;&lt;p&gt;If you want to make changes to contribute code, you can close openclip then run &lt;code&gt;make install&lt;/code&gt; in openclip folder (after creating a virtualenv)&lt;/p&gt; &#xA;&lt;p&gt;Install pip PyTorch as per &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may run &lt;code&gt;make install-training&lt;/code&gt; to install training deps&lt;/p&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;Test can be run with &lt;code&gt;make install-test&lt;/code&gt; then &lt;code&gt;make test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;python -m pytest -x -s -v tests -k &#34;training&#34;&lt;/code&gt; to run a specific test&lt;/p&gt; &#xA;&lt;p&gt;Running regression tests against a specific git revision or tag:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate testing data&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python tests/util_test.py --model RN50 RN101 --save_model_list models.txt --git_revision 9d31b2ec4df6d8228f370ff20c8267ec6ba39383&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;WARNING&lt;/em&gt;: This will invoke git and modify your working tree, but will reset it to the current state after data has been generated! &lt;br&gt; Don&#39;t modify your working tree while test data is being generated this way.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run regression tests&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;OPEN_CLIP_TEST_REG_MODELS=models.txt python -m pytest -x -s -v -m regression_test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Sample single-process running code:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --save-frequency 1 \&#xA;    --zeroshot-frequency 1 \&#xA;    --report-to tensorboard \&#xA;    --train-data=&#34;/path/to/train_data.csv&#34;  \&#xA;    --val-data=&#34;/path/to/validation_data.csv&#34;  \&#xA;    --csv-img-key filepath \&#xA;    --csv-caption-key title \&#xA;    --imagenet-val=/path/to/imagenet/root/val/ \&#xA;    --warmup 10000 \&#xA;    --batch-size=128 \&#xA;    --lr=1e-3 \&#xA;    --wd=0.1 \&#xA;    --epochs=30 \&#xA;    --workers=8 \&#xA;    --model RN50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;imagenet-val&lt;/code&gt; is the path to the &lt;em&gt;validation&lt;/em&gt; set of ImageNet for zero-shot evaluation, not the training set! You can remove this argument if you do not want to perform zero-shot evaluation on ImageNet throughout training. Note that the &lt;code&gt;val&lt;/code&gt; folder should contain subfolders. If it doest not, please use &lt;a href=&#34;https://raw.githubusercontent.com/soumith/imagenetloader.torch/master/valprep.sh&#34;&gt;this script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-GPU and Beyond&lt;/h3&gt; &#xA;&lt;p&gt;This code has been battle tested up to 1024 A100s and offers a variety of solutions for distributed training. We include native support for SLURM clusters.&lt;/p&gt; &#xA;&lt;p&gt;As the number of devices used to train increases, so does the space complexity of the the logit matrix. Using a naïve all-gather scheme, space complexity will be &lt;code&gt;O(n^2)&lt;/code&gt;. Instead, complexity may become effectively linear if the flags &lt;code&gt;--gather-with-grad&lt;/code&gt; and &lt;code&gt;--local-loss&lt;/code&gt; are used. This alteration results in one-to-one numerical results as the naïve method.&lt;/p&gt; &#xA;&lt;h4&gt;Epochs&lt;/h4&gt; &#xA;&lt;p&gt;For larger datasets (eg Laion2B), we recommend setting --train-num-samples to a lower value than the full epoch, for example &lt;code&gt;--train-num-samples 135646078&lt;/code&gt; to 1/16 of an epoch in conjunction with --dataset-resampled to do sampling with replacement. This allows having frequent checkpoints to evaluate more often.&lt;/p&gt; &#xA;&lt;h4&gt;Patch Dropout&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2212.00794&#34;&gt;Recent research&lt;/a&gt; has shown that one can dropout half to three-quarters of the visual tokens, leading to up to 2-3x training speeds without loss of accuracy.&lt;/p&gt; &#xA;&lt;p&gt;You can set this on your visual transformer config with the key &lt;code&gt;patch_dropout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the paper, they also finetuned without the patch dropout at the end. You can do this with the command-line argument &lt;code&gt;--force-patch-dropout 0.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Multiple data sources&lt;/h4&gt; &#xA;&lt;p&gt;OpenCLIP supports using multiple data sources, by separating different data paths with &lt;code&gt;::&lt;/code&gt;. For instance, to train on CC12M and on LAION, one might use &lt;code&gt;--train-data &#39;/data/cc12m/cc12m-train-{0000..2175}.tar&#39;::/data/LAION-400M/{00000..41455}.tar&#34;&lt;/code&gt;. Using &lt;code&gt;--dataset-resampled&lt;/code&gt; is recommended for these cases.&lt;/p&gt; &#xA;&lt;p&gt;By default, on expectation the amount of times the model will see a sample from each source is proportional to the size of the source. For instance, when training on one data source with size 400M and one with size 10M, samples from the first source are 40x more likely to be seen in expectation.&lt;/p&gt; &#xA;&lt;p&gt;We also support different weighting of the data sources, by using the &lt;code&gt;--train-data-upsampling-factors&lt;/code&gt; flag. For instance, using &lt;code&gt;--train-data-upsampling-factors=1::1&lt;/code&gt; in the above scenario is equivalent to not using the flag, and &lt;code&gt;--train-data-upsampling-factors=1::2&lt;/code&gt; is equivalent to upsampling the second data source twice. If you want to sample from data sources with the same frequency, the upsampling factors should be inversely proportional to the sizes of the data sources. For instance, if dataset &lt;code&gt;A&lt;/code&gt; has 1000 samples and dataset &lt;code&gt;B&lt;/code&gt; has 100 samples, you can use &lt;code&gt;--train-data-upsampling-factors=0.001::0.01&lt;/code&gt; (or analogously, &lt;code&gt;--train-data-upsampling-factors=1::10&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Single-Node&lt;/h4&gt; &#xA;&lt;p&gt;We make use of &lt;code&gt;torchrun&lt;/code&gt; to launch distributed jobs. The following launches a a job on a node of 4 GPUs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd open_clip/src&#xA;torchrun --nproc_per_node 4 -m training.main \&#xA;    --train-data &#39;/data/cc12m/cc12m-train-{0000..2175}.tar&#39; \&#xA;    --train-num-samples 10968539 \&#xA;    --dataset-type webdataset \&#xA;    --batch-size 320 \&#xA;    --precision amp \&#xA;    --workers 4 \&#xA;    --imagenet-val /data/imagenet/validation/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-Node&lt;/h4&gt; &#xA;&lt;p&gt;The same script above works, so long as users include information about the number of nodes and host node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd open_clip/src&#xA;torchrun --nproc_per_node=4 \&#xA;    --rdzv_endpoint=$HOSTE_NODE_ADDR \&#xA;    -m training.main \&#xA;    --train-data &#39;/data/cc12m/cc12m-train-{0000..2175}.tar&#39; \&#xA;    --train-num-samples 10968539 \&#xA;    --dataset-type webdataset \&#xA;    --batch-size 320 \&#xA;    --precision amp \&#xA;    --workers 4 \&#xA;    --imagenet-val /data/imagenet/validation/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SLURM&lt;/h4&gt; &#xA;&lt;p&gt;This is likely the easiest solution to utilize. The following script was used to train our largest models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash -x&#xA;#SBATCH --nodes=32&#xA;#SBATCH --gres=gpu:4&#xA;#SBATCH --ntasks-per-node=4&#xA;#SBATCH --cpus-per-task=6&#xA;#SBATCH --wait-all-nodes=1&#xA;#SBATCH --job-name=open_clip&#xA;#SBATCH --account=ACCOUNT_NAME&#xA;#SBATCH --partition PARTITION_NAME&#xA;&#xA;eval &#34;$(/path/to/conda/bin/conda shell.bash hook)&#34; # init conda&#xA;conda activate open_clip&#xA;export CUDA_VISIBLE_DEVICES=0,1,2,3&#xA;export MASTER_PORT=12802&#xA;&#xA;master_addr=$(scontrol show hostnames &#34;$SLURM_JOB_NODELIST&#34; | head -n 1)&#xA;export MASTER_ADDR=$master_addr&#xA;&#xA;cd /shared/open_clip&#xA;export PYTHONPATH=&#34;$PYTHONPATH:$PWD/src&#34;&#xA;srun --cpu_bind=v --accel-bind=gn python -u src/training/main.py \&#xA;    --save-frequency 1 \&#xA;    --report-to tensorboard \&#xA;    --train-data=&#34;/data/LAION-400M/{00000..41455}.tar&#34; \&#xA;    --warmup 2000 \&#xA;    --batch-size=256 \&#xA;    --epochs=32 \&#xA;    --workers=8 \&#xA;    --model ViT-B-32 \&#xA;    --name &#34;ViT-B-32-Vanilla&#34; \&#xA;    --seed 0 \&#xA;    --local-loss \&#xA;    --gather-with-grad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resuming from a checkpoint:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --train-data=&#34;/path/to/train_data.csv&#34; \&#xA;    --val-data=&#34;/path/to/validation_data.csv&#34;  \&#xA;    --resume /path/to/checkpoints/epoch_K.pt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training CoCa:&lt;/h3&gt; &#xA;&lt;p&gt;Training &lt;a href=&#34;https://arxiv.org/abs/2205.01917&#34;&gt;CoCa&lt;/a&gt; models is enabled through specifying a CoCa config using the &lt;code&gt;--model&lt;/code&gt; parameter of the training script. Currently available configs are &#34;coca_base&#34;, &#34;coca_ViT-B-32&#34;, and &#34;coca_roberta-ViT-B-32&#34; (which uses RoBERTa as the text encoder). CoCa configs are different from CLIP configs because they have an additional &#34;multimodal_cfg&#34; component which specifies parameters for the multimodal text decoder. Here&#39;s an example from the coca_ViT-B-32 config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;multimodal_cfg&#34;: {&#xA;&#x9;&#34;context_length&#34;: 76,&#xA;&#x9;&#34;vocab_size&#34;: 49408,&#xA;&#x9;&#34;width&#34;: 512,&#xA;&#x9;&#34;heads&#34;: 8,&#xA;&#x9;&#34;layers&#34;: 12,&#xA;&#x9;&#34;latent_dim&#34;: 512,&#xA;&#x9;&#34;attn_pooler_heads&#34;: 8&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Credit to &lt;a href=&#34;https://github.com/lucidrains&#34;&gt;lucidrains&lt;/a&gt; for &lt;a href=&#34;https://github.com/lucidrains/CoCa-pytorch&#34;&gt;initial code&lt;/a&gt;, &lt;a href=&#34;https://github.com/gpucce&#34;&gt;gpucce&lt;/a&gt; for adapting the code to open_clip, and &lt;a href=&#34;https://github.com/iejMac&#34;&gt;iejMac&lt;/a&gt; for training the models.&lt;/p&gt; &#xA;&lt;h3&gt;Generating text with CoCa&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import open_clip&#xA;import torch&#xA;from PIL import Image&#xA;&#xA;model, _, transform = open_clip.create_model_and_transforms(&#xA;  model_name=&#34;coca_ViT-L-14&#34;,&#xA;  pretrained=&#34;mscoco_finetuned_laion2B-s13B-b90k&#34;&#xA;)&#xA;&#xA;im = Image.open(&#34;cat.jpg&#34;).convert(&#34;RGB&#34;)&#xA;im = transform(im).unsqueeze(0)&#xA;&#xA;with torch.no_grad(), torch.cuda.amp.autocast():&#xA;  generated = model.generate(im)&#xA;&#xA;print(open_clip.decode(generated[0]).split(&#34;&amp;lt;end_of_text&amp;gt;&#34;)[0].replace(&#34;&amp;lt;start_of_text&amp;gt;&#34;, &#34;&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also this &lt;a href=&#34;https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/Interacting_with_open_coca.ipynb&#34;&gt;[Coca Colab]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fine Tuning CoCa&lt;/h3&gt; &#xA;&lt;p&gt;To fine-tune coca on mscoco, first create the dataset, one way is using a csvdataset and perhaps the simplest way to do it is using &lt;a href=&#34;https://github.com/LAION-AI/CLIP_benchmark&#34;&gt;CLIP_benchmark&lt;/a&gt; which in turn uses &lt;a href=&#34;https://github.com/cocodataset/cocoapi&#34;&gt;pycocotools&lt;/a&gt; (that can be used also by itself).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from clip_benchmark.datasets.builder import build_dataset&#xA;import pandas as pd&#xA;import os&#xA;&#xA;root_path = &#34;path/to/data/dir&#34; # set this to smth meaningful&#xA;ds = build_dataset(&#34;mscoco_captions&#34;, root=root_path, split=&#34;train&#34;) # this downloads the dataset if it is not there already&#xA;coco = ds.coco&#xA;imgs = coco.loadImgs(coco.getImgIds())&#xA;future_df = {&#34;filepath&#34;:[], &#34;title&#34;:[]}&#xA;for img in imgs:&#xA;    caps = coco.imgToAnns[img[&#34;id&#34;]]&#xA;    for cap in caps:&#xA;        future_df[&#34;filepath&#34;].append(img[&#34;file_name&#34;])&#xA;        future_df[&#34;title&#34;].append(cap[&#34;caption&#34;])&#xA;pd.DataFrame.from_dict(future_df).to_csv(&#xA;  os.path.join(root_path, &#34;train2014.csv&#34;), index=False, sep=&#34;\t&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should create a csv dataset that one can use to fine-tune coca with open_clip&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --dataset-type &#34;csv&#34; \&#xA;    --train-data &#34;path/to/data/dir/train2014.csv&#34; \&#xA;    --warmup 1000 \&#xA;    --batch-size 128 \&#xA;    --lr 1e-5 \&#xA;    --wd 0.1 \&#xA;    --epochs 1 \&#xA;    --workers 3 \&#xA;    --model &#34;coca_ViT-L-14&#34; \&#xA;    --report-to &#34;wandb&#34; \&#xA;    --coca-contrastive-loss-weight 0 \&#xA;    --coca-caption-loss-weight 1 \&#xA;    --log-every-n-steps 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a general setting, open_clip has very parameters that can be set, &lt;code&gt;python -m training.main --help&lt;/code&gt; should show them. The only relevant change compared to pre-training are the two arguments&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--coca-contrastive-loss-weight 0&#xA;--coca-caption-loss-weight 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which make the model only train the generative side.&lt;/p&gt; &#xA;&lt;h3&gt;Training with pre-trained language models as text encoder:&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to use different language models as the text encoder for CLIP you can do so by using one of the Hugging Face model configs in &lt;code&gt;src/open_clip/model_configs&lt;/code&gt; and passing in it&#39;s tokenizer as the &lt;code&gt;--model&lt;/code&gt; and &lt;code&gt;--hf-tokenizer-name&lt;/code&gt; parameters respectively. Currently we only support RoBERTa (&#34;test-roberta&#34; config), however adding new models should be trivial. You can also determine how many layers, from the end, to leave unfrozen with the &lt;code&gt;--lock-text-unlocked-layers&lt;/code&gt; parameter. Here&#39;s an example command to train CLIP with the RoBERTa LM that has it&#39;s last 10 layers unfrozen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;         --train-data=&#34;pipe:aws s3 cp s3://s-mas/cc3m/{00000..00329}.tar -&#34; \&#xA;         --train-num-samples 3000000 \&#xA;         --val-data=&#34;pipe:aws s3 cp s3://s-mas/cc3m/{00330..00331}.tar -&#34; \&#xA;         --val-num-samples 10000 \&#xA;         --dataset-type webdataset \&#xA;         --batch-size 256 \&#xA;         --warmup 2000 \&#xA;         --epochs 10 \&#xA;         --lr 5e-4 \&#xA;         --precision amp \&#xA;         --workers 6 \&#xA;         --model &#34;roberta-ViT-B-32&#34; \&#xA;         --lock-text \&#xA;         --lock-text-unlocked-layers 10 \&#xA;         --name &#34;10_unfrozen&#34; \&#xA;         --report-to &#34;tensorboard&#34; \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Loss Curves&lt;/h3&gt; &#xA;&lt;p&gt;When run on a machine with 8 GPUs the command should produce the following training curve for Conceptual Captions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/clip_zeroshot.png&#34; alt=&#34;CLIP zero shot training curve&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More detailed curves for Conceptual Captions are given at &lt;a href=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/clip_conceptual_captions.md&#34;&gt;/docs/clip_conceptual_captions.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When training a RN50 on YFCC the same hyperparameters as above are used, with the exception of &lt;code&gt;lr=5e-4&lt;/code&gt; and &lt;code&gt;epochs=32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that to use another model, like &lt;code&gt;ViT-B/32&lt;/code&gt; or &lt;code&gt;RN50x4&lt;/code&gt; or &lt;code&gt;RN50x16&lt;/code&gt; or &lt;code&gt;ViT-B/16&lt;/code&gt;, specify with &lt;code&gt;--model RN50x4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Launch tensorboard:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tensorboard --logdir=logs/tensorboard/ --port=7777&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation / Zero-Shot&lt;/h2&gt; &#xA;&lt;p&gt;We recommend &lt;a href=&#34;https://github.com/LAION-AI/CLIP_benchmark#how-to-use&#34;&gt;https://github.com/LAION-AI/CLIP_benchmark#how-to-use&lt;/a&gt; for systematic evaluation on 40 datasets.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluating local checkpoint:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --val-data=&#34;/path/to/validation_data.csv&#34;  \&#xA;    --model RN101 \&#xA;    --pretrained /path/to/checkpoints/epoch_K.pt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluating hosted pretrained checkpoint on ImageNet zero-shot prediction:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --imagenet-val /path/to/imagenet/validation \&#xA;    --model ViT-B-32-quickgelu \&#xA;    --pretrained laion400m_e32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pretrained model details&lt;/h2&gt; &#xA;&lt;h3&gt;LAION-400M - &lt;a href=&#34;https://laion.ai/laion-400-open-dataset&#34;&gt;https://laion.ai/laion-400-open-dataset&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We are working on reproducing OpenAI&#39;s ViT results with the comparably sized (and open) LAION-400M dataset. Trained weights may be found in release &lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/tag/v0.2-weights&#34;&gt;v0.2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The LAION400M weights have been trained on the JUWELS supercomputer (see acknowledgements section below).&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 224x224&lt;/h4&gt; &#xA;&lt;p&gt;We replicate OpenAI&#39;s results on ViT-B/32, reaching a top-1 ImageNet-1k zero-shot accuracy of 62.96%.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zero-shot comparison (courtesy of Andreas Fürst)&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_openai_compare_b32.jpg&#34; width=&#34;700&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ViT-B/32 was trained with 128 A100 (40 GB) GPUs for ~36 hours, 4600 GPU-hours. The per-GPU batch size was 256 for a global batch size of 32768. 256 is much lower than it could have been (~320-384) due to being sized initially before moving to &#39;local&#39; contrastive loss.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/16 224x224&lt;/h4&gt; &#xA;&lt;p&gt;The B/16 LAION400M training reached a top-1 ImageNet-1k zero-shot validation score of 67.07.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot_b16.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;This was the first major train session using the updated webdataset 0.2.x code. A bug was found that prevented shards from being shuffled properly between nodes/workers each epoch. This was fixed part way through training (epoch 26) but likely had an impact.&lt;/p&gt; &#xA;&lt;p&gt;ViT-B/16 was trained with 176 A100 (40 GB) GPUS for ~61 hours, 10700 GPU-hours. Batch size per GPU was 192 for a global batch size of 33792.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/16+ 240x240&lt;/h4&gt; &#xA;&lt;p&gt;The B/16+ 240x240 LAION400M training reached a top-1 ImageNet-1k zero-shot validation score of 69.21.&lt;/p&gt; &#xA;&lt;p&gt;This model is the same depth as the B/16, but increases the&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vision width from 768 -&amp;gt; 896&lt;/li&gt; &#xA; &lt;li&gt;text width from 512 -&amp;gt; 640&lt;/li&gt; &#xA; &lt;li&gt;the resolution 224x224 -&amp;gt; 240x240 (196 -&amp;gt; 225 tokens)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot_b16_plus_240.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;Unlike the B/16 run above, this model was a clean run with no dataset shuffling issues.&lt;/p&gt; &#xA;&lt;p&gt;ViT-B/16+ was trained with 224 A100 (40 GB) GPUS for ~61 hours, 13620 GPU-hours. Batch size per GPU was 160 for a global batch size of 35840.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-L/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;The L/14 LAION-400M training reached a top-1 ImageNet-1k zero-shot validation score of 72.77.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot_l14.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;ViT-L/14 was trained with 400 A100 (40 GB) GPUS for ~127 hours, 50800 GPU-hours. Batch size per GPU was 96 for a global batch size of 38400. Grad checkpointing was enabled.&lt;/p&gt; &#xA;&lt;h3&gt;LAION-2B (en) - &lt;a href=&#34;https://laion.ai/laion-5b-a-new-era-of-open-large-scale-multi-modal-datasets/&#34;&gt;https://laion.ai/laion-5b-a-new-era-of-open-large-scale-multi-modal-datasets/&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A ~2B sample subset of LAION-5B with english captions (&lt;a href=&#34;https://huggingface.co/datasets/laion/laion2B-en&#34;&gt;https://huggingface.co/datasets/laion/laion2B-en&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-B/32 trained on LAION-2B, reaching a top-1 ImageNet-1k zero-shot accuracy of 65.62%.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion2b_clip_zeroshot_b32.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;ViT-B/32 was trained with 112 A100 (40 GB) GPUs. The per-GPU batch size was 416 for a global batch size of 46592. Compute generously provided by &lt;a href=&#34;https://stability.ai/&#34;&gt;stability.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A second iteration of B/32 was trained on stability.ai cluster with a larger global batch size and learning rate, hitting 66.6% top-1. See &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-laion2B-s34B-b79K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-B-32-laion2B-s34B-b79K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ViT-L/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-L/14 with a 75.3% top-1 ImageNet-1k zero-shot was trained on JUWELS Booster. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-L-14-laion2B-s32B-b82K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-L-14-laion2B-s32B-b82K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These weights use a different dataset mean and std than others. Instead of using the OpenAI mean &amp;amp; std, inception style normalization &lt;code&gt;[-1, 1]&lt;/code&gt; is used via a mean and std of &lt;code&gt;[0.5, 0.5, 0.5]&lt;/code&gt;. This is handled automatically if using &lt;code&gt;open_clip.create_model_and_transforms&lt;/code&gt; from pretrained weights.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-H/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-H/14 with a 78.0% top-1 ImageNet-1k zero-shot was trained on JUWELS Booster. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-H-14-laion2B-s32B-b79K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-H-14-laion2B-s32B-b79K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ViT-g/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-g/14 with a 76.6% top-1 ImageNet-1k zero-shot was trained on JUWELS Booster. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-g-14-laion2B-s12B-b42K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-g-14-laion2B-s12B-b42K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This model was trained with a shorted schedule than other LAION-2B models with 12B samples seen instead of 32+B. It matches LAION-400M training in samples seen. Many zero-shot results are lower as a result, but despite this it performs very well in some OOD zero-shot and retrieval tasks.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 roberta base&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-B/32 with roberta base encoder with a 61.7% top-1 ImageNet-1k zero-shot was trained on stability. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-roberta-base-laion2B-s12B-b32k&#34;&gt;https://huggingface.co/laion/CLIP-ViT-B-32-roberta-base-laion2B-s12B-b32k&lt;/a&gt; This is the first openclip model using a HF text tower. It has better performance on a range of tasks compared to the standard text encoder, see &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-roberta-base-laion2B-s12B-b32k/blob/main/unknown.png&#34;&gt;metrics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 xlm roberta base&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-B/32 with xlm roberta base encoder with a 62.33% top-1 ImageNet-1k zero-shot was trained on stability. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-xlm-roberta-base-laion5B-s13B-b90k&#34;&gt;https://huggingface.co/laion/CLIP-ViT-B-32-xlm-roberta-base-laion5B-s13B-b90k&lt;/a&gt; This is the first openclip model trained on the full laion5B dataset; hence the first multilingual clip trained with openclip. It has better performance on a range of tasks compared to the standard text encoder, see &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-xlm-roberta-base-laion5B-s13B-b90k/blob/main/metrics.png&#34;&gt;metrics&lt;/a&gt; A preliminary multilingual evaluation was run: 43% on imagenet1k italian (vs 21% for english B/32), 37% for imagenet1k japanese (vs 1% for english B/32 and 50% for B/16 clip japanese). It shows the multilingual property is indeed there as expected. Larger models will get even better performance.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-H/14 xlm roberta large&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-H/14 with xlm roberta large encoder with a 77.0% (vs 78% for the english equivalent) top-1 ImageNet-1k zero-shot was trained on stability. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k&#34;&gt;https://huggingface.co/laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This model was trained following the &lt;a href=&#34;https://arxiv.org/abs/2111.07991&#34;&gt;LiT&lt;/a&gt; methodology: the image tower was frozen (initialized from english openclip ViT-H/14), the text tower was initialized from &lt;a href=&#34;https://huggingface.co/xlm-roberta-large&#34;&gt;xlm roberta large&lt;/a&gt; and unfrozen. This reduced training cost by a 3x factor.&lt;/p&gt; &#xA;&lt;p&gt;See full english &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k/resolve/main/results_xlm_roberta_large.png&#34;&gt;metrics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On zero shot classification on imagenet with translated prompts this model reaches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;56% in italian (vs 21% for &lt;a href=&#34;https://github.com/clip-italian/clip-italian&#34;&gt;https://github.com/clip-italian/clip-italian&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;53% in japanese (vs 54.6% for &lt;a href=&#34;https://github.com/rinnakk/japanese-clip&#34;&gt;https://github.com/rinnakk/japanese-clip&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;55.7% in chinese (to be compared with &lt;a href=&#34;https://github.com/OFA-Sys/Chinese-CLIP&#34;&gt;https://github.com/OFA-Sys/Chinese-CLIP&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CommonPool and DataComp models&lt;/h3&gt; &#xA;&lt;p&gt;As part of &lt;a href=&#34;https://github.com/mlfoundations/datacomp&#34;&gt;DataComp&lt;/a&gt;, we trained models on CommonPool using various data filtering strategies.&lt;/p&gt; &#xA;&lt;p&gt;The best performing models are specified below for the xlarge scale, see our paper &lt;a href=&#34;https://arxiv.org/abs/2304.14108&#34;&gt;DataComp: In seearch of the next generation of multimodal datasets&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Additional models and more information can be found at &lt;a href=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/datacomp_models.md&#34;&gt;/docs/datacomp_models.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;datacomp_xl_s13b_b90k&lt;/code&gt;: A ViT-L/14 trained on DataComp-1B for 12.8B steps and batch size 90k. Achieves 79.2% zero-shot accuracy on ImageNet. Available at &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-L-14-DataComp.XL-s13B-b90K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-L-14-DataComp.XL-s13B-b90K&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;commonpool_xl_clip_s13b_b90k&lt;/code&gt;: A ViT-L/14 trained on CommonPool-XL filtered using CLIP scores, for 12.8B steps and batch size 90k. Achieves 76.4% zero-shot accuracy on ImageNet. Available at &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-L-14-CommonPool.XL.clip-s13B-b90K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-L-14-CommonPool.XL.clip-s13B-b90K&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;commonpool_xl_laion_s13b_b90k&lt;/code&gt;: A ViT-L/14 trained on CommonPool-XL filtered using the LAION-2B filtering scheme, for 12.8B steps and batch size 90k. Achieves 75.5% zero-shot accuracy on ImageNet. Available at &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-L-14-CommonPool.XL.laion-s13B-b90K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-L-14-CommonPool.XL.laion-s13B-b90K&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;commonpool_xl_s13b_b90k&lt;/code&gt;: A ViT-L/14 trained on CommonPool-XL without any filtering, for 12.8B steps and batch size 90k. Achieves 72.3% zero-shot accuracy on ImageNet. Available at &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-L-14-CommonPool.XL-s13B-b90K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-L-14-CommonPool.XL-s13B-b90K&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;YFCC-15M&lt;/h4&gt; &#xA;&lt;p&gt;Below are checkpoints of models trained on YFCC-15M, along with their zero-shot top-1 accuracies on ImageNet and ImageNetV2. These models were trained using 8 GPUs and the same hyperparameters described in the &#34;Sample running code&#34; section, with the exception of &lt;code&gt;lr=5e-4&lt;/code&gt; and &lt;code&gt;epochs=32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/download/v0.2-weights/rn50-quickgelu-yfcc15m-455df137.pt&#34;&gt;ResNet-50&lt;/a&gt; (32.7% / 27.9%)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/download/v0.2-weights/rn101-quickgelu-yfcc15m-3e04b30e.pt&#34;&gt;ResNet-101&lt;/a&gt; (34.8% / 30.0%)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CC12M - &lt;a href=&#34;https://github.com/google-research-datasets/conceptual-12m&#34;&gt;https://github.com/google-research-datasets/conceptual-12m&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/download/v0.2-weights/rn50-quickgelu-cc12m-f000538c.pt&#34;&gt;ResNet-50&lt;/a&gt; (36.45%)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pretrained Model Interface&lt;/h3&gt; &#xA;&lt;p&gt;We offer a simple model interface to instantiate both pre-trained and untrained models.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Many existing checkpoints use the QuickGELU activation from the original OpenAI models. This activation is actually less efficient than native torch.nn.GELU in recent versions of PyTorch. The model defaults are now nn.GELU, so one should use model definitions with &lt;code&gt;-quickgelu&lt;/code&gt; postfix for the OpenCLIP pretrained weights. All OpenAI pretrained weights will always default to QuickGELU. One can also use the non &lt;code&gt;-quickgelu&lt;/code&gt; model definitions with pretrained weights using QuickGELU but there will be an accuracy drop, for fine-tune that will likely vanish for longer runs.&lt;/p&gt; &#xA;&lt;p&gt;Future trained models will use nn.GELU.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import open_clip&#xA;&amp;gt;&amp;gt;&amp;gt; open_clip.list_pretrained()&#xA;[(&#39;RN50&#39;, &#39;openai&#39;),&#xA;(&#39;RN50&#39;, &#39;yfcc15m&#39;),&#xA;(&#39;RN50&#39;, &#39;cc12m&#39;),&#xA;(&#39;RN50-quickgelu&#39;, &#39;openai&#39;),&#xA;(&#39;RN50-quickgelu&#39;, &#39;yfcc15m&#39;),&#xA;(&#39;RN50-quickgelu&#39;, &#39;cc12m&#39;),&#xA;(&#39;RN101&#39;, &#39;openai&#39;),&#xA;(&#39;RN101&#39;, &#39;yfcc15m&#39;),&#xA;(&#39;RN101-quickgelu&#39;, &#39;openai&#39;),&#xA;(&#39;RN101-quickgelu&#39;, &#39;yfcc15m&#39;),&#xA;(&#39;RN50x4&#39;, &#39;openai&#39;),&#xA;(&#39;RN50x16&#39;, &#39;openai&#39;),&#xA;(&#39;RN50x64&#39;, &#39;openai&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;openai&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;laion400m_e31&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;laion400m_e32&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;laion2b_e16&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;laion2b_s34b_b79k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;datacomp_m_s128m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_m_clip_s128m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_m_laion_s128m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_m_image_s128m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_m_text_s128m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_m_basic_s128m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_m_s128m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;datacomp_s_s13m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_s_clip_s13m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_s_laion_s13m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_s_image_s13m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_s_text_s13m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_s_basic_s13m_b4k&#39;),&#xA;(&#39;ViT-B-32&#39;, &#39;commonpool_s_s13m_b4k&#39;),&#xA;(&#39;ViT-B-32-quickgelu&#39;, &#39;openai&#39;),&#xA;(&#39;ViT-B-32-quickgelu&#39;, &#39;laion400m_e31&#39;),&#xA;(&#39;ViT-B-32-quickgelu&#39;, &#39;laion400m_e32&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;openai&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;laion400m_e31&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;laion400m_e32&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;laion2b_s34b_b88k&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;datacomp_l_s1b_b8k&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;commonpool_l_clip_s1b_b8k&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;commonpool_l_laion_s1b_b8k&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;commonpool_l_image_s1b_b8k&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;commonpool_l_text_s1b_b8k&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;commonpool_l_basic_s1b_b8k&#39;),&#xA;(&#39;ViT-B-16&#39;, &#39;commonpool_l_s1b_b8k&#39;),&#xA;(&#39;ViT-B-16-plus-240&#39;, &#39;laion400m_e31&#39;),&#xA;(&#39;ViT-B-16-plus-240&#39;, &#39;laion400m_e32&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;openai&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;laion400m_e31&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;laion400m_e32&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;laion2b_s32b_b82k&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;datacomp_xl_s13b_b90k&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;commonpool_xl_clip_s13b_b90k&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;commonpool_xl_laion_s13b_b90k&#39;),&#xA;(&#39;ViT-L-14&#39;, &#39;commonpool_xl_s13b_b90k&#39;),&#xA;(&#39;ViT-L-14-336&#39;, &#39;openai&#39;),&#xA;(&#39;ViT-H-14&#39;, &#39;laion2b_s32b_b79k&#39;),&#xA;(&#39;ViT-g-14&#39;, &#39;laion2b_s12b_b42k&#39;),&#xA;(&#39;ViT-g-14&#39;, &#39;laion2b_s34b_b88k&#39;),&#xA;(&#39;ViT-bigG-14&#39;, &#39;laion2b_s39b_b160k&#39;),&#xA;(&#39;roberta-ViT-B-32&#39;, &#39;laion2b_s12b_b32k&#39;),&#xA;(&#39;xlm-roberta-base-ViT-B-32&#39;, &#39;laion5b_s13b_b90k&#39;),&#xA;(&#39;xlm-roberta-large-ViT-H-14&#39;, &#39;frozen_laion5b_s13b_b90k&#39;),&#xA;(&#39;convnext_base&#39;, &#39;laion400m_s13b_b51k&#39;),&#xA;(&#39;convnext_base_w&#39;, &#39;laion2b_s13b_b82k&#39;),&#xA;(&#39;convnext_base_w&#39;, &#39;laion2b_s13b_b82k_augreg&#39;),&#xA;(&#39;convnext_base_w&#39;, &#39;laion_aesthetic_s13b_b82k&#39;),&#xA;(&#39;convnext_base_w_320&#39;, &#39;laion_aesthetic_s13b_b82k&#39;),&#xA;(&#39;convnext_base_w_320&#39;, &#39;laion_aesthetic_s13b_b82k_augreg&#39;),&#xA;(&#39;convnext_large_d&#39;, &#39;laion2b_s26b_b102k_augreg&#39;),&#xA;(&#39;convnext_large_d_320&#39;, &#39;laion2b_s29b_b131k_ft&#39;),&#xA;(&#39;convnext_large_d_320&#39;, &#39;laion2b_s29b_b131k_ft_soup&#39;),&#xA;(&#39;convnext_xxlarge&#39;, &#39;laion2b_s34b_b82k_augreg&#39;),&#xA;(&#39;convnext_xxlarge&#39;, &#39;laion2b_s34b_b82k_augreg_rewind&#39;),&#xA;(&#39;convnext_xxlarge&#39;, &#39;laion2b_s34b_b82k_augreg_soup&#39;),&#xA;(&#39;coca_ViT-B-32&#39;, &#39;laion2b_s13b_b90k&#39;),&#xA;(&#39;coca_ViT-B-32&#39;, &#39;mscoco_finetuned_laion2b_s13b_b90k&#39;),&#xA;(&#39;coca_ViT-L-14&#39;, &#39;laion2b_s13b_b90k&#39;),&#xA;(&#39;coca_ViT-L-14&#39;, &#39;mscoco_finetuned_laion2b_s13b_b90k&#39;)&#xA;]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; model, train_transform, eval_transform = open_clip.create_model_and_transforms(&#39;ViT-B-32&#39;, pretrained=&#39;laion2b_s34b_b79k&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model distillation&lt;/h3&gt; &#xA;&lt;p&gt;You can distill from a pre-trained by using &lt;code&gt;--distill-model&lt;/code&gt; and &lt;code&gt;--distill-pretrained&lt;/code&gt; to specify the model you&#39;d like to distill from. For instance, to distill from OpenAI ViT-L/14 use &lt;code&gt;--distill-model ViT-L-14 --distill-pretrained openai&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Gradient accumulation&lt;/h3&gt; &#xA;&lt;p&gt;To simulate larger batches use &lt;code&gt;--accum-freq k&lt;/code&gt;. If per gpu batch size, &lt;code&gt;--batch-size&lt;/code&gt;, is &lt;code&gt;m&lt;/code&gt;, then the effective batch size will be &lt;code&gt;k * m * num_gpus&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When increasing &lt;code&gt;--accum-freq&lt;/code&gt; from its default of 1, samples/s will remain approximately constant (batch size will double, as will time-per-batch). It is recommended to use other features to reduce batch size such as &lt;code&gt;--grad-checkpointing --local-loss --gather-with-grad&lt;/code&gt; before increasing &lt;code&gt;--accum-freq&lt;/code&gt;. &lt;code&gt;--accum-freq&lt;/code&gt; can be used in addition to these features.&lt;/p&gt; &#xA;&lt;p&gt;Instead of 1 forward pass per example, there are now 2 forward passes per-example. However, the first is done with &lt;code&gt;torch.no_grad&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is some additional GPU memory required --- the features and data from all &lt;code&gt;m&lt;/code&gt; batches are stored in memory.&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;m&lt;/code&gt; loss computations instead of the usual 1.&lt;/p&gt; &#xA;&lt;p&gt;For more information see Cui et al. (&lt;a href=&#34;https://arxiv.org/abs/2112.09331&#34;&gt;https://arxiv.org/abs/2112.09331&lt;/a&gt;) or Pham et al. (&lt;a href=&#34;https://arxiv.org/abs/2111.10050&#34;&gt;https://arxiv.org/abs/2111.10050&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Int8 Support&lt;/h3&gt; &#xA;&lt;p&gt;We have beta support for int8 training and inference. You can enable int8 training with &lt;code&gt;--use-bnb-linear SwitchBackLinearGlobal&lt;/code&gt; or &lt;code&gt;--use-bnb-linear SwitchBackLinearGlobalMemEfficient&lt;/code&gt;. Please see the bitsandbytes library for definitions for these layers. For CLIP VIT-Huge this should currently correspond to a 10% training speedup with no accuracy loss. More speedups comin when the attention layer is refactored so that linear layers man be replaced there, too.&lt;/p&gt; &#xA;&lt;p&gt;See the tutorial &lt;a href=&#34;https://github.com/mlfoundations/open_clip/raw/main/tutorials/int8_tutorial.ipynb&#34;&gt;https://github.com/mlfoundations/open_clip/blob/main/tutorials/int8_tutorial.ipynb&lt;/a&gt; or &lt;a href=&#34;https://arxiv.org/abs/2304.13013&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Support for remote loading/training&lt;/h3&gt; &#xA;&lt;p&gt;It is always possible to resume directly from a remote file, e.g., a file in an s3 bucket. Just set &lt;code&gt;--resume s3://&amp;lt;path-to-checkpoint&amp;gt; &lt;/code&gt;. This will work with any filesystem supported by &lt;code&gt;fsspec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to train &lt;code&gt;open_clip&lt;/code&gt; models while continuously backing up to s3. This can help to avoid slow local file systems.&lt;/p&gt; &#xA;&lt;p&gt;Say that your node has a local ssd &lt;code&gt;/scratch&lt;/code&gt;, an s3 bucket &lt;code&gt;s3://&amp;lt;path-to-bucket&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In that case, set &lt;code&gt;--logs /scratch&lt;/code&gt; and &lt;code&gt;--remote-sync s3://&amp;lt;path-to-bucket&amp;gt;&lt;/code&gt;. Then, a background process will sync &lt;code&gt;/scratch/&amp;lt;run-name&amp;gt;&lt;/code&gt; to &lt;code&gt;s3://&amp;lt;path-to-bucket&amp;gt;/&amp;lt;run-name&amp;gt;&lt;/code&gt;. After syncing, the background process will sleep for &lt;code&gt;--remote-sync-frequency&lt;/code&gt; seconds, which defaults to 5 minutes.&lt;/p&gt; &#xA;&lt;p&gt;There is also experimental support for syncing to other remote file systems, not just s3. To do so, specify &lt;code&gt;--remote-sync-protocol fsspec&lt;/code&gt;. However, this is currently very slow and not recommended.&lt;/p&gt; &#xA;&lt;p&gt;Also, to optionally avoid saving too many checkpoints locally when using these features, you can use &lt;code&gt;--delete-previous-checkpoint&lt;/code&gt; which deletes the previous checkpoint after saving a new one.&lt;/p&gt; &#xA;&lt;p&gt;Note: if you are using this feature with &lt;code&gt;--resume latest&lt;/code&gt;, there are a few warnings. First, use with &lt;code&gt;--save-most-recent&lt;/code&gt; is not supported. Second, only &lt;code&gt;s3&lt;/code&gt; is supported. Finally, since the sync happens in the background, it is possible that the most recent checkpoint may not be finished syncing to the remote.&lt;/p&gt; &#xA;&lt;h3&gt;Pushing Models to Hugging Face Hub&lt;/h3&gt; &#xA;&lt;p&gt;The module &lt;code&gt;open_clip.push_to_hf_hub&lt;/code&gt; includes helpers for pushing models /w weights and config to the HF Hub.&lt;/p&gt; &#xA;&lt;p&gt;The tool can be run from command line, ex: &lt;code&gt;python -m open_clip.push_to_hf_hub --model convnext_large_d_320 --pretrained /train/checkpoints/epoch_12.pt --repo-id laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Scaling trends&lt;/h2&gt; &#xA;&lt;p&gt;The plot below shows how zero-shot performance of CLIP models varies as we scale the number of samples used for training. Zero-shot performance increases steadily for both ImageNet and &lt;a href=&#34;https://arxiv.org/abs/1902.10811&#34;&gt;ImageNetV2&lt;/a&gt;, and is far from saturated at ~15M samples.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/scaling.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;h2&gt;Why are low-accuracy CLIP models interesting?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; CLIP models have high effective robustness, even at small scales.&lt;/p&gt; &#xA;&lt;p&gt;CLIP models are particularly intriguing because they are more robust to natural distribution shifts (see Section 3.3 in the &lt;a href=&#34;https://arxiv.org/abs/2103.00020&#34;&gt;CLIP paper&lt;/a&gt;). This phenomena is illustrated by the figure below, with ImageNet accuracy on the x-axis and &lt;a href=&#34;https://arxiv.org/abs/1902.10811&#34;&gt;ImageNetV2&lt;/a&gt; (a reproduction of the ImageNet validation set with distribution shift) accuracy on the y-axis. Standard training denotes training on the ImageNet train set and the CLIP zero-shot models are shown as stars.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/effective_robustness.png&#34; alt=&#34;CLIP scatter plot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As observed by &lt;a href=&#34;https://arxiv.org/abs/2007.00644&#34;&gt;Taori et al., 2020&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2107.04649&#34;&gt;Miller et al., 2021&lt;/a&gt;, the in-distribution and out-of-distribution accuracies of models trained on ImageNet follow a predictable linear trend (the red line in the above plot). &lt;em&gt;Effective robustness&lt;/em&gt; quantifies robustness as accuracy beyond this baseline, i.e., how far a model lies above the red line. Ideally a model would not suffer from distribution shift and fall on the y = x line (&lt;a href=&#34;http://proceedings.mlr.press/v119/shankar20c.html&#34;&gt;trained human labelers are within a percentage point of the y = x line&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Even though the CLIP models trained with this codebase achieve much lower accuracy than those trained by OpenAI, our models still lie on the same trend of improved effective robustness (the purple line). Therefore, we can study what makes CLIP robust without requiring industrial-scale compute.&lt;/p&gt; &#xA;&lt;p&gt;For more information on effective robustness, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1902.10811&#34;&gt;Recht et al., 2019&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2007.00644&#34;&gt;Taori et al., 2020&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2107.04649&#34;&gt;Miller et al., 2021&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To know more about the factors that contribute to CLIP&#39;s robustness refer to &lt;a href=&#34;https://arxiv.org/abs/2205.01397&#34;&gt;Fang et al., 2022&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;We gratefully acknowledge the Gauss Centre for Supercomputing e.V. (&lt;a href=&#34;http://www.gauss-centre.eu&#34;&gt;www.gauss-centre.eu&lt;/a&gt;) for funding this part of work by providing computing time through the John von Neumann Institute for Computing (NIC) on the GCS Supercomputer JUWELS Booster at Jülich Supercomputing Centre (JSC).&lt;/p&gt; &#xA;&lt;h2&gt;The Team&lt;/h2&gt; &#xA;&lt;p&gt;Current development of this repository is led by &lt;a href=&#34;https://rwightman.com/&#34;&gt;Ross Wightman&lt;/a&gt;, &lt;a href=&#34;http://cadegordon.io/&#34;&gt;Cade Gordon&lt;/a&gt;, and &lt;a href=&#34;http://vaishaal.com/&#34;&gt;Vaishaal Shankar&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The original version of this repository is from a group of researchers at UW, Google, Stanford, Amazon, Columbia, and Berkeley.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://gabrielilharco.com/&#34;&gt;Gabriel Ilharco*&lt;/a&gt;, &lt;a href=&#34;https://mitchellnw.github.io/&#34;&gt;Mitchell Wortsman*&lt;/a&gt;, &lt;a href=&#34;https://nicholas.carlini.com/&#34;&gt;Nicholas Carlini&lt;/a&gt;, &lt;a href=&#34;https://www.rohantaori.com/&#34;&gt;Rohan Taori&lt;/a&gt;, &lt;a href=&#34;http://www.achaldave.com/&#34;&gt;Achal Dave&lt;/a&gt;, &lt;a href=&#34;http://vaishaal.com/&#34;&gt;Vaishaal Shankar&lt;/a&gt;, &lt;a href=&#34;https://people.eecs.berkeley.edu/~miller_john/&#34;&gt;John Miller&lt;/a&gt;, &lt;a href=&#34;https://hsnamkoong.github.io/&#34;&gt;Hongseok Namkoong&lt;/a&gt;, &lt;a href=&#34;https://homes.cs.washington.edu/~hannaneh/&#34;&gt;Hannaneh Hajishirzi&lt;/a&gt;, &lt;a href=&#34;https://homes.cs.washington.edu/~ali/&#34;&gt;Ali Farhadi&lt;/a&gt;, &lt;a href=&#34;https://people.csail.mit.edu/ludwigs/&#34;&gt;Ludwig Schmidt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://jongwook.kim/&#34;&gt;Jong Wook Kim&lt;/a&gt; and &lt;a href=&#34;https://github.com/Newmu&#34;&gt;Alec Radford&lt;/a&gt; for help with reproducing CLIP!&lt;/p&gt; &#xA;&lt;h2&gt;Citing&lt;/h2&gt; &#xA;&lt;p&gt;If you found this repository useful, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@software{ilharco_gabriel_2021_5143773,&#xA;  author       = {Ilharco, Gabriel and&#xA;                  Wortsman, Mitchell and&#xA;                  Wightman, Ross and&#xA;                  Gordon, Cade and&#xA;                  Carlini, Nicholas and&#xA;                  Taori, Rohan and&#xA;                  Dave, Achal and&#xA;                  Shankar, Vaishaal and&#xA;                  Namkoong, Hongseok and&#xA;                  Miller, John and&#xA;                  Hajishirzi, Hannaneh and&#xA;                  Farhadi, Ali and&#xA;                  Schmidt, Ludwig},&#xA;  title        = {OpenCLIP},&#xA;  month        = jul,&#xA;  year         = 2021,&#xA;  note         = {If you use this software, please cite it as below.},&#xA;  publisher    = {Zenodo},&#xA;  version      = {0.1},&#xA;  doi          = {10.5281/zenodo.5143773},&#xA;  url          = {https://doi.org/10.5281/zenodo.5143773}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Radford2021LearningTV,&#xA;  title={Learning Transferable Visual Models From Natural Language Supervision},&#xA;  author={Alec Radford and Jong Wook Kim and Chris Hallacy and A. Ramesh and Gabriel Goh and Sandhini Agarwal and Girish Sastry and Amanda Askell and Pamela Mishkin and Jack Clark and Gretchen Krueger and Ilya Sutskever},&#xA;  booktitle={ICML},&#xA;  year={2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{schuhmann2022laionb,&#xA;  title={{LAION}-5B: An open large-scale dataset for training next generation image-text models},&#xA;  author={Christoph Schuhmann and&#xA;          Romain Beaumont and&#xA;          Richard Vencu and&#xA;          Cade W Gordon and&#xA;          Ross Wightman and&#xA;          Mehdi Cherti and&#xA;          Theo Coombes and&#xA;          Aarush Katta and&#xA;          Clayton Mullis and&#xA;          Mitchell Wortsman and&#xA;          Patrick Schramowski and&#xA;          Srivatsa R Kundurthy and&#xA;          Katherine Crowson and&#xA;          Ludwig Schmidt and&#xA;          Robert Kaczmarczyk and&#xA;          Jenia Jitsev},&#xA;  booktitle={Thirty-sixth Conference on Neural Information Processing Systems Datasets and Benchmarks Track},&#xA;  year={2022},&#xA;  url={https://openreview.net/forum?id=M3Y74vmsMcY}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zenodo.org/badge/latestdoi/390536799&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/390536799.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>