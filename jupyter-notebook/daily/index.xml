<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-30T01:36:27Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ageron/handson-ml3</title>
    <updated>2022-08-30T01:36:27Z</updated>
    <id>tag:github.com,2022-08-30:/ageron/handson-ml3</id>
    <link href="https://github.com/ageron/handson-ml3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A series of Jupyter notebooks that walk you through the fundamentals of Machine Learning and Deep Learning in Python using Scikit-Learn, Keras and TensorFlow 2.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Machine Learning Notebooks, 3rd edition&lt;/h1&gt; &#xA;&lt;p&gt;This project aims at teaching you the fundamentals of Machine Learning in python. It contains the example code and solutions to the exercises in the third edition of my O&#39;Reilly book &lt;a href=&#34;https://homl.info/er3&#34;&gt;Hands-on Machine Learning with Scikit-Learn, Keras and TensorFlow (3rd edition)&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://homl.info/er3&#34;&gt;&lt;img src=&#34;https://learning.oreilly.com/library/cover/9781098125967/300w/&#34; title=&#34;book&#34; width=&#34;150&#34; border=&#34;0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are looking for the second edition notebooks, check out &lt;a href=&#34;https://github.com/ageron/handson-ml2&#34;&gt;ageron/handson-ml2&lt;/a&gt;. For the first edition, see &lt;a href=&#34;https://github.com/ageron/handson-ml&#34;&gt;ageron/handson-ml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Want to play with these notebooks online without having to install anything?&lt;/h3&gt; &#xA;&lt;p&gt;Use any of the following services (I recommended Colab or Kaggle, since they offer free GPUs and TPUs).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: &lt;em&gt;Please be aware that these services provide temporary environments: anything you do will be deleted after a while, so make sure you download any data you care about.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/ageron/handson-ml3/blob/main/&#34; target=&#34;_parent&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://homl.info/kaggle/&#34;&gt;&lt;img src=&#34;https://kaggle.com/static/images/open-in-kaggle.svg?sanitize=true&#34; alt=&#34;Open in Kaggle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/ageron/handson-ml3/HEAD?filepath=%2Findex.ipynb&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Launch binder&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://homl.info/deepnote/&#34;&gt;&lt;img src=&#34;https://deepnote.com/buttons/launch-in-deepnote-small.svg?sanitize=true&#34; alt=&#34;Launch in Deepnote&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Just want to quickly look at some notebooks, without executing any code?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/ageron/handson-ml3/blob/main/index.ipynb&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jupyter/design/master/logos/Badges/nbviewer_badge.svg?sanitize=true&#34; alt=&#34;Render nbviewer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ageron/handson-ml3/raw/main/index.ipynb&#34;&gt;github.com&#39;s notebook viewer&lt;/a&gt; also works but it&#39;s not ideal: it&#39;s slower, the math equations are not always displayed correctly, and large notebooks often fail to open.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Want to run this project using a Docker image?&lt;/h3&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://github.com/ageron/handson-ml3/tree/main/docker&#34;&gt;Docker instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Want to install this project on your own machine?&lt;/h3&gt; &#xA;&lt;p&gt;Start by installing &lt;a href=&#34;https://www.anaconda.com/products/distribution&#34;&gt;Anaconda&lt;/a&gt; (or &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;Miniconda&lt;/a&gt;), &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt;, and if you have a TensorFlow-compatible GPU, install the &lt;a href=&#34;https://www.nvidia.com/Download/index.aspx&#34;&gt;GPU driver&lt;/a&gt;, as well as the appropriate version of CUDA and cuDNN (see TensorFlow&#39;s documentation for more details).&lt;/p&gt; &#xA;&lt;p&gt;Next, clone this project by opening a terminal and typing the following commands (do not type the first &lt;code&gt;$&lt;/code&gt; signs on each line, they just indicate that these are terminal commands):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ageron/handson-ml3.git&#xA;$ cd handson-ml3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ conda env create -f environment.yml&#xA;$ conda activate homl3&#xA;$ python -m ipykernel install --user --name=python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, start Jupyter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ jupyter notebook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need further instructions, read the &lt;a href=&#34;https://raw.githubusercontent.com/ageron/handson-ml3/main/INSTALL.md&#34;&gt;detailed installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which Python version should I use?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I recommend Python 3.8. If you follow the installation instructions above, that&#39;s the version you will get. Most code will work with other versions of Python 3, but some libraries do not support Python 3.9 or 3.10 yet, which is why I recommend Python 3.8.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I&#39;m getting an error when I call &lt;code&gt;load_housing_data()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure you call &lt;code&gt;fetch_housing_data()&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; you call &lt;code&gt;load_housing_data()&lt;/code&gt;. If you&#39;re getting an HTTP error, make sure you&#39;re running the exact same code as in the notebook (copy/paste it if needed). If the problem persists, please check your network configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I&#39;m getting an SSL error on MacOSX&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You probably need to install the SSL certificates (see this &lt;a href=&#34;https://stackoverflow.com/questions/27835619/urllib-and-ssl-certificate-verify-failed-error&#34;&gt;StackOverflow question&lt;/a&gt;). If you downloaded Python from the official website, then run &lt;code&gt;/Applications/Python\ 3.8/Install\ Certificates.command&lt;/code&gt; in a terminal (change &lt;code&gt;3.8&lt;/code&gt; to whatever version you installed). If you installed Python using MacPorts, run &lt;code&gt;sudo port install curl-ca-bundle&lt;/code&gt; in a terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I&#39;ve installed this project locally. How do I update it to the latest version?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ageron/handson-ml3/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I update my Python libraries to the latest versions, when using Anaconda?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ageron/handson-ml3/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;I would like to thank everyone &lt;a href=&#34;https://github.com/ageron/handson-ml3/graphs/contributors&#34;&gt;who contributed to this project&lt;/a&gt;, either by providing useful feedback, filing issues or submitting Pull Requests. Special thanks go to Haesun Park and Ian Beauregard who reviewed every notebook and submitted many PRs, including help on some of the exercise solutions. Thanks as well to Steven Bunkley and Ziembla who created the &lt;code&gt;docker&lt;/code&gt; directory, and to github user SuperYorio who helped on some exercise solutions. And last but not least, thanks a lot to Victor Khaustov who submitted plenty of excellent PRs, fixing many errors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pharmapsychotic/clip-interrogator</title>
    <updated>2022-08-30T01:36:27Z</updated>
    <id>tag:github.com,2022-08-30:/pharmapsychotic/clip-interrogator</id>
    <link href="https://github.com/pharmapsychotic/clip-interrogator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clip-interrogator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/pharmapsychotic/clip-interrogator/blob/main/clip_interrogator.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The CLIP Interrogator uses the OpenAI CLIP models to test a given image against a variety of artists, mediums, and styles to study how the different models see the content of the image. It also combines the results with BLIP caption to suggest a text prompt to create more images similar to what was given.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bair-climate-initiative/metaearth</title>
    <updated>2022-08-30T01:36:27Z</updated>
    <id>tag:github.com,2022-08-30:/bair-climate-initiative/metaearth</id>
    <link href="https://github.com/bair-climate-initiative/metaearth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Download and access remote sensing data from any platform&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;MetaEarth: Download any remote sensing data from any provider using a single config.&lt;/h2&gt; &#xA;&lt;img width=&#34;1361&#34; alt=&#34;MetaEarth Explainer Diagram - download any data from any provider&#34; src=&#34;https://user-images.githubusercontent.com/1455579/180137540-80b749d0-ab3d-469d-8122-f6b1a0df008f.png&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;🔥 Warning 🔥&lt;/strong&gt; This is a very early alpha version of MetaEarth: things will change quickly, with little/no warning. The current MetaEarth explainer image above is aspirational: we&#39;re actively working on adding more data providers.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Install MetaEarth as a library and download about 18MB of &lt;a href=&#34;https://planetarycomputer.microsoft.com/dataset/cop-dem-glo-90&#34;&gt;Copernicus DEM&lt;/a&gt; data from Microsoft Planetary Computer -- this small example should Just Work™ without any additional authentication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# OPTIONAL: set up a conda environment (use at least python 3.7)&#xA;conda create -n metaearth python=3.8 geopandas&#xA;conda activate metaearth&#xA;&#xA;git clone git@github.com:bair-climate-initiative/metaearth.git&#xA;cd metaearth&#xA;pip install -e . &#xA;&#xA;# Take a look at the download using a dry run (you could also set dry_run in the config file):&#xA;python metaearth/cli.py --config config/demo.yaml system.dry_run=True&#xA;&#xA;# If everything looks good, remove the dry_run and download Copernicus DEM data from Microsoft Planetary Computer&#xA;python metaearth/cli.py --config config/demo.yaml&#xA;&#xA;# see the extracted data in the output directory&#xA;ls data/demo-extraction-dem-glo-90/cop-dem-glo-90/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick Explanation:&lt;/strong&gt; The config we&#39;re providing, &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/config/demo.yaml&#34;&gt;config/demo.yaml&lt;/a&gt;, contains a fully annotated example: take a look at it to get a sense of config options and how to control MetaEarth. While playing with MetaEarth, set the dryrun config option in order to display a summary of the assets without downloading anything, e.g. &lt;code&gt;system.dry_run=True&lt;/code&gt;. Note that to download more/different data from Microsoft Planetary Computer, you&#39;ll want to authenticate with them (see the instructions under &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/#provider-configurations&#34;&gt;Provider Configurations&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;🔥 Warning 🔥&lt;/strong&gt; The documentation is intentionally sparse at the moment: MetaEarth is under rapid development and writing/re-updating the documentation during this period would be more effort than benefit.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;em&gt;Quick Start&lt;/em&gt; instructions above and then consult &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/config/demo.yaml&#34;&gt;config/demo.yaml&lt;/a&gt; for annotated configuration (we&#39;ll keep this annotated config updated).&lt;/p&gt; &#xA;&lt;h3&gt;MetaEarth Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The following describes some common goals for configuring MetaEarth, such as specifying a data collection, geographical region, and timerange to extract data from, or specifying a provider to download data from. Consult &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/config/demo.yaml&#34;&gt;config/demo.yaml&lt;/a&gt; for an annotated configuration. The configuration schemas are defined in &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/metaearth/config.py&#34;&gt;metaearth/config.py&lt;/a&gt;: take a look at &lt;code&gt;ConfigSchema&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Specifying the data to be downloaded&lt;/strong&gt; takes place through the &lt;code&gt;collections&lt;/code&gt; config option. For instance, to download &lt;a href=&#34;https://planetarycomputer.microsoft.com/dataset/cop-dem-glo-90&#34;&gt;Copernicus DEM&lt;/a&gt;, which has the collection id &lt;code&gt;cop-dem-glo-90&lt;/code&gt; (see below on how to find this), the config is like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;collections: &#xA;  cop-dem-glo-90:&#xA;    # specify which assets to download. &#xA;    # use a single entry with &#34;all&#34; to download all assets.&#xA;    assets:&#xA;      - data&#xA;    # the data will output to this directory.&#xA;    outdir: data/demo-extraction-dem-glo-90&#xA;    # Single date+time, or a range (&#39;/&#39; separator), &#xA;    # formatted to RFC 3339, section 5.6. &#xA;    # Use double dots .. for open date ranges.&#xA;      datetime: &#34;2021-04-01/2021-04-23&#34;&#xA;    # area-of-interest file location&#xA;    # this demo contains a small section in Yosemite, &#xA;    # view by pasing demo.json into http://geojson.io&#xA;    aoi_file: config/aoi/demo.json&#xA;    provider: &#xA;        # MPC is the identifier for Microsoft Planetary Computer&#xA;        # See &#34;provider key&#34; under &#34;Provider Configurations&#34;&#xA;        name: MPC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Finding the collection id&lt;/strong&gt;: This depends on the individual provider (see &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/#provider-configurations&#34;&gt;Provider Configurations&lt;/a&gt; below).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Finding the assets&lt;/strong&gt;: This depends on the individual provider (see [Provider Configurations](in the future, see #provider-configurations) below), but the following seems to be a pretty solid method:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a config with your desired collection id, set the &lt;code&gt;assets&lt;/code&gt; option to &lt;code&gt;[&#34;all&#34;]&lt;/code&gt; like this (and setting &lt;code&gt;max_items&lt;/code&gt; to 1 to speed things up):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;collections: &#xA;  landsat-8-c2-l2:&#xA;    assets:&#xA;      - all&#xA;    max_items: 1&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run a dry run to see what assets will be downloaded:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python metaearth/cli.py --config path/to/your/config.yaml system.dry_run=True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will print out a list of assets that will be downloaded and their descriptions, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;18:24:51 INFO Asset types:&#xA;key=ANG; desc=&#34;Collection 2 Level-1 Angle Coefficients File (ANG)&#34;&#xA;key=SR_B1; desc=&#34;Collection 2 Level-2 Coastal/Aerosol Band (B1) Surface Reflectance&#34;&#xA;key=SR_B2; desc=&#34;Collection 2 Level-2 Blue Band (B2) Surface Reflectance&#34;&#xA;key=SR_B3; desc=&#34;Collection 2 Level-2 Green Band (B3) Surface Reflectance&#34;&#xA;key=SR_B4; desc=&#34;Collection 2 Level-2 Red Band (B4) Surface Reflectance&#34;&#xA;key=SR_B5; desc=&#34;Collection 2 Level-2 Near Infrared Band 0.8 (B5) Surface Reflectance&#34;&#xA;key=SR_B6; desc=&#34;Collection 2 Level-2 Short-wave Infrared Band 1.6 (B6) Surface Reflectance&#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Let&#39;s say we want the RGB channels (see the descriptions), so we then update our config to download only the assets we want, and remove the &lt;code&gt;max_items&lt;/code&gt; option:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;collections: &#xA;  landsat-8-c2-l2:&#xA;    assets:&#xA;      - SR_B2&#xA;      - SR_B3&#xA;      - SR_B4&#xA;    max_items: 1&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Selecting a Region and Timerange&lt;/strong&gt; Specify region:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use (something like) &lt;a href=&#34;https://geojson.io&#34;&gt;https://geojson.io&lt;/a&gt; to specify the region you care about in geojson format&lt;/li&gt; &#xA; &lt;li&gt;Save to file, e.g. &lt;code&gt;my_region.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set that file to the &lt;code&gt;aoi_file&lt;/code&gt; key under the collection you want to extract or to &lt;code&gt;default_collection&lt;/code&gt; if you want to extract it for multiple collections.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Specify a timerange by using single date+time, or a range (&#39;/&#39; separator), formatted to &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6&#34;&gt;RFC 3339, section 5.6&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/config/example.yaml&#34;&gt;config/example.yaml&lt;/a&gt; and it should be pretty clear. Use double dots .. for open date ranges.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output Directory and Data Format&lt;/strong&gt;: The saved data will be placed in the directory format &lt;code&gt;{outdir}/{collection_id}/{item_id}/{asset_id}.{asset_appendix}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Defaults when downloading multiple collections&lt;/strong&gt; You can specify a &lt;code&gt;default_collection&lt;/code&gt; in your config, which will be inherited by all collections that don&#39;t specify a specific key, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# fallback for each collection&#xA;# where each of these entries can be overridden &#xA;# in each collection config under &#34;collections&#34;&#xA;default_collection:&#xA;  # will output to ${output}/collection_name/ by default, can override as an entry in the collection config&#xA;  outdir: data/demo-extraction&#xA;  # default datetime range for each collection, &#xA;  # can override as an entry in the collection config&#xA;  # Single date+time, or a range (&#39;/&#39; separator), &#xA;  # formatted to RFC 3339, section 5.6. &#xA;  # Use double dots .. for open date ranges.&#xA;  datetime: 2021-04-01/2021-04-23&#xA;  # default aoi for each collection (use geojson format - see geojson.io)&#xA;  # can override as an entry in the collection config&#xA;  # this demo contains a small section in Yosemite&#xA;  aoi_file: config/aoi/demo.json&#xA;  # Max number of items &#xA;  # (not assets, e.g. each item could have 3 images)&#xA;  # to download. -1 for unlimited (or limit set)&#xA;  # by the provider&#xA;  max_items: -1&#xA;  # default provider for each collection, can override as an entry in the collection config&#xA;  provider: &#xA;    # MPC is the identifier for Microsoft Planetary Computer&#xA;    name: MPC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dry run and DEBUG are your friend. You have lots of friends.&lt;/strong&gt; When dialing in your configuration, keep the &lt;code&gt;system.dry_run=True&lt;/code&gt; option on your call to &lt;code&gt;metaearth/cli.py&lt;/code&gt; (or set it in your config). Also, set the &lt;code&gt;system.log_level=DEBUG&lt;/code&gt; option to see more verbose output.&lt;/p&gt; &#xA;&lt;h3&gt;Programmatic API Usage&lt;/h3&gt; &#xA;&lt;p&gt;Programmatic MetaEarth API usage is still under development, but very much a part of our roadmap. For now, you can roughly do the following (let us know if you&#39;re interested in API support and how you&#39;d like to use MetaEarth in this context):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from omegaconf import OmegaConf&#xA;&#xA;from metaearth.api import extract_assets&#xA;from metaearth.config import ConfigSchema&#xA;&#xA;dict_cfg = {&#xA;  &#34;collections&#34;: {&#xA;    &#34;cop-dem-glo-90&#34;: {&#xA;      &#34;outdir&#34;: &#34;data&#34;,&#xA;      &#34;assets&#34;: [&#34;all&#34;],&#xA;      &#34;aoi_file&#34;: &#34;config/aoi/demo.json&#34;,&#xA;      &#34;datetime&#34;: &#34;2021-04-01/2021-04-23&#34;,&#xA;      &#34;provider&#34;: {&#xA;        &#34;name&#34;: &#34;MPC&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;in_cfg = OmegaConf.create(dict_cfg)&#xA;cfg_schema = OmegaConf.structured(ConfigSchema)&#xA;cfg = OmegaConf.merge(cfg_schema, in_cfg)&#xA;successfully_extracted_assets, failed_assets = extract_assets(cfg)&#xA;print(f&#34;Successfully extracted {len(successfully_extracted_assets)} assets. {len(failed_assets)} failed.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Provider Configurations&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;🔥 Warning 🔥&lt;/strong&gt; This is a very early alpha version of MetaEarth: there&#39;s only a few providers and meta-providers supported at the moment. Let us know if you need other providers and we can prioritize adding them.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Each provider needs its own authentication and setup. For each provider you&#39;d like to use, follow the set-up instructions below.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Planetary Computer (provider key: MPC)&lt;/h3&gt; &#xA;&lt;p&gt;Make sure to run the following and enter your api key (this helps increase the amount of data you can download from MPC).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;planetarycomputer configure &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Finding the collection id&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://planetarycomputer.microsoft.com/catalog&#34;&gt;MPC Data Catalog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find/click-on the desired collection&lt;/li&gt; &#xA; &lt;li&gt;In the Collection Overview Page, click on the &#34;Example Notebook&#34; tab&lt;/li&gt; &#xA; &lt;li&gt;The example notebook will contain an example of accessing the collection using the collection id.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;NASA EarthData (provider key: EARTHDATA)&lt;/h3&gt; &#xA;&lt;p&gt;NASA EarthData provides access to a diverse range of providers (around 60!), where each provider has different data sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Access&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For NASA EarthData, you need to create an account at: &lt;a href=&#34;https://urs.earthdata.nasa.gov/&#34;&gt;https://urs.earthdata.nasa.gov/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;~/.netrc&lt;/code&gt; file (if it doesn&#39;t exist) and then append the following contents:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;machine urs.earthdata.nasa.gov&#xA;    login &amp;lt;username&amp;gt;&#xA;    password &amp;lt;password&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;EarthData is a provider of providers, so you must include a &lt;code&gt;provider_id&lt;/code&gt; in your &lt;code&gt;kwargs&lt;/code&gt; argument to the provider, like the following example that accesses ASO data from NSIDC from EarthData (&lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/config/nsidc.yaml&#34;&gt;config/nsidc.yaml&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;collections: &#xA;  ASO_50M_SD:&#xA;    assets:&#xA;      - data&#xA;  provider: &#xA;    name: EARTHDATA&#xA;    kwargs:&#xA;      provider_id: NSIDC_ECS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Finding the Provider ID&lt;/strong&gt;: Consult &lt;a href=&#34;https://raw.githubusercontent.com/bair-climate-initiative/metaearth/main/metaearth/provider/earthdata_providers.py&#34;&gt;earthdata_providers.py&lt;/a&gt; for a list of providers and their provider ids.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Finding the collection id&lt;/strong&gt;: TODO (this depends on the provider and we need to figure out a general approach)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing and Development&lt;/h2&gt; &#xA;&lt;p&gt;The general flow for development looks like this:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Read the Getting Started Guide - make sure you can sucessfully download some data, and make sure to install this repository in editable mode &lt;code&gt;pip install -e .&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new branch for your feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run linters and tests (see subsections below)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commit your changes, push to the branch, and open a pull request.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;???&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Profit $$$&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;Following &lt;a href=&#34;https://torchgeo.readthedocs.io/en/stable/user/contributing.html#linters&#34;&gt;TorchGeo&lt;/a&gt; (and literally copying their docs), we use the following linters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://black.readthedocs.io/&#34;&gt;black&lt;/a&gt; for code formatting&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/&#34;&gt;isort&lt;/a&gt; for import ordering&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/asottile/pyupgrade&#34;&gt;pyupgrade&lt;/a&gt; for code formatting&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://flake8.pycqa.org/&#34;&gt;flake8&lt;/a&gt; for code formatting&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.pydocstyle.org/&#34;&gt;pydocstyle&lt;/a&gt; for docstrings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://mypy.readthedocs.io/&#34;&gt;mypy&lt;/a&gt; for static type analysis&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://pre-commit.com/&#34;&gt;git pre-commit hooks&lt;/a&gt; to automatically run these checks before each commit. pre-commit is a tool that automatically runs linters locally, so that you don&#39;t have to remember to run them manually and then have your code flagged by CI. You can setup pre-commit with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install pre-commit&#xA;pre-commit install&#xA;pre-commit run --all-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://geojson.io&#34;&gt;https://geojson.io&lt;/a&gt; to extract a region-of-interest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OmegaConf References for Config&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omegaconf.readthedocs.io/en/2.2_branch/usage.html?highlight=command%20line#from-command-line-arguments&#34;&gt;Passing in configs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FrontierDevelopmentLab/sat-extractor&#34;&gt;Sat-Extractor&lt;/a&gt;. Sat-Extractor has a similar goal as MetaEarth, though at the moment it has been designed to run on Google Compute Engine, and as of the start of MetaEarth, Sat-Extractor can only be used with Sen2 and LandSats out-of-the-box. By starting MetaEarth with Microsoft&#39;s Planetary Computer, MetaEarth immediately has access to their full data catalog: &lt;a href=&#34;https://planetarycomputer.microsoft.com/catalog&#34;&gt;https://planetarycomputer.microsoft.com/catalog&lt;/a&gt; (which subsumes the data accessible by Sat-Extractor plus ~100 other sources). Still, Sat-Extractor is an awesome and highly-configurable project: please use and support it if Sat-Extractor aligns with your goals =).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>