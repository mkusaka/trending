<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-15T01:36:36Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>suno-ai/bark</title>
    <updated>2023-05-15T01:36:36Z</updated>
    <id>tag:github.com,2023-05-15:/suno-ai/bark</id>
    <link href="https://github.com/suno-ai/bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔊 Text-Prompted Generative Audio Model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐶 Bark&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/J2B2vsjKuE?style=flat&amp;amp;compact=True&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/OnusFM.svg?style=social&amp;amp;label=@OnusFM&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;http://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://suno-ai.notion.site/Bark-Examples-5edae8b02a604b54a42244ba45ebc2e2&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;Suno Studio Waitlist&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-updates&#34;&gt;Updates&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-usage-in-python&#34;&gt;How to Use&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#-faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5068315/235310676-a4b3b511-90ec-4edf-8153-7ccf14905d73.png&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Bark is a transformer-based text-to-audio model created by &lt;a href=&#34;https://suno.ai&#34;&gt;Suno&lt;/a&gt;. Bark can generate highly realistic, multilingual speech as well as other audio - including music, background noise and simple sound effects. The model can also produce nonverbal communications like laughing, sighing and crying. To support the research community, we are providing access to pretrained model checkpoints, which are ready for inference and available for commercial use.&lt;/p&gt; &#xA;&lt;h2&gt;⚠ Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Bark was developed for research purposes. It is not a conventional text-to-speech model but instead a fully generative text-to-audio model, which can deviate in unexpected ways from provided prompts. Suno does not take responsibility for any output generated. Use at your own risk, and please act responsibly.&lt;/p&gt; &#xA;&lt;h2&gt;🎧 Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/suno/bark&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-Open%20in%20Spaces-blue.svg?sanitize=true&#34; alt=&#34;Open in Spaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://replicate.com/suno-ai/bark&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%C2%AE%EF%B8%8F-Open%20on%20Replicate-blue.svg?sanitize=true&#34; alt=&#34;Open on Replicate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1eJfA2XUa-mXwdMy7DoYKVYHI1iTd9Vkt?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023.05.01&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;©️ Bark is now licensed under the MIT License, meaning it&#39;s now available for commercial use!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;⚡ 2x speed-up on GPU. 10x speed-up on CPU. We also added an option for a smaller version of Bark, which offers additional speed-up with the trade-off of slightly lower quality.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;📕 &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/notebooks/long_form_generation.ipynb&#34;&gt;Long-form generation&lt;/a&gt;, voice consistency enhancements and other examples are now documented in a new &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/notebooks&#34;&gt;notebooks&lt;/a&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;👥 We created a &lt;a href=&#34;https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c&#34;&gt;voice prompt library&lt;/a&gt;. We hope this resource helps you find useful prompts for your use cases! You can also join us on &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;, where the community actively shares useful prompts in the &lt;strong&gt;#audio-prompts&lt;/strong&gt; channel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;💬 Growing community support and access to new features here:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/J2B2vsjKuE&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;💾 You can now use Bark with GPUs that have low VRAM (&amp;lt;4GB).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023.04.20&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🐶 Bark release!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🐍 Usage in Python&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🪑 Basics&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bark import SAMPLE_RATE, generate_audio, preload_models&#xA;from scipy.io.wavfile import write as write_wav&#xA;from IPython.display import Audio&#xA;&#xA;# download and load all models&#xA;preload_models()&#xA;&#xA;# generate audio from text&#xA;text_prompt = &#34;&#34;&#34;&#xA;     Hello, my name is Suno. And, uh — and I like pizza. [laughs] &#xA;     But I also have other interests such as playing tic tac toe.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&#xA;# save audio to disk&#xA;write_wav(&#34;bark_generation.wav&#34;, SAMPLE_RATE, audio_array)&#xA;  &#xA;# play text in notebook&#xA;Audio(audio_array, rate=SAMPLE_RATE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230490503-417e688d-5115-4eee-9550-b46a2b465ee3.webm&#34;&gt;pizza.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🌎 Foreign Language&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;br&gt; Bark supports various languages out-of-the-box and automatically determines language from input text. When prompted with code-switched text, Bark will attempt to employ the native accent for the respective languages. English quality is best for the time being, and we expect other languages to further improve with scaling. &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;text_prompt = &#34;&#34;&#34;&#xA;    추석은 내가 가장 좋아하는 명절이다. 나는 며칠 동안 휴식을 취하고 친구 및 가족과 시간을 보낼 수 있습니다.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/32879321/235313033-dc4477b9-2da0-4b94-9c8b-a8c2d8f5bb5e.webm&#34;&gt;suno_korean.webm&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Note: since Bark recognizes languages automatically from input text, it is possible to use for example a german history prompt with english text. This usually leads to english audio with a german accent.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🎶 Music&lt;/h3&gt;&lt;/summary&gt; Bark can generate all types of audio, and, in principle, doesn&#39;t see a difference between speech and music. Sometimes Bark chooses to generate text as music, but you can help it out by adding music notes around your lyrics. &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    ♪ In the jungle, the mighty jungle, the lion barks tonight ♪&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684766-97f5ea23-ad99-473c-924b-66b6fab24289.webm&#34;&gt;lion.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;h3&gt;🎤 Voice Presets&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Bark supports 100+ speaker presets across &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#supported-languages&#34;&gt;supported languages&lt;/a&gt;. You can browse the library of speaker presets &lt;a href=&#34;https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c&#34;&gt;here&lt;/a&gt;, or in the &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/bark/assets/prompts&#34;&gt;code&lt;/a&gt;. The community also often shares presets in &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Bark tries to match the tone, pitch, emotion and prosody of a given preset, but does not currently support custom voice cloning. The model also attempts to preserve music, ambient noise, etc. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    I have a silky smooth voice, and today I will tell you about &#xA;    the exercise regimen of the common sloth.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt, history_prompt=&#34;v2/en_speaker_1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684883-a344c619-a560-4ff5-8b99-b4463a34487b.webm&#34;&gt;sloth.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Generating Longer Audio&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;generate_audio&lt;/code&gt; works well with around 13 seconds of spoken text. For an example of how to do long-form generation, see this &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/notebooks/long_form_generation.ipynb&#34;&gt;example notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to toggle example long-form generations (from the example notebook)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2565833/235463539-f57608da-e4cb-4062-8771-148e29512b01.webm&#34;&gt;dialog.webm&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2565833/235463547-1c0d8744-269b-43fe-9630-897ea5731652.webm&#34;&gt;longform_advanced.webm&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2565833/235463559-87efe9f8-a2db-4d59-b764-57db83f95270.webm&#34;&gt;longform_basic.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;💻 Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/suno-ai/bark.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/suno-ai/bark&#xA;cd bark &amp;amp;&amp;amp; pip install . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Do NOT use &#39;pip install bark&#39;. It installs a different package, which is not managed by Suno.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🛠️ Hardware and Inference Speed&lt;/h2&gt; &#xA;&lt;p&gt;Bark has been tested and works on both CPU and GPU (&lt;code&gt;pytorch 2.0+&lt;/code&gt;, CUDA 11.7 and CUDA 12.0).&lt;/p&gt; &#xA;&lt;p&gt;On enterprise GPUs and PyTorch nightly, Bark can generate audio in roughly real-time. On older GPUs, default colab, or CPU, inference time might be significantly slower. For older GPUs or CPU you might want to consider using smaller models. Details can be found in out tutorial sections here.&lt;/p&gt; &#xA;&lt;p&gt;The full version of Bark requires around 12GB of VRAM to hold everything on GPU at the same time. To use a smaller version of the models, which should fit into 8GB VRAM, set the environment flag &lt;code&gt;SUNO_USE_SMALL_MODELS=True&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have hardware available or if you want to play with bigger versions of our models, you can also sign up for early access to our model playground &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Details&lt;/h2&gt; &#xA;&lt;p&gt;Bark is fully generative tex-to-audio model devolved for research and demo purposes. It follows a GPT style architecture similar to &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt; and a quantized Audio representation from &lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec&lt;/a&gt;. It is not a conventional TTS model, but instead a fully generative text-to-audio model capable of deviating in unexpected ways from any given script. Different to previous approaches, the input text prompt is converted directly to audio without the intermediate use of phonemes. It can therefore generalize to arbitrary instructions beyond speech such as music lyrics, sound effects or other non-speech sounds.&lt;/p&gt; &#xA;&lt;p&gt;Below is a list of some known non-speech sounds, but we are finding more every day. Please let us know if you find patterns that work particularly well on &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughter]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[sighs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[music]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[gasps]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[clears throat]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;—&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt; for hesitations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;♪&lt;/code&gt; for song lyrics&lt;/li&gt; &#xA; &lt;li&gt;CAPITALIZATION for emphasis of a word&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[MAN]&lt;/code&gt; and &lt;code&gt;[WOMAN]&lt;/code&gt; to bias Bark toward male and female speakers, respectively&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Languages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English (en)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German (de)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish (es)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French (fr)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi (hi)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Italian (it)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese (ja)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Korean (ko)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Polish (pl)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese (pt)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian (ru)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turkish (tr)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese, simplified (zh)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Requests for future language support &lt;a href=&#34;https://github.com/suno-ai/bark/discussions/111&#34;&gt;here&lt;/a&gt; or in the &lt;strong&gt;#forums&lt;/strong&gt; channel on &lt;a href=&#34;https://discord.com/invite/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🙏 Appreciation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karpathy/nanoGPT&#34;&gt;nanoGPT&lt;/a&gt; for a dead-simple and blazing fast implementation of GPT-style models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec&lt;/a&gt; for a state-of-the-art implementation of a fantastic audio codec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucidrains/audiolm-pytorch&#34;&gt;AudioLM&lt;/a&gt; for related training and inference code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt; and many other ground-breaking papers that enabled the development of Bark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;© License&lt;/h2&gt; &#xA;&lt;p&gt;Bark is licensed under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;Please contact us at &lt;code&gt;bark@suno.ai&lt;/code&gt; to request access to a larger version of the model.&lt;/p&gt; &#xA;&lt;h2&gt;📱&amp;nbsp;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎧&amp;nbsp;Suno Studio (Early Access)&lt;/h2&gt; &#xA;&lt;p&gt;We’re developing a playground for our models, including Bark.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested, you can sign up for early access &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;❓ FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;How do I specify where models are downloaded and cached?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark uses Hugging Face to download and store models. You can see find more info &lt;a href=&#34;https://huggingface.co/docs/huggingface_hub/package_reference/environment_variables#hfhome&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bark&#39;s generations sometimes differ from my prompts. What&#39;s happening?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark is a GPT-style model. As such, it may take some creative liberties in its generations, resulting in higher-variance model outputs than traditional text-to-speech approaches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;What voices are supported by Bark?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark supports 100+ speaker presets across &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/#supported-languages&#34;&gt;supported languages&lt;/a&gt;. You can browse the library of speaker presets &lt;a href=&#34;https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c&#34;&gt;here&lt;/a&gt;. The community also shares presets in &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;. Bark also supports generating unique random voices that fit the input text. Bark does not currently support custom voice cloning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Why is the output limited to ~13-14 seconds?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark is a GPT-style model, and its architecture/context window is optimized to output generations with roughly this length.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How much VRAM do I need?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The full version of Bark requires around 12Gb of memory to hold everything on GPU at the same time. However, even smaller cards down to ~2Gb work with some additional settings. Simply add the following code snippet before your generation:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;os.environ[&#34;SUNO_OFFLOAD_CPU&#34;] = True&#xA;os.environ[&#34;SUNO_USE_SMALL_MODELS&#34;] = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;My generated audio sounds like a 1980s phone call. What&#39;s happening?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bark generates audio from scratch. It is not meant to create only high-fidelity, studio-quality speech. Rather, outputs could be anything from perfect speech to multiple people arguing at a baseball game recorded with bad microphones.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>GoogleCloudPlatform/generative-ai</title>
    <updated>2023-05-15T01:36:36Z</updated>
    <id>tag:github.com,2023-05-15:/GoogleCloudPlatform/generative-ai</id>
    <link href="https://github.com/GoogleCloudPlatform/generative-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sample code and notebooks for Generative AI on Google Cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Generative AI&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Google Cloud &lt;a href=&#34;https://cloud.google.com/ai/generative-ai&#34;&gt;Generative AI&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains notebooks and content that demonstrate how to use, develop and manage generative AI workflows using &lt;a href=&#34;https://cloud.google.com/ai/generative-ai&#34;&gt;Generative AI&lt;/a&gt;, powered by &lt;a href=&#34;https://cloud.google.com/vertex-ai&#34;&gt;Vertex AI&lt;/a&gt; on Google Cloud.&lt;/p&gt; &#xA;&lt;h2&gt;Folder structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;generative-ai/&#xA;├── language/&#xA;    ├── examples/             &#xA;        ├── prompt-design/   - examples for prompts&#xA;        ├── tuning/           - examples of tuning models&#xA;├── setup-env/                - setup instructions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/&#34;&gt;Language/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/intro_generative_ai_studio.md&#34;&gt;Getting Started with Generative AI Studio without code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/intro_palm_api.ipynb&#34;&gt;Intro to Vertex AI PaLM API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/intro_prompt_design.ipynb&#34;&gt;Intro to Prompt Design&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/&#34;&gt;Examples/&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/prompt-design/&#34;&gt;Prompt Design/&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/prompt-design/ideation.ipynb&#34;&gt;Ideation&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/prompt-design/question_answering.ipynb&#34;&gt;Question &amp;amp; Answering&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/prompt-design/text_classification.ipynb&#34;&gt;Text Classifiction&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/prompt-design/text_extraction.ipynb&#34;&gt;Text Extraction&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/prompt-design/text_summarization.ipynb&#34;&gt;Text Summarization&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/tuning/&#34;&gt;Tuning/&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/generative-ai/main/language/examples/tuning/getting_started_tuning.ipynb&#34;&gt;Tuning a Foundational Model, Deploying, and Making Predictions&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setting up your Google Cloud project&lt;/h2&gt; &#xA;&lt;p&gt;You will need a Google Cloud project to use this project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/cloud-resource-manager&#34;&gt;Select or create a Google Cloud project&lt;/a&gt;. When you first create an account, you get a $300 free credit towards your compute/storage costs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cloud.google.com/billing/docs/how-to/modify-project&#34;&gt;Make sure that billing is enabled for your project&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=aiplatform.googleapis.com&#34;&gt;Enable the Vertex AI API&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setting up your Python or Jupyter environment&lt;/h2&gt; &#xA;&lt;p&gt;Please see the README in the &lt;a href=&#34;https://github.com/GoogleCloudPlatform/generative-ai/tree/main/setup-env&#34;&gt;setup-env&lt;/a&gt; folder for information on using Colab notebooks and Vertex AI Workbench.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions welcome! See the &lt;a href=&#34;https://github.com/GoogleCloudPlatform/generative-ai/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/GoogleCloudPlatform/generative-ai/issues&#34;&gt;issues page&lt;/a&gt; to provide feedback or submit a bug report.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This repository itself is not an officially supported Google product. The code in this repository is for demonstrative purposes only.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>menloparklab/cohere-weaviate-wikipedia-retrieval</title>
    <updated>2023-05-15T01:36:36Z</updated>
    <id>tag:github.com,2023-05-15:/menloparklab/cohere-weaviate-wikipedia-retrieval</id>
    <link href="https://github.com/menloparklab/cohere-weaviate-wikipedia-retrieval" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A backend API to perform search over Wikipedia using LangChain, Cohere and Weaviate&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Project Name&lt;/h1&gt; &#xA;&lt;p&gt;Cohere Weviate Wikipedia Retrieval using LangChain&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;A backend API to perform search over Wikipedia using LangChain, Cohere and Weaviate&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To use this project, you will need to have the following installed on your machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.8 or above&lt;/li&gt; &#xA; &lt;li&gt;pip&lt;/li&gt; &#xA; &lt;li&gt;virtualenv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;To install and run this project on your local machine, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository onto your machine using the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/menloparklab/cohere-weviate-wikipedia-retrieval&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a virtual environment for the project using the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Activate the virtual environment using the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;source venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install the project dependencies using the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the root directory of the project and add your API keys. You can use the &lt;code&gt;.env.copy&lt;/code&gt; file as a template.&lt;/p&gt; &lt;p&gt;Weaviate api keys and url are left intentionally. These are read only api provided by Weaviate for demo purposes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To test your output and results, use the provided jupyter notebook. You can easily run this in Colab as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To start the API routes using Flask, run the following command:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;gunicorn app:app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Below are the endpoints and examples to call them&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/retrieve&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This endpoint generates an answer to a query using retrieval-based QA. To use this endpoint, send a POST request to &lt;code&gt;http://&amp;lt;host&amp;gt;/retrieve&lt;/code&gt; with the following JSON payload:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;query&#34;: &#34;&amp;lt;your query&amp;gt;&#34;,&#xA;    &#34;language&#34;: &#34;&amp;lt;language&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;query&lt;/code&gt; field should contain the query for which you want to generate an answer. The &lt;code&gt;language&lt;/code&gt; field is optional and should be set to the language of the query. If the &lt;code&gt;language&lt;/code&gt; field is not set, the default language is English.&lt;/p&gt; &lt;p&gt;Example JSON:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;query&#34;: &#34;What is the capital of France?&#34;,&#xA;    &#34;language&#34;: &#34;english&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/retrieve-list&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This endpoint returns a list of most similar embeddings to the query using the vectorstore. To use this endpoint, send a POST request to &lt;code&gt;http://&amp;lt;host&amp;gt;/retrieve-list&lt;/code&gt; with the following JSON payload:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;query&#34;: &#34;&amp;lt;your query&amp;gt;&#34;,&#xA;    &#34;k&#34;: &amp;lt;k&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;query&lt;/code&gt; field should contain the query for which you want to generate an answer. The &lt;code&gt;k&lt;/code&gt; field is optional and should be set to the number of most similar embeddings you want to retrieve. If the &lt;code&gt;k&lt;/code&gt; field is not set, the default value is 4.&lt;/p&gt; &lt;p&gt;Example JSON:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;query&#34;: &#34;What is the capital of France?&#34;,&#xA;    &#34;k&#34;: 4&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/retrieve-compr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This endpoint generates an answer to a query using Contextual Compression. To use this endpoint, send a POST request to &lt;code&gt;http://&amp;lt;host&amp;gt;/retrieve-compr&lt;/code&gt; with the following JSON payload:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;query&#34;: &#34;&amp;lt;your query&amp;gt;&#34;,&#xA;    &#34;k&#34;: &amp;lt;k&amp;gt;,&#xA;    &#34;top_n&#34;: &amp;lt;top_n&amp;gt;,&#xA;    &#34;language&#34;: &#34;&amp;lt;language&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;query&lt;/code&gt; field should contain the query for which you want to generate an answer. The &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;top_n&lt;/code&gt; fields are optional and should be set to the number of most similar embeddings you want to retrieve and the number of compressed documents you want to consider, respectively. If the &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;top_n&lt;/code&gt; fields are not set, the default values are 9 and 3, respectively. The &lt;code&gt;language&lt;/code&gt; field is optional and should be set to the language of the query. If the &lt;code&gt;language&lt;/code&gt; field is not set, the default language is English.&lt;/p&gt; &lt;p&gt;Example JSON:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;query&#34;: &#34;What is the capital of France?&#34;,&#xA;    &#34;k&#34;: 9,&#xA;    &#34;top_n&#34;: 3,&#xA;    &#34;language&#34;: &#34;english&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/retrieve-compr-list&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This endpoint returns a list of most similar embeddings to the query using Contextual Compression. To use this endpoint, send a POST request to &lt;code&gt;http://&amp;lt;host&amp;gt;/retrieve-compr-list&lt;/code&gt; with the following JSON payload:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;query&#34;: &#34;&amp;lt;your query&amp;gt;&#34;,&#xA;    &#34;k&#34;: &amp;lt;k&amp;gt;,&#xA;    &#34;top_n&#34;: &amp;lt;top_n&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;query&lt;/code&gt; field should contain the query for which you want to generate an answer. The &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;top_n&lt;/code&gt; fields are optional and should be set to the number of most similar embeddings you want to retrieve and the number of compressed documents you want to consider, respectively. If the &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;top_n&lt;/code&gt; fields are not set, the default values are 9 and 3, respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/chat-no-history&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This route allows the user to chat with the application without any historical chat context. It accepts the following parameters in a JSON request body:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: The user&#39;s query. Required.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;k&lt;/code&gt;: An integer value for the number of results to retrieve from the model. Optional, defaults to 9.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;top_n&lt;/code&gt;: An integer value for the number of top search results to consider for generating an answer. Optional, defaults to 3.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The route then uses the &lt;code&gt;compression&lt;/code&gt; function to retrieve the top &lt;code&gt;k&lt;/code&gt; results from the model, and constructs a prompt using the user&#39;s query. The prompt is passed to the machine learning model, and the output is parsed using a &lt;code&gt;parser&lt;/code&gt; object. If a language is detected in the output, it is used for subsequent queries, otherwise the default is English. The &lt;code&gt;RetrievalQA&lt;/code&gt; class is used to generate a response using the &lt;code&gt;qa&lt;/code&gt; object, and the search result is returned as a JSON response.&lt;/p&gt; &lt;p&gt;Example JSON&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;query&#34;: &#34;What is the capital of France?&#34;,&#xA;    &#34;k&#34;: 5,&#xA;    &#34;top_n&#34;: 2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Example Response&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;search_result&#34;: &#34;Paris is the capital of France.&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/chat-with-history&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This route allows the user to chat with the application using historical chat context. It accepts the same parameters as the previous route:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: The user&#39;s query. Required.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;k&lt;/code&gt;: An integer value for the number of results to retrieve from the model. Optional, defaults to 9.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;top_n&lt;/code&gt;: An integer value for the number of top search results to consider for generating an answer. Optional, defaults to 3.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;In addition, this route maintains a memory of past conversations using the &lt;code&gt;ConversationBufferMemory&lt;/code&gt; class, and generates responses using the &lt;code&gt;ConversationalRetrievalChain&lt;/code&gt; class. The memory key for this route is set to &lt;code&gt;&#34;chat_history&#34;&lt;/code&gt;. The search result is returned as a JSON response.&lt;/p&gt; &lt;p&gt;Example Json&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;query&#34;: &#34;What is the capital of Spain?&#34;,&#xA;    &#34;k&#34;: 3,&#xA;    &#34;top_n&#34;: 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Example Response&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;search_result&#34;: &#34;The capital of Spain is Madrid.&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>